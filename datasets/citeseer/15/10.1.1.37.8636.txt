necessary sufficient conditions information causal message ordering optimal implementation ibm box research triangle park nc singhal department computer information science ohio state university neil avenue columbus oh formulates invariants represent necessary sufficient conditions information required enforcing causal ordering 
presents optimal algorithm enforcing causal message ordering 
algorithm works non fifo channels allows process multicast arbitrary dynamically changing process groups 
show algorithm satisfies invariants optimal space complexity message overheads space complexity message logs 
general space complexity causal message ordering shown number nodes system 
algorithm achieves optimality transmitting bare minimum causal dependency information specified necessity condition encoding scheme represent transmit information 
key words causal message ordering distributed systems optimal synchronization concurrency 
background previous distributed system consists collection geographically dispersed autonomous sites connected communication network 
sites share memory communicate solely message passing 
message propagation delay finite unpredictable pair sites messages may delivered order 
common physical clock 
underlying communication medium reliable site crashes fail manner 
processes system 
loss generality assume single process runs single site 
execution process modeled types events message send message delivery internal events 
internal event represents local computation process message send delivery events constitute establishment cause effect relationships processes 
event local time process denoted 
cause effect relationship captured lamport happened relation gamma 
defines partial order events distributed execution 
definition happens relation called causality relation denoted gamma defined conditions 
gamma 

gamma 
send delivery message node 
gamma 
gamma 
gamma 
asynchronous execution processes unpredictable communication delays create nondeterminism distributed systems complicates design verification analysis distributed programs 
simplify design development distributed applications idea causal message ordering introduced joseph birman 
definition causal ordering messages send gamma 
send destination causal ordering ensures delivery gamma 
delivery 
send events messages destined process causally ordered deliveries satisfy ordering 
causal ordering provides important distinguish arrival message delivery 
arrival message signifies communication network placed message buffer receiving process 
delivery message means process taken message processing built message synchronization reduces nondeterminism distributed computation 
causal ordering provides equivalent fifo channel property global communication network level sequential send messages communication channel replaced causally related sends messages going destination communication network 
note causal ordering property strictly stronger fifo property 
concept causal ordering considerable interest design distributed systems finds applications domains updates replicated data global state collection distributed shared memory teleconferencing multimedia systems fair resource allocation 
causal message ordering requires appending control information message enforce causal order 
recipient process message uses information determine undelivered messages causally precede message delays delivery message messages delivered 
previous isis system implementation message carries history messages causally precede 
due redundant information scheme resilient processor crashes complex mechanism required prevent unbounded growth control information 
case volume control information huge 
algorithm similar carries message ids entire messages control information 
furthermore unnecessary control information sent sending host sent 
control information schiper causal ordering algorithm consists vectors length upto 
information represents messages sent causal past known delivered 
receiving site uses vector time determine messages represented control vectors need delivered current message delivered 
causal ordering algorithm raynal schiper toueg attaches matrix sent size theta message 
sent indicates number messages known sent algorithm uses array deliv size deliv number messages node delivered sender 
clearly message overhead algorithms 
overhead reduced restricted multicasting environments nice properties underlying communication medium assumed 
implementation nice properties results exchange additional messages typically incurs additional delays delivery messages 
causal multicast overlapping groups implementation isis process maintains vector group belongs group 
vector group informs process number messages multicast various members group 
process sends message appends vectors message 
clearly method get expensive groups large sizes maximum number groups gamma 
causal multicast overlapping groups algorithm raynal process keeps scalar group appends vector size equal number groups message algorithm assumes synchronous model distributed execution 
execution proceeds synchronized phases requires additional resynchronization messages 
causal ordering algorithms algorithm optimal respect message delivery time message may wait resynchronization messages 
algorithm desirable situations additional message traffic delays tolerated reduced message overhead 
rodrigues exploit topology underlying communication network reduce size control information transferred messages 
algorithm proposed require knowledge topology underlying network uses dynamic communication pattern structure computation reduce message overhead 
algorithm tracks direct predecessors message predecessors results savings message overhead efficient previous ones 
algorithm designed group communication groups fixed priori reduction message overhead partly messages sent group 
implementation tracks direct predecessors inefficiently consequently tracks indirect predecessors 
existing algorithms higher message overhead storage required optimal algorithm 
algorithms attempt save message overhead log size assuming certain topologies communication patterns message overhead extra storage needed maintain causal ordering avalanche cumulative effect 
objectives message overhead due control information existing causal ordering algorithms prohibitively large specially number processes large 
address fundamental question minimum amount information regarding messages causally precede message necessary propagated stored enforce causal ordering 
answer question formulating necessary sufficient conditions information 
characterization sufficient necessary conditions information 
discuss optimality conditions causal ordering algorithms terms size control information appended messages enforcing causal order terms size local log storage 
optimal causal ordering algorithm appends amount control information message 
algorithm optimal amount storage space uses local logs 
proposed algorithm maintain transmit theta matrix vectors length enforce causal ordering 
stores transmits bare minimum information required enforce uses encoding scheme represent information 
rest organized follows section presents notations definitions 
section presents constraints propagation information achieve optimality justifies proofs examples 
section discusses necessary sufficient conditions information causal ordering 
section presents optimal causal ordering algorithm 
section correctness algorithm proved 
section proves optimality algorithm 
section results complexity causal ordering problem 
section presents optimization channels fifo gives optimal algorithm fifo channel environment 
section concludes 
notations henceforth process referred node 
tracking messages delivered messages delivered done identifier sender message timestamp multicast 
node maintains counter clock incremented occurrence local communication event 
require lamport scalar clocks vector matrix clocks algorithm 
denote event local time node message sent local time denoted destinations multicast denoted dests 
subscripts dropped ambiguity 
send delivery events message respectively denoted send delivery 
delivery event delivered node information certain messages sent causally message send carried message enforce information carried message denoted dests dests dests denotes destinations known delivered ii guaranteed delivered causal order 
multiple collectively carried message denoted set om subscripts dropped necessary clear context 
similarly information certain messages sent causally local event stored local logs denoted log node sent messages enforce information stored node log denoted dests 
dests dests denotes destinations known delivered ii guaranteed delivered causal order 
subscripts dropped necessary clear context 
arrive boolean true iff arrived delivered boolean true iff delivered phrase receive message means arrival eventual delivery message 
define function len send send returns maximum number send events paths send send including send excluding send destination 
define function len send send returns maximum number send events paths send send 
length path events number send events path events 
define relation gamma 
events follows gamma 
iff gamma 

causal past event set events gamma 

causal event set events gamma 

achieving optimality show section general message overhead storage complexity enforcing 
enforcing having message overhead local storage understood simply theta matrix explicit source destination timestamp tracking messages delivered sent maintain information local storage transmit messages 
upper bound storage message overheads proposed algorithm average storage message overheads smaller 
algorithm optimal sense maintains transfers bare minimum information necessary enforce causal ordering 
achieve optimality identifying constraints propagation information called propagation constraints curtail propagation redundant information earliest instant 
node stores transfers bare minimum information accordance propagation constraints uses encoding represent information 
delivery condition order ensure safety algorithm message delivered node messages sent causally delivered node 
achieved having message carry list messages sent causally receiving node delivered messages destined node delivered node 
entry log node indicates corresponding message reach node message sent causally message delivered node 
message sent node carries om log set identifiers messages sent causally known delivered guaranteed delivered causal order respect clearly enforce arrived message delivered node messages sent node causally delivered 
definition delivery condition message arrived node delivered node messages identified om node destinations delivered node delivered message identifiers om merged log log node tracks messages sent time known delivered guaranteed delivered causally message sent henceforth 
message sent carries log log om propagation constraints definition propagation constraints dests 
information propagates causal paths starting event 
information propagate upto upto closest event path true pc gamma 
dests gamma 
gamma 
dests 
information dests propagates message sent message sent causally messages multicast destinations message sent pc gamma 
gamma 
dests pc gamma 
delivered causal past 
pc gamma 
delivered 
events identified called constraint propagation events cpes 
explanation propagation constraints propagation constraints specify different ways identify events events upto upto information dests propagate identification done path originating 
events cpes 
constraint pc states path earliest event path sends message ii send time causal causal past explanation propagation constraint pc 
event causal past event causal event causal path containing event send dests 
event path cpe propagation constraints 
specifically event path contains past event delivered pc requires carry information dests node 
hand constraint pc states path earliest event path exists send causal past event causal event causal path containing event send dests 
event path cpe propagation constraints 
specifically event path contains past event delivered event node knows respect destination exists dependency created event dependency created event 
scenario shown 
constraint pc explained 
pc states path earliest event path delivered holds event lies causal past event 
event path cpe propagation constraints 
specifically event path contains past message send destination 
node knowledge message delivered node time causal causal past explanation propagation constraint pc 
hand constraint pc similar pc states node destination delivered event 
note cpes dests need concurrent 
note pc pc specify cpes events upto upto information dests propagates pc requires event cpe pc send information dests sent requirement implicit henceforth stated information propagates upto upto cpes 
definition information dests traverses cpe dests redundant information 
definition fixed points propagation constraints fixed point propagation information dests event fp gamma 
dests gamma 
gamma 
dests event delivery fp gamma 
delivered event delivery 
event fixed point information dests 
events past fixed point events concurrent fixed points information dests 
fixed point fp denotes message guaranteed delivered causal order respect message destination sent information dests propagates propagation constraints 
causal delivery respect multicasts automatically ensures causal delivery respect multicasts multicasts destination carry information dests 
implication pc pc fixed point fp dests lies past cpe pc information dests replaced causally information fixed point fp 
fixed point fp denotes message known delivered event destination 
delivered causal order respect multicasts 
multicasts destination carry information dests 
significance fixed point propagation information dests information dests traverses upto fixed point 
causal fixed point information need exist 
multiple fixed points information concurrent 
definition note fixed point fp delivery fp gamma 

fixed point fp gamma 
gamma 
delivery dests delivery condition 
fixed points fp concurrent 
corollary information dests traverses upto upto earliest events paths originating causal past events contains fixed point propagation information dests events fixed points 
proof follows definitions 
corollary specifies bare minimum information transmitted enforce useful design optimal algorithm 
information discarded earliest event causal past contains fixed point propagation information event fixed point 
earliest events cpes 
significance relation fixed points cpes corollary cpe dests fixed point dests earliest event path originating causal fixed point dests 
proof follows definitions 
corollary implies cpe event upto upto information dests propagates fixed point dests earliest event path lies fixed point 
cpes may causally related lie fixed point represent information traversed different paths fixed point 
causally earliest events intersection events time node node node node node node example propagation information node destination multicast 
causal past contains event information destination multicast propagates example illustrate propagation constraints 
path originating events fixed points dests form set cpes dests 
information dests propagates upto earliest events fixed point dests 
illustrated 
example illustrate propagation constraints illustrates operation propagation constraints 
consider various conditions curtail propagation information dests 
flow information depicted thick arrows lines 
causal delivery node marked dotted arrows lines 
ffl information dests sent messages addition included om sent node 
ffl due propagation constraint pc information sent sent node dests om sent dependency node created 
information replaced information dests 
note fixed point 
ffl information added log event 
due propagation constraint pc information removed replaced information dests 
updated information turn replaced dests message multicast event fixed point dests pc 
ffl due propagation constraint pc dests existed log time replaced dests delivered 
ffl information dests added log event propagated messages sends causally 
note fixed point information propagation constraint pc 
ffl information dests added log 
due propagation constraint pc removed delivered 
causal past contains knowledge delivery knowledge available log information dests delivered added log propagation constraint pc 
putting illustrates propagation constraints collectively govern flow information dests 
information flows causal paths starting upto events cpes 
paths information flows indicated thick arrows 
observed information propagates upto upto earliest events lie fixed point information ii fixed points 
fixed points marked hollow circle black dot 
events cpes pc event path events cpe pc pc pc pc 
fixed points dests 
events information gets replaced information dests dests respectively outgoing paths message sent sent carry information dests pc 
illustrated 
messages sent indicated dashed arrow 
paths original information dests replaced information message sent causally indicated thin solid arrows paragraph explain paths terminate 
send events multicast destinations marked hollow circle hollow circle black dot 
events marked black solid circles cpes pc 
events events causal information dests deleted 
causal past contains event cpe pc 
paths originating events marked black solid circles indicated thin solid arrows paths terminate events causal past contains information delivery events cpes pc marked black solid circle fixed point hollow circle black dot collectively identify group paths 
group paths unique fixed point fp multiple groups paths 
path node destination multicast info 
destination multicast replaced causally info 
message sent node delivered causal past fixed point pc pc destination multicast event cpe pc event cpe pc message node 

effects propagation constraints dests 
arrow arrow represents hop message path 
event cpe pc 
paths originating carry information dests known delivered paths marked dotted arrows 
events marked squares cpes pc lies causal past 
paths originating events carry information dests marked dotted arrows 
event fixed point information dests 
events head thick solid arrows cpes 
consider path thin solid arrows passing events marked hollow circles 
dests gets replaced dests 
information traverses chosen path gets progressively information messages sent consider consecutive events marked hollow circles path information dests may propagate way alternate path intermediate send event case event cpe pc pc respect dests 
prove information propagates upto cpes defined propagation constraints delivery condition violated 
theorem propagation constraints pc gamma pc delivery condition ensure proof dests 
exist event send dests send gamma 
send 
possibilities relation fixed point dests send 

event send causal fixed point information dests fixed point cpe information pc pc lies past 
dests sent propagation constraints pc pc corollary 
delivery condition definition guarantees delivered 
event send causal fixed point dests fixed point induction variable len show delivered note cpe pc pc cpe pc pc 
len base case event send causal fixed point fp delivered event send fixed point type fp dests pc cpe dests pc 
delivery condition definition pc guarantees delivered causal order respect len assume hypothesis len send send delivered holds 
len send send gamma 
send gamma 
send dests len send send induction assumption delivered guaranteed delivered causality transitive burden proof show delivered guaranteed delivered note len send send 
possibilities exist fixed point fp dests lies causal past delivered ot past delivered event send 
fixed point fp dests 
delivery condition definition pc guarantees delivered causal order respect cases theorem holds 
show information propagate upto cpes delivery condition hold violated 
theorem propagation constraints pc gamma pc delivery condition necessary ensure proof loss generality event sent message causally 
loss generality assume event ffl event lies causal send causal past cpe dests pc pc pc pc 
assumption propagation constraints pc pc information dests reach 
ffl event cpe dests pc pc pc 
ffl message send dests previous assumptions follows cpe dests pc 
propagation constraint pc cpe pc dests sent assumptions imply event causal past delivered ii message causal send causal past destination causes loss generality argument applied 
loss generality dests 
assumptions shown propagation constraints violated violated 
specifically ffl upto part propagation propagation constraints pc pc violated information dests reach 
show violates ffl part pc specifies information dests sent message violated show violated 
assume arrived arrives proof parts 

information dests propagate upto propagation constraints cpe dests pc propagate information propagation constraint pc despite delivery condition violated 
control information dests reach cpe dests pc send control information sent accompanied information dests 
delivered 
delivery condition hold propagation constraints hold violated 
accompanied control information dests 
despite information delivery arrival prevented delivery condition exist 
delivered cases violated 
propagation constraints delivery constraint necessary enforcing articulation points definition fixed points propagation information dests proposed shortest distance information dests propagate provide adequate information enforce actual message pattern computation independent information sent algorithm 
dual fixed points define articulation points derived fact information dests propagate upto certain event 
articulation point denotes causally earliest send events possible causal chains propagate information dests destinations 
information propagated replaced information causally message sent ii delivered message sent destination multicast articulation point propagate information 
articulation point defined actual flow control information caused algorithm 
definition rest fact dests carried om represented case dests om dests case ii om case states contained dests carried om case ii states carried om altogether 
definition articulation point articulation point send respect event send causal send ffl case dests om dests case ii om event send chain send gamma 
send gamma 
send satisfying 
case dests om sent node dests case ii om sent node dests 
send gamma 
send gamma 
send case dests om sent node dests case ii om sent node dests 
send articulation point send information dests provided messages multicast causally causally propagate information dests destinations information propagated destinations dests 
note may exist multiple articulation points send respect information dests articulation points concurrent 
significance relation fixed points articulation points algorithm satisfies upto conditions propagation constraints pc gamma pc correct algorithm existence articulation point implies existence fixed point articulation point causal past 
algorithm satisfies upto conditions propagation constraints pc gamma pc optimal existence articulation point dests implies articulation point fixed point 
information encoding enforcing requires information messages sent past propagation constraints dictate information needs carried messages upto event computation 
discuss encode information efficiently explicit implicit tracking messages past 

explicit tracking tracking source timestamp destination information messages guaranteed delivered done explicitly dests field entries local logs nodes dests field entries messages 
sets dests dests contain explicit information destinations guaranteed delivered known delivered 
information dests propagated upto upto cpes viz earliest events causal paths known delivered guaranteed delivered redundant information definition stored logs propagated messages 

implicit tracking tracking delivered messages messages guaranteed delivered performed implicitly 
information messages delivered guaranteed delivered deleted cpes information propagated redundant far enforcing concerned 
semantics information useful determining information carried messages stored logs nodes redundant purged 
semantics needs implicitly stored propagated 
track messages delivered guaranteed delivered explicitly storing information 
derive existing explicit information messages guaranteed delivered examining dests dests part explicit information 
types implicit absence node id destination information dests dests dests implicitly contains information message delivered guaranteed delivered clearly dests dests implies message delivered guaranteed delivered destinations dests 
entry dests maintained implicit information viz known delivery guaranteed delivery destinations multicast useful purge redundant information cpes propagation constraints 
note dests dests fixed point dests lie past corollaries 
preclude cpe information causal 
identify cpes dests maintained propagated 
note distributed computation evolves entries dests may exist node log message may carrying entries dests 
second implicit tracking uses mechanism prevent proliferation entries 
mechanism observation multicasts log log 
likewise message dests node deleted log provided log presence log automatically implied presence entry log multicast exist log dests implicitly exists log iff log result second implicit tracking mechanism node keep message carry entries type dests log 
note node keep entry type highest timestamp log sender node holds messages 
information tracked implicitly live propagates explicit information om propagates useful purging information explicitly carried om stored logs entries delivered destinations message messages om propagates node implicit information dests eliminate redundant information dests log ii implicit information dests log eliminate redundant information dests iii implicit information eliminate redundant information log om iv implicit information eliminate redundant information om log nonredundant information remains om log merged updated log necessary sufficient conditions sufficient conditions information propagation constraints phrase sufficient conditions information enforce propagation constraints specify information travel upto upto certain events causal path 
constraints upto part specifies sufficient conditions information propagation correct algorithm nonoptimal algorithm information may propagate upto specifications optimal algorithm information propagates upto events specified propagation constraints 
message sent information event adequately retained propagated message sent causally delivered node delivered node 
message carry adequate information messages sent causally sent known delivered ii guaranteed delivered causal order 
similarly recipient store corresponding information time 
clearly information messages sent causal past sufficient 
formalize sufficiency condition precisely 
information message sent dropped current log control information message hold 
causal past contain information message sent causally propagation constraints pc pc 
causal past contain information delivery propagation constraints pc pc 
item false causal delivery message respect ensure causal delivery message respect causally delivered respect ensured propagation constraints see theorem 
information dests need carried stored dictated propagation constraints 
represents old transitive dependency represents new direct dependency replaces old 
second item false need carry information dests propagation constraints pc pc see theorem 
items true known delivered guaranteed delivered violating information carried enforce see theorem 
conditions sufficiency conditions information transmitted ensure viz node delivered message messages sent causally message delivered node 
sufficiency conditions expressed invariant represent rephrasing upto part propagation constraints 
invariant dests send gamma 
send dests om om sent node send gamma 
send gamma 
send dests dests om sent prove correctness algorithm shown satisfies invariant information transmitted 
proof section identify articulation point send respect chosen show articulation point implies existence fixed point dests causal past articulation point 
invariant corresponds pc gamma pc 
invariant show safety liveness algorithm conjunction delivery constraint definition 
proving safety entails showing information propagated invariant correctly regulate message delivery ensure proving liveness entails showing message eventually delivered 
necessary condition information upto part propagation constraints specifies minimum information propagation guarantee optimally 
propagation constraints formalize necessary conditions information dests dropped current log control information message 
causal past contains information message sent causally 
causal delivery message sent causally respect ensures causal delivery respect causal delivery respect guaranteed guaranteed propagation constraints see theorem 
requirement delivery older transitive dependency automatically satisfied requirement delivery satisfied 
causal past contains information delivery message propagation constraints pc pc 
deletion information dests lead violation corresponding messages delivered pc pc guaranteed delivered pc pc violating theorem showed propagation constraints required enforce necessity conditions optimality correspond upto part propagation constraints expressed invariant 
states information currently carried messages stored nodes fixed point information belongs causal past 
invariant dests send gamma 
send ffl dests om om om sent nodes dests gamma fdg send gamma 
send gamma 
send dests dests ffl dests om om send gamma 
send gamma 
send dests ffl dests om om send gamma 
send gamma 
send ffl dests om om send gamma 
send gamma 
send delivery gamma 
send prove optimality correct algorithm burden proof lies showing invariant satisfied redundant information definition propagated 
algorithm shown satisfy invariant section identifying fixed points showing messages sent fixed point carry information past fixed point upto part propagation constraints satisfied 
addition shown information transmitted 
optimal algorithm section formal description algorithm followed explanation various steps algorithm 
algorithm algorithm uses symbol gamma denote assignment 
procedures snd rcv executed atomically 
data structures clock gamma local counter clock sr gamma sr timestamp msg 
delivered log clock dests gamma entry denotes message sent causal past clock dests set remaining destinations known clock delivered guaranteed delivered causal order 
snd sends message dests 
clock gamma clock 
dests om gamma log om denotes om clock om modify dests follows dests gamma dests gamma dests dests dests gamma dests gamma dests dests send clock dests om 

log dests gamma dests gamma dests send implicitly ensures messages log causally delivered dests 
execute rcv purge log dests 
add clock dests log rcv receives message dests om 
tm om tm dests wait sr ensure messages sent causally delivered 

clock gamma clock deliver sr 
add dests om tm om tm dests gamma tm dests gamma fig eliminate redundant causal dependency message represented tm sent 
merge om log eliminating redundant entries 
step implicit tracking delivered messages 
tm om log mark tm deletion log mark old members om deletion mark deletion ts om mark old members log deletion delete elements marked deletion om log delete need retained log tm om dests gamma dests tm dests delete destinations delivery constraint satisfied guaranteed satisfied delete tm om log gamma log om merge om log 
eliminate old dependency sender destination pair 
sender node entries log set integers covered dests gamma vector type clock dests gamma insert log decreasing timestamp order sorted var var dests gamma var dests gamma covered dests covered dests gamma var dests covered dests replace entries log corresponding entries 
purge older entries dests log dests log delete explanation algorithm explain steps algorithm 
ideas steps snd rcv rcv unique algorithm 
ideas steps snd rcv correspond notions literature mentioned explanation steps novelty proposed steps deduce maintain implicit information bare minimum information elaborate theta arrays store transfer information 
steps discussed 

snd local knowledge current multicast dests member dests om deleted sent destinations current multicast deleted member represents indirect dependency transitively satisfied respect messages sent causal propagation constraints pc pc 
dests 
delivered message send message nodes dests 
fx yg dests dests sufficient ensure delivered sufficient send information dests dests gamma fxg destinations dests om sent 
propagation constraint pc delivery condition ensure delivered delivered send node say dests dests directly transitively 
message arrives contain information dests 
propagation constraints delivery condition ensure delivered note delivery ensures delivery occurred delivery condition pc ffl sent information dests dests gamma fyg destinations ffl sent information dests dests gamma fxg destinations example snd dests log dests 
contents dests om sent ffl node dests ffl node dests ffl node dests ffl nodes dests 
snd local knowledge current multicast members dests deleted destinations current multicast 
deleted members represent indirect dependencies transitively satisfied respect messages sent causal current multicast 
ensured propagation constraints pc pc 
dests 
delivered message send message nodes dests 
sent sufficient store log information dests dests destinations dests log 
inserted log sent 
delivery destinations dests dests message sent causally guarantees delivery destinations message sent causally example snd dests log multicast dests 
time multicast dests updated dests inserted log notion tracked direct dependencies context single group communication 

rcv arrive maxfx om messages set fm om known delivered guaranteed delivered dests 
time delivered log om deleted 
value represents greatest lower bound timestamps messages sent om tracked enforce sender message similarly time delivered maxfx log messages set fm log known delivered guaranteed delivered dests 
om log deleted 
value represents greatest lower bound timestamps messages sent log tracked enforce known example rcv arrive entries form om messages sent node dependencies remain satisfied 
entries form log messages sent node dependencies remain satisfied 
scenario exists just delivery rcv combining information deleted 

rcv having deleted outdated dependency information messages described dependency information log om merged 
aspects merging described 
aspect merging deals merging information contained log om destinations message delivered 
node delivered information om constraint needs satisfied delivery nodes dests 
dests requirement delivered message sent causally henceforth exist 
similarly constraints need satisfied delivery nodes dests 
follows constraints need satisfied delivery nodes dests dests 
constraints delivery need satisfied delivery nodes dests dests 
example rcv example previous item dests dests dests updated second aspect merging deals merging information contained log om message delivered remaining destinations log achieved simply doing union current states log om 
rcv message sent causally destination carries information message 
event entry dests deleted dests exist log dests implicitly carries older dependency delivery dests respect messages sent causally 
older dependency implicit automatically satisfied dependency delivery dests satisfied respect messages sent causally 
general notion theta array representing timestamp latest message sent source destination pair stored information explicitly deduce represent information implicitly bare minimum information specified propagation constraints 
example rcv dests dests dests updated 
rcv log dests delete represents redundant information 
retained represents implicit greatest lower bound messages sent tracked rcv 
correctness proof section show certain properties algorithm correctness proof 
prove correctness algorithm shown theorem section algorithm satisfies invariant information transmitted 
done follows identify articulation point send respect chosen show articulation point implies existence fixed point dests causal past articulation point 
invariant corresponds pc gamma pc 
section invariant conjunction delivery constraint definition show safety liveness algorithm 
proving safety entails showing information propagated invariant correctly regulate message delivery ensure proving liveness entails showing message eventually delivered 
algorithm properties identify properties algorithm correctness proof optimality proof 
lemma states sender node destination node belongs dests entry log node 
lemma dests log value proof lemma holds initially 
snd added snd case dests current multicast log deleted dests 
lemma holds execution snd 
procedure rcv rcv ensures dests dests deleted dests 
lemma holds execution rcv 
define function timestamps messages 
definition function ts follows ffl ts log max log ffl ts om max om ts log highest value timestamp messages multicast known information log ts om highest value timestamp messages multicast known information om function useful deleting redundant information messages multicast event represented timestamp 
significance ts log follows 
dependencies originating node explicitly included implicitly included semantics dependencies satisfied 
term represents implicitly greatest lower bound timestamps dependencies originating satisfied guaranteed satisfied 
unsatisfied dependencies explicitly expressed single value scheme allows implicit representation information dependencies originated satisfied 
significance ts om 
lemma states sender node node timestamp ts log defined decreases function time 
lemma ts log monotonic continuous nondecreasing function time 
proof initially log ts log 
value ts log presently scenarios potentially trigger change ts log ffl sends message clock snd dests may 
rcv invoked 
rcv value ts log unchanged 
addition snd ts log gets updated clock ffl message arrives 
rcv om log entries merged seen ts log gets updated greater current value ts om 
rcv rcv change value 
follows ts log monotonic nondecreasing continuous 
lemma counterpart lemma 
states timestamp ts om ts log encountered chain messages intervening events nodes computation respectively decreases function time 
lemma send gamma 
gamma 
send chain value ts om ts log encountered chain ffl message sent chain ffl node events chain monotonic continuous nondecreasing function chain 
proof consider consecutive send events chain 
lemma exist ts log currently sent ts om node delivered time ts log node delivered rcv sets ts log maximum rcv rcv value unchanged 
time sends message chain lemma ts log max snd ts om ts log max 
argument holds consecutive members chain 
lemma follows 
definition set monotonic nonincreasing element added set initialized 
lemma states contents dests monotonically nonincreasing function time log node insertion local log 
lemma set dests log node monotonic nonincreasing 
proof node inserts log accord 
node changes including added deleted situations 
snd destinations current multicast deleted dests log elements added dests 
procedure snd violate lemma 

om arrives scenarios exist log step rcv ensures dests gamma dests dests 
elements added dests 
log inserted log log rcv 
burden proof lies showing existed log 
assume existed log deleted 
happened ways ffl rcv time dests 
lemma follows currently ts log contradicts assumption nonexistence item 
ffl rcv message delivered om om 
om log merged rcv ts log lemma follows currently ts log contradicts assumption nonexistence item 
inserted log time sends snd 
sends message elements dests may deleted snd 
procedure rcv elements added dests 
deleted log reinserted 
deleted rcv rcv 
cases time deleted exists inserted log lemma rcv follows reinserted log om delivered 
lemma holds 
lemma counterpart lemma states contents dests dests encountered chain originating messages intervening events nodes monotonically nonincreasing 
lemma chain send gamma 
gamma 
send sets dests dests monotonic nonincreasing chain ffl om message sent chain ffl log node lies chain 
proof follows lemma facts intermediate node ffl arrives om chain inserted log modifies existing log dests gets modified nonincreasing manner rcv 
lemma includes case reinserted previously deleted 
ffl lemma dests monotonic nonincreasing log ffl snd message sends contain dests modified nonincreasing manner om ffl note dests log rcv deleted ts log messages sent chain local log node encountered chain dests om dests log deleted local log node 
ffl note dests deleted log rcv messages sent chain local log node encountered chain hold ts om ii ts log lemma deals propagation information causal past articulation point definition 
states send articulation point send information dests propagated destination information exists log event 
lemma send articulation point send respect send case dests om case ii om case existed log case ii existed log 
proof case inserted log snd 
prove contradiction 
gamma 
message sent causally delivered 
definition message contained dests om loss generality assume message delivered follows existed log delivery assume inserted log delivered 
reason happened time delivery ts log see rcv 
implies inserted log message delivered earlier 
clearly gamma 
send gamma 
definition dests om contradicts assumption message delivered dests om delivered dests inserted log 
case ii proof similar case left exercise reader 
sufficiency information prove correctness algorithm showing satisfies invariant 
show liveness safety algorithm invariant delivery constraint 
theorem algorithm satisfies invariant repeated dests send gamma 
send dests om om sent node send gamma 
send gamma 
send dests dests om sent proof mutually exclusive cases hold invariant true case dests om case ii om assertion cases articulation point send exist lemma 
case consider articulation point send send respect send 
dests case lemma information dests inserted log case invariant satisfied 
possibilities information existed exist just log 
information existed log just dests snd follows information dests sent om dests 
claim 
code snd assertions respect sending information dests om sent nodes dests dests contain dests om 
sent dests dests contain dests om 
sent nodes dests gamma dests contain dests om claim assertion follows invariant satisfied 
note snd fact dests om sent node say dests follows distinct belong dests dests assertion dests gamma dests assertion 
observe snd deleted dests log dests 
follows fixed point fp dests assertions snd claim snd lemma 

information exist log just sent om destination dests 
prove invariant satisfied consider events information removed dests log show invariant satisfied 
observed code steps executed event information potentially removed log steps snd rcv rcv rcv 
removed dests log step snd send sent dests dests contain dests om snd 
note unicast articulation point assertion articulation point violated 
invariant satisfied 
shown fixed point fp information 
removed dests om step rcv executed send follows implies invariant satisfied 
fixed point fp information past 
removed dests log step rcv executed send node delivered message dests om contradicts definition send gamma 
send gamma 
send dests om removed dests rcv 
removed dests log step rcv executed send happened log happen delivered message dests om implies dests om lemma contradicts definition send gamma 
send gamma 
send dests om removed step rcv executed send 
subcases invariant satisfied 
case ii consider articulation point send send respect send 
lemma follows inserted log 
om snd follows log just 
got deleted log 
deleted ways 
inserted log dests deleted rcv 
deleted dests happened subcases described case 
showed subcases case invariant satisfied 

log removed rcv inserted previously log case message delivered om om 
contradicts definition send gamma 
send gamma 
send om deleted rcv 
case invariant satisfied 
correctness algorithm theorem safety dests dests send gamma 
send delivered delivered 
proof prove theorem contradiction 
assumption delivered having delivered 
assumption loss generality assume message len send send len send send ffl send gamma 
send ffl dests delivered time delivered 
assumption states send length longest path send send delivered delivered assumption delivery condition definition dests om om invariant send gamma 
send gamma 
send dests dests om 
assumption delivered time delivered len send send len send send 
delivered delivered delivery constraint definition enforced rcv executed delivered 
contradicts assumption delivered time delivered 
theorem liveness message eventually delivered destinations 
proof proof contradiction 
message delivery reliable message transmission time arbitrary finite 
set messages delivered 
exist dests message sent causally eventually delivered delivered om may contain information messages sent causal past 
eventual delivery prevented permanent messages identified om destination note messages eventually delivered exist exist 
optimality algorithm proof optimality necessary conditions show algorithm optimal message overhead log size sense redundant information definition carried messages stored nodes 
proof entails showing algorithm satisfies invariant discussed section constitutes condition optimality 
proof identifies fixed points dests shows messages sent fixed points carry information dests past fixed points upto part propagation constraints satisfied 
show log entries eligible transmission communication channel log storage optimal 
theorem algorithm satisfies invariant stated section 
proof prove result induction length path fixed point fp fp dests 
length path chain events number send events path chain events 
theorem proof invariant follows information dests traverses upto fixed points 
length fixed point fp dests 
case delivered 
delivered deleted dests log rcv rcv 
note fixed point ts log 
lemma dests nonincreasing log snd node sends information dests fixed point 
dests om sent fixed point fp dests 
sending snd deleted dests log 
note fixed point ts log 
om sent node node multicast lemma dests nonincreasing log henceforth snd node sends information dests 
length assume induction hypothesis holds message sent event length fixed point dests contain information dests om information exist log 
lemmas log multicast ffl event event causal past dests existed event see rcv 
length send event length fixed point 
send events lengths fixed point path node induction hypothesis lemma follows message sent event length fixed point dests contain information dests om information exist log 
send events lengths fixed point path different nodes reasoning 
send event length delivered path consideration fixed point 
possibilities exist assuming induction hypothesis length 
dests om scenarios exist just 
log step rcv ensures dests delivery 
lemma follows dests log monotonic nonincreasing 
snd follows node sends information dests 
log ts log 
lemma exist 
ffl added log lemma rcv follows added log 
snd follows node sends information dests 
ffl inserted log rcv 
lemma belong dests log snd follows node sends information dests 

om follows induction hypothesis lemmas rcv rcv ts log event ts om ts log 
scenarios exist just 
log rcv follows deleted ts om value ts log gets updated maximum ts log ts om rcv 
rcv alter value greater follows lemma rcv added log 
snd follows node sends information dests 
log value ts log gets updated maximum ts log ts om rcv 
rcv alter value greater delivery complete ts log follows lemma rcv added log 
snd follows node sends information dests 
algorithm satisfies invariant 
note shown redundant information deleted fixed points proof follows lemma 
may transmitted stored dests known delivered guaranteed delivered dests sole purpose transmitting storing maintain implicit greatest lower bound timestamps messages node delivered destinations 
theorem algorithm optimal 
proof theorem fact algorithm satisfies invariant information dests stored logs sent messages sent causal fixed points exception fixed point fp propagates information propagation redundant information definition curtailed earliest instant logs contain information dependencies follows logs contain information redundant 
log contents transmitted 
addition spurious information specified propagation constraints transmitted 
algorithm optimal terms message overhead 
lemma log storage optimal 
proof theorem proof invariant theorem algorithm transmits bare minimum information correctness 
information stored local log information stored information eligible transmission stored log 
log storage optimal 
performance compute size control information sent om message message sent past send known delivered guaranteed delivered destinations entry om entries om corresponding messages sent node phi dests dests dests 
phi denotes destinations messages node known delivered guaranteed delivered step rcv number entries phi bounded entry node 
nd phi clearly nd 
nd entry message node message overhead terms size control information equal nd expression gives number independent pieces information required algorithm 
data structures algorithm selected power expression efficiency optimized implementation 
example transmitting multiple entries identifier replicated implementation store single instance identifier associate various values associated dests fields 
alternately sparse representation theta array type timestamp 
discuss optimizations orthogonal problem determining bare minimum pieces information enforcing problem addressed 
upper bound message overhead true size local log 
real life computation size terms smaller actual reduction depends communication pattern processes average overheads better 
proved previous subsection algorithm optimal message overhead local storage sense redundant information definition carried messages stored nodes 
encoding reduce overhead 
entry om carried message field dests substituted gamma dests jn gamma 
set nodes identifiers 
optimization ensures bound nd 
complexity problem theorem semantics information messages delivered available space complexity storage node size message overhead enforce proof source destination pair latest message sent 
general instances 
tm dests fx dg 
suppose tm delivered unicasts message node time tm om tx delivered tm log tm om chooses unicast message ty node delivery ty node wait delivery tm tm ty results violation 
nodes nodes system general identifiers transmitted message enforce general complexity message overhead local storage redundant information carried messages stored nodes 
algorithm employs clever techniques intelligent optimizations reduce flow redundant information 
information stored delivered messages 
key algorithm representation store information information delivered messages derived delivered information broadcast case message broadcast nodes dests field entries carried messages stored local logs contains ids nodes eliminated 
message overhead om log size need contain entries time entry broadcast node 
serialized broadcast case broadcasts serialized mutual exclusion algorithm sufficient track sender timestamp broadcast 
message overhead log overhead identifier 
serialized multicasts arbitrary process groups multicast sends arbitrary dynamically changing process groups serialized mutual exclusion algorithm sufficient track latest multicast destination basis 
node suffices store entry sender timestamp gives sender identifier timestamp send node total entries required 
current multicast destinations corresponding local log entries new dependencies created multicast sent gamma log entries destinations 
sender timestamp pairs required 
enforcing paths length corollary general message communication patterns causal dependency chains length enforced message overhead 
proof sending message sends message identifier latest message sent node identifiers latest message node aware identifiers 
message delivered updates information 
suppose sends message randomly chosen node information message sent node including sends information latest message node node including enforce paths length 
enforcing paths length corollary general message communication patterns enforcing causal dependency chains length greater requires message overhead 
proof theorem construction shows result 
fifo channels case communication channels fifo optimization performed optimality 
algorithm transmit information pair nodes optimality condition information transmission 
principle requires duplicate information resent node om enforced follows entry log enhanced field lt gives time dests altered 
array ls ls indicates time node sent information node om sent lt ls 
similar notion previously efficiently implement vector clocks 
algorithm fifo channels changes original algorithm underlined 
data structures clock gamma local counter clock ls gamma ls time sent message sr gamma log clock dests lt gamma lt updated clock dests field updated changed snd sends message dests 
clock gamma clock 
dests gamma fl log ltg om lt field member removed om modify dests follows dests gamma dests gamma dests dests dests gamma dests gamma dests dests send clock dests om 

log dests gamma dests gamma dests lt gamma clock execute rcv 
add clock dests clock log 
dests ls gamma clock rcv receives message dests om 
tm om tm dests wait sr 
clock gamma clock deliver sr 
add dests om tm om tm dests gamma tm dests gamma fig 
tm om log mark tm deletion log mark deletion ts om delete elements marked deletion om log log tm om dests gamma dests tm dests lt gamma clock delete tm om convert om entries log entry format set lt field clock log gamma log om 
sender node entries log set integers covered dests gamma vector type clock dests gamma insert log decreasing timestamp order sorted var var dests gamma var dests gamma covered dests covered dests gamma var dests covered dests replace entries log corresponding entries set lt field entry clock dests field changed 
log dests log delete lemma proves optimality condition information transmission pair nodes 
lemma information transmitted number times fifo channel 
proof transmitted om time 
sends subsequent message suppose log changed sent including fact modifications snd sent 
lt updated 
snd ls updated ls lt sent snd executed ls lt include om optimality algorithm ensured transmission duplicate information suppressed correctness algorithm ensured shown lemma altered entries propagated 
lemma entries log changed message sent node node entries sent subsequent message 
proof transmitted om time 
sends subsequent message suppose changed sent change restricted change snd sent 
changed information sent 
lemma change information constraints longer need maintained satisfied guaranteed satisfied snd rcv 
complementary information constraints need maintained known satisfied guaranteed satisfied 
information log transmitted om lemma log storage optimal channels fifo 
proof optimality log storage need show certain information eligible transmission represent ts log stored log 
snd log entry log eligible transmission ls lt assume entry log ls lt currently 
snd executed message sent follows currently dests 
entry exist case essential log denote ts log 
lemma follows 
asynchronous execution processes unpredictable communication delays create nondeterminism distributed systems complicates design verification analysis distributed programs 
concept causal message ordering introduced simplify design development distributed applications 
causal ordering provides built message synchronization reduces nondeterminism distributed computation considerable interest design distributed systems 
concept causal ordering finds applications domains updates replicated data global state collection distributed shared memory teleconferencing multimedia systems fair resource allocation 
problem causal ordering attracted great deal attention number algorithms proposed causal ordering distributed systems variety assumptions regarding underlying communication medium process communication patterns 
message local storage overhead algorithms limits scalability preventing meeting growing demands computing environments 
addressed fundamental question regarding efficiency implementations distributed systems minimum amount information regarding messages causally precede message necessary propagated stored enforce causal ordering 
answered question formulating set propagation constraints govern propagation related information network ii identifying fixed points articulation points message communication patterns characterize dynamics information flow 
characterization information resulted formulation invariants represent necessary sufficient conditions information required enforcing causal ordering 
sufficiency condition provides optimality conditions causal ordering algorithms terms size control information messages enforcing causal order terms size local storage 
developed characterization framework design optimal algorithm enforcing causal message ordering 
algorithm works non fifo channels allows process multicast arbitrary dynamically changing process groups 
proved correctness algorithm showed satisfies sufficiency condition proving optimal size control information message size local storage 
important contribution causal ordering important paradigm design distributed systems existing algorithms message overhead local storage complexity 
provided optimal algorithm system supports fifo channels proved optimality algorithm 
showed general space complexity causal message ordering 
algorithm achieves optimality propagation constraints curtail propagation redundant information earliest instants employing encoding scheme represent pass messages necessary causal dependency information 
encoding scheme allows deduction implicit information delivered messages explicit information messages delivered order satisfy venkatesan optimal algorithm distributed snapshots causal message ordering information processing letters 
singhal real time causal message ordering multimedia systems proc 
th intl 
conf 
distributed computing systems may june 
ahamad john implementing programming causal distributed memory proceedings th intl 
conf 
distributed computing systems 
birman joseph reliable communication presence failures acm transactions computer systems feb 
birman joseph exploiting replication distributed systems mullender ed distributed systems acm new york 
birman schiper stephenson lightweight causal atomic group multicast acm transactions computer systems 
timestamps message passing systems preserve partial ordering australian computer science communications vol 
feb 
joseph birman low cost management replicated data fault tolerant distributed systems acm transactions computer systems 
kim kim efficient causal ordering protocol group communications tech 
report university science technology korea march 
lamport time clocks ordering events distributed system communications acm july 
mattern virtual time global states distributed systems parallel distributed algorithms north holland 
raynal causal multicasts overlapping groups low cost approach ieee conf 
trends distributed computer systems sept 
peterson buchholz schlichting preserving context information interprocess communication acm transactions computer systems 
ravindran prasad communication structures paradigms distributed conferencing applications proc 
th int 
conf 
distributed computing systems may 
raynal schiper toueg causal ordering abstraction simple way implement information processing letters 
raynal singhal logical time way capture causality distributed systems submitted ieee computers available osu irisa tech report 
rodrigues causal separators large scale multicast communication proc th ieee int 
conf 
distributed computing systems may june pp 

schiper new algorithm implement causal ordering proceedings rd international workshop distributed algorithms lecture notes computer science springer verlag 
singhal efficient implementation vector clocks information processing letters aug 
selected path constructed path flow information destination multicast intermediate send event multicast destination selected intermediate events path poss ible position event propagation constraint pc appendix alternate proof theorem theorem propagation constraints pc gamma pc delivery condition ensure proof dests delivered 
message sent cpe respect dests carry information 
delivery condition ensure delivered message 
case pc pc cpe pc pc respect dests gamma 

satisfied messages sent causally 
particular dests carried delivery satisfied respect messages sent causal 
case pc cpe pc destinations message sent 
delivery condition definition pc guarantees delivered causal order respect message sent 
causality transitive delivery event respect delivery message sent causal assuming theorem holds separate instance problem len len eventually terminates 
case pc claim case pc information dests deleted causally cpe pc guaranteed delivered causal order respect message sent cpe 
justification assume cpe pc pc pc result holds pcs explained 
show propagation constraint pc restricts flow information 
path path dests propagated upto 
assume earliest send event path originating 
consider path gamma 
gamma 
identified pc respect dests 
loss generality farthest event multiple values 
cpe pc 
exist events illustrated ffl sequence events send gamma gamma gamma 
send gamma 
gamma 
gamma gamma gamma 
gamma 
gamma 
path ffl corresponding sequence events send send gamma 
send gamma 
send gamma gamma gamma 
send kr gamma 
send gamma 
gamma 
send ks gamma 
send destination satisfying 
dests information traverses assumption cpe pc 
information gets replaced dests pc 

kr dests information gamma gamma dests traverses chain gamma gamma upto event cpe gamma gamma dests pc pc 
information gets replaced kr dests 
replaced cpe pc coincides 
item apply 

ks dests information traverses part way entire way path gamma 
gamma 
gamma 
marked 
cpe information path denoted 
event may 
cpe pc pc show cpe pc contradiction 
cpe pc pc event form previous item description 
information ks dests reaches propagates past 
event may cpe pc pc pc pc case information ks dests reaches propagates past replacing dests 
cpe pc 
case information ks dests reaches propagates past replacing dests 
need show gamma gamma kr ks delivered order listed 

delivered cpe pc delivery condition obeyed 

cpe pc pc gamma gamma dests 
cpe pc apply argument case pc send gamma gamma 
follows gamma gamma delivered kr cpe pc 
note len len gamma gamma 
recursion claim case pc applied send gamma gamma note additional level recursion cpe pc cases result holds cpe pc case len gamma gamma decreased level recursion 
recursion continued terminate pc additional level recursion requires unique event pair events gamma gamma finite number events original 
case result guaranteed 
gamma gamma delivered kr claim case pc recursively applied adjacent pair sequence gamma gamma guarantees gamma gamma delivered kr 
cases described item identified path gamma 
gamma 
gamma 
ks event cpe pc pc causally ks clearly delivered sent 
event cpe pc pc lie recursive argument item applied send ks result follows 
cpe pc coincides result follows case pc shown 
ks delivered case pc claim case pc information dests deleted causally cpe pc guaranteed delivered causal order respect message sent cpe 
justification case pc showed claim send denoted send sent send dests 
causality transitive 
needs shown delivered sent instance application problem independent len len 
eventually terminates result follows 
cases theorem holds 

