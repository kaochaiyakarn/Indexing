structured theory presentations logic representations robert harper donald sannella andrzej tarlecki draft th december purpose logical framework lf provide language defining logical systems suitable logic independent proof development environment 
inferential activity object logic particular proof search conducted logical framework representation logic framework 
important tool controlling search object logic need motivated difficulty reasoning large complex systems structured theory presentations 
rudimentary language structured theory presentations structure proof search arbitrary object logic explored 
behaviour structured theory presentations representation logical framework studied focusing problem lifting presentations object logic metalogic framework 
topic imposing structure logic presentations logical systems may defined modular fashion briefly considered 
logic traditional way theory giving set axioms 
sufficient dealing simplest examples groups monoids 
computer science applications presentation theory describing behaviour complex real life software system involve huge list axioms scale presentations effectively useless 
commonly accepted way cope problem impose structure theory presentations bg build complex theories combining smaller components 
advantage modular structured theory presentations provide basis guiding proof search large theories 
considered sb context edinburgh lcf gmw 
lcf theory declaring base types constants function symbols giving lcf signature giving set axioms language induced declarations 
fundamental idea sb exploit invariance consequence changes signature described signature morphisms 
language structured presentations considered uses signature morphisms mediate combination theories provide form information hiding 
primitives presentation language sufficient definability variety interesting constructions instantiation parametric presentations 
expanded revised version structure representation lf appeared proc 
th ieee symp 
logic computer science asilomar california june pp 

school computer science carnegie mellon university pittsburgh pa usa 
laboratory foundations computer science department computer science edinburgh university edinburgh scotland 
institute informatics warsaw university institute computer science polish academy sciences warsaw poland 
generalized context logical systems lcf main purpose explicit consider ramifications ideas context universal metalogic lf 
logical framework lf hhp meta language defining formal systems :10.1.1.21.5854
typed calculus pi types closely related automath type theories db vd 
formal system specified giving lf signature finite list constant declarations specifies syntax judgement forms inference rules system 
syntactic apparatus formal system including proofs represented lf terms 
lf type system sufficiently expressive capture uniformities large class logical systems interest computer science including notions schematic rules proofs derived rules inference higher order judgement forms expressing consequence generality 
methodology hhp necessary condition correctness encoding object logic lf consequence relation fully faithfully embedded consequence relation lf lf encoding syntax lf terms 
consequence relation lf considering type inhabitation assertions nuprl con 
focusing embedding consequence relations lf may viewed universal metalogic inferential activity conducted object logics exist purposes implementation insofar encodable lf 
important form inferential activity logical system proof search set axioms assumptions phi conjecture oe determine phi oe 
keeping view lf universal metalogic proof reduced proof lf encoding lf 
numerous interesting questions arise process carrying program 
pym pym considers variety issues related proof search particular definition unification algorithm methods conducting proof search context arbitrary lf signature 
elliott ell developed unification algorithm lf pfenning pfe pfe bases logic programming language 
consider proof search structured theory presentations 
focus lifting structured presentations level object logic level metalogic particular conditions proofs metalogic lifted structured presentations soundly represent proofs structured presentations object logic 
important aspect lf opens possibility logical systems 
example may view encoding modal logic combination truth validity consequence relations 
suggest basic machinery language structured logic presentations allows putting logics just structured theory presentations provide machinery putting theories 
machinery may formalize examples adding connective logic parameterization hoare logic logic assertions 
organized follows 
section introduce general definition logical system family consequence relations indexed signatures satisfies certain uniformity condition respect change signature 
resembles formalization logical system institution gb crucial difference institutions model theoretic view logical systems formulation centered directly notion consequence relation 
see fs 
sorts consequence relations consider motivated encoding lf limited sided consequence relations closed weakening permutation contraction cut satisfy compactness 
section consider structured presentations arbitrary logical system 
structured presentations denote theories sets sentences closed consequence structure presentations induces natural proof search procedure guided structure discuss section 
generalizing methodology hhp section introduce notion representation logical system account variability signatures consider problem lifting structured presentation representation logical system :10.1.1.21.5854
structured presentations may simply translated representation target logic 
define notion proof conditioned representation give restrictions may achieve goal working entirely metalogic 
section introduce metalogic interest lf logical system define notion logic presentation 
logic presentation essentially lf signature indication terms encode judgements object logic representation object logic logical system presentation 
section return problem proof structured theory presentations specific setting logics encoded lf 
section explore colimit construction tool building logics structured way ideas tentative rest 
sections discuss related suggest directions research 
consequence relations logical systems treatment logical systems centers consequence relations see avr survey 
take consequence relation binary relation finite subsets elements set sentences satisfying conditions 
oe range sentences phi range arbitrary sets sentences delta range finite sets sentences 
write delta delta union oe delta foeg delta 
phi phi function extension subsets phi denoted 
function application denoted concatenation soe stands oe 
definition consequence relation cr pair set sentences fin theta binary relation 
reflexivity oe oe 

transitivity delta oe oe delta delta delta 

weakening delta oe delta 
choice conditions consequence relations motivated intention consider encodings logical systems lf sense precise 
considering finite sets sentences implicitly restrict attention compact consequence relations 
technical development depend way choice compact consequence relations amenable machine implementation 
apparently general properties easily seen hold consequence relation proposition 
oe delta delta oe 

delta oe delta oe delta delta delta 

delta oe delta delta oe 
definition consequence relation restriction written consequence relation fin theta 
proposition consequence relation consequence relation 
definition consequence relation induces closure operation sets sentences phi defined cl phi oe delta oe finite set delta phi usually write phi cl phi clear context 
proposition function cl pow pow closure operation 
phi phi cl phi cl phi 
phi cl phi 
cl phi cl cl phi 
definition set phi sentences closed iff cl phi phi 
theory wrt set sentences closed 
definition morphism consequence relations cr morphism 
function translation sentences delta oe delta soe 
cr morphism inclusion inclusion function category sets conservative delta oe delta soe 
cr category objects consequence relations morphisms cr morphisms identities composition inherited category sets 
proposition 
cr morphism phi phi phi containment general proper image theory cr morphism need theory 
follows proposition proposition phi phi 
techniques structuring theory presentations idea keeping explicit track language theory 
building large theories smaller ones generally involves expansion language change type constant function symbols 
appropriate hide symbols language restricting vocabulary order away details secondary interest 
consequently logical system viewed defined arbitrary fixed language considered family consequence relations indexed collection signatures determine set sentences considered 
variation signature example renaming constants replacing constants terms signature gives rise natural translation sentences signatures involved 
important consequence preserved translation 
partly captures idea consequence relations family defined uniformly respect signatures leads definition definition logical system logic functor sig cr 
course definition captures aspects usually meant informal notion logical system 
category sig called category signatures objects denoted sigma morphisms oe sigma sigma signature morphism oe sigma sigma thought specifying relative interpretation language defined sigma language defined sigma writing sigma jlj sigma sigma definition logical system implies oe sigma sigma delta sigma oe oe delta sigma oe oe function oe underlying cr morphism called translation function induced oe 
simplify notation write oe oe oe oe oe delta oe delta confusion 
logical system inclusions iff objects sig pre ordered distinguished subcategory morphisms referred inclusions maps signature inclusions inclusions consequence relations 
inclusions designated sigma 
sigma particular cases study signature morphisms functions kind normally assume explicit mention signature inclusions inclusions usual sense 
requirement preserve inclusions means sigma 
sigma delta sigma oe delta sigma oe 
category distinguished pre order subcategory inclusions say pushouts inclusions iff 
morphisms pushout exists morphism opposite inclusion pushout diagram may chosen inclusion gamma gamma gamma gamma gamma gamma gamma gamma require canonical choice functorial dually contextual categories cf 
car 
needed prop 

example define logical system associated sorted equational logic 
definition sig eq category sorted algebraic signatures having objects pairs sigma omega gamma consisting set type symbols family sets omega omega function symbols 
morphisms oe omega gamma 
omega consists function family functions hf omega omega composition morphisms composition corresponding components functions 
inclusions pairs consisting inclusion family inclusions 
sigma omega gamma algebraic signature 
define set eq sigma sigma equations set triples finite sequence mutually distinct variables decorated elements sigma terms sort variables equation written empty sequence 
equations variables called ground equations 
consequence relation eq sigma eq sigma defined standard model theoretic way notion satisfaction sigma equation sigma algebra equivalently appropriate rules equational deduction reflexivity symmetry gm 
weaker concept inclusion system introduced dgs 
requirements stated sufficient purposes 
definition functor eq sig eq cr defined eq sigma eq sigma eq sigma eq oe sigma sigma usual extension oe function eq sigma eq sigma geq sigma restriction eq sigma ground sigma equations geq oe corresponding restriction eq oe 
proposition 
eq geq logical systems inclusions 

sig eq pushouts inclusions fact complete 
proof eq oe sigma sigma cr morphism satisfaction lemma bg 
similarly geq 
pushouts sig eq defined gb 
similar manner order logic equality 
logical system signatures eq take equality predicate sorted algebraic signature sigma sigma set closed order logical formulae equalities atomic formulae consequence relation induced usual inference rules equivalently usual satisfaction relation 
signature morphism oe sigma sigma oe translates closed sigma formulae closed sigma formulae obvious way 
logical system inclusions 
note cr morphisms induced signature morphisms logical system need conservative 
non conservativity arises eq due infamous empty carrier phenomenon see gm geq 
theory presentations arbitrary logical system 
formulated comprises family consequence relations satisfying additional conditions 
concepts introduced consequence relations lift particular importance concept theory definition theory signature sigma set jlj sigma sentences closed sigma notice logical system theories classified signatures 
example equational theory monoids equational theory abelian groups different signatures eq theories 
mentioned complexity real life software systems means theories describing behavior built modular structured fashion 
simplest theories traditional way giving signature sigma set phi jlj sigma axioms denoting theory phi 
define rudimentary language structured theory presentations building complex theories combining enriching simple ones 
presentation language choose adapted sb arbitrary logical system 
definition structured theory presentation presentation expression language generated grammar sigma phi translate oe derive oe sigma sig signature oe sig morphism phi set sentences 
structured presentations form sigma phi called basic presentations 
structured presentation finite basic presentations contains involve finite sets sentences 
grammar specify signatures signature morphisms sets sentences 
logics finite signatures unproblematic define presentation language signatures signature morphisms wir 
practice infinite presentations form schematization 
sake simplicity explicit 
definition signature sg presentation defined induction structure follows sg sigma iff ffl sigma phi ffl sg sg sigma ffl translate oe oe sigma sigma sg sigma ffl derive oe oe sigma sigma sg sigma formed iff sg defined 
definition formed presentation 
theory determined defined follows th sigma phi phi th th th th translate oe oe th th derive oe oe gamma th proposition formed presentation th theory signature sg 
proof non trivial case derive notice image theory signature morphism theory 
language structured presentations allows large theories built flexible fashion 
union combine separate theories signature 
theories different signatures may combined union translate 
signature sig thought vocabulary type constant function symbols morphism renaming symbols signature translate operation useful applying renaming theory derive operation theory hiding symbols example auxiliary function symbols needed finitely axiomatize function renaming rest 
operations sb union different 
theory building operations specification language clear bg may defined terms primitives 
concrete examples help clarify motivation structured theory presentations 
see bg sb section examples 
consider structured theory presentations logic eq defined section 
example type constant ffl functions ffi theta inv ffl ffi ffi ffl ffi ffi ffi ffi ffi inv ffl inv ffi fflg ffi infix function 
self explanatory notation introduce types functions constants ary functions 
group eq presentation 
type function op theta op op abelian eq presentation group translate abelian oe ag oe ag defined oe ag oe ag op ffi 
shows union may combine separate theories translate adjusting signatures case union applicable 
type constant ffl function ffi theta monoid derive group oe mg derive oe mg eq presentations oe mg defined oe mg oe mg ffi ffi oe mg ffl ffl 
shows derive may hide functions case inv 
note hides inv existence totally forgotten 
happens case consequences expressible equations 
example formulated order logic equality resulting theory include sentences ffi ffl 
example derive defining function sort specifying auxiliary boolean valued functions permutation ordered equations list ordered sort true list permutation sort true define sort derive hide permutation ordered 
general possible give finite eq presentations derive theories finite eq presentations derive 
contrast theory building operations easy see finite presentation built basic presentations union translate theory finite basic presentation 
general say formed presentations signature equivalent determine theory 
general situation want compare presentations different signatures 
comparison mediated morphism signatures involved 
definition presentation morphism oe sig morphism oe sg sg oe th th category presentations morphisms identities composition inclusions inherited sig pushouts category presentations may define clear style instantiation parameterized theories bg ehr 
presentation parametric presentation inclusion 
idea requirement specification theory may regarded theory matching parameter 
parametric presentation may instantiated presentation provided fitting morphism oe specifying regarded satisfying requirements instance oe written oe obtained pushout oe conditions works expressed proposition proposition sig pushouts inclusions specifically suppose 
oe morphisms sigma sg 
pushout oe object oe translate oe sigma translate morphisms oe oe sigma oe oe pushout construction sig instance oe explicitly definable language structured presentations 
important sequel complex presentations involving parameterization may reduced structured theory presentations involving primitives 
example suppose monoid defined example 
type types function alphabet translate monoid oe mon translate oe inj oe mon 
oe inj 
inclusions union signatures 
obvious eq inclusion alphabet 
eq presentation parametric alphabet 
rest example construct simple instance 
type constant functions succ theta theta theta succ succ theta theta succ theta ng theta infix 
nat oe alphabet nat presentation morphism defined oe nat oe pushout oe 
rough approximation theory sequences natural numbers types constants ffl functions ffi succ theta 
type names sequence nat different constant function names required may obtained translate 
example repeat example add alphabet constant neutral function op theta axioms op neutral op neutral op op op op add function accum axioms accum ffl neutral accum accum ffi op accum accum inclusion alphabet 
parametric alphabet 
construct instance ensure parameter presentation matches alphabet requires satisfies new requirements alphabet 
add axioms may proved axioms appropriate induction principle available 
oe alphabet nat defined oe oe neutral oe op presentation morphism 
nat oe pushout oe 
theory sequences natural numbers summation function accum 
example included monoid axioms requirement theory alphabet characterize intended actual parameters 
axioms accum may force elements type matching identified function matching op associative constant matching neutral identity function 
requiring fitting morphism presentation morphism protects undesirable instantiations 
variety constructions definable example coproducts sig theory coproduct disjoint union theories components 
colimits complex diagrams may express sharing colimits exist exist sig particular diagrams sig consisting inclusions arise natural way hierarchical construction theories extension 
interesting cases diagrams colimits may colimits basis clear ml syntax managing sharing st st 
known order equational theory standard model natural numbers effectively eq 
enriching logical system introducing induction schemes adding non order notions data constraints bg ms better approximations theory may 
parametric presentation amounts function maps presentation fitting morphism presentation result determined pushout construction 
obvious mechanism defining functions abstraction possible pushout style parameterization 
fact advantage alternative higher order parameterization may achieved additional complications see sw wir sst 
proof search structured presentations basic presentation sigma phi consequence relation sigma directly deduce consequences phi sentences th sigma phi 
generally arbitrary presentation deduce sentences th consequences component presentation capture introduce judgements form fl oe oe sg sentence show proved 
definition define family relations fl sigma oe formed presentations signature sigma sentences oe jlj sigma induction structure follows 
sigma phi fl sigma oe iff exists delta phi delta sigma oe 

fl sigma oe iff exists delta jlj sigma delta jlj sigma fl sigma delta fl sigma delta delta delta sigma oe 

translate oe fl sigma oe oe sigma sigma iff exists delta jlj sigma fl sigma delta oe delta sigma oe 

derive oe fl sigma oe oe sigma sigma iff fl sigma oe oe 
fl sigma delta stands fl sigma oe oe delta 
proposition relation fl sg oe formed presentation oe sg sentence holds iff oe th 
proof structural induction directly definition 
obvious definition embodies proof system entailment fl sigma oe rules fl sigma delta fl sigma delta delta delta sigma oe fl sigma oe proof system basis proof procedure structured presentations 
illustrate proof procedure may take advantage structure presentation consider logical system inclusions 
presentation signature sigma sigma 
sigma inclusion 
oe jlj sigma useful heuristic testing translate fl sigma oe take delta proposition oe test fl sigma oe 
definition sufficient necessary general preserves inclusions delta oe requirement delta sigma oe trivial 
generalization heuristic embodied rule fl sigma oe translate oe fl sigma oe oe translate analogous rules arise parts definition oe phi sigma phi fl sigma oe basic fl sigma oe fl sigma oe union left fl sigma oe fl sigma oe union right fl sigma oe oe derive oe fl sigma oe derive proof context structured theory presentation fundamentally different proof ordinary unstructured theory presentation 
kinds presentations contain axioms form basic constituents proofs 
case ordinary theory presentation single set axioms axiom proof involves application rule oe delta delta sigma oe axiom contrast axioms structured theory presentation tend scattered structure 
axiom extracted basic presentation resides needed proof rules translate 
proof structured theory involve frequent changes context proof fragments context small theories correspond proofs lemmas brought bear main proof translation context appropriate larger theory 
analogy may drawn discharge assumptions natural deduction proofs different parts proof theorem take place context different sets assumptions 
goal finding proof theorem oe structured theory presentation proof may potentially involve axioms number different basic strategies may applied 
probably obvious involves reduction familiar case proof unstructured presentation technique referred sb dredging 
proceeds extracting dredging possibly relevant axioms translating theorems inference rules translate 
theorems may proof oe 
strategy implicitly systems facilities building new theories combining extending existing theories edinburgh lcf gmw cambridge lcf pau isabelle pau new theory automatically contains axioms theorems component theories 
alternative called diving sb translate oe context appropriate rules translate backwards 
proof translation oe applying translation rules forward direction gives proof oe problems dredging 
large dredging axioms yields large unstructured set axioms probably contribution proof oe 
second dredging axioms structured presentation form derive oe tends lead loss information 
example consider structured theory presentation basic presentation nat eq example nat theta derive nat 
axiom nat directly translated context nat theta theta remaining axioms nat involve function available sg eq nat theta 
theorems nat theta succ theta succ succ expressible sg eq nat theta infinitely consequences eq finite way 
likewise diving appropriate strategy 
example proof oe structured theory presentation form may involve axioms successful attempt prove oe involve dredging axioms formation lemmas oe oe fl oe fl oe establishing may involve diving oe oe oe combination 
similar problems arise structured presentations form translate oe 
promising strategy proving oe involves mixture diving dredging 
diving focus smallest containing information relevant oe 
appropriate context attempt proof large structured presentation specification compiler cases smaller dredging may extract axioms proof carried axioms employing rule fl sigma oe delta delta delta fl sigma oe oe oe sigma oe fl sigma oe cut alternatively small set lemmas may formulated translated version oe proved cut lift proof level structured presentations lemmas may proved separately means diving dredging 
lemma formation may unavoidable involves union translate nested involving derive 
step strategy find containing information relevant goal oe 
search appropriate helped fact translate forms effective barrier diving deeply presentation translate oe sigma sigma sigma sentence oe diving level impossible oe expressible vocabulary sigma provides oe jlj sigma oe oe oe 
common pattern translate oe translate oe uses translate guard branches union inappropriate diving 
translate effect structured theory presentation possible find approximately correct simple depthfirst search 
see sb concrete details strategies context edinburgh lcf system 
example structured theory presentation eq specifies symbol tables algol programming language nested blocks 
see bg variations known example 
convenience presentation structuring operation enrich defined terms union translate follows enrich types constants functions axioms translate sigma sigma sg eq sg eq sigma inclusion 
item type item stack enrich item type stack constant stack functions push item theta stack stack pop stack stack top stack item axioms item stack pop push item stack top push boolean type bool constants true bool false bool functions bool bool axioms true false false true index enrich boolean type index function eq index theta index bool cond enrich boolean type value function cond bool theta value theta value value axioms value cond true value cond false array enrich translate index translate cond type array constant array functions put index theta value theta array array get index theta array value index theta array bool axioms index value array get put index value array eq get put get index false index value array put true index value array eq put inclusions sg eq index sg eq cond respectively sg eq index sg eq cond abbreviation cond eq inclusion item 
stack eq morphism oe item array oe item array 
stack parametric item stack applied array 
stack array oe symtab enrich functions add index theta value theta stack stack retrieve index theta stack value stack stack stack stack axioms index value stack add push put top pop index array stack retrieve push get index array stack retrieve push retrieve stack push stack pop symtab derive symtab oe oe sigma sg eq symtab defined oe symtab stack oe oe symbols sigma sigma types symtab index value bool constants true bool false bool symtab functions eq index theta index bool add index theta value theta symtab symtab retrieve index theta symtab value symtab symtab symtab symtab expanding uses enrich single application obtain structured theory presentation containing basic presentations uses union uses translate derive 
signature morphisms involved inclusions oe final derive step arises application stack array 
symtab expressible basic presentation possible principle information contains 
practice difficult axioms symtab directly expressible signature sg eq symtab dredging lose information appropriate theorems expressible signature formulated proved 
suppose wish prove symtab fl eq sg eq symtab index symtab retrieve retrieve derive sufficient prove symtab fl eq sg eq symtab index stack retrieve retrieve reduction viewed diving level symtab 
way proceed prove lemma desired result follows substitutivity symtab fl eq sg eq symtab stack axioms enrichment build symtab level symtab union right reduce goal symtab fl eq sg eq symtab stack pop push dive level goal union left followed translate obtain goal fl eq sg eq stack pop push possible dive level stack goal translate oe sg eq stack implicit application stack array acts barrier constant corresponding stack 
sufficient prove fl eq sg eq array stack pop push possible dive level stack goal union left translate union right axiom enrichment build stack 
procedure represents successful lcf style top goal directed search proof original theorem proof may obtained applying corresponding inference rules proceeding bottom 
logic representations issue address sense logical system represented encoded terms logical system 
essence representation mapping sentences system second way consequence accurately preserved 
definition morphism logics fl pair fl sig fl cr fl sig sig sig functor fl cr fl sig sig cr natural transformation 
identity pair consisting identity functor sig identity natural transformation composition defined fl sig fl cr fl sig fl cr fl sig fl sig fl cr fl sig fl cr log category logics logic morphisms 
morphism logics thought encoding logical system way consequence preserved 
fl morphism logics 
requirement fl cr natural transformation may expressed equation fl cr oe oe fl sig oe fl cr oe words doesn matter encode translation oe oe oe translate encoding fl cr oe oe encoding fl sig oe oe 
simplify notation write fl sigma fl sig sigma fl oe fl cr sigma oe appropriate choice sigma 
proposition fl logic morphism sigma signature phi jlj sigma fl phi fl phi denote composition category usual composition functions functors written diagrammatic order vertical composition natural transformations composition natural transformation functor fl cr fl sig fl cr sigma fl cr sigma fl cr fl sig sigma similarly proposition containment general proper image theory logic morphism need theory 
follows proposition fl phi fl phi 
requirements logic morphism fl imposed ensure consequence translated sentences sound respect consequence definition logic morphism fl representation iff fl sig embedding fl cr sigma conservative 
representation surjective iff fl cr sigma surjective function underlying sets 
logic representable logic iff representation ae ae range representations 
easy see identities representations composition representations representation 
representations form subcategory log 
requirement ae sig embedding implies category signatures source logic faithfully encoded target logic requirement conservativity implies consequence relation source fully faithfully encoded target 
ae logic representation phi sigma oe iff ae phi ae sigma aeoe 
note surjectivity ae entail ae sig full ae cr 
example algebraic signature sigma inclusion sigma set sigma sigma equations set sigma order sigma sentences 
inclusions preserve consequence set sigma equations delta entails sigma equation oe eq sigma delta entails sigma oe sigma eq sigma sigma cr morphism 
opposite implication holds sigma conservative 
compatible translation sigma equations signature morphisms oe sigma sigma logic representation ae eq ae sig identity functor signature sigma ae cr sigma sigma defined 
notice ae obviously surjective 
proposition course holds representations satisfy stronger property proposition ae representation sigma signature phi jlj sigma phi ae gamma ae phi ae gamma psi image psi ae 
ae representation may inference engine consider interacts ideas previous section concerning proofs structured theory presentations step proof system introduced definition replacing uses delta sigma oe ae delta ae sigma ae oe 
proof methodology discussed previous section need elementary inference 
proof process driven presentation involves sentences signatures translations induced signature morphisms goal reduce inferential activity inferential activity lift presentation perform structured proof guided lifted presentation 
precise define natural lifting presentations 
definition suppose ae representation presentation signature sigma 
representation wrt ae function defined induction structure ae sigma phi ae sig sigma ae cr sigma phi ae ae ae ae translate oe translate ae ae sig oe ae derive oe derive ae ae sig oe proposition presentation ae presentation sg ae ae sig sg 
ae th th ae 
proof straightforward induction structure discussion suggests order test fl sigma oe encode oe test ae fl ae sigma ae oe 
hope strategy sound complete conjecture holds 
conjecture suppose ae representation presentation signature sigma oe jlj sigma fl sigma oe iff ae fl ae sigma ae oe 
joining proposition proposition immediately obtain implication left right completeness 
unfortunately converse implication soundness fails counterexample illustrates 
counterexample consider presentations eq 
sigma signature types constants sigma signature removed sigma 
sigma corresponding signature inclusion 
sigma derive sigma cg 
th eq include context signature sigma entail recall logic representation ae eq 
th ae contains sentence true 
consequently true th ae th ae true sigma terms entailment relations ae fl sigma fl eq sigma hold 
simpler contrived counterexample may hst counterexample 
source failure equivalence discrepancy th th ae 
derive operation may cause crucial property lost th ae ae th reverse inclusion follows directly proposition counterexample sentence true witness failure containment sufficient refute conjecture lies outside image ae 
union operation counterexample construct exploits discrepancy produce sentence lifted theory lies image ae refutes conjecture 
translate operation may union exploit discrepancy created derive similar manner 
union translate able create discrepancy 
fact presentation involve derive th ae ae th 
proposition consider arbitrary representation ae 
suppose sigma phi formed basic presentation 
th ae sigma phi ae th sigma phi 
suppose formed presentations signature satisfying th ae ae th th ae ae th 
th ae ae th 
suppose formed presentation satisfying th ae ae th oe sg sigma 
th ae translate oe ae th translate oe 
suppose formed presentation satisfying th ae ae th oe sigma sg 
th ae derive oe ae th derive oe inclusion may proper 
ae gamma th ae derive oe ae gamma ae th derive oe th derive oe obvious approach fails explained sense lift structured presentations answer considering alternative definition theory presentation conditioned representation ae 
definition ae representation 
formed presentation signature sigma theory wrt ae written th ae defined follows th ae sigma phi ae phi th ae th ae th ae th ae translate oe ae oe th ae th ae derive oe ae jlj sigma ae oe gamma th ae note defining theory presentation conditioned representation ae case derive restriction range ae signature sigma presentation restriction ensures sentence images taken closure result admits non sentence images result 
effect case derive sentence images admitted intermediate lemmas arbitrary sentences admitted consequences lemmas 
reflected proof search procedure associated definition 
theorem formed presentation th ae theory signature ae sg th ae ae th 
proof straightforward induction structure interesting case derive follow proposition 
suppose formed presentation oe sigma sg 
inductive hypothesis th ae ae th prove ae jlj sigma ae oe gamma th ae ae oe gamma th 
take oe ae jlj sigma ae oe gamma th ae 
oe ae oe oe jlj sigma ae oe oe th ae 
naturality ae inductive assumption ae oe oe ae th delta th ae delta ae sigma ae oe oe 
representations conservative implies delta sigma oe oe oe oe th 
oe ae oe ae oe gamma th 
implicit ae notation carries data involved 
take oe ae oe gamma th ae 
oe ae oe oe oe gamma th oe oe th 
inductive assumption ae oe oe th ae naturality ae ae oe ae oe ae oe oe conclude oe ae oe ae oe gamma th ae completes proof case clearly oe ae jlj sigma 
previous section definition induces corresponding entailment relation presentations sentences oe signature ae sg 
definition define family relations fl ae sigma oe formed presentations signature sigma sentences oe jl ae sigma induction structure follows 
sigma phi fl ae sigma oe iff exists delta phi ae delta ae sigma oe 
fl ae sigma oe iff exists delta delta jl ae sigma fl ae sigma delta fl ae sigma delta delta delta ae sigma oe 
translate oe fl ae sigma oe oe sigma sigma iff exists delta jl ae sigma fl ae sigma delta ae oe delta ae sigma oe 
derive oe fl ae sigma oe oe sigma sigma iff exists delta ae jlj sigma fl ae sigma ae oe delta delta ae sigma oe fl ae sigma delta stands fl ae sigma oe oe delta proposition relation fl ae sigma oe formed presentation signature sigma oe jl ae sigma holds iff oe th ae 
proof structural induction directly definition 
theorem may restated terms entailment relations introduced 
corollary presentation signature sigma oe jlj sigma fl sigma oe iff fl ae sigma ae oe 
definition provides basis proof procedure sentences relative presentation 
remarked achieve complete reduction working representation ae conditions achieve may derived comparing proof system determined definition fl ae sigma ae oe determined definition case ae fl ae sigma ae oe 
restrict attention sentences oe image ae exists sentence oe oe ae oe case definition may simplified derive oe fl ae sigma oe iff fl ae sigma ae oe oe ae oe oe ae oe ae oe ae oe oe step naturality take delta ae oe condition delta ae sigma ae oe trivial 
ae surjective proof procedure definition essentially identical ordinary proof procedure guided presentation corollary ae surjective representation 
formed presentation signature sigma sentence oe jlj sigma fl sigma oe iff ae fl ae sigma ae oe 
note requiring surjectivity strong restriction 
shall see practical situations necessary admit sentences lying outside range ae intermediate lemmas process proving sentences lying range ae 
important admit arbitrary sentences goals lifted proof procedure 
second proof procedure induced definition guided presentation direct components representations example case translate procedure applies ae oe oe ae oe oe 
sense proof procedure forms ae fly representations component order carry proof 
essential difference proof guided ae guided proof procedure lies restriction delta case derive 
enforce restriction proof procedure able decide ae oe jl ae sigma oe ae oe oe jlj sigma test requires signature sigma derive oe representation ae 
ae representation component ae sig embedding sigma determined ae sigma 
entities needed image ae sigma sigma 
may ae guide proof provided ae representation test membership range ae 
explicit introduce entailment relation 
definition logical system family sets sigma jlj sigma sigma sig define family relations fl sigma oe formed presentations signature sigma sentences oe jlj sigma induction structure follows 
sigma phi fl sigma oe iff exists delta phi delta sigma oe 

fl sigma oe iff exists delta jlj sigma delta jlj sigma fl sigma delta fl sigma delta delta delta sigma oe 

translate oe fl sigma oe oe sigma sigma iff exists delta jlj sigma fl sigma delta oe delta sigma oe 

derive oe fl sigma oe oe sigma sigma iff exists delta sigma fl sigma oe delta delta oe 
fl sigma delta stands fl sigma oe oe delta 
corollary ae representation family sets sentences indexed sig ae sigma ae jlj sigma sigma sig formed presentation signature sigma sentence oe jlj sigma fl sigma oe iff ae fl ae sigma ae oe 
proof corollary definition 
example recall counterexample 
context definitions ae fl sigma sigma ae eq sigma 
reason proof ae fl sigma repeated necessary mediating formula true filtered representation equation true sigma 
illustrates difference fl sigma counterexample fl sigma assess practical implications requirement keep track image ae check case derive sentence image turn section representation logics lf 
logical systems lf refer hhp complete definition lf 
complete understanding detailed technicalities requires reasonable acquaintance intricacies lf type theory 
hope general ideas intelligible background 
order discuss representations logical systems lf define logical system associated lf type theory 
basic form assertion logic closed type inhabited 
restriction closed types simplification suffices purposes relaxed practice 
see section hst discussion 
lf signature consists sequence declarations constants types type families 
written type type type families indexed elements types pix pix type 
see hhp examples 
definition lf signature morphism oe sigma sigma function oe mapping constants closed terms occurs sigma sigma oe oe sigma oe oe 
function oe natural extension oe lf terms 
identity morphism sigma identity map composition defined oe oe oe oe inclusions inclusion functions underlying sets constants 
sig lf category lf signatures lf signature morphisms 
note inclusion lf signatures inclusion usually omitted 
proposition expresses stability assertions lf type theory change signature crucial fact justify formedness definitions rest section detailed proofs omitted 
proposition oe sigma sigma sigma ff sigma oe ff assertion ff lf type system 
definition sigma lf signature 
lf sigma consequence relation types sigma lf sigma types sigma sigma type lf sigma iff sigma pairwise distinct variables lf sigma set closed lf types signature sigma consequence relation induced type inhabitation 
consequence relation straightforward gentzen style axiomatization similar nuprl con may basis interactive proof search 
construction extends functor straightforward way 
definition functor lf sig lf cr defined ffl lf sigma sigma sig lf consequence relation definition 
ffl lf oe oe sigma sigma oe types sigma restriction oe closed sigma types 
proposition lf logical system inclusions 
purposes encoding logical system interested specializations lf obtained fixing base signature sigma specifying syntax assertions rules hhp 
signatures represented extensions sigma signature morphisms represented lf signature morphisms extensions leaving sigma fixed 
inferential activity reduced inferential activity specialization lf sigma precise additional machinery needed 
definition sigma lf signature 
category extensions sigma written sig lf sigma full subcategory slice category sigma sig lf determined inclusions sigma 
sigma explicitly sig lf sigma objects pairs consisting signature sigma lf inclusion sigma 
sigma simply write sigma 
sigma objects sig lf sigma morphism sigma 
sigma sigma 
sigma sig lf sigma signature morphism oe sigma sigma sig lf oe identities composition inherited sig lf lf signature induces logical system signature follows definition sigma lf signature 
functor lf sigma sig lf sigma cr defined objects lf sigma sigma 
sigma lf sigma morphisms oe sigma sigma category extensions sigma lf sigma oe lf oe proposition lf sigma logical system inclusions 
encoding logical system lf comprises lf signature sigma internal type family distinguishing basic judgements encoding 
example encoding order logic hhp constant true kind type represents basic judgement form order logic 
significance true encoding apparent statement adequacy theorem terms type true oe context variables type true oe represent proofs oe oe oe syntactic coding oe lf 
methodology formalized setting follows 
definition internal type family sigma term sigma kind 
note sigma normal form pix pix type range internal type family sigma defined set rng sigma lnf sigma type lnf long fij normal form set internal type families sigma rng sigma rng sigma definition logic presentation pair sigma sigma lf signature finite set internal type families sigma 
definition sigma logic presentation 
logical system sigma sigma restriction lf sigma range specifically sigma sig lf sigma cr defined objects sigma sigma 
sigma lf sigma rng sigma morphisms oe sigma sigma slice category sigma oe lf oe rng sigma notice sigma 
sigma inclusion internal type family sigma 
proposition sigma sig lf sigma cr logical system inclusions 
definition logical system uniformly encodable lf iff exists logic presentation sigma surjective representation ae sigma 
triple sigma ae called uniform encoding word uniform reflects fact require natural encoding entire family consequence relations lf signature signature encoding suggested account hhp 
requirement surjectivity ensures accurately describes images sentences lf 
example encoding order logic hhp closed long normal forms shape true represent order sentences 
example uniform encoding consider logical system eq defined section 
encoding eq example benefit readers unfamiliar lf way gradually single sorted case 
single sorted algebraic signatures families form omega type individuals left implicit omega set ary function symbols 
call logical system eq simpler case single sorted ground equational logic geq example sigmag eq lf signature type eq type refl pix eq xx sym pix piy eq eq trans pix piy piz eq eq eq cong pif pix piy eq eq geq 
uniform encoding geq triple geq ae ae geq geq surjective representation defined follows ffl single sorted algebraic signature omega omega ae sig omega gamma extension sigmag eq constant delta delta delta times omega assume omega contain eq refl 
ae sig extends functor ae sig sig geq sig lf sigmag eq obvious way 
ffl obvious bijection set ground omega set closed lf terms type ae sig omega gamma ground omega set closed lf types form eq ae sig omega gammag determines surjective function ae omega omega rng ae sig omega gamma eq natural omega conservative cr morphism ae omega geq omega gamma lf ae sig rng ae sig eq 
omega algebraic signature fa omega ffg omega derivable lf ax eq ax eq ae sig omega gamma trans cong ax cong ax eq represents proof congruence property argument function geq omega generalization example single sorted non ground equational logic entirely straightforward 
sentences logic represented closed types necessary introduce explicit quantifier bind free variables simulate implicit universal quantification sentences eq 
order conform type theory lf add intermediate type formulae universal quantifier takes term type produces term type hhp 
example sigmag eq lf signature type type true type eq refl pix true eq xx sym pix piy true eq true eq trans pix piy piz true eq true eq true eq cong pif pix piy true eq true oe true oe geq true generalized earlier congruence rule allow predicates eq added additional congruence rules 
necessary examples deal logics having equality atomic predicate 
may shown rule cong equivalent presence refl rules cong pif pix piy true eq true eq cong oe pix piy true eq true oe true oe new presentation single sorted ground equational logic allows universal quantification introduced natural way 
signature sigmag eq pix true oe true oe pix true oe true oe eq ftrueg 
define surjective representation ae eq eq similarly example 
yields uniform encoding eq ae eq omega algebraic signature fa bg omega ffg omega derivable lf ax true eq ax true eq ae sig trans sym eq ax eq ax true eq represents proof eq omega careful analysis examples shows quantifier elimination rules lf substitution mechanism simulate substitution rule equational logic correct account possibility domain quantification empty gm 
final step add mechanisms encode possibility having sort individuals encoding single sorted equational logic 
add type sort names attach sort name type values 
syntactic operations eq inference rules supplied sort name additional parameter 
example lf signature sorts type obj sorts type type true type eq pis sorts obj obj refl pis sorts pix obj true eq xx sym pis sorts pix obj piy obj true eq true eq trans pis sorts pix obj piy obj piz obj true eq true eq true eq cong pis sorts pis sorts pif obj obj obj pix obj piy obj true eq true oe true oe pis sorts obj pis sorts obj pix obj true oe true oe pis sorts obj pix obj true oe true oe eq true uniform encoding eq triple eq ae ae eq eq surjective representation defined follows ffl sorted algebraic signature sigma omega gamma ae sig sigma extension constant sorts constant obj delta delta delta obj obj theta delta delta delta theta sigma 
assume eq refl occur sigma 
ae sig extends functor ae sig sig eq sig lf obvious way 
ffl surjective mapping ae sigma sigma rng ae sig sigma true determined examples ae sigma obj obj true eq signature sigma sorts constant binary operation theta function ae sigma natural sigma conservative cr morphism ae sigma eq sigma lf ae sig sigma rng ae sig sigma true 
sigma omega gamma algebraic signature sorts constants operation ae sig sigma extension described 
derivable lf ax true obj eq ax true obj eq ae sig sigma obj eq obj trans sym obj eq ax obj eq ax true obj eq represents proof eq sigma notice eq derive eq sigma correspondingly derived lf encoding lf signature ae sig sigma context ax true obj eq ax true obj eq term type true eq 
complex examples may built various representations logical systems lf 
proof search uniform encodings return problem proof structured theory presentations 
uniform encoding logical system intend exploit proof mechanisms lf conduct proofs structured presentations 
representation part uniform encoding logic required surjective thought may naive lifting presentations lf relying corollary 
case practice sigma lf sigma say restrict attention sentences range 
example encoding sentences represented terms form true 
prove say true certain cases prove valid 
type lies outside image ae soundly included 
sigma defined restriction lf sigma range obvious inclusion sigma lf typically surjective 
set sentences considered explicitly determined consider uniform encoding sigma ae family lf types sigma rng sigma sigma extending sigma corollary formed presentation signature sigma sentence oe jlj sigma fl sigma oe iff ae fl lf ae sigma ae oe 
important realize right hand side equivalence refers lf entities corresponding proof search determined definition carried entirely lf 
essential part proof activity test type lf sigma image ae sigma ae omega gamma omega sig rng sigma 
amounts matching lf type theory rng sigma iff exists determined convertible 
test may implemented unification algorithms developed pym pym elliot ell 
practice single constant case test trivial open problem matching problem general decidable 
example recall presentations counterexample sigma signature sorts constants sigma signature removed sigma 
sigma inclusion sigma derive sigma cg 
consider uniform encoding eq ae eq lf example 
conduct inference encoding 
lf signature ae sigma extension constants sorts obj obj derivable lf type ae sigma obj obj inhabitation logic lf particular lf ae sigma obj true eq true eq derivable ax true eq ax obj true eq true eq ae sigma ax obj obj eq ax true eq consequently inhabitation logic lf true eq obj true eq true eq lf ae sigma true eq entailments inhabitation logic lf justify cf 
definition ae fl lf ae sigma obj true eq true eq ae fl lf ae sigma obj true eq true eq ae fl lf ae sigma true eq note just proved ae fl lf ae sigma ae fl eq sigma hold 
essence happening similar illustrated counterexample higher order type place existential formula 
example shows need keeping track image encoding 
crucial mediating type obj true eq true eq inhabited ae sigma encode sentence eq range true filtered modified proof procedure determined definition ae fl lf ae sigma obj true eq true eq sigma rng sigma eq sigma extending putting logics section consider adaptation idea presenting theories structured way logic presentations 
step direction investigate pushouts give account parameterization instantiation logic presentations 
mind examples parameterization peano arithmetic underlying predicate calculus instantiations classical peano arithmetic heyting arithmetic parameterization hoare logic logic assertions parameterization calculus synchronization trees synchronization algebra win 
proposition sig lf pushouts inclusions 
proof oe sigma sigma sigma 
sigma pushout oe sigma sigma oe sigma sigma sigma sigma sigma signature inclusion possible sigma way oe sigma oe dom sigma assumes sigma disjoint sigma oe sigma rename symbols appropriately 
note sig lf finitely complete 
definition logic presentation morphism oe sigma 
sigma signature morphism oe sigma sigma sig lf sigma pix type exists oe fij oe oe identity composition inherited sig lf category logic presentations logic presentation morphisms 
note fv closed 
proposition assignment sigma 
sigma extends functor log 
sketch construction consider presentation morphism oe sigma 
sigma 
logic morphism oe sigma sigma may defined follows ffl oe sig sig lf sigma sig lf sigma defined objects pushout construction oe sig sigma 
sigma sigma 
sigma sigma sigma sigma sigma gamma gamma gamma gamma oe oe gamma gamma gamma gamma pushout sig lf extends morphisms universal property pushouts 
ffl sigma 
sigma oe sigma sigma construction induces translation oe rng sigma rng sigma 
uses fact oe logic presentation morphism 
cr morphism oe sigma sigma 
sigma sigma oe sig sigma 
sigma natural defines oe cr sigma oe sig sigma 
propose colimits category logic presentations build logics way colimits section build theories 
category logic presentations finitely complete may shown diagram colimit iff projection sig lf colimit 
pertinent case pushouts inclusions definition logic presentation morphism sigma 
sigma inclusion sigma 
sigma inclusion proposition pushouts inclusions 
proof pushout oe sigma 
sigma sigma 
sigma object oe sigma oe sigma oe oe sigma pushout object sig lf oe oe sigma morphism oe sigma oe sigma pushout construction sig lf inclusion seen parameterized logic presentation pushout morphism fitting morphism amounts instantiation analogy parameterized structured theory presentations 
example type true type ftrueg rop oe 
oei pi true oe true true oe oe 
ftrueg base presents trivial logic containing type formulae judgement form true 
prop rop presents propositional logic standard inference rules 
obvious inclusion base 
prop may seen propositional logic parameterized type atomic propositions 
instantiation parameterized logic presentation presentation single sorted ground equational logic geq see example inclusion base yields presentation prop geq propositional logic atomic formulae ground equations 
example type type true type ftrueg sigmau niv pix true oe true oe pix true oe true oe ftrueg base presents logic containing type individuals formulae judgement form true 
logic presentation univ sigmau niv presents logic universal quantification 
obvious inclusion base 
univ may seen pure logic universal quantification parameterized types individuals formulae 
result instantiating parameterized logic presentation geq inclusion base logic presentation eq example 
result instantiating prop geq yields presentation univ prop geq version order logic equality predicate 
existential quantifiers absent expressible logic includes universal quantification negation 
easy add explicitly extending univ forming parameterized presentation exist logic existential quantification applying univ prop geq 
examples pushouts category logic presentations mechanism instantiating parameterized logic presentations 
functor allows view combination corresponding logical systems 
straightforward method combine logical systems directly pushouts log 
general result different finitely continuous 
reason difference log internal structure sentences visible combination done coarse superficial way 
example consider extensions eq adds negation giving equations negations equations negations negations equations adds conjunction giving equations conjunctions equations conjunctions conjunctions equations 
pushout log logical system union sets sentences including instance conjunctions negations equations 
contrast result pushout obvious presentations logics fine detail structure sentences visible 
resulting presentation negation conjunction built operations type formulae logical system presents contains sentences arbitrarily deep interleaving conjunction negation expected 
phenomenon may illustrated examples 
mentioned univ prop geq presentation version order logic 
performing analogous construction level logics smaller set sentences obtained example existential expressible 
summing suggests proper way combine logics level logic presentations level logics 
problems sharing mentioned section building large theories arise building complex logics appropriate reasoning standard ml programs st 
complicated colimits applicable relevant diagrams arise natural way way logics combined notation language clear bg 
difference diagrams colimit useful consider subcategory inclusions colimits exist 
proceeding way obtain clear ml language defining logics structured way 
related notion logical system inspired goguen burstall institutions gb fiadeiro sernadas institutions fs 
roughly speaking institutions modeltheoretic view logical systems signature indexed families satisfaction relations behaved variation signature 
institutions theory view logical systems foundational reasons log finitely complete may shown pushouts involving logical systems small categories signatures 
reasonable assumption holds example names signatures come infinite fixed vocabulary 
closure operations sets sentences equivalent logical systems 
prefer take consequence basic matter taste framework admits generalizations available institutions multi cr cr multisets sequences sets cr closed weakening 
institutions parameterize semantics clear bg logical system write specifications idea pursued specification languages st st connection foundations formal program development bv st 
ideas sections concerning building theories logics structured fashion roots clear related goguen earlier general systems theory gog 
st considers language structured specifications similar richer language structured presentations introduced section 
discussed st essential difference view structured presentations purely theory presentations take view specifications st 
main role specifications describe class admissible realizations models primary semantics specification language st terms model classes 
way construe sections providing sound proof theoretic counterpart model theoretic semantics 
proof search procedure section complete semantics case logical systems eq 
advantage strictly follows structure presentation written user formalism benefits sketched section 
completeness price pay complete proof systems far wir require structure presentation altered course proof 
gb notion institution morphism investigate things question theorem prover logic prove theorems theories 
morphism logics sense corresponds roughly sound institution morphism framework gb 
kinds morphisms motivated different concerns institution morphism indicates institution viewed having built logic morphism indicates logic encoded comparison accurate 
providing notion morphism institutions adequately captures preservation proof theoretic entailment relation associated model theoretic satisfaction relation institution mes ac 
tar shown category institutions limits idea limits combine institutions briefly discussed 
translating setting limits related colimits category log logical systems 
gb concepts charter parchment progressively primitive charters tools constructing institutions parchments turn construct charters 
parchment logical system correspond roughly encoding logical system lf dependent types available parchments 
comparisons vague institutions charters parchments fundamentally model theoretic notions logical systems institutions proof theoretic 
gar attempts careful explication concept logic representation lf fully formal hhp 
main idea version lf studied refine type theory way possible extract logic defined signature signature 
accomplished distinguishing judgements types representing type theory extra logical methods type family component uniform encodings considered 
notion uniform encoding corresponds roughly notion adequate encoding gar variation signatures taken account 
drawing ideas considered sw hp proposes modules system elf logic programming language lf pfe pfe 
system provides structuring operations lf signatures may give structured presentations logical systems theories logical system 
analogue presentation morphisms provided notion essentially interpretation signature sequence terms lf calculus 
structuring operations considered hp design include analogue derive operation 
proof search provided solve primitive attempts determine type inhabited judgement encodes provable computes inhabiting term 
search procedure conditioned primitive relevant portions structured logic presentation solver 
absence derive ensures problems behavior structured search procedure representation discussed section avoided 
directions research definition logical system especially definition uniform encoding reflects intention sentences closed 
definition logical system uniform encoding generalized admit open sentences important realize different ways construe consequence situation avr 
truth interpretation free variables behave essentially constants handled notion logical system situation complicated free logics px hn 
validity interpretation free variables implicitly universally quantified formula 
hilbert type presentations firstorder logic usually take validity interpretation natural deduction presentations take truth interpretation 
ideas notion logical system may extended accommodate free variables hst 
definition basic theory presentation admits possibility infinite set axioms 
practice sets schematically theories interest recursively presentable 
notion logical system extended treat axiom schemes explicitly definition uniform encoding correspondingly generalized encode schemes pi types 
extension important case certain truth type logical systems lacking universal quantifier possible think axiom scheme standing instances 
interesting treatment schematization truth type validity type logical systems 
emphasis provability finding proofs 
reflected decision view logical systems consequence relations concomitant definition search structured presentations 
interesting develop general notion logical system includes explicit representation proofs 
mind considered categorical generalization notion consequence relation proofs morphisms consequence category satisfying weak closure properties linear categories gl 
difficult develop notions structured presentation structured search way witness fact sentence consequence structured presentation may extracted 
difficulty lie fact structured presentations rely working simultaneously family consequence relations just 
generalized admit proofs means consider hybrid notion proof spans family consequence categories 
clear style parameterization methods outlined section require signature morphism presentation morphism 
general infinitary proof obligation considered instance proof encoding logical system hand 
commonly arising situations particular typical applications parameterization shown oe presentation morphism sigma delta finite basic presentation 
reduces showing fl oe delta instance structured search explored hp presentations derive operation 
general proof obligations way 
finding fully satisfactory answer question subject ongoing research see wir far proposed solutions relevant discussion 
useful consider notion uniform encoding treating lf logical system 
idea regard basic theory presentations contexts internalize presentation structuring operations extension lf type theory 
particular derive operation closely related existential types mp 
part program fragment language derive carried hp 
related idea view presentation structuring operations internal logical operations explore analogy higher order categorical logic 
way hope obtain better proof theory deriving consequences structured presentations deriving entailments presentations ht 
provide simple way represent proofs structured presentations just proofs richer logic prove signature morphism presentation morphism reduce entailment structured presentations 
mentioned earlier proof system necessarily involve altering structure presentations course proof captured rules allowing commutation translate derive corresponding beck condition union derive frobenius reciprocity style proof systems wir far 
language structured presentations may generalized admit translation inverse image logic morphisms 
allow combination theories different logical systems giving rise inter logic search space similar intra logic search space structured theory presentations 
interesting develop ideas consider application formal program development indication hybrid logics inter logic search st 
rod burstall ds earlier collaboration structured theories 
research partially supported science engineering research council esprit funded compass basic research working group edinburgh university rh ds carnegie mellon university rh polish academy sciences linkoping university 
ac astesiano cerioli 
relationships logical frameworks 
bidoit choppy editors trends data type specification pages springer verlag 
avron honsell mason pollack 
typed lambda calculus implement formal systems machine 
technical report ecs lfcs laboratory foundations computer science edinburgh university june 
appear journal automated reasoning 
avr avron 
simple consequence relations 
information computation 
bg burstall goguen 
putting theories specifications 
proc 
th intl 
joint conf 
artificial intelligence cambridge massachusetts pages 
bg burstall goguen 
semantics clear specification language 
proceedings advanced course software specifications pages springerverlag copenhagen 
bg burstall goguen 
informal specifications clear 
boyer moore editors correctness problem computer science pages academic press new york 
bv voss 
implementation specifications 

kreowski editor trends data type specification pages springer verlag 
car cartmell 
generalised algebraic theories contextual categories 
annals pure applied logic 
con constable implementing mathematics nuprl proof development system 
prentice hall englewood cliffs nj 
db de bruijn 
survey project automath 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages academic press 
dgs diaconescu goguen 
logical support modularisation 
plotkin huet editors proceedings workshop types logical frameworks cambridge univ press appear 
ehr 
ehrich 
theory specification implementation parameterization data types 
journal association computing machinery 
ell elliott 
higher order unification dependent function types 
proceedings rewriting techniques applications chapel hill nc april 
far jordi es 
verification asl related specification languages 
phd thesis report cst edinburgh university 
fs fiadeiro sernadas 
structuring theories consequence 
sannella tarlecki editors proc 
fifth workshop specification data types september 
gar gardner 
representing logics type theory 
phd thesis report cst edinburgh university 
gb goguen burstall 
introducing institutions 
clarke kozen editors logics programs pages springer verlag 
gb goguen burstall 
fundamental algebraic tools semantics computation 
part comma categories colimits structures theories 
theoretical computer science 
gb goguen burstall 
study foundations programming methodology specifications institutions charters parchments 
proc 
workshop category theory computer programming pages springer verlag guildford 
guttag horowitz musser 
data types software validation 
communications acm 
gl 
girard lafont 
linear logic lazy computation 
ehrig kowalski levi montanari editors tapsoft colloquium functional logic programming specifications pages pisa italy march 
gm goguen meseguer 
completeness sorted equational logic 
sigplan notices 
gmw gordon milner wadsworth 
edinburgh lcf 
springer verlag 
gog goguen 
mathematical representation hierarchically organized systems 
editor global systems dynamics pages karger 
hhp harper honsell plotkin 
framework defining logics 
journal association computing machinery 
preliminary version proceedings symposium logic computer science pages ithaca new york june 
hst harper sannella tarlecki 
structure representation lf 
technical report ecs lfcs laboratory foundations computer science edinburgh university 
abridged version proceedings symposium logic computer science pages asilomar california june 
hst harper sannella tarlecki 
logic representation lf 
proc 
rd summer conference category theory computer science pages springer verlag manchester 
hn hayashi nakano 
px computational logic 
foundations computing series mit press cambridge mass 
hp harper pfenning 
module system programming language lf logical framework 
report cmu cs carnegie mellon university 
ht harper tarlecki 
logics modularity representation logical framework 
working draft 
mes meseguer 
general logics 
proc 
logic colloquium granada 
north holland 
mp mitchell plotkin 
types existential type 
proceedings th acm symposium principles programming languages pages 
ms macqueen sannella 
completeness proof systems equational specifications 
ieee transactions software engineering se 
pau paulson 
logic computation interactive proof cambridge lcf 
cambridge university press 
pau paulson 
isabelle manual 
computer laboratory cambridge university 
pfe pfenning 
elf language logic definition verified metaprogramming 
proceedings symposium logic computer science pages asilomar 
pfe pfenning 
logic programming lf logical framework 
plotkin huet editors logical frameworks cambridge univ press 
pym pym 
proofs search computation general logic 
phd thesis report cst edinburgh university 
sb sannella burstall 
structured theories lcf 
proc 
th colloquium algebra trees programming pages aquila italy 
sst sannella tarlecki 
formal development programs algebraic specifications parameterisation revisited 
acta informatica appear 
st sannella tarlecki 
program specification development standard ml 
proceedings th acm symposium principles programming languages pages 
st sannella tarlecki 
extended ml institution independent framework formal program development 
proc 
workshop category theory computer programming pages springer verlag guildford 
st sannella tarlecki 
specifications arbitrary institution 
information computation 
st sannella tarlecki 
formal development programs algebraic specifications implementations revisited 
acta informatica 
st sannella tarlecki 
extended ml past 
proc 
th intl 
workshop specification data types pages springer verlag 
st sannella tarlecki 
formal development programs algebraic specifications model theoretic foundations 
proc 
intl 
colloq 
automata languages programming pages springer verlag vienna 
sw sannella wirsing 
kernel language algebraic specification implementation 
proc 
intl 
conf 
foundations computation theory pages springer verlag sweden 
sw sannella wallen 
calculus construction modular prolog programs 
journal logic programming 
preliminary version proc 
th ieee symp 
logic programming san francisco 
tar tarlecki 
bits pieces theory institutions 
proc 
workshop category theory computer programming pages springer verlag guildford 
tarlecki burstall goguen 
fundamental algebraic tools semantics computation part iii indexed categories 
theoretical computer science 
thatcher wagner wright 
data type specification parameterization power specification techniques 
acm transactions programming languages systems 
vd van 
language theory automath 
phd thesis technical university eindhoven eindhoven netherlands 
win winskel 
synchronization trees 
theoretical computer science 
wir wirsing 
proofs structured specifications 
report mip fakultat fur mathematik und informatik universitat passau 
wir wirsing 
structured algebraic specifications kernel language 
theoretical computer science 

