agent software engineering charles petrie stanford networking research center sera mall stanford ca petrie stanford edu 
previously claimed agent technologies facilitate software development virtue high level abstractions interactions 
address specific characterization utility 
believe important distinguish agent technologies software technologies virtue set unique software characteristics 
contrast literature concentrates high level characteristics implemented variety software techniques 
agent software engineering important class agents applications characterized model inner outer language components 
experience developing applications longterm asynchronous exchange agent messages similar typical email usage leads believe unique characteristics facilitate useful software development practices 
utility derives stratification change components ease collaborative change debugging runtime due asynchronous text parsing message exchange reuse outer language generic agents programming environment 
agent development characteristics jennings wooldridge described agent oriented software engineering aose 
aose effectiveness claims strategies addressing complex systems decomposition abstraction organization agent oriented mindset gives advantage strategies 
agents objectives gives clear way decompose problem agents 
agent systems largely emergent behavior handle errors gracefully reduces need detailed specifications interactions need specified advance allows abstraction system building 
agent systems naturally hierarchical organizations 
important note agent identity fundamental component agent languages methodologies interactions 
agree points 
particular idea engineering system correct emergent behavior results critical idea agent software engineering 
agree notions introduced huhns aspect emergent shorter version appeared proc 
paam manchester april 
behavior having software modules able model modules leads modules able attempt different methods accomplishing task runtime data models turn leads flexibility robustness necessity programmer having correctly considering possibility 
fundamental idea programmer focuses types interactions possible specifying possibilities advance technique doing modeling interaction behaviors 
notions important fundamental 
important points software engineering reached plateau results stuck time 
agents approach potentially important 
find aose explanations lacking detail allow software engineer decide easily aose approach 
describe agent software engineering refinement aspects aose practical experience agent building 
attempt describe practice 
goal show distinguished objectively software techniques previously done 
topic frequently addressed respect languages 
fact agent languages wooldridge said intent develop semantics conformance semantics determined independent observer 
agent software engineering technology agent verifiable independent observers 
attempt persuade user useful practice apart general potential emergent behavior 
emphasize particular aspects agent models languages distinguish agent system development software technologies useful 
intent help bridge gap agent technology software engineering 
semantics agenthood describing agent development requires distinguishing agents kinds software 
unfortunately definitions agents differentiate technology software technologies agents ascribing human cognitive traits environmental awareness autonomy intelligence 
aose view foundations yoav shoham agent oriented programming aop advocated agents directly programmed terms mentalistic intentional notions agent theories 
similarly rao georgeff developed beliefs desires intensions bdi theory agenthood developed formalisms programming technologies 
call semantic view usually requires ascribing meaning operation agent 
early formal distinct software technologies clear difficult objectives creating programming environment completely reached 
programming languages compilers generated generally useful 
unhelpful people attempting technology 
important formal limited scope agent building formal software methods general 
useful languages compilers forthcoming proponents agent technologies spoke general characteristics agents influenced software practices 
informal descriptions agents autonomous proactive useful 
courses agents intelligent agents cover important technical material 
instance intends agents follow goals lot specific instructions turn sophisticated learning planning nonmonotonic reasoning distributed constraint satisfaction techniques developed artificial intelligence community 
fact important aspect agents se perform sophisticated reasoning especially collaboration desired behavior emergent specifically programmed 
formal aose describe mentalistic intentional notions agenthood way permit objective observer distinguish agents software technologies lot persuasive discussion case 
shoham definition agent entity state viewed consisting mental components beliefs capabilities choices commitments similar bdi descriptions little help objectively defining agents apart specific formalisms 
help focus narrow theory agents bdi tends generalize software engineering practice methodology 
informal interpretation mentalistic agent theories sufficient distinguish agent technology software technologies provide practical specific techniques agent building constitute software engineering 
arguable say object oriented programming implement non monotonic reasoning instance 
point know agent technology software technique 
distinguishing factor just program interpreted exhibiting kind autonomy various sophisticated algorithms 
view agents says programming practice software engineering 
consider ai techniques building agents 
time ai oft asked question 
answer eventually turned ai ai techniques 
seemingly circular definition came accepted definite set techniques developed researchers departments explicitly identified ai 
idea case agents 
may emergent behavior system design infancy experience identify general distinguishing characteristics agent software technology 
agent theory modeling bdi theory portrayed primarily aose means guiding agent software development 
bdi type agent semantics consider misses abstraction imposing agent theory development 
especially important converting legacy code agent capable working agents carry distributed computation 
case interpret workings legacy code instance bdi theory common model agent interactions basis integration software components 
agent objection relationship model similar reported volume clear example agent model entity relationship models bdi application building 
set engineering applications framework redux theory design characterize acts engineering agents 
redux theory quite different bdi theory 
modeling translation legacy code agent interactions 
case different agents built scratch legacy code conversions 
computation mind careful code ultimately conforms agent theory bdi redux 
example tate plan similar redux respects agents act formalism 
agent theory application interpretation agent model fig 

agent modeling illustrated common characteristic agent systems agent theory interpreted application produce agent model application development 
modeling characteristic agent systems warren information ontology imposed bdi model tie plan act redux 
ones referenced version hierarchical planning formalisms 
example warren presumes formal model goals actions achieve scheduled execution actions monitored 
links goals actions formalized complete constraints action scheduling guides development agents 
plan act formalisms detailed 
redux falls complexity 
legacy code conversion pure agent development important class agents agent construction partially characterized modeling common agent theory 
syntax development largely largely lacking detail necessary objective determination agent software engineering important exception 
jennings notes agents persistent thread control notes enables agents select actions agent actual state affairs 
comparison remote procedure calls similar message passing object oriented programming important distinction frequently obscured talk self awareness 
agents maintain state 
means potentially model huhns points 
important point computationally response query function call may just state conveyed caller information maintained agent dynamic information sources 
may distinguish agent technology important class remote procedure calls distinguish say database queries database server active thread control 
important difficult objectively determine state state 
required 
shoham jennings wooldridge take anthropomorphic semantic view agents contrasts directly view genesereth ketchpel distinguishing characteristic agent communications language acl 
alternative view syntactic requires know form communication software modules agent candidates 
previously elaborated syntactic view giving operational definition type agent typed message agents 
contribution add computation performed just client server architecture protocol need call software components agents 
requirement peer peer protocol really thesis objective indicator corresponds subjectively determined autonomous nature agents maintain thread control state 
syntactic protocol behavioral view requires subjective interpretation order decide agenthood 
clearly distinguishes agents remote procedure calls databases volunteer information clientserver protocols 
admittedly additionally able evaluate distributed computation performed agents better case argue degree evaluation say little efficacy agents software engineering methods 
distinction syntactic approach agent definition permits objective distinction agent software kinds semantic approach ascribing mentalistic characteristics software models conflated 
instance asserted difference objects object oriented programming agents agents perceive events perform actions communicate commitments 
objects passive entities capacities 
claim depends subjective interpretation goes immediately point distinction ordinary object messages agent messages typed 
objective difference systems agent messages typed exactly syntactic difference 
addition agent models language component agent software plays important role development agent systems 
typed message agents communicate inner outer languages characterizes agent communication languages acls today 
model translation main task typed message agents development syntax outer inner languages 
theory part development require relatively little 
existing outer language acl standards kqml fipa acl kif inner language kif expressive power required agent application 
scenario course naive 
various acls converged single purpose set performatives syntax years 
fact long experience kqml applications constant invention new performatives suggests trying define single set performatives futile 
similarly expressiveness kif sufficiently difficult simpler inner languages developed particular applications 
needs universal syntax really expects universe universal agents independently developed different tools speak language 
overly ambitious goal necessary agents valuable software tool 
universal standards exchange html xml documents email similar standard protocols multi agent systems typically constructed support distributed bounded complex computation 
mean agent languages useful methodology 
ubiquitous means agent technology characterized acl inner language 
characteristics utility previously discussed characteristics large class agent systems agent theories acl agent inner language 
require result agent system sense requiring peer topeer protocol 
characteristics objectively determined 
describe characteristics map characteristics software engineering agent systems 
models control formalisms agent control obviously useful development emergent behavior systems 
distributed artificial intelligence community working formalisms number years problems far resolved 
remains research topic characterized shoham current economics decision theoretic 
crucial research topic research difficult claim control formalisms characteristic agent software development general 
claim formalisms today reduce complexity agent interactions respect facilitate engineering emergent behavior addition providing guide system development 
look formal information ontology architecture warren multi agent systems planning scheduling functions clearly organize behaviors various information agents 
agents monitor behavior decide clone offload 
example redux 
constraint violation redux advise request logically consistent solutions problem 
redux monitors state problem solving 
agent attempts move solution space cause repetition cycle moves agents redux reply sorry message refuse change order prevent thrashing distributed design decisions 
redux tell designers changes designers affect previously decisions advising reconsider previously discarded choices 
say control functions done programming environment 
characterized commitment formal agent theory reduces complexity anticipating interactions agents programmer 
models languages guidelines modeling provides template agent development 
defines kinds conversations agent possibly functions programmer provide 
especially important transformation legacy systems agents 
task necessarily requires lot intelligence part programmer model provide guide programmer 
example redux decision design problem consists goal result non empty conjunction subgoals assignments 
fairly easy programmer familiar redux model recognize legacy code constitutes decision 
instance program defining electrical cable configuration parts electrical requirements goal text data specifying result set assignments connections 
programmer adds software legacy system shape data formed message sent agents computation 
occur automatically subject optional input engineer solicited runtime time new configuration generated engineer 
modeling adds important dimension especially aose decomposition abstraction strategies 
merely agent top level objective noted aose guide agent building elaborate model case guides development interaction agents system 
commitment common formal theory guide development distinguishing characteristic 
acl provides cognitive guide programmer anticipating kinds interactions agents 
research designed implement strong conversational models 
apart conversational models profusion dialects acls inner languages confirming evidence simple concept outer inner languages characteristic useful 
example developers notice immediately just kqml performatives ask tell inner language choose develop application 
usually case electronic project language uses standard acl performatives adds new ones 
inner language typically application dependent useful guide developer application independent acl example simple inner language occurs warren 
instance query ibm earnings dow jones news monitor sender barney receiver news agent language simple query news reply ibm query notification deadline minutes content query news clauses newsgroups dow jones earnings projections subject ibm output notice acl performative monitor type defined interaction various agents distributed application 
defines class actions occur agents 
inner language content refers specific types functions data 
monitor accepts content keywords query news clauses output 
clauses takes particular set feature variable value assignments 
performative monitor independent particular queries 
commitment acl defining possible interactions inner language domain specific functions data specified characteristic 
illustrates basic ingredients agent construction ignoring communications software 
agent theory model application 
theory model specific operations application 
acl guides formation basic agent interactions inner language reflects basic data exchange functions 
elements help guide system developer provide measure indirect control subsequent behavior agents 
fact apply common theory components application acl means way integrating legacy applications 
wrap legacy code corresponds programming methodology objects wrapping code correspond common theory provides extra glue integration 
example systems instance tie agents included agents developed different sites different countries 
redux integrate various engineering software multiple disciplines 
warren integrates agents working multiple domains different expertise data sources 
www cdr stanford edu protocol syntax html application operations agent theory agent interaction types functions data acl models inner language fig 

agent construction layers rates change common model acl inner language useful allow developer stratify change inherent development maintenance software systems 
designed agent system model translation changed rarely difficult fundamental change 
set performatives comprise acl may change model translation agent system easier change 
modifying existing performative adding new means changing parsing syntax possibly calling new functions 
designed set performatives class applications change infrequently 
inner language provides domain task oriented language development maintenance change application occur 
illustrated changes translation agent model fundamental 
degree difficulty managing change agent system severe 
typically modeling done intelligent fashion changes rare 
acl determines kinds interactions occur changes acl may major especially new performative introduced 
designed acl introduce change infrequently inevitably 
inner language provides layer change frequent handled difficulty realizing change trivial programming endeavor 
cases change application operations agent theory agent interaction types functions data acl models inner language change severe rare major frequent moderate infrequent fig 

change stratification largely communicated changing syntax languages keywords values allowed complex changes 
largely syntax acl inner language 
means types software message parsing intensive runtime computation 
apart performance significant impact distributed development 
development methodology reflects 
members development team owns agent may decide independently change functionality 
interface agent defined set messages sends receives documented web messages collectively describe 
means syntax acl inner language changed 
changes acl usually discussed group constitute part jointly owned language 
changes done team members notified change email instructions see new web documentation 
message collaborative change debugging debugging tools agent systems generally lacking exceptions 
hand message nature naturally provides debugging functions 
especially true applications characterized asynchronous message exchange software agents response time may range second day software agents depend heavily human response time analysis 
contrast agent applications agents interact real time human intervention 
debugging characteristics described may useful applications 
main aspects agent messages facilitate programming collaboration occur common language level requiring common programming language 
application level error messages generated programming language compilers course occurs agents parsers provide useful information quick fixes 
store forward message routing mechanism message interactions provide new methods debugging 
programming individual agents separated collaborative programming 
individual agents may written conventional programming language choice java smalltalk lisp 
collaborative programming done conventional programming language shared acl inner language inherited refined development parsers 
means compiler constraints messages sort generated system parser network software failures level shared collaboration 
collaborative level messages determined programmers including error messages 
team member change parser reflect new syntax required important feature language nature called play 
parser agent receiving new message reject message syntactically incorrect 
return standard error message includes string understood 
instance type string send redux receive error message code breakage 
simply types message performative strange receives reply error message text inner language performative strange unknown redux 
particular field inner language may wrong error strange particular syntax element wrong error content parsing content 
value parsed weird error content parsing match keyword token illustrate easy get helpful information free parser 
easy agents note acl inner language problem include helpful information 
agents break developers clear idea runtime problem 
syntactic errors may treated way requests fulfilled 
message requires response action agent may reply sorry message indicating reason may agent properly process message 
may task data values state problem solving unrecognized performative 
example redux may tell designer text part inner language request particular design decision fulfilled sorry decision inadmissible 
cause fact unavailable believed 
set examples follows sorry process controller achieve goal schedule meeting constraint manager reports constrained sorry ticket agent understand query best cost sorry authority reject decision dou 
optical designer change 
agents break developers provided valuable information runtime agents easily modified include information desired problem messages 
examples ways agent messages valuable debugging standard error sorry messages 
obviously problem messages part agent software developers free include information may desired 
messages parsed providing information facilitated 
agent messages attributes contribute debugging 
instance agents may programmed decide process message sender right authority 
example redux may tell designer text part inner language sorry authority reject decision 
easy determine sender standard part acl syntax 
similarly problem finding correct name agent contacted simple matter interpret sorry error messages agent nameserver request list valid agents information find right agent 
sorts actions quite typical agent development apart notions automatic agent message routing content 
point easy produce agents degrade gracefully provide information desirable development 
message characteristic agents help debugging forward infrastructure agent message router 
particular agent having difficulty processing sequence set messages agents agents taken line set messages replayed behavior agent correct 
capability useful debugging dependent unique message passing nature agents 
message nature facilitates runtime error correction 
engineering applications addressed long lived agent software may die move project characterized asynchronous communications design changes period weeks 
errors message processing handled way agent errors changes 
offending message rejected agent sorry error message typically results message sent developer sending agent 
point developers decide problem sending agent receiver 
change 
result different message sent receiving agent simply deletes message message queue maintained router awaits new message 
change way receiving agent process original message simply reconnects router new code re processes original message deleted 
computation proceeds 
great applet java legacy code agent wrapper message agent router kqml message agent register connect register connect agents infrastructure application fig 

agent message router difference correcting error development application execution 
important debugging benefit derived asynchronous feature agent messages store forward router 
illustrates store forward mechanism agent message router amr 
messages go amr sent designated recipient 
messages stored recipient signals deleted 
messages go central point characteristic debugging 
amr agent agent agent agent fig 

single stepping message delivery build administrative agent illustrated displays sending receiving messages agents 
agent really gui applet tied router order router message transfer inspect messages variety conditions regular expression matching acl fields 
kind debugging important system development possible store forward router 
programming environment models general ubiquitously applicable problems reusable basis development 
designed system identifies acl performatives largely unchanged life particular application large class applications 
set reusable agents language components provides high level programming toolkit 
known set performatives occur re occur different acls kqml fipa ask tell sorry error reply 
standard 
discovered performative trace 
performative similar warren performative monitor request agent track status object changes values particular properties 
particularly useful easily interfacing agents 
partial bnf legal inner language component particular performative content types objects redux ontology 
agents respond information objects ontology 
example application redux agent tracks validity constraints constraint manager performs constraint satisfaction constraints 
redux tell constraint manager time validity constraint changes things 
redux hard coded requiring check see agent named constraint manager application requiring constraint manager special name 
trace constraint manager dynamically request redux track constraints special hard coding general ability tracking 
redux agent simply notes name requesting agent adds request list things track 
notifications sent requesting agent object properties change subsequent messages computations 
adding new agent means new agent send redux trace request 
integration require rewriting redux code 
notice characteristics acl agents having names capability possible 
characteristic multi agent systems kind integration agents reusable 
redux constraint manger agents examples generic agents provide general functions useful large class engineering applications 
library reusable agents acquired 
warren provides example highly reusable generic agents large class applications 
say fortran subroutines functionality software components quite complex volunteer messages software components users unexpectedly 
summary set characteristics may objectively differentiate software technologies 
objection determination theory language agent theory language objective 
appeal previous definition ai 
agent theories languages explicitly defined developers 
better agent languages specify consist typed outer language specific characteristics explicit representations sender receiver errors inner content language communication protocol peer peer previously discussed 
done differentiation respect software technologies explicitly 
realize compared object oriented programming instance messages passed internet distributed code components 
saying agent messages characteristics described distinguish remote procedure calls object messages resemble leave detailed comparison characteristics experts various software engineering technologies 
goal comparison possible providing agent software technology characteristics objectively determined 
coverage outside scope expertise 
note software technology defined differentiated commitments 
characterized agent theory modeling acl inner language 
defined features languages including reusable changeable acl fact text messages handled agent parsers requiring peer peer protocol 
parsing critical utility languages described 
acl kernel reusable performatives ask tell standard syntax fields sender receiver ontology reflect particular commitments declaring identity sender committing conversational mode interaction allows agent refuse processing message providing error sorry messages 
import software development systems errors incorporated lower level infrastructure messages generated software agents provide useful information system development 
certainly programming language methodology develop system commitments easily 
instance notion object oriented programming combination agent modeling language parsing 
commitments part methodology 
speculated utility experience 
find useful features characteristics agent modeling reduce complexity managing emergent collective behavior agents 
programming guidelines provided agent models acl stratification change model translation acl inner language programming collaboration asynchronous text message parsing including error messages programming tools reusable agents language components 
model translation provides guide developer anchor part software change 
parsed languages interaction provides late runtime evaluation software changes 
error messages particularly useful regard 
asynchronous messages parsing provides new mode collaborative development 
probably prototyping technique 
agent system working probably system efficient compiled standard programming language object oriented languages 
agents objects pass methods need acl inner language standard syntax fields required parsers 
parsing interpretative computation languages agent interactions fixed reason converted code 
waiting production compiler envisioned shoham early 
acknowledgments experience prof mark cutkosky webster andreas 
barbara harold contributed ideas especially responsible noting acl fields sender special commitment agent systems 

decker sycara williamson designing behaviors information agents proc 
internat 
conf 
autonomous agents agents february 
see www cs cmu edu papers ps gz 

haddadi models conversation policies proc 
workshop specifying implementing conversation policies autonomous agents conference seattle may 
see www boeing com special agents pdf 

faltings intelligent agents cs course epfl lausanne 
see nrc stanford edu petrie agents html 

genesereth ketchpel software agents qq communications acm july 
see logic stanford edu papers agents ps 

huhns interaction oriented programming volume 

jennings agent software engineering artificial intelligence pp 
elsevier press april 

jennings wooldridge agent oriented software engineering handbook agent technology ed 
bradshaw aaai mit press 
see ftp ftp elec qmw ac uk pub distributed ai publications agt handbook pdf 

petrie cutkosky java agent infrastructure message routing ieee internet computing mar apr 
see 
stanford edu papers html 

myers wilkins act formalism version sri international artificial intelligence center menlo park ca september 
see www ai sri com act act spec ps 

parks agent oriented programming practical evaluation www cs berkeley edu cs 

petrie agent engineering web intelligence ieee expert december 
see cdr stanford edu expert html 

petrie agent project management lecture notes ai pp 
springer verlag 
see cdr stanford edu papers dpm dpm html 

rao georgeff bdi agents theory practice tech 
rep australian artificial intelligence institute melbourne australia april 

shoham agent oriented programming artificial intelligence pp 


control coordination multiple agents decision theoretic economics methods project 
see com public project overview pages stanford html 

tate dalton open planning architecture application logistics advanced planning technology ed 
tate pp 
aaai press 
see ftp ftp aiai ed ac uk pub documents logistics ps 

wagner agent oriented analysis design organizational information systems proc 
fourth ieee international baltic workshop databases information systems may 
see www inf fu berlin de ps 

darpa rome laboratory planning initiative www ai sri com wilkins mpa tie html 

wooldridge jennings software engineering agents pitfalls ieee internet computing may june 

wooldridge verifiable semantics agent communication languages proc 
icmas pp 
ieee computer society press may 
