parametricity unboxing types john launchbury ross paterson oregon graduate institute box portland usa department computing imperial college london sw uk 
lazy functional languages typically element type 
provides great flexibility comes cost 
explore consequences allowing types lazy functional language haskell 
type class system keep track show consequences parametricity controlling evaluation order unboxing 
scott showed pointed cpos bottoms give meaning general recursion values including functions types functional languages concept 
languages haskell model types appropriate cpos non terminating computations happen type cpos pointed 
gives significant flexibility 
particular values type may defined recursion 
parametricity associated costs 
reasoning programs allow possibility non termination function fact total 
similarly general parametricity theorems follow polymorphic types popularized wadler theorems free weaker pure simply typed calculus 
parametricity introduced reynolds express limits behaviour polymorphism induces 
example function type ff ff ff interesting argument return 
language haskell element type function type ff ff ff ignore argument call infinite recursion return 
allow parametricity results weakened usual treatment require relations strict inductive elements chains related limits 
example consider polymorphic typings quantification explicitly reverse ff list ff list ff foldr ff fi ff fi fi fi list ff fi parametricity theorem reverse simplified form relation function reverse ffi map map ffi reverse strict assertion easily proved induction assuming strictness similarly parametricity theorem foldr ffi foldr foldr ffi map strict direct proof requires strict 
case parametricity theorem significantly weaker result direct proof 
operational issues implementation costs associated allowing types contain bottom element 
non strict language expression evaluated known needed 
arguments boxed passed pointers delayed computations 
straightforward addition costly arguments evaluated extracted added 
compares poorly single machine instruction bottom element give programmer control evaluation order space behaviour 
known function strict argument type primitive algebraic data type may safely pre evaluated 
languages sequencing operator seq intended force evaluation expression going 
unfortunately operator seq sensible argument types contain 
case product types seq require sort interleaved evaluation function types prohibitively expensive 
furthermore implementation operator depends extent argument type polymorphic weakening parametricity relations strict bottom reflecting 
optimization techniques rely parametricity lost 
efforts extend sequencing effect types tend complicate denotational description 
example true products haskell lifted tuples evaluation may forced 
products satisfy simple set equations lifted tuples difficult reason 
show modern domain theory may practice influence design lazy programming language haskell 
particular accept element type allow domains 
recursion fact recorded type stating type parameters pointed 
major consequences 
parametricity repaired returns glory 
recursion strictness side condition theorems 
secondly types control evaluation order unboxing values subsuming earlier peyton jones launchbury 
pointed domains domain theory developed originally order provide solutions recursive domain equations 
solutions needed model untyped calculus recursively defined data types languages haskell ml 
solutions exist equations pointed cpos theory exactly framework 
long noted asymmetrical category domains required element functions need preserve 
consequence number constructions fail important sums 
theory pointed cpos comes equipped kinds sum coalesced sum bottom elements summands merged separated sum completely fresh bottom element introduced 
unfortunately true categorical sum 
introduces confusion second contains junk 
plain cpos cpos necessarily bottom elements sets special case possess categorical sum disjoint union pair cpos 
summands independent extra elements introduced 
notice domains non empty sum domain bottom element 
cpos combine rest domain theory long recursive domain equations recursive values likewise restricted 
shall give brief account details may standard texts thing note category cartesian closed 
point domain terminal domain exactly function domain point domain products built cartesian product component product completely independent function spaces constructed exactly currying isomorphism 
category pointed cpos 
earlier separated sum widely data types languages haskell viewed categorical sum followed additional operation called lifting adds fresh bottom element domain 
data type definition data univ ch char nu int fst ff fi ff theta fi ff snd ff fi ff theta fi fi ff fi ff fi 
ff theta fi inl ff fi ff 
ff fi inr ff fi fi 
ff fi choose ff fi fl ff fl 
fi fl 
ff fi fl fail ff ff lift ff ff ff ext ff pointed fi ff fi ff 
fi pointed ff ff fig 

constants modelled domain abusing notation slightly univ char int lifting construction arises naturally left adjoint implicit inclusion subcategory pointed cpos strict functions 
pleasant categorical perspective domain constructions arise directly adjunctions 
means practice operations satisfy rich clean set algebraic laws making reasoning easier laws special cases side conditions 
lazy functional language may viewed form meta language denotational semantics talk category cpos 
shall introduce tiny language sort 
pointed types shall consider typed calculus types theta ff ff greek letters type variables 
shall discuss explicit polymorphism extension include case entirely standard 
type constructors cartesian closed category 
previous section cpo model type consists single value theta constructs products constructs function spaces 
type constructors yield disjoint union lifting 
constants language types fig 

type ff includes primitive non terminating value fail 
types qualified pointed condition indicating element 
describe class type constructors construct types belong pseudo haskell class pointed ff 
ff 
ff pointed fi pointed ff theta fi 

ff fi fi pointed ff fi 
fi ff 
fail note sum type pointed 
note lifted types pointed types thing 
lifted types pointed products pointed types pointed lifted 
definitions rules pointed restrictions inferred usual haskell algorithm 
functions analyse lifted type defined ext pointed result 
example suppose type lifted integers int defined int int type representing set integers 
primitive addition function say int int int operating integers extended type lifted integers follows int int int ext ext lift arguments evaluated ext values extracted added result addition lifted result element type lifted integers 
type system prohibit function attempted return integer result type ext pointed 
similarly haskell case operation lifted sums case ff fi pointed fl ff fl 
fi fl 
ff fi 
fl case ext choose course full case construct richer allowing nested pattern matching guards 
corresponds simplified version haskell core language 
ext define polymorphic seq operation follows 
seq ff pointed fi ff 
fi fi seq ext argument evaluated non 
value thrown away constant function returns notice restrictions type seq 
ff fi ff fi ff theta fi fst snd fst snd ff fi fl ff fl fi fl ff fi ff fi choose inl choose inr ff inl fi inr ff pointed fi ff fi ff ff ext fail ext lift fail ff lift fail lift fig 

axioms argument drawn lifted type produced data declaration example 
noted sect 
sufficient merely pointed type 
secondly result type pointed evaluation expression terminate 
axioms axioms language fig 

groups plus fi rules abstraction usual axioms pointed cartesian closed category category axioms element wise 
forms axioms demonstrate origins 
type constructors theta defined right adjoints delta defined left adjoints axioms different structure 
proposition 
axioms fig 
hold general cpo model 
simple consequence theorem pointed ff ff element types 
parametricity far taken types language interpreted domains fairly standard way 
interpretation types interesting 
particular types may interpreted relations true theta fst snd inl inr 

lift fig 

actions relations domains logical formulas 
relational interpretation types allows derive parametricity results 
actions various type constructors relations fig 

relations defined inductively vectors elements drawn corresponding types 
vectors length relations simply define subsets 
commonly take case vectors length giving binary relations 
result standard 
proposition 
model satisfying axioms fig 
actions relations preserve identity relations 
action preserves identity relations said unitary identity extension property 
add base types particular flat integers relational action identity relation type 
consequence proposition relational interpretations types primitive monomorphic constants theorems 
great surprise example binary relational interpretation type int real power parametricity comes polymorphic types 
relational interpretations types free type variables may stand relation tuple domains 
parametricity theorem states constants satisfy relational interpretation expressions built 
example suppose expression type ff ff ff ff ff 
theorem holds ff rel ff ff ff ff ff words type tell satisfies sort induction principle 
notation universal quantification sort emphasize variables free 
standard 
new subclass types pointed class 
type pointed ff ff relational interpretation type ff pointed rel ff 
achieve define pointed 
applied relations pointed constraint specifies strictness 
extension standard result easily verified 
proposition 
relational interpretations types constants fig 
provable axioms fig 

consequence parametricity theorem holds term calculus term satisfies formula relational interpretation 
recursive functions language useful allow recursive functions 
introduce new constant fix pointed ff ff ff ff defined usual kleene construction fix definition sense base type element pointed restriction type 
definition requires operation countable chains base domain complete 
similarly operation preserved relations relation relates corresponding elements tuple chains relate lubs 
relation inductive 
chosen assume domains complete assume relations inductive 
properties preserved type constructors actions relations 
construction fix parametric satisfies relational interpretation type ff pointed rel ff ff fix just familiar scott de bakker induction rule 
alternatively allowed domains relations introduced type class complete complete relational case inductive additional complexity bring little benefit 
effort worthwhile specification language 
define functions pointed constraints placed needed 
returning examples assume unary type constructor list 
shall discuss recursive type definitions detail sect 
suffices note defined lifted sum list ff pointed ff 
function reverse fixed point function type ff list ff list ff 
list ff list ff list ff pointed list ff list ff 
inferred type reverse reverse ff list ff list ff condition ff 
similarly type foldr foldr ff pointed fi ff fi fi fi list ff fi describes desired property 
time recursion relies type fi ff pointed 
operational implications earlier material forces changes operational model 
type system guarantees implement types differently lifted types require 
effect model element type corresponding element corresponding pointed type lose 
reasoning ability entirely valid 
claim semantically clean language ideal expression low level concerns sequencing unboxing 
peyton jones launchbury closely related system intention describing value may passed unboxed 
turns system provides better vehicle doing greater degree flexibility 
unboxed values value said boxed represented indirection heap say represented directly appropriate bit pattern 
language haskell distinct reasons values boxed placed heap passed 
may efficient pass address large data object object 
secondly order implement polymorphic function single piece generic code values manipulates packaged look 
lot minimizing boxing unboxing values arises way 
lazy languages arguments evaluated known results required arguments passed pointers computations called call need 
order function arguments evaluated shared computation forced evaluation arguments passed boxed 
address 
types unboxed values semantic notion types operational notion unboxed values closely related expression type terminate may safely evaluated represented value weak head normal form 
operationally just right value may stored unboxed 
value evaluated possibly need live pointed domain 
relationship explored peyton jones launchbury 
introduce class unboxed types corresponding types primitive unboxed integers defined user unboxed data type declarations 
model types domains 
big difference comes semantics functions 
track recursion forced model function target unboxed type function lifted version type 
type unboxed semantics models function 

unboxed values manipulated special strict sublanguage 
special treatment unboxed types complicates semantics able salvage usual transformations imposing restrictions expressions enforced modified type system 
expression unboxed type appearing function argument weak head normal form 
function language permit expression 
explicitly evaluated bound variable may argument 

ordinary type variables instantiated unboxed types 
uses recursion recorded types restrictions vanish 
way expressing difference systems semantics introduced lifting model functions unboxed types require lifting show source language needed giving finer source level control 
implementation scheme way value lifted type constructed lift way scrutinized ext 
operationally lift corresponds return leaving element type top stack appropriate registers depending convention actual implementation 
value potentially sharable copied heap updating boxed closure 
similarly ext corresponds context switch going evaluate second argument 
evaluation argument terminates performed lift 
ext immediately tail call function argument passing explicit value just returned 
evaluation scheme reminiscent continuation passing style effective call value computations 
precisely correspondence elements type functions type pointed ff ff ff functions 
ext 
lift implement choose requires convention layout sums 
tag top word stack example 
choose operates sum argument evaluated choose simply perform branch basis tag 
source level unboxing having outlined possible implementation mechanism shall consider take advantage practice 
fortunately lot direct experience draw 
mechanisms subsume methods peyton jones launchbury techniques techniques practice time glasgow haskell compiler 
take examples forms optimization achieved 
concerns removing repeated attempts evaluation second shows take advantage simple strictness information 
point worth mentioning intention typical programmer see 
done compiler 
hand times programmer needs control data layout particularly writing library code time critical code 
cases form code may written hand 
eliminating repeated attempts evaluation 
may define doubling function follows 
double int int double double called argument represented possibly unevaluated heap closure 
body evaluated plus function entered 
requires arguments argument entered evaluated value extracted 
second argument entered evaluated value returned directly 
clearly second evaluation unnecessary hope clever code generator spot 
hand code generators complex offloading extra functionality code generator may idea 
possible express unboxing source source transformation move optimizations earlier phase pipeline 
case example unfold definition gave earlier obtain double int int double ext ext lift appeal law satisfied ext ext ext ext repeated scrutiny value replaced single 
law obtain double int int double ext lift scrutinized just int component twice 
workers wrappers 
see source level unboxing take advantage simple strictness analysis consider iterative version factorial function 
fact int int int fact fact gamma conventional strictness analysis tells fact strict arguments fact 
statement useful program transformation equivalent form lifting fact ext ext fact lift lift suggests restructuring fact functions wrapper called fact evaluates arguments worker called fact received unboxed arguments 
functions produced entirely mechanically give 
fact int int int fact ext ext fact fact int int int fact lift lift fact lift gamma lift lift body fact boxed versions arguments simply reconstructed 
far gained 
adopt principle wrappers unfolded 
wrappers short nonrecursive functions recurse worker intend unfold 
addition suppose primitive operations gamma defined terms workers wrappers 
example int int bool ext ext lift unfolding definition brings ext directly explicit lift 
axioms earlier cancel follows ext lift unfolding wrappers including fact wrapper form lift cancelling explicit lifts yields result fact int int int fact lift fact gamma initial call fact arguments evaluated unboxed 
computation proceeds laziness passing unboxed values tail recursion 
function terminates lifted integer returned 
course function may terminate negative 
case result 
tried avoid final lifting result type checker object recursion result type pointed 
projection strictness analysis explicit treatment lifting suitable exploiting results projection strictness analysis 
example image projection lists integers exactly lists unboxed integers 
explicit lifting may formalized factoring projections pairs done related 
recursive type definitions complete picture interaction pointed constraints features typical functional language consider recursively defined types 
semantics types customarily described colimit construction 
construct fixed point type constructor constructs sequence domains corresponding domain embedded 
usually assumes domains pointed obtain embeddings suffices preserve 
categorical colimit construction yields pointed type pair isomorphisms interesting case recursive type parameters 
treatment follows pitts 
assuming types relations pointed shall pointed constraint keep track exactly types required pointed pitts proofs 
sketch general situation shall assume single recursive type parameter 
extension mutual recursion parameters straightforward 
obtain general types separate negative positive occurrences variable replacing pair variables 
suppose ff gamma ff fi gamma fi type constructor ff gamma fi gamma occurring negatively ff fi occurring positively 
recursive type ff gamma ff type constructed iterating colimit need condition pointed ff pointed fi pointed ff gamma ff fi gamma fi note negative arguments play role constraints ignored rule making instance pointed 
proofs pitts easily extended establish ff satisfying recursive type ff gamma ff exists pointed 
unitary domain interpretation pair constants ff gamma ff ff gamma ff ff ff gamma ff gamma ff ff gamma ff ff gamma ff ff gamma ff ff gamma ff ff ff gamma ff gamma ff functions constitute isomorphism pair satisfy relational interpretations types form structural induction 
example language allow definitions type pointed ff seq ff ff theta seq ff type list ff ff theta list ff describing infinite sequences lists 
pointed condition required order type pointed 
hand type lists lifted pointed condition ff 
example recursive type definition fix function curry combinator type pointed ff ff gamma ff fi gamma fi fi gamma ff fix pointed ff ff ff ff fix ff pointed order recursive type pointed forcing constraint type fix 
avoid need pointed constraint type definition lifting fix defined ext ends type 
definitions yield fixed points 
parametricity property type uniquely determines fix definitions equivalent kleene see section 
fundamental ideas described 
years ago phil wadler suggested system 
benefited discussions erik meijer improved feedback tim sheard andrew andrew moran 
writing aware brian howard uses equivalent treatment lifting pointed types describe language initial final retractive types exist 

andrew appel 
compiling continuations 
cambridge university press 

carl gunter 
semantics programming languages structures techniques 
mit press 

fritz henglein jrgensen 
formally optimal boxing 
st acm symp 
principles programming languages pages portland january 

brian howard 
inductive projective pointed types 
acm int 
conf 
functional programming philadelphia may 

paul hudak simon peyton jones philip wadler report programming language haskell non strict purely functional language version 
sigplan notices march 

stefan kaes 
parametric overloading polymorphic programming languages 
nd european symp 
programming volume lecture notes computer science pages 
springer 

xavier leroy 
unboxed objects polymorphic typing 
th acm symp 
principles programming languages pages albuquerque nm january 

ross paterson 
compiling laziness projections october 
draft 

simon peyton jones john launchbury 
unboxed values class citizens non strict functional language 
conf 
functional programming languages computer architecture pages cambridge ma 

andrew pitts 
relational properties domains 
information computation appear 

john reynolds 
types abstraction parametric polymorphism 
information processing pages 
elsevier 

david schmidt 
denotational semantics methodology language development 
allyn bacon 

mike smyth gordon plotkin 
category theoretic solution recursive domain equations 
siam journal computing 

peter thiemann 
unboxed values polymorphic typing revisited 
conf 
functional programming languages computer architecture pages june 

philip wadler 
theorems free 
th conf 
functional programming languages computer architecture pages 
ifip 

philip wadler stephen blott 
ad hoc polymorphism ad hoc 
th acm symp 
principles programming languages pages 

philip wadler john hughes 
projections strictness analysis 
conf 
functional programming languages computer architecture volume lecture notes computer science portland 
