debugging type errors full version karen bernstein eugene stark department computer science state university new york stony brook stony brook ny usa november compilers programming languages standard ml able find programming errors compile time diagnostic messages type inference algorithm clearly identify source type errors 
argue extended type definition assigns types open expressions closed expressions serve basis programming environment helps programmers debug type errors 
type definition closely related damas milner definition addition provides principal typings open expressions 
algorithm performs type inference respect type system give simple direct proof correctness 
describe prototype implementation 
keywords programming environments type inference standard ml type system permits ml mth compilers identify certain kinds programming errors compile time inferring general principal type closed expression 
problem ml programmers especially novice programmers source type errors hard find 
conservative extension current type system provides support tracking source type errors 
generating useful diagnostic messages type errors difficult problem subject papers wan jw db 
issue source error quite distant symptom error error message occurs 
problem inferred types especially subexpressions internal program complicated hard understand 
large number type constraints contribute inferred type single variable general reasoning large sets constraints hard 
propose extend current ml programming environment order provide additional support finding source type errors 
standard ml type inference algorithm infers principal types closed expressions expressions free variables 
suggest inferred types open expressions valuable tool research supported part nsf ccr debugging type errors section give example extension provide kind breakpoint facility extracting type information inside programs 
extending ml type inference open expressions problematic ml type system directly support notion principal type expressions 
usual type inference algorithm ml takes expression type environment parameters returns principal type type environment mapping assigns types variables occur free expression principal type general sense possible types expression instances 
obvious thing try modify algorithm takes open expression parameter returns principal typing consisting type expression assignment types free variables way typings expression instances principal typing 
principal typings exist 
example consider ml expression fn true bound variable imposes constraint functions take type parameter 
addition function takes integer parameter function takes boolean parameter 
see way unify constraints 
solution generalize parameter polymorphic int fi ff ff fl fn true fi fi fl fl solution generalize parameter polymorphic ff ff fi bool fl fn true fi fi fl fl valid typing having common instance typing principal 
type system support principal typings closely related ml type system 
type system typing expression pair consisting type expression set monomorphic quantifier free types variable occurs free expression 
call mapping program variables sets monomorphic types assumption environment 
type system expression previous example principal typing fff fi int fi fff fl bool fl fn true fi fi fl fl solution shao appel sa order define minimum interface compilation units need recompiled implementation changes 
major difference interested compiler interface interested user interface 
important interface able identify case compilation unit needs recompiled case important interface practical programmer may know little implementation compiler 
section example debugging session proposed programming environment 
section give type definition assumption environments prove type definition closely related standard ml type definition 
version type inference algorithm shao appel sa sketch simple direct proof correctness algorithm shows algorithm computes principal typings type definition 
complete proof appendix 
feel proof advantage simpler straightforward shao appel algorithm 
section discuss prototype implementation ml kit discuss possible 
type inference algorithm ml type discipline algorithm damas milner principal type schemes functional programs dm proven correct damas phd dissertation dam 
research area concentrated improving diagnostic messages generated type inference algorithm 
wand wan type inference algorithm keeps record pieces code contribute type deduction 
information explain type error happened 
duggan bent refinement wand approach addresses issues repeated explanations aliasing type variables practical implementation issues path compression db 
johnson walz apply maximal flow technique set type constraints order identify source type error jw 
jim jim demonstrates value principal typings variety problems problem discuss suggests variant rank intersection types called type system closely related ml type system supports principal typings 
type system describe restriction rank intersection types conservative choice type system purposes 
example debugging session extending type inference algorithm infer types open terms provide enhanced programming environment assists programmers finding source type errors 
propose include type information error messages unbound identifiers 
show enhancement useful considering simple program computes average list numbers type errors fun avg val sum fold op val count fold sum count assume program part larger program defined program type int 
int fold library function type 

list 

recall standard ml keyword op inform parser usual infix status immediately operator ignored occurrence 
enhanced programming environment allows programmer reason program bottom fashion 
say programmer cut paste definition sum ml prompt order see definition correct 
usually trying programmer generate error message parameter function avg 
val sum fold op error unbound variable enhanced environment error message annotated type information type information computed function sum val sum fold op error unbound variable int list val sum fn int list 
int type elaboration programmer see definition sum assumes list integers result sum function list integers integer value 
notice programmer able break information hiding imposed construct define new bindings top level type information just part error message 
suppose programmer decides supposed list real values 
programmer modifies program replacing integer literal real literal appropriately type error error operator operand don agree tycon mismatch operator domain 
operand int 
int expression fold programmer tell problem definition count fold applied cause obvious 
programmer inserts breakpoint unbound identifier case extract type information location reported compiler fun avg val sum fold op val count fold sum count error unbound variable int 
int 
real real 
real val avg fn real list 
real programmer see function input breakpoint function type int 
int fold expects parameter output breakpoint type real real 
real 
extracting type information inside program programmer realizes definition appropriate 
proposed programming environment conservative extension current environment changes type annotations error messages 
result changes unobtrusive easy ignore needed 
type annotations quite useful 
allow programmer type inference algorithm write debug programs effectively 
new environment allows programmer evaluate type information pieces program extract type information inside program 
type definition interested programming language mini ml basic lambda calculus extended polymorphic construct 
expressions language defined grammar ranges countable set variables 
fn denote set free variables programming language expression fv 
oe gamma gamma ar gamma gamma gamma app gamma gamma fn abs gamma gamma oe oe gen gamma gamma ml type definition simple types written include type variables ff base types int bool function types 
type schemes written oe simple types universally quantified type variables 
type expressions language defined grammar 
ff int bool oe ff oe denote set type variables occur free type scheme oe oe 
treat type schemes equivalent renaming bound variables equal 
type environment gamma finite mapping variables type schemes 
type environment gamma write gamma oe type environment maps variable type scheme oe behaves gamma 
denote domain gamma dom gamma 
substitution finite mapping type variables simple types 
denote substitution maps type variable ff type ff 
substitutions extended type variables type schemes type environments usual way 
type scheme oe ff ff generic instance type scheme oe fi fi written oe oe oe fi types type variables ff free oe gen gamma type scheme ff ff fff ff ng gamma 
type definition type definition tofte dissertation tof 
complete discussion type definition see textbook rea mitchell handbook article mit 
type definition assumption environments section type definition assumption environments 
type definition admits principal typings addition closely related ml type system 
see theorem expression programming language distinguished typing subsumes typings theorem type proven programming language expression ml type system type proven type definition assumption environments 
furthermore close relationship corresponding type environments assumption environments type proven 
assumption environment delta finite mapping variables sets simple types type schemes 
write delta delta delta mean variables delta delta delta 
write delta domain delta 
write delta na mean assumption fg ar delta delta delta delta app delta delta delta fn abs delta delta fv delta delta delta delta delta fv delta delta delta type definition assumption environments environment delta removed domain 
assumption environment delta write delta assumption environment maps variable set simple types behaves delta 
denote domain delta dom delta 
substitutions extended type variables assumption environments usual way 
assumption environment delta generic instance type environment gamma written delta oe gamma variables domain delta types delta type generic instance gamma 
notice definition delta generic instance gamma domain delta contained domain gamma 
gives type definition assumption environments 
notice type definition polymorphic construct type schemes simple types 
possible assumption environments 
rule rule scheme correct application requires existence collection substitutions delta indicated relationships satisfied 
example see ways proofs type definition different proofs ml type system 
var rule type definition restrictive usual type definition type assumption environment correspond exactly type variable 
app rule requires correspondence types subexpressions ml type system app rule accumulates assumption environments subexpressions 
example ff ff 
ff ff ff ff 
ff ff ar fff ffg ff ff ar ff ff 
ff ff ff ffg ff ff app example see abs rule forces assumptions variable identical 
purpose rule sure definition variable expression consistent variable expression consistent exists substitution maps type expression type occurrence example notice ff ff ff ff ff ff ff ff ff ff ff ff ff 
ff ff necessary substitution conditions true 
fff ff ar fn ff ff abs see example ff ff 
ff ff ff ffg ff ff fn ff ff rule trivial case definition variable occur free case rule simply accumulates assumption environments subexpressions 
example see variables occur free expression definition assumption environment required expression accumulate assumptions required free variables body bound variable addition includes assumptions required free variables suitably strengthened take account consequences requiring uses bound variable body match definition 
see size assumption environment general exponential nesting depth construct 
example notice ff ff fi fi fi ff ff 
ff ff ff fi fi fi ff ff necessary substitution conditions true 
see example fi fi 
fi fi fi fig fi fi see example ff ff 
ff ff ff ffg ff ff ff ff 
ff ff 
ff ff 
ff ff ff ff 
ff ff ff ffg ff ff theorem states close correspondence ml type definition type definition assumption environments 
view assumption environments simply concrete version type environments consider generalization form abstraction 
theorem gamma exists assumption environment delta delta oe gamma delta conversely delta delta oe gamma gamma context second part theorem observe assumption environment delta type environment gamma maps dom delta type scheme ff ff property delta oe gamma 
proof outline directions induction height proof tree straightforward simple lemmas properties generic instance oe proven 
forward direction builds assumption environments delta required proof delta collecting assumptions free variables appear var rules proof gamma converse direction merely necessary observe delta oe gamma gamma strong imply assumptions free variables appearing proof delta see appendix complete proof 
type inference algorithm section type inference algorithm takes programming language expression parameter returns principal typing defined type definition fi new ffig fi ar delta delta uf fig fi new delta delta fi app delta delta fi new delta fn fi abs delta delta fv delta delta delta delta uf delta fv delta delta delta type inference algorithm assumption environments 
algorithm essentially algorithm shao appel sa 
main contribution simple direct proof correctness algorithm presentation avoids complexity subroutine 
recall standard facts unification see mm 
constraint equation form type expressions 
constraint set finite set constraints 
unifier constraint set substitution constraint set 
constraint set unifiable unifier 
unifier general unifier constraint set unifier constraint set substitution instance 
general unifiers unique renaming variables 
unification algorithm accepts constraint set input outputs general unifier constraint set indicates constraint set unifiable 
unification algorithms exist 
assume unification algorithm chosen write function computes 
type element finite index set write denote type obtained tagging type variables subscript assume countably infinite collection type variables tagging function clearly exists computable 
extend notation assumption environments obvious way 
presents type inference algorithm 
form inference rules fact bottom algorithm computing typing expression 
notice unifying substitutions applied specialize assumption environments apply rules infer typing expression typings subexpressions 
interesting rule 
constraint set unified rule expresses requirement bound variable match definition 
type expression allow occurrence body type matches definition forcing types equal 
result theorem know programming language expression principal typing principal typing computed type inference algorithm 
theorem delta exists assumption environment delta type substitution delta delta delta conversely delta delta proof outline proof directions induction height proof tree 
forward direction proof delta inductively construct proof delta connecting substitution 
general property unifier computed stage factor connecting substitution stage 
conversely straightforward induction shows proof delta systematically applying unifying substitutions proof tree obtain proof delta see appendix complete proof 
example see similar proof example 
notice typing example principal provable typing programming language expression example substitution instance typing example 
example fff ff ar fff ff ar ff ff ff ff ff fff ff ff ff app prototype implementation main obstacle direct practical implementation algorithm assumption environment large general size exponential nesting depth construct 
shao appel sa suggest optimization removing isolated redundant assumptions order reduce size assumption environment 
size explosion arises tagging operation performed delta rule effectively copies information delta number times equal number types set delta idea avoiding explosion try postpone multiplying copies forced 
reasonable possibilities avoiding size explosion practical situations efficient direct implementation algorithm worthwhile goal research 
attempt investigate suitability principal typings debugging type errors took alternative approach introducing simple modifications algorithm case unbound variables type information produced approximation assumption environment principal typing 
approximate implementation practical value user find difficult understand implications principal typing containing exponential number assumptions unbound variable 
example consider simple program fun val true val true true variable occurs free expression compute print entire principal typing error message error unbound variable int 
int 
int 
error unbound variable int 
int 
bool 
error unbound variable int 
bool 
int 
error unbound variable int 
bool 
bool 
error unbound variable bool 
int 
int 
error unbound variable bool 
int 
bool 
error unbound variable bool 
bool 
int 
error unbound variable bool 
bool 
bool 
val original design goal produce messages easy understand novice programmer unobtrusive needed 
example shows goal satisfied error messages annotated complete type information assumption environment large 
fortunately practical situations assumption environment contains type occurrence unbound variable 
notice case sample debugging session section 
modified algorithm produces manageable output example error unbound variable int 
error unbound variable bool 
val modified version algorithm works follows time unbound program variable encountered new type variable generated assigned type unbound variable 
traversal expression complete normal unification procedure performed algorithm general resulted refinement type unbound variable type variable larger type expression 
simply reporting unbound variable system prints final type assigned variable 
type principal typing substitution instance type produced modified algorithm omitted modified algorithm propagation constraints imposed body expression free variables appearing definition part 
avoids multiplicative effect described produces information practical value user 
prototype implementation demonstrates usefulness proposed programming environment 
clear issue large assumption environments really practice 
near intend direct implementation algorithm order investigate issues 
novel solution problem diagnosing type errors 
unobtrusive extension programming environment facilitates finding source type errors 
able give simple description programming environment means type definition corresponding type inference algorithm 
described prototype implementation programming environment requires minor changes current implementation 
plan implement realistic version programming environment sml new jersey 
addition programming environment propose eliminate need diagnostic messages interesting integrate described existing diagnostics 
possible extension describe similar programming environment modules 
lars birkedal nick rothwell mads tofte david turner 
ml kit version 
bs karen bernstein eugene stark 
debugging type errors full version 
technical report state university new york stony brook computer science department 
www cs sunysb edu stark reports index html 
dam luis damas 
type assignment programming languages 
phd thesis university edinburgh edinburgh 
db dominic duggan frederick bent 
explaining type inference 
technical report cs university waterloo waterloo canada 
uwaterloo ca papers html 
dm luis damas robin milner 
principal type schemes functional programming 
ninth annual acm symposium principles programming languages pages 
association computing machinery acm press 
jim trevor jim 
principal typings 
technical report mit lcs tm massachusetts institute technology laboratory computer science august 
jw greg johnson janet walz 
maximum flow approach anomaly isolation unification incremental type inference 
thirteenth annual acm symposium principles programming languages pages 
association computing machinery acm press january 
mit john mitchell 
type systems programming languages 
handbook theoretical computer science volume pages 
elsevier science publishers 
mm alberto martelli ugo montanari 
efficient unification algorithm 
acm transactions programming languages systems april 
mth robin milner mads tofte robert harper 
definition standard ml 
mit press cambridge ma 
rea chris 
elements functional programming 
addison wesley publishing 
sa zhong shao andrew appel 
recompilation 
twentieth annual acm symposium principles programming languages 
association computing machinery acm press january 
tof mads tofte 
operational semantics polymorphic type inference 
phd thesis university edinburgh edinburgh november 
wan mitchell wand 
finding source type errors 
thirteenth annual acm symposium principles programming languages pages 
association computing machinery acm press january 
proofs lemma basic properties generic instance oe follow immediately definitions 
recall naming conventions gamma type environments delta assumption environments simple types oe type schemes substitutions variables sets simple types 

delta oe gamma delta oe gamma delta delta oe gamma 
delta oe gamma gamma delta fg 
delta oe gamma delta oe gamma 
oe gen gamma oe oe dom gamma 
delta oe gamma dom gamma delta oe gamma 
delta oe gamma dom delta delta oe gamma oe 
delta oe gamma oe oe delta oe gamma oe 
delta oe gamma dom gamma dom delta tyvar gamma tyvar delta lemma delta delta dom delta fv proof straightforward structural induction 
lemma substitution lemma 
delta delta proof straightforward structural induction 
theorem gamma exists assumption environment delta delta oe gamma delta conversely delta delta oe gamma gamma proof part proof induction height proof tree 
induction hypothesis assume proof height gamma exists assumption environment delta delta oe gamma delta demonstrate assumption sufficient show proof height gamma exists assumption environment delta delta oe gamma delta proof consider possible bottom rule proof tree separately 
case var proof form oe gamma gamma ar fg ar immediate definition generic instance fg oe gamma 
case app proof form gamma gamma gamma app induction hypothesis exists delta delta delta delta delta oe gamma delta oe gamma 
delta delta delta delta app lemma delta delta oe gamma 
case abs proof form gamma gamma fn abs induction hypothesis delta delta oe gamma 
lemma delta delta delta delta fn abs delta oe gamma lemma follows delta oe gamma 
case proof form gamma gamma oe oe gen gamma gamma induction hypothesis delta delta delta oe gamma delta oe gamma oe 
consider case fv separately fv 
fv delta delta fv delta delta delta oe gamma oe lemma delta oe gamma 
fv lemma dom delta delta delta delta oe gamma lemma delta delta oe gamma 
fv delta oe gamma oe lemma delta exists dom gamma 
delta delta delta fv delta delta delta delta dom gamma lemma delta oe gamma 
delta oe gamma oe lemma delta oe gamma 
delta finite repeated application lemma follows delta delta delta oe gamma 
part second part proof induction height proof tree 
induction hypothesis assume proof height delta delta oe gamma gamma demonstrate assumption sufficient show proof height delta delta oe gamma gamma proof consider possible bottom rule proof tree separately 
case var proof form fg ar gamma oe gamma fg oe gamma oe gamma gamma ar case app proof form delta delta delta delta app induction hypothesis gamma delta oe gamma gamma gamma delta oe gamma gamma choose gamma delta delta oe gamma 
lemma delta oe gamma delta oe gamma gamma gamma gamma gamma gamma app case abs proof form delta delta delta fn abs choose gamma delta oe gamma 
delta delta oe gamma induction hypothesis gamma gamma gamma fn abs case proof form delta delta fv delta delta induction hypothesis gamma delta oe gamma gamma gamma delta oe gamma gamma choose gamma delta delta oe gamma 
lemma delta oe gamma delta oe gamma 
fv lemma dom delta lemma delta oe gamma oe 
induction hypothesis gamma gamma oe gamma gamma oe oe gen gamma gamma case proof form delta delta delta fv delta delta delta substitution lemma rename type variables delta delta 
rename appropriately true restrict dom delta ran delta 
delta dom 
choose gamma delta delta delta na oe gamma dom gamma dom delta delta delta 
lemma gamma delta delta delta gamma dom 
oe gen gamma 
lemma delta oe oe 
delta oe gamma oe 
choose gamma delta delta delta oe gamma gamma restriction gamma domain 
gamma finite domain repeated application lemma know delta oe gamma delta oe gamma oe 
induction hypothesis gamma gamma oe gamma gamma oe oe gen gamma gamma theorem delta exists assumption environment delta type substitution delta delta delta conversely delta delta proof part show induction height proof proof delta exists assumption environment delta type substitution delta delta delta var proof form fg ar fi new ffig fi ar fi 
app proof form delta delta delta delta app induction hypothesis know exists delta delta ffl delta ffl delta ffl delta delta ffl ffl delta delta ffl may assume loss generality type variables occur delta distinct type variables occur delta rename type variables necessary substitution lemma lemma 
notice sets type variables disjoint substitutions commute 
ffi fi 
fi fi unifiable exists delta delta uf fig fi new delta delta fi app general unifier fi know exists ffi 
delta delta delta delta fi abs proof form delta delta delta fn abs consider trivial case delta empty set ffi delta trivially unifiable empty substitution id immediately delta id delta fi new delta fn fi abs fi 
consider case delta induction hypothesis know exists delta ffl delta ffl delta delta ffl fi 
delta delta ffi delta unifiable exists delta delta fi new delta fn fi abs general unifier ffi delta exists ffi 
delta delta fi proof form delta delta fv delta delta induction hypothesis know exists delta delta ffl delta ffl delta ffl delta delta ffl ffl delta delta ffl delta delta fv delta delta may assume loss generality type variables occur delta distinct type variables occur delta rename type variables necessary substitution lemma lemma 
notice sets type variables disjoint substitutions commute 
ffi delta delta delta delta proof form delta delta delta fv delta delta delta induction hypothesis know exists delta delta ffl delta ffl delta ffl delta delta ffl ffl delta delta ffl may assume loss generality type variables occur delta distinct type variables occur delta rename type variables necessary substitution lemma lemma 
notice sets type variables disjoint substitutions commute 
may assume loss generality dom delta 
ffi ffi gamma ffi composition delta gamma function removes subscript unifies delta exists delta delta uf delta fv delta delta delta general unifier delta exists ffi 
delta delta delta delta delta delta na part show induction height proof proof delta construct proof delta var proof form fi new ffig fi ar ffig fi ar app proof form delta delta fi fi new delta delta fi app induction hypothesis know delta delta substitution lemma delta fi delta delta fi delta delta delta fi app abs proof form delta delta fi new delta fn fi abs induction hypothesis know delta substitution lemma delta construction general unifier elements delta delta fig 
delta delta fig delta fn fi abs proof form delta delta fv delta delta induction hypothesis immediately delta delta fv delta delta proof form delta delta uf delta fv delta delta delta induction hypothesis know delta delta substitution lemma delta ffi delta delta delta fv delta delta delta 
