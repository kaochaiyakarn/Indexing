cheap tupling transformation hu takeichi summary 
tupling known transformation tactic obtain new recursive functions redundant recursive calls multiple traversals common data grouping recursive functions tuple 
studied long time fold unfold transformation suffers high cost keeping track function calls clever control avoid infinite unfolding prevent practical compiler functional languages 
propose cheap tupling theory constructive algorithmics 
give simple effective calculational rules successfully applied improve lot interesting recursive functions implemented efficiently 
keywords program analysis program transformation reasoning language constructs executable specification functional programming program prog usually expressed compositions transformations data structures transformation defined recursion traversing input data structure prog ffi ffir compositional style programming allows clearer modular programs comes price possibly high runtime overhead resulting mainly categories ffl unnecessary intermediate data structures passed composition recursions department information engineering hu ipl tokyo ac jp 
department computer science tokyo university agriculture technology iwasaki ipl ei ac jp 
department mathematical engineering information physics faculty engineering takeichi tokyo ac jp 
october technical report ffl inefficiency single recursion redundant recursive calls multiple traversals data structures unnecessary traversals intermediate data structures see section 
mainly concerned elimination inefficiency case kinds inefficiency related known tactics fusion called deforestation wad chi tupling chi 
fusion merge nested compositions recursive functions order obtain new recursions unnecessary intermediate data structures tupling remove redundant recursive calls multiple traversals data structure recursions 
different approaches employed formulate fusion tupling 
extensively studied chin chi chi called fold unfold transformation bd 
suffers high cost keeping function calls clever control avoid infinite unfolding prevents fusion tupling embedded real practical compiler functional languages 
difficulty quite lot studies devoted approach called transformation calculational form sf tm hit theory constructive algorithmics fok 
recursive structure information specific forms called folds anamorphisms called unfolds hylomorphisms finds transformation performed 
approach general successfully applied fusion transformation 
quite simple acid rain calculational rule tm extension shortcut deforestation rule practically employed real compiler functional languages glasgow haskell compiler 
far know attempt adapt calculational approach tupling transformation improvement recursive functions 
doing reasons 
tupling fusion related transformation tactics studied framework 
fact roles tupling fusion complementary fusion merges compositions recursions improved tupling order obtain final efficient program 
second reason shortcut deforestation tm tupling practically real compiler 
far haven seen real practical compiler performs tupling transformation 
propose idea cheap tupling calculational way 
main contributions follows 
ffl identify importance relationship tupling transformation structural mutual recursions simple mutual recursion section whichwe propose simple effective calculational rules theorem cheap tupling transformation 
seen applied improve wide class recursions call cheap tupling name shortcut deforestation 
cheap tupling transformation elimination redundant recursive calls multiple traversals data structures unnecessary traversals data structures hasn noticed 
ffl discussed cheap tupling follows approach transformation calculational form constructive algorithmics 
sharp contrast previous study chi fold unfold transformation 
cheap tupling preserves advantages transformation calculational form seen discussion shortcut deforestation tm 
applied improvement recursions data structures recursions lists 
transformation rules automation unfold method intervention explicit laws 
transformations guaranteed terminate practical compiler 
ffl cheap tupling suitable coexist shortcut deforestation calculational form 
seen combination improvement direct natural section 
contrast previous study combination fold unfold transformation chi difficult complicated control infinite unfoldings case fusion tupling applied simultaneously 
organization follows 
section simple examples show kind inefficient recursions improve 
giving brief concept transformation calculational form section propose simple effective rules cheap tupling section 
section give cheap tupling strategy simple rules see tupling coexist fusion transformation 
related works discussed section respectively 
examples inefficient recursions section shall simple examples show kind inefficiency may occur recursion derived 
seen efficiency achieved cost clarity conciseness compared original 
wewould write programs concisely compiler automatically efficient 
technical report multiple traversals data structures consider function deepest finds list leaves farthest away root tree may defined follows 
deepest leaf deepest node deepest depth depth deepest deepest depth depth deepest depth leaf depth node max depth depth infix binary function concatenates lists function max gives maximum arguments 
function deepest uses recursive function depth 
concise definition quite inefficient deepest depth traverse inputs leading repeated computations calculating depth subtrees 
eliminate multiple traversal efficient program 
deepest dd dd leaf dd node lr dpl dl dl dr dpl dpr dr dl dr dpr dr dpl dl dd dpr dr dd redundant recursive calls classical example illustrate super linear speedup achieved redundant recursive calls eliminated fibonacci function fib zero zero fib succ zero succ zero fib succ succ plus fib succ fib fib recursion natural number data type zero succ definition gives inefficient exponential algorithm fib redundant recursive calls fib 
previous studies order efficient creative tupling function succ fib succ fib defined transformation fold unfold applied improve sharing common computation remove redundant recursive calls 
show redundant recursive calls removed simple calculation approach section 
unnecessary traversals intermediate results recursion know unnecessary intermediate data structures produced occur composed recursion ffir 
cheap tupling transformation fusion merge recursions unnecessary intermediate data structures 
surprising see single recursion may remain unnecessary traversals intermediate data structures produced example consider recursive function foo recursively defined foo nil nil foo cons xs cons sum sum sum elements list 
foo defined single recursion inefficient intermediate results produced foo traversed sum unnecessary eliminate unnecessary traversal obtain efficient 
xs nil nil cons xs cons xs transformation calculational form addressing calculate efficient recursions review previous transformation calculational form mfp sf tm hit 
theoretical basis study constructive algorithmics fok mal mfp outlined 
default category cpo category complete partial orders continuous functions 
functors endofunctors category functors capture data structure control structure type definition 
assume data types defined endofunctors built basic functors 
endofunctors known polynomial functors definition identity identity functor type operation functions defined follows 
ix definition constant constant functor type operation functions defined follows 
ax af id id stands identity function 
technical report definition product product operation functions defined follows 
fx gy related operators fa ga definition separated sum separated sum operation functions defined follows 
fx gy related operators fx gy product separated sum defined parameters naturally extended parameters 
example separated sum parameters defined fig data types initial fixed points functors data type collection operations data constructors denoting element data type constructed finite way 
data constructors functions type may defined 
data type particular algebra distinguished property categorically known algebra 
category endofunctor definition algebra algebra pair oe object called carrier algebra oe morphism object object denoted oe fx 
called operation algebra 
definition homomorphism algebras oe homomorphism oe morphism object object category satisfying ffi oe ffi fh 
cheap tupling transformation definition category algebras category algebras objects algebras morphisms homomorphisms algebras 
composition category algebra taken identities 
known initial object category algebras exists polynomial functor mal 
representative initial algebra denoted defines data type data constructor ft function ft inverse argument called data destructor concrete consider data type cons lists definition elements type list nil cons list categorically defined initial object list nil cons category fla algebras fla endofunctor defined fla final object 
data constructor data destructor follows 
fl nil cons fl xs case xs nil 
cons 
cata ana hylo recursions data types constructive algorithmics data types categorically defined initial algebras functors recursive functions data type represented structure preserving maps algebras 
doing orderly structure imposed program structure exploited facilitate program transformation 
general structure preserving maps hylomorphisms mfp composition catamorphisms anamorphisms consideration natural transformations data structures takano meijer defined hylomorphisms triplet form tm follows 
definition hylomorphism triplet form morphisms oe ga natural transformation hylomorphism oe defined morphism satisfying equation 
oe ffi ffi ff ffi strictly speaking nil written nil 
function form simply denoted technical report hylomorphisms hylo short powerful description practically recursion interest primitive recursions specified bdm hit 
considered ideal intermediate recursive form calculating efficient functional programs 
definition catamorphism anamorphism map tg 
fa 
oe oe id fa id tg catamorphisms cata short generalized foldr operators reduces substitute constructor data type operation signature 
dually anamorphisms ana short generalized unfold operators generations 
maps apply natural transformation data structure 
hylomorphisms enjoy useful transformation laws useful called hylo shift law oe oe ffi id oe id ffi showing natural transformation shifted inside hylomorphism 
fusion hylomorphisms possess general laws called hylo fusion laws specific calculational rules shortcut deforestation acid rain theorem 
theorem hylo fusion left fusion law ffi oe oe ffi ff ffi oe oe law ffi gg ffi oe ffi oe theorem acid rain fa 
oe ffi oe ffi oe fa oe ffi oe oe ffi don list transformation laws catamorphisms anamorphisms deduced hylomorphisms 
cheap tupling transformation cheap tupling rules calculational form tupling achieves efficient recursive functions elimination redundant recursive calls multiple traversals common inputs 
section propose simple effective calculational rules cheap tupling 
shall start relationship tupling mutual recursive definitions propose basic calculational rule theorem howto perform tupling transformation mutual recursions 
give calculational rules removing redundant recursive calls unnecessary intermediate data structures respectively 
shall demonstrate rules practically 
mutual recursions tupling folklore mutual recursive definitions turned single non mutual recursive definition functions mutually defined tupled 
take example mutual recursive definitions denotes context 
says calls calls 
turn mutual recursion non mutual tupling functions function follows ffi ffi non mutual recursion follows 
ffi ffi ffi ffi transformation interesting theory sense need consider transformation mutual recursive functions definitely turned single non mutual 
unsatisfactory practice clear efficient 
generally new definition costs direct implementation mutual recursions simplification applied 
compilers glasgow haskell implement mutual recursions directly transformation 
things expected recursive structure information known 
structural information exploited tupled function efficient shown theorem 
theorem tupling ffi oe ffi ffi oe technical report proof calculation 
ffi ffi ffi assumptions oe ffi ffi oe ffi soon follows oe definition catamorphisms definition 
tupling theorem quite simple similar studies tak fok 
interest significant calculating recursions efficient ones received worthy consideration 
purpose generalize tupling theorem step unfolding input step follows 
corollary mutual recursive definitions ffi oe ffi ffi ffi ffi ffi ffi ffi tupled ffi oe ffi ffi ffi ffi ffi shall show simple calculational rules effectively cheap tupling handle inefficient recursions section 
eliminating multiple data traversals tupling theorem reads recursive functions traversing data structures certain uniform way tupling definitely give catamorphism multiple traversals data structures direct tupling theorem help eliminate multiple data traversals recursion 
see tupling theorem works recall definition deepest section 
deepest depth mutually defined traverse input tree apply tupling theorem calculate note considered unfolding steps input data 
cheap tupling transformation efficient 
rewrite required form 
deepest ffi oe ffi deepest depth oe oe oe oe oe tl hl tr hr tl hl hr tl tr hl hr tr depth ffi ft ffi deepest depth tl hl tr hr max hl hr int functor defining binary tree type ft leaf node 
tupling theorem get efficient linear recursion deepest ffi deepest depth ffi oe lined section 
noted processing steps rewriting required form applying tupling theorem done automatically low cost step basically abstraction recursive calls definition oe similar study hit second step just simple calculation 
compare previous expensive approach basis fold unfold transformation chi required keep alert sub expression folded define new functions order remember occurred sub expressions transformation process 
tupling theorem defined mutually 
special interesting case independent catamorphisms 
tupled stated corollary 
corollary oe oe ffi ffi proof 
directly tupling theorem equations 
oe ffi oe ffi ffi oe ffi ffi ffi oe corollary reduce traversals input catamorphisms respectively 
eliminating redundant recursive calls impractical eliminate redundant recursive calls recursions done general approach called memoization mic 
restrictions technical report recursions necessary 
instance chin chi restricted method class recursions hughes hug argued practical eliminate redundant recursive calls applied exactly identical arguments arguments stored place memory 
restriction impose recursive definitions related hughes restriction parameters recursive calls defined function sub structure input data processing 
restriction helps verify parameters stage compilation seeing arguments stored place memory execution time hughes 
example treat recursive definition foo cons cons xs foo cons xs foo xs foo cons cons xs foo cons xs foo cons xs underlined parameters sub structures cons cons xs 
restriction just sake simple presentation input traversed single function 
example restriction excludes case foo cons cons xs foo cons xs foo xs xs foo traverse input 
matter fact restriction unnecessary able tuple foo new function meeting restriction 
proposition recursively defined function defined functor parameter recursive calls sub structure input function traversing part input transformed hylomorphism oe id proof sketch restriction parameters recursive calls see recursive call embedded term ffi integer recall considered unfolding steps input data 
addition functions traversing input implies input traversed exist oe expressed oe ffi fh ffi ffi ffi exactly expected 
theorem removing redundant recursive calls restricted recursive functions 
cheap tupling transformation theorem hylomorphism proposition 
defined mutual recursive definitions 
ffi oe ffi ffi ffi fh ffi fg 
ffi fg natural transformation defined 
fx fx proof proved calculation 
ffi oe ffi ffi unfolding time ffi oe ffi ffi fh ffi fg ffi repeat unfolding remove ffi oe ffi ffi fh ffi ffi ffi oe ffi fh fh ffi ffi functor ffi def 
oe ffi gh ffi ffi fout ffi ffi proved 
oe ffi gh ffi def 
hylo oe id complete proof prove fout ffi induction base case true 
inductive case calculate follows 
fout ffi def 
ffi ffi functor ffi ffi induction ffi def 
theorem says parameter recursive call function sub structure input functions traverse input successfully transformed single mutual recursive definition improved tupling theorem stated corollary 
technical report corollary assumption theorem oe ffi showing theorem works practically define useful natural transformations follows 
dist 
dist dist recall definition fib section 
proposition transform hylomorphism 
fib oe id fn fn oe zero succ zero plus ffi dist ffi fn addition remind readers fn fn case zero 
succ 
fn case zero 
succ 
case zero 
succ 
theorem corollary fib ffi oe ffi fn fn fn simple simplification gives fib ffi zero succ zero plus ffi dist fn lined linear program 
fib zero zero succ case succ zero plus removing unnecessary traversals intermediate results commonplace recursive definition intermediate results traversed recursive function 
generally formulate equation ffi oe ffi ffi cheap tupling transformation intermediate results final results rhs traversed recursive function second rhs 
fact traversals intermediate results calculated away certain condition leading efficient recursion 
shown theorem 
theorem recursive function defined equation 
exists satisfying ffi oe ffi id id ffi oe ffi proof suffices prove ffi oe ffi tupling theorem need prove ffi ffi ffi ffi ffi calculation follows 
ffi ffi ffi ffi ffi equation ffi oe ffi ffi ffi ffi ffi equation ffi id id ffi ffi ffi ffi ffi functor simplification ffi ffi ffi ffi ffi ffi obvious true idea theorem simple 
order avoid unnecessary traversals intermediate results sufficient find condition ffi single recursion 
condition expressed equation reading recursively applied results produced 
theorem improve foo section 
rewrite recursive definition form equation 
foo ffi oe ffi fla foo sum ffi foo oe nil cons technical report sum expressed form equation 
sum ffi oe oe sum ffi nil cons ffi sum ffi nil sum ffi cons sum sum define ffi fla sum id id theorem soon follows foo ffi oe ffi easily lined efficient program section 
cheap tupling strategy far wehave simple calculational rules demonstrated improve recursions 
summary general strategy application calculational rule step calculation ffl rewriting recursion suitable form required theorem ffl performing simple calculation theorem 
steps automatically implemented low cost compared previous tupling methods chi direct possible embed rule real compiler functional languages 
turn see full play rules handle complicated recursions 
discussing formal way show idea example 
suppose want improve function defined xs xs xs xs xs xs xs xs xs calls recursive function omit equations base cases obviously redundant recursive calls multiple traversals input definition inefficient 
eliminate multiple traversals recursive definition grouping functions traversing data structure usually start calculation turn mutual recursive definitions single non mutual making room removal redundant recursive calls corollary notational convenience infix operator list cons operator xs denotes cons xs denote nil cheap tupling transformation unnecessary traversals theorem 
define corollary ffi xs xs xs hxs functions defined turn improve order improve eliminate redundant recursive calls corollary obtain result ffi oe fl oe function 
theorem eliminate possible unnecessary traversals catamorphism oe fl summary cheap tupling proceeded way 
set functions defined recursions 
function calculate efficient recursive definition order eliminating multiple traversals removing redundant recursive calls getting ride unnecessary data traversals 
worth noting cheap tupling fusion transformation calculational form 
matter fact assist obtain better optimization ffl fusion merges recursive functions cheap tupling algorithm easy find tuple 
ffl tupling improves recursion constructing efficient catamorphism special instance hylomorphism 
lose possibility fusion case composed recursion see section shall give detailed discussion convince reader 
relevant study hit tupling fusion derive list homomorphisms catamorphisms append lists 
chin chi discussed issues fold unfold transformation basis 
quite complicated choose carefully order tupling fusion may hinder 
related discussions argued generic control structures capture patterns recursions uniform way great significance program transformation optimization mfp fok sf tm 
related studies 
particular greatly inspired success applying approach fusion transformation studied sf tm 
attempt apply calculational approach tupling transformation 
previous intensively studied chin chi tries tuple arbitrary functions fold unfold transformations 
spite generality keep track function calls devise clever control avoid infinite unfolding resulting high runtime cost prevents employed real compiler system 
technical report follows experience fusion calculational form tm simple calculational rule 
identify patterns inefficient recursions construct calculational rules improve structural knowledge patterns 
simple general chin cheap tupling transformation demonstrated applied wide class functions 
efficiently implemented practical compiler naturally fusion basis transformation calculational form 
chin chi discussed fusion tupling basis fold unfold transformation algorithm complicated complicated control infinite unfoldings fusion tupling system 
idea theorem tupling mutual recursive definitions new 
basically takeichi generalization algorithm tak fokkinga fok 
takeichi showed define higher order function common functions mutually defined multiple traversals data structures mutual recursive definition eliminated 
fokkinga proposed idea develop laws fusion mutual recursions functions 
generalize idea corollary investigate deeply elimination redundant recursive calls unnecessary traversals data corollary theorem 
idea theorem avoiding redundant recursive calls simpler existed techniques memoization mic hug tabulation bir coh tupling chi 
general done bya simple calculation complicated program analysis applied run time 
fact influenced hughes idea lazy memoization hug required reuse previously computed results recursive calls applied arguments identical equal value previous ones arguments stored place memory impose restriction remove redundant recursive calls calculation compilation time execution time 
cheap tupling cheap sense implemented cheaply practical previous studies 
comes price generality 
demonstrated combining rules deal complicated cases section recursions tupling applied 
enlarge application scope 
propose cheap tupling calculational form obtaining efficient recursions multiple traversals data structures redundant recursive calls unnecessary traversals intermediate data structures 
cheap tupling algorithm naturally combined fusion efficient functional programs obtained program calculation 
shown promising examples big small 
currently implementing calculational sys cheap tupling transformation tem idea fusion tupling calculational form 
going give performance evaluation functional programs haskell benchmark order see get generally 
bd burstall darlington 
transformation system developing recursive programs 
journal acm january 
bdm bird de moor 
relational program derivation context free language recognition 
roscoe editor classical mind pages 
prentice hall 
bir bird 
tabulation techniques recursive programs 
acm computing surveys 
chi chin 
safe fusion functional expressions 
proc 
conference lisp functional programming san francisco california june 
chi chin 
automated tupling strategy inproc 
conference partial evaluation program manipulation pages copenhagen june 
acm press 
chi chin 
fusion tupling transformations synergies 
proc 
fuji international workshop functional logic programming pages japan july 
world scientific publisher 
coh cohen 
eliminating redundant recursive calls 
acm transaction programming languages systems july 
fok fokkinga 
law order algorithmics 
ph thesis dept inf university twente netherlands 
gill launchbury jones 
short cut deforestation 
proc 
programming languages computer architecture pages copenhagen june 
hit hu iwasaki takeichi 
construction list homomorphisms tupling fusion 
st international symposium mathematical foundation computer science lncs pages september 
springer verlag 
hit hu iwasaki takeichi 
deriving structural hylomorphisms recursive definitions 
acm sigplan international programming pages philadelphia pa may 
acm press 
hug hughes 
lazy memo functions 
proc 
programming languages computer architecture lncs pages nancy france september 
springer verlag berlin 
mal malcolm 
data structures program transformation 
science computer programming august 
mfp meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
proc 
programming languages computer architecture lncs pages cambridge august 
mic michie 
memo functions machine learning 
nature 
sf sheard fegaras 
fold seasons 
proc 
conferenceon functional programming languages computer architecture pages copenhagen june 
tak takeichi 
partial parametrization eliminates multiple traversals data structures 
acta informatica 
technical report tm takano meijer 
shortcut deforestation calculational form 
proc 
programming languages computer architecture pages la jolla california june 
wad wadler 
deforestation transforming programs eliminate trees 
proc 
esop lncs pages 
