program slicing software maintenance gallagher computer science department college maryland charles st baltimore maryland lyle computer science department university maryland baltimore campus avenue baltimore maryland august program slicing introduced weiser known help programmers understanding foreign code debugging 
apply program slicing maintenance problem extending notion program slice originally required variable line number decomposition slice captures computation variable independent line numbers 
lattice single variable decomposition slices ordered set inclusion demonstrate form slice decomposition programs 
able delineate effects proposed change isolating effects single component decomposition 
gives maintainers straightforward technique determining statements variables may modified component may 
decomposition provide set principles prohibit changes interfere unmodified components 
semantically consistent changes merged back original program linear time 
maintainer test changes component assurance linkages components 
decomposition slicing induces new software maintenance process model eliminates need regression testing 
index terms software maintenance program slicing decomposition slicing software process models software testing software tools impact analysis kill code gerald weinberg private list world expensive program errors 
top disasters caused change exactly line code involved change single digit previously correct program 
argument goes change line usual mechanisms change control circumvented 
course results catastrophic 
weinberg offers partial explanation unexpected linkages value modified variable place program 
top list attributed linkage 
special section march issue ieee transactions software engineering notes reasons maintenance difficult hard determine code change affect piece code 
method maintainers addresses issue 
may view software maintenance intellectually demanding activity development central premise software maintenance demanding 
added difficulty due large part semantic constraints placed maintainer 
constraints loosely characterized attempt avoid unexpected linkages 
addressed problem attempting eliminate semantic constraints providing maintainer tool pinpoint potential inconsistencies changes implemented 
maintenance appear development programmer need worry linkages change tool invoked inconsistencies located 
expect tool proceed resolve inconsistencies shown problem np hard 
maintainer problem difficult resolve original change 
take opposite view maintainer semantically constrained problem construct solution implements change constraints 
semantic context propose constrain maintainer prohibit linkages portions code maintainer want change 
approach uncovers potential problems earlier aforementioned methods believe worth inconvenience may encountered due imposition constraints 
program slicing techniques give assessment impact proposed modifications ease problems associated revalidation reduce resources required maintenance activities 
unstructured programs usable older systems 
may white box spare parts backbone maintenance regard maintenance corrective adaptive perfective preventive 
background program slicing introduced weiser technique restricting behavior program specified subset interest 
slice program variable set variables statement yields portions program contributed value just statement executed 
called slicing criteria 
slices computed automatically source programs analyzing data flow control flow 
program slice added advantage executable program 
slicing done implicitly programmers debugging slices combined isolate sections code contain program faults significantly reduce debugging times 
flurry activities slicing plays significant role 
horwitz reps slices integrating programs :10.1.1.50.4405
results built seminal ottenstein ottenstein combining slicing robust representation afforded program dependence graphs 
korel laski slices combined execution traces program debugging testing 
choi slices traces debugging parallel programs 
reps wang investigated termination conditions program slices 
developed denotational approach program slicing 
gallagher improved lyle algorithm slicing presence goto developed techniques capturing arbitrarily placed output statements 
discuss slicing techniques refer interested reader works 
want avoid getting bogged details particular language identify program flowgraph 
node graph correspond single source language statement 
define define main int nl nw nc inword inword nl nw nc getchar eof nc nc nl nl inword inword inword nw nw getchar printf nl printf nw printf nc program sliced henceforth term statement mean node flowgraph 
common representation scheme presentation clear clear tool techniques need account nuances particular language 
ignore problems introduced having dead code source program declare programs consideration dead code 
see slicing techniques eliminate dead code 
figures illustrate slicing program bare bones version unix utility wc word count taken 
program counts number characters words lines text file 
slightly modified illustrate clearly slicing principles 
slices figures complete programs compute restriction specification 
slice nw fig 
output number words file slice nc fig 
count number characters input text file slice nl fig 
count number lines file 
slices decomposition section presents method slices obtain decomposition program 
objective slicing decompose program directly components 
program slice components 
construction step process 
step build variable decomposition slice union certain slices taken certain line numbers variable 
component decomposition called complement obtained original program 
complement constructed way certain statements decomposition slice removed original program program remains slice define define main int nw inword inword nw getchar eof inword inword inword nw nw getchar printf nw slice nw word counter main int nc nc getchar eof nc nc getchar printf nc slice nc character counter main int nl nl getchar eof nl nl getchar printf nl slice nl line counter define define main int inword inword getchar eof inword inword inword getchar slice inword main int getchar eof getchar slice input input print print requires decomposition slice corresponds complement sense defined criteria respect variables defined program 
complement program slice 
decomposition slice guide removal statements systematic fashion construct complement 
insufficient merely remove slice statements original program 
require slice executable certain crucial statements necessary slice complement 
example start slice remove statements original program resulting object compile 
decomposition break program manageable pieces automatically assist maintainer guaranteeing ripple effects induced modifications component 
complement provide semantic context modifications decomposition slice complement remain fixed change 
decomposition ideas section independent particular slicing method 
slice obtained slicing algorithm program decomposition may computed 
clearly quality decomposition affected quality slice sense refined slices give finer granularity deliver semantic information maintainer 
program slice dependent variable statement number 
decomposition slice depend statement numbers 
motivation concept easily explained example 
slice statements slice statements 
slicing statement case program insufficient get computations involving slice variable decomposition slice captures relevant computations involving variable 
construct decomposition slice borrow concept critical instructions algorithm dead code elimination kennedy 
brief follows 
usual method dead code elimination locate instructions useful sense 
declared critical instructions 
typically dead code elimination algorithms start marking output instructions critical 
definition chains traced mark instructions impact output statements 
code left unmarked useless computation 
definition output set statements program output variable statement output 
statements form decomposition slice denoted 
decomposition slice union collection slices program slice 
include statement variable output may decomposition criteria capture defining computation decomposition variable statement displays value 
successfully take slice statement invoke crucial differences slicing definitions reps weiser lyle 
reps slice taken point respect variable defined referenced weiser slices taken arbitrary variable arbitrary line number 
difference prohibits reps slicing techniques applicable current context want slice variable program statement 
examine relationship decomposition slices 
place decomposition slices perform actual decompositions 
determine relationships take decomposition slice variable program form lattice decomposition slices ordered set inclusion 
easier gain clear understanding relationship decomposition slices regard output statements 
may unusual light definition output statements obtaining relevant computations 
view output statements windows current state computation contribute realization state 
coincides informal definition slice statements yield portions program contributed value just statement executed 
assuming output statements contribute value variable precludes discussion output statements programs output values reused case random access files output files input 
describing decomposition technique dependent particular slicing technique way knowing slicing technique includes output statements 
say slice output restricted output statements removed 
definition output restricted decomposition slices independent 
peculiar program independent decomposition slices share control flow data flow 
effect programs non intersecting computations disjoint domains merged 
lattice components 
ott slice metric terminology independence corresponds low coincidental temporal cohesion 
output restricted decomposition slices independent said weakly dependent 
subsequently speak independence dependence slices context output restricted decomposition slices 
definition output restricted decomposition slices ae 
said strongly dependent 
output restricted decomposition slices strongly dependent independent slices independent 
definitions independence dependence dependent notion slice 
analogous definitions carr define slices 
ott metric terminology strong dependence corresponds high sequential functional cohesion 
strong dependence decomposition slices binary relation cases need explicit containing slice 
henceforth write strongly dependent shorthand strongly dependent slice context permits 
definition output restricted slice strongly dependent slice said maximal 
maximal decomposition slices ends lattice 
definition gives motivation output restriction want concerned possible effects output statements maximality slices decomposition slices 
observed considering decomposition slices nw inword figures 
regarded output statements defining maximal force slice inword maximal addition print statement referencing inword program 
statement collected slice nw 
added statement slice slice inword maximal 
gives lattice desire 
nc nl nw maximal decomposition slices 
inword strongly dependent nw strongly dependent decomposition slices 
decomposition slices nw nc nl figures weakly dependent maximal output statements removed 
independent decomposition slices example 
recall independent decomposition slices share control flow surrounding control statements dependent 
classify individual statements decomposition slices 
definition output restricted decomposition slices program statements called slice dependent statements 
nc nl nw inword lattice decomposition slices 
slice independent statements statements slice dependent 
refer slice dependent statements slice independent statements dependent statements independent statements 
dependent statements contained decomposition slices interior points lattice independent statements maximal decomposition slice union decomposition slices properly contained maximal slice 
terms arise fact slices depend computation performed dependent statements 
independent statements contribute computation slice 
modifying program dependent statements changed effect ripple focus interest 
example statement slice nc fig 
slice independent statement respect decomposition slice 
statements slice nl fig 
slice independent statements respect decomposition slice 
decomposition slice fig 
strongly dependent slices statements slice dependent statements respect decomposition slice 
statements slice nw fig 
slice independent statements respect decomposition slices nc nl statement slice independent compared inword 
statements decomposition slice inword fig 
slice independent statements respect decomposition slices nc nl statements slice independent compared nw 
relationship maximal slices independent statements 
proposition permits apply terms slice independent statement slice dependent statement sensible way particular statement maximal decomposition slice binary relation decomposition slices required definition 
proposition 
varset set variables program 
output restricted decomposition slice 
varset 
statements gamma independent 
proof sketch fu 

gamma gamma 
gamma um 

relationship maximal slices program 
recall dead code excluded discussions 
proposition varset 
proof sketch ae statements dead code 

maximal slices capture computation performed program 
maximal slices respective independent statements related proposition output restricted decomposition slice maximal iff independent statement 
proof sketch suppose maximal 
definition statement slice 
statement independent statement 
suppose independent statement slice slice contains maximal 

conversely slice independent statements strongly dependent 
characterization strongly dependent slices 
proposition 
varset set variables program 
output restricted decomposition slice 
varset strongly dependent 
varset 
output restricted decomposition slice strongly dependent iff proof sketch suppose strongly dependent 
need show maximal slice 
partially order set inclusion 
maximal elements element maximal properly contained slice contains 
contribution union 
suppose contribution union 
proposition strongly dependent 

position state decomposition principles 
maximal output restricted decomposition slice program delete independent output statements denote program call complement decomposition slice respect 
henceforth speak complements context decomposition slices 
decomposition slice subset program computes subset specification complement computes rest specification 
figures give complements slices nw nc nl figures 
proposition obtain complement slice inword slice entire program 
main int nl nw nc inword nl nc getchar eof nc nc nl nl getchar printf nl printf nc nw 
complement slice nw computes line count character count yields approximation direct sum decomposition program preserves computational integrity constituent parts 
indicates useful decompositions done maximal decomposition slices 
complement maximal slice decomposed decomposition may continued slices independent statements maximal ones obtained 
practice maintainer may find strongly dependent slice starting point proposed change 
method permit changes 
change may viewed properly extending domain partial function program computes preserving partial function original domain 
application modification testing statement independence build set guidelines software modification 
need set definitions regarding variables appear independent dependent statements 
definitions give set rules maintainers obey order modifications ripple effects unexpected linkages 
rules obeyed algorithm merge modified slice back complement effect change 
driving motivation development restrictions placed modifications decomposition slice complement remains intact 
definition variable target dependent assignment statement called dependent variable 
alternatively equivalently assignments variable independent statements variable called independent variable 
assignment statement independent statement target independent variable 
program maximal decomposition slices figures 
slice strongly dependent strongly dependent 
shown strongly dependent maximal slices 
statements independent proposition 
variables targets assignment statements respectively 
decomposition slice variable independent variable 
define define main int nl nw nc inword inword nl nw nc getchar eof nc nc nl nl inword inword inword nw nw getchar printf nl printf nw nc 
complement slice nc computes word count line count define define main int nl nw nc inword inword nw nc getchar eof nc nc inword inword inword nw nw getchar printf nw printf nc nl 
complement slice nl computes character count word count main int dependent variable sample program main int slice main int slice main int slice main int slice similar argument applies independent control flow statements dependent variables 
dependent variable independent statement corresponds situation variable question required compilation complement statement question contribute complement 
variable referenced dependent statement necessary complement independent 
decomposing single variable yields strongly dependent slice able construct slice original slice variable independent variable 
proposition 
varset set variables program 
strongly dependent output restricted decomposition slice 
varset strongly dependent 
varset 

variable independent variable words strongly dependent slice union maximal slices strongly dependent independent variable proof sketch show complement variable complement maximal slice complement strongly dependent 
contradicts hypotheses complement variable independent 
interpreted variable version proposition refers statements 
addressed problem decomposition slice variable maximal variable remains dependent 
situation occurred example chapter slice variable maximal variable dependent 
solution straightforward construct slice union slices variable dependent 
proposition 
varset set variables program 
output restricted decomposition slice 
varset dependent variable 
cases 
empty case independent variable 

empty variable independent variable proof sketch case contains particular contains assignments independent variable 
case case contains particular contains assignments independent variable case 
proposition variables 
modifying decomposition slices position answer question posed section 
restrictions collection rules justifications 
modifications take forms additions deletions changes 
change may viewed deletion followed addition 
second approach determine statements decomposition slice deleted forms statements added 
rely fact union decomposition slices slice complementary criteria usually involve maximal variable 
assume maintainer kept modified program compilable obtained decomposition slice portion software needs changed 
locating code may highly nontrivial activity sake current discussion assume completion 
independent statements affect data flow control flow complement rule independent statements may deleted decomposition slice 
reason independent statements affect computations complement 
deleting independent statement slice impact complement 

result applies control flow statements assignment statements 
statement may deleted assignment statement targets dependent variable control statement dependent variable 
point keep mind statement independent affect complement 
independent statement deleted certainly effect slice 
purpose methodology keep complement intact 
number situations consider statements added 
progress simple complex 
note additions new variables may introduced long variable name clash name complement 
instance new variable independent decomposition slice 
independent variable means independent variable new variable 
rule assignment statements target independent variables may added decomposition slice 
reason independent variables unknown complement 
changes affect computations complement 

type change permissible changed value flows dependent variable 
changes permitted assignment statement line targets change propagate values dependent variables lines 
maintainer responsible changes occur variables 
lines dependent contained decomposition slice line contained slice variable dependent 
adding control flow statements requires little care 
required control statements parts logical expression determines flow control actions taken value expression 
assume side effects evaluation logical expressions 
discuss addition statements language constructs realized 
rule logical expressions output statements may added decomposition slice 
reason inspect state computation 
evaluation logical expressions inclusion output statement affect computation slice 
complement remains intact 

guarantee statements controlled newly added control flow interfere complement 
rule new control statements surround control dependent statement cause complement change 
reason suppose newly added code controls dependent statement 
criteria yield complement 
criteria modified program newly added control code included complementary slice 
due fact dependent statements slice complement 
control statements control dependent statements slice complement 

making change violated principle complement remain fixed 
new control statements may surround dependent statement 
short list necessary sufficient keep slice complement intact 
impact testing change discussed 
changes may required computations involving dependent variable extracted slice 
maintainer choose approaches 
techniques previous section extend slice independent slice 

add new local variable slice copy value new variable manipulate new name 
course new name clash name complement 
technique may slice independent statements strongly dependent 
merging modifications complement merging modified slice back complement straightforward 
key understanding merge operation comes observation technique maintainer editing entire program 
method gives view program unneeded statements deleted dependent statements restricted modification 
slice gives smaller piece code maintainer focus rules previous subsection provide means deleted restricted parts changed accidentally 
merge algorithm 

order statements original program 
examples statement line ordering merely line numbering 
program slice complement identified subsequence statement numbers original program 
call sequence numbering slice slice sequence numbering complement complement sequence 
view editing process addition deletion associated sequence numbers 

deleted statements delete sequence number slice sequence 
observe independent statements deleted number complement sequence 

statements inserted slice new sequence number needs generated 
sequence number statement preceding statement inserted 
value slice sequence greater min int 
insert new statement sequence number 
works principle practice care needs taken generation insertion sequence numbers avoid floating point errors inserts 

merged program obtained merging modified slice sequence values statements complement sequence 
unchanged dependent statements guide reconstruction modified program 
placement changed statements control flow arbitrary 
clearer editing process viewed modification entire program 
example help clarify 
testing change maintainer restrict changes independent newly created variables testing reduced testing modified slice 
need regression testing complement eliminated 
alternative approaches verifying change needs testing 
slice original criteria plus new variables minus eliminated variables 
compare complement complement original match exactly 
second approach preserve criteria produced original complement 
slicing produce modified slice exactly 
axiomatic consideration idea 
slice complement perform subset computation computations meet dependencies 
modifying code independent part slice leaves independent part complement invariant slice vice versa 
required change merely module replacement preceding techniques applicable 
slice provide harness replaced module 
complete independent program supporting module obtained 
principle benefits slicing highlighted context side effects module replaced slice 
full impact change brought attention modifier 
example changes nw slice nw word counter 
changed slice shown 
original program determined word string symbols terminated white symbol space tab newline 
modification changes main int ch int nw ch nw getchar eof isspace ch nw nw ch getchar printf nw modified slice nw word counter requirement alphabetical characters terminated white space 
example illustrating change advocating 
note changes 
deleted independent variables added new totally independent variable ch independent statements 
addition macros isspace safe results referenced 
test program independently complement 
shows reconstructed modified program 
decomposition slice nw generates program 
complement 
starred statements indicate new statements placed line number generation technique 
new software maintenance process model usual software maintenance process model depicted 
request change arrives 
may adaptive perfective corrective preventive 
making change wish minimize defects effort cost maximizing customer satisfaction 
software changed subject pending priorities 
change composed parts 
understanding code may require documentation code reading execution 
program modified 
maintainer design change may subject peer review alter code trying minimize side effects 
change validated 
altered code verified assure conformance specification 
new code integrated existing system insure conformance system specifications 
task involves regression testing 
new model depicted 
software changed subject pending priorities 
change composed parts 
understanding code require documentation code reading execution decomposition slices 
decomposition slices may read executed decided advantage having executable program slices 
code modified subject outlined 
guidelines side effects unintended linkages induced code accident 
lifts substantial burden maintainer 
change tested decomposition slice 
change ripple modules regression testing unnecessary 
maintainer need verify change correct 
applying merge algorithm change code complete 
main int ch int nl nw nc ch nl nw nc getchar eof isspace ch nw nw ch nc nc nl nl getchar printf nl printf nw printf nc modified program directions underlying method tool needs empirically evaluated 
underway goal question metric paradigm basili 
naturally addressing questions scale determine existing software systems decompose sufficiently techniques order effect technology transfer 
evaluating decomposition slices candidates components reuse library 
practice slicing algorithms relatively bad worst case running times log number variables number edges 
obtain slices running time log 
worst case times interactive slicer large real programs impractical 
difficulty making data flow analysis component deliverable products handed development team maintenance team 
interactive tool built products 
changes maintainers data flow data updated incremental techniques 
interprocedural slices attacked techniques weiser barth 
interprocedural slicing algorithms horwitz require slice taken point slice variable id require slices taken statement program 
separate compilation worst case assumption external variables source available 
source available proceeds procedures 
attacked problem software merges extensions programs 
quote extension extends domain partial function altering initially defined values modification redefines values defined initially 
addressed modification problem restricting domain partial function slice complement modifying function values defined independent variables slice request change change software design change alter code test change adaptive perfective corrective preventive minimize defects minimize effort minimize cost maximize satisfaction documentation code reading test runs minimize side effects regression testing pending priorities integrate revalidate software maintenance process model request change change software design change alter component test change merge adaptive perfective corrective preventive minimize defects minimize effort minimize cost maximize satisfaction documentation code reading test runs decomposition slicing side effects regression testing pending priorities new software maintenance process model merging disjoint domains 
horwitz addressed modification problem 
start base program modifications changes base create interfere sense defined algorithm produces program integrates algorithm predicated assumption differences behavior variant programs base differences text significant preserved horwitz restrict changes base algorithm produces approximation undecidable problem determining behaviors interfere 
side stepped unsolvable problem constraining modifications 
technique akin limits placed software maintainers 
changes done context independence dependence provides context 
interesting note uses program slicing determine potential interferences merge 
note program variants name easily embedded change control system rcs 
direct sum nature components exploited build related families software 
components summed long dependent code sections match exactly intersection independent domains 
follow approach component construction 
weiser discusses slice metrics 
overlap measure statements slice slice measured mean ratio non unique unique statements slice 
parallelism number slices statements common computed number slices pairwise overlap certain threshold 
tightness number statements slice expressed ratio program length 
programs high overlap parallelism low tightness decompose nicely lattice get deep tangled 
shown data flow technique program slicing form decomposition software systems 
decomposition yields method maintainers 
maintainer able modify existing code cleanly sense changes assured completely contained modules consideration unseen linkages modified code infecting modules 
barth 
practical interprocedural dataflow analysis algorithm 
communications association computing machinery september 
basili selby 
experimentation software engineering 
ieee transactions software engineering july 

carr 
information flow data flow analysis programs 
acm transactions programming languages systems january 

merging software extensions 
acta informatica 
bohm 
flow diagrams languages formation rules 
communications association computing machinery may 

choi miller netzer 
techniques debugging parallel programs analysis 
technical report university wisconsin madison august 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
gallagher 
program slicing software maintenance 
phd thesis university maryland baltimore maryland december 
gallagher 
surgeon assistant limits side effects 
ieee software may 
gallagher lyle 
program decomposition guide modifications 
conference software maintenance pages october 
gallagher lyle 
program decomposition scheme applications software modification testing 
proceedings nd hawaii international conference system sciences pages january 
volume ii software track 
grady 
measuring managing software maintenance 
ieee software september 

denotational program slicing 
proceedings nd hawaii international conference system sciences pages january 
volume ii software track 
horwitz prins reps integrating non interfering versions programs 
proceedings sigplan symposium principles programming languages january 
horwitz prins reps integrating non interfering versions programs 
acm transactions programming languages systems july 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
robertson von mayrhauser 
data flow analysis application software maintenance 
conference software maintenance pages october 
kennedy 
survey data flow analysis techniques 
steven muchnick neil jones editors program flow analysis theory applications 
prentice hall englewood cliffs new jersey 
kernighan ritchie 
programming language 
prentice hall englewood cliffs new jersey 
korel laski 
dynamic program slicing 
information processing letters october 
korel laski 
stad system testing debugging user perspective 
proceedings second workshop software testing verification analysis pages banff alberta canada july 
laski 
data flow testing stad 
journal systems software 
lyle 
evaluating variations program slicing debugging 
phd thesis university maryland college park maryland december 
lyle weiser 
experiments slicing debugging aids 
elliot soloway iyengar editors empirical studies programmers 
ablex publishing norwood new jersey 
lyle weiser 
automatic program bug location program slicing 
proceeding second international conference computers applications pages china june 
ott 
relationship slices module cohesion 
international conference software engineering may 
ottenstein ottenstein 
program dependence graph software development environments 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments pages may 
ottenstein known ott 
reps horwitz 
semantics program integration 
proceedings second european symposium programming esop pages nancy france march 
reps yang 
semantics program slicing 
technical report university wisconsin madison june 

state software maintenance 
ieee transactions software engineering march 
tichy 
rcs system version control 
software practice experience july 
weinberg 
kill code 
pages august 
weiser 
program slicing formal psychological practical investigations automatic program abstraction method 
phd thesis university michigan ann arbor michigan 
weiser 
program slicing 
proceeding fifth international conference software engineering pages may 
weiser 
programmers slices debugging 
cacm july 
weiser 
program slicing 
ieee transactions software engineering july 
