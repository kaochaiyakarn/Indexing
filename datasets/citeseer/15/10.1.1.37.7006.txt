class patterns mark tullsen department computer science yale university new haven ct mark tullsen yale edu 
pattern matching great convenience programming 
pattern matching problems con icts data abstraction complex haskell pattern guards irrefutable patterns patterns patterns source runtime errors lastly patterns rst class language construct 
proposes simpli cation pattern matching patterns rst class 
key idea treat patterns functions type just patterns pattern combinators written functions language 
debated issue language haskell patterns 
semantics 
want patterns 
need patterns 
match lazily match strictly 
need extend patterns pattern guards 
propose extension simpli cation patterns rst class language constructs 
context language haskell ideas apply language higher order functions 
patterns complex argument elegance simple patterns length length xs length xs example zipwith bs zipwith bs zipwith research supported part nsf number ccr 
de nition zipwith appears nicely symmetric know symmetric patterns match left right zipwith strict rst argument second 
wanted modify zipwith strict second argument 
case statement write zipwith follows zipwith bs case bs switch evaluation order bs zipwith bs write zipwith irrefutable pattern guard zipwith bs null zipwith bs zipwith note small semantic change requires large syntactic change 
examples show haskell pattern matching features 
haskell numerous pattern matching features added simplest form pattern matching de ne length function xs nested pattern matching tuple patterns wild card symbol literal patterns xs xs patterns xs irrefutable patterns patterns guards abbreviation true extra binding construct extensions views wad bc pattern guards suggested :10.1.1.14.3532
currently pages haskell report dedicated pattern matching 
patterns rst class pattern matching expressive wish 
example fig 
functions getc getc virtually identical commonality get generic function pass constructors 
example see second class nature patterns sections 
data getc extract list getc getc xs getc xs getc xs getc xs getc extract list getc getc xs getc xs getc xs getc xs fig 

getc getc case case commonality write de ned terms extend problems patterns addition patterns various problems 
patterns compatible data types wad :10.1.1.14.3532

semantics patterns elegant patterns impose left right top bottom evaluation order 
seen modifying zipwith want di erent evaluation order patterns write far elegant looking code 
pattern syntax gives declarative appearance exist de ning equation true contexts ensure patterns non overlapping 
haskell order declarations insigni cant patterns sequence function declarations 
patterns engender multitude controversies 
beg extension extension patterns irrefutable patterns patterns guards bindings currently new construct pattern guards considered inclusion haskell 

pattern matching syntactically apparent partial function de ned partial functions arise patterns exhaustive case expressions bindings xs lambda bindings xs 
source unintentional run time pattern match failure 
rst solved simply disallowing non exhaustive patterns 

pattern matching referentially transparent expressions equal second obviously unintended case 
case 

patterns go grain higher order programming style get convenience arguments function explicit 
overview seen problems pattern matching 
presents alternative standard pattern matching 
essence alternative sect 
sect 
provides examples sect 
introduces pattern binder construct simple syntactic sugar patterns easier write sects 
various extensions sect 
presents laws patterns sect 
compares approach approaches summarizes 
alternative patterns key idea functions type patterns function type referred pattern function just pattern 
pattern function applied fails returns succeeds result returns just 
section explains rami cations pattern functions sect 
show take away language sect 
show construct patterns pattern combinators sect 
explain added language 
simplify language note follows requires simplify haskell section point explore simplicity 
haskell patterns currently allowed top level declarations lets lambdas case alternatives 
restrict language allow failure free haskell prelude data just patterns top level declarations lets lambdas 
restrict form case expressions 
syntax failure free patterns follows binding variables tuples semantics translation 
syntactic sugar fst snd case expressions restricted exhaustive algebraic type alternatives contain literals nested constructors 
case xs objective eliminate implicit left right top bottom evaluation order 
default alternative allowed constructors 
obviously lost expressiveness language lost convenience 
programs lost features programs awkward 
example function zipwith de ned prelude zipwith bs cs zipwith bs cs zipwith awkward code restrictions zipwith bs cs case case bs bs case cs cs zipwith bs cs functions zipwith zipwith zipwith awkward 
de ne simpli ed language 
pattern combinators patterns just functions need de ne functions construct manipulate patterns 
type synonym type pat due lifted tuples true haskell ll ignore complication 
pid just pk just case just just 
case just case just just 
case just case just just case just case just just case just fig 

pattern combinators signatures pattern combinators pattern pid pat matches pk eq pat pk matches pat matches pattern combination 
pat pat pat match pat pat pat match 
pat pat pat parallel match pat 
pat compose match pattern elimination pat 

apply pattern de nitions fig 

di erence 
order evaluation likewise 
add primitive constructor get pattern function corresponding primitive satis es pattern law just nullary constructor just addition programmer allowed de ne pairs functions satisfy pattern law ed 
curried constructors allowed pattern law straightforward constructors uncurried 
examples various functions look pattern combinators 
functions list list list useful corresponding pattern functions list list list list list list list pid list pid list list pid list example structure code re ect types involved nicely data tree leaf tree tree tree tree tree tree leaf leaf leaf tree tree tree pid uncurry precedences pattern operators tightest binding 
remember functions getc getc 
write code generic constructors di erent data types map getc getc cons view join list data list nil unit join list list cons xs join unit xs cons nil cons unit just nil cons join xs ys case cons xs just xs just join xs ys cons ys extension pattern binders pattern binder construct times higher order approach elegant times clumsy compared standard pattern matching 
pattern binder construct attempt add minimum syntactic sugar patterns easier write 
examples list list list pair pattern binder haskell expression haskell operator de ned follows variable tuple pattern constant apply pattern function apply pattern function apply pattern function nullary library function extracts just list 
note constructor symbol function de ned 
pattern binder translated follows pattern function failure free pattern fpg cvt cvt pid cvt pn cvt cvt pk cvt cvt cvt cvt cvt hand pattern binder subset standard pattern matching 
case alternative allowed 
hand extends pattern matching 
allows arbitrary patterns applied inside pattern construct 

matching constants explicit gives matching just literal constants haskell expression eq type 
construct strictly necessary construct match constants 

allows extend de constructors de ning functions 

allows arbitrary control structures pattern combinator parameter 
standard pattern matching understood merely syntactic sugar wad approach simpler 
syntax clean standard pattern matching explicit 
couple ways things syntactically nicer closer regular patterns allow dropping construct literals integer character string constants unambiguous variable converted pk equivalent nullary constructor 
second allow dropping construct unfortunately ambiguous de ned know cvt rule cvt rule 
get cvt rule de ned 
ectively disallows shadowing variables 
haskell capitals constructors distinguish 
going start writing pseudo constructors functions de constructor de ned 
making hypothetical changes haskell drop restriction 
thing enables data types better patterns matter function corresponds constructor algebraic data type matters function corresponding function 
examples pattern binders function take haskell prelude uses pattern guard take take take xs take xs take error take pattern binders take written follows take take xs error take just function zipwith written straightforwardly zipwith xs ys zs zipwith xs ys zs create view positive integers succ succ functions 
case pattern law broken succ succ restricted positive integers 
succ succ just factorial succ succ factorial pattern binders new control structures example extracted interpreter getenv op eint eint op error bad primitive getenv string int int int getenv lookup note type getenv pattern function inside pattern binders 
add informative error message code changed list hd list error expect elements name hd error head eint error st eint eint error nd eint getenv op name error name invalid prim op val pat contin pat contin val note pattern binders right associative 
common pattern haskell write nested case expressions marching right page 
nice put exception code right see functions useful pattern binders 
changing evaluation order just patterns pattern binders implicit left right evaluation mechanism tuples 
translated left right evaluation 
pattern binders extended allow tuples patterns evaluate right left 
revert explicit combinators 
extension ii backtracking extend pattern combinators lists 
success failure multiple successes nicer write combinators lists 
easily lists monads speci cally instance monadplus class monad monadplus mzero mplus instance monadplus mzero mplus mplus haskell haskell really allow expressions inside think 
similar perl useful idiom pat exception exception code right 
pid monad pk eq monadplus monadplus 
monadplus monad 
monad functor pid return pk return mzero mzero mplus 
flip return 
return fmap fig 

monadic pattern combinators instance monadplus mzero mplus list append general de nitions fig 

need di erent pattern elimination construct replace 

case get standard pattern matching pattern combinators instantiated monad get backtracking pattern combinators instantiated list monad 
requires lazy lists ciency 
method lazy lists backtracking explained wadler wad combinator parsers hm 
extension iii value constructors de ne equivalents various pseudo constructors tedious example list list list 
instance eq class simply shortcut pk functions pattern trivial tedious generate 
way formalize automate construction corresponding pattern function function 
method aitken reppy value constructors ar 
language generate value constructor 
value constructor function de nition form failure free pattern variables linearly de ned follows variable constructor constant value constructor advantages value constructors 
saves tedium de ning pattern functions 

gives function pattern function pairs guaranteed satisfy pattern law 
pattern laws laws monadic pattern combinators 
true instance monadplus satis es monad laws 

pid fmap true instance monadplus true lists mplus mplus distributes relation am aware proposes alternatives standard pattern matching constructs 
related getting pattern matching title wadler seminal says views way pattern matching cohabit data abstraction wad :10.1.1.14.3532
lines bc ppn 
goal line reconcile pattern matching data types solutions keep pattern matching add language 
proposal seen way reconcile allow reconcile parties eliminating result get syntactic convenience patterns dealing data types 
aimed expressiveness patterns fahndrich boyland fb propose means add pattern abstractions 
approach far simpler attempt patterns statically checkable exhaustiveness redundancy 
aitken reppy ar simple approach making pattern matching expressive borrowed notion value constructor 
parser combinators related applicable matching lists 
hutton meijer hm shown monads useful designing combinators 
patterns parser combinators parameterized monad list backtracking 
hughes hug generalizes monads calls arrows 
arrows general surprising combinators instance arrow interesting thing extensively uses certain combinators generalization mine generalization generalization 
summary summarize proposed add 
primitive constructing pattern functions constructors 
pattern binder syntactic construct power language write pattern combinators want result loss 
restrict patterns top level declarations lets lambdas failure free 
restrict case alternatives exhaustive mutually exclusive single algebraic data type advantages proposal 
extensions needed language trivial 

complicated pattern matching constructs unnecessary 

pattern matching longer results run time errors 

patterns rst class write patterns write control structures sequencing patterns write programs generic constructors getc getc 

pattern matching backtracking needed 

patterns data types 

trifonov pointing similarities pattern combinators arrow combinators john hughes anonymous referees helpful comments 
ar william aitken john reppy 
value constructors symbolic constants standard ml 
technical report tr cornell university computer science department june 
bc burton cameron 
pattern matching data types 
journal functional programming 
fb manuel john boyland 
statically checkable pattern abstractions 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 
hudak jones wadler 
report programming language haskell 
sigplan notices may 
hm graham hutton erik meijer 
monadic parser combinators 
technical report tr university nottingham december 
hug john hughes 
generalizing monads arrows 
submitted publication 
ppn pedro ricardo pea manuel nez 
new look pattern matching data types 
proceedings acm sigplan international conference functional programming icfp volume acm sigplan notices pages 
acm june 
wad wadler 
replace failure list successes 
jean pierre jouannaud editor functional programming languages computer architecture volume lecture notes computer science pages 
springer verlag september 
wad philip wadler 
cient compilation pattern matching 
peyton jones editor implementation functional programming languages chapter 
prentice hall international 
wad philip wadler :10.1.1.14.3532
views way pattern matching cohabit data abstraction 
conference record fourteenth annual acm symposium principles programming languages pages 
acm january 
