author responsible correspondence dr tom mens programming technology lab department computer science vrije universiteit brussel pleinlaan brussel tel fax mail vub ac key words software evolution uml metamodel reuse contracts footnotes affiliation authors dr mens tom programming technology lab vrije universiteit brussel pleinlaan brussel vub ac prof dr hondt theo programming technology lab vrije universiteit brussel pleinlaan brussel vub ac 
previous reuse contracts terms refinement coarsening consistently connection disconnection 
unfortunately term refinement reserved uml denote stereotyped abstraction special kind dependency 
similarly extension cancellation addition removal metaclass extend uml denote relationship 
automating support software evolution uml tom mens theo hondt disciplined support evolution software artifacts important phases software life cycle 
order achieve support uniform underlying foundation software evolution necessary 
past reuse contracts proposed formalism number different domains generalises formalism integrates uml metamodel 
support evolution readily available kinds uml models ranging requirements implementation phase 

years lot attention paid evolution reusable implementation level software artifacts 
support understanding evolution earlier phases requirements analysis design 
support facades variation points jacobson change cases exist 
practice currently existing case tools adequately support evolution analysis design models 
lack tool support partly due fact modelling techniques provide proper support evolution 
representative example uml omg adequately deal evolvable models concluded paragraph extracted uml semantics specification supplier element dependency changes client element potentially invalidated 
invalidation check performed followed possibly changes derived client element 
check performed action taken change derived element validate 
semantics validation change outside scope uml 
automated support software evolution central solving important technical problems current day software engineering 
discuss just problems 
topic propagation changes 
part software modified parts software need changed 
identification parts changes need trivial task 
certain extent impact analysis techniques developed address problem arnold 
second issue consistency maintenance architectural drift modification artifacts phase drift away artifacts earlier phases prohibited better maintaining consistency artifacts 
topics version control conflict detection traceability intimately related ability tool manage evolution software artifacts 
order provide support build case tools general underlying foundation software evolution needed 
ease important aspect approach formal form basis tools general applicable domains possible 
propose general notation semantics dealing disciplined evolution uml models previous reuse contracts 
reuse contracts introduced steyaert handling change propagation parent class subclasses 
lucas idea extended deal evolution cooperating classes mens discussed application reuse contracts collaborations uml 
application reuse contracts requirements models object behaviour analysis rubin investigated hondt 
ties extends generalises previous efforts providing unified approach software evolution 
order fully understand knowledge uml metamodel ocl required omg 
please note version uml metamodel undergone significant changes official version 
unified approach software evolution evolution conflicts important software artifacts evolve 
software evolution involves certain cost developers consider upgrading new version artifact 
unfortunately integrating new version software artifact context old version may cause unexpected interactions behaviour evolved artifact changed assumptions hold anymore 
undesired interactions referred upgrade conflicts 
related conflict occurs different independently changes software artifact 
merging parallel evolutions new version software artifact possible interaction modifications leads unexpected undesired behaviour 
case speak merge composition conflict 
programming level kinds evolution conflicts result erroneous unexpected behaviour kiczales lamping steyaert 
analysis design level upgrade merge conflicts may result model inconsistent model intended meaning anymore 
example simple conflict consider design model contains classes software developer decides add association software developer independently decides class removed 
clearly modifications incompatible merge give rise inconsistent model dangling association source structural conflict detected existing merge tools westfechtel parallel modifications merge results valid uml model undesired behaviour 
interesting conflicts detected current case tools 
illustrative example 
general conflicts show evolution software artifacts assumptions dependent artifacts invalid 
key detecting conflicts automatically formally document monitor assumptions explicit contract 
evolution contracts stated earlier reuse contracts formalism dealing reuse evolution kind software artifact 
emphasis lies support evolution term evolution contracts 
generality demonstrated applying different kinds artifacts class inheritance hierarchies steyaert cooperating classes lucas requirements specifications hondt uml collaborations mens software architectures romero 
formal treatment phd dissertation mens 
idea evolution contracts incremental modification evolution software artifacts explicit means formal contract provider modifier artifact 
purpose contract evolution disciplined 
provider clause specifies properties software artifact relied describing artifact interface idl specialisation interfaces lamping interaction contracts helm collaboration contracts de hondt formal specification mechanism 
essential aspect evolution contracts provide better support unanticipated evolution provider clause specify admissible changes software artifact 
precise way artifact modified specified separate modifier clause 
contract clauses provider modifier form allows assess impact changes actions dependent artifacts undertake upgrade certain artifact evolves 
important characteristic evolution contracts allow changes artifact changes preserve consistency formedness artifact 
example evolution contract expresses evolution set interface new version set 
provider clause specifies set contains operations insert union 
modifier clause specifies operations remove intersection added 
provider clause interface set insert element union set modifier clause add modification remove intersection interface set insert element remove element union set intersection set evolution contract terminology classify different kinds modifications contract types 
contract type imposes obligations permissions prohibitions modifier 
contract types constraints impose fundamental disciplined evolution basis detecting conflicts software artifacts evolve 
essence find contract types specific detect useful evolution conflicts remaining general applicable different kinds software artifacts 
experience evolution contracts different domains distinguish primitive contract types addition removal connection disconnection 
shows example addition designated stereotype add allows add new model elements case operations remove intersection provider interface prohibits overriding removal existing model elements 
permits adding multiple elements 
detailed treatment primitive contract types section 
section describes contract types aid detecting evolution conflicts 
depth discussion evolution contracts slightly different terminology refer phd dissertations lucas mens 
unified modelling language primarily interested evolution early phases software life cycle choose suitable analysis design notation express ideas 
years innumerable analysis design methods notations proposed developed 
late methods converged standard notation unified modelling language uml accepted industry standard omg object management group 
standard uml open sense new features added quite easily 
reason uml notation express ideas 
different incarnations evolution contracts developed separately incorporates evolution contracts uml metamodel making support evolution available models currently available uml new kinds models added uml 
result evolution contracts consequently automated support evolution applicable uml models phases software life cycle ranging case models deployment models 

incorporating evolution contracts uml extension mechanisms metamodel ocl important feature uml openness 
contains built extension mechanisms semantics existing modelling concepts enhanced stereotypes constraints tagged values 
mechanisms applied modelling concept 
extension mechanisms suitable adding user defined semantics uml cases situations powerful 
situations possible extend modify uml semantics semi formally described means metamodel 
directly editing metamodel alter uml semantics risk incompatibility lack portability 
uml semantics described metamodel combination different views 
syntax uml concepts expressed graphically subset uml notation 
formedness rules describe instances certain language construct meaningful expressed constraints ocl 
remaining constraints expressed natural language time pressure 
needs said uml semantics currently completely formally defined ongoing attempts direction evans kent 
problem semantics ocl formally defined 
result parts constraint language lead problems ambiguities open questions gogolla richters 
attempts trying formalise ocl richters gogolla hope problems disappear near 
enhance uml support evolution aim automatically detecting conflicts parallel evolutions uml model 
try built extension mechanisms uml possible need extend uml metamodel 
necessary constraints formedness rules specified ocl 
propose extension uml metamodel need explain conventions 
referring term metamodel ordinary text italic font modelelement 
terms uppercase letter refer metaclasses terms lowercase letter refer features association roles metaclasses 
symbol denote derived elements elements directly calculated ones 
square brackets denote sequence ordered set elements 
relationships kinds elements specified uml model defined specialisation metaclass modelelement uml metamodel 
particularly interesting specialisation modelelement namespace represent elements elements 
concrete specialisations namespace classifiers class interface number features operations methods attributes packages contain kind modelelement collaborations number important specialisation modelelement relationship added newly uml metamodel version 
represent relationships elements 
relationship metaclass different specialisations 
instance generalisation association relationship placed classifiers include extend relationship put dependency relationship connect 
basic structure visualised 
derived associations picture part uml metamodel discussed detail 
note enumerated representative selection namespaces relationships sake presentation 
ownedelement namespace modelelement package classifier collaboration relationship class interface dependency generalisation association include extend distinguishing name spaces relationships uml abstraction evolution contracts uml dependency relationship general kind relationship stating implementation functioning requires presence 
dependency relationship contains client supplier association role 
client requires presence knowledge supplier element change supplier may affect client 
client modelelement namespace supplier modification ordered client supplier dependency evolutioncontract evolution contract extension uml metamodel evolutioncontract defined specialising dependency metaclass depicted 
evolutioncontract stereotyped describe specific kind modification contract type takes place 
modification role evolutioncontract refers nonempty sequence client supplier namespace modified added removed evolutioncontract 
exact semantics modification depends particular stereotype evolutioncontract specified extra formedness rules ocl 
approach explained similar abstraction metaclass uml metamodel specialisation dependency stereotyped different variants derivation realization refinement trace stereotypes derive realize refine trace respectively 
unfortunately evolutioncontract seen special kind abstraction explicit constraint omg abstraction relationship relates elements sets elements represent concept different levels abstraction different viewpoints 
dealing evolution typically exclusively want model relationships concepts level abstraction 
extra formedness constraints evolutioncontract specified independently stereotype 
evolutioncontract defined namespaces arbitrary 
modification needs evolutioncontract 
derived supplier client roles evolutioncontract refer exactly namespace nonempty set 
additionally supplier client namespaces type 
words allow type element changed evolution 
restrictions required underlying formalism defined mens 
consider removing restrictions formally investigated effect detection evolution conflicts 
formedness rule formalises constraints context evolutioncontract inv self supplier size inv self client size inv self modification size inv self supplier namespace inv self supplier self client mentioned stereotype evolutioncontract corresponds contract type describes supplier modified 
number primitive composite contract types conceived apply kind uml model yielding general model evolution 
primitive contract types explicit distinction elements relationships elements helps formulate evolution conflict rules consequently allows detect potential inconsistencies parallel evolutions model 
uml distinction elements relationships namespace relationship metaclasses 
namespace composite relationship ownedelement refers elements contained current element 
unfortunately ownedelement refers elements relationships making distinction 
distinction essential conflict detection mechanism need define additional ocl operations namespace extract relationships non relationships ownedelement respectively 
user defined operations shown derived associations 
exact ocl definition context namespace set modelelement inv self ownedelement reject relationship context namespace set relationship inv self ownedelement select relationship added association relationship modelelement refer elements play role relationship 
uml metamodel currently uniform consistent way refer elements relationship 
dependency client supplier generalisation child parent association connection association roles need related general association role follows context dependency inv self self client union self supplier context generalisation inv self self child including self parent context association inv self self connection order fully understand constraints consult relevant parts uml metamodel 
case namespaces inconsistencies role names 
formedness rules need introduced special constraints needed package collaboration context classifier inv self self feature context inv self self evolution contract stereotypes extensions uml metamodel take closer look different kinds stereotype 
distinction primitive evolution contracts composite ones 
stereotyped evolution contracts metaclasses specialised concrete subclasses 
stereotypes defined uml metamodel directly create specialisations 
corresponds elementary modifications perform namespace specialised adding elements addition removing elements removal namespace adding connection removing disconnection relationships elements namespace 
denotes evolution contract built simpler ones specialised promotion 
stereotypes summarised table general applicable kind uml model 
cases need model specific modifications 
done defining user defined specialisations basic evolutioncontract stereotypes illustrated section 
table possible stereotypes evolutioncontract stereotype name stereotyped evolutioncontract meaning stereotype specialised stereotypes add addition adding elements namespace remove removal removing elements namespace connect connection adding relationships elements namespace disconnect disconnection removing relationships elements namespace stereotype specialised stereotypes promotion promotion defining high level evolutioncontract set lower level ones sequence defining evolutioncontract sequence smaller ones section discuss extra formedness constraints need added primitive evolution contracts section explains contract types facilitate detection evolution conflicts 
section discusses scalability issues including composite contract types user defined specialisations 

primitive evolution contracts addition addition add new namespace 
addition add features class add classes namespace add cases case model example set interface extended adding new operations remove intersection 
dependency arrow adorned stereotype add constraint modification remove intersection attached specify exact modifications 
formedness constraint defined addition 
modification nonempty sequence need added supplier corresponding evolutioncontract 
relationships added supplier means addition 
added elements supplier 
client created adding elements leaving rest supplier relationships existing elements untouched 
context addition inv self modification forall relationship inv self supplier self client inv self supplier intersection self modification isempty inv self supplier union self modification self client reason modification refers sequence sequence namespaces expected illustrated example modification evolutioncontract sequence operations operation specialisation namespace 
constraint evolutioncontract supplier client type formedness constraints associated supplier client follows type modelelement added certain supplier means addition depends type supplier 
example type supplier interface means addition allowed add elements type operation formedness constraints client type interface 
connection connection add relationships existing namespace 
add associations generalisations classes add include extend relationships cases add message invocations objects example model containing classes set element refined adding association roles owner owned classes 
obviously connection add multiple relationships 
math set insert element union set element connect modification assoc set element owner owned math set insert element union set owner owned element applying evolution contracts evolution class diagrams formedness constraints defined connection 
modification nonempty sequence relationships need added supplier 
client created adding relationships leaving rest untouched 
new relationships added exist supplier 
ocl explicitly define operation determine certain set subset defined mathematical property context set subset set set boolean inv self self intersection set definition give ocl constraints connection context connection inv self modification sequence relationship inv self modification forall subset self supplier inv self supplier self client inv self supplier intersection self modification isempty inv self supplier union self modification self client addition types relationships added certain supplier means connection depend type supplier 
removal disconnection third kind primitive evolution contract removal remove existing namespace 
seen inverse addition 
formedness constraints removal addition roles supplier client inverted 
extra condition needed ensure dangling removal 
context removal inv self modification forall relationship inv self supplier self client inv self client intersection self modification isempty inv self client union self modification self supplier inv self supplier forall intersection self modification isempty similar reasoning disconnection remove existing relationships namespace 
seen inverse connection 
example horizontally operation invocation union insert removed specialisation interface class 
details section 
context disconnection inv self modification sequence relationship inv self modification forall subset self supplier inv self supplier self client inv self client intersection self modification isempty inv self client union self modification self supplier 
detecting evolution conflicts section describes evolution contracts aid detecting evolution conflicts 
detailed discussion different aspects involved conflict detection refer lucas mens 
example evolution contracts aim maintaining maximum degree consistency evolving model elements models 
specifically evolution contracts provide feedback possible upgrade conflicts occur due evolution model elements 
evolution problems occur parallel modifications model element 
merge conflict arises combination independent modifications leads undesired interactions 
spec int set insert element union set invokes insert spec int disconnect modification invokes union insert add modification size size integer insert element updates size connect modification updates insert size spec int insert element union set evolution class inheritance hierarchies illustrates upgrade conflict 
class interfaces specialisation interfaces lamping specify relevant invocation dependencies operations 
example specialisation interface set contains operation union invokes insert second operation set 
set specialised overrides insert operation additionally accesses updates size attribute time new element added set 
specialisation achieved uml putting generalization relationship set 
generalization explicitly document exact modifications information essential enable conflict detection need add evolutioncontract dependency set 
dependency specifies incrementally obtained set adding attribute size addition accessing attribute size operation insert connection 
fact evolutioncontract set composite evolution contract composed primitive evolution contracts addition connection 
discussed detail section 
horizontal direction set evolves new version removing invocation insert union efficiency reasons 
expressed means evolutioncontract dependency set 
disconnection removes invocation relationship operations 
find upgrading set leads unexpected results need know valid meaningful specialisation 
unfortunately case originally invocation union leads indirect update size case anymore substitute set 
result performing union sets upgraded version cause size set increase obviously 
problem called inconsistent operation conflict 
arise upgrading parts uml model new version merging parallel modifications different software developers model 
example start model containing set interface developer decide change set developer decide add new interface specialisation set 
merging modifications obtain exactly conflict 
conflict detection general evolution conflicts detected comparing different supplier 
automate conflict checking contract types set conflict tables describe kinds conflicts may occur cases 
example inconsistent operation explained occurs time modification disconnection certain operation invocation modification connection operation invoked 
detecting evolution conflicts distinction structural conflicts behavioural conflicts 
structural conflicts correspond structural problems give rise inconsistent model modifications merged 
example situation dangling 
arises connection removal merged removal deletes elements connection 
behavioural conflicts subtle give rise behavioural problem 
modifications interact way supposed 
example inconsistent operation conflict previous section 
difficult know interaction supposed behave evolution contracts assume worst case scenario detect potential sources problems 
detected evolution conflicts considered merely warnings indicate situations gone wrong 
find warnings correspond actual incompatibilities behavioural information needed 
extent rely formal techniques performing deadlock detection data control flow analysis detailed discussion different aspects involved conflict detection refer mens 

scalability primitive evolution contracts discussed section basis general approach evolution uml models elementary cope complex situations 
evolution contracts applicable model elements size 
apply evolution contracts model elements small classes complex entire software models 
general way group arbitrary model elements making packages 
model elements nested means package mechanism need arises look evolution contracts different levels abstraction promote respectively demote contracts higher respectively lower level abstraction 
primitive evolution contracts arbitrarily complex combinations evolution contracts needed 
certain combinations occur frequently need provide possibility introduce certain composite evolution contracts predefined combinations primitive evolution contracts 
basic evolution contracts sufficient situations special kinds model elements new specific contract types needed 
specified easily adding user defined stereotype evolutioncontract 
subsections discuss issues detail 
nested model elements uml package mechanism nest packages 
way arbitrarily complex components created 
different kinds combined way 
example design component defined stereotyped design package owns collaboration containing collaboration interaction containing interaction 
uml semantics specifies interaction collaboration context explicit dependency put interaction package collaboration package 
detailed discussion deal evolution particular kind components mens 
packages require changes evolution contract definition package defined specialisation namespace uml metamodel shown 
composite evolution contracts model elements arbitrarily complex way model elements evolve 
extent notion composite evolution contract needs introduced 
composite evolution contracts evolution contracts composed ones 
expressed ocl constraint 
context inv self modification sequence evolutioncontract look detail useful specialisations promotion 
packages nest necessary look different levels abstraction 
introduce possibility automatically promote number low level evolutioncontract higher level elements 
example promotion evolution contract package math evolves new package math extending class element extra operation equals 
low level addition attached name ec classes leads promotion packages nested 
general sequence lower level evolution contracts may composed single promotion 
math set insert element union set math set insert element union set owner owned promotion modification ec owner element owned element add ec modification equals equals element promoted evolution contract extra constraint modification role promotion evolutioncontract sequence defined elements owned supplier client promotion respectively 
constraint allows cross level abstraction similar way sophisticated kind promotion defined go arbitrary number levels 
context promotion inv self modification forall ec self supplier includes ec supplier self client includes ec client certain sequences primitive evolution contracts frequently provide possibility define evolution contract sequence ones 
example shows factorisation operation invocations class direct invocation operation iterate operation find replaced invocation extra indirection introducing auxiliary operation select 
composite evolutioncontract defined sequence primitive evolution contracts addition connection disconnection 
top part shows evolution contract bottom part shows sequence primitive evolution contracts named ec ec ec composed 
spec int find invokes iterate iterate ec add modification select sequence modification ec ec ec spec int find invokes select select invokes iterate iterate ec connect modification invokes find select invokes select iterate ec disconnect modification invokes find iterate evolution contract client obtained successively applying evolutioncontract sequence 
leads ocl constraint context inv self supplier self modification supplier inv self client self modification client inv sequence self modification size forall self modification client self modification supplier predefined composite evolution contracts notions promotion construct complex evolution contracts simpler ones practical point view 
need mechanism capture recurring patterns evolution contracts 
example evolution contract arises different situations 
essentially factors part behaviour elements intermediary element 
considered evolution contract extra constraints attached 
specifically consists addition connection disconnection additional condition connection add new relationships source element introduced addition similar constraint disconnection 
details lucas 
formally capture pattern define factorisation specialisation define constraints context factorisation inv ext self modification select addition con self modification select connection dis self modification select disconnection self modification ext union con union dis con intersection dis isempty dis forall subset self supplier con forall subset self supplier union ext obviously constraints automatically inherited factorisation 
complete constraints added factorisation complex clutter example 
needless say technique create user defined specialisations promotion 
example define specialisation promotion additional constraint built lower level additions 
context inv self modification sequence addition model specific evolution contracts specific software artifacts basic evolution contracts insufficient express exact modification occurs 
cases need define model specific specialisations existing 
example suppose want model evolution class concrete 
looking closely uml metamodel generalise kind concrete changing value attribute isabstract true false 
formalise evolution step need define user defined specialisation additional constraint applied subclass thereof 
exact ocl constraints 
context inv self supplier inv self supplier isabstract true inv self client isabstract false scaling conflict detection different ways scaling evolution contracts mentioned previous subsections necessary apply evolution contracts larger models 
packages composite contract types gives flexible way look models desired level abstraction 
possibility create new user defined primitive composite evolution contracts allows customise formalism particular situations 
crucial scalability detection evolution conflicts behaves presence composite evolution contracts 
case promotion evolution contracts conflicts detected lower level promoted higher level 
evolution contracts involved things complicated 
approximation conflicts caused evolution contract detected considering primitive evolution contracts 
lead detection potential conflicts subsequent may cause local conflicts annihilated 
example addition certain element followed removal element conflicts caused addition considered 
detecting evolution conflicts sequence transformed way evolution contract independent respect possible conflicts preceding ones 
process removing redundancy arbitrary evolution sequence called normalisation treated detail mens 
importantly predefined high level evolution contracts allows software developer give extra feedback conflicts real probably 
example factorisation 
inconsistent operation conflict explained occurs invocation operation removed disconnection software developer operation independently modified developer invoke operation connection 
factorisation involves disconnection inconsistent operations conflict appear factorisation 
closer examination see intuitive difference stand disconnection disconnection part factorisation 
operation invocation removed factorisation invocation added operation net result remains transitive closure operation originally removed 
explicitly declaring disconnection part factorisation user indicates inconsistent operation conflict ignored 

tool support obvious mechanism composite evolution contracts conflict detection difficult manage proper tool support 
formalism incorporated case tool 
development evolution contract methodology incorporation tools strongly related 
hand incorporation evolution contracts tools tools case studies invaluable development evolution contract formalism 
hand existence formal specification evolution contracts facilitates incorporation tools 
evolution contracts originally conceived implementation level components steyaert tools aimed supporting evolution implementation level 
tools developed smalltalk semi automatically extract evolution contracts existing smalltalk code 
phd dissertation koen de hondt elaborated idea led reverse engineering tool smalltalk de hondt 
capable semi automatically extracting class collaborations smalltalk code representing collaborations graphically case tool rational rose 
closer topic tools provide support evolution analysis design level 
carried interesting experiments uml case tools rational rose select enterprise visio professional added limited support evolution contracts means built scripting languages 
purpose merging parallel evolutions uml model visual differencing tool comes rational rose 
evolution contracts approach tool capable detecting resolving structural inconsistencies ill formed uml models 
similar merge tool proposed westfechtel distinction approach language independent 
essence evolution contracts enable detection behavioural inconsistencies 
practice behavioural merge conflicts important harder detect manually give rise subtle problems 
implemented declarative evolution contract framework prolog way customised easily different domains 
possible check evolution conflicts evolving uml models exporting prolog performing conflict detection 
experiment part large case study containing design classes currently carried industrial partner 
main goal illustrate practical benefits evolution contracts find formalism needs enhanced 
especially scalability aspects investigated 
tool user friendly need experience practice user defined contract types defined 
briefly discussed factorisation useful contract types imagined 
user defined contract types factorisation domain independent applicable specific cases 
lucas mens number user defined contract types defined discussed 
refactoring restructuring operations opdyke interesting candidates composite contract types 
tool helpful assisting conflict resolution evolution conflicts detected 
attempt tool undertaken context evolution smalltalk code mezini 
approach generalised extended allow semi automatic conflict resolution uml models 

summary showed evolution contract formalism integrated uml metamodel straightforward way 
result obtain general mechanism dealing unanticipated evolution arbitrary uml models 
characterised number basic evolution contracts uniformly applied different uml models 
scalability mechanisms provided deal evolution different levels abstraction allow model specific domain specific modifications defined 
formally documenting model evolution evolution contracts incompatibilities undesired behaviour detected part model upgraded new version different software developers independently changes related parts model 
uniform approach conflict detection independent specific kind model consideration 
important benefit approach formality easy integrate case tools 
number prototype tools developed currently validated industrial case studies 
interesting application ideas employ evolution contracts managing evolution uml metamodel 
time new version uml metamodel currently delivered possible uml models developed previous version invalidated 
provided document evolution uml metamodel evolution contracts possible automatically identify potential problem areas particular case 
important topic addressed application evolution contracts monitor evolution different kinds model elements 
evolution contracts restricted type supplier client 
useful apply evolution contracts document relationship different kinds model elements ranging requirements implementation phase 
possible evolutions case refined collaboration refinement interface transformed class realization order refinements realizations stereotyped abstractions benefit techniques evolution contracts uml metamodel altered abstraction specialisation evolutioncontract 
additionally extra changes need evolution contract formalism order valid general context 

express gratitude industry partners giving necessary practical feedback 
claudia tom bart maja hondt especially veronica lucas kim mens proofreading providing valuable comments 
anonymous referees careful review suggestions improvements provided 
arnold 
software change impact analysis 
ieee press 
de hondt 
novel approach architectural recovery evolving object oriented systems 
department computer science vrije universiteit brussel belgium phd dissertation 
hondt 
managing evolution changing software requirements 
department computer science vrije universiteit brussel belgium dissertation 
jr delcambre 
change cases cases identify requirements 
proc 
oopsla acm sigplan notices 
acm press 
evans france lano rumpe 
uml formal modelling notation 
selected papers uml international workshop lecture notes computer science 
springer verlag 
gogolla richters 
constraints queries uml 
unified modeling language technical aspects applications physica verlag 
kent mitchell 
reflections object constraint language 
selected papers uml international workshop lecture notes computer science 
springer verlag 
helm holland 
contracts specifying behavioral compositions objectoriented systems 
proc 
oopsla ecoop acm sigplan notices 
acm press 
jacobson griss jonsson 
making reuse business 
ieee computer october 
kent evans rumpe 
uml semantics faq 
ecoop workshop reader lecture notes computer science 
springer verlag 
kiczales lamping 

issues design documentation class libraries 
proc 
oopsla acm sigplan notices 
acm press 
lamping 
typing specialisation interface 
proc 
oopsla acm sigplan notices 
acm press 
lucas 
documenting reuse evolution reuse contracts 
department computer science vrije universiteit brussel belgium phd dissertation 
mens lucas steyaert 
supporting reuse evolution uml models 
selected papers uml international workshop lecture notes computer science 
springer verlag mens 
formal foundation object oriented software evolution 
department computer science vrije universiteit brussel belgium phd dissertation 
mezini 
maintaining consistency class libraries evolution 
proc 
oopsla acm sigplan notices 
acm press 
object management group 

unified modeling language specification version 
omg document ad 
opdyke 
refactoring object oriented frameworks 
university illinois urbana champaign technical report uiuc dcs phd dissertation 

formal approach cases relationships 
selected papers uml international workshop lecture notes computer science 
springer verlag 
richters gogolla 
formalizing uml object constraint language ocl 
proc 
int 
conf 
conceptual modeling springer verlag 
romero 
managing architectural evolution reuse contracts 
department computer science vrije universiteit brussel belgium masters dissertation 
rubin goldberg 
object behaviour analysis 
communications acm special issue object oriented methodologies 
acm press 
steyaert lucas mens hondt 
reuse contracts managing evolution reusable assets 
proc 
oopsla acm sigplan notices 
acm press 
westfechtel 
structure oriented merging revisions software documents 
proc 
rd int 
workshop software configuration management 
acm press 
