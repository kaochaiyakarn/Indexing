universit di pisa dipartimento di informatica technical report tr directed hypergraphs modelling paradigm giorgio gallo maria february addr corso italia pisa italy 
tel 
fax directed hypergraphs modelling paradigm giorgio gallo maria scutell dipartimento di informatica universit di pisa corso italia pisa italy gallo di unipi scut di unipi january address generalization graphs directed hypergraphs show powerful tool modelling solving relevant problems application areas 
application areas include linear production problems flexible manufacturing systems propositional logic relational databases public transportation systems 
graph theory proved powerful conceptual framework analysis modelling solution combinatorial discrete optimization problems arising different areas mathematics operations research computer science engineering 
undirected hypergraphs generalization undirected graphs widened scope applicability graph theory probably proved useful modelling tools algorithmic ones 
problems different application areas featuring underlying graph structure represented graph problems losing peculiar characteristics 
fact led new special types graphs instance called labelled graphs graphs see example 
want address generalization graphs directed hypergraphs include particular cases labelled graphs graphs 
shall show powerful tool modelling solving relevant problems application areas 
application areas include linear production problems flexible manufacturing systems propositional logic relational databases public transportation systems 
plan 
section problems motivated directed hypergraphs 
section main concepts theory directed hypergraphs encompasses structural algorithmic aspects reviewed 
section number interesting applications hypergraph paradigm fully described 
representing relations main motivation directed hypergraphs need applications represent relations standard graphs hardly suited 
fact graph arcs type single nodes needs added structure additional informations represent relations typical examples graphs labelled graphs 
directed hypergraphs arcs type subset nodes naturally represent relations 
cases need represent relations hyperarcs type singleton subset nodes 
shall mention settings directed hypergraphs justified 
short shall call directed hypergraphs simply hypergraphs 
formal languages typical production rule grammar context free language sentence nounphrase 
meaning sentence obtained putting concatenating order noun phrase verb phrase 
hyperarc sentence representation production rule language terms considered nodes hypergraph 
representation grammar set production rules set terms variables constants hypergraph terms nodes production rules hyperarcs 
worth mentioning setting shortest hyperpath algorithm introduced 
clause propositional horn formula form meaning truth propositions implies truth proposition clause represented hyperarc fp context free languages horn formula written hypergraph propositions nodes clauses hyperarcs 
production manufacturing systems simple linear production system set goods produced system coming outside relations connecting produced set goods needed production 
hyperarc may represent fact goods set needed produce different hyperarcs head represent different technologies different inputs may produce type 
linear production systems represented means matrices analysis systems flows areas hypergraphs proven particularly useful modelling algorithmic point view 
similar problems lower scale arise manufacturing 
assembly system items parts assembled order produce product 
assembly operation parts input item final product subcomponents output naturally represented hyperarc 
shall see problem finding assembly plan sequence feasible assembly operations leading desired final product optimal respect criterion modelled solved means hypergraph techniques 
interesting problem arising manufacturing cutting stock problem 
hypergraphs proven useful generating cutting patterns 
shown section generation optimal cutting patterns bears strong resemblance generation optimal assembly plan 
transportation models mass transit systems quite naturally modelled means graphs 
line stops bus stops subway stations 
portions line consecutive stops modelled nodes arcs respectively 
nodes included model represent origins destinations passengers traffic typically nodes centroids zones urban area partitioned arcs connecting nodes ones representing line stops model walks line stops 
model type adequate passenger clearly defined best choice trip destination 
case trip passenger origin bus modelled arc origin node node representing chosen line 
happens practice 
fact lines equivalent travelling cost available reach destination passenger goes bus arrives 
case hyperarc type represent suitable way trip 
relational databases relational database thought table possibly collection tables column attribute row record tuple 
set attributes attribute domain dom set possible values take 
subset fa called relation scheme relation subset cartesian product dom theta dom theta theta dom 
element relation denote projection subspace attributes relation scheme functional dependency fd constraint imposed takes form subset elements 
relation said satisfy functional dependency elements oe relation implication holds true oe oe unique set values attribute take set values taken attributes set functional dependencies relation represented means directed hypergraph 
shall show computations hypergraph may checking database integrity additional conditions determining minimal keys access data 
hypergraphs related concepts basic concepts directed hypergraph simply hypergraph pair ng set nodes set hyperarcs cardinality hyperarc pair nt tail head 
hyperarcs type hyperarcs type admitted 
size standard graph uniquely defined size hypergraph depends cardinality hyperarcs size defined sum cardinalities hyperarcs size jt path st sequence st eq gamma 
st directed cycle 
directed cycle exists said cycle free acyclic 
directed hyperpath simply hyperpath rt root set sink minimal acyclic sub hypergraph containing nodes node node exception nodes exactly entering hyperarc 
definition hyperpath extended follows 
directed hypertree tr rooted acyclic sub hypergraph containing nodes node exception nodes exactly entering hyperarc 
set called root set remaining nodes called non roots 
nonroot contained tail hyperarc tr said leaf hypertree 
definition non root unique directed hyperpath tr undirected hyperpath hypertree permutation hyperpath rt hypertree tr obtained permutation hyperarcs rt permutation hyperarc hyperarc example shows hyperpath top permutations 
set nodes node referred source set sink respectively st cut st partition subsets st cut st cutset st set hyperarcs cardinality st cut cardinality cutset 
connectivity minimum cost hyperpath computation introduce relation connected denoted symbol subset nodes node shall say connected write directed hyperpath exists set node easy check relation satisfies set connectivity axioms 
reflexivity 
augmentation 
transitivity starting set facts making connectivity axioms size time possible find pairs fyg hyperpath permutations connectivity procedure 
easy see connected ry cut cardinality exists 
assume hyperarc assigned real cost 
hyperpath rt cost function mean node function assigns cost node rt depending costs hyperarcs 
cost rt chosen cost function 
additive cost functions node costs satisfy recursive equations fc rt nondecreasing real set function 
particularly interesting cases additive cost functions sections distance dist value 
obtained setting te nonnegative real coefficient 
problem finding minimum cost hyperpaths root set nodes connection exists natural generalization shortest path tree problem standard graphs 
general problem np hard 
fact italiano proved particular problem finding minimum cardinality hyperpaths np hard 
case additive cost functions efficient polynomial time algorithms exist 
case problem equivalent problem finding solution generalized bellman equations bs fe denote backward star minfc fc bs assume non negative assume directed cycle non decreasing directed cycle said nondecreasing real vq gamma gamma denoting restriction fc case nodes cost zero node cost hyperarc additional conditions ensure node cost decreased directed cycle play role non negative cycle condition standard graphs polynomial time algorithms devised solution generalized bellman equations 
precisely algorithms proposed run theta size time general case size time size time fc dijkstra condition 
observe condition holds additive cost functions fc maxfc case considered knuth 
simple case hypergraph acyclic minimum cost hyperpaths rooted computed size time visiting nodes topological order 
case hypergraphs hyperarcs type singleton subset nodes results just reviewed connectivity minimum cost hyperpath computations hold true 
reverse directions hyperarcs obtaining new hypergraph hyperarcs type 
minimum cost assume positive real multiplier associated real demand vector associated flow function 
satisfies conservation constraints gamma te conservation said feasible satisfies capacity constraints upper capacity vector associated capacity minimum cost problem consists finding feasible minimizes function denotes cost associated quite general problem includes bounded linear programming problems 
particular generalizes minimum cost flow problem standard generalized graphs extends uncapacitated minimum cost flow problem hypergraphs studied jeroslow 
maximum problem consists maximizing total amount pushed certain sink node source node formulated similar way 
denote theta incidence matrix minimum cost problem equivalently stated matrix formulation min af denotes dual variable potential associated node dual variable associated hyperarc dual problem named potential problem hypergraphs formulated follows max gamma gamma te gamma order solve problem hypergraph simplex algorithm proposed 
algorithm relies characterization basis matrices linear programming formulation terms spanning hypertree 
spanning hypertree undirected hypertree tr 

fh 
spanning hypertree definition property impose kind minimality root set fact hyperarc exists fh span nodes decrease cardinality root set 
examples spanning hypertrees shown little abuse notation hypertree represented means top traversals traversal roots leaves 
note hypergraph nodes jrj je spanning hypertrees cardinalities may vary hypertree hypertree 
minimum cost problem basis ab corresponds pair ex characterized follows tr spanning hypertree sub hypergraph say corresponding columns ab spanning hypertrees ex set external hyperarcs basic hyperarcs spanning hypertree cardinality cardinality root node set correspondence bases pairs ex correspondence 
fact structure corresponds basis particular matrix ar called root matrix size size root node set external hyperarc set non singular 
interesting property ar rows columns ar inverse interpreted terms potentials 
bases minimum cost problem completely characterized terms hypergraph concepts 
basis characterization generalizes standard generalized graphs bases correspond spanning trees empty singleton root node set ar size respectively 
exploiting basis characterization terms spanning hypertrees hypergraph simplex algorithm solves linear systems type ab ab ab theta basis vectors directly hypergraph 
obtained performing labelling procedures basis spanning hypertree properly inverse root matrix hypergraph characterization 
determination leaving hyperarc updating basis hypergraph structure inverse root matrix performed directly hypergraph step 
standard network simplex algorithm computations performed pivot operation direct hypergraph interpretations 
implementation hypergraph simplex algorithm described results large experimentation 
experimentation primal version stateof art lp code cplex version benchmark 
running times hypergraph simplex algorithm cplex function hypergraph parameters 
shows clearly hypergraph simplex algorithm increasingly faster cplex number hyperarcs increases number nodes maximum cardinality tails 
cplex primal running times hypergraph simplex cplex hypergraph applications formal languages context free languages problem context free grammar triple set symbols variables set terminal terms set productions type variable symbol string symbols terminal terms variable symbols 
usually distinguished variable symbol start symbol represents type strings grammar supposed generate 
consider example grammar defined follows nounphrase adjective verb adverb fthe little boy ran nounphrase nounphrase adjective nounphrase nounphrase adjective noun verb adverb adjective adjective little noun boy verb ran adverb 
meaning production sentence obtained putting concatenating order noun phrase verb phrase 
typical problem interest context problem checking string terminal terms sentence legally assigned variable sentence similarly variable generate sentences grammatically correct 
knuth introduced concept superior context free grammar scfg 
scfg productions type variable symbols parentheses commas terminal terms terminal symbol corresponding real superior function 
function constant 
function said superior function monotone nondecreasing variable maxfx example scfg fa cg fa fa superior functions 
problem considered knuth finding variable smallest value assigned language generated grammar 
example functions defined follows maxfx yg zg maxfx yg smallest value assume respectively 
hypergraph formulation scfg suitably represented hypergraph set nodes hyperarc production 
production represented hyperarc fx viewed weighting function associated hyperarc gives value head node known values tail nodes 
constant associated production thought hyperarc 
hypergraph scfg considering sample example get hypergraph 
problem finding smallest value corresponding variable efficiently solved computing minimum cost hyperpath introduced hypergraph dummy node tail node arcs corresponding constants node corresponding variable 
fact definition superior functions non negative additive cost functions satisfy requirement concerning non decreasing directed cycles 
minimum cost hyperpath computation performed algorithms 
called sbt dijkstra authors essentially equivalent generalization dijkstra algorithm proposed knuth 
propositional horn languages problem set atomic propositions true false denote proposition true proposition false 
set clauses form ff tg 
meaning true propositions true 
case true false index qg clause true false true clause false 
disjunction consequence clause conjunction called implicant 
meaning clause true true 
truth evaluation function trueg 
truth evaluation clauses true said satisfiable unsatisfiable 
horn satisfiability problem horn sat defined follows input set propositions set clauses ff tg output satisfiable 
known general satisfiability problem np complete horn sat polynomial fact solved linear time 
unfortunately sat variant requiring maximization number satisfied clauses remains np hard 
hypergraph formulation order represent instance horn sat introduce hypergraph node element ff tg hyperarc clause fp represents consequence implicant clause labelled graphs introduced dowling gallier represent horn sat direct interpretation terms hypergraphs 
easy see satisfiability problem equivalent problem finding directed hyperpath node node check node connected node instance horn sat solved linear time connectivity procedure mentioned starting finds nodes connected directed hyperpath exists 
max horn sat approached hypergraph computations 
hypergraph approach max horn sat hypergraph formulations problem find tight relaxations generate cutting planes 
relational databases database concepts relational database thought table possibly collection tables column attribute 
example taken bala martin section reported 
student id name name login name machine name internet address ma david da croc da croc cs edu ma esparza gr espa vax gr espa vax cs edu bs susan bennet su su cs edu 
ma daniel cloud da da cs edu relational database set attributes database id name name login name machine name internet example 
attribute domain dom set possible values take 
subset called relation scheme relation subset cartesian product dom theta dom theta theta dom 
particular relation set called universal relation 
relation scheme functional dependency fd constraint imposed takes form subset element relation said satisfy functional dependency elements oe relation oe 
oe element denotes projection subspace attributes words unique set values attribute take set values taken attributes continuing example list functional dependencies reasonably imposed relation scheme idg idg name name machine idg name machine idg 
set functional dependencies functional dependency implied logical consequence fd example idg logical consequence closure set fd implied set axioms complete sound determination means iterating application axioms possible derive fd implied 
reflexivity 
augmentation 
transitivity relation scheme set fd defined fd subset said key minimal proper subsets concept key crucial databases keys provide reasonable way access database retrieve informations 
principle keys small cardinality order avoid need checking large portions database access 
unfortunately problem finding minimum cardinality key np hard 
basic concept databases decomposition 
principle database single relation example practical solution general 
reasons may access high frequency small portions database want access operate informations contains 
usually done decompose main relation scheme say smaller relation schemes 
course want lose relevant information implies properties satisfied 

denotes set fd defined fr subset fd fyg decomposition satisfying requirements called dependency preserving decomposition 
interesting problem check decomposition dependency preserving question answered polynomial time shall see 
hypergraph formulation consider relation scheme set functional dependencies defined modelled terms hypergraph fg 
axioms define closure identical connectivity axioms specify relation connected directed hypergraphs isomorphism functional dependencies implied directed hyperpaths straightforward consequence database problems introduced reformulated efficiently solved terms directed hyperpath computations 
example closure membership problem problem checking fd closure solved linear time means hypergraph visit starting visit finds nodes connected connected belongs closure visit algorithm find decomposition fr dependency preserving 
consider sub hypergraph containing hyperarcs correspondent dependencies completely contained schemes 
dependency set fyg split different schemes check directed hyperpath connectivity procedure 
problem additional conditions solved making hyperpath computations problem finding key 
consider hypergraph previously defined extended dummy node say ffi hyperarc ffi node assign cost dummy hyperarcs ffi cost original hyperarcs possible prove cycle free set minimum cost hyperpaths outgoing dummy node ffi computed set attributes corresponding nodes hyperarc ffi belongs computed minimum cost hyperpath key 
furthermore key unique 
application decision support systems described directed hypergraphs called 
production manufacturing systems linear production systems problem linear production system describes economic system goods consumed inputs produced outputs system activities 
system said simple activity produces exactly output 
generally goods classified follows primary goods goods plant equipment labor referred factors production outputs activities system intermediate goods goods produced system activities target goods goods required consumers 
consider instance simple linear production system describes production cars 
system primary goods steel labor required produce engines steel labor glass plastic components provided inputs body cars engines bodies tires properly assembled allow produce cars 
hypergraph formulation introducing node activity simple linear production system represented means hyperarc linking inputs output 
entire economic system described directed hypergraph shown example concerning production cars 
steel bodies glass engines cars tires plastic comp 
labor hypergraph car production cost capacity associated system activity representing production cost unitary level maximum amount output produced respectively problem producing amounts target goods minimum cost modelled terms minimum cost problem linear production hypergraph 
model different hyperarcs having head model activities alternative technologies producing 
similarly problem finding maximum amount target produced system formulated maximum problem linear production hypergraph 
capacity constraints imposed production activities called efficiency prices relative economic system see instance simply solving uncapacitated minimum cost problem 
problem uncapacitated equivalent solving minimum cost hyperpath problem value cost function 
assembly problems problem robotic assembly systems items produced assembling parts input properly defined assembly plan order satisfy criterion 
formally set input distinct parts 
assembly item obtained properly connecting parts means feasible assembly operations feasible assembly operation operation construct item items pi denote set assemblies obtained parts means sequences feasible assembly operations omega corresponding set feasible assembly operations 
item pi assembly plan relative mean minimal set feasible assembly operations starting parts leads production minimal mean proper subsets assembly plan 
optimal assembly plan problem pi omega oe problem finding assembly plan relative satisfies criterion oe usually written function minimized 
hypergraph formulation assembly plans formulated terms hypergraphs 
fact associate node assembly pi hyperarc feasible assembly operation having tail head correspondence set feasible assembly plans relative set hyperpaths obtained assembly hypergraph pi omega gamma optimal assembly plan problems formulated solved terms computations acyclic construction 
case assume feasible assembly operation assigned real cost total production cost assembly plan sum costs operations performed operation performed times contribution total cost times cost 
hypergraph interpretation just introduced follows easily assembly plan minimizes production cost computed finding minimum value hyperpath node set coefficients set equal see equations section 
acyclic problem solved linear time results reviewed 
second interesting case assume feasible assembly operation associated real value representing probability execution produces defective item 
denote probability fault assembly easy show operation may introduce fault probability gamma gamma gamma 
interpreting 
cost associated assembly plan minimizes fault probability relative computed finding minimum cost hyperpath nodes node respect additive cost function function defined follows gamma gamma 
problem solved linear time 
interesting difficult case minimum makespan problem 
assume feasible assembly operation omega assigned integer duration identical machines robots available perform operations 
minimum makespan assembly plan problem mmap consists finding assembly plan relative minimizes time makespan needed produce unit available machines 
particular easy cases operations performed sequence number parallel operations performed 
case special case minimum production cost problem introduced solved linear time finding minimum value hyperpath node set optimal assembly plan corresponding assembly operations scheduled order machine provided precedence constraints imposed plan satisfied 
shown extreme case reduces problem finding minimum distance hyperpath nodes see equations section 
problem solved linear time 
case scheduling operations optimal assembly plan obtained simple rule assign available machine available operation operations ordered going lower levels optimal hyperpath general case np hard 
fact particular case problem scheduling jobs identical machines satisfying tree precedence relation minimum makespan objective function 
case instances feasible assembly plan 
case single assembly plan heuristics described approximates optimum makespan relative error bounded gamma heuristics extended case feasible assembly plans 
proved assembly plans relative total duration sum durations operations assembly plan bound gamma holds 
special case polynomial time algorithm exists described 
cutting stock problems problem unlimited number pieces stock characterized different stock lengths assume want cut pieces stock pieces length pieces length 
pieces length input data assumed integer 
dimensional cutting stock problem csp consists cutting pieces stock way length requirements satisfied residual length minimized alternative formulations total number pieces stock minimized 
main approaches generally followed solution csp heuristics linear programming relaxations 
lp approximation algorithms solve linear programming relaxation csp model search integer solution means sophisticated strategy usually simply rounding 
extensive computational experiments reveal gap optimal integer value linear programming bound usually small 
efficient approaches solve linear programming relaxations csp useful practice 
classical approach formulate linear programming relaxation csp definition cutting patterns 
cutting pattern simply pattern integer vector denoting piece stock cut way obtain exactly pieces length elementary pattern pattern having position denote th elementary pattern having 
cutting pattern said feasible equal stock length producing leftover gamma linear programming relaxation csp consists choosing feasible patterns way satisfy stock requirements minimize leftover accepting fractions patterns 
hypergraph formulation instance csp modelled means hypergraph defined follows 
set nodes correspondence feasible patterns define hyperarc set assume order relation holds required lengths 
feasible pattern maximum respect ordering non zero component uniquely defined recursive rule gamma th elementary pattern 
applying rule pattern viewed result successive composition elementary patterns 
accordingly introduce hyperarc feasible pattern node corresponding head nodes corresponding patterns tail nodes 
particular case gamma 
gamma coincides case hyperarc node corresponding tail node multiplier equal associated hyperarc denoting elementary pattern need multiple hyperarcs 
construction layered hypergraph acyclic 
csp formulated terms minimum cost extended hyperarc node model flow hyperarc represent times feasible pattern corresponding satisfy length requirements 
order obtain interpretation associate multiplier equal node hyperarc exception multiple hyperarcs having multiplier recall model feasible patterns elementary patterns 
addition associate demands nodes follows node corresponding th elementary pattern th length demand gammab node 
integer constraints imposed variables feasible uniquely identifies feasible way cut pieces stock order satisfy length requirements cutting stock solution associated hyperarcs hyperarc gives number times pattern corresponding example provided instance unique stock length ordered list required lengths stock requirement vector want pieces length pieces length 
demands numbers brackets 
corresponds patterns 
csp node corresponding pattern associate cost kg gamma hyperarc outgoing order represent minimal residual length obtained pattern 
remaining hyperarcs zero cost 
example sample instance hyperarcs cost respectively hyperarcs zero cost 
easy see uncapacitated integer minimum cost problem models csp 
fact integer feasible cutting strategy minimizes residual length cut pieces stock looked 
relaxing integrality constraints resulting linear minimum cost problem models linear programming relaxation csp 
public transportation models problem transit system modelled special network sets nodes sets arcs nodes representing centroids zones area partitioned nodes corresponding location bus stops nodes corresponding line stops cs arcs connecting direction centroids stops sl arcs connecting direction nodes nodes ll arcs representing line segments consecutive line stops 
bus denote set lines node representing location ij node corresponding line consider passenger waiting wants minimize expected travel time certain destination practice actual travel time known advance rough estimate may happen single preferable line set lines say traveller point view sense willing board carrier lines arriving set lines called attraction set passengers travelling generally possible attraction sets exist depending destination destination lines frequencies buses speed 
typical problem arising transportation planning traffic assignment problem problem determining passengers flow lines assumption passenger tries minimize expected travel time 
needed compute minimum expected travel time origin destination pair 
interesting harder problem capacitated case 
assume arcs capacities limited number travellers pass 
example consider bus line rush hour passenger willing board bus may obliged wait bus capacity saturated 
hypergraph formulation standard graphs sufficiently powerful means model passenger behaviour solve traffic assignment problem 
fact requirement pair possible attraction set entire set lines considered captured means standard graph notations 
directed hyperarcs type fv ij appropriately added transit network represent attraction sets 
hyperarcs called boarding hyperarcs 
example provided portion city map suitably modelled means boarding hyperarcs 
example bus stops lines 
hypergraph represents set possible routes passenger going take 
arcs represent walking portions trip 
consider notation denotes subset lines stopping frequency line probability bus serving line arrive buses serving line transit hypergraph expected travel time destination line including waiting time average waiting time traveller travel lines expected travel time passenger considering attraction set reasonable hypotheses distribution passenger bus arrivals stops far travel times concerned composed walking times vehicle travel times waiting times associated transfers line 
times associated arcs transit network lengths vehicle arcs ll corresponding buses travel times lengths walking arcs cs walking times lengths leaving arcs sl set 
hand waiting times associated boarding hyperarcs 
principle traffic assignment problem solved 
building hypergraph representing transit network 
changing directions arcs obtaining new hypergraph hyperarcs type attraction set travellers embarking 
solving minimum cost hyperpath computation node destination trip 
main problem approach huge number distinct attraction sets 
shown nguyen pallottino attraction sets considered implicit way low polynomial computational cost 
fact proved origin destination pair optimal attractive set obtained simple greedy procedure 
tackle capacitated case marcotte nguyen introduced concept travel strategy 
idea node trip traveller faces certain number alternatives arcs node forward star 
traveller tries corresponding minimum cost path destination arc available due capacity limitation tries corresponding second minimum cost path available arc 
arcs attached weight probability finding arc available depends total number travellers wanting arc situation represented hyperarcs set alternatives faced traveller passing node modelled hyperarc type 
notation travel strategy hyperpath average cost hyperpath travel strategy oe destination node oe oe unique hyperarc exiting hyperpath oe probability traveller passing node leaving node transit time associated arc 
concept hyperpath possible derive equilibrium conditions type uncapacitated traffic assignment models 
fact known wardrop equilibrium conditions restated capacitated case follows traffic flow equilibrium flow origin destination expected travel time hyperpaths common value higher expected travel time unused hyperpath 
bala martin 
mathematical programming approach data base normalization 
technical report graduate school business university chicago 
basu 
tool modeling decision support systems 
management science 
berge 
graphs hypergraphs 
north holland amsterdam 
berge 
minimax theorems normal hypergraphs balanced hypergraphs survey 
annals discrete mathematics 
berge 
hypergraphs combinatorics finite sets 
north holland amsterdam 
boley 
directed recursive label node hypergraphs new representation language 
artificial intelligence 
cook 
complexity theorem proving procedures 
proc 
th acm symp 
theory computing pages 
dowling gallier 
linear time algorithms testing satisfiability propositional horn formulae 
logic programming 
dyckhoff 
typology cutting packing problems 
european oper 
res 

formal aspects relational model 
information systems 
gale 
theory linear economic models 
mcgraw hill new york ny 
gallo gentile 
max horn sat minimum cut problem directed hypergraphs 
math 
programming 
gallo scutell hypergraph simplex approach experimental results 
ricerca anno 
gallo longo nguyen pallottino 
directed hypergraphs applications 
discrete appl 
math 
gallo pallottino 
hypergraph models algorithms assembly problem 
technical report tr dipartimento di informatica universit di pisa pisa italy 
gallo scutell minimum makespan assembly plans 
technical report tr submitted operations research dipartimento di informatica universit di pisa pisa italy 
gallo 
algorithms testing satisfiability propositional formulae 
logic programming 
scutell cutting stock problem new model hypergraph flows 
ricerca anno 
garey johnson 
computers intractability guide theory npcompleteness 
freeman san francisco ca 
montanari martelli 
dynamic programming graph searching algebraic approach 
assoc 
comput 
mach 
henderson 
microeconomic theory mathematical approach 
mcgrawhill new york ny 
hopcroft ullman 
formal languages relation automata 
addisonwesley 
itai 
complexity herbrand theorem 
technical report dept comp 
sci israel inst 
technology israel 
italiano 
line maintenance minimal directed hypergraphs 
proc 
italiano di informatica pages 
world science press 
jaumard 
complexity maximum satisfiability problem horn formulas 
inform 
process 
lett 
jeroslow martin wang 
substitution flow problems 
math 
programming 
knuth 
generalization dijkstra algorithm 
inform 
process 
lett 
levi sirovich 
generalized graphs 
artificial intelligence 
lucchesi osborn 
candidate keys relations 
comput 
system sci 
maier 
minimum covers relational data base model 
assoc 
comput 
mach 
marcotte nguyen 
hyperpath formulations traffic assignment problems 
marcotte nguyen editors equilibrium advanced transportation modelling pages 
kluwer academic ma 
martelli montanari 
additive graphs 
proceedings ijcai 
de mello sanderson 
graph representation assembly plans 
ieee transactions robotics automation 
nguyen pallottino 
equilibrium traffic assignment large scale transit network 
european oper 
res 
nguyen pallottino 
hyperpaths shortest hyperpaths 
editor combinatorial optimization volume lecture notes mathematics pages 
springer verlag berlin 
nilsson 
problem solving methods artificial intelligence 
mcgraw hill new york ny 
nilsson 
principles artificial intelligence 
morgan kaufmann los altos ca 
gallo scutell flows hypergraphs 
math 
programming 

gap optimal values integer continuous relaxation dimensional cutting stock problem 
oper 
res 
proc 
springerverlag berlin 

modified integer round property dimensional cutting stock problem 
european oper 
res 

theoretical investigations modified integer round property dimensional cutting stock problem 
oper 
res 
lett 

mathematical economics 
cambridge university press 
ullman 
principles database systems 
computer science press rockville md 

