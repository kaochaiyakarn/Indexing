experience emerald date peter neumann phillip porras computer science laboratory sri international menlo park ca neumann csl sri com porras csl sri com st usenix workshop intrusion detection network monitoring santa clara california april summarizing emerald architecture evolutionary process emerald evolved focuses experience date designing implementing applying emerald various types anomalies misuse 
discussion addresses fundamental importance software engineering practice importance system architecture attaining detectability interoperability general applicability evolvability 
considers importance correlation distributed hierarchical instances emerald needs additional detection analysis components 

emerald event monitoring enabling responses anomalous live disturbances environment anomaly misuse detection subsequent analysis behavior systems networks 
emerald developed darpa ito contract number applied darpa iso contract number 
emerald goals real time detection analysis response broad range threats just security 
anomaly detection involves recognition deviations expected normal behavior misuse detection involves detection various types misuse 
term intrusion detection encompass unfortunately suggests detection intrusions broader scope emerald 

emerald emerald targets external internal threat agents attempt misuse system network resources 
advanced highly environment combines statistical analysis components resolver interprets analysis results iteratively hierarchically 
modules designed independently useful dynamically deployable easily configurable reusable broadly interoperable 
design scales large enterprises 
objectives include achieving innovative analytic abilities rapid integration current network environments greater flexibility surveillance network configurations change 
emerald employs building block architectural strategy independently tunable distributed surveillance monitors detect respond malicious activity local targets interoperate form analysis hierarchy 
basic architectural structure shown 
shows main types existing analysis units profiler engines signature engines resolver surrounding target specific resource objects 
shows possible integration modules including inputs derived sources outputs sent analysis platforms administrators emergency response centers 
architecture explained text 
key aspect approach emerald monitors 
emerald monitor dynamically deployed administrative domain provide localized real time analysis infrastructure routers gateways ser rd party security analysis engine module library configuration pluggable target specific resource object resolver countermeasure unit rd party security module event logger results dissemination correlation external results rd party security module results processor profiler statistical unit signature signature inference unit monitor api monitor api monitor boundary engines engines monitor api event reporting target specific event stream event reporting monitor api event reporting monitor api monitor api api monitor generic emerald monitor architecture vice privileged subsystems network interfaces 
emerald monitor may interact environment passively reading activity logs network packets actively probing supplements normal event gathering 
monitors produce analytical results able disseminate results asynchronously client monitors 
client monitors may operate domain layer correlating results service layer monitors enterprise layer correlating results produced domains 
emerald framework layered analysis hierarchy may formed support recognition global threats interdomain connectivity including coordinated attempts destroy connectivity enterprise 
equally important emerald require adoption analysis hierarchy 
monitors stand self contained analysis modules defined interface sharing receiving event data analytical results third party security services 
emerald monitor capable performing signature analysis statistical profile anomaly detection target event stream 
addition monitor includes instance emerald resolver countermeasure decision engine capable fusing alerts associated analysis engines invoking response handlers counter malicious activity 
statistical subsystem tracks subject activity types statistical variables called measures categorical discrete types continuous numerical quantities traffic intensity volume time event distribution meta measure measures 
emerald signature analysis subsystem employs variant best production expert system tool expert system allows administrators instantiate rule set customized detect known problem activity occurring analysis target 
results statistical signature engines forwarded monitor resolver acts coordinator monitor external reporting system implementor monitor response policy 
fundamental emerald design abstraction analysis semantics monitor code base 
emerald monitor architecture analysis target specific information contained resource object specifying items pluggable configuration library 
resource ob ject encapsulates analysis semantics necessary instantiate single service monitor distributed appropriate observation point network 
resource object elements customize monitor analysis target containing data methods event collection methods analytical module parameters valid response methods response policy subscription list external modules monitor exchanges alarm information 
enables spectrum configurations lightweight distributed monitors heavy duty centralized analysis platforms 
environment service monitors may independently distributed analyze activity multiple network services ftp smtp network element router firewall 
resource objects developed analysis target 
emerald monitor deployed target instantiated appropriate resource object ftp resource object ftp monitoring bsm resource object bsm solaris kernel analysis 
monitor code base analysis target independent 
emerald monitors target thing modified content resource object 
see porras discussion analysis ftp currently exists sunos freebsd linux bsm solaris 
particular gives specific examples rules failed authentication buffer overflows syn flooding attacks 
resource objects lend key project objectives reusability fast integration new environments 
project developing library populated resource objects built analyze various service network elements 
emerald monitor code base touch 
download appropriate resource objects associated analysis targets modify desired instantiate monitors downloaded resource objects 
project working new techniques alarm correlation management analytic services 
concept composable surveillance allow emerald aggregate analyses independent monitors effort isolate commonalities trends alarm sequences may indicate global threat 
aggregate analyses classified general categories commonality detection reinforcement alarm interrelationships sequential trends 
briefly commonality detection involves search common alarm indicators produced independent event analyses 
cases results monitor analyses may occur threshold warrants individual response combination results monitors may warrant global response 
approach address low rate distributed attacks cooperative attacks widespread contamination effects 
analysis refers efforts independently analyze target multiple perspectives analysis web server audit logs conjunction web network traffic alarm refer emerald ability monitor model interrelationship cause effect occurrence alarms independent analysis targets 
example alarm regarding activity observed host domain may give rise warning indicator different threat second host domain 
sequential trends alarms seek detect patterns alarms raised domains 
patterns aggressive activity may warrant global response counteract achieved local service monitor 
emerald project represents effort combine research distributed high volume event correlation decade intrusion detection research engineering experience 
represents comprehensive attempt develop architecture inherits developed analytical techniques detecting intrusions casts framework highly reusable interoperable scalable large network infrastructures 
inherent generality flexibility terms monitored analytical tools customized task suggest emerald readily extended monitoring forms malicious problem activities variety closed networked environments 

experience gained section summarizes experience emerald development far 
earlier experience emerald drawn earlier experience developing ides intrusion detection expert system successor nides ides 
particularly people aware earlier summarize 
ffl ides attained considerable flexibility runtime efficiency adapted emerald pluggable analysis engine framework self sufficient component 
approach proved useful rules relatively easy write 
best adapted alan previous incarnation midas 
ides gave second generation statistical algorithms begun earlier project 
ffl nides development observations influenced emerald effort 
available audit data unix bsm naturally suited analytical purposes different sources data desirable 
greater abstraction useful 
experiment higherlevel audit data database management systems relatively closed environments attempting detect misuse fruitful security policies dbmss generally permitted closer acceptable behavior 
recognized nides statistical detection system configured scale distributed networked environments reasons 
measures needed treated entirety desirable lightweight instances 
second results form recursively higher layer instance 
recognized importance administrator interface observed complexities unavoidable flexibility detection response required 
initially spent effort developing gui tools decided rely newly developed generic tools 
retrospect believe progressed faster emphasis software engineering house applications 
ffl nides safeguard effort observed profiling functionality proved effective profiling individual users 
approach resulted far fewer profiles tended stable 
resulting false positive false negative rates reduced considerably 
concluded statistical analyses effective dealing systems subsystems servers routers 
consequence emerald subsequently broadened statistics algorithms improve handling network protocols having master profile client usage single service compared 
example anonymous ftp sessions simultaneously profiled master profile anonymous sessions 
observations significant impact emerald architecture implementation particularly moving distributed networked target environment 
emerald experience underlying generic analysis engine infrastructure uniformly wraps signature analysis statistical engine resolver engines wish integrate 
infrastructure provides common emerald api event queue management error reporting services secondary storage management primarily statistical component internal configuration control 
statistical best components integrated libraries 
infrastructure assembled emerald statistics component proved generality attempt integrate best emerald expert system expert 
integration best inference engines required linkage code bind underlying emerald libraries automatically generated part compilation process 
years developing emerald experience far summarized follows 
ffl generality approach 
attempted solve difficult problems generally typically avoided optimizing approach domain specific assumptions 
particular decoupling generic concepts simplifies reusability components extensibility enhances integration data sources analysis engines response capabilities 
hierarchically iterative nature permits analyses broader scope networks distributed systems 
advantages approach may evident emerald widely extended new application areas firmly believe ap proach instructive groups perspective research development potential major longterm advantages 
platform specific optimizations course possible deemed necessary 
ffl software engineering 
believe strong emphasis software engineering practice emerald substantial payoffs particularly enabling rapidly incorporate different analytic engines generic framework 
modularization integration best expert system component discussed 
emphasis clearly improves general evolvability system significant benefits respect interoperability emerald independently developed analysis engines analysis data arbitrary sources terms distribution analysis results 
emphasis helps facilitate iterative emerald analytic engines making layered instances system symmetric 
benefits remain demonstrated explicitly extensive documented experiments expectations high 
fuller justification extent software engineering approach paying requires detailed description architecture scope workshop description high priority list 
ffl scope applicability 
believe attention software engineering simplifies broadening emerald domains applicability example detecting analyzing responding potential threats survivability reliability fault tolerance network management stability 
intrinsic emerald architecture implementation limit applicability 
application requirements security basically matter writing modifying relevant resource objects configuring system appropriately expected require major changes existing analysis infrastructure 
ffl relative merits various paradigms 
surprise community signature analysis detecting identifying welldefined known scenarios limited detecting hitherto unknown attacks happen trigger existing rules 
hand statistical profile analysis effective detecting unknown attacks providing early warnings strangely deviant behaviors statistical approach naturally contribute automated identification diagnosis nature attack type deviation identified 
inferences drawn nature anomaly statistical measures triggered reasoning typically necessary identify nature anomaly example attack progress serious threat system survivability 
precisely aimed detecting potentially unforeseen threats specific scenarios easily detected signature analyses statistical component expected turn false positives 
emerald framework necessarily problem 
believe effective resolver discard statistical anomalies deems try reduce false positives statistical component requires greater knowledge potential threats avoided 
furthermore new attacks threats identified desirable add new rules expert system rule base 
believe type analysis expert system statistical component resolver additional analysis engines areas greatest effectiveness paradigm cover types threats 
endorse approach 
inference reasoning engines bayesian analysis paradigms may applicable detection identification resolution nature anomalies attacks 
ffl local hierarchical distributed correlation 
far reaching observations relates importance able correlate local results different target platforms different layers abstraction correlate results relating different aspects system behavior 
inherent layered iterative nature emerald architecture significant respect analytic component different layers abstraction 
just conduct experiments demonstrate power approach 
doing extending existing emerald resolver interpret results different analytic engines recommend responses appropriate specific layer abstraction 
analytic engines may required various layers abstraction reasoning tools 
ffl importance research prototype development experimentation 
emerald continues explore advanced concepts ides nides 
necessary analysis infrastructure place advances required emerald relating inference necessary enhance correlation analysis response coordinated attacks interdependent anomalies distributed environments generalizations applicability security 
ongoing efforts 
ffl interoperability 
common intrusion detection format cidf ongoing ietf standardization effort important 
expected increase interoperability different analysis response systems 
emerald line efforts compatibility expected problem 
cidf interface definitions architectural decomposition aligned closely emerald monitor design 
particular emerald event generation components equivalent function cidf boxes emerald statistical signature analysis engines equivalent function cidf boxes emerald resolver equivalent function cidf box 
hierarchical composition emerald service layer monitor capable passing alerts domain monitor 
service layer monitor operate cidf box domain monitor operate cidf box 
cidf working documents available online csl ucdavis edu cidf 
emerald expert system respect specifically integration emerald experience strongly reinforced conceptual framework 
ffl software engineering quality emerald monitor architecture put test summer visitor previously unfamiliar system joined integrate signature analysis engine generic monitor framework 
statistical anomaly detection engine developed concert emerald api nides signature engine additional component api 
revision integration procedure went rapidly man week minor problems discovered solved due constraints expert system tool emerald api 
supports claim emerald api suited integration various kinds third party modules monitor architecture 
exciting important development effort 
ffl data driven nature emerald monitors message passing central function api 
programmer provided set data types including set methods handle messages fields messages 
example powerful feature emerald message format possibility defining message field array message fields 
allows programmer effectively encapsulate emerald message inside 
signature analysis engine capability include original event record alert message sent resolver addition information provided triggered rules 
allows hierarchy analysis units including resolvers able pass information produced earlier 
ffl generality api respect data types reflected ease able write code generation utility interface code connects expert system monitor 
utility redirecting signature analysis engine completely new event stream information resource object fit engine analysis target 
purpose utility relieve creator resource object inner workings monitor 
api design easy isolate target dependent code machine generated 

progress date developing emerald promising 
considerable effort needed demonstrate effectiveness software engineering approach power analytic capabilities 
ffl software engineering practice emerald modular design attention devoted defined interfaces information hiding sense david parnas proven valuable emerald development far valuable ability interoperate components developed long term evolvability subsequent generalizations emerald security applications address human safety enterprise survivability reliability real time performance critical attributes 
ffl hierarchical distributed correlation necessary analyzing highly distributed environments inability recognize global patterns isolated local events 
additional analysis techniques required 
ffl iterative nature emerald instantiations enable lightweight detection components specialize particular areas concern different event spaces different layers abstraction 
general noted attempt put emerald experience perspective 
ffl commercial intrusion detection systems concentrated string matching forms signature identification detect classes outsider attacks 
date primarily easy parts problem addressed commercial community 
ffl research advances community large slowed increased emphasis detecting known types outsider attacks 
detecting identifying responding hitherto unknown attacks anomalies remain challenging problems including highly coordinated attacks subtle forms misuse insiders anomalous network behavior resulting malfunctions outages 
providing global local analysis important research area relatively 
generalizations known security attacks challenging 
information see www csl sri com intrusion html background online versions papers reports 
see web pages porras neumann www csl sri com users porras www csl sri com users neumann 
acknowledgments indebted martin fong ulf keith skinner valdes contributed significantly emerald development 
grateful people development ides nides influenced emerald including quite notably teresa lunt 
charles helpful suggestions served official workshop shepherd 
anderson valdes 
intrusion detection expert system nides 
technical report computer science laboratory sri international menlo park california sri csl may 
anderson lunt javitz valdes 
safeguard final report detecting unusual program behavior nides statistical component 
technical report computer science laboratory sri international menlo park california december 
jagannathan lunt anderson dodd javitz neumann valdes 
system design document generation expert system nides 
technical report computer science laboratory sri international menlo park california march 
javitz valdes 
nides statistical component description justification 
technical report computer science laboratory sri international menlo park california march 
javitz valdes denning neumann 
analytical techniques development statistical intrusion detection system sids accounting records 
technical report sri international menlo park california july 
porras 
detecting computer network misuse production expert system toolset proceedings symposium security privacy oakland california may 
ieee computer society 
lunt jagannathan neumann javitz valdes 
real time expert system ides 
technical report computer science laboratory sri international menlo park california february 
porras neumann 
emerald event monitoring enabling responses anomalous live disturbances 
proceedings nineteenth national computer security conference pages baltimore maryland october 
nist ncsc 
porras valdes 
live traffic analysis tcp ip gateways 
proceedings symposium network distributed system security 
internet society march 
hanna 
expert system intrusion detection case study 
eleventh national computer security conference baltimore maryland october 
