new challenges configuration management magnus larsson abb industrial products ab lab ster sweden magnus larsson se university department computer engineering ster sweden se 
systems developed components 
move monolithic open flexible systems 
systems components upgraded introduced run time affects configuration complete system 
keeping date information components installed problem 
updating component affects compatibility system 
important keep track changes introduced system 
product life cycle cm traditionally focused development phase particular managing source code 
changes introduced systems run time systems component new discipline component configuration management required 
analyses component management highlights problems related component configuration 
requirements component configuration management outlined directions possible solutions problems 
years recognized new paradigm development process complete house development development process focused standard de facto standard components outsourcing cots commercials shelf 
final products closed monolithic systems component products integrated products available market 
developers designers programmers integrators marketing investigators 
new paradigm increases efficiency development flexibility delivered products time increases risk losing product configuration consistency 
higher risk reduces product reliability critical factor certain types systems real time safety critical systems 
configuration management cm discipline controls consistency parts entire system increase reliability component products 
definitions components chapter 
software systems standard components results combination pure development integration components 
requirements conventional cm remains new requirements related component management appear phases design integration run time 
expect source code management critical internal development fact source code management cm established theory implementation 
integration part configuration version management components important 
new aspects cm arise run time phase components usually loosely coupled update allowed run time environment 
importance cm challenges research implementation cm support emphasized cbse component software engineering workshop quoted particular high product line setting amounts mass customization introduces tremendous configuration management challenges support challenges 
cm provides support development phase especially coding phase lack cm disciplines managing components developed 
points certain new aspects cm managing components 
chapter shows different phases component development processes run time environments relations cm activities 
different compatibility levels components discussed chapter 
chapter gives overview component characteristics related cm issues 
problems appear due lack proper cm support 
chapter outlines certain models improving support improving reliability products 
cm component product life cycles configuration management applied different phases component product life cycle 
fig 
shows example development run time process 
development phase build libraries source code 
component built assembling libraries collecting types items documentation executable files 
typical component product consists set components 
source code dynamic libraries components products development version management run time foo dll bar dll build configuration foo dll bar dll common dll foobar ui foobar ui comp product exe configuration packaging line configuration product exe prod exe fig 

cm activities different phases component product life cycle development phase source code management track different versions source code enable parallel development cm tools supporting available today 
building phase supported cm tools different variants configuration tools results building procedures connected source code 
step closer cm components description logic describe configurations combination build product 
solve runtime issues 
having control source code producing system entirely source code possible control target system configuration 
imported components lose control partially know behavior 
possible manage versions configurations place components version control deliver part product 
delivering components products part target system face problems predict behavior entire environment target system 
system may contain product uses component product 
relations components changes may obtain introducing new version component uncertain 
serious problem dynamic behavior system configuration run time environment 
permit component updating run time updating dynamic libraries facing situation new component version works product 
different aspects updating moving copying application computer automatically generation code 
cm provide solutions problems new challenges cm 
cope problem research practical implementations focus component management 
chapters describe mechanisms component management point problems related identification 
outline possible solutions improvement component version configuration management 
component compatibility different definitions software components component nontrivial nearly independent replaceable part system fulfills clear function 
component conforms provides physical realization set interfaces 
run time software component dynamically package programs managed unit accessed documented interfaces discovered run time 
component deployed independently subject composition third party 
importance components significant technologies development integration standardized 
prominent component technologies today java beans com dcom activex corba 
illustrate component management problems com dcom technology principles valid technologies 
new component version added introduce new functions system change behavior better performance better stability changing interface 
replacing component component version consider type change permitted type compatibility required 
define levels compatibility input output compatibility 
component requires input specific format produces results defined format 
internal characteristics component interest 
example type compatibility provided different word processors producing document format 
type compatibility ensure interfaces behavior preserved 
interface compatibility development time run time 
interface remains implementation different 
typical example different implementations activex objects interface 
interface compatibility demanding input output compatibility need behavior 
behavior compatibility 
internal characteristics components performance resource requirements preserved 
requirements appropriate real time systems 
strongest compatibility requirement includes previous ones 
compatibility criteria deciding component replaced 
decision especially important case replacement fly run time environment 
important maintain required level compatibility avoid risk interrupting system 
managing components components typically consist shared libraries component functions implemented 
programs components refer libraries directly component interfaces 
libraries implementations interfaces 
need keep track changes logical physical levels relations 
libraries interfaces identified 
component configuration management levels 
versioning interfaces difficult task interface abstraction information physical representation 
reason separate problem managing components levels managing libraries managing interfaces 
libraries historically problems area libraries statically linked executables 
prevented executable updated new version library released 
advantage approach executables protected uncontrolled new version library 
disadvantage necessity re link executable incorporate new version library unnecessary library 
disadvantage executables shared library linked copies library 
concept shared libraries introduced avoid 
significant improvement share libraries updates re linking executables functions interface compatible 
microsoft platforms shared libraries designated dynamic link libraries dlls loaded unloaded needed 
platforms different unix platforms shared libraries loaded main executable 
unfortunately concept shared libraries introduces new problems related consistency system illustrated fig 

foo exe bar exe common dll version foo exe bar exe common dll version old version version common dll common dll version bar exe fig 

foo exe stops new incompatible version common dll introduced 
shows new version damage system 
common dll version overwritten version new version bar exe introduced 
replacement successful version common dll version definitely compatibility level 
risk foo exe working new version common dll introduced 
new interface compatible version common dll may contain undetected errors tested bar exe foo exe 
foo exe may access erroneous code crash library interface compatible 
way handle multiple versions libraries insert version information actual library name microsoft mfc 
example names mfc dll mfc dll version 
prevents name collisions problems developed fig 

different names different version situation may fig 

fig 

common dll coexist common dll solution extent similar static linking executables executable uses version shared library 
solution cumbersome versions variants installed system 
example mfc dll mfc dll mfc ud dll respectively debug unicode debug unicode versions mfc library 
tight coupling emerges design compilation model intended support independent binary components 
way circumvent problems upgrade executables dependent particular library new release ready 
means foo exe bar exe updated bar exe fig 

approach taken assumption complete control deployment exists perspective limited 
suitable support achieved help cm functions keeps track changes checking changes permitted executable component 
interfaces interface connection component user 
interface changed user needs know changed new version 
functions exposed user usually designated application programmable interfaces api 
change api user recompile code 
case compiled languages interpretative languages smalltalk java 
object oriented world interface set public methods defined object 
usually object manipulated interface 
user need recompile code interface referred code changed 
disadvantage user object programming language development 
separation interface implementation means avoiding tight coupling 
kind separation performed binary interfaces corba com 
binary interfaces defined interface definition language idl idl compiler generates stubs proxies applications location transparent 
com solves interface versioning problem defining interfaces units 
time new version interface created new interface added changing older version 
basic com rule interface changed released 
couplings com components loose easy upgrade parts system indifferent 
fig 
shows possible run new clients old server components vice versa 
word processor version word processor version dictionary version dictionary version fig 

possible combinations old new clients server component 
interface changed implementation changed 
increases flexibility possible updates introduces possibility resultant uncontrolled effects 
reason interest know implementation changed 
today support handling components configuration management perspective 
cm functions provide information changes interface level 
proposed cm libraries components insufficient information available system assembled components 
standard way track dependencies components 
system upgraded new program programs running affected notice new program may introduce new versions existing components system see fig 

necessary determine interfaces components program component 
component placed set shared libraries control may obtained keeping libraries control 
propose component configuration management levels library level component level 
cm libraries shared libraries linked library program seen 
list dependencies different programs libraries 
installing new program containing libraries steps shall taken 
take snapshot current system configuration 

install new modules 

take snapshot new system configuration 
contents snapshot programs libraries installed system treated nodes graph 
number different attributes associated library 
information node graph uniquely identifies module 
propose date time size name shall stored 
attributes compatibility change allowed warning particular module updated 
snapshot system dependency graph 
fig 
shows example com libraries depends libraries 
kernel fig 

dependency graph dll 
ole user gdi different versions snapshots placed version control treated configuration items 
tool browse information differences graphically user 
user gain understanding effects new updated libraries system 
alarm activated library affected changed 
configuration tool browse different configurations label components changeable 
ole user user kernel component changed component changed fig 

dependency graph shows changed versions 
kind knowledge useful cause malfunction system traced 
incorrect version library may installed mistake 
kind identification gives direct information components changed affected change indirect information available physical representation components libraries 
cm components chapter discuss com example 
com treats interfaces manner object models corba 
com components expose communicate com interfaces 
com designed loose components 
requirement clients shall know class declaration class declaration contains implementation details 
components able add remove interfaces affecting existing clients 
components loosely coupled information connecting different versions components 
com component finds fellow components windows registry installed components store activation data interface id class id library locations find stubs proxies 
connections components set run time 
client uses unique key find server component registry com run time load corresponding component stub client memory 
unfortunately capability target system finding interfaces component 
prevents getting proper information dependencies system 
know components program uses run time request knowledge 
obtained provider components implements specific interface version management designate fig 

interface return facts version name creation date compatibility change interfaces provided components 
components interface possible write tool browse record dependencies components 
interface hresult name retval name hresult version retval version version hresult retval date date hresult retval name hresult history long size size size history history hresult long size iid interfaces hresult long size iid interfaces fig 

idl specification 
name version identifies component 
indicates compatibility level affected change 
history informs previous versions component type change applied 
shows interfaces provided component 
lists interfaces 
list possible building dependency tree components 
absence standard version interface method parse way dependency data source code files provide list dependencies release new product 
major disadvantages 
firstly applied third party components 
secondly level dependencies source code third party components included information obtained lack source code 
possible partial solution problem finding dependencies components track interfaces registry repository 
interfaces registered windows registry information find dynamic link library implements stubs proxies particular interface 
mechanism provides information need see interface changed update 
snapshot browsing tool list interfaces apart libraries programs installed 
tool warn implementation interface changed 
possible method determine new interfaces registered old interfaces changed implementation 
consider need component configuration management especially run time components changed fly 
highlighted different phases component management cm needed 
support cm related component management rudimentary today propose new area component configuration management 
want standardized techniques component management proposed certain relatively simple methods identify components possible changes cause system 
include deeper investigation snapshot system insight interrelationships different components 
tool capable browsing analyzing existing system developed 
don box essential com addison wesley isbn alan brown kurt examination current state cbse report icse workshop component software engineering international workshop cbse www sei cmu edu cbs icse summary html software www com homepage html corba www corba org magnus larsson managing standard components large software systems position second international workshop component software engineering los angeles may microsoft www microsoft com com microsoft source safe msdn microsoft com rational www rational com products clearcase index dale rogerson inside com microsoft press isbn andreas zeller versioning system models description logic proceedings ecoop scm symposium vol lecture notes computer science springer verlag 
