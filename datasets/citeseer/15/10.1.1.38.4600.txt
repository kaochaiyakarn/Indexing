typed higher order programming language pi calculus benjamin pierce lfcs edinburgh didier emy inria david turner lfcs edinburgh july calculus offers attractive basis concurrent programming languages 
small elegant understood supports simple encodings wide range high level constructs structured data higher order programming concurrent control structures objects 
familiar type systems calculus direct counterparts calculus yielding strong static typing high level languages defined way 
originated years computer science calculus come regarded canonical calculus capturing notion sequential computation elegant mathematically tractable presentation 
fundamental issues sequential programming languages profitably studied considering setting calculus 
conversely calculus strongly influenced design programming languages notably mccarthy lisp mcc 
milner parrow walker calculus mpw mil represents step canonical calculus concurrent computation 
synthesis generalization years ccs relatives mil mil 
concurrency community calculus similar modern process calculi studied aggressively substantial body theoretical results accumulated 
calculus form described canonical calculus concurrent computation 
important purposes difficult quantify fact calculus appears computationally complete model real world concurrent programs previous formal theories concurrency 
example ccs extended include communication structured data lacks ability perform higher order programming ability send processes channels 
programming languages facilities communication ccs design higher order language ccs formal foundation 
calculus hand support higher order programming 
ability pass channels values processes defining characteristic turns yield sufficient power construct dynamically evolving communication topologies express broad range higher level constructs 
basic structured data numbers queues trees encoded processes techniques reminiscent church encodings calculus 
calculus encoded fairly straightforwardly considering fi reduction kind communication 
distance calculus high level notation suitable general purpose concurrent programming order magnitude step calculus early dialects lisp 
reached point foundational calculus sufficiently powerful experimenting higher level designs 
ask question lisp ml language directly calculus language directly calculus look 
pure pi calculus active agents calculus processes exchange information channels 
interesting process constructors input output prefixes process form outputs value channel continues communication synchronous prevented executing communication completed 
symmetrically process waits receive value continuing value received substituted formal parameter composite process expression denotes running parallel 
input output enabled subprocesses may interact system evolves 

denotes interaction yg capture avoiding substitution style synchronous rendez vous channels known numerous concurrent programming languages od inm hol car rep mat gmp ram ber earlier process calculi mil mil 
predecessors calculus channels provide means communication values exchanged communication 
source calculus surprising flexibility 
example send channel 
enabling rightmost process send value process middle 
new channels created declaration form new 
example enables create new channel initially private processes left new informally new construct evaluated replacing bound name globally unique channel constant yielding composite process 
reduces 
subprocesses system access channel semantics new construct guarantees distinct channels system particular transmitted confused channels accessible completeness provide constant process skip 
skip appears input output usually omitted skip written just declaration form write recursive process definitions 
recursive definitions essential give ability express repetitive possibly infinite behavior 
ones provide similar ccs early presentations calculus 
example defines recursive process parameterized channel invoked outputs channel provided argument calls process application form 
copy started supplying argument 
behavior example output channel infinitely 
def mutually recursive definitions allowed def allow simple version non deterministic choice called guarded choice expression form select behave input output prefixes 
example select transmit case second 
general select may specify number alternative communications occurs branches select discarded 
consider simple input output prefixes abbreviations unary selection forms select select 
completes summary pure calculus 
description intentionally kept informal emphasize operational aspects avoid unnecessary formal detail survey 
rigorous accounts calculus semantics mpw mil mil 
higher level notation describe sections taken actual programming language right chosen small set features tell coherent story illustrating power elegance bottom approach concurrent language design 
full scale language design core underway 
early version described pie available electronically prototype implementation 
current implementation efforts emphasize portability simulating concurrency uniprocessors 
efficient implementation calculus programs distributed architectures poses significant compilation challenges 
values point find approximately position programmer pure untyped calculus 
principle need writing conceivable program built elements hand data structures higher order programs calculus encoded pure calculus mil san mil 
example extended language tuple values exchanged communication step easily compiled pure calculus 
communication tuple 
translated initial communication fresh private name elements tuple exchanged channel names chosen fresh new 
fresh constant 

fact created fresh exchange guarantees sequence values interleaved elements tuple sent process 
course notational convenience efficiency certainly want write performing encoding time hand 
calculus gain useful intuition encodings provide high level notation tuples behaviorally indistinguishable encoding may rest assured create internal inconsistencies language semantics 
formal theory high level features obtained translation tractable lower level language 
fact extending syntax communication directly just tuples convenient introduce general syntax values 
moment value channel tuple values output single value transmitted 
similarly input receives value case tuple expected components may named separately pattern prefix id val proc id pat proc val id val 
pat id pat 
id ranges channel names val values pat patterns proc process expressions val 
stands sequence zero values separated commas 
conventions listed appendix complete grammar core language 
tuple values tuple patterns symmetrically building tuples 
pattern process binder variables scope arbitrarily nested patterns may pattern matches output value binds variables expression follows 
communication arbitrary values encoded pure calculus translation complicated tuples 
details encoding data mil 
having distinguished different forms data communicated processes face possibility value transmitted may form expected receiver runtime type error may occur 
calculus adjoin untyped language simple type system capable detecting sort mistake 
crucial step concept channel type describes values may transmitted channel type chan type type 
tuple values types actual channel type chan type values carries 
crucial assumption channel carries values single type vary time ensures typing static property process expressions 
definitions values patterns types easily extended sorts data familiar sequential programming languages labeled records integers booleans 
included syntax typing rules listed appendices 
useful extensions subtyping recursive types polymorphism described various combinations literature mil gay ps vh tur 
static type systems sequential objectoriented languages car bru pt indicates general treatment object oriented features introduce section combination features 
process typing type system ensuring absence run time errors built techniques familiar calculus functional programming languages 
processes reduce values basic judgement system simply delta read process obeys constraints free channels stated context delta 
avoid algorithmic issues associated type inference assume binding occurrence channel name annotated type pat id type pat 
def new id type 
rules formedness processes straightforward 
example rule output prefixes states expression formed channel opposed tuple integer carrying values type furthermore value transmitted type remainder formed 
delta chan delta delta delta similarly input formed channel carrying values type form pattern matches formed assumptions delta plus new bindings introduced delta chan delta delta delta delta delta delta delta denotes concatenation contexts giving priority bindings delta auxiliary judgement delta delta determines type pattern types names binds 
expression sequence new def declarations formed body formed extended environment specified determined auxiliary judgement delta delta delta delta delta delta delta process skip formed behavior misbehave 
parallel composition processes formed consistency possible communications ensured checking compatible context 
delta delta delta similarly guarded choice formed choices formed delta delta delta select appendix presents complete sets rules formedness value typing auxiliary judgements covering constructs described far higher order features introduced section 
prove soundness typing system combination subject reduction theorem stating reduction preserves formedness simple theorem stating formed process immediately misbehave theorem delta reduces delta theorem delta step result run time type failure 
formal proofs theorems vh system extended recursive types 
proofs system including recursive types polymorphism appear tur system recursive types subtyping ps 
simply typed calculus simply typed calculus processes principal types gay tur vh 
leads naturally equivalent ml style polymorphism dm calculus extended 
known problematic interaction ml type inference imperative features arise bodies process definitions evaluated 
exploring strategies partial type inference presence higher order polymorphism 
higher order programming consider addition higher order programming features language 
natural approach followed past rep mat gmp hol car integrate concurrency primitives calculus cases ml 
functional sublanguage tends dominate character languages designed way 
runs contrary aims experiment investigate high level designs retaining essential character pure calculus 
choose alternative notation called higher order calculus san remains closer spirit original system 
pure calculus entities passed channels channels 
seen extend allow structured data extension explained means straightforward compilation pure calculus 
sangiorgi san demonstrates possible extend communication allow processes sent channels 
extension explained mean straightforward compilation pure calculus 
accomplish notational confusion important distinguish fundamental notions ffl processes ready run additional outside stimulus ffl process abstractions run triggered process 
process abstraction value formed prefixing process expression pattern keywords abs resolve parsing ambiguities val 
abs pat proc process abstraction triggered applying value proc 
id val example defer evaluation abstracting empty tuple 
resulting abstraction abs sent channel activated applying empty tuple abs 
abs 
abstracting process non trivial pattern allows create parameterized process abstractions 
example sends process abstraction parametric receiver abstraction may activate different arguments applying different values abs 
abs abs 
process abstractions applications translated straightforwardly low level language 
example compilation previous example new trigger def server trigger server server trigger sending process abstraction send fresh channel named trigger 
representing process abstractions channels replace application value output prefix sends value applications compiled output prefixes respectively 
compilation creates server process receipt value trigger channel activates process mimicking result applying process abstraction 
server requires recursive definition able handle number outputs trigger channel 
abstractions process definitions similar constructs 
unified allowing recursively defined processes higher order values 
compare standard ml mth recursively defined functions anonymous function abstractions treated uniformly 
compilation abstractions applications guides formulation typing rules 
extend set types abstraction types abs officially view abstractions terms encodings conveniently confusing application output 
brevity choose approach complete programming language design clear preferable 
returning results assuming usual infix operations integers write factorial function programming language def fact int res chan int res new chan int fact res definition fact expects arguments number wish take factorial res channel send final result 
problem encounter wish calculate intermediate value factorial need explicitly create temporary channel receive result 
explicitly wait result input prefix 
larger programs quickly cumbersome 
ml functional languages demonstrated convenience positional notation exactly sort situation 
introduce abbreviations allow positional notation 
introduce type abbreviation 
stands chan chan 
example give fact type int 
int 
importantly extend syntax values applications val 
val val typing rule application exactly expect abbreviation 
delta 
delta delta positional notation rewrite factorial example concisely def fact int res chan int res res fact important note result passing convention provides special syntax abbreviate processes return results special syntax defining processes return results 
new definition fact formal parameters including res channel 
programmer explicitly return result res 
advantage approach process needs return result pass responsibility process 
reminiscent continuation passing style calculus delegation operation concurrent object oriented languages 
example process expected return integer result res 
returns integer results responsible returning result passing res channel enables continue knowing deal sending result res 
def int chan int def int res chan int res 
part calculus language involves number quite subtle design tradeoffs subject ongoing research 
particular subtle problems sequentiality 
simpler see terms original definition fact see fact synchronization behavior written explicitly 
crucial decision case non zero create new process fact runs parallel process res 
process res execute fact sends result sequential implementation factorial function 
complicated functions useful doing parallel computation value 
possible solution problems sequentiality base high level language flexible synchronous calculus mil refining result passing scheme support mechanism similar multilisp futures hal 
concurrent objects speculative extension high level syntax grouping related services manipulated unit 
section sketch essential ideas extension 
full design progress 
server process communicates clients fixed set request channels example buffer channel inserting elements removing server 
difference server arbitrary process server set request channels remains fixed time 
may exchange messages transient channels example sending reply back client channel provided part request set channels clients initiate exchanges 
concurrent programs naturally expressed terms interacting servers 
servers convenient higher order programming client process wants send buffer server client pass parameters separately send complicated server needed 
render higher order programming servers practical need able refer server single handle 
interpose simple name server process clients original server 
name server provides single request channel clients interrogate find request channels original server 
example name server buffer process maps labels get put actual request channels buffer services effect simply record channels fields get put 
name server single request channel forms convenient handle buffer 
server associated name server form natural simple notion object 
build manipulate objects extend existing syntactic categories new high level constructs 
add type constructor object type 
object id type 
syntax typing rules appendices omit forms introduced section 
purposes suffices interpret object record type fx 
example type type intlist object empty 
bool fold int int int int 
int says integer list objects request channels named empty fold types 
clients empty find list empty fold apply binary function elements list initial value folding initial value list elements yields 
objects constructed declaration form object dec 
object id id type 
proc example empty integer list object declared object nil empty bool fold int int int int int ready select empty chan bool true ready fold int int int int chan int ready ready declaration binds channel name nil record empty fold empty fold newly created channels local body declaration 
object behavior specified body expression repeatedly accepts requests empty fold 
client process invokes service object communicating name server find appropriate request channel sending actual request 
sequence communications send receive send abbreviated constructs prefix 
id id val proc val 
id id val usual prefix case requests return results val 
example nil empty sends request empty arguments object nil switches result 
nonempty lists built cons operation def cons int intlist res chan intlist object empty bool fold int int int int int ready select empty chan bool false ready fold int int int int chan int fold ready ready res integer existing list cons build new object sends back result channel res 
new object responds repeatedly empty fold requests 
returns false response empty responds fold applying invoking fold service passing initial value result channel result channel recursive call 
request processed fold operation progress 
simple account objects types leaves important features importantly subtyping definition recursive object types 
full treatment type systems sequential objects car bru pt progress 
chosen omit mechanism inheritance time status concurrent object oriented languages matter controversy 
syntax summary rely meta syntactic conventions possible forms production listed successive lines 
nonterminals written uppercase keywords symbolic constants appear inside quotes 
expression form 
sep 
indicates list zero occurrences sequence separated case occurrences sep example production new id type 
allows examples new new new syntactic forms core language follows proc proc proc skip dec proc select prefix 

id val val proc proc prefix id val proc id pat proc dec new id type 
def id abs 

local dec dec dec dec val pat val val id val 
id val 
val id int bool abs abs val val val pat id type pat 
id pat 
type chan type type 
id type 
int bool abs pat proc adopt standard convention processes considered identical differ renaming bound variables 
require set variables bound pattern mutually recursive definition new declaration distinct 
summary typing rules processes delta delta delta delta skip delta delta delta select delta delta delta delta delta delta bool delta delta delta delta chan delta delta xv prefixes delta chan delta delta delta delta delta delta chan delta delta delta declarations delta fx xn tn delta def xn fx xn tn delta new chan xn chan tn fx chan xn chan tn delta delta delta delta val delta delta delta delta delta delta delta local delta delta delta delta delta delta delta delta delta values delta delta vn tn delta vn tn delta delta vn tn delta fl vn fl tng delta fl tn delta constant type delta delta delta delta delta abs delta 
delta delta delta delta abstractions delta delta delta delta delta chan patterns delta delta delta pn delta tn delta pn delta delta tn delta delta delta pn delta tn delta fl pn delta delta fl tn delta fx tg ber bernard 
programming behaviours ml framework 
syntax semantics lcs 
technical report laas cnrs april 
dave berry robin milner david turner 
semantics ml concurrency primitives 
acm principles programming languages january 
bru kim bruce 
safe type checking statically typed object oriented programming language 
proceedings twentieth acm symposium principles programming languages january 
car luca cardelli 
amber 
guy cousineau pierre louis curien bernard robinet editors combinators functional programming languages pages 
springer verlag 
lecture notes computer science 
car luca cardelli 
semantics multiple inheritance 
information computation 
preliminary version semantics data types kahn macqueen plotkin eds springer verlag lncs 
dm luis damas robin milner 
principal type schemes functional programs 
proceedings th acm symposium principles programming languages pages 
gay simon gay 
sort inference algorithm polyadic calculus 
proceedings twentieth acm symposium principles programming languages january 
gmp alessandro mishra prasad 
facile symmetric integration concurrent functional programming 
theory practice software development tapsoft pages 
springer 
lncs 
hal robert halstead jr multilisp language concurrent symbolic computation 
acm transactions programming languages systems volume pages october 
hol holmstrom 
functional language parallel programming implementation 
programming methodology group report university goteborg chalmers university technology september 
inm inmos occam programming manual 
prentice hall international 
mat david matthews 
distributed concurrent implementation standard ml 
technical report ecs lfcs university edinburgh august 
mcc john mccarthy 
history lisp 
proceedings acm conference history programming languages pages 
acm sigplan notices vol 
august 
mil robin milner 
calculus communicating systems volume lecture notes computer science 
springer verlag 
mil robin milner 
communication concurrency 
prentice hall 
mil robin milner 
functions processes 
research report inria sofia antipolis 
final version journal 
structures computer science 
mil robin milner 
polyadic calculus tutorial 
technical report ecs lfcs laboratory foundations computer science university edinburgh october 
proceedings international summer school logic algebra specification marktoberdorf august 
mil robin milner 
action structures calculus 
technical report ecs lfcs laboratory foundations computer science university edinburgh may 
mpw milner parrow walker 
calculus mobile processes parts ii 
information computation 
mth robin milner mads tofte robert harper 
definition standard ml 
mit press 
od dept defense 
manual ada programming language 
gpo 
pie benjamin pierce 
programming pi calculus experiment programming language design 
lecture notes course lfcs university edinburgh 
available electronically june 
ps benjamin pierce davide sangiorgi 
typing subtyping mobile processes 
ieee symposium logic computer science june 
pt benjamin pierce david turner 
simple type theoretic foundations object oriented programming 
journal functional programming 
appear preliminary version appeared principles programming languages university edinburgh technical report ecs lfcs title object oriented programming recursive types 
ram norman ramsey 
concurrent programming ml 
technical report cs tr department computer science princeton university april 
rep john reppy 
cml higher order concurrent language 
programming language design implementation pages 
sigplan acm june 
san davide sangiorgi 
expressing mobility process algebras order higher order paradigms 
phd thesis department computer science university edinburgh 
tur david turner 
ph thesis lfcs university edinburgh 
preparation 
vh vasco vasconcelos kohei honda 
principal typing schemes polyadic pi calculus 
proceedings concur july 
available keio university report cs 
