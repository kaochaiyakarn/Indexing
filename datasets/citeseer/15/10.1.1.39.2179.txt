implementing higher order algebraic specifications jan heering department software technology cwi kruislaan sj amsterdam netherlands jan cwi nl writing algebraic specifications executed rewrite systems similar functional programming 
differences 
algebraic specification languages allow lefthand sides equations complex order patterns allowed functional languages 
functional languages hand powerful higher order features offered algebraic specification languages 
functional languages combine higher order functions linear order patterns involving free data type constructors offering limited highly expressive mixture functional programming algebraic specification 
ambitious integration obtained allowing signatures equations algebraic specifications higher order 
operational experiments higher order algebraic specifications performed translating prolog extension prolog polymorphically typed terms higher order unification 
higher order algebraic specifications conventional algebraic data type specifications consist order signature set equations 
equations may contain order variables implicitly explicitly universally quantified 
signature defines syntax language terms semantics equations 
specifications usually implemented interpreting firstorder term rewriting systems see survey klop 
equation interpreted left right rewrite rule resulting rewrite system evaluate terms reducing normal form 
annoying fact asymmetric interpretation inherently symmetric equations may lead rewrite systems incomplete respect equational deduction original specification concern 
writing algebraic specifications executed rewrite systems similar functional programming 
differences 
algebraic specification languages allow left supported part european communities esprit project generation interactive programming environments ii ii 
proceedings prolog workshop hand sides equations complex order patterns allowed functional languages 
functional languages hand powerful higher order features offered algebraic specification languages 
functional languages hope combine higher order functions linear firstorder patterns involving free data type constructors offering limited highly expressive mixture functional programming algebraic specification 
ambitious integration obtained allowing signatures equations algebraic specifications higherorder 
higher order signature defines syntax language typed terms semantics equations 
study approach 
jouannaud okada advocated development implementation higher order algebraic specification languages having frequently felt need higherorder equations algebraic specifications thought interesting able perform operational experiments 
higher order term rewriting requires higher order matching special case higher order unification terms involved contain free variables 
readily available systems incorporating higher order unification prolog extension prolog typed terms generic theorem prover isabelle 
experience schemes translating order algebraic specifications prolog see surveys bouma walters chose prolog target system 
nice notion initial algebra specification unequivocal meaning order case equally unequivocal higher order analogue 
case depends precise notion higher order model prefers 
meinke moller instance assume models extensional higher order algebras meinke shows setting higher order initial algebra specification strictly powerful order counterpart 
poign hand considers extensional intensional models 
questions scope precise notion initial algebra semantics adopted affects degree incompleteness implementation scheme 
higher order term rewriting higher order term rewriting mechanism execute higher order algebraic specifications powerful manageable order counterpart 
examples illustrate possibilities problems 
consider signature sorts bool functions bool theta theta jan heering variables second order variable bool second order equation left hand side matches different ways order match single solution higher order match may 
may solutions leave variables left hand side rewrite rule uninstantiated happen order case 
instance left hand side matches solution leaves uninstantiated 
interpreted left right rewrite rule problem variables eliminated fi reduction substitution solution right hand side 
fi solution instantiating exists term case algebraically harmless 
danger non termination entails adopting parallel reduction strategy treating solutions equal basis simple loop check 
reasons efficiency chosen alternative 
ii 
consider second order equations map nil nil map cons cons map map map map map signature example plus additional declarations proceedings prolog workshop sort lst functions nil lst cons theta lst lst map theta lst lst variables lst second order variables 
equations define map function basic list constructor cases 
written virtually way hope chapter 
equations plausible identities map function 
allowed hope left hand sides involve arguments map constructor terms 
viewpoint higher order matching harmless 
iii 
happen example variables left hand side higher order rewrite rule left uninstantiated matching may enter reduct 
borrow example nipkow higher order critical pairs 
rewrite rule applied term ways instantiates leaves uninstantiated yielding result 
get rid problem eliminate ambiguous rules nipkow miller restricts left hand sides rules called higher order patterns hops 
hop term fi normal form free variable occurring applied zero terms equivalent distinct bound variables 
left hand sides equations hops left hand side contains free variable argument bound variable 
jouannaud okada notion general schema section include equation 
leave room experiment possible impose priori restriction equations may cause uninstantiated variables enter reduct necessarily treated correctly prolog code avoided 
iv 
order term rewriting requires subterm matching higher order rewriting explicit subterm lookup equation extended polymorphic higher order variable free case higher order matching extended left hand side full input term performs subterm lookup implicitly 
useless instantiations contain rejected simple loop check 
matching strategy matter long rewrite system confluent terminating apart trivial loops caught loop check 
approach section 
tactics higher order rewriting discussed felty 
jan heering prolog prolog extension prolog typed terms 
basically functions declared prolog program generate domain polymorphically typed terms polymorphic higherorder unification takes place order unification proof procedure 
terms may subject ff fi reduction term domain underlying prolog program purely syntactic 
furthermore order unification higher order unification decidable unitary 
consequence prolog backtracking alternative unifier pair terms may occur search higher order unifier may go forever 
higher order matching special case higher order unification need conjectured decidable simply typed case polymorphism huet open problem 
third order case shown decidable dowek 
hand dowek showed strongly polymorphic higher order matching undecidable 
prolog supports ml style polymorphism included notion higher order algebraic specification accordance original proposal 
far know intermediate case higher order matching combination ml style polymorphism settled may turn decidable 
version prolog implementation polymorphic higher order unification incomplete caused problems 
explained due course 
examples higher order matches multiple solutions subsumed ones section 
prolog code backtracking alternative solution may occur result loop checking 
rudimentary knowledge prolog combination basic understanding prolog see instance bratko book suffices understand section 
translating higher order algebraic specifications prolog simple scheme consider higher order algebraic specification module sorts nat bool lst functions zero nat succ nat nat add nat theta nat nat bool bool theta theta nil lst cons theta lst lst compose theta map theta lst lst version october 
obtained anonymous ftp duke cs duke edu 
proceedings prolog workshop equations add zero add succ succ add compose map nil nil map cons cons map map map map map compose identifiers character capital letter variables 
type declared explicitly determined context occur 
instance type nat polymorphic type type variable 
addition carriers corresponding sorts nat bool higher order initial algebra infinite number order carriers corresponding lst monotype particular may functional monotype nat nat lst monotype 
higher order carriers function spaces initial algebra consist appropriately typed functions definable terms signature equations polymorphic versions respectively 
equation defines functional composition 
equations merit special attention 
ones allowed higher order algebraic framework hope 
pointed section left hand side highly non deterministic 
left hand sides hops simple kind constructor cases 
scheme outlined example iv section translate prolog module module lpn 
kind nat type 
kind bool type 
kind lst type 
type 
type zero nat 
type succ nat 
nat 
type add nat 
nat 
nat 
type bool 
type bool 
type bool 


jan heering type nil lst 
type cons 
lst 
lst 
type map 

lst 
lst 
type compose 




type reduce 

type 

add zero 
add succ succ add 



compose 
map nil nil 
map cons cons map 
map 
map map map compose 
reduce loop check ground reduce reduce arguments predicates separated spaces commas prolog argument list predicate delimited brackets 
syntax terms similar lisp 
predicate function unary larger arities reduced arity currying replacing types theta delta delta delta theta algebraic specification types 
delta delta delta 
sk 
prolog 
usual type constructor 
right associative 
predicates type delta delta delta 
kind declarations introduce type constructors 
kind declarations lines lpn introduce zero adic type constructors nat bool monadic type constructor lst 
correspond sorts nat bool lst apart declarations auxiliary predicates reduce correspondence signatures lpn straightforward 
translation equations equally straightforward 
put context new higher order variable left right hand side equation second argument corresponding fact 
note delta delta delta right hand side delta delta delta prolog 
addition facts corresponding equations body lpn consists clauses reduce 
independent normal form term term language defined signature obtained submitting lpn question reduce tt nf 
proceedings prolog workshop tt corresponding term term language lpn 
free variables instantiated rewriting correspond prolog variables tt modelled generic constants simulated variables examples 
contains free variables tt ground term 
rewriting proceeds follows 
reduce predicate attempts apply successful calls recursively reduct performing loop check negation failure predicate denotes higher order unification 
loop check rejects algebraically correct operationally useless matches cf 
section examples iv 
evaluated values ground terms translated input term tt ground ii equations assumed interpretation left right rewrite rules cause uninstantiated variables enter reduct cf 
section example iii 
rewrite strategy lpn determined primarily fact fi reduction builtin rewrite rule performed implicitly prolog unification order facts 
redexes rule reduced redexes rule redex selection strategy individual rule determined prolog higher order unification strategy 
influenced extent setting switch prolog system 
set higher order unification machinery prefers projection imitation 
reduces amount backtracking caused imitative solutions rejected loop check promotes simultaneous reduction syntactically identical redexes 
reproduce short sample run prolog system lpn lpn 
lpn switch 
slightly efficient application switch 
type variable instantiation warnings reduce cons nil cons nil nf 
generic constant see nf cons nil reduce add succ zero succ zero succ succ zero nf 
generic constant see nf succ succ zero reduce nf 
jan heering nf see section reduce compose add add succ zero nf 
nf succ succ succ succ zero reduce map add cons zero cons succ zero nil nf 
nf cons zero cons succ succ zero nil reduce map compose succ cons succ nil nf 
nf cons var succ succ var nil reduce map zero map succ nf 
generic constant see nf map var zero reduce add zero nf 
nf add zero rewriting abstraction argument match see section reduce succ succ nf 
nf succ succ nf succ expected see example reduced properly implementation polymorphic higherorder unification version prolog incomplete 
matching succ succ left hand side polytype 
nat 
nat initially inferred instantiated nat 
nat 
nat 
nat 
reason system limits primitive types keep search space bounds 
interesting see matching behaves case switch 
give type variable instantiation warnings proceedings prolog workshop switch 
print types terms succ succ 
denotes higher order unification trying project argument type want go 
assuming moment target type primitive var var nat var nat succ var var nat succ var var bool 
solution leaves variables left hand side uninstantiated rejected loop check 
expected solution precise type nat 
nat 
nat 
nat associated ad hoc fashion succ succ nat 
nat 
nat 
nat 
var nat 
nat var nat var var var var nat succ var var nat 
nat var nat var nat succ var var nat succ var var bool 
nat 
nat solution yields expected reduct substituted right hand side 
second solution precisely typed version useless previously 
jan heering give example showing lpn confluent terms containing free variables 
alternative normal form obtained backtracking 
note lpn automatically 
reduce add zero add succ zero nf 
generic constants nf succ normal form nf succ add zero normal form 
nf add zero succ zero second normal form general translation scheme clear lpn 
auxiliary names reduce chosen carefully avoid clashes user defined names 
similarly overloading names predefined meaning prolog true false list avoided 
apart mentioned incompleteness problem possible non termination higher order matching encountered far scheme correct higher order rewrite systems introduce new variables reduct terminating simple loop check shown confluent 
rewrite systems lacking property input term may normal forms computed 
improving efficiency adding specialized code efficiency gained combining method order schemes discussed 
illustrate general idea take ehrich order scheme 
case prolog code generated module lpn 
import lpn 
see section type reduce 

type analyze 

type 

type rule 

proceedings prolog workshop rule add zero rule add succ succ add 
rule rule rule 
rule compose 
rule map nil nil 
rule map cons cons map 
rule map rule map map map compose 
analyze succ analyze succ analyze add analyze analyze add analyze analyze analyze analyze analyze compose analyze analyze compose analyze cons analyze analyze cons analyze map analyze analyze map analyze rule loop check analyze reduce analyze reduce reduce defined lpn lpn extends lpn code similar prolog code generated ehrich scheme order specification 
ary function signature lpn contains clause analyze 
ip analyze 
analyze ip kp 
kp 
clause catches matched argument preceding analyze cases 
facts correspond directly equations 
clause links new code old code imported lpn 
clauses independent jan heering normal form term term language defined signature obtained submitting lpn question reduce tt nf 
tt corresponding term term language lpn lpn 
free variables replaced generic constants tt see section 
examples tried lpn times faster lpn 
may slightly slower analyze unable perform reductions 
consider instance term compose succ succ zero 
argument match type compatible done analyze wasted reduction succ succ zero performed reduce var nat 
nat var zero succ succ hand reduction map compose succ cons succ nil cons var succ succ var nil speeded factor 
lpn spends large amount time useless matches lpn performs reduction highly deterministic manner analyze 
reduction abstraction partial evaluation evaluation programs input values partially called partial evaluation see annotated bibliography 
setting order algebraic specification partial evaluation corresponds reduction order terms containing free variables 
section gave examples setting higher order algebraic specification 
fact equations map map map map played role examples needed ordinary evaluation may useful partial evaluation 
needless say equations kind added specification proceedings prolog workshop higher order setting partial evaluation corresponds reduction open terms reduction abstraction 
related abstraction rule analogue order case 
instance abstraction rule expect implementation reduce add zero nat add zero reduces nat equation 
implementations discussed far reduce add zero nf 
generic constant nf ok reduce add zero nf 
nf add zero argument match reduce add zero nf 
nf add zero analyze predicate lpn descend abstractions note fact lpn lpn perform reduction abstraction accordance common functional programming practice 
picking abstraction style lpn require higher order matching incomplete instantiation type variables unification mentioned section precludes approach 
add case definition analyze predicate lpn just analyze pi reduce 
recognizes abstraction analyze uses prolog built pi predicate convert generic instance universal goal reduce 
universal goals prolog discussed nadathur miller pp 

normalization reduce resulting normal form turned abstraction 
instance jan heering reduce map add zero nf 
application yields identity function type lst nat 
lst nat nf var lst nat var clause independent conclude section pointing reduction polymorphic abstractions prone divergence 
instance reduction identity function polymorphic type 
leads infinite loop 
clause remains applicable generic instantiation 
logical viewpoint higher order algebraic specification constitutes natural integration order algebraic specification higher order functional programming 
intend perform experiments implementation schemes discussed efficient ones developed see instance 
polymorphic typing main source problems far requires special attention 
suggestion reviewers prolog workshop pi predicate rewriting abstraction helpful incorporated section 
bailey functional programming hope ellis horwood 
burstall macqueen sannella hope experimental applicative language conference record lisp conference stanford 
bratko prolog programming artificial intelligence addison wesley 
bouma walters implementing algebraic specifications bergstra heering klint eds algebraic specification acm press addison wesley 
dowek third order matching decidable rapport de recherche inria rocquencourt 
dowek undecidability pattern matching calculi primitive recursive functions representable rapport de recherche inria rocquencourt 
proceedings prolog workshop translating algebraic specifications prolog programs comparative study grabowski lescanne eds algebraic logic programming lecture notes computer science vol 
springer verlag 
felty logic programming approach implementing higher order term rewriting eriksson schroeder heister eds extensions logic programming lecture notes artificial intelligence vol 
springer verlag 
heering partial evaluation completeness algebraic specifications theoretical computer science 
heering second order algebraic specification static semantics report cwi amsterdam preparation 
huet esolution equations dans les langages ordre th ese de doctorat etat universit de paris vii 

jouannaud okada computation model executable higher order algebraic specification languages proceedings sixth annual ieee symposium logic computer science ieee computer society press 
klop term rewriting systems abramsky gabbay maibaum eds handbook logic computer science vol 
ii oxford university press 
meinke recursive second order initial algebra specification primitive recursion report csr computer science division department mathematics computer science university college swansea june 
meinke universal algebra higher types theoretical computer science 
meseguer goguen initiality induction computability nivat reynolds eds algebraic methods semantics cambridge university press 
miller logic programming language lambda abstraction function variables simple unification schroeder heister ed extensions logic programming lecture notes artificial intelligence vol 
springer verlag 
moller algebraic specification higher order operators meertens ed program specification transformation north holland ifip 
nipkow higher order critical pairs proceedings sixth annual ieee symposium logic computer science ieee computer society press 
nadathur miller overview prolog bowen eds logic programming proceedings fifth international conference symposium vol 
mit press 
jan heering higher order data types report csd computer science department university california los angeles january 
paulson nipkow isabelle tutorial user manual technical report computer laboratory university cambridge january 
poign specifications theories models higher types information control 
sestoft eds annotated bibliography partial evaluation mixed computation new generation computing 
