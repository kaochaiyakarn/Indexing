genetic algorithms haskell polytypic programming haskell med mans email md chalmers se february evolution main optimising tool nature 
just look animals plants human beings complex suited genes 
random search possible genotypes result general efficient optimising algorithm 
genetic algorithms genetic programming methods concept evolution darwinian natural selection 
powerful methods finding solutions vide variety problems 
text describes program written functional language haskell evolution solve example problems 
examples concern picture generation third planning problem 
due program easily extended solve new problems algorithm 
genetic algorithms assume want solve problem set possible solutions assume way telling specific solution way determining fitness value 
find solution start choosing random set solutions generation solutions 
step genetic algorithm fitness values individuals current generation evaluated 
values represent probability surviving generation 
surviving solutions combined genetic crossover random mutations surviving genes children create new generation solutions 
new generation hopefully higher fitness average previous 
fitness values satisfy predefined criteria converged best solution generation chosen output genetic algorithm 
genetic programming special case algorithm described solution space consists programs trying solve problem 
genes computer programs run evaluated comparing output desired result 
ffl example find program draws looking picture 
elements describe functions coordinates returning colour light intensity 
expr num real constant numbers xcoord coordinates point ycoord binop expr expr function expressions expression evaluated point image giving values mapped colours 
simple gene binop xcoord ycoord give picture low values dark colours bottom left corner high values bright colours top right 
ffl example write program guides ant labyrinth finding food possible 
labyrinth square grid food units points 
ant described plan type plan food ahead plan plan move seq plan plan plan food ahead move seq move ant go forward food front turn left move direction 
ffl example find program generates insect line drawings 
set lists integer numbers interval 
numbers angles recursive tree drawing function 
similar example see 
generating generation solutions examples random expressions plans 
step algorithm individual generation evaluated 
fitness values choose best individuals 
fitted solutions combined new generation created 
ffl define function tells picture looking fitness values provided user 
combine functions exchange sub expression sub expression ffl second example fitness ant number food items 
plan executed limited number steps 
step move operation 
crossover defined previous example 
ffl example user provide fitness values drawings 
genes combined elements list elements second resulting new list numbers 
crossover apply random mutation genes expand gene pool 
solutions stuck kind local minima idea mutations crossover 
information genetic programming 
extended example planning look closer planning example 
grid trace food units shown picture 
evaluate fitness ant place upper left corner facing right evaluate plan repeatedly time steps past 
food units track maximum fitness value 
populations consist genes datatype datatype plan food ahead plan plan move seq plan plan random generation best ant food units food gap trace 
examine ant gene plan seq seq food shown black trace evolved ant grey 
food shown black trace evolved ant grey 
food ahead food ahead move seq reduced food ahead seq move seq food front ant move step forward eat turn 
spins counterclockwise food seen 
ants example complex example individuals plans consisting just 
find food moving 
move ants run straight forward find food items 
individual generation parents chosen depending mutation crossover 
ant high fitness value chance ant parent high 
crossover case sub plan parent exchanged sub plan parent 
mutation case sub plan replaced new random plan 
average number food units generation 
second raised maximum fitness 
best ant follow trace just runs maze straight diagonal line 
means vulnerable mutations ants strategy inherited children 
crossover mutation operation probably change behaviour destroy high fitness value 
gone generation 
generations maximum fitness remains value average increases ants find food units 
generation happens 
ant discovers way moving encounters gap trace 
follows continuous units runs straight finds food 
follows new trace 
finds units food time best ant 
pattern repeats 
maximum fitness stays average increases limit suddenly mutation crossover operation ants smarter 
new ant complex plan food ahead food ahead move seq food ahead move move seq move seq move seq food ahead seq seq seq food ahead move food ahead move move seq reduced food ahead move seq move seq food ahead seq seq move right way single unit gaps stops third gap food units missing trail 
fitness reaches 
path ant shown grey picture 
pattern repeated slow increases average fitness altered sudden jumps maximum fitness 
fitness values get higher number generations jump increases 
size plans increases time unfortunately program tends run memory really ant evolves 
see ants generation 
notice ants solution mentioned older evolved ants searching food 
plans 
bad ants fitness parents lost due mutation unlucky crossover 
program program gene written easily extended different data types representing problems want solve genetic algorithm 
gene allows user choose ffl crossover mutation 
ffl fitness provided predefined function user 
experiments neural nets learning fitness concept see section neural networks 
ffl size population 
ffl generations run step 
ffl genes displayed predefined drawing function 
step maximum average fitness values displayed 
save load populations 
gene written lazy functional language called haskell 
uses graphical user interface toolkit called fudgets extension haskell called polyp enables write polytypic functions 
user interface picture shows main program evolving ants extended example 
maximum average fitness values displayed top window 
notice program uses fitness values zero values mentioned divided 
button take generation crossover mutation depending user chosen column mate mutant 
fitness values provided user scrollbars showing phenotype window see ant example function 
individual fitness value shown window 
picture planning tree buttons choose different genes evolved 
cases described tree example uses gene consisting list integer numbers draw tree structures 
shows pictures evolved picture example essentially datatype expr described 
set binary operations extended arctan function unary operations sqrt 
functions course evolved operations interesting pictures evolved faster extension 
graphical user interface 
evolved pictures 
implementation section describes various parts program implemented 
problems solutions haskell class system polytypic programming covered 
words haskell haskell lazy functional language 
main building block function defined giving appropriate expression 
square foo square function number returning square number 
foo protected divide function 
types functions square num 

foo fractional 


foo fractional 

square defined type num class numerical types int float function numerical value argument returning value type 
foo defined types class fractional function defined 
takes values arguments returns value 
give foo arguments new function returned argument 
foo function returns reciprocal number foo zero 
function defined types denote type variable 
function length giving length list values type type length 
int list values type values different types 
predefined types int char bool types tuples 
int bool lists char types 
function types int 
int define datatypes gene examples 
data tree leaf branch tree tree data plan food ahead plan plan move seq plan plan tree leaf value type branch type tree define functions elements types pattern matching 
tr branch branch leaf leaf leaf tree int count tree 
int count case leaf 
branch 
count count count returns number leafs tree 
count tr evaluate 
observe functions values just integers trees 
notice haskell uses lazy evaluation values arguments function computed needed function 
consider function bar takes arguments returns second 
bar evaluated giving divide zero error message language strict evaluation 
important datatype list defined data list nil cons list list numbers written cons cons nil 
shorter notation text 
nil case written 
predefined functions operating lists head list 
tail list 
list take int 
list 
list drop int 
list 
list map 

list 
list head tail give elements list 
take xs returns elements xs drop xs elements 
function map takes function type 
list values type applies function elements list 
information haskell see 
gene class mentioned program different datatypes 
datatype implementations corresponding fitness function crossover function drawing function main program find type genes currently call appropriate functions 
straight forward solution define general datatype gene data gene gene list float gene expr gene plan expr plan refer examples 
gene describes object list floating point values expression plan 
main program needs fitness object test kind gene call respective fitness function 
fitness case gene 
gene 
gene 
construct performing crossover mutation nice solution 
want insert type genes remove old ones datatype gene changed inner loops main program 
define fitness overloaded functions defined different data types 
program automatically find instance functions call 
compare member functions methods objects object oriented language dynamic binding call appropriate method 
haskell class system provides convenient way doing 
class defined containing declarations type specific functions 
datatype gene program instantiating defining methods 
class fitness 
float crossover 

float 
mutant 
float 
draw 
drawing type member class functions defined 
fitness takes object type gives floating point value 
crossover takes objects type random number returns combination objects 
mutant takes object random number returns mutation object draw takes object returns drawing 
instance expr fitness crossover random mutant random draw 
definitions methods expr instance 
apply example mutant function type member class correct method 
population described list genes 
want population type different types genes occur define population existentially qualified datatype follows 
datatype population 
pop type list typed objects type constructor pop type population irrespective type observe standard haskell notation extension hbc haskell compiler see 
see konstantin text existential types 
binop num xcoord expr ycoord expr food ahead move plan seq move plan type expr type plan 
pop pop population pop pop population pop pop type population 
methods fitness mutant objects 
main program operate populations type time type genes populations may change runtime 
add remove datatypes representing genes having change main program 
define methods datatype implementations essentially 
problem solved section 
consider crossover function 
picture example gene object type expr 
combine genes want replace random sub expression gene random sub expression second 
case food searching ant genes type plan perform crossover plans want replace sub plan sub plan 
obvious functions similar generalise concept replacing sub tree write single crossover function operates datatype 
function accept objects types arguments called polytypic function 
term sub tree denote sub expression type 
example sub tree list list 
note function times num 


accepts arguments types 
family possibly unrelated functions instance num class 
uses type inference determine functions 
called polymorphic overloaded function 
set functions name function defined datatypes 
genetic crossover 
function head 
polymorphic values list definition function 
overloaded definition head 
polytypic function defined induction structure user defined datatypes 
definition instances datatype applied 
binop num xcoord binop binop ycoord num num food ahead move seq move crossover rnd crossover rnd evaluate depending random number binop num binop ycoord num food ahead move right sub tree replaced left sub tree 
illustrated 
extension haskell called polyp write polytypic functions 
polyp polyp extension haskell allows define polytypic functions 
new kind definition introduced polytypic construct define functions induction structure datatypes 
recall datatype definitions express constant types int bool tuples 
int bool parameters choices recursive types 
polytypic construct handle cases 
see descriptions polytypic functions definitions mutant crossover 
need convert random floating point value integer range size object 
number tell sub tree replace tree replaced 
conversion need polytypic size function giving number type constructors object 
size binop num binop ycoord num binop num ycoord 
size regular 

int size cata fsize polytypic fsize int 
int case const 

empty 

par 

rec 


fsize fsize 

fsize fsize class regular consists datatypes contain function spaces arguments left right hand side 
define size catamorphism 
catamorphism function replacing type constructors parameters functions values 
datatype tree replace branch function add leaf tree branch branch leaf leaf leaf add add add 
type declaration size 
int type constructor tree plan list 
type means size takes value regular datatype argument returns integer 
notation 
denotes function value returning value expression 
identity function 
function returning irrespective argument 
cata takes argument function written polytypic construct function possible way constructing datatype 
polyp generate appropriate functions datatype size function applied 
data list nil cons list data tree 
list cases empty list nil value type list 
type described empty par rec 
read 
tree type par rec rec 
types argument fsize 
called functors datatypes 
value converted representations functions inn 

functorof functor datatype functions polytypic construct type stands functorof generated functions essentially size case nil 
cons 
size size case leaf 
branch 
size size type cata cata regular 
functorof 


tree case variable tree 
functor par rec rec 
functor takes arguments type parameter type recursive parts 
argument cata function functor type type size example function fsize functorof int 
int 
cases fsize give functions values cata uses replace constructors parameters object 
similar function para expresses paramorphism 
type para regular 

functorof 


paramorphism similar catamorphism recursive step recursive result obtained children argument paramorphism 
type para see argument function cata takes argument element type crossover mutant functions need function extracts th sub tree value 
define function scan takes element returns list element sub trees 
scan regular 

scan scan polytypic children 
case const 

empty 

par 

rec 



children children 
children children scan para 

children get sub tree element list 
function build inverse scan rebuilds object scanned list 
function just take element list uses type constructor eventually parameter item list 


build regular 

build xs fst build xs build xs 
case xs 
xs 
build xs fst snd inn fst snd inl left fst snd inr right fst snd polytypic 

bs 
case const 

bs empty 

bs par 

bs rec 

head bs tail bs 

bs snd fst fst snd 

case left 
inl bs right 
inr bs replace items list building new object parts replaced 
build take scan scan build lx short 
define function replace random numbers objects returning object 
replace regular 
float 
float 


replace truncate size truncate size build take scan scan head drop scan drop scan binop num xcoord binop binop ycoord num num replace binop binop ycoord num xcoord replace crossover function mutant function fourth argument random value type second argument zero 
problems polyp mentioned polytypic function write polyp generate specific function type want apply function 
polyp access code see types values functions 
may cause trouble code divided different modules current version polyp handle subset haskell 
bigger problem existentially qualified type population 
pop express individuals population type class 
polyp sees size replace applied objects list population way determining type objects 
type hidden pop constructor 
polytypic functions populations 
solution problems polytypic functions inside definitions methods class 
type objects known 
avoid giving program polyp create fake main program just calls functions arguments appropriate types 
example want previously defined types expr plan 
expr plan main size size replace replace polyp generates functions size expr size plan replace expr replace plan 
unfortunately gone functions polytypic 
abstraction polyp supposed provide lost having single function datatype ended function datatype 
versions polyp probably possible give list datatypes want polytypic function giving main function 
mutant rnd rnd rnd instance expr fitness crossover rnd rnd rnd mutant rnd mutant rnd draw instance plan fitness crossover rnd rnd rnd mutant rnd mutant rnd draw 
size functions provided arguments replace 
restored lost abstraction created new overloaded functions crossover mutant 
functions applied object class elements object type population 
insert new type genes program done defining datatype giving appropriate fitness drawing functions 
natural fitness value gene user provide values graphical user interface 
drawing function create drawing genes picture ant examples just print gene 
flatten flatten neural network 
neural networks natural fitness function problem picture example user provide fitness gene scrollbars 
time consuming program learn concept fitness looking choices user 
layer feed forward neural network tried solution problem 
network consists number neurons internal weights 
neuron gets number input values outputs single value weighted sum input 
giving network correct expected answer input vector weights adjusted error back propagation method 
weight values converged network hopefully give correct output values 
unfortunately method appropriate input constant size insect drawing example described 
size changes runtime examples course extend network new neurons correct weights 
example consider case genes tree structure picture planning examples 
input gene network flatten way generate list values representing tree 
assume neurons adapted correct weights evaluating right sub tree 
left sub tree changes due mutation crossover right tree appear right list input new set neurons 
learned information lost 
observe values top rows input neurons layer 
object right sub tree 
input number layer 
neurons learned evaluate structure weights number adjusted 
left sub tree replaced right tree evaluated weights number 
network able tell 
probably solutions problem learning time convergence behaviour genes constant size attempts 
implementation networks implement neural network represent weights neuron internal state program 
functional language describing network state transforming function 
takes vector input values state returns output network paired new state 
type function net 
type state 
state data float float float type float data state float function net takes list input values list values correct output value 
case learning phase 
result type function state returning state paired output 
state list lists values list weights neuron network 
xs input net corresponding output calculated weights state new state equal previous 
xs case output computed compared expected output error compute adjusted weights new state 
net xs 
output xs net xs 
output xs update output float 
state 
float update state 
float 
state learn fst net learn learn snd net learn output function learn int 
state 
takes number training steps initial state arguments 
details neural nets see 
soon start experimenting genetic algorithms realize powerful tool finding solutions different problems 
program may implementation genetic algorithms example able adjust mutation rate 
just want try method problem easy 
investigations area learning fitness functions interesting 
program easier change increases possibility reusing code 
time feel writing code different datatypes consider language haskell polyp 
appendix time disposal ffl research genetic algorithms approx 
weeks 
ffl implementing main program approx 
weeks 
ffl implementing examples approx 
weeks 
ffl research neural networks approx 
week 
ffl implementing network approx 
week 
ffl research polytypic programming approx 
weeks 
ffl implementing polytypic functions approx 
weeks 
ffl writing report approx 
weeks 
appendix program code please note example code previous chapters slightly simplified 
code program 
main program import import class import misc import array import net import time import expr type grey array int pixel type fits array int float data state state int fits population mating choose data int population int float bool int float float point string data int float data mating mate mutant deriving eq data choose function user net learn deriving eq data method method mating choose data int mating choose population bool int population main genetics 

frominteger 
eval 
idf 
state mutant user replicate length flat parse string 
string parse ns os head reads os ns parse os click head genes 


mapf parse 
snd 

snd 

click 
just filename 
idf population 
string 
population pop left es pop map es right printf string printf 

snd 

idf 

left just filename right right right left left right left 
false show 



size population intf 



run generations intf 

const 
save 


load 

idf 
right 





mate mate mutant mutant mutant 

function fun user user user 
head flip drop genes 
picture planning tree 



case 
true 
false grey 
point 
float population float grey 
scf 
df 
gf scf 
fromint 

fromint round 
gf 
grey df 
show 
idf grey 
point 
population grey sizes 
pop 
fd grey int 
point 
int float population grey 
showing phenotypes 
left 
round sqrt fromint zip replicate grey int 



printf 
false point 

case 
left left 
left right 
right left left left false false right right right left max fitness 
show fst 
average fitness 
show snd sr state fa ns gs ss state ss fa ns gs sr state ss ns gs fa state ss fa ns gs sr state ss fa gs ns state ss fa ns gs sr state ss fa ns gs state ss fa ns gs sr state ss fa ns gs state ss fa ns gs sr state ss fa ns gs state ss fa ns gs population 
point pop ps head ps eval state 

state eval state ss fa ns gs pop gs case left 
nfa fa sr nfa right 
show map value gs right ngs pop ngs 
nfa ngs nns replicate length flat head ngs sr sr sr ngs nns nfa length ngs ngs ngs nfa right 
gs gs fa right 
sr right 
nfa gs sr sr nfa nfa right 
snd bounds fa ngs head ss nfa ngs nns replicate length flat sr sr sr sr ngs nns nfa tail ss ngs ngs nfa right 
nss ngs nfa nns ss gs fa ns sr sr sr sr ngs nns nfa nss ngs nfa pop tail ng ng nn ng head nn snd bounds nn case learn 
snd map flat elems 
right 
ngs head ss fa nns gs nfa ngs nns case learn 
snd map flat gs elems fa ns 
ns sr sr sr sr ngs nns nfa tail ss ngs nfa fits 
maximum elems sum elems fromint snd bounds map 
population 
choose 
fits pop gs length gs case function 
map fitness gs user 
replicate net 
fst map flat gs ns learn 
replicate map fitness gs population 
fits 
pop gs zipwith 
pop 
gs int 
mating 
choose 
fits 

population 
int 
population seed fa ns pop gs nr mkgen nr seed seed fitness fitness fits map 
elems fa case function 
foldl 
fitness gs 
sum fits mkgen ms pop ms mkgen rs ms mkgen rs mate ms mate case mate 
love gs fits gs fits mutant 
mutant gs fits 
mutant love gs fits gs fits gs fs case function 
gs 
gs fs gs fitness fitness gs gs fs gs fs gene class module class import misc import expr import plan import import array import class value 
string 
string 
fitness 
float love 

float 
mutant 
float 

int 
int 
point 
array int pixel 
flat 
float data gene gene int int deriving show read instance gene value show read fitness gene fromint love gene gene rnd rnd gene gene mutant gene rnd gene xs gene mod mod xs point gene point show flat gene fromint fromint data expr float deriving show read rnd sin rnd instance value show read fitness fromint love rnd rep rnd rnd mutant rnd round rnd rep rnd xs ss xs ss grey rect origin point pix cut pix grey pixels 

pixels fromint fromint truncate fromint flat point data plan int int int int int int deriving read show instance value show np read np np fitness sc fromint sc love rnd np rep rnd rnd np np mutant rnd round rnd np rep rnd np np xs ss xs ss es fs grey rect origin point pix gl div pix grey pix grey gl pix grey gl gl pix pixels div 

es fs pixels pixels xs es fs es head es pix pix pixels xs tail es fs head fs tail fs fs fs head fs pix pix pixels xs es tail fs pix pix pixels xs es fs flat point data insect insect int deriving read show instance insect value show read fitness love insect insect rnd insect rep rnd rnd mutant gi insect rnd round rnd insect fst gi insect rnd rep rnd rnd rep rnd rnd xs insect map 
mod take xs drop xs insect gs map mktree gs size dx gs gs gs gs gs gs dy gs gs gs gs gs gs gs gs mktree dir len mod dir xnew div len dx size div len dy size len ll xnew mktree xnew len mktree xnew len flat insect map fromint point 
ds map flip point ds ds div 
int int 
int int line point point ds ds min max ds yp ds yp data population 
pop population 
int 
int 
population pop nr rnd nr rnd rnd gs pop gs rs gs rs rs rs gs pop gene pop var pop move pop insect 
genes population genes picture example module expr import odd int 
char case mod 




case mod 

char 
float 
float 
float case 



atan case 
sin 
sqrt abs int 
expr float int ss case mod 
fromint num ss 
var ss 
var ss 
ss ss ss 
ss ss ss ss bop ss 
ss ss ss ss ss ss ss expr float 
float 
float 
float num var var bop planning example module plan import array import data pos pos int int deriving eq type dir int data int pos dir int int int data pstate pstate int pos dir int int int int int int 
plan int ss fst ss ss case mod mod 
move ss 
ss 
ss 
ss ss ss ss progn ss 
ss ss ss ss ss move pos case 
pos mod 
pos mod 
pos mod 
pos mod elem food pos 
int int 
bool food pos fa elem fa eat pos 
int int 
bool int int eat false eat pos fx fy fs fx fy true fs fs eat fs fs plan 
int int int int int plan sc vs pstate sc vs pstate pos pstate plan pstate sc ps vs pl case pl 
food move ps progn 
move 
pos move ps eat ps pstate sc sc ps ins vs 
pstate sc mod ps vs 
pstate sc mod ps vs ins ins xs xs xs xs ins xs misc 
functions module misc import array import ix 


array 
array array range bounds cont cont white grey div white 
white white grey rgb uses bit color intensities levels int 
int 
int trunc trunc trunc trunc trunc int 
int 
int quot quot int 
int 
float map 



polytypic functions note haskell code 
function definitions parsed polyp concatenated type definitions compilation 
module add int 
int 
int rep int 
int 




int 
float 
float 


rep truncate 
fromint truncate 
fromint expr expr plan plan data plan plan plan dummy move progn plan plan deriving show read data expr bop char expr expr char expr expr expr expr var char num deriving show read polytypic fsize int 
int case const 

empty 

par 

rec 


fsize fsize 

fsize add fsize cata fsize para 



para fmap id para polytypic 
case const 

empty 

par 

rec 




scan 
scan para 

xss case xss xs xss 
xs xss replace fst build take scan scan head drop scan drop scan build xs 
case xs 
xs 
build xs fst snd inn fst snd inl left fst snd inr right fst snd polytypic 

bs 
case const 

bs empty 

bs par 

bs rec 

head bs tail bs 

bs snd fst fst snd 

case left 
inl bs right 
inr bs neural network layer module net import misc data float deriving show data float float float float float deriving show type float type 
ss replicate rate float rate bias float bias float units 
units 
binds 
float 
float exp float 
float scalp float 
float 
float scalp scalp scalp xs ys scalp xs ys errors float 
float 
float errors ws fx ws fx scalp ws dx rate fx fx ws dx ws float 
float 
iss cs ws zipwith ws dws rate fromint length iss dws iss cs replicate length ws dw dw iss cs dw iss cs scalp ws dw fx dws zipwith 
dx dws dx fx fx outputs float 
float outputs iss ws map 
scalp bias ws iss 
float iss outputs iss errors bias iss cs map bias iss cs binds 
outputs iss haskell report www cs chalmers se haskell haskell report gentle haskell www cs chalmers se haskell haskell report tutorial html hbc compiler www cs chalmers se hbc hbc html konstantin laufer 
type classes existential types ftp ftp math luc edu pub laufer papers ps gz fudgets system www cs chalmers se research functional fudgets patrik jansson 
polyp www cs chalmers se poly polyp anne johan 
feed forward neural networks 
kluwer academic publishers 
john koza 
genetic programming 
mit press 
richard dawkins 
blind watchmaker 
norton 

