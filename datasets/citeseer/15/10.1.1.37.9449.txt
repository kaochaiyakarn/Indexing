transformation tool pure prolog programs algebraic specification jacob programming research group university amsterdam kruislaan sj amsterdam netherlands mail jacob uva nl technical report contains complete annotated algebraic specification translog transformation tool pure prolog programs 
translog supports interactive transformation part program means buttons representing transformation steps 
possible pure prolog semantics preserved 
choice pure prolog semantics induces number conditions satisfied particular transformation step applied 
keywords logic programming program transformation algebraic specification 
report complete algebraic specification translog tool transformation pure prolog programs 
report contain theory logic program transformation description translog tool relates various theoretical considerations 
subject reader referred ts sek pp 
second subject see bru 
translog tool transformation steps implemented unfolding folding goal definition argument permutation instance goal replacement goal switching definition elimination 
transformation step correct respect semantics resulting program semantics original 
achieve correctness operations require appropriate applicability conditions general depend chosen semantics 
focus prolog semantics sequence answer substitutions semantics 
translog tool equipped navigation options 
options allow user switch current program previous program gamma program transformation sequence gamma pn translog tool developed means algebraic specification 
technique appears suited specifying kind operations required context program transformation 
specification created asf sdf meta environment klint kli 
system offers interactive development environment generation programming environments 
window oriented user interface simply defined system 
report focuses algebraic specification translog tool 
section provides short asf sdf formalism 
translog specification sections 

translog specification outline bru version translog tool described 
version include test applicability conditions related semantical framework 
algebraic specification report far simple 
asf sdf meta environment asf sdf meta environment kli interactive development environment generation interactive systems manipulating programs specifications texts written formal language 
generation process controlled definition language may include features syntax definition checking type checking execution programs target language 
sdf shorthand syntax definition formalism 
sdf lexical syntax context free syntax language defined algebraic style 
asf shorthand algebraic specification formalism 
asf function may defined terms constructed syntax defined sdf specification 
case term program clause goal 
functions model transformations terms 
asf sdf specifications modular structure 
different parts specification written separate modules 
module explicitly defined part visible outside world part hidden local particular module 
module imported module 
visible part imported module modules imported module accessible importing module 
asf sdf meta environment offers possibility syntax directed editing asf sdf specifications 
mentioned specification consists series modules 
individual module created edited invoking module editor 
editing operation implementation module updated immediately 
lexical scanner parser pretty printer term rewriting system implementation set equations derived module automatically 
module term editors may invoked order edit evaluate terms defined particular module 
term editor uses syntax defined module parsing textual representation terms 
equations module applied reduce term normal form 
term editor customized adding buttons pull menus editor window 
way user interface particular application designed 
user interface defined special purpose language seal koo 
translog specification outline complete translog specification consists modules 
subsequent sections modules documented 
section describes modular structure specification 
set translog modules divided subsets 
basic modules 
subset contains modules ffl layout ffl booleans modules contain elementary specification layout characters booleans 
section 
syntax modules 
prolog syntax translog specification specified modules ffl ffl translog specification uses number functions part prolog program clause replacement list normalisation functions grouped modules ffl ffl ffl sets prolog terms specified separate module 
syntax modules section 
unification modules 
unification prolog terms basic operation translog specification 
modules concerned unification ffl substitution ffl equations ffl unification modules section 
transformation modules 
translog transformation steps specified separate modules 
modules ffl unfold ffl fold ffl define ffl ffl ffl cleanup module imported modules unfold fold 
transformation modules section 
user interface modules 
subset contains modules related translog user interface ffl ffl translog ffl log ffl ffl translog seal module written special purpose language seal 
modules section 
import graph modules listed module translog seal excluded shown 

translog specification outline layout booleans 
unification equations substitution unfold fold cleanup 
log translog translog seal define translog modules import graph basic modules basic sorts functions asf sdf specification 
reasons completeness simple modules listed section 
layout module defines basic asf sdf layout syntax 
comments defined character sequence starting newline character newline character comment string 
space character tab character newline character defined layout characters 
module layout exports lexical syntax nn nn layout layout booleans module booleans provides sort bool constants true false operators logical logical function 
priorities defined expect 
module booleans imports layout exports sorts bool context free syntax true bool false bool bool bool bool bool bool bool bool bool bool bool priorities bool bool bool bool bool bool hiddens variables bool equations true true false true false false false true true false 
syntax modules syntax modules translog tool operates programs written edinburgh prolog syntax 
syntax definition section sicstus prolog manual sic 
definition cover complete syntax merely relevant subset 
syntax modules list items implemented ffl integer numbers defined 
floating point numbers binary numbers octal numbers hexadecimal numbers recognized translog tool 
ffl symbol characters allowed 
subset directed definition arithmetic operators specified 
ffl semicolon goals disjunction defined 
ffl infix notation predicate arguments defined 
priorities defined various built operators 
means terms ambiguous 
ambiguity solved user 
prolog syntax defined modules 
number functions prolog terms constructs defined modules 
sets prolog terms specified separate module 
bru discussed body goals program clause labeled fold allowing fold allowing 
body goal program pn actual label value determined transformation history leading pn requires internal program representation labels added body terms 
syntax internal representation functions labeled program specified module 
module contains definition lexical syntax various prolog tokens atoms numbers integers operator symbols variables 
basic elements generic prolog term sort term defined 
term infix operator allowed 
furthermore various syntactical representations prolog list construct defined 
term sort termlist denotes sequence prolog terms 
translog specification variables sort declared module defined 
variables exported module imports module module variables concerning various term sorts declared exported 
module imports layout exports sorts term termlist integer variable atom list lexical syntax integer gamma integer za variable za atom atom atom atom atom gamma context free syntax integer term variable term atom term atom termlist term term atom term term list term list termlist list termlist list list termlist variable list termlist term term termlist termlist variables variable integer term list atom syntax prolog program specified module name 
specification straightforward 
sorts defined program clause 
program defined sequence zero clauses 
clauses 
empty programs useful functions 
clause unit clause head clause head body 
symbol defined connective head body 
body consists termlist terms separated commas 
noticed syntax definition module liberal 
example clause correct respect syntax definition elementary terms prolog terms defined previous module 
module function syntaxcheck defined 
function determines term sort program correct respect prolog syntax 

syntax modules module imports exports sorts program clause context free syntax clause program term clause term termlist clause clause clause program program variables clause clause program prolog different terms may represent list 
module function norm defined transforms list terms standard normal form 
normal form non empty list built full atom arguments element list list remaining arguments 
function normalise term infix operator prefix notation 
normalisation function specified efficiency reasons normalising term normal form atom termlist operations kind terms number equations significantly reduced 
function restore restores square bracket representation prolog list 
module imports exports context free syntax norm term term restore term term equations norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm norm restore restore restore restore restore module contains number functions prolog terms programs 
functions needed coming modules 
grouped subsets ffl boolean functions test property certain term pair term variable integer 
list empty 
variable occur term 
function uses help function function investigates variable occurs normalised term see previous section 
function investigates term part body clause 
ffl boolean function check syntax prolog program 
function syntaxcheck checks term sort program correct respect prolog syntax rules 
function uses number help functions check syntax clause head clause body clause term body clause 
function checks syntax clause exported module deals definition new clause see section 
noticed correctness lexical syntax prolog terms basic syntax prolog program guaranteed term sort program 
function syntaxcheck checks term allowed head clause goal body clause 
ffl functions term clause program 
function simplify simplifies predicate term term predicate underscore arguments 
function needed determining terms hold predicate arity 
function head produces head term clause 
functions add clause program remove clause program replace clause program 
functions varset varset produce set ot variables occur clause term 
sort term set imported separate module 
module section 
module imports exports context free syntax isvar term bool term bool isempty list bool variable term bool 
syntax modules term clause bool syntaxcheck program bool syntaxcheck clause bool simplify term term head clause term clause program program clause program program program clause program program varset clause term set varset term set hiddens context free syntax variable term bool syntaxcheck term bool syntaxcheck termlist bool syntaxcheck bt term bool equations iv isvar true iv isvar false ii true ii false isempty true isempty false oc norm oh true oh true true oh false ib true ib false sc syntaxcheck true sc syntaxcheck syntaxcheck syntaxcheck cc syntaxcheck syntaxcheck cc syntaxcheck syntaxcheck syntaxcheck bc syntaxcheck syntaxcheck bt bc syntaxcheck syntaxcheck bt syntaxcheck hc syntaxcheck true hc syntaxcheck true hc syntaxcheck false bt syntaxcheck bt true bt syntaxcheck bt true bt syntaxcheck bt true bt syntaxcheck bt true bt syntaxcheck bt false simplify simplify simplify simplify simplify head head sv varset varset sv varset varset varset st varset fg st varset fvg st varset fg st varset varset st varset varset st varset varset varset st isempty true varset fg st isempty false varset varset norm st varset varset varset 
syntax modules various translog functions sets prolog terms needed 
module associated sort term set basic set operations union intersection set difference membership specified 
module imports booleans exports sorts term set context free syntax term set term set term set term set term set term set term set term set term set term set term term set bool term set term set variables ts term set equations se ft ft un ft ft ft ft ft ftg ft ft ts ts fg di ft ft ft ft di ts ts ts ft true ft false module syntax prolog program labeled body goals specified 
sort labeled body term defined label term 
label specified sequence lower case characters 
syntax definition labeled program labeled clause labeled term list straightforward 
module number functions specified attach labels program clause 
functions set label remove labels program clause 
functions change label program clause 
functions change label 
functions lhead la la la counterparts functions non labeled programs module 
function la version produces labeled version unlabeled clause taken labeled program 
boolean function isdefined determines predicate defined labeled program 
module imported 
error messages needed moment reason importing module avoiding multiple inputs various transformation modules 
module imports exports sorts label laclause laprogram lexical syntax label context free syntax label term term laclause term laclause laclause laprogram laclause laclause laprogram laprogram set label label program laprogram set label label clause laclause set label tl label termlist set label label term strip label laprogram program strip label laclause clause strip label tl termlist strip label term change label label laprogram laprogram change label label laclause laclause change label tl label change label label lhead laclause term laclause term set la laprogram laclause laprogram laprogram la laclause laprogram laprogram la laclause laprogram laprogram la version clause laprogram laclause isdefined term laprogram bool variables la label lp laprogram lc laclause lc laclause lt lt 
syntax modules lt equations slp set label la slp set label la lc set label la lc set label la lc lc slc set label la slc set label la set label tl la slt set label la lt set label tl la lt slt set label la lt set label tl la lt set label tl la lt lt slt set label la la rlp strip label rlp strip label lc strip label lc strip label lc lc rlc strip label rlc strip label lt strip label tl lt rlt strip label lt strip label tl lt rlt strip label lt strip label tl lt strip label tl lt lt rlt strip label la clp change label la clp change label la lc lc change label la lc lc change label la lc lc lc lc clc change label la clc change label la lt change label tl la lt ctl change label la lt lt change label tl la lt lt ctl change label la lt lt change label tl la lt lt change label tl la lt lt lt lt clt change label la la la lh lhead lh lhead lt lv strip label lc lc varset lrc la lc lc lc lc lc lc lc lc lrc la lp lc lp lp lac la lc lc lc lc lrc la lc lc lc lc lc lc lrc la lc lp lp lv strip label lc la version lc lc lc lc idf simplify lhead lc simplify isdefined lc lc lc true idf isdefined lp false unification modules unification terms plays important role transformations specified section 
section modules related unification 
module unification general unifier mgu list term equations constructed 
unification function martelli montanari unification algorithm mm 
algorithm set equations input 
number steps set transformed new set equations 
steps executed failure detected final set contains general unifier 
output unification function set equations set substitutions failure 
shows function needed resulting substitutions applied clauses bodies terms module substitution syntax substitution defined result sequence substitutions clause body module equations syntax set equations defined 
module unification martelli montanari unification algorithm specified 
modules detail 

unification modules substitution module syntax substitution variable term 
defined 
substitution considered normal form sort sub 
furthermore term sort subs denotes sequence zero substitutions 
constant fail sort subs denotes failure unification algorithm 
binary operators substitution sequences specified 
omega operator joins substitution sequences smart way conflicts substitutions different substitutions variable detected handled 
furthermore sequences equal constant fail result omega operator equal fail 
phi operator joins substitution sequences simple way sequences simply glued big sequence 
omega operator uses help functions ismember investigates variable part substitution sequence function produces term substituted variable 
function local function checks sequence substitutions proper variable renaming variable renamed variable different variables renamed variable 
final part module effect sequence substitutions various constructs clause termlist body termset term specified 
list substitutions construct denoted 
exported functions define effect substitution labeled program construct 
module substitution imports exports sorts subs sub context free syntax variable term sub subs fail subs subs omega subs subs subs phi subs subs ismember variable subs bool variable subs term subs bool clause subs clause termlist tl subs termlist term subs term term set ts subs term set laclause lc subs laclause ltl subs lt subs variables subs hiddens context free syntax substitution subs bool equations sj fail omega fail sj omega fail fail sj ismember true 
omega fs omega sj ismember true 
omega fail sj ismember false fs omega fs 
omega 
sj fg omega ij phi fail ij fail phi ij fs phi fs fs ismember fs 
true ismember false fs 
ir fs 

false ir fg true 
isvar fs cl cl tl tl tl tl tl tl tl tl 
unification modules va li li tl li tl li tl li tl ts fg ts fg ts ftg ts ft ts ft ts ft ft ts ft ft ts ft lcl lc lcl lt lc lt ltl ltl lt lt lt lt ltl lt ltl lt ltl lt lt ltl lt lt lt ltl lt lt lat la lt la equations module defines syntax set equations prolog terms 
set equations basic input martelli montanari unification algorithm specified section 
order avoid conflict built asf sdf operator algebraic equations syntax term equations operator terms 
sort eq related single equation sort eqs related sequence equations 
sorts substitution function defined 
defining equations substitutions unification reduced substitutions separate terms defined previous section 
module equations imports substitution exports sorts eq eqs context free syntax term term eq feq eqs eq subs eq eqs es subs eqs variables eq feq feq eqs eqs equations eq es fg es fg es feg es fe es fe es fe fe es fe fe es fe unification unification prolog terms specified martelli montanari algorithm mm 
original algorithm takes set term equations input produces modified set equations output 
mentioned specification sequence substitutions produced set equations 
algorithm contains conditional steps 
iterative process steps applied producing output result 
result may failure mgu 
giving specification give concise description unification algorithm 
take equation sequence perform associated action 
vn replace equation equations vn 
halt failure 

delete equation 

variable replace equation equation 
occur occurs perform substitution 
current equation 

occurs halt failure 

unification modules algorithm terminates actions performed failure arises 
note original version algorithm equation nondeterministically chosen set equations 
version take equation remaining set 
difference influence final result 
module unification functions specified 
function mgu determines general unifier sequence substitutions list equations input argument 
function mgu nv determines general unifier non variable terms 
function mgu tl determines general unifier term lists 
local function mgu arguments producing result exported function mgu 
equations function mgu closely resemble algorithm described 
restore function needed general unifier lists determined normalising list representation see section 
equations functions mgu nv mgu tl need explanation 
module unification imports equations exports context free syntax mgu eqs subs mgu nv term term subs mgu tl termlist termlist subs hiddens context free syntax mgu eqs subs subs equations mg mgu eqs mgu eqs fg isvar false isvar false mgu nv fail mgu ft mgu fe es omega isvar false isvar false mgu nv fail mgu ft fail mgu fv mgu fe isvar false mgu ft mgu fv false mgu fv mgu fe es 
restore omega 
restore true mgu fv fail mg mgu eqs nv mgu nv fg nv mgu nv fg nv mgu nv mgu ft nv mgu ft mgu nv omega mgu nv tl tl nv mgu nv mgu ft nv mgu nv fg nv isempty false isempty false mgu nv mgu nv norm norm nv mgu nv fail tl mgu tl mgu nv transformation modules translog tool offers transformation steps prolog programs unfold fold define associativity permutation goal switch program clean 
transformation specified separate module 
section supporting module 
unfold presenting algebraic specification unfold transformation give informal description algorithm applied 
unfolded clause 
body goal unfolded 
current program 
unfold transformation defined follows clauses program head unifies mgu head fail applicability conditions satisfied construct variant variables common construct resolvent body variant add program remove program function unfold input arguments current labeled program body goal clause holds body goal unfolded clause 
result function transformed program 
done function 
function produces clauses added program result unfold operation error message case applicability conditions satisfied 
case current program unfolded clause replaced new clause second case error message returned 
error message consists clauses clause containing standard error message clause containing specific indication kind error 
clauses labeled el error label 
label meaning 

transformation modules function recursively investigates clauses program 
head certain clause unifiable body goal unfolded result mgu nv function equal fail clause selected unfolding clause unfold applicability conditions checked 
investigated body goal unfolded leftmost goal body unfolded clause 
case resulting clause constructed 
conditions deterministic unfolding non left propagating unfolding checked 
case conditions satisfied error message returned 
conditions satisfied resulting clause constructed added result function 
process auxiliary operations functions needed 
investigating head clause unifiable selected body goal variant clause constructed variables common clause body goal resides 
done function variant specified separate module see 
head variant clause selected body goal unifiable applicability conditions satisfied new clause program partial result unfold operation constructed function resolvent 
function replaces body goal unfolded body unfolding clause 
precise body goal replaced body variant unfolding clause furthermore substitutions result unification unfolded goal head variant clause applied new clause 
special case arises unfolding clause unit clause body unfolding clause empty 
case unfolded body goal vanishes 
goal body goal unfolded clause unfolded clause unit clause 
course cases required substitutions performed new clause 
local boolean function tests presence body goals 
functions applied checking applicability conditions 
definition functions straightforward 
module unfold imports exports context free syntax unfold laprogram term clause laprogram laprogram term laclause laprogram resolvent laclause term laclause laclause hiddens context free syntax unf laprogram laclause laprogram laprogram ucl laprogram term laclause laprogram ucl laprogram term laclause laprogram ucl laprogram term laclause laprogram ucl laclause term laclause laprogram term laclause bool term laprogram bool term laclause subs bool bool equations la version lp lc lp lc lp unfold lp unf lp lc lp uf strip label lp false unf lp lc lp la lp lc lp unfold uf unf lp lc lp lp ur lc ur variant lc lc lc lc lc lc ucl lc lc lc uch mgu nv lhead lc fail ucl lc lc lc lc lc uch mgu nv lhead lc fail ucl lc lc lc ucl lc lc lc uch lc true ucl lc lc lc la resolvent lc lc lc lc uch lc false ucl lc lc lc ucl lc lc lc uch lc false ucl lc lc lc set label el standard uch lc true ucl lc lc lc ucl lc lc uch mgu nv lhead lc lc true resolvent lc lc lc ucl lc lc lc uch mgu nv lhead lc lc false ucl lc lc set label el standard lu la lt true lu lc false mgu nv lhead lc fail lc lc lc false lp true iv strip label tl lt lt la lt mgu tl tl iv lc false 
transformation modules re mgu nv change label tl fa lt lt resolvent lt lt la lt lt lt lt lc re lt lt false mgu nv resolvent lt la lt lt lt lc re lt lt true mgu nv resolvent lt la lt lc ne true ne lt false fold bru explained applicability conditions fold transformation step complex 
translog tool applies tamaki sato folding 
preservation prolog semantics furthermore required folding step reversible case head folded clause new predicate leftmost body goal folded clause labeled fold allowing 
looking fold module detail algorithm applied 
folded clause 
body goals folded 
current program pnew program consisting new defined clauses 
fold transformation step defined follows 
purposes lines algorithm numbered 

exists clause body unifiable 
tamaki sato conditions satisfied 
apply reversible folding step 
exists clause new body unifiable 
predicate head defined 
tamaki sato conditions satisfied 
head predicate old predicate leftmost body goal labeled fold allowing 
apply folding step 
report error old predicate label fold allowing 
report error violation conditions 
report error folding clause undefined head predicate 
report error folding clause new fold folding step implies replacement clause clause head mgu body folding clause turn actual specification fold operation module name 
function fold arguments number body goals folded body goal sequence body goals folded clause body terms folded labeled program new containing clauses resulting previous define transformation steps current labeled program result fold function labeled program containing transformed program error message 
various prompt functions applied dialogue user prompted specify number body goals involved folding step 
dialogue explained section user interface specified 
specification fold algorithm listed number local help functions applied 
table shows correspondence line numbers fold algorithm local functions 
help functions explained 
number function 
test conditions equation 
test conditions equation 

default equation test conditions equation 
test conditions equation 
test conditions equation 
test conditions equation 

error message default equation 
error message default equation 
error message default equation 
error message default equation help functions applied 
list functions summarized 
ffl extracts number body goals body clause 
second argument function indicates body goal required sub sequence 
ffl tries find folding clause program sequence body goals folded clause 
case folding clause pseudo clause fail 
returned 
ffl returns term set internal variables clause variables occur body head 
ffl restrict filters sequence substitutions substitutions concerned variable member term set 
ffl image groups images substitution sequence term set 
ffl nonrecursive boolean function checks head predicate clause occurs program clause part program 
ffl help function previous function 
function receives input arguments simplified term stripped program equal original program clause original predicate defined 
ffl produces result folding step clause sequence body goals replaced single head folding clause 
label new body goal set fa fold allowing 

transformation modules ffl implements final test head predicate folded clause old predicate leftmost body goal labeled fold allowing 
function arguments folded clause new supposed predicate defined new old predicate 
module fold imports exports context free syntax fold term term clause laprogram laprogram laprogram program clause clause clause hiddens context free syntax termlist clause laprogram laprogram laprogram termlist clause clause laprogram laprogram laprogram termlist clause laprogram laprogram laprogram termlist clause clause laprogram laprogram laprogram termlist clause clause laprogram laprogram laprogram termlist clause clause laprogram laprogram subs laprogram term term clause termlist termlist program clause clause term set restrict subs term set subs image subs term set nonrecursive clause laprogram bool term program bool termlist term laclause laclause laclause laprogram bool equations fold lp lp lp lp rf strip label lp fail lp lp lp lp fold rf lp lp lp lp mgu tl fail ts restrict ts true image ts ts varset fg nonrecursive lp true la version lp lc lc lc lp lp la lp lc lc lp lp lp lp nf strip label lp fail lp lp lp lp nf lp lp set label el standard isdefined lp true lp lp lp lp lp lp set label el standard mgu tl fail ts restrict ts true image ts ts varset fg nonrecursive lp true lp lp lp lp lp lp set label el standard la version lp lc lc lp true lc lc lp lp la lp lc lc lp lp set label el standard sbp sbp sbp sbp sbp 
transformation modules fc mgu tl fail fc fail iv varset varset re restrict fg ts fg re ts true restrict fs ts restrict 
ts 
phi re restrict 
ts restrict fs ts im image fg fg im image 
ftg image fs nr simplify simplify strip label lc lc true nonrecursive lc lt lc true nr nonrecursive lp false onr simplify false onr simplify false onr simplify false onr true laf lt la lt lt fa lt laf lt la lt lt lt isdefined lp false lt lp true define isdefined lp true fa lt lp true lc lp false fp give number atoms folded fp type number new line followed dot fp focus number select button continue fp define new clause predicate definition added program define transformation step 
function define arguments new clause current program program pnew consisting previously defined new clauses 
checks performed new clause added current program 
syntax checked 
check fails error message returned new program 
checked predicate defined new clause new predicate defined current program new new clause non recursive 
new clause added program body goals labeled fold forbidden ff 
function adds new clause new conditions checked 
structure user interface guarantees addition harmless 
see details section 
various prompt functions prompting user enter definition new clause 
local function checks clause non recursive head predicate may occur body clause 
module define imports exports context free syntax define clause laprogram laprogram laprogram clause laprogram laprogram program clause clause context free syntax clause bool equations de syntaxcheck false define lp lp set label el standard de syntaxcheck true head isdefined lp false isdefined lp false true set label ff lc define lp lp la lc lp de define lp lp set label el standard 
transformation modules nr simplify simplify false nr true nd set label ff lc lp la lc lp dp define new clause new line dp focus select button continue dp replacement goal sequence sequence incorporated translog tool 
supposed predicate represents associative operation defined recursion argument known append predicate 
transformation look predicates arity operation arguments produces third argument 
list concatenation inverse operation mode possible third argument extract arguments 
leads modes operation mode mode 
transformation simple give separate definition turn specification immediately 
function input arguments body goal involved transformation clause holds body goal current program 
boolean functions check arguments right position crucial variables local goals involved 
help functions job modes produce new clause 
error message returned required permutation allowed 
module imports exports context free syntax term clause laprogram laprogram hiddens context free syntax term clause bool term clause bool term laclause laclause term laclause laclause equations ap true la version lp lc lc lc lp la lp lc lc ap true la version lp lc lc lc lp la lp lc lc ap lp set label nf standard aci varset false true aci false lt la la lt lt la la lt aco varset false true aco false aho lt la la lt lt la la lt preparing body clause certain transformation step folding associativity permutation may required switch order adjacent body goals 
potentially dangerous operation shared variables changing termination properties 
switching step needed cases 
incorporated transformation step translog tool 
furthermore restrict transformation applicability condition 
specification switch function simple 
input arguments function represent body goal switched right hand neighbor clause holds body goal current program 
local help function reasons clarity operation specified single long equation 
module imports exports context free syntax switch term clause laprogram laprogram hiddens context free syntax term laclause laclause equations gs la version lp lc lc lc switch lp la lp lc lc st lt la la lt lt la la lt 
transformation modules cleanup transformation sequence current program contains clauses 
reached clauses contain definition relevant predicates 
safely removed 
give definition transformation step 
current program 
selected head term 
ts set goals ts reached clause head 
set ts contains predicates arity 
select clauses head predicate arity element ts 
resulting sequence clauses constitutes program result cleanup transformation step 
transformation specified module cleanup 
visible function function cleanup 
function input arguments head term current program 
head term indicates head predicate reachability analysis started 
analysis performed local function 
function produces set goals predicates reached head term 
clauses contain definition predicates selected result cleanup function 
selection performed function 
respect goal set goals considered different predicate different arity predicates different 
adding goal goal set goal simplified arguments replaced underscores 
done function simplify specified module 
required goal set constructed straightforward way starting head term argument function program clause simplified head investigated 
body goals clauses may lead new elements goal set 
clause investigated removed investigated program 
way infinite loops caused recursive clauses avoided 
function selects clauses resulting program testing clause current program simplified head constructed goal set 
case clause added resulting program 
clause skipped 
module cleanup imports substitution exports context free syntax cleanup term laprogram laprogram hiddens context free syntax termlist program program term set term set laprogram laprogram equations cu strip label lp ts cleanup lp ts lp gs fg gs simplify simplify ft gs simplify simplify ft gs gs sc ts sc simplify lhead lc ts true ts lc lp ts lc lc la lc lp sc simplify lhead lc ts false ts lc lc ts lc unfold fold transformation steps variant un folding clause needed order avoid unwanted identification variables accidentally name 
variant clause created module name function variant takes un folding clause un folded clause input arguments 
shortly explain single equation function 
function set created variables labeled clause 
function sequence substitutions deduced variable sets 
variable clause lc clause lc substitution added 
substitution variable replaced new variable variable set lc variable set lc 
new variable name created repeated addition character sequence old variable name unique variable name derived 
derived substitutions applied clause lc 
resulting variant clause variables common clause lc 
module imports unification exports context free syntax variant laclause laclause laclause clause clause clause hiddens context free syntax newvar variable term set term prime variable variable term set term set subs variables char equations va lc ts lc ts variant lc lc lc lc ts ts ts ts vc varset ts varset ts ts ts ts ts vs fg ts fg 
user interface modules vs newvar ts fv ts 
omega ft ts fv nv prime ts false newvar ts prime nv prime ts true newvar ts newvar prime ts pr prime variable variable user interface modules modules related user interface translog tool 
module contains messages displayed transformation step allowed 
module translog groups transformation steps 
module log defines number functions related storage transformation sequence 
module contains conditions determine button translog window enabled disabled 
module translog seal asf sdf specification seal script 
seal koo user interface specification language definition user interface asf sdf term windows 
applicability conditions related specific transformation step fail error message displayed transformed program 
choice give error messages syntax prolog program clause 
easy error message program window 
module number error messages defined unit clauses quoted atom followed full 
specific error message preceded standard message selected transformation allowed 
part error message boolean function 
function determines program error message consists sequence unit clauses quoted atoms clause standard error message 
function module log 
module imports exports context free syntax standard clause clause clause clause clause clause clause clause clause translog clause program bool equations st standard selected transformation allowed de deterministic unfolding non left body term possible non left propagating unfolding non left body term possible fe folding clause current program pnew fe definition head folding clause current program fe conditions fail folding clause pnew fe old head predicate fold allowing leftmost body goal ne syntax error new clause re new clause correct ae proper permutation arguments possible standard true false translog translog module simple serves collecting module various transformation steps 
adding new transformation phase means adding related module import list translog module 
module translog imports unfold fold define cleanup 
user interface modules log translog system offers navigation functions respect sequence transformed programs 
process transforming initial program intermediate results programs stored 
furthermore sequence clauses defining new predicates clauses resulting define transformation step stored 
call sequence new go back transformation sequence new related sequence 
previous command issued define transformation step newly defined clause removed new chosen store single programs 
sections fold transformation step may clear labeled programs stored body goal clause labeled fold allowing fold forbidden 
displaying program translog window labels stripped body goals 
algebraic specification formalisms asf sdf system offer state variables 
ongoing transformation sequence program stored variable 
chosen store program sequence separate asf sdf windows named loga logb 
suppose transformation sequence pn current program displayed translog window 
window loga contains past presence sequence programs window logb contains sequence programs pn case logb window empty 
program transformation sequence stored actual contents new construct sort 
sort represents sequence sort 
constant dummy represents dummy initialization sequence 
various append functions append list 
function appends transformed program new list list 
pnew changed 
function appends transformed program new version pnew list 
function define transformation step 
function simply appends list 
function appends list second program error message 
need function explained section 
function delete removes list 
function initialize initializes list dummy value followed consists empty program new initial program labels set fold allowing 
functions return program new list 
fold functions execution fold transformation step 
function fold store stores body goal folded folded clause temporarily artificial program 
see program stored logb window 
label ff folded clause meaning added labeled programs stored window 
functions fold term fold clause retrieve term clause artificial program 
module log imports exports sorts context free syntax laprogram ffi laprogram pi dummy laprogram laprogram log laprogram delete initialize program laprogram laprogram fold store term clause fold term term fold clause clause variables lp laprogram dp dp pi dp pi equations app dp dp pi lp ffi lp dp lp dp pi lp ffi lp apn dp lp lp dp pi lp ffi lp apa dp dp dp pi dp strip label lp false dp lp ffi lp dp pi lp ffi lp strip label lp true dp lp ffi lp dp de delete dp pi dp dp set label fa lp initialize dummy pi ffi lp la dp pi lp ffi lp lp lan dp pi lp ffi lp lp lfs fold store ffi set label ff lft lp fold term lp ffi lp lft fold term dp error lfc fold clause lp ffi lc strip label lc lfc fold clause dp error 
user interface modules part translog user interface built buttons transformation step 
buttons navigation functions program sequence initialization storage program sequences windows 
language seal offers opportunity enable disable button certain condition 
module conditions specified boolean functions 
possible test complete set applicability functions transformation step function 
case button enabled transformation step allowed 
chosen follow approach reasons 
determining outcome applicability conditions lot computations useful required transformation step computation mgu 
separate test conditions execution transformation step kind computations twice 
case integration test transformation step cases computation required 

integrating test conditions execution transformation step possible return point error message transformed program 
case conditions checked enabling disabling button possible 

evaluating applicability conditions transformation steps requires considerable amount time 
means update translog window system re evaluates button conditions user wait 
chosen avoid delay 
turn functions module 
function unfold yields true goal unfolded goals body clause goal variable 
holds function fold 
function define yields true argument program message 
checked boolean function explained 
function yields true second argument clause holds consecutive goals predicate arity 
argument function indicates body goal 
function switch checks selected goal resides body clause exists right neighbor goal body 
function clean yields true term argument head clause second argument 
condition equation needed dialogue fold transformation step 
dialogue explained section 
functions determine continue button enabled 
fold step define step require simple dialogue user 
dialogs format question translog answer user transformed program user entered answer selected appropriate term continue button enabled 
case fold transformation step function checks required number body goals folded folded clause 
number restricted interval 
local function 
case define transformation step function checks translog window contains prompt related step followed newly defined clause 
equations functions previous obvious yield true exists previous program program sequence programs yield false 
previous button enabled part dialogue fold prompt define prompt translog window 
function init yields true argument program error message dialogue message 
local function checks argument program error message dialogue message 
clause program inspected 
module imports translog log exports context free syntax unfold term clause bool fold term clause bool define program program bool term clause bool switch term clause bool clean term clause bool term bool program bool previous program bool bool init program bool hiddens context free syntax term term clause bool program bool equations eu true unfold isvar eu unfold false ef true fold isvar ef fold false ed define ea true ea false es switch true es switch false ec false clean true 
user interface modules ec clean true ec clean false efc fold term dp fold clause dp dp efc dp false edc true edc false ep dp dp pi dp previous dp pi dp true ep previous dp false en dummy pi dp true en dp false ei init bp true bp true bp true bp true bp true bp false nm standard false nm false nm false nm true translog seal translog seal user interface translog tool defined seal module translog seal 
module buttons defined translog term window 
go details language seal 
script understood global sense knowledge 
generic structure button definition read button button name 
condition 
enable operations focus windows 
doc comments 
condition determines button enabled 
change translog term window condition evaluated 
outcome evaluation false button disabled clicking effect 
outcome true button enabled highlighted clicking specified operations performed 
operations comprise focus operations move focus position upwards syntax tree assignments assign contents focus focus variable assign result function call module focus window creation log windows 
go details single button discuss general aspects 
buttons enabling condition consists function call functions module test sort term focus loga window 
second test yields true loga window created 
way guaranteed startup time initialize button enabled 
buttons operations section starts sequence assignments various constructs term clause possibly labeled program assigned seal variables 
transformation function called result call assigned seal variable newvar 
result labeled program 
stripped version program assigned focus translog window labeled version appended possibly new version pnew sequence loga window 
moment append operation focus loga window placed stored far sequence 
new focus contents new appended 
done performance reasons update contents focus contents pretty printed seal system 
takes lot time 
focus operation loga focus previous places focus sequence 
transformation step contents logb window flushed 
fold button define button simple script 
dialogue prompt placed translog window 
operations section fold button preceded storage information logb window 
remaining part script continue button 
general assignments distinction fold continue define continue loops 
loop contains necessary seal code required operation 
scripts previous button button straightforward program taken loga logb window displayed translog window labels stored logb loga window 
initialize button takes care creation initialization loga window logb window 
enabling condition function syntax program checked 
syntax ok initialize button enabled 

user interface modules configuration language translog button unfold unfold focus focus loga focus enable focus focus loga focus loga focus newvar unfold unfold focus root focus strip label newvar loga focus log newvar loga focus previous logb focus root logb focus log dummy doc unfold transformation prolog program button fold fold focus focus loga focus enable focus focus logb focus root logb focus log fold store focus root focus fold doc part fold transformation prolog program button define define focus focus root loga focus enable focus root focus define doc part define transformation prolog program button focus focus loga focus enable focus focus loga focus loga focus newvar focus root focus strip label newvar loga focus log newvar loga focus previous logb focus root logb focus log dummy doc permutation atom arguments mode 
button switch switch focus focus loga focus enable translog seal focus focus loga focus loga focus newvar switch focus root focus strip label newvar loga focus log newvar loga focus previous logb focus root logb focus log dummy doc switch adjacent shared vars allowed button cleanup clean focus focus loga focus enable loga focus loga focus focus newvar cleanup cleanup focus root focus strip label newvar loga focus log newvar loga focus previous logb focus root logb focus log dummy doc remove obsolete clauses respect selected head predicate button continue focus logb focus focus root enable focus focus root logb focus loga focus loga focus loga focus focus logb focus log fold term log fold clause newvar fold fold focus root focus strip label newvar loga focus log newvar loga focus previous focus od focus newvar define define define focus root focus strip label newvar 
user interface modules loga focus log newvar loga focus previous od logb focus root logb focus log dummy doc continuation fold define transformation button previous previous focus loga focus root enable loga focus loga focus previous focus strip label logb focus root logb focus logb focus od logb focus logb focus log logb focus root loga focus root loga focus loga focus log delete loga focus loga focus loga focus od doc step backwards transformation sequence button logb focus enable focus root logb focus root logb focus logb focus od logb focus logb focus focus strip label loga focus loga focus log loga focus previous logb focus root logb focus logb focus log delete doc step forward transformation sequence button initialize init focus root syntaxcheck focus enable focus create loga log initialize create logb log dummy loga focus doc initialize log windows 
krzysztof apt cwi university amsterdam acknowledged initiating stimulating role respect described report 
asf sdf specification benefited unpublished arie van deursen cwi 
eelco visser university amsterdam commenting translog specification 
bru 
translog interactive tool transformation logic programs 
technical report programming research group university amsterdam 
bru 
transformation tool pure prolog programs 
sixth international workshop logic program synthesis transformation 
appear 
kli klint 
meta environment generating programming environments 
acm transactions software engineering methodology 
koo 
connecting semantic tools syntax directed user interface 
editor conference proceedings computing science netherlands csn pages 
sion 
mm martelli montanari 
efficient unification algorithm 
acm transactions programming languages systems 
pp 
transformation logic programs foundations techniques 
journal logic programming 
sek seki 
unfold fold transformation stratified programs 
theoretical computer science 
sic sics swedish institute computer science kista sweden 
sicstus prolog user manual 
ts tamaki sato 
unfold transformation logic programs 
editor proceedings nd international conference logic programming pages uppsala sweden 
