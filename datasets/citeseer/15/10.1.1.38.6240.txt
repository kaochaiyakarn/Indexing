fully automated program transformation system bellegarde pacific software research center oregon graduate institute science technology said functional programs constructed functions pieces 
data structures lists trees glue hold 
compositional style programming produces intermediate data structures 
way circumvent problem perform fusion deforestation programs 
deforestation algorithms elimination useless intermediate data structures recognize expression contains functions consume data structure 
functions put tuple single function traverses data structure 
tactical usually called loops fusion loops tupling implemented tupling technique 
pointed dershowitz fold unfold methodology controlled completion procedure 
idea transformation system completion procedures 
system transformational approach development programs attractive writing small components large software systems 
approach effective fully automated necessary expert transformation strategies transformational approach software design 
prototype fully automated mode component tool suite support method software design reliability reuse developed pacific software research center 
tool suite provides translation ml programs rewrite system input 
includes implementation chin darlington specialization algorithm 
conversion order 
result orthogonal left linear non overlapping constructor constructor system equalities similar set definition equalities pattern matching arguments functional programming rewrite system synthesis completion author supported contract air force materiel command 
id tex bellegar exp bellegar mechanism transform sequence orthogonal terminating constructor rewrite systems get new semantically equivalent ml program efficient 
translates ml program functions set mutually recursive functions pattern matching arguments 
fully automatic version deforestation loops fusion strategies 
semi automatic mode authorizes user input laws facilitate deforestation 
number issues occur automate synthesis process 
ffl generation useless critical pairs major drawback completion application synthesis 
controls production critical pairs ensuring termination completion 
ffl controls orientation critical pairs rules required transformation strategy 
guarantees termination preserved constructor orthogonal rewrite system 
ffl furthermore tactical transformation ensures termination sequence source rewrite system succession synthesized rewrite systems 
ffl synthesis rules introduce new function synthesize 
fold unfold methodology synthesis rules called definition rules rules introduced insight clever user 
mechanisms generate automatically synthesis rule deforestation loops fusion strategies presently implemented 
ffl set rewrite rules inductive theorems input synthesis process semi automatic mode 
laws usually facilitate process fold unfold method 
noticed situations requires laws deforestation simply handled introducing additional synthesis rules length append length 
synthesis rule helps symbol length go consume term substitutes variable inductive law length append append length length 
technique pushing length go inductive variable needed deforestation fails 
compare results fully automatic version semi automatic mode example 
examples pencil transformation functional program thompson 
problem solved program stated follows thompson finite list numbers find maximum value sum contiguous sublist list 
id tex bellegar exp bellegar numbers positive negative integers 
quadratic length list order ml program 
plus max library fun append nil append xs append xs fun map cons nil nil map cons ys map cons ys fun nil nil nil xs append map cons xs nil nil fun sublists nil nil nil sublists xs append map cons xs sublists xs fun sum nil sum xs plus fun map sum nil nil map sum xs sum map sum xs fun fold max nil fold max max fold max fun fold max map sum sublists source program functions 
automatic mode yields result 
performs successful additional synthesis help deforestation loops fusion 
fails 
corresponds attempt eliminate intermediary list produced sym consumed sym definition sym 
consider deforestation intermediary list produced recursive call sym consumed sym 
situations relevant tactical sources failure absence laws 
compositions program completely 
words intermediary lists produced function consumed 
run time difference source transformed program significative 
recall goal deforestation improve run time elimination useless intermediate data structures loss run time efficiency 
semi automatic mode user cleverly provides inductive laws level second synthesis map sum sym append map plus map sum map sum fold max append max fold max fold max fold max map plus plus fold max id tex bellegar exp bellegar fun sym sym sym nil fun sum nil sum plus sumx fun sym nil nil sym sym sym nil nil fun sym max sym sum sym nil fun sym max sym plus sum sym nil sym fun sym sym plus sum sym nil fun sym nil sym plus sym sym sym nil nil fun sym nil nil nil sym sym sym sym fun second sym fully automatic output map plus defined map plus nil nil map plus ys append plus map lus ys outputs fun sym nil sym sym max plus max plus fun second sym loops fusion 
deforestation fails 
laws allow improve complexity 
program linear length list 
thompson id tex bellegar exp bellegar pencil transformation gives result modulo loops fusion 
fun nil plus fun nil max plus achieved initial goal fully automatic deforestation loops fusion functional programs 
fully automatic algorithms deforestation include loops fusion 
reject necessitate laws perform additional synthesis 
extend easily include laws strategies 
limitation termination obligation input rewrite system 
process easily large amount rules 
prototype far rules input 
size intractable perform 
plan tactical automatic insertion laws near 
bell software design reliability reuse proof concept demonstration 
technical report department computer science engineering oregon graduate institute 
tri ada conference november 
bellegarde 
program transformation rewriting 
proceedings fourth conference rewriting techniques applications volume lncs pages 
springer verlag 
bellegarde 
transformation system combining partial evaluation term rewriting 
higher order algebra logic term rewriting hoa volume lncs pages 
springer verlag september 
bellegarde 
termination issues automated 
submitted rta september 
burstall darlington 
transformation system developing recursive programs 
journal acm 
chin 
safe fusion functional expressions ii improvements 
journal functional programming 
chin darlington 
higher order removal modular approach 
unpublished 
id tex bellegar exp bellegar dershowitz 
completion applications 
resolution equations algebraic structures 
academic press new york 
thompson 
type theory functional programming 
addison wesley 
wadler 
deforestation transforming programs eliminate trees 
proceedings second european symposium programming esop volume lncs 
springerverlag 
