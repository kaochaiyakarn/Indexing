categorical semantics parallel program design jos luiz fiadeiro tom maibaum department informatics department computing faculty sciences university lisbon imperial college science technology medicine campo grande lisboa queen gate london sw bz portugal united kingdom llf di fc ul pt doc ic ac uk formalise category theory modularisation techniques parallel distributed systems notion superposition showing parallel program design obeys universal laws formulated goguen general systems theory algebraic properties modularity formulated specification theory 
resulting categorical formalisation unifies different notions superposition proposed literature clarifies algebraic properties respect modularisation 
suggests ways extending revising existing languages order provide higher levels reusability modularity incrementality system design 
role category theory supporting definition scientific laws system modularisation composition recognised early goguen proposed categorical techniques general systems theory unifying variety notions system behaviour including physical components composition techniques goguen goguen 
similar principles formalise process models concurrent systems sassone transition systems synchronisation trees event structures similar categorical models modularisation principles typical object oriented programming formalised ehrich costa goguen 
institutions goguen burstall theories logic shown constitute category morphisms correspond property preserving translations languages modularisation techniques specifications developed basis categorical formalisation sannella tarlecki veloso maibaum 
show unification modularisation principles provided category theory applies mathematical models program behaviour logical specifications parallel program design languages notion superposition francez chandy misra kurki francez forman katz 
superposition proposed means supporting layered approach systems design allowed build developed components drawing services provide augmenting say extending state space actions control activity partially supported esprit bra hcm scientific network ct praxis xxi contract mat 
preserving properties 
mathematics preservation structure usually formalised terms homo morphisms objects concerned 
decided formalise superposition terms morphisms programs 
formalisation show algebraic properties superposition justify assertion parallel program design languages ip interacting processes francez forman unity chandy misra support modular approach program development allowing software general built basic building blocks extended interconnected 
show proposed categorical formalisation contribute increased reusability programs incrementality design process 
having goals mind remainder structured follows 
section defines syntax semantics community language illustrate categorical formalisation parallel program design 
differences community ip unity motivated categorical principles explained sections 
section show superposition sense unity transformation programs captured morphisms category community programs 
show different notions superposition give rise different categories notion spectative superposition satisfies important property point view modularisation model expansive 
section show universal constructions category community programs formalise parallel composition programs capturing sense ip defines superposition 
emerges categorical formalisation uses notion superposition unified strong algebraic sense 
section put formalisation addressing configuration complex systems 
argue diagrams category community programs capture configurations complex systems show community supports incremental design 
notion superposing regulator base program defined francez forman formalised setting superposition observers monitors katz base programs 
algebraic properties spectative superposition fact pushouts preserve spectative morphisms show configuration techniques support modularity development process 
relies elementary notions category theory textbook barr wells 
parallel program design language language chose illustrate categorical formalisation parallel program design community style unity chandy misra combines elements ip francez forman richer model system interconnection superposition 
language community program structure data read var init represents data types program uses intend community develop programs environment represents data types available environment fixed program omitted support levels program design may helpful specifications data types case signature usual algebraic sense ehrig mahr set sort symbols indexed family function symbols set order axioms defining properties operations set external attributes attributes program needs read environment open attributes sense ip set local attributes program variables denote union assumed disjoint set attributes program attributes typed attribute associated sort denote set attributes sort distinction classes attributes necessary formalise superposition forms program interconnection result superposing regulators base programs regulator read attributes base program update 
set action names action name associated command multiple assignment performs atomically act rendez vous point program synchronisation condition attributes initialisation condition action condition attributes guard action action set attributes action change denote set actions change action local attribute expression type formally definition program signature quadruple data signature algebraic sense ehrig mahr indexed families sets 
indexed family sets 
sets symbols assumed finite mutually disjoint 
simplicity shall assume data types fixed omit data clause programs 
shall notation program signatures 
attributes atoms definition terms definition signature language terms defined follows sort ts sn language propositions defined follows st simplicity boolean term abbreviation proposition true 
terms propositions define programs 
definition signature subset command maps attribute term sort commands model multiple assignments 
term denotes value assigned empty case instance communication channels available command empty skip 
definition program pair signature body program triple proposition constraining initial values attributes assigns action command assigns action proposition guard 
easy recognise definition basic features parallel programs guarded simultaneous assignments action defines guarded command distinguishing features community discussed typing naming actions 
domain consists attributes action assignments 
shall dual notion define attribute set actions assign 
difference fact attribute domain action fact performs assignment difference situations important point view concurrency programs discussed illustrated 
anticipating definition semantics programs idea actions allowed occur concurrently part event actions come program components put parallel 
action presents partial view transformation performed global event concerned subset attributes program 
assignment specific domains actions means controlling interference different program components 
separation action names set guarded commands execute important definition superposition support interaction sense ip 
reader familiar ip may state action names act interaction names establish synchronisation rendez vous points processes 
community differs ip action potential point interaction 
interaction names community global ip interaction established outside programs system configuration time identifying action names belonging different component programs 
program interconnection discussed section 
example program pr read int var int bool init false true intuitively program capable successively reading action value external attribute stopping action consecutively reads value value reads 
semantics order define intended semantic structures program need model data type specification 
usual model algebra set assigned sort symbol total function sn function symbol semantic interpretation programs terms transition systems definition transition system consists non empty set states possible worlds initial state non empty set events indexed set partial functions state transition performed event 
interpretation structure signature triple transition system indexed family maps say interprets attribute symbols functions return value attribute takes state interprets action symbols sets events set events action occurs 
notice action take place event 
execution model community general ip unity 
feature important order account independent behaviour different components non strict interleaving execution models 
accounts synchronisation actions characterising action symbols interaction names sense ip 
shall denote dual denote set actions occur event hand possible action take place event 
events correspond environment steps steps performed components system 
interpretation structures intended capture behaviour program context system component open semantics 
worlds identified program states values program attributes 
inclusion environment steps essential compositional semantics program configuration interconnection put forward barringer kuiper context temporal specification concurrent programs 
environment steps taken account state encapsulation techniques typical object oriented design formalised particular classes interpretation structures 
definition interpretation structure signature called locus iff 
locus interpretation structure values program variables remain unchanged events action occurs contains domain 
attribute action occurrence change occurs event action occurs 
worlds global transitions worlds occur level system may imply participation program 
instance fact attributes read modelled constraint 
may happen transition rendez vous synchronisation point involves execution action component contains program variable 
restriction non assignment attributes enforced definition programs 
aspect fully appreciated section program interconnection discussed 
reason semantics action symbols interconnection names discussed section 
definition signature interpretation structure semantics terms sort term sort value taken world propositions defined follows sn iff iff implies iff definition proposition true interpretation structure written iff state proposition valid written iff true interpretation structure 
define interpretation structure model program 
definition program model interpretation structure st 

model said locus locus interpretation structure 
model said polite iff implies 
say model program interpretation structure signature enforces assignments permits actions occur guards true initial state satisfies initialisation constraint 
loci explained correspond models program behaviour encapsulation local attributes enforced 
model polite actions allowed effect transitions world guard satisfied 
notion generalises notion fairness parallel program design 
classification models reflects existence different levels semantics program taken set models depending subset set models considered 
section shall see different semantics associated different notions superposition program morphism literature francez chandy misra kurki francez forman katz 
means absolute notion semantics programs relative programs 
corresponds categorical way capturing meaning objects relationships morphisms defined 
equivalence models order explain algebraic properties design techniques discussed sections superposition need notion equivalence models 
proposed notion similar notion bisimulations concurrency theory de nicola called zig kripke structures van benthem 
definition signature interpretation structures said equivalent iff exist relations 
dom img 

rw st ete rw rw st ete rw 
wrw 
ete 
lemma equivalent interpretation structures states wrw term proposition iff 
proposition equivalent interpretation structures models programs 
program locus iff locus polite iff polite 
program morphisms superposition concept superposition superimposition proposed structuring mechanism design parallel programs distributed systems francez chandy misra kurki francez forman katz 
unity viewed transformation programs extension state space control activity preserving properties 
motivated structure preserving transformations usually formalised terms homo morphisms objects concerned justifying formalisation superposition terms morphisms programs 
signature morphisms having defined programs signatures define signature morphisms means relating syntax programs definition proposition signature morphism signature consists pair total functions action 
program signatures morphisms constitute category sig 
morphisms intended capture relationship exists program system parts components 
signature morphism maps attributes program attributes system component actions 
system contains component attributes component program read attributes system justifying restriction 
restriction put read attributes component program attributes component program system elements 
restriction action domains just means type action preserved morphism 
notice attributes may included domain action morphism 
intuitive system action component may shared components larger domain 
simplicity shall omit indexes referring components morphism 
signature morphisms provide means relating program superpositions 
superposition just relationship signatures syntax 
capture semantics need way relating models programs terms propositions build 
signature morphisms define translations languages associated signature obvious way definition signature morphism tn definition signature morphism interpretation structure reduct interpretation structure 
take transition system interpret attribute action symbols way images 
reducts provide means relating behaviour program superposed 
proposition establishes properties reducts characterised translation properties proposition proposition interpretation structure iff 
readers familiar institutions goguen burstall recognised proposition satisfaction condition 
formalism institution shall categorical techniques institutions 
program morphisms hand start analysing relationships features programs related signature morphism order identify properties necessary morphisms capture superposition 
notions superposition literature francez chandy misra kurki francez forman katz corresponding different meanings preservation underlying program 
consider instance simplest form superposition invasive superposition sense francez forman 
viewed transformation view captured morphisms invasive superposition requires functionality base program preserved terms assignments performed variables allows guards actions strengthened 
characterisation leads definition invasive superposition morphism definition invasive superposition morphism signature morphism 





requirements correspond preservation functionality base program effects instructions preserved initialisation conditions 
requirement allows guards strengthened weakened 
requirements trivial prove proposition invasive superposition morphism 
reduct model model 
easy see reduct loci necessarily loci 
prevent old attributes translations attributes changed new actions actions image 
superposition morphisms preserve locality called definition superposition morphism invasive superposition morphism satisfies 
additional requirement corresponds locality condition new actions added domains attributes source program 
fact signature morphisms preserve domains actions implies domains attributes remain translation 
condition implies property proposition superposition morphism 
reduct locus locus 
example superposition morphism consider programs int int int operations underlying data type pb var int ps var ao int bool init init false ao true fr ao ao true true ao true conditions definitions satisfied mapping fr meaning superposition notice definition possible old actions assign new superposed variables 
instance fr image assigns new attribute ao 
new actions assign old attributes guard old action 
easy see superposition morphisms naturally invasive ones reduct polite model necessarily polite 
guards allowed strengthened trivial prove reducts preserve 
superposition morphisms called spectative francez forman 
correspond notion superposition unity chandy misra 
definition spectative superposition morphism superposition morphism 
injective attributes actions 

proposition language 


condition requires guards remain unchanged condition requires initial condition conservative put constraints initial values attributes 
injectivity means confusion introduced attributes actions 
definition invasive spectative superposition morphisms define categories shall denote inv reg spe respectively 
categories just differ morphisms 
morphisms characterise structural properties category meaning different notions superposition different algebraic properties 
instance prove fundamental property spectative superposition model expansive 
property means spectative superposition change base program base program extended affecting underlying behaviour 
proposition spectative superposition morphism 
model model 
model expansive transformations identified playing important role modularity maibaum bergstra diaconescu 
shall see section property suggests definition notion superposing observer monitor katz base program characterise notion derived attribute auxiliary variable databases programming languages 
parallel composition advantages working proposed categorical framework mechanisms building complex systems components formalised universal constructs 
general principle goguen general systems theory goguen goguen category widgets operation putting system widgets form super widget corresponds colimit diagram widgets shows interconnect 
section investigate applicability principles parallel program design superposition 
purpose show superposition program composition operator sense francez forman special kind concurrent composition operation formalised categorical principles 
notice explicitly mentioned superposition section adjective dropped 
disjoint parallel composition order explain colimits program diagrams correspond activity putting complex system components interconnections start analysing simple case putting components interconnecting analyse interconnections subsection 
coproducts categorical construction explains components put system interconnection 
programs consists finding minimal program superposition 
technically coproduct consists third program morphisms pi program morphisms pi morphism minimality expressed requirement existence uniqueness 
example consider programs pb var int init pr read var int int bool true init false true true coproduct programs returns program pb pr read int var ao int bool init false ao true true ao true ao ao morphisms pb pb pr pr pb pr ao respectively 
notice attribute pr renamed 
coproducts model parallel composition interaction unintended interference removed renaming features names programs 
renaming part coproduct construction enforced construct 
coproduct comes morphisms connecting components parallel composition keep track original names 
universal constructions category theory enforce principle interconnection objects explicitly declared 
subsection show specify interconnections programs 
methodological point view technical aspect community motivated categorical principles distinguishes languages ip unity rely global naming interconnect programs 
approaches promote reuse community rely engineering omniscience enforce separation activities programming components interconnecting 
locality names intrinsic category theory forces interconnections explicitly established outside programs 
categorical framework apt support complete separation structural language describes software architecture language components programmed specified advocated configuration languages conic family magee 
interesting point languages unity adopt global naming methodological restrictions introduced restricted union rule chandy misra command may added underlying program provided assign underlying variables 
principles internalised logical formalism universal properties categorical constructs 
coproducts programs colimits program diagrams computed determining coproduct underlying signatures 
program signatures defined previous sections sets functions sets coproducts compute disjoint unions barr wells 
proposition category sig program signatures admits coproducts 
coproduct signatures signature morphisms disjoint union disjoint union 
morphisms map local attributes local attributes 
domains actions preserved gi di gi gi 
resulting signature obtained isomorphism 
unique way renaming features signatures order avoid clashes 
categorical point view renaming suitable 
pointed coproduct objects returns object morphisms 
morphisms keep track renamings example trace back attribute pb attribute ao back attribute pr 
engineering point view process automated 
level programs coproducts union operator unity applied programs signatures translated signature morphisms conflicts removed proposition reg admits coproducts 
coproduct programs program morphisms obtained follows coproduct 
computed follows gi ai di gi gi ai fi gi ai gi bi gi gi parallel composition interaction illustrated coproducts allow put systems components run side side interference 
systems think put interconnecting components 
categorical mechanisms responsible parallel composition interconnections pushouts 
order illustrate mechanisms consider programs pb pr 
interested interconnecting way pr read attribute pb actions synchronised attribute pr denotes previous value attribute pb 
words want identify attributes pb pr actions identification expressed configuration diagram read int skip pb var int init pr read int var int bool true init false true true object morphisms act communication channel pb pr action establishes rendez vous synchronisation point morphisms identify actions pr pb participate point interaction 
applies attributes morphisms bind external attribute pr local attribute pb 
program looking pb pr characterised providing minimal superposition pb pb pr pr pb pr pb pr equation expresses required interconnection equal equal pb pr mutatis mutandis identified 
triple pb cpr called pushout pb pb pb resulting program morphisms related coproduct computed previous section morphism coequaliser pb pr pb pr 
morphism computes quotients equivalence relations defined pairs actions attributes identified channel morphisms equivalence classes provide required synchronisation sets attribute bindings 
say imposes required interconnections top disjoint parallel composition 
expected unintended interference results name clashes removed seen 
program pb pr computed pushout diagram isomorphism program ps section ps var ao int bool init false ao fr ao ao true ao true morphisms returned pushout fr pb ps ao fr pr ps 
synchronisation set represented program joint action fr 
notice guard conjunction translations guards performs multiple assignment consists local assignments binding attributes results attribute generality prove proposition reg admits pushouts 
pushout morphisms program morphisms obtained follows pushout signature morphisms 
signatures pairs sets pushouts signatures compute amalgamated sums amalgamated sum relative amalgamated sum relative 
morphisms perform amalgamation 
morphisms map local attributes local attributes 
domains attributes preserved ai di ai ai vi 
computed follows morphism coequaliser fj gj aj aj dj gj gj aj 
gi bj gj gi gj fi gi ai fj gj aj ai di gi aj dj gj gi gj ai aj effects pushout summarised follows attributes bound specified attributes middle program channel morphisms particular illustrated read attributes components bound local attributes component resulting attribute local parallel composition actions synchronised rendez vous points established actions middle program channel morphisms resulting joint actions properties domain union domains joined actions perform parallel composition assignments joined actions interconnecting morphisms injective usually case guarded conjunction guards joined actions reflect interference assignments generated locally see discussion initialisation condition resulting program conjunction initialisation conditions component programs 
notice choice arbitrary pair gj aj equivalence classes definition allowed resulting program obtained isomorphism 
simplification induced injective morphisms needs justification proposition consider pushout diagram 
injective 
injective 
gi gj gi gj gi bi gi bj gj gi bi gi 
property simplification induces pushouts surprising interconnections established components encapsulation mechanism superposition prevents interference assignments shared actions shared attributes 
surprising non injective morphisms pushouts 
methodologically speaking situations arise forces synchronisation component interconnecting actions action component 
think circuits achieved bridging ports component course may producing short circuit careful 
case configuration diagram skip skip var int skip true true resulting program isomorphism var int interconnection synchronised implying guard joint action guarantee assignments compatible equivalent 
notice danger short circuit terms assign incompatible identifiable 
cases imply resulting program pushouts exist joint action enabled 
typical pushouts system configuration injective morphisms shall call diagram standard injective 
configuration complex systems previous section defined universal constructions programs mathematical point view 
section shall investigate methodological implications proposed categorical approach point view typical constructions parallel distributed program design 
superposing regulators base programs previous sections showed categorical formalisation superposition captures transformation programs unity morphism generalised parallel composition operator sense ip 
fact example developed section illustrates pushouts characterise operation superposing regulator closed program 
adapting francez forman define concepts follows definition program said closed 
program closed said open 
definition diagram defines regulator iff open closed read open attribute image connected attribute communication channel 
notice example pb closed sense ip read open attributes 
hand pr open way interconnected pb regulator pb read attribute connected pb channel 
fact adaptation example francez forman 
reading regulator detects pair values 
pair detected synchronised base program longer assign properties pushouts guard joint action conjunction synchronised actions 
just example categorical techniques provide semantics configuration complex systems 
diagrams compute pushouts seen specifying configuration intended system terms components interconnections 
concentrated simple case components configuration diagrams complex allowing system built components interconnected different ways 
instance regulator pb detect state 
situation entirely symmetrical previous 
possible instance regulator pr channel morphisms connect channel 
categorical approach creating instance program simply achieved adding node configuration diagram labelling program 
programs behave types nodes diagram instances sense programming language may declare variables type 
configuration diagram looking pr generalisation pushout operation complex diagrams called colimit category admits finite colimits said finitely cocomplete 
colimits computed sequence pushouts 
instance diagram compute pushout pr ps interconnected second regulator directly previous superposition ps obtain result order pushouts performed relevant 
fact better identify system configuration diagram suggested goguen identify evolution structure system configuration diagram 
sense categorical approach supports incremental design 
second pushout computed pr ps ps program ps result double superposition 
isomorphic var ao bo int ad bd bool init ad false bd false ao bo fr ad ao ao gr bd bo bo ft ad ao ad true gt bd bo bd true program detects situations situations 
necessarily detect situation 
order achieve need synchronise ft gt actions detect local fixpoints 
done adding communication channel configuration diagram skip prc colimit configuration diagram provides program isomorphic var ao bo int ad bd bool init ad false bd false ao bo fr ad ao ao gr bd bo bo ad ao bd bo ad true bd true program terminates detects situation 
results states operations performed finite configuration diagram proposition reg finitely cocomplete 
design principles enforced categories summarising reg supports incremental program design discipline allowing interconnect programs form complex systems 
supports discipline reuse sense programs developed independently interconnected system configuration time 
local names opposed usual approach global name space essential support degree reusability incrementality 
resulting systems structured connected components configuration diagram colimit morphisms 
ability characterise structure objects terms relationships morphisms objects define operations composition preserve structure reasons categorical framework useful formalising disciplines decomposition organisation systems components 
choosing particular notion morphism define way establishing relationships objects structuring world components relationships allow identify 
basic principles categorical approach goguen notion structure corresponding notion transformation morphism preserves structure 
instance respect reg structural notions enforced encapsulation local state attributes fact morphisms required preserve locality program attributes implies operation programs defined colimits terms universal properties morphisms guarantee attributes component programs remain local 
sense claim categories formalise program design disciplines 
changing category instance keeping objects programs changing way interconnect morphisms obtain different paradigm 
instance wonder union programs sense unity characterised setting 
union var int var int var int clearly superposition morphisms 
instance assigns attributes violating locality condition 
able obtain context reg reg provide right notion structure explaining arbitrary union 
switch invasive superposition morphisms move category inv 
observers modularity discussed role superposition mechanism building complex systems components 
spectative superposition plays important role program development 
section show spectative superposition morphisms satisfy algebraic properties recognised source modularity program development bergstra diaconescu maibaum 
seen section spectative superposition morphisms model expansive 
means spectative superposition program extended affecting underlying behaviour 
proposition shows spectative superposition preserved pushouts program composition proposition standard configuration diagram injective spectative pushout diagram spectative 
methodological point view proposition suggests observer monitor sense katz base program 
definition configuration defines observer iff spectative surjective actions surjective read 
result proposition fact pushout sets functions morphism opposite surjective morphism surjective system obtained superposing observer base program returns spectative extension base program new program attributes 
new actions means new ways observing state underlying program introduced 
resulting system spectative superposition base program means new behaviour induced base program 
construction corresponds usually known programming addition auxiliary variables derived attributes databases 
example assume count number assignments necessary reach fixpoint 
program counts number times action occurs po var int init true need connect po pb synchronising incrementing ca skip pb var int po var int init init true true true pushout diagram gives program var int init fh true true spectative superposition pb 
incorporated system prc pr ca po counts number assignments necessary reach fixpoint required 
main purposes construction introduce new attributes may account observations required specification intended system 
ability reuse existing piece software program satisfy specification allow superposition regulator tune behaviour underlying program behavioural requirements specification superposition observer regulator program system account state observations required specification 
importance proposition spectative superposition ps base program pb pb independently extended pb result superposing regulator canonical spectative superposition ps pb provides observations added pb ps 
ps ps pb pb property called modularisation property maibaum veloso implies spectative superposition program reflected unique way system program component 
possible identify system configuration diagram done context superpositions 
say interconnection po done order superpositions including spectative immaterial 
means superposition regulators monitors commutes configuration techniques part incremental development process 
monitor base program regulator base program affecting status extension spectative superposition 
concluding remarks shown concepts techniques parallel program design formalised categorical framework 
perceived benefits effort follows 
categorical formalisation showed languages unity ip enhanced programs open support discipline modular incremental system development promotes reuse 
idea interconnection objects explicit forces programs developed explicit specific components system interconnections explicitly established outside programs 
categorical framework apt support explicit definition architecture intended system configuration interconnected components discipline advocated area distributed systems configuration languages conic family magee 
respect stress categorical formalisations paradigms exist object ones attributes read directly actions explicitly included signature fiadeiro maibaum supporting local fully private attributes 
furthermore clear programs right structures base system design 
general design structures usually necessary provide ability define interfaces hide features support inheritance shown fiadeiro maibaum design structures formalised proposed categorical framework temporal specifications 
adaptation category community programs straightforward 
second helped clarify nature superposition role program development 
hand showed known aspects superposition transformation unity generalised parallel composition operator ip unified natural way transformation captured morphism operator results colimit construction 
hand algebraic properties different notions superposition clarified 
particular shown spectative superposition model expansive spectative morphisms preserved pushouts property showed important methodological consequences proved contexts maibaum bergstra diaconescu 
general notions superposition exist back butler invariants relate new old features 
intend investigate general notion incorporated categorical framework 
third showed modularisation composition techniques captured superposition seen instances general principles apply programs specifications mathematical models system behaviour including physical components 
shown fiadeiro maibaum proposed categorical approach provides natural framework relate different kinds objects programs specifications abstractions behaviours intrinsic variety formalisms software development importantly structuring principles implied formalism 
particular working category temporal logic specifications defined fiadeiro maibaum formalise relationship satisfaction realisation programs specifications functorial terms fiadeiro maibaum distinguish degrees compositionality algebraic properties satisfaction relation satisfies fiadeiro maibaum fiadeiro 
colleagues lix costa kevin lano discussions topics referees challenging comments 
special due georg formalisation superposition initiated 
back kurki back kurki distributed cooperation action systems acm toplas 
back back superposition refinement parallel algorithms forte north holland 
barr wells barr wells category theory computing science prentice hall international 
barringer kuiper barringer kuiper hierarchical development concurrent systems temporal framework brookes roscoe winskel eds seminar concurrency lncs springer verlag 
bergstra bergstra heering klint module algebra journal acm 
francez francez compositional approach superimposition proc 
th acm symposium principles programming languages acm press 
burstall goguen burstall goguen putting theories specifications reddy ed proc 
fifth international joint conference artificial intelligence 
butler butler refinement decomposition value passing action systems best ed concur lncs springer verlag 
chandy misra chandy misra parallel program design foundation addison wesley 
costa costa sernadas sernadas ehrich object interaction eds mathematical foundations computer science lncs springer verlag 
de nicola de nicola extensional equivalences transition systems acta informatica 
diaconescu diaconescu goguen logical support modularisation huet plotkin eds proc 
nd bra logical frameworks workshop edinburgh 
ehrich ehrich goguen sernadas categorial theory objects observed processes rozenberg eds foundations object oriented languages lncs springer verlag 
ehrig mahr ehrig mahr fundamentals algebraic specification equations initial semantics springer verlag 
fiadeiro fiadeiro emergence properties component systems wirsing nivat eds proc 
amast lncs springer verlag 
fiadeiro costa fiadeiro costa institutions behaviour specification astesiano reggio tarlecki eds trends data type specification lncs springer verlag 
fiadeiro maibaum fiadeiro maibaum temporal theories modularisation units concurrent system specification formal aspects computing 
fiadeiro maibaum fiadeiro maibaum interconnecting formalisms supporting modularity reuse incrementality kaiser ed proc 
rd symposium foundations software engineering acm press 
fiadeiro maibaum fiadeiro maibaum design structures object systems kent eds formal methods object technology verlag print 
francez forman francez forman conflict propagation ieee int 
conf 
computer languages iccl ieee press 
francez forman francez forman superimposition interacting processes concur lncs springer verlag 
goguen goguen mathematical representation hierarchically organised systems ed global systems dynamics 
goguen goguen categorical foundations general systems theory pichler trappl eds advances cybernetics systems research books 
goguen goguen categorical manifesto mathematical structures computer science 
goguen goguen sheaf semantics concurrent interacting objects mathematical structures computer science 
goguen burstall goguen burstall institutions model theory specification programming journal acm 
goguen goguen categorical approach general systems theory klir ed applied general systems research plenum 
katz katz superimposition control construct distributed systems acm toplas 
kurki kurki action system approach specification design distributed systems proc 
th int 
workshop software specification design ieee press 
magee magee kramer sloman constructing distributed systems conic ieee 
maibaum maibaum veloso sadler theory data types program development bridging gap ehrig floyd nivat thatcher eds tapsoft lncs 
sannella tarlecki sannella tarlecki building specifications arbitrary institution information control 
sassone sassone nielsen winskel classification models concurrency best ed concur lncs springer verlag 
van benthem van benthem correspondence theory gabbay guenthner eds handbook philosophical logic ii reidel 
veloso maibaum veloso maibaum modularisation theorem logical specifications information processing letters 

