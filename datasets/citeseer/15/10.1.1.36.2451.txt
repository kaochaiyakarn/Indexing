critical issues design fault tolerant multiprocessor database server second swedish conference fault tolerant computer systems goteborg sweden november siv ing 
siv ing 
tore dr ing 
division computer systems telematics norwegian institute technology nth university trondheim database technology group division computer science telematics elab sintef november critical design issues designing fault tolerant multiprocessor database server identified system design components defined states state transitions 
component redundancy foundation fault tolerant design 
system shared architecture homogeneous coarse grained nodes 
basic fault detection done hardware 
fault masking repair done software achieve flexibility dynamic reconfigurability 
database system adapted fault tolerance defined transaction concept 
concept available externally internally 
interconnection network multipath large communication capacity able handle crashed nodes channels 
communication protocol optimized actual application dbms case 
communication system central internode error detection reconfiguration fault tolerant multiprocessor 
data distribution replication software mechanisms opposed disc controller mechanisms data dynamically reconfigured research scientist elab working hypra project supported norwegian telecom research department dr ing 
student nth supported scholarship royal norwegian council scientific industrial research 
dr ing 
student nth supported scholarship associated hypra project 
research scientist elab working hypra project 
case crashed nodes automatically repair database server 
gives possibility planned periodic maintenance system operations 
hypra database server exemplify design issues 
hypra database server capabilities sets apart current systems regarding performance fault tolerance 
large transaction processing systems telecommunication networks airline ticket reservation systems set strict requirements data availability 
database holding seat reservation information continuously available 
database server platform system implementation telecommunication network leads system availability requirements database server telecommunication network elements maximum hour unavailability years 
need fault tolerant database servers 
types commercial applications unavailable database leads serious economic problems operator airline telecom 
current database server satisfy system availability requirements new technology developed 
application application application hypra client client hypra sql sql rda database server application client hypra database client server architecture 
application programs communicate database standardized sql language 
hypra client packages sql statements standardized rda remote database access protocol 
hypra database server messages executes sql statements 
important design issues faulttolerant systems designing available fault tolerant systems ensure component system defined state viewed externally input component cause legal state transitions component able detect faults subcomponents group components able mask faults faults invisible higher level system components system able repair faults 
component redundancy defined system functionality required achieve 
database server 
database server system component hardware software providing database services system components application computers pcs multiuser computers 
database services include ability persistently store data logical data model control multiuser access data hide physical data representation access structures application program data abstraction efficiently perform declaratively defined operations data read update insert delete complex set operations integrate datamodel description database recover database consistent state presence hardware software errors 
hypra database server designed meet high performance demands transaction load complex queries real time response data availability 
time system adhere international standards defining external interface 
commercially interesting system undercut current marked price unit performance database functionality factor 
architecture described figures describing external internal architecture database server 
details hypra design documented 
hardware design philosophy hardware design fault tolerant database server multiple homogenous powerful nodes high degree node isolation interconnected high capacity multipath symmetric communication network 
hypra achieved building nodes inexpensive commercially available standard components specially designed technology interconnecting topology 
error detection reconfiguration done software 
hypra design philosophy gives added advantage low hardware cost high degree scalability 
hypra homogenous shared parallel computer typically coarse grained nodes 
machine consists set identical microcomputers nodes internal bus memory discs channels 
multiple discs dbms dbms dbms node node node hw architecture distributed dbms 
sw architecture 
ram cpu nc nc nc hardware communication server dbms server hypra database server internal architecture hardware aspects left software aspects right 
hardware diagram shows simplified node hypra database server 
hardware shelf components 
cpu central processing unit processor intel family ram random access memory currently mbyte dynamic ram boxes named disk channel scsi bus controllers boxes named nc neighbour communication implemented dual ported ram chips 
node hypercube traditional cube 
hypercube definitions number dimensions example number nodes example total number communication channels longest optimal path node perfect hypercube 
software architecture vertical homogeneous specially designed distributed dbms 
node cube self contained dbms controlling data stored local disks 
node play role coordinator transaction involving nodes takes task distributing subtransactions collecting result 
connected node 
nodes interact communication channels high degree node isolation achieved see 
node intel processor mb memory scsi bus controllers communication channels dimension hypercube 
node contained single board customer replaceable unit 
tps hypra server nodes 
shows functional model different components node replaceable units 
model 
node primary tasks communication data storage database services 
communication server masks multiple failed communication channels provides service channels broken 
discs connected scsi busses conventional mini micro computer discs 
replication data handled software higher levels gives added capability dynamically reconfigure database 
opposed disc controller mirroring striping 
number discs node depends data access pattern trademark intel storage requirements 
balanced capacity scsi busses computational power node processor 
individual disc customer replaceable unit 
communication channels connecting node neighbours implemented single dual port memory chips 
addition node generate interrupts neighbours 
maximum communication bandwidth channel mb apart hardware communication node board 
customer replaceable units communication hardware modules 
channel communication communication coprocessor 
hypercube divided groups nodes sharing communication coprocessor 
group size variable total number nodes lay foundation scalable external communication see 
multiple communication coprocessors provides fault tolerant client server communication protocol 
design philosophy emphasize fault tolerance software necessary implement hardware fault detection mechanisms 
parity de 
comm 
network node node node node hardware architecture fault tolerant multipath shared multiprocessor right compared traditional fault tolerant systems multiple access paths system components left 
disk disk disk disk hardware unit customer replaceable hardware server server server dbms comm 
cpu comm 
chan 
comm 
chan 
scsi ctrl 
scsi ctrl 
cable cable psu psu software server field replaceable functional model hypra server node 
memory errors 
watchdog timer communication accesses avoids blocking processor failed neighbour node locks 
hardware checksum generator detect communication errors performance reasons 
segmentation paging mechanisms processor detect software errors isolate different software components 
cpu assumed crash failure semantics 
node powered different power supply units 
assigning nodes interleaved pattern double psu failure may knock single node masked software 
hypra server multiple fault tolerance respect psu failures 
discs powered psu pair powering controlling node node failure discs unavailable 
psu customer replaceable unit 
transaction concept foundation fault tolerant systems knowledge system state capability determine consistent system states operations performing consistent state transitions basics fault tolerance dbms 
database transaction concept foundation consistent database states consistent transformations database states 
concept provided dbms users dbms 
transaction atomic unit consisting operations terminated commit abort operations resulting respectively committed aborted transaction 
transaction performs consistent transformation database executed 
transaction failure atomic abandoned partially done 
execution transactions dbms serializable concurrent transactions interfere 
initial state database consistent serializable execution transactions produce consistent database 
effect transaction persistent effect operation part committed transaction lost result failure 
transaction concept provides atomic unit consistency recovery basis faulttolerance 
dbms software organised layers abstraction providing servers related uses relations 
software servers partially correct server delivers result request correct necessarily timely 
software quality obtained design quality assurance methods dbms implementation project 
internal transaction concept hypra dbms example transaction concept 
nested transaction model hypra dbms obtain consistent internal states correct state transitions internal servers 
nested transaction model differs external flat transaction model respect persistency subtransactions 
nested transaction model provided externally give compatibility iso sql specifications 
nested transaction model transaction server may request services uses related server implemented synchronous asynchronous subtransactions 
subtransaction may request subtransaction implemented services 
example synchronous subtransaction performing update query transaction containing queries 
performing update query subtransaction undone fails aborting transaction 
asynchronous subtransaction may termination coordinated father sub transaction allowed terminate independent father 
result committed subtransaction may persistent independent father rolled back father aborts 
subtransaction allocating disc blocks multi access file rolled back father transaction aborts 
sub transaction may automatically restarted execution temporarily fails 
nested transaction model combined fine granularity locking model primarily locking tuples 
recovery server node write ahead logging wal protocol supports transaction subtransactions concepts 
logging operational logical block support data replication strategy tables indexes 
design fault tolerant communication system hypercube interconnection topology parallel shared multicomputers 
regular symmetric wiring enables simple routing algorithms 
nodes communicate sending messages 
node communicates directly neighbour nodes nodes connected physical communication channels 
message may relayed intermediate nodes way source destination 
set nodes communication channels send message nodes called path nodes 
routing decides path message 
fault tolerant routing important property hypercube topology applying fault tolerant machines high connectivity giving system independent message routing paths 
path breaks due node channel failure masked software paths 
hypra communication design uses extended cube routing called table routing handle crashed nodes communication channels 
basic cube routing simple routing algorithm perfect hypercube 
static routing scheme preserves message sequence avoids deadlock distributes traffic uniformly communication network 
hc hypercube prototype basic cube routing communication benchmarked 
case crashed nodes channels basic cube routing 
extended algorithm handle cases identical basic cube routing error free networks 
errors load gets skewed routing longer guaranteed deadlock free avoided 
hypra design deadlock detection resolution solve deadlock problem 
suggest virtual channels deadlock avoidance gives overhead communication 
number crashed nodes average case worst case table communication capacity node hypercube function number crashed nodes 
figures percentages capacity perfect hypercube network 
table shows remaining communication capacity node hypercube function number crashed nodes 
table result simulations possible combinations crashed nodes shows capacity communication bottlenecks 
bottleneck values average worst case capacity compared perfect network 
table documents acceptable performance degradation 
dbms masks lost order messages typically happen node crashes message transferred incorrectly deadlock resolution reconfiguration routing 
masking gives opportunity design communication system focused high capacity 
fault detection communication central place fault detection reconfiguration hypra 
communication system component detect node crashed detect nodes behaving strangely 
fault detection tightly communication 
mechanisms detect faults 
messages checksums header body 
faulty checksum come transient error communication channel neighbour node writing garbage 
trigger operation throw away bad message reset channel 
crashed nodes detected am alive protocol 
consistency internal datastructures node checked background processes 
local error detected node 
server node availability management service acknowledge processor membership protocol 
restart node synchronized acknowledge processor membership protocol 
node restart executed synchronized neighbouring nodes pull reset line node 
way single faulty hostile node take neighbours 
hostile neighbour node completely isolated disabling interrupt line node 
isolated crashed nodes attempted restarted regular intervals 
node detects change status communication channel broadcasts new information nodes 
information calculate new routing tables communication 
data distribution replication mechanism achieving data fault hypra internally distributed dbms database partitioned nodes 
nodes constitute server group able mask single node failure addition repair specified number node failures provide gradual data unavailability respect node failures 
data distribution strategy determines table index fragmentation replication allocation replicas nodes 
table horizontally fragmented complete tuples distributed nodes 
number fragments corresponds number nodes 
fragmentation table tab nodes node horizontal fragmentation tab horizontal fragmentation table tab fragments 
attribute primary key table 
dimension hypra server illustrated 
updates fragment transaction tightly synchronised assumed abort version phase commit pc protocol 
replication strategy defined table replicas 
replicas assumed table 
loose synchronisation replicas table 
log update operations primary replica updating hot stand replica 
dictionary information fragmentation replication allocation kept table basis 
fragmentation description kept table replica 
illustrates fragmentation primary replica table tab 
replica allocation strategy guarantees replicas tuple stored node 
fundamental respect data fault tolerance 
node containing primary replica fragment fails failure masked hot stand place 
primary hot standby replicas stored different nodes single node failure masked 
fragmentation table hash primary key unique group unique constraint see 
unique group defined fragmentation round robin 
unique tuple identifier table added tuple 
case unique group defined tuple identifier serves role 
fragmentation indices done ordinary tables 
fragmentation index combination indexed attributes primary key table index defined 
fragmentation policy provides exact knowledge node tuple stored access primary key index 
access primary key index nodes searched tuple 
dictionary tables fragmented ordinary tables 
fragments fully replicated nodes replica designated primary 
update synchronisation dictionary tables pc protocol 
concurrency control version scheduling combined write locking primary replicas provide high read availability dictionary data update 
hypercube dimensions globally chosen mirror dimension 
hot stand fragment stored neighbouring node primary fragment mirror dimension 
provides low communication cost maintaining hot standby 
hot stand replica defined primary fragment mirror dimension defined hot stand replica 
illustrates fragmentation replication allocation table fragmented 
primary fragment corresponding hot stand fragment neighbouring node mirror dimension 
node contains primary hot stand replica different fragments table 
allocation policy corresponds chained declustering policy gamma dbms :10.1.1.113.6798
double failure node containing primary replica node containing hot stand replica crash results partial table unavailability particular fragment unavailable 
accesses primary key mapped index fragment provided 
partial table index availability policy provided 
double failure increases rate aborted transactions transaction requesting data stored unavailable fragment aborted 
node mirror dimension hot stand replica node node node node node node node hot stand replica primary replica replicas defined fragment table tab primary replica unfilled hot stand replica shaded 
primary replica stored node 
hot stand replica primary replica stored neighbouring node mirror dimension 
nodes double failure recovered fragment available 
hash fragmentation method gives approximately distribution data nodes law large numbers 
data distribution determines transaction execution processing performed node data located 
data distribution basis transaction workload distribution nodes 
providing powerful nodes able handle uneven transaction workloads nodes 
distribution query workload nodes part query sorting algorithms :10.1.1.103.2851:10.1.1.113.6798
dynamic reconfiguration data mechanism repairing faults addition masking single node failures providing gradual data unavailability presence double failures hypra dbms performs automatic corrective online repair single node failures 
new replica produced replica result node crash 
system prone double failure repair takes place 
repair done system single fault tolerant 
dynamic reconfiguration data takes place repairing data unavailability provides means compensate hardware failure software 
introduces fault tolerance aspect commercial dbmss 
provides foundation periodic planned versus corrective manual repair system reduction maintenance cost 
fragments table replica unavailable due node crash remaining fragment fragment horizontally fragmented set 
illustrates fragment primary replica table tab 
done subtransactions table basis global system coordination limit number tables concurrent 
redistribution algorithms relational algebra algorithms 
policy corresponds interleaved declustering policy :10.1.1.113.6798
replica allocated available nodes side mirror dimension failed replica resides 
done distribute added transaction workload entering additional data node keep substitute horizontal fragmentation horizontal fragmentation tab fragment table tab side mirror dimension original preserve disaster property system 
illustrates distribution data compensation failure node 
replica primary fragment original primary see replica unavailable 
replicas allocated nodes side mirror dimension failed node 
hot stand replicas 
crashes may cause fragmented 
data kept separate files reduce read written data volume replica built erased 
failed node restarted data redistributed node stores original replicas 
redistribution done table basis distinct set available nodes preserve serializability distribution operations 
tables redistribution available normal transaction load redistribution preserve data availability 
consistent state restarted replicas produced log restarting node crash account operations performed data 
summary hypra capabilities article focused fault tolerance aspects design database server hypra database server example 
hypra server properties sets current systems 
short ffl performance transaction complex query processing large hypra database server nodes handle transaction load tps able handle simultaneous debit credit bank transaction respond second 
database volumes standardized test published 
complex query performance indicated join capacity megabytes second 
ffl scalability due hardware interconnection topology homogeneous software design hypra database server nodes 
gives performance range tps tps architecture 
ffl real time response hypra designed able function system component telecom network soft real time response capability designed system start 
conservative estimates indicate worst case response time single tuple read operation millisecond worst case response time single tuple update operation millisecond 
ffl data volume capacity node hypra server equipped number scsi bus controllers 
gives possibility attach gigabyte disc node 
large hypra equipped gigabyte disc 
ffl technology hypra design shelf industry hardware components software written highlevel languages 
ensures ability follow development component performance little redesign effort 
current hardware prototype third series design failed node node mirror dimension hot stand replica node node node node node node node hot stand replica primary replica redistribution data compensate failure node 
fragment 
allocated node nodes side mirror dimension failed node distribute added workload 
philosophy 
design effort approx 
man year 
areas design fault tolerant transaction systems totally fault tolerant transaction system requires fault tolerant database servers client server communication applications 
fault tolerant design database server 
general fault tolerant application platforms exist programming fault tolerant applications complex task 
little done standardized fault tolerant clientserver communication 
topic 
el abbadi skeen cristian 
efficient fault tolerant protocol replicated data management 
proceedings th acm sigact sigmod symposium principles database systems pages march 
ole tore 
hypra dbms detail design volume iii high level dbms software 
technical report stf sintef elab 
restricted access 
ole john 
communication hc study methods performance network dual port ram 
proceedings fifth distributed memory computing conference volume pages 
ieee april 
joel bartlett 
nonstop operating system 
proc 
th hawaii international conference system sciences volume pages 
fredrik 
parallel sorting methods large data volumes hypercube database computer 
boral editors proceedings sixth international workshop database machines lecture notes computer science pages 
springer verlag june 
philip bernstein hadzilacos nathan goodman 
concurrency control recovery database systems 
addison wesley publishing 

hashing methods relational algebra operations 
proceedings th international conference large databases pages 

algebra operations parallel computer performance evaluation 
proceedings th international workshop database machines 

hypra 
technical report stf elab 
norwegian restricted access 

development parallel database computer hc 
proceedings fourth conference hypercubes concurrent computers applications march 

relational algebra 
pierre america editor proceedings prisma workshop parallel database systems pages netherlands september 
rune larsen 
neighbor connected processor network performing relational algebra operations 
fifth workshop computer architecture non numeric processing pacific grove ca usa march 
sigmod 
stefano ceri 
distributed databases principles systems 
mc hill 
cristian 
questions ask designing attempting understand fault tolerant distributed system 
research report rj computer science ibm research division ibm research division almaden research center harry road san jose california usa 
william dally charles seitz 
message routing multiprocessor interconnection networks 
ieee transactions computers may 
dayal hsu ladin 
organizing long running activities triggers transactions 
proceedings acm sigmod international conference management data pages 
david dewitt robert gerber :10.1.1.103.2851
multiprocessor hash join algorithms 
proceedings th conference large data bases stockholm august 
david dewitt ghandeharizadeh donovan schneider allan hui hsiao rick rasmussen :10.1.1.113.6798
gamma database machine project 
ieee transactions knowledge data engineering march 
james gray 
notes data base operating systems 
research report rj computer science ibm research division ibm research laboratory san jose california usa 
james gray 
transaction concept virtues limitations 
proceedings th international conference large databases pages 
james gray 
computers done 
proceedings th symposium reliability distributed software database systems january 
jim gray 
white 
technical report tandem computers 
nonstop sql performance 
tandem performance group 
benchmark non sql debit credit transaction 
proceedings acm sigmod international conference management data chicago usa june 
tore ole 
hypra dbms detail design volume ii basic dbms software 
technical report stf sintef elab 
restricted access 
tore 
hypra dbms detail design volume iv dbms support software 
technical report stf sintef elab 
restricted access 
intel 
microprocessor datasheet april 
order number 
iso ansi 
ips osi remote access 
iso ansi 
information processing systems database language sql integrity enhancement 
second edition 
james 
fault tolerant computing system 
proc 
th hawaii international conference system sciences volume pages 
mohan lindsay pirahesh schwarz 
aries transaction recovery method supporting fine granularity locking partial rollbacks write ahead logging 
research report rj computer science ibm research division ibm research division almaden research center san jose california usa 
mohan lindsay 
efficient commit protocols tree processes model distributed transactions 
proceedings nd acm symposium principles distributed computing 
steven 
ipsc direct connect communications technology 
proc 
third conference hypercube concurrent computers applications volume january 
david patterson garth gibson randy katz 
case redundant arrays inexpensive disks raid 
technical report ucb csd computer science division eecs university california berkeley computer science division department electrical engineering computer sciences evans hall california berkeley ca december 
michael banerjee 
distributed algorithms shortest path routing broadcasting arbitrarily faulty hypercubes 
proc 
th int 
symp 
faulttolerant computing june 
hamid pirahesh mohan josephine cheng liu pat selinger 
parallelism relational data base systems architectural issues design approaches 
proceedings nd international symposium databases parallel distributed systems july 
expanded version 
rothermel mohan 
aries nt recovery method write ahead logging nested transactions 
proceedings th international conference large databases pages 
tore 
hypra ultimate performance fault tolerant multiprocessor database server computer 
brochure elab sintef 
stonebraker 
concurrency control consistency multiple copies data distributed ingres 
ieee transaction software engineering se may 
stonebraker 
case shared 
ieee database engineering 

shortest path routing hypercube database machine 
proceedings fifth distributed memory computing conference volume pages 
ieee april 
peterson 
mark hypercube concurrent processor architecture 
proc 
third conference hypercube concurrent computers applications volume pages january 

