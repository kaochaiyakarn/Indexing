functional program functional program 
john longley impure functional language programs behaviour completely functional behave extensionally inputs functions compute written purely functional fragment language 
class programs functional behaviour expressive usual class pure functional programs 
introduce extended class functional programs means examples standard ml explore offer programmers language implementors 
reviewing theoretical background examples functions kind discuss may implemented 
consider possible programming applications functions implementation search algorithm algorithm exact real number integration 
discuss advantages limitations style programming relative approaches 
consider increased scope compiler optimizations functions offer 
concerned surprising fact 
impure functional language standard ml exist programs behaviour completely functional sense modelled simply mathematical function input values output values functions compute written purely functional fragment language 
explain carefully mean programs behaviour functional 
simplicity consider simply typed ml terms basic types unit bool int 
model basic types semantically evident sets values writing value unit fg bool ftrue falseg int oe model function type oe 
certain set oe 
partial functions oe see 
define inductively means ml term oe denote element oe 
basic types fl say denotes fl evaluates say initial dynamic environment 
function types oe 
say denotes partial function oe oe denotes oe ffl mn denotes ffl undefined mn diverges 
fact define denotation relations sets oe simultaneous recursion types oe 
set partial functions oe denoted term say term oe functional behaviour denotes element oe 
intuitively term behaves extensionally inputs provided course inputs functional sense behaviour inputs captured completely mathematical function reserve term pure terms written usual pure functional fragment ml 
give simple example show class functional programs defined expressive class pure functional programs 
note set unit unit just elements undefined set unit unit unit contains just elements top mid bot may defined ml respectively fun top fun mid fun bot bot notice bot mid top respect pointwise ordering 
unit unit unit bool partial function specified top false mid true bot undefined 
intuitively unit unit unit result fg defined tells needs look argument order return result 
clearly mathematically defined partial function written fourth partial function unit unit unit 
undefined 
follows undecidability halting problem function full ml 
pure functional fragment ml monotonic respect pointwise ordering 
implemented impure ml example fun val ref false fn true implementations exceptions continuations possible see section 
idea programmers functions believe doing functional programming 
semantics local ml ensures nested calls behave functionally correct way 
example show principle function advantage 
suppose want program takes function integers integers computes sum 
suppose reason arguments lazily represented ml function unit int int 
sum unit int int 
int pure ml function computes sum obvious way 
observe happens evaluate argument constant function 
detect case get spectacular gain efficiency constant fun test fn fun sum fn test sum fn example half serious suggests worth exploring done functional programs extended sense 
natural mathematical class computable functions sequentially realizable sr functions intuitively contains function things 
class functions studied extensively theoretical point view 
purpose consider functions practical standpoint explore offer programmers language implementors 
structured follows 
section briefly mention relevant theoretical background introduce important examples sr functions consider implemented 
section ask interesting kinds program written extended functional style 
discuss possible application areas implementation generic search algorithms algorithm exact real number integration 
section ask stand gain knowing programs functional particular scope compiler optimization programs 
section draw tentative mention questions consideration 
standard ml examples believe main ideas apply equally lazy functional languages haskell allows non standard extensions see 
ml source file containing examples available electronically author home page 

am grateful simon peyton jones providing impetus write 
benefited discussions david aspinall mike fourman andrew kennedy eike ritter 
comments anonymous referees helpful 
research funded epsrc research gr notions computability general datatypes 
sequentially realizable functionals conceptual background brief sketch theoretical picture forms background 
sr functions forms part general programme research addressing question natural interesting notions computable function higher types 
order types int int know mean computable functions just turing computable partial recursive functions 
higher types immediately clear computable mean 
fact appears candidates reasonable notion higher type computability mathematical credentials yielding different class computable functions 
firstly sequentially computable functions embodied prototypical functional language pcf corresponds essentially pure functional simply typed fragment ml haskell 
secondly functions embodied extension pcf incorporating parallel exists functions 
parallel operations sense computable implementable full ml 
notions widely known early scott plotkin 
third class computable functions sr functions emerged bucciarelli ehrhard van oosten author 
sr functions form larger class pcf computable functions expressible impure sequential language ml 
admit wide variety mathematical characterizations pleasing theoretical properties see 
pcf computable functions suitable sense contained classes picture parallel computable sequentially realizable pcf sequential gamma gamma gamma gamma gamma gamma class sr functions sense maximal class higher type functions expressible sequential programming language class ml functions defined turns coincide interested computable functions term sr functions called effective sr functionals 
exactly sr functionals 
sr functionals represent limit far travel power exceptions sacrificing extensionality functional behaviour programs 
aspect sr functions may puzzling monotonic usual sense 
partial explanation sr functions monotonic respect usual pointwise order functions monotonic respect stable order see turns relevant ordering consider connection sr functionals 
examples sr functionals function earlier example sr function pcf computable 
mention examples order illustrate kind power sr functions provide 
implementations functions discussed subsection 
main example wish introduce modulus function mod 
relatively simple sufficiently powerful plausible programming applications sr functions 
suppose ml function int int int function int int assume application terminates 
informally course computing learn information calling various arguments 
example ask reply ask reply decide knows return final result 
time computation finishes learnt represented finite set ordered pairs case set set called modulus graph unique smallest subfunction terminates 
function mod takes arguments functions terminates returns modulus list pairs 
type mod ml int int int 
int int 
int int list crucial mod return set ordered pairs give away information order calls 
behaviour mod functional allow distinguish different implementations function fun fun prevent result mod sorting list pairs removing duplicates type sets place lists 
point mod provides information looked respect similar feel easy see defined mod pure functional ml 
surprising mod definable efficient way implement mod 
result due alex simpson see proposition construction 
minor variations mod possible 
example types example clearly general possible 
practice want function mod returns result modulus alternatively require modulus wish know say largest argument called computed simpler function 
consider analogues modulus function higher types computing example modulus third order function second order 
mod powerful purposes sr functions definable mod pure functional ml 
bizarre kinds finite sr function discussed section provide class examples surprising find practical 
promising example function type int stream int 
int int 
int stream familiar recursive type streams 
give just informal description details see 
intuitively sequential algorithm function type int stream int represented obvious way possibly infinite decision tree type int int encode strategy exploring decision tree returning information finite part 
crucial observation functional function type int stream int canonical smallest decision tree computes information tree really information function 
mention function powerful universal sr function defined section 
main results sr function definable pure pcf 
means extend pure functional fragment ml adding implemented non functional features language express sr functions 
informally idea somewhat similar place int stream int complex type int int int 
difficulty functions type longer canonical decision tree means obtained result decision tree order remain functional check decision trees function result 
entails search appealing practical point view 
implementations sr functions functions mentioned implemented standard ml different ways 
seen implement written exceptions fun exception fn raise false handle 
fn true alternatively ml new jersey implemented callcc fun callcc fn con 
fn 
throw con fn true false implementations suffer inefficiency implementation preferable practice 
discovered evaluates argument need check fn terminates part computation performed done twice 
illustrates common phenomenon sr functions stupid extra order behave functionally 
exceptions implementation suffers drawback behave functionally arguments involving wildcard exception handlers example fun id handle 
implementation functional respect fragment ml wildcard handlers 
function mod easily implemented 
compute mod maintain log calls apply version updates log called 
fun mod val log ref fun val log insert log log insert suitable function inserting pair sorted list 
course achieve greater efficiency say balanced trees maintain sorted lists acceptable purposes resent having sorting just sake functional program 
plausible applications result sorted anyway 
note implement simpler function sorting required 
function requires little effort implement best combination exceptions reasonably efficient overhead arising need functional 
contrast function extreme example function extra required order stay functional 
know inefficiency necessarily fatal practical applications practical applications 
programming applications search algorithms suggest programming applications sr functions 
application implementation generic search algorithm 
suppose example wish search permutations integers gamma pointed nick benton andrew kennedy 
satisfying property supplied parameter 
principle search size cut search follows 
suppose test permutation oe oe oe gamma 
see oe hold just looking oe oe gamma save size gamma 
permutations represented functions type int int function type int int bool function discover value 
cycling permutations order number tell permutation need consider 
way construct function search int 
int int bool 
int int list search returns list permutations satisfying 
see easy implementation details 
supplying different functions search example construct magic squares solve queens problem reasonable efficiency 
course solution efficient usual solutions problems gain modularity separated general purpose machinery searching permutations problem specific details property interested 
obviously achieved ordinary pure functional programming required return explicit modulus information boolean result requiring relieved implementors functions small burden 
solution appealing wish different searches search space 
important point emphasize 
general programmers try keep interfaces program modules simple possible order keep complexity system limits understanding 
trade simplicity interfaces efficiency simple interface may prevent different modules exchanging useful information 
example shows sr functions pass intensional information module boundaries black boxes opaque complicating interfaces 
mention limitation approach 
search algorithm efficiently arguments permutation sigma call sigma smaller arguments call sigma larger arguments necessary 
may properties evaluation order convenient prefer implementation search order cycled permutations fixed advance driven dynamically evaluation behaviour implementation possible list arguments calls sigma just maximum 
unfortunately modulus function suffice need know order calls 
enhanced search algorithm attractive example general higher order programming goes done sr functionals 
intermediate algorithm making unordered set arguments called possible control illustrates interesting general point sr functionals order functional deliberately throws away information interest programmer 
exact integration second application area exact real number computation concerns algorithm integrating real function desired precision 
represent real numbers interval gamma non uniquely streams extended binary digits real functions functions streams datatype digit zero datatype real real digit unit 
real type real 
real wish write program integer total function represented value computes gamma gammak 
done principle compute integral value type real 
know value ffl gamma algorithm proceeds follows 
compute gamma ffl applying stream obvious notation suppose result dyadic rational variant function detect digits input stream obtain suppose input digits required ffi gamma gamma know gamma gamma ffi jf gamma ffl 
gamma ffi gamma ffi gamma compute gamma ffi argument represented stream gamma obtain ffi jf gamma ffl gamma ffi gamma ffi ffi 
continue axis way reach see 
finish approximated ffl pieces constant functions 
adding areas corresponding rectangles go obtain approximation desired integral 
ffi add total error approximation ffl gammak remains show algorithm terminates eventually reach 
suppose contradiction sequence values generated algorithm converges 
clearly streams representing values converge obvious sense stream representing assumed total function application yield real number 
particular computation ffl finite number digits sufficiently large stream sn agree digits case reaching sn algorithm detect modulus iteration generate stream sn sn contradiction 
structure complicated willing accept risk testing permutations 
interestingly stream need computable may way approximating 
need assume sense represents total function classical reals just computable ones ought worth comparing approach previous approaches exact integration 
simpson gives lazy functional algorithm integration berger uniform modulus functional 
simpson algorithm particularly remarkable coded just pcf alias pure functional ml haskell 
algorithm number advantages 
firstly efficient practice simpson algorithm modulus information obtained inefficient way 
principle algorithms differ runtime constant factor 
secondly algorithm easier understand rely clever higher type recursion evaluation behaviour easy visualize 
thirdly approach sr functions extended compute integrals certain classes discontinuous functions integrated pure pcf 
example gamma continuous extension compute integral gamma gamma method reach gamma ffl unexplored part gamma ffl contribute ffl integral 
define example sr function integrates function undefined points modulus function suffice need function 
approaches possible allow different type represent real functions 
example search algorithm insist implementations real functions return explicit modulus information complicate coding functions significantly 
interestingly represent real functions datatype processes operating streams datatype question digit 
answer digit unit 
admit representation give purely functional implementation essentially algorithm considerably efficient sr functions 
price pay forced program functions low level style making supply demand digits explicit 
sr implementation best available wish integrate functions ml type real real 
advantages impure functional programming far explored possible benefits programming sr functionals opposed conventional pure functional programming 
sr functionals implemented impure language anyway ask dual question advantages sr programming unrestricted impure functional programming words gain knowing programs mod behave functionally 
possible answer functional programs easier reason formally informally non functional ones sr functions attractive point clarify mean case 
gloss points difference highly pathological functions 
view program verification 
possibility briefly considered section argued class sr functions easier reason class pcf computable functions 
sr functions enjoy better decidability properties pcf ones 
concentrate possible answer offer increased scope compiler optimization 
known commonly exploited compiler writers optimizing transformations legitimate functional code code may sideeffects 
sr functions functional terms behaviour expect principle compiler able take advantage fact 
example consider ml function fun part optimization phase compiler consider eliminating common subexpression replacing body declaration val avoids duplicating evaluation case 
transformation changes evaluation order evaluated 
optimization valid provided argument functional 
depend course context compiler generate different versions object code functional contexts contexts 
suppose context mod known functional 
functional character mod means principle quite legitimate optimized version 
contrasts happen non functional version mod retains order calls versions yield different results 
modern compilers code optimizations regulated means type system carrying information pieces code functional various respects optimizations kind supported compiler fairly easily implementing standard library sr functions ascribing types reflected functional status typically better types compiler infer source code 
give syntactically identifiable class sr programs 
expect compiler recognize sr programs undecidable general program sr fragment 
appears achieve similar effect lazy language haskell code transformations crucial efficiency 
functions mod implemented suitable side effect monad implementations haskell provide operation unsafeperformio transforming value compiler treat purely functional see 
compiler responsibility differences program behaviour resulting changes evaluation order mod problem 
tried give practically oriented sr functions means examples convey impression done 
summary sr functions obtain intensional information function argument information available completely extensional way 
illustrated potential advantages programming sr functions relation pure functional programming usual sense relation unrestricted impure functional programming 
hand gain interesting extra programming power ordinary functional programs hand retain advantages ease reasoning scope compiler optimization 
pointed limitations sr programming implementations sr functions need perform extra order ensure behave functionally extra programmer information interested 
occasions disadvantages clearly outweigh benefit gained functional 
purpose advertise elegant theoretical idea useful applications functional programming programming language implementation 
particular examples discussed tentative mainly purpose illustration 
possible application area investigated far compile time analysis programs interested knowing pieces code looked various conditions plausible sr functions 
case hope workers functional programming primary interests experience practical author may able find uses sr functions 
bucciarelli ehrhard 
sequentiality strong stability 
proc 
th annual symposium logic computer science pages 
ieee 
ehrhard 
projecting sequential algorithms strongly stable functions 
annals pure applied logic 
peyton jones hughes eds 
report programming language haskell 
available electronically www haskell org february 
longley 
sequentially realizable functionals 
technical report ecs lfcs department computer science university edinburgh 
submitted annals pure applied logic 
longley 
functional program functional program walkthrough sequentially realizable functionals 
ml source file available www dcs ed ac uk hom 
milner tofte harper macqueen 
definition standard ml revised 
mit press 
van oosten 
combinatory algebra sequential functionals finite type 
technical report university utrecht 
appear proc 
logic colloquium leeds 
peyton jones marlow 
stretching storage manager weak pointers stable names haskell 
draft 
plotkin 
lcf considered programming language 
theoretical computer science 
scott 
type theoretical alternative iswim cuch 
theoretical comp 
sci 

written widely circulated unpublished form 
simpson 
lazy functional algorithms exact real functionals 
mathematical foundations computer science pages 
springer lncs 
