subquadratic algorithms weighted maximin facility location problem extended frank sch mer rgen sellen set points plane point positive weight 
consider problem positioning point inside compact region min maximized 
parametric search paradigm give subquadratic algorithms problem running time log 
furthermore shall introduce concept exact approximation bit model counterpart parametric search 
exploiting ideas exact computation show considered problem solved time log denotes maximal bit size input numbers complexity multiplying bit integers 
weighted maximin facility location problem classical problem operations research attention computational geometry community 
task position point plane distance set weighted sites maximized 
example facility may source pollution input sites cities weighted population 
problem unconstrained domain possible locations entire plane 
generally considers bounding regions may non constant complexity literature bounding region defined convex hull input points 
denote euclidean norm euclidean distance generalizations see 
formulate maximin location problem follows universit des saarlandes fachbereich informatik lehrstuhl prof hotz postfach saarbr cken germany 
email sellen cs uni sb de fax 
frank supported fellowship dfg germany problem statement set points plane point positive weight 
intersection discs simple polygon edges 
find point maximizes min 
simple bounding regions problem intrinsically different minimax counterpart 
obviously distinct optimal locations 
problem log lower bound algebraic decision tree model reduction max gap line see 
algorithms substantial step lower bound 
previous weighted maximin location problem extensively studied operations research literature points inside different bounding regions see survey 
unweighted problem largest empty circle plane solved construction voronoi diagram 
toussaint describes optimal log solution case bounding region convex hull input points log solution case 
weighted sites voronoi diagram known quadratic complexity worst case constructed optimal time 
optimal location vertex diagram lies boundary region simple bounding regions constant complexity optimal location time 
subquadratic algorithms problem 
particular improve previous solutions unweighted problem case 
parametric search algorithms parametric search paradigm introduced 
obvious technique apply growing importance geometric optimization best reflected applications 
basic step apply parametric search reduce problem decision problem exist feasible location optimization parameter weighted distance sites fixed 
decision problem corresponds computing common intersection regions allowed locations deciding intersection empty 
case forbidden regions discs sites shall decide union covers bounding region union set discs linear complexity computed log time inversion 
duality transformation maps planar circles planes space reduces decision problem case constructing convex polytope intersecting polytope sphere 
process easily parallelized parametric search yields log algorithm 
case requires additional 
may happen set allowed locations intersected bounding region quadratic complexity 
shall avoid computation set trick answer decision problem need addition computation union discs check contours linear complexity intersect 
solved sweep algorithm parametric search yields time bound theorem weighted maximin location problem case solved parametric search time log 
section devoted parametric search solutions 
subsection discuss related problems technique extended 
bit complexity geometric algorithms developed distinct computational frameworks 
algebraic framework complexity algorithm measured number algebraic operations realvalued variables assuming exact computations 
input size corresponds number input values 
bit framework complexity measured number bitwise boolean operations binary strings 
input generally consists integers parameter supplemented additional parameter describes maximal bit size input value 
parametric search ingenious technique design optimization algorithms algebraic model 
known disadvantages algorithms parametric search complicated high constants hidden notation 
technique computing model available practice 
standard assumptions polynomials constant degree involved comparisons roots polynomials exactly constant time 
contrast basic decision schemes readily implemented immediately provide approximation algorithms guarantee relative error adding just factor log running time 
problems parametric search applied generally bounded algebraic depth 
especially algebraic complexity solution intermediate calculations depend prerequisite true bit model exact computation root bounds provide tools necessary approximation algorithms exact 
shall demonstrate practicability exact approximation considered problem 
inversion tricky analysis shall deduce constants lie range approach suitable implementation 
theoretical result interest dependency meets known lower bound bound obtained model theorem bit complexity model weighted maximin location problem case solved time log 
corresponding bit complexity analysis subject section 
parametric search parametric search optimization technique applied situations seek maximum parameter satisfying certain conditions met strategy parametric search give efficient sequential parallel algorithms corresponding decision problem decide parameter equal smaller larger maximum value brevity shall deal equal smaller case 
ts denote running time sequential decision algorithm tp resp illustration inversion 
forbidden regions bounding region 
allowed locations ez correspond intersections sz 
time resp number processors parallel version computed sequential time ptp log 
detailed description parametric search refer 
basic algorithm denote disc radius subsection deal case bounding region qi ri pairs qi ri 
rule degenerate case optima form arc assume qi order apply parametric search paradigm start decision problem determine exists location euclidean distance larger equal 
defines forbidden region 
admissible location exists empty bar denotes complement 
compute set admissible locations inversion 
shall need derivation bit complexity analysis go details 
embed planar problem space spanned coordinates identifying input plane plane 
denote origin 
inversion transformation maps point especially planes mapped spheres pass origin vice versa 
plane denoted ez mapped sphere sz radius cz 
consider circle center mx radius ez 
exists exactly sphere touches origin intersection plane ez equal circle 
sphere center mx radius 
inversion maps plane defined 
analogous spheres inversion maps balls pass origin complements halfspaces 
process maps region halfspace disc qi ri halfspace hi 
hi 
convex polytope computed time log standard reduction convex hull 
intersection sphere sz corresponds set admissible locations easily sees intersection linear complexity afford compute explicitly 
alternatively possible simply check existence admissible location 
care taken usually case lies inside sz happen specific cases lies outside case occurs input point 
far seen solve decision problem sequential log time 
parallel version obtained algorithm computes convex hull points space log time processors 
note standard reduction halfspace intersection convex hull requires knowledge inner point intersection 
point determined linear programming log log parallel time processors 
intersection test sz easily done constant time processors 
applying parametric search paradigm obtain running time log 
time bound crucially depends parallel time complexity computing intersections halfspaces 
results basic problem including randomized algorithm log parallel time complexity 
leaving firm ground deterministic algorithms time bound theorem improved log case 
polygonal bounding regions vn simple closed polygon vertices 
simple means edges intersect 
subsection consider case region enclosed compared case difficulties 
case set admissible locations expressed intersection polytope sphere sz 
possible 
second crucial set admissible locations quadratic complexity 
example consider sites equal weights arranged rows grid 
adequate choices sites induce admissible locations plane 
overlay sets adequate comb shaped polygon consist connected components 
problem introduces technical complications 
sequential decision algorithm compute ps intersect ps sz intersection original plane inversion 
note topology region change transformation simply maps intersections facets ps sz circular arcs ez 
denote resulting region represented list circular arcs connected component 
remaining part detect regions intersect 
approach second problem observation conditions holds contours regions intersect 
ii contains connected component 
iii connected component contains proceed follows check case simple sweep line algorithm terminated intersection detected note contour linear complexity 
fails cases ii iii checked separately planar point location testing sweep possible 
step sequential algorithm takes log time 
basic parts convex hull plane sweep point location done parallel log time processors 
summing parametric search yields time complexity log 
related problems solutions previous subsections fact union forbidden regions linear complexity computed parallelizable subquadratic algorithm 
direct extensions considered problem yielding time bound log include monotone weight functions point site may define weighted distance location fp strictly increasing function fp 
ii different metrics replace euclidean distance metric forbidden regions get squares discs 
union linear complexity computed algorithm sequential parallel log log time 
iii different domains optimizing euclidean space domain may unit sphere set weighted points unit sphere find location maximizes min 
solution problem obtained analogous subsection intuitive 
forbidden region spherical cap cut plane 
admissible locations naturally correspond intersection sphere convex polytope 
exact approximation section assume input numbers coordinates input points weights bit integers 
simplicity shall consider case 
seek algorithm finds optimum integer arithmetic 
hurdle way exact algorithm note optimal locations value algebraic numbers 
elude problem redefining solution combinatorial way output exact algorithm shall expect sites define global maxima optimization function 
precise optimal location 
assumed output 
order approximation exact need know gap values topological structure boundary set admissible locations changes call values critical values 
gap 
decision algorithm subsection approximate binary search 
interval length rational limits 
output sites detected arrangement boundary arcs set admissible locations computed 
assume know 
decision algorithm subsection rational input directly adapted need exact computation polytope described purely rational numbers intersection test sz done computing necessary distances log bits precision 
elementary operations performed time 
scheme running time log 
practicability exact approach hinges separation gap 
obtain bound subtle algorithm may suggest radius critical values square root contains square root 
approach compute fact optimal resp critical locations plane lie intersections circles pairs input points 
characterize critical values yielded gap roughly 
subsection shows gap roughly deduced inversion 
separation gap subsection notation suppress additive constants bit length integer numbers 
goal separate critical values 
critical value value vertex edge face touches sphere sz 
easy see third case impossible forbidden discs emerge vanish 
consider case 
vertex common intersection planes defined equation form mx qi ri mx vice versa choice parametric planes defines parametric vertex vertex determines potential critical values 
critical values zeroes polynomial numerator cz 
polynomial form bit integers 
analogous case second case edge touches sz leads quadratic polynomials time bit integer coefficients 
assume distinct critical values defined zeroes polynomials 
way separate roots applying rump bound 
better way follows derive lower bound 
calculated fi bit integers respectively 
repeated squaring expression transformed polynomial equation 
integer coefficients 
bit size 
cauchy bound applied gives max 

estimating get 
lemma weighted maximin location problem distinct maximum values separated absolute precision bits 
low constant totally impractical reflects worst case 
minimum unique may detected lower precision implementations sensitive see 
subquadratic algorithms weighted maximin location problem 
parametric search method choice algebraic computing model bit framework suitable develop practical algorithms considered class optimization problems theoretically challenging 
exact implementation parametric search solution require calculations bit integers increasing running time theorem factor 
comparing approaches bit framework get tradeoff running times factor factor log conjecture problems traditionally solved parametric search likewise yield exact approach 
interesting derive general results 
final note complexity maximin location problem somewhat mysterious floor functions combined addressing dimensional counterpart line solved linear time despite lower bound 
open question result generalizes 
alternatively state open problem maximin location problem solved bit model time complexity depends linearly due nter hotz chee yap helpful discussions pointing topics 
ajtai megiddo deterministic poly log log time processor algorithm linear programming fixed dimension th annual acm stoc pp 

amato preparata parallel convex hull problem revisited computational geometry applications pp 

agarwal sharir toledo applications parametric searching geometric optimization journal algorithms pp 

aurenhammer edelsbrunner optimal algorithm constructing weighted voronoi diagram plane pattern recognition pp 

mehlhorn schirra compute voronoi diagram line segments theoretical experimental results proc 
esa lncs vol 
pp 

brent fast multiple precision evaluation elementary functions journal acm pp 

maxmin location problem maximum distance constraints iee trans pp 

nach dem maximin diploma thesis univ saarlandes saarbr cken 
parallel algorithms addison wesley 
kedem pach sharir union jordan regions collision free translational motion amidst polygonal obstacles discrete computational geometry pp 

megiddo applying parallel computation algorithms design serial algorithms journal acm pp 

maximin single facility location problem euclidian metric ph thesis dept industrial engineering operations research university massachusetts ma 
preparata shamos computational geometry springer 
reif sen optimal parallel randomized algorithms dimensional convex hulls related problems siam journal computing pp 

smith winter computational geometry topological network design du hwang eds 
computing euclidian geometry world scientific publ 

tamassia vitter parallel transitive closure point location planar subdivisions siam journal computing pp 

toussaint computing largest empty circles location constraints int 
journal computer information sciences pp 


yap exact geometric computation proc 
th canadian conf 
comp 
geom 
pp 

