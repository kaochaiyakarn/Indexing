combining register allocation instruction scheduling technical summary rajeev motwani stanford university krishna new york university vivek sarkar ibm software solutions division salem new york university technical report courant institute tr july permanent address department computer science stanford university stanford ca rajeev cs stanford edu 
supported alfred sloan research fellowship ibm faculty development award nsf young investigator award ccr matching funds ibm schlumberger foundation shell foundation xerox 
permanent address courant institute mathematical sciences new york university mercer street new york ny cs nyu edu permanent address application development technology institute ibm software solutions division bailey avenue san jose ca vivek sarkar vnet ibm com permanent address courant institute mathematical sciences new york university mercer street new york ny sr cs nyu edu modern optimizing compilers contain optimization phases including register allocation instruction scheduling received widespread attention past academic industrial research 
generally recognized separation register allocation instruction scheduling phases leads significant problems poor optimization cases ill suited specific phase ordering selected compiler additional conceptual software engineering complexities trying adjust phase take account cost considerations 
goal research address problems building past combining register allocation instruction scheduling single phase 
henceforth refer model problems crisp combined register allocation instruction scheduling problem 
main contributions follows ffl formulation combined register allocation instruction scheduling basic block single optimization problem objective cost function directly captures primary measure interest code optimization completion time instruction 
formulation new underlying data structure abstractions lend designing heuristic algorithm mentioned 
heuristic algorithm formulated context existing phase ordered solution 
ffl result showing simple instance combined problem single register latencies single functional unit np hard instruction scheduling basic block latencies single pipelined functional unit np hard register allocation register allocation basic block np hard schedule 
ffl result showing combined problem easier solve approximately graph coloring common formulation register allocation phase phase ordered solutions ffl simple effective heuristic algorithm combined problem 
algorithm called ff fi combined heuristic parameters ff fi provide relative controlling register pressure instruction parallelism considerations combined heuristic 
ffl experimental results comparing heuristic algorithm combined problem solutions register allocation followed instruction scheduling instruction scheduling followed register allocation randomly generated graphs 
preliminary results show combined heuristic yields improvements range compared phase ordered solutions input graphs contain balanced amount register pressure instruction level parallelism 
imbalance performance combined heuristic approaches phase ordered solutions 
results apply combining register allocation instruction scheduling single basic block 
ultimate research goal extend results global context 
important get detailed understanding combined problem characteristics context single basic block combined approach studied earlier literature 
contributions provide 
addition cases practical interest arise large basic blocks encountered typically code transformations inline expansion graph coloring common formulation global register allocation register allocation multiple basic blocks 
practice compilers graph coloring uniformly local global register allocation optimal algorithm register allocation single basic block schedule 
calls unrolling loops sufficient register pressure warrant combined solution single basic block 
rest organized follows 
section uses example discuss phase ordered solutions register allocation instruction scheduling problems single basic block illustrate problems arise phase ordered solutions 
section presents basic formulation combined register allocation instruction scheduling optimization problem single basic block 
section starts showing combined problem np hard 
section shows combined problem essentially low level approximation complexity class max snp easier solve approximately graph coloring np hard problems 
section presents simple polynomial time heuristic formulation combined register allocation instruction scheduling problem 
section outlines important extensions basic formulation combined problem section 
results apply extended formulation extensions excluded basic formulation simplify technical discussion earlier sections 
section contains experimental results comparing phase ordered solutions register allocation instruction scheduling approximate solution combined problem 
section discusses related section wraps outline 
phase ordered solutions source code temp intermediate code vr addr vr load vr store vr vr vr dependence graph load vr vr load vr vr basic block dependency graph vr vr vr vr vr instruction scheduling followed register allocation section example discuss phase ordered solutions register allocation instruction scheduling problems single basic block illustrate problems arise solutions 
discussion informally terms value range spills schedule completion time postpone formal definitions section 
example shown 
simplify discussion chose example small basic block instructions context single stage pipeline available vr vr vr vr vr register allocation followed instruction scheduling vr vr vr vr vr combined register allocation instruction scheduling physical registers 
trends discussed example observed larger problem sizes reported section 
instruction scheduling followed register allocation common phase ordering industry compilers perform instruction scheduling register allocation 
phase ordering gives priority exploiting instruction level parallelism register utilization choose specific phase ordering quite right choice modern risc processors 
known phase ordered solution generate poor code cases ill suited phase ordering 
shows schedule generated approach 
optimal schedule idle slots completion time cycles 
instruction scheduler cleverly hides unit latency memory instruction pushing away pulling away problem occurs register allocation see instruction schedule stretched value ranges vr oe oe vr oe oe increasing register pressure 
result bandwidth time phase ordered solution forced spill value range 
register allocation followed instruction scheduling converse approach perform register allocation instruction scheduling 
phase ordering gives priority utilizing registers exploiting instruction level parallelism 
common approach early compilers target machine small number available registers 
shows schedule register allocation generated approach 
register allocation requires spills 
register allocator cleverly avoids spilling value range allocating virtual registers vr vr physical register vr vr second physical register 
problem occurs instruction scheduling see idle slot created schedule due extra register dependences 
result completion time schedule cycles spills 
combined register allocation instruction scheduling approach pays attention issues relating spilling loss instruction level parallelism 
shows schedule register allocation generated approach 
solution chose move closer move closer result idle slot schedule value ranges need spilled 
crisp model single basic block fv set instructions basic block 
dg theta data dependence graph edge enforces constraint instruction start execution instruction completes feasible schedule 
instruction labeled execution time 
dependence edge dg labeled inter instruction latency means instruction start cycles completion time instruction basic formulation assume instructions execution time cycle edge latencies 
assumptions primarily ease exposition extensions basic formulation discussed section 
schedule oe specifies start time oe instruction completion time schedule oe referred makespan simply oe max foe completion time instruction complete oe 
schedules obey condition enforces data dependence inter instruction latency constraints oe oe data dependence edge dg model register usage define def set virtual registers read written instruction assume virtual register satisfies static single assignment rule belong exactly def set 
single program variable separated multiple virtual registers def 
define prod producer instruction virtual register prod def define cons set consumer instructions virtual register cons 
assume dependence graph dg includes data flow dependences virtual registers virtual register prod cons dg 
dg may include dependences dependence memory operations may potentially interfere 
single basic block need worry case multiple defs reaching identified oe functions static single assignment form 
basic block contains straight line code intervening control flow unique def value reaches specific assume virtual register register copy operations coalesced basic block invoking instruction scheduling register allocation phases compiler 
convenient define max jg maximum number virtual registers accessed single instruction 
typically 
schedule oe define value range virtual register triple oe oe ffl oe oe instruction scheduled instruction oe ffl producer consumer virtual register ffl consumer virtual register ffl intervening instruction oe oe oe consumer virtual register note virtual register multiple value ranges def second 
different live range traditionally extends def 
value ranges represent finest granularity splitting live ranges 
vr oe set value ranges triples virtual registers schedule oe 
bandwidth vr oe time bw oe vr oe number value ranges vr oe start time time schedule oe 
note overlap value range virtual register live entry basic block modeled adding def dummy source node basic block virtual register live exit basic block modeled adding dummy sink node basic block 
ends instruction value range starts instruction correctly models hardware ability execute instruction uses physical register input output interference 
number physical registers available 
register spills required bw oe vr oe time svr oe vr oe set spilled value ranges avr oe vr oe gamma svr oe set active non spilled value ranges 
spilling value range effect forcing value contained virtual register reside memory time interval avoiding need physical register hold value time interval 
overhead spilling single value range consists store instruction inserted time load instruction inserted time architectures charge single cycle overhead instruction total cost spilled value ranges equal twice number spilled value ranges schedule oe spilled value range set svr oe said resource feasible satisfy resource constraints 
time bandwidth active value ranges larger number available registers bw oe avr oe basic formulation ignore extra registers required storing loading spilled register values 
serious limitation typically instant time schedule number registers spilled smaller number available registers 
processors hardware register renaming extra registers non issue 

time number executing instructions instructions oe oe exceed number available functional units basic formulation assume deferring discussion general case section 
restriction edge latencies basic formulation models cpu single stage pipeline 
definitions formulate combined register allocation instruction scheduling problem follows combined register allocation instruction scheduling problem crisp find resource feasible schedule oe spilled value range set svr oe minimize completion time oe oe oe sum completion time schedule twice number spilled value ranges 
theoretical underpinnings crisp section rigorous theoretical study crisp problem formulated due space limitations proofs results omitted placed appendix 
show problem fact extremely restricted version thereof np hard 
observe instruction scheduling basic block latencies single pipelined functional unit np hard register allocation register allocation basic block np hard schedule 
combined cost measure studied earlier literature important settle hardness issue 
rest section devoted showing significant distinction cases spill cost overestimate may possible accommodate load store spill instruction idle slot schedule 
possible avoid executing intermediate spill load store instructions set contiguous value ranges virtual register 
np hard problems change goal obtaining optimal solution obtaining approximate near optimal solution 
provide series results related approximability crisp 
establishing np hardness crisp show restricted version crisp problem equivalent np hard problem called feedback vertex set fvs 
imply generic crisp problem np hard 
start giving formal definition decision version problems 
restricted crisp restriction input instances edge latencies 
objective determine permutation oe oe parameter feedback vertex set fvs problem directed graph positive integer decide feedback vertex set size feedback vertex set set vertices removal incident edges result acyclic graph reduction instance fvs reduce instance follows 
vertex introduce basic block instructions distinct virtual register def fr def def 
dependence graph dg dependence edges follows edge add edge dg vertex add edges define parameter number vertices parameter fvs problem 
note total number instructions instance bound number spills allowed instance 
lemma relates problems 
recall dag directed acyclic graph 
lemma instance solution oe spills fvs instance dag 
lemma able prove desired theorem 
theorem polynomial time reduction fvs np hard 
approximating np hard optimization problems standard technique dealing np hard optimization problem relax requirement finding optimal solution settle near optimal solution 
basic motivation development area approximation algorithms 
formally np hard optimization problem denote input instance 
define opt value optimal solution instance suboptimal solution said approximation opt goal minimize value solution desirable find solution small ratio definition minimization problem 
approximation algorithm polynomial time algorithm produces valid solution input performance ratio ae defined ae max opt practice guarantee ae constant ae case approximation algorithm constant worst case performance ratio algorithm average case 
believe performance ratio bounded constant precondition performance practice 
characterization class np problems permit polynomialtime approximation constant ratio ae 
informally class max snp closure approximation preserving reductions syntactic class max snp consists problems expressible terms quantified order boolean formulas 
machinery theory approximation algorithms guide modeling solution crisp problem 
consequently able show crisp formulation accurate reflection desired goals code optimization leads optimization problems easier approximate problems formulated conventional approaches 
approximating graph coloring spill code minimization standard technique global register allocation view problem involving coloring interference graph live ranges 
vertices correspond live ranges virtual registers edge vertices represents information live ranges active simultaneously requiring assignment distinct physical registers 
feasible create spill schedule interference graph colored colors adjacent vertices receive color physical register 
graph coloring np hard heuristics employed determine legal coloring exists 
graph colorable spill code introduced heuristically 
section provide strong negative results approximability spill code minimization problem context giving explanation inherent difficulty problem encountered practice 
sheds light difficulty register allocation spill code interest establishing contrast crisp shown bypass negative results providing accurate model optimization problem reducing run time 
proposition interference graph register bound approximation algorithm ratio ae gamma problem finding maximum colorable subgraph example approximation ratio extremely close 
inaccuracies problem model spill code minimization 
subgraph obtained removing edges corresponds removing interferences live ranges 
spilling live ranges corresponds closely removing vertices graph resulting problem finding maximum set vertex induced subgraph colorable 
prove strong negative result new problem results 
theorem interference graph register bound np hard approximate problem finding maximum colorable vertex induced subgraph ratio ffl second inaccuracy modeling spill code minimization objective maximize number live ranges spilled minimize number live ranges spilled 
running time generated code increased amount proportional number spills number non spills completely irrelevant 
problems equivalent case finding optimal solutions reason approximability related 
fact problem minimizing amount spill minimum vertex cover problem approximated ratio ae 
show happy situation carry case arbitrary register bounds 
theorem interference graph register bound np hard approximate ratio ae ffl problem finding minimum number vertices delete leave colorable subgraph 
approximability crisp consider approximability crisp formulation 
saw earlier fvs special case crisp interesting analyze approximability problem 
current best known approximation algorithms fvs instances size guarantee performance ratio ae logn example see leighton rao 
fact conjecture np hard obtain approximation ratio ae log fvs 
difficulty approximating fvs may appear impossible devise approximation algorithm constant ratio ae problem 
important keep mind equivalence optimal solutions problems approximate solutions 
particular careful examination reduction fvs proof theorem shows fvs instance solution value instance solution value size fvs instance 
feedback vertex set subset set vertices size satisfy consequently range values instance 
follows greedy solution instance ae approximation ae 
course applies instances obtained fvs instances reduction basic idea generalized instances fact crisp instances 
obtain theorem proof omitted sake brevity theorem instance crisp average value instructions exists polynomial crisp approximation ratio instances practice value significantly smaller average read write degree basic block lie 
general heuristic crisp established crisp approximation algorithm worst case ratio ae small constant suffice practical purposes average ratio ae ffl ffl typical input instances 
generic heuristic section believe give desired performance practice evidenced experimental results section 
heuristic draws insight optimal algorithm spill code generation instruction schedule fixed 
suppose instance crisp specific instruction schedule oe respects dependences dg 
problem spill minimum number value ranges satisfy register resource constraint 
view value range vr oe oe defining interval stretches points oe oe real line 
spill code minimization problem viewed problem removing smallest number intervals ensure value ranges contain straddle point line 
equivalent problem deleting smallest number vertices interval graph render colorable 
recall interval graph obtained placing vertex interval connecting intervals overlap non trivially 
greedy algorithm runs linear time shown give optimal solution scan points left right point register bound violated delete interval containing current point goes furthest right 
omit straightforward proof proposition 
proposition greedy algorithm gives optimal solution crisp spill code minimization 
case multiprocessor schedules employ algorithm associating point instructions scheduled processor point time 
variants greedy algorithm considered earlier compiler literature 
ready describe proposed heuristic 
heuristic depends rank functions greedy list scheduling algorithm 
register rank fl instruction set successors dg read virtual register associated length longest directed path dg going length defined adding instruction execution times edge latencies path 
total execution time instructions lie paths dg 
define rank fl min sr max ae oe rank 
multiple virtual registers associated rank summed distinct choices virtual registers scheduling rank fl rank function greedy list scheduling algorithm example rank function defined choice 
choice parameters ff fi ff fi define heuristic 
ff fi combined heuristic heuristic creates combined rank function fl fffl orders instructions list increasing order rank 
runs greedy list scheduling algorithm list obtain schedule worrying register bound 
spill code minimization algorithm described schedule decide value ranges spill 
easy verify computation rank functions greedy list schedule implemented worst case polynomial quadratic time expected run linear time typical inputs average case 
heuristic easily generalizes crisp extensions described section 
extensions basic crisp model section outline important extensions basic formulation crisp problem section extensions excluded basic formulation simplify technical discussion earlier sections 
clear hardness results apply extended formulation hard see heuristics algorithms suitably extended 
multiple register classes 
basic formulation section directly extended model multiple register classes 
instance consider case need model fixed point registers floating point registers condition registers 
assume virtual register physical register belongs classes 
define vr oe set value ranges triples virtual registers register class schedule oe 
main extension required define bandwidth register class time bw oe vr oe number value ranges register class start time time number physical registers available class register spills required class bw oe vr oe time svr oe vr oe set spilled value ranges register class avr oe vr oe gamma svr oe set active non spilled value ranges register class overhead spill register class section assumed single class registers 
objective function minimized oe theta oe stage pipeline 
basic formulation restricted instruction execution times edge latencies 
formulation model single stage pipeline 
generalization single stage pipeline simple 
restrict execution times restrict edge latencies range gamma 
spill cost contiguous value ranges 
briefly mentioned section possible avoid executing intermediate spill load store instructions set contiguous value ranges virtual register 
savings come requiring intermediate load store pair point contiguous value ranges 
modeled allowing contiguous value ranges merged svr sets svr svr replace single merged value range 
svr reduced spilled value range set obtained merging 
cost function oe theta oe smaller oe oe multiple functional units 
load store units extend definition combined cost function oe oe oe account spill costs accurately 
experimental results section experimental results comparing phase ordered solutions register allocation instruction scheduling approximate solution crisp ff fi combined heuristic 
subsection summarizes results observed 
subsection outlines instruction scheduling register allocation algorithms implemented obtain experimental results 
subsection describes methodology automatically generate random problem instances crisp 
summary results table appendix summarizes average cost ratios observed combined heuristic compared phase ordered solution instruction scheduling followed register allocation single stage pipeline available registers 
cost ratio values identify cases combined heuristic lower cost phase ordered solution 
measurements averaged randomly generated instruction dag 
results show combined heuristic yields combined costs better obtained phase ordered solution despite fact phase ordered solution schedules makespans smaller obtained combined solution 
results underscore importance focusing optimization improving combined cost function right start improving makespan 
table appendix summarizes improvements observed combined heuristic compared phase ordered solution register allocation followed instruction scheduling single stage pipeline available registers 
measurements averaged randomly generated instruction dag 
results show combined heuristic performs phase ordered solution 
results obtained simple combined heuristic ignore component rank function fl defined section 
separate measurements observed dag little register pressure phase ordered solution instruction scheduling followed register allocation performs little better combined heuristic 
difference goes away ff fi values adjusted give priority instruction scheduling case setting ff fi 
ability adapt behavior combined heuristic adjusting ff fi values important practical strength algorithm 
algorithms experiments scheduling gamma allocation phase ordered solution implemented rank algorithm instruction scheduling step greedy algorithm section register allocation step 
allocation gamma scheduling phase ordered solution tried standard coloring heuristic algorithm quickly discovered led significantly larger number spills greedy algorithm outlined section 
avoid severely penalizing phase ordered solution note measurements table greedy algorithm section register allocation step 
instruction scheduling step rank algorithm 
combined solution ff fi combined heuristic section 
generation random dag random dag generator works set input parameters number nodes number node types average inputs outputs type max latency percentage loads stores 
forms sequence nodes randomly assign types 
connectivity latency information added follows 
repeat steps node input graph 

select random predecessors node follows number inputs instruction node select nodes randomly current def set 
node store sink current def set 

toss coin biased age remove nodes def set long time 

increase ages nodes def 
set 

graph defined randomly assign nodes outgoing edges node get latencies note node type defines maximum latency 
related research started examine interaction register allocation scheduling 
closest approach formulation deals combined optimization problem due fischer 
algorithm sethi ullman numbering solves combined allocation scheduling problem data dependences represented trees 
restrict case inter instructional latencies modeling pipeline delays required latency instructions delayed loads allowed occur leaves trees 
approach address question data dependence structures general trees note basic blocks elimination common subexpressions gives rise directed acyclic graph dag structures trees 
contrast proposed research aims general case program fragments represent basic blocks modeled dags pieces represent traces entire procedures single basic blocks 
consider aggressive pipeline depths essentially arbitrary integer depths specified part input merely pipeline latencies 
interesting attempt reducing interaction instruction scheduling register allocation involves constructing special parallelizable interference graph 

graph property optimal coloring result create false dependences instructions due register sharing 
approach dependent allocation graph coloring 
performance coloring heuristic poor number available colors registers number required coloring heuristic necessary introduce spill code 
case pinter non interference property breaks heuristics suggested prioritize allocation scheduling vice versa estimates relative benefits 
approaches proposed handling interaction iterating repeatedly steps separately 
interesting note enhancement register allocation limited form combined register allocation instruction scheduling 
idea shorten live range moving instruction computes live range value closer 
considers limited code motion kind address code motion required instruction scheduling 
drawback previously known approaches model combined register allocation instruction scheduling single cost function 
result sharp quantitative understanding ability predict performance algorithms heuristics designed optimizations parameters target processors number functional units pipeline depths number registers change time 
studied problem combining register allocation instruction scheduling single phase 
established hardness approximability results problem 
developed new heuristic algorithm combined problem promising evidenced early experimental results 
comprehensive comparison combined phase ordered solutions including prototype implementation solutions back ibm xl compilers 
allen leung courant institute providing scheduler random graph generator experiments 
allen rosen zadeck editors 
optimization compilers acm press addisonwesley appear 
arora lund motwani sudan szegedy 
proof verification intractability approximation problems 
proceedings rd annual ieee symposium foundations computer science pp 

bernstein goldin golumbic krawczyk mansour pinter 
minimization techniques optimizing compilers 
proceedings sigplan conference programming language design implementation pp 

bernstein rodeh 
global instruction scheduling superscalar machines 
proceedings sigplan conference programming language design implementation pp 

eggers henry 
integrated register allocation instruction scheduling 
proceedings th international conference architectural support programming languages operating systems pp 

briggs cooper kennedy torczon 
coloring heuristics register allocation 
proceedings sigplan conference programming language design implementation pp 

briggs cooper torczon 
improvements graph coloring register allocation 
acm transactions programming languages systems 
chaitin 
register allocation spilling graph coloring 
proceedings sigplan conference compiler construction pp 

chaitin auslander chandra cocke hopkins markstein 
register allocation coloring 
computer languages 
chow hennessy 
priority graph coloring approach register allocation 
acm transactions programming languages systems 
chow knobe meltzer morgan zadeck 
register allocation 
optimization compilers eds allen rosen zadeck acm press addison wesley appear 
fraser hanson 
simple register spilling retargetable compiler 
spe 

register allocation usage counts 
cacm 
garey johnson 
computers intractability guide theory np completeness freeman san francisco 
goodman hsu 
code scheduling register allocation large basic blocks 
proceedings acm conference supercomputing pp 

graham 
bounds certain multiprocessing anomalies 
bell systems technical journal 
hendren gao altman 
register allocation cyclic interval graphs 
acaps technical memo mcgill university 

hsu fischer goodman 
minimization loads stores local register allocation 
ieee se 
karger motwani sudan 
approximate graph coloring semidefinite programming 
proceedings th annual ieee symposium foundations computer science pp 

khanna motwani sudan vazirani 
syntactic versus computational views approximability 
proceedings th annual ieee symposium foundations computer science pp 

lawler lenstra rinnooy kan shmoys sequencing scheduling algorithms complexity handbooks operations research management science vol 
logistics production inventory 
leighton rao 
approximate max flow min cut theorem uniform multicommodity flow problems applications approximation algorithms 
proceedings th annual ieee symposium foundations computer science pp 

lund yannakakis 
hardness 
proceedings th acm symposium theory computing pp 

motwani 
lecture notes approximation algorithms 
report 
stan cs department computer science stanford university 
simons 
scheduling time critical instructions risc machines 
acm toplas 
simons 
instruction scheduling 
optimization compilers eds allen rosen zadeck 
acm press addison wesley appear 
sarkar code optimization modern compilers 
lecture notes western institute computer science stanford university august 
papadimitriou yannakakis 
optimization approximation complexity classes 
journal computer system sciences 
pinter 
register allocation instruction scheduling 
proceedings sigplan conference programming language design implementation pp 

fischer 
linear time optimal code scheduling delayed load architectures 
proceedings sigplan conference programming language design implementation pp 

sethi ullman 
generation optimal code arithmetic expressions 
journal acm 
ii average average average processor available ratio ratio ratio description registers makespan spilled value ranges combined cost stage pipeline table average cost ratio combined heuristic compared scheduling allocation phase ordering randomly generated instruction dag average average average processor available ratio ratio ratio description registers makespan spilled value ranges combined cost stage pipeline table average cost ratio combined heuristic compared allocation scheduling phase ordering randomly generated instruction dag appendix proof lemma 
suppose graph dag 
associate ordering isomorphism ng pair vertices edge 
construct schedule oe instance defining ordering isomorphism ng scheduling instruction time 
define follows vertex gamma gamma 
intuitively linear ordering obtained linear ordering replacing vertex sequence vertices hw claim schedule oe respects dependence graph dg verified considering types edges dg 
suppose edge edge implying verifies scheduled oe 
edges respected ordering vertices 
verified schedule oe meets register bound spilling follows observe value range virtual register gamma gamma gamma implying value range extent value range active point schedule 
conversely suppose schedule oe require spilling 
claim case instructions scheduled contiguously 
suppose instruction scheduled time gets executed active value ranges leading violation register bound absence spills 
note assume loss generality ordering instructions hw precede dependence schedule oe defines ordering isomorphism ng vertex gamma gamma 
define ordering isomorphism ng vertex 
claim pair iii vertices edge 
edge implying instructions get scheduled instructions 
ordering isomorphism respects edge directions case dag 
proof theorem 
clear reduction fvs computed polynomial time fact time quadratic size focus verification correctness reduction 
need show fvs instance feedback vertex set size instance schedule oe total cost oe 
note schedule oe cost oe number spills 
required show feedback vertex set size instance schedule spills 
suppose fvs instance feedback vertex set size consider subgraph ns induced set vertices belonging graph dag definition feedback vertex set lemma instructions corresponding vertices scheduled spilling 
spill schedule respecting register bound instructions obtained vertices ns 
observe schedule respect precedence relations instructions including obtained transitivity instructions corresponding vertices contained form reduction instruction predecessors successors transitively induced precedences handled 
extend schedule instructions instance introducing exactly spills process 
consider vertex corresponding instructions oe schedule contiguously instructions schedule instructions value range extending spilled 
exact ordering instructions scheduled schedule immaterial point view precedence edges 
note putting pair instructions means value range need spilled 
clearly obtained valid schedule number spills exactly number vertices conversely suppose instance valid schedule oe exactly spills 
set vertices corresponding virtual registers spilled oe note doesn matter value ranges virtual register corresponding vertex spilled jsj consider schedule obtained oe removing instructions corresponding vertices clearly spill precedence respecting schedule remaining instructions 
words instructions corresponding vertices ns spill schedule respecting precedences induced subgraph 
lemma obtain dag feedback vertex set size iv 
