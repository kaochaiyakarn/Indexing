compacting incremental collector performance production quality compiler martin marc feeley iro umontreal ca epartement informatique recherche op universit de montr eal new near real time compacting collector implementation production quality scheme compiler gambit 
goal system base implementation erlang writing soft real time telecommunication applications 
start description gambit memory organisation blocking collector 
design integration incremental collector gambit explained 
measure performance incremental collector compare original blocking collector 
overhead incremental collector high factor median collection pauses compatible typical soft real time requirements get average pause milliseconds maximum pause milliseconds mhz dec alpha 
revised version published proceedings international symposium memory management 
results updated fixed bug measurement software slightly pause time 
garbage collection gc frees programmer tedious error prone task memory management making programming language higher level 
uniprocessors collector interleaved main program mutator 
parcel gc long collector may adversely interfere execution mutator unresponsive collector working 
problem especially important real time applications animations real time simulations reactive systems mutator expected progress steady rate 
incremental collectors aim diminish gc spreading gc uniformly distributed parcels smaller bounded size 
incremental gc requires extra coordination mutator collector higher conservatism expensive blocking gc dead objects reclaimed time collector run 
wide space tradeoffs gc overhead predictability design incremental collector unfortunately hard pick best tradeoffs application experimental studies base decision 
designed near real time incremental compacting collector implemented production quality scheme compiler 
reports various tradeoffs performance collector wide range benchmarks 
context reported part larger effort implement compiler erlang concurrent functional programming language realtime telecommunication applications developed ericsson 
compiler called etos fl compiles erlang scheme uses gambit scheme compiler fm compile result approach reasonable efficient scheme erlang share similarities functional style dynamic typing data types 
telecommunication applications targeted hard real time applications permissible application unresponsive short periods time say milliseconds long infrequent 
application fail unresponsive longer quality service simply degrade example connecting telephone call destination close instantaneous human caller takes seconds cause small amount frustration 
average pause range milliseconds run time spent executing mutator assuming code reasonably efficient generated optimizing compiler 
constraints sufficient write erlang control software atm switch axd axd aims process transaction milliseconds 
improve responsiveness designed incremental compacting collector gambit replace blocking collector standard distribution 
application domain functional programming style anticipated high allocation rates 
incremental collector refinement dub collector dub dfs incremental collector developed small footprint interpreter scheme implementation embedded bit controllers 
gambit blocking collector gambit designed portable compiler code generated sticks ansi uses os specific features allow scheme code mixed application scheme objects accessed allocated code control jump scheme arbitrarily 
compiler uses rtl style virtual machine code gvm fm intermediate representation translates virtual instruction corresponding code concept virtual machine registers important roots collector 
portability scheme heap contains scheme objects allocated heap malloc library routine 
stack cache order properly handle tail calls see details provide efficient class continuations gambit allocates continuation frames kbyte separate stack 
deep recursion causes overflow stack cache continuation frames contains transfered scheme heap allowing recursion continue 
continuation frame copied heap back stack cache emptied function return 
continuation captured call call current continuation base temporarily moved return captured continuation frames cause copied top stack cache 
technique basically hdb finer granularity 
memory partitioning allocation classes scheme objects 
movable object may moved collector 
object moved 
permanent object moved reclaimed objects code easily manipulate worrying address suddenly invalid collector run conservative gc approach bw acceptable solution portable 
objects count field indicates world exist object prevent collector reclaiming reachable scheme world 
permanent objects useful program constants symbols including dynamically created ones 
objects dynamically allocated scheme code movable objects 
movable objects allocated efficiently incrementing free pointer 
basic block allocations movable objects coalesced single heap limit check performed 
constant size allocation primitives cons list vector vector inlined compiler 
compiler keeps floating point numbers unboxed state basic block greatly reduces need allocating boxed floating point numbers floating point intensive programs hfa 
gambit allows scheme heap grow shrink dynamically program needs change 
reason opted implement scheme heap large block cause severe fragmentation code allocates objects heap 
collection fixed size kbytes noncontiguous sections hold movable objects 
movable object section divided equal size space space 
objects allocated directly heap malloc 
large objects 
kbytes allocated objects avoid fragmenting movable object sections 
permanent objects allocated statically program constants heap symbols 
movable object sections objects free pointer limit pointer heap allocation movable objects heap 
shows heap 
allocation movable object pushes free pointer past limit pointer free pointer advanced movable object section free collector run 
note space kbytes limit pointer space 
accomodate runtime library needs blindly allocate bounded number movable objects checking limit pointer objects allocated 
stack cache space kbytes 
object representation shows movable objects represented 
objects aligned byte boundary aligned byte boundary 
lower bits pointer encode primary type information small exact integers immediates characters booleans empty list pairs memory allocated objects 
body memory allocated objects prefixed single word header contains fields bits length body bytes bits secondary type information pair vector string bits allocation class tag permanent movable forwarded movable counts tags case header contains forwarding pointer 
objects prefix header extra fields accomodate collector count links explained 
length bytes header body aligned byte boundary movable object representation 
blocking collector gambit blocking collector combines copy technique movable objects mark sweep technique objects 
permanent objects scanned collector need reclaimed contain permanent objects 
objects placed linked list allocated 
list start collection mark objects nonzero count collection reclaim unmarked objects call free library routine 
list marked scanned objects maintained collector explains objects link fields 
movable objects handled cheney style copying algorithm che overwrites header forwarding pointer 
control alternates copy mark sweep algorithms list marked scanned objects empty remaining movable objects copied space scanned 
roots collector ffl nonzero count objects ffl scheme global variables ffl virtual machine registers ffl top part stack cache continuation frames current continuation captured call call current continuation collection scheme heap resized allocating reclaiming movable object sections 
default policy currently heap twice size space occupied live objects movable objects space occupied multiplied space needed actual object copy 
user configure resizing ratio minimum maximum heap size program launched 
integrating collector gambit replacing gambit blocking collector dub collector dfs goals adapt collector production quality compiler measure performance collector realistic setting 
section describes dub collector modified 
dub collector mark compact collector compacts sliding objects ordering objects memory preserved 
dub central idea handle points movable part 
scheme object encoded tagged pointer word handle contains pointer body movable object 
indirection possible avoid update pass update object new location objects 
operation problem real time setting number update object bounded done atomically 
overhead added mutator access object 
overhead measured reported section 
gambit handles interrupts polling fee polling points heap limit checks occur basic possible maintain direct pointers movable part objects temporarily duration basic bloc 
allows indirection cost amortized multiple accesses object multi threaded context 
gambit compiler currently exploit possibility 
memory partitioning dub collector assumes fixed size heap objects movable 
simplifies memory partitioning memory section preallocated 
allows scheme heap grow shrink demand different approach needed 
memory partitioning slightly different blocking collector 
allocation classes maintained movable object sections size 
compaction done sliding objects complete size movable object section allocation just half 
allocation limit pointer handled differently 
pointing close current movable object section initially points constant amount words allocation pointer 
mutator passes control collector allocation pointer crosses limit 
collector done sets limit pointer plus allocation pointer isn space current movable object section case section 
value adjusted control granularity overhead context switches mutator collector collector pause time roughly proportional explained 
setting words offers compromise pause time overhead experiments 
handles allocated outside movable object sections handle sections 
handle section contains worst case number handles needed objects movable object section size movable object section 
handle section allocated heap handles section linked added free handle list 
list shrinks grows allocation deallocation movable objects 
handle sections freed tied directly specific movable object section individually movable objects 
handle sections maximum number movable sections past execution scheme heap size accounts handle sections 
marked object list dub collector uses main heap contiguous section purposes 
objects allocated marking stack maintained 
stack holds pointers objects marked scanned 
marking object adds stack scanning object removes top stack 
space pointer reserved stack allocation incrementing marking stack limit separates area reserved objects area reserved marking stack 
implemented marking stack linking objects marked scanned marking list 
required adding field mark field movable objects encode color object 
collector determined object reachable mark field set white 
marked mark field contains address object marking list special list marker gray 
object scanned detached marking list field set black 
note objects mark field extra field needed 
mark field handling object mutation details 
new object representation order access objects way regardless allocation class objects represented uniformly handle 
permanent objects space handle reserved header 
need mark field 
header aligned body object handle permanent object representation objects fields come header shown mark field links objects handle count link object length needed memory accounting purposes gambit supports operations shrink size object useful implementing string ports 
header aligned body count object handle mark length link object representation allocation movable object requires allocation handle free handle list allocation movable part current movable object section 
note handles movable sections necessary check exhaustion free handle list 
shown movable part fields blocking collector ffl back pointer points back corresponding handle 
needed compacting phase collector update free handle 
ffl mark links gray objects explained 
representation movable objects may space inefficient compares advantageously blocking collector hidden factor space reserved space 
word body representation blocking collector space efficient rare space efficient 
frequent case pairs representations equally space efficient 
header aligned body handle object movable object section handle section pointer back mark movable object representation note object representation allows testing color class object reading field just header 
case permanent object color appear gray handle 
collector collector called types events allocation limit reached stack cache overflows 
collector states corresponding phase collection mark roots marking compaction 
collection cycle begins collector enters mark roots phase 
time allotted collector parcel collection kept global variable collector called word bank details 
time control returns mutator time collector called resume phase 

mark roots phase 
phase performed atomically doesn need 
initializes global variables collector marks roots 
roots blocking collector stack cache 
observed big applications time needed marking roots small exceed real time constraints 
due limited number global variables scheme runtime library applications contains global variables gambit compiler largest scheme benchmark lines adds variables 

marking phase 
phase object movable object marking lists scanned 

pre compaction phase 
phase performed atomically 
time entered roots stack cache scanned mutator stored white objects collector marking phase 
fixed size stack cache bounds amount done test machine phase takes milliseconds compiler benchmark roughly millisecond benchmarks 
marks new objects collector goes back marking phase collector free unmarked objects save copy movable object allocation pointer movable objects allocated compaction phase considered black regardless mark field movable objects allocated white mark field 
compaction phase 
phase compacts heap 
copying pointer scanning pointer set base movable object section 
object movable object sections processed turn scanning pointer 
unmarked objects collected transfering corresponding handle free handle list 
marked objects copied address indicated copying pointer corresponding handle updated 
compaction ends allocation pointer set value copying pointer heap resized movable objects retained considered live 
collector called due stack cache overflow stack collection routine called 
frame stack cache copied scheme heap word bank updated size frames stack cache emptied collector called continue normal processing explained 
write barrier object stored object system ensure collector neglect mark ends marked compaction phase started course overwritten happen automatically white black 
experimented write barriers handle case 

gray white object grayed putting marking list 
original barrier proposed dub similar dijkstra barrier dlm 

gray black object grayed putting back marking list 
similar steele barrier ste 
conservative possibly reclaimed overwritten 
rejected precise barrier method location mutation store list want keep strict bound heap size 
reasonable compromise mutation primitives erlang scheme programs functional 
write barrier heap allocated objects primitives vector set set car set cdr 
cell set 
assignments local variables 
barrier roots virtual registers stack cache global variables scanned pre compaction phase collector 
eliminates need protecting scheme set 
operation global variables 
pseudocode vector set 
primitive including gray write barrier shown mutation primitives similar 
procedure gray val adds object val head marking list 
long objects scanned incrementally bound collector pauses 
marking phase collector scans long objects small segments pointer region saved control returns mutator 
consequently gray barrier mutation vector object check mutation vect index val val compaction black vect white val gray val vect index val pseudocode vector set 
primitive write barrier 
scanned region case collector parcel collection 
perfect solution general collector get stalled marking vector mutator repeatedly mutates lead heap overflowing 
fortunately context erlang system problem write runtime system way mutations performed small vectors 
collection analysis applies gray write barrier gray write barrier mutation long objects 
definitions ffl size heap words 
ffl proportion heap occupied objects retained collector collection cycle number ffl total total amount collection cycle number words mark compact 
ffl amount parcel collection 
ffl value word bank 
marking phase touch hr words worth objects compacting phase words total 
spread allocation gamma gamma words mutator 
collector touches words word allocated mutator collection cycle mutator exhausts free space long total gammar gamma gammar gamma setting gammal chosen program launch upper bound proportion heap occupied live objects 
gives plot function 
value function setting ensures collection cycle mutator exhausts free space gamma guarantees easy prove induction see dfs proof 
interesting corollary collector stay idle start collection cycle mutator allocated objects heap occupied staying idle way collector conservative efficient reclaiming garbage 
word bank collection 
start collection cycle set negative value gammah gamma gamma collector stay idle start collection cycle 
heap limit crossed stack cache overflows number words allocated movable objects added typical case heap limit reached increases steps negative collector returns immediately mutator 
amount collection calculated bc collector performs words worth collection sets returns mutator 
results measure performance incremental collector set scheme benchmarks 
cases programs compiled gambit compiler declarations gave fastest execution inlining primitives specific arithmetic runtime type checks 
short running programs modified repeat computation times total execution time seconds 
group programs comes gabriel benchmark suite gab 
programs kernels stress specific features system arithmetic allocation traversal mutation recursion iteration 
benchmarks don perform allocation ignored tak triangle traversal phase traverse 
second group consists floatingpoint intensive programs fft simplex 
third group contains larger applications mix various types symbolic processing including lots allocations object mutations traversal data structures conform type checker lines partial evaluator lines earley parser lines maze construct maze lines compiler gambit scheme compiler lines 
benchmarks run unloaded mbyte mhz dec alpha running digital unix 
cpu time statistics measured library routine millisecond resolution 
considered gettimeofday routine measure time microsecond measures real time short duration statistics measured maximum collector pause easily perturbed os context switches control 
benchmark run 
times seconds 
reduce importance differences memory partitioning different collectors programs run fixed size heap mbytes 
avoided unexpectedly long collector pauses resizing heap calls malloc free large blocks takes milliseconds 
overhead incremental collection goal measure total overhead incremental collector blocking collector production quality compiler gambit 
wish find overhead associated performing collection incrementally 
purpose programs run different collectors 
blocking collector standard gambit distribution 

collector run blocking collector collection done completely heap full write barrier 
overflow causes full collection done 

full incremental collector described value 
results reported 
column gives allocation rate program mbytes second run second column gives execution time seconds execution time collectors expressed relative time overhead respect stands clearly 
collector run type write barrier 
note results ordered overhead gray barrier 
alloc mb sec gray gray boyer puzzle compiler fft traverse browse conform simplex earley maze deriv execution time collector seconds relative 
collector overhead includes allocation handles indirection cost accessing memory allocated object difference collection algorithms 
ignore boyer overheads range median 
see overhead roughly correlated allocation rate 
reasonable object allocation significantly expensive simple pointer increment performed objects allocated including dead ones need processed compaction phase 
highest overhead spends time tight loop performing accesses pairs allocation pair soon dead 
anomaly exists boyer slowest mutator collector synch profile live objects sawtooth going kbytes kbytes mbyte heap collects moments peak live objects collectors uniformly distributed levels efficient 
allocation rate low overhead depends handle indirection cost difference collection algorithms 
interesting see complex application compiler low overhead 
attribute fact modular design causes lot time spent procedure calls returns modules unaffected collector slow gambit due tail call support designed minimize creation garbage performs collector gray barrier overheads range median 
overheads follow trend blocking collector median factor higher maximum times higher maze 
transition lower overhead transition words overhead incremental collector incrementality compacting collector handles 
consider benchmarks perform mutations objects gray barrier faster gray barrier median factor maximum times faster compiler 
explanation gray barrier may cause objects marked multiple times extra cost outweighs benefit lower conservatism 
collection pauses important aspect measure duration pauses incremental collector 
average pause course interesting context soft real time applications important know maximum pause percentage total execution time spent collector gc 
gives measurements ordered gc gray barrier 
average pause range milliseconds median milliseconds 
maximum pause range milliseconds median milliseconds 
gc range median 
measurements compatible real time constraints 
programs highest gc high allocation rates live objects top floating point intensive programs strictly allocate 
situation collector spend large fraction time compacting black objects fact garbage 
objects allocated associated needed compaction phase objects allocated black 
shows distribution pause times 
axis gives pause time seconds extent avg max gc compiler puzzle conform browse boyer simplex earley fft deriv maze average maximum collector pause seconds percent time spent collector 
axis indicates maximum collector pause 
seen distribution compact average distant outliers 
discussion glance overhead incremental collector high practical 
overhead put perspective 
erlang programs compiled etos gambit collector roughly times faster jam bytecode implementation erlang fl 
program incremental collector slowed factor compared collector program times faster jam 
course overhead pause time tolerable depends application 
reassuring measurements collector fit closely requirements soft real time telecommunication applications millisecond average pause millisecond maximum pause 
note test machine mhz dec alpha years old writing faster microprocessors readily available 
executed current mhz dec alpha compiler benchmark ran times faster collector times faster collection pauses millisecond average maximum pause milliseconds 
way word bank handled collector starts collecting mutator allocated fair amount word bank positive 
interesting investigate starting collector earlier reduce collection overhead length pauses isn clear collector conservative retaining objects boyer browse compiler conform deriv earley fft maze puzzle simplex traverse distribution collector pauses 
died 
dynamic calculation necessary allow collector adapt behavior application 
need testing collector soft real time erlang applications 
wait etos complete robust 
dub collector fully integrated plan integrate near real time collectors particular suited context compare performance 
experimental results show incremental collector able meet maximum average pause time constraints needed telecommunication applications 
overhead incremental collector respect blocking collector high factor working context optimizing compiler compute power left mutator compares favorably bytecode implementation erlang 
supported part ericsson telecom ab natural sciences engineering research council canada fonds pour la formation de aide la recherche 
armstrong virding williams 
concurrent programming erlang 
prentice hall second edition 
axd axd high performance atm switching system 
ericsson telecom ab 
bw hans juergen boehm mark weiser 
garbage collection uncooperative environment 
software practice experience 
che cheney 
non recursive list compacting algorithm 
communications acm november 
dfs danny dub marc feeley manuel serrano 
un gc temps eel semi 
guy lapalme christian queinnec editors journ ees des langages volume pages val morin qu ebec 
inria 
dlm dijkstra leslie lamport martin scholten 
fly garbage collection exercise cooperation 
communications acm november 
dub danny dub 
un syst eme de programmation scheme pour micro 
master thesis epartement informatique de recherche op universit de montr eal april 
fee marc feeley 
polling efficiently stock hardware 
proceedings functional programming computer architecture pages copenhagen june 
fl marc feeley martin 
compiling erlang scheme 
proceedings programming languages implementations logics programs conference september 
fm marc feeley james miller 
parallel virtual machine efficient scheme compilation 
conference record acm symposium lisp functional programming pages nice france june 
acm press 
feeley miller wilson 
compiling higher order languages fully tail recursive portable technical report epartement informatique de recherche op universit de montr eal aout 
gab richard gabriel 
performance evaluation lisp systems 
mit press series computer science 
mit press cambridge ma 
hdb hieb dybvig bruggeman 
representing control presence firstclass continuations 
acm sigplan notices 
hfa pieter hartel marc feeley martin alt lennart augustsson peter baumann marcel emmanuel christine flood wolfgang john van groningen kevin hammond melody ivory richard jones peter lee xavier leroy rafael lins sandra niklas manuel serrano jean pierre talpin jon stephen thomas pierre weis peter 
benchmarking implementations functional languages benchmark 
journal functional programming 
scott nettles james toole 
real time replication garbage collection 
proceedings sigplan conference programming language design implementation 
published sigplan notices volume pages albuquerque new mexico june 
acm press 
ste guy steele jr multiprocessing garbage collection 
communications acm september 
