pddl planning domain definition language draft manual produced aips planning competition committee malik ghallab ecole nationale superieure des constructions adele howe colorado state university craig knoblock isi drew mcdermott chair yale university ashwin ram georgia tech university manuela veloso carnegie mellon university daniel weld university washington david wilkins sri ucpop language manual written researchers university washington anthony barrett dave christianson marc friedman chung kwok keith golden scott penberthy david smith ying sun daniel weld contact drew mcdermott mcdermott drew yale edu comments draft 
april manual describes syntax pddl planning domain definition language problem specification language aips planning competition 
language roughly expressiveness pednault adl propositions roughly expressiveness actions 
hope encourage empirical evaluation planner performance development standard sets problems comparable notations 
manual describes syntax formally semantics planning domain definition language pddl 
language supports syntactic features ffl basic strips style actions ffl conditional effects ffl universal quantification dynamic universes object creation destruction ffl domain axioms stratified theories ffl specification safety constraints 
ffl specification hierarchical actions composed subactions subgoals 
ffl management multiple problems multiple domains differing subsets language features support sharing domains different planners handle varying levels expressiveness 
pddl intended express physics domain predicates actions possible structure compound actions effects actions 
planners require addition kind advice annotations actions attaining goals carrying compound actions circumstances 
provide advice part pddl notation explains perverse aura neutrality surrounding notation various places 
result neutrality planners require extending notation planner want extend different ways 
advice left anticipate planners handle entire pddl language 
factored language subsets features called requirements 
domain defined pddl declare requirements assumes 
planner handle requirement skip definitions connected domain declares requirement won cope syntax 
pddl descended ffl adl ffl sipe formalism ffl prodigy formalism ffl formalism ffl formalism ffl directly ucpop formalism hope encourage sharing problems algorithms allow meaningful comparison performance planners different problems 
particular goal provide notation problems aips planning contest 
simple example give flavor language consider pednault famous example involving transportation objects home briefcase effects involve universal quantification objects moved conditional effects inside briefcase moved 
domain described terms action schemata shown 
encapsulate schemata defining domain listing requirements 
define domain briefcase world requirements strips equality typing conditional effects types location constants predicates location 
domain set requirements allow planner quickly tell able handle domain 
example version briefcase world requires conditional effects straight strips representation planner able handle 
keyword symbol starting colon requirements field called requirement flag domain said declare requirement flag 
domains include built types object object number 
domains define types location physical object domain 
constant symbol meaning problems domain 
case briefcase constant 
type briefcase don need briefcase 
inside scope domain declaration specifies action schemata domain 
action mov parameters location precondition effect forall specifies briefcase moved location location symbols starting question marks denote variables 
preconditions dictate briefcase initially starting location action legal illegal try move briefcase place initially 
effect equation says briefcase moves destination longer started inside briefcase likewise moved 
action put parameters location precondition effect action definition specifies effect putting briefcase 
inside briefcase 
action attempted object place briefcase effect 
action take parameters precondition effect final action provides way remove briefcase 
pednault example problem supposed home dictionary briefcase inside 
furthermore suppose wished dictionary briefcase wanted keep home 
specify planning problem follows define problem get paid domain briefcase world init place home place office object object object home home home goal office office home invoke planner typing graph plan get paid 
planner checks see handle domain requirements plans 
syntactic notation notation extended bnf ebnf conventions ffl rule form syntactic element 
expansion 
ffl angle brackets delimit names syntactic elements 
ffl square brackets surround optional material 
square bracket superscripted requirement flag types typing means material domain defined declared requirement flag 
see section 
ffl similarly symbol may superscripted requirement flag indicating expansion possible domain declared flag 
ffl asterisk means zero plus means ffl syntactic elements parameterized 
list symbol 
denote list symbols ebnf definition list 
definition symbol 
look list 
list symbols just symbol 
ffl ordinary parenthesis essential part syntax defining semantics ebnf meta language 
said section pddl intended express physics domain require extension represent search control advice planners need 
recommend extensions obey convention extended pddl expression ordinary pddl expression subexpressions form pddl expression advice 
notation indicates ascending meta level 
word expression interpreted part pddl expression single symbol expression form 
instance definition mov enhanced particular planner action mov parameters location precondition goal type achievable goal type filter effect forall primary effect side effect indicate 
primary effect vs side effect planner encounters goal form may introduce mov action plan order achieve goal goal form may achieved action form introduced reason cause mov action created 
different goal types action mov place place arises rejected immediately giving rise subgoal place place 
adopting convention improve portability plan problem collections planner pddl written ignore advice unexpected contexts 
may introduce complex syntax attaching advice different planners general principle expression form occur mean exactly thing far domain physics concerned 
comments pddl semicolon newline 
string behaves single space 
domains describe language formally 
ebnf defining domain structure domain 
define domain name 
extension def 
require def 
types def 
typing constants def 
domain vars def 
expression predicates def 
timeless def 
safety def 
safety structure def 
extension def 
extends domain name 
require def 
requirements require key 
require key 
see section types def 
types typed list name 
constants def 
constants typed list name 
domain vars def 
domain variables typed list domain var declaration 
predicates def 
predicates atomic formula skeleton 
atomic formula skeleton 
predicate 
typed list variable 
predicate 
name 
variable 
name 
timeless def 
timeless literal name 
structure def 
action def 
structure def 
domain axiom def 
structure def 
action method def 
indicated arguments particular order may come order domain 

proviso convenience implementers define strict subset pddl imposes additional restrictions 
keyword arguments define domain similar constructs appear order specified manual 
argument may omitted 

just pddl definition domain problem may appear file 

see section forbidden 
names domains occurrences syntactic category name strings characters letter containing letters digits underscores 
case significant 
extends argument domain inherits requirements types constants actions axioms true propositions named domains called ancestors domain 
requirements field intended formalize fact planners handle problems pddl notation 
requirement missing inherited ancestor domain defaults strips 
general domain taken declare requirement ancestor declares 
description possible requirements section 
types argument uses syntax borrowed pddl typing handled planner 
typed list 
typed list 
typing type 
typed list 
type 
name 
type 
type 
type 
fluents fluent type 
typed list declare types list entities types preceded minus sign element list declared type follows object types follow 
example typed list name 
integer float number occurs types argument domain declares new types integer float 
subclasses number subclass object default 
integer number float number physical object object 
atomic type name just timeless unary predicate may predicate sense 
addition atomic type names compound types 
union types 
fluent type object value varies situation situation type 
see section 
domain variables declaration domains declare requirement flag expression evaluation requirement accompanying syntactic class domain var declaration described section 
constants field syntax types field semantics different 
names taken new constants domain types described 
declaration constants theater division division division indicates domain distinguished constants denoting theater symbols denoting divisions 
predicates field consists list declarations predicates typed list syntax declare arguments 
timeless field consists list literals taken true times domain 
syntax literal name 
defined section 
goes saying predicates timeless propositions declared ancestor domain 
built predicates behave inherited ancestor domain implemented way depends implementation 
remaining fields define actions rules domain sections 
actions ebnf action definition action def 
action action functor 
parameters typed list variable 
action def body 
action functor 
name 
action def body 
vars typed list variable precondition gd 
expansion action spec 
action expansion methods action maintain gd 
action effect effect 
expansions boolean 
action parameters list simply list variables particular rule operates arguments typing syntax described 
vars list locally bound variables semantics explained 
precondition optional goal description gd satisfied action applied 
defined section pddl goal descriptions quite expressive arbitrary function free order logical sentence allowed 
preconditions specified action executable 
effects list changes action imposes current state world 
effects may universally quantified conditional full order sentences disjunction skolem functions allowed 
important realize pddl asymmetric action preconditions considerably expressive action effects 
effect describes effects action 
see section 
domain declares requirement action expansions legitimate include expansion field action specifies ways action may carried terms presumably simpler actions 
meaningful impose constraint gd 
maintained execution action 
see section 
action definition effect expansion 
free variables allowed 
variables action definition preconditions maintenance condition expansion effects included parameter vars list explicitly introduced quantifier 
vars mainly convenience 
variables appearing behave bound existentially preconditions universally effects error instance satisfies existential precondition 
example definition action spray paint parameters color vars location precondition robot effect forall color robot place avoid error 
variables occurring free effect action field bound precondition field 
optional argument expansions described section 
goal descriptions goal description specify desired goals planning problem preconditions action 
function free order predicate logic including nested quantifiers allowed 
gd 
atomic formula term 
gd 
gd 
gd 
literal term 
gd 
disjunctive gd 
gd 
disjunctive gd 
gd 
disjunctive imply gd 
gd 
gd 
existential exists typed list variable 
gd 
gd 
universal forall typed list variable 
gd 
literal 
atomic formula 
literal 
atomic formula 
atomic formula 
predicate 
term 
name 
term 
variable 
course occurrence predicate 
agree declaration terms number applicable types arguments 
hopefully semantics obvious 
effects pddl allows conditional universally quantified effects 
description straightforward effect 
effect 
effect 
atomic formula term 
effect 
atomic formula term 
effect 
conditional forall variable 
effect 
effect 
conditional gd 
effect 
effect 
fluents change fluent 
expression 
assume variables bound quantifier parameters section action definition 
strips truth value predicates assumed persist forward time 
strips pddl delete list deleting simply asserts 
action effects mention predicate truth predicate assumed unchanged instance action 
semantics follows true action effect occurs 
secondary precondition 
action feasible false effect occurs true 
fluents explained section 
action expansions classical hierarchical planners sipe plan goals specified terms actions carry goals achieve 
solution planning problems sequence actions jointly compose actions originally requested 
pddl allows style planning providing expansion field action definitions provided domain declares requirement action expansions 
field described form expansion action spec action spec 
syntax action spec 
action term 
action spec 
context action spec 
action def body 
action spec 
choice action spec 
action spec 
forsome typed list variable 
action spec 
action spec 
series action spec 
action spec 
parallel action spec 
action spec 
tag action label term 
action spec 
action label term 
action spec 
foreach foreach typed list variable 
gd 
action spec 
action spec 
dag constrained action spec 
action constraint 
action constraint context action constraint 
action def body 
action constraint series action constraint 
action constraint parallel action constraint 
action term 
action functor 
term 
action label term action label 
action label 
action label 
action label 
name 
extra choices may added action expansion action defined methods described section 
action expansion called primitive action just primitive 
possible tell action definition action primitive expansions defined methods expansion argument symbol methods 
action may expanded structure actions series parallel combination domain declares requirement dag expansions arbitrary partial order steps labeled tag 
choice expansions indicated choice 
forsome behaves choice instances 
built action term op 
action allowed expansion may expression form context action spec 
precondition maintain construct declare preconditions maintenance conditions actions due purely occurring context expansion 
repeat preconditions associated definition action 
example indicate plan evacuate area friendly forces shell write series clear area context shell area precondition exists unit friendly area syntactic sugar pddl allows write achieve abbreviation context precondition 
constrained syntax allows fairly arbitrary conditions imposed action spec labels standing actions endpoints 
labels defined tag labels action construct 
label stands action occurrence qualified case stands action 
inside series imposes additional ordering requirement time points tagged 
context series conditions impose extra conditions announce extra effects interval corresponding additional ordering 
example expand action subactions precedes precedes condition maintained write expansion constrained series tag 
series tag 
beg 
context series beg maintain illustration fragment university maryland translog domain specifying unload truck action unload parameters package vehicle location expansion choice 
choices elided forsome crane context constrained series tag pick package vehicle 
tag 
beg put package ground context series beg maintain package equipment precondition empty package vehicle equipment note pddl allow specify sense insert steps achieve context precondition choice opposed filter condition 
falls category advice handled planner specific way 
parallel construct imposes constraints execution order arguments 
label associated parallel composition associated action composition case label action case 
indicate condition true act set actions performed parallel act finished write constrained tag parallel tag act 
act act 

context series act maintain condition domain declares requirement foreach expansions action expansion form foreach set typed variables precondition action spec 
idea expand action zero occurrences instance true situation expanded action begins execution 
see appendix precise definition means action spec satisfied action sequence 
syntax language permits labels occur inside choice foreach action specs 
consequence formal semantics appendix constraint mentioning label inside choice branch doesn occur doesn constrain constraint mentioning label inside foreach forsome outside doesn constrain 
section mentioned action definition may contain argument expansions 
default nil planner allowed assume instances action feasible preconditions satisfied 
include action plan occurs expansion action 
intended notation indicate really know preconditions action just standard contexts preconditions sure satisfied 
see section notation allows cumbersome action expansions broken manageable pieces 
axioms axioms logical formulas assert relationships propositions hold situation opposed action definitions define relationships successive situations 
axioms domain declare requirement domain axioms 
axiom def 
axiom gd 
vars typed list variable 
context gd 
implies literal term 
vars field behaves universal quantifier 
variables occur axiom declared 
example define classical blocks world predicates clear follows axiom vars context implies axiom vars context exists implies axiom vars context table exists block implies clear domain declares requirement true negation treated technique negation failure 
means sense conclude negated formula occur deductive goals succeeds fails 
contains variables results undefined 
axioms treated directionally conclude implies field conclude formula context field 
course axiom forward backward matter advice pddl silent issue 
important reason directionality axioms avoid overly complex interactions action definitions 
rule action definitions allowed effects mention predicates occur implies field axiom 
intention action definitions mention primitive predicates changes truth value derived predicates occur axioms 
axioms action definitions describe changes predicates affected action leads complex software engineering domain engineering problem 
domain declares requirement true negation implies open world exactly action definitions interact axioms hard understand management takes responsibility outcome 
example axiom oe action causes true false 
domain requirement subgoal axioms indicates goal involving derived predicates may solved finding actions change truth values related primitive predicates 
example goal achieve achieving achieving domain declare requirement may axioms timeless predicates 
note predicate implies field axiom 
safety constraints domain declaring requirement safety constraints allowed specify safety constraints defined background goals satisfied planning process 
plan allowed background goals false 
words constraints violated point plan true 
safety def 
safety gd 
example command softbot software robot avoid deleting files backed tape constraint safety forall file written tape pddl free variables allowed 
important note safety constraints require agent true agent avoid creating new violations constraints 
example constraint specifies files read protected agent avoid changing files readable plan file readable initial state agent protect file 
details safety constraints please refer 
safety constraints confused timeless propositions 
see section 
timeless propositions true problems domain impossible action change 
special measures required ensure violated 
adding axioms action expansions modularly pddl allows domain defined gigantic define convenient break definition pieces 
notation allows adding axioms action expansions existing domain define addendum name 
domain name 
extra def 
extra def 
action def 
extra def 
domain axiom def 
extra def 
action method def 
extra def 
safety safety def 
method def 
method action functor 
name name 
parameters typed list variable 
action def body 
please remember explained section strict subset pddl allowed 
inside define addendum 
expression actions axioms behave included original define domain 
expression domain 
method declarations specify choice points expansion declared action action def body 
included inside choice original expansion action 
doesn quite neatly parameters may new names action def body 
exactly expected choice 
method definition action def body 
may effect field expansions field 
method names aid describing problem solutions structures instantiated action schemas 
action space method names need unique domain 
action method supplied original definition name method name action 
example define addendum carry methods domain translog 
method carry hub name usual parameters package tc tc expansion forsome hub hub context series carry direct tc hub carry direct hub tc precondition exists city city city reg reg region city tc city city tc city region city reg region city reg serves hub reg serves hub reg available hub precondition hazardous 
reason give names system know addendum redefined added time 
define addendum 
expression evaluated material previously associated erased definitions added 
name addendum local domain different domains name 
expression evaluation domain declares requirement expression evaluation supports built predicate eval succeeds value expression lisp syntax expressions allow functions argument position said evaluation context 
evaluation contexts places pddl functions allowed terms denoting actions 
include variables goal fail implementation dependent way 
implementations distinguish failure due value different failure due inability generate instances cf 
equation 
evaluation context argument test 
expression main functor 
expression evaluated goal succeeds evaluates goal bounded int succeeds integer interval 
evaluation contexts 
goal equation tries bind variables equal 
evaluation contexts unbound variable bound value evaluate thing 
bound unbound equation bind 
don expect implementation fancy implementation handle case single occurrence unbound variable buried inside expression form 
domain vars defined define domain 
expressions evaluated evaluation contexts 
syntax domain vars def 
domain variables typed list domain var declaration 
domain var declaration name 
name 
constant 
define domain cat hat types thing domain variables integer 
axiom vars integer context bounded int implies thing variable scoped entire domain inherited domains extend 
variable extending theory shadows original binding 
domain declares requirement fluents supports type fluent type plus new predicates 
fluent term time varying value value change result performing action 
proposition current value true situation current value situation 
planner handles fluents requirement built predicate fluent eval succeeds value current value fluent occurs behaving eval 
similarly predicate fluent test test fluent eval eval 
addition effect change changes value fluent evaluation context value computed respect situation obtaining action cf 

action pour parameters source dest container vars sfl dfl fluent number dcap number precondition contents source sfl contents dest dfl capacity dest dcap fluent test sfl dfl dcap effect contents source sfl contents dest dfl change sfl change dfl dfl sfl additional built functions comes requirement fluents sum 
fluent value situation true declares variables aren bound 
fluent evaluation context 
example fluent eval sum person number aboard elevator weight succeeds total weight people elevator variable bound 
note value fluent depends elevator mass formulation assumed change 
taken account write fluent eval sum person fluent number aboard elevator weight fluent 
problems problem planner tries solve 
defined respect domain 
problem specifies things initial situation goal achieved 
problems may share initial situation facility defining named initial situations 
problem 
define problem name 
domain name 
require def 
situation 
object declaration 
init 
goal 
length spec 
situation 
situation name 
object declaration 
objects typed list name 
init 
init literal name 
name 
name 
goal 
goal gd 
goal 
action expansion action spec action term 
length spec 
length serial integer parallel integer initial situations defined def 
define situation name 
domain name 
object declaration 
init 
problem definition specify initial situation name list initially true literals 
specifies literals treated effects adds deletes named situation 
objects field describes objects exist problem initial situation declared constants field domain 
objects need declared occur init list way type unambiguous 
predicates explicitly said true initial conditions assumed pddl false domain declares requirement open world 
example define situation briefcase init domain briefcase world objects init place home place office define problem get paid domain briefcase world situation briefcase init init home home home goal office office home goal problem definition may include goal description domain declare requirement action expansions expansion 
solution problem series actions action sequence feasible starting situation situation goal true situation resulting executing action sequence expansion satisfied series actions sense explained appendix 
instance transportation domain problem define problem transport beans domain transport situation standard network init beans beans beans chicago expansion constrained tag carry train beans chicago newyork 
context precondition spoiled beans requirements field problem definition rare case goal initial conditions specified problem require kind expressiveness problem domain 
length field problem definition declares known solution length may useful planners look solutions length 
addendum names see section problem names global 
exactly passed planner implementation dependent 
scope names table showing different kinds names scope bound name type scope reserved word pddl language domain name global type domain inherited constant domain inherited domain variable domain inherited predicate domain inherited action functor domain inherited addendum domain local situation name domain inherited problem name global method name action functor names scope domain inherited visible domain descendants 
names scope domain local visible domain visible descendant domains 
method names documentation convenience need scope functor methods 
limited possibility overloading names pddl 
name may global scope entity problem domain scope entity predicate 
domain scoped name different kinds entity 
instance name type action 
rules method names looser true names 
restriction distinct methods action may name 
current requirement flags table requirements pddl 
requirements imply abbreviations common sets requirements 
domain stipulates requirements assumed declare requirement strips 
requirement description strips basic strips style adds deletes typing allow type names declarations variables disjunctive preconditions allow goal descriptions equality support built predicate existential preconditions allow exists goal descriptions universal preconditions allow forall goal descriptions quantified preconditions existential preconditions universal preconditions conditional effects allow action effects action expansions allow actions expansions foreach expansions allow actions expansions foreach implies action expansions dag expansions allow labeled subactions implies action expansions domain axioms allow domains axioms subgoal axioms axioms oe goal generate subgoal safety constraints allow safety conditions domain expression evaluation support eval predicate axioms implies domain axioms fluents support type fluent 
implies expression evaluation open world don closed world assumption predicates atomic formula known true necessarily assumed false true negation don handle negation failure treat order logic implies open world adl strips typing disjunctive preconditions equality quantified preconditions conditional effects ucpop adl domain axioms safety constraints syntax checker section describes run pddl syntax checker downloaded tar distribution file 
file pddl system contains definition pddl syntax check pddl solution check syntax checker solution checker respectively 
adjust directory names calls mk load pddl system mk compile system pddl syntax check compile load file full pddl definitions domain defined expect 
works file contains syntactic errors 
find eliminate errors function pddl file file 
create new file extension chk pretty printed version input syntactic errors flagged 
error description thing 
thing subexpression error description says wrong 
idea chk file plays role log file latex 
line numbers system just prints entire input errors flagged 
works depends partly quality pretty printer 
global variable strict set syntax checker flag violations strictness defined section 
syntax checker pretty thorough job gaps 
order check correct number arguments predicates necessary store information domains checked gone way written syntax checker way stores information domain various data structures checker needs information 
way implement planner uses pddl notation start internal data structures containing information domain add indexes planner needs efficiency 
avoid collisions users code data structures stored place visible accident symbol property lists 
global hash table pddl symbol table contains global bindings 
domains stored table symbols domain scope stored binding tables associated domain 
solution checker solution checker lisp program 
compile load follow instructions syntax checker mk compile system pddl solution check 
solution pddl problem pair items 
primitive action sequence list actions expansions 

list actions called expansion hints 
second component may absent 
may course empty problem trivial 
suppose problem initial situation goal expansion solution action sequence hints solves true 
feasible starting situation situation resulting executing true 

executed necessarily contiguous subsequence 
action declared expansions occurs subsequences instantiating run solution checker load domain problem pddl file call solution check action sequence hints problem problem name 
returns verify solution nil 
may print helpful messages 
release solution checker check presence action expansions 
argument ignored 
formal definition action expansions anchored action sequence sequence hs situation ground action terms feasible situation resulting executing starting call situation result dom hq define usual way 
subscript dom refers domain respect result defined 
follows abbreviate result dom hq realization domain dom action spec anchored action sequence hs mapping domain set ordered pairs oei subexpression defined position different occurrences expression count different action tag oe substitution range set unions closed intervals real interval 
integer interval 
realization hs satisfies subexpression respect substitution oe true 
action label term 

occurrence term oe 

primitive action term oe oe gamma 

action term oe variable free expansion dom oe expansion action defining method realization dom oe hs oe oe 

series em gamma satisfies respect oe oe oe oe im oe 

parallel em satisfies respect oe oe im oe 

context satisfies respect oe oe oe ffl precondition true sl ffl maintain true integer 
min oe max oe 

choice em satisfies respect oe oe oe 

forsome vars substitution oe extending oe binding vars satisfies respect oe oe oe 

foreach vars set extensions oe oe oe ground oe im oe foe oe extends oe binding vars oe ground true sl 
tag satisfies respect oe oe oe ffl 
oe 
ffl 
oe 
ffl oe 
min oe max oe 

constrained em satisfies respect oe oe oe oe oe 
oe value repeated application rules list oe 
anchored action sequence satisfies action spec action spec realization action sequence satisfies entire action spec 
note formal definition oe occurrence inside foreach forsome yielding substitution oe action corresponding occurs action sequence 
action spec tags contexts sense interpreted empty set ignored constraints 
may want implement semantics 
scott andrews brian erol james hendler 
um translog planning domain development benchmarking planning systems 

barrett christianson friedman golden kwok penberthy sun weld 
ucpop user manual version 
technical report university washington department computer science engineering november 
available ftp pub ai ftp cs washington edu 
jim blythe oren etzioni yolanda gil robert joseph dan kahn craig knoblock steven minton erez scott reilly manuela veloso wang 
prodigy manual tutorial 
technical report cmu cs carnegie mellon university 
clark 
negation failure 
gallaire minker editors logic data bases pages 
plenum publishing new york ny 
currie tate 
plan open planning architecture 
artificial intelligence november 
erol hendler nau 
sound complete procedure hierarchical task network planning 
proc 
nd intl 
conf 
ai planning systems pages june 
drew mcdermott 
revised manual 
technical report yale computer science department 
drew mcdermott 
heuristic estimator means ends analysis planning 
proc 
international conference ai planning systems pages 
pednault 
synthesizing plans contain actions context dependent effects 
computational intelligence 
pednault 
adl exploring middle ground strips situation calculus 
proc 
st int 
conf 
principles knowledge representation reasoning pages 
dan weld oren etzioni 
law robotics call arms 
proc 
th nat 
conf 
ai pages 
david wilkins 
practical planning extending classical ai planning paradigm 
morgan kaufmann publishers 

