compiler construction scheme erik hilsdale michael ashley kent dybvig daniel friedman indiana university computer science department lindley hall bloomington indiana dyb cs indiana edu describes course compiler design focuses scheme implementation scheme compiler generates native assembly code real architecture 
course suitable advanced undergraduate graduate students 
intended provide general knowledge compiler design implementation serve springboard advanced courses 
concentrates implementation compiler outline advanced topics course builds compiler 
course compiler construction hard design 
main problem time 
courses assume similarly low level language source implementation language 
assumption leads directions 
rich source language defined compiler completed source target languages drastically simplified order finish compiler 
solution particularly satisfying 
compiler completed course considered success topics left students left unsatisfied 
compiler completed oversimplified source language compiler unrealistic theoretical grounds semantics language weak compiler generates code simplified target language compiler unrealistic practical grounds emitted code run real hardware 
alternative approach abandon assumption low level language switch high level language 
switching high level language implementation language benefit compiler takes time implement debug 
furthermore simple high level language source confers benefits small language loss semantic power 
combination possible generate code real architecture complete compiler bounds semester course 
scheme choice high level implementation source language 
extremely expressive language core language small 
title compilers goal provide general knowledge compiler design implementation serve springboard advanced courses 
students advanced undergraduates graduate students computer science 
duration fifteen week semester minute lectures week 
grading projects midterm exam final exam 
course information presents semester course scheme compiler constructed scheme implementation language see 
focuses compiler constructed course advanced course language implementation outlined uses constructed compiler testbed 
organized follows 
section describes compiler 
section discusses issues affecting design compiler course 
section outlines advanced topics course uses compiler 
section gives 
compiler compiler accepts subset legal scheme programs defined revised report subset strong compile 
language syntactically restricted numbers accepted integers bounded range lambda expressions fixed arity rest arguments 
programs free variables primitives operator position symbols runtime class continuations supported derived syntax directly supported garbage collection provided runtime library minimal 
omissions detrimental 
primitive treated value transformation page putting lambda expression accepts arguments turn passed primitive 
derived syntax supported directly compiler macro expand input step compiler written scheme host programming environment macro expander available 
class continuations ability intern symbols dynamically important covered lectures essential 
compiler described back front 
run time execution model described 
representation environment control fixes target compiler motivates structure compiler intermediate language 
code generator generates assembly code intermediate language front translates core scheme programs intermediate programs 
run time model run time execution model 
control stack fp register pointing base current frame 
frame consists return address arguments active procedure temporary values 
cp register points closure active procedure closure holds values procedure free variables 
ap register points free location heap 
accumulator register ac temporary registers andt intermediate values 
procedure call convention non tail calls follows 
caller saves closure pointer top frame 
callee frame built pushing return address evaluating argument pushing value 
operator evaluated value placed cp register 
frame pointer incremented point base callee frame control transferred jump indirect closure pointer 
return callee places return value accumulator ac jumps return address base frame 
caller restores frame pointer old position reloads cp register old value 
calling convention simpler tail calls 
arguments evaluated pushed operator evaluated stored cp register 
arguments moved downwards overwrite arguments caller frame control transferred callee 
frame pointer move 
values represented bit tagged pointers low bits tag information 
data types booleans characters empty list immediate data types encoded directly pointer 
vectors pairs closures strings symbols allocated heap 
low bits tag allocation proceed byte boundaries 
heap allocated object tagged subtracting pointer object adding tag 
fields object referenced efficiently displacement operand 
type check efficient requiring worst mask compare branch 
code generation code generator produces code run time model intermediate language 
language similar core scheme despite syntactic differences 
principal frame pointer fp heap temp temp arg arg return addr saved cp callee frame caller frame stack closure pointer cp code entry free val free val allocation pointer ap closure run time model stack display closure access variables free active procedure 
heap allocation performed incrementing dedicated allocation pointer 
ee eee 

closure free nv bound nv local primitives immediates variables intermediate language difference variable subsumed free bound forms 
free bound forms include index indicating offset cp fp register variable value local form includes name variable 
offsets fp local determined code generator 
closure form lambda locations free variables explicit 
constants restricted immediate values 
example scheme program lambda lambda cons cons quote written follows intermediate language 
cons cons closure local bound closure local free cons free cons bound free local assignment part intermediate language variable assignment directly supported chosen run time model 
closure formation copies values free variables closure data structure 
variable value occupy location 
example program value occupies local location stack frame free location closure 
allowing multiple locations precludes direct assignment locations 
variable assignment directly supported variable assignments source language converted structure mutations source source transformation discussed section 
assembly code generated intermediate programs pass 
code generated bottom invariant result evaluating subexpression left accumulator ac 
arguments primitives stored temporary locations stack code primitives generated inline 
code generated primitives unsafe type checking performed 
offsets free bound provided 
computing frame offsets local requires lexical environment passed downwards 
environment maps local variable names frame offsets 
environment necessary temporary locations primitive procedure applications interspersed local bindings 
code generation resulting assembly code assembled system assembler linked assembly code stub ld 
stub obtains memory operating system stack heap 
assembly code stub initializes registers places return address back base stack 
return value left accumulator ac printed simple coded printer 
compiling intermediate code front compiler consists conceptually parts scanner parser sequence source source translations transformation assigns locations variables 
scanning parsing scanner specified deterministic finite automaton dfa 
scheme tokens recognized 
exception legal numbers exact integers base prefixes nonterminal number redefined sign digit scanner incorporates symbol table host system implementation string symbol uses private implementation 
parser uses recursive descent algorithm 
takes sequence scheme tokens returns 
code transformation source source transformations performed forms parser produces 
transformation invokes host system macro expander expand input program expanded program 
second transformation eliminates set 
forms 
third transformation eliminates complex quoted data 
regularization 
transformation pass traversal input form 
pass checks syntax errors flags unbound variables variables name inlined primitive ensures primitives operator position wraps constants quote expressions transforms bodies multiple bodied lambda expressions expressions expressions take sub expressions 
quote set 
ee eee 

lambda constants variables primitives grammar regularized scheme output pass scheme program language defined grammar 
assignment elimination 
scheme variable assignment form set eliminated language second transformation 
variable subject set 
expression shadowed variable bound vector single element value vector assignment vector update 
example program lambda set 
quote xy transformed lambda lambda vector set 
quote quote vector ref quote vector complex quote elimination 
third transformation eliminates complex quoted constants program 
complex quoted constant quoted symbol vector string list 
instance constant replaced fresh variable variable bound lexical scope surrounding program 
symbols treated specially multiple occurrences symbol 
symbols occur complex quoted constants symbols created bound lexical scope outside scope quoted data created 
example vector quote ab quote ab lambda lambda vector cons cons symbol string ee eee 

lambda immediates variables primitives grammar simplified scheme output pass scheme program language defined grammar 
variable addressing transformation code generation assigns locations variables transforms simplified scheme program intermediate language 
analysis pass determines free variables lambda expression 
second pass rewrites program 
bound free variable converted bound free form respectively lambda expressions converted closure expressions 
expressions form lambda vn 
en rewritten expressions bound variables converted local forms 
output language defined grammar 
course student implements compiler semester 
implementation divided projects requiring close weeks class time see 
project students implement scanner parser scheme syntax described section 
specify dfa scanner macro packages declare table state case convert dfa runnable scanner 
declare table state case macros supplied students spend time learning theory write dfa spending time scanner implementation details 
extra time devoted fairly simple project allow prior scheme experience familiar language 
parsing scheme data trivial exercise second project assigned write parser algol language complex precedence associativity rules prefix suffix project weeks scanning parsing scheme parsing algol syntax code transformation allocation variable locations code generation projects expression proc formals expression variable bindings expression bindings expression expression expression expression expression expression variable expression expression expression expression expression expression expression hd expression tl expression actuals expression list variable literal formals variable list variable list variable variable variable list bindings binding list binding list binding binding binding list binding variable expression actuals expression expression list expression expression expression list literal boolean number character string grammar algol language infix operators 
students write ll grammar new syntax implement parser recognizes expressions language specified 
parser returns equivalent scheme datum fed rest compiler 
traditional parsing techniques taught functional approach attractive alternative 
third fourth assignments involve implementing transformations described sections 
order ease handling forms form intermediate language macro package available students extends scheme pattern matching capabilities 
pattern matching expressions cause execution overhead avoided transforming input records 
source source nature transformations obscured performed records 
project implementation code generator described section 
students alpha architecture manual information general form assembly code generated 
object code working code generator available comparison 
compiler designed balance pedagogy reality 
hand compiler straightforward fully implemented undergraduate semester 
hand toy compiler generate reasonably efficient code native assembly language 
compiler section balanced goals 
necessary compiler simplified macro expanding forms recognizing expressions assigning locations variables 
generated code efficient 
expressions macro expanded expressions 
example occur free 
expansion frame location unnecessarily store unreferenced variable expressions recognized expression treated full procedure call clearly higher run time cost binding variables locally current stack frame 
time premium week quarter system scheme compiler may simpler implement sacrifices goal targeting genuine hardware 
exploration simple scheme compiler see clinger hansen 
additional background reading emphasizing proof correctness scheme compiler extensive bibliography 
notable compiler convert input continuation passing style cps 
transformation simplifies regularized language transformation employed compilers functional languages 
simplifying regularized language appealing converting cps simplify compiler course 
converting cps requires extra pass obscures correlation intermediate program source level counterpart 
hinders debugging 
alternative converting cps normalize source program 
normalized program names complex intermediate expressions fixes order evaluation 
similar cps representation control explicit source level 
conversion cps normalization simplifies source language appropriate move contexts static analysis programs 
inappropriate semester course compiler construction 
assigning temporary location intermediate value part conditional unnecessary results generation poor code pass assigns locations variables sophisticated 
assigning locations generating code done simply directly program direct style 
chosen stack heap model 
abandoning stack discipline closures represent continuations call current continuation trivial implement procedure calls expensive effort taken share continuation closures 
addition heap allocation continuation frames obviates traditional problems stack management compiler heap discipline appropriate course general compiler design implementation 
advanced topics courses advanced language implementation built top course 
courses intended graduate students completed semester course 
students compilers semester implement compiler optimizations run time system extensions language features discussed lecture 
topics broadly classified compile time run time 
compile time topics compile time topics successfully covered follow course macro expansion destination driven code generation copy propagation constant folding register allocation type check elimination interpretation 
exception macro expansion compile time topics compiler optimizations 
motivate assignment early students told program solves queens problem 
constraint optimizations may applied optimizations source target code allowed 
students typically perform procedure integration constant folding peephole optimization register allocation 
optimizations done hand covered class implemented 
compiler code generator rewritten destination driven code generation pass code generation technique achieves benefits peephole optimization 
register allocation traditional techniques covered lecture including register assignment save restore placement 
students implement pass algorithm uses caller save registers job save restore placement 
algorithm try optimize register assignment 
discussion copy propagation procedure integration constant folding leads line partial evaluation 
students implement compiler passes perform transformations constraint passes terminate 
run time topics run time topics treated compile time counterparts theory possible implementation strategies topic discussed class particular strategy chosen implementation 
topics covered past course separate compilation buffered class continuations garbage collection 
bulk run time support code written scheme set low level primitives supported compiler code generator 
strategy including support code user code simply wrap support code definition string symbol routine user code expression input combination compiler monolithic program 
simple approach drawback difficult debug compiler small programs combined substantial amount run time support code 
alternative strategy separate compilation facility 
run time support code separately compiled produce library 
user code input compiler compiled linked library produce stand assembly code 
early project semester implement simple separate compilation facility supports model program development 
details implementation extended version 
separate compilation facility hand possible implement substantial projects enhance run time system 
possible set topics class continuations garbage collection input output 
possible choice allows students bootstrap compiler semester 
support class continuations stack model generalized series linked stack segments 
model supports stack overflow gracefully treating overflow implicit continuation capture new stack allocated linked overflowed segment 
class continuations simplify memory management techniques 
lecture various types memory management including mark sweep counting copying generational 
students implement copying collector scheme procedure arguments immediately reifies current continuation 
registers caller save collector procedure arguments continuation root collection 
collector iterative scheme program performs bounded amount allocation 
detect garbage collection occur heap overflow checks inserted compiler allocation 
buffered straightforward topic 
implementation requires code stub interface operating system primitives supported code generator call routines stub 
discussion second semester taught varying degrees depth breadth 
topics covered course concepts feel 
course time needed implement projects limits number topics covered 
serious projects completed semester lecture time cover topics 
regardless projects ambitious undertaking semester 
fact students complete projects due framework developed semester compiler simple realistic written scheme developed incremental programming environment 
projects take longer compiler run time support code garbage collector implemented lower level language experiment reduce debugging time simulator appropriate subset symbolic alpha assembly code introduced 
simulator embedded scheme allows scheme expressions alpha code provide robust debugging environment gdb 
simulator reduced debugging time studied 
past compile time topics discussed followed run time topics 
better organization address run time topics particularly goal students bootstrap compilers 
compilers bootstrapped students compilers non trivial test systems 
benefits compiler optimizations course dramatic 
furthermore students learn hand tradeoffs cost compile time optimizations versus benefits 
example adding register allocator add passes compiler speeds bootstrapped compiler compiled register allocation 
outlines course compiler construction 
implementation source language scheme target language assembly code 
choice languages allows direct style stack compiler implemented undergraduate semester touches aspects compilation student see compiler course traditional languages 
furthermore expressiveness barely sacrificed compiler bootstrapped provided run time support 
covering basic compilation issues course yields implemented compiler serve testbed advanced language implementation 
compiler example study advanced topics implementation class continuations register allocation 
technical report giving details preparation 
report describes implementation compiler considerably detail 
furthermore curricular materials alpha simulator declare table case macros described 
acknowledgments carl bruggeman robert hieb suresh srinivas helped design scheme subset course 
chris haynes provided useful feedback various aspects course 
aho ullman compilers principles techniques tools 
addison wesley 
andrew appel 
compiling continuations 
cambridge university press 
andrew zhong shao 
empirical analytic study stack vs heap cost languages closures 
appear journal functional programming 
michael ashley 
practical flexible flow analysis higher order languages 
appear proceedings acm symposium principles programming languages 
henk barendregt 
lambda calculus syntax semantics 
number studies logic foundations mathematics 
north holland 
robert burger oscar waddell kent dybvig 
register allocation lazy saves eager restores greedy shuffling 
proceedings acm sigplan conference programming language design implementation pages 
william clinger jonathan rees editors 
revised report algorithmic language scheme 
lisp pointers july september 
william clinger lars thomas hansen 
lambda ultimate label simple optimizing compiler scheme 
proceedings acm conference lisp functional programming pages 
kent dybvig daniel friedman christopher haynes 
expansion passing style general macro mechanism 
lisp symbolic computation 
kent dybvig robert hieb tom butler 
destination driven code generation 
technical report indiana university february 
cormac flanagan matthias felleisen 
semantics program optimization 
proceedings acm symposium principles programming languages pages 
cormac flanagan amr sabry bruce duba matthias felleisen 
essence compiling continuations 
proceedings acm sigplan conference programming language design implementation pages 
joshua guttman mitchell wand editors 
verified implementation scheme 
kluwer boston 
originally published special double issue journal lisp symbolic computation volume issue 
robert hieb kent dybvig carl bruggeman 
representing control presence class continuations 
proceedings acm sigplan conference programming language design implementation pages 
erik hilsdale daniel friedman 
scheme course compiler construction 
preparation 
suresh jagannathan andrew wright 
effective flow analysis avoiding runtime checks 
proceedings international static analysis symposium 
richard kelsey jonathan rees 
tractable scheme implementation 
lisp symbolic computation 
david kranz richard kelsey jonathan rees paul hudak philbin norman adams 
orbit optimizing compiler scheme 
sigplan notices acm symposium compiler construction 
zhong shao andrew appel 
space efficient closure representations 
proceedings acm conference lisp functional programming pages 
richard sites editor 
alpha architecture manual 
digital press 
michael sperber peter thiemann 
essence lr parsing 
proceedings symposium partial evaluation semantics program manipulation pepm pages 
guy steele jr rabbit compiler scheme 
master thesis lab massachusetts 
available mit ai memo 
peter steenkiste 
implementation tags run time type checking 
peter lee editor topics advanced language implementation pages 
mit press 

