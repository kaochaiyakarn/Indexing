framework programming denotational semantics ntua gr national technical university athens division computer science software engineering laboratory athens greece describe denotational semantics programming languages implemented exploiting object oriented programming paradigm 
implementations execution models extremely useful study programming languages 
natural choice problem domain compared functional programming languages ml suggest type safe framework implemented pure integrates functional characteristics high order functions capable naturally expressing denotational descriptions 
comparing approach possible implementations functional languages investigate extensions valuable problem domain 
denotational semantics mathematical approach programming language semantics formalism introduced scott late 
widely studied distinguished researchers means semantic analysis description evaluation implementation various programming languages 
introductions denotational approach including useful bibliography moss 
depth presentation underlying theory techniques developed reader referred stoy 
denotational approach programming language semantics described attributing mathematical denotations programs program segments 
denotations typically high order functions scott domains computed program segment appropriately combining denotations subsegments 
researchers agreed standard meta language expressing denotations considerable variation notational conventions various authors variations calculus scott domains popular 
reason consider denotational descriptions expressed variation 
denotational description programming language defines directly execution model interpreter programming language considered complete unambiguous standard obviously great value users language implementers 
easy implement interpreter translating denotational description program written general purpose programming language 
appropriate target language important greatly reduce complexity task 
languages suggested purpose success 
functional programming languages suitable suggested watt ml meta language denotational descriptions 
imperative programming languages suggested algol pascal alli alli considerably success 
case extension language suggested author second clear similar extensions extremely valuable 
harder implement interpreter won touch subject 
attempt apply object oriented programming paradigm problem implementing denotational descriptions suggest implementation language 
clear natural choice problem domain lacking lexical closures expressible functions fully operational high order functions 
believe object orientation useful tool problem domain attempt overcome difficulties imposed 
framework suggested provides type safe implementation calculus scott domains directly implement denotational descriptions 
framework differs previous approaches object oriented programming paradigm 
approach results denotational descriptions closer original meta language natural approaches imperative languages mentioned 
implementation elegant ml watt 
clear presence features high order functions currying partial binding notation determines suitability programming language implementing denotational descriptions 
features inherent functional programming paradigm partly explains ml appropriate choice problem domain 
order overcome drawbacks attempt integrate features framework 
contrast approaches goal rose watt kuhn rams integration suggest require extensions language 
unfortunately tradeoff natural description pure performance 
approach resolve dilemma expense performance grounds implementations denotational descriptions commonly study programming languages context performance little importance 
section define problem presenting meta language example provide denotational description purposefully complex functional programming language 
section framework untyped version meta language 
section extend framework adding types exploit templates type safe 
section describes elementary preprocessor front overcome lack function closures 
section consider extensions beneficial task version framework uses gnu extensions 
section discuss full example section conclude evaluation framework comparison functional approach 
definition problem order formulate denotational description meta language employed 
meta language variation calculus scott domains scot 
domain theory :10.1.1.51.1284
complete definition applications domain theory programming language semantics reader referred 
section intend formally define domain theory calculus scott domains 
focus defining problem framework attempts solve brief meta language 
basic knowledge calculus domain theory assumed 
domains mathematical spaces elements partially ordered relation definedness commonly denoted domain bottom element denoted representing undefined value 
domains constructed normal sets elements addition bottom element called flat domains denoted fe flat domain integer values denoted flat domain ftrue falseg denoted domains compound domains defined shown 
domain definitions recursive tree tree theta tree noted equations domains non trivial solutions 
element expressions formed shown denotes variable value belongs specific domain element expressions 
notational conventions include omission subscripts omission variable types notation representation functions prefix unary infix binary operators omission inl inr deduced context 
distinction cartesian smash products separated coalesced sums usually clear context possible notation 
notational convention may determining element sum domain denoted corresponds element overview calculus scott domains 
domain notation 
domain functions domain strict functions function strict iff lifted domain produced adding new bottom element distinct copy theta cartesian product omega smash product obtained cartesian product identifying pairs containing bottom elements 
separated sum containing distinguished copies elements domains 
phi coalesced sum obtained separated sum identifying bottom elements 
element expressions 
denotes true denote element flat domain denotes false 
construct requires denote element denote elements respectively 
denotes denotes true denotes false denotes function result applying function denoted value denoted ffi composition functions denoted respectively function 
fixed point operator mapping function element satisfying function mapping function corresponding strict function function mapping element corresponding element 
function mapping element 
back corresponding element pair belonging theta components denoted respectively 
functions mapping pair hx yi theta respectively 
functions mapping elements respectively corresponding element functions mapping element back corresponding element isl functions mapping element true false depending corresponds element denotes corresponding element expressed operators outl outr isl isr appropriately 
illustrate meta language denotational description pure functional language control brevity call 
language features high order functions recursion means fix operator advanced control constructs abort call cc control delimiter prompt written 
control features described detail sita 
complexity example serves purpose elements meta language possible semantic description 
figures syntax syntactic semantic domains subset semantic equations continuation semantics 
implementation denotational description requires means translating syntax domain definitions semantic equations code 
analysis problem requirements inspired techniques object oriented analysis design leads remarks ffl domains best represented classes objects represent elements encapsulating data operations 
ffl representing compound domains domains functions products lifted domains class templates parameterized type components appropriate choice 
proper representation operators domains function templates possible create type safe framework element expressions 
furthermore way possible overcome shortcoming far high order functions concerned 
ffl necessary treat syntactic domains different way 
expressing syntactic domains products sums probably complicate implementation semantic equations 
appropriate implement special coalesced sum domain representation syn complete interpreter require parser translator concrete syntax 
denotational description 
syntax 
true false pie lambda fix abort call cc gamma 
pi gamma syntactic semantic domains 
prog programs expr expressions nat integer numbers ide identifiers binop binary operators pi unop unary operators phi basic values 
function values phi values env ide environments continuations tactic domains 
ffl order naturally represent abstractions necessary find way expressing unnamed functions 
definition function abstraction considered natural choice 
expression binding variables abstractions need overcome lack lexical closures expressions 
untyped version consider implementation untyped version meta language 
implementation envelope letter idiom order achieve method polymorphism time alleviate memory management problems result object pointers 
envelope class representation scott domain elements letter classes representation various operations elements 
envelope class element defined class element private elementimpl const impl public element elementimpl const ei impl ei element const element impl impl copy element delete impl element operator const element arg const return element new impl arg impl friend element lambda const element exp return element new exp impl friend element arg int db return element new db friend element fix const element exp subset semantic equations 
prog expr env ae true ae true false ae false ae ae ae bo ae ae pie ae uo pi ae ae ae ae ae lambda ae oe ae 
ae ae ae ffi fix ae oe fix ffi ae 
oe abort ae ae call cc ae ae ffi oe ae ae bo binop 

bo bo 
bo 
bo true uo unop 
uo gamma gamma uo oe ffi strict ffi return element new exp impl friend element evaluate const element return element impl evaluate functions lambda arg creation abstraction elements operator creation function applications function fix implementation fixed point operator 
addition method evaluate evaluation elements applying evaluation rules calculus scott domains 
set letter classes element implementations derived letter class elementimpl 
order differentiate implementation classes run time need dynamic type casting mechanism 
run time type inference rtti long suggested part proposed standard generally supported compilers portable manner 
reason resort defining virtual whatis method static ismember method concrete classes 
definition facilitated special macros define rtti public virtual const char whatis const define rtti signature sig public virtual const char whatis const return sig static int ismember const return strcmp whatis sig string signatures clarity defining special enumeration classes 
class elementimpl defined class elementimpl rtti public elementimpl virtual elementimpl virtual elementimpl copy const virtual elementimpl subst int db const elementimpl val const virtual elementimpl int const virtual elementimpl evaluate const method copy implements duplication object method subst textual substitution method explained method evaluate evaluation elements 
concrete letter classes defined implementation domain operations abstractions function applications fix operator 
letter class defined bottom elements 
furthermore letter class defined implementation function parameters 
purpose de bruijn indices named dummies 
de bruijn indices facilitate definition implementation textual substitution 
letter classes defined class public elementimpl rtti signature elementimpl private elementimpl const expression public const elementimpl exp expression exp copy virtual delete expression virtual elementimpl copy const virtual elementimpl subst int db const elementimpl val const virtual elementimpl int virtual elementimpl evaluate elementimpl apply const elementimpl arg const methods evaluate subst implemented set evaluation rules metalanguage subset 
rules correspond subset meta language containing abstractions function applications fix operator 
notation represents evaluation relation read evaluates denotes textual substitution read dummy substituted 
method implements adjustment de bruijn indices necessary substituting abstractions 
example implementation methods letter classes previously mentioned write de bruijn indices 
evaluation rules meta language debruijn indices 
evaluation terms 
fix fix textual substitution 
gamma ifv adjustment de bruijn indices 
ifv ifv ifv ifv ifv ifv ifv elementimpl evaluate const elementimpl function evaluate elementimpl argument evaluate elementimpl result ismember 
const apply arg new delete delete return result elementimpl evaluate const elementimpl expression evaluate elementimpl result ismember 
const apply new delete return result elementimpl apply const elementimpl arg const elementimpl applied expression subst arg elementimpl result applied evaluate delete applied return result elementimpl subst int db const elementimpl val const elementimpl fval val elementimpl sexp expression subst db fval elementimpl result new sexp delete fval delete sexp return result elementimpl int const return new debruijn debruijn debruijn example consider expression evaluates 
expression written de bruijn indices 
evaluation expression performed code element lambda lambda arg arg lambda arg integer cout assume class integer derived element implementation integer numbers written operator printing elements 
note evaluated element contains implementation integer number type element integer expected 
due version framework corrected section 
point remarks suggested framework 
ffl term meta language represented elements implementations follow term structure 
high order functions represented implementations type directly expressed fairly natural way defining functions 
terms metalanguage evaluated run time explicit calls method evaluate 
optimizations compile time contrast possible implementations functional languages ml 
ffl possible improve efficiency framework implementing part evaluation process element constructors lambda operator 
way possible reduce size element implementations 
improved framework contains simplify method element implementations performs possible evaluations evaluating fixed point operations 
invocation method terminate true method evaluate 
ffl memory management scheme element implementations results heavy operators new delete 
overloading operators changing accordingly copy method possible implement smarter memory management scheme copy element implementations necessary keeping counters 
better results achieved proper garbage collector 
type safe version untyped version framework suggested previous section succeeds implementing numerous operations scott domains fairly natural way fails represent scott domains 
attempt provide elements type information possible derive classes element operations elements propagate type information 
furthermore untyped version able diagnose semantic errors element expressions application argument element function run time 
possible create type safe version framework implementing typed version metalanguage 
version represents scott domains classes derived element assigns type information elements propagates type information correctly consistently operations 
addition able detect type errors compile time type system 
set classes class templates derived element shown 
various class templates represent domain constructors parameterized types operands 
shows complete hierarchy implementations 
boolean function lifted product sum atom integer element elementimpl hierarchy implementations letter classes envelope classes hierarchy elements class hierarchies domain elements implementations 
type safe version functions evaluate replaced function templates propagating correct type information 
definition evaluate template evaluate const return evaluate class template function represents function domains 
defined define fun function template class function public element public function elementimpl ei element ei function const function element operator const arg const corresponding domain operators defined template function operator const arg const return new arg template fun fix const fun fun fun exp return fun new exp typed version notation necessary specify type parameter 
order framework type safe necessary explicitely specify type parameter instance compiler deduce type expression arg 
notation type safe version framework simple untyped 
macros lambda arg hide ugly implementation details user 
operator implementation lambda right associative low precedence 
empty class template defined just provide parameter type operator 
define lambda define arg new template class public int template fun operator const const exp return fun new exp example consider expression evaluates 
expression written typed meta language de bruijn indices 
note type parameter instance determined type specified corresponding notation 
evaluation expression performed code 
evaluated element expected type integer 
integer lambda fun integer integer lambda integer arg fun integer integer arg integer lambda integer arg integer integer cout note point problems type safe version framework due type system ffl type unification templates expected compilers 
gnu instance type unification fails formal parameter class template actual parameter subclass class template 
type unification succeeds borland 
ffl difficult define recursive domains tree tree theta tree 
obvious definition class tree typedef sum integer prod tree tree tree gnu borland 
way overcome problem definition problematic previous class tree public sum integer prod tree tree public tree const sum integer prod tree tree sum integer prod tree tree possible source errors way checking types parameter instances consistent types specified corresponding expressions 
preprocessor framework suggest previous section capable expressing denotational descriptions fairly natural way 
element expressions contain redundant information possible source errors 
redundant information type parameter instances 
consider expression written lambda integer lambda integer arg integer arg integer difficulties representation expression named dummies abstractions replaced de bruijn indices ii types parameter instances explicitely specified information redundant 
matter choice simplifying framework improving performance hand named dummies provide natural way representing abstractions 
problem implementation due choice implementation language 
tried unsuccessfully overcome difficulties preprocessor 
possible lacks lexical closures variable scoping expressions 
possible implement external preprocessor convert notations named dummies de bruijn indices explicitely typed parameter instances 
implemented preprocessor consisting lines code flex bison total tokens nonterminal symbols 
preprocessor previous element expression written lambda integer 
lambda integer 
redundant information notation clearer natural previous 
extensions possible enhance framework set extensions 
set gnu extensions allow get rid preprocessor affecting readability element expressions 
extensions particularly useful case ffl statement expressions compound statements parentheses appear expressions 
statement compound statement determines value construct 
extension particularly useful allows definition new scopes variables inside expressions 
ffl typeof compile time operator referring type expression evaluated 
type expression useful combination statement expressions 
obvious improvement framework gnu extensions mentioned meta language named dummies de bruijn indices abstractions 
set evaluation rules revised subset new evaluation rules 
point needs special treatment textual substitution abstractions 
solve renaming dummies necessary 
second important improvement define class template domains domain addition classes domain elements 
allows represent domain constructors operators domain expressions element expressions required 
type parameter class template represents type domain elements 
define domain domain class template domain defined template class domain see section implementation set gnu extensions 
evaluation rules meta language named dummies 
evaluation terms 
fix fix textual substitution 
fv fv new dummy free variables 
fv fv fv gamma fv fv fv public domain const return null const return new operator const return define bottom template domain operator const domain const domain return domain template domain operator const domain const domain return domain define obj typeof operator operator represent respectively domain constructors functions cartesian products operator simplifies expression domain elements allowing expressions 
macro bottom returns bottom element domain macro obj returns type domain element 
notation implemented define lambda obj new new typeof template fun const char dummy const domain exp fun result new dummy exp pointer type result statement expression bug gnu statement expressions 
delete exp return result example consider expression 
time evaluation expression performed code obj lambda lambda lambda cout third possible extension presence change framework radically unnamed functions suggested breu 
unnamed functions render unnecessary definition special class abstractions simplify hierarchy implementations 
significantly narrow gap functional languages 
unfortunately unnamed functions adopted best knowledge popular compiler 
example implemented interpreter denotational description section 
program consisted lines code including number test programs similar implementation ml consisted lines code 
significant part implementation devoted implementation syntactic domains lines compared lines ml implementation decided coalesced sums products order simplify equations 
experience clear need facilitate implementation syntactic domains framework 
code part implementation semantic equations form suggested section 
syntactic semantic domains defined earlier program problem recursive domains handled defining empty classes discussed section 
const expr return lambda ide 
bottom lambda fun env fun const expr int return lambda rho env 
lambda kappa kappa inl inl binop return lambda rho env 
lambda kappa rho rho kappa lambda return lambda rho env 
lambda kappa kappa phi lambda update rho fix return lambda rho env 
lambda kappa kappa phi fix lambda fun fun 
delta update rho phi lambda abort return lambda rho env 
lambda kappa rho lambda 
scheme accessing syntactic domains method operator simplification 
fact scheme implemented type safe way dynamic type casting function hierarchy class templates syntactic domains 
clumsy implementation syntactic domains believe implementation interpreter suggested framework entirely successful demonstrates ability implement denotational descriptions natural way 
performance interpreter lower performance implementation ml 
expected hardly supports functional programming paradigm natural problem domain performance sacrificed ease representation 
discussed section believe extension single feature unnamed functions possible achieve performance comparable functional languages 
type safe framework implementation denotational descriptions exploiting object oriented programming paradigm 
framework implemented pure set extensions valuable discussed section 
demonstrated widespread generalpurpose natural choice problem domain successfully study programming languages expressed denotational descriptions 
suggested framework translated object oriented languages supporting inheritance polymorphism generic types 
main criteria evaluation framework expressiveness performance 
concerning criterion framework provides natural way expressing denotational descriptions 
drawbacks approach imposed discussed previous sections 
compared general purpose programming languages suggested purpose framework inferior implementations functional languages ml 
object oriented programming paradigm results natural denotational descriptions possible implementations imperative programming languages 
hand consciously neglected performance implementation framework 
performance reduced factors ffl memory management poor requirements problem domain 
alleviated garbage collector overloading operators new delete 
ffl abstractions high order functions managed programmer compiler resulting poor optimizations compared performed compiler functional programming language 
solved extending unnamed function feature discussed earlier 
ffl large number virtual methods required calls reduce performance 
problem inherent object oriented programming paradigm 
consider performance significant factor evaluation framework 
implementations denotational descriptions mainly experimental execution models study programming languages 
context performance seldom important issue 
ml natural choice implementation denotational descriptions respect evaluation criteria 
main reasons ml functional programming language denotational descriptions inherently functional ii ml polymorphic static type system featuring implicit type inference high order functions class objects 
comparison lacks functional features 
suggested framework attempted integrate functional features extending language 
furthermore powerful type system supporting inheritance polymorphism generic types means templates implementations various compilers significant limitations probably semantics clearly defined generally accepted standard 
alli allison programming denotational semantics computer journal vol 
pp 

alli allison programming denotational semantics ii computer journal vol 
pp 

breu breuel lexical closures proceedings usenix conference pp 
denver october 
coplien advanced programming styles idioms addison wesley 
software composition integration functional object oriented approaches ph thesis universit de gen eve april 
de bruijn lambda calculus notation nameless dummies tool automatic formula manipulation mathematicae vol 
pp 

gordon denotational descriptions programming languages springer verlag berlin germany 
gunter scott semantic domains van leeuwen editor handbook theoretical computer science vol :10.1.1.51.1284
chapter pp 
elsevier science publishers 
gunter semantics programming languages structures techniques foundations computing mit press cambridge ma 
functional language interpreter integrated language system master thesis college university oxford oxford university computing laboratory september 
kuhn inheritance versus parameterization meyer editors proceedings technology object oriented languages systems tools pacific pp 
london prentice hall correct version ask author proceedings contain corrupted version 
framework higher order functions proceedings usenix conference object oriented technologies coots pp 
monterey ca june 
milne theory programming language semantics chapman hall london uk 
moss mosses denotational semantics van leeuwen editor handbook theoretical computer science vol 
chapter pp 
elsevier science publishers 
algol denotational semantics computer journal vol 
pp 

rams cst state transformers acm sigplan notices vol 
pp 
december 
rose rose muller integrating scheme languages conference record acm symposium lisp functional programming pp 
san francisco ca 
united functions objects overview technical report umcs university manchester department computer science 
schmidt denotational semantics methodology language development allyn bacon newton ma 
scot scott domains denotational semantics international colloquium automata languages programs vol 
lecture notes computer science pp 
berlin germany springer verlag 
sita sitaram felleisen reasoning continuations ii full abstraction models control wand editor conference record acm symposium lisp functional programming pp 
acm press 
stoy stoy denotational semantics scott strachey approach programming language theory mit press cambridge ma 
tennent denotational semantics programming languages communications acm vol 
pp 
august 
watt watt executable semantic descriptions software practice experience vol 
pp 
january 
watt watt morrison steinbach report compiler proceedings international symposium symbolic algebraic computation july 
shorter version published toolbox column acm sigplan notices 
framework programming denotational semantics acm sigplan notices vol 
pp 
august 
ph candidate department electrical computer engineering national technical university athens ntua greece 
doctoral research focuses denotational semantics programming languages relation software development process 
research interests include intelligent software agents distance learning educational software 
received sc 
computer science cornell university ithaca ny january sc 
electrical computer engineering ntua greece june 

