eliminating array bound checking dependent types hongwei xi department mathematical sciences carnegie mellon university cs cmu edu frank pfenning department computer science carnegie mellon university fp cs cmu edu type approach eliminating array bound checking list tag checking conservatively extending standard ml restricted form dependent types 
enables programmer capture invariants types type checking remains decidable theory performed efficiently practice 
illustrate approach concrete examples result preliminary experiments support support feasibility effectiveness approach 
absence run time array bound checks infamous source fatal errors programs languages compilers offer option omit array bound checks turn expensive practice chow gupta 
statically typed languages ml provide strong guarantees safety operations array bound checks omitted general 
true java bytecode interpreters compilers sun microsystems proof carrying code necula aimed providing safety transmitting code network executed remote site 
tag checking functional languages similar array bound checking 
example efficiently access tail list know list non empty 
kind situation arises frequently dynamically typed languages scheme arises compilation pattern matches ml 
traditional compiler optimizations fare task eliminating redundant array bound checks special purpose methods developed automated analysis see example markstein markstein gupta 
notable exceptions see methods try infer redundant checks pro research sponsored part advanced research projects agency title fox project advanced languages systems software arpa order 

grammer annotations limited ability synthesize loop invariants problem theory undecidable practice difficult 
contrast pursue type approach language statically typed ml 
rely programmer supply additional type information compiler reduce static array bound checking constraint satisfiability 
constraints consists linear inequalities solved efficiently practice 
approach leads language design implementation questions provides possible answer 
validated ideas prototype implementation fragment ml large encompass standard programs taken existing library code 
experiments demonstrate ffl required extended type annotations small compared size program ffl constraints arise extended type checking solved efficiently practice ffl compiled code significantly faster 
exception replace occurrence modify existing code extend annotations 
approach notion dependent type martin lof allows types indexed terms 
example ml type integer lists int list 
dependent types express precise type integer lists length int list 
example index object 
function appending integer lists type int list 
int list 
int list unfortunately restrictions form index objects automatic type checking language dependent types undecidable impractical 
avoid problems combination important ideas ffl separate language type indices language terms 
things separation avoids question meaning effects type indices permits clear phase distinction type checking evaluation 
aware empirical study regarding practical significance 
assert length nat array 
int sub nat nat array int 
fun dotprod fun loop sum sum loop sum sub sub loop nat nat int int int 
int loop length dotprod nat nat int array int array 
int dot product function ffl employ singleton types hayashi allow necessary interaction index term languages 
ffl consider programs welltyped ml 
allows extension conservative dependent types programs elaborate evaluate exactly ml 
ffl bi directional type analysis generate linear inequality constraints minimum annotations 
ffl resulting constraints solved efficiently practice variant fourier method pugh wonnacott 
fact programs run faster tends strong motivator programmers system enhances benefits derives static typing 
dependent types help programmer think properties expects hold trivial errors detected early dependent type checking run time 
dependent type annotations serve formal machine checked documentation program invariants greatly aids maintainability software life cycle 
dependent types allow program invariants properties communicated checked module boundaries included signatures 
closely related shape checking jay jay 
pursue language approach restricted form dependent types 
language programs restricted different kind programs typically written ml including example explicit shape conditionals 
allows perform shape analysis process partial evaluation constraint simplification interact general recursion 
believe approach suited languages nesl blelloch restrictive practical ml 
dependent types form basis general theorem proving verified program development environments coq dowek felty herbelin huet murthy parent werner nuprl constable pvs owre rajan rushby shankar srivas 
explored possibility prototype implementation restricted core language 
seen attempt narrow gap full verification works unrealistically small languages time consuming practicing programmers static type systems programming languages allow restricted set program properties expressed checked 
way related refinement types freeman davies ml types refined finitely inductively defined sorts 
part larger effort introduce dependent types tractable constraint domains ml xi 
particular basic language architecture elaboration algorithm generates index constraints depend particular properties linear arithmetic capture program invariants 
preliminaries section sketch type system give illustrative examples 
please see xi formal description 
introductory example code implementation dot product integer arrays 
automatic methods able eliminate array bounds checks example introduce language illustrate full expressive power 
example read follows 
ffl int built singleton type contains integer type int type integers 
ffl array built polymorphic type arrays size elements type 
ffl length fn array 
int expresses length function array size yields integer type int equal 
full language implementation pervasive declaration assert explicitly 
ffl sub fn fi nat ng array int 
means sub applied array size integer holds 
yields value type 
fn explicit universal quantifier dependent function type constructor 
conditions may attached describe certain forms subset types fn nat ng example 
clauses code typechecking purposes giving dependent type local tail recursive function loop function dotprod 
type checking code sure array accesses sub result array bound violations need inserting array bound checks compile code 
similarly array update function update type update nat nat array int 
unit array bound checks needed run time 
notice index lists just arrays lengths declare nth nat nat list int 
eliminating need list tag checks 
similarity approach eliminating array bound checks list tag checks shall focus 
language types type indices may integer boolean expressions form defined 
range index variables 
integer index gamma div min max abs sgn mod boolean index false true index certain transparent abbreviations stands system dependent types allows types indexed terms 
purpose indices restricted integer boolean expressions additional constraint linearity 
considered general language schema xi 
ffi base types basic type families built int array user declared 
ff stands type variables usual 
index sort fl int bool fa fl bg types ff ffi dk delta delta delta pia fl sigmaa fl type constructor arguments indices omit empty parentheses left right constructor respectively product components write unit 
sort fa fl bg stands elements fl satisfying boolean constraint nat abbreviation fa int 
notice universally quantified pia fl existentially quantified sigmaa fl concrete syntax fa gg pia fl sigmaa fl combine quantifiers separating quantified variables commas directly attach condition quantifier 
pia fa fl bg written fa bg took advantage shorthands dot product example 
language extension intended encompass standard ml 
current prototype implementation includes recursion higher order functions polymorphism value restriction datatypes pattern matching arrays exceptions module level constructs left 
believe extension modules involves non trivial language design issues 
built type families built type families integers booleans arrays 
ffl integer int singleton type contains ffl false true bool false bool true singleton types contain false true respectively 
ffl natural number array type arrays size elements type 
indices may omitted types case interpreted existentially 
example type int array stands sigman nat int array integer array unknown size refinement datatypes built type families int bool array user defined data type may refined explicit declarations 
example consider declaration list datatype list nil list declaration constructor nil type list type list 
list 
declaration indexes type list natural number representing length 
typeref list nat nil list nat list 
list structure dependent types constructors nil match corresponding ml types 
displays implementation reverse function lists 
notice type reverse ensures function returns list length length illustrates need giving explicit types local functions rev case general externally visible type reverse case synthesized automatically general 
types need bound variables 
example illustrates need existentially quantified dependent types 
filter function removes elements list satisfy property clearly length resulting list expressed type index depends arbitrary computation permitted type indices 
know resulting list length fun reverse fun rev nil ys ys rev xs ys rev xs ys rev nat nat list list 
list rev nil reverse nat list 
list reverse function lists equal original list 
information incorporated type filter function existentially quantified dependent types 
fun filter nil nil filter xs filter xs filter xs filter nat 
bool 
list 
nat list result function type nat list concrete syntax sigman fn nat mg 
existential types express subset types note different subset sorts ascribed index variables 
instance int int represent type integers greater equal gamma 
feature exploited eliminate array bound checks implementation knuth string matching algorithm shown appendix detailed description algorithm leiserson rivest 
notice array bounds checks body eliminated 
elimination checks require representation deep invariants algorithm expressible type system 
existential types interpret indexed types int index 
example int interpreted sigmai int int int int concrete syntax 
existential types provide smooth boundary annotated unannotated programs context larger implementation 
larger interesting examples refer reader xi 
elaboration elaboration process transforms program written source language expression explicitly typed internal language performing type checking way 
scope detailed treatment process shall highlight major features examples 
think elaboration phase process 
phase ignore dependent type annotations simply perform type inference ml 
term typed traverse second phase collect constraints index expressions occurring type families 
constraints boolean index expressions enriched explicit quantifiers implication 
necessary type checking pattern matching expressions 
syntax constraints follows 
constraints oe oe oe oe oe fl oe fl oe generating constraints auxiliary tail recursive function implementation reverse function 
fun rev nil ys ys rev xs ys rev xs ys rev nat nat list list 
list elaborate clause rev nil ys ys 
form type assigned rev introduce index variables check nil type list ys type list 
generates constraints ys assumed type list 
check type right hand side clause ys list result type specified rev yields constraint analyzing clause definition rev generates constraint nat nat nat oe eliminate existential variables simplifying constraint nat entered constraint store easily verified 
note able eliminate existential variables constraint 
true examples unfortunately clear theoretical explanation 
practice crucial eliminate existential variables constraints passing constraint solver 
deal arbitrary formulas presburger arithmetic decidable practically efficient decision procedures available 
second clause definition reverse rev xs ys rev xs ys obtain constraint nat nat procedure xs ys assumed type list list respectively 
note universally quantified constraint solved easily 
fun size nat bsearch cmp key arr fun look lo hi hi lo val lo hi lo div val sub arr case cmp key 
look lo equal 
greater 
look hi look nat size int size int int 
answer look length arr bsearch 
order 
array size 
answer binary search function int nat size nat size size oe gamma size int nat size nat size size oe gamma gamma int nat size nat size size oe gamma gamma size int nat size nat size size oe gamma int nat size nat size size oe gamma size sample constraints standard basis refined types common functions integers addition subtraction multiplication division modulo operation 
instance int int int int 
int declared system 
code implementation binary search array 
assume sub nat nat array int 
explicit type parameter feature standard ml allow explicit scoping type variables 
extend notation encompass type index variables fsize case 
list sample constraints generated typechecking code 
solved easily 
note program binary search array bound check hoisted loops algorithm gupta increasing decreasing terms definition 
hand method eliminate array bound check synthesizing induction hypothesis similar annotated type look 
unfortunately synthesizing induction hypotheses prohibitively expensive practice 
plan investigate extensions type checker infer certain classes generalizations relieving programmer need certain kinds obvious annotations 
solving constraints existential variables eliminated resulting constraints collected check linearity 
currently reject non linear constraints postponing hard constraints michaylov planned 
constraints linear negate test unsatisfiability 
technique solving linear constraints mainly fourier variable elimination methods available purpose sup inf method shostak known simplex method 
chosen fourier method mainly simplicity 
briefly explain method 
integer variables integers linear expressions 
set inequalities show unsatisfiable 
fix variable transform linear inequalities forms ax ax 
pair introduce new inequality remove inequalities involving clearly sound incomplete procedure 
real variable elimination complete 
order handle modular arithmetic perform operation rule non integer solutions transform inequality form delta delta delta anxn delta delta delta anxn largest integer constraints type annotations program number sml nj total number total lines code size bcopy lines binary search lines bubble sort lines matrix mult lines queen lines quick sort lines hanoi towers lines list access lines table constraint generation solution time secs greatest common divisor divides type checking optimized byte copy function 
elimination method extended sound complete remaining practical see example pugh wonnacott pugh wonnacott 
hope sophisticated methods appear practical need context current experiments 
experiments performed experiments small set programs 
note bcopy binary search quicksort written just annotated providing evidence natural ml programming style amenable type refinements 
set experiments done dec alpha sml new jersey version 
second set experiments done sun sparc version 
sources programs xi 
table summarizes characteristics programs 
show number constraints generated typechecking time taken generating solving sml new jersey 
indicate number total type annotations code number lines occupy code size 
note type annotations non dependent form ml depending programming style module interface code 
brief description programs 
bcopy optimized implementation byte copy function fox project 
function copy bytes data times byte style 
binary search usual binary search function integer array 
function look randomly generated numbers randomly generated array size bubble sort usual bubble sort function integer array 
function sort randomly generated array size matrix mult direct implementation matrix multiplication function dimensional integer arrays 
applied function randomly generated arrays size theta 
queen variant known queens problem requires positioning queens theta chessboard captured 
chessboard size theta experiment 
quick sort implementation quick sort algorithm arrays copied sml new jersey library 
sorted randomly generated integer array size hanoi towers variant original problem requires moving disks pole stacking larger disk smaller availability third pole 
disks experiments 
list access accessed sixteen elements randomly generated list total times 
standard safe versions sub update array access compiling programs code array bound checks 
versions perform run time array bound checks semantics standard ml 
unsafe versions sub update array access generating code containing array bound checks 
functions structure unsafe array sml new jersey internal value 
unsafe version nth function cast list access tag checking 
notice unsafe versions sub update nth implementation assigned corresponding types mentioned section 
table table effects eliminating array bound checks list tag checks 
note difference number eliminated array bound checks table table reflects difference randomly generated arrays experiments 
clear gain significant cases rewarding writing type annotations 
addition type annotations helpful finding fixing bugs maintaining software system provide user informative documentation 
feel factors yield strong justification approach 
related point view language design falls full program verification type theory constable dowek felty herbelin huet murthy program checks checks gain checks eliminated bcopy binary search bubble sort matrix mult queen quick sort hanoi towers list access table dec alpha sml nj working version time unit sec 
program checks checks gain checks eliminated bcopy binary search bubble sort matrix mult queen quick sort hanoi towers list access table sun sparc version time unit sec 
parent paulin mohring werner systems pvs owre rajan rushby shankar srivas traditional type systems programming languages 
compared verification system expressive automatic compared traditional programming languages system expressive verbose 
extend ml conservatively dependent types sparingly existing ml programs keyword conflict 
hayashi proposed type system hayashi allows notion refinement types freeman pfenning plus union singleton types 
demonstrated value singleton union intersection types extracting realistic programs similar corresponding logical operators constraints 
language effects address practical problem type checking partial inference 
compared array bound checking languages markstein markstein gupta automated analysis inference limited requiring annotations 
cases considerable number array bound checks remain limits efficiency gains 
furthermore methods provide feedback programmer regarding correctness code important component solution 
deal advanced features ml higher order functions polymorphism 
jay jay includes features similar goals approach restrictive design promising languages iteration schemas general recursion 
related certifying compiler necula lee introduces precondition annotations type safe subset order eliminate array bound checks necula lee generate proof carrying code necula 
language significantly simpler example include higher order functions polymorphism allows formulate extensions constructing full type system 
include existential types necessary number examples 
demonstrated practicality dependent types statically typed functional language eliminate dynamic array bound tag checks 
required additional type annotations concise intuitive aid programmer writing correct cases significantly efficient programs 
necessary constraint simplification theoretically intractable proved practically feasible simple minded implementation currently incomplete algorithm 
immediate goal extend system accommodate full standard ml involves treating exceptions module level constructs 
incorporate ideas observations pugh wonnacott constraint solver improve efficiency 
plan pursue language front certifying compiler ml lines necula lee necula lee safe subset propagate program properties including array bound information compiler optimizations safety certificates proof carrying code necula 
arose larger effort incorporate general form dependent types ml xi 
extended type checking algorithm robust sense collect constraints independently domain separated language indices programs 
allows program invariants properties expressed propagated checked plan investigate constraint domains simplification procedures 
unsolved constraints generated typechecking may provide hints type errors originate inaccurate obscure 
plan investigate generate informative error messages dependent type checking fail 
contrast approaches eliminating array bound checking give user little feedback error 
peter lee providing interesting examples comments 
gratefully acknowledge discussions rowan davies george necula regarding subject help received kenneth cline measurements 
anonymous referees valuable comments 
blelloch 
april 
nesl nested data parallel language version 
technical report cmu cs school computer science carnegie mellon university 
chow 

portable machine independent global optimizer design measurements 
ph 
dissertation stanford university 
technical report 
constable 

implementing mathematics nuprl proof development system 
englewood cliffs new jersey prentice hall 
leiserson rivest 
algorithms 
cambridge massachusetts mit press 
davies 
november 
practical refinement type checking 
thesis proposal 
dowek felty herbelin huet murthy parent paulin mohring werner 
coq proof assistant user guide 
rapport techniques inria rocquencourt france 
version 
freeman 
march 
refinement types ml 
ph 
dissertation carnegie mellon university 
available technical report cmu cs 
freeman pfenning 
refinement types ml 
acm sigplan conference programming language design implementation toronto ontario pp 

gupta 

optimizing array bound checks flow analysis 
acm letters programming languages systems 
hayashi 

singleton union intersection types program extraction 
meyer ed proceedings international conference theoretical aspects computer software pp 

jay 
shape checking array programs 
technical report university technology sydney australia 
markstein markstein 
optimization range checking 
sigplan symposium compiler construction pp 

martin lof 

constructive mathematics computer programming 
logic methodology philosophy science vi pp 

north holland 
michaylov 
august 
design implementation practical constraint logic programming systems 
ph 
thesis carnegie mellon university 
available technical report cmu cs 
necula 

proof carrying code 
conference record th annual acm symposium principles programming languages pp 

acm press 
necula lee june 
design implementation certifying compiler 
acm sigplan conference programming language design implementation 
acm press 
owre rajan rushby shankar srivas july august 
pvs combining specification proof checking model checking 
alur henzinger eds computer aided verification cav volume lncs new brunswick nj pp 

springer verlag 
pugh wonnacott 
eliminating false data dependences omega test 
acm sigplan conference programming language design implementation pp 

acm press 
pugh wonnacott november 
experience constraint array dependence analysis 
technical report cs tr university maryland 
shostak 
october 
sup inf method proving presburger formulas 
journal acm 
sun microsystems 
java language specification 
available ftp ftp javasoft com docs ps zip 

implementation array bound checker 
th acm symposium programming languages pp 

xi 
november 
examples dml programming 
available www cs cmu edu dml examples 
xi 

dependent types practical programming 
ph 
thesis carnegie mellon university 
forthcoming 
knuth morris pratt string matching implementation knuth string matching algorithm dependent types eliminate array bound checks 
assert length nat array 
int sub size int int size array size int 
sub requires bound checking array int 
requires bound checking type int int notice existential types assert size nat int size 
array size size int int size array size int 
requires bound checking array int 
requires bound checking size int int size array size int 
unit requires bound checking generates prefix function table pattern pat fun pat val length pat val fun loop calculate prefix array sub pat 
pat loop loop loop loop nat int 
unit loop nat int array 
array fun str pat val strlen length str length pat val pat fun loop strlen sub str sub pat loop loop loop loop nat nat int int 
int loop nat nat int array int array 
int implementation knuth morris pratt string matching 
