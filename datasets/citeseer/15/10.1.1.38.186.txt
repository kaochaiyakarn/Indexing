document formatting jeffrey kingston jeff cs usyd edu au basser department computer science university sydney australia document formatting reached plateau 
existing systems steadily enhanced major step forward require union best features batch formatters interactive document editors page description languages 
author experience designing implementing enhancing lout document formatting system identify remaining problems document formatting explore possible solutions 
keywords document formatting computerized typesetting document formatting jeffrey kingston jeff cs usyd edu au basser department computer science university sydney australia 
document formatting widespread applications computers 
improvements document formatting software hardware revolutionized production documents enlarged conception document 
attempt point define document run risk events documents commonly include hyperlinks moving images sound dynamic updating sources information change real time 
safe say document information arranged presentation person information may called content arrangement layout 
document formatting essentially mapping content layout functions exactly fit definition spelling grammar checking creation editing content document formatting systems 
document fall camps 
camp interactive document editors ranging word processing systems microsoft word desktop publishing systems framemaker 
offer editable screen image document layout 
camp batch formatters troff scribe lout process text files embedded markup produce non editable layout 
names stand entire software family includes framemaker includes framemaker sgml 
hypertext net browsers html primitive batch formatters offering limited interactivity ability click hyperlink fill form 
systems actively enhanced developers new versions appearing regularly 
example framemaker responded world wide web phenomenon adding support sgml html 
viewed wider perspective appear reached plateau sense fundamental limitations overcome 
example troff lout batch formatters interactive framemaker extendable batch formatters 
frequently hears arguments systems truth ideal offer document formatting 
needed synthesis best features systems 
papers reflect document formatting rare 
survey furuta shaw worth reading kernighan reflects troff family author described design implementation lout 
part infer principles systems look specialized applications music formatting graph drawing non european languages requirements 
draws author twelve years experience designing implementing enhancing lout document formatting system plus limited experience systems mentioned identify set requirements document formatting system significant advance current systems explore interactions 

requirements section identifies significant requirements document formatting system 
efficiency space cease requirement years 
efficiency time course essential requirements apply large software system robustness openness interface permits users varying levels expertise productively 
requirements generality optimality 
requirements discussed turn sections follow problems presents conjunction previous requirements 
possible prove list requirements complete author carefully compared features document formatting systems listed earlier 
major omission convenience features commonly interactive systems spelling grammar checkers input output variety data formats version control 
valuable features little document formatting core sense mapping content layout 

ability edit content viewing layout strong suit word processing desktop publishing systems 
fairly fairly users accept batch formatting 
batch formatting edit format view cycle slow layout rule eye diagrams content altered achieve layout example paragraphs containing long inline equations 
interactive interfaces advantage logical structure follow tree pattern 
example editing graphs combinatorial kind 
users interactive system click pair nodes indicate joined edge 
batch system structure tree necessary user invent names nodes names creating edges considerably error prone 
contrast equations follow tree pattern need attach names subexpressions 
critics interactive systems typically complain lack content structure interactive editors weakness editors compared text editors 
problem inherent fact versions high document editors framemaker sgml example addressing content structure problem 
openness auxiliary applications free text search retrieval creation documents computer programs requires archive format marked text included interactive system 
takes little care format readable humans 
interactive system automatically batch system 

document formatting system means easy addition new features 
strong suit batch formatters 
example author lout system built knowledge equations tables page layout concept page built added means packages definitions written lout language sufficiently high level fairly easy produce 
implies initial kernel primitive features extensions built 
include horizontal vertical stacking rotation 
interesting feature mechanism getting floating figures footnotes places traps troff floating insertions galleys lout 
ways combining packaging primitives features useful user 
system built kernel conceivable scarcely possible author system supply features demanded users 
list vast equations tables graphs chemical molecules music kind high level kernel language essential achieving reasonable time consistency just high level programming languages essential large software projects 
ideally kernel language defined formally behave predictably modern programming language lack predictability heard complaint existing systems 
example highly predictable layout system exists simpler problem pretty printing tree structured data computer programs 
typography generates requirements features hyphenation spacing 
document formatting system produce typography users expected 
features dependent current language english european oriented systems failed extend typography languages outside sphere 
source world wide typography apple computer gx approach implementing features relatively non extendable requires recompilation 
interactive system extended new feature possible continue editing vicinity new feature 
ultimately layout document function content may identify features functions 
extreme cases optimal layout function may take entire document parameter usually small clearly delimited parameters built fraction numerator denominator may implicit parameters inherited context current font size 
quite reasonable insist editing session collection features immutable 
essential able edit definition function viewing layout 
cases simple abbreviations editing definitions quite simple easily supported 
complex functions optimal layout graph layout defined computer programs amenable editing way 
similarly correct insist parts layout originating definitions immutable 
example bar built fraction editable 
preclude addition parameters built fraction control appearance bar desired allow user arbitrarily change bar produce layout origin built fraction lost 
features really means parameters 
favourable case occurs function displays parameter form similar taken entered outside function 
example built fraction displays parameters changing appearance slightly squeezing vertical spacing possibly changing font size 
user edit parameter parameter inductively edit parameters limit 
essentially equation editors system demonstrated extendable framework kernel language incomplete support full range features required users 
function may display parameter case editing display change 
preserving displayed parameters difficult problem function implemented externally document editing system 
example external graph layout program employed result returned bitmap postscript file set coordinate pairs similar required document formatter place nodes understand ended 
suggested non editable result acceptable cases mouse click region occupies signals opening separate editor going region 
interactive equivalent preprocessor approach troff drawbacks lack consistency duplication features loss generality editor may invoke editor communication channels typically convey information current font paragraph breaking style available space 
architecture single master editor slave non interactive formatting programs preferable 
parameters displayed nightmare responsible ad hoc existing interactive systems 
main approaches 
style sheet dialogue box approach user selects feature non displayed parameters box listing asked supply values font name location place style numbering 
general method easily adapted extendable system 
works particularly parameters sensible default values box optional small range possible values values may displayed menu 
second inference method 
parameter effect layout useless 
user offered means manipulating layout parameter value inferred 
example editors permit included graphic clipped clicking boundary moving mouse scaling rotation may set means 
dragged drawing area 
master pages template pages allow user specify entire page layouts involving parameters simultaneously demonstrate value inference method 
great drawback inference method inference interface invented non displayed parameter difficult extendable system 
possible implement inference interface suitable non displayed parameters kernel features boundary parameter clip cases define user level feature boundary 
clip boundary 
propagate interface upwards kernel features user level features 
user level feature offers clipping parameter example way 

generality generality mean absence restrictions features contexts may values may assigned parameters 
formally thing distinction useful 
examples context restrictions extremely common document formatting systems 
framemaker permits objects rotated certain contexts table entries example 
troff easy include equation table harder include table equation 
context restrictions course chapter example 
lack context generality takes severe toll means implementation code possibly highly sophisticated great deal offer locked limited contexts 
example word processing systems interactive equation editors hope code re tasks editing tree diagrams diagrams chemical molecules despite technical similarities tasks 
examples domain restrictions particularly common geometrical functions 
example produced lines certain fixed angles systems really understand rectangular shapes 
postscript page description language far ahead geometrical generality postscript arbitrary curves disconnected ones lines arcs bezier curves may drawn filled arbitrary combinations rotation scaling translation may applied arbitrarily complex fragments documents lying page 
abandonment rectangles favour arbitrary shapes widespread beneficial effects done full generality 
text fill arbitrary shapes run arbitrary graphics 
fonts defined postscript collections arbitrary shapes permitting arbitrary pairs glyphs just glyphs equal font font size solving subscript problem 
line spacing reflect true appearance lines crudely highest lowest 
optimizations bounding boxes caching able solve efficiency problems 

optimality optimality meant ability find best possible layout content 
optimal layout necessarily layout documents layout 
optimal layout remove burden rewriting content achieve layout practice greatly reduce burden included 
idea layout optimal due knuth algorithm optimal breaking paragraph lines knuth system 
research done general optimality author unsure incorporated suitably generalized paragraph breaking algorithm follows 
step deduce content sequence atomic formatting steps 
example content cat sat mat sequence create empty paragraph add word paragraph add word paragraph cat 
prefix sequence define legal document right sequence defines document wish format 
question constitutes atomic operation fundamental importance choose add letter time entire paragraph 
define badness function layouts integers 
indicate layouts large values indicate poor ones 
restrictions function defined practical computable reasonable time 
ideally function expressed entirely kernel language editable expert user 
ways atomic step may performed 
example add word paragraph add word current line start new line start new page column 
leads tree structure cat cat cat node layout partial document edge atomic operation 
atomic operation applied leaf node creating partial documents sequence ends leaf nodes represent layouts document interest 
leaf node minimum badness optimal layout 
model incorporate diverging operation sequences caused layout dependencies 
example suppose word abacus index entry attached path tree word appears page appears page 
sequence operations defining index find add word paragraph abacus add word paragraph path add word paragraph abacus add word paragraph 
forward create cyclic dependencies handled way 
necessary add operations change value words laid propagate resulting changes die 
rare cases method cycle forever practice probably difficult avoid problem tricks refusing allow revision reduce number lines allocated paragraph 
algorithm expressed exponential time complexity 
practice number different layouts document close optimal deserve examination quite small 
challenge find ways prune layout tree severely retaining discover example setting sequence paragraphs tight loose avoid bad page break 
area needing detailed research glance obvious possibilities 
badness function monotone increasing operation sequence bad node worse successors justifies pruning entire subtree 
monotonicity guaranteed example adding word paragraph widow word reduce badness probable tricks ignoring widow words incomplete paragraphs bring near monotonicity justify pruning bad nodes 
immediate application prune nodes layouts obviously terrible nodes containing clearly premature line endings page endings 
possible avoid generating nodes 
established nodes equivalent sense lay subsequence layouts occupy space careers identical worst may pruned 
tree structure graph optimal layout algorithm may viewed shortest path algorithm described knuth 
establishing equivalence nodes may easy 
certainly time complex comparisons pairs layouts subsequence 
knuth algorithm recognises nodes equivalent lay subsequence choice path start new line 
idea may equivalence paths new page operation preceding new chapter 
useful idea group operations find optimal layouts group separately introduce atomic operation higher level represents entire group 
grouping operations define paragraph way beneficial example 
isolation optimal breaking explores options return reasonable distinct results lines respectively choices atomic add paragraph operation represents group higher level 
furthermore results may cached recalculation path containing particular add paragraph operation margins width 
care suppressing tiny variations introduced letters layout tree induced contain paths difference total number lines tightest settings paragraphs inserted far course chapter manageable number 
safety fixed upper limit placed number nodes kept producing beam search definitely bound time complexity fixed multiple cost non optimal layout sacrificing guaranteed optimality 
extra problems incorporating optimality extendable system 
users certainly welcome options user level features insert current line top page whichever looks best 
editable system offer optimal layout exceeding response time bounds matter research 
time maintain optimality current paragraph current chapter set constant width margins time consuming maintain optimal layout page chapter line paragraph provided alternative paragraph breaks non current paragraph chapter cached 
cost prove great optimality relegated button user press just going coffee 

demonstrated generation document formatting system incorporating best features current systems full generality logically inconsistent slow 
major design problem identification suitable kernel primitive features 
massive superstructure kernel support design quality highest 
design attempted author believes kernel lout document formatting system starting point incomplete insufficiently general large occasionally imprecisely defined serve kernel generation system stands 
major implementation problem find optimizations preserve generality achieve required response time 
pointed optimizations quite adequate hardware widely available years 

author gratefully acknowledges comments draft received mike dowling ted harding robert john 
adobe systems postscript language ref erence manual second edition 
addisonwesley 
adobe systems framemaker sgml 
adobe systems 
apple computer gx 
url support info apple com gx gx html 
kenneth brooks 
view document editor 
ieee computer 
eric 
music language typesetting music scores 
software practice experience 
richard furuta jeffrey alan shaw 
document formatting systems survey concepts issues 
computing surveys 
charles goldfarb 
sgml handbook 
oxford university press 
charles goldfarb 
hytime standard structured hypermedia interchange 
ieee computer 
john hughes 
design pretty printing library 
jeuring meijer ed advanced functional programming computer science pages 
springer verlag 
motif generation document creation composition assembly 
url www com html 
brian kernighan 
pic language typesetting graphics 
software practice experience 
brian kernighan 
system document preparation tools retrospective 
technical journal 
jeffrey kingston 
design implementation lout document formatting language 
software practice experience 
jeffrey kingston 
lout document formatting system version 
url ftp ftp cs usyd edu au jeff lout 
knuth 
breaking paragraphs lines 
software practice experience 
donald knuth 

addison wesley 
balachander krishnamurthy ed 
practical reusable unix software 
john wiley 
leslie lamport 
user guide manual 
addison wesley 
second edition 
microsoft microsoft word 
microsoft 
url www microsoft com 
joseph 
troff user manual 
tech 
rep bell laboratories murray hill nj 
michael 
optimal techniques automatic typesetting systems 
ph thesis computer science department stanford university stanford ca 
brian reid 
production 
proceedings th symposium principles programming languages popl las vegas nv pages 
christopher van wyk 
language typesetting graphics 
ph thesis stanford university stanford ca 
winston 
artificial intelligence 
addison wesley 
third edition 
