backtrackable state linear assumptions continuations hidden accumulator grammars paul universit de canada info ca veronica dahl logic programming group computing sciences department simon fraser university veronica cs sfu ca andrew fall logic programming group computing sciences department simon fraser university fall cs sfu ca set executable specifications efficient implementations backtrackable state persisting current continuation investigated 
specification level primitive operations variant linear intuitionistic implications having consequent current continuation 
top introduce form hypothetical assumptions explicit quantifiers easy efficient implementation top logic programming systems featuring backtrackable destructive assignment global variables simple specifications term translation side effect free prolog 
variant extended dcgs handling multiple streams need preprocessing technique hidden accumulator grammars specified terms linear assumptions 
efficiency comparable preprocessing techniques obtained wam level implementation backtrackable destructive assignment supporting non deterministic execution value trailing collapsing form place update case deterministic execution 
restricted prolog techniques described portable alternative logic programming languages life lolli prolog 
keywords state logic functional programming linear intuitionistic implication accumulator processing alternative dcg implementations destructive assignment logical global variables continuations 
intuitionistic logic linear logic gir influential logic programming systems theory logic programming mn mil hod 
result better understanding proof theoretical characteristics growing awareness practical benefits integrating conventional prolog systems 
describes application driven approach 
initial motivation design set powerful natural language processing tools deal complex hypothetical reasoning problems arise dealing anaphora resolution relatives ordination aware process implementing various tools outcome goes intended application domain unified approach handle backtrackable state information nondeterministic declarative languages 
organized follows section revisits handling state information declarative languages 
section presents linear intuitionistic implication hypothetical reasoning tools section shows usefulness proof concept applications 
section type grammars global objects backtrackable state specified terms linear assumptions followed overview efficient wam level implementation 
section discusses related similar facilities logic languages life 
discussed section section 
appendices techreport version tdf contain additional information actual wam implementation example higher order objects hypothetical state implemented framework 
state information declarative languages basic problem general case expressing change contradicts basic principles functional logic languages built 
re usability single threaded data types objects having unique producer unique consumer frequent declarative programming languages 
linear types wad monads wad linear language constructs bak functional programming shown singlethreaded objects subject place update reasonably clean semantic framework 
prolog hidden arguments dcg grammars correspond chain variables having exactly occurrences 
see chain variables successive states unique object 
presence backtracking previous values kept alternative branches 
situation conflicts possibility reuse single threaded objects complex arguably powerful nondeterministic lp languages committed choice functional languages 
solution reuse space single threaded chains variables deterministic branch value trail keep address variable value trail stack 
clearly single threaded object instance presence uniform proofs indicate formalism computationally interesting 
refer applications techniques natural language processing 
value trailing operation choice point 
describe done tar simple address comparison technique subsection 
scope state non deterministic logic programming languages prolog natural scope state object current continuation want take advantage re usability deterministic branch resulting tree oriented resolution process 
suggests need ability extending scope state transition current continuation keeping local body clause 
main reason linear intuitionistic assumptions scoped current continuation 
scope shunting suppose backtrackable assume primitive efficiently implemented language assumptions range current branch 
note easy unavailable assumption arbitrary segment current continuation binding logical variable serving guard 
technique definition implication 
assume scope scope closed 
ensures appropriate test calling time assumption local proof hypothetical reasoning linear intuitionistic assumptions assumed code linear implication implemented new hypothetical reasoning facilities top machine backtrackable destructive assignment form logical global variables 
give short description primitive operations point differences implementations 
intuitionistic adds temporarily clause usable subsequent proofs 
clause indefinite number times asserted clauses vanishes backtracking 
scoped versions clause goal file goal clause respectively set clauses file available proof goal 
clauses assumed 
usable indefinite number times proof succeed 
different happening functional languages haskell deterministic lazy evaluation enabled framework elegant unified solutions described terms monads continuations imperative functional programming relative arrays processing see actual implementation file extra pl distribution tar 
linear adds clause usable subsequent proofs 
assumption vanishes backtracking 
scoped version clause goal file goal clause set clauses file available proof goal 
vanish backtracking clause usable proof fail 
see builtins linear respectively intuitionistic implication scoped current continuation having assumptions available computations resolution branch 
achieving source level explicit continuation handling possible somewhat complex inefficient weakening rule structural rules weakening contraction implicitely classical intuitionistic logics 
weakening allows discarding clauses contraction allows duplicating 
wadler formulation linear logic girard logic unity look follows gamma gamma contraction gamma gamma weakening apply linear assumptions intuitionistic ones 
restrictions weakening rule linear logic require linear assumption eventually 
assumptions range current continuation requirement strong known situation handling relatives gaps hod 
linear implication succeed assumptions consumed weakening allowed systems lolli consumption strong requirement enforced success 
choice practical unreasonably restrictive linear predicate negation failure proof programmer selectively check assumption consumed 
possible check addition low level primitive point set linear assumptions empty 
implicit sharing copying conventions intuitionistic logic systems prolog linear logic implementations usually support quantification benefit additional expressiveness chosen compliance usual horn clause convention avoid explicit quantifications reasons conceptual parsimony simplicity implementation top generic prolog compiler 
linear assumptions consumed object guaranteed exist heap branch copying performed unifications occur actual clause 
implies bindings shared point definition point 
seen usual comes fact prolog operator mixing alphabetic special require quoting infix position 
implication differs semantically usual linear implication reasonable denote differently 
inefficiency comes fact imply dispatching interpreting current continuation 
systems current continuation class object incur unnecessary overhead un undo effect preprocessing transformation 
usual language abuse implicit existential quantification 
hand intuitionistic implications assumptions follow usual copy twice semantics 
strictly needed implementation reasons copying suffice backtrackable nature intuitionistic implications ensures assumptions safely heap represented 
intuitionistic assumptions shared bindings interesting alternative 
means bindings variable taken account contrast asserted clauses unsafe share bindings heap objects 
quantifier notations usable override copying sharing conventions considered flexibility 
horn clause translation semantics hypothetical assumptions implemented entirely source level backtrackable destructive efficiency reasons 
clearly implicit quantification rules ensure linear assumptions horn clause translation semantics terms dcg style accumulator processing keeping list assumed clauses chain dcg arguments preprocessing technique described tb 
hand intuitionistic assumptions expressed source level terms horn clause logic addition copying primitive available iso prolog 
expressiveness show section proposed extensions able express elegantly constructs useful past 
linear assumptions linda model basic transactions linda model counting synchronization cg correspond closely assumptions scoped current continuation 
suppose assumptions constrained ground facts operations linda blackboard intended backtrackable 
just usual linda operation calling linearly assumed fact just usual operation 
shows close relationship linear logic basically linda framework principle build operations top existing linda systems blocking non blocking variants operation ordination parallel threads 
third linda operation rd expressed rd far order dependence blackboard concern 
loop avoidance graph walking linear implication unexpectedly easy write linear implication graph walking program 
avoid falling loop simply linear implication assumes facts usable consumed successful unification goal 
path 
path xs linked path xs 
see file extra pl distribution clement info ca 
linked ys member ys 
start xs path xs 
executing start xs avoid loop obtain expected paths xs xs note adjacency list representation ensures node represented linear assumption unavailable visited 
note allowing weakening give hamiltonian walk language enhancements linear implication linear implication quickly add language enhancements prolog system 
instance add switch case statement write simply switch selector body case selector body 
default case 
test switch case write case write default write unexpected nl 
clearly compact source level implementation switch construct useful specification 
note done macro expansion real implementation ensure constant dispatching time case label 
chosen default consume assumption case weakening forbidden implementation case lolli system 
refer techreport version tdf implementation framework backtrackable higher order state form replicating objects 
hidden accumulator grammars specification terms linear assumptions linear assumptions scoping current continuation easily specify superset dcg grammars covering essential part functionality peter van roy extended dcgs van life counterparts 
call hidden accumulator grammars preprocessing involved implementation 
unfortunately np complete 
reason chosen leave programmer task forbid weakening really needed 
seen alternative equivalent implementation dcgs arbitrary number argument pairs streams 
turns technique advantage meta programming free expensive phrase doing meta interpretation thefly dcg expansion allows source level debugging space time efficient usual preprocessing implementation 
note tell telling metaphor specified terms classical prolog switch backtrackable way stream 
translation semantics hidden accumulator grammars shortly easily specified terms see appendix attaching dcg stream set linear facts 
sight lack logical semantics ordinary dcgs usually implemented translation side effect free prolog code 
keep things simple restrict ourself unique hag stream 
replacing occurence occurrence 
program semantics unchanged fully emulating dcgs directly 
hag program replace dcg preprocessor 
clearly translation dcgs horn clauses considered logical semantics extra step just sketched considered 
high performance implementation reasons efficiency equal beat preprocessor dcgs terms space time implemented accessible set builtins works invisible arguments sets invisible dcg argument retrieves current state dcg stream focusses dcg stream returns number current dcgs stream connect operation normally macro expanded word word 
example 
axiom phrase phrase axiom 
note backtrackable lval handle global logical variables fully equivalent source level specification add chains dcg variables pairs extra arguments stream 
note functionality obtained requiring declarations needed original wild life specify predicate accumulators 
provided correctly implemented 
similar assumption dcgs correctness preprocessor 
precisely keyed hashing global properties 
compiler dcg dcg dcg hag expr ms expr ms expr ms table dcgs vs hidden accumulator grammars consume heap generate chain existential variables heap represented wam introduced usual dcg transformations 
backtrackable destructive implemented value trailing 
builtin seen partially evaluated version 
consumes trail space nondeterministic situation choice point arises 
achieved address comparison top heap saved choice point 
cooperation builtins want benefit technique stamping heap extra cell inserted chain value objects attempts trail address see choice point 
complemented efficient un trailing operation indirect address calculation 
despite extra run time effort times faster sicstus uses specialized instance performance run time technique fairly close static transformation approach plain dcgs offering multiple stream functionality 
emulated native sicstus figures dcg show measured fairly efficient dcg processor dcg 
table shows comparative speed vs dcgs parsing formed expressions length arithmetic expression grammar 
portability hidden accumulator grammars life porting hidden accumulator grammars language global variables backtrackable destructive assignment easy 
code wild life 
global 
xs xs 
xs xs 
xs xs 
axiom xs xs axiom 
extending multiple dcg streams straightforward 
facility complements preprocessor accumulators existing life 
related compared linear intuitionistic logic systems lolli hod hm constructs implemented top generic prolog engine 
value trailing consists pushing address variable value trail 
chosen allow weakening contraction linear clauses 
explicit negation failure applied facts left proof allows forbid weakening selectively 
chosen avoid explicit quantifiers keep language simple possible 
semantics constructs instance sequent calculus descriptions horn clause logic powerful uniform proof systems hod 
see accumulator processing general specific instance linear operations 
showing translation semantics suitable subset linear logic object tedious straightforward research 
accumulators invented support uniform operation single threaded stateful data exhibits associative monadic structure 
generalize prolog dcgs carry information state list representing string generated recognized grammar 
accumulators implemented original proposal van life system preprocessor adds extra arguments source level proposal handles hidden arguments directly state global objects subject backtrackable destructive assignment 
preprocessor approaches extended dcgs van soft databases tb program transformation adds extra arguments deals state set data type operations 
state seen data van form dynamic code appropriate hypothetical reasoning tb 
life accumulators additional object oriented flavor arbitrary method executed accumulator state advances 
action backtrackable advancement input list case ordinary dcgs 
general feature expressed framework directly implementing objects top intuitionistic linear assumptions efficiently 
avoid passing extra arguments predicates accumulator preprocessor wild life requires declarations saying predicates accumulators 
advantage hidden accumulator grammars technique declarations preprocessing potentially hiding programmer intent source level required 
important easier debugging meta programming constructs view hag vs translation implementation issue orthogonal object oriented additions built top 
arguably declarations needed preprocessing catch programming errors 
think feature orthogonal choice hag vs implementation 
instance languages mercury types modes hag arguments naturally subsumed generic type mode declarations similar benefits 
working continuations br usual systems prolog mali br fairly intricate 
think primitives explicitly designed scoped current continuation simple ordinary programmer 
working formalization subset linear intuitionistic logic implemented described translation instance case phrase prolog dcgs require fly preprocessing meta interpretation 
semantics 
implementation side research needed inferring statically particular instances linear intuitionistic assumptions allow small overhead classical statically compiled code combination linear intuitionistic assumptions practical basis building semantically clean object oriented extensions top prolog lines hm 
bruno ported package life 
performance performed resulting code simpler 
interesting port prolog able fully evaluate compare translation hag implementations similar concepts 
global static analysis detect dcg style variable chains prolog code 
easier languages declarations mercury 
source level transformation translate form compiletime garbage prevention mapping allocation successive instances chained variables place backtrackable destructive benefit constant heap consumption deterministic branches 
seen form reverse dcg transformation 
unique framework set fairly portable tools hypothetical reasoning logic programming languages specify previously known techniques extended dcgs described past implementation 
full wam level description multi stream logic grammars tdf give functionality preprocessor easily replicated prolog system 
useful writing various programming language processors compilers program transformation systems partial evaluators 
contribute writing compact efficient code little programming effort 
shown complex natural language processing systems 
restricted powerful special cases implicitly quantified implication intuitionistic linear continuation passing instances shown key programming techniques involving backtrackable state information handled elegantly framework efficient implementation possible frequently instances 
compared previous frameworks linear intuitionistic logic portable runs top generic prolog systems 
practical advantage systems lolli prolog 
backtrackable destructive assignment encapsulated higher level constructs simplifies possibly replaces widespread idioms dcgs offering powerful facilities form hypothetical assumptions multiple accumulators 
reduces need explicitly imperative constructs assert retract logic programming languages 
wonder bother compile 
clearly linearity preclude multiple executions linear clause distinct branches 
programming graph walking example significantly influence execution time 
acknowledgment paul support nserc research ogp universit de 
veronica dahl support canadian national science engineering research council research 
hassan ait kaci andreas podelski 
meaning life 
jan nski martin wirsing editors proceedings rd international symposium programming language implementation logic programming passau germany pages 
springerverlag lncs august 
ait kaci podelski 
meaning life 
journal logic programming 
bak baker 
lively linear lisp look ma garbage 
acm sigplan notices august 
br 
architecture implementation prolog prolog mali 
workshop prolog philadelphia pa usa 
ftp ftp irisa fr local 
br 
continuations prolog 
warren editor th int 
conf 
logic programming pages budapest hungary 
ftp ftp irisa fr local 
cg carriero gelernter 
linda context 
cacm 
andrew fall paul veronica dahl 
natural language processing hypothetical assumption grammars sparse term taxonomies 
technical report epartement informatique universit de april 
available ftp clement info ca 
gir 
girard 
linear logic 
theoretical computer science 
hm joshua hodas dale miller 
representing objects logic programming language scoping constructs 
david warren peter szeredi editors proceedings seventh international conference logic programming pages 
mit press june 
hm joshua hodas dale miller 
logic programming fragment intuitionistic linear logic 
journal information computation may 
hod hodas 
specifying filler gap dependency parsers linear logic programming language 
krzysztof apt editor logic programming proceedings joint international conference symposium logic programming pages cambridge massachusetts london england 
mit press 
hod joshua hodas 
logic programming intuitionistic linear logic theory design implementation 
phd thesis university pennsylvania department computer information science may 
available university pennsylvania technical reports ms cis linc lab 
mil miller 
logical analysis modules logic programming 
logic programming 
mn miller nadathur 
uses higher order logic computational linguistics 
st annual meeting association computational linguistics pages 
miller nadathur pfenning scedrov 
uniform proofs foundation logic programming 
annals pure applied logic 
tar paul 
user guide 
technical report epartement informatique universit de february 
available ftp clement info ca 
tb paul michel boyer 
prolog meta programming soft databases 
harvey abramson rogers editors metaprogramming logic programming pages 
mit press 
tdf paul veronica dahl andrew fall 
backtrackable state linear assumptions continuations hidden accumulator grammars 
technical report epartement informatique universit de april 
available ftp clement info ca 
van peter van roy 
useful extension prolog definite clause grammar notation 
sigplan notices november 
wad wadler 
linear logic 
acm ifip pepm symposium june 
wad philip wadler 
monads composable continuations 
lisp symbolic computation pages 
appendix specification linear assumptions creates initializes named dcg stream name xs name name xs 
name xs name xs 
unifies current state named dcg stream lval name xs name xs name xs 
equivalent step prolog name name xs name xs 
equivalent phrase prolog name axiom xs name xs axiom lval name 
file inspired metaphors switching streams name lname lname name 
name lname name 
name lname name lname name 
name name 
projection previous operations default dcg stream xs name name xs 
xs name name name xs 
lval xs name lval name xs 
name name 
axiom xs name xs name axiom xs 

syntactic sugar connect relation 
example axiom ng ng 

cat 
dog 
walks 
sleeps 
go axiom xs write xs nl fail 
