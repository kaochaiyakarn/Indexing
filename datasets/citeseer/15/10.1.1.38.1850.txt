accessing nearby copies replicated objects distributed environment greg plaxton rajaraman andr ea richa consider set shared objects distributed network copies object may exist time 
ensure fast access objects efficient utilization network resources desirable access request satisfied copy close requesting node 
unfortunately clear efficiently achieve goal dynamic distributed environment large numbers objects continuously created replicated destroyed 
design simple randomized algorithm accessing shared objects tends satisfy access request nearby copy 
algorithm novel mechanism maintain distribute information object locations requires small amount additional memory node 
analyze access scheme class cost functions captures hierarchical nature wide area networks 
show particular cost model considered expected cost individual access asymptotically optimal ii objects sufficiently large memory objects dominates additional memory algorithm high probability 
address dynamic changes network set object copies 
advent high speed networks feasible large number geographically dispersed computers cooperate share objects files words memory 
resulted implementation large distributed databases world wide web wide area networks 
large size databases rapidly growing demands users turn overloaded underlying network resources 
important goal efficient network resources providing access shared objects 
expect task designing efficient algorithms supporting access shared objects wide area networks extremely challenging practical theoretical perspective 
respect interesting measure performance latency throughput optimal bound achievable network complex function parameters including edge delays edge capacities buffer space communication overhead patterns user communication 
ideally take factors account optimizing performance respect measure 
task may feasible general network parameters interact fairly complex manner 
reason adopt simplified model combined effect detailed network parameter values assumed captured single function specifies cost communicating fixed length message pair nodes 
anticipate analyzing algorithms model significantly aid design practical algorithms modern distributed networks 
accessing shared objects 
consider set objects shared network copies object may exist 
consider basic problem reading objects department computer science university texas austin austin tx 
supported national science foundation 
ccr 
email cs utexas edu 
school computer science carnegie mellon university pittsburgh pa 
supported bruce maggs national young investigator award 
ccr 
email cs cmu edu 
motivated need efficient network utilization seek algorithms minimize cost read operation 
address write operation involves additional consideration maintaining consistency various object copies 
problem consistency important separate main concern studying locality 
results read apply write scenarios consistency required enforced independent mechanism 
differentiate shared unshared copies objects 
copy shared node read copy unshared node holds copy may read 
say node inserts resp deletes copy object holds declares copy shared resp unshared 
refer set algorithms read insert delete operations access scheme 
access scheme efficiently supports operations incurs overhead memory 
desirable overhead small space considerations low overhead usually implies fast adaptability changes network topology set object copies 
main difficulty designing access scheme efficient respect time space competing considerations measures 
example consider access scheme node stores location copy object network 
allows fast read operations node easily determine location closest copy desired object 
access scheme impractical incurs prohibitively large memory overhead ii node network informed copy object inserted deleted 
extreme consider access scheme additional memory 
case insert delete operations fast read operations costly may necessary search entire network order locate copy desired object 
access scheme 
design simple randomized access scheme exploits locality distributes control information achieve low overhead memory 
central part access scheme mechanism maintain locate addresses copies objects 
single object say provide mechanism approach 
embed node virtual height balanced tree network 
node network maintains information associated copies residing set nodes form subtree rooted embedding read operation may easily defined follows 
node attempts read checks local memory copy information copies subtree rooted unable locate copy basis local information forwards request parent naive extensions approach account objects require significant overhead memory control information individual nodes 
overcome problem designing novel method embed different trees associated different objects 
embedding enables define simple algorithms read insert delete operations prove efficiency class cost functions appropriate modeling wide area networks 
cost model 
indicated assume function determines cost communication pair nodes network 
analysis geared restrictive class cost functions believe practical interest 
precise set assumptions respect cost function stated section 
primary assumption nodes costs ratio number nodes cost node number nodes cost node bounded constants greater entire network cost node case ratio may low 
important observations concerning primary assumption cost function 
number commonly studied fixed connection network families lead naturally cost functions satisfying assumption 
example fixed dimension meshes satisfy assumption cost communication nodes defined minimum number hops 
example fat tree topologies satisfy assumption cost communication nodes determined total cost shortest path cost assigned individual edges grows appropriate geometric rate move higher tree 
example particular interest commonly studied fixed connection network families fat tree may provide plausible approximation structure current wide area networks 
probably inappropriate attempt model internet say kind uniform topology including fat tree 
note assumption cost function purely local nature allows possibility network highly irregular global structure 
may important characteristic cost model 
performance bounds 
show access scheme achieves optimality near optimality terms important complexity measures restricted class cost functions discussed 
particular scheme achieves bounds ffl expected cost read request asymptotically optimal 
ffl number objects stored node additional memory required log words whp word log bit string 
objects sufficiently large omega gammae words memory objects dominates additional memory 
ffl number nodes need updated addition removal node log expected log whp 
ffl expected cost insert resp delete operation node resp log maximum cost communicating single word message nodes 
obvious shortcoming analysis applies restricted class cost functions discussed 
expect existing networks fall precisely restricted class stress access scheme defined functions correctly arbitrary networks ii expect access scheme practical performance existing network 
attempted formalize results lines clear performance bounds degrade significantly presence large number non trivial violations cost function assumptions 
related 
basic problem sharing memory distributed systems studied extensively different forms 
earlier area pram distributed memory machines bounded degree networks algorithms providing concurrent access set shared objects assume nodes network knowledge hash function indicates location copy object 
basic problem locating object arises distributed system formalized mullender vit anyi instance distributed matchmaking problem 
awerbuch peleg subsequently bartal awerbuch give near optimal solutions terms cost related problem defining sparse neighborhood covers graphs 
studies address overhead due control information natural extensions results problem may require additional memory words node 
note schemes designed arbitrary cost functions focused optimizing performance restricted class cost functions 
access schemes certain internet applications described :10.1.1.17.7162
ideas scheme similar schemes differ considerably details 
schemes analyzed 
study results abbreviation whp mean high probability precisely probability gamma gammac number nodes network constant set arbitrarily large appropriately adjusting constants defined relevant context concerning locality assume restricted cost model 
cost model ultrametric different 
algorithms primarily designed problems associated hot spots popular objects 
closely related problem designing dynamic routing scheme networks 
scheme involves maintaining routing tables different nodes network way additional memory 
routing schemes size additional memory function network size problem overhead primarily function straightforward generalizations routing schemes result access schemes require additional memory words node 
remainder organized follows 
section defines model computation 
section formally describes access scheme 
section contains formal statement main results 
section analyzes algorithm establishes main results 
section discusses directions research 
model computation consider set nodes local memory sharing set poly objects 
define model computation characterizing aspects problem objects ii communication iii local memory iv local computation complexity measures 
objects 
object unique log bit identification 
log denote ith bit identification 
positive integer denote set gamma 
object consists words word log bit string 
communication 
nodes communicate means messages message consists word 
assume underlying network supports reliable communication 
define cost communication function 
nodes cost transmitting single word message assume symmetric satisfies triangle inequality 
assume simplicity equals iff equals cost transmitting message length node node 
non decreasing function equals 
real denote set fv rg 
refer ball radius assume exist real constants ffi delta node real ng jm local memory 
partition local memory node parts 
part main memory stores objects 
second part auxiliary memory storing possible control information 
local computation 
cost associated local computation 
model allows arbitrary amount local computation zero cost algorithm perform particularly complex local operations 
complexity measures 
evaluate solution basis different complexity measures 
measure cost reading object 
second measure size auxiliary memory node 
remaining measures concern dynamic nature problem address complexity inserting deleting copy object adding removing network node 
third measure cost inserting deleting copy object 
fourth measure adaptability defined number nodes auxiliary memory updated addition removal node 
notion adaptability analogous 
access scheme section access scheme shared objects 
assume power fixed positive integer specified 
node assign label independently uniformly random 
log denote ith bit label note label node independent log bit unique identification node 
resp define gamma delta delta delta ib resp gamma delta delta delta ib log 
assign total order nodes bijection fi 
partition auxiliary memory node parts neighbor table pointer list node 
neighbor table 
node neighbor table consists log levels 
ith level table log consists primary secondary reverse neighbors 
primary neighbor 
log gamma node minimum node exists ii node largest fi nodes matches largest number rightmost bits 
fixed positive integer specified 
primary neighbor denote set nodes fyg delta 
empty set 
set secondary neighbors subset minfd jw jg nodes minimum node reverse neighbor iff primary neighbor pointer list 
node maintains pointer list ptr pointers copies objects network 
formally ptr set triples node holds copy upper bound cost 
maintain invariant triple associated object ptr 
pointer list may updated result insert delete operations 
pointer lists initialized inserting shared copy network start computation 
address cost initializing auxiliary memories nodes 
node highest fi exists log satisfying ii matches largest number rightmost bits iii 
log gamma node 
call root node object uniqueness root node crucial guarantee success read operation 
section notation hffi denote sequence length ff ff ff length 
clear context omitted 
particular primary neighbor sequence maximal sequence hui root node primary neighbor worth noting sequence hui label node satisfies gamma gamma give overview read insert delete operations 
read 
consider node attempting read object read operation proceeds successively forwarding read request object originating node primary neighbor sequence hxi forwarding read request node gamma informs current best upper bound cost sending copy receiving read request associated upper bound node proceeds follows 
root node requests copy associated sent communicates primary secondary neighbors check pointer list neighbors entry updates minimum smallest value obtained 
constant factor cost hxi gamma requests copy associated upper bound sent forwards read request insert 
insert request object generated node updates pointer lists nodes form prefix subsequence primary neighbor sequence hyi update arrives node means insert message updates pointer list upper bound gamma cost getting object smaller current upper bound associated list 
words updates ptr delta delta list delta ptr greater gamma 
node forwards insert request node ptr updated 
delete 
delete request object generated node eventually removes triples form delta pointer lists ptr hyi primary neighbor sequence making copy unavailable nodes network 
receiving request means delete message node checks entry associated pointer list form delta 
case delete procedure completed need proceed updating pointer lists hyi 
deletes entry pointer list checks entries associated pointer lists reverse gamma gamma neighbors 
entry updates ptr adding entry reverse gamma gamma neighbor minimum upper bound associated pointer list 
delete message forwarded read insert delete procedures object formally described 
messages requests respect object read request generated node sends message read delta hold copy read message read indicates read request object generated node current best upper bound cost reading ais copy resides insert resp delete request generated node sends message insert resp delete 
insert message insert indicates recipient node best known upper bound cost incurred read copy located assume holds copy copy unshared resp shared insert resp delete request generated correctness access scheme follows points insert delete procedures maintain invariants 
entry associated pointer list holds shared copy hyi primary neighbor sequence entry associated pointer list node hyi ii nodes pointer list entry associated copy form prefix subsequence hyi 
preceding claims follow directly insert delete procedures described 
read request object node successful 
locates brings shared copy copy currently available 
read operation proceeds primary neighbor sequence hxi copy located root reached 
point exists shared copy network root pointer 
results section formally state main results access scheme 
theorems prove bounds cost read cost insert delete size auxiliary memory adaptability access scheme 
denote maxfc theorem node object nearest node holds shared copy expected cost read operation 
node tries read object currently shared copy network expected cost associated operation 
action receiving message read log gamma root ffl node sends message satisfy node delta ptr requesting send copy ptr entry shared copies ffl set secondary neighbors node requests copy associated upper bound node fx ffl node fx responds request message received follows exists entry ptr gamma sends success message success ffl set nodes receives response message success 
empty updates node minimum ffl gamma sends message satisfy node requesting send copy forwards message read action receiving message delete delta ptr ffl set reverse neighbors node removes delta ptr requests copy ffl responds request message sending message success iff ptr 
ffl set nodes receives message success response request message sent 
ju inserts kw ptr node kw ku ffl sends message delete action receiving message insert delta delta ptr delta ptr ffl node accordingly creates replaces entry associated ptr inserting list 
ffl sends message insert actions receiving messages read insert delete object theorem expected cost insert operation delete operation log 
theorem number objects stored main memory node 
size auxiliary memory node log words whp 
theorem adaptability scheme log expected log whp 
analysis section analyze access scheme described section establish main results described section 
section presents useful properties balls 
section presents properties primary secondary neighbors 
section presents proofs theorems 
sections proofs theorems respectively 
constants appear model algorithms analysis ffi delta appear model appear algorithms fl appear analysis 
choose fl inequalities hold fl maxf delta deltag maxf delta fl fl delta delta fl maxf delta fl gammafl delta 
delta log ffi gamma assignment values constants fl satisfies inequalities 
set fl equal delta equal delta equal delta preceding assignment satisfies equations set sufficiently large 
equations satisfied setting large delta gammalog ffi delta properties balls integer denote unique set nodes 
integers denote set fk bg 
refer ball size convenience greater lemma positive integers 
deltak delta 
proof denote respectively 
node contained ball 
jm jm equation deltak jm jm equation delta belongs deltak delta 
subset node resp denote largest resp smallest integer subset resp superset denote respectively 
lemma subset 
subset resp superset iff subset resp superset 
proof subset subset 
subset subset subset superset superset 
superset superset superset lemma belong denote positive integers delta delta subset deltak 
proof resp denote radius resp 
delta equation obtain gamma 
node maximum 
definitions gamma 
follows superset 
obtain lower bound follows jm jm delta delta place upper bound 
node maximum 
definitions gamma follows gamma subset 
jm jm deltak refer predicate depends label label predicate 
node label predicate denote node holds ii node holds 
null defined 
null 
log denote string log gamma ib bits log gamma delta delta delta 
convenience denote 
hold iff 
denote 
pi pi defined similarly 
note nonnegative integers independent random variables 
predicates defined label predicate 
lemma subsets belong label predicate chosen independently uniformly random 

node independently uniformly random ii node fp false 

node independently uniformly random ii node false 

node independently uniformly random ii node fp false 
proof consider part lemma 
part follows independence distinct nodes 
definition holds node false 
proves part ii 
parts follow similarly 
part note event equivalent event node false 
part note event equivalent event node fr false 
claim follows repeated application part lemma 
corollary arbitrary subset log gamma subset independently uniformly random sequence nodes pj pj 
node pj independently uniformly random 

random variable independently uniformly random node pj fu pi false properties neighbors section establish certain claims concerning different types neighbors defined section 
differentiate root nonroot primary neighbors 
root primary neighbor primary neighbor log gamma 
primary neighbor root primary neighbor nonroot primary neighbor 
lemma denote jm log gamma probability primary neighbor gamma delta gamma ii log probability root primary neighbor gamman proof consider ball 
equation jm jm delta 
superset obtain jm delta 
log gamma probability primary neighbor gamma delta gamma gamma delta gamma root primary neighbor equals exist node equals equals 
probability root primary neighbor ib gamma gamma gamma ib gamma ib gamman corollary log 
primary neighbor ib log whp 
denote total number triples belongs log belongs belongs primary secondary neighbor lemma proof theorem corollary proofs theorems 
lemma log 
number nodes ith level primary neighbor log whp 
log log whp 
proof node log gamma follows lemma probability root primary neighbor ib gamman node probability root log primary neighbor fix 
equal log gamma log log gamma omega gamma constant omega gammae term chosen appropriately 
consider cases 
probability exists root primary neighbor ib gamman ne gamma omega gamma poly probability root primary neighbor log 
follows chernoff bounds number nodes root primary neighbor log whp 
consider secondary nonroot primary neighbors 
log secondary nonroot primary neighbor nodes minimum lowest ib bits match fix set obtain upper bound probability nodes minimum ib bits match consider node nn real constant specified 
equals zero probability primary secondary neighbor ib consider ball 
low expansion condition jm jm delta 
superset 
superset obtain jm delta 
probability primary secondary neighbor delta gamma delta gammad ib bd deltad gamma delta gamma gammad ib bd deltad gamma delta ib ib third inequality holds ib gamma ib gamma ib 
fourth inequality follows choosing large respect delta delta delta gamma delta 
expected number nodes secondary nonroot primary neighbor log nn ib log log obtain high probability bound number nodes secondary nonroot primary neighbor proceed follows 
theta log follows lemma probability secondary nonroot primary neighbor poly 
theta log probability secondary nonroot primary neighbor number nodes secondary nonroot primary neighbor log whp 
bounds expectation high probability bounds establish log log whp 
corollary total number reverse neighbors log whp expected log 
proof desired claim follows directly lemma reverse neighbor primary neighbor log said leaf exists sequence gamma primary neighbor lemma proof theorem 
lemma belong log 
number leaves ib log whp 
proof establish lemma showing leaf ib log whp real constant specified 
corollary log whp real constant prove induction jb log whp 
induction base follows trivially 
induction step assume belongs jb log 
corollary belongs jb log whp 
applying lemma substitution obtain deltac delta jb log 
delta choose large gamma delta deltac follows 
applying inductive claim obtain ib log whp 
desired claim follows 
cost operations consider read request originating node object denote node copy show expected cost read operation 
letting node minimum set nodes copy bound implies expected cost asymptotically optimal 
hxi hyi primary neighbor sequences respectively 
nonnegative integer resp denote ball smallest radius resp contains resp 
resp denote set ji resp ji 
denote ball smallest radius contains secondary neighbors convenience define gamma gamma 
useful consider alternative view nonnegative resp root node resp pi resp pi resp pi resp pi 
fl integer constant chosen appropriately 
nonnegative integer integer resp denote ball fl resp fl 
denote integer radius 
resp denote radius resp 
lemma superset proof definition 
superset contains fl nodes superset equation jm delta jm delta fl fl subset superset superset claim holds 
lemma log gamma log delta log ffi log delta log ffi log gamma log ffi log ffi 
proof fl log gamma jx jx resp jy jy 
log gamma follows equation log delta log ffi resp log delta log ffi 
log gamma jx jx resp jy jy log ffi resp log ffi 
resp log ffi 
resp log ffi fl ffi fl constants 
define sequences hs ht nonnegative integers follows gamma gamma gamma gammaj gammaj gamma gammaj gammaj gamma lemma 

proof proof claim follows observation proof second claim follows observation determine upper bound cost read follows 
smallest integer 
lemma superset implying copy located forwarding steps hxi 
definition primary secondary neighbors cost request resp forward message sent node delta resp 
copy located forwarding steps definition algorithm cost messages needed locating particular copy read 

cost reading copy times preceding cost 
constant cost reading 
remainder proof concerns task showing 

key idea establish sequence hs corresponds dimensional random walk biased 
lemmas provide important step formalizing notion 
lemma log gamma 
arbitrary defined values gamma probability gamma gamma arbitrary values gamma probability gamma gamma lemma log gamma 
arbitrary defined values gamma probability gamma 
arbitrary values gamma probability gamma 
order establish lemmas introduce additional notation 
gamma define follows 
gamma gamma 
nonnegative gamma gamma gamma gammas gammas 
gamma gamma gammat gammat 
lemmas proofs lemmas 
lemma log gamma 
arbitrary values 
node bit independently uniformly drawn 

exists subset size node bit independently uniformly random ii node pi false 

exists node bit independently uniformly random ii node fvg false 
proof prove parts gamma 
proof induction 
induction base set gamma 
part follows directly random assignment labels 
part set gamma desired claim holds gamma 
claim part holds vacuously gamma 
induction hypothesis assume parts lemma hold gamma 
consider different cases depending value 
event equivalent event gammaj gamma gammaj 
condition event gammaj gamma invoking corollary substitution gamma gamma gamma 
condition event gammaj invoking part lemma substitution gammaj gamma gamma gammaj gamma pi 
combining part invocations node gamma gamma gammaj gamma gammaj independently uniformly random 
combining part ii invocations ii node gammaj gamma gammaj pi false 
set gamma gammaj gamma gammaj 
event equivalent event gamma 
condition event invoking corollary substitution gamma gamma 
follows preceding invocation definition node gamma gamma independently uniformly random ii node fx pi false 
set gamma fx 
event equivalent event gamma 
condition event invoking corollary substitution gamma gamma 
follows preceding invocation definition node gamma gamma independently uniformly random ii node fx pi false 
equal set fv pi definition js 
follows definition node gamma gamma independently uniformly random ii node independently uniformly random node pi false 
follows part lemma node gamma gamma independently uniformly random ii node independently uniformly random node pi false 
obtain definition node gamma independently uniformly random 
obtain ii ii ii definition ii node independently uniformly random node pi false 
consider cases depending value 
case similar case 
event equivalent event gammaj gamma gammaj 
condition event gammaj gamma invoking corollary substitution gamma gamma 
condition event gammaj invoking part lemma substitution gammaj gamma gammaj gamma pi 
combining part invocations node gamma gammaj gamma gammaj independently uniformly random 
combining part ii invocations ii node gammaj gamma gammaj pi false 
case similar case 
event equivalent event invoke corollary substitution gamma obtain node gamma independently uniformly random ii node fy pi false 
complete induction step consider part statement lemma separately 
definition follows arbitrary values node independently uniformly random 

part follows directly ii 

ii ii follows arbitrary values independently uniformly random ii node fy pi false 
lemma nonnegative integer 
js jx js jx size jy proof proof follows relevant definitions inequality delta fl 
lemma log gamma 
arbitrary values gamma probability gammaj gamma subset gamma gamma 
arbitrary values gamma probability gammaj gamma subset gamma gamma 
proof denote event random variables take respective arbitrary values 
assume holds 
proof claim 
gammaj gamma subset gamma gammaj gamma subset gamma part lemma follows node gamma gamma independently uniformly random 
lemma js gamma gamma fl ib lemma fl delta gammaj gamma gamma fl ib delta 
probability gammaj gamma subset gammaj gamma gamma gamma gammaj fl delta gamma fl ib gamma fl delta gamma fl jb inequality follows inequalities fl delta gammafl delta proof second claim analogous proof obtained substituting 
proof lemma denote event random variables take respective arbitrary values 
assume holds 
proof claim 
gamma 
gammaj gamma subset gamma gammaj gamma subset gamma show probability gamma gammaj subset follows lemma gammaj gamma subset gamma probability gamma 
assume event gammaj gamma subset gamma hold 
show probability gammaj subset gamma 
lemma jx gamma gamma fl fl ib lemma fl delta gammaj fl delta 
probability gammaj gamma subset gammaj gamma gamma gamma gammaj fl delta gammafl gammafl gamma fl delta gammafl gammafl jb inequality follows inequalities delta fl gammafl delta follows probability gamma gamma establishing claim lemma 
proof second claim analogous proof obtained substituting 
proof lemma denote event random variables take respective arbitrary values 
assume holds 
proof claim 
gamma gamma subset gamma gamma lemma gamma subset gamma probability gamma 
assume gamma subset gamma show probability subset gamma 
part lemma follows node gamma gamma independently uniformly random 
lemma js gamma gamma fl ib lemma gamma delta fl fl delta 
probability subset gamma fl delta gamma fl gamma fl delta gamma fl gammafl delta gamma second inequality follows inequality fl delta inequality holds gammafl delta gamma show probability superset gamma gamma 
lemma delta fl gamma delta fl 
lemma node gamma gamma uniformly random ii nodes gamma gamma predicate holds 
probability subset gamma delta fl 
follows probability gamma superset gamma show subset superset gamma probability superset gamma 
resp denote radius gamma resp 
definition gamma fl 
lemma lemma node gamma gamma independently uniformly random ii nodes gamma gamma predicate holds 
calculating probability superset need show nodes cost delta 
note difference radii gamma gamma subset radius sum radii gamma fl log ffi fl nodes cost delta follows probability superset inequality follows inequalities follows probability gamma establishing claim lemma 
proof second claim analogous proof obtained substituting 
definitions follows 
addition equal equal equal gamma 
analyze random walk corresponding sequence 
random walks 
directed graph set nodes set edges 
probability distribution set fg convenience 
random walk starting fd ug random sequence hvi ii fixed necessarily simple path fixed pr pr 
directed graph node set edge set 
subgraph induced edges ng reals 
define random walks graphs respectively 
walk hwi characterized pr gamma integer ii pr equal iii pr gamma walk hw characterized pr gamma integer ii pr equal iii pr gamma note sequence represents random walk appropriate values determined lemmas 
analyze random walk showing dominates respect properties interest 
random walk easier analyze exactly characterized lemmas show bias lemma random walks pr pr 
proof prove claim induction base case trivial 
assume claim holds 
pr pr gamma pr gamma pr gamma pr pr pr gamma pr gamma pr gamma pr respectively pr pr pr gamma pr pr pr pr pr gamma pr pr pr pr pr pr pr pr pr pr lemma follows induction 

random variable denoting number steps taken reach node starting node random walk 
excursion length graph node set walk starts node returns start node time 
random variable gives length excursion starting time note 
equals 
lemma pr 
pr gamma 

proof omit subscript convenience 
induction 
base case trivial 

pr gamma 
pr gamma 
gamma gamma pr 
gamma pr gamma 
gamma gamma pr 
gamma pr 
inequality follows induction 
respectively pr 
gamma gamma gamma pr 
gamma gamma pr 
gamma pr 
gamma gamma pr 
gamma pr 
gamma gamma pr 
gamma pr 
pr 
gamma pr 
gamma pr 
gamma gamma pr 
gamma gamma pr 
gamma pr 
inequalities calculations follow induction 
lemma pr 
pr 

proof omit subscript convenience 
pr gamma pr note pr 
pr gamma 
gamma gamma pr 
gamma pr gamma 
gamma gamma pr 
gamma pr gamma 
gamma pr 
gamma gamma gamma pr 
gamma inequalities follow lemma fact pr 
gamma gamma gamma pr 
gamma gamma pr 
gamma pr 
gamma gamma gamma pr 
gamma pr 
gamma pr 
gamma gamma pr 
gamma lemma inequalities induction pr 
pr 
formalize notion domination resp denote smallest resp 
note letting hwi represent terminating step lemma pr pr 
proof omit subscript convenience 
definitions 
pr ki pr pr 
pr ki pr pr 
prove desired claim follows pr ki pr pr 
ki pr pr 
ki pr pr 
second step lemma 
third step invoke lemma invoke lemma substitution pr pr pr 

note conditions invocation pr 
non increasing follows lemma 
claim proved lemma 
lemma pr 
maxf gamma gamma pr 

proof random walk pr 
gamma gamma pr 
gamma remainder proof assume 
desired claim holds pr 
pr 
gamma 
consider 
denote event random walk reach node steps 
event non zero 
ff denote probability holds 
convenience assume ff gamma equals gamma 
obtain pr 
gamma delta ff gamma delta follows ratio pr 
pr 
equals ff gamma ff gamma remainder proof devoted obtaining upper bound ff ff 
fi denote probability holds edge traversed steps 
lemma obtain fi equals gamma delta gamma definitions ff fi follows ff fi delta gamma delta ff gamma gamma gamma delta gamma delta ff gamma gamma prove induction ff ff gamma 
induction base holds ff ff gamma 
induction hypothesis assume ff ff gamma gamma 
ff ff max mk ff gamma ff gamma gamma gamma inequality follows induction hypothesis 
odd ff ff max gamma gamma gamma gamma max gamma ff gamma ff gamma gamma maxf gamma gamma gamma second inequality follows induction hypothesis inequalities gamma gamma gamma delta gamma gamma delta desired claim lemma follows upper bound ff ff equation 
denote random walks respectively gamma gamma 
lemmas imply characterizes random walk corresponding sequence 
consider random walk assume step reveal 
define sequence hvi associated hw follows iff 
lemma log gamma 
fixed sequence hvi gamma values probability gamma 
proof assume probability know integer interval lemma follows probability gamma lower bound probability excursion length gamma starting excursion length gamma starting fixed sequence hui gamma pr gamma gamma pr gamma 
holds iff pr gamma gamma gamma 
main claim random walk follows lemmas 
lemma log gamma nonnegative integer probability proof lemma probability desired claim follows lemma 
lemma derive upper bound lemma log gamma 
proof observe resp resp resp belongs resp exist log gamma 
lemma follows probability gammai lemma ji gammai log ffi gammai ji gammai log ffi gammai log ffi 
lemmas establish theorem 
proof theorem equation expected cost read operation bounded expected value 

separately place bounds 

lemmas term 
place bound 
follows 
lemma obtain probability 
jb log ffi log ffi 
lemma claim theorem follows 
proof theorem consider insert operation executed object 
expected cost operation bounded log lemmas log gamma 
consider cost delete operation 
lemma number reverse neighbors log whp ith node primary neighbor sequence expected cost delete operation executed bounded product log log 
lemma follows expected cost delete operation log 
auxiliary memory proof theorem place upper bound size neighbor table definition number primary secondary neighbors log log 
corollary number reverse neighbors log whp 
place upper bound size pointer list size ptr number triples form delta exists log leaf ii iii main memory lemma number leaves ib log whp 
probability ib number objects main memory node follows whp log log log 
combining bounds sizes neighbor table pointer list obtain size auxiliary memory log whp 
adaptability proof theorem lemma node number nodes primary secondary neighbor log expected log whp 
reverse neighbor log nodes log primary neighbors 
adaptability scheme log expected log whp 
extend study general classes cost functions determine tradeoffs various complexity measures 
interesting consider models allow faults network 
believe access scheme extended perform presence faults distribution control information scheme balanced nodes network 
acknowledgments authors satish rao helpful discussions 
awerbuch bartal fiat 
distributed paging general networks 
proceedings th annual acm siam symposium discrete algorithms pages january 
awerbuch peleg 
routing polynomial communication space tradeoff 
siam journal discrete mathematics 
awerbuch peleg 
sparse partitions 
proceedings st annual ieee symposium foundations computer science pages 
bartal fiat rabani 
competitive algorithms distributed data management 
proceedings th annual acm symposium theory computing pages may 
chernoff 
measure asymptotic efficiency tests hypothesis sum observations 
annals mathematical statistics 
dolev kranakis peleg 
bubbles adaptative routing scheme high speed dynamic networks 
proceedings th annual acm symposium theory computing pages 
graham knuth patashnik 
concrete mathematics 
addison wesley reading ma 
schwartz 
locating nearby copies replicated internet servers 
proceedings acm sigcomm pages 
karger lehman leighton levine lewin panigrahy 
relieving hot spots world wide web 
proceedings th annual acm symposium theory computing may 
karp luby meyer auf der heide 
efficient pram simulation distributed memory machine 
proceedings th annual acm symposium theory computing pages may 
mullender editor 
distributed systems 
addison wesley 
mullender vit anyi 
distributed match making 
algorithmica 
plaxton rajaraman 
fast fault tolerant concurrent access shared objects 
proceedings th annual ieee symposium foundations computer science pages october 

emulate shared memory 
journal computer system sciences 

functional composition patterns power series reversion 
transactions american mathematical society 
upfal wigderson 
share memory distributed system 
jacm 
van steen hauck tanenbaum 
model worldwide tracking distributed objects 
proceedings tina pages september 
technical lemma lemma nonnegative integer hni sequence non increasing reals 
hpi hqi sequences reals ij ij ii im im im im proof proof induction induction basis trivial 
induction hypothesis assume statement lemma holds establish claim 
im gamma im gamma im im im third step follows inequalities induction hypothesis 
note induction hypothesis invoked gamma ij ij gamma im im 
