slicing multi threaded java programs case study matthew dwyer james corbett john hatcliff stefan sokolowski hongjun zheng kansas state university department computing information sciences university hawai department information computer sciences dwyer hatcliff stefan zheng cis ksu edu corbett ics hawaii edu program slicing increasingly popular initial step construction finite state models automated verification 
part project aimed building tools automate extraction compact sound finitestate models concurrent java programs developed theoretical foundations slicing threaded programs java monitors wait notify synchronization 
describe foundations incorporated tool slices multi threaded java programs 
describe simple static analysis refine underlying dependences slicer illustrate effectiveness refinement describing slicing realistic java program 
program slicing long recognized effective means focusing attention relevant parts program 
prelude program debugging understanding reengineering parallelization approaches 
years seen significant finite state verification model checking concurrent hardware software systems 
researchers suggested slicing techniques serve useful preprocessing step model checking hardware protocol descriptions 
describe method slicing concurrent software systems written java 
slicing method implemented component bandera tool set 
bandera collection tools compile java source code inputs existing verification tools supported part nsf ccr ccr ccr darpa nasa award nag 
smv spin mode checkers 
major components bandera abstraction program specialization engine form partial evaluation combines interpretation partial evaluation transition system generator compiles abstracted java code program low level guarded command language translates guarded command program model checker input languages 
previous showed slicing criteria extracted temporal logic formulae eliminate irrelevant portions sequential programs 
subsequently extended handle multi threaded programs jvm style concurrency primitives 
defines collection program dependences necessary slicing multi threaded programs discusses correctness slices 
reviews dependences describes architecture slicing tool illustrates application prototype tool study realistic multi threaded java program 
case study illustrates slicing necessary dependences modest impact slice remains large 
apply simple static analysis synchronized statements program classify objects locks guaranteed held indefinitely 
results analysis allow refinement program dependences slicing 
refined slice study dramatically smaller unrefined slice 
especially relevant verification ability refined slicing eliminate entire program threads key contributor wellknown state space explosion problem limits scalability verification techniques 
conclude observations prospects slicing java programs general 
section describes context apply slicing 
section introduces dependences slicing multi threaded java programs describes refinement dependences 
section describes architecture java slicing toolset 
results applying toolset realistic multi threaded java program section 
section describes related slicing conclude section 
slicing model extraction goal bandera project provide tool support extracting finite state model behavior program source text 
achieve smallest possible models advocate extraction models preserve information necessary verify single property specification 
specification program identify variables completely removed adverse affect precision checking specification resulting model 
variables exist verification techniques model checking check narrowly defined correctness properties 
precisely role slicing plays toolset 
extracting slicing criterion specification checked slicing automates identification elimination components programs variables statements threads proven slicing analyses unrelated specification 
mentioned slicing component bandera tool set 
partitioned tool set components collection major components slicer transition system builder independently usable analysis utilities 
components built top soot java compiler framework developed lauri hendren sable group 
soot framework convert java source code internal representation called jimple 
jimple essentially address code version jvm byte codes includes concurrency related operations enter monitor enters monitor associated variable remainder section give brief overview program transformations toolset carries discussion abbreviated due space limitations 
output tool set finite state version program verification tools deal infinite numbers threads infinite variable domains 
significant challenge java tools thread data creation java dynamic 
take approach bounding number objects allocated class 
technique defining instance bounds indirectly defining modifying existing main method example pass constant parameters constructors bound loops allocators called 
refer main method verification harness establishes environment system consideration verified 
suitable verification harness existing program specialization techniques applied convert heap allocated objects stored statically 
java sable cs mcgill ca mechanisms defining static threads create copy thread class definition allocated instance class 
provides opportunity precise slicing methods classes may specialized constructor parameters 
non thread heap objects globally field class containing method created object modified access field slicing threaded programs presentation slicing assumes access control flow graph cfg representation program threads 
slicing criterion computing slice involves finding nodes statements cfg nodes depend 
slicing literature computation performed stages 
stage builds program dependence graph pdg captures various dependencies nodes control flow graph 
second stage nodes depend computing transitive closure dependences pdg respect traditional sequential data control dependences 
interference dependence introduces dependence node node different thread defines variable referenced hatcliff define additional necessary dependences slicing multi threaded programs jvm concurrency primitives divergence dependence variation weak control dependence synchronization ready dependence 
dependences define edges pdg 
rest section describe dependences static analysis refine definition ready dependence 
concurrency related dependences relevant variable defined node inside critical region locking associated region preserved corresponding enter monitor exit monitor commands appear slice 
omitting monitor allow shared variable interference original program 
situation say synchronization dependent inner enclosing enter monitor exit monitor nodes dependence case nested critical regions captured transitive closure relation 
definition synchronization dependence node body monitor synchronization dependent enter monitor exit monitor define monitor 
variables may multiple object run time handled polyvariant specialization java temporal logic formula soot jimple criterion extractor static analyses aliasing inlining unfolding lock safety divergence dependence capture situation infinite loop may prevent execution program node 
analogous situation concurrent execution handled ready dependence 
informally statement ready dependent statement failure complete reached wait notify occurs thread referred block reaching completing delaying execution indefinitely 
jimple jimple architecture java slicer definition ready dependence node ready dependent node 
reachable cfg enter monitor 
enter monitor 
exit monitor reachable wait 
wait notify 
statement thread start notify refining dependences definition defined preserve execution semantics concurrent program slices 
overly pessimistic broad class programs assumes locks held indefinitely 
believe general locks java programs held indefinitely 
define safe lock held indefinitely 
attempt compute exact set safe locks focus easily identified subset safe locks 
lock safe paths matching enter monitor exit monitor commands contain 
wait free indefinite loops 
wait commands locks 
enter monitor exit monitor commands unsafe locks 
wait free loop loop path body include wait command 
lock safety computed depth marking program flow graph fragments rooted enter monitor commands 
slicer pdg pdg builder sliced jimple conditions definition capture situation thread holds lock indefinitely causes process block enter monitor statements lock 
lock safety information refine conditions apply lock unsafe safe locks eventually released 
architecture implementing java slicing tool dependences 
slicer exploits information computed purpose model extraction improve precision resulting slices 
architecture tool illustrated shaded portions components slicer 
analyses applied jimple code resolve values referenced program points calculate object method calls purpose inlining 
dependences extracted jimple construct pdg 
property checked analyzed extract slicing criterion defines extraction performed 
criterion pdg jimple program representation generate sliced jimple program 
date implemented full version slicer sequential java programs enhanced components treat concurrency related features java 
particular criterion extractor prototype pdg builder core pdg slicing algorithm implemented case study explained section 
prototype currently limited analyzing programs completely inlined recursion monomorphic method calls object variables single assignment constructor expression assumption eliminates need sophisticated alias analysis 
sample java program studied java program implements pipeline fo threads source code appendix 
main program creates objects uses create connect class static lock static int public static void main string argv new lock new lock new stage start new lock new stage start new lock new stage start new listener start synchronized notifyall synchronized notifyall class lock final class listener extends thread public void run int tmp true synchronized int value try wait catch ex value tmp value tmp break system println tmp type stage listener pipeline topology 
simplified terms data structure protects integer queue retains structure typical conditional monitor implemented java 
discussed section slice specialized version program 
gives routine thread copy thread program stage threads created analogous way 
jimple representation soot framework renders specialized java pipeline code sequence jimple instructions 
jimple code program threads 
numbered line corresponds node cfg designated thread 
basic dependences jimple code processed extract individual dependence relations construct pdg 
table shows dependences main stage listener threads superscripts ready dependences indicate specific conditions definition caused dependence 
dependences similar dependences threads case interconnection stage stage stage main stage causes change dependences 
dependences stage altered similar way interconnection 
refined dependences kinds synchronized statements program wait monitors contain loop controlled wait condition wait held lock notify monitors contain notify specialized pipeline java final class stage extends thread public void run int tmp true synchronized int value try wait catch ex value tmp value tmp tmp tmp synchronized tmp notifyall tmp break held lock 
trivial see safety conditions defined section met synchronized statements 
notify monitors loops condition holds wait monitors loop path loop wait held monitor condition holds cases 
synchronized statements meet conditions locks program classified safe 
ready dependences arise conditions definition superscripted table removed 
note eliminated dependences nodes different threads 
sliced pipeline pipeline example implements shutdown program threads passing value pipeline 
case attains value stage pipeline return 
property expressed linear temporal logic stage return criterion extraction algorithm produce slicing criterion main main main stage stage corresponds definitions statement 
slicing criterion basic dependences removes statement listener 
refined ready dependences yields dramatically smaller slice shown 
slice matches intuition relevant property 
property related stage values flow object expect main stage included slice 
addition notify monitor dependence main stage listener data control divergence interference synchronization ready main new lock init new lock init new stage init start new lock init new stage init start new lock init new stage init start new listener init start notifyall notifyall return table dependences pipeline stage goto wait goto value tmp value tmp goto tmp tmp tmp notifyall tmp goto return listener goto wait goto value tmp value tmp goto system println tmp goto return jimple code specialized pipeline removed know safe indefinitely block 
size slice depends course criterion chains dependences run program 
source dependence chains observed related presence wait monitors 
consider refining slicing criterion just stage get main new lock init new stage init start notifyall notifyall return refined slice stage goto wait goto value tmp value tmp goto tmp tmp tmp goto return exactly slice 
may somewhat surprising know safe lock condition loop wait monitor introduces divergence dependence nodes thread 
reason dependence possible tell condition true loop header exit 
way treat slice include nodes define variables condition case 
ofq causes lines included interference dependence 
synchronization data interference control dependences cause remaining nodes included 
just wait monitor related divergence dependence caused program included slicing return slice return stage pipeline cause stages preceding included 
related lines research related 
aside large body sequential program slicing attempts ing slicing concurrent programs 
addition slicing input languages model checking tools directly 
cheng presents approach static dynamic slicing concurrent programs generalization pdg 
introduces dependences synchronization dependence roughly corresponds synchronization dependence communication dependence analogous interference dependence selection dependence generalization control dependence non deterministic choice operators appearing language 
treat wait notify synchronization direct analog ready dependence 
krinke considers static slicing multi threaded programs shared variables focuses issues associated interference dependence 
notes considering interference dependence transitive result slice viewed overly imprecise 
example study imprecision interference dependence primary barrier computing precise slices 
unclear potentially significant computational cost refining interference dependence payoff improved slicing java programs 
contrast relatively cheap refinement ready dependence clear payoff example 
obviously broader study slicing java programs needed judge relative importance dependence refinement techniques 
teitelbaum study static slicing promela input language model checker spin application model checking simulation protocol understanding extension modification cheng 
emphasize imprecise slices give useful reductions model checking 
clarke tool slicing vhdl programs dependence graphs 
pdg approach data control dependence new notion called signal dependence similar synchronization dependence 
described method slicing concurrent java programs pre processing step finite state verification 
new notions program dependence described method refining dependences results simple static analysis 
illustrated effectiveness refinement improving precision slices realistic multi threaded java program 
unconditional notify monitors treated precisely safe lock analysis 
study suggests wait monitors introduce dependences force inclusion slice threads coupled solely wait notify relationships 
plan exper range real java programs understand kinds inter thread relationships appear commonly extent safe lock refinements dependence refinements provide increased precision slicing 
cheng 
slicing concurrent programs graph theoretical approach 
proceedings international workshop automated debugging number lncs pages 
clarke fujita rajan reps shankar teitelbaum 
program slicing design automation automatic technique speeding hardware design simulation testing verification 
technical report 
corbett 
constructing compact models concurrent java programs 
software engineering notes march 
proceedings acm sigsoft international symposium software testing analysis 
matthew dwyer john hatcliff 
slicing software model construction 
proceedings acm sigplan workshop partial evaluation semantics program manipulation january 
matthew dwyer john hatcliff david schmidt 
bandera tools automated reasoning software system behavior 
ercim news january 
john hatcliff james corbett matthew dwyer sokolowski hongjun zheng 
formal study slicing multi threaded programs jvm concurrency primitives 
technical report kansas state university department computing sciences march 
john hatcliff matthew dwyer shawn laubach 
staging static analysis abstraction program specialization 
lncs 
principles declarative programming th international symposium plilp september 
john hatcliff matthew dwyer shawn laubach 
specializing configurable systems finite state verification 
technical report kansas state university department computing information sciences 
holzmann 
model checker spin 
ieee transactions software engineering may 
lynette tim teitelbaum 
slicing promela applications model checking simulation protocol understanding 
proceedings th international spin workshop 
jens krinke 
static slicing threaded programs 
proc 
acm sig plan workshop program analysis software tools engineering paste pages 
mcmillan 
symbolic model checking 
kluwer academic publishers 
tip 
survey program slicing techniques 
journal programming languages 
surveys state art program slicing gives literature 
appendix original java source code pipeline example treated section 
class pipeline static int num public static void main string argv new int num new new stage start new listener start add add final class private int queue public final synchronized int take int value queue try wait catch ex value queue queue return value public final synchronized void add int queue notifyall final class listener extends thread protected input public listener input public void run int tmp true tmp input take tmp break system println tmp final class stage extends thread protected input output public stage input output public void run int tmp true tmp input take tmp tmp tmp output add tmp tmp break 
