flash vs 
simulated flash closing simulation loop jeff gibson robert kunz david mark horowitz john hennessy computer systems lab stanford university stanford ca vic stanford edu simulation primary method evaluating computer systems phases design process 
significant problem simulation rarely models system exactly quantifying resulting simulator error difficult 
importantly architects assume proof simulator may inaccurate absolute performance predictions accurately predict architectural trends 
studies source magnitude error range architectural simulators comparing simulated execution time applications microbenchmarks execution time actual hardware modeled 
existence hardware gold standard allows find quantify fix simulator inaccuracies 
simulators predict architectural trends analyze sensitivity results simulator configuration 
find simulators predict trends accurately long model important performance effects application question 
unfortunately difficult know effects having hardware quite subtle 
calls question value architectural studies highly detailed simulators characteristics carefully validated real hardware design 

flash project stanford large research effort exploring methods building large scale shared memory multiprocessors 
architecture research today relied heavily simulation technology evaluate architectural trade offs machine course research developed number simulation methods widely deployed 
research efforts flash project built hardware version machine node multiprocessor currently permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
copyright acm mark heinrich computer systems lab school electrical computer engineering cornell university ithaca ny heinrich csl cornell edu operation stanford 
running machine gives dis advantage able compare simulations design machine actual hardware determine accuracy simulators 
describes results comparison 
simulators comparison span range detail simple single issue processor model operating system order processor model complete simulated operating system 
addition look processor modeling effects memory system effects compare simulation results detailed memory system simulator simpler 
simulator built advance real hardware approximately years explore behavior machine trade offs machine designed 
results surprised accuracy detailed processor memory system models 
fact complex processor models worse simpler models terms performance accuracy 
easy explanation performance errors report section result poor simulator design part 

clearly simulation system bug free simplescalar share characteristics caused performance errors systems 
industry stories performance differences new processor internal performance model common 
hard believe entire architecture community design simulator 
plausible answer poor performance matching simply expected result 
modeling modern processor performance difficult requiring writer simulator understand low level details hardware able model effects greatly slowing complicating simulator 
bugs omissions common methodology points wrong hard simulation writer know errors exist 
result simulators need validated real hardware provide reliably accurate performance predictions 
result somewhat finer design tradeoffs probably affected performance smaller amount size simulator error 
contributions architecture research literature report performance gains magnitude simulator modeling error ob served 
inaccurate absolute performance critical problem trends predicted simulators accurate 
architects rely able predict relative magnitude performance changes variety alternative designs 
example multiprocessor flash critical understand system respond processor counts increase 
results predicting performance trends encouraging perfect 
surprising result simple order machine model flash simulations predicts trends slower complex order model 

hardware simulators section briefly describes flash hardware system followed detailed descriptions simulators study 
concludes discussion methodology compare simulation results real hardware including parameters vary applications 
hardware hardware study processor flash flexible architecture shared memory machine 
flash cache coherent distributed shared memory multiprocessor runs cache coherence protocol programmable node controller magic 
exact details flash important study 
important flash aggressive design processor memory system abundant concurrency complex interfaces modern machines non trivial simulate 
performance flash hardware standard simulators attempt match 
table lists important parameters actual flash hardware 
flash uses mips compute processor 
example complex superscalar microprocessor 
order core issue retire instructions cycle lockup free chip primary instruction data caches lockup free secondary cache 
manages secondary cache data replies intervention requests pass processor get cache 
flash hardware configured processor clock speed mhz magic node controller running mhz 
flash runs slightly modified version irix operating system 
boot code device drivers specific sgi origin altered boot irix flash 
simulators flash design effort produced number architectural simulators course approximately years 
focus flash project innovation memory system simulations design process detailed memory system simulator 
varied project matured level detail modeling processor operating system 
main simulators conjunction solo simos described 
addition examine importance simulation accuracy memory system describe simpler generic numa parameter value processor mips number processors processor clock speed mhz system clock speed mhz instruction cache kb line size primary data cache kb line size secondary cache mb line size max 
ipc max 
outstanding misses network ns hops hypercube memory ns double word cache coherence protocol dynamic pointer allocation table flash hardware configuration 
memory system simulator compare 
solo 
simplest simulation framework solo standard processor simulator allows application run directly simulated hardware 
os modeling technique commonly industry research community solo models parallel threads shared memory emulates system calls 
tango lite mint examples type simulator 
solo model operating system behavior consists mainly processor simulator memory system simulator set backdoor routines handling system calls page mapping 
lacking system details simulators solo easy build commonly architectural evaluation 
solo uses mipsy processor simulator models single issue order mips processor 
pipeline effects functional unit latencies simulated mipsy processor executes instruction cycle absence memory stalls 
mipsy blocking reads supports prefetching write buffer 
solo simulations prefetching entry write buffer attempt model flash hardware closely possible 
solo standard memory system simulator flash machine 
multi threaded simulator memory bus magic node controller network memory subsystems 
threads cycle accurate emulator embedded protocol processor runs cache coherence protocol 
threads model magic external interfaces internal functional units latencies extracted directly verilog rtl design 
uses cache coherence protocol runs flash hardware small modifications protocol simulation speed initial boot phase 
application runs protocols identical instruction data cache behavior 
refer memory system simulator models flash system main microprocessor caches 
simos 
simos simulation environment simulators models system detail boot run full operating system 
able run slightly modified version irix simulated machine 
kernel modifications boot code device drivers due dif ferences flash simulated hardware 
solo simos contains processor simulator memory system simulator 
addition simos models virtual memory system including processor tlb devices disks ethernet console 
system calls page mapping managed simulated operating system just hardware responsibility simulator 
simos run processor simulators provide varying degrees detail 
fastest processor simulator embra binary translation system runs roughly slowdown host microprocessor 
unfortunately embra model processor memory system detail draw useful 
indispensable allows boot operating system position workloads reasonable amount time checkpointing 
generating results restore embra checkpoint detailed simulators mipsy mxs run applications 
mipsy processor model simulator solo 
mxs detailed processor simulator models order issue microprocessor 
generic order processor simulators mxs model real processor particular 
generic superscalar processor model configured close possible 
mxs models pipeline latencies bandwidth experiments type number functional units branch prediction strategy 
prior mxs lacked resource constraints functional units added constraints compare mxs fairly simulators similar detailed processor simulators literature 
solo simulations mipsy mxs simos simulations detailed memory system simulator 
numa 
investigate importance accurate memory system model replace solo simos generic non uniform memory access numa model 
models flash hardware great detail numa simulator models memory system generic numa machine 
simulates network latencies contention main memory latency directory controller magic case flash 
model occupancy directory controller normal latency path model contention network routers 
numa example type memory system simulator designed built real hardware interested processor effects details particular memory system 
methodology mipsy simple single issue processor model attempt model instruction level parallelism mips simulators mipsy widely due ease development speed mipsy runs times faster mxs 
common technique allow single issue processor models mipsy model multiple issue processor increase speed processor respect memory system 
single issue processor take advantage ilp speed increase necessary enable processor requests application problem size fft points radix sort keys ocean grid lu matrix blocks table splash problem sizes 
memory system rate real hardware 
correct speed processor model related ilp real processor able exploit empirically determined 
mips processors flash machine run mhz 
mipsy results processor speeds mhz mhz mhz section show common technique works practice 
mhz mhz issue retire instructions cycle processor sustains peak performance 
find mhz sufficient compensate ilp 
mxs multiple issue simulator capable exploiting ilp results reported hardware processor clock speed mhz 
experimental setup fixes parameters identical simulators real machine 
application binaries platforms 
protocol real hardware transparent changes system boot routines 
simulated kernel real kernel differ device drivers study console network application runs take average hardware runs avoid reporting spurious system effects 
splash applications study fft radix sort lu ocean compiled solo restrictive requirements simos hardware needing older statically linked elf binaries :10.1.1.104.6469
limitation study allows identical executables solo simos flash hardware 
application includes prefetch instructions hide read latency improve parallel performance multiprocessor versions perform data placement minimize communication coherence traffic 
problem sizes shown table 
note matter poorly applications perform hardware simulators predict performance 

results section show range processor memory system simulators predict actual hardware performance 
analyze discrepancies occur simulator find inaccuracies intrinsic type class simulator simply implementation 
addition show significant errors occur carefully designed simulators build real hardware 
compared simulator results hardware performance errors gone unnoticed 
explore simulators predict trends 
commonly held belief simplified simulators give accurate estimates absolute performance predict speedup architectural trends 
investigate ability simulators predict speedup evaluate sensitive results memory system model 
flash vs 
simulated flash studying simulators predict actual hardware performance 
describe sources error simulations tuned simulations better model hardware 
initial performance comparison initial performance comparisons ran applications splash suite flash hardware simulators see simulators predict flash hardware performance 
examined execution time parallel section application normalized execution times actual hardware 
initial processor results encouraging 
simulator configurations faster real hardware relatively agree track 
instance simos mipsy mhz gives prediction performance ocean low predicts execution time radix sort predicts execution time lu 
simulators fared worse 
solo mipsy mhz example predicts hardware execution time 
confusion initial multiprocessor results simplify picture examine initial results uniprocessor runs applications 
results shown 
axis broken simulator configurations application 
axis gives execution times relative real flash hardware 
value means simulator reported time hardware 
values signify simulator executing faster hardware values mean simulator running slower hardware 
unfortunately simulators hardware far apart 
applications rarely operating system services expected solo mipsy simulations produce nearly results simos mipsy simulations case 
sources mismatch hardware results hand able find sources simulator error 
sections categorize sources error performance bugs omission large effects lack sufficient detail 
category describe specific simulator problems affect quality simulation results 
bugs 
performance bugs subtle disastrous accuracy simulation results 
easy trap fall believe just program runs simulator crashing basic statistics reasonable simulator giving meaningful prediction performance 
contrary subtle performance bugs live production simulator years 
example mxs simulator bug instruction move pipeline quickly resources available issued 
simulator ran fine generated results glance believable circumstances triggered bug common case 
particular bug relative execution time simos mipsy mhz fft simos mipsy mhz simos mipsy mhz legend lu radix sort ocean simos mxs mhz solo mipsy mhz solo mipsy mhz solo mipsy mhz initial uniprocessor splash results simulator tuning 
rivet group visualizing pipeline noticed modeling error 
mxs designed model specific processor validated type bug easy find 
mxs publicly available simulators simplescalar designed model specific processor standard exists 
performance bug mxs simulator mips cache instruction implemented correctly 
instruction invalidated dirty line successful completion memory operation properly communicated processor 
result processor graduate instruction approximately cycles 
eventually timing interrupt caused processor retry operation immediately succeeded 
processor recovered cycles small relative total simulated run time application problem went unnoticed months 
omissions 
class problems simulators deliberate omission detail 
solo simulator instance model operating system effects tlb 
lack operating system known user solo long assumed long applications study substantial number operating system services splash applications certainly fit category operating system effects safely ignored 
advent simos omission tlb corresponding lack modeling tlb misses solo second order performance effect 
researchers noted importance tlb performance need model tlb highly tuned splash applications surprising 
tlb small entries penalty tlb processor cycles 
original splash studies done simulator tlb early simos studies showed carefully tuned splash applications experi relative execution time simos mipsy mhz fft simos mipsy mhz simos mipsy mhz legend lu radix sort ocean simos mxs mhz solo mipsy mhz solo mipsy mhz solo mipsy mhz uniprocessor splash results blocking fixes :10.1.1.104.6469:10.1.1.104.6469
ence substantial number tlb misses 
entries tlb easy program run regime working set resides primary data cache incurs substantial number tlb misses 
fft instance exhibits behavior 
splash studies recommended blocking fft primary data cache point fft leads tlb store transpose phase processor runs :10.1.1.104.6469
changing blocking parameters block tlb improves performance fft uniprocessor processors 
similarly radix sort traditionally run large radix reduce overhead 
causes pathological number tlb misses 
reducing radix key hardware run gives performance improvement uniprocessor processors 
researchers authors previously underestimated effects tlb misses 
tlb performance important cache performance easily application primary bottleneck 
simulator model tlb results viewed skepticism major performance effect missing 
see section neglecting tlb common simplification virtual memory system cause unacceptable simulator inaccuracies 
changed input parameters fft radix sort give optimal performance actual hardware 
subsequent results reflect tlb blocking fixes 
shows performance simulators running tuned applications 
note simulated times radix sort closer hardware times 
sense solo runs means simos modeling cost tlb correctly 
described detail section 
uniprocessor ocean results surprising solo predicts slower times hardware simos mipsy 
glance impossible lack operating system effects speed program 
cause behavior solo predicts secondary cache rate approximately times higher reported simos mipsy due increased number cache conflicts 
cache conflicts caused poor layout physical memory controlled operating system 
solo model operating system performs physical memory allocation 
architectural simulators solo neglects page coloring algorithms modern operating systems 
fact solo realistic simulators dispense virtual memory altogether operate raw physical addresses equivalently mode physical addresses equal virtual addresses 
reason operating system writers worry page coloring improper coloring performance application 
important simulations include operating system architects give careful thought page coloring 
instance uniprocessor cache conflicts predicted solo ocean occur processors solo predicts huge superlinear speedup ocean occur hardware 
lack instruction latency modeling deliberate simulator omission causes performance mispredictions 
mipsy execute instruction clock cycle experiences cache reality instructions take far longer execute 
radix sort instance executes high latency operations integer multiplications divisions 
similarly ocean executes high latency floating point operations 
effect mipsy tend predict execution times radix sort ocean 
examine behavior detail section simulators tuned correctly model memory effects 
lack detail 
effects modeled simulator modeled correctly 
mipsy mxs designed accurate model mips 
focus flash project memory system purpose processor models generate believable streams evaluate memory effects 
paragraphs describe forced tune simulation parameters matched hardware set simple microbenchmarks 
solo simos mipsy simos mxs simulators model tlb predict performance degradations due tlb misses evidenced 
modeling tlb issue problem processor models properly model time associated tlb typical simulators fact model tlb 
tlb misses handled exception handler consists instructions 
tlb misses take cycles execute hits cache 
strange effect occurs reasons processor takes large number cycles take return exception nearly instructions dependent numerous pipeline flushing processor instructions 
mipsy processor model takes cycles instructions 
mxs models instruction latency pipeline flushes associated processor instructions predicts cycles 
hardware results microbenchmark times tlb misses able tune simulators give correct value cycles protocol case hw tuned fl untuned fl local clean local dirty remote remote clean remote dirty home remote dirty remote table dependent load tests flash hardware tuned untuned versions flash lite simulator times ns parenthesized times relative hardware 
tlb surprising processor models designed model predict processor cost tlb accurately deficiency cause researchers overlook primary bottleneck simulated application believe tlb effects account 
uncover sources error processor memory system microbenchmark tool measure memory latency protocol cases 
test employs string dependent loads secondary cache 
technique introduced lmbench 
performance dependent loads complicated originally thought 
mips secondary cache tags data chip occupancy external cache interface serious performance concern 
peculiarity data returned memory system processor forwarding data external cache external cache interface occupied entire duration transfer 
subsequent tag checks wait transfer complete problem fixed 
processor models mispredicted latency back loads model occupancy secondary cache interface 
added effect mipsy local read latencies reported mipsy match ones reported hardware 
local read latencies matched easily tuned parameters read latencies protocol read cases shown table matched 
tuning latencies closely matched hardware 
architectural simulator remarkably informed memory system latency occupancy effects developed part design modeled hardware 
detailed memory system simulator suspect initial results worse reported 
simulator tuning consisted adjusting tlb time changing bus timing accommodate mipsy new accurate secondary cache interface adjusting latency network router tuning latencies network node controller viceversa 
restart time test microbenchmark suite set mipsy parameters determine delays processor core processor pins 
results tuned simulator shows uniprocessor results simulators tuned describe 
expect relative execution time simos mipsy mhz fft simos mipsy mhz simos mipsy mhz legend lu radix sort ocean simos mxs mhz solo mipsy mhz solo mipsy mhz solo mipsy mhz final uniprocessor splash comparison 
relative execution time simos mipsy mhz simos mipsy mhz simos mipsy mhz legend fft lu radix sort ocean simos mxs mhz solo mipsy mhz solo mipsy mhz solo mipsy mhz final processor splash comparison 
applications considerable amount ilp get estimate performance mipsy processor running mhz corresponding ipc roughly 
fft lu see simos mipsy simulator mhz exact 
radix sort ocean contain high latency instructions expect mipsy speed best models memory request rate predict execution time 
applications simos mipsy mhz predict fast execution times 
mhz simos mipsy runs close hardware results radix sort ocean just coincidence 
lower clock rate compensating unmodeled instruction latencies 
verify incorrect instruction latencies causing mhz simos mipsy simulation underestimate execution time radix sort ran simple experiment 
radix sort contains integer multiplications divisions counted number times instructions executed mipsy 
find add cycles multiplication cycles division latencies operations execution time mhz simos mipsy relative execution time improves 
solo performs fft radix sort lu results nearly identical simos mipsy 
applications tuned avoid tlb misses relevant operating system effects 
ocean badly mispredicted solo solo page coloring causes conflict misses occur irix 
mxs displays disappointing results faster real hardware 
indicates mxs exploiting far ilp 
fft lu see mxs predicts similar times mipsy running twice speed 
mxs configured match number latencies functional units fact mxs generic processor model means handle corner cases way real processor 
example showed effects address interlocks pipeline cases cause decrease performance 
unfortunately real superscalar processor exceedingly complex piece hardware types unmodeled corner cases abound 
mipsy mxs models instruction latencies fastest worst processor model radix sort ocean 
mitigating factor ilp modeling mxs artifact fact mipsy model delays associated high latency instructions radix sort ocean 
results processors shown indicate relevant performance effects processor machine uniprocessor 
major difference physical memory allocation ocean done poorly solo uniprocessor problem processor solo runs 
speedup studies familiar sources error simulators evaluate simulators suited measuring effects absolute performance 
start examining simulators predict speedup 
find order processor model usually unimportant predicting speedup provided simulator models operating system tuned memory request rate matches hardware 
contrast research stressing importance detailed processor models 
fft fft exhibits near linear speedup processors flash hardware 
shows representative speedup curves 
simulators predict speedup 
simos mxs simos mipsy mhz mhz shown give speedup predictions close reasonably close hardware 
quality processor model important predicting absolute performance inaccuracies tend offset relative metric case speedup ratio execution times 
important result mhz simos mipsy simulator gives misleading prediction speedup processors 
faster processor model mem speedup speedup flash mhz legend simos mipsy mhz simos mxs mhz speedup trend study fft 
flash mhz legend simos mipsy mhz solo mipsy mhz speedup trend study radix 
ory requests frequently mips causes contention hardware 
radix sort radix sort exhibits poor speedup processors expect simulators predict performance hardware modeling 
speedup curves shown 
simos runs mipsy mxs simos mipsy mhz shown accurately predict poor speedup 
speedup incorrectly predicted solo somewhat surprisingly solo better job physical memory allocation irix 
cache conflicts hardware simos absent solo 
tempting assume problem application simulator view failure solo correctly predict performance problem 
ocean lu speedup studies ocean lu reveal simulators give speedup predictions results corrected poor performance prediction solo uniprocessor ocean shown 
effects memory system model atypical commonly memory system simulators 
authors quite informed aspect hardware design simulator authors fact hardware designers 
uses delays extracted directly ver speedup legend flash tuned untuned numa number processors speedup radix sort predicted simos mipsy mhz 
ilog model hardware 
simulators far detailed examine sensitive results accuracy memory system model 
section simulators numa memory system model place 
latency parameters numa set match hardware latencies known advance building hardware 
models latencies faithfully numa model extra occupancy directory controllers normal latency path 
model contention network routers 
numa gives similar results applications experience contention expect see large differences applications 
highlight effect study version radix sort data placement disabled 
placing data single node create hotspot test simulator ability predict performance impact hotspot 
shows processor speedup predicted simos mipsy mhz 
simos simulators give speedup prediction choose representative 
note processors hardware speedup poor due memory hotspot 
tuned simulator job predicting performance problem 
addition untuned version predicts speedup 
numa memory system model underestimate magic occupancy expect find larger error application sensitive occupancy 
case 
numa model able correctly predict radix sort get terrible speedup actual value predicts processors 
summary results show major sources error simulators related character simulators particular implementations 
trend studies find simulator reasonable job modeling important performance effects application reasonable job predicting trends 
details processor model memory system model important predicting absolute performance critical trend prediction provided memory request rate similar processor modeled 
leads surprising result simple processor model mipsy run higher speeds relative memory system model ilp gives results accurate detailed multiple issue simulator mxs 
mxs carefully tuned match mips instruction latencies functional unit bandwidth model intricacies 
studies lack detail negates advantages modeling multiple issue order processor 
mxs takes far longer run mipsy lacks clear advantage accuracy results view major deficiency type simulator 
results validate common practice fast order processor model order processor 
researchers careful running order model fast produce poor results shown 
results paint picture simulators long important effects modeled details crucial 
unfortunately difficult tell important performance effects results compared hardware platform 
simulator faithfully model virtual memory system target hardware operating system instance results seriously distorted tlb misses effects 
way tell model compare hardware 
simulator give results qualitatively correct substantial error 
instance simulators view predicting speedups predictions simulator error larger performance gains architectural enhancements reported research literature 

building flash machine extensively simulated past years gave unique opportunity evaluate simulation tools form core part current architecture research 
results surprising 
find getting accurate performance data simulator difficult having real machine compare simulations 
unfortunately accurate performance estimation getting easier 
improvement simulation technology increasing complexity machines interested simulating 
specific modeling problems encountered may effect systems probable new issues take place simply platform hard know errors exist 
corollary difficulty producing accurate performance numbers complex simulator ensure better simulation data 
compared number processor simulation models mxs order simulation model accurate simple processor model simple speedup factor 
mxs configured global resource constraints number implementation constraints modeled inevitably reduce performance processor 
difficulty modeling issues meant simulator gives best results fact simos mipsy mhz spite simple processor model 
fft lu simos mipsy mhz predicts absolute formance processor runs 
knowing speed simple model depended having real hardware compare knowing expected ilp application 
results showing effectiveness simple processor model disagree simple simulators solo simulator study badly mispredicted performance 
showed simple simulators usually predict larger execution times detailed order models result saw 
differs theirs detailed order simulator substantially faster hardware modeled performance real machine true gold standard predicted better simpler simulators 
intrinsic difficulty producing accurate simulator know results weakly depend absolute accuracy simulator 
inaccurate performance simulators useful gaining intuition system help find early stage problems 
functionality gaps deadlock issues race conditions protocol problems things may discovered simulators model performance correctly 
performance sensitive parameters parallel processor speedup estimated needing tune simulator long critical performance aspects modeled correctly 
unfortunately having confidence critical issues modeled correctly difficult validation method 
simulation vital tool architecture research 
simulator provide important insight proposed machine 
results show architectural trend predictions critical evaluation new architectural ideas erroneous underlying simulation lacks important performance effect 
demonstrates importance building real hardware cause concern computer architects broader research community simulation method performance evaluation 
addition multitude benefits building hardware allows compare simulations reality provides essential feedback needed continue improve simulation technology 
acknowledgments robert bosch help configuring mxs simulator 
robert provided valuable assistance debugging simulator problems 
research supported department energy asci contract lll darpa contract dabt 
mark heinrich supported part nsf career award ccr 

fast accurate multicomputer simulation 
performance evaluation review vol 
pp 
may 
burger austin 
simplescalar tool set version 
computer architecture news pages june 
pai adve 
improving speed vs accuracy tradeoff simulating shared memory multiprocessors ilp processors 
rice university ece technical report june 
goldschmidt 
simulation multiprocessors performance 
ph dissertation stanford university june 
heinrich 
performance scalability distributed shared memory cache coherence protocols 
ph dissertation stanford university october 
heinrich performance impact flexibility stanford flash multiprocessor 
proceedings sixth international conference architectural support programming languages operating systems pages october 
heinrich horowitz hennessy 
hardware software codesign stanford flash multiprocessor 
proceedings ieee special issue hardware software design march 
lenoski keen 
measuring memory hierarchy performance cache coherent multiprocessors micro benchmarks 
proceedings supercomputing november 
heinrich stanford flash multiprocessor 
proceedings st international symposium computer architecture pages april 
magnusson dahlgren sun 
proceedings usenix annual technical conference june 

efficient performance prediction modern microprocessors 
ph dissertation stanford university august 
martonosi heinrich 
integrating performance monitoring communication parallel computers 
acm sigmetrics conference measurement modeling computer systems may 
mcvoy staelin 
lmbench portable tools performance analysis 
usenix technical conference pages january 
pai ranganathan adve 
manual version 
technical report department electrical computer engineering rice university august 
pai ranganathan adve 
impact instruction level parallelism multiprocessor performance simulation methodology 
proceedings rd international symposium high performance computer architecture 

homepage line www cs utah edu 
reinhardt hill larus wisconsin wind tunnel virtual prototyping parallel computers 
acm sigmetrics conference measurement modeling computer systems may 
rosenblum 
personal communication 
rosenblum herrod witchel gupta 
complete computer simulation simos approach 
ieee parallel distributed technology winter 
standard performance evaluation 
spec benchmark suite 
details line www org 
stanford parallel applications shared memory 
splash web page line www flash stanford edu apps splash 
bosch hanrahan rosenblum 
visualizing application behavior superscalar processors 
proceedings ieee information visualization pages 
hill 
surpassing tlb performance superpages operating system support 
proceedings sixth international conference architectural support programming languages operating systems pages october 
veenstra fowler 
mint front efficient simulation shared memory multiprocessors 
proceedings second international workshop modeling 
analysis simulation computer telecommunication systems pages january 
woo splash programs characterization methodological considerations :10.1.1.104.6469
proceedings nd international symposium computer architecture pages june 
kenneth 
personal communication 
kenneth 
mips superscalar microprocessor 
ieee micro april 
