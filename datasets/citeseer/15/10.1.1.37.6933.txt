implementing extensible theorem provers shriram krishnamurthi kathryn gray department computer science rice university houston tx usa cs rice edu www cs rice edu 
growing application theorem proving techniques increased need customized theorem provers 
powerful provers contain numerous interacting subsystems requires substantial time expertise build constructing new provers scratch virtually prohibitive 
plug play prover frameworks promise alternative developers construct provers selecting logics reasoning techniques interfaces 
realizing frameworks cleanly requires specialized software architectures particular language abstractions frameworks supporting simple interactions logics 
explores architectural linguistic issues plug play theorem prover development 
reflects experience creating framework develop versions research prototype theorem prover 
keywords extensible theorem provers plug play theorem provers software architectures software components programming languages theorem provers large bodies software 
typical prover contains numerous interacting subsystems implement decision procedures reasoning methods theory declaration facilities user interfaces 
subsystems mature developing demands greater expertise labor 
simultaneously growing application formal methods general theorem proving particular increasing demand theorem provers 
extensions existing provers satisfy applications require combinations techniques various provers 
may benefit restricted versions provers say trade functionality smaller memory footprint 
implementing scratch prohibitive 
developers able build provers wiring components existing provers 
way leverage extant expertise concentrate efforts value adding customizations extensions 
researchers developers users theorem provers advocated similar vision 
designing realizing plug play systems engenders challenging technical problems 
strictly logical semantically combine different logics multiple techniques inter operate fig 

timing diagrams depict changes boolean variables time 
change called event 
arrows indicate temporal ordering events optional annotations arrows specify discrete bounds time passing events 
vertical parallel lines specify event synchronization 
annotation falling transition anchor indicates transition happens time defines formal syntax semantics inference rules timing diagrams 
guarantee consistency extensions 
issues architectural integrate code existing subsystems 
architectural decisions greatly affect maintainability usability system 
researchers consider logical architectural features build modular provers 
discusses architectural issues developing plug play provers 
discussion goes standard high level architectural description include details code organization prover modules linguistic abstractions support organizations 
observations solutions arise experience developing various plug play systems including theorem prover framework called 
lets developers build new prover selected logics reasoning techniques add new logics reasoning techniques existing prover extend expressive power logics techniques existing prover modifying accessing source code existing prover modules 
section illustrates forms extensibility arise theorem provers 
section presents architecture extensible provers 
section discusses role linguistic constructs extensible system implementation 
section describes 
sections discuss related offer concluding remarks 
extensible provers motivating scenario consider scenario illustrates vision plug play prover construction tom builds natural deduction proof checker timing diagrams anchors timing constraints 
implements simple interactive checker user selects formulas inference rule apply 
implements timing diagram data structure timing diagram editor functions corresponding inference rules 
tom distributes tool web page set libraries 
fig 

adding time bounds affects existing inference rule 
original rule left revised extended rule right 
tool tom extension tool holly tom tool tom tom extension tool extension extension holly tom tom pierre extension fig 

stages scenario 
rectangle integrated set libraries 
holly downloads tom tool needs timing diagrams order logic henceforth fol 
implements fol data structure parser inference rules fol rules bridge timing diagrams fol 
integrates libraries tom producing new prover 
tom enhances timing diagrams timing constraints 
implements extensions data structure editor 
extends original inference rules handle new syntax 
extension reuses functionality original system 
publishes new composite library integrates original new code 
pierre wants proof checker timing diagrams monadic second order logic henceforth msol 
downloads tom holly code 
extends holly fol data structure parser msol quantifiers 
adds substitution checker henceforth sc help validate quantifier eliminations inference rules 
pierre integrates pieces code produce tool 
scenario comprised extensions performed motivates benefits plug play provers 
holly pierre clearly saved substantial effort enhancing existing code building systems scratch 
scenario person integrates code library structured integration 
describes protocols requirements 
motivating criteria integration protocols 
developers rely ability embed logics system wide meta logic scenario example expressive power logic increases extension 
founded interactions logics possible developer provides formal syntax semantics logic supports 
requirement ensures protocols apply general classes theorem provers 
developers modify source code existing libraries 
pierre modify holly code order integrate modify new version produces benefit changes 
cumbersome 
pierre program interface holly code preserves versions 
saves pierre managing multiple versions holly libraries prevents dependencies code implementation details holly code 
developers need know language library implemented 
allows developers write library language appropriate gui prover 
criterion idealistic developers program interfaces modify existing source code 
library separately compilable 
developers distribute object files source libraries supports multi language prover development allows proprietary code prover libraries 
systems adhere requirements allow developers augment existing code access source systems called extensible 
discusses design extensible theorem provers recursively defined logics 
starting scenario criteria extensibility protocols derive architecture systems 
architecture go conventional high level description system organized implementing extensible architectures cumbersome programming protocols requires particular language constructs 
section provides high level architectural description section refines details language constructs implement 
high level architecture theorem provers scenario section contain types information including representations editors inference rules tools proof engine sc 
multiple libraries may provide information type example stage scenario contributed inference rules 
prover engine sees set inference rules 
architecture needs provide unified view certain classes information may cross cut libraries 
call views collections section describes collections detail 
common control panel main td rules tom datatype editor editor editor editor datatype datatype datatype engine rules rules rules rules parser parser reps editors tools inf rules td tom prover tom fol holly msol pierre extensions time td anc tom sc pierre checker fig 

architecture scenario section 
libraries target solid arrow information library head arrow 
dashed arrows indicate source information extends target information base architecture 
annotations td stands timing diagram anc stands anchors 
diagram shows base architecture 
ovals denote collections rectangles denote code libraries 
base architecture contains libraries main control panel code parts system share 
solid arrows denote concrete information flows collections libraries example control panel displays options user installed sets editors tools 
dashed arrows denote information flows collection element prover example needs list available inference rules 
control panel main common editors tools inf rules reps base architecture provides empty prover logics reasoning techniques 
integrating library prover expands collections concrete relationships elements collections explicit 
shows architecture scenario section 
section describes protocols transform base architecture 
discussions refer observations scenario 
tom added new syntax existing timing diagram element 

holly added inference rules tom checker 
tom checker update list available rules extension 

tom couldn predict contexts developers code 
result code multiple contexts extension case holly 
furthermore developers code tom control integrate tom code 

order extend timing diagram inference rules handle timing constraints tom added functionality original inference rule functions 

tom created compound library original extension libraries 

pierre added independent form msol quantifiers fol syntax parallel extended parser 
assume syntax parser defined recursively 
language constructs extensible systems extensibility requirements affect implementation libraries datatypes tools databases 
section discusses issues turn terminology 
datatype specifies new type variants 
variant specifies record structure fixed number typed fields 
client library part program information 
program entity vector class treated value contexts including stored data structures passed parameter returned function 
example functions class pascal functions return functions 
classes values class class oriented languages java eiffel 
vectors class languages 
closures functional languages ml haskell class continuations scheme 
libraries modules generally accepted mechanism structuring code libraries 
original tool tom written module proof checker data structure editor containing inference rules 
connecting linking modules forms tool 
likewise holly pierre written modules extensions 
module systems vary features type systems linking styles support nested modules 
sections identified desirable features module system extensible provers separate hierarchical linking pierre prover ability module multiple contexts client controlled linking 
module characteristics called component 
existing module systems satisfy requirements components 
java packages connections components clients control linking java 
beta module system similar 
ml functors components limitation type object oriented variants parser tools fol univ msol univ functional sc fig 

code fragments tools predicate logic datatype common ways organize fragments program structures 
system prohibits mutually recursive dependencies functors linking specifications form trees graphs 
dependencies arise practice 
consider data structure component graphical editor component data structure component may exception handlers editor display messages user editor invokes functions data structure component create instances data structure 
object oriented implementations encapsulate dependencies objects callbacks avoid circular graph linking 
mzscheme dialect scheme provides components full graph linking 
parallel datatype tool extensions pierre additions msol quantifiers sc holly code entailed adding new variant fol datatype defining new operation resulting msol datatype 
operation datatype invokes code fragment process variant datatype 
table depicts fragments fol datatype universal quantification fol univ variants 
dashed box encloses holly system msol universal quantifiers sc tool pierre extensions 
protocols extending datatypes operations vary implementation organization code fragments 
consider common programming paradigms capture dashed box support extensions 
object oriented attempt traditional object oriented design base class fol datatype variant datatype separate subclass base class 
variant subclass contain parser code processes variant known interpreter pattern 
object oriented design view table terms columns 
organization adding msol quantifier variant easy 
define new subclass base class defines parser code msol expressions 
adding sc difficult 
obvious approach extending variant class subclass contains sc code raises problems 
clients inference rule prover components original classes extended ones 
update clients new classes modifying source code extensibility criteria 
hardwired links components problematic 
implementation language allows hardwired links developer factory patterns cumbersome error prone protocols circumvent 

place code new sc classes share functions managing variable bindings 
edit code base class inside dashed box duplicate shared code sc class extension 
violates programming style prevents single point control 

super classes sc class extensions known 
developer link sc component original fol datatype extension thereof 
problematic superclasses sc classes fixed classes defined object oriented languages require 
avoiding problem requires parameterized super classes complex programming protocols simulate :10.1.1.51.4312:10.1.1.123.4403
naive object oriented organization handles datatype extensions naturally clumsy tool extensions 
fixing super classes class definition time link time main problem approach 
functional attempt traditional functional design define datatype fol function parser 
view table terms rows 
organization adding sc entails simply writing new function 
code shared fragments takes form local definitions function solves problems object oriented approach 
performing msol extension problematic 
functional languages limited support extensible datatypes 
due existing type systems extensible datatype mechanisms ml haskell example essentially seal datatypes compile time handle dynamic extensions 
problematic object oriented languages give effect extensible datatypes dynamic subclassing 
dynamic extensions nice feature enable extensions running system 
user needs additional proof technique middle proof loading extension dynamically saves having recompile resume execution losing current 
view small matter convenience fundamental issues involved developing extensible systems 
problem subtle nature arises case recursively defined logics 
consider holly original parser 
logic defined recursively parser recursive 
msol extension defines parser new variant invokes reuses original parser original variants 
attempt parse expression new parser calls pred logic parser parser fol univ parser parser msol univ shared shared shared shared sc sc sc fol sc msol fol fol msol editor editor fig 

mixins units extend fol datatype add sc parallel 
shared mixin extends classes 
dashed boxes enclose holly original fol datatype component pierre respective extensions 
arrows link datatype components editor components 
original parser process outermost quantifier 
original parser processes recursively 
recursive call invokes original extended parser 
msol original parser handle parsing error occurs 
problem hardwiring recursive calls inside original parser refer original parser 
object oriented solutions interpreter pattern suffer similar problems operation creates new instances recursively defined datatype 
synthetic solution problems object oriented functional styles noted researchers illustrate hardwired relationships program entities hinders extensibility :10.1.1.123.4403
ideally implementation framework extensible systems allow flexible connections classes components related code fragments underlying principle separate definitions connections 
components provide feature definition 
classes need mixins reusable class extensions parameterized super classes 
language mixins class composition mixins existing class language provide empty base class 
existing languages offer varied support mixins 
idea appears arisen initially common lisp 
notkin simulate mixins templates authors point approach scale due amount code duplication entails 
java support mixins requires hardwired superclasses 
ocaml classes mixins obtained mechanism flexible notion 
specifically type system demands super class provided functor provide services listed functor import signature mixins considerably reusable 
beta mzscheme support mixins 
components mixins avoid problems arise functional object oriented solutions demonstration findler define sc extension unit import curr curr curr fol curr msol export fol univ msol univ define shared lambda parent class parent 
define sc extend lambda curr class sc class sc class shared curr class define sc lambda parent class parent 
define sc lambda parent class parent 
define sc fol lambda parent class parent 
define sc msol lambda parent class parent 
define sc extend curr sc define sc extend curr sc define fol univ sc extend curr fol sc fol define msol univ sc extend curr msol sc msol define sc lambda current unit compound unit import link pl current unit sc sc extension pl pl pl fol univ pl msol univ export sc sc sc fol univ sc msol univ fig 

implementing sc extension class components mixins 
flatt approach mzscheme components called units 
shows msol sc extensions terms mixins components 
dashed box defines component 
class hierarchy innermost dashed box implements holly original fol datatype 
trapezoid labeled denotes base class datatype original variant mixin extends base class 
middle dashed box shows datatype extension msol quantifiers 
extension time msol univ mixin extends base class 
outermost dashed box shows datatype sc extension shows extension written mzscheme 
component sc extension imports classes variants datatype exports extended classes variants 
component contains mixins code shared variants shared containing sc code variant sc sc sc fol sc msol 
extension occurs developer links sc extension component component defined middle dashed box 
time sc extension uses function sc extend compose sc variant mixin shared mixin imported mixin variant yields extended classes 
illustrates protocol performs extension 
function sc takes component exports variants fol univ msol univ links compounds sc extension 
resulting component interface original exported classes contain sc extensions 
current component parameter sc gives developers control link sc extension system 
protocol relies class components simple shares spirit composition functional languages 
functions analogous sc combine datatype components components prover 
shows client editor components 
editor imports classes fol universal quantifier variants 
editor link predicate logic components provides versions classes 
editor link predicate logic component provides msol quantifier class 
language class components changing components link simple passing different arguments function 
solution addresses problems arose standard objectoriented functional approaches 
class hierarchies provide extensible datatypes 
mixins shared code avoids source code duplication 
invoking extension functions revised components updates clients modifying source code 
putting code recursively defined tools parser variant sub classes solves problem hardwired recursive calls extended parser 
approach components mixins combines object oriented functional programming styles provides better support extensibility style 
implementations languages units mixins factories smaragdakis batory mixin layers provide alternative approaches require complicated protocols sacrifice benefits separate compilation 
extending functions tom added time bounds successor edges scenario extend inference rules operate successor edges 
rule corresponds function checks application rule valid 
extending inference rules requires extensions functions 
kind function extension differs parser extension discussed section 
parser extension involved single new variant datatype 
case integrate new functionality function existing variant 
function extensions require class functions protocols composing 
original function provide parameter extension function 
passed function process extensions datatypes optional annotations units specify enforce names types imported exported information order simplify code show 
extending functions create recursively defined data requires slightly complicated solution 
define check rule lambda edge edge new edge hash table extra check equal 
target event edge source event edge ht equal 
source event edge source event new edge hash table ht equal 
target event edge target event new edge hash table extra check edge edge new edge hash table define extended check lambda edge edge new edge hash table extra check check rule edge edge new edge hash table lambda newe ht lower bound newe lower bound lower bound upper bound newe upper bound upper bound extra check newe ht fig 

extending inference rule checker function adding time bounds 
function operates 
original function invoke passed function appropriate point computation process additional variants attributes 
simplified example transitivity rule timing diagrams appears check rule original inference rule extended check extension 
functions types take original edges asserted transitive edge hash table correlates information timing diagrams extension function return booleans 
passing extended check parameter check rule allows pass hash table extended check simply composed extension original function extension recompute hash table original function return hash table implementation language provides native support multiple return values require protocol involving multiple values 
order allow additional extensions rule extended check needs parameter extension function 
extension protocol consists writing function extended check collections revisited architecture section contains collections related information corresponding datatypes editors inference rules tools 
perform operations collections course extending system adding new items extending particular items inference rules asking items particular type prover inference rules 
actual function operates full timing diagrams just edges 
event waveform edge td element successor concurrent time bounds anchors transitive edges transitive bounds elim modus ponens inference rule 
fig 

database trees timing diagram datatype inference rules 
description collections resemble databases query update extension system 
databases interesting features 
cross cut components 
extension components provide inference rules database lets view unified data structure 
second databases act version control system 
prover queries rules database available rules database return extended versions 
models handling crosscutting version control candidates implementing databases 
currently view database tree definitions shows trees timing diagram representation inference rules 
trees resemble class hierarchies may contain items classes inference rule functions 
tree timing diagram elements branch variant inference rule tree branch rule 
required operations databases adding items finding elements getting lists elements simply operations trees 
database provides traversal method searching obtaining leaves 
storing classes databases timing diagram datatype requires class classes 
summary perspective discussions identified language constructs naturally express extensible theorem prover frameworks extensible datatypes class functions class classes class components mixins externally connected classes components externally linked modules databases components automatic memory management critical extensible frameworks 
dataflows extensible system quite complicated difficult manage manually 
worse extensions may break existing code altering data may released 
furthermore experience attempting combine program fragments different memory management strategies indicates feasible practice 
automatic memory management avoids issues reduces programming overhead 
extensible systems products careful design just choice appropriate programming language 
second author prior shown object oriented functional design strongly related relationship manifest strengths weaknesses handling extensions :10.1.1.123.4403
showed functional design effectively synthesizes strengths visitor pattern really manual object oriented encoding functional programming 
main remaining benefit get object oriented languages support dynamic type extensions 
functional programming uni typed languages core scheme erlang offers benefit 
attempted describe design terms discuss design elements map various concrete programming languages identifying areas mappings break certain languages 
easier program languages directly support linguistic elements describe design 
languages functional object oriented constructs beta ocaml mzscheme candidates extensible system development 
beta main limitation appears module system hinders extensibility hardwired connections 
ocaml main limitation lies mixins discussed section 
mzscheme provides adequate support features needed implement extensible systems practice 
techniques described built extensible theorem prover called see 
supports logic hardware design representations including circuit diagrams state machines timing diagrams linear temporal logic monadic second order logic 
logics support multiple syntactic representations embedding called heterogeneous multi language 
ideal problem domains hardware design people multiple notations individual problems 
notations people reasoning particular domains evolve time reasoning tools heterogeneous logics need extensible order evolve accordingly 
currently supports additions extensions representations editors inference rules reasoning tools 
developers add databases extensions kinds information 
performed extension demonstrated similar protocols described section 
implemented mzscheme mainly supports class mixins units 
real research tool currently containing roughly lines mzscheme code 
techniques described team undergraduates part time programmer implemented prototype system months 
discusses type problems arise implementing solutions language generic types java 
fig 

view msol timing diagram representations 
time built versions composing various components described 
experience believe architecture protocols robust provide viable base extensible prover design 
main limitation system plug play prover framework interactions subsystems expressible interfaces 
boyer moore integration decision procedure existing prover shows trivial 
develop integrated reasoning tools literature framework depends express manner 
remains problem 
related plug play provers popular research topic 
open mechanized reasoning systems project members written papers logical issues extensible theorem prover development giunchiglia talcott provide general architecture logical components systems armando methodology lifting specialized reasoning tools existing provers 
architectures discussed project address logical issues implementation architectures aspects protocols needed realize systems 
joint project theorem proving research groups concerns design open prover frameworks aware published documents architecture 
propose java architecture open extensible theorem provers 
addresses syntactic extensions recursively defined languages logical issues 
system handles syntactic extensions combination java packages factory pattern 
discussed hardwiring java hinders extensibility 
pattern solutions expect programmers manually maintain complex invariants functionality scaffolding pattern 
furthermore solutions subvert java type system 
acknowledge limitation java separate identification subclass relationship 
definition class page 
mixins provide exactly ability 
multi syntactic diagrammatic reasoning tool supporting venn diagrams hasse diagrams position diagrams blocks world diagrams similar spirit 
uses javabeans support dynamic addition new representations support extensions existing representations 
commercial component frameworks javabeans com corba support dynamic linking address issues function extensions parallel extensions recursively defined datatypes tools 
resulting protocols operations require programmer maintain complicated invariants frameworks provide native constructs expressing extensions 
isabelle widely theorem prover development framework 
developers embed shallow deep levels object logics core meta logic core prover engine operates new object logics 
isabelle framework different design goals 
isabelle crafted primarily support logical extensibility 
emphasizes software engineering aspects component theorem prover design 
isabelle appears support customizations monolithic component provers 
plug play theorem provers challenging exciting extremely practical research direction theorem proving community 
implementing provers requires research logic interoperability engineering add features logic tools minimal source code modification 
complexity issues potential interactions coupled recursive structure logics theorem provers potent case study extensible systems 
proposes architecture extensible prover frameworks explores language constructs naturally express features 
intentionally designed architecture systems minimal logical features sophisticated kinds extensibility 
minimizing logical features allows identify fundamental architectural issues plug play prover design 
long term plan study refine architecture protocols handle complicated logical interactions including embeddings different kinds logics 
general experience shows extensible frameworks naturally expressed languages support combination declarative programming styles allow flexible connections program entities components classes pieces functions 
observations significant impact select design programming languages implementing extensible provers 
framework implement extensible theorem prover called 
allows users add syntactic representations extend existing representations expressive ways add reasoning tools operate representations 
developers repeatedly compose separately compilable prover components create new instances 
composition protocols involve source code modifications cumbersome invariants 
team built versions manner 
confident experience building extensible systems architecture viable robust 

jones 
seger 
combining theorem proving trajectory evaluation industrial environment 
proceedings th design automation conference 

allwein private 

armando 
integrated reasoning specialists plug reasoning components 
technical report mrg dist dipartimento informatica sistemistica universit di genova november 

armstrong virding williams 
concurrent programming erlang 
prentice hall 

barwise etchemendy 
heterogeneous logic 
glasgow narayanan chandrasekaran editors diagrammatic reasoning cognitive computational perspectives pages 
mit press 

boyer moore 
integrating decision procedures heuristic theorem provers case study linear arithmetic 
machine intelligence 

cartwright felleisen 
extensible denotational language specifications 
hagiya mitchell editors symposium theoretical aspects computer software pages 
springer verlag april 
lncs 

cook object oriented programming versus data types 
foundations object oriented languages pages june 

duggan 
mixin modules 
international conference functional programming pages may 

findler flatt 
modular object oriented programming units mixins 
proceedings international conference functional programming 

unified approach hardware verification heterogeneous logic design diagrams 
phd thesis indiana university 

flatt programming languages reusable software components 
phd thesis rice university department computer science 

flatt findler 
plt mred graphical toolbox manual 
technical report tr rice university 

gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley personal computing series 
addison wesley reading ma 

giunchiglia multilanguage systems 
proceedings aaai spring symposium logical formalizations commonsense reasoning 

giunchiglia talcott 
reasoning theories architecture open mechanized reasoning systems 
technical report stan stanford university department computer science september 

gosling joy steele jr java language specification 
addisonwesley 


prototype generic tool supporting embedding formal notations 
grundy editors theorem proving higher order logics emerging trends pages 
australian national university 


java build open extensible theorem prover component 
university 

krishnamurthi felleisen 
formal theory extensible software 
acm symposium foundations software engineering 

krishnamurthi felleisen friedman 
synthesizing object oriented functional design promote re 
european conference objectoriented programming pages july 

translator pattern external functionality homomorphic mappings 
proceedings tools usa pages july 

leroy objective caml system documentation user guide 

liang hudak jones 
monad transformers modular interpreters 
symposium principles programming languages pages 

madsen mller pedersen nygaard 
object oriented programming beta programming language 
addison wesley 

milner tofte harper 
definition standard ml 
mit press 

palsberg jay 
essence visitor pattern 
technical report university technology sydney 

paulson isabelle generic theorem prover 
number lecture notes computer science 
springer verlag berlin new york 

proof specification assisted design environments 
project programme available www dcs gla ac uk march 

reynolds user defined types procedural data structures complementary approaches data abstraction 
editor new directions algorithmic languages pages 
ifip working group algol 

smaragdakis batory 
implementing layered designs mixin layers 
proceedings th european conference object oriented programming pages 

steele jr editor 
common lisp language 
digital press bedford ma second edition 

szyperski component software object oriented programming 
addison wesley acm press 

notkin 
templates implement role designs 
second international symposium object technologies advanced software pages 
springer verlag 

wilson uniprocessor garbage collection techniques 
international workshop memory management 
springer verlag september 
