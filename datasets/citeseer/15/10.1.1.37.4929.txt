submitted th annual acm sigplan sigact symposium principles programming languages london january type indexed rows mark shields oregon graduate institute mbs cse ogi edu erik meijer utrecht university erik cs uu nl record calculi labels distinguish elements products sums :10.1.1.21.6627
presents novel variation type indexed rows labels discarded types elements serve indices 
calculus tir express tuples recursive datatypes records polymorphic extensible records closed world style type overloading 
key application tir encode choice types xml unordered sequence types sgml 
tir kernel language xm lazy functional language extending xml polymorphism higher order functions 
system built rows equality constraints membership constraints constrained parametric polymorphism 
constraint domain enjoys decidable entailment satisfaction exp 
type checking algorithm show tir may implemented translation replaces type indexing conventional natural number indexing 
developed constraint simpli cation algorithm type inference system 
record variant calculi appear contexts 
functional languages incorporate con research reported supported usaf air materiel command contract nsf ccr utrecht university :10.1.1.21.6627
permission digital hard copies part personal classroom granted fee provided copies distributed pro commercial advantage copies bear notice full citation rst page 
copy republish post servers redistribute lists requires prior speci permission fee 
conventional tuples recursive sums datatypes 
popular foundations object oriented languages objects modelled records subclassing built record subtyping 
database query languages model relations sets records database schema dynamic require particularly exible type system 
extensible polymorphic record calculus essential twist discard labels 
labels elements products sums distinguished type 
type indexed row tir list types possibly type variable tail form type indexed products tips type indexed products tics 
ole labels played introduce fresh type names 
developed tir able treat regular expressions xml sgml types functional language designing called xm 
xml includes choice expressions form sgml includes unordered sequence expressions form 
expressions include syntactic information labels guide type checker deciding summand sum permutation product term belongs 
xml problem decided automaton built regular expression 
xm wanted able construct manipulate terms abstractly 
led directly ask types sums products distinct 
tir naturally encode conventional tuples recursive sums product datatypes existing record calculi monomorphic polymorphic extensible non extensible types resembling algol union types closed world style type overloading modulo subtyping popular object oriented languages :10.1.1.21.6627
xm types mentioned 
xm simply translates tir resulting compact uniform compiler 
tir expressiveness merely theoretical interest exploited practice 
ingredients tir known kind system distinguish rows types 
record calculi require membership constraints ensure formedness rows state type row 
record calculi require equality constraints uni cation rows delayed ambiguity matching element types 
constrained polymorphism propagate constraint information program ensuring soundness 
eagerly test unsatis ability constraints reject programs early possible preserve subject reduction 
include projection constraints hm framework 
jones system tir implemented type directed translation replaces type indexing natural number indexing :10.1.1.21.6627
indices propagate hidden arguments run time parallel propagation membership constraints compile time 
rst review record calculi motivate components example 
type checking system tir simultaneously performs type directed translation untyped run time language 
requires notion constraint entailment de nition primary technical contribution 
demonstrate system sound 
details including constraint simpli cation type inference motivating examples xml types overloading full 
overview type system set label names construct record variant calculus 
ll somewhat unorthodox syntax particularly standard aid transition type indexed rows 
rows rst introduce rows lists labelled types 
example xcoord int ycoord int empty row label names xcoord ycoord labelling type int 
operator denote row extension empty denote empty row 
row concatenation replaces augments row extension consider 
rows equal permutation labelled types 
elements row distinguished label name position 
record calculus extensible row may type variable just empty 
example xcoord int ycoord int open row tail variable binding colour empty yields extended closed row xcoord int ycoord int colour empty coupled parametric polymorphism extensible rows allow form record subtyping 
record calculus polymorphic label name may label di erent types di erent rows 
example rows xcoord int empty xcoord real depth real empty xcoord may coexist program 
shall see type system little harder ensure type correctness presence polymorphic labels 
rows may form record variant types 
records record type interprets row product label indexed types 
example xcoord int ycoord int empty record type labels 
write denote record type constructor records contain elements row 
term level empty record triv record extension operator label name 
assume dis syntax operators argument positions written 
example xcoord ycoord triv record record type 
calculi typically include label selection operator label name purposes prefer allow records pattern matched 
example ycoord xcoord ycoord triv evaluates 
variants dually records variant type interprets row sum label indexed types 
example isint int bool empty variant type labels 
write denote variant type constructor sums contain element row 
term level injector inj label name example inj true injects true label variant type 
need way test variant label 
purposes assume injector may pattern 
example case inj true mark shields july popl inj true evaluates false 
soundness liberal record variant calculi prevent row containing duplicate label names 
extensible record calculi constraint requires form global analysis 
example reject surely 
program 
xcoord xcoord triv involves looking de nition call sites particularly elegant solution introduce quali ed constrained polymorphism lacks predicates constraints 
refer reader jones cogent exposition approach :10.1.1.21.6627:10.1.1.21.6627
brie bound terms assigned type scheme includes constraints possible instantiations quanti ed type variables 
example assigned scheme forall xcoord nin xcoord int read types rows label name xcoord written nin function record record xcoord int 
free instantiate subject constraint xcoord nin example program attempts instantiate xcoord int empty may rejected error constraint xcoord nin xcoord int empty arising application unsatisfiable 
label type indexed rows rst step tir consider na erasing labels record variant operators 
kind system keep rows kind row separate types kind type 
presentation greatly simpli ed allow higher kinds 
may type operators constants 
denote kind type type indexed row tir empty row extension row 
row extension free label names empty row type row row example int bool empty closed row containing element types int bool 
rows considered equal permutation element types 
dual interpretations row product tip type indexed coproduct tic type row type row type tir formed element types distinct 
allow open rows veri ed locally propagated constraints 
tir membership constraints resemble lacks constraints record calculi type label 
example nin int bool empty constrains type int bool 
list nin int bool empty true type list equal int bool 
types constraints place consider terms 
tip trivial product extension triv empty forall type row nin tic injection term inj forall type row nin notice membership constraints ensure type insert inject appear row tip tic 
example true triv int bool empty inj true forall row bool nin bool allow constants appear patterns 
example flip triv 
triv flip true triv evaluates false triv 
notice pattern triv contains explicit type information certainly labels 
type body flip determined bound true 
case analysis tips tics possible multiway discriminator written brace delimited sequence abstractions 
example consider flop inj inj flop inj true abstraction patterns tried left right sequence flop applied 
case second pattern match term reduces 
functions discriminant type mark shields july popl flop forall row int nin bool nin int bool int equality constraints consider variation flip example tuple triv 
tuple true triv assume tir enriched conventional tuples easily encoded 
flip body tuple fully polymorphic types tuple forall type row nin empty empty consider type check application tuple 
assume scheme specialised fresh type variables unify empty int bool empty subject constraint nin empty depending int bool bind means term type int bool bool int 
choosing solution destroy completeness type inference 
rejecting terms prevent useful examples particular overloading 
solution introduce equality constraints record types rows equal term welltyped 
example empty eq int bool empty represents constraint tuple argument true triv agree types 
membership constraints equality constraints propagate sucient type information available simplify 
convenience allow equality constraints rows types may expressed terms 
equality constraints may assign term principal type scheme forall type type 
empty eq int bool empty nin empty consider tuple triv 
tuple true triv fst fst rst element int context bool context term reduces false 
see works consider 
left specialised tuple int rst component 
constraint specialised int empty eq int bool empty int nin empty fresh variable 
constraint may binding bool true 
similarly right specialised constraint bool empty eq int bool empty nin int empty constraint true bound int 
membership equality constraints interact interesting ways 
technical machinery tir devoted entailment simpli cation mixed constraints 
example constraint int nin empty int bool empty eq empty may simpli ed true binding bool int 
membership constraint prevents binding int 
far tir distinguish types structurally 
order distinguish types name allow programmer introduce fresh type names called haskell 
newtype declaration takes form newtype 
newtype name 
sequence kinded type variables type kind type 
type level newtype names behave uninterpreted type constructors 
example assuming declarations newtype newtype int newtype int int bool int distinct types 
term level newtype names behave single argument data constructors 
may construct terms true int bool int empty pattern match terms abstractions int int bool bool int ect newtype declaration introduces polymorphic constant forall 

encode conventional monomorphic records declaring newtype label mark shields july popl newtype xcoord int newtype ycoord int xcoord ycoord triv xcoord ycoord empty polymorphic record calculi 
obvious approach declare label type identity function newtype xcoord newtype ycoord allows label terms type record xcoord ycoord triv xcoord int ycoord int empty xcoord ycoord triv xcoord char ycoord string empty unfortunately allows newtype appear record provided labels terms di erent types xcoord xcoord triv xcoord int xcoord char empty rst glance may useful generalisation labels quickly run problems unifying rows containing 
example xcoord really polymorphic label constraint xcoord eq xcoord int xcoord nin xcoord int nin simpli ed binding int 
things stand simpli er unsound 
see consider possible substitution binds xcoord int empty xcoord bool empty 
constraint xcoord xcoord int empty eq xcoord int xcoord bool empty xcoord nin xcoord int empty xcoord int nin xcoord bool empty implies bool int 
simpli er excess polymorphism 
solution introduce opaque variation name newtype signi cant membership constraints 
returning example consider labels newtype opaque xcoord newtype opaque ycoord simpli er free bind int constraint xcoord eq xcoord int xcoord nin xcoord int nin membership constraint xcoord nin implies contain type form xcoord extended include xcoord int xcoord int match xcoord 
simpli er really inference 
furthermore xcoord declared opaque newtype term xcoord xcoord triv ill typed error constraint xcoord int nin xcoord char empty unsatisfiable implement introduce notions type equality monotypes 
transparent equality written requires types equal permutation row elements 
opaque equality written argument types opaque ignored 
projection constraints bound term generalised residual constraints accumulated inferring type shifted type scheme 
quite 
example 
xcoord xcoord assigned type scheme forall row xcoord int nin xcoord int nin xcoord int xcoord int xcoord int clearly constraint unsatis able 
check satis ability constraints generalising reasons 
practically helps localise type errors soon occur 
theoretically simpli es proof soundness type scheme known instance 
unfortunately sucient just check type scheme satis able isolation 
consider example adapted 
xcoord xcoord triv assigned scheme forall type 
xcoord nin xcoord clearly instance 
consider assigned forall type int entire program typed type int constraint specialised xcoord nin xcoord int empty satis ed reducing application yields program 
xcoord xcoord triv ill typed error constraint mark shields july popl xcoord nin xcoord int empty unsatisfiable subject reduction fails 
need way type scheme record satis ability constraint solution come surprise 
introduce projection constraints take form exists 
sub constraint 
notice 
may empty 
may assign restrictive type scheme forall type 
exists 
xcoord nin int nd entire program ill typed error constraint exists 
xcoord nin xcoord int empty arising application unsatisfiable 
situation type inference simple 
type generalised forall 
projection constraint exists 
carried current constraint context 
constraint may turn nd way type schemes 
simpli ed away type information known 
example exists xcoord nin ycoord int empty may simpli ed true constraint holds course type scheme instances projection constraint may immediately simpli ed false error reported 
implementing records moment put type indexed rows aside consider implement conventional label indexed records 
na approach map labels values access requires dynamic lookup 
better approach rst suggested ohori independently jones type information replace label names natural number indices records vectors 
closed record manipulated indices easily generated nding canonical ordering label names 
open record manipulated polymorphic function indices passed hidden arguments actual values depend function specialised 
complicated notice run time propagation indices exactly parallels compiletime propagation membership constraints 
consider 
xcoord ycoord triv ensure body formed assigned type scheme forall row xcoord nin xcoord int associate run time index variable constraint xcoord nin understanding bound run time index xcoord row specialised 
compiled function accepting additional hidden argument sans serif font denote run time terms insert application specialised ycoord int empty introduces constraint xcoord nin ycoord int empty 
associate index variable constraint 
variable passed argument write denote runtime vectors assuming lexicographic ordering label names notice xcoord index row xcoord int ycoord int empty indices base 
constraint xcoord may eliminated bound absolute index 
term compiled insert type directed translation instance dictionary translation 
call set constraints index variables constraint context analogy type contexts 
index may depend 
example constraint context ycoord nin ycoord nin xcoord int simpli ed ycoord nin relative index binding xcoord inserted ycoord row technique works variants represented pair natural number value 
implementing tips tics implement tir natural number indices vectors pairs 
trick works ordering types 
clearly total order types won relative ordering non ground types depend names free type variables disaster 
obvious approach choose ordering monotypes consider simplifying membership constraint nin empty ground 
nding index simply matter sorting types 
unfortunately programs polymorphic way top level means membership constraints similarly propagate top level leading large contexts 
rst assume total order builtin type constants int mark shields july popl newtype names 
fa extended type variables false 
example int fa bool fa string fa fa fa int int fa type pre order attening written preorder 
example preorder int bool int bool 
de ne partial order types preorder lex preorder lex lexicographic ordering induced fa notice enjoys invariance substitution viz property allows membership constraints discharged involve non ground types :10.1.1.21.6627
example consider membership constraint bool nin int int string empty types may totally ordered int int bool string eliminate constraint bind 
alert reader notice ignored possible permutation row elements 
account rst nd canonical order row types attening 
de ne canonical order closed row total ordering element types exists 
open row ordered compared 
de nition recursive 
type checking section ll outline technical aspects tir type checking 
details elided lack space refer reader full thorough development 
syntax presents kinds types terms source language familiar examples 
empty constraint written true unsatis able constraint false may appear explicitly programs 
write denote concatenation primitive constraints equality constraints allowed kind type row ll usually elide annotation 
customary confuse type scheme forall 
type confuse projection constraint exists 
constraint assume terms types represented applicative form 
example int bool application int bool 
range constant type constructors newtype names kinds type row type variables newtype names types int empty row tails empty type var context 
prim constraints nin eq type eq row exists 
constraints cn type schemes forall 
integers variables abstractions terms inj triv patterns inj triv newtype decls newtype opt programs prog syntax tir kinds types terms 
index vars indices abs rel bindings wn wn variables terms ht tn inj wn wn insert hi remove case inj case fi syntax run time terms 
range term constructors inj triv 
tir type language forms strongly normalising calculus constants 

range mapping type variables kinds 
init denote initial kind context containing type constants de ned section names kinds declared 
elide rules kinding judgement 
context kinded written 
constraint type similarly 
context 
type schemes body type kind type universally existentially quanti ed type variable kind row type 
recursive newtype founded viz cycle passing newtype pass type constructor 
mark shields july popl 

int 
int 




eq type app 

forall bn named 
bn 
:10.1.1.21.6627

var 

bn 

names 

abs 

unde ned 



eq type disc 



context 
constraint exists 

forall 
anon 



names typed tir terms 
presents syntax untyped run time language target type directed translation 
parts introduced section 
tip represented ordered tuples ht tn tic pair inj index run time term 
declared newtype represented injector corresponding extractor keep indices separate run time terms simplify soundness proof 
range integers indices show index greater 
abs tags absolute index rel relative 
indices abstracted passed tuples may bound hi forces evaluation term remove bound term index remaining product 
rst case form checks evaluates tic index second simply checks matching integers 







nin 

inj 
case inj xg 

eq type nin 


remove insert 



typed tir pattern abstractions 
rules integers triv elided 
typed terms range type contexts mapping variables type schemes init denote initial type context containing constants introduced section newtype constructors introduced section 
presents rules deciding typing judgement intended interpretation term typed type translates run time term assuming free term variables typed free type variables kinded 
satis ability constraint context free index variables intend var rule apply variables built constants 
rule checks type variable 
outside scheme checking context constraint kinded 
notice symmetry index abstraction rule index application var rule 
abs disc rules mutually recursively de ned pattern compiler 
number abstractions compiled patterns compiled run time term hole lled term type evaluate pattern fail 
abs rule lls hole unde ned alternative try 
disc rule chains discriminant failure cause tried 
heart rules entailment judgement section 
ways 
types equivalent app disc rules type checker asks current constraint mark shields july popl context entails equality :10.1.1.21.6627

row constructed pattern matched rules row wellformed membership constraint satis ed index known run time bound 
type checker asks current constraint context entails membership constraint 
entailment judgement yields binding 
constraint bound term checked satis ability rule 
type checker asks current constraint context entails appropriate projection constraint 

variable occurrence propagates constraints variable de nition site site 
var rule type checker asks current constraint context entails variable constraints suitably specialised 
assume de nitions source language constants run time language inj inj triv hi insert notice de nitions match types init type equivalence order section introduced notions transparent opaque equality normalised monotypes kind type row 
full show may lifted partial functions types 
purposes simply de ne note way implication relations needn try unifying arguments order prove :10.1.1.21.6627
de ne isin notion type order sketched section de ne types permutation unde ned permutation exists :10.1.1.21.6627
constraint entailment constraint entails constraint written satisfying substitution satis es primitive constraint presents rules associated de nitions deciding constraint entailment 
strategy rst eliminate equality projection constraints show entailment remaining membership constraints 
rules ancillary judgement nin 
try nd index bind membership nin 

:10.1.1.21.6627

bn 
nin nin 
nin empty 
abs nin nin 
nin nin 
rel nin nin 
nin nin 
rel fv :10.1.1.21.6627
nin isin eq cg 
exists 
cg 
eq :10.1.1.21.6627
nin :10.1.1.21.6627
eval nin 


exists 


:10.1.1.21.6627
ec dn 
bn tir constraint entailment 
constraints rules non deterministic deterministic de nition verbose 
judgement 
extends judgement include equality projection constraints right hand sides 
requires machinery sets substitutions general uni ers 
see full details 
rule entails equality constraint types equivalent satisfying substitution 
rule decides entailment membership constraint index variable checking binding satisfying substitution furthermore requires bindings equal inlining mark shields july popl simpli cation relative indexes 
de nition eval straightforward elided 
restriction prevents membership constraint prematurely discharged 
example judgement true empty eq int string empty nin bool empty depending bound int string bound abs abs 
multiple ways bind index assume entailment fails single derivation yields index substitutions 
entails projection constraint exists 
exists assignment types projected variables 


rule checks attempting nd substitution set satisfying substitution agrees general satisfying substitutions 
furthermore ensure solution may bind free type variables outside 
variables rst 
write 
denote type variables 
replaced fresh declared newtype empty rule ec extends rules conjunctions primitive constraints 
properties entailment key 
closed substitution 
implies 

types equal equivalent eq implies 

type row isn equal element row nin empty 
implies furthermore index consistent sorting permutation row eval abs 
soundness presents denotational call name semantics tir universal domain wrong int func prod inj categorical sum lifting continuous necessarily strict function space 
summand tagged shorthand injector 
summand wrong denote ill typed programs 
model inspired hm 
tir monotype denotes ideal write distinguished bottom element representing diverging programs 
denotation type product types ordered sorting permutation 
similarly type product index type index match type sorting permutation 
possibly recursive assume mutually recursive recursion regular 
write lfp denote usual xed point solution mixed variance int fint zg empty hv vn vn empty hi vi ng lfp norm 
newtype opt wn names wn :10.1.1.21.6627


env :10.1.1.21.6627
init 

named 
bn model tir normalized monotypes type schemes 
semantics terms elided 
recursive types pairs strict function spaces 
de ned denotation tir type pointed newtype cycles pass 
model tir recursive types possible take far eld 
easy show 
important aspect model denotation type schemes 
denotation type scheme membership constraints index abstractions behaved possible solutions constraint 
de ned intersection grounding substitutions 



index abstraction yield typed result meaning bindings denoted env 
type checker ensured satis ability constraint solution exists denotation type scheme typed program lemma tir type type scheme denotes ideal containing wrong 
denotation run time terms full 
theorem 

grounding kinded 


type inference full show tir enjoys type inference 
rst de ne simpli cation judgement 
input constraint simpli ed output constraint substitution 
agree ground instances mark shields july popl constraint simpli er combines notions context simpli cation developed jones extension oml framework quali ed types 
row equality constraints arise typical programs eliminated simpli er log comparisons 
row problems take comparisons consider possibly simplify 
de ne rules type inference judgement 
follow closely type checking figures key di erences 
rst primitive constraint tested entailment type checking accumulated type inference 
second inclusion simpli cation rule 

false simp fv 
rule simplify current constraint context required 
practice applied derivation step 
time writing shown soundness completeness type inference respect type checking highly con dent properties hold 
system exceptions instance jones extended system properties hold 
rst exception inclusion pattern compiler rules entirely conventional 
second little subtle 
notion constraint satis ability constraint projection tir hm framework jones system places check side condition completeness theorem 
anticipate proof completeness mirror jones side condition removed 
related tir resembles record calculus 
wand rst introduced rows encode record subtyping turn inheritance parametric polymorphism typedness system ensure soundness 
remy restored soundness retaining expressiveness wand system introducing label presence absence ags types 
variations allowing record concatenation just record extension proposed 
remy demonstrated concatenation may encoded just extension 
ohori independently jones developed polymorphic record variant calculi compilation method represented records natural number indexed vectors 
ohori system dealt closed rows jones system allowed extensible rows 
tir strict generalisation jones system polymorphic extensible records :10.1.1.21.6627
systems exploit quali ed types dictionary translation compilation method 
odersky sulzmann developed hm framework constraint type inference 
adds jones quali ed types notion constraint projection guarantees constraint domain enjoying principle constraint property lifted type inference system enjoying completeness type inference 
principle constraints de ned relative set constraints solved form 
ohori jones systems instances hm initially hoped tir likewise 
unfortunately de nition tir constraints appears complicated de nition constraint simpli er particularly theoretically pleasing 
turning picture constraint simpli er complete particularly natural de nition prohibitively expensive 
taken hybrid approach 
retain constraint projection hm combine re nement quali ed types allowing context read constraint improvement simpli cation 
approach amenable proof type inference completeness 
parallel parametric polymorphism approach record calculi subtyping cardelli demonstrated encoding 
come surprise xm built tir subtyping cousin called xduce 
language regular expressions types language containment subtyping relation 
time writing xduce support parametric polymorphism higher order functions 
proposals xm languages build regular tree transducers existing functional languages :10.1.1.21.6627
notion type indexed row expressive constraint domain membership equality constraints tir naturally encode programming idioms including record calculi anonymous sums products closed world style overloading 
straightforwardly compiled untyped run time language reduced conventional natural number indexing 
indices generated passed run time hidden arguments bound expressions exactly occurs existing record calculi :10.1.1.21.6627
programs considered constraints compact reasonably intuitive 
working implementation tir larger language xm 
time writing xm compiler may simplify constraints infer 
hope demonstrate feasibility tir larger programs compiler complete 
expressiveness constraint domain comes price 
saw section considerable technical machinery required manipulate constraints 
furthermore common constraint type systems tir constraints conceivably grow size understanding programmer capability type inference system solve 
anticipate typical programs occur hypothesis remains ed test xm 
mark shields july popl implementation constraint simpli er entailment checker xm na 
hope may improved borrowing ideas bane framework 
investigated existing constraint domains set constraints feature tree constraints overloading constraints may encoded tir constraint domain :10.1.1.21.6627
theoretical side hope complete complexity analysis determine tir constraint entailment complete exp mark jones leijen je lewis john launchbury fruitful discussions 
aiken 
set constraint program analysis 
science computer programming 
aiken ahndrich foster su 
toolkit constructing type constraint program analyses 
second international workshop types compilation tic mar :10.1.1.21.6627
aiken wimmers 
type inclusion constraints type inference 
proceedings acm sigplan conference functional programming languages computer architecture pages 
kaci podelski smolka 
feature constraint system logic programming entailment 
journal theoretical computer science jan :10.1.1.21.6627
buneman pierce 
union types semistructured data 
proceedings international database programming languages workshop sep 
available university pennsylvania dept cis technical report 
cardelli 
extensible records pure calculus subtyping 
gunter mitchell editors theoretical aspects object oriented programming 
types semantics language design pages 
mit press 
cardelli mitchell 
operations records 
mathematical structures computer science :10.1.1.21.6627
jones :10.1.1.21.6627
polymorphic type system extensible records variants 
technical report tr department computer science university nottingham nov 
gosling joy steele 
java language speci cation 
java series sun microsystems 
addison wesley 
harper pierce 
record calculus symmetric concatenation 
proceedings eighteenth annual acm symposium principles programming languages orlando florida pages jan 
hosoya vouillon pierce 
regular expression types xml mar 
submitted publication 
jones peyton jones 
lightweight extensible records haskell 
proceedings haskell workshop paris france oct 
published technical report uucs department computer science university utrecht :10.1.1.21.6627
jones 
quali ed types theory practice 
distinguished dissertations computer science 
cambridge university press 
jones 
simplifying improving quali ed types 
proceedings acm sigplan conference functional programming languages computer architecture fpca 
acm press 
macqueen plotkin sethi 
ideal model recursive polymorphic types 
proceedings eleventh annual acm symposium principles programming languages pages :10.1.1.21.6627
meijer shields 
xm functional language constructing manipulating xml documents 
early draft 
milo suciu vianu 
typechecking xml transformers 
proceedings nineteenth acm sigact sigmod sigart symposium principles database systems pods may 
uller nishimura :10.1.1.21.6627
type inference rst class messages feature constraints 
asian computer science conference asian lncs pages :10.1.1.21.6627
springer verlag dec :10.1.1.21.6627
odersky sulzmann 
type inference constrained types 
theory practice object systems 
ohori 
polymorphic record calculus compilation 
acm transactions programming languages systems :10.1.1.21.6627
peyton jones hughes 
haskell nonstrict purely functional language feb :10.1.1.21.6627
available www haskell org 
emy 
typing record concatenation free 
proceedings nineteenth annual acm symposium principles programming languages pages 
acm press 
emy 
type inference records natural extension ml 
gunter mitchell editors theoretical aspects object oriented programming 
types semantics language design 
mit press 
earlier appears popl pages :10.1.1.21.6627
shields 
type indexed rows 
draft available www cse ogi edu mbs 
smith 
polymorphic type inference languages overloading subtyping 
phd thesis department computer science cornell university aug 

extensible markup language 
available www org xml 
wadler blott 
ad hoc polymorphism ad hoc 
proceedings sixteenth annual acm symposium principles programming languages pages :10.1.1.21.6627
wallace :10.1.1.21.6627
haskell xml generic combinators type translation 
proceedings fourth acm sigplan international conference functional programming icfp pages :10.1.1.21.6627
acm press sep 
wand 
complete type inference simple objects 
proceedings second annual ieee symposium logic computer science pages :10.1.1.21.6627
corrigendum lics :10.1.1.21.6627
wand 
type inference record concatenation multiple inheritance 
information computation 
mark shields july popl 
