january expect automate system administration tasks don libes national institute standards technology metrology bldg room gaithersburg md libes cme nist gov unix system administration involves programs designed interactive 
programs passwd su placed shell scripts 
programs fsck dump specifically interactive poor support automated 
expect program talk interactive programs 
script guide dialogue 
scripts written high level language provide flexibility arbitrarily complex dialogues 
writing expect script run interactive programs non interactively 
shell scripts incapable managing system administration tasks expect scripts control 
tasks requiring person dedicated interactively responding badly written programs automated 
large environment time saved immense 
expect similar style shell easily mastered system administrator program shell 
presents real examples expect automate system administration tasks passwd fsck 
discussed number system administration tasks automated 
keywords expect fsck interaction passwd password programmed dialogue security shell tcl unix uucp reprinted proceedings fourth usenix lisa large installation systems administration lisa conference colorado springs october 
january unix system administration involves programs designed interactive 
programs passwd su placed shell scripts 
programs fsck dump specifically interactive little support automated 
example passwd command prompts user password 
way supply password command line 
passwd shell script block script running prompts user invoked shell script 
example reject passwords system dictionary common security measure 
ironic security reason passwd designed read directly keyboard 
passwd behavior 
programs inside shell scripts quite crucial tools system administrator 
examples rlogin telnet crypt su dump adb fsck 
problems mentioned 
problem programs programs shell 
example shell see prompts interactive programs see error messages 
shell deal interactive programs way incapable creating way connection process 
inherent limitation classic unix shells sh csh ksh generically referred simply shell 
expect overview expect program solves general problem automating interactive programs 
expect communicates processes interposing processes see 
pseudo processes believe talking real user 
high level script enables handling varied behavior 
script offers job control multiple programs controlled simultaneously affect 
real user may take return control script necessary 

expect communicating processes simultaneously 
script control disabled logging user 
user sees script says send essentially treated just process 
expect interactive processes script january expect general purpose system solving interactive program problem solves unusually large number problems system administration arena 
unix style build small programs building blocks construction programs shells pipelines system administration programs behave way 
traditionally little time spent designing user interfaces system administrator tools 
reasons may system administrators experienced programmers didn need hand holding general user programs require 
programs fsck crash run infrequently little point spending time rarely tools 
system administration tools extreme conditions considered worth programming difficulty rarity 
costeffective solve problem hand real time 
system administrators solved problems site dependent ways expecting programs propagated widely 
reason result unix system administrator toolbox filled representatives worst user interfaces seen 
complete redesign help problems expect address great 
example passwd expect script listing takes password argument run non interactively shell script 
shell script prompt reject easily guessed passwords 
alternatively shell script call password generator 
combination create large numbers accounts time system administrator having hand enter passwords currently done 
admittedly script original security problem passwd designed solve 
closed number ways 
example expect generate passwords directly calling password generator script 
scripting language expect defined completely libes ousterhout 
commands described encountered 
giving comprehensive explanations command understand examples supplied 
set sets argument second assignment 
line script argument set password 
second expression evaluated return second argument script index command 
argument index list retrieves element corresponding position second argument 
argv refers arguments script style language argv 
january spawn runs interactive program 
spawned program referred current process 
example passwd spawned current process 
username passed argument passwd 
expect looks pattern output current process 
argument defines pattern 
additional optional arguments provide alternative patterns actions execute pattern seen 
example shown 
example expect looks pattern password 
asterisk allows match data input useful shortcut avoid specifying detail 
action specified command just waits pattern continuing 
send sends arguments current process 
password sent current process 
indicates carriage return 
usual conventions supported 
send expect sequences passwd asks password typed twice spelling verification 
point non interactive passwd script passwd doesn know better 
final expect eof searches file output passwd demonstrates keyword patterns 
timeout denote failure pattern match 
eof necessary passwd carefully written check succeeds including final newline produced password entered second time 
easy add call test grep password usr dict words script check password doesn appear line dictionary leave illustration control structures example 
example fsck programs ostensibly non interactive 
run background reduced functionality 
example fsck run shell script options 
manual defines option follows listing non interactive passwd script 
argument username 
second argument new password 
set password index argv spawn passwd index argv expect password send password expect password send password expect eof january assume response questions asked fsck extreme caution free license continue severe problems encountered 
option similarly worthless meaning 
kind interface bad programs style 
example ftp option disables interactive prompting run script provides way take alternative action error occur 
expect write script allows fsck run having questions answered automatically 
listing script run fsck unattended providing flexibility run interactively 
script begins spawning fsck 
controls iteration looping 
language expect supports common high level control structures 
second line loop structured similarly language version 
body contains expect command 
expect command demonstrates ability look multiple patterns simultaneously 
quote characters case whitespace 
addition pattern accompanying action execute pattern 
allows answers specific questions 
questions file clear 
bad inode number fix 
appear script automatically answer appears script answer general questions known answerable advance script run background 
complex programs may desirable trap unexpected questions force user interactively evaluate 
listing script exactly 
listing non interactive fsck script 
spawn fsck expect eof break file clear send bad inode fix send send listing user friendly fsck script 
spawn fsck expect eof break file clear send blk missing salvage send interact january script match prespecified answers case matches 
necessary prevent script triggering entire question arrives 
interact action passes control script keyboard stdin human answer question 
interact pass control script user back 
interact user takes control direct interactions 
control returned script pressing optional escape character 
script chosen escape character passing argument interact 
real expect script fsck things 
example fsck uses statically sized tables 
reason fsck limited number errors type fixed single pass 
may require fsck run times 
manual says fsck doesn system administrators know fsck intimately 
run shell script lack programmability cause system come way corrupt file system return code isn checked unnecessarily rebooted times return code checked 
example callback script listing written user wanted dial computer tell call back 
lived local calling area get computer pick long distance phone bills 
line spawns tip opens connection modem 
expect waits tip say connected modem 
user phone number passed argument script fetched added command dial hayes compatible modem 
carriage return appended appear user typed string modem begins dialing 
third line assigns variable timeout 
expect looks variable order tell seconds wait giving 
eventually phone rings modem answers 
expect finds looking exits 
point getty wakes finding dialup line dtr starts login prompts user log 
script originally written added lines automate verify phone numbers uid running partly security fragment shown successfully forms heart current script 
ironically noticed kb equivalent callback usenet functionality dozen lines expect 
course scripts short 
limited examples really serve just give feel expect applied 
listing callback script 
argument phone number 
spawn tip modem expect connected send index argv set timeout expect connect january important expect scripts small simple problems small simple 
expect obviates need resorting just limitations part shell 
example intelligent ftp site administrators wanted spool files directory 
second computer ftp pick delete computer 
attempt followed 
unfortunately deletes files arrive window starts starts 
script fragment listing solved problem 
script begins spawning ftp 
omitted lines open connection followed sending confirming user password information 
line sends ftp command store list remote files local file called 
command terminated semicolon allowing response verified expect command line script 
exec execute unix command 
exec executes unix command simply waits complete just shell script 
line cat returns list files names stored variable 
exec line time delete local file 
remainder script merely iterates variable sending get commands followed delete commands file earlier ls 
examples solved expect addresses surprisingly large class system administration problems solved avoidance special 
time expect attempt subsume functions handled utilities 
example built file transfer capability expect just call program 
shell programmable interact interactive processes solve examples 
listing fragment ftp spool script 
spawn ftp 
send ls expect success ftp set exec cat exec rm set len length set set file index send get file expect success ftp send delete file expect success ftp january section examples discussed 
space limitations scripts shown written 
regression testing testing new releases interactive software tip telnet requires human press keys watch correct responses 
doing times quite tiresome 
naturally people run thorough regression tests making small changes think probably don affect parts program 
regression testing useful entire installation 
script tests site local applications run system upgrade configuration change 
automating logins programs frequently repeated defined set commands set defined 
example typical telnet session begins log user 
automate expect ability pass control script user 
time user return control script temporarily execute sequences commonly repeated commands 
site expect heavily automate process logging multiple frontends communication switches 
fact original reason expect written create windows automatically logged host run demo 
general idea automating telnet ftp tip useful dealing hosts support rlogin rcp 
technique useful native unix commands su login rlogin 
expect scripts call sending passwords appropriate continuing actions desired 
commands embedded shell script shell way control happens inside programs 
subsequent commands shell script get sent new context held previous command completed sent original context 
expect problems switching contexts continue controlling sessions 
telnet just breakfast anymore telnet functions interface exciting world tcp sockets 
telnet access non telnet sockets query hosts date port time port list active users port user information port network status port sorts able get permission log 
example site regularly runs script checks port version sendmail cf local hosts 
reading files need permission log remotely mount file systems read directories files hosts 
telnet easier albeit little strange 
january su passwd crypt password programs read write dev tty shell scripts shell script accessing dev tty 
earlier example showed force passwd read dev tty 
technique change input source stdin parameter environment variable 
example suppose typed command fails weren root 
typical reaction type su reenter command 
unfortunately history won situation just evoke error event 
problem want refer command different shell instantiation way get back 
solution pass failed command argument 
expect script prompt root password invoke su feed original failed command resulting superuser shell 
expect script executes interact action original command executed plus get new superuser shell 
way su resorting temporary files history lot 
painful example 
su allow additional arguments command line passed new shell 
interactively enter begins executing 
case su essentially useless shell scripts 
security news 
earlier mentioned build script force users choose passwords rewriting passwd 
alternatives rewrite passwd program ask user responsible choosing password 
opposite side coin expect test sites secure logins break suppose 
trying login root say words line dictionary local hosts site prohibitively expensive human 
expect eventually finding insecure root showing site protected passwords 
questions boot time booting useful validate important system facts date coming way 
course standing front console system booted due power failure computer come anyway 
writing script shell painful primarily read timeout directly implemented shell 
expect reads timeout 
expect prompt read keyboard just easily process 
transferring hierarchies ftp anonymous ftp painful comes directory hierarchies 
recursive copy command explicitly cds gets 
automate shell script hierarchy known advance 
expect execute ls look results january transfer hierarchy matter looks deep expect supports recursive procedures making task short script 
site regularly retrieves large distributions gnu way 
assisting adb dumb programs quite vendors provide instructions modifying systems form adb instructions instructions may depend results earlier ones time maxusers incremented add 
adb special scripting language supports interaction shell provide capability 
expect perform interaction playing part user directly looking results operations just user 
technique applied program 
fact expect act intermediary user programs poorly written user interfaces 
expect normally shows entire dialogue told 
expect prompt user commands show maxusers adb native cryptic maxusers translations performed reverse direction 
short expect script limit difficulty system administrators interest mastering adb 
addition ability system administrators accidentally crash system errant keystrokes dramatically lessened 
monster log files common command sequence involves looking log say grep interrupting line interest appears 
unfortunately grep programs limited amount programmability 
example grep directed searching match 
short expect script send interrupt grep seeing line just user keyboard 
programs generate log files large gigabyte real problem 
expect solutions grep continue running file dedicate human task pressing right time 
expect cut process soon possible mailing results back system administrator necessary 
general expect useful sending odd characters process embedded shell script 
expect execute job control commands bg fg order mediate processes designed communicate 
relieve human tedious task interactively monitoring programs 
administering non unix systems expect unix program administer non unix systems 
possible running telnet tip non unix host log perform send expect sequences remote computer 
operating system environment remote computer completely irrelevant expect isolated expect script 
useful system administrators unix computer desk forced management administer computer 
administer unix january systems 
possibly administer just system 
oh runs vms security examples prompted passwords different usual unix style 
normally unix prompts passwords directly dev tty 
unfortunate drawback redirect stdin 
shown get expect 
course doing possible security hole 
unprivileged users detect passwords passed arguments ps 
passwords stored files lapses security plaintext passwords evident people browsing files 
publicly readable backup media simplest security lapses 
interested security recommend storing plaintext passwords files 
likelihood password discovered abused just high 
users store passwords files highly restricted accounts demos anonymous ftp 
chances leaking password ps lower lowered smallest possible script password prompting program 
window extremely small 
secure sites take chance 
alternative expect interactively prompt passwords 
expect script doing complicated series things scripts encode passwords 
running script user prompted password 
expect password necessary complete dialogue data pre stored files 
summary expect need weaken security 
wisely expect enhance security 
common sense writing scripts 
comparison system administration tools section considered controversy wish 
somewhat religious arguments resolved philosophical choice logic 
kept reasons give feelings consider important understand choosing expect system administration tools 
obvious think alternatives expect 
traditionally popular choices avoidance programming 
longer choices 
shell shell incapable controlling interactive processes way expect 
certain comparisons expect shell inevitable 
particular expect january includes high level language interpreted bears strong similarity shell sense see little argue expect shell functions 
previous suggested addition expect features shell 
wants learn shell reason capabilities added shell 
perl interesting comparison perl language claimed author embody best aspects shell awk sed number unix tools 
having spent time programming perl question mind perl capable solving tasks described 
pseudo tty packages perl written send expect utilities written 
perl powerful language 
richer language expect shell matter 
advantages disadvantages 
obvious disadvantage perl overabundance options features simply aren necessary tasks expect addresses 
perl complexity reflected disk space 
computer desk sun requires store perl significant startup time 
expect hand essentially startup time 
reasons perl widely applied certain problems completing discussion deserves 
summarize saying expect appropriate fraction system administration problems perl solves 
intentionally 
expect written solve specific problem concisely efficiently 
think fits unix philosophy small tools perl demands significant investment mastering complexity 
choice predict system administrators choose tool expect takes little effort learn entering world perl 
emacs emacs analogous perl ways including flexibility overabundance functionality 
similarly emacs solve problems 
reasons gave emacs inappropriate class problems suggested 
considering emacs available decade heard way ll emacs inappropriate problems surprising usage occurred 
unix shells incapable controlling interactive processes 
root difficulties automating system administration tasks 
unix community gradually providing better designed tools user interfaces programs written embarrassingly poor user interfaces time 
understandable system administrators give priority solving problem go going back pretty old working solution 
january expect designed programs 
programs need changed redesigned matter poorly written 
understandably majority system administrators reluctant modify program works written 
prefer writing shell scripts classic unix tools philosophy 
expect handles problems solving directly elegance 
expect scripts small simple problems small simple 
expect scripts small scripts scale 
comparable style shell scripts task oriented provide synergy shell scripts call shell scripts called 
judiciously expect welcome new tool workbench unix system administrators 
acknowledgments jointly funded nist automated manufacturing research facility project scientific technical research services project 
callback script written scott paisley 
walter rowe wrote sendmail script mentioned 
walter rowe ken helpful comments 
sue helpful correcting badly grammar 
availability design implementation expect paid government public domain 
author nist credit program documentation portions 
expect may ftp pub expect expect shar ftp cme nist gov expect mailed send mail message send pub expect expect shar library cme nist gov don libes expect uncontrollable fits interaction proceedings summer usenix conference anaheim ca june 
don libes expect user manual programmatic dialogue interactive programs appear nist ir national institute standards technology november 
john ousterhout tcl embeddable command language proceedings winter usenix conference washington january 
john ousterhout tcl overview tool command language facilities unpublished manual page university california berkeley january 
unix programmer manual section 
larry wall perl practical extraction report language unpublished manual page march 
january don libes national institute standards technology photo don libes received mathematics rutgers university computer science university rochester 
currently national institute standards technology don engaged research help industry measure standard hack 
unfortunately nist sense humor forced write book life unix prentice hall 
