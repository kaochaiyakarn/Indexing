pushing frontiers combining rewrite systems farther outwards jurgen giesl ohlebusch known simple termination modular certain kinds combinations term rewriting systems trss 
result practical relevance techniques automated termination proofs simplification orderings show fact simple termination 
hand practice systems non simply terminating 
order cope systems arts giesl developed dependency pair approach 
quasi simplification orderings combination dependency pairs possible prove termination non simply terminating systems automatically 
natural ask modularity simple termination extended class systems handled technique 
show case 
way class trss termination proved modular way extended significantly 
modularity known paradigm computer science 
programs designed modular way combination small programs 
called modules implemented separately integrated form program 
trss important applications computer science essential know conditions combined system inherits desirable properties constituent systems 
reason modular aspects term rewriting studied extensively 
property trss termination called modular trss satisfying combined system satisfies knowledge certain conditions property modular facilitates software engineering allows incremental development programs 
hand provides department computer science darmstadt university technology 
darmstadt germany email giesl informatik tu darmstadt de technische fakultat university bielefeld box bielefeld germany email uni bielefeld de divide conquer approach establishing properties trss 
wants know large trs certain modular property system decomposed small subsystems merely check subsystems property interesting properties general modular research disjoint unions combinations trss common function symbols 
toyama proved confluence modular disjoint systems termination completeness lack modular behavior toyama question restrictions imposed constituent trss disjoint union terminating 
results obtained investigating distribution collapsing rules duplicating rules trss see rusinowitch middeldorp toyama shown termination modular confluent left linear trss 
abundance modularity results disjoint unions constructor sharing systems composable systems hierarchical combinations published see middeldorp ohlebusch gramlich overview 
modularity results applicable practice 
example collapsing duplicating rules occur naturally trss 
contrast methods automated termination proofs called simplification orderings dershowitz steinbach middeldorp zantema kurihara result constructor sharing systems practical relevance 
showed combination finite simply terminating trss systems termination verified simplification ordering simply terminating 
result extended composable systems ohlebusch certain hierarchical combinations krishna rao results hold infinite trss see middeldorp zantema numerous relevant trss simplification orderings fail proving termination 
purpose new technique automated termination proofs viz 
called dependency pair approach developed arts giesl trs approach generates set constraints existence wellfounded quasi ordering satisfying constraints sufficient termination 
advantage standard techniques generate founded ordering direct termination proof techniques fails 
way simplification orderings prove termination non simply terminating trss 
systems different areas computer science including challenging problems literature instance arts giesl dependency pair approach pushed frontier trss termination provable automatically lot 
class trss automated termination proofs potentially feasible longer just simply terminating systems dp quasi simply terminating systems systems termination verified simplification orderings combination dependency pairs 
natural question current frontier modularity pushed extending modularity results simple dp quasi simple termination 
show possible 
class trss termination proved modular way extended considerably 
organized follows briefly recall basic notions combination trss 
sect 
contains short description dependency pair method 
sect 
introduce concept dp quasi simple termination show sect 
dp quasi simple termination modular disjoint unions 
sect 
contains similar results constructor sharing trss 
basic notions union trss term rewriting see dershowitz jouannaud klop trs signature function symbol called defined symbol rewrite rule root 
function symbols defined symbols called constructors 
trs consists rules defined symbol constructors 
trss signatures resp 
combined system union signature set defined symbols set constructors denotes defined symbols constructors 
disjoint 
constructor sharing 
composable systems contain rewrite rules define defined symbol symbol shared fl root give brief overview basic notions disjoint unions 
sequel 
special constant context term result replacing left right occurrences write root root gammai 
case principal subterms topmost homogeneous part denoted top top gammai 
example consists rules contains rules disjoint term written 
top top 
term rank maximal number alternating function symbols resp 
path term rank ng max 
example rank 
modularity results crucially depend fact implies rank rank proof straightforward induction rank 
rewrite step destructive level root root gammai 
reduction step destructive level destructive level obviously rewrite step destructive rewrite rule applied collapsing right hand side rule variable 
example rewrite step destructive level 
recall signature trs emb important context simple termination defined emb ff ary ng dependency pairs dependency pair approach arts giesl showing termination rewrites defined symbol compare argument tuples avoid handling tuples new tuple symbol introduced defined symbol comparing tuples terms compared 
ease readability assume signature consists lower case symbols tuple symbols denoted corresponding upper case symbols 
definition dependency pair rule trs defined symbol hf dependency pair trs obtain dependency pairs hf hf trace subterms may start new reductions examine special sequences dependency pairs called chains 
consider substitutions domains may infinite assume different occurrences dependency pairs disjoint sets variables 
definition chain sequence dependency pairs hs chain substitution oe oe oe holds consecutive pairs hs hs sequence 
instance example chain hf hf hf oe fx 



oe oe oe oe 
fact finite alternating sequence chain 
arts giesl proved absence infinite chains sufficient necessary criterion termination 
theorem termination criterion trs terminating exists infinite chain 
note dependency pair follow chain oe oe hold substitution oe 
estimate dependency pairs may occur consecutive chain estimated dependency graph introduced cf 
arts giesl recall needed notions 
cap results replacing subterms defined root symbol different fresh variables ren results replacing variables different fresh variables 
order determine hu vi follow hs ti chain check ren cap unifies function ren needed rename multiple occurrences variable instantiated oe occurrences xoe reduce different terms 
example estimated dependency graph contains arc arcs 
definition estimated dependency graph estimated dependency graph directed graph nodes dependency pairs arc hs ti hu vi ren cap unifiable 
set dependency pairs called cycle dependency pairs hs ti hu vi path hs ti hu vi hu vi hs ti estimated dependency graph traverses dependency pairs 
particular path hs ti 
non empty cycles example remainder restrict finite trss finite signatures 
infinite chain corresponds cycle suffices prove infinite chain dependency pairs cycle cf 
arts giesl automation criterion generate set inequalities existence founded quasi ordering satisfying inequalities sufficient absence infinite chains 
usual quasi ordering reflexive transitive relation 
corresponding strict relation defined iff define corresponding stable strict relation ss ss iff toe uoe holds ground substitutions oe ground substitution substitution mapping variables ground terms 
words substitutions oe toe uoe uoe toe 
instance useful quasi orderings constructed mappings set ground terms founded set natural numbers cf 
lankford polynomial orderings defined iff holds ground substitutions oe 
natural way define corresponding irreflexive ordering hold iff ground substitutions oe 
corresponding strict relation corresponding stable strict relation 
irreflexive relation intuitively associated stable strict strict 
particular quasi ordering stable substitutions corresponding stable strict relation ss stable substitutions necessarily true strict relation example jaj jf jtj jf jtj ground terms 
implies 
stable substitutions hold 
example demonstrates general ss true stable strict relation ss ss 
general ss hold ss false 
trs containing rule defined ss lemma states straightforward properties relations assume signature contains constant exist ground terms 
lemma properties stable strict relations stable substitutions 
ss irreflexive ii ss transitive iii ss stable substitutions iv stable substitutions ss founded ss founded vi ss implies ss vii ss implies ss proof 
conjectures ii follow reflexivity transitivity 
conjectures iii iv direct consequences definition 
potential infinite descending sequence ss ss result infinite descending sequence oe oe conjectures vi vii follow transitivity stability 
corresponding strict relations consider corresponding stable strict relations quasi orderings 
sake brevity write ss denotes stable strict relation corresponding 
analogously call quasi ordering founded corresponding stable strict relation founded 
theorem arts giesl strict relation corresponding quasi ordering relation 
note formulation thm 
relations powerful formulation strict relations 
strict relation quasi ordering thm 
stable substitutions cf 
arts giesl thm 
lemma iv implies ss constraints satisfied satisfied corresponding stable strict relation ss 
lemma vii proof part slightly modified theorem identical corresponding arts giesl proof part arts giesl theorem dependency pair approach trs terminating iff cycle estimated dependency graph founded weakly monotonic quasi ordering stable substitutions ffl rules ffl dependency pairs hs ti ffl dependency pair hs ti prove absence infinite chains cycle find quasi ordering satisfying dp quasi simple termination mentioned aim standard techniques generate suitable quasi ordering satisfying constraints thm 

existing methods generate orderings strongly monotonic dependency pair approach need weakly monotonic ordering 
reason synthesizing suitable ordering arguments function symbols eliminated cf 
arts giesl instance may eliminate arguments function symbol term inequalities replaced new function symbol 
obtain inequalities 
resulting constraints satisfied recursive path ordering rpo precedence 
similarly eliminating arguments prove absence infinite chains cycle termination trs consisting rules proved 
note trs simply terminating 
dependency pair approach simplification orderings rpo prove termination trss direct application fail 
apart eliminating arguments function symbols possibility replace functions arguments 
deleting arguments replace terms third argument resulting inequalities satisfied rpo 
perform elimination arguments resp 
function symbols concept introduced arts giesl definition afs argument filtering system afs trs rewrite rules form rule pairwise distinct variables variables term fresh function symbol pairwise distinct variables proved arts giesl order find quasi ordering satisfying particular set inequalities may normalize terms inequalities respect afs afs may contain rules tuple symbols 
subsequently find satisfies modified inequalities 
combining synthesis suitable afs known techniques generation strongly monotonic simplification orderings search weakly monotonic ordering satisfying constraints automated 
impose minor restriction viz 
restrict special form recursive program schemes courcelle klop 
restriction severe 
exists quasi simplification ordering satisfying constraints thm 
constraints include strict inequality ffl var var rules ffl var var hs ti cycles mentioned methods automated generation founded orderings construct simplification orderings quasi simplification orderings dershowitz steinbach middeldorp zantema definition middeldorp zantema simplification ordering ordering irreflexive transitive relation monotonic closed contexts closed substitutions possesses subterm property 
known consequence kruskal theorem simplification ordering founded provided finite 
analogously quasi simplification ordering qso quasi ordering weakly monotonic closed substitutions weak subterm property 
restrict finite signatures quasi simplification ordering precisely corresponding stable strict relation founded 
examples simplification orderings qso include path orderings rpo lexicographic path ordering lpo dershowitz steinbach polynomial orderings qso general 
instance constant associated number associated associated multiplication polynomial ordering satisfy subterm property example hold 
lemma shows polynomial ordering respects restrictions qso 
lemma polynomial orderings qso polynomial ordering function symbol associated polynomial containing non negative coefficients 
ffl function symbol associated polynomial containing variables constant associated number qso 
ffl function symbol associated polynomial contains non mixed monomial form mx qso 
proof 
straightforward 
fact polynomial orderings connection dependency pair approach usually apply polynomial ordering variables right hand side var var var var satisfied constraints imply term var 
details infinite signatures see middeldorp zantema satisfies conditions 
restricting qso obtain restricted notion termination 
denotes stable strict relation corresponding 
definition dp quasi simple termination trs dp quasi simply terminating iff non empty cycle estimated dependency graph exists afs qso rules dependency pairs hs ti dependency pair hs ti definition captures trss automated termination proof dependency pairs potentially feasible 
fact numerous dp quasi simply terminating trss simply terminating cf 
collection arts giesl observation motivated development dependency pair approach motivated aim extend known modularity results simple termination dp quasi simple termination 
straightforward way generate qso simplification ordering define iff syntactic equality 
denote reflexive closure relation underlining denotes reflexive closure restricting class qso obtain notion dp simple termination 
definition dp simple termination trs dp simply terminating iff non empty cycle estimated dependency graph afs simplification ordering rules dependency pairs hs ti dependency pair hs ti note equivalent simple termination trs sp fl 
fs 
hs ti dependency pair provided holds dependency pair hs ti turns examples arts giesl dp quasi simply terminating dp simply terminating 
lemma illustrates connections different notions 
lemma characterizing dp quasi simple termination simple termination dp simple termination dp quasi simple termination termination proof 
second implication holds stable substitutions contained stable strict relation cf 
lemma iv 
implication follows thm 
quasi ordering holds iff remains show implication 
simply terminating trs signature upf ff dg set tuple symbols 
simply terminating exists simplification ordering holds rules omega function term upf replaces tuple symbol corresponding function symbol extended simplification ordering upf defining iff omega gamma omega gamma holds 
claim simplification ordering satisfies constraints def 
applying afs 
obviously holds rules satisfies constraint 
dependency pair hs ti reason dependency pair hf originates rule implies turn implies 
satisfies constraints def 

examples show converse implications lemma holds 
example system ff dp simply terminating dependency pair cycle hf resulting constraints satisfied rpo uses afs trs simply terminating 
trs dp quasi simply terminating proved similar way afs rules rpo equal precedence 
dp simply terminating due rules afs reduce arguments 
lead contradiction 
system ff terminating simply terminating 
combining disjoint systems section show dp quasi simple termination modular disjoint trss 
proof need lemma 
lemma transforming reduction sequences trss disjoint signatures respectively 
furthermore union 
terms signature voe uoe hold ground substitution oe var ground substitution var emb proof 
clearly terms cyclic derivation uoe voe uoe rank 
root symbol root symbol term reduction sequence reduction steps destructive level decrease rank 
suppose function symbol arity 
case reduction step destructive level strictly decreases rank 
consequently reduction step kind top uoe top voe top uoe reduction sequence ground terms var fx recall var var 
case define substitution fx 
top oe ng top uoe top voe top uoe reduction sequence looking 
suppose function symbol arity 
cons binary function symbol occurs cons gramlich lemma ohlebusch thm 
reduction sequence transformed transformation function phi reduction sequence phi uoe phi voe phi uoe terms 
transformation function phi satisfies phi phi phi term root cf 
ohlebusch case define oe fx 
phi oe ng obtain uoe phi uoe phi voe voe phi uoe uoe uoe uoe sequence terms occurring reduction sequence 
term replace cons variable constant denote precisely phi transformation phi uoe defined ohlebusch def 

resulting term psi 
definition fx 
psi oe ng yields desired reduction sequence psi uoe psi psi psi voe emb psi psi emb psi rule xm rule cons position prove modularity theorem 
theorem modularity dp quasi simple termination trss disjoint signatures respectively 
union dp quasi simply terminating iff dp quasi simply terminating 
proof 
direction trivial 
direction cycle estimated dependency graph disjoint cycle estimated dependency graph loss generality cycle estimated dependency graph dp quasi simply terminating afs inequalities def 
satisfied qso 
set function symbols occurring inequalities 
loss generality may assume contains rules root symbols fl 
vg emb fs 
hs ti vg emb trs signature trs note qso 
cycle chosen arbitrarily prove dp quasi simple termination show 
rules 
dependency pairs hs ti exists dependency pair hs ti oe 
oe holds ground substitutions oe 
implies satisfied qso 
trs signature emb smallest qso containing qso emb 
note strict part qso emb necessarily closed substitutions 
extension dependency pair approach thm 
def 
stable strict relations qso termination proofs dependency pairs 
extension leads powerful criterion investigate thm 
hold formulation def 
strict stable strict relations 
conditions obviously satisfied show conjecture 
qso dp quasi simple termination proof 
hs ti dependency pair suppose exists ground substitution oe var oe oe 
lemma implies existence ground substitution var imply contradicts fact oe 
oe holds ground substitutions oe 
proves conjecture 
trs consisting rules contains rules theorem allows conclude termination combination systems dp quasi simply terminating 
example handled previous modularity results 
note example modularity termination far trivial rule just slightly changed terminating union terminate cf 
toyama dp quasi simply terminating systems occur frequently practice 
example trss gamma gamma gamma gamma app nil app nil app app sum nil nil sum sum sum app sum app sum simply terminating dp quasi simply terminating cf 
arts giesl thm 
allows conclude dp quasi simple termination union 
combining constructor sharing systems may bit surprising thm 
directly extended constructor sharing trss disallow 
words constructor sharing trss simply terminating union dp quasi simply terminating 
example consider trss trs simply terminating dp quasi simply terminating 
shown afs polynomial ordering maps identity maps 
union dp quasi simply terminating 
hf represents cycle estimated dependency graph find qso satisfying empty afs qso satisfies due due due subterm property 
afs contain rules 
argument eliminated transformed exists strict inequality variable right hand side results contradiction similarly argument eliminated contradiction 
possible rules afs rules rules map argument 
obtain 
trs dp quasi simply terminating 
remainder section restrict termination dp quasi simple termination 
applying dp simple termination trs proved 
uses example afs resulting constraints satisfied simplification ordering 
achieve modularity results constructor sharing trss restrict systems contain rules shared symbols need requirement ensure modularity 
example eliminate rule non empty cycle estimated dependency graph obtain constraints dp simple termination proved combined system dp simply terminating 
problem due fact trss non empty cycles dp simply terminating simplification ordering holds rules 
exclude trss demand constraint def 
satisfied empty cycle example shows restriction sufficient obtaining modularity result dp simple termination constructor sharing systems 
example consist rules consist rule 
prove dp simple termination afs containing rule imply contradiction 
combination systems dp simply terminating 
ensure application afs resulting inequalities transform left hand sides non shared root symbol terms shared root symbol constructor 
restrictions needed captured notion restricted dp simple termination 
definition restricted dp simple termination trs restricted dp simply terminating iff cycle including afs fl 
fs 
hs ti dependency pair simply terminating hs ti 
equivalently simplification ordering satisfies constraints def 
cycle required 
rule root root 
contains rule function symbol theorem shows restriction dp simple termination modular constructor sharing trss 
fact additional requirement dp simple termination modular disjoint combinations 
reasons space counterexample omitted 
non collapsing requirement fulfilled 
theorem modularity restricted dp simple termination constructor sharing trss signatures respectively 
combined system signature restricted dp simply terminating restricted dp simply terminating 
proof 
direction trivial 
direction cycle estimated dependency graph may empty 
difficult prove cycle estimated dependency graph estimated dependency graph constructor sharing 
loss generality cycle estimated dependency graph show afs corresponding trs simply terminating conditions def 
satisfied 
restricted dp simply terminating cycle estimated dependency graph afs trs fl fs hs ti dependency pair simply terminating holds dependency pair hs ti 
hand afs trs fl simply terminating restricted dp simply terminating 
afs corresponding empty cycle 
set function symbols restricted dp simply terminating contain rules elements consequently follows term particular implies requirements trss fl 
fs 
hs ti dependency pair fl 
constructor sharing 
constructor defined symbol shared 
kurihara thm 
combined system simply terminating 
afs trs obviously satisfy conditions def 
restricted dp simply terminating 
example simply terminating trs 
trs subtraction division sect 
terminating thm 
allows conclude dp simple termination combined system trss contain constructors 
trss dp simple termination proved standard technique lpo standard orderings fail wants prove dp simple termination union directly 
examples result enables automatic termination proofs possible 
example trs consist rule 
dp simply terminating afs lpo comparing left right simply terminating 
simply terminating shown lpo comparing right left 
dp simple termination systems verified lpo 
thm 
union dp simply terminating 
constraints cycle fhg ig satisfied lpo rpo polynomial ordering 
trss termination subsystems shown dependency pairs lpo modularity result termination union proved dependency pairs lpo 
stress thm 
extended composable systems 
proof identical simple termination modular composable systems ohlebusch thm 
proof composable needs extra effort 
restricted dp simple termination modular combinations trss common defined symbols provided systems contain rules shared defined symbols 
shown existing modularity results simple termination disjoint unions extended dp quasi simple termination 
certain restrictions similar modularity result holds composable combinations 
include examination extension possible hierarchical combinations 
summary progress automated termination proving possible development dependency pairs counterpart area modularity 
dependency pairs enable automated termination proofs non simply terminating trss results allow perform modular way 
completes results arts giesl theory dependency pairs refined modular way cf 
thm 
new modularity criteria innermost termination 
criteria applicable termination proofs locally confluent overlay systems particular non overlapping systems gramlich practice cases innermost termination sufficient termination 
due missing modularity results advantages dependency pairs fully exploited systems 
compared previous modularity modularity criteria developed represent significant extension 

middeldorp helpful remarks hints 
partially supported dfg wa part focus program 
arts giesl arts giesl 
automatically proving termination simplification orderings fail 
proc 
tapsoft pages 
lncs 
arts giesl arts giesl 
proving innermost normalisation automatically 
proc 
rta pages 
lncs 
arts giesl arts giesl 
termination term rewriting dependency pairs 
technical report tu darmstadt 
www informatik tu darmstadt de reports notes ps 
revised version appear theoretical computer science 
arts giesl arts giesl 
modularity termination dependency pairs 
proc 
rta pages 
lncs 
courcelle courcelle 
recursive applicative program schemes 
van leeuwen editor handbook theoretical computer science volume pages 
north holland 
dershowitz jouannaud dershowitz 
jouannaud 
rewrite systems 
van leeuwen editor handbook theoretical computer science volume pages 
north holland 
dershowitz dershowitz 
termination rewriting 
journal symbolic computation 
gramlich gramlich 
generalized sufficient conditions modular termination rewriting 
applicable algebra engineering commutation computing 
gramlich gramlich 
relations restricted termination confluence properties rewrite system 
fund 
informaticae 
gramlich gramlich 
termination confluence properties structured rewrite systems 
phd thesis universitat kaiserslautern germany 
klop klop 
term rewriting systems 
abramsky gabbay maibaum editors handbook logic computer science volume pages 
oxford university press new york 
krishna rao krishna rao 
simple termination hierarchical combinations term rewriting systems 
proc 
stacs pages 
lncs 
kurihara kurihara 
modularity simple termination term rewriting systems shared constructors 
theoretical computer science 
lankford lankford 
proving term rewriting systems noetherian 
technical report mtp louisiana tech 
univ la 
middeldorp zantema middeldorp zantema 
simple termination rewrite systems 
theoretical computer science 
middeldorp middeldorp 
sufficient condition termination direct sum term rewriting systems 
proc 
lics 
middeldorp middeldorp 
modular properties term rewriting systems 
phd thesis vrije universiteit te amsterdam 
ohlebusch ohlebusch 
modular properties composable term rewriting systems 
phd thesis universitat bielefeld 
ohlebusch ohlebusch 
modularity termination term rewriting systems 
theoretical computer science 
ohlebusch ohlebusch 
modular properties composable term rewriting systems 
journal symbolic computation 
rusinowitch rusinowitch 
termination direct sum term rewriting systems 
information processing letters 
steinbach steinbach 
simplification orderings history results 
fundamenta informaticae 
toyama toyama 
counterexamples termination direct sum term rewriting systems 
information processing letters 
toyama toyama 
church rosser property direct sum term rewriting systems 
journal acm 
toyama toyama klop barendregt 
termination direct sum left linear term rewriting systems 
journal acm 

