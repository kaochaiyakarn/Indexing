theorems free 
philip wadler university glasgow june type polymorphic function derive theorem satisfies 
function type satisfies theorem 
provides free source useful theorems courtesy reynolds abstraction theorem polymorphic lambda calculus 
write definition polymorphic function piece 
tell type careful see function definition 
tell theorem function satisfies 
purpose explain trick 
look example 
say function type type variable type list 
shall see possible conclude satisfies theorem types total function ffi ffi ffi function composition function map applies elementwise author address department computing science university glasgow qq scotland 
electronic mail wadler cs glasgow ac uk 
slightly revised version appearing th symposium functional programming languages computer architecture london september 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
list yielding list instance type intuitive explanation result lists type provided operations values type rearrange lists independent values contained 
applying element list rearranging yields result rearranging applying element 
instance may function reverse reverses list may function code char int converts character ascii code 
code reverse char reverse int code satisfies theorem 
may function tail returns element list may function int int adds integer 
tail int tail int satisfies theorem 
hand say function odds int int removes odd elements list integers say 
odds int odds int theorem satisfied 
counterexample odds wrong type specific int int theorem functions type pleasant earth shaking 
exciting similar theorem derived type 
result allows theorems derived types referred parametricity result depends essential way parametric polymorphism types form 
parametricity just reformulation reynolds abstraction theorem terms evaluated related environments yield related values rey 
key idea types may read relations 
result explained section stated formally section 
applications parametricity shown shows types corresponding theorems 
name chosen course suggest particular function named type associated theorems hold function type long defined term pure polymorphic lambda calculus 
example theorem head holds theorem sort holds nub see section 
theorems expressed operations functions correspond operations types 
corresponding list type map operation takes function function similarly corresponding product type theta operation theta takes functions function theta theta theta defined theta 
shall see necessary generalise case theta relations 
useful theorems generated 
time experience tell initial results encouraging ffl general laws derived types form useful algebraic manipulation 
example laws allow push map function 
ffl years ago barrett wrote derivation algorithm compiling pattern matching functional languages bw 
derivation general theorems higher order functions map sort looking turns theorems follow immediately types 
ffl sheeran developed formal approach design vlsi circuits heavy mathematical laws 
laws needs generated types methods described written describing 
surprisingly specific type system allows theorems derived type function explored certain extent sheeran 
reason believe research extend applicability method 
functional languages including standard ml mil mil miranda tur haskell hw hindley milner type system hin mil dm 
system popular types need explicitly principal general type function inferred definition 
purposes convenient girard reynolds type system gir gir rey rey known polymorphic lambda calculus second order lambda calculus system 
girard reynolds system necessary give types bound variables explicitly 
function polymorphic type type applications explicitly indicated 
done subscripting example instance function type written program hindley milner system automatically translated girard reynolds system 
required straightforward modification type inference algorithm decorate programs appropriate type information 
hand inverse translation possible girard reynolds system powerful hindley milner 
hindley milner girard reynolds system satisfy strong normalisation property term normal form reduction sequence leads normal form 
corollary follows fixpoint operator fix defined term systems 
purposes get fine fixpoint operator useful functions including shown may defined girard reynolds system 
recursive function proved total secondorder peano arithmetic written term girard reynolds calculus flo gir glt 
includes instance ackerman function see rey excludes interpreters languages including girard reynolds calculus 
power unbounded recursion truly required fix added primitive 
adding fixpoints weakens power parametricity theorem 
particular fixpoints allowed miranda trademark research software limited 
assume head ffi head head ffi tail ffi tail tail ffi xs ys xs ys concat ffi concat concat ffi fst theta ffi fst ab fst ffi theta snd theta ffi ffi theta zip theta 
theta theta ffi zip ab zip ffi theta filter bool ffi filter ffi filter ffi sort bool ffi sort 
sort 
ffi fold phi omega ffi fold ab phi fold omega ffi ffi ffi kab ka examples theorems types theorems hold general functions strict reason bulk assumes fixpoints provided necessary adjustment allow fixpoints described section 
fundamental idea parametricity new 
restricted version appears reynolds original polymorphic lambda calculus rey called representation theorem version similar appears rey called abstraction theorem 
versions include logical relations mitchell meyer mm mit dinatural transformations bainbridge freyd girard scedrov scott taken name parametricity 
far am aware uses parametricity date general say possible implementations polymorphic lambda calculus implementation correct independent representation models models allowed satisfy parametricity main contribution suggest parametricity specific applications says interesting things particular functions particular types updated statement proof abstraction theorem 
main reason including self contained 
process easy repair minor original presentation rey 
version expressed terms naive set theoretic model polymorphic lambda calculus reynolds proved models exist rey 
wrong theorem proof just context set straightforward transpose context 
uses frame models bruce meyer mitchell bm mm 
models polymorphic lambda calculus see btc mes pit 
characterisation parametricity formulated concisely terms category theory re expressed terms lax natural transformations 
subject 
remainder organised follows 
sections main new results section similar restriction strict coercion functions adopted similar reason 
written learned peter discovered similar applications deb john reynolds knew application section 
presents parametricity theorem section gives applications 
sections fill section describes syntax polymorphic lambda calculus section shows syntax frame models section gives full statement parametricity theorem 
section shows parametricity theorem adjusted account languages fixpoint operator 

am grateful harold simmons helping formulate prove result map section samson abramsky val breazu tannen peter freyd john hughes john launchbury john reynolds andre scedrov mary sheeran comments 
parametricity explained key extracting theorems types read types relations 
section outlines essential ideas naive model polymorphic lambda calculus types sets functions set theoretic functions approach follows rey 
recognise small problem naive set theoretic models polymorphic lambda calculus 
see rey 
ok essential ideas adopt easily frame models bm mm 
section sticks simple naive view dotted crossed sections explain notions context frame models 
usual way read type set 
type bool corresponds set booleans type int corresponds set integers 
types type theta corresponds set pairs drawn cartesian product type corresponds set lists elements type corresponds set functions type variable type depending type corresponds set functions take set return element 
alternative read type relation 
sets write indicate relation theta write indicate related special case relation identity relation defined ag 
words iff generally function may read relation ag 
words iff read types relations give relational equivalent constant types type constructors theta 
constant types bool int may simply read identity relations bool bool bool int int int relations relation theta theta theta defined theta iff pairs related corresponding components related 
special case function theta function defined theta 
relation relation defined iff lists related length corresponding elements related 
special case function familiar map function defined 
relations relation defined iff functions related take related arguments related results 
special case functions relation necessarily function case equivalent ffi ffi interpret operation relations 
relation depending corresponds function relations relations relation corresponding relation 
relation defined iff polymorphic functions related take related types related results 
note similarities definitions 
definitions closed type containing free variables read relation main result described follows proposition 
parametricity 
closed term type relation corresponding type formal statement result appears section extended types terms containing free variables 
parametricity applied section explains detail parametricity implies theorems listed presents general results 
rearrangements result simple consequence parametricity 
closed term type parametricity ensures definition relations equivalent definition relations turn equivalent xs xs xs xs expanded terms definition convenient version derived specialising case relation function xs xs xs implies xs xs equivalently ffi ffi version 
fold function fold type fold parametricity implies fold fold functions 
applying definition relations twice specialised functions gives fold ab fold applying definition relations twice gives phi phi fold ab phi fold phi phi just name function arguments usual convention phi may written infix form phi expansion shows condition phi phi equivalent implies phi phi result may rephrased phi phi ffi fold ab phi fold phi ffi theorems derived types reading algebraic flavour result fold provides illustration 
phi phi algebraic structures 
functions form homomorphism phi phi similarly fold ab phi fold phi algebraic structures 
functions form homomorphism fold ab phi xs fold phi xs 
result fold states form homomorphism form homomorphism fold ab phi fold phi 
sorting closed term type bool 
functions type include sort nub sort int 
int nub int int function sort takes ordering function list returns list sorted ascending order function nub takes equality predicate list returns list adjacent duplicates removed 
applying parametricity type yields oe oe ffi oe oe ffi recall bool relation just identity relation booleans 
corollary sort 
ffi ffi sort 
maps commute sort function mapped preserves ordering 
linear orderings hypothesis equivalent requiring monotonic 
second corollary ffi ffi maps commute nub function mapped preserves equivalence 
equality hypothesis equivalent requiring 
polymorphic equality programming language miranda tur provides polymorphic equality function type bool applying parametricity type yields obviously false hold functions 
contradiction parametricity theorem provides proof polymorphic equality defined pure polymorphic lambda calculus 
polymorphic equality added constant parametricity hold terms containing constant 
suggests need way tame power polymorphic equality operator 
exactly taming provided variables standard ml mil generally type classes haskell hw wb 
languages think polymorphic equality having type bool new type ranges types equality defined 
corresponding type constructor new relation constructor iff respecting relation respects relates equals equals equality equality case function equivalent requiring 
definition prove polymorphic equality operator typed satisfies parametricity theorem 
extended language define example function nub corresponding parametricity condition previous version nub 
refined type structures standard ml haskell add exactly information necessary maintain parametricity 
standard ml trick works equality built language haskell works operators defined type class mechanism 
result map suppose tell am thinking function type 
immediately guess am thinking map function course thinking different function instance reverses list applies 
intuitively know map interesting function type rearranging functions composed map 
formalise intuition follows 
function type 
mab ffi maa mbb ffi identity function function maa rearranging function discussed preceding section 
function type expressed rearranging function composed map equivalently map composed rearranging function 
proof simple 
seen parametricity condition ffi ffi ma ffi ffi mab satisfies hypotheses giving mbb ffi ffi mab gives second equality equality may derived commuting permuting function map may derived directly different substitution 
result fold analogous previous result map similar result fold function type ab fold ab ffi aa cons nil note aa cons nil function rearranges list says function type fold expressed fold composed rearranging function 
proof similar previous 
parametricity condition ffi theta ffi ffi ffi ab fold cons nil satisfies hypothesis giving ab ffi fold ab ffi aa cons nil term just identity drops leaving desired equality rename result filter function type bool functions type filter takewhile dropwhile 
example filter odd takewhile odd dropwhile odd see bw definitions functions 
define corresponding function type theta bool related equation ffi hi pi hi pi 
passed predicate type bool list passed list theta bool pairs second component pair result applying component 
intuitively transformation possible values applied type suffices pair value type result applying 
little thought shows suitable definition fst ffi snd parametricity show satisfy functions type 
parametricity conditions tells bool bool ffi bool ffi ffi ffi take theta bool hi pi snd hypothesis snd ffi hi pi satisfied yielding snd ffi hi pi hi pi ffi compose sides fst giving fst ffi snd ffi hi pi fst ffi hi pi ffi apply definition observe fst ffi hi pi resulting equation ffi hi pi desired 
isomorphism preceding applications expressed hindley milner fragment polymorphic lambda calculus universal quantifiers appear outside type 
section presents application utilises full power girard reynolds system 
arbitrary type 
intuitively type isomorphic type abbreviate apparent isomorphism expressed functions ha takes element element maps function type value type 
inverse function recovers original element applying value identity function 
prove truly isomorphism verify ffi ffi identities 
easy verify inverse identity problematic 
get far stuck 
parametricity helps 
parametricity condition hb ffi gives hx ffi hx completes second identity 
second identity depends critically parametricity isomorphism holds models elements satisfy parametricity constraint 
alas parametricity theorem guarantees elements model correspond lambda terms parametric models contain additional elements non parametric 
model contains parametric elements btc 
typing rules polymorphic lambda calculus turn formal development parametricity theorem 
quick review polymorphic lambda calculus 
range type variables range types 
types formed type variables function types type abstraction range individual variables range terms 
terms formed individual variables abstraction application individuals abstraction application types write denote substitution free occurrences similarly 
term legal typed 
typings expressed assertions form list distinct type variables xm list distinct individual variables types assertion may read stating type context type individual variable appears free appear type variable appears free appear type inference rules shown 
terms equivalent derived renaming bound individual type variables ff conversion 
addition familiar reduction rules fi rules occur free known familiar types booleans pairs lists natural numbers defined types constructed just see example rey glt 
alternatively add suitable types individual constants pure language described 
semantics polymorphic lambda calculus give semantics version frame semantics outlined bm mm 
discuss semantics types discuss semantics terms 
types type model consists universe type values operations construct types types 
distinguished set functions type free variables say type environment maps type variable type value corresponding value environment written defined follows 
value maps environment maps behaves 
reader may find looks familiar replaced greek letter 
terms associated type set da values type 
elements da represent functions da db require elements functions merely represent functions 
particular associated set da db functions da db functions oe da da db da db da oe ffi identity da db 
usually omit subscripts just write oe 
function elements represent functions take type element particular associated set functions map element functions phi psi phi ffi psi identity 
usually omit subscripts just write phi psi term say environments respecting type environment environment mapping variables values value environments written aa defined follows aa aa aa aa oe aa aa aa psi aa phi aa value maps environment maps behaves frame structure specifying oe phi psi satisfying constraints 
frame environment model respecting meaning aa exists 
frame model sets da db big 
write environments respecting aa proposition 
soundness types 
type soundness result simply states meaning typed term corresponds meaning corresponding type 
proof straightforward induction structure type inferences 
parametricity analogue result shall see section 
parametricity theorem previous section defined semantics type environment consists mapping type variables types semantics type environment set denoted section define alternative semantics type environment consists mapping type variables relations semantics type environment relation denoted formally state parametricity theorem terms related environments related values 
think environments specifying different representations types related reynolds called version result abstraction theorem 
key point theorem applications change representation change name abstraction parametricity function type may regarded relation follows 
relations define relation implies oe oe words functions related map related arguments related results 
type abstraction may regarded relation follows 
function function function takes relation returns relation 
define relation phi phi words type abstractions related map related types related results 
relation environment maps type variable relation 
relation environment type environments write 
relation environment interpret type relation follows respect respect say respect easy see respect respect respect say jj iff respect aa proposition 
parametricity 
jj proof 
proof straightforward induction structure type inferences 
inference rules replace jj show resulting inference valid 
proof 
mentioned previously data types booleans pairs lists natural numbers defined terms 
example consider construction pairs 
type theta defined abbreviation theta def term type theta equivalent term form pair xy pair defined pair def type pair course pair theta theta stands abbreviation 
follows parametricity theorem pair xy pair xy theta pairs related corresponding components related expect 
shown similarly standard construction lists lists related length corresponding elements related 
alternatively suitable type constructors individual constants may added pure polymorphic lambda calculus 
case new type constructor appropriate corresponding relation defined suitable definitions relations pair list types section 
new constant parametricity condition verified constant type check jj holds 
follows parametricity holds terms built new type constructors constants 
fixpoints term typed lambda calculus strongly normalising fixpoint operator desired added primitive 
section mentions additional requirements necessary ensure fixpoint primitive satisfies abstraction theorem 
frame models associate type set da order discuss fixpoints require set sufficient additional structure domain provided ordering domain element limits directed sets exist 
obviously require functions continuous 
requirements relations 
obvious requirement continuous 
chain chain require 
addition need second requirement relation strict restrict relations way longer true function may treated relation strict functions may treated 
restricted view relations easy show fixpoint operator satisfies parametricity theorem 
usual type define fix function fix fix parametricity holds fix fix true fix fix recall condition means relations strict follows general follows relations continuous required 
note restriction strict relations similar restriction strict coercion functions adopted similar reasons 
requirement relations strict essential 
counterexample take domain true falseg take constant relation true relation continuous strict 
constant function false identity function relates relate fix false fix 
restriction strict arrows taken lightly 
instance function type parametricity implies ffi ffi functions fixpoint combinator appears definition conclude holds strict significant restriction 
desire derive theorems types suggests valuable explore programming languages prohibit recursion allow restricted 
theory understood noted computable function provably total second order peano arithmetic defined pure polymorphic lambda calculus fixpoint primitive 
practical languages notion remain terra 
breazu tannen coquand gunter scedrov inheritance explicit coercion 
th annual symposium logic computer science asilomar california june 
bainbridge freyd scedrov scott functorial polymorphism 
huet editor logical foundations functional programming austin texas 
addison wesley appear 
bm bruce meyer semantics second order polymorphic lambda calculus 
kahn macqueen plotkin editors semantics data types france pp 

lncs springer verlag 
btc breazu tannen coquand extensional models polymorphism 
theoretical computer science 
bw barrett wadler derivation pattern matching compiler 
manuscript programming research group oxford 
bw bird wadler functional programming 
prentice hall 
dm damas milner principal type schemes functional programs 
proceedings th annual symposium principles programming languages albuquerque january 
deb naturalness polymorphism 
submitted category theory computer science manchester 
freyd girard scedrov scott semantic parametricity polymorphic lambda calculus 
rd annual symposium logic computer science edinburgh scotland june 
flo fortune leivant donnell expressiveness simple secondorder type structures 
journal acm january 
gir 
girard interpr etation elimination des coupures dans arithm etique ordre sup erieure 
ph thesis universit paris vii 
gir 
girard system variable types fifteen years 
theoretical computer science pp 

glt 
girard lafont taylor proofs types 
cambridge university press 
hin hindley principal type scheme object combinatory logic 
trans 
am 
math 
soc 
pp 
december 
hw hudak wadler editors report functional programming language haskell 
technical report yaleu dcs rr yale university department computer science december technical report glasgow university department computer science december 
mes meseguer relating models polymorphism 
th acm symposium principles programming languages austin texas january 
mil milner theory type polymorphism programming 
comput 
syst 
sci 
pp 

mil milner proposal standard ml 
acm symposium lisp functional programming austin texas august 
mil milner changes standard ml core language 
report ecs lfcs edinburgh university computer science dept 
mit mitchell representation independence data abstraction 
th acm symposium principles programming languages pp 

mm mitchell meyer second order logical relations 
parikh editor logics programs brooklyn new york 
lncs springer verlag 
pit pitts polymorphism set theoretic constructively 
pitt editors category theory computer science edinburgh 
lncs springer verlag 
rey reynolds theory type structure 
robinet editor proc 
colloque sur la programmation lncs springer verlag 
rey reynolds types abstraction parametric polymorphism 
mason editor information processing pp 

north holland amsterdam 
rey reynolds polymorphism set theoretic 
kahn macqueen plotkin editors semantics data types france pp 

lncs springer verlag 
rey reynolds approaches type structure 
mathematical foundations software development lncs springerverlag 
sheeran categories working hardware designer 
workshop hardware specification verification synthesis mathematical aspects cornell july 
tur turner miranda non strict functional language polymorphic types 
proceedings nd international conference functional programming languages computer architecture nancy france september 
lncs springer verlag 
wb wadler blott adhoc polymorphism ad hoc 
th acm symposium principles programming languages austin texas january 

