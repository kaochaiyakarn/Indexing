modeling concurrency geometry vaughan pratt computer science department stanford university stanford ca pratt cs stanford edu phenomena branching time true concurrency find respective homes automata schedules 
models computation formally equivalent birkhoff duality equivalence tutorial detail 
phenomena prefer home 
identify dimension culprit dimensional automata skeletons permitting interleaving concurrency true fold concurrency resides transitions dimension truly concurrent automaton dual schedule skeletal distributive lattice solid 
introduce true nondeterminism define monoidal homotopy perspective nondeterminism ordinary automata arises forking joining creating nontrivial homotopy 
automaton dual poset schedule simply connected dual event structure schedule need monoidal homotopy group homotopy 
conclude formal definition higher dimensional automaton complex category essential axioms associativity concatenation dimension interchange principle dimensions 
background central problem semantics imperative computation construction convenient models computation embodying apparent aspects branching time true causal supported national science foundation number ccr 
concurrency 
milner mil convincing case including timing nondeterministic choices comprehensive model computation distinguishing linear time choices outset branching time choices fly take account latest information 
park notion bisimulation equivalence par emerged particularly fine equivalence labeled transition systems fine abandon idempotence choice 
comprehensive complementary accounts bergstra klop bk student van glabbeek vg addressing true concurrency detail 
natural computational setting branching time appear transition systems state automata branching naturally represented automaton 
may unrolled yield synchronization trees represent information 
nielsen plotkin winskel defined event structures extension schedules conflict relation represent branching time say 
lamport lam independently author argue interleaving model concurrency ground exactly interleaved depends events process takes atomic pra 
supposedly atomic action refined pragmatic viewpoint taken mean looked closely reveal substructure interleaving model seen interleaved subactions having forced commit advance particular level granularity 
failure interleave subactions characteristic true concurrency mutual exclusion 
interleaving model truly concurrent execution atomic events distinguished mutually exclusive execution events 
cdp formalize intuition simple example showing interleaving semantics preserved refinement refinement defined substitution complex behavior atomic behavior partial order semantics preserved 
natural computational setting true concurrency schedules partially ordered sets events 
branching time moved automata schedules true concurrency go way 
van glabbeek goltz strengthen result ways 
give stronger example show step semantics form concurrency intermediate interleaving partial orders permitting multiple synchronized actions clock tick interleaving semantics preserved refinement 
extend linear time result cdp encompass branching time 
point st bisimulation simple extension notion petri net marking due van glabbeek vaandrager gv preserved refinement supports branching time example semantics models true concurrency furthermore treats branching time requiring partial orders 
st bisimulation comes striking distance problem just posed moving true concurrency automaton model 
petri nets schedules automata symmetric combination petri nets alternate vertices schedules transitions vertices automata places 
main contribution geometric model concurrency 
model completes passage true concurrency automata redefining schedule aspects petri net transitions represented petri nets vertices higher dimensional transitions automaton 
yields model opinion mathematically attractive petri nets certainly unbounded place capacities 
side contributions 
needed tutorial duality schedules automata continues play role sequel 
application categories complexes concurrency theory formal model higher dimensional automaton contend naturally adapted extant algebraic structures 
applications called australian category theory concurrency application enriched categories modeling time la floyd warshall category audience 
regret having opportunity popl popl 
geometric model computation thesis branching time true concurrency described single geometric model 
branching time represented literally branchings geometric objects exactly picture 
particular treat transition system dimensional space consisting edges transitions meeting branching vertices states 
true concurrency represented dimension dimensional cell element space represent concurrent execution sequential processes boundaries represent starting halting processes 
geometric view closely related hand st bisimulation papadimitriou geometrical model database concurrency control pap chap 
closer shields proposal add higher dimensional transitions automata shi murphy brought attention late inclusion popl version 
light shields see chief contributions making connection homotopy formally defining suitable notion higher dimensional automaton 
succinct propose extend interleaving concurrency true concurrency filling holes extend true concurrency branching time putting holes back 
hole 
consider automata having states transition accepting respective regular sets consisting string 
interleaving concurrency concurrent execution automata product square sides represent transitions accepting regular set ab ba pages 
automaton contains hole interior square 
formalize embed automaton treated graph euclidean real plane 
definiteness locate states lattice points corners unit square oriented negatively 
take initial state origin take transitions sides square 
hole interior square 
fill hole take interior square surface ninth component product automaton 
vertices qua states edges qua transitions comprise cells shall refer cell complex 
cells represent possible states concurrent automaton 
states completely idle states usual sense constituent automaton active constituents active 
may described dimensional superficial transition 
provides notion joint transition processes 
van glabbeek vaandrager gv introduced st bisimulation places petri nets transitions st marked state assignment tokens vertices 
extraordinary simple intuitively clear extension notion petri net state proposed 
relationship st bisimulation may easily seen considering corresponding example petri nets 
usual transition automaton petri net simply converting transition edge vertex adding edges represent respectively pre event input arc output arc incident transition 
concurrence nets smaller corresponding automata just juxtaposition having vertices cartesian product vertices underlying nets case automata disjoint union 
mark initial place components juxtaposition play usual token game obtain possible markings places corresponding vertices square automaton 
extend token game st bisimulation permit transitions marked obtain additional markings involving transition edges square single marking involving interior square completing promised correspondence 
trivial generalizations immediately 
may increase number automata executing concurrently 
automata obtain cube obvious way cube refer dimensional elements complex cells cells points corresponding old notion state cells edges old notion transition higher dimensional cells constituting new notion concurrent transition 
second may th automaton run transitions provided graph forms chain accepts just string length unit cube expands larger complex size third may label transitions 
associate alphabet sigma th sequential automaton may label edges standard way automata 
extend higher dimensions require subset set alphabets alphabet formed product subset yielding alphabets 
cell labeled tuple labels appropriate alphabet corresponding subset automata activity represented cell 
completely quiescent states cells labeled unique tuple indicating absence activity 
cells labeled tuples ordinary automaton 
cells labeled pairs indicating joint execution transitions higher dimensions 
trivial generalization imposes order constraints 
transitions different automata may require start finished precedence constraint 
shall call collection constraints schedule term inter alia macintosh world pert charts pomsets 
generalization second trivial generalization redundant achieve effect sequential automaton having transitions concurrent transition automata constrained execute specified sequential order 
simplify model withdraw generalization 
restricts basic automata single transition automata conventionally called events 
may describe precedence constraint holding events having specify particular transition event 
constraints write amount partial ordering set multiset labeled case events 
saw square cube cells 
generally cube cells 
number arises possible states event initial transition final short 
cell identified tuple 
standard interpretation exclude cells save th event th event 
place may take unit interval real line interior corresponds endpoints correspondingly named elements 
cube unit cube dimensional euclidean space having continuum points just quite reasonable interpretation restrict polyhedral subspace cube consisting points th coordinate greater th coordinate 
corresponds permitting events run concurrently letting get ahead partial ordering events subspace convex easily shown volume number linearizations partial order essentially disjoint union tetrahedra linearization 
proper analog subspaces cuts faces tetrahedra 
appropriate real valued analog restricts subspace points th coordinate th coordinate 
exactly expressed condition fact interpreted mentioning expressed solely terms initial final states event regardless structure impart interior 
interpretation previous paragraph subspace standard interpretation convex 
seen important shortly approach nondeterminism contains holes 
schedule automaton duality generalization passed unscheduled scheduled activity essence pomset model gra pra 
mathematical perspective passed finite case birkhoff stone duality sets events points finite discrete topological space boolean algebras states richer birkhoff duality posets events distributive lattices states 
birkhoff duality better known cs community late 
remains considerable confusion mathematical cs literature difference birkhoff duality stone duality opinion unwarranted enthusiasm topological methods exclusion combinatorial 
helpful see distinctions clearly working geometrical model concurrency 
give overview duality application concurrency 
sequential computers alternately transition rest state 
scenario conventionally rendered graph vertices represent transitions states 
transitions pert chart schedule edges graph denote precedence relations possibly labeled durations indicating bounds time transition 
states machine automaton edges transitions state state possibly labeled attributes transition 
picture right 
petri net answer transitions states granted equal rights vertices 
serve respectively conjunctive disjunctive elements intriguing logic concurrency 
duality theory answer certain class schedules class automata depict scene equivalent 
isomorphic imply correspondence elements equivalent sense correspondence isomorphism classes 
exactly category theoretic notion equivalence 
simple special case equivalence 
finite schedule just unordered set jobs transitions done parallel easy compile automaton 
automaton just power set drawn standard way empty set bottom start state top final state edges just sets differing exactly job job labeling edge 
automaton state means set jobs done far hasse diagram lattice smallest dag transitive closure inclusion order subsets 
lattice course boolean algebra meaning distributive lattice complement operation 
helpful regard states automaton bit vectors length bit state just job run time state reached 
set operations bit vector operations bit position just decompilation traditionally harder compilation case decompilation just easy compilation 
automaton form power automaton consisting certain sets states automaton simply set states mean power set huge fortunately wrong 
right way form power widget widget take widget maps 
works provided sensible way construe widget 
automaton lattice luckily poset schizophrenic lattice truth values 
take lattice maps homomorphisms meaning functions preserve lattice structure 
easily seen preserving implies preserving complement boolean algebra maps 
maps give 
function satisfies desired conditions predicate tells state job run 
looking bit vectors just function watches bit long bit works reliably formed bit appear computing dually 
conditions require 
functions lattice maps 
fact projections product copies 
different seen behavior singleton states 
maps form set isomorphic having cardinality jxj 
isomorphic equal duality equivalence isomorphism 
lattice maps 
singleton finite 
singletons 
exactly singleton fxg 
fxg fxg exactly making theorem decompilation back schedules works isomorphism class automata aren allowed refer states singletons se 
problem spot singletons context just states immediately start state atoms boolean algebra 
revise argument automata isomorphic substituting atom singleton 
correspondence isomorphism classes finite sets set isomorphism classes finite boolean algebras 
reader knows prove finite boolean algebra isomorphic power set finite set promised equivalence 
special case birkhoff stone duality boring natural numbers finite sets fall isomorphism classes solely cardinality class number correspondingly just isomorphism class boolean algebras cardinality picture far schedules just unordered sets jobs isomorphism just schedule size matching automaton size duality essentially orthogonal ways combinatorial due birkhoff bir topological due stone sto 
remarkably ways orthogonal passed unnoticed pointed priestley pri 
keeping finite birkhoff duality generalizes discrete schedules partially ordered schedules generalizes automata distributive lattices 
hand keeping automata boolean stone duality generalizes infinite case 
order allow boolean algebra viewed compilation schedule stone generalizes schedules jobs schedules sets jobs called nowadays stone spaces 
running individual jobs run sets jobs time combinations permitted 
automaton produced compiling schedule proper boolean subalgebra power set set jobs schedule due schedule restrictions eliminating states containing finitely jobs 
stone extend boolean duality distributive lattices sto purely topologically natural blend order topology devised priestley 
rota put stone representation theorem distributive lattices closely imitated representation theorem boolean algebras consequence turned contrived 
rot priestley simply schedule birkhoff partial order stone topology partially ordered stone space set bearing structures partial order topology stone case 
partial order deals absence complementation generalizing boolean algebras distributive lattices dually schedule side sets posets 
stone topology resides schedule side caters phenomenon countably infinite boolean algebra token distributive lattice countably infinite subalgebra isomorphic parent forbidding combinations jobs subsets corresponding missing elements said subalgebra 
birkhoff stone halves beautiful duality theory essentially independent 
halves potential computational significance 
birkhoff duality relevant scheduling main thrust 
stone duality relevant continuous situations parallel solutions stock cutting problems regions get arbitrarily small points 
may prove fruitful reasoning large systems number jobs infeasible scheduler deal individual jobs forcing batch chief difficulty translating logic infinity large finite numbers 
geometry concurrency purposes currently application stone duality 
focus schedules structured partial order birkhoff duality finite pleasantly combinatorial phenomenon 
finite posets far boring finite sets 
number isomorphism classes sets cardinality goes 
corresponding sequence posets goes 
scheduling jobs different ways schedule discrete order precedence constraints extreme linear order isomorphism 
linear orders 
despite enormously richer software library labeled vertices say job isomorphism story schedules automata remains completely un say topology pointless 
poincar father combinatorial topology said cantor mengenlehre disease generations regard having recovered 
sporting bet recover sooner internal combustion engine 
changed 
compile form decompile back form clear shortly definitions stand time reversing directions 
couldn see sets boolean algebras isomorphic duals 
fix reversing input exponentiation 
compile op decompile op op denotes order dual remarkably reasoning unordered schedules needs changed get matter maps 
arguments involving singletons longer sound may fewer singletons extreme case job go 
achieve effect state xg called principal order ideal generated element clearly state earliest moment run 
remember claim equivalence isomorphism analog atom obtained noticing states exactly aren union join going lattices smaller states join irreducible 
states picked represented smaller state 
left principal maximal elements case represented union principal order ideals generated maximal elements 
observe distinct true join irreducible state 
furthermore compare coordinatewise inclusion find read happened happened just ordering coincides original order showing isomorphic original poset equivalence classes finite posets finite distributive lattices contravariant equivalence categories 
means correspondence posets lattices extends maps contravariant meaning corresponding arrows go opposite directions poset map corresponds lattice map corresponding lattices 
adjacent contains diagrams category finite posets left right category finite distributive lattices 
diagram objects primed right 
poset maps left numbered go corresponding lattice maps right go 
object job schedule corresponding transition automaton 
map inclusion adds job corresponding map projection projecting augmentation discrete order linear order constraints bottom left corner represented inclusion top right edges straightened 
new element added left relevant piece diagram coproduct inclusions maps 
dual coproduct product projects projects augments corner 
adds new elements spliced ae ae ae ae 
may imagine distributive lattices harder visualize boolean algebras 
need 
key visualizing distributive lattice op interpret precedence constraints op constraint delete states violating constraint containing remaining states retain original positions preserving geometry cube 
finite distributive lattice simply eroded cube 
immediate application dualities kind maps colimits limits passing schedules automata 
follows manner duality obtained exponentiation suitable dualizing object category posets yielding example theta outline language concurrency number operations describable colimits category schedules carried corresponding limits dual situation 
language defined schedules having various notions time real valued time set valued time causal accidental time posets having merely truth valued time 
event structures 
generalization takes event structure model 
specify symmetric irreflexive binary relation events meaning may run 
presence scheduling require imply conflict persistent condition 
event structure set set events 
effect scheduling order corresponding automaton deleting certain cells converting cube boolean algebra distributive lattice 
finite distributive lattice arises way 
effect conflict automaton time top consequence persistence conflict deleting just cells th th component cell corresponding states running halted generalizations filled holes distributive lattice added information reconstructed distributive lattice passing dual poset scheduling events constructing filled lattice poset procedure subspace desired 
event structures currently provide largest known class schedules date aware holds 
monoidal homotopy define preliminary notion monoidal homotopy basis definition true true notices time truly concurrent real time requires max theme developed 
girard gir noticed effect developing notion coherent space generalization independently preceding 
scheduling girard coherent spaces coherent algebras adhere duality theorists naming convention dualities 
nondeterminism 
expected formal notion monoidal homotopy able complex model higher dimensional automata concluding section 
finite distributive lattice confluent simply connected sense 
ascending paths lattice defined just vertices pass edges inferred lattice property uniquely determines vertices respectively meet join union paths turn determining uniquely extensions paths points give common confluence 
distributivity property uniquely determines appropriate filling holes lattice yielding simply connected space paths may continuously deformed intuitively obvious way provided regard space euclidean subset suitably defining discrete analog continuous deformation may achieve effect addressed intuition euclidean space suffice 
topological language paths common endpoints simply connected space automatically homotopic equivalence relation paths bro whi whi 
hole appears space inhibit deformation 
homotopy ordinarily studied spaces movements form group composition homotopy inhibited holes 
typical irreversibility computation calls monoid 
turn calls generalization notion homotopy group homotopy monoid homotopy leading ways inhibiting homotopy 
settle notion defined setting distributive lattices 
ascending paths distributive lattice having common endpoints subspace euclidean fill lattice say group homotopic respect homotopic standard sense topology 
ascending paths necessarily having common endpoints say monoid homotopic respect extend paths group homotopic respect generalizes homotopy permitting paths common endpoints application apparent shortly 
henceforth homotopic shall mean monoid homotopic 
think decisions involving choices paths essential just paths homotopic filled distributive lattices deterministic automata 
nondeterminism condition exist paths homotopic think choice paths essential decision 
conflict introduces nondeterminism distributive lattices selectively destroying confluence forward upward direction making top automaton 
paths opposite sides notch committed respective sides extended upward group homotopic paths join extend homotopic broader sense 
effect persistence limit top making automaton order ideal distributive lattice obtained follows conflict substantial difference restricted definition monoid homotopy just paths common beginnings paths extended common 
benefits geometric model biggest advantage geometric perspective duality schedules automata convincing 
leaving events unordered supposedly represented true concurrency explain automaton dual discrete poset state transition square discussed 
exactly automaton expect interleaving model produce 
answer puzzle say square indicates true concurrency represent ij ji mutual exclusion letting ij ji branches rejoin done 
answer fill square indicate true concurrency simply leave hollow indicate mutual exclusion 
see approach having benefits 
naturality 
lines surfaces volumes attached possibly branching ways familiar easily visualized concepts requiring relatively little mathematical sophistication appreciate 
ii flexibility 
greater variety situations may represented 
example choose ij ji rejoin immediately little 
reason iii complexity general prefer may occasion find meaningful rip upwards little long way 
iii complexity 
theta rectangle contains mn squares gamma delta paths adjacent lattice points start 
associate information square forbidding geometric representation information polynomial size sides interleaving representation terms paths exponential size 
iv continuity 
tearing picture little strips inherently discontinuous operation 
decomposing dimensional space set paths somewhat akin identifying tv picture onedimensional representation sequence scan lines 
tv saw screen scan lines laid may find perspective natural certainly viewer 
programmers tend viewers 
years thinking individual instruction sequences conditioned believe sequence correct object study 
assemble sequences properly aligned single picture resulting shapes materialize easier reason processes 
algebraic structure 
geometry algebraically mature subject optimistic algebra rub geometrically model computation 
far fact elicited algebraic structure mainly event structures duality 
presently working replacing convenient limited derivation elementary development homology monoids groups yield feel comprehensive convincing 
precise base exactly monoids generalization categories ehr roughly lines street str appropriately expressing dimensional aspect 
extensions event structures despite fact event structures introduced decade ago win generalizations event structures duality maintained 
phenomena computation describable suitable extension model give 
far able extensions algebra automaton side duality higher dimensional cells described explicitly 
role cells making extensions may inessential albeit certainly convenient suitable extension duality problem return 
event structures reside topology side duality completeness duality point permits extend starting side 
extensions considered algebra automaton side nature higher dimensional cells dimension clear 
mutual exclusion 
mutual exclusion events condition overlap 
terms naturally expressed condition state transitions marked 
corresponding requirement geometric model course cell exist th th components discrete model open interval euclidean model 
defined mutual exclusion persistent 
may may need resource presumably competing 
done whichever order branches computation may rejoin corresponding rest computation remembering order 
persistent version mutual exclusion defined copies arranged ij ji events ij conflict events ji 
persistence conflict means commitment ij ji permanent paths making decision differently subsequently rejoin 
brings question persist persist 
advantage persistence permits geometrical model dispensed 
extent geometry offers benefits claimed earlier compromised seriously insisting persistence time serious disadvantage persistence 
example persistence destroys complexity advantage geometry 
computation keeps splitting alternatives size grows exponentially 
permits smaller model computation branching 
alternative parallel universes science fiction may similarly dramatically reduced number say match number particles universe 
particularly see local mutual exclusion requirement represent just small hole blown giant tear fabric computation simply due requirement persistence 
similar reasons prefer insist persistence permit expression nondeterminism absence confluence status quo presence holes confluence possible proposed extension status quo 
communication 
consider rectangle representing processes running parallel 
communication consists transmission receipt events determine point rectangle may think communication 
point origin divide rectangle quadrants 
thinking moment terms computations dimensional paths particular computation path passes avoiding quadrant message received transmitted 
middle quadrant path passes diagonally opposite excluded quadrant represents period message transit 
effect communications upper left early late lower right late early regions rectangle creating jagged boundaries representing places process wait messages 
boundaries suggestive teeth suggesting term jaws communication 
refer space jaws communication corridor 
interior corridor waiting messages computation may flow 
rate exchange messages increases corridor narrows jaws close 
corridor tube liquid flowing expect narrowing impede flow 
fact see just effect attributable high cost communication 
need think computation specific path corridor broaden reflect ignorance exact position just trajectory car highway accuracy depends application 
limit may think corridor computation 
contains holes failures confluence persistent conflicts regard deterministic computation 
nondeterministic essence nondeterminism residing homotopy classes equivalence classes paths induced homotopy 
concern branching time details just homotopy classes paste pasted regions represent regions preceding classes diverge converge 
synchronization trees dimensional case words pasted common initial segment dimensional pasting 
general pasting take place just curves surfaces volumes pasting need necessarily maximal branching time convey information linear time 
fork earlier decisions correspond earlier suspension pasting dually join 
directed cell complexes dimensional automata far discussion geometry relied informal intuition geometry characterized fragments euclidean space oriented represent irreversibility computation 
intuition formalized notion higher dimensional automaton 
sequential automaton transition system graph vertices denote states edges denote transitions 
vertex distinguished start state set vertices constitutes final states 
edges labeled elements set sigma 
linear time meaning automaton defined terms paths graph determining element sigma automaton accepts elements sigma determined path state automata linear time equivalent trace equivalent accept subset sigma geometric terms automaton onedimensional cell complex dimensional cells cells transitions cells states 
model definition reduces dimensional case combinatorial notion directed graph captures geometric intuitions foregoing discussions 
algebraic topology offers range models select cw complexes simplicial complexes 
far able tell extant notions cell complex algebraic topology assume reversible geometry early development depend heavily structural properties groups permit easy adaptation irreversible case 
pointer counterexample 
notion higher dimensional automaton takes inspiration algebraic topology geometry categories ehr 
ordinarily define automaton edge labeled graph define operation terms paths graph operation path concatenation 
just start paths dispense underlying graph 
passing discrete continuous automata state transition decomposed concatenation shorter transitions fact necessary suitable underlying graph 
qualitatively different reasons shall similarly start underlying graph passing dimensional higher dimensional automata 
problem suitable underlying graphs allow multiple edges vertex 
circles term multigraph distinguish kind exist continuous automata suitable notion graph proved elusive notions emerged date 
successful appear johnson notion pasting diagram joh 
definition presently requires simplification generalization order constitute workable notion graph 
interim measure define complex category eventual goal redefining refers underlying graph notion fully operational 
proceeding top define notion concurrent automaton terms complex provide motivational define complex 
automaton sigma ffi consists complexes sigma map ffi sigma subsets underlying set language accepted subset sigma consisting ffi th boundary operators defining complexes touch ground momentarily 
tuple definition parallels traditional definition automaton sigma ffi hu consisting state set symbol set sigma transition function ffi start state final state set usual definition accepted language 
adjustments traditional definition matches case 
view transitions defined traditional ffi pair ffi set unlabeled edges ffi sigma labels 
rename vertices move form graph recycle 
sigma graph vertex edge set old sigma 
interpret ffi sigma obvious graph map 
replace sigma ffi sigma ffi set paths sigma free monoid sigma ffi sigma corresponding extension ffi sigma paths length paths 
take fq gives desired automaton sigma ffi 
rename sigma ffi time dispense 
translation standard automaton framework 
continue top definitions 
street str define complex terms complexes complexes 
complex small category set bearing structure complexes 
cn gamma complex 
remains define complex 
terminology taken street str taken liberties wording definition content 
note definition complex homogeneous category object morphism distinction objects recovered range fixpoints identities homogeneity simplifies extension categories 
complex consists set paths boundary operations binary operation path concatenation 
domain set consecutive pairs tx sy 
furthermore conditions satisfied 
def constituting cells cells 

ii implies sx tx 
idempotent st tt ss ts 
iii 
iv identities 
implies 
associativity 
complex pair complexes common set set cells 

ii interchange 
terms defined 
referring definition complex 
cn gamma reveals detail structure 
gamma gamma gamma pair complex 
evidently 
pn map functor complexes homomorphism equivalently function underlying sets functor complex dimension 
intuitively clear associativity essential axiom concatenation dimensional irreversible geometry 
straightforward extension dimensions matrix formed column rows vertical composition columns associative dually formed row columns horizontal composition rows associative 

matrix assembled row row column column 
flavor associativity formal associativity sense vertical composition columns horizontal composition rows associative 
require separate axiom associativity 
function interchange law irreversible geometry 
example complex polygonal decomposition simply connected region euclidean plane edges decomposition form directed acyclic graph having single source vertex single sink vertex edges polygons 
partitions boundary polygon halves start terminal leading common source common sink polygons share edge edge belong start terminal 
may verified polygons form polygon meeting conditions 
conditions halves boundary polygon may touch repeatedly region connected cut point cross 
set simply connected polygons assembled elementary polygons decomposition constitutes complex compositions interchange law evidently sound model 
obvious complete sense ways assembling polygon elementary polygons take form terms language consisting constants naming polygons compositions proved give polygon just associativity axioms composition interchange axiom standard rules equational logic 
claimed kelly street ks extended john power complexes appear 
idea proof denote polygon source sink term partitions polygon cut cuts cross bound region source sink leaving outside regions polygon source sink proves equality regions separately induction completing application associativity island regions produced interchange represent regions region extending cells concluding applications associativity shows complexes capture essence ordinary geometry cells reversibility ruled directing edges surfaces 
contrast orienting direction specified edge inverse 
earlier sections argue informally just irreversible cellular geometry needed geometric model concurrency 
completes definition higher dimensional automaton acceptance criterion closely corresponding language acceptance 
induces congruence class automata 
leave study model associated congruence pursuit acceptance criteria congruences subsequent communications 
bir birkhoff 
combination subalgebras 
proc 
cambridge phil 
soc 
bk bergstra klop 
process theory bisimulation semantics 
proc 
rex school workshop linear time branching time partial order logics models concurrency pages noordwijkerhout netherlands 
springer verlag 
bro brown 
topology geometric account general topology homotopy types fundamental groupoid 
press new york 
crew meseguer pratt 
temporal structures 
math 
structures comp 
sci july 
cdp de michelis 
concurrency vs interleaving instructive example 
bulletin eatcs february 
ehr 
categories 
ann 
sci 
ecole norm 
sup 
gir 
girard 
linear logic 
theoretical computer science 
gra grabowski 
partial languages 
fundamenta informaticae iv 
gv van glabbeek vaandrager 
petri net models algebraic theories concurrency 
proc 
parle ii lncs pages 
springer verlag 
hu hopcroft ullman 
automata theory languages computation 
addison wesley 
joh johnson 
pasting diagrams applications coherence theorems categories paths 
phd thesis dept pure mathematics sydney university october 
ks kelly street 
review elements categories 
lnm 
springer verlag 
lam lamport 
interprocess communication 
distributed computing 
mil milner 
calculus communicating systems lncs 
springer verlag 
nielsen plotkin winskel 
petri nets event structures domains part theoretical computer science 
pap papadimitriou 
theory database control 
computer science press 
par park 
concurrency automata infinite sequences 
proc 
theoretical computer science lncs pages 
springer verlag 
pra pratt 
composition processes 
proceedings ninth annual acm symposium principles programming languages january 
pra pratt 
modeling concurrency partial orders 
int 
parallel programming february 
pri priestley 
representation distributive lattices 
bull 
london math 
soc 
rot 
rota 
valuation ring distributive lattice 
proc 
univ houston lattice theory conf 
dept math univ houston 
shi shields 
deterministic asynchronous automata 
neuhold editors formal models programming 
elsevier science publishers 
north holland 
sto stone 
theory representations boolean algebras 
trans 
amer 
math 
soc 
sto stone 
topological representations distributive lattices brouwerian logics 
pest 
math 
str street 
algebra oriented simplexes 
journal pure applied algebra 
vg van glabbeek 
comparative concurrency semantics refinement actions 
phd thesis vrije universiteit te amsterdam may 
van glabbeek goltz 
partial order semantics refinement actions necessary sufficient appropriate care 
bulletin eatcs june 
whi whitehead 
combinatorial homotopy bull 
amer 
math 
soc 
whi whitehead 
elements homotopy theory 
springer verlag 
win winskel 
events computation 
phd thesis dept computer science university edinburgh 

