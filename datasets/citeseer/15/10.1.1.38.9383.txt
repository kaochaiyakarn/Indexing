appear proc 
lics fl ieee computer society press new approach syntax involving binders murdoch gabbay cambridge university cambridge cb sb uk gabbay com andrew pitts cambridge university computer laboratory cambridge cb qg uk ap cl cam ac uk fraenkel mostowski permutation model set theory atoms fm sets serve semantic basis meta logics specifying reasoning formal systems involving name binding ff conversion capture avoiding substitution 
show fm set theory express statements quantifying fresh names give novel set theoretic interpretation name abstraction 
inductively defined fm sets involving name abstraction set cartesian product disjoint union correctly encode object level syntax modulo ff conversion 
way standard theory algebraic data types extended encompass signatures involving binding operators 
particular associated notion structural recursion defining syntax manipulating functions capture avoiding substitution set free variables notion proof structural induction remain close informal practice 

message modest change classical set theory yield benefits meta theory formal systems involve name binding 
course change undertaken lightly critique current state art 
oriented particular meta theory concerns formalisation quite probably machine assistance proofs operational semantics programming languages 
background theory practice specifying reasoning syntactical structures involve binding constructs understood 
theory involves indispensable concepts user declared algebraic data types inductively defined sets structural recursion data proof structural induction practice seen general purpose systems machine assisted proof 
algebraic binders machinery applied syntax involve binders case yields overly concrete representations large numbers essentially routine constructions proofs renaming bound variables capture avoiding substitution done re done object language case basis 
large machine checkable proofs feasible sophisticated approach called 
approach involves representing object level variables variables meta language typed calculus 
shifts renaming substitution meta level properties established 
higher order syntax hoas approach idea going back church way current logical frameworks proof assistants 
big drawback original form looses ability define functions syntax structural recursion prove properties structural induction absolutely essential tools intended applications operational semantics 
proposals overcome shortcoming 
result systems technically interesting force designer algorithms proofs modulo ff conversion forms expression view far familiar informal practice 
hoas approach nature disallows feature regard key practical importance ability manipulate names bound variables explicitly computation proof 
course introduce type names hoas signature example done authors say main drawback hoas difficulty dealing metatheoretic issues concerning names consequence metatheoretic properties involving substitution freshness names proved inside framework postulated 
precisely problems names claim approach overcomes simple way 
similar criticisms apply approaches binding de bruijn nameless terms categorical combinators machine implementations argue representations intended machine assisted human reasoning 
hoas approach moving ff conversion substitution meta level just promote leaving notions substitution defined structural recursion case case basis 
bad compromise show permits nice calculus bound names notions structural recursion structural induction constructs modulo renaming 
extensional framework expressive power classical set theory remains close informal practice forms expression 
focus ff conversion close spirit gordon melham axiomatise type untyped terms modulo ff conversion church higher order logic 
take foundational approach necessary properties renaming part underlying set theory higher order logic believe set theory basis approach described develop formulation 
results notions structural recursion induction simpler cf 
example 
contributions motivate fraenkel mostowski permutation model sets fm universe call considering operation permuting variables expression relation ff conversion theorem 
fundamental notion finite support recalled section define quantifier fresh names definition 
concepts key definition apparently new set theoretic notion name abstraction definition 
importance justified observation theorem specific example data types syntax modulo ff conversion correctly modelled sets fm universe inductively defined operators built new abstraction set combination usual operators disjoint union cartesian product 
way standard initial algebra semantics algebraic data types extended encompass signatures involving binding operators 
notions finite support quantification fresh names fm universe enable formulate versions structural recursion induction signatures binders 
give examples section 
section sketches relationship approach modelling variable binding syntax presheaf categories 
section mentions things remain done develop set theoretic modelling syntax involving binders 
main motivations produce meta logic specifying reasoning syntax semantics programming languages involving binding constructs close informal practice comes crucial matter structural recursion induction 
claim ideas introduced provide interesting raw material lines emphasised potentially difficult issues proof engineering lie notion abstraction fm universe application mechanised proof assistants 

renaming fraenkel mostowski devised permutation model order prove independence axiom choice ac axioms set theory atoms decades cohen proved harder result independence ac set theory atoms zf celebrated forcing method see section brief survey matters application model far purpose 
motivate consider paradigmatic example terms untyped lambda calculus take elements inductively defined set syntax trees def var app theta lam theta fixed countably infinite set elements call atoms names term overloaded consider versions notion variable renaming elements capture avoiding substitution free occurrences fa agm textual substitution free occurrences delta interchange occurrences free bound binding third version possibly unfamiliar fact basic firstly need know constructors defining binders order define secondly define ff conversion result shows cf 
uses fa ag gamma place delta gamma purpose 
theorem 
recall ff conversion ff usually defined congruence identifies lam lam 
ff coincides binary relation inductively generated axioms rules 
var var app app delta delta lam lam occur proof 
hard see delta gamma preserves ff ff closed axioms rules defining contained ff converse follows proving congruence relating lam lam follows facts delta gamma preserves occur delta theorem suggests matters variable binding phrased terms operation delta gamma familiar operation variable substitution textual fa agm capture avoiding 
note transposition instance general operation permuting atoms bijection result write delta permutation action permits formalise essence notion variable properties syntax sensitive distinctions variable names particular names 
put formally equivariance property sentences oe syntax oe oe delta validity course depends nature oe crucially fact free variables oe listed notions belong rich mathematical theory sets equipped permutation action draw 
important note theory inapplicable try base development arbitrary injective functions atoms atoms permutations 

fm sets group recall set set equipped action definition function mapping pairs theta elements delta satisfying id delta delta delta delta id group identity 
group multiplication 
need notion case group permutations set 
section need consider products groups 
note set define delta set lambda terms previous section set action defined recursively delta var def var delta app def app delta delta delta lam def lam delta sets important finiteness property elements involve finitely different atoms 
key notion expresses property purely terms action applied set concretely terms syntax trees 
definition finite support 
set 
subset supports delta say finitely supported finite supporting fact prove finitely supported smallest finite subset supporting call support denote supp leaving implicit set referred 
say atom apart write supp 
recall usual von neumann cumulative hierarchy sets 
build notions permutation action finite support property set theoretic universe replacing fraenkel mostowski universe definition class class action satisfying pow fs disjoint union pow fs iff finitely supported action delta delta sg 
elements called fm sets set atoms 
fm universe built union stages successor ordinal take finitely supported subsets previous stage copy stage comes equipped action making elements finitely supported 
note fm set closed permutation action supp 
notion support fm set quite subtle 
note particular supp may differ set atoms tc transitive closure example supp tc contains copy zf universe fm sets transitive closure tc disjoint call pure fm set 
usual constructions zf carried fm build various sets 
particular set natural numbers usual constructions cartesian products disjoint unions power 
axiomatic fm set theory develop properties fm universe convenient setting set theoretic constructions guaranteed preserve finite support property keep 
achieve suitable theory atoms fm sets classical order logic equality 
theory zf set theory atoms see example 
signature containing binary relation symbol membership constant set atoms 
axiom expressing fact non atoms elements axioms zf set theory certain quantifications qx gamma restricted qx gamma range just sets sets atoms 
axioms appendix 
capture basic set theoretic properties saying specific properties set atoms permutation action 
properties relevant intended application depend fact countably infinite element finitely supported sense definition 
get properties adding axiom 
definition theory fm 
define fm order theory obtained adding axioms finite pow fin fresh write pow fin indicate suitable formula language expressing finite subset similarly stands suitable formula expressing notion definition see appendix noting theory generalises fm sorts atoms 
turn requires express language permutation action express result delta transposing atoms done recursion see appendix details 
model theory fm just infinite set element finitely supported 
fm ac 
careful formulations definition capture avoiding substitution quite choice function picking fresh variables see section example 
vague feeling concrete choices irrelevant fact choice functions inconsistent fm contradicts axiom choice ac 
example axiom finite implies set subsets set non empty sets choice function argument fact graph function pow fin 
finitely supported shows 
proof assistants set theory higher order logic include hilbert choice operator oe provide anonymous notations terms defined formulas see section 
operator prove ac add fm inconsistency 
consistent useful augment language fm notation terms uniquely defined formula 
follows implicit theory fm reduced spare language axioms avoid order obscure ideas 
quantifier consequences finite support property fm sets neatly expressed terms quantifier newness atoms 
definition 
cof denote fm set subsets fm set finite 
formula oe language fm write oe formula expressing fa oeg cof 
quantifier means finitely atoms 
nature set atoms endows quantifier special properties 
thing fm subset finite support hard see finite 
cof gamma commutes conjunction disjunction negation 
true lemma 
formula oe list distinct variables language fm consider formulas 
oe oe oe conjunction formulas variable list 
fm free variables oe contained ag case formulas provably equivalent fm 
proof 
proof finite support property particular fact fa xg cof 
implication need fm satisfies equivariance property 
proof rules 
extract elimination rules quantifier lemma provided uses sequents tagged sets possibly free variables common practice categorical logic sequents form gamma oe gamma finite set formulas oe formula finite set variables containing occurring freely gamma oe 
derive rule form gamma oe gamma oe cf 
usual rule elimination rule form gamma oe gamma oe gamma cf 
elimination 
rules means finite set properly extending variable view lemma justified reading oe new atom case oe 
simultaneous flavour quantifier exactly fit situations statement freshness variables required choose fresh variable particular property may need fact variable 
see subsequent sections put quantifier 

abstracting atoms section saw ff conversion formulated terms notions permuting variables non occurrence predicate 
section notions lifted particular data type terms enveloping universe sets 
consider ff conversion sets means arriving new set theoretic notion abstraction 
analogy relation theorem characterise ff conversion terms consider binary relation theta def delta delta hard see equivalence relation 
denote equivalence class pair call abstraction determined 
see 
form abstraction information hiding data types turns behave pair identity hidden 
quite remarkably abstractions embody notion abstraction function analogous occurring higher order syntax lemma shows 
write subclass consisting unary partial functions satisfies easily verified fact axiom collection obtains 
lemma abstractions functions 
abstraction element support supp supp fag 
write abs subclass consisting abstractions ranges 
lemma abs function construction domain definition dom subset fact show dom set fag supp lemma supp 
abs apply function atom satisfying obtain element call concretion abstraction abstraction fact uniquely determined concretions prove fm abs definition abstraction set 
fm set fm set abstractions elements def ff abs xg application axiom collection needed see set proper class finitely supported supp supp 
elements abstractions satisfying rest concerned case supp case condition vacuously satisfied 
notation gamma gamma abstraction set elements ambiguous atom 
gamma construct combination cartesian product disjoint union form inductively defined fm sets allow view sets syntax modulo ff conversion algebraic data types kind close classical theory syntax binders 
give paradigmatic example untyped terms modulo ff section 

example ff inductive fm set recall little theory inductively defined sets simple case finitary set operators 
function mapping fm sets fm sets definable formula fm monotone preserves unions countable ascending chains fixed point exists call inductively defined fm set determined denote 
constructed familiar tarski formula 
follows definition gamma monotone preserves unions countable ascending chains fm sets 
combination functions cartesian product theta disjoint union form inductively defined fm sets 
example consider ff def var ff app ff theta lam ff section notation disjoint union injection functions named explicitly var ff app ff lam ff case 
theorem ff inductive fm set 
consider fm set untyped terms inductively defined 
ff fm set equivalence classes modulo equivalence relation ff conversion bijection inductively defined fm set ff proof 
combine proof theorem definition gamma 
free variables 
bijection theorem set names free variables ff equivalence class terms identified support sense definition corresponding element ff see example 
particular ft ff supp corresponds subset closed terms modulo ff initial algebra semantics cartesian product disjoint union abstraction set gamma object part functor fm sets functions action function function maps unique abstraction satisfying 
function fm sets built gamma theta gamma gamma gamma gamma functorial standard argument shows associated inductively defined initial algebra functor 
words unique commutes 
particular corollary 
fm set ff terms modulo alpha conversion initial algebra functor gamma theta gamma gamma 
usefulness initial algebra property inductively defined fm sets increased analysing nature functions abstraction sets example specifying algebra gamma gamma theta gamma gamma amounts giving functions theta know induced quotient mapping 
function theta lemma shows concepts finite support quantifier section provide answer 
lemma 
functions theta necessarily unique satisfying iff satisfies condition condition captures idea value induced function independent choice lemma specifies just fresh tell effect element way defined 
combining initial algebra property ff theta lemma obtain principle structural recursion terms modulo ff conversion 
compare recursion scheme section 
similar principle derived inductively defined fm sets involving abstraction set 
theorem ff structural recursion 
functions theta theta ff theta ff theta theta ff satisfying ff unique ff var ff ff app ff ff lam ff support contained supp supp supp sup 
corollary ff structural induction 
subset ff prove ff suffices show var ff app ff lam ff structural induction principle correspond closely informal inductive arguments ff equivalence classes terms proceed picking representatives applying structural induction level syntax trees leaving mute tedious proofs choices affect argument 
effect restricting equivariant properties cf 
fm set theory ensures choices representatives way affect meaning 
rest section give simple examples 
example capture avoiding substitution 
ff theorem take ff suitable choices functions deduce function sub unique element ff ff satisfying var ff var ff ff app ff app ff ff lam ff lam ff condition satisfied case lemma holds properties follows bijection theorem elements ff ff equivalence classes terms sub corresponds capture avoiding substitution function gamma 
property substitution terms free occurrences due free occurrences analogue ff property statement sub holds proved structural induction ft ff sub corollary 
lemma ff sub holds ff lemma 
sub induces function ff ff ff way get substitution function oe ff theta ff ff satisfying ff theta ff oe sub 
cf 
substitution function oe ffi theta section 
example size function 
theorem suitable choices functions deduce unique function ff satisfying var ff ff app ff ff lam ff condition satisfied case reason previous example 
lemma property equivalent ff lam ff part theorem supp particular determine empty support 
strengthen defining clause ff lam ff formalism allows express easily properties expect size function ff equivalence classes terms 
compare example complications encountered gordon melham defining similar function recursion axiomatisation ff conversion section 
principle structural recursion embodied theorem requires specify functions correct type verify condition 
previous examples condition satisfied simply support different kind example 
example set free atoms 
hard see support finite set atoms pow fin just 
support fag 
theorem pow fin making suitable choices functions follows unique function ff pow fin satisfying var ff fag ff app ff ff lam ff fag clause strengthened argument previous example 
function gives structurally recursive definition finite set free atoms elements ff structural induction corollary show ff fact supp cf 

example bound atoms 
function ba ff pow fin picking finite set bound atoms elements ff sense satisfies ba var ff ff ba app ff ba ba ff ba lam ff fag ba theorem define function case condition require fag pow fin certainly false 
argue contradiction see function exists necessarily finite support picking atoms support delta ba ba lam ff var ff satisfies ba fag fa delta fag delta ba ba supp ba supp fag contradicting choice results section extended deal signatures ary operators arguments ary abstraction binding signatures considered section 
fm set inductively defined set operator suitable sum products iterations gamma operator bijection set terms modulo ff conversion signature 
fm set initial algebra functor associated set operator shape read principles structural recursion induction 
sorted signatures dealt fm sets mutually inductively defined operators 
approach adapted expressing usual forms recursion induction syntax time dealing freshness variables variable renaming systematically meta level 
course needs done establish utility fm versions structural recursion induction principles consider possibilities section 
regard sheer simplicity examples compared analogous examples formalisms sign 

relation presheaf models origin lies calculus calculus higher order functions dynamically created names introduced second author stark see 
stark studies model calculus moggi dynamic allocation monads presheaf category set category finite ordinals injective functions 
crucial ingredients dynamic allocation monad object names inclusion functor 
set shift functor ffi set set ffix 
ingredients occur modelling calculus names set modelling variable binding syntax presheaf categories set considered 
somewhat overlooked model calculus mentioned examples full subcategory set objects pullback preserving functors 
equivalent known topos called topos category continuous sets topological group permutations countably infinite set subspace baire space see lemma section iii 
put concretely point objects topos sets element finite support definition morphisms equivariant functions 
hand topos relates fm universe usual cumulative hierarchy relates topos sets see category theory universes sets hand topos sheaf presheaf category set inclusion sending fm set atoms object names 
set abstraction operator gamma shift functor ffi gamma mentioned 
presheaf toposes topos categories equipped faithful functor set support initial algebra semantics signatures binding 
topos associated fm set theory advantage presheaf toposes 
known toposes correspond theories extensional higher order intuitionistic logic 
presheaf toposes general topos models classical intuitionistic higher order logic furthermore higher order structure function power objects easy calculate compared presheaf categories 
looking single general purpose setting modelling variable binding syntax logic topos bit powerful familiar 
view establishing things nice categorical algebra de view variable binding substitution 
motivated desire useful logic explicit bound names mainly formalise existing common practice logic serve basis proving de bruijn formulations correct respect concrete representations 
crucial notion finite support leading quantifier fm set theoretic notion abstraction toposes presheaf toposes 
chosen set theoretic topos theoretic presentation think accessible fundamental ideas underlie topos 

directions splitting set atoms support syntax involving finitely different sorts variables mild generalisation fm universe 
fix infinite set disjoint countably infinite sets atoms form universe section def pow fs sets classes subgroup consisting permutations respect partition isomorphic product group sa clearly affects meaning relation replace gamma gamma respectively corresponding generalisation order theory fm theory fraenkel mostowski set theory sorts atoms fms appendix 
example fms mutually inductively defined sets types type terms term girard system modulo renaming bound type variables bound variables 
definition parameterised sets atoms type variables variables respectively 
type tyvar term var fun type theta type lam type theta term type app term theta term gen term spec term theta type equivariant sos believe fm set theory useful setting developing programming language semantics structural operational semantics 
syntax directed rule inductive definitions relations quite contain side conditions freshness variables hope assimilated manipulated conveniently quantifier introduced 
logic programming style miller nadathur involving quantifier may possible 
possible approach help extend functorial operational semantics encompass languages involving binders 
fm type theory extensional set theory means setting consider notions permutation action finite support believe simplest place start 
begun investigate approach look setting constructive type theory meta programming 
thing evident definition generalises dependently typed version abstraction def ff abs bears relationship quantifier dependent function types pi bear universal quantification 
interesting possibility build information relation types settheoretic interpretation def fx xg opens possibility giving decidable approximation relation part type system 
allows introduce term generalising quantifier gamma gamma new gamma xn gamma type environment xn xn spirit letter goal aiming sml language meta programming combines user declared data types primitives atomic types sorts atoms abstraction types practically important part language pattern matching definitions recursively defined functions data types binding patterns values abstraction types freshness conditions enforced statically type system 
example declarations datatype alist nil cons alist datatype term var app term term lam term non existent language usual declaration list append function append alist theta alist alist want declarations functions rem anonymously removing atom list atoms fv free variables term fun rem nil nil cons rem cons fa cons rem fun fv var cons nil app append fv fv lam rem fv type check types rem alist alist fv term alist cf 
example 
note repeated variables atomic type patterns equality atoms decidable 
qualified patterns cons fa enforce distinct 
hand declaration fun bv var nil app append bv bv lam cons bv type check reasons example 

fraenkel mostowski permutation model years old put new 
idea want treat syntax renamings variables hardly original theory really takes combines idea subtle notion finite support inherent model 
introduced useful quantifier fresh names new set forming operation name abstraction gamma properties better function space 
gamma model name abstraction 
things saw theory inductively defined fm sets notion abstraction correctly model ff equivalence classes variable binding syntax remaining pleasantly close familiar theory order algebraic data types 
burstall 
proving properties programs structural induction 
computer journal 
church 
formulation simple theory types 
journal symbolic logic 

curien 
categorical combinators sequential algorithms functional programming 
birkhauser 
de bruijn 
lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 

math 
despeyroux pfenning 
primitive recursion higher order syntax 
tlca lncs vol 
pages 
springer verlag 
fiore moggi sangiorgi 
fully model calculus extended 
th annual symposium logic computer science pages 
ieee computer society press washington 
fiore plotkin turi 
syntax variable binding 
volume 
fourman 
sheaf models set theory 
journal pure applied algebra 

girard 
interpretation fonctionelle elimination des coupures dans ordre 
phd thesis universite paris vii 
de doctorat etat 
goguen thatcher wagner wright 
initial algebra semantics continuous algebras 
jacm 
gordon melham 
axioms 
tphols lncs vol 
pages 
springer verlag 
gordon melham 
hol 
cambridge university press 
gunter 
semantics programming languages structures techniques 
mit press 
hofmann 
semantical analysis higher order syntax 
volume 
honsell miculan 
calculus inductive type theory 
technical report dipartimento di matematica informatica universita degli studi di udine 

axiom choice 
barwise editor handbook mathematical logic pages 
northholland 
jeffrey 
theory bisimulation local names 
volume 
johnstone 
quotients decidable objects topos 
math 
proc 
cambridge philosophical society 
joyal moerdijk 
algebraic set theory 
cambridge university press 
lambek scott 
higher order categorical logic 
cambridge university press 
lamport paulson 
specification language typed 
technical report digital src 
maclane moerdijk 
sheaves geometry logic 
topos theory 
springerverlag 
martin lof 
intuitionistic type theory 
bibliopolis napoli 
mcdowell miller 
logic reasoning higher order syntax 
th annual symposium logic computer science pages 
ieee computer society press washington 
miller 
extension ml handle bound variables data structures preliminary report 
proceedings logical frameworks bra workshop 
miller nadathur 
logic programming approach manipulating formulas programs 
th annual symposium logic computer science pages 
ieee computer society press washington 
milner tofte harper macqueen 
definition standard ml revised 
mit press 
mitchell plotkin 
types existential types 
acm transactions programming languages systems 
moggi 
view programming languages 
lecture notes pp 
paulin mohring 
inductive definitions system coq rules properties 
bezem groote editors tlca lncs vol 
pages 
springer verlag 
pfenning 
elf language logic definition verified metaprogramming 
th annual symposium logic computer science pages 
ieee computer society press washington 
pitts stark 
observable properties higher order functions dynamically create local names new 
mfcs lncs vol 
pages 
springer verlag 
pitts stark 
observable properties higher order functions dynamically create local names preliminary report 
workshop state programming languages copenhagen pages 
acm sigplan 
yale univ dept computer science technical report yaleu dcs rr 
plotkin 
structural approach operational semantics 
technical report daimi fn aarhus university 
shoenfield 
axioms set theory 
barwise editor handbook mathematical logic pages 
northholland 
stark 
names higher order functions 
phd thesis university cambridge 
stark 
categorical models local names 
lisp symbolic computation 
stark 
fully domain model calculus 
th annual symposium logic computer science pages 
ieee computer society press washington 
stoughton 
substitution revisited 
theoretical computer science 
turi plotkin 
mathematical operational semantics 
th annual symposium logic computer science pages 
ieee computer society press washington 
appendix axiomatic fms set theory fms single sorted theory order predicate calculus equality signature consists binary relation constants axioms follows 
axioms sets 
extensionality 
separation oe free oe 
induction oe oe oe 
collection oe oe 
pairing 
union 
powerset 
infinity structure set atoms 
disjointness finite pow fin freshness property fresh stands pow fin delta term pow fin denotes set finite subsets standard set theoretic definition 
formula uses terms delta transposition atoms defined recursion delta fa delta xg 
