appear volume visualization graphics symposium proceedings 
accelerating time varying hardware volume rendering tsp trees color error metrics david nasa ames research center ling jen chiang nasa ames research center han wei shen department computer information science ohio state university describes new hardware volume rendering algorithm time varying data 
algorithm uses time space partitioning tsp tree data structure identify regions data spatial temporal coherence 
coherence rendering algorithm improve performance volume data larger texture memory capacity decreasing amount textures required 
coherence allow improved speed appropriately rendering flat shaded polygons textured polygons rendering transparent regions 
reduce polygonization overhead caused hierarchical data structure fast incremental polygon slicing algorithm 
introduces new color error metrics accurately identify coherent regions compared earlier scalar metrics 
showing experimental results runs different data sets error metrics demonstrate new methods give substantial improvements volume rendering performance 
cr categories subject descriptors computer graphics picture image generation display algorithms additional keywords scalar field visualization volume visualization volume rendering time varying fields graphics hardware 
time varying data sets common difficult visualize volume rendering size 
volume rendering accelerated texture mapping standard graphics hardware 
volume rendering algorithm accelerators loads volume data texture memory textures series polygons part volume rendering process 
texturing hardware uses dedicated memory hold texture data 
accelerators render textures larger dedicated memory rendering reduced performance texture data moved main memory accelerator memory 
limitation particularly affects time varying volumes tend large 
better dedicated volume memory increase amount volume data rendered full speed 
volumes portions vary coherent certain nasa ames research center mail moffett field ca nas nasa gov nasa ames research center mail moffett field ca nas nasa gov department computer information science ohio state university neil ave lab columbus oh cis ohio state edu regions 
time varying volumes regions vary series time steps 
spatial temporal regions coherence exploited data structure introduced shen time space partitioning tsp tree 
data structure new rendering algorithm show regions spatial coherence rendered untextured polygons associated texture memory freed 
data structure detect regions entirely transparent skipped rendering 
regions temporal coherence shared time steps saving texture memory 
addition reduction memory means smaller amounts textures need created speeding texture creation process 
decision untextured polygons share regions volume memory computing error metrics hierarchy regions subvolumes indicate amount spatial temporal coherence 
runtime user specifies spatial temporal error tolerances 
regions error tolerances greater error metrics rendered flat shaded polygons voxels previous time step 
specifying zero error tolerances result renderings data equal actual data result smaller memory requirement cases 
error metrics described earlier tsp scalar values voxels 
scalars mapped colors transfer function amount coherence scalar values unrelated amount coherence colors 
introduces color error metrics improve selection texture volumes loaded texture memory 
color error metrics described 
uses statistics earlier voxel color values 
second metric uses metrics approximations metric 
metric quite slow minutes compute included show second metric performs similarly approximation 
second metric takes fraction second compute allows interactive modification transfer function 
remainder structured follows 
section reviews related section provides review tsp tree data structure algorithm section describes tsp trees hardware volume rendering 
section discusses error metrics considered sections cover experiments performed results 
related earlier efforts data coherence accelerate volume rendering 
general types coherence usually observed time varying volume data set 
called spatial coherence refers fact voxels adjacent regions appear volume visualization graphics symposium proceedings 
tsp tree skeleton octree tsp tree nodes binary time tree 
example timevarying field time steps 
tend values close 
temporal coherence refers fact voxels tend change drastically time step 
past researchers proposed hierarchical data structures exploit coherence speeding rendering steady state volumes 
hanrahan proposed hierarchical splatting algorithm pyramid data structure store voxels mean value standard deviation different subvolumes 
user supplied error tolerance octree fit pyramid traversal octree allows different regions volume drawn different resolutions 
shen proposed hierarchical data structure called time space partitioning tsp tree decouples characterizations temporal spatial coherence allows efficient rendering timevarying volume data 
discussed detail section 
approach significantly speed volume rendering texture hardware 
essence texture hardware perform volume rendering generating sequence slicing planes perpendicular viewing direction texture hardware map colors opacities underlying data attributes planes 
sequence parallel planes composited back front visibility order generate final image 
yagel proposed algorithm efficiently generate slicing planes incremental slicing 
proposed texture hierarchies spherical shells render large data sets 
methods allow fast volume rendering large data sets 
rendering time varying data requires fast texture animation discussed 
time space partitioning trees uses time space partitioning tsp tree data structure algorithm proposed shen capturing temporal spatial coherence time varying data 
skeleton tsp tree standard complete octree recursively subdivides volume spatially size subvolume predefined threshold 
node octree skeleton binary time tree recursively bisects time varying data set time span 
depicts dimensional version tsp tree tree nodes form binary time tree 
nodes binary time tree store temporal spatial error metrics 
tsp tree implementation includes statistics corresponding subvolume time span mean minimum maximum scalar values standard deviation 
earlier spatial error metric coefficient variation normalized standard deviation voxels 
quantify subvolume temporal error time span mean individual voxels coefficients varia void octree traverse span time tree root traverse span failed add list subvolume current octree node span leaf current octree node add list subvolume current octree node curr time step octree child current octree node octree child octree traverse traverse time tree node temporal error temporal tol leaf current octree node return current node time span time tree node spatial error spatial tol return current node time span leaf current node return failed return child curr timestep traverse leaf current node return failed return child curr timestep traverse tsp tree traversal algorithm 
tion time 
temporal error measurement effective capturing subvolumes change dramatically presence high spatial variation 
time varying volume data set tsp tree constructed updated data error metric calculations changes 
tree constructed updated repeatedly 
tsp tree traversal algorithm traverses tsp tree octree skeleton binary time tree associated encountered octree node shown 
rendering frame tsp tree traversed identify set subvolumes cover entire volume 
subvolume chosen cover largest spatial temporal extent satisfy user supplied spatial temporal error tolerances 
tolerance spatial error provides stopping criterion octree time tree traversal 
traversal descends octree skeleton checking error tolerance allows subvolume corresponding current node added subvolume list 
octree traversal different time tree traversal octree traversal descends entire volume covered time tree traversal follows time spans enclosing current time step 
shen tsp tree data structure accelerate software ray casting algorithm time varying data 
rendering algorithm collects subvolumes meet specified spatial error tolerance 
renders subvolumes independently partial image 
final image constructed compositing colors opacities partial images 
implementation partial images subvolumes high temporal coherence cached 
time span subimage saved 
user chooses render volume different time step tree traversal process performed 
traversals viewing parameters remain subvolume high temporal coherence encountered subimage cached previously re usable cached image directly re rendering subvolume entirely skipped 
experimental studies utilization previously cached images due high temporal coherence significantly reduce rendering time overhead 
appear volume visualization graphics symposium proceedings 
tsp trees hardware volume rendering rendering algorithm described ray casting implementation modified hardware volume rendering texture mapping 
tsp tree construction algorithm need changed initial traversal algorithm need changed 
tsp tree traversed rendering time gather list subvolumes rendered 
subvolumes may larger spatial extent octree leaf nodes spatial error tolerance caused traversal algorithm terminate early 
subvolumes may represent time steps temporal error tolerance caused early termination 
list subvolumes collected subvolumes rendered 
subvolumes meet spatial error tolerance rendered flat shaded polygons 
advantage graphics systems render flat shaded polygons faster textured polygons associated texture memory saved 
time load volume data texture memory saved 
subvolumes rendered textured polygons 
subvolume meets temporal error tolerance represents time span subvolume uses texture defined time step span 
mechanism causes textures shared time steps 
tsp trees standard texture volume rendering algorithm changed ways 
change volume data rendered subvolume time subvolume set slicing polygons allow flat shaded versus textured polygon decision texture sharing decision subvolume basis 
done standard hardware volume rendering algorithm slicing single subvolume entire data set 
second major change order defined subvolumes subvolumes rendered back front order 
order determined octree traversal selecting correct traversal order children node 
fang devised solution parallel projections examines signs components view direction vector chooses fixed orderings 
algorithm overhead tsp trees hardware volume rendering important performance benefits additional costs 
cost overhead traversing octree data structure cost minimal typically tens hundreds octree nodes 
second cost increased number duplicated voxels subvolume boundaries 
hardware volume rendering algorithms divide volume data subvolumes data larger texture memory 
algorithms create large subvolumes small fraction duplicated voxels boundaries 
tsp tree algorithm uses small subvolumes increases fraction duplicated voxels 
subvolumes voxels duplicate voxels subvolumes duplicate voxels 
slicing polygons third largest additional cost tsp algorithm increased number slicing polygons 
slicing polygons compared number single volume hardware rendering algorithms single volume polygons broken subvolume boundaries algorithm 
additional polygons require time calculate done view direction changes 
additional polygons may take additional rendering time polygons sent graphics system transformed 
additional polygons change number pixels rendered subvolume slicing polygons merged form slicing polygons volume 
cost generating additional polygons reduced methods 
approach save polygons frames generate view direction changes 
improve performance time animations viewpoint changes 
second approach reuse calculated polygons subvolumes 
approach generate set slicing polygons different subvolume sizes reuse set polygons subvolume size translating polygons actual location subvolume 
approach requires fewest calculations introduces artifacts single subvolume polygons match subvolume boundaries 
artifacts significant viewpoints 
third approach uses fast incremental slicing algorithm reduce cost calculating slicing polygons 
algorithm quite similar incremental tetrahedra slicing algorithm developed yagel similarities standard scan line polygon rasterization algorithm 
shows high level pseudocode algorithm 
slicing algorithm computes slicing polygons subvolume time 
allows data structures allocated statically stack 
outputs slicing polygons vertices reduces number polygon vertices sent graphics system compared generating triangles 
key part algorithm maintains active edge list list edges intersect current slice 
edge list stores intersection edge current slice intersection vertex current slicing polygon 
active edge list ordered traversal list edges encounters edges stored intersection vertices order occur current slicing polygon 
avoids need compute convex hull vertex polygons 
algorithm maintains array subvolume vertex lists 
array number slices 
element holds list subvolume vertices slice element holds vertices slice 
middle elements holds lists vertices element corresponding pair slices 
subvolume vertices slice list sorted decreasing distance view plane decreasing 
sorting omitted algorithm try process vertex edges connection existing active edge list 
vertices equal values ordered 
algorithm sorts subvolume vertices original subvolume axes perpendicular viewing direction second perpendicular subvolume axis 
algorithm starts computing slopes edge frame 
subvolume computes value subvolume vertices calculates number slices allocates slice bucket headers storage output polygons 
polygon storage allocated allow vertices slicing polygon 
memory reused subvolumes previously allocated memory sufficient 
algorithm loops slice 
iteration algorithm processes subvolume vertices current slice previous slice 
vertex edges initialized edge current active edge list active edge list updated 
different cases handle different numbers edges previously placed active edge list 
appear volume visualization graphics symposium proceedings 
called frame calculate slope edge called subvolume compute value vertex zmin zmax calculate number slices zmin zmax allocate storage vertex buckets slice output clear buckets clear active edge list add vertex vertex buckets sorting vertices bucket slice vertex bucket calculate slice intersection unprocessed edges update active edge list switch number unprocessed edges case vertex edge list empty add edges active edge list break case replace processed edge unprocessed edges break case replace processed edges unprocessed edge break case processing vertex delete active edge list copy slice output memory active edge list increment slice intersection active edge high level polygon slicing pseudocode 
cases handling new edges replace old edges active edge list new edge edges 
avoids having traverse edge list find location insert edge 
edge processing uses static list subvolume vertex edges 
edges listed counterclockwise order looking vertex outside subvolume 
allows edges inserted active edge list correct order 
vertices processed active edge list holds vertices current slicing polygon 
slicing polygon vertices copied output polygon list 
edge intersection point advanced slice adding edge slope current points algorithm starts processing slice 
current polygon slicing implementation fast polygons recomputed frame making cpu time bottleneck 
polygon slicing bottleneck subvolumes smaller algorithm run system cpu slower relative graphics system 
texture caching algorithm optimization reduces rendering time 
opengl function allows textures loaded texture memory retained time step displayed 
deleting time step textures algorithm displays time steps time required display time step reduced shown second subsequent times 
texture caching requires additional logic transfer function error tolerances changed 
values changed previously created textures subvolume slicing planes processing order vertex key insert edges delete edge insert edges delete edges insert edge delete edges slice vertex lists slicing algorithm data structure 
may longer needed deleted 
texture generation code maintain data structures texture management done correctly 
choosing subvolume size tsp tree algorithms important parameter minimum subvolume size 
smaller subvolumes allow smaller regions coherence exploited reducing image quality 
entire subvolume high spatial temporal coherence image quality significantly reducing respectively replaced flat shaded polygons uses time step volume data 
larger subvolumes spatial temporal coherence subvolume means tsp tree optimizations done reducing image quality 
smaller subvolumes associated costs 
cost increase number slicing polygons described 
second cost increased overhead managing textures 
expect large cost opengl implementation shown greatly reduced performance textures 
sloan seen similar limitations 
limit total number textures unable get results subvolumes 
results subvolumes 
error metrics tsp tree algorithm uses types error metrics 
spatial error metrics indicate amount coherence subvolume determine subvolumes rendered textures 
temporal error metrics indicate amount coherence series subvolumes determine subvolumes share textures time steps 
section describes methods calculating types error metrics 
method calculating error metrics bases metrics voxels scalar values called scalar error metrics 
second methods color error metrics actual color voxels 
description error metrics section assumes hardware volume rendering error metrics ray casting implementation shen 
scalar error metrics scalar error metrics ones tsp tree 
metrics calculate coefficient variation appear volume visualization graphics symposium proceedings 
cov standard deviation divided mean 
cov thought normalized version standard deviation 
scalar spatial error metric ess calculated computing coefficient variation scalars voxels subvolume time steps question formulas vi vi ess vi value voxel time step total number voxels subvolume time steps voxel mean voxel standard deviation 
temporal error metric calculated computing cov voxel position subvolume voxels desired time span 
scalar temporal error metric est average voxel cov shown pt vi vi pt est vi vi number voxels subvolume vi mean voxel standard deviation 
error metric similar previous spatial error metric note spatial error metric calculates single cov voxels subvolume time series temporal error metric calculates cov voxel subvolume averages cov time series 
implemented na error metrics require passes voxels compute mean second compute standard deviation 
formulas rearranged require sum voxel values square values shown statistics texts 
scalar metrics depend data precomputed saved octree file 
color error metrics color error metrics accurate color voxel closely related image scalar value 
disadvantage recomputed transfer function changed done interactively 
color error metrics compute statistics voxel color scalar metrics compute statistics voxel scalar value 
equations quite similar call error metrics error metrics 
standard deviation defined vector quantities colors compute squared distance rgb space voxel color mean color set voxels question 
compute distances rgb space higher performance may try computing distances perceptually uniform color space 
squared distance rgb space weighted vi opacity voxel low opacity voxels smaller contribution final image high opacity voxels 
squared distance function takes color vectors normalized range 
weight usually average color zero 
mean color values computed equations similar equation 
combine computing square root alpha weighted distance average color origin 
color mean analogue create color standard deviation analogue replacing squared difference vi equation distance equation 
color spatial error mean replacement divided standard deviation analogue 
formulas ci color temporal error equation computes cov scalar spatial temporal error equation 
analogue voxel mean value ci ci ri gi bi 
mean values computed equations similar equation 
equations standard deviation analog color temporal error metric modified versions equations scalar value difference replaced distance equation 
equations spt ci ci color error metrics large drawback slow 
slow voxel color computed equations evaluated voxel color 
time compute error metric data sets ranged minutes see table details 
computation accelerated optimizing calculation pass 
optimization recalculate metrics subvolumes part lookup table changed editing operation 
second optimization done efficiently precomputing minimum maximum scalar values subvolume 
optimizations speed calculations run interactive rates typical large data sets 
approximate color error metrics section describes approximations color error metrics computed quickly 
shown results section computed fraction second reasonably large data sets give similar results 
appear volume visualization graphics symposium proceedings 
approximation uses fact frequency occurrence fk unique value xk known generic standard deviation equation xi rewritten fk xk approximation count frequency appearances colors population assumes counts normally distributed 
precompute store tsp tree parameters subvolume distribution mean standard deviation scalar values subvolume 
population distribution uses distribution equation gives population estimate transfer function entry equations iterate entries 
population equation exp mean standard deviation equations scalar error metric section scalar value corresponding center transfer function entry define total estimated population subvolume jmax jmin jmin jmax transfer function entries corresponding minimum maximum scalar values subvolume 
iterate equations transfer functions subvolume 
error metric computes difference transfer function entry estimated mean color values 
mean values computed multiplying transfer function entry fraction population expected transfer function entry summing products 
estimated mean red value rest jmax rest jmin red value color entry equations gest best est similar 
final steps computing approximate spatial color error metric compute approximate mean deviation values 
mean combination average color values shown equation 
deviation value uses distance function defined earlier compute distance transfer function entry average subvolume color rest gest best est 
distance transfer function entry weighted population estimate summed 
error metric deviation divided mean 
est est est est est vu jmax jmin error metric computed quickly iterates number transfer function entries implementation 
typical computation times take fraction second shown table 
population estimate approach computing approximate temporal error require storing recomputing mean standard deviation voxel node time tree 
consume storage original data slow compute 
ad hoc approach computes scaling factor turn scalar temporal error metric est color metric 
scaling factor measure amount variation transfer function 
idea large small amount variation magnify minimize amount deviation computed scalar error metric variation measure calculates distance colors successive transfer function entries total scale factor square root sum distances entries 
distance measure earlier equations 
normalization necessary color components normalized range 
equation approximate color temporal error metric est summation transfer function entries excluding entry 
error metric quickly computed variation measure computed color table changes 
individual subvolume error metrics computed multiplying precomputed est subvolume variation measure 
implementation results implemented tsp tree algorithm sets error metrics 
non tsp tree implementation sgi subroutine library 
tsp tree implementation library 
run experiments compare performance tsp trees show improved performance color error metrics 
experiments show error tolerances give user tradeoff image quality performance 
experimental design ran implementations regular structured grid data sets 
data sets delta cfd computations originally computed curvilinear grid 
access native regular data set resampled data sets density values regular grid experiments 
delta data set shows delta wing aircraft flying high angle attack performed single curvilinear grid 
resampled data set different resolutions explore effect data set size 
data set main feature vortex flow wings 
data set computed multiple overlapping curvilinear grids 
density values data show vortex structure leading edge extension breaks passes wing 
third data set shock computed regular grid simulation unsteady interaction planar shock wave randomly perturbed contact discontinuity 
data sets shown figures animations data sets conference cd rom 
table gives statistics data 
texture sizes table byte voxel original data files byte floating point values 
sizes table include effect duplicated pixels subvolume boundaries 
delta data sets run sparse transfer function voxels transparent reveals main appear volume visualization graphics symposium proceedings 
num 
num 
texture sub time size volumes data set steps dimensions mb leaf small delta large delta shock table experimental data sets 
features data 
addition ran experiments delta shock data set filled transfer function voxels positive opacity 
function shows slow variations data spatial error metric classify subvolume coherent 
shown filled transfer function difficult algorithm improve performance 
fortunately volume visualizations fairly sparse transfer functions 
experiments run opengl sgi onyx workstation mhz mips processors gb main memory graphics mb texture memory rm raster manager 
runs minimum subvolume size voxels boundary subvolumes rendered resolution 
slicing plane spacing half voxel size nyquist frequency 
experimental runs viewpoint frames shown figures 
noticed informally frame times vary appreciably data sets rotated 
measured runs error tolerances zero error tolerance slight error tolerance showed barely noticeable artifacts moderate error tolerance showed small noticeable artifacts 
shows images slight moderate error tolerances delta data set filled transfer function 
effects temporal error seen animations conference cd rom 
non zero error tolerances error tolerances types error metrics gave image quality 
complicated fact error tolerance different error metrics produces images different amounts error meant multiple runs search correct error tolerances 
measured image quality computing average distance images zero error tolerance ones error allowed 
distance defined distance color space perceptually uniform color space 
rgb conversions assumed white point 
results tsp tree algorithm color error metrics higher rendering performance non tsp tree sgi implementation higher performance tsp tree algorithm scalar error metrics 
tables show average time required render data set time steps number different configurations 
data shown graphically figures 
table contain statistics average amount coherence exploited algorithm 
table columns error metric show fraction subvolumes pass spatial error tolerance test rendered mean opacity zero rendered polygons 
values percentages voxels avoid possible distortions caused weighting small subvolumes rendering time sec small delta sparse transfer function large delta sparse transfer function shock non tsp ref 
color app 
color average rendering times error metrics error tolerance zero texture caching 
rendering time sec non tsp ref 
color app 
color average rendering times error metrics error tolerance zero texture caching 
rendering time sec large delta cached filled large delta cached filled non tsp ref 
color app 
color average rendering times large delta data set zero error tolerance filled transfer function 
edges volume 
third column error metric gives temporal coherence statistic percentage voxels subvolumes reused earlier time step 
column gives balance voxels ones subvolumes correspond current time step 
non tsp tree vs tsp tree color error metrics 
new color tsp tree algorithm compared previous non tsp tree algorithm specifying zero error tolerance 
results shown table figures 
textures created non cached values results mixed 
non tsp tree algorithm higher performance smaller data sets small delta shock 
data sets voxels fit rendering time sec appear volume visualization graphics symposium proceedings 
small delta sparse transfer function large delta sparse transfer function shock zero slight error tolerance moderate average rendering times error tolerances texture caching 
percentage voxels rendered reused textures new textures zero slight error tolerance moderate voxel statistics small delta sparse transfer function error tolerances 
texture memory tsp tree overhead numerous textures duplicated voxels subvolume boundaries outweighs small savings subvolumes need created 
non cached performance tsp tree algorithm higher large data sets large delta subvolume size smaller relative data set size 
causes larger fraction subvolumes completely filled transparent voxels need loaded texture memory 
zero error tsp tree performance large delta filled transfer function quite low 
tsp tree finds small amount texture memory savings case see table tsp tree algorithm overhead increases time 
performance increases moderate amount error allowed time decreases ms ms tsp tree algorithm non tsp tree time ms performance excellent tsp tree algorithm color error metrics textures created cached 
shown table figures tsp tree algorithm nearly speed faster non tsp tree algorithm 
best performance sparse transfer function seen large data sets large delta 
example rendering time decreases ms ms tsp tree algorithm 
exception transfer ref 
appr 
data set function scalar color color small delta sparse filled large delta sparse filled sparse shock filled table build time seconds 
scalar metrics built color metrics built transfer function change 
large delta filled transfer function texture savings zero error tolerance 
large delta better performance moderate error allowed tsp tree algorithm reduce texture memory requirement frame time ms non tsp tree ms scalar vs color error metrics 
runs color error metrics equal surpass performance ones earlier scalar error metrics introduced shen 
cases rendering runs scalar error metrics took time times included figures distort graphs 
relatively low performance happens scalar error metric actual colors order image quality larger fraction subvolumes rendered textures 
example table shows scalar error metric required subvolumes textured zero error tolerance specified data set rendered sparse transfer function 
color error metrics located transparent subvolumes meant textures need created 
addition transparent subvolumes skipped rendering 
filled transfer function runs scalar error metrics comparable color error metric runs scalar metric runs faster 
effect increasing error tolerance 
increasing error tolerance user trade image quality speed 
shows non cached performance increases error tolerance increases 
performance increases total size textures loaded decreases shown 
new textures box fraction number voxels loaded 
cached performance different non cached performance 
error allowed cached performance increase cases increasing amount error decrease number subvolumes rendered 
texture memory sufficient rendering polygons textured flat shaded way increase performance graphics subsystem subsystem renders flat shaded tri linearly interpolated polygons rate 
cached performance increase large delta filled transfer function 
average rendering time approximate color error metric decreases ms ms moderate error allowed 
happens increased texture coherence reduces texture memory requirements texture memory capacity 
texture caching 
retaining textures increases performance cases 
texture caching increases performance dramatically nearly tsp tree runs 
example small delta rendering time approximate color error metric decreases ms ms textures cached 
time decreases factor large data sets large delta 
cases seen comparing color er appear volume visualization graphics symposium proceedings 
sparse transfer function filled transfer function non tsp scalar ref 
color app 
color non tsp scalar ref 
color app 
color model nc nc nc nc nc nc nc nc small delta large delta shock table rendering times averaged time steps zero error tolerance specified 
columns give times milliseconds scalar color approximate color error metrics textures cached cached nc 
sparse transfer function filled transfer function error scalar ref 
color app 
color scalar ref 
color app 
color model tolerance nc nc nc nc nc nc small slight delta moderate large slight delta moderate slight shock moderate slight moderate table average rendering times error allowed 
columns give times milliseconds scalar color approximate color error metrics textures cached cached nc 
transfer error scalar color approximate color model function tolerance nr rt nt nr rt nt nr rt nt zero sparse slight small moderate delta zero filled slight moderate zero sparse slight large moderate delta zero filled slight moderate zero sparse slight moderate zero shock filled slight moderate table statistics subvolumes rendered percentage voxels case 
key nr rendered subvolume transparent rendered untextured polygons rt rendered reused textures earlier timestep nt rendered new textures textures loaded specifically current time step 
ror metric values figures 
cases cached time higher non cached time 
believe occurs total size textures slightly larger texture memory 
texture loaded graphics subsystem free texture memory textures resident memory may need moved contiguous memory available new texture 
initial texture loading faster loading textures free texture memory faster 
cases better performance achieved disabling texture caching 
larger number cases texture caching effective texture caching dramatically speeds animation time varying data sets 
vs approximate color error metrics 
rendering times subvolume statistics quite similar comparable runs approximate color error metrics 
shows approximations approximate metrics valid data sets tested 
main differences seen runs filled transfer function nonzero error tolerance 
runs error metric causes textures reused approximate color metric see table uses untextured polygons 
error metrics nearly fraction textures texture usage difference causes differences performance 
texture usage differences happen appear volume visualization graphics symposium proceedings 
cause effective way measure perceived spatial temporal image quality independently 
method finding error tolerances comparing image error appears error metrics cause error metrics perform differently 
advantage approximate error metrics recomputed seconds 
time minutes required color error metrics 
recomputation times shown table 
fast recomputation important allows transfer function changed interactively common operation 
timings table give time compute metrics time steps approximate error metrics allow faster response computing metrics needed current time step computing time steps metrics 
fast volume rendering algorithm texture hardware visualizing large scale time varying data sets 
utilizing hierarchical data structure called tsp tree able exploit spatial temporal coherence exists time varying fields substantially reduce amount texture memory required 
fast volume rendering achieved rendering combination flat shaded solid textured polygons flat shaded polygons represent regions having high spatial coherence solid textured polygons represent regions having high variation spatial temporal domains 
fast incremental slicing algorithm reduces overhead generating additional parallel sample planes due multiple subvolumes 
addition developed color error metrics accurately identify spatial temporal coherence compared scalar error metrics existing hierarchical volume rendering techniques 
fast approximate color error metric orders magnitudes faster na error metric enables user change transfer function interactively 
results experimental studies show overcome limitation texture memory capacity significantly speed time varying volume rendering texture hardware 
area possible improved error metrics 
possible improvement compute color differences perceptual color space rgb space 
give accurate error metrics 
rgb perceptual color space conversion adds computation additional computation minimal approximate color error metrics transfer function needs converted 
error metric includes adding population estimates approximate temporal color error metric evaluating error metrics weighting 
second area explore effect subvolume size 
smaller subvolumes coherence exposed algorithm need manage texture memory done sloan 
may advantages error metrics tsp ray casting volume renderer 
acknowledgments supported part nasa contracts nas 
neal ken gee scott ravi providing data sets 
chris henze pat moran members data analysis group nasa ames research center helpful comments technical support 

shen 
chiang 
ma 
fast volume rendering algorithm time varying fields time space partitioning tsp tree 
proceedings visualization pages 
ieee computer society press los alamitos ca 
levoy 
efficient ray tracing volume data 
acm transactions graphics july 
hanrahan 
hierarchical splatting progressive refinement algorithm volume rendering 
proceedings siggraph pages 
acm siggraph 
wilhelms van gelder 
multi dimensional tree controlled volume rendering compression 
proceedings symposium volume visualization pages 
ieee computer society press los alamitos ca 

graphics 
james kajiya editor computer graphics siggraph proceedings volume pages august 
cam foran 
accelerated volume rendering tomographic reconstruction texture mapping hardware 
proceedings symposium volume visualization pages 
wilson van gelder wilhelms 
direct volume rendering textures 
ucsc technical report ucsc crl 
neumann 
accelerating volume reconstruction texture hardware 
unc technical report tr 
yagel reed law 
shih 
hardware assisted volume rendering unstructured grids incremental slicing 
volume visualization symposium pages 
ieee computer society press los alamitos ca october 
hamann joy 
multiresolution techniques interactive textured volume visualization 
proceedings visualization pages 
ieee computer society press los alamitos ca 
fang srinivasan huang raghavan 
deformable volume rendering texture mapping octree encoding 
proceedings visualization pages 
ieee computer society press los alamitos ca 

sloan hansen 
parallel lumigraph reconstruction 
proceedings ieee parallel visualization graphics symposium pages 
ieee computer society press los alamitos ca 
sgi mountain view ca 
opengl programmer guide 
document number 

simulations instability re shock 
bulletin american physical society 
foley van dam feiner hughes 
fundamentals interactive computer graphics page 
addison wesley publishing second edition 

frequently asked questions color 
www net color html december 
sgi mountain view ca 
onyx reality onyx onyx technical report august 
www sgi com onyx tech report pdf 
appear volume visualization graphics symposium proceedings 
large delta zero error tolerance sparse transfer function 
large delta zero error tolerance filled transfer function 
zero error tolerance 
shock zero error tolerance 
large delta slight left moderate right error filled transfer function plus contrast enhanced differences zero error tolerance image 
large delta sparse transfer function lines showing subvolume boundaries 
large subvolumes high spatial coherence 
