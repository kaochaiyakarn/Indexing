software engineering middleware roadmap construction large class distributed systems simplified leveraging middleware layered network operating systems application components 
middleware resolves heterogeneity facilitates communication coordination distributed components 
existing middleware products enable software engineers build systems distributed local area network 
state art middleware research aims push boundary internet scale distribution adaptive reconfigurable middleware middleware dependable wireless systems 
challenge software engineering research devise notations techniques methods tools distributed system construction systematically build exploit capabilities middleware deliver 
various commercial trends lead increasing demand distributed systems 
firstly number mergers companies continuing increase 
different divisions newly merged deliver unified services customers usually demands integration systems 
time available delivery integration short building new system option existing system components integrated distributed system appears integrating computing facility 
secondly time available providing new services decreasing 
achieved components shelf integrated system built scratch 
components integrated may incompatible requirements hardware operating system platforms deployed different hosts forcing resulting system distributed 
internet provides new opportunities offer products services vast number potential customers 
setting difficult estimate scalability requirements 
wolfgang emmerich dept computer science university college london london wc bt uk emmerich cs ucl ac uk commerce site designed cope number transactions day may suddenly find exposed demand orders magnitude larger 
required scalability usually achieved centralized client server architectures demands distributed system 
distributed systems integrate legacy components preserving investment decrease time market scalable tolerant failures 
caveat construction truly distributed systems considerably difficult building centralized client server system 
multiple points failure distributed system system components need communicate network complicates communication opens door security attacks 
middleware devised order conceal difficulties application engineers possible solve real problem simplify distributed system construction middleware products rapidly adopted industry 
order build distributed systems meet requirements software engineers know middleware available best suited problems hand middleware architecture design implementation distributed systems 
principal contribution assessment state practice current middleware products offer state art middleware research 
software engineers increasingly middleware build distributed systems 
research distributed software engineering ignores trend limited impact 
analyze influence increasing middleware software engineering research agenda 
argue requirements engineering techniques needed focus non functional requirements influence selection middleware 
identify software architecture research produce methods guide engineers selecting right middleware employing meets set non functional requirements 
highlight middleware transparent system design design methods needed address issue 
structured follows 
section discuss difficulties involved building distributed systems delineate requirements middleware 
section requirements attempt assessment support current middleware products provide distributed system construction 
overview ongoing middleware research section order provide preview middleware products capable 
section delineate research agenda distributed software engineering builds capabilities current middleware conclude section 
middleware requirements section review difficulties arise distributed system construction 
argue section expensive time consuming application designers resolve problems directly network operating system primitives 
require middleware provides higher level primitives 
approach distributed system construction middleware sketched 
middleware distributed system construction middleware layered network operating systems application components 
middleware facilitates communication coordination components distributed networked hosts 
aim middleware provide application engineers highlevel primitives simplify distributed system construction 
idea middleware build distributed systems comparable database management systems building information systems 
enables application engineers implementation low level details concurrency control transaction management network communication allows focus application requirements 
network communication shown different components distributed system may reside different hosts 
order distributed system appear integrated computing facility components communicate 
communication achieved network protocols classified iso osi model 
distributed systems usually built top transport layer tcp udp examples 
layers underneath provided network operating system 
different transport protocols common transmit messages different hosts 
communication distributed systems programmed level abstraction application engineers need implement session presentation layer 
costly errorprone time consuming 
application engineers able request parameterized services possibly remote components may wish execute atomic isolated transactions leaving implementation session presentation layer middleware 
parameters component requesting service needs pass component provides service complex data structures 
presentation layer implementation middleware provide ability transform complex data structures format transmitted transport protocol sequence bytes 
transformation referred marshalling reverse called unmarshalling 
coordination virtue fact components reside different hosts distributed systems multiple points control 
components host execute concurrently leads need synchronization components communicate 
synchronization needs implemented session layer implementation provided middleware 
synchronization achieved different ways 
component blocked waits component complete execution requested service 
form communication called synchronous 
issuing request component continue perform operations synchronize service providing component point 
synchronization initiated client component example polling case interaction called deferred synchronous 
synchronization initiated server referred asynchronous communication 
application engineers need basic mechanisms support various forms synchronization communicating components 
components involved service request 
forms communications referred group requests 
case component interested events occur component 
example distributed stock ticker application event share price update needs communicated multiple distributed display components inform traders update 
basic mechanisms push style communication available multi cast networking support needed achieve reliable delivery marshalling complex request parameters 
slightly different coordination problem arises due sheer number components distributed system may 
components modules libraries centralized application reside virtual memory application executing 
inappropriate distributed components reasons hosts shut components hosted machines stopped restarted host resumes operation resources required components host may greater resources host provide depending nature application components may idle long periods wasting resources kept virtual memory time 
reasons distributed systems need concept called activation allows component executing processes started activated terminated deactivated independently applications execute 
middleware manage persistent storage components state prior deactivation restore components state activation 
middleware enable application programmers determine activation policies define components activated de activated 
components execute concurrently distributed hosts server component may requested different client components time 
middleware support different mechanisms called threading policies control server component reacts concurrent requests 
server component may single threaded queue requests process order arrival 
alternatively component may spawn new threads execute request thread 
component may hybrid threading policy uses pool fixed number threads execute requests starts queueing free threads pool 
reliability network protocols varying degrees reliability 
protocols practice necessarily guarantee packet sender transmits received receiver order sent preserved 
distributed system implementations put error detection correction mechanisms place cope 
unfortunately reliable delivery service requests service results come free 
reliability paid decreases performance 
allow engineers trade reliability performance flexible manner different degrees service request reliability needed practice 
communication service requests components reliabilities suggested distributed system literature best effort exactly 
best effort service requests give assurance execution request 
requests guaranteed execute 
may happen executed requester notified failure 
service requests guaranteed executed possibly 
highest degree reliability provided exactly requests guaranteed executed 
additional reliabilities defined group requests 
particular literature mentions reliability time outs totally ordered requests 
reliability denotes components receive communication 
time outs allow specification periods delivery request attempted addressed components 
totally ordered group communication denotes request request previous group communication 
reliability discussion applies individual requests 
extend consider request 
transactions important primitives reliable distributed systems 
transactions acid properties means enable multiple request executed atomic consistency preserving isolated durable manner 
means sequence requests performed completely 
enforces completed transaction consistent 
demands transaction isolated concurrent transaction transaction completed effect undone 
middleware critical applications needs support distributed transactions 
reliability may increased replicating components components available multiple copies different hosts 
component unavailable example host needs rebooted replica different host take provide requested service 
components internal state middleware support replication way states kept sync 
scalability scalability denotes ability accommodate growing load 
centralized client server systems scalability limited load server host bear 
overcome distributing load hosts 
challenge building scalable distributed system support changes allocation components hosts changing architecture system design code component 
achieved respecting different dimensions transparency identified iso open distributed processing odp model architecture design system 
access transparency example demands way component accesses services component dependent local remote 
example location transparency demands components know physical location components interact 
detailed discussion different transparency dimension scope reader referred 
components access services knowing physical location changing way request load balancing mechanisms migrate components machines order reduce load host increase host 
transparent users migration occurred 
referred migration transparency 
replication load balancing 
components services high demand may exist multiple copies 
replication transparency means transparent requesting components obtain service master component replica 
different transparency criteria lead scalable systems difficult achieve distributed systems built directly network operating system primitives 
overcome difficulties demand middleware support access location migration replication transparency 
heterogeneity components distributed systems may offthe shelf may include legacy new components 
result heterogeneous 
heterogeneity comes different dimensions hardware operating system platforms programming languages middleware 
hardware platforms different encodings atomic data types numbers characters 
mainframes character set unix servers may bit ascii characters windows pcs bit unicode character encodings 
character encoding alphanumeric data sent different types platforms adjusted 
likewise mainframes risc servers example big endian representations numbers significant byte encoding integer long floating point number comes 
pcs little endian representation significance bytes decreases 
number sent little endian host big endian host vice versa order bytes number encoded needs swapped 
heterogeneity resolved middleware application engineer 
integrating legacy components newly built components occurs different programming languages need 
programming languages may follow different paradigms 
legacy components tend written imperative languages cobol pl newer components implemented object oriented programming languages 
different object oriented languages considerable differences object model type system approach inheritance late binding 
differences need resolved middleware 
shall see section just approaches middleware 
availability different middleware solutions may selection problem optimal single middleware multiple middleware systems combined 
may variety reasons 
different middleware may required due availability programming language bindings particular forms middleware may appropriate particular hardware platforms com windows corba mainframes 
different middleware systems different performance characteristics depending deployment different middleware may backbone middleware local components 
middleware interoperable implementations middleware different types middleware order facilitate distributed system construction 
middleware solutions section review state current middleware products 
identify extent address requirements highlight shortcomings 
impossible review individual middleware products classification allows particular product characteristics provides conceptual framework comparing different approaches 
categories consider transactional message oriented procedural object component middleware 
chosen classification primitives middleware products provide interaction distributed components distributed transactions message passing remote procedure calls remote object requests 
transactional middleware transactional middleware supports transactions involving components run distributed hosts 
middleware uses phase commit protocol implement distributed transactions 
products category include ibm cics bea transarc 
network communication transactional middleware enables application engineers define services server components offer implement server components write client components request services transaction 
client server components reside different hosts requests transported network way transparent client server components 
coordination client components request services synchronous asynchronous communication 
transactional middleware supports various activation policies allows services activated demand deactivated idle time 
activation permanent allowing server component reside memory 
reliability client component cluster service request transaction server components reside different machines 
order implement transactions transactional middleware assume participating servers implement phase commit protocol 
server components built database management systems delegate implementation phase commit database management systems 
implementation portable standard defined 
distributed transaction processing dtp protocol adopted open group defines programmatic interface phase commit xa protocol 
dtp widely supported relational object oriented database management systems 
means distributed components built database management systems easily participate distributed transactions 
fault tolerant automatically recover completed transactions 
scalability transaction monitors support load balancing replication server components 
replication servers replication capabilities database management systems provide server components rely 
heterogeneity transactional middleware supports heterogeneity components reside different hardware operating system platforms 
different database management systems participate transactions due standardized dtp protocol 
resolution data heterogeneity supported transactional middleware middleware provide primitives express complex data structures service request parameters marshal 
discussion shown transactional middleware simplify construction distributed systems 
transactional middleware weaknesses 
firstly creates undue overhead need transactions transactions acid semantics inappropriate 
case example client performs long lived activities 
secondly marshalling unmarshalling data structures client uses parameters services require needs done manually products 
thirdly api phase commit standardized standardized approach defining services server components offer 
reduces portability distributed system different transaction monitors 
message oriented middleware message oriented middleware mom supports communication distributed system components facilitating message exchange 
products category include ibm mqseries sun java message queue 
network communication client components mom send message server component network 
message notification event request service execution server component 
content message includes service parameters 
server responds client request reply message containing result service execution 
coordination strength mom paradigm supports asynchronous message delivery naturally 
client continues processing soon middleware taken message 
eventually server send message including result client able collect message appropriate time 
achieves de coupling client server leads scalable systems 
weakness time implementation synchronous requests cumbersome synchronization needs implemented manually client 
strength mom supports group communication distributing message multiple receivers transparent way 
reliability mom achieves fault tolerance implementing message queues store messages temporarily persistent storage 
sender writes message message queue receiver unavailable due failure message queue retains message receiver available 
scalability support access transparency client components message queues communication remote components sense queues local communication 
lack access transparency disables migration replication transparency complicates scalability 
queues need set administrators queues hard coded client server components leads inflexible poorly adaptable architectures 
heterogeneity mom support data heterogeneity application engineers write code marshals 
products different programming language bindings available 
assessing strengths weaknesses mom note class middleware particularly wellsuited implementing distributed event notification publish subscribe architectures 
persistence message queues means event notification achieved fault tolerant ways components receive events restart failure 
middleware weaknesses 
supports reliability 
message delivered 
mom support transaction properties atomic delivery messages receivers 
limited support scalability heterogeneity 
procedural middleware remote procedure calls rpcs devised sun microsystems early part open network computing onc platform 
sun provided remote procedure calls part operating systems submitted rpcs standard open consortium adopted part distributed computing environment dce 
rpcs available unix implementations microsoft windows operating systems 
network communication rpcs support definition server components rpc programs 
rpc program exports number parameterized procedures associated parameter types 
clients reside hosts invoke procedures network 
procedural middleware implements procedure calls marshalling parameters message sent host server component located 
server component message executes procedure transmits results back client required 
marshalling unmarshalling implemented client server stubs automatically created compiler rpc program definition 
coordination rpcs synchronous interactions exactly client server 
asynchronous multicast communication supported directly procedural middleware 
procedural middleware provides different forms activating server components 
activation policies define remote procedure program available started demand 
startup demand rpc server started inetd daemon soon request arrives 
requires additional configuration table provides mapping remote procedure program names location programs file system 
reliability rpcs executed semantics 
procedural middleware returns exception rpc fails 
exactly semantics transactions supported rpc programs 
scalability scalability rpcs limited 
unix windows rpcs replication mechanisms scale rpc programs 
replication addressed designer rpc system means practice rpc systems deployed limited scale 
heterogeneity procedural middleware different programming languages 
different hardware operating system platforms 
procedural middleware standards define standardized data representations transport representation requests results 
dce example network data representation ndr purpose 
marshalling rpc parameters stubs translate data representations standardized form reverse mapping performed unmarshalling 
procedural middleware weaker transactional middleware mom fault tolerant scalable 
coordination primitives available procedural middleware restricted support synchronous invocation directly 
procedural middleware improve transactional middleware mom respect interface definitions implementations automatically marshal service parameters results 
disadvantage procedural middleware interface definition reflexive 
means procedures exported rpc program return rpc program 
object component middleware resolve problem 
object component middleware object middleware evolved rpcs 
development object middleware mirrored similar evolutions programming languages object oriented programming languages evolved procedural programming languages idea object oriented principles object identification inheritance available development distributed systems 
systems class middleware include common object request broker architecture corba omg latest versions microsoft component object com remote method invocation rmi capabilities available java 
products category include middleware supports distributed components enterprise java beans 
unfortunately discuss compare important class middleware briefly refer details 
network communication object middleware support distributed object requests mean client object requests execution operation server object may reside host 
client object object server object 
marshalling operation parameters results achieved stubs generated interface definition 
coordination default synchronization primitives object middleware synchronous requests block client object server object returned response 
synchronization primitives supported 
corba example supports deferred synchronous asynchronous object requests 
object middleware supports different activation policies 
include server objects active time started ondemand 
threading policies available determine new threads started operation requested concurrent clients queued executed sequentially 
corba supports group communication event notification services 
service implement push style architectures 
reliability default reliability object requests atmost 
object middleware support exceptions clients catch order detect failure occurred execution request 
corba messaging notification service achieve exactly reliability 
object middleware supports concept transactions 
corba object transaction service cluster requests distributed objects transactions 
com integrated microsoft transaction server java transaction service provides capability rmi 
scalability support object middleware building scalable applications somewhat limited 
corba implementations support load balancing example employing name servers return object server loaded host factories create server objects loaded host support replication limited 
heterogeneity object middleware supports heterogeneity different ways 
corba com multiple programming language bindings client server objects need written programming language 
standardized data representation resolve heterogeneity data platforms 
java rmi takes different approach heterogeneity resolved java virtual machine client server objects reside 
different forms object middleware inter operate 
corba defines internet inter orb protocol iiop standard governs different corba implementations exchange request data 
java rmi leverages protocol uses transport protocol remote method invocations means java client perform remote method invocation corba server vice versa 
corba specifies inter working specification microsoft com 
object middleware provides powerful component models 
integrate capabilities transactional message oriented procedural middleware 
scalability object middleware limited disables distributed object paradigm largescale 
middleware state art middleware products successfully employed industrial practice shortcomings prevent application domains 
weaknesses lead relatively inflexible systems respond changing requirements really scale local area networks dependable suited wireless networks 
section review state art middleware research addresses current weaknesses influence generation middleware products 
discuss trading reflection application level transport mechanisms support construction flexible software architectures 
replication techniques lead better scalability fault tolerance 
discuss research middleware supports real time applications address middleware research results mobile pervasive computing 
flexible middleware trading middleware products naming component identification named message queues dce directory service corba naming service com uses java rmi uses bind names components 
client component request resolve name binding order obtain server component 
means clients need uniquely identify servers albeit location transparent way 
application domains unreasonable assume client components identify component obtain service 
leads inflexible architectures client components dynamically adapt better service providers available 
trading suggested alternative naming offers flexibility 
iso odp standard defines principal characteristics trading 
idea similar yellow pages telephone directory 
names components located service types 
trader registers type service server component offers particular qualities service qos guarantees 
clients query trader server components provide particular service type demand qos guarantees 
trader matches service query service offers knows returns component client 
client server communicate involvement trader 
idea trading matured starting adopted middleware products 
omg defined trading service adapts odp trader ideas distributed object paradigm implementations service available 
trading enables dynamic connection clients server components service characteristics server name 
reflection approach flexible execution environments components reflection 
reflection wellknown paradigm programming languages 
programs reflection mechanisms discover types classes define method invocations run time 
reflection supported extend current middleware products 
interface repository dynamic invocation interface corba enable client programmers discover types server components currently known dynamically create requests invoke operations components 
current research reflective middleware goes reflective object component models 
aims support meta object protocols 
protocols inspection adaptation middleware execution environment 
suggested example environment meta model 
inspection environment meta model supports queries middleware behaviour events message arrival enqueuing requests marshalling unmarshalling thread creation scheduling requests 
adaptation environment meta model enables components adjust behaviour middleware events 
application level transport protocols marshalling unmarshalling best done middleware applications middleware creates undue overhead 
important application reflection marshalling 
particularly case application specific data representation amenable transmission network heterogeneity need resolved middleware 
investigate combined middleware markup languages xml 
suggest transmit xml documents uninterpreted byte strings middleware 
combination motivated fact xml supports semantic translations data structures fact existing markup language definitions leveraged 
protocol xml originally clearly inappropriate meet reliability requirements 
expected interoperability applicationlevel middleware data structures available due course omg started adoption process technology provide seamless interoperability corba data structures xml structured documents 
scalable middleware middleware successfully scalable applications local area networks current middleware standards products impose limitations prevent globally distributed systems 
particular current middleware platforms support replication neces sary extent achieve global distribution :10.1.1.31.3576
state art research addresses problem non transparent replication 
replication tanenbaum addressing problem distributed object middleware globe project 
aim globe provide object middleware scales users 
achieve aim globe extensive replication 
replication mechanisms isis globe assume existence universally applicable replication strategy 
suggests replication policies object type specific determined server object designers 
globe assumes type object strategy proactively replicates objects 
real time middleware summary state art real time middleware produced eu funded network excellence 
current middleware products limited real time embedded systems requests priority 
memory requirements current middleware products prevent deployment embedded systems 
problems addressed various research groups 
tao real time corba prototype developed supports request prioritization definition scheduling policies 
corba specification builds research real time minimal middleware 
middleware mobile computing current middleware products assume continuous availability high bandwidth network connections 
achieved physically mobile hosts various reasons 
wireless local area network protocols wave lan achieve reasonable bandwidth 
operate hosts reach metres base station 
network outages occur mobile hosts roam areas covered different base stations enter radio shadows 
wide area wireless network protocols gsm similar problems cell handovers 
addition bandwidth orders magnitude smaller gsm achieves baud 
state ofthe art wireless wide area protocols improve situation 
available years 
problems occur current middleware products wireless network protocols 
firstly treat unreachability server client components exceptional situation raise errors client server component programmers deal 
secondly transport representation chosen wired networks bandwidth mbit need 
middleware products optimized simplify translation different neous data representations routing messages intended receivers 
optimizations need choose size efficient encodings network protocol inappropriate packets sent baud wireless connection 
research middleware mobile computing aims overcome issues providing coordination primitives tuple spaces treat unreachability normal exceptional situations 
compressed transport representation save bandwidth 
overview state art mobile middleware avoid delve detail 
middleware software engineer ing research section analyze consequences availability middleware products evolution result middleware research software engineering research agenda 
argue importance non functional requirements building software systems existing upcoming middleware identify need requirements engineering techniques focus non functional requirements 
identify software architecture research produce methods systematically guide engineers selecting right middleware employing way meets set non functional requirements 
highlight middleware transparent system design design methods needed address issue 
trends important discussion impact middleware software engineering research 
firstly middleware products conceived deliver immediate benefits construction distributed systems 
rapidly adopted industry 
secondly middleware vendors proven track record incorporate middleware research results products 
example iso odp trader defined adopted corba standard year available corba products 
chance state art research areas flexible scalable real time mobile middleware state practice years 
research software engineering distributed systems delivers principles notations methods tools compatible capabilities current middleware products provide middleware research generate software engineering research results limited industrial significance 
industry adopt middleware known deliver benefits ignore incompatible software engineering methods tools 
middleware products research support programming largely ignore activities needed software processes distributed systems 
chance achieve symbiosis software engineering middleware 
aim section identify software engineering research themes lead principles notations methods tools needed support life cycle activities building distributed systems middleware 
requirements engineering challenges ordination reliability scalability heterogeneity distributed system construction discussed section engineers faced non functional nature 
software engineers define software architectures meet nonfunctional requirements 
relationship non functional requirements software architectures poorly understood 
discuss requirements engineering relationship 
existing requirements engineering methods tend strong focus functional requirements 
particular object oriented case driven approaches jacobsen rational completely ignore non functional concerns 
goal oriented approach provide better basis needs augmented specifically address nonfunctional concerns 
non functional goals useful input architecting goals need quantified 
example order engineer scalable architectures engineers need quantitative requirements models required response time peak loads transaction data volume architecture expected scale 
requirements engineering research needs devise methods tools elicit model nonfunctional requirements quantitative point view 
particular middleware system chosen software architecture extremely expensive revert choice adopt different middleware different architecture 
choice influenced non functional requirements 
unfortunately requirements tend unstable change time 
non functional requirements change setting system embedded example new hardware operating system platforms added result merger scalability requirements increase result having build web interfaces customers directly 
requirements engineering methods identify current requirements elicit estimate ranges evolve planned life time distributed system 
software architecture little influence middleware software architectures notable exception 
believe research software architecture description languages emphasized func tionality sufficiently addressed specification global properties non functional requirements achieved architecture 
requirements attributed individual components connectors specified current architectural description languages 
distributed software engineering research needs identify notations methods tools support architecting 
research needs provide methods help software engineers systematically derive software architectures meet set non functional requirements overcome guesswork currently done 
includes support identifying appropriate middleware combinations middlewares problem hand 
software engineering research needs define architecting processes capable mitigating risks choosing wrong middleware architectures 
processes need rely methods quantitatively model performance scalability particular middleware architecture achieve validation techniques model checking validate models meet requirements 
models need calibrated metrics collected observing middleware performance practice 
architecture description languages support explicit modeling connectors means components communicate 
main contribution observation connectors implemented middleware primitives 
add observation middleware supports limited set connectors 
specifying behaviour connectors explicitly adl modelling overkill needed architects opt middleware 
applications specification connector completely unnecessary 
software architecture research develop middleware oriented adls built support connectors provided middleware practitioners 
design argued middleware design entirely transparent designers 
number factors despite iso odp transparency dimensions necessitate designers aware involvement middleware communication components 
factors network latency implies communication distributed components orders magnitude slower local communication 
component activation de activation stateful components lead need implementing persistence components 
components need designed cope concurrent interactions occur dis tributed environment 
components choice different synchronization primitives particular middleware offers need exploit properly 
particular avoid deadlocks liveness problems occur result synchronization primitives 
software engineering community needs develop middleware oriented design notations methods tools take concerns account 
discussing state art middleware research highlighted trend give programmer influence middleware behaves 
globe replication strategies tao scheduling policies reflection capabilities influence middleware execution engine designer 
means effectively programmer gets see middleware distribution heterogeneity transparent 
really necessary middleware research community puts forward reasons programmers aided design distributed components 
appropriate principles notations methods tools design replication strategies scheduling policies reflection capabilities needed software engineering research 
summary discussed construction distributed systems difficult indicated support software engineers expect current middleware products simplify task 
reviewed current state art middleware research knowledge derive software engineering research agenda produce principles notations methods tools needed support activities life cycle software engineering process 
bates 
state art distributed dependable computing 
technical report laboratory communications engineering cambridge university www newcastle research ec org sota report oct 

odp trader 
proc 
ifip tc wg int 
conf 
open distributed processing berlin germany pages 
north holland 
bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 
birman 
building secure reliable network applications 
manning publishing 
box 
essential com 
addison wesley longman 
charles 
middleware moves forefront 
ieee computer pages may 
cheung 
java transaction service jts 
sun microsystems san antonio road palo alto ca mar 
chung huang yajnik liang shin 
wang 
wang 
dcom corba side side step step layer layer 
report pages january 
cointe editor 
meta level architectures reflection international conference reflection st malo france volume lecture notes computer science 
springer 
dardenne van fickas 
goaldirected requirements acquisition 
science computer programming 
di rosenblum 
exploiting adls specify architectural styles induced middleware infrastructures 
proc 
int 
conf 
software engineering los angeles california pages 
acm press 
andersen blair costa coulson goebel hansen kristensen yu 
generation middleware requirements architecture prototypes 
proceedings ieee workshop trends distributed computing systems pages 
ieee computer society press dec 
emmerich 
engineering distributed objects 
john wiley sons apr 
emmerich finkelstein schwarz 
markup meets middleware 
int 
workshop trends distributed systems south africa pages 
ieee computer society press 

introducing new standard commerce 
www org 
gilman schreiber 
distributed computing ibm mqseries 
wiley 
goldberg 
smalltalk language implementation 
addison wesley 
gray 
notes database operating systems 
bayer graham ller editors operating systems advanced course volume lecture notes computer science chapter pages 
springer 
hall 
building client server applications 
wiley 
sharma 
java message service specification 
technical report sun microsystems java sun com products jms nov 

microsoft transaction server programming 
microsoft press 

cics guide internal structure 
wiley 
infinity 
infinity network trade model overview 
www infinity com ntm pdf pdf 
iso 
open distributed processing model 
technical report international standardization organization 
iso 
information processing systems open systems interconnection basic model basic model 
technical report international standards organisation 
jacobson booch rumbaugh 
unified software development process 
addison wesley 
jacobson jonsson 
object oriented software engineering case driven approach 
addison wesley 
javasoft 
java remote method invocation specification revision jdk edition oct 
kiczales rivi res bobrow 
art metaobject protocol 
mit press 

enterprise javabeans 
reilly uk 
neuman :10.1.1.31.3576
scale distributed systems 
singhal editors readings distributed computing systems 
ieee computer society press 
object management group 
common object services specification revised edition 
old connecticut path framingham ma usa december 
object management group 
notification service 
old connecticut path framingham ma usa jan 
object management group 
common object request broker architecture specification revision 
old connecticut path framingham ma usa february 
object management group 
xml value request proposals 
old connecticut path framingham ma usa aug 
open group editor 
dce remote procedure calls 
open group 
edwards 
instant corba 
wiley 

roman murphy picco 
software engineering perspective mobility 
finkelstein editor software engineering 
acm press 
schmidt gill levine 
evaluating strategies real time corba dynamic scheduling 
international ieee real time symposium 
ieee computer society press 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall 
siegel 
component object technology preview corba 
ieee computer pages may 
steen tanenbaum 
globe wide area distributed system 
ieee concurrency pages january march 
open group 
distributed transaction processing xa specification version 
open isbn reading uk 
