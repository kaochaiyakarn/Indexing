intraprocedural static slicing binary executables cristina cifuentes antoine centre software maintenance department computer science university queensland brisbane qld australia cs uq edu au program slicing technique determining set statements program potentially affect value variable point program 
intra interprocedural slicing high level languages greatly studied literature static dynamic techniques aid debugging maintenance parallelization program integration dataflow testing programs 
explain apply conventional intraprocedural static analysis binary executables purposes static analysis machine code assembly code debugging code determining instructions affect indexed jump indirect call register 
analysis useful decoding machine instructions phase reverse engineering tools binary executables binary translators disassemblers binary profilers binary debuggers 
known series programmers worked days manual disassembly internet worm program order determine program doing prevent spreading world 
known programmers hard time consuming debug binary executable program needs patched bug fixed source code program lost longer supported authors 
cases take time automated debugging tools executable programs available simple disassemblers available programmers 
reverse engineering tools binary executables static partly supported australian research council 
sun microsystems labs 
binary translators rapidly translate migrate binary executables platform slicing techniques relying runtime interpreter translate code translated statically 
slicing techniques reliably determine range values indexed jump tables calls depend registers pattern matching code set code skeletons generated different compilers 
program slicing technique automatically decomposing high level programs analysing control data flow information 
technique developed weiser realized programmers tend slice programs head debugging order understand complex code 
static slicing techniques aim extracting minimal program captures behaviour source code program respect specified variable location problem solved reachability analysis 
years static slicing applied debugging maintenance parallelization source code program comprehension 
terms binary executable executable program synonyms refer program generated compilation linkage process machine dependent program written machine code 
executable files normally contain symbol table information analysis assume information 
need tools executable programs reverse engineering tools binary executables include disassemblers binary translators decompilers binary profilers binary debuggers 
tools share phases common need decode information stored binary file need decode machine instructions translate assembly representation equivalent representation 
main problem decoding machine instructions separation data code indistinguishable problem equivalent halting problem 
approximations solution possible practice 
entry point program machine instructions decoded possible paths code 
statically algorithm determine paths traverse faced indexed jump instruction indirect call jump instruction value register 
statically know value register determine target address jump call 
example indexed jump instruction depends contents register bx 
contents unknown statically range values known performing backward slice register bx instruction analyzing slice upper lower bounds register take 
clearly slicing techniques aid recovery problem indexed indirect instructions allowing way possibly determining paths program 
relevant machine instructions decoded code translated assembly intermediate representation reverse engineering tool hand transformations intermediate representation produce result assembly program case disassembler binary program different target machine case binary translator high level language program case decompiler 
xor ah ah mov dx ax mov bx ax sub bl cmp bl jae mov bl bx cmp bx jmp mov si bp mov di bp mov 
shl bx jmp word ptr cs bx 
extract assembly code indexed jump statement previously mentioned executable software bugs methods software testing program inspections mathematically verification defect testing cleanroom software development necessarily remove possible bugs program 
means buy program run defect need report bug software developers possibly pay new version bug free software 
developers available support software want support software anymore business user change 
debugging tool executable programs user need developed 
analysis worm virus code area benefit considerably debugger executable programs area code flagged critical slice code determined simplify process debugging thousands machine instructions binary executable 
far tool debugging executable programs available dumb disassemblers disassemble machine instructions particular memory address trace machine code construct control flow graph program slice program criterion 
known maintenance community way changes pieces legacy binary code way patching binary file 
development debugging tools real non trivial executable programs addressed literature trivial problem 
look application conventional static intraprocedural slicing techniques binary executables 
list required changes order apply techniques assembly code 
interested integrating precise slicing techniques tools manipulate machine code analyzing indexed jumps calls depend contents register 
previous substantial amount reported literature static slicing techniques 
complete surveys area reported literature providing complete summary slicing techniques comparative classification techniques 
report relevant static techniques assembly languages 
slicing techniques initially developed weiser slicing criterion set equations determine statements include slice 
horwitz extended concept program dependence graph pdg developed ferrante create precise intraprocedural slices single procedure structured programs :10.1.1.50.4405
developed concept system dependence graph sdg produce precise interprocedural slices account calling context procedure 
techniques developed deal unstructured programs goto statement 
high level languages fortran statement 
ball horwitz choi ferrante developed similar techniques deal arbitrary flow control requiring control dependence graph cdg constructed augmented control flow graph cfg corresponding data dependence graph ddg constructed original cfg 
agrawal created better method deal goto statements modify cfg sdg 
relied postdominator tree pdt created construction sdg lexical successor tree lst determine jumps add final slice adding steps conventional slicing algorithm horwitz modifying existing graphs debugging 
area binary executables static slicing techniques applied binary profiler qpt rewrites risc executable files measure program behavior 
techniques embedded eel executable editing library binaries part decoding phase machine instructions 
representation binaries binary executable machine code version high level assembly program compiled assembled linked particular platform os particular machine operating system os 
general format binary executable varies widely binary file format os exe format dos operating system simple includes program header image code data program elf format operating system solaris includes comprehensive information different sections program including program header section header relocation table symbol table string table dynamic symbol information data segment text segment 
running program binary file format decoded operating system loader loads program memory passes control program entry point 
test vehicle disassembler dcc decompiler implements decoder exe format decoder machine instructions creates intermediate representation program terms program call graph cfg procedure basic blocks lowlevel icode instructions 
removed pattern matching heuristics deal indexed indirect instructions 
perform conservative traversal machine instructions traversing unknown targets transfers control indirect calls register indexed jumps register 
low level icode instructions resemble assembly instructions machine property performing operation time 
example div bx assembly instruction returns result division dx ax bx register ax modulus register dx 
clearly division modulus operations performed sequentially temporary storage location register ax overwritten prior modulus operation 
represent instruction low level icode instructions making extra register tmp mov tmp dx ax tmp dx ax div tmp bx ax tmp bx mod tmp bx dx tmp bx way machine instructions mapped low level icode instructions 
continue test vehicle due cisc characteristics manageable size pentium machine instructions 
purposes analysis pentium add extra complexity problem extra maintenance time 
part decompilation analysis recover highlevel code intermediate representation data flow analysis performed cfgs recover highlevel expressions remove dead code recover parameters procedures remove registers condition codes remove stack local variables parameters 
part data flow analysis required binary translation purposes required slicing purposes relevant parts mentioned section explanation slicing algorithm 
basic block sequence instructions flow control enters leaves halt possibility branching 
slicing binary executables slicing purposes assume disassembler decodes binary file machine instructions stores instructions terms low level instructions resemble assembly code control flow graphs procedure 
intermediate representation allows analyze graphs standard compiler optimization techniques 
refer horwitz algorithm conventional static slicing algorithm extensions performed agrawal conventional goto algorithm 
algorithm suitable basis slicing machine code assembly programs requires changes described 
shows disassembly main procedure test program 
conventional goto algorithm uses cfgs instructions pdg hold data control dependencies pdt construct pdg lexical successor tree lst add missing unconditional jumps slice 
statement said immediate lexical successor statement deleting program causes control pass reaches corresponding location new program 
slicing binary code cfgs basic blocks cdg pdt definition ud chains description 
construct lst structure adequate assembly programs explained 
steps algorithm follows determine slice conventional algorithm add unconditional jumps returns slice fix jump labels 
step traditional slicing techniques individual statements node granularity graphs 
slicing machine code assembly representations basic blocks node granularity graph appropriate number instructions tends fairly large compared high level language counterpart 
study reduction rate assembly instructions high level statements cisc machine regenerated assembly code gave average assembly instructions eliminated analysis 
control dependencies traditionally built pdt procedure shows nodes path routine satisfying postdominance relationship 
control dependencies main proc near push bp ud bp mov bp sp ud sp sub sp ud sp push si ud si push di ud di xor si si mov word ptr bp mov di jmp cmp di ah ud di jl ud cc push si ud si mov ax push ax ud ax call near ptr printf pop cx pop cx push word ptr bp mov ax eh push ax ud ax call near ptr printf pop cx pop cx pop di pop si mov sp bp ud bp pop bp ret di di ud di jg ud cc mov ax si ud si add ax di ud ax ud di mov si ax ud ax jmp di ud di jmp mov ax bp ud bp ax ud ax mov bp ax ud ax mov ax di ud di mov bx cwd ud ax mov tmp dx ax ud dx ax idiv bx ud bx ud tmp mod bx ud bx ud tmp dx dx ud dx jne ud cc mov ax di ud di shl ax ud ax add ax si ud si ud ax mov si ax ud ax jmp mov ax di ud di mov dx mul dx ud dx ud ax add ax si ud si ud ax mov si ax ud ax jmp main endp disassembled code main procedure test program annotated definition chains 
hard determine constructing pdt machine code assembly programs procedure may return instruction different paths routine 
assume nesting level statements procedure procedure graph may unstructured general void main int sum positives sum positives sum sum positives positives sum sum sum sum printf sum sum printf positives positives sample test program 
assumption restrict techniques limited number binary executables 
note control flow analysis cfg purposes recovering underlying control structures graph nesting level unstructured graphs forced nesting levels particular criteria node split replicate nodes convert graph structured 
case worth extra analysis determine imposed nesting level control dependence graph cdg pdt cfg favoured 
pdt efficiently constructed ff time number nodes cfg simpler implementation described 
cdg built time walking pdt 
cfg pdt cdg test program shown 
nodes entry start traditionally analysis augmenting cfg nodes need necessarily exist cfg 
represent data dependencies program terms ud chains procedure level chains useful types analyses performed binary code dead register elimination dead condition code elimination ud chains generated register condition code instruction 
perform idiom analysis icode instructions instruction xor si si instruction treated mov si effect xor ing register 
code compiler decided generate xor instruction mov instruction takes machine cycles 
failure perform analysis assume redundant register si prior re definition creating unnecessary dependency interprocedural caller si value 
order cater conditional jumps dependent register jump jl jump equal zero jne opposed jump cx register zero definition chains condition codes need 
large percentage instructions cisc machines define condition codes dead condition code elimination performed analysis consistent decompilation binary translation analyses required determine effects machine instructions reported 
example code cmp dx bx df cf zf sf jg uf sf compare instruction cmp dx bx sets condition codes cf carry flag zf zero flag sf sign flag 
conditional jump instruction jg uses sign flag determine jump taken 
dead condition code elimination determine zero carry flag set compare instruction dead irrelevant analysis sign flag set instruction conditional jump making conditional jump data dependent comparison instruction 
shows definition chains procedure level registers condition codes main procedure 
chains denotes register set outside current procedure cc denotes relevant condition code conditional jump performing dead condition code elimination 
condition codes need analyzed instructions extraneous ones removed code elimination 
example conditional jumps condition codes shows dependency instruction direction flag previously cleared instruction cld inter basic block analysis needed cases 
steps second step adds unconditional jump return instructions 
conventional goto algorithm lexical successor tree represent high level statement nesting level statement lexical successor instruction procedure 
cfg pdt start entry cdg entry control flow graph program dependence tree control dependence graph program 
lexical successor defined high level language programs slicing algorithm need representation input program 
binary code representation assembly code binary code 
variety representations leads different lexical successors representation binary code 
example unconditional jump instruction removed control passes instruction lexical successor 
unconditional jump instruction removed determine control passes procedure interleaved code instruction 
unconditional jump return instruction introduce break flow control program 
adding instructions slice requires instructions belong basic blocks traversed construction modified conventional algorithm step 
step linear number basic blocks 
step fixes target labels checking jumps belong slice 
applying modified version conventional goto algorithm creates precise static slices machine code assembly code 
shows slice obtained test program slicing register si instruction 
experience implemented mentioned techniques slicer extension main proc near xor si si mov di cmp di ah jl start di di jg mov ax si add ax di mov si ax di jmp mov ax di mov bx cwd mov tmp dx ax mod bx dx dx jne mov ax di shl ax add ax si mov si ax jmp mov ax di mov dx mul dx add ax si mov si ax jmp main endp slice test program respect register si instruction 
dos binaries 
slicer binaries displays procedure time prompting user wants perform slicing current procedure 
slicing allowed register machine instruction procedure instructions enumerated lefthand side convenience 
figures generated tool 
seen sample slices slicing registers binary level reasonable amount instructions returned slice 
registers going set stack variables locals arguments memory locations globals constants slices bound fraction code long non aliased memory locations 
analysis include analysis aliases pointers analysis requires interprocedural analysis scope application techniques 
mentioned interested solving indexed jumps indirect calls registers reliable way unsure memory locations locations determine dependencies 
techniques clearly extended deal stack variables extra cost notably chains variables need introduced analysis data structures hold right information 
necessary implementing debugging slicer tool example 
showed dependency instructions instruction cld 
interesting see ud chains condition codes provided dependencies basic block boundaries 
type dependency normally expected user written code compiler normally sets condition code uses basic block conditional jumps extended basic blocks 
library code may written assembler type dependencies may 
slicing high level language programs arrays pointers introduced returned slices quite large routine 
comparison binary level normally interested base data types bytes words data type information assume comes binary 
higher level information arrays normally part binary recovering information requires extensive analysis inline decompilation analysis 
slicing techniques compound data type level unnecessary 
application indexed jump example applying described slicing process indexed jump register bx instruction generates slice 
instruction cld clears direction flag instruction assign register contents address pointed si increment address 
direction flag set register si decremented time invoked 
range value propagation analysis slice determine possible range values register bx instruction words bytes particular machine allowing decoding target branches switch case statement 
note slice required range value analysis case instruction depends contents bx slice included statements impinge value 
knowledge memory value final comparison restricts register ax words 
memory locations slicing analysis integrated detection jump targets indexed jumps 
mov bp sp cld mov si bp je cmp je cmp je xor ah ah mov bx ax sub bl cmp bl jae mov bl bx cmp bx shl bx jmp word ptr cs bx slice program register bx instruction 
explained apply conventional slicing techniques required changes slice machine code assembly type languages 
techniques suitable debugging determine statements particular indexed register dependent purposes knowing range values register take analyzing code statically 
program control flow graph cfg basic blocks procedure part intermediate representation 
determine data dependencies definition chains registers condition codes procedure level performing idiom analysis better represent semantics machine instructions 
condition code dependencies allow include example unconditional jumps comparison instructions slice 
control dependencies determined constructing control dependence graph unstructured graphs post dominator tree pdt procedure 
pdt cfg unconditional jumps returns added final slice path instructions slice 
final slice non executable include return statements needed assembly code 
working retargetable binary translation framework 
intraprocedural slicing technique described extended deal determination range values particular register indexed jump call 
information binary translation project check www cs uq edu au groups csm html david ung initial implementation slicing techniques anonymous referees comments ways improving 
graphs created graphviz 
agrawal 
slicing programs jump statements 
proceedings acm sigplan conference programming languages design implementation pages orlando florida june 
acm press 
aho sethi ullman 
compilers principles techniques tools 
addison wesley publishing 
ball horwitz 
slicing program arbitrary control flow 
fritzson editor proceedings international workshop automated algorithmic debugging lecture notes computer science pages linkoping sweden may 
springer verlag 
binkley gallagher 
advances computers volume chapter program slicing 
academic press san diego ca 
choi ferrante 
static slicing presence goto statements 
acm transactions programming languages systems july 
cifuentes 
interprocedural dataflow decompilation 
journal programming languages june 
cifuentes 
structuring decompiled graphs 
editor proceedings international conference compiler construction lecture notes computer science pages linkoping sweden april 
springer verlag 
cifuentes gough 
decompilation binary programs 
software practice experience july 
duncan 
encyclopedia chapter pages 
microsoft press 
eisenberg 
report provost cornell university commission preliminary enquiry 
report cornell university ithaca usa february 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems july 
hecht ullman 
simple algorithm global data flow analysis problems 
siam journal computing december 
hecht 
flow analysis computer programs 
elsevier north holland vanderbilt avenue new york new york 
horspool 
approach problem computer programs 
computer journal 
horwitz reps binkley 
interprocedural slicing dependence graphs 
proceedings acm sigplan conference programming language design implementation pages atlanta june 
acm press 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems january 
kamkar 
overview comparative classification program slicing techniques 
journal systems software 
landi 
undecidability static analysis 
acm letters programming languages systems december 
larus ball 
rewriting executable files measure program behavior 
software practice experience february 
larus schnarr 
eel machine independent executable editing 
sigplan conference programming languages design implementation pages june 
lengauer tarjan 
fast algorithm finding dominators flowgraph 
acm transactions programming languages systems july 
patterson 
accurate static branch prediction value range propagation 
proceedings acm sigplan conference programming language design implementation pages la jolla california june 
acm press 
sites chernoff kirk marks robinson 
binary translation 
communications acm february 
sommerville 
software engineering 
addison wesley reading massachusetts fifth edition 
sunsoft 
linker libraries guide solaris 
sun microsystems mountain view california august 
tip 
survey program slicing techniques 
journal programming languages september 
weiser 
programmers slices debugging 
communications acm july 
weiser 
program slicing 
ieee transactions software engineering se july 
