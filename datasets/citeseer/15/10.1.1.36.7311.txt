goal directed requirements acquisition anne dardenne axel van lamsweerde stephen fickas institut informatique de namur namur belgium unit informatique universit catholique de louvain louvain la neuve belgium department computer science university oregon eugene usa requirements analysis includes preliminary acquisition step global model specification system environment elaborated 
model called requirements model involves concepts currently supported existing formal specification languages goals achieved agents assigned alternatives negotiated presents approach requirements acquisition driven higher level concepts 
requirements models acquired instances conceptual meta model 
represented graph node captures abstraction goal action agent entity event edges capture semantic links abstractions 
formedness properties nodes links constrain instances elements requirements models 
requirements acquisition processes correspond particular ways traversing meta model graph acquire appropriate instances various nodes links constraints 
acquisition processes governed strategies telling way follow systematically graph node specific tactics acquire corresponding instances 
describes significant portion meta model related system goals particular acquisition strategy meta model traversed backwards goals 
meta model strategy illustrated excerpts university library system 

requirements analysis highly critical step software lifecycle 
great variety problems arise step inadequacies contradictions ambiguities noises forward mey rom win 
errors deficiencies disastrous effects subsequent development steps quality resulting software product 
essential requirements engineering done great care precision 
formal methods supported automated tools enable engineers capture specify software requirements carefully precisely 
researchers devoted considerable effort design formal specification languages 
languages allows requirements specification manipulated formally 
specification checked set desired properties generate prototype implementation forth 
specification languages differ mainly particular specification paradigm 
example spi vdm jon support statebased specifications fia dub support history specifications statecharts har supports transition specifications languages larch gut asl ast gau support algebraic specifications paisley gist bal support operational specifications 
languages formalize requirements complex systems requirements engineers face difficulties limited scope languages preliminary acquisition relevant requirements 
scope problem existing specification languages focus functional requirements requirements software system expected 
non functional requirements left outside kind formal treatment 
requirements form important part real requirements documents kel refer appeared science computer programming vol 
pp 

correspondence article addressed second author 
operational costs responsibilities interaction external environment reliability integrity flexibility forth 
limited scope current formal specification languages results restricted set built abstractions terms requirements captured 
example state languages requirements expressed terms typed entities operations algebraic languages expressed terms data types 
languages appear appropriate design phase follows requirements analysis 
overcome limitations language designers proposed richer constructs particular expressing temporal requirements gre ghe dub han capturing requirements agents behaviour composite system consideration fea fin 
sequel term composite system refer automated system relevant part environment fea doe 
acquisition problem formalize requirements know requirements 
requirements acquisition elicitation easy task 
clients unable formulate relevant requirements explicitly precisely analysts limited knowledge environment system different automation alternatives arise suitable selected forth 
surprisingly little attention paid far requirements acquisition process 
role knowledge application domain similar systems recognized fic 
example requirements available domain specific libraries instantiated specialized reu 
preliminary models acquisition dialogues support multiple viewpoints negotiation cooperative elaboration requirements proposed fin rob 
context view requirements analysis ordinated tasks requirements acquisition formal specification 
requirements acquisition preliminary model specification entire composite system elaborated expressed rich language 
language needs variety builtin concepts structure requirements composite system terms kind abstractions usually requirements documents objectives constraints met composite system entities relationships events actions place agents controlling actions responsibilities assigned possible scenarios system behaviour forth 
language provide facilities capturing multiple automation alternatives form amenable evaluation negotiation analysts clients 
sequel term requirements model refer preliminary model elaborated acquisition language express model called acquisition language 
acquisition language formal provide formal basis elicitation requirements hand require hard coding analysts preliminary model sketched visible clients 
formal specification specific automation alternative emerged acquisition considered part automated corresponding composite system retained preliminary specification obtained data operations sub system refined precise formalism suitable detailed formal proofs prototype generation 
requirements acquisition formal specification necessarily sequential tasks process programming perspective see coroutines 
justify decomposition tasks making observations 
formal specification needs input start 
acquisition knowledge composite system involves concepts objectives agents responsibilities concepts final formal specification designers 
requirements acquisition relies knowledge application domain library management aircraft control formal specification relies knowledge sophisticated formalism modularization import mechanisms 
basic processes involved requirements acquisition formal specification different 
requirements acquisition involves learning vla negotiation rob formal specification involves data operation refinement structuring assertion strengthening weakening forth dub fea 
focus requirements acquisition task 
aim elements general approach requirements acquisition developed context kaos project 
kaos stands knowledge acquisition automated specification vla 
driving forces approach reuse domain knowledge application machine learning technology vla 
learning strategies adapted context requirements acquisition learning instruction learner conducts acquisition process meta knowledge kind knowledge acquired dav swa ben learning analogy learner retrieves knowledge similar system map system learned hal 
approach taken kaos components conceptual model acquiring structuring requirements models associated acquisition language ii set strategies elaborating requirements models framework iii automated assistant provide guidance acquisition process strategies 
introduce context outline components briefly 
conceptual model provides number abstractions terms requirements models acquired meta model 
aimed sufficiently rich allow functional non functional requirements kind composite system captured precise natural way 
knowledge representation bra shown highly relevant context 
example rml proposes abstractions entity activity assertion concepts subclass specialization link type gre 
felt richer set abstractions needed wants capture objectives system consideration constraints objectives operational agents human beings programs control system behaviour constraints events cause application actions entities forth 
structuring link types needed subclass specialization alternative refinement links objectives constraints alternative assignment links agents constraints forth 
meta model requirements acquisition represented conceptual graph nodes represent abstractions edges represent structuring links 
illustrates portion graph 
ii acquisition strategy framework defines justified composition steps acquiring components requirements model instances meta model components 
words strategy corresponds way traversing meta model graph acquire instances various nodes links 
example meta model traversed backwards objectives fulfilled composite system backwards agents available system respective views backwards client supplied scenarios combining actions 
step strategy composed finer steps example question answering input validation known properties meta model components application tactics select alternatives deductive inferencing property inheritance specialization links analogical inferencing knowledge similar systems conflict resolution multiple views human agents involved 
iii acquisition assistant aimed providing automated support acquisition strategy 
built repositories requirements database requirements knowledge base 
structured meta model components 
requirements database maintains requirements model built gradually acquisition analyzed query facilities similar provided project database systems vla 
requirements knowledge base contains kinds knowledge 
domain level knowledge concerns concepts requirements typically application domain considered 
ben reu knowledge organised specialization hierarchies requirements fragments particular class systems known assistant library management airline reservation telephone network inherited general applications resource management transportation communication general tasks transaction processing history tracking device control 
meta level knowledge concerns properties abstractions meta model constraint temporarily violated needs restored appropriate action ways conducting specific acquisition strategies 
aspect includes tactics strategies prefer alternative refinements objectives split responsibility fewer agents 
framework objective significant portion kaos meta model specific acquisition strategy associated 
part meta model considered relates refinement system objectives operationalization constraints specification objects actions satisfy constraints assignment agents human beings devices programs constraints actions 
acquisition strategy considered learning instruction 
meta model graph traversed backwards goal node adjacent links 
instances goal node acquired represent objectives achieved composite system satisfy book requests possible provide bibliographical knowledge relevant domains maintain privacy user interests 
node path prescribed strategy corresponding meta level knowledge guiding instance acquisition 
distinguished feature approach importance highlevel goals opposed operationalization constraints ensured agents appropriate actions 
starting directly lower level process action oriented descriptions usually done current requirements engineering methods approach starts system level organisational objectives lower level descriptions progressively derived 
goals important respects 
lead incorporation requirements components support 
justify explain presence requirements components necessarily comprehensible clients 
may assign respective responsibilities agents system precisely may provide basis defining agents best perform actions fit prescribed constraints capabilities reliability cost load motivation forth 
provide basic information detecting resolving conflicts arise multiple viewpoints human agents rob 
remainder organized follows 
section describes various abstractions involved portion meta model relevant goal directed acquisition strategy 
requirements fragments library system provided illustrate acquisition language 
strategy various associated tactics discussed section 
section concludes discussing achievements open issues 

conceptual meta model requirements acquisition levels involved approach requirements acquisition clarified section 
central role played model meta level discussed greater detail section 
section introduces background material sequel define meta model components 
remainder section devoted tour portion meta model relevant sections 

meta domain instance levels shown approach requirements acquisition involves levels modelling 
sequel meta prefix felt necessary avoid confusions levels 
meta level refers domain independent abstractions 
level meta concepts agent action relationship meta relationships linking meta concepts performs input link isa specialization meta attributes meta concepts meta relationships load agent postcondition action cardinality link meta constraints meta concepts meta relationships constraint temporarily violated restoration action meta linked 
domain level refers concepts specific application domain resource agent action entity relationship meta level borrower checkout bookcopy copy book domain level steve checkout info ucl copy knuth performs input performs input performs input master master instanceof link instance level link meta domain instance levels management telephone network type task considered transaction processing history tracking 
level concepts instances meta level abstractions library management subdomain borrower concept instance agent meta concept checkout concept instance action meta concept copy concept instance relationship 
domain level concepts linked instances meta relationships linking corresponding meta level concepts instance borrower performs checkout copy links book bookcopy 
domain level concepts satisfy instantiations meta constraints corresponding meta level concepts instance constraint limited borrow time violated restoration action associated sending reminder 
requirements model acquired structured domain level concepts instances corresponding meta relationships inherited meta level 
domain knowledge reused acquisition structured similar way 
instance level refers specific instances domain level concepts see 
similar distinction object meta levels requirements modeling see gre 
meta domain instance levels meta types types type instances respectively 
kaos meta model conceptual model meta level consisting meta level concepts relationships attributes constraints 

role conceptual meta model context requirements acquisition kaos meta model fills roles 
seen components requirements model acquired domain specific instances meta concepts linked instances meta relationships characterized instances meta attributes constrained instances meta constraints 
ii consequence meta model determines structure acquisition language 
iii consequence components requirements model inherit features defined corresponding meta level abstractions instance 
iv meta model drives acquisition process learning instruction systems 
example goal directed strategy section goal meta concept considered instances acquired reduction isa specialization links see objects concerned goals acquired defined 
agent capability meta level abstractions considered identify relevant instances 
constraint meta concept considered instances acquired goals operationalization links forth 
important recognize domainindependent knowledge attached meta concepts meta relationships form meta attributes meta constraints knowledge guidance provided acquisition process 
various components meta model yield criteria measuring conceptual similarity learning analogy strategy followed dbi 
analog requirements fragments retrieved domain knowledge base mapped target requirements similarities evaluated goals constraints actions agents events 
vi meta model determines structure requirements database requirements model gradually elaborated similarly determines structure domain knowledge base model fragments retrieved acquisition reused 
shown vla metamodels provide basis defining generic environment architectures tools know domain level concepts know just meta level concepts 

characterizing model components models meta level domain level seen consist concepts relationships linking concepts attributes attached concepts relationships see section style model definition close semantic data models che structured object representations bra 
meant attribute relationship precise see meta level domain level concepts relationships attributes characterized 

terminology attributes 
attribute att concept relationship defined function att called domain values attribute 
relationships 
ary relationship concepts cn defined tuple cn tuple denotes tuple type constructor instance tuple corresponding instances ck 
role played ck explicit name 
cardinality defined sequence pairs min max kn min max denote minimum maximum number instances respectively instance ck participate 
cardinalities allow various kinds constraints relationships expressed 
example cardinality copy relationship links bookcopy book concepts 
expresses book copy copy exactly book book may number copies ranging arbitrary number cardinality constraints number relationships kaos meta model depicted 
andor relationships 
graph structures nil need introduced wants support tracking alternative requirements options domain level 
example goal refined alternative combinations subgoals goal operational alternative combinations constraints constraint responsibility alternative combinations agents forth 
andor relationships introduced meta level purpose 
instances relationships declared acquisition language corresponding logical connectives 
andor relationship concepts compound binary relationship defined follows andr orr denotes relation composition orr tuple andr tuple instance pair concept instances exists alternative alt alt alt instances orr andr respectively 
represents set possible alternatives link graph terminology instances correspond nodes instances correspond 
andor relationships selected attribute possible values record alternative eventually selected acquisition 
values updated case backtracking explore alternative 
isa relationship 
subclass specialization captured binary isa relationship concepts 
relationship defined isa iff instance instance 
result features inherited inheritance mode specified feature instance inheritable type inheritable fully inheritable details see vla 
concept may linked isa relationship instances multiple inheritance supported 
shown greenspan gre specialization hierarchies great benefit development conceptual requirements models 

defining concepts relationships attributes meta domain levels model components characterized follows 
concept defined set features concept feature attribute relationship involving example agent meta level concept load attribute involved performs relationship book domain level concept title attribute involved copy relationship 
relationship defined set features relationship feature attribute ordered list concepts linked respective role cardinality 
example performs meta level relationship reliability attribute links agent action meta level concepts borrowing domain level relationship attribute links borrower bookcopy domain level concepts 
attribute att defined set characteristics name informal definition domain values unit values 
domain elementary compound 
elementary domain set atomic values set simple linearly ordered isa structured keyword domain isa structured 
compound domain built domains union tuple setof domain constructors syntax domain constructors kah 
attributes attached concepts relationships formal assertions values 
formal assertions attribute values 
domain level formal assertions attached domain specific concepts values attributes inherited meta level invariant attribute attached objects precondition postcondition attributes attached actions formaldef attribute attached goals constraints see sections 
assertion sub language writing attribute values typed temporal order logic equipped real time temporal constructs koy inspired dub 
primary notations examples summarized follows 
formed formula means property holds current state means property holds state means property holds current state means property holds current states means property holds previous state means property holds current previous state means property holds current previous states inheritance mode 
additional characteristic may attached relationship attribute inheritance mode isa specialization hierarchies instance inheritable type inheritable fully inheritable possible values see 
features meta concepts meta relationships fully inheritable corresponding instance domain level 
similarly constraints model components meta level correspondingly instantiated domain level 
example consider 
constraint may temporarily violated restoration action meta linked 
possible instantiation domain level action introduced appropriate conditions restore constraint consistency library database library shelves 
summarizes portion meta model relevance detailed description complete meta model vla 
proceed classical concepts appear form existing specification languages new concepts introduced kaos 
order presentation correspond order instances acquired domain level issue addressed section 
sequel ambiguity arises say instance meta concept 

objects entities relationships events object thing interest referenced requirements 
instances objects may evolve state state applications actions see section 
state object instance ob time defined mapping ob set values time features ob 
addition name primary meta attributes object include exists values true instance level corresponding object instance exists current state false constraint action object event entity relationship agent isa isa isa isa goal cause performs responsibility wish portion kaos conceptual meta model systemgoal isa conflict operationalization input ensuring inspect modify restoration isa isa binary relationship andor relationship isa relationship capability knows link concerns reduction output invariant values domain level assertions restrict class possible states corresponding object 
invariant implicitly universally quantified object states 
seen object meta concept involved number meta relationships 
defined meta concepts involved defined 
addition inherited meta level new domain specific attributes attached objects domain level title attribute book concept 
entity relationship event agent concepts specializations object meta concept inherit features 
entity autonomous object instances may exist independently object instances 
examples entities borrower book bookcopy library forth 
acquisition language write entity library available lost setof bookcopy setof subject declaration domain specific attributes invariant lib library lib available lost available available lost lost library acquisition language seen level structure outer level declaring domain level concepts terms meta model components inner level expressing assertions values meta attributes 
outer declaration level entity relationship structure yields structure requirements database static semantics checking performed entity relationship queries vla 
inner assertion level corresponds typed temporal order logic 
relationship subordinate object existence instances depends existence corresponding object instances linked relationship 
ob denote linked objects structure tuple ob 
exists meta attribute inherited object meta concept renamed acquisition language expression ob ob ob ob exists true 
relationship links objects relationship meta concept specific object meta concept see link 
meta relationship meta role links played relationship meta cardinality relationships ary meta role played object meta cardinality object necessarily participate relationships 
link meta relationship meta attributes role cardinality 
values meta attributes yield roles cardinalities relationships domain level 
reader may understand meta prefix meta roles meta cardinalities meta relationship confused role cardinality meta attributes link meta relationship 
example borrowing relationship partially described acquisition language follows 
relationship borrowing links borrower role borrows card bookcopy role card may copy borrowed may borrow copies time copy may borrowed may borrowed borrower invariant lib library bor borrower bc bookcopy borrowing bor bc bc lib bc lib requesting bor bc borrowing event instantaneous object instances exist instance level state 
exists meta attribute inherited object meta concept renamed acquisition language expression occurs ev ev exists true 
example event reminder sent borrower return book copy expressed follows 
event borrower bookcopy message text invariant rs occurs rs staff performs come back example action performs introduced 
event meta concept specific meta attributes addition inherited object 
frequency meta attribute express time interval repeating instances event 
specific meta relationships introduced model fact events may cause application actions produced applications shown 

actions action mathematical relation objects 
action deterministic relation reduces function 
action applications define state transitions 
addition name primary meta attributes action include precondition values domain level weakest necessary conditions initial states application corresponding action values domain level weakest sufficient conditions initial states application corresponding action postcondition values domain level strongest conditions final states describe net effect applying corresponding action 
pair precondition postcondition captures state transition produced application action 
pair pattern 

note difference precondition trigger condition 
action applied precondition holds applied trigger condition true 
meta constraint action precondition logically implied trigger condition taken conjunction invariants objects referred precondition 
attributes duration attached actions 
see vla detail 
action meta concept linked object input output meta relationships event cause meta relationships 
defined follows 
act ob ev denote instances action object event meta concepts respectively 
input act ob iff ob types making domain act output act ob iff ob types making codomain act cause ev act iff ev instances causing applications act ev act iff ev instances causing act specializations action distinguished meta model viz 
inspect modify actions 
modification action act output act ob means instances object ob created deleted features updated 
input output meta relationships optional argument result meta attributes respectively declare instance variables referenced assertions attached corresponding action 
examples suggest meta relationships meta attributes reflected acquisition language 
action checkout input bookcopy arg bc library arg lib borrower arg bor output library res lib borrowing precondition bc lib available postcondition bc lib available bc lib borrowing bor bc 
action input borrower arg bor bookcopy arg bc output reminder borrowing bor bc occurs bor bc postcondition 
trigger condition states condition frequency reminders produced 
event introduced 
example shows real time temporal constructs koy dub means past state current weeks 

agents agent object processor actions agents control state transitions 
opposed kinds objects entities relationships events agents choice behaviour fea 
examples agents human beings physical devices programs exist developed automated part composite system 
agents states kind object 
inherit features may characterize objects 
agents tuple type constructor agent refinement finer ones supported 
addition features inherited object meta concept agent meta concept load meta attribute values denote occupation rates corresponding agents 
load agent increase progressively requirements acquisition responsibility assignments 
initially non null agent assignments composite system 
process loads evaluated outside current scope approach 
load attribute acts placeholder values resulting cost analysis integrated values tactics responsibility assignment see section 
shown agent meta concept meta relationships action capability performs 
defined follows 
capability ag act iff agent ag capable performing action act 
performs ag act iff agent ag processor allocated act 
agent partly defined sets actions set actions perform set actions perform assignment decisions see section section 
obvious meta constraint ag agent act action performs ag act capability ag act performs relationship precisely captured meta level performance axiom ag agent act action performs ag act pre trig ag act post right hand side equivalence meaning agent ag performs action act guarantee start trigger condition act true precondition act true yield state satisfying postcondition act 
terms forest notations fin performance axiom stated ag agent act action performs ag act pre ag act post trig pre obl ag act meta relationship knows meta relationship agent object meta concepts 
meta relationship defined knows ag ob iff states object ob observable agent ag 
note performs ag act means ag control state transitions associated act knows ag ob means ag observe ob states 
note ob object kind 
particular state agent observable agents 
interface agent observe object states precise requirements doe 
interface meta attribute attached knows meta relationship introduced purpose values objects particular agents 
illustrate various notions get description stage agent staff 
declaration domain specific attributes invariant st staff instanceof st instanceof st load 
checkout return 
performs 
knows borrowing interface 

goals goal objective achieved composite system 
means objective formulated terms objects actions available agent system words goal formulated established appropriate state transitions control agents 
example standard objective library system book request eventually satisfied requests registered refer books relevant subject area covered library 
objective captured requirements fragment systemgoal achieve instanceof declaration goal category concerns borrower book borrowing 
formaldef bor borrower book lib library requesting bor subject lib bc bookcopy copy bc borrowing bor bc objective achieved application actions available agent 
example borrower agent establish objective application checkout return actions capable checkout action predicate borrowing bor bc true precondition available action true application actions available agent 
seen section goal needs implemented operational constraints established state transitions control agents 
seen concerns meta relationship links goal object 
explicit links established domain level goal objects goal refers links acquisition get object descriptions goal descriptions 
see section 
example formulation goal requires description borrower agent borrowing requesting relationships 
goal taxonomy defined meta level support guidance acquisition reuse goal descriptions formal checks 
goals classified pattern category 
pattern goal pattern formal definition 
patterns identified achieve pattern cease pattern maintain pattern avoid pattern optimize pattern maximize objective function minimize objective function patterns impact set possible behaviours system achieve cease goals generate behaviours maintain avoid goals restrict behaviours optimize goals compare behaviours 
goal patterns declared making pattern name precede goal name see example 
goals requirements documents different categories 
meta level categories organized specialization hierarchy 
top level taxonomy shown 
distinction 
application specific goals achieved composite system goal declared systemgoal 
agent specific goals achieved composite system goal keeping borrowed copies long needed private borrower agent 
come back private goals 
system goals specialized categories 
categories considered far include concerned satisfying agent requests concerned getting agents informed object states concerned recovering human agents breakdowns automated agents concerned maintaining consistency automated physical parts composite system concerned maintaining agents states safe observable restricted conditions respectively 
specific category domain level goal declared instanceof clause goal inherit features corresponding goal category 
example objective safe transportation lift system captured requirements fragment systemgoal maintain instanceof concerns passenger informaldef 
note objective formulated established actions available passenger agent actions available agents 
difference previous example goal goal formalized 
goals described formally informally 
informal goals need refined concrete formal ones may need refined order obtain subgoals easily operational constraints 
notions formality confused 
reduction meta relationship introduced goal refinement 
goal reduced alternative combinations subgoals reduction andor corresponds classical problem reduction operator problem solving nil 
precise definition follows 
reduction iff achieving goal possibly subgoals alternative ways achieving goal domain level goals structured graphs goal node parent nodes occur reductions see corresponding cardinality 
come back goal 
predicate borrowing bor bc eventually true states requesting bor holds provided precondition available checkout action true sooner 
achieved having reasonable amount relevant book copies library ii guaranteeing regular availability book copies iii notifying case requested book copies returned guaranteeing copy book available borrower time 
alternative probably rejected due cost ensuring constraint operationalizing see 
possible refinements captured acquisition follows 
systemgoal achieve instanceof 
concerns 
formaldef 
systemgoal maintain concerns library formaldef lib library bc bookcopy bc lib bc lib available nw bc lib available system parameter 
systemgoal achieve instanceof concerns borrower library 
formaldef lib library bor borrower book bc bookcopy requesting bor 
bc bookcopy copy bc bc lib available bc bookcopy copy bc bc lib available knows bor lib available knows predicate introduced sec 
reduction meta relationship allows capture goals contribute positively goals 
goals contribute negatively ones captured conflict relationship 
defined follows 
conflict iff goals achieved 
suppose example private goal acquired maintain instanceof concerns borrower borrowing formaldef bor borrower book bc bookcopy borrowing bor bc copy bc need bor borrowing bor bc 
goal clearly seen conflict goal see formal definitions goals invariants attached library entity borrowing relationship 
description complemented conflicts goals explicit 
recording conflicts required support subsequent conflict resolution evaluation negotiation 
prospect priority meta attribute attached goal meta concept 
values conflict resolution agent responsibility assignment 
priorities take values range value highest priority 
meta constraint highest priority 
wish meta relationship introduced specialization agent meta concept shown goal meta concept defined wish ag iff human agent ag wants goal achieved 
example goal clearly wished borrower agents system goal avoid wished staff agents want copies disappear improperly 
private goals wish links provides useful information domain level making decisions alternative responsibility assignments conflict resolutions 
see section 
example private goals low priority values dropped case conflict agent wishes system goal constraint operationalizing goal assigned preferably agent staff agents charge constraint operationalizing avoid agent assigned constraint operationalizing goal conflicts private goals borrower agent charge constraint operationalizes goal 

constraints constraint operational objective achieved composite system 
opposed goals constraint formulated terms objects actions available agent system established appropriate state transitions control agents 
example constraint captured requirements fragment 
maintain formaldef bor borrower bc bookcopy borrowing bor borrowing bor nw borrowing bor 
constraint operational achieved application actions available agent system 
borrower agent return action capabilities borrowing bor precondition borrowing bor postcondition 
constraint established appropriate state transitions control borrower agent 
goals operational constraints 
link goals constraints captured operationalization meta relationship defined follows operationalization iff meeting constraint operational ways achieve goal constraint operationalizing goal amounts implementation goal 
general goal operationalized alternative combinations constraints reduction operationalization andor relationship 
meta constraint goal operationalized constraints may reduced 
coming back goal verify formal definition definitions library entity borrowing relationship constraint operational ways achieve 
constraint way goal operational 
description complemented follows systemgoal maintain concerns 
formaldef 
operationalization meta relationship propagates features goal meta concept constraint meta concept see 
constraints reduced way goals conflicting may assigned priorities may wished concern objects classified pattern category 
conflicts categories propagated operationalization links domain level contraints operationalize conflicting goals conflicting operationalized forth 
goal achieved provided constraints operationalizing met 
meet constraints appropriate restrictions may required turn actions objects identified new actions objects required 
possible agents able enforce constraints restricted new actions need identified appropriate ones selected 
ensuring responsibility meta relationships introduced purpose 
see 
introduce definition ensuring important recognize constraint satisfaction may require strengthening preconditions postconditions actions invariants objects acquisition new specific actions objects acquisition new specific features actions objects acquired 
point precise consider goal introduced section 
lift system goal operationalized constraint formally defined lift doors floor partof state closed state closed assume specifications actions acquired form 
action input lift arg floor arg passenger arg output precondition requesting postcondition action input lift arg doors arg output lift res doors res precondition partof state closed postcondition state open meet constraint derivations 
formal expression constraint pre postconditions action derives predicate state closed hold initial final states applied strengthening precondition postcondition assertion required 
ii formal expression constraint pre postconditions action derives antecedent constraint false initial states consequent false predicate hold initial final states applied strengthening precondition postcondition assertion required 
iii formal expression constraint derives action required yield transitions states state closed states state closed conditions define precondition postcondition new action named 
ensuring meta relationship meta attributes attached 
values domain level represent constraint oriented preconditions trigger conditions postconditions invariants respectively 
constraint general met alternative combinations strengthenings ensuring andor relationship 
defined action object meta concepts hand constraint meta concept 
precise definition follows 
ensuring act iff application action act strengthened conditions pre trig post guarantees constraint holds initial final states act 
ensuring obj iff restriction ob states strengthened condition inv guarantees constraint holds initial final states action ob 
combination operationalization ensuring links domain level provides explanations rationale requirements actions objects regard system level organizational goals seen refinement notion operationalization explanation learning mos ell 
constraints operationalizing goals assigned agents charge strengthened actions 
captured responsibility meta relationship 
constraint general assigned alternative agents responsibility andor relationship 
defined responsibility ag iff agent ag candidates enforce constraint appropriate behaviour prescribed ensuring links 
responsibility relationship precisely characterized responsibility axiom strengthened version performance axiom section 
ag agent constraint responsibility ag act action ensuring act performs ag act pre trig ag act post constraints may restrict behaviour responsible agents way similar fea note distinction fea goals operational constraints 
fact constraint assigned exactly agent alternative assignment considered see cardinality responsibility subject meta constraints ag agent constraint act action performs ag act ensuring act responsibility ag ag agent constraint act action responsibility ag ensuring act capability ag responsibility meta relationship optional meta attributes cost agent take responsibility constraint reliability agent respect constraint motivation agent control system behaviour meet constraint 
values meta attributes domain level tactics selecting alternative responsibility assignments 
example goal appeared reduction goal section operationalized constraints 
formal definition lib library bor borrower bc bookcopy bc borrowing bor bc bc lib max bor max bor defines upper limit number borrowed copies function line reasoning may derive strengthened precondition attached ensuring instance linking constraint checkout action determination responsibility links acquisition values cost reliability motivation attributes get requirements fragment constraint operationalizes formaldef 
see checkout bc borrowing bor bc borrower reliability low motivation low cost low staff reliability high motivation high cost low fragment probably decide performs link checkout action assigned staff borrower decision negotiation tactics see step section 
difference responsibility performs meta relationships important 
responsibility defined agents constraints 
captures alternative assignments constraints agents 
hand performance defined agents actions 
captures decisions actual assignment actions agents consequence additional restrictions imposed agent behavior strengthenings conditions 
constraint meta concept specializations represented 
may violated may temporarily violated 
example planes portion air corridor 
example meta constraint built meta model domain level constraints category 
need specific actions restore 
knowledge captured metamodel introducing restoration meta relationship defined restoration act iff action act contributes re establishing soft constraint restoration meta cardinality role soft constraint restoration action associated 
meta constraint source acquisition new requirements fragments action introduced section acquired fact constraint shown section declared 

features kaos meta model kaos meta model incorporates meta concepts meta relationships directly related goal directed strategy discussed section 
short list 
structuring composition meta relationships structure complex objects complex actions components various structuring modes 
scenario meta concept linked action meta concept combination meta relationship support sequential parallel alternative repetitive compositions scenarios discussed clients validate requirements 
view ternary meta relationship links agents concepts playing role master concept concepts playing role facet concept 
allows domain level concepts visible agents restricted facets conflicting views recorded resolution 
example entity seen borrower agent entity structured pair title set papers seen staff agent entity structured triple title date location shelves representation meta relationship reflexive object action specify requirements links objects actions automated part composite system corresponding objects actions manual part 
example constraint consistency library database physical library captured follows 
entity isa library inherits features library available attribute invariants 
specific features maintain instanceof formaldef lib library representation lib available lib available lib lost lib lost details see vla 

goal directed acquisition strategy learning instruction framework dav swa ben requirements composite system acquired domain specific instances elements conceptual metamodel 
instances satisfy meta constraints specified cardinality constraints meta relationships see various meta constraints explicit section 
requirements gradually acquired expressed acquisition language closely reflects structure meta model suggested examples introduced section 
acquisition processes guided strategies domain models 
strategies define specific ways traversing meta model graph acquire instances various nodes links 
step strategy composed finer steps question answering input validation meta constraints application tactics select preferred alternatives various andor meta relationship instances arise acquisition deductive inferencing property inheritance specialization links analogical reuse domain models 
domain models described acquisition language requirements 
organized isa inheritance hierarchies domain knowledge base finds various levels specialization goals constraints objects actions agents involved resource management systems transportation systems communication systems forth 
ultimately acquisition assistant knowledge base include rich variety domain models strategies tactics 
acquisition process critical decisions analyst knowledge guidance provided assistant 
strategies considered far differ meta concept centered goal directed view directed scenario directed strategies identified 
strategy interest goal directed 
steps 
upper case letters refer meta level concepts 
acquisition goal structure identification concerned objects 
preliminary identification potential agents capabilities 
operationalization goals constraints 
refinement objects actions 
derivation strengthened actions objects ensure constraints 
identification alternative 
assignment actions responsible agents 
strategy steps ordered may overlap notably steps 
backtracking possible step 
example information acquired responsibility identification step step may induce changes results operationalization step step 
changes step propagated succeeding steps 
understand proposed strategy address questions step tasks done step 
tasks necessary 
tasks carried 
identify components meta model involved step 
trace acquisition path goal node back meta model graph 
step acquire goal structure identify concerned objects system goals client incrementally refined goal subgoal structure graph 
words instances goal meta concept reduction meta relationship acquired constraints specified meta level 
leaf goals structure primitive goals operational constraints step 
portion possible goal structure related borrower goals library system visualized 
elaboration goal structure consists substeps identify category pattern associate parent goal reduce formalize refined subgoals specified pattern soon concrete 
general goals near roots trees formalized 
ii reduction proceeds identify objects concerned goals elaborate preliminary definition features basic domain specific attributes appear goal descriptions preliminary invariants attached 
iii identify possible conflicts system goals define instances conflict 
conflict detected assign priorities conflicting goals 
priorities define partial order goals 
substeps sequential intertwined 
conflicts identified may necessary find alternative reduction fewer conflicts 
result new goals may identified 
reduction system goals primitive goals necessary global goals usually directly translated constraints simple primitive goals operationalized 
system wide goal structure records history acquisition process 
structure important ties specification components rationale goal descriptions case negotiation required resolve goal conflicts rob replay part acquisition process circumstances similar portions goal structure recognized 
preliminary identification characterization objects goals ensures objects relevant goals consideration 
identification reduction goals non trivial critical task 
analysts clients interact lot stage 
tactics help analyst refine goal structure 
reuse relevant generic goals reductions specializing instantiating description 
generic goals retrieved domain knowledge base indexing scheme retrieval goal category goal pattern isa links concerned objects identified generalizations domain models available 
retrieved goals reductions considered specialization adaptation specific composite system modeled 
example introduced section handled way 
goal classified category declared achieve pattern concerned borrower book objects declared isa specializations generic user resource objects resource management domain model respectively 
requirements fragment retrieved domain knowledge base basis systemgoal achieve instanceof concerns user resource 
formaldef user res resource rep repository requesting res res rep ru unit ru res ru generic concept names instantiated library specific counterpart generic predicate specialized appropriate fashion library specific con goal portion goal structure borrower goals goal achieve maintain maintain achieve maintain maintain maintain achieve maintain maintain maintain reduction links reduction links 
conflict 
text 
note reduction generic subgoals proposed 
subgoal formal expression specific book concept declared isa specialization specific concept resource concept concept subgoal case formal expression goal section obtained straightforward instantiation 
reader convinced process replayed goal hospital management system 
reuse process control analyst course 
time possible adapt proposed goals reject provide new specific ones 
general reused concept description important required adaptation 
example goal section seen adapted specialization goal 
systemgoal achieve instanceof concerns user formaldef user comp comp comp knows comp tactics acquisition goal structure ones 
reducing goal operationalized 
sooner goal description translated operational form better formal reasoning take place ensure constraints appropriate actions assign responsibilities agents 
remember operational constraints reduced 
example goal seen section require reduction operationalized subgoal requires reduction operationalized constraint defined section 
reduce goals subgoals require operation fewer potential agents achieve 
tactics basic ensure reduction process progress stage goals 
requires progress step information potential agents capabilities need available 
step step working coroutines 
choose alternative reduction minimizes costs 
costs taken broad sense cost achieving goal means human agent vs cost achieving means program developed acquired purpose cost purchasing resources concerned goal anticipated goal costly achieve necessary find cheaper alternative reductions 
problem heuristic cost evaluation complex task normally handled responsibility costs evaluated prior assigning performs links agents 
don need complex evaluation functions detect goals appear costly 
example subgoal introduced section alternative reduction goal rejected tactics case large libraries potential 
choose alternative reduction conflicts possible 
resolve conflicts relative priority goals 
conflicts highest priority goals resolved 
higher priority goals favoured 
example goal described section seen conflict goal higher priority re tained 
fair value number weeks return emerge compromise negotiation rob 
mentioned various objects concerned goal descriptions partial characterizations 
example goal concerns library object see sec 
available attribute object appears expression goal 
stage recognize library object instance entity meta concept introduce additional attribute write partial invariant lib available lost attribute introduced step constraint avoid acquired ways operationalize goal 
similarly borrowing object concerned goal meets criterion relationship instance see section objects links appear expression goal borrower bookcopy 
partial invariant recognized stage borrowing bor bc bc lib 
case generic goals reused tactics features generic objects concerned goals specialized instantiated correspondingly 
example generic repository objects instantiated library borrowing respectively partial invariants library borrowing objects suggested obtained instantiations generic invariants rep available ru ru rep assertions available generic attributes repository entity domain known setof 
step identify potential agents capabilities preliminary identification agents available composite system category human agent physical device program actions capable performing objects involved goal descriptions 
words goal directed instances agent meta concept capability meta relationship action meta concept acquired constraints specified meta level 
action appearing capability list agent pair basic precondition postcondition specified pair capture state transitions produced application action objects identified step 
preliminary information agents potentially available needed determine reduction process terminate step guide operationalization process step 
various objects appearing goal descriptions elaborated step reviewed determine control state transitions 
agent obtained actions corresponding state transitions identified elementary pre postconditions describing transitions written 
example borrower agent identified description goal introduced section 
object agent control state transitions borrowing object appearing formal expression goal possible transitions borrowing borrowing borrowing borrowing return checkout actions identified elementary pre postcondition borrowing bor bc borrowing bor bc return 
similarly passenger object referenced goal identified agent control transitions lift getting doors open closed 
additional agents capabilities acquired interaction clients ana 
agents eventually required composite system necessarily identified stage 
example counter device agent required ensure book copy improperly removed checked need agent arise step responsibility links identified avoid constraint operationalizing goal 
remember agents organized specialization hierarchies domain level concepts 
specialized agent inherits capabilities general agents specializes addition may specific capabilities agent capabilities staff agent plus specific ones ordering new book copies 
tactics may helpful identifying agents capabilities 
reuse relevant generic agents capabilities specializing instantiating description 
generic agents retrieved domain knowledge base agents considered objects concerned generic goals retrieved step agent meta type 
retrieved agents generic actions capable considered specialization adaptation specific composite system modeled 
example case generic goal reused specific context concept user agent retrieved actions capability list 
partial description action proposed instantiation specialisation action input arg ru repository arg rep user arg output repository res rep precondition ru rep available postcondition ru rep available ru rep ru process instantiating specializing adapting generic descriptions follows line suggested step 
outcome simple case description checkout action section 
action capability list human agent consider relevance automated agent corresponding action capability list 
tactics basic introducing new devices programs candidates space alternative agent assignments see step 
automated action appears relevant action objects involved defined isa specializations action objects defined particular pre postconditions corresponding image objects inherited features automated action 
instances representation meta relationship introduced link concepts automated counterpart 
see section new goals introduced goals category 
example action identified possible capability automated agent defined isa specialization checkout action 
corresponding image objects identified defined way entity introduced section 
object corresponding image instances object meta type need necessarily instances specialized automated counterpart borrower agent entity record relevant information 
required example concern library entities goal operationalized maintain soft constraint section 
tactics allows avoid confusions physical automated parts composite system confusions frequently specifications win 
step operationalize goals constraints leaf goals goal structure elaborated step transformed system objectives formulated terms objects actions available agent identified step 
words instances constraint meta concept operationalization meta relationship elaborated constraints specified meta level 
constraint definition lead identification new objects actions involved constraint 
system objectives need operational order derive new strengthened actions objects support steps ii assign responsibilities steps 
elaboration goals transformation goals constraints non trivial task 
alternative implement goal just alternative programs implement specification 
situations best operationalization retained 
tactics may guide analyst carrying transformation 
reuse relevant generic specializing instantiating description 
generic constraints retrieved domain knowledge base constraints considered operationalize generic goals retrieved step 
retrieved constraints reduction considered specialization adaptation specific composite system modeled 
process similar suggested steps 
example maintain constraint seen section operationalize goal 
constraint obtained instantiation constraint domain knowledge base operationalize generic goal specialization level concept defined 
maintain formaldef user ru ru ru nw ru example consider goal introduced section 
goal instantiation generic goal systemgoal achieve instanceof concerns user repository formaldef rep repository user res ru requesting res 
ru unit ru res ru rep available ru unit ru res ru rep available knows rep available goal known domain theory constraint achieve instanceof concerns user repository formaldef rep repository user res ru requesting res 
ru unit ru res ru rep available ru unit ru res ru rep available ntu occurs ntu ntu res message constraint event appropriate attributes captures required user notification 
constraint exhibits standard pattern operationalizing knows predicates 
instantiation generic user repository concepts borrower library book bookcopy respectively yield instantiated constraint proposed analyst possible adaptation 
general form reuse supported process level 
knowledge base contain set domain specific operationalization rules applied variety similar goals mos 
operationalization process replayed done derivational analogy systems vla 
promising approach explored 
goal reduction tactics transposed constraints 
seen section constraints operational system objectives operationalization meta relationship propagates features goal meta concept constraint meta concept reduction conflict category commonsense tactics step goal operationalization constraint reduction choose alternative operationalization reduction minimizes ensuring costs choose alternative operationalization reduction conflicts possible forth 
choose alternative operationalization minimizes need restoration actions 
soft constraints chosen operationalize leaf goal need complex restoration actions alternative way operationalizing leaf goal considered alternative constraints violated fewer situations simpler restoration actions required 
step refine objects actions constraints obtained step involve new objects new actions entities relationships events agents state transitions identified steps emerge operational formulations 
new features concepts identified referred new domain specific attributes objects 
step analyst defines objects actions newly identified completes description objects actions identified new domain specific attributes new elements invariants pre postconditions introduced 
refined descriptions objects actions form basis subsequent acquisition steps 
invariants pre strengthened ensure constraints 
needed identify responsibility links 
process acquiring additional requirements fragments objects actions constraints similar process acquiring initial ones goals see steps 
example achieve constraint instantiated achieve yields implication consequent occurs bor message new object event meta type involved 
preliminary description event include invariant capturing condition occurrence 
meta constraint event meta type new action acquired action having output pair elementary pre postconditions action acquired 
acquisition process reuse generic descriptions shown 
step derive strengthened actions objects ensure constraints descriptions actions objects completed step necessarily guarantee constraints obtained step met 
step strengthened actions objects derived ensure required constraints satisfied 
strengthenings put preconditions postconditions invariants trigger conditions introduced actions new actions introduced yield state transitions involved formulation constraints restoration actions defined soft constraints 
words instances ensuring elaborated meta constraints specified meta model link actions objects constraints ensure 
note ensuring andor relationship see section frequent case constraint ensured combination actions objects physical subsystem alternatively counterpart combination automated subsystem 
ensuring links necessary identify actions objects going contribute satisfaction constraint show actions objects contributing constraint satisfaction 
action strengthening impact possible behaviour agent allocated action information acquired step taken account steps responsibilities identified assigned 
trigger conditions strengthenings pre postconditions invariants derived formal expression constraints 
action matched constraint check state transitions defined action meet constraint 
match may reveal subsidiary conditions action meet constraint case conditions taken strengthenings action 
principle similar objects invariants 
process precise illustrate giving inference rules general patterns constraints 
full calculus deriving strengthenings scope 
cons denote pattern constraint pre post patterns action pre postcondition required strengthenings pre post respectively trig required trigger condition 
rules inference 
cons pre post cons pre post cons pre post cons post trig rule applied derive strengthenings action constraint section 
second rule applied derive strengthenings action constraint 
third rule applied derive strengthening bc borrowing bor bc precondition checkout action ensure constraint formalized section 
fourth rule inference derive trigger condition 
bc bookcopy copy bc bc lib available bc bookcopy copy bc bc lib available requesting bor attached action revealed step trigger condition derived achieve instantiation achieve constraint introduced step 
new actions restore soft constraints derived general principle 
action introduced section acquired restore constraint action mentioned section acquired restore maintain constraint introduced section tactics help derivation ensuring links 
reuse relevant generic actions strengthenings specializing instantiating description 
generic ensuring links retrieved domain knowledge base links considered ensure generic constraints retrieved step 
retrieved links associated strengthenings considered specialization adaptation specific composite system modeled 
process similar suggested steps 
choose alternative ensuring link minimizes restrictions ensuring actions 
strengthened conditions defined actions restrict agents behavior see responsibility axiom section preferable define alternative ensuring structure imposes restrictions possible 
step identify alternative responsibilities step analyst acquires andor responsibility structure linking agents constraints 
constraint obtained step various possible responsibility links identified identification capabilities agents determined step 
acquisition responsibility links includes determination values cost motivation reliability attributes attached responsibility meta relationship 
various automation alternatives considered explicit stage 
wish links acquired human agents identified step 
information acquired step needed step right decisions processor human agent program assign action constraints operationalizing system goals guaranteed met 
acquisition guided meta constraints responsibility meta relationship 
see section constraint assigned agent alternative assignment considered 
agent possible candidate provided actions ensuring constraint capability list agent ii agent behave requirements put actions precondition postcondition trigger condition respective strengthenings attached ensuring links 
words responsibility axiom satisfied 
wish links acquired interaction analysts clients 
values cost motivation reliability meta attributes attached responsibility links determined interactions cost estimation models integrated 
general costs depend agent actions involved meet constraint 
motivation partially estimated potential source conflict mutual support private goals agent leaf goal operationalized constraint 
motivation agent controlling actions meet constraint expected low case conflict high case mutual support 
tactics help identification alternative responsibility links 
reuse relevant responsibility links generic constraints agents 
generic ity links retrieved domain knowledge base links considered link generic agents retrieved step generic constraints retrieved step 
retrieved links considered specialization adaptation specific composite system modeled 
process similar suggested steps 
suggest examples constraints introduced 
constraint assignable borrower agent staff agent agents return actions capability list enforce corresponding strengthenings actions ensure constraint 
strengthening amounts strengthened postcondition return trigger condition 
borrower agent conflicts goal constraint operationalizing goal 
see formal expressions sections values motivation reliability corresponding responsibility links low borrower high staff 
automated counterparts return actions identified step defined specialization actions inherited constraint refering automated representations corresponding objects assignable agent enforce constraint corresponding strengthenings 
similarly constraint assignable staff agent borrower agent enforce strengthening checkout action derived step ensure constraint 
alternative responsibility link involving borrower values motivation reliability low conflict private goal 
automated counterpart assignable agent enforce corresponding strengthened precondition action 
example consider leaf goal appearing 
goal operationalized constraints 
assigned staff agent shelf mark allocation program assigned agent low reliability agent high reliability 
step assign actions responsible agents performs links effectively assigned agents various actions elaborated steps basis alternative responsibility links established step 
allocation actions processors implies particular performing agents selected committed satisfy responsibility axiom see section 
agent load values gradually updated assignment performs links agent proceeds 
agent initially non null load assignments composite systems 
backtracking assignment decisions may take place agent overloaded performs links undone 
eventual assignment actions agents commitment responsibility axiom guarantees constraints operationalizing system goals met appropriate behaviour agents 
action assigned agent agent determined alternative candidates responsibility constraints action ensures 
see step 
tactics help deciding alternative candidates 
effective assignments prevent constraints met 
example deciding checkout action allocated borrower agent prevent consistency constraint met borrower agent responsibility link constraint 
formal expression constraint section 
fact restoration action specializations capability list borrower agent 
rational decision allocate checkout action staff agent 
case staff agent action supervision responsible constraint 
reuse relevant performs links generic agents actions 
generic performs links retrieved domain knowledge base links considered link generic agents retrieved step generic actions retrieved step 
retrieved links considered specialization adaptation specific composite system modeled 
assign performs links actions ensuring constraints operationalize highest priority goals 
tactics assign checkout actions load values increased correspondingly action issuing list book acquisitions 
effective assignments conflicting 
human agent assigned action ensuring constraints operationalize goals conflict private goals agent motivated guarantee satisfaction constraint 
assignment return action borrower agent rejected ground 
maximize reliability 
choice agents select agent highest reliability 
tactics retain agent action operationalizes constraint 
avoid overloading agents 
excessive load actions ensure constraints seriously degrade system performance 
minimize cost performance 
choice agents select agent lowest performance cost 
note tactics refer single meta attribute relationship 
kind hill climbing search local optima may reach global optimum ideally criteria considered 
multicriteria analysis techniques great help context 
holds tactics previous steps 
example eventual decision choosing alternative agent allocated number transactions automate manual counterpart governed combination tactics integrating goal achievement reliability cost load reduction 

proposed meta model capturing initial requirements strategy conducting requirements acquisition process 
requirements considered refer entire composite system part automated physical environment way parts operate 
salient feature approach importance systemlevel goals operationalization constraints 
contrasts traditional technology formal semi formal specification requirements supposed captured terms data operation abstractions 
experience real requirements documents convinced authors higher level abstractions goal operationalization ensuring action agent alternative assignment informally explicitly requirements non toy systems 
formal framework proposed seen preliminary attempt reason formally terms higher level concepts 
meta level constraints rules inference temporal logic allow formal checking requirements formal derivation goaldirected strengthenings 
encouraging see independently recognized need reasoning system goals category reduction interference links 
strategy discussed amounts goal directed traversal meta model graph specific tactics applied node acquire corresponding requirements fragments 
salient feature reuse meta level domain level knowledge 
principle rich meta model guide acquisition process inspired machine learning learning strategies acquisition process guided knowledge acquired dav ben 
kaos meta model may appear complex price pay meta level guidance acquisition 
domain independent knowledge meta model provides guidance acquisition strategy provide 
hand experience acquiring requirements variety resource management systems library systems airline reservation warehouse processing hospital management transportation systems lifts trains confidence power reusing generic descriptions 
descriptions retrieved domain knowledge base instantiated specialized adapted system considered 
usual benefits reuse matching descriptions requirements acquired results detecting problems hard detect notably inadequacies contradictions 
requirements fragments come rational requirements university library system currently 
may worth compare fragments simplistic requirements classical library problem win see informal requirements stated derived approach 
argued requirements acquisition languages need richer abstractions supported traditional specification formalisms state algebraic ones 
needed stage sophisticated formal checking undertaken specification automated subsystem 
acquisition languages design specification formalisms may play complementary roles 
developed set rules transforming kaos objects actions data operation schemas spi 
components kaos meta model discussed provide basis defining strategies agent directed strategies meta model traversed views agents composite system scenario directed strategies typical usage scenarios elaborated 
current belief goal directed strategy best establish system objectives achieved proper cooperation responsible agents 
weak facets approach plan near 
declaration part acquisition language clearly graphical concrete syntax reflect various concepts links supported meta model 
assertion sublanguage incorporate deontic logic extensions support deeper level formal reasoning agent capabilities responsibility assignment 
cooperation communication agents supported explicitly 
alluded tactics refined handle multiple criteria extended form rich body rules particular goal conflict resolution strategies need carefully investigated 
problem interfering goals recognized difficult tackle see wal 
ultimately tactics formalized acquisition assistant designing 
parallel reuse tactics suggested working analogical acquisition techniques requirements similar systems retrieved transposed dbi 
acknowledgments due bruno contribution approximation kaos meta model 
grateful john anderson robert darimont brian martin feather anthony finkelstein jacques rob helm jeff kramer philippe massonet bill robinson useful questions suggestions 
constructive comments reviewers presentation gratefully acknowledged 
kaos project supported belgian ministry scientific affairs context belgian incentive program fundamental research artificial intelligence 
rfo ai 
third author supported nsf 
ccr 
anderson private communication 
ast astesiano wirsing asl proceedings ifip wg working conference program specifications transformations north holland 
bal balzer cohen feather goldman swartout operational specification basis specification validation theory practice software technology ferrari goguen eds north holland 
ben knowledge system acquiring conceptual structure diagnostic expert system journal automated reasoning vol 
bra brachman levesque eds readings knowledge representation morgan kaufmann 
che chen entity relationship model unified view data acm transactions database systems vol 
march 
dar dardenne fickas van lamsweerde goal directed concept acquisition requirements elicitation proceedings th international workshop software specification design como italy 
dav davis teiresias applications meta level knowledge knowledge systems artificial intelligence davis lenat eds mcgraw hill 
doe fickas helm feather model composite system design proceedings th international workshop software specification design como italy 
dbi van lamsweerde requirements acquisition analogy report kaos project institut informatique de namur belgium 
dub dubois van lamsweerde making specification processes explicit proceedings th intl 
workshop software specification design monterey ca ieee cat 
tho april 
dub dubois formal language requirements engineering computer systems introducing logic approach artificial intelligence ed vol 
wiley 
ell explanation learning survey programs perspectives acm computing surveys vol 
june 
fea feather language support specification development composite systems acm transactions programming languages systems vol 
april 
fea feather constructing specifications combining parallel elaborations ieee transactions software engineering vol 
february 
fia fiadeiro sernadas linear tense propositional logic events transactions information systems vol 

fic fickas nagarajan critiquing software specifications ieee software november 
fin finkelstein potts building formal specifications structured common sense proceedings th international workshop software specification design monterey ca ieee catalog nr 
th april 
fin finkelstein multi party specification proceedings th international workshop software specification design pittsburgh pa ieee may 
gau gaudel structured algebraic specifications esprit status report north holland 
ghe ghezzi mandrioli trio logic language executable specifications realtime systems journal systems software june 
gre greenspan requirements modelling knowledge representation approach software requirements definition 
phd thesis university toronto march available report csrg 
gre greenspan borgida mylopoulos requirements modeling language logic knowledge management systems brodie mylopoulos eds springer verlag 
gut guttag horning report larch shared language science computer programming vol 

hal hall computational approaches analogical reasoning comparative analysis artificial intelligence vol 

han hansen ravn rischel specifying verifying requirements real time systems proceedings acm sigsoft conference software critical systems acm software engineering notes vol 
december 
har harel statecharts visual formalism complex systems science computer programming vol 

hull king semantic database modeling survey applications research issues acm computing surveys vol 
september 
ica finance van lamsweerde du bois version model requirements development process intermediate deliverable esprit project january 
jon jones systematic software development vdm nd edition prentice hall 
kah kahn lang metal formalism specify formalisms science computer programming vol 

kel keller kahn specifying software quality requirements metrics tutorial system software requirements thayer dorfman eds ieee computer society press 
koy de roever real time programming asynchronous message passing proc 
nd acm conference principles distributed computing 
mey meyer formalism specifications ieee software vol 
jan 
mylopoulos chung nixon representing non functional requirements approach ieee transactions software engineering june 
mos mostow problem solver making advice operational proceedings aaai morgan kaufman 
nil nilsson problem solving methods ai mcgraw hill 
reu waters requirements apprentice automated assistance requirements acquisition ieee transactions software engineering vol 
march 
rob robinson integrating multiple specifications domain goals proceedings th international workshop software specification design may 
rob robinson negotiation behavior requirement specification proceedings th international conference software engineering march 
rom 
roman taxonomy current issues requirements engineering ieee computer april 
spi spivey notation prentice hall 
swa swartout system creating explaining expert consulting programs artificial intelligence vol 

vla van lamsweerde generic lifecycle support alma environment ieee transactions software engineering vol 
june 
vla van lamsweerde learning machine learning introducing logic approach artificial intelligence ed vol 
wiley 
vla van lamsweerde dardenne kaos project knowledge acquisition automated specification software proceedings aaai spring symposium series track design composite systems stanford university march 
vla van lamsweerde dardenne kaos knowledge representations initial support formal specification processes report rr unite informatique university louvain 
wal waldinger achieving goals simultaneously machine intelligence vol 
michie eds ellis horwood 
win wing study specifications library problem ieee software july 
zave operational approach requirements specification embedded systems ieee transactions software engineering vol 
may 
multiple criteria decision making mcgraw hill 
