university amsterdam programming research group data flow analysis dfa results abstraction ln ln abstraction 
language dependent language independent generic architecture data flow analysis support reverse engineering leon moonen report june university amsterdam department computer science programming research group generic architecture data flow analysis support reverse engineering leon moonen report june moonen programming research group department computer science university amsterdam kruislaan nl sj amsterdam netherlands tel 
mail leon wins uva nl universiteit van amsterdam generic architecture data flow analysis support reverse engineering leon moonen university amsterdam programming research group kruislaan nl sj amsterdam netherlands leon wins uva nl data flow analysis process collecting run time information data programs executing 
focus data flow analysis support program understanding reverse engineering 
data flow analysis beneficial applications information obtained compute relationships data objects programs 
relations play key role example determination logical components system interaction 
general support program understanding reverse engineering requires ability analyse variety source languages ability combine results analysing multiple languages 
flexible generic software architecture describing performing language independent data flow analysis allows transparent multi language analysis 
components architecture formally specified 
data flow analysis hec ken described process collect information definition dependencies data programs 
example consider program statement data flow analysis give answers questions definitions determined value variables definition depend indirectly value computed program 
specific variables questions ask kind information variables program 
general questions called data flow analysis problems 
solution described called data flow analysis algorithms 
algorithms capture program information compute derived data flow information 
data flow analysis algorithms frequently defined operations called control flow graphs 
control flow graph represents possible execution paths computer program nodes represent pieces code edges represent possible control transfers code pieces 
labels add extra program information nodes edges graphs 
data flow analysis algorithms combine manipulate information set equations relate information node information nodes 
solution equations yields solution particular data flow analysis problem 
typical example data flow equation gen gamma del read information output node generated enters input deleted 
general function collects information subset neighbours usually successors predecessors flow graph 
data flow analysis static form analysis program information collected actual execution parts program 
possible determine exact output program determined execution path control flow graph taken 
data flow analysis algorithms approximations behaviour example considering branches statement performing fixed point computation body statement 
fixedpoint exists data flow equations compute sets variables finite number variables available consider programs finite number statements 
finite upper limit number elements computed sets means fixed point exists 
terms control flow graphs static analysis means possible execution paths considered actual execution paths 
result assumption obtain approximate solutions certain data flow analysis problems 
data flow analysis problem approximate solution err determination allowing stronger valid err determination allowing weaker valid 
obviously prefer solutions valid imprecise aim weaker 
called safe conservative solutions 
original applications data flow analysis come area compiler optimisation include techniques support dead code elimination constant folding common subexpression elimination elimination invariant code loops efficient register allocation hec asu 
applications include derivation program information support program development processes automated debugging agr testing har maintenance ocs computer programs 
data flow analysis preliminaries section introduce commonly notions field data flow analysis 
detailed description concepts hec ken asu contain introductions data flow analysis application compilers 
data flow analysis attaches program information control flow graphs labeling nodes edges graph 
graph set labels 
node labeling function maps node element similarly edge labeling function maps edge element data flow analysis labels represent local information defined variables 
data flow analysis algorithms combine manipulate information interpreting labels elements algebraic structure principal model data flow analysis uses functions semi lattice 
variable definition variable modify value variable 
variable said defined referenced value possibly modified due 
examples variable definitions occurrences variables input statements left hand sides assignment statements 
variable variable modify value variable 
variable said referenced possible modification defined 
examples variable uses occurrences variables output statements conditions right hand sides assignments 
path node node flow graph called definition clear respect certain variable definition path 
definition variable node said reach bottom respectively top node definition clear path definition node bottom respectively top node definition variable said kill definitions variable reach variable said live bottom respectively top node definition clear path bottom respectively top node nodes control flow graph may represent pieces program code consist multiple statements 
nodes may contain multiple definitions variable 
granularity data flow analysis algorithm equal nodes need definitions consider variable definition really matters node locally exposed definition locally generated definition variable node definition variable node 
node def set locally exposed definitions variables defined node similarly locally preserved definition variable node definition variable killed node pres set locally preserved definitions node locally exposed variable variable node preceded definition node set variables locally exposed uses node locally preserved variable node variable killed node set locally preserved variables node note exactly variables definition pres 
typical data flow analysis problems section describe classical data flow analysis problems data flow equations solve 
equations computed node control flow graph graph contains cycles fixed point computation 
problems intended examples data flow analysis problems assume necessary local data flow information available programs control flow graph 
data flow analysis problem described brief example application 
information applications asu 
reaching definitions reaching definitions top node variable definitions reach top set definitions preserved path definition top information example support constant folding dead code elimination 
constant folding compile time process consists deducing value expression constant constant expression code generation 
dead code elimination related notion 
program code called dead code reached execution computes values 
example dead code code branch statement condition false 
node pred pred theta pres def rd data flow equations definitions reaching top branch statement eliminated leaving code branch 
definitions reaching top node definitions reach top predecessors preserved definitions locally generated computed equation 
live variables live variables bottom node sets variables path bottom node live variables example determine optimal register allocation assignment 
register allocation determines values program reside registers register assignment determines registers values reside 
variables alive bottom node variables alive bottom successors defined variables locally computed equation 
note equation called bottom equation equation reaching definitions problem called top equation 
possible compute definitions reaching bottom node variables alive top node refer hec details 
definition chaining data flow analysis problem useful support program understanding reverse engineering known definition chaining 
allows relate variable possible definitions definition variable possible uses 
information example track year dependencies 
suppose information node locally variables def locally generated definitions definitions reaching top variables alive bottom considering relate variable node zero definitions reaching node top 
similarly considering node succ succ theta lv data flow equations live variables bottom def relate variable alive bottom node zero definitions node 
double linking called definition chaining 
information relate variable possible definitions definition variable possible uses 
example example small program pseudo code control flow graph annotated definition chains variables program computes factorial value variable input puts variable output 
right presents control flow graph program solid arrows annotated definition chaining variables dotted arrows 
characters denote path taken condition respectively true false 
program fac declare input natural output natural natural rep natural input output input rep output input output output rep od input input od program fac input output input rep output input output output rep input input generic architecture data flow analysis traditionally data flow analysis algorithms coded hand directed analysis specific programming language hand 
obviously practice undesirable consequences ffl change language analysed results re implementation data flow analysis algorithms 
expect problem grow near due increased special purpose proprietary languages relatively short life cycles 
ffl difficult combine results data flow analysis different languages 
transparent combination analysis results different programming languages example desirable analysis legacy systems written multiple languages cobol jcl 
ffl duplication implementation efforts standard components 
example lot data flow analysis algorithms interval analysis implementation component duplicated lot analysers 
interval analysis technique data flow analysis dfa results abstraction ln ln abstraction 
language dependent language independent separation abstraction data flow analysis control flow analysis obtain advantages syntax directed analysis general control flow graphs analysed syntax directed manner immediately asu 
ffl information exchange researchers software practitioners cumbersome due language specific approaches 
avoid problems developed generic architecture supports languageindependent specification execution data flow analysis algorithms 
architecture consists major steps 
separate source language data flow representation language language data flow analysis performed 
step similar intermediate representation construction compilers advantages likewise adding language requires adding front translates languages intermediate representation 
second distinguish sub levels decreasing complexity data flow representation language perform number transformations levels order simplify language simplify data flow analysis 
step facilitates creation standard reusable analysis components 
furthermore allows definition fresh data flow representation languages suited language transform basic data flow representation language 
separate abstraction analysis program information data flow analysis algorithms seen abstraction program 
example typical data flow analysis problem def chaining uses information variables defined variables statement 
information operators ignored 
abstraction property reflected interpretation implementation data flow analysis cr cc jn 
interpretation technique analysing programs language evaluating non standard semantics language cc 
interpretation language specific approach software reused analysis languages 
propose separate abstraction data flow analysis phases introducing generic intermediate data flow representation level 
execution complete analysis process consists consecutive steps see 
programs source language programs data flow representation language 
programs contain necessary data flow information 

perform data flow analysis level data flow representation language 
advantage approach language dependent information assembled component performs abstraction data flow analysis transformation data flow analysis dfa results abstraction ln ln abstraction 
language dependent language independent transformations data flow representation language completely language independent 
result done data flow analysis part re new source language abstraction language available 
disadvantage approach program specific information lost abstraction 
result approach may unsuitable traditional data flow analysis applications compiler optimisation 
imposes problems case data flow analysis support program understanding reverse engineering need program specific information 
results data flow analysis expressed terms data flow representation language 
linked back back original source code origin tracking annotation technique defines relation code translated abstracted program counterpart original program 
note origin tracking requires additional implementation efforts abstraction specified asf sdf currently integrated asf sdf meta environment kli 
transformations data flow representation language abstraction phase ignore information irrelevant data flow analysis 
observe mean resulting data flow representation language immediately suitable data flow analysis 
example presence unstructured flow control program data flow analysis considerably complex amm 
abstraction language containing unstructured flow control solve problem results data flow representation language contains unstructured flow control 
order reduce complexity program analysis data flow analysis need simplify syntax structure data flow representation language 
facilitate simplifications extend architecture number transformations reduce syntactical structural complexity data flow representation language 
result extension longer single data flow representation language family data flow representation languages decreasing syntactical structural complexity 
gives overview new architecture 
picture data flow representation languages denoted small case studies analysis existing data flow analysis algorithms identified number transformations frequently occur data flow analysis software 
discuss transformations control flow normalization alias propagation 
control flow normalization control flow normalization transformation programs unstructured cycles flow control converted normalised structured cycles 
general technique reduce complexity program transformations automatic parallelisation program analysis data flow analysis 
control flow normalization advantages data flow analysis process 
reduces number syntactical constructs treated analysis transformation 
second normalised program simpler denotational semantics 
hand language structured flow control described called direct semantics semantics control commands simple compositions semantics components 
easy define structured analysis transformations language 
hand order describe language unstructured flow control switch difficult continuation semantics 
longer compositionality semantics results increased complexity program analysis models semantics data flow analysis 
information direct continuation semantics sch 
third specific method control flow normalization architecture unnecessary perform interval analysis part data flow analysis 
interval analysis technique divide control flow graph sets nodes intervals analysis complete graph composed analysis intervals 
normalisation step obsolete structure program manifest syntax tree program interval information extracted directly amm 
order support control flow normalization distinguish languages family data flow representation languages 
languages statements denote data alias information 
furthermore statements denote structured unstructured flow control second subset statements denote structured flow control 
refer language dhal second language structured dhal 
control flow normalization translation dhal programs programs 
languages described detail section 
table gives overview features supported various languages 
alias propagation example simplifying transformation called alias propagation 
aliasing occurs variables refer memory location 
result modification result modification vice versa 
aliasing may cause side effects hidden modification variables complicates program analysis including data flow analysis lr mlr 
alias propagation transformation programs alias information integrated data flow information 
allows simpler alias free data flow analysis resulting code 
order support process distinguish language family data flow representation languages 
third language subset statements denote data flow information statements denote structured flow control 
refer language propagated dhal alias information propagated language 
alias propagation translation programs programs 
data flow structured alias unstructured info control flow info control flow dhal table overview features dhal languages dhal data flow representation language section data flow representation language called dhal data flow high abstraction language 
generic statements denoting data flow control alias information 
goal design data flow representation language easy abstraction target imperative programming languages 
achieve goal language common concepts languages 
language constructs imperative programming languages divided types elementary constructs represent elementary operations objects memory 
examples constructs include assignments read write statements 
dhal replace constructs ones describe data flow information terms definition access paths constructs describe aliasing 
control constructs operate object decide piece code evaluated 
call conditional predicative decision depending property object memory 
called unconditional 
examples control constructs include statements operator form sequential composition statements 
conditional unconditional control construct 
data flow analysis static form program analysis consider actual dynamic values program variables 
determined condition fails succeeds 
order show correspondence statements dhal language abstracted chosen resemble standard structures conditional control constructs 
rest section take closer look design specification data flow representation languages 
start describing data types dhal language dhal kernel language basis data flow representation languages 
describe features added define languages described previous section give formal specification languages 
data types expressions consider actual dynamic values program variables dhal languages contain expressions single data type program variables defined 
note notion access paths extension basic program variables 
access paths generic identifiers refer storage locations lh 
constructed basic program variable names pointer indirection operators structure field operators 
example programming language kr access paths typically include indirection field selection operators 
dhal kernel language dhal kernel language basis data flow representation languages 
contains constructs define programs procedures add structured flow control 
programs consist program name list declarations body 
furthermore dhal kernel language contains decl declaration denote empty declarations statement denote skip operation statement 
module dhal kernel syntax imports variable syntax exports sorts context free syntax program id decl procedures procedure declarations consist procedure name list parameters body 
allow nested procedure declarations result kinds scope checking data flow analysis 
disadvantage abstraction pascal languages nested procedure definitions little harder 
nested procedures flattening definitions structured names identification 
example name procedure declared procedure declared procedure module dhal kernel syntax context free syntax proc id varlist structured flow control theorem bohm bj states program expressed structured control constructs composition conditional iteration 
dhal languages exactly constructs denote structured flow control composition series dhal statements composed smaller series dhal statements sequential composition operator 
dhal infix operator sequential composition operator similar imperative programming languages 
conditional standard vs fi structure conditional construct series statements vs denotes set access paths choice original program depended 
call vs dependency set statements branches 
note choice branch difference dhal vs fi vs fi mean vs choice 
iteration iteration construct vs vs set access paths determine iteration continue 
arguments favour variant variant iteration 
important prevention code duplication shown examples 
example flow diagram easily translated structure conversion structure results code duplication vs 
vs 
vs od main disadvantage know size worst case represents complete program conditional construct 
case structure result twice code 
argue duplication prevented flow diagram example fits exactly structure 
example shows structures problems represent flow diagrams fit naturally structures example flow diagram standard translation structure 
shown converted quite easily structure extra conditional construct vs 
vs od 
vs vs fi need extra code represent diagram structure know code growth constant small need extra conditional statement 
module dhal kernel syntax context free syntax varset fi varset language features new data flow representation languages defined adding features dhal kernel language 
section describe number features added define data flow representation languages described dhal structured dhal propagated dhal 
languages defined importing appropriate features see 
presents overview import structure languages 
dhal alias syntax dhal kernel syntax dhal prop uses syntax dhal syntax structured dhal syntax dhal ctrl syntax dhal uses syntax propagated dhal syntax import structure dhal 
data flow information interested generic statements describe data flow information pieces code various imperative programming languages 
propose statements relate set defined access paths piece code set access paths definition function call 
module dhal uses syntax imports dhal kernel syntax exports context free syntax varset varset varset id varlist example consider statement pascal language 
statement uses access paths defines access paths written dhal fxg fu vg 
example translations source code dhal abstraction fxg fu vg fyg print fg fwg source code dhal abstraction fh fh fpg fh vg abstraction phase user choose functions analysed functions ignored analyse user defined function ignore standard print function 
furthermore propose adding temporary access paths storage intermediate results analysis complex procedure calls 
aliases aliasing occurs access paths refer overlapping storage location 
result modification result modification vice versa 
classic data flow literature see example hec asu alias relation considered equivalence relation access paths 
moo show assumption incorrect leads inaccurate conservative results 
propose subdivision alias relations distinct types properties aliases access paths considered aliases program point determined refer overlapping storage locations point execution paths program considered may aliases 
complete partial aliases access paths considered complete aliases program point refer exactly storage location point considered partial aliases pair considered partial alias refers storage location partially includes storage location refers vice versa 
typical example complete alias pair access paths declared equivalent fortran statement equivalence pair array elements considered complete may alias points determined equal trivial example partial alias pair record fields 
similar way pair considered partial may alias points determined execution paths equals corresponding proposed division statements denote alias relations hold certain program point complete aliases complete may aliases partial aliases partial may aliases 
module dhal alias syntax imports dhal kernel syntax exports context free syntax propagated data flow information improve precision data flow analysis propagation aliases want distinguish direct definitions definitions induced aliasing 
order special statements denote data flow information alias propagation 
statements relate set direct definitions set alias induced definitions set uses procedure call 
detailed information precision improvement achieved refer moo 
module dhal prop uses syntax imports dhal kernel syntax exports context free syntax varset varset varset varset varset id varlist unstructured flow control denote unstructured flow control additional statements goto label 
label statement identify program point goto statement program execution continue corresponding program label 
module dhal ctrl syntax imports dhal kernel syntax exports context free syntax goto id label id developed software architecture language independent specification execution data flow analysis 
language independency achieved separating source language data flow representation language language data flow analysis performed 
separation advantages knowledge source language assembled component performs abstraction source language data flow representation language 
consequently data flow analysis algorithms re new source language abstraction language available syntax language changes component performs abstraction needs changed 
second results multiple analysis combined easily format 
holds results obtained analysing completely different languages 
feature desirable analysis legacy systems written multiple languages cobol jcl 
third approach allows definition common components facilitate tasks repeatedly occur data flow analysis algorithm control flow normalization alias propagation 
common model data flow representation language form suitable communication platform information exchange data flow analysis algorithms merits 
application framework requires definition abstraction component language analysed 
abstraction cobol developed ms 
includes definition abstractions number programming languages pl jcl fortran 
done incorporation alias detection calculation framework 
detection proven np hard np hard presence multiple levels indirection lr techniques safe approximation alias relations investigated 
direction done hpr lr cbc 
relation detection aliases relatively new technique called points analysis egh investigated 
pointsto analysis kinds program information derived possibly including alias relations access paths ruf ste 
agr agrawal 
automatic debugging computer programs 
phd thesis purdue university department computer science august 
amm 
control flow normalization algorithm complexity 
ieee transactions software engineering march 
asu aho sethi ullman 
compilers 
principles techniques tools 
addison wesley 
bj bohm 
flow diagrams turing machines languages formation rules 
communications acm 
cbc 
choi burke carini 
efficient flow sensitive interprocedural computation pointer induced aliases side effects 
conference record th annual acm symposium principles programming languages popl pages 
acm 
cc cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
conference record th annual acm symposium principles programming languages popl pages 
cc cousot cousot 
inductive definitions semantics interpretation 
conference record th annual acm symposium principles programming languages popl pages january 
cr clarke richardson 
symbolic evaluation methods program analysis 
steven muchnick neil jones editors program flow analysis theory applications chapter pages 
prentice hall 
van deursen klint tip 
origin tracking 
journal symbolic computation 
special issue automatic programming 
egh emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices 
har harrold 
data flow analysis testing 
technical report department computer science clemson university 
hec hecht 
flow analysis computer programs 
elsevier amsterdam 
hpr horwitz pfeiffer reps dependence analysis pointer variables 
sigplan notices july 
jn jones nielson 
interpretation semantics tool program analysis 
handbook logic computer science 
oxford university press 

ken kennedy 
survey data flow analysis techniques 
muchnick jones editors program flow analysis theory applications chapter pages 
prentice hall 
kli klint 
meta environment generating programming environments 
acm transactions software engineering methodology 
kr kernighan ritchie 
programming language 
prentice hall second edition 
lh larus hilfinger 
detecting conflicts structure accesses 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices 
lr landi ryder 
pointer induced aliasing problem classification 
conference record th annual acm symposium principles programming languages popl pages january 
lr landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages 
sigplan notices 
landi ryder zhang 
interprocedural side effect analysis pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices 
mlr marlowe landi ryder 
choi burke carini 
pointer induced aliasing clarification 
sigplan notices september 
moo moonen 
data flow analysis reverse engineering 
master thesis university amsterdam programming research group 
appeared technical report 
available anonymous ftp ftp wins uva nl file pub moonen ps gz 
marlowe ryder 
properties data flow frameworks 
unified model 
acta informatica 
ms moonen sellink 
cobol data flow analysis 
van deursen klint editors program analysis system renovation resolver release chapter 
cwi amsterdam january 
ocs sparks 
bidirectional data flow analysis support software reuse 
technical report tr old dominion university computer science department june 
sparks 
support software maintenance data flow analysis 
technical report tr old dominion university computer science department june 
ruf ruf 
context insensitive alias analysis reconsidered 
proceedings acm sigplan conference programming language design implementation pages june 
sigplan notices 
sch david schmidt 
denotational semantics 
allyn bacon boston 
ste steensgaard 
points analysis linear time 
conference record th annual acm symposium principles programming languages popl pages 
acm press january 
technical reports programming research group note reports obtained technical reports overview www site www wins uva nl research prog reports anonymous ftp ftp wins uva nl directory pub programming research reports 
moonen 
generic architecture data flow analysis support reverse engineering 
visser 
specification strategies 
bergstra sellink 
arithmetical module rationals reals 
van den brand sellink verhoef 
generation components software renovation factories context free grammars 
olivier 
debugging distributed applications coordination architecture 
sellink 
formal axiomatization alphabet reasoning parametrized processes 
van den brand sellink verhoef 
reengineering cobol software implies specification underlying dialects 
visser 
polymorphic syntax definition 
van den brand klint verhoef 
re engineering needs generic programming language technology 
manuel 
ansi cobol iii sdf asf definition tool 

complete system valued logic 

transformations reduction systems 
van den brand klint verhoef 
core technologies system renovation 
moonen 
data flow analysis reverse engineering 
hillebrand 
transforming asf sdf specification application 
sellink 
conservativity leibniz equality 
dinesh 
specifying input output visual languages 
dinesh 
vas formalism vase 
hillebrand 
small language specification grid protocols 

transformation tool pure prolog programs algebraic specification 
visser 
solving type equations multi level specifications preliminary version 
argenio verhoef 
general conservative extension theorem process algebras inequalities 
bergstra sellink 
sequential data algebra primitives revised version 
visser 
multi level specifications 
van den brand klint verhoef 
reverse engineering system renovation annotated bibliography 
bergstra sellink 
sequential data algebra primitives 
olivier 
embedded system simulation 

translog interactive tool transformation logic programs 
bergstra hillebrand ponse 
grid protocols synchronous communication specification correctness 

termination confluence infinitary term rewriting 
bergstra gh 
stefanescu 
network algebra relation operators 
bergstra gh 
stefanescu 
network algebra synchronous asynchronous dataflow 
visser 
case study optimizing parsing schemata disambiguation filters 
van den brand visser 
generation formatters context free languages 

automatic analysis term rewriting systems proving properties term rewriting systems derived asf sdf specifications 
van den brand van deursen dinesh th 
visser editors 
asf sdf workshop generating tools algebraic specifications may cwi amsterdam 
bergstra ponse 
frame process logics 
baeten bergstra 
discrete time process algebra revised version 
bergstra klint 
discrete time 
hillebrand 
formedness checker crl 
klint visser 
filters disambiguation context free grammars 
ponse 
new features psf ii iteration nesting 
bezem ponse 
finite specifications queue 
van 
process algebra language matching 
bol oei van 
syntax static semantics interlocking design application language 
bergstra ponse 
frame algebra synchronous communication 
van den brand visser 
box tex algebraic approach construction documentation tools 
baeten bergstra gh 
stefanescu 
process algebra feedback 
oei 
pruning search tree interlocking design application language operational semantics 

new features psf interrupts disrupts priorities 

generating visual editors formally specified languages 
van van 
control data transfer distributed editor asf sdf meta environment 
van den brand 
algebraic specification annotated syntax trees 
ponse verhoef van editors 
workshop algebra communicating processes may utrecht university 
baeten bergstra smolka 
axiomatizing probabilistic processes acp generative probabilities revised version 

