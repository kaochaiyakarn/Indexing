calculus mobile processes part robin milner university edinburgh scotland joachim parrow swedish institute computer science kista sweden david walker university technology sydney australia june revised september running title calculus mobile processes part address proofs robin milner computer science department university edinburgh king buildings edinburgh eh jz uk calculus calculus communicating systems naturally express processes changing structure 
may component agents system arbitrarily linked communication neighbours may carry information changes linkage 
calculus extension process algebra ccs engberg nielsen added mobility ccs preserving algebraic properties 
calculus gains simplicity removing distinction variables constants communication links identified names computation represented purely communication names links 
illustrated description calculus generalises conventional process algebras treating mobility examples exploiting mobility detail 
important examples encoding calculus higher order functions calculus combinatory algebra transmission processes values representation data structures processes 
continues presenting algebraic theory strong bisimilarity strong equivalence including new notion equivalence indexed distinctions assumptions inequality names 
theories semantics terms labelled transition system notion strong bisimulation expounded detail companion 
report briefly progress corresponding notion weak bisimulation internal actions observed 
special symbols copy mathematically type set obvious symbols listed 
ff fi oe greek letters various relation symbols boldface zero empty set boldface symbols combinators cons various constant names sge boldface names axioms double square brackets calculus communicating systems naturally express processes changing structure 
may component agents system arbitrarily linked communication neighbours may carry information changes linkage 
mathematically developed models concurrency best express mobility shall call indirectly 
examples petri nets csp acp ccs 
hand models express mobility directly require view mathematical analysis basic concepts provide 
known model kind considerable success applications actors model hewitt 
models mobility achieved allowing processes passed values communication shall achieve allowing processes links communicated 
presents interesting contrast attempts combine ideas calculus process calculi admitting processes values examples gerard boudol flemming nielson bent thomsen 
calculus approach engberg mogens nielsen successfully extended ccs include mobility preserving algebraic properties 
concluding section describe detail added roughly speaking retain hope essence reduce complexity strengthen elementary theory 
shall introduce calculus means sequence examples clearly practical significance fall naturally formalism 
simple example notation ccs shall informally kind diagram call flow graph represent linkage agents 
suppose agent wishes send value agent link named willing receive value link 
appropriate flow graph follows oeae oeae may example prefix binds variable general parentheses indicate binding occurrence variable 
system depicted flow graph represented expression na operator na called restriction indicates link private suppose wishes delegate new agent task transmitting suppose connected initially link oeae oeae oeae ba sends link value transmitted yz receives link value transmits value link terminates 
note name expression possesses link initially 
system ba yz communications appear may draw new configuration system follows indicating link moved oeae oeae oeae formalism link names appear parameters communication goes ccs 
may addition variables link names ordinary data values calculus rich primitives 
shall avoid 
fact shall remove distinction link names variables ordinary data values shall call names 
just essential classes entity names agents 
restriction input prefix name binding operators different nature restriction scope name input prefix similar abstraction calculus place holder name may received input 
emphasize name binding property restriction shall write place syntax example ba yz note just names 
appear reduce concurrent computation cocktail party purpose communication transmit receive name admit communications 
surprisingly basis encode computation arbitrary data types consider data type set data structures values recursively built finite set constructors 
tentatively call new calculus calculus aims universality elementary level concurrent computation just calculus universal functional computation 
companion treat semantics calculus depth 
devoted sequence motivating examples followed statement important algebraic properties 
detail remainder proceeds follows 
section define constructions calculus auxiliary notions discuss salient differences ccs 
section look basic examples calculus simple finite processes indicate scope mobility closely interdependent notions 
section introduce convenient abbreviations allow treat realistic examples 
particular carefully compare passing names parameters passing processes parameters show encode data structures processes 
section indicate particularly familiar process algebras addition names parameters ccs provides great modelling strength transforms nature algebras 
examples section quite substantial reader may safely skip reading proceed section loss continuity 
section equational theory bisimilarity defined derived companion 
equational theory strikingly simple feature noteworthy needs careful treatment bisimilarity preserved general instantiation names 
solution appears quite tractable adopt relativized equality preserved instantiations maintain distinction certain pairs names 
derive convenient laws relativized equality 
section records fact equational theory weak equality internal actions system ignored far possible direct generalization ccs 
calculus presuppose infinite set names range names 
presuppose set agent identifiers arity integer 
range agent identifiers 
range agents process expressions kinds follows 
summation index set finite 
agent behaves write empty summation call inaction agent 
defining calculus confine just binary summation written 
prefix form yx yx called negative prefix 
may thought output port agent contains yx outputs name port behaves called positive prefix 
name may thought input port agent inputs arbitrary name port behaves pf xg see definition substitution 
name bound positive prefix 
note negative prefix bind name 
called silent prefix 
performs silent action behaves 
composition agent consists acting parallel 
components may act independently output action resp 
output port may synchronize input action resp 
create silent action composite agent 
restriction agent behaves actions ports prohibited communication components link prohibited actions explained 

match agent behaves names identical 
defined agent 
agent identifier arity unique defining equation def names distinct names may occur free behaves pf see definition substitution 
defining equations provide recursion may contain agent identifier 
syntax agents may summarized follows yx attention confined finite agents agents finite behaviour agent identifiers definitions omitted removing recursion 
calculus match form interesting 
matching easy encode computation data structures turns unnecessary purpose shall see section example 
include match form partly clarity partly pleasant form expansion law provides rule section 
definitions needed 
ffl free names fn just names occur bound positive prefix restriction 
write fn fn fn delta delta delta 
ffl calculus shall distinguish agents alpha convertible differ change bound names 
shall write alpha convertible 
ffl shall write vector fx names understood context 
ffl write pf pf pf xg simultaneous substitution free occurrences change bound names necessary prevent new names bound ffl prefixes yx say subject object parameter 
names occurring free subject position determine current communication capabilities agent 
ffl adopt precedence syntactic forms restriction prefix match composition summation means discuss important features calculus preparation examples sections 

apart presence parallel composition outstanding difference calculus calculus names may instantiated names agents expressions 
distinction understood better examples 
explain informally chosen course 
agent process changes state history parallel composition admits communication family processes independent state 
communication typically formed synchronization negative prefix yx positive prefix 
example suppose sending agent yx receiving agent may acquire access existing agent see example 
may choose model passing parameter just passing link parameter choose reasons 
pass parameter may result replication due repeated occurrence formal parameter wish replication agents state side effect communication calculus 
second pass parameter gives access concerned model case received name provides partial access agent 
example may communicate neighbours names known 
third transmission access links common phenomenon computation purely sequential computation hitherto adequate theoretical basis examine primitives may provide basis lean framework possible 

free names agent represent current knowledge linkage agents 
agents say contain free shall portray linkage shared knowledge multi arc flow graph follows oeae oeae phi phi phi phi oeae shared name restricted shall write internally components flow graph oeae oeae phi phi phi phi oeae free names fn correspond roughly called ccs sort differences 
sort ccs contains names names fa bg sort ccs agent means may input link output link vice versa 
calculus wish adopt refinement 
second ccs sort grow history agent free names fn grow subsequent history receive names communication 
third free occurrence subject position indicates may communicate link free occurrence object position merely indicates may pass parameter type occurrence corresponds closely ccs sort ccs admit type 
subject object distinction captured fn 
development distinction doubt increasingly important order understand potential mobility agents system 

ccs risk confusing binding ordinary data variable positive prefix form restriction port name 
port names distinct data variables ccs 
identified 
accurately shall see primitive values represented names compound values trees represented processes 
emphasize identification adopted prefix notation restriction place postfix notation qnx 
carefully distinguish forms binding place holder name may received link may name free variable bound positive prefix susceptible arbitrary instantiation 
represents name private identified name different treatment bindings lies heart calculus 
basic semantics calculus done companion style ccs labelled transition system defined structural inference rules 
notions strong bisimulation strong equivalence defined congruence relation may understood strong semantic equality 
shall rely somewhat analogy transitions ccs agents 
particular shall assume simple transitions delta delta delta yx delta delta delta delta delta delta delta delta delta qf zg simple equations yx qf zg means strong equivalence 
transitions analogous ccs reader find essence mobility example section see effect certain transitions change scope restriction 
basic examples examples section entirely concerned different patterns occurrence forms name binding positive prefix restriction behaviour presence communication 
basic anatomy calculus 
example link passing oeae oeae oeae gamma 
oeae oeae oeae agent link wishes pass link willing receive 
may yx may case transition yx zg diagram zg 
diagram illustrates case fn meaning possesses link transition 
transition fn reason receive link possesses 
compare examples links private 
diagram illustrates case fn meaning link transition condition affect transition 
situation different link private 
case proper flow graphs oeae oeae oeae gamma 
oeae oeae oeae privacy link represented restriction transition yx 
zg fact shall able prove equation yx zg example scope intrusion oeae oeae oeae oeae scope 
gamma 
oeae oeae oeae oeae scope 
example link wishes pass link willing receive possesses private link renamed avoid confusion 
describe informally saying link passing action scope private link yx example transition yx zg sf xg diagram zg sf xg respectively new name 
phenomenon analogous avoidance capture bound variables calculus 
transition rules calculus alpha conversion change bound variables enforced cases 
example transition rules ensure transition alpha conversion result obtain applied alpha equivalence qf xg sf xg avoiding intrusion 
note state section alpha equivalence implies strong equivalence agents 
example scope extrusion oeae oeae oeae scope 
gamma 
oeae oeae phi phi phi phi oeae scope 
example link suppose link private 
wishes pass link willing receive possesses link 
situation exactly program local variable modelled storage register passing procedure takes parameter value 
yx example transition yx 
zg diagram zg example 
difference privacy link represented restriction 
link exported scope restriction extended say link passing action scope private link 
contrast example situation different possesses public link transition fn 
change private link name order preserve distinction public link 
oeae oeae oeae scope 
gamma 
oeae oeae phi phi phi phi oeae scope 
transition yx 
xg rf xg zg diagram xg zg rf xg 
reverting case fn suppose fn possesses private link transition oeae oeae oeae scope 
gamma 
oeae oeae oeae scope 
transition exactly transform result 
general law fn apply result zg zg justifies preceding diagram 
may describe migration scope special case extrusion scope restriction migrated reader may consider combination examples intrusion extrusion occur 
example molecular actions suppose agent wishes pass pair names agents consider attempt defining agents xu xv difficulty arises definitions behaviour composite agent qjp jr may perform pair transitions represents possibility receives receives receiving pair intended qjp jr xu xv yg xv yg yg possibility avoided need way pair names transmitted single atomic action 
private names key solution 
passing elements directly arrange passes private name small process task deliver xw wu wv fn 
qjp jr alternative transitions qjp jr 
wu wv zg qjp jr wu wv zg slightly simplified transitions advantage associativity 
transitions represent transmission pair respectively mixture possible 
may think atomic action xw actions process wu wv accessible forming molecular action 
vital idea bonds molecule private name 
device powerful extending far illustration pairs 
shall see example yields uniform encoding data structures processes 
examples section shall explore concrete examples small scale deal real applications computing 
define abbreviations 

communication needs carry parameter 
model presuppose special name say ffl bound write place place free 
shall omit agent write example xy place xy 
shall wish allow input names determine course computation 
naturally write delta delta delta usually names distinct 
assuming occur free shall abbreviate schematically example executor define exec def exec may called executor 
receives link link calls activates link 
think trigger process exec called run 
process initial communications obtain behaviour cases run directly prefix trigger pass link executor exec 
assume fn 
agent presence exec behave xz shall find construction regarded passing process value link passing links values applications 
agent equivalent xz exec see apply equation obtain xz suitably generalized expansion law turn chosen free equal example passing processes parameters previous example executor activate link sender transmit link retain awaiting activation 
parenthetical parts preceding sentence included sentence accurately describes example omitted describes passing process parameter 
situations obviously effect process passing cases achieved link passing 
passing processes parameters represented directly calculus 
direct representation write xp variable processes process expression agent 
notation close thomsen example see discussion 
seen simple case effect intended 
pursue direct representation process passing draw attention important issue scope 
develop little suppose sender sending wishes run suppose executor receiving wishes run parallel extended language permitting write xp assume fn 
suitably generalized expansion law equate allows communication occur neighbour second neighbour develop example suppose transmission private link exists privacy may represented restriction applied sender xp alternatives transmission treat private link choice significant fn significant fn 
alternative generalized expansion law equate shows private link broken communication 
put differently expression xp restriction binds private link fact exist 
fn represents link approach passing processes parameters amounts passing text process parameter similar treatment function parameters lisp originally defined mccarthy 
called dynamic binding free variables text function parameter interpreted receiving environment 
thomsen adopted dynamic binding calculus higher order communicating systems chocs important computational phenomena modelled satisfactorily 
intend adopt static binding 
second alternative form scope extrusion see example generalized expansion law equates qf wg pf wg chosen free alternative preserves link preserves distinction link possessed return way represent passing process parameter calculus shall see effect obtained 
place write xz fn expansion equal restriction dropped fn 
change bound name fn followed reverse extend scope restriction obtain wg qf wg expansion discard restriction wg qf wg extra action identical 
may link passing power process passing 
true presence recursion private communication bent thomsen translation static binding variant chocs calculus calculus 
sense link passing greater power link passed need trigger process may pass different recipients power interact different ways existing process 
sense power link passing give ability copy process 
particular calculus recursion provide power general recursion calculus paradoxical combinator take view natural provide recursion explicitly 
example values data structures values wish compute drawn finite set say fv simply designate names denoted constants 
role constant names theory dealt section 
clearly match operator derived form convenience control computation 
consider case ft fg truth values 
set process simply copying truth value link copy def simpler definition copy def zx starting series definitions compute case analysis constant data constructor input 
process produces logical conjunction truth values received may defined follows def copy representing ary boolean function agent link parameters reasonable extend case 
think agents true def xt false def pointed values playing role pointer 
may represent application function composition agents followed restriction pointer 
easy prove simple equations justify encoding true copy true true false false delta delta delta delta delta delta matter different wish compute infinite set example natural numbers nat 
choose infinite family constants fn write successor function example agent form succ def nat infinite sum want terms calculus finite 
illustrate alternative method shall data type list structures built nullary operator nil empty list binary operator cons 
list structure say cons cons nil nil nil represented pointed value agent emit piecemeal link defined follows terms constant names cons cons nil nil nil def nil cons def cons xy xz presence agent possesses receives link possesses receives power explore list structure piecemeal pointers 
case agent privately holds name list structure system transfer agent molecular action defined example 
note particularly constituent actions molecule may molecular may non trivial sub structures 
shall introduce abbreviations examples legible 
define composite prefixes xy delta delta delta means xy delta delta delta xy delta delta delta means delta delta delta cons cons nil nil nil nil nil nil second define refined form matching clause delta delta delta means delta delta delta received link names subsequently received bound example define agent equal outputs point equal structures equal def nil null cons null def nil true cons false def nil false cons equal equal hope simple examples provide convincing evidence shall show rigorously bare calculus names encode richer calculus values kinds may communicated value computations may freely mixed communications 
analogous encoding ccs relies infinite summation exploit power private links provide represent complex values structured agents 
points encoding deserve mention ffl pointed values finite processes ephemeral sense may analysed 
encodings possible give permanence values 
ffl encoding needed finite number constant names cons nil 
encodings need constant names 
trick matching distinguish private names example true def false def reader may enjoy re defining forms 
ffl shall justify claim match form unnecessary encoding computation data types 
control provides fact achieved means 
consider agent inputs truth value encoding just link enters value change encoding truth values slightly true def xuv false def xuv agent correspondingly changed clearly encoding previous extended deal finite set value constructors constants 
attentive reader noticed allowing constants occur free equations define agent identifiers violated condition defining equations imposed section 
justify violation section merely part conventional treatment constants 
example combinator graph reduction combinatory logic terms built combinators binary operation called application 
range terms shall consider basic combinators syntax terms mn application associates left term sk mn means sk mn 
terms may reduced rules gamma 
mp np kmn gamma 
im gamma 
combinator graph graph represents term 
application term contains node labelled left right child node labelled combinator children 
term km km graphs shown graph represents sharing occurrences subterm km combinator graph reduction models term reduction takes advantage sharing 
important implementation technique functional programming languages computers designed support hardware see example goguen 
important model performance hardware formal calculus verify performance 
presents tough challenge calculus describe mobile structure virtual processes changing allocation real processors 
believe calculus delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta combinator graphs term km km contains right primitives meet challenge 
hint example executor allocation processors may modelled changing virtual structure combinator graph reduction turn 
give graph reduction rules see 
auxiliary combinators addition shall call 
exactly rule combinator allowing reduction occurs left child 
note sharing introduced rule note auxiliary combinators appear graphs leaves operators arity 
shall illustrate term reduction km km gamma 
kmn kmn gamma 
kmn gamma 
mm modelled graph reduction 
give graph reduction 
notice steps graph reduction correspond single step term reduction show numbering arrows 
redex subgraph reduced stage indicated ringing node 
note just subgraph km parents node graph may parent shown diagram subgraph larger system nodes disconnected particular reduction discarded altogether 
passing note succeeded eliminating entirely sophisticated set rules achieve 
proceed model combinator graphs flow graphs composite agents 
combinator modelled agent parameters parameters links children link parent 
combinator repeatedly utters message contains identity constant name names children 
delta delta gamma 
delta delta gamma 
delta delta delta delta delta delta gamma 
delta delta delta delta delta delta delta delta gamma 
delta delta gamma 
delta delta gamma 
delta delta gamma 
delta delta rules combinator graph reduction delta delta delta delta delta delta delta delta gamma 
delta delta delta delta delta delta gamma 
delta delta delta delta gamma 
delta delta delta delta gamma gamma gamma gamma 
delta delta gamma gamma gamma gamma 
delta delta gamma gamma gamma gamma 
gamma gamma gamma gamma 
delta delta graph reduction term km km definitions combinators completely analogous def pw def pw def pw xy message sent example consists pointed value ws wx formed molecular action pointer private link restores message message new private link 
molecular actions ensures different parents read parts message 
remains define application agent 
communicates left child combinator 
clause match definition corresponds graph reduction rules 
def definitions reader show difficulty example graph reduction rule captured equation reader may check avoid constants match form modelling combinator graphs alternative encoding suggested example 
example calculus encoding combinator graph reduction example shown higher order functions handled sense calculus 
thought encoding calculus natural translations calculus combinator algebra encoding indirect 
give direct encoding reduction sequences calculi correspond closely 
show gain full power calculus limited recursion needed just achieve replication agent 
precisely shall encode particular reduction strategy calculus lazy reduction 
theorems justify encoding encoding call value reduction appear separate 
recall syntax calculus terms syntax xm mn ranges infinite set variables 
omit parentheses composite forms ambiguity application mn left associative 
convenience assume subset gamma infinite example take range range gamma lazy reduction relation gamma 
smallest relation xm gamma 
mf xg gamma 
mn gamma 
reduction strategy completely deterministic 
term written delta delta delta mm application 
gamma 
xn nf delta delta delta mm irreducible term gamma 
form xn form xn delta delta delta 
shall encode linear calculus sub term term may contain free occurrence variable paradoxical combinator excluded reduction sequence terminates linear calculus 
correspondingly find need call recursion encoding calculus 
shall translate term map names agents 
understand agent name gamma may think pointing argument sequence appropriate particular occurrence precisely eventually reduces abstraction xm corresponding derivative receive link names pointer argument pointer rest argument sequence 
represents list just lists represented example 
full definition encoding function xm def def xu mn def free note variable occurs free translation term equation normally occur free double guarding equation essence lazy reduction 
guard prefix activated reduced form xm ready argument second guard activated calls name may reduction commence 
illuminating see encoding particular example behaves 
consider xx xx xw assuming free xx xx xw xw vu xu generally easy show xm mf xg weak bisimilarity discussed briefly section 
unique derivation sequences sides closely related 
keep precisely step left hand side takes steps simulates substitution making 
occurrence send argument list proof relies strongly linearity contains twice occurrence attempt send argument list fail agent represents procedure receiving arbitrary argument list consumed call 
translation full calculus needed replication 
define action prefix ff form ff def fixx ff fixed point construction stands distinguished solution agent equation 
constructions agent identifiers providing defining equations apart approaches amount 
ff ff ff indicates call occurrence action ff generates new copy note equation holds ff bound action 
replicator shall call change needed translation accommodate full calculus replace equation mn def free may called call generates new replica provides different argument list place help lemmas replicators equation proven close correspondence reduction sequence calculus derivation encoding maintained 
earlier referred bent thomsen translation static binding variant chocs calculus calculus translation independently replication recursion required 
abramsky defines notion applicative simulation lazy calculus analyses model theory proof theory depth 
called applicative bi simulation prefer reserve term induced equivalence shall denote natural ask relationship turns closed terms implies converse false example ong adapted show 
intuitively reason applicative bisimulation considers behaviour term applied arguments terms process inhabits environment arbitrary processes 
leaving calculus encoded faithfully reduction strategies albeit important 
remains done broaden connection calculi 
algebraic theory companion give definition strong bisimulation agents corresponding equivalence relation strong bisimilarity 
shall mean strongly bisimilar 
giving equational theory relation point subtlety great concern ccs important strong bisimilarity preserved substitution free names 
reason shall refer strong bisimilarity strong ground equivalence 
example distinct names consider equation holds theory substitution falsifies hand price pay distinguishing constants variables 
shall introduce strong non ground equivalence simply defined strong bisimilarity substitutions 
relation preserved substitution shall find general equation true equational axioms kind head normal form 
order define form shall need new abbreviation means xy distinct special case restriction may thought simultaneous creation transmission new private name name occurs active transmission 
importance form equational theory shows restriction reduced bisimilarity special case 
kinds prefix shall allow ff fi range 
syntax prefixes ff xy course primitive forms derived 
definition agent head normal form sum prefixes ff strong bisimilarity shall give equational theory strong bisimilarity 
turn theory complete finite agents incomplete agents necessarily recursively enumerable 
shall state rules standard equality symbol symbol reason shall wish consider validity rule interpreted equivalence relations 
example proposition asserts rules valid stands strong equivalence reader may wonder axiomatize preserved substitutions congruence natural candidate equality agents 
fact proposition axiomatize second axiomatization shall see depends 
omit standard rules equivalence relation 
hand stand congruence relation fact congruence rule asserts preserved operators positive prefix asserts weaker property positive prefix 
alpha conversion infer congruence infer xy xy pf yg qf yg names fn fyg infer summation restriction fn ff ff ff ff subject ff match distinct expansion assume ff fi ff resp 
fi binds name free resp 
infer ff fi ff comp fi ij relation ff comp fi ff complements fi holds cases 
ff xu fi ij vg 

ff fi ij ug vg free 
ff fi xu ij vg 
ff fi ij vg ug free identifier def infer pf xg shall call axiomatic theory sge strong ground equivalence proved sge write sge just ambiguity arises 
note important points 
clause rule infer redundant presence case deduced 
needed interpreted invalid interpretation 

rule strengthened infer see considering equation fact place holder received name received name may hypothesis rule account substitutions purpose finitely need verified 

means occurrences match operator input prefix form eliminated agent 
removed input prefix form 
see previous point 

rule note ff includes range derived prefix 

rule cases crucial represent communication new private name resulting restriction embraces sender receiver scope 
results proved companion definition 
proposition soundness laws sge valid interpreted strong bisimilarity natural constraint defined agents definition agent identifier weakly guarded occurrence prefix form 
agent identifier weakly defined agent identifier weakly guarded right hand side definition shows importance head normal form proposition agent identifier weakly defined agent head normal form sge proof easy case analysis structure hard show sge complete strong bisimilarity finite agents 
proposition completeness finite agents finite agents sge proof companion 
strong equivalence definition strong equivalence straightforward 
definition substitution function oe stand substitution postfix substitutions application 
denotes substitution oe oe xoe definition strongly equivalent written oe qoe substitutions oe 
equality symbol interpreted strong equivalence laws sge hold rules failure clear equations indicate fails 
hand stronger form rule valid infer may shown recursive definition preserves appropriate sense strong equivalence truly congruence relation 
matching employed yield new form expansion law valid assume ff fi ff resp 
fi binds name free resp 
infer ff fi ff opp fi ij relation ff opp fi ff opposes fi holds cases 
ff fi ij vg 

ff fi ij ug vg free 
ff fi ij vg 
ff fi ij vg ug free summarize facts follows proposition soundness laws sge gamma fc fc valid interpreted strong equivalence system complete finite agents 
may possible adding reasonable laws matching succeeded 
alternative simpler way axiomatise strong equivalence proposition 
proposition give useful laws strong equivalence important sense exploring alternatives semantic definition particularly stringent test 
exaggeration say laws feel justified proposing calculus 
proposition 



fn proof companion 
recursion record properties expect recursive definitions analogy ccs 
transform right hand sides definitions respecting agent defined second agents satisfy recursive equation provided equation satisfies standard condition 
properties fail strong bisimilarity 
order state results need preliminaries 
assume set schematic identifiers having nonnegative arity 
range schematic identifiers 
agent expression agent may contain schematic identifiers way identifiers section range agent expressions 
definition arity distinct names assume fn fx replacement written efx pg means result replacing subterm pf xg 
extends obvious way simultaneous replacement schematic identifiers efx xm xm pm example xy fx uw xy xx xy follows assume indexing set mg 
write sequence indexed similarly range sequence schematic identifiers implied context associated name sequence convenient write efx xm xm pm simply 
write 
natural define strong equivalence agent expressions equivalence replacements schematic identifiers agents definition agent expressions containing schematic identifiers associated name sequence means fn state result recursive definition preserves strong equivalence proposition assume agent expressions containing schematic identifiers associated name sequence assume identifiers arities equal 
assume def def weakly guarded intuitively definition def unfold behaviour uniquely 
result precise general case proposition assume agent expressions containing schematic identifiers associated name sequence weakly guarded assume agents fn fn assume distinctions having looked theories strong bisimilarity strong equivalence address task combining 
definition distinction symmetric irreflexive relation names 
shall range distinctions 
substitution oe respects distinction xoe 
definition strongly equivalent written oe qoe substitutions oe respecting quite natural record certain pairs agents distinction equivalent need involve names free agents 
simple example equation strengthened fx yg natural abbreviation allowing write set mean distinction thetaa gamma id keeps members distinct 
may turn need distinctions simpler form able assure 
clearly extreme cases useful operations distinctions 
define def gamma fxg theta theta fxg removes constraint substitution set names define dj def theta proposition properties hold strong equivalence indexed distinctions 
implies 
fx yg 


fn dj prop needs little comment 
prop proper strengthening rule sge 
combines pleasantly modified expansion law remove summands expansion provided strengthen distinction 
simple example note equation jy jq jq instance prop deduce fx yg jy jq props neatly contrast kinds name binding 
indicates restriction preserves distinct variables need enforce distinction means 
hand indicates obligation proving equality positive prefix forms allow bound variable range names 
note deduce jy jq full equivalence compared require term restriction enforces distinction 
passing note expression simplifies jq 
contrast prop deduce jy jq jq match discarded 
prop merely asserts equation free names relevance proposition provides useful working laws need obtain complete axiomatization strong equivalence indexed distinctions 
trivially done adding law oe qoe oe respecting infer refined formulation rule confines hypothesis finitely distinct oe 
proposition sge fdg sound complete finite agents interpreted respectively 
proof directly definition 
weak bisimilarity equivalence turn briefly weak bisimilarity 
analogously ccs notion weak bisimilarity called weak ground equivalence ignores silent actions treated subsequent 
ccs equivalence preserved summation preserved positive prefix preserved substitution 
defects remedied separately arrive equivalences third congruence definition 
agents weakly ground equal written agents 
agents weakly equivalent written oe qoe substitutions oe 

agents weakly equal written oe qoe substitutions oe 
course may distinction indexed constraining oe 
shall pursue merely point laws ccs valid weak ground equality 
laws follows prefix ff ff ff ff ff proposition sge fp sound interpreted conjecture axiomatization complete finite agents details remain checked 
constants finish brief discussion constants 
examples section introduced constant names need see best handled 
key property constants general understanding term stand 
context means simply instantiated 
particular take liberty example include parameters agent identifier uses definition 
included meet condition imposed defining equations section simply include parameter list agent expressions 
important constants instantiated run risk identified 
working theory may prove equations agents certain constant names say fv may take advantage proving equations indexed distinction explicitly theta gamma id 
working may convention choose omit index equations 
may wish particular choice constant names 
essence proposition analogue indexed equation dq infer calculus reflects idea difference constants variables sharply drawn 
algebraic process calculus mobility long maturing 
ccs published milner discussed mogens nielsen aarhus possibility including notion outset failed see 
engberg nielsen possibility established semantic rules represent starting point 
ways fortunate various process algebras example csp acp ccs include mobility simpler problems better tackled simpler setting second situations mobility needed sharply defined need sharply felt experimental algebras 
number formalisms allow mobility developed algebraic theory 
hewitt actor formalism 
hewitt ideas changing configuration actors developed early semantic treatment clinger phd thesis 
kennaway sleep invented formalisms specifically describe parallel graph reduction processes section context project design parallel processor 
astesiano zucca extended ccs include parametric channels 
engberg nielsen publish report received due attention probably treatment constants variables names somewhat difficult 
features calculus due particular replacement ccs relabelling syntactic substitution crucial formulation semantic rules semantic treatment scope extrusion extension definition bisimulation account name parameters definition strong bisimilarity call simply strong equivalence soundness algebraic laws 
failed attempts depart formulation 
contribution remove discrimination constant names variable names values yielding basic calculus discriminate ground non ground equivalence needed replace constant variable discrimination strengthen algebraic laws particular expansion law order achieve complete equational theories encode value computations calculus tractable way help new match construct provide simple encodings functional calculi calculus combinatory algebra 
abramsky lazy lambda calculus appear declarative programming ed 
turner addison wesley 
astesiano zucca parametric channels label expressions ccs journal theor 
comp 
science vol pp 
bergstra klop algebra communicating processes abstraction journal theor 
comp 
science vol pp 
boudol lambda calculus concurrent communicating systems inria sophia antipolis private communication 
clinger foundations actor semantics ai tr mit artificial intelligence laboratory 
engberg nielsen calculus communicating systems label passing report daimi pb computer science department university aarhus 
hoare communicating sequential processes prentice hall 
goguen winkler cell ensemble architecture rewrite rule machine proc 
international conference fifth generation computing systems icot pp 
milner communication concurrency prentice hall 
milner functions processes research report inria 
abbreviated form proc 
icalp 
milner parrow walker calculus mobile processes part ii report ecs lfcs laboratory foundations computer science computer science department edinburgh university 
nielson typed calculus class processes report inst 
lyngby denmark 
ong fully models lazy lambda calculus proc th symposium foundations computer science pp 
reisig petri nets eatcs monographs theoretical computer science ed 
brauer rozenberg salomaa springer verlag 
sleep kennaway zero assignment parallel processor project distributed computing systems programme ed 
duce peter pp 
thomsen calculus higher order communicating systems proc popl conference 

