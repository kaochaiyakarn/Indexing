aaa appeared proceedings th conference foundations software technology theoretical computer science december bombay india pp 
lncs springer verlag berlin 
conventional uniqueness typing graph rewrite systems extended erik barendsen smetsers university nijmegen describe curry type system graphs extend uniqueness information indicate certain objects locally accessible 
correctness type assignment guarantees external access object take place 
prove types preserved reduction type systems large class rewrite systems 
adding uniqueness information provides solution problems implementations functional languages efficient space management interfacing non functional operations 

models computation viewed basis functional programming 
traditional examples lambda calculus term rewrite systems 
graph rewriting relatively new concept providing model sufficiently elegant time incorporates mechanisms realistic respect actual implementation techniques 
graph rewrite systems introduced barendregt 
deals restricted form grs called term graph rewrite systems see barendregt barendsen smetsers 
suited basis implementation functional languages demonstrated graph rewrite language concurrent clean see 
conventional types concept typing lambda calculus known 
study effect patterns function definitions typing curry type assignment system computing science institute toernooiveld ed nijmegen netherlands email cs kun nl cs kun nl fax 
applicative term rewriting systems developed bakel 
notion type assignment trs bakel extended general term graphs graphs necessarily trees natural way 
aspects typing convenient graph theoretical setting 
special contexts variables necessary multiple occurrences variable represented single node 
extra features graph rewriting shared cyclic objects treated extra effort 
bakel type assignment defined set deduction rules directly supplying nodes graphs rewrite rules types consistent way 
consistency expressed local constraint node 
graph symbols supplied type called type environment uniqueness types underlying motivation uniqueness types fundamental problems practical functional programming implementation functional languages sharing techniques 
problem space behaviour functional programs execution 
reduction step construct complicated structures involving creation new nodes 
improve efficiency implementation re space obsolete objects part graph rewritten performing garbage collection spot 
better predict compile time arguments function garbage rewriting 
called compile time garbage collection 
way handle complex data structures efficiently 
second issue incorporation essentially nonfunctional operations formalism graph rewriting dealing input output 
file updating example operation side effects possibly disturbing referential transparency 
operations safe exists single object modified moment modification takes place 
technique involves incorporation locality uniqueness information type system mentioned 
types extended called uniqueness attributes 
type function indicated specific argument unique 
intended meaning moment corresponding object local accessed type system allow applications kind 
locality information solve problems indicated 
suppose function argument unique 
part argument result concluded part garbage concrete application 
possible re space contents obsolete objects building result 
second problem solved typing dangerous updating operations way require unique arguments 
order achieve notion type assignment conventional typing extended type correctness application fx depends argument type type way passed expects unique argument accessible requiring count 
straightforward count approach rough 
practice usually specific evaluation order mind 
liberal analysis information 
correctness function application depends demanded argument type offered argument type label argument 
dependency formulated terms type coercions prove uniqueness typing preserved graph rewriting sufficiently large class graph rewrite systems 
weighted count analysis section inspired guzm hudak 
addresses problem single threaded polymorphic lambda calculus poly st 
uses operational semantics lambda graph reduction wadsworth 
analysis performed formalism graph rewriting obviously direct 
effect cyclic structures mentioned general pattern matching studied general graph rewriting setting 
wadler type system including linear types developed 
wadsworth lambda reduction 
coercions described implicit wadler restricted form 
ideas inspired jacobs develop logical system explicitly mixing conventional linear constructive logic 
approach described offer propositions types notion 
combination conventional uniqueness typing incorporated lazy functional graph rewriting language concurrent clean 
far implementation arrays efficient high level library screen file see 

graph rewriting term graph rewrite systems introduced barendregt 
section summarizes basic notions term graph rewriting barendsen smetsers 
objects interest directed graphs node specific label 
number outgoing edges node determined label 
sequel assume basic set nodes infinite usually takes sigma set symbols arity labeled graph hn sigmai triple hn symb set nodes 
furthermore symb args functions respectively indicating label symbol outgoing arguments node th argument denoted args combination called 
graph called rooted node explicitly indicated root 
rooted graph components referred symb args respectively 
path sequence successive indicate leads node path exists say reachable subgraph notation rooted graph obtained root removing nodes reachable term graph rewrite systems rewrite rules specify transformations graphs 
rewrite rule triple hg ri consisting graph roots roots determine left hand side pattern right hand side rule 
variables represented called empty nodes nodes labeled special ary symbol 
rewrite rules usual restrictions left hand side just variable variables occurring right hand side occur left hand side 
convenience write respectively 
rewrite rule 
graph rewritten applicable pattern matches match mapping pattern subgraph preserves node structure 
combination hr called redex redex determined graph rewritten structure right hand side rule involved 
done steps 
firstly graph extended instance right hand side rule 
connections new part original graph determined root redex redirected root right hand side 
unreachable nodes removed performing garbage collection result rewriting redex delta denoted delta just collection graphs set rewrite rules combined term graph rewrite system 
formally tuple hg ri set rewrite rules set free graphs closed reduction 
sequel notational conventions 
hg ri 
sigma denotes symbols sigma appear set function symbols symbols exist rule called data symbols consider called function data systems left hand side rewrite rule function root data symbols 
modelling higher order functions symbols fixed arity impossible functions arguments deliver functions result 
higher order functions modelled associating symbol nonzero arity collection data symbols called curry variants 
application curry variant represents partial application furthermore special apply rule added adding new arguments partial applications 
notions types type assignment introduced deal concept higher order functions 
description method reader referred full version 

typing graphs section define notion simple type assignment graphs type system traditional systems functional languages 
approach similar introduced bakel 
meant illustrate concept classical typing graphs 
section different typing system described 
assume set type variables set type constructors arity 
definition 
set graph types defined inductively follows 
ii set symbol types defined oe 
oe oe 
oe usually abbreviate oe oe sequel ff fi ff 
range type variables oe 
range symbol types 
notions substitution instance defined expected 
denotation oe indicate oe instance rest section describe types assigned graphs fixed type assignment function data symbols called environment assume environment contains type assignments symbols ap 

ff ap ff fi ff fi environment types regarded type schemes concrete application symbol uses instance environment type 
consider new basic types introduced called algebraic type definitions type definitions possibly infinite set data symbols called constructor symbols associated new type 
general form algebraic type definition ff oe oe delta delta delta ff oe variables appearing oe contained ff 
assume fresh constructor symbol 
type lists obtained follows 
list ff cons ff list ff nil system algebraic type definitions induces canonical type environment ea constructors introduced symbol cons previous example ea contain type declaration 
cons ff list ff list ff fixed set algebraic type definitions 
assume type environment consistent induced environment ea 
definition 
hn symb graph 
function typing 
symb arity symb args case rooted write oe oe typing 
example 
typed graph relevant part corresponding environment indicated 
cons nil int list int int list int list fi fi cons ff list ff list ff nil list ff int calculus type assignment principal type property graph typable exists general typing 
definition 
graph typing principal typing typing 
theorem 
exists computable function pt typable graph pt principal typing 
pt fail typable 

definition 
hg ri 
rewrite rule typable exists typing meets requirements 


symb pt condition states left root node typed exactly type assigned root symbol environment 
contrasts requirement applicative occurrences function symbol 
furthermore condition ensures applicable actual typing graph restricted matching part instance typing restricted 
say typable typability reduction called subject reduction property indicated result 

theorem 
hg ri 
suppose typable 
oe oe 
usage analysis analyzing uniqueness nodes graph involves function argument dependency analysis 
approach classification unique access nodes graph count node 
practice refined analysis possible takes specific reduction strategy account 
idea multiple node harmless knows remains moment evaluation 
standard evaluation conditional statement causes evaluation part subsequently evaluation 
single access node combined single access result unique access generalized arbitrary symbols assume sigma say arity set 
divided disjoint argument classes 
intended meaning arguments occurring primary arguments evaluated argument 
alternative groups arguments actual evaluation arguments belonging different groups evaluated 
data symbols considered primary arguments 
called primary belongs primary arguments symb suppose paths disjoint start point 
destructive access considered harmful primary starts secondary start common argument class 
case access done access notation access take place order 
dangerous destructive access prevented labeling tail part containing data nodes read omega 
possible write access indicated fi 
marking function labeling ref ffi suspect path contains marked mentioned 
treatment cycles somewhat subtle see full version 
note leaves freedom labeled omega standard solutions marking labeling suspect path omega count marking place omega pointing node count 
uniqueness typing section extend notion typing see section uniqueness information 
consider set types attach subtype type called uniqueness attribute may ffl unique theta ordinary nonunique 
sets gamma uniqueness types pre uniqueness types respectively defined simultaneous induction follows 
ffl gamma theta gamma gamma oe attribute oe denoted oe theta ff theta theta ff ffl ffl int ffl set uniqueness symbol types defined oe 
oe oe 
oe notions substitution instance defined straightforwardly 
joej denotes conventional type obtained removing uniqueness attributes 
notion type assignment adapted way 
correctness uniqueness type assignment node graph depends environment type symbol node types assigned argument nodes way arguments accessed 
correctness type assignment dependent global structure graph contrast situation conventional typing relating types nodes types direct arguments 
dependency way arguments accessed explicit 
introduce called coercion relations access fi omega respectively 
idea unique objects keep uniqueness passed fi arcs lose accessed omega 
furthermore unique object coerced nonunique nonunique object required function application 
care needed case function types see full version 
intuitively coercion statement oe means oe object regarded object 
function types view leads rule oe oe oe oe note called contravariance argument type constructor says argument occurs negative position 
generalized arbitrary constructors coercion rules dependent negative positive classification constructor arguments 
algebraic type system deduce sign classification standard fixedpoint techniques 

definition 
coercion relation defined steps 
set uniqueness attributes ffl thetag ffl ffl ffl theta theta theta ff ff oe oe oe oe oe oe oe oe oe oe indicates componentwise coercion sign classification set fi 
ii restricted coercion relation omega defined oe omega oe theta notion environment extended uniqueness typing modification uniqueness type environment may contain uniqueness variants conventional type 
necessary algebraic constructors 
formally uniqueness type environment function sigma 

ffl ff theta ffg ap ff fi ff fi ffl constructor type associated algebraic type system supplied uniqueness information 
consider version obtained consistently attributing variables constructor symbols algebraic definition 
lists result uniqueness variants cons cons theta ff theta list theta ff theta list theta ff cons ffl ff theta list ffl ff theta list ffl ff cons theta ff ffl list theta ff ffl list theta ff cons ffl ff ffl list ffl ff ffl list ffl ff ordinary lists built 
lists spine unique lists containing unique elements lists spine elements unique 
consistency uniqueness typing rewrite rules necessary uniqueness pattern nodes propagated upwards 
sense allow uniqueness propagating constructor types resulting type constructor type oe unique argument types oe unique rejecting see full 

definition 
hn symb graph 
function uniqueness typing marking function exists oe symb 

oe args arity symb 
denotation oe extends typing system 
ii plain uniqueness typing 
oe 
example 
gives parts typed graph corresponding environment 
int int int int int ffl ff ffl ff theta fi theta fi theta fi ffl int 
definition 
hg ri 
rule uniqueness typable function conditions satisfied 
ju typing plain uniqueness typing uniqueness typing omega cycle fi 
symb 
explanations place 
left hand side rule typed plainly ensure typing rule applies typed matching part concrete graph 
coercion condition included account effect redirection construction contractum 
proved uniqueness typing preserved reduction provided rewrite rules respect argument classification function symbols way pattern nodes passed left hand right hand side 
proof complex full 
difficult part construction new marking result graph 

theorem 
hg ri 
suppose uniqueness typable 
oe oe 
locality properties intention uniqueness typing uniqueness assumptions rewrite rules translate locality properties actual arguments function involved 
call node local course property expected evaluation order follows argument classification 
redex delta hr called primary reachable path consisting primary 

locality theorem 
uniqueness typable graph 
delta hr primary redex uniqueness typing ffl local 
applications section give examples show problems mentioned solved uniqueness types 
consider list reversing function implemented destructive function uniqueness type 
rev ffl list theta ff ffl list theta ff rev nil ffl list theta ff ffl list theta ff ffl list theta ff nil cons cons note space obsolete cons re parts contents 
fact suffices redirect points second example shows predefined function typed having input object type file character written file 
output consists modified file unique writing 
ffl file theta char ffl file elaborated example presenting efficient quicksort algorithm performs sorting situ data structure smetsers 
algorithm idea list reversal example 
van groningen plasmeijer high level specification functional languages proc 
international workshop functional languages glasgow uk springer verlag 
bakel van smetsers brock partial type assignment left linear term rewriting systems editor proc 
th trees algebra programming caap pages rennes france springer verlag lncs 
barendregt van eekelen kennaway plasmeijer sleep intermediate language graph rewriting proc 
parallel architectures languages europe parle pages eindhoven netherlands springer verlag lncs ii 
barendregt van eekelen kennaway plasmeijer sleep term graph reduction proc 
parallel architectures languages europe parle pages eindhoven netherlands springer verlag lncs ii 
barendsen erik smetsers graph rewriting copying technical report university nijmegen 
guzm hudak single threaded polymorphic lambda calculus proc 
th ieee symp 
logic computer science pages philadelphia pa ieee computer society press 
jacobs conventional linear formulas logic coalgebras university utrecht 
smetsers van eekelen plasmeijer concurrent clean proc 
parallel architectures languages europe parle pages eindhoven netherlands springer verlag lncs 
smetsers erik barendsen marko van eekelen rinus plasmeijer guaranteeing safe destructive updates type system uniqueness information graphs technical report university nijmegen 
wadler linear types change world proc 
working conference programming concepts methods pages israel north holland 
wadsworth semantics pragmatics lambda calculus phd thesis oxford university 

