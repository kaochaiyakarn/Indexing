interactive planning assistance human agents matthias lindner intellektik fachbereich informatik technische hochschule darmstadt darmstadt planning systems assistance environments differ aspects classical planners 
classical planning planner controls agent little intelligence robot arm assistance planning human beings planning system support trying achieve complex goal 
examples assistance planners office planners software development support planners 
planning applications require planning methods specially adapted respective domain 
important features commitment planning ability deal incomplete action models revise assumptions outcome actions real world efficiently 
describe design implementation assistance planning system plopp divided major parts plan network maintenance system pnms plan synthesis module planner 
pnms special deductive global knowledgebase allows efficient storage retrieval hierarchical partial order plans 
super ordinate planner maintain plan variants created planning process record planning decisions state application domain 
comfortable graphical interface allows user guide planning process trigger execution scripts programs communicate results actions performed real world planner 
planning associated robot control research area 
goal kind research termed robot planning development methods automatic generation action sequences generally robot control programs enable autonomous vehicle perform certain tasks 
central problems solved achieve goal model classes possible actions reason courses actions control execution actions react expected unexpected events happening real world 
problems arise try support people solution complex problem development program system consisting different modules coded integrated 
reasonable planning system assists problem solving process 
case speak assistance planning 
important differences types planning 
robot planning planning system completely controls agent little intelligence assistance planning human uses planning system support trying achieve goal 
agent human reasonably assume knows application domain assistance planner certainly accept restrictions actions performs restrictions definitively enforced application domain 
important feature assistance planner ability perform commitment planning means context generated plans constrain possible courses actions user perform possible 
important difference treatment sensor data 
robot planning sensor data incomplete unreliable sensor noise unavoidable assistance planning sensor data supplied user provide information world result action performed 
fact may assume assistance planning user able sense important feature world transmit information correctly planning system 
say agent user perfect view world 
allowed treat sensor data persistent reliable information 
examples kind sensor data results action office domain asking boss permission buy typewriter 
performing action user able inform planner result inquiring 
inform planner filling form simply clicking ok button expected effects action user received permission buy typewriter occurred 
information reliable persistent 
obvious assumption sensor data defines correctness planning system relation correctness user inputs 
reasonable described want planner support user user responsible actions performed 
words user feeds planning system faulty input receive incorrect plans 
assistance planning system smarter person 
shows example office plan 
describes office procedure executed event buying new typewriter 
nodes graph labeled actions executed edges represent temporal ordering constraints 
actions strictly ordered respect action get money cash typewriter strictly buy typewriter appear parallel branches graph 
actions appearing parallel branches may executed order 
plan restrictions sequence execution actions plan performed parallel branches represent alternatives 
action write necessity description typewriter branch parallel branch containing action write suppliers typewriter 
represents fact reason better perform actions 
important assistance planner able handle kind plans unacceptable user able choose action wants perform 
want planning system forced write description kind new intelligence synonymously ability reason actions real world office procedure plan typewriter needs try get offers local typewriter dealer wants way round 
assistance planner deal partially ordered plans 
important requirement planning methods assistance domains arises kind actions planner reasons 
typical actions nodes plan graph complex actions hard model 
state correct complete description action ask chef permission buy typewriter possible effects hard impossible 
planner world model highly incomplete 
reasoning incomplete knowledge ability revise assumptions actions salient features assistance planner 
describe design implementation assistance planner ffl generates partially ordered hierarchical plans ffl performs commitment planning ffl represents plans called justified events structure allows efficient revision plans revisions planners assumptions effects actions 
section show assistance planning system support software development process 
section gives overview implementation assumption assistance planner called plopp 
section describe planning methods plopp 
system 
section explain pnms performs main reasoning tasks plopp 
responsible plan management 
conclude section pointing possible enhancements approach problems subject research 
software development planning development large software systems complex process involves definition execution different subtasks executed different people 
different people collaboratively common goal different roles different responsibilities global process 
general different environments different tools depend role 
project manager mainly works coordination management tasks programmer job code certain modules 
project manager uses tools word processors time managers spreadsheet programs programmer uses editors compilers 
shows simplified scenario area software development 
project manager generates global plan development product comprising modules defines tasks orders selects teams ii fulfill desired roles assuming offer required skills perform respective tasks 
people working different teams certain tools execute tasks 
tasks may complex execution single task involve planning modularization 
case shown project manager delegates tasks team ii 
consider scenario team ii database development group enterprise tasks specification coding database interface global product expert system 
completion tasks specification coding yield module database interface 
project manager selects team ii role database development group delegates tasks team expects module eventual effect action 
team ii consist programmers 
perform task common split task coding subtasks 
members team ii select subtasks depending respective roles 
planning required team ii coordinate subtasks guarantee consistency 
programmer selecting subtasks task plans actions perform order complete tasks 
team ii completed module inform project manager controls progress development process possibly performs actions information gets development teams 
description software development process simplistic 
shows planning controlled execution central activities carried process 
support tasks subject software development plan describe processes flow information software development process informal simplistic 
formal methods interaction models developed field software engineering certainly important development software assistance planners 
focus formal planning methods applied areas staying informal describe application domain plan module task product team team ii software development planning ning 
planning systems application domain potentially offers advantages 
ffl different people optimally supported providing appropriate working environments tailored dependence roles 
ffl set tools editors compilers way determined causal action models 
formal specification possible actions certain domain assists guarantee consistency different modules developed simultaneously 
ffl software development process hierarchical structure causes planning tasks occur different levels abstraction project manager performs actions highest level programmer starts compiler program executes action low level 
planning tasks occurring different abstraction levels modeled uniformly causal models associated respective level 
results improved transparency allows better surveillance process 
ffl executability conditions effects actions performed abstraction level modeled automatically checked lookups module database contains code developed current project 
types sensor actions subplans planned executed autonomously 
ffl development process amount knowledge problem grow 
additional information added systems knowledge base causal model action modified new action models added 
resulting knowledge base great projects 
ffl plans developed executed development process product provide detailed history explanation process 
information useful improvement development process 
section described differences robot planning assistance planning saw planning methods applied assistance situations required special respective domain 
applying assistance planner domain software development order perform tasks just described similarly demands special features 
ffl system highly interactive 
crucial user able decide subtask wants 
planning process transparent controllable 
means possible user survey plan modifications planner describe justify planning decisions user possibly revise decisions agree 
furthermore possible revise parts plan introduce shortcuts user may find better solutions certain subtasks planner 
programmer find global solution subproblem initially expected 
render envisaged subtasks superfluous 
possible represent information current plan modify reflect new situation 
ffl software process involves people information effects executability conditions actions incomplete subject change 
additionally knowledge problem solved grow software developed 
enforces ability revise assumptions action executed certain context completely revise causal model application domain planning process 
kind substantial revision assumptions possible actions effects planning process dangerous render parts plan complete plan inadequate current problem new action may solve subproblem efficient planner generated action sequence solution unreasonable 
desirable planner able decide guess ask user confirmation current plan refined reasonable replan scratch 
ffl hand higher level plans change different development projects 
certain guidelines obeyed project enterprise 
possible store plans refine depending current problem 
ffl highly desirable planner able find solutions simple subproblems execute generated plan parts autonomously 
intelligent planning system want inform right time type gcc hello hello shell window want planner execute command directly evaluate results 
illustration possible application domain assistance planner description resulting requirements section describe approach realization assistance planner 
plopp 
system user interface plopp 
system plopp 
system experimental assistance planning system developed investigate planning methods applied assistance environments platform validation modeling approaches applications 
shows user interface plopp 
large window right side labeled plopp 
shows graphical representation current plan 
graph nodes represent events actions edges represent temporal constraints 
plan shown partial executed plan problem view latex document named 
definition problem shown topmost window labeled problem latex view 
planning problem consists description facts relevant problem solution holding world current initial state list facts goals hold desired goal state 
example shown description initial state empty goal achieve view representing fact document visible screen 
large window left side labeled causal model latex world 
shows part causal model application domain 
description operations user planning system perform real world 
example includes actions commands related word processing system latex command auxiliary commands 
causal model describes conditions hold world action executable ditions assumptions effects action 
divided add list names facts planner assumes hold execution action delete list naming facts longer guaranteed hold execution action action executable planner commands sent directly operating system causal model includes additionally description effects action obtained sensor information 
necessary assumptions effects actions described add delete list false 
actions executed planner user description execution effects queried user actions planner executes directly needs know query world directly 
typically done checking return status commands parsing output 
window showing part causal model latex world window labeled latex 
shows command execution action just executed 
planning process user decide execute actions plan complete consistent 
example shown user decided execute action latex occurring left branch plan graph 
output latex command return status shown 
plopp 
executed command analyzed output 
window labeled execution results shows positive negative empty example effects latex command calculated planner sensor information command 
snapshot plopp 
session shows system matches requirements described previous section 
system highly interactive allows user control guide planning process directly manipulating plan graph 
user select actions execution add ordering constraints plan 
possible guide planning process selecting nodes refinement removing actions plan 
system able execute programs commands directly allowing user monitor execution 
powerful model language allows description actions performed including means describe theory world 
allows description world state constraints fact single object different locations time 
additionally theory allows specification derived effects context dependent effects 
useful handle ramification problem problem describe effects action 
specification action independent rules allows compact modelling actions 
longer necessary describe effects action 
complete effect description action obtained calculating deductive closure specified effects respect set deduction rules models derived effects 
shown plopp 
presents causal model special editor window planning process 
allows explanation plopp planning steps combination save load facility plans allows user modify causal model planning process working solution problem 
pnms atms plopp 
query expand constrain revise model problem save load exec run step quit mail date secretary check money typewriter wait write suppliers typewriter look catalogue typewriter final buy typewriter get money cash typewriter ask chef permission buy typewriter wait write necessity description typewriter init architecture plopp 
system closer look internal architecture plopp 
shown 
plopp 
system shown right side interacts terminal user 
plopp 
internally divided major modules plan synthesis module labeled plopp including causal model maintenance module plan network maintenance system pnms 
plan synthesis module implements plopp planning method terms plan manipulation operations provided pnms 
pnms fact deductive closure calculated certain effects checked need 
plan synthesis module interconnected tell ask interface 
planning process planner queries relevant information current previous plan variants pnms tells plan modifications performed 
operations provided pnms define event language allows specification plopp planning method 
language includes operations needed create manipulate partial order hierarchical plans 
plan representation pnms internally atms assumption truth maintenance system implementation event language described detail section 
section describe planning method implemented plopp 
system 
plan generation project history pnms select project refine possible planning operations selected planning operation plan index problem causal model plopp planning method goal planning process interactive assistance planner execute sequence actions brings desired state application domain 
planning process finished goal state achieved planning failed 
true way reach goal state anymore executing sequence actions described causal model 
plopp 
system try generate execute action sequence achieving desired goals refinement partial order plans 
illustrates plopp planning method 
main inputs planning system problem description causal model shown upper left part 
planning process starts creation initial plan derived directly problem description 
plan plans stored pnms consists solely initial event final event goal event goal fact problem description 
initial event preconditions establishes description initial state problem definitions 
facts form initial state description members add list initial event 
final event effects conjunction facts problem description form precondition 
goal events events executable subject refinement 
shown plopp planning method consists phases project select refine 
main planning loop starts project phase 
phase planner checks current plan consistency completeness 
consistency partial order plan means linearizations plan consistent 
linear plan consistent preconditions event occurring plan hold 
completeness means goals problem definition achieved final state plan 
model assistance planner interleaved planning execution scheme means plan contains executed actions facts forming goal description currently hold real world 
input project phase current plan causal model describes possible plan refinements output project phase set possible planning operations 
planning process terminated set empty contain plan manipulation operations necessary restore consistency current plan refinements plan 
initial plan described example consistent 
initial state goal events preconditions precondition final state satisfied effects goal events 
plan complete 
contains goal events executed actions executable actions 
substituted actions causal model 
result project phase planning cycle set substitution operations 
phase planning cycle select phase 
phase possible planning operations selected execution 
done planner heuristic method selection phase involve user interaction allow user select part plan wants goal event substituted 
result select phase planning operation set possible operations calculated project phase 
phase planning cycle refine phase actual manipulation current plan 
includes ordering operations execution actions real world 
case executable action replaced description execution results 
case sensor data collected user directly world 
planner executes project select refine cycle planning process successfully terminated failed 
cycle planning information recorded planning history 
information stored includes current plan set possible planning operations selected operation 
planning history hand implement efficient backtracking methods easy reset planner previous state select different planning operation 
hand planning history explain planning process justify planners decisions 
obvious planning method heavily depends pnms stores plans performs reasoning tasks guarantee correctness planning method 
section describe detail implementation pnms reasoning performs 
index pointing pnms data structure stored 
pnms data structure contains plan variants created planning process 
pnms pnms represent states actions synonymously events effects actions 
state snapshot world discourse particular instance interval time described set properties relations holding 
state dependent proposition proposition holds states 
state dependent propositions changed effects actions 
plans represent hypothetical courses actions 
consider plans partially ordered sets events 
events cause state transitions 
event causal model associated describes conditions trigger event effects event 
causal model event comprises triple set propositions hold state action executed 
set propositions causes hold set propositions clips causes hold resulting state 
precondition event add delete list 
coping incompletely specified preconditions cf 
qualification problem important domains number preconditions may infinite complete acquisition preconditions impossible proving preconditions undecidable computationally intractable 
pnms treats preconditions follows precondition action holds action assumed executable 
planner world model may contain constraints states atemporal expressions true state 
states satisfy constraints considered inconsistent planner revises assumptions decisions current set beliefs entail inconsistent state 
set executability assumptions results inconsistent domain state instance physically impossible qualification rules applied identify violated executability assumptions retracted 
effects add delete lists literals horn clause rules 
rules allow representation context dependent effects effects occur certain circumstances 
conditional effects efficient representation actions having similar identical effects 
addition deduction rules states specified 
deduction rules allow representation derived effects effects deduced effects 
deduction rules epistemological adequate representation large sets primitive effects 
plans information planning process stored pnms justification structure 
pnms justification structure quadruple form set events set states set propositions set propositional horn clause rules 
pnms state pair pnms justification structure subset set actions planner committed 
call current set events cse short 
planning operations map pnms states pnms states add rules change pnms provides inference procedures defined pnms states plan variant projection maps current pnms state current plan set events partial order 
temporal projection event proposition pnms state determines sets ordering constraints imply holds sections explain plans causal models events represented describe inference procedures operate justification structures order compute traditional planning concepts partial plans satisfaction preconditions 
rules contains different kinds propositional rules model various relations members sets example events transform states states events cause propositions hold clip propositions 
representing state transitions 
basic form state transition state event takes place state resulting occurrence call enabling state caused state state transition represented propositional rule refer rules form rules 
exceptions representation state transitions initial events wait events 
initial event enabling state add list initial state description 
representation containing event causing initial state allows revision initial state information initial state available plan execution 
wait event introduced technical reasons 
assume events en unordered respect 
wait event introduced synchronization en events 
wait events enabling state 
event causes unique caused state plan variant cse rule set contains exactly rule event 
different events may enable state occur different plan variants 
states may occur rules left hand side partially ordered events may share common enabling state earliest state executed 
set events relation 
represents event causes state introduce notation 

event history state minimal set events current plan variant required justify history feg history history sn say state justified set events superset history 
history event history directly provides definition partial temporal order plan net 
event strictly event member event history state caused oe 
history oe init achieve clear init unstack achieve clear final unstack final state transition pnms justification structure shows pnms justification structure state transitions simple plan variants 
graphical illustration rules oval nodes represent events rectangular nodes represent states 
pnms justification structure contains events achieve clear unstack caused states fs init achieve clear unstack final rules init achieve clear init achieve clear unstack init unstack final achieve clear final unstack init unstack final unstack final current pnms state contains event achieve clear goal event part current plan 
achieve clear removed cse action unstack added pnms state represents refined plan goal event achieve clear replaced executable action unstack 
representing effects events 
state transitions effects events represented propositional horn clause rules 
effect add list event persistence assumption pa created 
persistence assumptions model assumption effect event persists continues hold event clips 
recording persistence assumptions justifying effects enables pnms compute revise states world application frame axioms making strips assumption 
see efficient methods temporal projection implemented application domains satisfy certain requirements 
effect add list event represented pa rule form pa pa event occurs delete list persist occurrence implement define persistence assumptions form pa oe jj inconsistent occurrence event simply done addition 
rule pa 
denotes false better inconsistency 
shows incomplete event state persistence assumption proposition justification false init unstack pa init pa init pa unstack clear tower clear init unstack pnms justification structure representation effects justification structure 
event init establishes proposition clipped event unstack 
justified init persistence assumption pa init ona 

rule marks conjunction persistence assumption event unstack contradictory 
say event causes hold similarly clips 
strength explicit representation persistence assumptions representation naturally extends model derived effects context dependent effects state coherence conditions 
add rules form zy 
tower knowledge base planner planner partially compute deductive closures states automatically revise 
allow automatic revision deduction justified adding rule pn propositions hold state 
mechanism specify domain constraint rules form pn 
rc proposition justified propositions 
represents fact planner justify propositions ona justified 
domain constraint rule says object clear top represented justification contradiction antecedents 
pnms state enables justification inconsistent 
pnms operations rules described section allow representation partial order plans incomplete action models 
section describe basic pnms operations show implemented different types rules 
planning operations map pnms state pnms state adding new rules changing current set events 
operation establish event 
basic operation creation revision plan networks specification new events 
new events specified establish event fs fp png fq event specified fs set states takes place state caused event add list fp png delete list fq establish event fs fp png fq feg fsg feg fp est est feg pa gamma gamma oe pa gamma feg est pa step establish event generation corresponding rule 
second part pa rule added effect add list strictly assure terminates persistence assumptions regarding done adding rules type 
persistence assumption inconsistent occurrence implementation effects delete list similar 
operation substitute event 
substitution action refined ones basic planning operation refinement planners 
instance substitutions necessary replace goals activities represent subplans achieve replaced goal decompose activities executable actions planner uses interleaved planning execution scheme substitute executable actions representations results execution domain agent 
substitute event fe fs fe feg gamma gamma substitute event event establish new event replace detail establish new event causal model enabling states furthermore new rules created event enabled caused state substituted event 
rule containing copy containing added treatment effects described establish event specified 
substitution operations require slightly different implementations operation execute action 
operation substitutes action event representing execution 
add delete list executed event computed perception sensing 
execution action implies action executed actions unordered respect 
execution actions may constrain order actions plan 
operation expand complex action 
expand complex action substitutes complex action set goal events representing subgoals decomposition complex action 
total ordering subgoals enforced action additional wait events inserted plan synchronize new goals 
pnms justification structure produced operation substitute event achieve clear unstack unstack executed initial pnms state represented goal achieve 
substitution adds rules unstack init unstack final unstack final substitution goal replaces achieve clear unstack parts plan justified achieve clear invalidated plan containing unstack current plan variant 
prior plan variant obtained adding achieve clear removing unstack operation constrain order 
important planning operation protection preconditions needed actions ordering constraints 
instance action establishes condition hold action executable action unordered respect protected adding constraint oe demotion constraint oe promotion 
pnms operation allows specification additional ordering constraints constrain order 
discuss constrain order case events unordered respect event plan 
addition constraint oe create copy viz 
copy viz 
corresponding new states copy event created establishing new event causal model 
justified enabling states justified constrain order ekf en fm en ideas apply general case constrain order deal complex structures partially ordered events details worry 
temporal reasoning predicate holds 
planner check precondition action satisfied state action supposed executed 
precondition satisfied linearizations planner constrain partial order plan exclude linearizations cause precondition violated 
holds pnms function pnms state proposition event computes conditions holds planner posts condition returned holds current plan guaranteed hold consider case totally ordered plan 
proposition holds event deduced set premises necessary believe execution set persistence assumptions holds premises caused state premises caused state history state caused extended maximal number persistence sumptions persistence assumptions collected reverse chronological order 
function holds computes set premises necessary believe executability computes maximal set persistence assumptions checks premises persistence assumptions inconsistent checks set premises implies subset premises 
inconsistencies premises caused state implied clobbered persistence assumptions state constraints satisfied 
premises history pang ng pa history pang gamma pa pa pa pa oe oe jj pa pang history pang partial order plan proposition necessarily holds event exists clobbered event compute conditions causes hold necessary check plan 
respect distinguish different temporal areas may belong 
safe areas interfere areas strictly strictly areas may effect constrained safe area 
done demotion moving safe area strictly demotion moving strictly strictly strictly promotion demotion applied 
plan exists hold linearization plan 
temporal projection requires identification relevant sets generation appropriate ordering clauses 
event history provides mechanism needed identify relevant sets persistence assumptions mechanism eliminate clobbered linearization plan 
truth criterion defining holds function pnms formalized follows holds est oe oe oe constrain oe oe constrain oe oe constrain oe constrain oe constrain oe formalization truth criterion similar 
terms form constrain oe describe need new ordering constraint forcing event occur event formula divided parts 
lines state existence event current plan variant establishes proposition event exists member est positive effect assure establishes constrain words parallel add ordering constraint forces occur plan 
part formula satisfied sure possibly holds lines formula guarantee necessarily holds exist plan establishing effect described moving safe areas 
parallel demoted constrained definition holds caused state demotion negative effect invisible symmetric case parallel handled part formula 
parallel promoted 
constrained occur effects events invisible state nullified 
parallel parallel promoted demoted formalized line formula 
extend approach context dependent derived effects concepts defined 
consider case proposition deduced set propositions case consider possible predicate holds recursively called generate ordering constraints hold linearization plan 
combination constraints hold 
course necessary check generated constraints consistent exists partial linearization current plan satisfies 
shown planning methods fruitfully exploited develop assistance systems complex domains 
software development planner example kind system 
user interaction assumption planning interleaved planning execution schemes commitment planning crucial features assistance planners 
plopp 
system fulfills requirements providing direct manipulative user interface internally mapping planning process multi context propositional horn clause logic inference technique provided atms 
problems remain solved way final solution assistance planning problem 
points subject research ffl classical atms algorithms run exponential time 
may lead performance problems pnms handle large plan variants 
specializations atms algorithms handle class atms operations required pnms help solve problem 
ffl explicit handling time certainly required assistance planner cooperative applications office software development planning 
ffl approach assumes planner supports single agent performing action time necessary handle interactions actions performed different people parallel 
handle parallel actions interactions interactions modeled action preconditions able express parallelism explicitly 
ffl highly desirable include automatic learning module planner 
assume user may find better solutions problems planner reasonable planner able store solutions reuse similar situations 
methodological efforts experimentation real world assistance planner needed demonstrate advantages planning methods assistance systems 
allen hendler tate 
readings planning 
morgan kaufmann san mateo 
beetz 
planning cooperative office procedures 
kohl editors knowledge systems office pages 
oldenbourg publishers 
beetz 
reasoning justified events preliminary report 
proceedings fourth german workshop planning configuration berlin 
springer 
beetz lindner 
temporal projection hierarchical partial order planning 
technical report aida fg intellektik fb informatik th darmstadt 
published 
cant ortiz campbell avila mar editors 
proceedings th international symposium artificial intelligence un 
aaai press 
chapman 
planning conjunctive goals 
journal artificial intelligence 

assumption truth maintenance system 
journal artificial intelligence 
hertzberg 
theory conflict detection resolution nonlinear plans 
proc 
th ijcai page detroit mi 
lindner 
atms plan 
tasso report nr 
th darmstadt november 
lindner 
das pnms und der plopp 
bergmann 
wache editors zum 
workshop und pages 
universit und dfki kaiserslautern 
seki working swp 
mccarthy 
epistemological problems artificial intelligence 
proc 
th ijcai pages 
john mccarthy 
situations actions causal laws 
stanford artificial intelligence project memo 
john mccarthy patrick hayes 
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence vol 
pages 
edinburgh university press edinburgh 
published 
shoham 
frame problem 
georgeff lansky editors proceedings workshop reasoning actions plans pages 
morgan kaufmann publishers 
weld 
commitment planning 
ai magazine summer fall 
appear 

