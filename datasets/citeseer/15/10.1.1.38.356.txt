dependency sequences hierarchical clocks efficient alternatives vector clocks mobile computing systems ravi prakash singhal department computer information science ohio state university neil avenue columbus ohio 
vector clock capture causal dependencies processes distributed computing systems 
suitable mobile computing systems due lack scalability size equal number nodes ii inability cope fluctuations number nodes 
presents efficient alternatives vector clock sets dependency sequences hierarchical clock 
alternatives scalable immune fluctuations number nodes system 
mobile computing system divides geographical region served smaller regions called cells 
cell served static node referred mobile service station mss 
msss system connected fixed wireline network 
mobile host mh communicate units mobile static mobile service station cell 
mobile service station signals forwarded fixed wireline network wireless channel depending party involved communication session unit outside cell mobile host cell respectively 
data rate achievable wireless channels significantly lower achievable data rate fixed wireline network 
communication bandwidth available mobile hosts significantly bandwidth available nodes traditional distributed systems wireline networks 
communication protocols application software suitable distributed systems unacceptable performance mobile computing system due low data rate 
need develop efficient alternatives 
applications running distributed systems employed vector clocks track causal dependency relations events different processes :10.1.1.47.7435
vector clock integer vector components number processes application 
large distributed applications constituent processes size vector clock large 
message carry vector timestamp value sending process vector clock time message sent 
communication overheads imposed vector timestamps acceptable high data rate fixed wireline networks 
mobile computing system sending vector timestamps message feasible solution due low data rate wireless channels 
especially large distributed applications constituent processes 
communication overheads vector clocks moved away wireless channels wireline network msss collectively take responsibility maintaining causal dependency information behalf mhs 
scenario msss said act proxies mhs 
size vector prohibitively large send higher bandwidth wireline network 
mobile host population fluctuates time time 
mobile hosts join network stay connected period time disconnect temporarily permanently 
fluctuations handled vector clocks require number nodes system change 
communication involving mobile hosts takes place mss cell appears causality relationships tracked vector clocks components number msss system 
lead significant reduction communication overheads number msss usually small fraction total number nodes mhs msss system 
just integers vector clock insufficient tracking causal dependencies shown section 
need alternative means tracking causal dependencies impose low overhead possible 
vector clocks dependency tracking scheme immune fluctuations number nodes system 
presents dependency tracking schemes meet requirements 
fact communication involving mhs goes msss exploited 
organized follows 
section system model 
section describes integers needed track causal dependencies 
section alternative representations capturing dependencies mobile computing system discussed 
section presents dependency sequences section presents hierarchical clocks efficient alternatives vector clocks 
alternatives compared section 
section 
system model mobile host cellular telephone laptop computer wireless modem mobile computing device capable communicating wireless channels 
logical view mobile computing system shown 
links static wireline network support fifo message communication 
long mh connected mss wireless channel ensures fifo communication directions 
message transmission wireline wireless links takes unpredictable finite amount time 
messages lost modified transit 
applications executing mobile computing system assumed composed processes 
processes collectively execute distributed computation 
assumed process executes distinct node mobile static system 
globally shared memory 
communication processes messages 
exists logical communication channel pair nodes 
process execution message communication asynchronous 
events process executed sequential manner 
events classified categories message send events message events internal events 
send events signify flow information processes establish causal dependency sender process receiver process 
system global physical clock 
order events occur different processes determined solely basis time occurrence 
mss mss mss mss mss mh mh mh mh mh mh mh mh mh mh mh mh mh cell cell cell cell cell fixed network mobile computing system 
information partial order occurrence events gathered causal dependencies 
dependencies expressed happened relation 
events defined ffl events process occurred ffl event sending message process event delivery message process 
ffl relation transitive 
past denote events causal past event ast fb ag ast constitutes envelope causal predecessor events processes distributed computation 
envelope referred past cone 

said concurrent represented situation past cone vice versa 
lamport happened relation employed maintain scalar clock representing partial order events 
scalar clock values associated events 
converse true 
vector clocks proposed independently mattern guarantee vector timestamps values vector clocks events occur associated events respectively :10.1.1.47.7435
isomorphism exists set partially ordered events distributed computation timestamps 
event past cone event insufficiency component vector clocks mobile computing systems communications mhs take place mss cell 
mhs cell may communicating concurrently entirely different sets nodes mss cell imposes sequential relationship messages destined sent mhs cell order arrive mss 
causal dependencies nodes created solely messages 
mss aware intra cell causal dependencies mhs cell inter cell causal dependencies involving mhs 
leads obvious question causal dependencies nodes system mhs msss tracked vector clocks size number msss system 
lemma vector clocks components number msss system accurately capture causal dependencies mobile computing system 
proof proof counter example shown 
mh mh mh mh mss mss cell cell vector clock components needed cell system 
consider cell system served mobile service stations mss mss mobile hosts mh mh cell served mss mobile hosts mh mh served mss msss system vector clock components 
initially vector clocks msss set 
mh send message mh mh sends message mss mss associates vector timestamp event send message sent received mss forwards message mss arrives mss mss sets vector clock associates timestamp event recv recv forwards mh mh send message arbitrary node network say mh mh sends mss mss receives receiving mss updates vector clock associates timestamp event send send 
causal relationship recv send events concurrent 
recv send implying send causally dependent recv break isomorphism property vector clocks 
integer cell represent causality mss cell increases component vector clock send event observes events mutually concurrent 
cell level implicit serialization events 
mss unable maintain mutual concurrency information events occurring different mhs cell causal dependency exists 
geometric interpretation contradiction shown explained aid 
events occur mh mh past cone past cone order events mss past cones events occuring cell 
mobile hosts mh mh cell respectively 
vector clock component cell mss cell erroneously interpret past cone event occurring mh union past cones events occurred mhs cell observed mss far 
example event corresponds recv example described corresponds send 
observed mss mss erroneously interprets past cone way determine events occurred concurrently cell 
alternative dependency representations shown section vector clock components number msss insufficient capture causal dependencies mhs 
presence mss cell message sends receives mhs cell indicates vector clock size total number nodes necessary capture causal dependencies 
msss act proxies mhs cells augment integer vector capture dependency information mhs causal dependencies system accurately represented 
difference union past cones latest events mhs cell past cone latest event particular mh cell indicates set events occurred cell causal past example component vector clock mss erroneously interprets past cone union past cones mutually concurrent events 
mss observes event actual past cone unified cone minus portion past cone past cone 
portion past cone corresponds set event dependency creating events sends receives cell sequenced order observed mss corresponds events sequence causal predecessors event events excluded sequence henceforth referred gaps dependency sequence cell respect event event belongs gap dependency sequence cell respect event means represent dependency gaps cells respect particular event capture events entire system causal past 
different approaches representing causal predecessors event follows 
sufficient dependency information sent message mh set causal predecessors constructed quickly entirely information available mss cell 

small amount dependency information sent message 
set causal predecessors event constructed dependency information available locally set pointers information set construction 
approaches tradeoffs 
approach imposes higher communication overheads 
time construct set causal predecessors event small 
second approach low communication overheads 
takes longer construct set causal predecessors event 
choice approaches influenced frequency sets causal predecessors need constructed available communication bandwidth 
sections dependency tracking schemes approaches described 
dependency sequence approach mss cell acts proxy mhs cell regard maintaining dependency information 
dependency causing events message sends receives cell observed corresponding mss assigned sequence numbers monotonically increasing fashion 
initially sequence counter set 
successive dependency causing events observed mss sequence number assigned greater sequence number assigned causal predecessors event represented set dependency sequences 
dependency sequence set corresponds cell system consists sequence non negative integers 
pairs integers represent contiguous sequences dependency causing events cell causal predecessors internal events mobile hosts create causal dependencies considered 
cardinality set equal number cells system 
initially sequence set empty 
upper bound length sequence 
length sequence integers sequence arranged non descending order 
integer dependency sequence respect cell denotes dependency causing event observed cell mss past cone dependency causing events cell sequence numbers greater equal integer equal second integer sequence past cone dependency causing events cell sequence numbers greater second integer third integer past cone constitute dependency gap 
similarly dependency causing events sequence numbers third fourth integers sequence past cone 
mh dependency sequences event significance dependency sequences illustrated help 
message send receive events gamma gamma gamma gamma cell represented rectangular blocks causal predecessors event occurring mobile host shown 
events cell causal predecessors correspond gaps sequence 
similarly rectangular blocks time lines cells represent causal predecessors dependency sequences cell system shown 
management dependency sequences mobile service station cell denoted mss maintains dependency sequences mhs cell 
set dependency sequences mh denoted ds ds components number cells system component cell 
th component corresponding cell denoted ds 
mss maintains integer counter keep track message send receive events observed computation 
ds initialized empty sequence gamma counter initialized 
functions assumed defined sequences integers ds returns integer sequence ds 
concatenate seq seq appends seq seq seq seq sequences integers returns resultant sequence 
mh resident cell send message mh message sent wireless channel mss mss action receiving message mh counter counter ds counter gamma ds counter ds concatenate ds send message ds wireline network mh service station mss mss action receiving message ds sent mh mh counter counter ds counter gamma ds counter ds concatenate ds ds merge ds ds merge function works follows dependency sequences seq fs gamma seq fr gamma corresponding cell 
sequences represent different subsets dependency causing events cell observed mss 
function merge seq seq returns subset dependency causing events cell correspond seq seq 
detailed description merge appendix 
seq seq cell mobile computing system 
seq represent dependency sequences mobile host mh time sends message mobile host mh seq represent dependency sequences mh receives invokes merge 
merge seq seq returns dependency sequences mh received equal 
set seq indicates dependency causing events gamma gamma cell past cone mh message send 
similarly set seq indicates dependency causing events gamma gamma gamma cell past cone mh arrives 
delivery mh past cone contains dependency causing events gamma gamma gamma dependency causing events gamma gamma gamma correctness proof lemma dependency sequences mobile host account events mobile computing system causal predecessors current state mobile host 
proof proof induction 
base case initially events taken place nodes system 
causal predecessors initial state mobile host dependency sequences empty 
induction step set dependency sequences mobile host mh prior message send reception account causal predecessors mh state time 
proved dependency sequences mh continue account causal predecessors state message send receive 
possible cases 
message send set causal predecessors mh current state defined earlier contains current state mh message send counter incremented mobile service station mss point time counter reflects number message sends receives observed mss computation 
message send event identified current value counter added ds 
updated set causal predecessors mh current state set causal predecessors state prior sending message plus message send event 

message receive mss receive message meant mh sent mh mobile service station mss prior message reception ds accounts causal predecessors mh current state 
time message sent mss ds reflected causal predecessors mh state including message send event 
reception message mss updates ds follows ffl updated value counter added ds account message receive event ffl cell system dependency sequence ds ds obtained received message merged stored new ds 
merge operation takes union sets events cell causal predecessors mh state prior receiving message mh state time sending message 
message reception causal predecessors mh state causal predecessors mh current state 
handling handoffs mobile host mh moves cell cell responsibility maintaining causal dependencies shifts mss mss handled follows 
handoff mh registers mss mss part registration process dependency sequences mh ds transferred wireline network mss mss result mss complete information causal predecessors mh current state 
point mh needs send message communicates message mss forwards destination 
node system wishes send message mh message routed mss receiving message mss uses accompanying dependency sequences update ds forwards message mh wireless channel 
handoffs straightforward handle 
dependency sequences transferred relatively high bandwidth wireline network 
low data rate wireless channels burdened handoff traffic 
fluctuations number mobile hosts system impact maintenance dependency sequences number sequences depends solely number msss safely assumed remain fixed 
storage overheads storage overheads mobile host theta number cells system length longest dependency sequence mh 
typically small fraction total number nodes system 
mh dependency sequences integers 
heavy message traffic mhs long contiguous sequences events cells causal predecessors mh current state ii gaps dependency sequence 
total number integers sequence small small 
communication application confined just cells dependency sequences corresponding cells empty 
storage overheads low 
length dependency sequences bounded periodic global checkpointing 
length dependency sequences grows certain threshold global checkpoint system taken 
global checkpoint records causal dependencies generated far dependency sequences reset empty sequences computation proceed 
threshold dependency sequence length parameter algorithm chosen theta asymptotically storage communication overhead vector clocks 
dependency sequence approach lower overhead vector clocks 
global checkpointing added advantage utilized recovery failures major concern large mobile computing systems nodes operate hostile conditions 
dependency sequences mh stored memory mss serves mh current cell 
mss memory larger memory individual mhs 
total number mhs system fluctuations number time impact maintenance dependency sequences 
vector clocks require total number nodes system remain fixed 
hierarchical clock approach process abstraction mobile computing system cells modeled system processes cell process partially ordered set events 
events process correspond union events mobile hosts cell 
relative order message send receive events mobile hosts process time line order observed cell mss 
message send receive events different mhs cell may causally independent 
situation occur process abstracts behavior entire cell mutually concurrent 
example cell system mhs msss shown abstracted process system shown 
horizontal dotted lines represent abstracted processes 
solid directed lines indicate causal dependencies 
dependency event corresponding send message mh mh event corresponding reception message mh mh 
occur abstracted process causal dependency 
similarly causal dependency events abstraction cell behavior process partial ordering events described deviation standard definition process events totally ordered 
lamport happened relation 
completely capture causal dependency relation 
new relation defined arbitrary set events follows process process mh mh mss mss mh mh cell cell process abstraction hierarchical clocks 

events occur abstracted process cell causal dependency 
send event message abstracted process cell corresponding receive event abstracted process 

directed lines representing relation label letter representing relation labeled letter transitive closure dependencies represents relation process system shown 
order message send receive events observed cell mss represents potentially possible order message sends receives cell 
described earlier message send receive events events create causal dependencies consider internal events mhs process abstraction 
process abstraction relation alternative dependency sequences representing past cones events 
clock description process abstraction described event abstracted process assigned hierarchical clock value capture relation events 
hierarchical clock oe maintained msss components 
oe local clock representing relation 
variable length bit vector bit event occurred process far 
event message send message receive observed abstracted process assigned unique sequence number monotonically increasing fashion 
th th events abstracted process respectively 
oe bits long th bit set 
oe generated bit wise oring oe vectors events local event process causally precedes corresponding bit set oe 

oe global clock representing relation 
integer vector components abstracted process cell system 
oe th component event global clock identifies event process causally precedes message send event mss sending cell takes action update hierarchical clock corresponding abstracted process oe set maximum th components oe set oe sent message vector timestamp 
message receive event mss receiving cell takes action oe set maximum th components th component vector timestamp carried message 
oe set message sent msss needs carry global clock component oe oe oe values generate bit matrix oe representing events entire system causally precede th row bit matrix equal oe 
th row bit matrix denotes events abstracted process cell causally precede events union events process past cone local events local events events occur cell causally precede events process past cone latest events abstracted processes cells causally precede th row represented oe evaluated recurrence relation oe oe oe oe oe component bit wise th rows bit matrices latest events processes causally precede second component bit wise th rows bit matrices local events dependency chain traversed generate bit matrix 
similar dependency generating method proposed fowler zwaenepoel 
handling handoff mobile host mh moves cell handoff process executed 
mh mss sending message mss carries information mss new mobile service station 
receiving message mss sends registration message mss wireline network 
registration message carries current value oe mss response registration message arrival event actions taken mss 
oe updated reflect occurrence 
oe computed component wise maximum oe mss arrival registration message oe received registration message 
dependency sequence approach fluctuations number mhs impact hierarchical clock approach reason causal dependencies due communication abstracted cell level mh level number cells remains fixed 
overheads integer vector components bit vector associated dependency causing event 
length bit vector equal number dependency causing events occurred abstracted process cell 
described earlier context dependency sequences length bit vector bounded periodically global checkpoints resetting bit vector size zero 
hierarchical clocks impose low communication overheads 
message communicated msss high data rate wireline network carry vector integers 
smaller total number nodes system results significant bandwidth savings compared vector clock approach message carry integer vector 
comparison alternatives dependency sequences hierarchical clocks alternatives vector clocks representing causal dependencies mobile computing environment 
approaches depend msss maintain clocks immune fluctuations number mobile hosts system 
handoffs easily handled cases 
amount dependency information sent message wireline network dependency sequence approach large especially large number dependency gaps message send event 
hierarchical clock approach hand message needs carry vector integers 
hierarchical clock approach recurrence relation stated section evaluated determine systemwide causal predecessors event 
time consuming dependency chains traversed 
dependency sequence approach set dependency sequences indicates system wide set causal predecessors event 
tradeoff approaches dependency sequences approach high communication overheads incurs extra effort time delay determine past cone event 
hierarchical clock approach low communication overheads determination past cone event takes time 
vector clocks capture causal dependencies mobile computing systems feasible reasons 
size vector may large large number mobile hosts participating distributed computation 
second number participating mobile hosts change time vector clocks require number nodes remain fixed 
need efficient representation causal dependencies 
proposed alternatives vector clocks set dependency sequences hierarchical clocks 
dependency sequences contain complete information causal predecessors event high communication overheads 
hierarchical clocks low communication overheads determination causal predecessors event requires traversal dependency chains may time consuming 
communication overheads dependency sequence approach low high low volume communication nodes system 
case gaps long dependency sequences 
case dependency sequences 
actual overheads depend communication pattern 
high communication activity cell bit vector hierarchical clocks may long 
communication overheads approaches kept practical limits global snapshots system regular intervals resetting dependency sequence bit vectors empty set vector length zero respectively 
communication overheads approaches vector clock approach message carry vector integers total number nodes fixed mobile 
computation overheads approaches low 
dependency sequence approach expensive operation merge pairs integer sequences time complexity order lengths sequences 
hierarchical approach clock updates require bit wise operations update oe integer comparisons update oe badrinath acharya imielinski 
structuring distributed algorithms mobile hosts 
proceedings th international conference distributed computing systems june 

timestamps message passing systems preserve partial ordering 
proceedings th australian computer science conference pages february 
fowler zwaenepoel 
causal distributed breakpoints 
proceedings th international conference distributed computing systems pages 
ieee 
imielinski badrinath 
mobile wireless computing 
communications acm 
lamport 
time clocks ordering events distributed system 
communications acm july 
mattern :10.1.1.47.7435
virtual time global states distributed systems 
cosnard editor proceedings workshop parallel distributed algorithm pages 
elsevier science publishers north holland 
raynal singhal 
logical time capturing causality distributed systems 
ieee computer pages february 
appendix function merge defined follows merge seq seq int sequence integers fg seq seq gamma fs gamma fr fs fr gamma fs gamma fr concatenate fr concatenate fs compact return compact defined follows sequence integers form delete sequence 
function merge requires sequences seq seq traversed 
length sequence produced result equal sum lengths seq seq 
resultant sequence scanned compact operation 
computational complexity merge seq seq function seq seq 

