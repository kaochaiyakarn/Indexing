modelling cooperative behaviour resource access compositional multi agent environment frances brazier pascal van eck jan treur artificial intelligence group department mathematics computer science vrije universiteit amsterdam de boelelaan nl hv amsterdam netherlands email frances treur cs vu nl tel fax modelling formally specifying agent knowledge required deal limited access resources multi agent situation focus 
static elements involved dynamic element behaviour system explicitly modelled specified 
shown results flexible compositional specification applicable real world domains 
desire formal framework design specification compositional architectures employed purpose 
task model arbitrary participating competitive agent model interaction agents formal specifications comparison knowledge approach approaches 
modelling interaction autonomous agents requires insight types knowledge cooperation strategies agents employ 
formally specify interaction agents framework required interaction agents explicitly modelled 
desire lpt ab tw formal framework design specification compositional architectures tools prototype implementation generation successfully design specify single agent systems interaction users explicitly specified bt bpt 
framework extended formally model specify multi agent systems illustrated real life situation cooperative agents 
aim show compositional knowledge approach specifying static dynamic aspects multi agent systems results flexible specification 
particular done analysing modelling specifying competitive interaction agents single framework 
advantages approach apparent reflective nature specification enables easy adaptation strategies assumptions regarding instance communication explicitly modelled 
generic agent model reused extended current 
competitive interaction describe approach focuses interaction required acquisition limited resource 
section example domain interaction required 
desire framework framework supports compositional approach declarative multi agent system specification introduced section 
task model arbitrary participating agent section description additional knowledge tasks agents require able perform basic task acquiring resource 
section shows limited resource acquisition formally modelled specified desire illustrated example section 
non knowledge approach type interaction algorithms mutual exclusion see example ra domain operating systems 
algorithms correspond principle specific implementation interaction described additional assumptions define fixed protocol 
assumptions included discussion section 
section includes comparison desire framework formal specification frameworks object concurrent metatem fw 
discussion research section 
task description common phenomenon real life situations phenomenon limited availability resources 
resources tangible books libraries seats aircraft frequencies transmission articles produced manufacturers time space resources restrictions placed 
model situations limited access resources plays role resources participants importance 
participants general different goals needs ambitions vary respect degree willing acknowledge participants needs act 
degree participants willing cooperate depends situation placed 
everyday practice situations solved participants class participants library librarian decides sequence requests granted airlines decide categories clients served central coordinating participants strive collective user satisfaction try achieve satisfaction possible measure users possible see br 
situations participants come mutual agreement designation resources 
allocation space important aspects complex design example 
robot coordination example 
example illustrate agent cooperation type formally modelled specified desire related human resource allocation 
companies open applications considered months 
applicants informed organisation positions offers 
applicants opportunity acquire information relevant positions indicate positions interested 
opposite holds heads departments managers 
acquire information candidates decide interested offering position 
ideal situation candidates choices mutually exclusive match preferences managers 
frequently case 
managers negotiate limited resources applicants allocated 
process predictable managers come agreement basis information available 
individual manager interests play role interests organisation 
career perspectives qualified promising candidates may considered importance allocating position candidates strong local need specific department 
factors long position open qualified applicant applicant perceived fit particular group play role 
organisation managers departments assigned equal rights rights 
practice means managers rights applicant 
managers differ interpretation factors involved vary degree willing cooperate managers 
situations manager clearly right applicant general acknowledged 
manager wait approval potentially interested managers offering applicant position minimise chance applicant receives conflicting offers 
situations managers equal rights objective criteria examined managers characters may decisive factor 
assertive manager may convincing assertive manager case assertive manager may effective 
assertive manager need approval potentially interested managers offering applicant position 
interested managers equally convincing deadlock situation occurs 
situations personnel manager decides department granted right offer applicant position 
framework modelling formally specifying compositional systems desire compositional framework complex reasoning systems modelled specified 
support design process implementation generators developed number platforms 
declarative nature framework dictates explicit specification global control domain task independent local control 
reflective reasoning essential element complex reasoning processes explicitly modelled specified metalevel architectures see example bt 
framework lpt incomplete models tasks devised interaction experts existing generic task models structure knowledge acquisition process 
result shared task model extended extra detail required define complete formal specification compositional system 
interaction experts knowledge sub tasks relation sub tasks delegation tasks participating agents acquired nature knowledge domain determined 
result different types knowledge acquired knowledge task decomposition knowledge information exchanged sub tasks knowledge sequencing sub tasks knowledge sub task delegation knowledge knowledge structures involved 
types knowledge correspond directly elements task models desire framework 
task models define structure compositional architectures components compositional architecture directly related sub tasks defined task decomposition 
hierarchical structures tasks interaction knowledge fully preserved compositional architectures 
roles types knowledge play compositional architectures discussed 
task decomposition knowledge task decomposition includes knowledge task hierarchy information task requires input information produced result task execution output 
task hierarchy composed primitive tasks distinguished composed tasks tasks subtasks distinguished primitive tasks lowest level tasks distinguished 
stated tasks directly related components composed tasks specified composed components primitive tasks primitive components 
composed components input output subtasks information exchange subtasks information links task control knowledge domain knowledge structures specified 
primitive components task control knowledge minimal subtasks non existent exchange subtasks 
domain knowledge extensive 
primitive component contains knowledge required perform task knowledge base neural network algorithm database task defined contents 
specification input output component predicate logic hierarchically ordered sort structure signatures defined levelled input signature levelled output signature optional levelled internal signature 
levelled signatures required define role information plays sub tasks different meta levels distinguished 
level situation lowest level considered object level information second level meta level information containing information object level information reasoning processes example atoms values unknown 
tasks information meta level information required levels possible 
information exchange tasks information exchange tasks specified information links components 
information link relates output component input 
individual information link specifies truth value specific output atom identified truth value specific input atom 
allows terms renamed values redefined component specified language independent components 
conditions information links activated explicitly specified task control information 
sequencing tasks task sequencing explicitly modelled components task control knowledge 
task control knowledge includes knowledge subtasks activated knowledge goals associated task activation amount effort afforded achieve goal extent 
aspects specified sub component link activation sets targets requests exhaustiveness effort define component goals 
subcomponents principle regarded black boxes task control encompassing component task control purely information success failure component activation 
activation component considered successful example respect target sets reached goals specified target set specifications number goals reached effort afforded 
delegation tasks knowledge acquisition task modelled 
course modelling process decisions sub tasks best performed example sub tasks best delegated automated systems human experts 
situations task delegation purely related automated systems system appropriate sub tasks 
process results delegation sub tasks parties involved task execution 
knowledge structures knowledge acquisition consensus reached way domain knowledge expressed 
meaning concepts describe domain relations concepts groups concepts determined 
concepts required identify objects distinguished domain express methods strategies employed perform task 
relations concepts defined hierarchies rules 
specification document relevant knowledge structures specified suffice 
structure multi agent system specifications decisions taken respect task delegation see section determine domain related tasks agent perform 
tasks tasks specific particular agent delegated called agent specific tasks 
tasks ones agent manage communication cooperation 
compositional task oriented nature desire framework applied generic agent tasks interrelationships relationships agent specific tasks specific knowledge involved 
current section generic agent tasks distinguished described detail leading generic top level decomposition individual agent 
anatomy desire multiagent system specification revealed 
defines agent architecture task model limited resource access built 
generic agent tasks enforce characteristics required weak notion agency described wj 
accordance notion agents maintain interaction environment observing performing actions world reactivity able take initiative pro activeness able perform social actions communication cooperation social ability operate direct intervention possibly human agents autonomy 
compositional framework tasks principle mapped different component 
approach top level decomposition depicted fig 
derived distinguishes subtasks addition global agent task control process control agent specific tasks world state analysis cooperation determination world interaction management agent interaction management 

process control 
world interaction management 
world state analysis 
agent interaction management 
global agent task control cooperation management 
agent specific tasks 
top level decomposition agent 
remarks correspondence characteristics described follows 
interaction environment performed world state analysis world interaction management 
social actions managed components agent interaction management cooperation management 
performing tasks coordinated component process control virtue agent autonomy able take initiative agent specific tasks require 
problem domains subcomponents decomposed illustrated section 
task models differ relative importance contents subcomponents 
subtasks distinguished guide agent knowledge acquisition tasks determine various types agent specific knowledge required addition knowledge specific tasks agent delegated 
includes knowledge agent priorities respect process control task coordination knowledge information exchanged agents external world knowledge information received external world agents analysed knowledge cooperative agent situations relation agents 
dcl approaches agentbased knowledge acquisition 
agent architecture depicted fig 
considerations regarding properties agent described appeared natural modelling real world situations 
instance architecture model agents performing process control task minor shift relative importance subtasks 
desire agents modelled composed components equipped information links inter agent information exchange 
agents activated simultaneously run concurrently 
task control system consisting multiple agents minimal restricted agent external world link initiation 
components agents internal task control activate asynchronous information exchange agents activate suspend internal subcomponents 
example described section managers viewed agents 
manager tasks acquire new personnel 
subtasks acquiring new personnel acquire exclusive access potential candidates applicants example described 
purpose information subtasks distinguished fig 
required 
task managing cooperation agents example guided reflective knowledge various types cooperation 
agent example knows general willing cooperate agents 
specific situations may exist unwilling cooperate 
notoriously uncooperative manager interested particular applicant uncooperative manager equal rights applicant agent may decide uncooperative persist claiming applicant question 
operation determination component responsible decisions 
task model limited resource access formal specification section agent architecture introduced section refined support design multi agent system models access limited resources multiple agents 
types knowledge described section illustrated domain described section 
refinement generic architecture involves specialisation decomposing component specific subcomponents instantiation defining domain specific instances signatures knowledge 
purpose illustration task decomposition knowledge structures described followed information exchange task control task delegation 
task decomposition knowledge structures fig 
task hierarchy example depicted 
top level components described knowledge structures involved input atoms output atoms knowledge bases 
world state analysis task world state analysis subcomponents distinguished update cur rent world state determine access determine priority 
subtasks modelled specified subcomponents described 
agent proces control world state analysis world interaction management agent interaction management cooperation management agent specific tasks update current world state determine access determine priority obtain resource task hierarchy specialised task model 
component update current world state update current world state component stores information agent world state 
information acquired observation world communication agents defeasible reasoning 
input output atoms agent agents irrelevant agents wants resource agents leave resource agents self component determine access determine access component receives input facts world obtained observations communications default closed world assumptions 
uses inputs priorities agents component determination priority information agents component cooperation management 
component analyses world state matter reached draws access resource agent allowed access resource 
input atoms agent agents received update current world state irrelevant agents received update current world state wants resource agents received update current world state leave resource agents self received update current world state priority agents agents received determine priority cooperative agents received cooperation management output atoms access allowed obtain resource leave resource self agents cooperation management knowledge base knowledge rules knowledge base determine access specify condition access resource granted 
rules shown determine conflict sense agent agent interested accessing resource 
note knowledge specified knowledge base refer directly application domain described section 
generic sense principle domains limited access resources plays role 
agent irrelevant relevant relevant wants resource wants resource self conflicting needs self situations conditions agent block access resource agent known conflicting needs self priority self access blocked consequence agent blocking resource agent access resource leave resource expressed rule access blocked access allowed leave resource self agent self knows agent cooperative agent agent self know agent self may access resource agent self assumed allowed access resource 
rule discussed detail description component 
conflicting needs self cooperative leave resource self access allowed priority determined agent self agent 
case determine access component concludes derive access allowed defers decision cooperation management component 
conflicting needs self priority self priority self access decision situations known allowed access resources assumption drawn access allowed employing closed world assumption cwa 
cwa modelled explicit meta knowledge separate meta component false access allowed assume access allowed positive closed world assumption assumption relevant agents observed agent overlooked cwa leads incorrect 
closed world assumption basis communication 
closed world assumption assumes information received cooperative colleague respect resource allocation agent safe assume resource available 
true leave resource self assume leave resource self negative drawn cwa may incorrect communication problems occur 
component determine priority task component determine priority determine agents may access resource conflict detected evaluating world state 
stated knowledge component domainspecific 
instantiation determine priority contains knowledge outlined section 
important note instantiation component able derive may circumstances priority assigned 
words knowledge base component complete 
output atoms priority agents determine access knowledge base manager rights low manager rights high priority due manager rights position open time short manager position open time long manager priority due position open time suitable low manager suitable high manager priority due suitability priority due suitability priority priority due suitability priority due position open time priority priority due suitability priority due position open time priority due manager rights priority priority priority agent specific tasks relevant subtask agent limited access resources modelled example subtask obtain resource 
task characterised specific agent self specifications related components 
subtasks agent specific tasks responsible determining access specific resource required 
subtasks specified 
component obtain resource knowledge base obtain resource specifies knowledge required propose new actions basis input 
input atoms action performed communicate need received observation action performed observe presence agents received observation action performed take resource received observation access forced received cooperation management known access allowed world state evaluation output atoms proposed action communicate need world interaction management proposed action observe presence agents world interaction management proposed action take resource world interaction management query access allowed world state analysis resource obtained process control internal atoms obtained access allowed knowledge base known access allowed obtained access allowed obtained access allowed action performed communicate need proposed action communicate need obtained access allowed action performed observe presence agents proposed action observe presence agents access allowed action performed take resource proposed action take resource resource obtained access forced proposed action take resource resource obtained cooperation management component cooperation management task cooperation management divided subtasks 
component specifies task cooperation management primitive component 
knowledge base contains facts describing agent knowledge agents willing cooperate agents 
general instances negated instances atom cooperative agents agents 
note truth values atom dynamically observed 
options static facts agent self depicted shy agent bold agent input atoms cooperative obtained observation uncooperative actions past concluded leave resource self access decision output atoms cooperative communicate ok force access knowledge base bold self bold agent modest self modest agent concluded leave resource self cooperative self communicate ok concluded access decision bold self access forced concluded access decision modest self communicate ok cooperative cooperative closed world assumption agent known uncooperative assumed cooperative positive view agenthood meta knowledge false cooperative assume cooperative positive world interaction management subtasks world interaction management performing observations including observation presence relevance agents performing action proposed task obtaining resource 
due space restrictions specifications component designed perform tasks omitted 
specifications component designed similar task domain dt 
agent interaction management agent interaction management component task agent communication agent agents 
due space restrictions specifications related component omitted reader referred sources examples specifications similar tasks domains see example dt 
discussion process control small part specification included 
input atoms communicated wants resource agents agent communication agents ok process control output atom query communication agents ok process control communicate agents ok agent knowledge base communicated wants resource communication ok communicate ok process control role process control determine information needed decide access resource allowed information 
agent task control rules control reasoning process drawn component process control described section task sequencing 
input atoms info needed communicate agents ok agent interaction management info needed resource assigned agent specific tasks determined holding resource signs agent specific task communicate agents ok cooperation management leave resource agents world state analysis agent self world interaction management applicant available world interaction management output atoms resource assigned agent specific tasks communication agents ok agent interaction management query resource obtained target agent specific tasks knowledge base info needed communicate ok determined holding resource pos decided communication ok neg info needed communicate ok determined holding resource neg determined leave resource self decided communication ok pos info needed communicate ok determined holding resource neg determined leave resource self determined communicate ok decided communication ok pos info needed applicant assigned agent self applicant available decided applicant assigned pos info needed applicant assigned agent self applicant available determined leave resource self obtained decided applicant assigned pos information exchange knowledge information exchange tasks specified information links components 
link connecting meta level output information component process control meta level input information component agent specific tasks 
link specifies queries requests information generated process control targets component agent specific task reasoning 
exact combination truth values specified follows domain process control codomain agent specific tasks atom links query resource obtained target dyn targets resource obtained determine task sequencing knowledge sequencing tasks represented task control knowledge explained section 
section sequencing knowledge domain section informal general terms 
example typical task control rule 
examples detailed formal specifications task control domain see ab dt ab 
task sequencing agent strongly influenced component process control determines information needed decide access resource allowed information 
drawn component process control agent task control rules control agent reasoning processes 
process control component activated ways 
component agent interaction management notices agents requests attention example access resource 
situation component agent interaction management notifies component process control fact new information received 
basis new information process control decides activate world state analysis determine truth value leave resource self component cooperation management activated decide resource granted 

performing specific tasks agent determines need information 
component agent specific tasks expresses need process control decides specific information needed 
process control recognises need access limited resource activates component world state analysis determine access allowed truth value access allowed 
access allowed process control activates obtain resource subtask agent specific tasks 
task sequencing represented task control knowledge follows 
assume link world interaction management world state analysis modelled 
world state analysis component continually awake continually capable receiving new information external components 
world interaction management transfers new information world state analysis component identified 
identification new information modelled identification new values targets information sought defined target set 
activation world interaction management world state analysis link causes component world state analysis start performing task 
example task control statements specified follows start component state world state analysis awake evaluation world interaction management update target set succeeded link state world interaction management world state analysis date comparison approaches approach limited access resources compared number approaches algorithmic approaches approaches general purpose specification languages approaches multi agent programming languages 
section comparison framework algorithmic approach mutual exclusion 
section comparison desire general purpose specification languages 
comparison multi agent programming language section comparison algorithmic approach specification task model compared approaches mutual exclusion problems conventional environments algorithm described agrawala ra 
agrawala algorithm assumes conditions hold agent notices agent presence 
communication fails 
agent complete knowledge priorities agents 
agent higher priority agent agent assumed communicate access resource agent conditions hold task model described specifies process algorithm 
conditions describe strictly defined domain application example domain operating systems 
strictly defined real world domains incompleteness observations defeasible communications incomplete knowledge priorities inconsistencies drawn different agents uncooperative agents common 
modelling practise domains reveals strengths compositional approach 
compositional approach particularly suitable domains reasons virtue reflective structure task model different strategies modelled minimal effort 
assumptions respect instance communication priorities cooperation appear explicitly task model different types knowledge explicitly distinguished 
distinction different types knowledge different types behaviour results flexibility adaptability transparency essential characteristics knowledge approach 
comparison general purpose specification languages object object oriented extension specification language dil syntax describing concurrent processes notions process algebra bk mil hoa 
object specification system agents compete access limited resource behaviour system specified global level formulating general temporal properties behaviour 
syntax desire provide facilities direct formulation properties laws behaviour global level temporal operators provided desire refer previous states 
temporal operators formulate properties system local level specifying dynamic behaviour step step 
see ldi formal specification autonomy notation 
lcm language conceptual modelling wie syntax semantics specify concurrent processes syntax semantics developed bergstra klop acp algebra communicating processes bk 
consequence lcm expressive acp describing behaviour concurrent processes 
lcm communication synchronous fw 
currently lcm executable 
animator lcm specifications constructed 
approach specification agent cooperation lcm object approach 
comparison programming language multi agent systems concurrent metatem concurrent metatem fw specification consists collection agent specifications 
agent specification consists input output interface definition set rules 
truth values atoms agent output buffer asynchronously appear input buffers agents corresponding atoms input interface 
set rules specifies atoms modified state state depending truth values agent recorded past state 
language rules temporal logic 
concurrent metatem specification impossible directly express behaviour system agents way refer agents 
associated concurrent metatem proof system language rules augmented agent identifiers belief operators 
logic defining behaviour stating properties specification proving specification certain behaviour represented properties 
way directly declare cooperative behaviour object way cooperative behaviour obtained explicitly specified concurrent metatem desire 
concurrent metatem support specification compositional agent architectures means specifying meta knowledge 
concurrent metatem specification interaction agents required model limited access resource clearly differ desire specification 
additional differences desire concurrent metatem observations actions knowledge explicit concurrent metatem concurrent metatem supports richer predefined language model past events 
discussion research compositional approach design specification interaction competitive agents limited access resource required 
modelling specific types knowledge involved behaviour agents relation results transparent compositional architecture formal specifications 
example specific domain cooperation discussed resource access granted basis priorities decision taken basis dynamically observed agents 
modularity architecture static dynamic behaviour explicitly specified allows flexible adaptability strategies 
full justice specifications prototype implementation ideally run distributed environment 
moment prototype generator able generate sequential prototypes 
near full implementation generator developed purpose amoeba distributed operating system mrt 
current research focuses development semantics framework gt hierarchical decomposition taken account verification validation tw tw formal specification beliefs desires intentions commitments multi agent environments 
detailed comparisons specification languages uncover intrinsic differences specification style semantics 
research partly supported esprit iii basic research project drums ii defeasible reasoning uncertainty management systems 
authors grateful jonker read earlier version 
brazier dunin keplicz jennings treur formal specification multi agent systems real world case 
lesser 
ed 
proc 
st international conference multi agent systems icmas 
pp 

aaai press menlo park 
brazier dunin keplicz jennings treur modelling distributed industrial processes multi agent framework 
greg hare eds intelligent organisation coordination perspective springer verlag 
bk bergstra klop algebra communicating processes abstraction 
theoretical computer science vol 
pp 

bpt treur compositional knowledge architecture modelling process aspects design tasks 
proc 
th international conference artificial intelligence expert systems natural language avignon vol 
pp 

br brazier zs 
modelling collective user satisfaction 
proc 
hci international elsevier amsterdam pp 

bt brazier treur user centered knowledge system design formal modelling approach 
steels schreiber van de velde eds knowledge acquisition proc 
th european knowledge acquisition workshop ekaw springer verlag lecture notes artificial intelligence vol 
pp 

bt brazier treur formal specification reflective agents 
reflection meta level architecture applications ai 
working notes ijcai workshop pp 

brazier treur wijngaards willems temporal semantics specification complex tasks 
tan 
eds 
proc 
th dutch conference artificial intelligence 
pp 

extended version report ir vrije universiteit amsterdam dept math 
computer science 
brazier treur wijngaards willems formal specification hierarchically de composed tasks 
gaines musen 
eds proc 
th banff knowledge acquisition knowledge systems workshop university calgary 
dcl dieng corby agent knowledge acquisition 
steels schreiber van de velde 
eds 
knowledge acquisition 
proc 
th european knowledge acquisition workshop ekaw 
vol 
lecture notes artificial intelligence pp 
springer verlag 
dil formal methods wiley 
duke king rose smith object specification language technical report tr university queensland 
dt dunin keplicz treur compositional formal specification multi agent systems 
wooldridge jennings 
eds 
intelligent agents 
lecture notes artificial intelligence vol 
springer verlag pp 

dt dunin keplicz treur modelling reasoning acting agents 
gaines musen eds proc 
th banff knowledge acquisition knowledge systems workshop kaw university calgary pp 

engelfriet treur temporal theories reasoning 
pearce pereira 
eds logics artificial intelligence 
proc 
th european workshop logics artificial intelligence jelia 
vol 
lecture notes artificial intelligence pp 
springerverlag 
appear journal applied non classical logics special issue selected papers jelia 
fw wieringa lcm syntax definition report ir vrije universiteit amsterdam 
fw fisher wooldridge specifying verifying distributed intelligent systems 
progress artificial intelligence 
proc 
vol 
lecture notes artificial intelligence pp 
springer verlag 
gt gavrila treur formal model dynamics compositional reasoning systems 
cohn ed proc 
th european conference artificial intelligence ecai wiley sons pp 

hoa hoare communicating sequential processes 
prentice hall 
ldi luck inverno formal framework agency autonomy 
lesser 
ed 
proc 
st international conference multi agent systems icmas 
pp 

aaai press menlo park 
lpt van treur formal specification compositional architectures 
neumann ed proc 
th european conference artificial intelligence ecai john wiley sons chichester pp 

extended version report ir vrije universiteit amsterdam department mathematics computer science 
mil milner calculus communicating systems 
lecture notes computer science vol 
springer verlag 
mrt mullender rossum van tanenbaum renesse van staveren van 
amoeba distributed operating system 
ieee computer vol 
pp 
may 
ra agrawala optimal algorithm mutual exclusion computer networks 
comm 
acm vol 
pp 
jan 
tw treur th 
eds formal specification complex reasoning systems ellis horwood 
tw treur willems logical foundation verification 
cohn 
ed 
proc 
th european conf 
ai ecai 
pp 
john wiley sons chichester 
tw treur willems formal notions verification dynamics knowledge systems 
rousset 
eds 
proc 
european symp 
validation verification knowledge systems 
pp 

lia 
wie wieringa lcm specification control system dynamic logic process algebra 
lewerentz lindner formal development reactive systems case study production cell lecture notes computer science vol 
pp 
springer verlag 
wj wooldridge jennings agent theories architectures languages survey 
wooldridge jennings 
eds 
intelligent agents 
lecture notes artificial intelligence vol 
pp 
springer verlag 
