new search heuristics max csp 
department information computer science university california irvine ca ics uci edu 
evaluates power new scheme generates search heuristics mechanically 
approach evaluated context optimization belief networks 
extend max csp 
approach involves extracting heuristics parameterized approximation scheme called elimination allows controlled trade computation accuracy 
heuristics guide branch bound best search performance compared number constraint problems 
results demonstrate search schemes exploit heuristics effectively permitting controlled trade preprocessing heuristic generation search 
algorithms compared state art complete algorithm stochastic local search anytime approach demonstrating superiority problem cases 
general scheme mechanically generating search heuristics solving combinatorial optimization problems branch bound best search 
heuristic generation scheme mini bucket technique class parameterized approximation algorithms optimization tasks bucket elimination framework 
approximation uses controlling parameter allows adjustable levels accuracy efficiency 
analyzed deterministic probabilistic tasks finding probable explanation mpe belief updating finding maximum posteriori hypothesis 
encouraging empirical results reported variety classes optimization domains including medical diagnosis networks coding problems 
evident error bound produced algorithms cases approximation seriously suboptimal highest feasible accuracy level 
cases augmenting mini bucket approximation search cost effective 
demonstrated mini bucket scheme extended mechanically generating heuristic search algorithms solve optimization tasks task finding probable explanation bayesian supported nsf iis rockwell micro 
network 
showed functions produced mini bucket method serve heuristic evaluation functions search 
heuristics provide upper bound cost best extension partial assignment 
mini bucket accuracy controlled bounding parameter allows heuristics having varying degrees accuracy results spectrum search algorithms trade heuristic computation search controlled input parameter 
extend approach max csp optimization version constraint satisfaction 
finding assignment satisfies constraints max csp solution satisfies maximum number constraints 
mini bucket approximation generate heuristic function computes lower bound minimum number constraints violated best extension partial assignment 
evaluate power generated heuristic branch bound best search variety randomly generated constraint problems 
specifically evaluate best algorithm mini bucket heuristics bfmb branch algorithm mini bucket heuristics bbmb compared empirically full bucket elimination mini bucket approximation randomly generated constraint satisfaction problems solving max csp problem 
compare algorithms state art algorithms pfc variant stochastic local search 
show bbmb bfmb exploit heuristics strength similar manner problem classes optimal trade point heuristic generation search lies intermediate range heuristics strength 
problems larger harder optimal point gradually increases computationally demanding heuristics 
show bbmb bfmb outperform sls pfc mrdac problems sls pfc mrdac better 
results branch bound clearly dominates best search 
section provides preliminaries background mini bucket algorithms 
section describes main idea heuristic function generation built top mini bucket algorithm proves properties embeds heuristic best branch bound search 
sections empirical evaluations section provides 
background notation definitions constraint satisfaction framework formulating real world problems set constraints variables 
graphically represented nodes corresponding variables edges corresponding constraints variables 
definition graph concepts 
undirected graph pair fv fx xng set variables jx set edges 
degree variable number edges incident 
definition constraint satisfaction problem csp 
constraint satisfaction problem csp defined set variables fx xng associated set discrete valued domains fd set constraints fc cmg 
constraint pair relation theta theta ik defined subset variables fx ik called scope consisting tuples values fx ik compatible 
max csp problem express relation cost function ik ik ik 
constraint network represented constraint graph contains node variable arc nodes iff corresponding variables participate constraint 
solution assignment values variables xn constraint satisfied 
problem solution termed satisfiable consistent 
binary csp constraint involves variables 
real world problems constrained don solution 
cases desirable find assignment satisfies maximum number constraints 
definition max csp 
csp max csp task find assignment satisfies constraints 
max csp problem defined maximization problem implemented minimization problem 
maximizing number constraints satisfied minimize number constraints violated 
definition induced width 
ordered graph pair undirected graph xn ordering nodes 
width node ordered graph number earlier neighbors 
width ordering maximum width nodes 
induced width ordered graph width induced ordered graph obtained processing nodes recursively node processed earlier neighbors connected 
example 
graph coloring problem typical example csp problem 
defined set nodes arcs nodes 
task assign color node adjacent nodes different colors 
example constraint graph graph coloring problem containing variables variable having values colors 
fact adjacent variables different colors represented inequality constraint 
problem inconsistent 
formulated problem solution satisfies constraint 
ordering graph width induced width ordered graph 
width induced width fig 

constraint graph graph coloring problem ordered graph bucket mini bucket elimination algorithms bucket elimination unifying algorithmic framework dynamic programming algorithms applicable probabilistic deterministic reasoning 
adaptation solving max csp problem 
input bucket elimination algorithm consists collection functions relations clauses propositional satisfiability constraints conditional probability matrices belief networks 
variable ordering algorithm partitions functions buckets associated single variable 
function placed bucket argument appears latest ordering 
algorithm phases 
top phase processes bucket variable 
bucket processed variable elimination procedure computes new function placed lower bucket 
max csp procedure computes sum constraint matrices minimizes bucket variable 
second bottom phase algorithm constructs solution assigning value variable ordering consulting functions created top phase details see 
shown theorem 
time space complexity elim max csp applied order exponential induced width network ordered moral graph ordering main drawback bucket elimination algorithms require time especially space storing intermediate functions 
mini bucket elimination approximation scheme designed avoid space time complexity full bucket elimination partitioning large buckets smaller subsets called mini buckets processed independently 
rationale 
functions bucket elim max csp processes bucket computes function mini bucket algorithm creates partitioning fq mini bucket contains functions processes sum minimizing separately 
computes clearly lower bound computed bucket yields lower bound number constraints violated output assignment 
quality lower bound depends degree partitioning mini buckets 
bounding parameter algorithm creates partitioning mini bucket includes variables 
algorithm mb max csp described parameterized bound 
algorithm outputs lower bound max csp value assignment number violated constraints upper bound collection augmented buckets 
comparing lower bound upper bound bound error instance 
algorithm mb max csp input constraint network ordering variables constraint represented function xik xik xik 
output upper bound max csp assignment set ordered augmented buckets 

initialize partition constraints buckets 
scopes constraints 
backward ffl contains instantiation xp xp assign xp xp put appropriate bucket 
ffl generate partitioning fq qrg 
containing generate function add bucket largest index variable gamma 

forward xp gamma choose value xp xp minimizes sum cost functions xp bucket 

output ordered set augmented buckets upper bound lower bound assignment 
fig 

algorithm mb max csp algorithm complexity time space exp bound large mini bucket algorithm coincides full bucket elimination 
summary theorem 
algorithm mb max csp generates lower bound exact max csp value time space complexity exponential example 
illustrates algorithms elim max csp mb process network ordering 
algorithm elim max csp records new functions 
bucket min equals minimum number constraints violated 
subsequently assignment computed variable selecting value minimizes sum functions corresponding bucket conditioned previously assigned values 
hand approximation mb max csp splits bucket mini buckets containing variables generates 
lower bound max csp value computed min 
suboptimal tuple computed similarly max csp tuple assigning value variable minimizes sum functions corresponding bucket 
min bucket bucket bucket bucket bucket max csp complexity exp mini bucket mini buckets max variables lower bound max csp complexity min exp trace elim max csp trace mb max csp fig 

execution elim max csp mb max csp heuristic search mini bucket heuristics heuristic function assume mini bucket algorithm applied constraint network variable ordering xn algorithm outputs ordered set augmented buckets bucket bucket bucket containing input constraints newly generated functions 
relative ordered set augmented buckets convention stands function created processing th mini bucket bucket buckets union functions bucket bucket show functions recorded mini bucket algorithm lower bound number constraints violated best extension partial assignment serve heuristic evaluation functions best branch bound search 
definition exact evaluation function 
variable ordering xn assignment variables number constraints violated best extension denoted defined min xp sum defining divided sums expressed functions ordered augmented buckets 
sum arguments instantiated belong buckets minimization operation applied second product 
denoting buckets min xp buckets xn get search function evaluated partial assignment estimated heuristic function derived functions recorded mini bucket algorithm defined definition 
ordered set augmented buckets generated algorithm heuristic function defined sum functions satisfy properties generated buckets reside buckets bucket theorem mini bucket heuristic 
partial assignment variables evaluation function admissible overestimates number constraints violated best extension monotonic 
notice monotonicity means better accuracy deeper nodes search tree 
extreme case bucket contains exactly mini bucket heuristic function equals full evaluation function computes exact number constraints violated best extension current partial assignment 
search mini bucket heuristics tightness lower bound generated mini bucket approximation depends bound 
larger values generally yield better lower bounds require computation 
mini bucket algorithm parameterized get entire class branch bound search best search algorithms parameterized allow controllable trade preprocessing search heuristic strength overhead 
algorithms bbmb bfmb initialized running mini bucket algorithm produces set ordered augmented buckets 
branchand bound mini bucket heuristics bbmb traverses space partial assignments depth manner instantiating variables ordering search algorithm maintains upper bound value max csp assignment corresponds number constraints violated best full variable instantiation far 
algorithm processes variable variables preceding ordering instantiated compute gamma gamma extension algorithm prunes values heuristic estimate lower bound greater equal current best upper bound partial assignment gamma extended improved full assignment 
algorithm assigns best value variable proceeds variable variable values left backtracks variable gamma search terminates reaches time bound variable values left 
case algorithm optimal solution 
virtue branchand bound requires limited amount memory anytime scheme interrupted branch bound outputs best solution far 
algorithm best mini bucket heuristics bfmb starts adding dummy node list open nodes 
node search space corresponds partial assignment associated heuristic value 
initially 
basic step algorithm consists selecting assignment list open nodes having smallest heuristic value expanding computing partial assignments values adding list open nodes 
shown generated heuristics admissible monotonic best search yields type algorithms properties understood 
algorithm guaranteed terminate optimal solution 
provided powerful heuristics explores smaller search space requires substantial space 
known algorithms optimal 
heuristic information best search efficient algorithm terms size search space explores 
particular branch bound expand node expanded best tie breaking conditions cases explores larger space 
best may occasionally fail memory requirements maintain large subset open nodes search tie breaking rules frontier nodes having evaluation function value equals optimal solution 
observe experiments branch bound best search complementary properties strengthen mini bucket heuristics 
experimental methodology tested performance bbmb bfmb set random binary csps 
problem class characterized parameters number variables domain size number constraints tightness constraint defined number tuples allowed 
problem generated randomly picking constraints gamma delta total possible constraints picking nogoods maximum possible constraint 
min degree heuristic computing ordering variables 
places variable smallest degree ordering connects neighbors removes variable graph repeats procedure 
addition mb bbmb bfmb ran comparison state art algorithms solving max csp pfc defined stochastic local search sls algorithm developed csps 
pfc branch bound search algorithm 
uses forward checking step partitioning unassigned variables disjoint subsets variables 
partitioning computing heuristic evaluation function determining variable value ordering 
measure performance accuracy ratio opt alg fmax value solution test algorithm alg value optimal solution fmax fmax available 
record running time algorithm 
recorded distribution accuracy measure opt predefined ranges opt opt opt opt opt 
report number problems fall range 
problems range solved optimally 
addition execution bbmb bfmb stored current upper bound regular time intervals 
allows reporting accuracy algorithm function time 
results evaluate performance algorithms complete ones 
tables report results experiments classes constrained binary csps domain sizes 
tables contain blocks mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb pfc mrdac bfmb bfmb bfmb bfmb bfmb time time time time time time 
time bound sec 
dense network 

time bound sec 
medium density 

time bound sec 
sparse network 
table 
search completion times problems values 
instances 
corresponding set csps fixed number variables constraints 
block small blocks corresponding different constraint tightness column 
columns tables columns table results mb bbmb bfmb different rows different values bound 
column results pfc mrdac 
entry table gives percentage problems solved exactly time bound fall range average cpu time problems 
example looking second block middle large block table corresponding binary csps see mb column solved problems exactly seconds cpu time 
set problems bbmb mini bucket heuristics solved problems optimally seconds cpu time bfmb solved problems exactly seconds 
moving columns rows corresponding set problems see gradual change caused higher level mini bucket heuristic higher values bound 
expected mini bucket solves problems mb mb mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb bbmb bbmb bfmb bfmb bfmb bfmb bfmb bfmb bfmb mrdac time time time time time time time time 
time bound sec 
dense network 

time bound sec 
medium density 

time bound sec 
sparse network 
table 
search completion times problems values 
instances 
time 
focusing bbmb see solved problems bound total running time function time forms shaped curve 
high bound increases total time decreases total time bound increases total time starts increase 
behavior shown bfmb 
demonstrates trade amount preprocessing performed mb amount subsequent search heuristic cost function generated mb 
optimal balance preprocessing search corresponds value bound bottom shaped curve 
added amount search top mb estimated search total gamma mb increases average search time search decreases accuracy search algorithm increases problems fall higher ranges opt 
increases time mb preprocessing increases 
crucial difference bbmb bfmb bbmb anytime algorithm outputs assignment time increases solution improves 
bfmb hand outputs solution mb mb mb mb mb bbmb bbmb bbmb bbmb bbmb pfc mrdac bfmb bfmb bfmb bfmb bfmb time time time time time time 
time bound sec 
sparse network 

time bound sec 
sparse network 
table 
search completion times problems values 
instances 
finds optimal solution 
experiments bfmb finish preset time bound returned mb assignment 
data tables see performance bfmb consistently worse bbmb 
bfmb solves fewer problems bbmb average takes longer problem 
pronounced non trivial amount search required lower bound values heuristic weaker 
results contrast behavior observed scheme optimization belief networks 
speculate max csp large numbers frontier nodes heuristic value 
tables report results pfc mrdac 
constraint graph dense pfc mrdac times faster best performing bbmb 
constraint graph sparse best bbmb orders magnitude faster pfc mrdac 
superiority approach notable larger problems table 
provide alternative view performance bbmb bfmb 
fraction problems solved completely bbmb bfmb respectively time graph plots values figures display trade preprocessing search clear manner 
clearly bbmb completely dominates bbmb 
example bbmb completely dominates bbmb bbmb bfmb overlap 
intersect display trade function time 
max csp time sec solved exactly bbmb bfmb bbmb bfmb bbmb bfmb max csp time sec bbmb bfmb bbmb bfmb bbmb bfmb fig 

distribution search completion 
example seconds bbmb better bbmb 
sufficient time allowed bbmb superior 
anytime algorithms evaluate anytime performance relevant algorithms sls inherently incomplete guarantee optimal solution bbmb returns suboptimal solution time search 
stochastic local search sls algorithm gsat starts randomly chosen complete instantiation variables moves complete instantiation 
guided cost function number unsatisfied constraints current assignment 
step value variable leads greatest reduction cost function changed 
algorithm stops cost zero global minimum case problem solved way improve current assignment changing just variable local minimum 
number heuristics designed overcome problem local minima 
implementation sls basic greedy scheme combined constraint re weighting introduced 
algorithm constraint weight cost function weighted sum unsatisfied constraints 
algorithm reaches local minimum increases weights unsatisfied constraints 
sls algorithm csps immediately applied max csp problem 
measuring performance sls treat anytime algorithm max csp time sec solved exactly bbmb bbmb bbmb sls max csp time sec solved exactly bbmb bbmb bbmb bbmb sls fig 

distribution anytime performance 
report fraction problems solved exactly time function optimal cost bbmb 
results comparing bbmb sls anytime algorithms 
corresponds row table 
constraint graph dense sls substantially faster bbmb 
constraint graph sparse bbmb bbmb faster sls 
note problem instances ran graph exceeds certain sparseness threshold sls exhibits impressive performance arriving optimal solution seconds 
summary evaluates power new scheme generates search heuristics mechanically solving variety optimization tasks 
approach evaluated optimization queries belief networks 
extend approach max csp task evaluate potential variety randomly generated constraint satisfaction problems 
basic idea extract heuristics search mini bucket approximation method allows controlled trade computation accuracy 
experiments demonstrate potential scheme improving general search showing mini bucket heuristic accuracy controlled yield trade preprocessing search 
demonstrate property context branch bound best search 
best threshold point predicted priori preliminary empirical analysis informative class problems heterogeneous 
show approach competitive state art algorithms solving max csp problem 
particular outperformed complete algorithm developed specifically max csp sparse constraint problems competitive anytime scheme sls algorithm problems sparse 
sls performance impressive classes problems experimented sls approach prove optimality termination time speculative 

dechter 
bucket elimination unifying framework reasoning 
artificial intelligence 

dechter pearl 
generalized best search strategies optimality 
journal acm 

dechter rish 
scheme approximating probabilistic inference 
proceedings uncertainty artificial intelligence uai pages 

gent walsh 
understanding hill climbing procedures sat 
proceedings eleventh national conference artificial intelligence aaai pages 

rish dechter 
approximation algorithms probabilistic decoding 
uncertainty artificial intelligence uai 

dechter 
branch bound mini bucket heuristics 
proc 
ijcai pages 

dechter 
mini bucket heuristics improved search 
proc 
uai 

dechter 
mini bucket heuristics max csp 
uci technical report 

dechter 
gsat local consistency 
international joint conference artificial intelligence ijcai pages montreal canada august 

meseguer 
partition lower bound max csp 
proc 
cp 

morris 
breakout method escaping local minima 
proceedings eleventh national conference artificial intelligence aaai pages 

philips minton johnston 
solving large scale constraint satisfaction scheduling problems heuristic repair methods 
national conference artificial intelligence aaai pages anaheim ca 

selman kautz 
empirical study greedy local search satisfiability testing 
proceedings eleventh national conference artificial intelligence pages 

selman kautz cohen 
noise strategies local search 
proceedings eleventh national conference artificial intelligence pages 

selman levesque mitchell 
new method solving hard satisfiability problems 
national conference artificial intelligence aaai 
