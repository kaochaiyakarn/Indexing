learning sequential decision tasks david moriarty risto miikkulainen department computer sciences university texas austin austin tx moriarty risto cs utexas edu technical report ai january presents new approach called sane learning performing sequential decision tasks 
compared problem general heuristics sane forms effective decision strategies learns utilize domain specific information 
sane evolves neural networks genetic algorithms learn wide range domains minimal reinforcement 
sane evolution algorithm called symbiotic evolution powerful standard genetic algorithms diversity pressures inherent evolution 
sane shown effective sequential decision tasks 
value ordering method constraint satisfaction search sane required backtracks heuristic 
filter minimax search sane formed network capable focusing search away misinformation creating stronger play 
sequential decision tasks barto grefenstette characterized scenario agent observes state dynamic system chooses finite set actions 
system enters new state agent select action 
system may return payoff decision sequence decisions 
objective select sequence actions return highest cumulative payoff 
best strategy maximize individual payoff actions may produce high immediate payoffs may enter states high payoffs impossible 
developing strategies involves assigning credit individual decisions payoff difficult problem machine learning known credit assignment problem 
sequential decision tasks appear practical real world problems including control game playing scheduling resource allocation 
current applications decisions simple heuristics rule thumb strategies 
strategies normally problem general take advantage domain specific information 
example communication network packet routing normally decided shortest path algorithm problem general policy 
littman boyan shown better routing policies achieved incorporating domain specific knowledge network topology reliability local information 
similarly high rise buildings better elevator dispatching systems built incorporating knowledge specific traffic patterns floor 
appears learning mechanism automatically develop domain specific strategies great benefit wide range tasks 
describes new approach called sane symbiotic adaptive neuro evolution combines genetic algorithms neural networks learn perform sequential decision tasks 
neural networks proven effective pattern recognition pattern association tasks shown generalize unseen situations 
genetic algorithms provide general training tool assumptions domain necessary 
genetic algorithms require single fitness evaluation entire possibly multi step task applied domains sparse reinforcement particularly suited evaluating performance sequential decision tasks 
sane implemented sequential decision tasks field artificial intelligence 
task sane evolved network perform value ordering constraint satisfaction problem 
sane network required backtracks random value ordering backtracks commonly maximization options heuristic 
second task sane implemented focus minimax search game othello 
task sane formed network decide moves board situation promising evaluate 
powerful evaluation function bill program lee mahajan sane able generate better play examining fewer board positions normal full width minimax search 
sane performance domains demonstrates effectiveness applicability broad range tasks 
body organized follows 
section basic steps sane described details current implementation 
sections empirical results tasks value ordering focusing minimax search 
research directions outlined section include applications nonmarkovian tasks domains multiple decision tasks 
symbiotic adaptive neuro evolution interest combining genetic algorithms neural networks 
genetic algorithms global search techniques patterned darwin theory natural evolution 
numerous potential solutions encoded strings called chromosomes evaluated task 
substrings genes best solutions combined form new solutions inserted population 
iteration genetic algorithm consists solution evaluation recombination called generation 
idea structures led solutions previous generations combined form better solutions subsequent generations 
neuro evolution solutions take form neural networks 
approaches neuro evolution operate population complete neural networks encoded separate chromosomes belew koza rice whitley 
evolving full solutions problem complete neural networks algorithm typically converges population single dominant individual 
concentration desirable occurs global optimum populations prematurely converge local optimum 
population converged search random walk mutation operator 
problem premature convergence unique neuro evolution open research issue genetic algorithms community 
prevent premature convergence population remain diverse 
diversity disperse individuals search space giving population global view space solutions 
result convergence suboptimal solutions 
sane incorporates idea diversity neuro evolution 
sane evolves population neurons fitness neuron determined cooperates neurons population 
evolve network capable performing task neurons optimize different aspects network form symbiotic relationship 
neurons evolve specializations search different areas solution space 
premature convergence avoided population discover better solutions difficult problems 
sane evolves population hidden neurons type architecture layer feedforward network layers weights 
basic steps generation sane follows table evaluation stage random subpopulations size selected combined form neural network 
network evaluated task assigned score subsequently added selected neuron fitness variable 
process continues neuron participated sufficient number networks 
average fitness neuron computed dividing sum fitness scores number networks participated 
neurons high average fitness cooperated neurons population 
neurons cooperate detrimental networks form receive low fitness scores selected 
neuron fitness value crossover operations combine chromosomes best performing neurons 
mutation employed low levels introduce new genetic material 
sense mutation insurance policy missing key genetic material mechanism create diversity 
neuron defined bitwise chromosome encodes series connection definitions consisting bit label field bit weight field 
absolute 
clear fitness values neuron 

select neurons randomly population 

create neural network selected neurons 

evaluate network task 

add network score selected neuron fitness value 

repeat steps sufficient number times 

get neurons average fitness scores dividing total fitness values number networks implemented 

perform crossover operations population average fitness value neuron 
table basic steps generation sane 
input layer output layer label weight forming simple input hidden output unit neural network hidden neuron definitions 
chromosomes hidden neurons shown left corresponding network right 
example hidden neuron connections 
value label determines connection 
neurons connect input output layer 
decimal value label greater connection output unit mod total number output units 
similarly equal connection input unit mod total number input units 
weight field encodes floating point weight connection 
shows neural network formed sample hidden neuron definitions 
neuron participated sufficient number networks population ranked average fitness values 
mate selected neuron top quarter population choosing neuron equal higher average fitness value 
point crossover operator mate neurons creating offspring mating 
offspring replace worst performing neurons rank population 
mutation rate performed entire population step generation 
implementation sane outlined performed sane implemented variety different neuron encodings network archi allow 
advanced encodings evolutionary strategies may enhance search efficiency generalization ability 
extensions current implementation subject research 
empirical evaluation sane performed standard reinforcement learning benchmark balancing pole cart moriarty miikkulainen 
learning speed generalization ability sane compared best known reinforcement learning approaches problem single layer adaptive heuristic critic ahc barto 
layer adaptive heuristic critic anderson genitor neuro evolution system whitley 
sane considerably faster cpu time efficient training episodes layer ahc genitor implementations 
compared single layer ahc sane order magnitude faster required training episodes 
generalization capabilities methods comparable 
analysis final populations verifies sane finds solutions diverse populations maintain diversity prolonged evolution 
purpose show sane applied existing novel sequential decision tasks 
task value ordering constraint satisfaction problems selected important problem general solutions performed inconsistently 
second task focusing minimax search selected demonstrate sane applied existing problems previously sequential decision tasks 
csp value ordering constraint satisfaction problems csp common areas computer science machine vision scheduling planning 
number variables assigned values constraints violated 
csps usually solved depth search variables chosen instantiation time different legal values tried time 
order variables values considered determines soon solution choosing variable value bindings wisely significantly reduce search time 
csp applications fail method haralick elliot ordering variable bindings 
level search variable smallest number possible values chosen instantiation 
deciding order values assigned difficult partly value ordering heuristics highly problem specific kumar 
learning domain specific heuristic information build effective value ordering policy significant demonstration sane important sequential decision task 
car sequencing problem car sequencing instance job shop scheduling problem van hentenryck 
automobile factory continuously moving assembly line put options classes capacity option option option option option table car sequencing problem classes option stations 
options required class indicated 
capacities option stations shown form power windows cars 
car enters option station workers walk car option installed 
capacity option station indicated example option station capacity handle maximum cars pass assembly line 
cars require option option station 
different classes cars require different options 
problem find ordering assembly line option station 
table shows particular car sequencing problem taken van hentenryck 
number classes number options capacities option stations options required class fixed 
number cars class total number cars schedule varied different instances problem 
constraint satisfaction formulation slots assembly line represent variables classes represent possible values variables 
experiments fail heuristic variable ordering results assigning slot order appear assembly line moriarty miikkulainen 
strategy value ordering left developed sane 
evolving value ordering neural network layer neural network evolved sane decide car class place slot assembly line 
networks evaluated implementing part chronological backtrack search program 
level search network received window previous slot assignments input 
slot represented input units class 
initially input units assignments 
neural network needs activation input layer produce output extra bias input unit included allow network generate initial choices 
entire input layer consisted units 
shows example instantiation assembly line input network receives 
output layer consisted units class 
activation output unit computed weighted sum input activations indicates strongly network suggests assigning class slot 
output layer represents ranking classes determines order classes assigned slots search input layer activations slot class partial sequence instantiation corresponding input network 
network receives previous assignments input 
example car class assigned slot 
input unit allow network initial choices 
slot scheduled slot 
choice violates constraints car class remaining assigned assignment violate option station capacity 
network knowledge number types cars schedule 
output layer merely represents order values tried current slot assignments 
cars left highest ranked class assignment cause option station class highest output unit tried violates constraints 
implementing simple constraints outside network serves problem relieve trivial overhead 
primary task differentiate bad choices 
requiring network identify classes valid easily learn task 
analogous removing requirement legal move identification move evaluating network game playing proved strategy moriarty miikkulainen 
simple forward checking algorithm implemented prune search space early 
option station total number cars requiring option counted 
number exceeded capacity option station remaining slots search path terminated 
population consisted linear threshold neurons threshold set 
subpopulation size networks formed generation neurons 
neuron participated average networks generation 
neuron encoded bit chromosome contained bit connection definitions 
evaluation consisted selecting scheduling problems database problem instances network order classes chronological backtrack search 
problem instances contained cars option requirements station capacities table 
score network determined total number backtracks incurred creates challenging credit assignment problem individual value ordering decisions 
value ordering results population evolved generations requiring approximately minutes ibm rs 
best network generation evaluated problem validation set 
final result best network generations selected tested different problem test set 
comparison random value ordering maximization options heuristic kumar run test set 
maximization options heuristic implemented prefer class leaves option stations free 
average number backtracks problem test set random value ordering maximization options heuristic sane network 
problem general heuristic reduce number backtracks significantly random ordering required times backtracks sane network 
sane network appeared take fail approach value ordering preferring classes place demand system 
approach obvious case class constitutes largest difference network ordering maximization options heuristic 
network preferred schedule cars class soon possible maximization options heuristic normally tried 
intuitively cars class difficult schedule require options 
sensible car class needs scheduled fit causing immediate conflicts placed slot 
maximization options heuristic schedule limit remaining options available cars 
approach delays scheduling class cars incur large backtracks fit 
maximization options considered problem general approach directs search areas search space high solution densities 
similar heuristic able solve order magnitude larger instances queens problem standard left right column ordering 
particular case sane discovered better ordering domain specific knowledge 
attainment domain specific knowledge separates sane problem general approaches allow sane effective broad range problems 
focusing minimax search value ordering provided studied decision task problem general approaches performed poorly 
sane requires pre existing knowledge decision task learns decision policies direct interaction domain 
words sane learn domains sparse reinforcement decision tasks previously received little attention hard learn analyze may optimized sane networks 
section presents application sane novel decision task 
current game programs rely minimax search algorithm return best move 
time space constraints searching game feasible games 
heuristic evaluation functions approximate payoff state 
heuristics create errors propagate search tree greatly diminish effectiveness minimax korf 
minimax promote risk assuming opponent best move 
losing situations best move may highest min max value especially result loss 
knowledge move probabilities guide search aggressive approach take advantage possible mistakes opponent 
game programs overcome weak evaluation functions searching deeper tree 
presumably search frontier gets closer goal evaluations accurate 
may true guarantee deeper searches provide frontier nodes closer goal states 
hansson mayer showed sound inference mechanism deeper searches cause error frontier nodes 
directed search necessary 
sane focus minimax away misinformation effective moves important novel application game playing demonstrates sane ability incorporate domainspecific knowledge case weaknesses minimax evaluation function form effective decision strategy 
creating focus window earlier moriarty miikkulainen showed standard neuro evolution methods evolve focus network game othello decide moves board situation explored 
sane method applied task significantly stronger results 
search focus task network sees updated board evaluates move level minimax search 
moves better threshold value explored 
search continues fixed depth bound reached 
evaluation function applied leaf states values propagated tree standard minimax method 
ff fi pruning algorithm full width search prune irrelevant states 
restricting number moves explored key advantages branching factor reduced greatly speeds search 
result searches proceed deeper promising paths 
focus networks forced decide moves minimax search evaluate order play develop understanding minimax algorithm 
possible discover limitations minimax evaluation function learn compensate allowing minimax evaluate certain moves 
illustrates focused search process 
player choice moves searching moves ahead 
leaf states evaluated static evaluation function 
actual payoff value leaf shown depth bound 
difference values error misinformation generated evaluation function 
move strongest move generate actual payoff depth bound estimated payoffs actual payoffs minimax search level 
min circles selects lowest payoff max squares highest min choices 
full width search considers possible moves focused search considers moves focus window shown shaded region 
value root node shown focused search 
full width search select move move max best choice 
focused search consider move selects move 
misinformation evaluates move full width search select move returns payoff 
focused search able select move excluding move consideration 
implementation focus networks othello input units represent type piece board space 
space contains network piece input unit turned value 
space contains opponent piece second input unit turned 
space empty input unit activated 
input units 
output unit corresponded directly space board 
activation output unit determined move considered 
activation greater equal move included focus window 
separate output units players allow offensive defensive strategies develop 
ranking network moves may differ ranking opponent moves 
evaluate network inserted ff fi search program played full width fixed depth minimax ff fi search 
number wins games played determined network score 
create different games initial state selected randomly possible board positions moves 
players allowed search second level evaluation function bill program lee mahajan composed large bayes optimized lookup tables gathered expert games 
bill time world champion program believed best world 
improvement current bill evaluation function significant result 
richard korf kai fu lee providing bill evaluation function 
hidden units network moves opponent moves architecture focus networks othello 
inputs encode position board 
encoding spaces board network playing black shown input layer 
activation output layer shown shading 
corners high activations corners moves 
focused search results sane neurons evolved generations took hours cpu time ibm rs 
evolution best network generation tested full width search initial games time player allowed search level 
network highest winning percentage tests selected best network 
table shows best focus network performance various search levels full width opponent 
results show focus network playing comparable cases better game bill 
remarkably focus networks won looking subset states full width search 
available moves level included focus network window 
full width search looking moves focused search plus additional moves misinformation additional moves causing select poor moves 
focused search employs evaluation function depth selecting better moves appears focus network shielding root misinformation 
results indicate sane evolve better efficient game play selective search 
sane able tailor minimax search best information evaluation function provides 
sane optimize highly sophisticated evaluation functions bill program 
significant improvement standard neuro evolution approach moriarty miikkulainen improve play weak heuristic extend bill evaluation level games won sane avg 
states sane avg 
states full width table winning percentage sane average number states examined game depth bound 
function deeper searches 
generally simulations demonstrate sane ability form effective decision policies novel decision tasks 
research improved game playing optimization evaluation function hansson mayer lee mahajan altering minimax algorithm korf chickering mcallester sane attacks misinformation making search level decisions overcome deficiencies minimax evaluation function 
novel approach game tree search studied fields artificial intelligence illustrates sane generality ability learn sparse reinforcement may uncover previously unrealizable sequential decision tasks 
decision tasks described markovian decision problems behavior system depended current state inputs 
interesting tasks formulated markov problems real world applications factors outside current observable state may influence system behavior 
example chess move decisions current board configuration opponent apparent strategy point 
sane applied tasks addition recurrent connections 
recurrent network maintains internal representation hidden layer identify historical factors affect system performance 
forming recurrent connections requires little additional computation sane sane able efficiently evolve recurrent networks non markovian tasks 
sane includes applying larger real world domains multiple decision tasks 
domain local area networks lan possible tasks include packet routing resource allocation congestion control priority queueing 
standard methods lan control exist sane domain specific knowledge attained direct interaction lan produce effective decision policies 
possible domains include elevator control air automobile traffic control robot control 
sane domain assumptions applicable domains 
important question explored research sane simultaneously evolve networks separate decision tasks 
example neurons involved priority queueing evolved neurons involved packet routing 
evolving neurons dif ferent networks different evolving single network case sane develop neurons specialize serve different roles 
input layers output layers network concatenated form single multi task network 
hidden neuron establish connections input output unit specialize connections single decision task form connections sub networks perform different tasks 
inter network connections produce interesting interactions decision strategies issue knowledge studied 
sane provides powerful new mechanism learning performing sequential decision tasks 
sane neural networks provide effective pattern recognition generalization genetic algorithm allows sane learn sparse reinforcement 
value ordering minimax tasks illustrate sane outperform problem general heuristics incorporating domain specific information option capacities assembly line weaknesses evaluation function 
sane domain assumptions ability learn tasks sparse reinforcement applicable broad range decision tasks including real world problems 
anderson 

learning control inverted pendulum neural networks 
ieee control systems magazine 
barto sutton anderson 

neuronlike adaptive elements solve difficult learning control problems 
ieee transactions systems man cybernetics smc 
barto sutton watkins 

learning sequential decision making 
gabriel moore editors learning computational neuroscience 
cambridge ma mit press 
belew mcinerney schraudolph 

evolving networks genetic algorithm connectionist learning 
farmer langton rasmussen taylor editors artificial life ii 
reading ma addison wesley 
grefenstette ramsey schultz 

learning sequential decision rules simulation models competition 
machine learning 
hansson mayer 

probabilistic heuristic estimates 
annals mathematics artificial intelligence 
haralick elliot 

increasing tree search efficiency constraint satisfaction problems 
artificial intelligence 


perfect heuristic non attacking queens problem 
information processing letters 
korf 

search survey results 
shrobe editor exploring artificial intelligence 
san mateo california morgan kaufmann 
korf chickering 

best minimax search othello results 
aaai 
koza rice 

genetic generalization weights architecture neural network 
international joint conference neural networks vol 

new york ny ieee 
kumar 

algorithms constraint satisfaction problems survey 
ai magazine 
lee mahajan 

development world class othello program 
artificial intelligence 
littman boyan 

distributed reinforcement learning scheme network routing 
technical report cmu cs school computer science carnegie mellon university 
mcallester 

conspiracy numbers min max search 
artificial intelligence 
moriarty miikkulainen 

efficient reinforcement learning symbiotic evolution 
technical report ai department computer sciences university texas austin 
moriarty miikkulainen 

evolutionary neural networks value ordering constraint satisfaction problems 
technical report ai department computer sciences university texas austin 
moriarty miikkulainen 

evolving neural networks focus minimax search 
proceedings twelfth national conference artificial intelligence aaai 
seattle wa 
moriarty miikkulainen 

discovering complex othello strategies evolutionary neural networks 
connection science 
appear 
van hentenryck simonis dincbas 

constraint satisfaction constraint logic programming 
artificial intelligence 
whitley dominic das anderson 

genetic reinforcement learning problems 
machine learning 

