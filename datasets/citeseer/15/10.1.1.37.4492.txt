supported german ministry research technology bmbf project number defining flexible workflow execution behaviors gregor intelligent systems department tzi center computing technologies university bremen po box bremen informatik uni bremen de 
focus definition adaptation execution behavior task order support flexible workflows presence distributed workflow enactment 
argue adequate behavior definition basis modeling restrictive workflows advance supporting dynamic workflow changes 
show different control flow dependency types specified approach define restrictive workflows 
furthermore discuss definition adequate behavior dynamic modifications different situations 
particular describe application reaction dynamic changes adapted approach depending process context behavior task 

development process model workflow management systems wfms driven focussing structured business processes viewpoint transactional processing 
wfmss applied rigorous methodology business process re engineering formal workflow specification leads defined processes suited production workflows 
restricted view inherently caused workflow paradigm main reason inflexibility today wfms underlying process representation formalisms 
support flexible workflows wfms cope fundamental challenges priori flexibility focus specification flexible workflow execution behavior express accurate restrictive behavior advance flexible adaptable control data flow mechanisms taken account order support ad hoc cooperative workflow level cf 

posteriori flexibility flexibility dynamic adaptation provided change evolution workflow models order modify workflow specifications schema instance level due dynamically changing situations real process cf 

note case dynamic modifications define priori context state execution certain modifications allowed order ensure dynamic semantical consistency process 
definition behavior workflow execution workflow evolution basis supporting flexible workflows 
focus workflow behavior definition adaptation cases presence distributed workflow enactment approach forms basis scalable workflow management system 
sketch workflow modeling language show behavior task defined adapted different contexts 
particular user defined control flow dependencies allow define reuse complex behavior patterns specified applied different contexts 
outline concepts define priori restrictive workflows workflows certain degree freedom left open actor 
furthermore discuss definition adequate behavior dynamic modifications different situations restricting self transactional view processes 
particular show application reaction dynamic changes adapted approach depending process context behavior task 

workflow modeling approach task process definition building block workflow modeling approach task definition task type consists task interface specifies potentially process definitions specify task may accomplished 
task interface defined attribute parameter process constraint defini tions neglected task behavior definition specifies external context free behavior task transactional non transactional 
context dependent behavior task defined application process definition 
process definition may atomic consisting task description system invocation complex 
complex process defined activity oriented manner task graph 
decision taken run time process definition task definition perform task late binding 
late binding mechanism allows create new process definition runtime late modeling 
task graph consists task components connectors start nodes data outlets linked control data flow dependencies task component applied occurrence task definition process definition 
task component split join type specified 
furthermore connector components predefined just realize splits joins 
task components start node linked control flow dependencies 
iterations task graph modeled special predefined feedback relationship 
condition associated dependency support conditional branches 
allow define different control flow dependency types applied reused process definitions 
semantics control flow dependency type defined eca rules shown section illustrated 
similar definition control flow dependencies support definition group relationship types 
group relationship process definition order group arbitrary task components task graph applies behavior defined group relationship components 
task component part necessarily nested groups 
special kind group block 
blocks nested contain subtask graph exactly start component particularly useful exception handling 
task components linked dataflow relationships input output parameters task definitions 
furthermore data inlet outlet data source sink order realize vertical dataflow parameters task definition workflow 
distributed workflow enactment execution semantics execution semantics tasks task graph defined statechart variant event eca rules 
enactment model treating tasks reactive components encapsulates internal behavior interact tasks message event passing 
natural basis distributed enactment workflows design goals approach flexibility essential scaling enterprise wide workflow support 
task built operations categorized state transition operations actor assignment operations operations handling versioned inputs outputs workflow change operations 
operation task knowledge trigger operation condition hold executing transition acts guard list receivers events passed avoid communication overhead broadcast 
introduce behavior definition adaptation schema level briefly sketch syntax semantics eca rules see details examples eca rule associated operation transition defines action part rule 
eca rules structured task transitions 
additionally eca rule consists list event captures condition receiver expression 
events define operation triggered task receives event matches event capture event capture list task source state corresponding transition event consumed task tries perform transition 
invocation transition causes evaluation condition 
transition condition acts guard transition performed condition holds done 
follow state semantics transition triggered internal atomic events externally user invocation 
invocation applicability transition strictly separated 
matching event event capture qualified causing task 
example allows task react differently event fin note process definition restricted sense defining task done 
avoid misunderstandings workflow workflow specification general term independent approach usual broader sense 
depending event received predecessor sub task 
furthermore trigger condition specified event capture hold valid event capture 
event capture matches event searched 
definition adaptation execution behavior context free behavior task behavior definition task definition means statechart variant 
defines states decomposition operations transitions invoked certain state 
furthermore exactly context free eca rule defined transition 
task definition inherit task definition task definition process definitions order define behavior classes tasks non transactional transactional cf 
wes 
inherited statechart states refined transitions added redefined changing associated eca rule 
allows adapt context free behavior tasks 
task definition inherits predefined task definition consists statechart defines basic states transitions context free eca rules illustrated 
context dependent behavior control flow dependencies groups process definition 
providing limited set different built control flow dependency types group relationship types arbitrary control flow types defined adapted process engineer cf 

defined label informal description set eca rules give semantics dependency type 
task graph control flow dependencies group relationships labels abstracting detailed definition reusing complex behavior patterns 
control flow dependency types define eca rules establish intertask dependencies start start start deadline 
group relationship types apply behavior pattern arbitrary set components 
example briefly explain definition standard start dependency consists rules partially shown 
concentrate rule defined enable transition applied target component dependency 
event capture defines enable transition triggered event finished received standard dependency condition corresponding dependency condition specified placeholder dependency condition evaluates true 
condition transition defined source component requiring state done 
receiver expression omitted examples 
order obtain behavior task instance partially defined eca rules context free behavior joined eca rules task instance inherits context dependencies group relationships process definition 
example shown task obtains behavior incoming standard start dependency design group type exclusion context free statechart 
different modes merging context dependent behavior definitions 
modes defined eca rule omitted fig 
applied transition condition conjunctive default group relationships disjunctive join type component default dependencies inverted join type component overriding 
dependency group types overriding mode transition applied simultaneously component 
overriding mode normally adapting application condition change operations see section 
suspend suspended active disabled ready done failed waiting running resume enable disable finish abort terminated executed iterate repeat truncate skip start enable define resumed event capture list iterated self process selected supertask output released supplier predecessor removed incoming dependency changed 
supertask state active mandatory inputs available disable define suspended output supplier predecessor added incoming dependency changed 
condition enable add predecessor define state waiting 
add supplier remove supplier add predecessor remove predecessor change incoming dependency predefined state transition diagram predefined context free eca rules created get input produce output system internal transition controllable user predefined context free execution behavior 
behavior definition adaptation flexible processes section show introduced concepts behavior definition define priori flexible workflows adjust application condition reaction dynamic changes depending behavior task context 
defining restrictive workflows give examples defining priori restrictive workflows workflows certain degree freedom left open actor introduced concepts user defined control flow types 
example definition group relationship type exclusion shown 
forces members execute mutually exclusive 
conjunction parallel branches define certain tasks executed sequentially defining actual ordering tasks 
user choose task wants perform 
example qa engineer may decide wants check specification functional ergonomic requirements 
second example focuses skipping task 
skipping task normally desirable viewpoint actor probably cause serve problems needed output data produced application restricted 
furthermore state semantic skipping task result deadlock successor tasks wait termination skipped task 
problems solved control flow dependency type cf 
show useful applications case dynamic changes 
waits termination task task executed see relaxed enable condition 
furthermore dependency allows control skipping enabled 
skip transition disabled tasks outgoing standard dependency 
process modeler define tasks skipped certain workflow 
supporting collaborative workflows collaborative workflows supported approach version workspace control capabilities integrated workflow model conceptual level 
consumed produced versions managed task oriented workspace 
versions released dedicated tasks allows versioned data definition different dependency group types control flow dependency standard enable target define finished predecessor standard dependency condition source state done dependency condition truncate target define dead path elimination truncated predecessor standard finished predecessor dependency condition dependency condition source state source state executed inverted mode skip source define disable skip source task false merging mode 
control flow dependency contrast standard enable target define enabled predecessor truncated predecessor truncated finished predecessor dependency condition source state done dependency condition source state executed skip source define enable skip source task true rest similar control flow dependency standard control flow group exclusion mutual exclusion disable define started exclusion enable define disabled exclusion finished exclusion forall related members exclusion state running derived eca rules enable disabled finished design 
design state done standard state running exclusion supertask state active free beh 
disable started suspended supertask 
condition enable 
workflow different dependency group types 
design functional check ergonomic check exclusion different control flow types application definition flexible workflows flow exchange intermediate results tasks 
furthermore data flow control flow purposes 
availability input data checked operations releasing outputs generate events transition tasks react events 
example event output released triggers evaluation enable transition consumers see 
scope details workspace capabilities see joe 
show data exchange simultaneously active instances controlled workflow level means simultaneous dependency cf 

definition dependency illustrated 
relaxes activation condition dependent task wait termination preceding task task enabled mandatory inputs available preceding task started 
main purpose simultaneous dependency ensure dependent task terminate preceding task 
termination synchronization guarantees latest results supplier processed consumer 
example application design review technical document designer may request early feedback reviewer see 
situation dependent handling fly changes approach dynamic changes enacting workflow instances applying eca rules change operations 
change primitive encapsulated pre condition restricts application raising corresponding event handled affected instances order ensure behavioral consistency execution states 
conceptually change operation treated state fly changes supported presence distributed workflow enactment task instance object knowledge react change 
basic idea approach previous dynamite software process management details approach managing evolving workflow specifications 
change allowed react highly depends particular situation behavior involved tasks 
concentrate situation dependent handling dynamic changes 
example outline useful application conditions reactions adding new predecessor task insertion sequential tasks new parallel branch 
case insertion new control flow dependency important 
affects target component depends new predecessor task 
depending behavior affected task context task applied different application conditions reactions useful change realized approach general modification allowed target components started 
dependent task state ready event predecessor added raised change operation results triggering disable transition 
transition performed enable condition longer holds see 
re evaluation enable condition ensures behavioral consistency 
adding new predecessor task may useful handled target components active finished 
contrast restrict situation independent theoretical correctness criteria dependent task active meaningful reaction example automatic batch process abort task restart probably performing additional compensation activities 
fur design document output designed doc review input designed doc release review checkout update output released release supplier consumer simultaneous output output feedback produced consumed control flow dependency simultaneous enable target define relaxed activation condition finished predecessor simultaneous allows start activation started predecessor simultaneous source task source state done source state active finish target define ensure target source state done finish source done rest similar control flow dependency standard process definition control flow dependency data flow relationship document model event sent related task data exchange running tasks controlled cooperation workflow level thermore manual task may just suspended resumed new preceding task done 
human actor easily changed input values documents 
behaviors realized defining different behavior classes batch tasks manual tasks 
case add trigger predecessor added context free eca rule abort transition case add trigger suspend transition 
furthermore relax transition condition add predecessor state waiting state running 
target task finished may compensate succeeding task new task possible behavior tasks provide compensation facilities shown 
example compensation done phase protocol takes ordering tasks execution account cf 
ley kara tasks dependent prepared compensation 
tasks compensated opposite ordering execution 
complex behavior realized compensation dependency 
compensation order dependent realized easily group type just define eca rule triggers compensation certain event occurs 
assume affected tasks part iteration loop interested execution insert new task impact current pass loop sense late time perform additional task 
new task relevant iteration 
realized group relationship type allow post execution change shown process definition mark regions mentioned situation supported obviously policy useful general 
note interplay context free context dependent behavior definition results appropriate behavior mentioned situation 
manual task changes may allowed state automatic task changes may disallowed task active rollback compensation possible desirable 
parts process process engineer may want disallow dynamic modifications 
case group relationship type disallow change disables change operations overriding mode mark relevant parts process cf 

done failed finish abort terminated executed iterate prepared compensation compensated prepare compensation truncate compensate context free eca rules prepare compensation define changes finished task triggers predecessor added 
preparation compensation compensate define compensation starts prepared compensation self successors compensated forall state compensated control flow dependency disable target define disable ready tasks predecessor prepared compensation predecessor compensated abort target define abort running tasks case prepared compensation predecessor prepare compensation target define transitively prepare compensation prepared compensation predecessor compensate source define trigger compensation reverse order compensated successor extended statechart tasks compensation behavior definition tasks compensation xor xor allow post execution change control flow group disable changes add predecessor define definition override false change operations 
control flow group allow post execution change add predecessor define state terminated disable changes situation dependent adaptation behavior dynamic changes 
definition situation dependent adaptation tasks execution behavior basis providing priori flexible workflows supporting dynamic changes possible situation 
case essential note exist practical cases theoretical correctness properties particular compliant property cf 
restrictive 
shown definition control flow dependency group relationship types basis eca rules powerful concept behavior adaptation dynamic changes distributed workflow enactment 
human actors react flexible changes context task 
integration version workspace control capabilities substantially supports adequate reactions workflow changes case manual cooperative tasks 
workflows defined approach far complex case workflows consists conditional parallel branches 
analysis correctness properties deadlock freeness resulting task behaviors interaction hard problem currently 
introduced concepts implemented project funded german ministry research technology bmbf 
experiences architecture system realized distributed object system corba discussed subsequent papers 
casati ceri pernici pozzi workflow evolution 
proc 
th int 
conf 
conceptual mo er cottbus germany pp 

ellis nutt workflow process spectrum nsf workshop workflow process automation information systems athens georgia 
ellis keddara rozenberg dynamic change workflow systems proc 
int 
conf 
organizational computing systems milpitas ca pp 

westfechtel dynamite dynamic task nets software process management proc 
th int 
conf 
software engineering berlin germany pp 

horn jablonski approach dynamic instance adaption workflow management applications proc 
cscw workshop adaptive workflow systems seattle wa nov jablonski st bussler ch workflow management modeling concepts architecture implementation international thomson computer press london 
joe und konzepte der workflow management systemen cscw workshop und workflow management systemen technical report angewandte mathematik und informatik university pp 

herzog managing evolving workflow specifications proc 
rd int 
ifcis conf 
cooperative information systems coopis new york aug ieee computer society press pp 

herzog flexible high level modeling enacting processes proc 
th int 
conf 
advanced information systems engineering caise lncs springer verlag pp 

herzog managing evolving workflow specifications schema versioning migration rules tzi technical report center computing technologies tzi university bremen 
kara kamath failure handling coordinated execution concurrent workflows proc 
th intl 
conf 
data engineering icde orlando florida feb 
krishnakumar sheth managing multi system tasks support enterprise wide operations distributed parallel databases pp 

ley leymann supporting business transactions partial backward recovery workflow management systems lausen 
bro technik und wissenschaft 
gi springer verlag pp 

reichert dadam supporting dynamic changes workflows losing control journal intelligent information systems special issue workflow pp 

wes weske state modeling flexible workflow executions distributed environments ozsu dogac ulusoy 
eds 
proc 
rd biennial world conference integrated design process techno volume issues applications database technology pp 

