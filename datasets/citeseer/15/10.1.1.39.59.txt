goms family user interface analysis techniques comparison contrast bonnie john computer science psychology human computer interaction institute carnegie mellon university pittsburgh pa phone email bonnie john cs cmu edu david kieras department electrical engineering computer science university michigan advanced technology laboratory building beal avenue ann arbor mi phone email kieras eecs umich edu june appear acm tochi copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
goms family comparison keywords goms cognitive modeling usability engineering publication psychology human computer interaction card moran newell goms model widely known theoretical concepts hci 
concept produced goms analysis techniques differ appearance form underlying architectural assumptions predictive power 
compares contrasts popular variants goms family keystroke level model original goms formulation ngomsl cpm goms applying single task example 

publication psychology human computer interaction card moran newell cmn goms analysis widely known theoretical concepts hci 
goms concept useful analyze knowledge task terms goals operators methods selection rules provided stimulus research verifies extends original 
today variants goms analysis technique applications technique real world design situations john kieras press 
clear differences techniques create confusion relate original concept 
purpose compare popular variants demonstrating discussing similarities differences 
tutorial version goms information textbooks handbooks tutorial notes cmn john gray kieras press 
guide deciding variants goms particular design situation information preceding john kieras press 
presents different goms techniques related 
examine variants goms simplest version card moran newell called keystroke level model klm original formulation goms refer cmn goms rigorous version called ngomsl version model overlapping human activities cpm goms 
comparison analyze task variants discuss qualitative quantitative similarities differences 

example task 
presentation single example task goms technique represents task 
goms model start high level task collaboratively writing research author 
high level subtasks involve different applications word processor write graphics application figures bibliographies look related mail send drafts back forth operating system manage files forth 
wide inclusion applications designed mind gives broad perspective knowledge people need accomplish complex task 
goms models show knowledge transfers application additional time spent moving information applications fit 
presenting broad task impossible confines article small part editing paragraph word processor larger task appropriate 
text editing original task development goms course important task domain 
incorrect assume goms limited goms general 
fact cases john kieras press goms family comparison concern task domains radically different text editing published beard smith press vera rosenblatt 
familiar domain task goals typical procedures familiar readers best example context compare different goms techniques 
presenting analyses define components goms model discuss important distinction forms goms model take 
order understand goms models arisen decade relationships analyst understand components model goals operators methods selection rules concept level detail different computational forms goms models take 
section concepts subsequent sections categorize existing goms models concepts 

example task editing marked manuscript 

definitions goms components 
goals 
goals user accomplish 
common sense meaning term applies goal effort directed webster 
collaborative writing example mentioned highest level goal write 
goals broken sub goals subgoals accomplished order achieve goal 
subgoals collaborative writing format bibliography send current draft second author incorporate marked comments text file 
expanding subgoal edit manuscript subgoals move text delete phrase insert word 
subgoals accomplished accomplish higher level goal 
goals sub goals arranged hierarchically strict hierarchical goal structure required 
particular versions goms models allow goals active versions represent extremely practiced behavior flattened structure contain explicit hierarchy subgoals 

operators 
operator action performed service goal 
operators perceptual cognitive motor acts composite 
operators change user internal mental state physically change state external environment 
important parameters operators goms family comparison particular execution time assumed independent user system got current state independent history operators 
execution time may approximated constant probability distribution function parameter 
instance time type word approximated constant average time average word average typist statistical distribution function involving number letters word time type single character turn approximated constant distribution 
accuracy execution time predictions obtained goms model depends accuracy assumption accuracy duration estimates 
text editing example goal hierarchy defined operators move mouse click mouse button shift click mouse button hit delete key 

methods 
methods sequences operators subgoal invocations accomplish goal 
goals hierarchical form corresponding hierarchy methods 
content methods depends set possible operators nature tasks represented 
method accomplishing goal delete phrase text editor write move mouse phrase click mouse button move mouse phrase shift click mouse button hit delete key mark delete method 

selection rules 
method accomplish goal 
mark delete method just described method accomplishing delete phrase goal move mouse phrase click mouse button hit delete key times delete characters method 
method applicable goal selection rules necessary represent user knowledge method applied 
typically rules specific properties task instance 
selection rules arise user personal experience interface explicit training 
example user may rule delete phrase goal says phrase characters long mark delete method delete characters method 

goals vs operators level detail important clarify common point confusion goals operators 
distinction strictly required level detail difference goal operator goms analysis merely matter level detail chosen analyst 
goal analyst provides method uses lower level operators specify details accomplished contrast operators broken 
analyst decide certain user activities need unpacked detail represent operators activities need considered detail analyst represent terms goals associated methods 
particular goms analysis assumes certain grain analysis stopping point level detail chosen suit needs analysis 
continuing text editing example goms analysis goal edit manuscript high level operators move text delete phrase insert word 
design situation required finer level detail analysis goals edit manuscript move text delete phrase insert word subgoals finer grained operators move cursor click mouse button double click mouse button shift click mouse goms family comparison button hit delete key accomplish goals 
principle goals operators task described higher levels collaboratively writing deeper levels detail muscle group 
stopping point analyst sure reasonable assume execution times lowest level operators primitive operators constant regardless surrounding context constant function parameter times estimated data previous similar tasks literature predict performance new tasks 
dual constraints primitive operators context free estimated leads goms models command keystroke level 
necessary bring parts analysis level primitive operators 
design situations different parts system different user tasks may require different levels scrutiny goms allows selective detail analysis 
starting high level user goals analyst expands parts goal hierarchy necessary questions hand 
parts expanded questions arise 
instance collaborative writing goms analyst chose expand search functions different applications word processor bibliography mail weeks expand functions 
decomposing goals sub goals primitive operators flexible analysis tool suits design situations 

form goms model different goms models literature differ substantially basic form appearance methods 
basic forms program form sequence form 

program form 
goms model program form analogous parameterized computer program 
methods take admissible set task parameters execute corresponding instance task correctly 
example mark delete method described represented program form take task parameters starting locations phrase executed move mouse corresponding locations 
goms model program form describes accomplish general class tasks specific instance class represented set values task parameters 
typically model explicitly contain form conditional branching invocations accomplish subgoals 
procedural knowledge represented program form fixed execution pathway sequence operators task depend specific properties task instance 
model defined possible tasks covered different execution pathways model 
program form model compact generative description explicitly represents knowledge features task environment user attend user operate system accomplish task goals 
program form advantage procedural knowledge visible analyst 
addition task instances need analyzed generative nature program form allows tasks instantiated quickly especially implemented running computer term generative analogously sense formal linguistics 
syntax language represented compactly generative grammar set rules generating grammatical sentences language 
goms family comparison program 
program form disadvantages 
way determine sequence operators task instance run model hand machine obtain trace method execution steps 
second defining expressing complete accurate program form model quite time consuming especially represented machine executable model 

sequence form 
contrast methods sequence form goms model contain fixed sequence operators accomplishing particular task instance 
may parameters included sequence model 
instance text editing example listing exact operators necessary delete phrase indicated goms model sequence form move mouse click mouse button hit delete key 
general sequence model take number characters phrase parameter contain implicit iteration 
example delete characters method move mouse operator click mouse button operator hit delete key operator repeated characters phrase 
advantages disadvantages sequence form inverse program form 
analyst explicitly define procedural knowledge possible task situation program detail sequence operators clearly visible analyst 
may information structure methods captured operator sequences set task instances unrepresented aspects inspectable 
listing operator sequence individual task instance usually easy large number task instances involved time consuming construct evaluate corresponding large number sequence form models 

comparison goms task analysis techniques apply technique example task discuss underlying architectural basis ensuing constraints technique compare contrast analysis goms variants 

keystroke level model klm keystroke level model klm simplest goms technique card moran newell cmn ch 

estimate execution time task analyst lists sequence operators totals execution times individual operators 
particular analyst specify method accomplish particular task instance 
goms techniques discussed predict method task situation klm 
furthermore specified methods limited sequence form containing keystroke level primitive operators 
task method klm uses keystroke level primitive operators predict time execute task 
original klm presentation included types operators press key button point mouse target display home hands keyboard device draw line segment grid mentally prepare action closely related series primitive actions represent system response time user wait system 
operators estimate execution time single value parameterized estimate dependent typing speed key mouse button click press release involved simple approximating function 
cmn klm technique includes set heuristic rules placing mental operators account mental preparation time task requires physical operators 
example rule goms family comparison reads insert front part argument strings proper text numbers 
place front select commands arguments 
cmn subsequent research refined primitive operators improving time estimates differentiating different types mental operations olson olson 
practitioners tailor operators define new ones suit particular user group interface requirements kuhn 
addition heuristics placing mental operators refined specific types subtasks making fixed series menu choices lane napier 
original heuristic rules created primarily command interfaces updated direct manipulation interfaces 
heuristic rule expanded read insert front part argument strings proper text numbers 
place front select commands arguments sequence direct manipulation operations belonging cognitive unit 

architectural basis constraints klm simple underlying cognitive architecture serial stage model human information processing activity done time task complete 
human information processing activity assumed contained primitive operators including internal perceptual cognitive actions subsumed black box mental operators 
restricts klm tasks usefully approximated series operators parallel activities interruptions interleaving goals 
luckily single user computer tasks usefully approximated restrictions 
restrictions primitive operators defined keystroke level klm impractical representing entire high level task collaboratively writing research 
goms variants able handle task 

example klm provides sample klm moving circled phrase 
construct model heuristics placing ms updated mouse interfaces cmn original operator types times supplied cmn 
includes illustrative observations analyst model 
quantitatively klm prediction task take seconds 
qualitatively analyst model highlight ideas 
subgoal structure explicit klm analyst see model annotated look recurring combined shortened 
instance analyst annotation consider move command cut paste klm move show time savings provide weighed considerations users prior knowledge functionality ability paste multiple copies 
considering sub goal structure important goms versions variants explicit model 
concept cognitive unit discussed cmn 
goms family comparison moving text menu method description operator duration sec mentally prepare heuristic rule move cursor phrase heuristic rule click mouse button heuristic rule move cursor phrase heuristic rule shift click mouse button average typing mouse button click mentally prepare heuristic rule move cursor edit menu heuristic rule press mouse button move cursor cut menu item heuristic rule release mouse button mentally prepare heuristic rule move cursor insertion point click mouse button mentally prepare heuristic rule move cursor edit menu heuristic rule press mouse button move cursor paste menu item heuristic rule release mouse button total predicted time 
keystroke level model moving text 
notes right represent hand written notes analyst add klm highlight ideas 

card moran newell goms cmn goms cmn goms term refer form goms model cmn ch 
card moran newell 
cmn goms strict goal hierarchy 
methods represented informal program form include conditionals 
cmn goms model particular task situation predict operator sequence execution time 
cmn describe cmn goms technique explicit guide presentation models different levels detail illustrates breadth expansion goal hierarchy desired level detail attained 
cmn report results models predicted operator sequences execution times text editing tasks operating systems tasks routine aspects computer aided vlsi layout 
examples sufficiently detailed extensive researchers able develop cmn goms analyses lerch mantei olson 
goms family comparison 
architectural basis constraints context cmn book appear cmn goms model human processor mhp simple conventional model human information processing parallel stages described cmn ch 
summarized section 
fact cmn establish relationship derive goms concept specific properties mhp 
cmn goms mhp principles operation rationality principle problem space principle developed problem solving theoretical literature newell simon see cmn ch 

problem space principle postulates user activity characterized applying sequence actions called operators transform initial state goal state 
experience sequence operators accomplish goal longer inferred sequence termed method routinely recalled executed goal situation recognized cmn ch 

rationality principle asserts users develop methods efficient structure task environment design system human processing abilities limitations 
human activity computer system viewed executing methods accomplish goals humans strive efficient methods heavily determined design computer system 
means user activity predicted great extent system design 
constructing goms model task system design predict useful properties human interaction computer 
cmn goms klm simple serial stage architecture program methods goal structure assumptions methods executed represented 
consequently cmn goms easy write lack explicit description method representation mechanisms involved task execution means cmn goms models relatively vague unspecified compared goms techniques 

example cmn goms model goal hierarchy explicitly represented cmn goms model start level collaboratively writing research subgoals send draft author format bibliography edit manuscript 
displays goals operators edit manuscript subgoal 
includes details move text subgoal illustrative analyst annotations 
moving accomplishing cutting text pasting 
cutting accomplished selecting text issuing cut command 
specified selection rule selecting text done different ways depending nature text selected 
pasting requires selecting insertion point issuing paste command 
quantitatively cmn goms models predict operator sequence execution time 
qualitatively cmn goms models focus attention methods accomplish goals similar methods easy see unusually short long methods jump annotated spur design ideas 
addition annotations indicate analyst observed verify operator explicitly records points feedback user 

comparison klm 
major difference klm cmn goms models cmn goms program form analysis general executable 
instance goms family comparison goal edit manuscript goal edit unit task repeat unit tasks 
goal acquire unit task task remembered 
goal turn page manuscript page 
goal get manuscript 
goal execute unit task unit task 
goal modify text select goal move text text moved 
goal delete phrase phrase deleted 
goal insert word word inserted 
verify edit expansion move text goal goal move text goal cut text 
goal highlight text 
select goal highlight word 
move cursor word 
double click mouse button 
verify highlight 
goal highlight arbitrary text 
move cursor 
click mouse button 
move cursor 
shift click mouse button 
verify highlight 
goal issue cut command 
move cursor edit menu 
press mouse button 
move mouse cut item 
verify highlight 
release mouse button goal paste text 
goal position cursor insertion point 
move cursor insertion point 
click mouse button 
verify position 
goal issue paste command 
move cursor edit menu 
press mouse button 
move mouse paste item 
verify highlight 
release mouse button total time predicted sec selection rule goal highlight text text highlighted single word highlight word method highlight arbitrary text method 

example cmn goms text editing methods showing top level unit task method structure expansion method selection rule 
goms family comparison described class tasks performed simulated steps model may take different paths depending specific task situation 
subgoal invocation method selection predicted model task situation need dictated analyst klm 
major difference goal hierarchy explicit cmn goms implicit klm 
comparing shows relationship cmn goms klm 
instance mapping physical operators cmn goms model ks ps klm 
cmn goms model operators level verify location verify highlight overt physical actions 
klm explicit goals choices goals cmn goms model represents explicitly 
roughly verify operators subgoal invocations selection rules cmn goms model represented operators klm 
operators appear cmn goms model groups roughly correspond placement ms klm 
approximately case verify operators occur middle group physical operators approximation close 
task specified manuscript model predict trace operators shown estimates operator times far right column 
estimates physical operators identical ones klm 
verify highlight verify position operators assigned sec value klm operator cmn best estimate mental time absence information 
cmn goms model produces estimate task completion klm 
notice cmn goms technique assigns time operators overhead required manipulate goal hierarchy 
results cmn time predictions assumption operators contributed time task goal manipulation contributed time 
suggested detailed levels analysis cognitive activity important 
notice klm puts ms cmn goms model puts mental time verify operators 
mental time observable pauses actions difficult distinguish techniques empirically appeals detailed cognitive architectures explain distinction 
pragmatically difference irrelevant design situations 
discuss issue mental time presenting goms techniques 

natural goms language ngomsl ngomsl structured natural language notation representing goms models procedure constructing kieras press 
ngomsl model program form provides predictions operator sequence execution time time learn methods 
analyst constructs ngomsl model performing top breadth expansion user top level goals methods methods contain primitive operators typically keystroke level operators 
cmn goms ngomsl models explicitly represent goal structure represent high level goals collaboratively writing research 
design situations may require provide opportunity better estimates specific types mental operators 
analysts look additional empirical cmn chapter measure specific mental times hci empirical john newell estimates time recall command abbreviations olson olson mental preparation spreadsheet 
goms family comparison 
architectural basis constraints ngomsl technique refines basic goms concept representing methods terms cognitive architecture called cognitive complexity theory cct kieras polson bovair kieras polson 
cct assumes simple serial stage architecture working memory triggers production rules apply fixed rate 
rules alter contents working memory execute primitive external operators making keystroke 
goms methods represented sets production rules prescribed format 
learning procedural knowledge consists learning individual production rules 
learning transfers different task rules learned see anderson 
cct shown provide predictions execution time learning time transfer procedure learning kieras bovair bovair kieras polson 
ngomsl originated attempts define higher level notation represent content cct model bennett lorch kieras polson butler bennett polson karat 
structured natural language notation methods represented program form list steps contain operators external keystroke level operators internal operators represent operations cct architectural mechanisms adding removing working memory information setting subgoals 
relationship ngomsl notation cct architecture direct essentially relationship statements ngomsl language production rules goms model written cct format 
cct prediction results ngomsl models estimate execution time klm cmn goms time learn procedures 
ngomsl analysis provide useful descriptions task levels analysis karat bennett quantitative predictions learning execution times meaningful methods operators user assumed know known properties 
cct ngomsl model empirically validated keystroke level analysis operators determine position click mouse button models level produce reliable quantitative estimates 
principle levels researched empirically validated done 
ngomsl models specify methods program form characterize procedural complexity tasks terms learned executed 
underlying simple serial stage architecture cct limits ngomsl hierarchical sequential methods 
provision representing methods steps executed order interrupted resumed 
direct way represent perceptual cognitive motor processing overlap 
example provision representing user doing perceptual processing icon simultaneously homing hand mouse doing retrieval long term memory 
extent possible approximate overlapping operations setting certain operator times zero done see gong 
direct representation processing overlap requires different underlying cognitive architecture approach represented cpm goms technique discussed 

example ngomsl model continuing text editing example shows ngomsl methods involved moving text 
notice methods represented executed example task instance 
quantitatively ngomsl provides learning time execution time predictions discussed detail 
qualitatively ngomsl provides klm cmn goms provide ngomsl statements executions external operator times method goal move text step 
accomplish goal cut text 
step 
accomplish goal paste text 
step 
return goal accomplished 
method goal cut text step 
accomplish goal highlight text 
step 
retain command cut accomplish goal issue command 
step 
return goal accomplished 
method goal paste text step 
accomplish goal position cursor insertion point 
step 
retain command paste accomplish goal issue command 
step 
return goal accomplished 
selection rule set goal highlight text text word accomplish goal highlight word 
text arbitrary accomplish goal highlight arbitrary text 
return goal accomplished 
method goal highlight word step 
determine position middle word 
step 
move cursor middle word 
step 
double click mouse button 
step 
verify correct text selected step 
return goal accomplished 
method goal highlight arbitrary text step 
determine position text 
step 
move cursor text 
step 
click mouse button 
step 
determine position text 
known step 
move cursor text 
step 
shift click mouse button 
step 
verify correct text highlighted 
step 
return goal accomplished 
method goal position cursor insertion point step 
determine position insertion point 
step 
move cursor insertion point 
step 
click mouse button 
step 
verify correct point flashing step 
return goal accomplished 
method goal issue command step 
recall command name retrieve ltm menu name retain menu name 
step 
recall menu name move cursor menu bar 
step 
press mouse button 
step 
recall command name move cursor 
step 
recall command name verify selected 
step 
release mouse button 
step 
forget menu name forget command name return goal accomplished 
predicted pure procedure learning time statements ltm chunks sec total predicted execution time sec 
example ngomsl methods moving text showing generic command issuing method uses items long term memory associate menu names contained commands 
adapted kieras press 
goms family comparison 
example ngomsl similarity methods explicit issuing command 
cmn goms verify operators draw analyst attention feedback 
addition ngomsl models explicitly represent working memory long term memory usage allowing analyst assess demands design cognitive resources 
example working memory need store command name menu name reasonable amount information 
model assumes users learned commands menus haven systematically search menus guess 
assumptions explicit questioned considered design 
learning time predictions 
ngomsl models shown predictors time learn system keeping mind predicted pure learning time procedural knowledge represented methods 
note mentioned user assumed know execute operators goms methods represent knowledge involved executing operators represent knowledge operators apply order accomplish goal 
innovative interface technology results new operators moving cursor mouse new operator users early selecting objects eye movement tracker manipulating objects flying virtual space data glove gestures new operators technologies move workplace 
clearly time learn execute new operators critical aspect value new interface devices goms model assumes operators predict learning time 
time learn new operators measured simply included analysis 
total elapsed time learn system depends procedural knowledge learned time takes complete training curriculum 
learning computer takes place context new user performing tasks sort performance take certain amount time user fully trained 
total learning time consists time execute training tasks plus extra time required learn perform tasks pure learning time 
gong showed training task execution times estimated goms model training tasks 
key empirical result procedure learning time approximately linear number ngomsl statements learned 
pure learning time methods estimated just counting statements multiplying empirically determined coefficient 
transfer training effects calculated number ngomsl statements methods identical highly similar ones known learner see kieras press bovair kieras polson 
characterization interface consistency terms quantitative transferability procedural knowledge significant contribution cct research ngomsl technique 
important limitation result accuracy absolute predictions learning time depend analyst followed style writing methods obtain empirical coefficient 
uncertainty dealt performing relative comparisons models written consistent style 
needed describe document style analysts follow yield consistently accurate absolute predictions learning time 
additional component pure learning time time required memorize chunks declarative information required methods menu names commands 
items assumed stored long term memory ltm strictly part goms methods required ltm methods execute correctly 
including component learning time estimates way represent learning load imposed menu command terms heuristics suggested cmn applied estimate time memorize items number chunks 
heuristics counting chunks defined time see gong 
validity utility learning time predictions depend general requirements learning situation 
clearly learner engaged problem solving unstructured learning situation time required learning variable ill defined learner trained tightly controlled situation 
original kieras polson bovair mastery learning situation users explicitly trained methods required repeatedly execute procedure fully exactly going bovair kieras polson kieras bovair polson 
cct predictions extremely accurate sort learning situation 
gong realistic learning situation users demonstration explanation perform series training tasks pace detailed feedback correction 
ngomsl method length transfer measures number memory chunks excellent predictors realistic training time prediction coefficients different kieras 
learning situations unstructured ordinal predictions learning time hold true suggested results ziegler hoppe 
reasonable regardless learning situation systems methods longer complex require time learn procedural knowledge acquired explicit study inferential problem solving 
clearly nature relatively unstructured learning situations required 
discussion estimating learning time summarized follows values determined gong total procedure learning time pure procedure learning time training procedure execution time pure procedure learning time ngomsl method learning time ltm item learning time ngomsl method learning time sec 
ngomsl statements learned ltm item learning time sec number ltm chunks learned formulas give pure procedure learning time estimate set methods shown sec typical learning situation assuming prior knowledge methods assuming learning proper command words menu terms require learning chunks 
execution time predictions 
goms models execution time predictions sequence operators executed performing benchmark tasks 
trace example ngomsl model performing text moving example summarized 
trace includes sequence physical operators klm cmn goms models figures 
predicted execution time obtained counting sec ngomsl statement executed adding total external operator time values klm recommended kieras press 
gives predicted execution time sec comparable predictions models sec klm cmn goms models 
goms family comparison 
comparison klm cmn goms 
primary difference execution time predictions ngomsl klm cmn goms time assigned cognitive perceptual operators 
stylistic differences large mental operators assumed example ngomsl example follows recommendations kieras press number placement determine position verify operators operators cmn goms klm models 
stylistic differences resolved research 
important difference nature unobservable operators 
klm single crude operator precedes cognitive unit action 
ngomsl cct uniformly requires cognitive execution time step manipulating goals working memory entering leaving methods 
contrast cmn goms assigns time cognitive overhead 
models include operators substantial time consuming mental actions locating information screen verifying entries 
methods assign roughly time unobservable perceptual cognitive activities different places trace 

cognitive perceptual motor goms cpm goms cpm goms goms models predicts execution time analysis component activities 
cpm goms requires specific level analysis primitive operators simple perceptual cognitive motor acts 
extant goms techniques cpm goms assumption operators performed serially perceptual cognitive motor operators performed parallel task demands 
cpm goms uses schedule chart pert chart familiar project managers murphy represent operators dependencies operators 
acronym cpm stands cognitive perceptual motor level analysis critical path method critical path schedule chart provides prediction total task time 

architectural basis constraints cpm goms directly model human processor mhp see cmn ch 
basic human information processing architecture similar appearing human cognitive performance literature decades 
human modeled set processors storage systems sensory information acquired recognized deposited working memory perceptual processors cognitive processor acts information commands motor processors physical actions 
processor operates serially internally characteristic cycle time processors run parallel 
unique contribution cmn standard picture human information processing form engineering model careful simplifications approximations able quantitatively account basic phenomena relevant humancomputer interaction see cmn ch 
cpm goms technique directly applies mhp task analysis identifying operators performed processor sequential dependencies 
mhp architecture allows parallelism cpm goms operators necessary analyzing tasks forces primitive operators level mhp processors 
cpm goms models detailed previous goms variants 
example clear cpm goms models detailed tasks usefully approximated serial operators 
cpm goms models assumption extreme expertise user 
goms family comparison typically model performance optimized proceed fast mhp information flow dependencies allow 
discuss implications assumption context text editing example 

example cpm goms model build cpm goms model analyst begins cmn goms model task inheriting qualitative information obtained doing cmn goms model 
cmn goms model start level operators activity level primarily high level perceptual read screen motor enter command actions 
analyst continues dropping lower level operators expressed goals accomplished methods containing mhp level operators 
john gray provided templates assemblies cognitive perceptual motor operators dependencies different activities different task conditions 
instance contains template read screen goal eye movement required contains template user looking right spot display 
operator templates duration estimate set estimates depend task conditions 
instance visually perceiving comprehending character word takes ms visually perceiving comprehending symbol merely absent presence highlighting takes ms figures 
templates joined serially interleaved take advantage parallelism underlying cognitive architecture 
operators estimates duration pattern dependencies combine produce detailed model actions occur performance task happen 
sequence operators produces longest path chart called critical path sum durations operators critical path estimates total duration task 
empirical data actual performance observable motor operators available current system similar system designed desirable verify model data 
verified models modified represent proposed design quantitative predictions performance time determined critical path cpm goms model 
qualitative analysis aspects design lead changes performance time quite easy models built subtask profiling sensitivity parametric analyses playing suggested design features chuah john pane gray john atwood 
continuing example move text goal shows cpm goms model task 
brevity model covers portion procedure involved highlighting text moved 
box chart represents operator horizontal line boxes represents sequence operators executed perceptual cognitive motor processor 
lines connecting boxes indicate sequential dependencies operators highlighted lines correspond critical path 
discussing example model detail important note text editing application cpm goms technique compare goms techniques 
text editing usefully approximated serial processes klm cmn goms ngomsl successful predicting performance text editors 
cpm goms overly detailed primarily serial tasks underestimate execution time 
examples tasks parallel processing model essential power cpm goms evident see telephone operator task gray john atwood transcription typing john press john newell 
goms family comparison visual perception cognitive operators eye movement msec attend info initiate eye movement msec perceive info msec eye movement msec verify info msec perceiving simple binary visual signal msec perceiving complex visual signal similar letter word 
example template building cpm goms models adapted john gray 
template accomplished goal read screen eye movement required task 
visual perception cognitive operators msec attend info perceive info msec perceiving simple binary visual signal msec perceiving complex visual signal similar letter word msec verify info 
example template building cpm goms models adapted john gray 
template accomplished goal read screen eye movement required task 
execution time predictions 
times operators shown boxes schedule chart durations estimated john gray 
highlighted lines boxes comprise critical path 
reading total duration final item critical path gives total execution time subsequence task equal sec 
ability cpm goms represent parallel processing illustrated set operators accomplish move phrase goal 
operators performed strictly serially eye movement perception information occur parallel cursor moved new location 
information flow dependency lines operators ensure eyes get new position cursor goms family comparison verified right location movement mouse takes longer perception defines critical path 
multiple active goals represented cpm goms models illustrated sets operators accomplish move phrase goal shift click mouse button goal 
shift key hit left hand model person mouse moved right hand pressing shift key occur mouse moved phrase 
operators accomplish shift click mouse button goal interleaved operators accomplish move phrase goal 
interleaving represents high level skill part user 

comparison klm cmn goms ngomsl 
text editing best task display advantages cpm goms interesting aspects model compared example models 
direct mapping cmn goms model cpm goms model cpm goms models start cmn goms particular model built 
klm selection rules explicitly represented cpm goms models sequence form chooses particular method task instance 
example selection highlight arbitrary phrase highlight word explicitly represented cmn goms ngomsl implicit analyst choice method particular model 
qualitative process represented cpm goms model reasonable quantitative prediction shorter estimates models 
cpm goms model predicts total execution time sec totaling execution time steps models gives sec klm cmn goms sec ngomsl model 
primary source discrepancy goms variants basic assumption cpm goms technique user extremely experienced executes task rapidly mhp architecture permits 
aspect extreme expertise assumption cpm goms model assumes user knows exactly look moved phrase 
means model needs eye movement find find target phrase mouse movements points initiated prior completion eye movements 
real world situations telephone operators handling calls gray john atwood required information appears fixed screen locations experience user learn look 
typical text editing task example situation changes task instance visual search required locate target phrase 
cpm goms model visual search processes chuah john pane brevity include complexity example 
second aspect assumed extreme expertise example include substantial cognitive activity associated selection methods complex decisions 
cognitive activity represented goms variants operators second duration 
contrast method selection implicit single cognitive operator initiate move text method minimum cognitive activity required mhp recognize situation note working memory 
likewise verify position operators included cpm goms model represent elementary recognitions cursor location model looking complex verifications text modification done correctly required cmn goms ngomsl 
represents minimum cognitive activity unreasonable goms family comparison perceptual cognitive motor operators accomplish goal move cursor operator klm cmn goms ngomsl models 
model assumes hand moving cursor correct direction eyes fully verified destination cursor eyes get cursor 
eye movement perception verification critical path 
perceive location cursor perceive info phrase visual perception operators verify initiate mouse button click verify location cursor location phrase initiate cursor movement initiate phrase attend info phrase method text method model continues cognitive operators move cursor phrase right hand motor operators cognitive motor operators accomplish goal click mouse button operator klm cmn goms ngomsl models 
left hand motor operators cognitive operators accomplish mental preparation set move text task 
eye movement phrase eye movement motor operators key start time msec duration msec operator name 
cpm goms model move text method text editing task 
bold indicates critical path perceptual cognitive motor operators accomplish goal move phrase operator klm cmn goms ngomsl models 
notice operators goal shift click mouse button interleaved operators goal 
multiple active goals represented cpm goms models indication extreme expertise 
initiate moveto phase attend info phrase initiate eye movement phrase initiate cursor movement eye movement phrase perceive info phrase verify location phrase move cursor phrase perceive location cursor initiate mouse button shift click press shift key con 
cpm goms model move text method text editing task 
verify location cursor initiate mouse button click release shift key cognitive motor operators accomplish goal shift click mouse button 
notice interleave previous goal occur parallel operators operators contribute time critical path 
point 
model continues task 
goms family comparison goms family comparison assumption normal text editing task 
experiment cmn pp 
performance time expert user novel editing task predicted klm trials exact task instance performance time decreased largely operators shorter 
type extreme expertise example cpm goms model represents 
elaborate cpm goms model represent complex decisions series mhp level operators performing minute cognitive steps serially earlier recalling computer command john newell 
technique modeling complex decisions cpm goms research issue tasks method selection obvious cues environment decisions represented simply 
final contributor short predicted time mouse movements cpm goms calculated specifically particular target size distance situation yielding shorter times cmn sec estimate average pointing time models discussion appears section 

summary comparison goms techniques modeled goal move text different goms task analysis techniques 
purposes comparison included cpm goms model task technique recommended modeling sequential tasks brevity shown text highlighting 

summary comparison predictions 
klm cmn goms ngomsl models produce sequence observable operators cpm goms model detailed level 
table summarizes quantitative predictions presentation example task subtask consisting just highlighting moved text 
ngomsl techniques learning time predictions limited effects amount procedural knowledge related ltm information learned learning situations coefficients empirically determined 
klm cmn goms ngomsl produce execution time predictions roughly task subtask different assumptions unobservable cognitive perceptual operators distribute time different ways see 
important difference ngomsl technique currently entails operators techniques cognitive overhead due method step execution 
ngomsl typically predict execution times longer klm cmn goms predictions 
shown execution time predictions text highlighting cpm goms model predicts substantially shorter execution time models 
discussed due assumption extreme expertise produces maximum operator overlapping finer grain time estimates individual operators minimum cognitive activity allowed mhp 
interesting similarity ngomsl cpm goms roughly similar cognitive overhead time example ngomsl value statement execution time sec statement cpm goms total time cognitive processor critical path 
goms family comparison table 
predicted time measures seconds technique move text example klm cmn goms ngomsl cpm goms measures procedure learning highlighting methods total example task shown execution time example text highlighting sub method highlighting sub method execution time total cognitive overhead 
summary comparison operator times 
table lists operator times assumed different techniques move text example 
basically types operators directly observable looking human performance motor operators usually observable perceptual cognitive operators eye movements 
values operators quite similar goms techniques assumptions unobservable operators vary widely 
mouse button operations 
times mouse button operators shift key klm cmn goms ngomsl values cmn 
slightly different value click mouse button cpm goms technique read example 
clicking mouse button requires ms cognitive operator motor operators ms 
shift click operation assumed sequence hitting shift key msec cmn mouse button msec techniques 
cpm goms shift key operator overlap earlier processing move text task critical path 
entire shift click operation adds msec critical path click mouse button 
eye movements observable eye tracker eye tracking research hci sparse treat unobservable task 
goms family comparison cursor movement 
sec klm cmn goms ngomsl average value suggested cmn large screen text editing tasks 
gong mouse movements involved macintosh interface making menu selections activating windows faster sec fitts law estimates see cmn accurate 
fitts law values actual typical locations sizes screen objects probably possible techniques 
cpm goms moving cursor point object combination cognitive operators motor operators perceptual operators see occur critical path particular task situation 
duration mouse movement motor operator calculated fitts law msec movements 
example moving phrase put ms critical path cognitive motor perceptual coincidentally moving phrase put ms critical path cognitive motor perceptual 
unobservable operations 
goms variants assumptions unobservable operations 
klm simplest assumption putting operations perceiving information eye movements comparisons decisions mental calculations operator seconds length 
operator put cognitive unit 
cmn goms ngomsl break catch specific unobservable operators 
cmn goms uses unobservable operators verify editing actions verify highlight verify position assigned estimate seconds ngomsl uses determine position verify seconds 
klm cmn goms ngomsl models estimates unobservable operators shown currently recommended technique average values absence specific measurements 
table 
operator times seconds technique move text example 
see text explanation cpm goms entries 
klm cmn goms ngomsl cpm goms critical path directly observable motor operators click mouse button shift click mouse button cursor movement fitts law fitts law unobservable perceptual cognitive operators mental preparation determine position edit verification goms family comparison roughly second duration slightly different determined empirically different data sets different historical points development goms techniques 
techniques theoretical commitment particular value 
available empirically determined values operators involved particular analysis average estimates 
differences distribution mental time 
klm tends place mental time preparation action cmn goms mental time tends come actions verify operators ngomsl mental time places 
stylistic differences probably resolved research 
addition operators ngomsl takes time unobservable activity associated production rule cycling assumed underlying architecture represented sec statement cognitive overhead 
considerably detail cpm goms represents underlying unobserved operations terms cycle times mhp processors cognitive cycle time estimated ms cmn refined subsequent ms john newell nelson lehman john perceptual cycle time depends complexity signal perceived see figures eye movement time estimated msec cmn 
duration dependencies unobservable operators specified templates construct model 
operators needed accomplish task dependencies critical path different estimate mental time meaningful cpm goms 
example move text task entry table mental preparation sum durations cognitive operators critical path set move text task highlight phrase subtask 
entry determine position sum durations operators locate phrase screen occur critical cognitive operators eye movement motor operator perceptual operator 
operators depend occur order activity place task critical path take ms looking phrase just part move text task activities occur parallel moving mouse discussed section operators interleaved making critical path complicated cognitive operators appear critical path task 

summary comparison architectural assumptions 
assumed cognitive architectures range trivial case klm slightly complicated cmn goms elaborated sequential architecture working memory specified procedure knowledge representation ngomsl powerful relatively unspecified multiple parallel processor architecture cpm goms 
strengths weaknesses techniques corresponds quite directly architectural differences 
klm easy apply predicts execution time analyst supplied methods 
extreme cpm goms predicts execution time subtle overlapping patterns activities requires analyst supplied methods 
cmn goms program methods worked predict execution time subsumed task instances ngomsl additional investment explicit representation procedural knowledge predict aspects learning time 
radically different goms techniques occupy various points space possible techniques defined different architectural assumptions form methods supplied analyst see john kieras discussion 
important possibilities research lie gaps space example extant set ready goms techniques lack program form approach analyzing overlapping cognitive perceptual motor activities 
goms family comparison 
specific goms modeling techniques discussed related general approach 
general approach emphasizes importance procedures accomplishing goals user learn follow order perform system 
descriptions user procedures techniques provide quantitative predictions procedure learning execution time qualitative insights implications design features 
aspects system design undoubtedly important ability goms models address critical aspect key part scientific theory human computer interaction useful tools practical design john kieras press 
current goms models quite effective capture procedural speed complexity 
aspects human performance interface addressed simple cognitive architectures underlying current goms variants 
current research cognitive architectures assumes detail variety human mechanisms potentially account wider deeper range design issues 
representative examples architectures represent perceptual cognitive motor interactions nelson lehman john kieras meyer press kieras wood meyer comprehension processes polson kintsch polson problem solving learning mechanisms altmann larkin john anderson bauer john howes polson lewis rieman lewis young polson 
research efforts rigorous computational models eventually lead engineering style design tools additional aspects interface design usability 
current generation goms models ready application expect see models human computer interaction comprehensive accurate useful 
acknowledgments authors contributed equally article order names reflects alphabetical order authorship 
wayne gray judy olson comments drafts 
bonnie john supported office naval research cognitive science program contract number advanced research projects agency dod monitored office naval research contract 
david kieras supported office naval research cognitive science program number nr advanced research projects agency dod monitored contract 
views contained document author interpreted representing official policies expressed implied office naval research advanced research projects agency government 
special issue cognitive architectures hci scheduled appear human computer interaction 
goms family comparison altmann larkin john 

display navigation expert programmer preliminary model memory 
proceedings chi denver colorado may acm new york pp 

anderson 

rules mind 
hillsdale nj lawrence erlbaum associates 
bauer john 

modeling time constrained learning highly interactive task 
proceedings chi denver colorado may acm new york pp 

beard smith 
press 
quick dirty goms case study computed tomography interpretation 
human computer interaction 
bennett lorch kieras polson 

developing user interface technology industry 
shackel 
eds proceedings second ifip conference human computer interaction human computer interaction interact 
stuttgart federal republic germany sept 
elsevier science publishers north holland 
bovair kieras polson 

acquisition performance skill production system analysis 
tech 
rep 
ann arbor university michigan technical communication program 
bovair kieras polson 

acquisition performance text editing skill cognitive complexity analysis 
human computer interaction 
butler bennett polson karat 

report workshop analytical models predicting complexity human computer interaction 
sigchi bulletin pp 

card moran newell 

keystroke level model user performance time interactive systems 
communications acm 
card moran newell 

computer text editing analysis routine cognitive skill 
cognitive psychology 
card moran newell 

psychology human computer interaction 
hillsdale nj lawrence erlbaum associates 
chuah john pane 

analyzing graphic textual layouts goms results preliminary analysis 
proceedings companion chi boston ma usa april 
new york acm pp 

kintsch polson 
modeling user action planning comprehension approach 
user modeling user adapted interaction gong 

validating refining goms model methodology software user interface design evaluation 
ph dissertation university michigan 
goms family comparison gray john atwood 
project validation goms prediction explanation real world task performance 
human computer interaction pp 

kuhn 

keystroke level analysis graphics application manual map digitizing 
proceedings chi boston ma usa april 
new york acm pp 

howes 

model acquisition menu knowledge exploration 
proceedings chi boston ma usa april 
new york acm pp 

john 
press typist theory performance skilled typing 
human computer interaction 
john gray 
goms analyses parallel activities 
tutorial notes chi denver colorado may acm new york 
john kieras 

goms family analysis techniques tools design evaluation 
technical report cmu cs school computer science carnegie mellon university 
john kieras 
press 
goms user interface design evaluation technique 
acm transactions computer human interaction john newell 
predicting time recall computer command abbreviations 
proceedings chi gi toronto april acm new york 
john newell 

science hci compatibility transcription typing 
proceedings chi austin texas april may acm new york 
karat bennett 

modeling user interaction methods imposed designs 
tauber ackermann eds mental models human computer interaction 
amsterdam elsevier 
kieras 

practical goms model methodology user interface design 
helander ed handbook human computer interaction 
pp 

amsterdam north holland 
kieras 
press 
guide goms model usability evaluation ngomsl 
helander landauer eds handbook human computer interaction 
second edition 
amsterdam north holland 
kieras bovair 

acquisition procedures text production system analysis transfer training 
journal memory language 
kieras meyer 
press 
overview epic architecture cognition performance application human computer interaction 
human computer interaction 
kieras polson 

approach formal analysis user complexity 
international journal man machine studies 
goms family comparison kieras wood meyer 

predictive engineering models epic architecture high performance task 
proceedings chi denver usa may 
new york acm 
pp 

polson 

computational model skilled graphical user interface 
proceedings chi monterey may acm new york 
pp 
lane napier 

predicting skilled hierarchical menus keystroke level model 
human computer interaction pp 

lerch mantei olson 

translating ideas action cognitive analysis errors spreadsheet formulas 
proceedings chi 
new york acm 
nelson lehman john 


integrating cognitive capabilities realtime task 
proceedings sixteenth annual conference cognitive science society atlanta georgia august 
newell simon 

human problem solving 
englewood cliffs nj prentice hall 
olson olson 

growth cognitive modeling human computer interaction goms 
human computer interaction 
polson 

transfer retention 
guindon ed cognitive science application human computer interaction 
hillsdale nj erlbaum 
pp 

polson lewis 

theory design easily learned interfaces 
human computer interaction 
rieman lewis young polson raven writing desk 
lessons interface consistency analogical reasoning cognitive architectures proceedings chi boston ma usa april 
new york acm pp 

murphy 

pert program evaluation review technique cpm critical path method 
boston materials management institute 
webster new collegiate dictionary 

springfield ma merriam 


operator model human covert visual attention 
ph thesis university michigan 
vera rosenblatt 

developing user model intelligent agents 
moore lehman eds 
proceedings seventeenth annual conference cognitive science society 
mahwah nj lawrence erlbaum 
pp 

ziegler hoppe 

learning transfer text graphics editing direct manipulation interface 
proceeding chi 
new york acm 
