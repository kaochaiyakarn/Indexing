april src research report protection programming language translations systems research center lytton avenue palo alto california www research digital com src mart abadi systems research center charter src advance state knowledge state art computer systems 
establishment performed basic applied research support digital business objectives 
current includes exploring distributed personal computing multiple platforms networking programming technology system modelling management techniques selected applications 
strategy test technical practical value ideas building hardware software prototypes daily tools 
interesting systems complex evaluated solely extended allows investigate properties depth 
experience useful short term refining designs invaluable long term advancing knowledge 
major advances information systems come strategy including personal computing distributed systems internet 
perform complementary mathematical flavor 
established fields theoretical computer science analysis algorithms computational geometry logics programming 
explores new ground motivated problems arise systems research 
strong commitment communicating results exposing testing ideas research development communities leads improved understanding 
research report series supplements publication professional journals conferences 
seek users prototype systems common interests encourage collaboration university researchers 
protection programming language translations mart abadi april appear proceedings th international colloquium automata languages programming published springer verlag july 
springer verlag rights reserved 
published permission 
discuss abstractions protection correctness implementations 
relying concept full abstraction consider examples translation java classes intermediate bytecode language setting pi calculus implementation private channels terms cryptographic operations 
contents objects mobile code 

channels distributed communication translating pi calculus spi calculus 

full abstraction context tangible crimes measures crimes explained models mixed results detective erik discovered bor 
protection computer systems relies abstractions 
example access matrix high level specification describes allowed accesses subjects objects computer system system may rely mechanisms access lists capabilities implementing access matrix lam 
abstractions embodied programming language constructs 
java gjs popularized idea languages relevant security relation languages security older 
particular objects types long protection incompetence mor ls jl 
realm distributed systems programming languages libraries provided abstractions communication secure channels kind implemented cryptography bir wrw sun 
security depends design clear expressive abstractions correctness implementations 
unfortunately criteria correctness rarely stated precisely presumably rarely met 
criteria particularly delicate principal relies abstractions interacts principals lower level 
example principal may express programs policies terms objects remote method invocations may send receive bit strings 
bit strings receives may output software trusted respect abstractions 
situations common 
difficulties correct implementation secure systems standard notion refinement hoa lam preserve security properties 
ordinarily non determinism specification may intended allow variety implementations 
security nondeterminism may serve hiding sensitive data 
example consider specification describes computer displays arbitrary fixed string corner screen 
proposed implementation display user password string 
implementation may functionally correct may consider incorrect security purposes leaks information specification allow 
security properties different common properties fact argued security properties conform alpern schneider definition properties mcl 
reexamining example write user password proposed implementation specification 
set behaviors allowed specification depend clearly equivalent password hand andi equivalent observer distinguish 
mapping specification implementation preserve equivalence may say fully plo 
may explain perceived weakness proposed implementation failure full abstraction 
suggests generally concept full abstraction useful tool understanding problem implementing secure systems 
full abstraction particularly pertinent systems rely translations languages example higher level languages objects secure channels lower level languages memory addresses cryptographic keys 
consider examples different natures review standard security concerns relating concerns pursuit full abstraction 
example arises context java section 
second concerns implementation secure channels relies pi calculus formal framework section 
thesis full abstraction part device discussing examples 
informal partly tutorial contributions perspective security problems examples new theorems 
related results appear technical papers sa afg 
full abstraction revisited say expressions equivalent language yield observable results contexts language 
translation language language equationally fully maps equivalent expressions equivalent expressions conversely maps expressions expressions plo sha mit 
may think context expression attacker interacts expression trying learn sensitive information ag 
view condition means translation introduce information leaks 
equations may express secrecy properties integrity properties translation preserve properties 
consequences condition focus ignore condition useful particular excluding trivial translations 
closely related equational full abstraction logical full abstraction 
translation language language logically fully preserves logical properties expressions translated lp 
longley plotkin identified conditions equational logical full abstraction equivalent 
concept full abstraction loosely distinguish nuances 
expression source language may written silly malicious way 
example expression may program broadcasts sensitive information expression insecure translation 
full abstraction clearly sufficient security discuss relevant 
objects mobile code java programming language typically compiled intermediate language call jvml implemented java virtual machine gjs ly 
jvml programs communicated networks example web servers clients 
client may run jvml program java virtual machine embedded web browser 
java virtual machine helps protect local resources mobile jvml programs allowing programs interact local class libraries 
local class libraries perform essential functions example input output viewed part java virtual machine 
translating java jvml example consider trivial java class class private int public void set int class describes objects field method set method set takes integer updates 
keyword represents self object keyword public indicates client subclass access set directly keyword private disallows similar direct access outside class 
field written read 
result compiling class jvml may expressed roughly follows 
official concrete syntax jvml designed human understanding 
class private int public void set int locals stack aload load iload load putfield set example indicates jvml fairly high level language particular features object oriented constructs classes methods self 
differs java methods manipulate local variables stack heap low level load store operations 
details operations important purposes 
method body declares local variables stack slots activation may require 
java virtual machine includes bytecode verifier checks declarations conservative instance stack overflow 
undetected dynamic errors stack overflow lead unpredictable behavior security breaches 
writer java program may security related expectations program 
simple example field read outside class may storing sensitive information 
example trivial information exploited way substantial interesting examples permit controlled access fields qualifier private similar qualifiers 
instance java class random number generation java util random may store seeds private fields 
examples security property java class may deduced presumed considering possible java contexts class 
contexts obey type rules java access private fields class 
java class translated jvml resulting jvml code security properties expected java level 
jvml code interacts jvml context java context 
translation java jvml fully matters considerably simplified case jvml contexts power java contexts 
unfortunately point current translation fully straightforward sense 
translation approximates full abstraction example translation retains qualifier private forx 
occurrence qualifier jvml level may surprising taken granted 
jvml level qualifier benefit helping programmers adhere sound software engineering practices programmers hardly write jvml qualifier omitted 
furthermore bytecode verifier perform standard typechecking guaranteeing particular jvml class refer private field jvml class 
bytecode verifier check dynamic errors stack overflow occur 
behavior jvml classes conform intended jvml semantics jvml code get jvml type system accessing private field inappropriately 
bytecode verifier restricts set jvml contexts effect resemble java contexts cf 
gjs 
set jvml contexts decreases set equivalences satisfied jvml programs increases translation java jvml gets closer full abstraction 
view full abstraction goal bytecode verification 
rigorous studies java virtual machine particular bytecode verifier coh sa qia fm 
studies focus type safety jvml programs accepted bytecode verifier 
long believed leroy proved somewhat different context lr strong typing yields basic important security guarantees 
guarantees concern language translations 
guarantees imply libraries written high level language expected security properties interact lower level mobile code 
obstacles full abstraction noted current translation java jvml fully 
variant example illustrates failure full abstraction 
reason believe illustrates reason failure full abstraction dean felten wallach balfanz discovered significant discrepancies semantics java jvml 
class class private int private int public void set int class inner class sun 
instance inner class corresponds instance outer class example 
inner class may legally refer private fields outer class 
java jvml include inner class construct 
compilers flatten inner classes adding accessor methods 
basically far compilation concerned may written classes class private int public void set int static int get return class get 
moved top level 
method get added reading details matter purposes 
method get just class package may refer get classes compiled jvml jvml context may able read way possible java level 
possibility results loss full abstraction jvml context distinguishes objects distinguished java context 
precisely jvml context runs get returns result distinguishes instances different values loss full abstraction may result leak sensitive information stored field leak contents private component object concern object part java virtual machine trusted java virtual machine example trusted principal digitally signed object class 
hand object part applet leak surprising applets usually protected execution environments 
better worse java security story complicated dynamic discussion suggest 
addition protection qualifier private java default mode protection protects classes package classes packages 
language level mode protection void class claim belong package 
java class loaders treat certain packages special ways guaranteeing trusted classes belong 
example inner classes pose security problem long packages 
hindsight clear base security expectations qualifiers private generally java constructs 
dean argued definition java weaker security viewpoint 
prudent strengthen definition full blown requirement full abstraction may necessary addition 
modest additions may suffice 
section discusses subject 
channels distributed communication section consider problem implementing secure channels distributed systems 
mentioned systems distributed programming offer abstractions creating secure channels 
implementations channels typically rely ensuring privacy integrity network communication 
relation abstractions implementations usually explained informally 
abstractions seldom explained self contained manner permit reasoning considering implementations occasionally 
concept full abstraction serve guide understanding secure channels 
trying approximate full abstraction rediscover common attacks countermeasures 
importantly pursuit full abstraction entails healthy attention connections implementation higher level programs implementation intrinsic properties implementation 
translating pi calculus spi calculus formal setting section pi calculus mil mpw mil serves core calculus primitives creating channels 
applying pi calculus restriction operator channels private 
discuss problem mapping pi calculus lower level calculus spi calculus ag ag ag implementing communication private channels encrypted communication public channels 
low level attacks cast counterexamples full abstraction mapping 
attacks thwarted techniques common literature protocol design 
attacks suggest fundamental difficulties achieving full abstraction pi calculus 
briefly review spi calculus 
variant consider syntax calculus assumes infinite set names infinite set variables 
names variables 
usually assume names variables different example different names 
set terms spi calculus defined grammar terms name variable mk encryption intuitively mk represents ciphertext obtained encrypting terms mk key symmetric cryptosystem des rc 
set processes spi calculus defined grammar processes nk output xk input nil composition replication restriction match case xk decryption output process nk sends tuple nk process xk ready input terms nk behave nk xk 
write nk xk result replacing free occurrence xi ni fori xk case xk explained bind variables xk 
nil process 
composition behaves running parallel 
replication behaves infinitely copies running parallel 
restriction behaves binds name match process behaves equal 
decryption process case xk attempts decrypt key form mk process behaves mk xk 
omitting constructs mk case xk grammars obtain syntax pi calculus precisely polyadic asynchronous version pi calculus 
example consider trivial pi calculus process process creates channel uses transmitting name consequence 
communication secure sense context discover interacting process context cause different message sent typical secrecy integrity properties 
properties expressed equivalences particular testing equivalences dh bn ag 
example may express secrecy equivalence names intuitively subprocesses may execute different machines network machines may physically secure 
explicate channel lowerlevel terms mapping sort encrypted connection multiplexed public channel 
example translate process spi calculus process case distinguished free name intuitively name known public channel 
name appears restriction key channel 
sender encrypts recipient tries decrypt ciphertext receives ifthe decryption succeeds recipient obtains cleartext hopefully 
translation strategy may promising 
numerous weaknesses describe weaknesses follows 
weaknesses represent obstacles full abstraction significant practical terms 
obstacles full abstraction leak traffic patterns pi calculus simply equivalent internal communication observed 
hand spi calculus case obvious implementation 
spi calculus process interacts case detect traffic decrypt traffic 
obvious way protect leak add noise communication lines 
context spi calculus may example compose implementations noise process process continually generates keys uses keys producing encrypted traffic public channel practice noise wasteful communication resources certain amount noise assumed exist communication lines matter course noise added implementations 
noise full abstraction fails 
trivial denial service vulnerability consider pi calculus process small variant example receipt message sending empty message 
process preserves integrity sense name received process equivalent obvious spi calculus implementations respectively case implementations distinguished traffic analysis trivial ways 
example implementation may stuck interacts decryption case fails ciphertext 
contrast implementation suffer problem 
informally may say process mounts denial service attack 
formally attacks ignored focusing process equivalences capture safety properties liveness properties 
addition implementations may strengthened commonly done practical systems 
example improvement may add replication case obtaining case replication protects exposure replay attacks shortcoming implementation strategy exposure replay attacks 
example consider pi calculus process differs previous example names transmitted asynchronously 
pi calculus process equivalent guaranteed go sender receiver exactly 
guarantee shared spi calculus implementation case case independently denial service attacks 
implementation combined spi calculus process duplicates message identical messages may result informally may say process attack 
standard countermeasures apply timestamps sequence numbers challenge response protocols 
example addition minimal challenge response protocol leads spi calculus process case case names serve challenges sent subprocesses meant receive received subprocesses send included challenge response protocol simplistic challenges may get crossed transmitted successfully simple matter programming protect confusion 
case challenge message accepted challenges replay attacks 
leak message equalities pi calculus identity messages sent private channels concealed 
example observer process discover 
example drop implicit assumption different names 
hand suppose translate process case case observer process tell knowing 
particular observer may execute process reads relays messages channel message channel messages equal 
distinguishes 
importance sort leak depends circumstances 
extreme case cleartext may guessed example cleartext attack dawn knowing message contains cleartext may significant 
simple countermeasure consists including different component encrypted message 
example implementation case case names differentiate messages transmitted 
inclusion messages ensures comparison ciphertexts reveal equality 
lack forward secrecy final example consider pi calculus process process transmits name channel private point 
releases sending public channel processes may recover contents message sent process equivalent interestingly example relies crucially scope extrusion feature pi calculus simpler calculi ccs mil 
spi calculus implementation case implementation lacks forward secrecy property disclosure key compromises data previously sent precisely process may read messages remember obtain decrypting decrypting older messages particular spi calculus process case case may read relay read decrypt release public channel full abstraction lost attacks case harder recover 
solutions may considered 
may restrict pi calculus ruling troublesome cases scope extrusion 
immediately clear expressiveness practical programming retained 
may add constructs pi calculus example construct name channel yield previous messages sent channel addition construct destroy source language equivalence preserved translation 
hand construct fairly artificial 
may indicate source language equivalences taken seriously 
particular may reveal aspects implementation warning forward secrecy may hold 
may specify source language properties maintained implementation 
solution realistic know write necessary specifications precise manageable form 
may try strengthen implementation 
example may vary key corresponds pi calculus channel instant computing new key hashing previous 
approach fairly elaborate expensive 
problem forward secrecy may neatly avoided shifting pi calculus join calculus fg 
join calculus separates capabilities sending receiving channel forbids communication capability 
asymmetry join calculus somewhat easier map lower level calculus cryptographic constructs 
mapping subject current afg impractical translation obtained fully 
full abstraction context progress security infrastructures techniques may important translations approximate full abstraction 
may rely intrinsic security properties target language code digital signatures code 
may rely security properties source language code precise specification asserts translation preserves properties 
unfortunately caveats apply 
intrinsic security properties target language code may extremely hard discover posteriori 
languages jvml designed ease reading 
furthermore proof properties may require analysis delicate complex cryptographic protocols 
certifying compilers nl mwcg may alleviate problems may fully solve 
digital signatures complement static analyses obviate 
particular digital signatures protect incompetence misplaced trust 
digital signatures applicable settings 
example digital signatures spi calculus processes little processes migrate machine 
limited understanding specify prove translation preserves particular security properties 
question deserves attention 
may worthwhile address special cases example information flow properties den captured type systems vis aba ml hr 
judicious abstractions contribute simplicity security 
hand abstractions translations give rise complications subtleties ultimately security flaws 
lampson wrote lam abstraction simplicity substitute getting right 
concepts full abstraction help getting right 
observations joint dric fournet georges gonthier andy gordon raymie stata 
drew dean mark lillibridge dan wallach helped explaining various java subtleties 
mike burrows dric fournet mark lillibridge john mitchell dan wallach suggested improvements draft 
title derived jim morris mor 
aba mart abadi 
secrecy typing security protocols 
theoretical aspects computer software volume lecture notes computer science pages 
springer verlag 
afg mart abadi dric fournet georges gonthier 
secure implementation channel abstractions 
proceedings thirteenth annual ieee symposium logic computer science june 
appear 
ag mart abadi andrew gordon 
calculus cryptographic protocols spi calculus 
technical report university cambridge computer laboratory january 
extended version ag ag 
revised version appeared digital equipment systems research center report january abridged version appear information computation 
ag mart abadi andrew gordon 
calculus cryptographic protocols spi calculus 
proceedings fourth acm conference computer communications security pages 
ag mart abadi andrew gordon 
reasoning cryptographic protocols spi calculus 
proceedings th international conference concurrency theory volume lecture notes computer science pages 
springer verlag july 
bowen alpern fred schneider 
defining liveness 
information processing letters october 
bir andrew birrell 
secure communication remote procedure calls 
acm transactions computer systems february 
bn michele boreale rocco de nicola 
testing equivalence mobile processes 
information computation august 
bor jorge luis borges 
la la br 
pages 
buenos aires 
titled death compass english translations 
coh richard cohen 
defensive java virtual machine version alpha release 
web pages www cli com may 
den dorothy denning 
cryptography data security 
addison wesley reading mass 
drew dean edward felten dan wallach dirk balfanz 
java security web browsers 
dorothy denning peter denning editors internet countering cyberspace pages 
acm press 
dh rocco de nicola matthew hennessy 
testing equivalences processes 
theoretical computer science 
diffie paul van oorschot michael wiener 
authentication authenticated key exchanges 
designs codes cryptography 
fg dric fournet georges gonthier 
reflexive chemical machine join calculus 
proceedings rd acm symposium principles programming languages pages january 
fm stephen freund john mitchell 
type system object initialization java bytecode language 
web theory stanford edu 
gjs james gosling bill joy guy steele 
java language specification 
addison wesley 
hoa hoare 
proof correctness data representations 
acta informatica 
hr nevin heintze jon riecke 
slam calculus programming secrecy integrity 
proceedings th acm symposium principles programming languages pages 
jl anita jones barbara liskov 
language extension expressing constraints data access 
communications acm may 
lam butler lampson 
protection 
proceedings th princeton conference information sciences systems pages 
lam butler lampson 
hints computer system design 
operating systems review october 
proceedings ninth acm symposium operating system principles 
lam leslie lamport 
simple approach specifying concurrent systems 
communications acm january 
lp john longley gordon plotkin 
logical full abstraction pcf 
jonathan ginzburg carl vogel jean jacques vy editors symposium logic language computation selected papers pages 
csli publications 
lr xavier leroy fran ois 
security properties typed applets 
proceedings th acm symposium principles programming languages pages 
ls butler lampson howard sturgis 
reflections operating system design 
communications acm may 
ly tim lindholm frank yellin 
java virtual machine specification 
addison wesley 
mcl john mclean 
general theory composition class possibilistic properties 
ieee transactions software engineering january 
mil robin milner 
communication concurrency 
prentice hall international 
mil robin milner 
functions processes 
mathematical structures computer science 
mil robin milner 
polyadic calculus tutorial 
bauer brauer schwichtenberg editors logic algebra specification 
springer verlag 
mit john mitchell 
abstraction expressive power programming languages 
science computer programming october 
ml andrew myers barbara liskov 
decentralized model information flow control 
proceedings th acm symposium operating system principles pages 
mor james morris jr protection programming languages 
communications acm january 
mpw robin milner joachim parrow david walker 
calculus mobile processes parts ii 
information computation september 
alfred menezes paul van oorschot scott vanstone 
handbook applied cryptography 
crc press 
mwcg greg morrisett david walker karl crary neal glew 
system typed assembly language 
proceedings th acm symposium principles programming languages pages 
nl george necula peter lee 
design implementation certifying compiler 
appear proceedings pldi 
plo gordon plotkin 
lcf considered programming language 
theoretical computer science 
qia qian 
formal specification java tm virtual machine instructions draft 
web page www informatik uni bremen de qian abs html 
sa raymie stata mart abadi 
type system java bytecode subroutines 
proceedings th acm symposium principles programming languages pages january 
sha ehud shapiro 
separating concurrent languages categories language embeddings 
proceedings third annual acm symposium theory computing pages 
sun sun microsystems inner classes specification 
web pages java sun com products jdk docs guide 
sun sun microsystems rmi enhancements 
web pages java sun com products jdk docs guide rmi index html 
van doorn mart abadi mike burrows edward wobber 
secure network objects 
proceedings ieee symposium security privacy pages may 
vis dennis volpano cynthia irvine geoffrey smith 
sound type system secure flow analysis 
journal computer security 
edward wobber mart abadi michael burrows butler lampson 
authentication taos operating system 
acm transactions computer systems february 
wrw ann wollrath roger jim waldo 
distributed object model java system 
computing systems fall 

