power domains supporting recursion failure reinhold heckmann fb informatik universitat des saarlandes saarbrucken mail heckmann cs uni sb de september program moggi semantics simple non deterministic functional language recursion failure described monad 
show monad known power domain constructions handle non termination properly 
novel construction proposed investigated 
embodies nondeterminism choice failure possible non termination caused recursion 
proposals moggi mog mog functional languages various notions computations denotationally described means monads 
monads constructions mapping domains values domains computations values 
computations involving destructive assignments instance handled state transformer monad wad computations non deterministic choice handled power domain constructions plo smy gun 
known power domain constructions covered algebraic theory hec hec 
consider functional language non deterministic choice failure recursion 
surprisingly known power domain constructions versions support failure suitable describe semantics language 
reason constructions described theory mentioned behaved respect nontermination caused recursion 
non determinism recursion independent concepts computation 
standing non determinism properly handled plotkin power domain construction variant recursion non termination described lift monad bottom element 
case language concepts coexist power domain constructions lifting simple combination provides appropriate description semantics 
organized follows section informally discuss aspects nondeterminism recursion 
section briefly introduce theoretical background cpo continuity monads strong monads algebraic theories free constructions 
section known monads describe recursion non determinism independently 
implicitly characterized free constructions suitable theories 
suggests introduce novel monad describes concepts computation free construction joint theory 
subsequent sections develop explicit representations new power domains 
section novel construction decomposed steps introduce recursion choice failure turn 
section power domains resulting novel construction decomposed terminating non terminating computations 
section show new power domain construction preserves algebraicity description base algebraic case 
non determinism recursion section want discuss informally aspects non determinism recursion 
non deterministic functional language introduced 
monads non determinism recursion described 
section informal semantics language indicates formal semantics look 
non deterministic functional language hec functional language powerful patterns 
may match different ways inducing computations different values 
hand may fail match leads computation resulting value 
experimental implementation language study effects non determinism 
syntactically language extension simply typed calculus base types including int bool pair list function types 
non determinism introduced implicitly overlapping failing patterns explicitly choice operator constant fail 
actual interpreter language behaves similar prolog interpreter tries show results expression user 
consider sample functions elem elem elem operator denotes list construction 
elem applied list rules definition elem applicable 
application rule immediately produces value second rule induces recursive call elem 
rules applicable rule producing second rule leading recursive call elem 
situation rule applicable execution fails terminates producing result 
interpreter produce values terminate 
abstractly produces set values 
operation specified explicit choice elem elem possible define operation pattern matching elem empty fail head elem tail consider definitions loop loop small fail nat expression fail immediately terminates producing result 
semantics 
expression loop produces result terminate 
denotational semantics non termination expressed semantics expression semantics small small 
semantics nat include set nat terminate keeps producing values forever 
expression small nat produces values 
terminate keeps computing forever producing results 
reason argument nat continuously produces numbers refuted small 
semantics small nat monads recursion non determinism denotational semantics follow mog mog distinguish domain values domain computations type 
semantics specified fixing monad special kind domain construction 
map domains values domains computations 
domains values base types gamma ff tg respectively 
domains computations types consist subsets domains may systematically derived base domains monad 
seen language syntactic means recursive definitions 
recursion inevitably induces possibility non termination 
recursion concept computation expression terminates results value terminate 
appropriate monad lift monad section adds new element domain values 
non determinism appears binary choice failure 
failure understand computation terminates producing value 
authors plo hp smy study languages choice failure 
language support failure possibility failing patterns 
similarly process languages abr page prolog cc support failure 
comprise choice failure notion non determinism concepts closely related affect number values computation failure neutral element choice 
non determinism recursion expression results finite set values type 
appropriate monad non determinism absence recursion construction set finite subsets 
cpo plotkin power construction plo hp added failure element section 
non determinism recursion coexist situation complex 
computation may terminate resulting finite number values yield finite number values followed non termination produce infinite number values 
unfortunately simple combination monads mentioned appropriate case theorem 
aim develop appropriate monad 
observing results expression consider language recursion non determinism greater detail 
assume expression interpreter observe results 
interpreter start evaluate expression 
possibilities evaluation terminate evaluation fails evaluation results value 
value displayed screen evaluation proceeds possibilities principal classes behavior finite sequence values followed failure finite sequence values followed non termination potentially infinite sequence values 
semantics want actual order values number occurrences specific value assume expressions result sets sequences 
case type bool values may observe terminating sets ftg ffg ft fg non terminating sets ft ff ft terminating sets abstractions finite sequences failure non terminating sets abstractions remaining sequences 
set ft fg instance produced expression true false ft produced nat nat produces natural numbers cf 
section predicate testing primality natural numbers 
impatient user probably hit interrupt key evaluation produce value keep producing values forever 
case know evaluation really non terminating interrupted 
behavior ftg looks interrupted producing 
behavior looks ft interrupted production final failure 
defining order may look prematurely interrupted obtain poset arrows denote relationships ftg ft fg ffg ak ft delta delta delta delta gamma gamma ft ff gamma gamma power domain experts notice known power domain constructions able produce domain ground domain ft fg 
visible connection known power domains domain looks plotkin power domain fg empty set artificially adjoined informal observation generalized 
leads description power domain construction section 
may notice power domain consists terminating sets depicted top row non terminating sets 
observation leads vertical decomposition section 
theoretical background section introduce theoretical background remainder 
briefly recall definition cpo continuous functions 
define monads strong monads 
algebraic theories algebras free constructions introduced 
cpo continuity poset partially ordered set set reflexive antisymmetric transitive relation 
identify poset carrier set points point correspondingly set points point lower set iff upper set iff refer standard notions upper bound upper bound join denoted directed set monotonic function 
cpo poset directed set join 
notice cpo need element 
monotonic function cpo continuous iff preserves joins directed sets 
cpo continuous functions ordered pointwise 
set cpo definition iff function cpo arbitrary cpo continuous 
category set sets arbitrary functions may considered full sub category cpo 
category cartesian closed terminal object product objects theta function space objects satisfying certain requirements mac 
set cpo cartesian closed 
ls shown simply typed calculus interpreted cartesian closed category types denote objects expressions denote arrows 
sequel identify expressions arrows types objects 
instance identity id object fx composition type superscripts variables dropped 
fact simply typed calculus interpreted category cpo means typed closed expression built continuous functions continuous function 
monads equivalent definitions monads definition called kleisli triple mog categorical definition terms functors natural transformations mac wad 
kleisli triple version fewer operations axioms 
definition monad category triple ffl maps objects objects ffl family arrows mx object ffl maps arrows arrows mx objects ef ffi id mx ffi ef ffi mz 
construction maps domains values type domains computations type maps values trivial computation rv immediately results extends computation valued functions defined values defined computations 
extended function ef applied computation execute computation apply resulting value 
pointed mog mog needs strong monads model computations denotational semantics 
characterized additional operation axioms 
cartesian closed categories strength monad equivalent internality internality means just family functions hom sets family arrows second order type mx 
category cpo means continuous category set means just monads set strong 
algebraic theories free constructions deal monads directly closely related free constructions algebraic theories 
usually algebraic theory consists set operators arity set axioms form equations operators 
want consider algebraic theories category cpo allow inequations axioms 
model algebraic theory category cpo shortly algebra cpo carrier set continuous functions operations interpreting operators satisfying axioms 
functions interpreting operators arity type carrier 
algebra homomorphism shortly morphism continuous function carriers algebras preserving operations 
empty theory operators axioms algebras just cpo morphisms just continuous functions 
theory subtheory set operators subset set axioms 
case algebras algebras morphisms morphisms 
definition free constructions free construction subtheory theory maps algebra algebra cx adding missing operations morphism cx algebra morphism unique morphism cf cx extending cf ffi cx called free algebra elements cx generators 
subtheory empty theory shall explicitly mention 
shall adopt notational convention denote constituents free construction letter different styles 
short names free constructions 
categorically speaking free constructions left adjoint forgetful functor algebras algebras 
free constructions uniquely determined isomorphism 
sequel show properties free constructions 
compose proposition composition free constructions free construction free ffi ffi ffi free proof straightforward 
mac general case adjoints 
show free algebras proper sub algebras containing generators 
categorically sub algebra algebra algebra monic morphism concretely subset closed operations directed joins assume cpo carriers 
lemma free construction algebra 
subset cx closed operations directed joins contains generators cx 
equals cx 
proof closed operations directed joins forms algebra inclusion cx morphism 
contains generators cx morphism cx may restricted morphism ffi freedom morphism uniquely extended morphism cc cx ffi cc morphism cx 
ffi cc ffi id ffi holds uniqueness statement freedom ffi cc id follows 
isomorphism 
free construction empty theory induces monad triple 
axiom immediate follow uniqueness statement freedom 
cartesian closed structure cpo show monad strong 
proposition free construction theory induces strong monad cpo 
proof cartesian closed category calculus proof 
proof uses observation cpo algebra function space algebra operations op raised operations op functions defining op op fx fx 
free construction gamma proof denote extension fixed cpo 
show function maps continuous 
specifying closed expression cf functions simple solution illegal know extension continuous 
know continuous continuous 
expression closed expression denotes continuous function variable 
consider closed expression cy fx type cy cy 
observation cy cy algebra cy algebra 
continuous extension cx cy cy 
rearranging arguments obtain cy cx uf cy cx cy 
show cf done uniqueness assertion freedom 
right hand side morphism definition left hand side morphism operation op cx cf op cx op cx op cy cy op cy op cy cf cf fact morphism extension show cf coincide generators 
cx yields fx cf cx cx xf fx shows cf cx yields fx 
monads recursion non determinism section introduce known monads model recursion non determinism independently 
implicit characterizations free constructions theory suggest definition monad combination concepts free construction combined theory 
recursion model recursion fixed point theorem employed continuous function cpo element unique fixed point 
domains computations cpo element 
special element denotes non termination 
pointed informally section recursive computations result proper value 
notion computation modeled lift monad adds new element cpo 
formally bx 
xg ordered 
bx bx iff extension bf 
bf bx fx 
easily proves continuous monad axioms satisfied 
lift monad characterized free construction theory nullary operation just axiom algebras cpo element morphisms strict continuous functions 
non determinism want model non determinism absence recursion 
described section non determinism introduced language constants failure binary choice 
need domains computation contain special element representing failure binary operation representing choice 
want order multiplicity results commutative associative idempotent neutral element 
algebraic theory commutative idempotent monoids ci monoids short 
morphisms theory continuous functions fa fb 
call functions additive 
closely related theory ci semigroups operator 
morphisms called additive 
hp known plotkin power construction defined plo algebraic cpo free construction ci semigroups 
hoo hec construction shown exist category cpo 
suggests define monad non determinism failure choice free construction ci monoids 
built composing free construction ci semigroups ci monoids 
proposition free construction ci semigroups ci monoids elements ny order ny ny operations na nb extension nf ny fy nf cpo results px adding new element incomparable element 
proof case analysis ny shown ci monoid 
nf defined obviously extension preserves 
additivity shown case analysis 
incomparable element element 
usually considered drawback notice need element semantic domains absence recursion 
applied set construction yields set fin finite subsets claim proved showing fin binary union empty set forms free ci monoid singleton mapping fxg 
extension maps set valued function defined elements set valued function defined sets fa fa 
fx obvious properly extends remember base types int bool interpreted cpo sets 
subcategory set cpo closed product function space monad form fin leave subcategory modeling non determinism absence recursion 
complexity cpo continuous functions needed case 
corresponds informal reasoning section claimed recursion non deterministic expressions terminate yield finite set values 
recursion non determinism previous sections saw non determinism recursion independently modeled free constructions theory ci monoids theory 
results suggest model combined effect free construction combined theory ci monoids 
theory table operators theta axioms morphisms fa fb 
similar theory ci semigroups operator axiom requirement 
development hoo hec suffices show existence free construction theory 
implicit description completely satisfactory shows internal structure powerdomains clarifies relationships monads lifting develop explicit representations subsequent sections 
representations show ff tg domain depicted section result informal reasoning 
decomposition free constructions section develop description decomposing free constructions applied sequentially 
suggested observation domain depicted section looks plotkin power domain tg empty set adjoined element 
theorem construction decomposed free constructions applied sequentially free construction empty theory theory lifting free construction 
theory theory ci semigroups free construction 
ci semigroups ci monoids elements fn 
order 


operations 

extension 
fy 
theorem tells composition lift monad monad ffi modeling choice failure 
ffi ffi 
ffi ffi 
differs additional relationship 

proof construction discussed section 
show free construction empty theory ci semigroups free theory ci semigroups maps cpo bottom cpo bottom strict pf strict strict 
assume element 
employ lemma show 
element px 
fp upper cone 
px 
obviously closed directed joins 
closed addition 
implies 


monotonicity idempotence addition 
contains generators px 
monotonicity px follows px element strict 
cpo element py strict continuous 
pf px py strict pf px pf py construction show construction 
free ci semigroups ci monoids 
similar proof prop 
shown free ci monoids 
concludes proof theorem 
decomposition theorem may describe structure power domains bit explicitly 
corollary cpo power domain results adjoining new element elements order iff 
employing coalesced sum phi may write 
phi 
representation closely related power construction abr page defined 
ffi comparison 
ffi ffi relation ffi follows obtain domains applying power domain means applying abramsky power domain lift 
difference important implications algebraic properties properly extend non strict functions monad category cpo 
monad category cpo element continuous strict functions free construction cpo ci monoids shown proof theorem 
abr algebraic property explicitly mentioned 
vertical decomposition decomposition theorem suggests failure element special 
added artificially third component construction 
section vertical decomposition power domains terminating sets upper parts power domain non terminating sets located lower parts 
decomposition play special role 
introduce auxiliary algebraic theory 
decomposition theorem stated proved 
applied case discrete domains 
lower monoids order state prove decomposition introduce algebraic theory 
lower monoid monoid neutral element equivalently lower monoids may described axiom lower ci monoids ci monoids 
sequel show ci monoid contains lower ci monoid canonical mappings back forth 
ci monoid 
sets 
fy yg coincide idempotence 
closed directed joins consider second representation 
sub cpo closed addition 


contains 
neutral element addition 
idempotence 
forms lower monoid 
function induced subset inclusion subset closed addition directed joins function additive strict continuous 
general preserve 
calculations previous paragraph function induces strict additive continuous function ff composition ff ffi identity representation fy yg subset summarizing proved proposition ci monoid lower ci monoid ffl ff strict additive continuous ffl strict additive continuous ffl ff ffi id ffl ffi ff id may show 
ff 
ffi free construction ci monoids lower ci monoids 
need additional property 
vertical decomposition theorem decomposition theorem need notation 
section free construction ci monoids 
free construction lower ci monoids denoted variant known lower hoare power domain construction 
explicit representation terms cpo scott closed subsets ground domain ordered inclusion 
scott closed sets lower sets closed directed joins 
mapping continuous ci monoid 
unique additive extension ffi canonical mapping compare members decomposition theorem 
bifinite domain explicitly set convex lawson closed subsets law 
case concretely lower closure decomposition theorem states consists instance containing terminating sets instance containing non terminating sets 
formal symbols label members components 
theorem domain power domain elements fla xg xg order la lb iff pa pb iff la pb iff pa lb holds constants addition la lb pa pb la pb pa lb generators concepts introduced prop 
define 
extension pa fa la ff ffi proof show described ci monoid 
obviously cpo 
element commutativity idempotence addition inherited neutral element ffl pa pa ffl la la fact maps member additivity 
associativity addition shown analyzing obvious cases choosing elements cases additivity needed la pb pc la pc la pb pc continuous function ci monoid ff ffi ff ffi defined continuous 
combination continuous succeed showing monotonic border need auxiliary lemma ffl ff ffi ffi ff ffi lemma shown freedom definition additive ff ffi additive similarly additive ff additive prop 

sides additive 
coincide generators ff ffi ffi ff ffi ff ffi ffi ffi ff ffi ffi ff ffi concludes proof auxiliary lemma 
show monotonic properly acts operations generators 
abbreviate ff ffi la ff fb pb fx place marked auxiliary lemma 
remaining cases obvious 
additivity consider representative cases 
fourth case follows commutativity 
pa pb fa fb pa pb la lb la lb la pb fb la pb place marked auxiliary lemma 
absorbs subset show uniqueness extended functions 
strict additive continuous function ffi show ffi ffi ffi ff ffi 
function ffi maps additive definition additive assumption 
ffi ffi ffi holds definition 
freedom claimed equation ffi follows 
function ff ffi ffi maps additive strict composition additive strict functions ff 
additive strict functions lower monoids additive 
ff ffi ffi ffi ff ffi shown equality ff ffi ffi ff ffi follows freedom ff ff ff ff ff ff ff ff fx holds additivity composing obtain ffi ff ffi ffi ffi ff ffi 
additivity show images ffi absorb la la la ffi ff ffi ffi ffi follows ffi ffi ff ffi required 
concludes proof theorem 
discrete case theorem compute power domains discrete ground domains cpo discrete iff order equality iff base types language modeled discrete domains 
easy see discrete cpo form full sub category cpo isomorphic set 
apply theorem determine power domains table theory lower ci monoids ci monoids elements subsets finite subsets order constants addition union union generators fxg fxg table derived general knowledge power domain constructions hp hoo hec easily verified directly 
infinite subsets included obtained directed joins finite subsets provided ordering subset inclusion 
function operates identity sets 
theorem power domain consists elements la pb situation simplified pb replaced la represented consists subsets contain finite 
proposed representation additional advantage addition set union 
shown looking clauses addition theorem 
completely translating theorem new representation obtain theorem discrete domain power domain elements fa finiteg order case iff case iff constants addition union generators fxg theorem shows ft fg looks picture section 
condition infinite sets contain reflects fact processes produce infinite number results terminate finite time 
order theorem interpreted intuitively long set corresponding process terminate may produce results disappears process terminated set results increase 
base algebraic case section consider case algebraic domain show algebraic provide explicit description base 
cpo algebraic base subset carrier directed sets td implies directed set join poset induces algebraic cpo base isomorphic ideal completion set directed lower sets ideals ordered inclusion 
ideal completion free construction category posets category cpo monotonic function cpo uniquely extends continuous function base theorem theorem algebraic base algebraic base elements order iff constants addition generators fxg fxg special symbol set 
union defined 
monotonic function ci monoid unique additive strict monotonic extension defined fe fe proof verify claimed base poset cpo algebraic structure free ci monoid poset done showing operations listed theorem defined monotonic satisfy required algebraic laws 
ideal completion shown free ci monoid cpo isomorphic base structure representation base theorem closely reflects vertical decomposition theorem pairs correspond base ordered inclusion pairs isomorphic base fle egli milner order denotes convex hull 
isomorphism 

le 
le 

explicit representation base allows derivation domain theoretic properties refrain formally include definitions properties 
informally explained proof theorem 
theorem cpo construction preserves properties cpo algebraicity algebraicity continuity finiteness finite continuity 
bounded completeness property scott domain preserved 
proof preservation algebraicity theorem 
algebraic cpo algebraic base countable 
theorem shows countability base preserved 
domain continuity preserved continuous cpo retracts algebraic cpo law retract relationship preserved functors 
finite cpo algebraic base 
explicit representation theorem shows power domain finite 
bifinite cpo directed limits finite cpo 
functors functional part continuous see prop 
commute directed limits sp 
finitely continuous cpo retracts bifinite cpo 
bounded completeness preserved powerdomains contain plotkin power domains sub domains theorem 
plotkin power construction known destroy bounded completeness plo 
scott domains bounded complete algebraic cpo 
proposed investigated novel power domain construction 
applied cpo freely generates power domain equipped binary operation modeling choice constants failure non termination 
free construction introduced section explicitly described subsequent sections 
representation composition free introductions order theorem modified need preserve 
completely different representation partitions novel power domains plotkin power domains lower power domains stacked theorem 
described base algebraic case theorem investigated preservation domain classes theorem 
call construction power domain construction substantially differs power domain constructions known far 
constructions covered general algebraic theory hec hec built axioms extension 
axioms kleisli triple see def 
axioms additivity extended functions axioms additivity extension 
axioms require 
satisfied extended functions strict 

axioms hold 
abstractly shows moggi idea represent concepts computation strong monads requires research 
wadler wad moggi mog succeeded representing host concepts computation monads provided considered programming language incorporates exactly concepts 
soon different notions computations coexist language situation complex 
monad modeling non determinism non termination coexistence simple combination lifting monad 
extended mog moggi tries solve problem combining monads raising level abstraction proposes describe concept computation function transforms monads contain concepts computation monads preserve old concepts additionally incorporate concept 
complexity combining notions computations disappear algebraic level constitutes main part 
modeled notions computations algebraic theories theory non determinism non termination coexistence simple join theories concepts isolation see section 
worth think replacement monads free constructions adjoints modeling computations 
shift big sounds free construction induces monad conversely monad free construction suitable algebraic theory general structure ones occurring mac 
correspondence monads free constructions proposed shift just isomorphic change view 
reinhard wilhelm fritz muller helmut seidl andreas fruitful discussions careful draft reading 
abr abramsky 
domain equation bisimulation 
information computation 
asperti longo 
categories types structures 
foundations computing series 
mit press 
cc clocksin mellish 
programming prolog 
springer verlag 
gun gunter 
relating total partial correctness interpretations non deterministic programs 
hudak editor principles programming languages popl pages 
acm 
hec heckmann 
functional language specification complex tree transformations 
ganzinger editor esop pages 
lecture notes computer science springerverlag 
hec heckmann 
power domain constructions 
phd thesis universitat des saarlandes 
hec heckmann 
power domain constructions 
science computer programming 
hoo 
powerdomains 
technical report ruu cs rijksuniversiteit utrecht november 
hp hennessy plotkin 
full abstraction simple parallel programming language 
editor foundations computer science pages 
lecture notes computer science springer verlag 
law lawson 
versatile continuous order 
michael main melton michael mislove schmidt editors mathematical foundations programming language semantics pages 
lecture notes computer science springer verlag 
ls lambek scott 
higher order categorical logic volume cambridge studies advanced mathematics 
cambridge university press 
mac mac lane 
categories working mathematician 
springer verlag 
mog moggi 
computational lambda calculus monads 
th lics conference pages 
ieee 
mog moggi 
modular approach denotational semantics 
pitt 
curien abramsky pitts poign rydeheard editors category theory computer science pages 
lecture notes computer science springer verlag 
mog moggi 
notions computation monads 
information computation 
plo plotkin 
powerdomain construction 
siam journal computing 
smy smyth 
power domains 
journal computer system sciences 
sp smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
wad wadler 
comprehending monads 
symposium lisp functional programming pages 
acm 

