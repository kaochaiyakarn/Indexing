application finite automata debugging natural language vocabularies tomasz kowaltowski cl audio lucchesi jorge stolfi department computer science university campinas sp brazil lucchesi dcc unicamp br finite acyclic automata versatile tool applications involving natural language vocabularies 
describes experiments debugging semi automatically vocabularies suggesting non existent missing words 
partial statistics shown portuguese italian english vocabularies 
finite automata provide convenient tool representing manipulating efficiently sets words 
traditional applications compiler construction automata model implement lexical analyzers 
interesting examples applications finite automata solve specific problems natural language processing instance volume edited gross perrin 
idea compressing large vocabulary words natural language minimal acyclic deterministic automaton fairly new 
example described appel jacobson automaton popular game scrabble 
lucchesi kowaltowski described finite automata basis building efficient spelling checkers mentioned possible applications 
important properties finite automata explored applications compactness representation speed information retrieved see 
companion study reduce size representation loss access efficiency 
authors listed alphabetical order 
focus application automata debugging natural language vocabularies 
vocabularies large collections tens thousands hundreds thousands words 
collections typically compiled disparate sources contain misspellings omissions 
detecting errors usually tedious time consuming task 
complex framework romance languages large number forms particularly case verbs 
account compilation english vocabulary forms basis unix spelling checker spell mcilroy 
order address problem debugging vocabulary built set languageindependent tools help detecting errors 
tools identify words conform simple pattern candidates excluded vocabulary 
tools suggest words vocabulary addition simplify sense automaton candidates inclusion vocabulary 
successfully tools debug large portuguese italian english vocabularies obtained various sources 
stressed portuguese english vocabularies available reasonably consistent case italian incomplete 
provided interesting example able double number valid words result technique 
natural languages irregularities exceptions debugging process completely automated 
matter program may identifying errors suggestions validity eventually judged human expert 
programming environment tools software described implemented language modula developed systems research center digital equipment 
main reasons choice simplicity language object oriented programming paradigm availability unix workstations 
basic library debugging tools built top library efficient routines manipulating large acyclic automata developed years 
main modules abstractions library ffl dag implements acyclic directed graphs abstraction ffl reduced implements reduced finite acyclic automata provides operations inclusion exclusion enumeration membership test words controlled enumeration states transitions prefixes suffixes state ffl implements efficiently boolean operations sets words accepted automata 
library includes auxiliary abstractions handling texts files altogether basic library contains lines source code 
tools debugging tools implemented separate programs ffl simple program lines building finite automata including excluding sets words collecting statistics ffl main debugging tool lines performs analyses automaton including unproductive states states contribute words language similar states pairs states accept similar sets suffixes lexical classes states correspond major lexical categories lexical radicals sets prefix strings correspond lexical stems ffl analysis tool lines tests tries assign words language set lexical classes basis inflection patterns 
program describe sofar main debugging tool detail 
debugging experiments reported section largely output 
unproductive states functions tool look possible misspellings foreign words vocabulary looking states words 
state automaton set prefixes set words spelled paths automaton starting initial state analogously denotes set suffixes set words spelled paths starting reaching final state 
easy see set words language paths go particular state delta number words exactly jp delta js program considers state unproductive jw user specified parameter typically 
state unproductive removing operator delta denote concatenation sets strings 
automaton incoming outgoing transitions eliminate words language 
unproductive state program prints list words 
merging sorting lists eliminating duplicate entries manually check validity words remove genuine mistakes 
experience shows misspellings foreign words vocabulary come listing 
see section examples 
similar states function program suggest words may missing vocabulary looking pairs similar states 
intuitively states similar collapsed single state adding relatively small number words language 
definition relatively small controlled user extent basically means prefix sets states small suffix sets differ small number strings relative absolute terms 
precisely program considers similar 
js js 
js js js js 
js 
jp jp 
jp delta js jp delta js user parameters 
pair distinct states meets criteria program outputs set strings delta delta words addition vocabulary cause states collapse assuming state reachable 
choice parameters usually depends vocabulary maximize number valid suggestions generating invalid ones 
trial error 
matter fact criteria introduced response previous experiments produced exaggerated number suggestions 
usually test runs program obtain satisfactory list suggestions 
operator denote set difference 
merging output lists eliminating repeated entries manually check validity suggestion 
vocabularies obtained far process typically produces thousands distinct suggestions valid words missing vocabulary 
typically manual inspection uncovers number misspellings foreign words vocabulary revealed appearance peculiar suggestions formed prefixes suffixes 
adding valid suggestions vocabulary correcting errors usually run resulting automaton program similar parameters 
states suffixes change output second run usually contains suggestions run fraction new suggestions valid 
typically go iterations process percentage valid suggestions output small justify cost manual checking 
lexical classes third function program analyze describe lexical structure wordlist 
particular say state automaton corresponds lexical class reached initial state certain minimum number distinct paths program parameter paths go lexical class 
set lexical radicals state set prefixes spelled going lexical classes 
concepts useful identifying approximations true lexical categories language basis determining parameters program described section 
experimental results applied program vocabularies varying degrees 
report experimental results achieved portuguese italian belong romance group english 
portuguese portuguese vocabulary started courtesy tecnologia 
ao paulo words collected processing texts published newspapers followed manual verification 
coverage stems non verb derivatives somewhat inconsistent verb complete contained erroneous words 
statistics automaton words states final states valid transitions unproductive states analysis threshold produced list states traversed word 
distinct words set shown notice word contribute unproductive states 
words fall classes ffl words spelled incorrectly example ffl words unusual forms instance words foreign origin celsius ffl words appear corresponding inflected forms example noun ang appears plural ang verb form appears related forms word appears wrong form singular version 
ran analysis second time meaning states paths going considered unproductive 
time program reported unproductive states due words 
new suggestions perfectly valid words similar forms plurals pairs bar bar 
run incorrect pairs words missing singular plural forms dil 
analysis similar states tried values parameters automaton 
typical experiment required js js js jp delta js jp delta js values parameters program identified pairs similar states suggested list words inclusion 
suggestions valid included vocabulary 
expected suggested valid words missing inflected forms words vocabulary material base word collection 
hand suggested words non existent regular forms irregular verbs instance 
suggestions absurd resulted unexpected state pairs considered similar 
example suggestions africa eu pr abdomen pref kaiser kelvin dil ra ang ao luc satan bonus status em asis celsius ao cl imax indian ao oes ens list words responsible unproductive states portuguese vocabulary parameter 
listed prefixes automati take automaton states suffixes identical suffixes 
noticed doubtful cases clear derived form exists instance verb 
case final decision taken expert 
italian applied italian vocabulary courtesy david university milan words considerably complete systematic portuguese especially regard inflected forms verb tenses 
normal circumstances incomplete vocabulary probably considered 
italian dictionary public domain available network italian languages fluent 
incompleteness italian vocabulary explains corresponding automaton proportionately bigger portuguese words states final states valid transitions case went iterations debugging cycle checking program suggestions updating automaton time 
unproductive state analysis case states words produced successive runs suspicious words 
words obvious misspellings example 
words valid appearance list revealed omission related forms example appeared list plural missing 
altogether suggestions uncovered real errors vocabulary 
analysis similar states carried times values similarity parameters 
suggestions words included vocabulary produced 
visual processing suggestions showed valid 
case portuguese number include suggested words validity unable decide 
partial result vocabulary grew original words words increase 
interesting notice growth automaton modest words states final states valid transitions english tested tools inflected english vocabulary words result merging public domain word lists retrieved ftp sites world 
surprisingly automaton substantially bigger absolute terms relation size vocabulary automata portuguese italian words states final states valid transitions debugging vocabulary unfinished 
run unproductive states analysis listed suspicious words considered inappropriate manual check 
words proper nouns derivatives foreign terms 
get misspellings 
listed words valid revealed indirectly omission related forms 
altogether words checked manually led real bugs vocabulary 
attempted run analysis similar states times increasingly strict similarity criteria output lists usually big hundreds thousands words runs aborted 
managed get list suggestions declaring similar pairs states suffixes common differing words 
list checked manually entries valid words missing vocabulary 
difficulty getting reasonable list suggestions expected 
english strongly inflected language concept similar states depends existence related forms word 
program presently developing testing program purpose perform sophisticated version similar states analysis account information structure language provided user 
program take input acyclic automaton collection classes sets word endings supposed correspond important lexical categories language 
case romance language example set endings specific verb conjugation class set gender number endings specific category nouns 
main task program determine state automaton subcollection fg classes approximately contained suffix set implication prefix string leading state looks stem language belongs classes completed corresponding endings 
instance case english vocabulary program assign classes state reached prefix ration 
regular verb endings ed 
regular noun endings 
noun adjective endings 
including classes program explaining words state rationally 
note classes account word suffix assuming program alternative verb class es ed class get included state reached prefix 
assignment explain word 
assignment classes states automaton defines idealized version vocabulary consisting words delta set states set prefixes state assignment defines factoring word idealized language stem prefix state string assigns word specific class 
note classes need disjoint certain words rations english portuguese may factored classified way 
assigning classes states languages perfectly regular input vocabularies complete error free algorithm simple merely assign state set classes contained suffix set 
unfortunately algorithm suitable real world data omission single word vocabulary prevent class included 
program include class contained long difference smaller user specified threshold 
part class matching process builds finite acyclic automaton accepts idealized version input vocabulary 
initially empty 
program examines states input automaton topological order final state root 
state program determines matching classes adds new state recognizes idealized version sigma fag delta stands state reached letter currently experimenting complex criteria choosing matching classes 
instance case highly inflected languages idea consider classes order decreasing size add class ni bigger threshold 
tool applications require words marked lexical category verb noun finer categories transitive intransitive reflexive 
hope program useful aid task adding information plain wordlist 
input classes may obtained grammar books linguistic sources may extracted wordlist help knowledge language 
conceivable may turn useful tool linguistic research 
case expect useful debugging tool 
subtracting idealized vocabulary original get list words sets endings fit classes 
misspellings foreign words appear list 
preliminary experiments direction quite encouraging 
program useful tool splitting word list sub lists lexical criteria say verbs non verbs regular original list easier debug 
experience tool suggests effective combined interactive 
improved tool repeatedly look possible problem automaton unproductive state pair similar ones corresponding suggestions user manual verification immediately incorporate corrections automaton 
new tool allow user interactively change parameters definition similar states 
desirable provide similar states algorithm means automatically detect ignore obviously bad suggestions words previously checked rejected user currently remove unix tool comm manual check words invalid letter combinations consecutive occurrences consonant 
believe goal implemented efficiently maintaining additional automata compact representing universe letter sequences length max invalid trigrams encoding set previously rejected suggestions 
example redefine states similar equal addition words change easily double tool efficiency ratio valid suggestions total suggestions 
final conclude finite automata provide effective model debugging large natural language vocabularies simple tools program 
appel jacobson wold fastest scrabble program 
commun 
acm 
gross perrin 
eds electronic dictionaries automata computational linguistics lecture notes computer science springer verlag 
harbison modula 
prentice hall 
kowaltowski lucchesi stolfi minimization binary automata issue 
lucchesi kowaltowski applications finite automata representing large vocabularies software practice experience 
mcilroy development spelling list ieee trans 
comm 
nelson 
ed system programming modula prentice hall 

