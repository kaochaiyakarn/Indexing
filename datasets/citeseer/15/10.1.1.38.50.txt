case study file system workload large scale distributed environment gill zhou sandhu computer systems research institute university toronto toronto gill zhou sys toronto edu please note smaller version appeared acm sigmetrics may extended 
large scale distributed file systems come wide spread supporting industrial organizations performance scalability file systems important issues 
key factors file server bottlenecks network congestion heavily dependent file system workload characteristics workload study systems reported date 
case study large industrial distributed file system supporting users 
study workgroup level individual file access level 
study reveals substantial departures observations previous academic centralized commercial environments 
average file size kbytes larger previous studies 
weekly periods third files active 
active files read activities dominate writes 
high level file sharing files shared workgroups 
hand single workgroup remains writer write active files suggesting dynamic file replication workgroup level may effectively improve file access performance 
noted shared files tend larger write activities decrease file sharing increases 
believe observations representative important class industrial computing environments valuable input file system design 
distributed systems rapidly prevalent form computing today 
largescale distributed systems common distributed file systems faced challenge providing efficient service systems hundreds thousands hosts 
ability file system deal increased traffic longer latencies inherent large scale environments significant impact performance distributed system 
performance techniques managing resources large scale distributed systems largely dependent workload system 
past workload studies file systems basis evaluating file system design strategies 
studies enabled designers quantify file system characteristics greatest impact performance 
contemporary file systems strongly influenced measurements reported past workload studies past workload studies conducted small scale academic distributed environments centralized commercial environments 
led significant gap understanding behaviour large scale distributed environments particular large scale distributed industrial environments usage patterns may differ significantly academic environments 
results workload study conducted large scale distributed industrial environment 
environment consists workstations users organized project oriented workgroups connected hierarchy local area wide area networks spread metropolitan areas 
primary activity users environment software development 
case study examines file system activity users involved development large software product 
subsystem users organized workgroups workgroup comprising workstations file server connected local area network 
type clustering workstations workgroups environment typical large scale distributed environments 
noted satyanarayanan clustering natural systems overcomes length bandwidth limitations local area networks simplifies administrative functions fault isolation 
purpose study clustering enables distinguish file system activities local intra cluster impact may global inter cluster impact 
scalability performance system determined entirely intercluster file system workload 
workload study focus exclusively intercluster inter workgroup file system activity 
due nature environment limited study high level measurement tools modify operating file system interfere anyway normal system 
result previous workload studies characterized file system activity level individual file open close read write study characterizes file accesses coarser granularity level files accessed particular workgroups 
detailed file system trace measurements interesting high level case study particular industrial environment complement knowledge gained past workload studies types environments 
measurements show number significant differences past workload studies conducted academic environments 
examination file size distribution shows files larger size compared files academic environments 
files accessed study period higher average sizes 
examination file sharing characteristics workgroups shows significant amount sharing files 
shared files relatively unstable modified daily weekly basis 
stark contrast earlier studies sharing limited read system files 
difference attributed collective project oriented nature industrial environments general opposed academic environments users tend individual projects rarely share data 
section discuss important workload observations previous studies 
section describes system environment data collection methodology 
static dynamic file system characteristics section 
section file sharing characteristics workgroups analyzed 
past workload studies analyzing workload particular environment important understand similarities differences observations studies similar different types environments 
studies large scale distributed environments currently exist compare observations types environments 
studies classified studies academic environments studies commercial centralized systems 
section briefly review primary results studies 
academic research environments studied ousterhout baker floyd blaze 
observations studies similar 
ousterhout analyzed trace user level activity vax environment berkeley 
environment supports users day trace period 
user activity low average minute interval users actively accessing files data transfer rates bytes second active user observed 
files small size accessed files kbytes bytes 
large files receive higher proportion accesses compared smaller files 
sharing files users analyzed 
study repeated distributed environment workstations file servers baker observations workload environment generally consistent original study 
files small size multi megabyte files exist 
concurrent sharing analyzed study low file opens resulting simultaneous sharing 
sequential sharing analyzed 
floyd conducted study university rochester environment similar original berkeley study similar observations 
files smaller files kbyte 
reads opposed writes observed dominant file access mode accounting file accesses 
analyzing file sharing floyd reported total file accesses shared files 
files system binary files user files 
study blaze conducted dec src research environment princeton university reports similar observations 
reads times higher compared writes 
sharing observed higher previously reported floyd academic environment read accesses files read users different workstations 
negligible read write sharing reported 
studies commercial environments analyzed ramakrishnan 
study different commercial vax vms environments number registered users note study reported active users sites range 
sites covered different environments including scientific research users program development users office applications users scientific applications users transaction processing users batch processing batch jobs publishing users 
environments wide range mean file sizes kbytes observed 
file size distribution skewed median file size small range kbytes 
observed transaction processing batch environments fewer files files environments times larger files interactive environments 
small fraction total files active read write accessed users 
reads times writes 
sequential sharing observed common mode sharing files accessed sequentially shared processes files simultaneously shared 
active files read shared 
read write shared files accounted active files 
shared files accessed ordinary files file opens reads writes shared files 
sharing files commercial environments analyzed traces ibm centralized installations 
observed active files shared 
observes shared files accessed ordinary files larger size stable lasted longer received fewer updates 
shared files read shared typically users 
workload studies discussed common workload characteristics observed academic commercial systems 
instance read accesses higher write file accesses files typically sequentially accessed 
file access traffic mainly comprises file transfers 
active files tend large size receive higher numbers accesses 
types environments differ workload characteristics file size sharing 
academic environments files generally small 
sharing low generally restricted system files 
conversely commercial studies report larger files higher degrees sharing 
addition system files higher fraction user files shared 
widely shared files observed stable longer lifetime account high proportion file accesses 
system description architecture system study part large industrial develops specialized computer software 
large organizations relied solely mainframes computation data storage gradual shift distributed computing distributed data management 
result current system hybrid centralized mainframes network workstations 
mainframes predominantly data storage repositories users interactively mainframes 
system organized hierarchically physical logical sense 
physically hierarchy networks including local area networks lans metropolitan area networks mans wide area networks wans impose hierarchical structure system classified workgroups lowest level communities level divisions highest level 
system architecture shown 
system architecture workgroup typically consists workstations file servers connected lan 
workgroups comprised users closely project share information data extensively 
organization hundreds workgroups 
workgroups sharing common area interest falling geographical location metropolitan area grouped community 
typically workgroups community connected combination lans mans 
communities metropolitan area turn workgroup lan workstations file server bbn community workgroup wan man division connected set mans form division different divisions connected wans 
file system structure mimics hierarchical structure 
data servers exist level serve components system hierarchy 
workgroup file servers intended primarily serve accesses workgroup 
community set community data servers mainframes workstations workgroup serve file access requests community 
level master data servers serve entire system 
addition level data cached replicated level order improve file system performance alleviate load interconnection networks 
study file system activities users working software development project observed 
users spread workgroups metropolitan communities 
community servers maintain replica files accessed users 
master data server manages replication community servers responsible maintaining consistency 
study concentrates interaction workgroups users project ignores interactions file system workgroup level community division 
file system types project files analyzed study 
source files object files meta files 
source files contain program source code object files compiled binary files meta files system directory files contain information source object files 
source object files accessed directly users meta files accessed updated system 
source files organized library stores manages files 
meta data files contain information structure library 
system supports multi site development replicating library community data servers 
users register library unique user id 
library acts control layer file system users controls changes source files ownership rules 
provides full development environment users features edit compile link software 
compiled object files generated released globally system wide week 
object files compiled specialized file servers downloaded community data servers 
users access files link test software modules allowed directly update global versions files 
types files exist system captured study accessed workgroup 
operating system running workstations workgroup file servers instance part local system local workgroup files part local system private workgroup 
additionally files exist users home directory private user accessed directly outside workgroup 
files part study characteristics file types different 
analyzing files single file type result dominant file type masking interesting characteristics files read object files source files 
reason types files characterized separately 
file system consistency file system replicates caches data levels system hierarchy 
observe mechanisms consistency dictated way files system performance constraints 
interesting study real systems trying cope large scale performance problems 
replication caching consistency mechanisms briefly described subsection type file 
read access source file workgroup copy source file requested community server workgroup file server cached locally disk 
workgroup server maintains copy source files accessed users workgroup 
cache workgroup server kept consistent half hour community server copy 
half hour workgroup server checks community server fetch new copies files modified check 
changes source files meta data files downloaded 
meta data files primarily keep track replica cached copy library determine files changed 
modifications source files performed locally user workgroup affect copies file workgroups explicit transaction sent user master server informing update 
files modified users workgroup typically acquire file write update number times extended period time send modified version master server propagates changes community servers 
time users workgroups may acquired file read write 
source files observe sharing patterns quite different different levels system hierarchy 
workgroup multiple users may file read write consistency maintained workgroup file server 
sharing workgroups read workgroups read file multiple readers workgroup modifies file number workgroups read file 
interaction levels order maintain consistency observed deliberately long hour order avoid placing load networks file servers 
object files may created locally users workgroup objects created workgroup propagate higher levels system 
modified source compiled object files highest level hierarchy propagated community 
workgroup file servers access object files directly community servers cache files locally file accessed times 
new versions object files created weekly basis versions object file existing particular time 
data collection methodology data logs study collected different levels system 
system unavailable instrumentation required detailed file system trace logs extracted information collected system administrators monitor system 
logs contain high level information files instance files accessed particular workgroup provide information level individual read write accesses files 
logs week collection period roughly gbytes size 
brief description log information extracted described 
static snapshot source files taken listing attributes files master server similar central server maintains full replicas files library 
static snapshot captures information files size time update 
capture write activity source files updates received master data server logged transaction trace 
information included trace user id user sending update names files updated transaction time transaction workgroup identification number 
logs collected source files follows 
log source files accessed community server cache misses workgroup server 

list source meta files downloaded half hour keep cached files library structure workgroup server consistent community server 

list accessed source files maintained workgroup servers 
list updated workgroup server night user file accesses day 
list include number accesses workgroup 
static information object files file sizes collected week listing attributes newly generated files 
dynamic access information collected workgroup servers maintain history file object file accessed workgroup 
information logged history files access time number accesses access time 
file system characterization data logs described previous section collected total week study periods 
week study period analyzed separately study periods compared 
section characterization file system analysis 
information file size distributions file usage patterns described 
study file sharing workgroups section 
files categorized active files active files 
file considered active specific week study period accessed user period 
active files classified read active write active depending type access 
file write active updated study period read active called read 
data logs follows 
static characteristics system number users static file size distributions 

dynamic file access characteristics read write activities size distribution active files 
static characteristics users registered library 
users divided different classes access privileges 
active class users allowed update files 
rest users observers read files allowed modify 
users belong sites metropolitan area master server account approximately total user population 
source files meta files object files constituent file types studied 
table presents total number files size distributions total amount data 
cumulative size distribution plot shown 
observations may table median file size types files kbyte 
words files smaller kbytes 
mean file size times corresponding median size source object type file number files file size distribution kbytes total data mbytes mean percentile percentile source meta object table file system characteristics file size kbytes source files meta data files object files file size distributions cumulative size distribution files 
types files show similar size distribution curves 
meta data files 
files high mean kbytes low corresponding median kbytes 
attributed characteristic files small number large meta files contain basic structure information library 
number object files higher number source files 
different versions object files maintained separately object file servers 
comparing past workload studies observe files larger environment systems 
example floyd reported average file size kbyte 
baker analyzing workloads berkeley observed files kbytes 
studying industrial workload ramakrishnan find file sizes range kbytes 
median file size kbytes reported study lower compared median kbytes study 
note number source files system scale users active users low compared past workload studies conducted smaller systems 
instance ramakrishnan study files site users studied 
reason large difference study consider project files ramakrishnan included user home directory system files 
dynamic characteristics number active files access patterns examined subsection 
non active files occupy storage affect file access performance system 
order design file system performs important understand active usage pattern file system 
meta data files active structure library constantly changing 
meta files accessed update library structure half hour 
analyze files 
table percentage files active weeks shown source object files 
table shows read write percentages active source files 
observed table third source files active week period 
analyzing breakdown active source files table shows active files write accessed possibly read accessed rest read accessed 
object files low active file ratio 
initially suspected user file accesses go newly created version past versions accessed frequently 
analysis active files older versions 
possibility low active ratio may high locality accesses small number files receive disproportionately high number accesses 
investigated conducting case study workgroups metropolitan area master server 
workgroups account users 
user read access distributions active object files shown 
skewed distribution observed active files accessed times accessed times 
implies files accessed times week week active source file active object file table active files week read active file write active file table read write active source files workgroups files receive accesses 
possible reason users need small number main object files link test set software 
average number accesses object files low number accesses quite high considering object files 
average object files generated master server week 
new files downloaded master server sites slow backbone networks order create replicas community servers 
report performance measurements file system worth noting file system activity related source object files creates significant network congestion affecting file system activities 
source file updates section write activity source files analyzed ways distribution updates shows percentage breakdown updates hour distribution updates maximum average minimum number updates hour days representative week 
access distribution object files number accesses active files week avg week avg week avg week avg avg distribution number updates write active files shown 
observed files updated 
average number updates received file 
implies total number updates equal number files updated 
shows hour distribution updates generated file system period 
similar distributions observed weeks 
activity higher am pm prime time 
week period average update transactions received master mainframe server 
approximately updates prime time hour 
peak activity observed file updates hour 
low amount write activity observed attributed library system behaviour library provides users copy file private 
user may private copy repeated updates period hours days weeks 
file changed globally user extensively testing changes sends transaction modified source file master server 
worth noting frequency users send updates master server may distorted observed response times master server 
master server responsible managing files software products 
instance users report number files hours day 
maximum average 
minimum number updates write active files week avg week avg week avg week avg hourly distribution updates distribution updates response times order hours submitting update master server receiving reply may cause submit fewer updates response times shorter 
active file size distribution distributed environment size active files impact network traffic generated file server utilizations 
section file sizes read write active source files separately analyzed 
size distribution object files discussed 
size distributions read accessed write accessed source files shown 
comparing active file size distribution static file size distribution table active files larger size 
static characteristics average file size kbytes observed 
section average sizes kbytes read active kbytes write active files 
write active source files average approximately times larger read active source files 
active object files shown higher average size kbytes compared static mean file size kbytes observed previously table 
file size kbytes read write week avg week avg week avg week avg file size kbytes week avg week avg week avg week avg size distribution active source files size distribution active object files past studies active files larger static files 
instance smith reports static average file size kbytes active average size kbytes 
academic studies report smaller file sizes past commercial environments consistent observations study 
correlation size distribution write active files read active files observed ramakrishnan find average size write active files larger read active files 
similar observation study write active file sizes twice read active files 
sharing workgroups understanding data sharing characteristics users extremely important designing scalable distributed file systems 
complexity performance policies file system manage user file accesses directly dependent degree sharing 
example information file sharing invaluable devising algorithms file caching 
policies migrate replicate files distributed system strongly influenced degree sharing 
shared files updated user usually incur large management overhead maintaining consistency 
hand shared files read accessed impose smaller overhead 
section sharing files workgroup level analyzed 
number workgroups sharing file define degree sharing file 
files accessed read write different workgroups called read write shared files 
library regulates modifications file concurrent write sharing observed 
sequential write sharing writing workgroup changes period allowed 
due way object files created removed described section fact users directly modify object files read sharing behaviour observed object files old versions disappearing week 
set meta files hand workgroups updated half hour 
sharing patterns meta files analyzed 
degree file sharing workgroups source object files shown 
source files read read write shared object files read shared 
absolute number files corresponding number sharing workgroups shown 
average degree sharing calculated labelled weeks 
observations source files drawn week source files shared workgroups 
files shared workgroups 
average sharing level approximately workgroups 
similar characteristics observed object files 
active files shared workgroups average degree sharing workgroups 
study analyzes sharing high level workgroups difficult compare observations directly past workload studies 
clear amount sharing environment higher observed past workload studies 
number workgroups sharing active files week avg week avg week avg week avg number workgroups sharing read week avg week avg week avg week avg degree sharing source files degree sharing object files instance observes files accessed shared users centralized commercial workload 
blaze reports active files shared users 
ramakrishnan find files shared processes 
read write sharing section study sharing files updated 
moment single workgroup permission update file 
files read shared workgroups 
degree sharing source files read write accessed analyzed 
correlation number updates degree sharing discussed 
shows number reader workgroups sharing file writer workgroup 
observations average write active files shared 
file shared reading workgroups average 
files shared workgroups 
shows correlation percentage total update operations number workgroups sharing file 
observed files number workgroups sharing write active files week avg week avg week avg week avg number workgroups sharing total update ops read write sharing source files distribution updates shared files shared larger number workgroups account smaller fraction write active files receive updates 
words sharing level increases updates file decrease 
similar characteristics observed commercial studies 
observes shared files accessed ordinary files stable updated ordinary write active files 
sequential write sharing workgroups sequentially write share files requesting library change write ownership 
section fraction write active files shared workgroups week analyzed 
observed write active files sequentially write shared workgroups week period 
percentage write active files shared sequentially workgroups negligible reflects stable write pattern writer workgroup change long period time 
sequential write sharing number writer workgroups write active files correlation sharing size correlation pattern size degree sharing source files shown 
average size files increase degree sharing workgroups increases 
words files widely shared workgroups tend larger 
reasons may large files contain information greater interest larger group users 
object files hand appear correlation size degree sharing 
may object files binary files having direct correlation source files source file contribute multiple binary files 
studies ramakrishnan observe shared files larger size compared non shared files 
results workload study conducted large scale distributed system 
study provide detailed trace analysis file system activity shows interesting file system characteristics large scale industrial workload 
instance number workgroups avg size files number workgroups sharing correlation size sharing source files correlation size sharing object files static snapshot file system shows files kbytes size 
third files active week 
read active files smaller size compared write active files 
active files read accessed write accessed 
active files shared workgroups 
average files updated shared reader workgroups readwrite sharing 
single workgroup remains writer write active files sequential write sharing week period 
number workgroups sharing read write active file increases number updates file decreases 
interesting correlation file size sharing observed files shared larger shared files 
file characteristics observed reflect number differences academic environments 
large scale extensive sharing user files system key differences 
files generally larger size extensively read write shared comparison small files kbytes negligible read write sharing reported academic workload studies 
note study may particular system 
example transaction semantics reduced number potential updates 
workload study complementary existing studies senses 
looks large distributed industrial environment academic small industrial environment 
second focuses cluster level characteristics individual workstations small clusters 
observations ways consistent existing ones suggesting characteristics individual workstation level recurs cluster level 
hand new characteristics emerge cluster level 
adds important piece puzzle distributed file system workload characterization 
baker hartman kupfer shirriff ousterhout measurements distributed file system proc 
th symp 
operating systems principles acm oct 
blaze caching large scale distributed file systems phd thesis princeton university jan 
floyd short term file patterns unix environment tr university rochester rochester new york mar 
optimization file migration distributed systems ph thesis computer science division university california ca report 
ucb csd april 
majumdar measurement analysis locality phases file behaviour proc 
performance acm sigmetrics acm 
ousterhout trace driven analysis unix bsd file system proc 
th symp 
operating systems principles acm dec 
ousterhout douglis nelson welch sprite network operating system ieee computer feb 
pang gill zhou implementation performance cluster file replication large scale distributed systems proc 
second workshop management replicated data monterey ca nov 
ramakrishnan biswas analysis file traces commercial computing environments proc 
acm sigmetrics performance conference newport june 
sandhu zhou cluster file replication large scale distributed systems proceedings acm sigmetrics performance conference may 
satyanarayanan influence scale distributed file system design ieee trans 
software engineering jan 
survey distributed file systems annu 
rev comput 
sci annual reviews 
smith analysis long term file patterns application file migration algorithms ieee transactions software engineering ieee jul 
