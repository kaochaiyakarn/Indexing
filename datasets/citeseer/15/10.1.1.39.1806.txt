efficient management large ontologies kilian taylor jim hendler university maryland computer science department college park md cs umd edu describes environment supporting large ontologies 
system single pcs workstations cluster workstations high parallel supercomputers 
architecture system uses secondary storage relational data base system efficient memory management optionally parallelism 
allows answer complex queries large ontologies seconds single processor machine fractions second parallel super computers 
main contribution approach open architecture system hardware software levels allowing easily translate existing ontologies system port system wide range platforms 
ontologies part research ai long time example ontology thesauri important part research natural language processing 
years ontologies increasingly important ai 
systems cyc lenat guha isi sensus project knight luk shown need larger ontologies newer research directions knowledge discovery databases kdd intelligent internet search engines name 
growing interest new efforts ontologies accessible larger user community scale size ontologies undertaken 
addition projects knowledge sharing effort facilitate combination different small ontologies larger complex ones increase need scalable ontology support tools 
currently ontology management systems support extremely large ontologies needed projects 
focus supporting querying management significantly larger ontologies 
system described created manage ontologies essentially unlimited size 
section describe different approaches ontology management 
section provides example ontologies practical applications 
describe implementation copyright fl american association artificial intelligence www aaai org 
rights reserved system provide series performance results single multi processor machines showing answer complex queries large ontologies seconds single processor machine fractions second parallel supercomputers 
related large ontologies dispute kr community exactly ontology particular question exemplars individual items filling ontological definition count part ontology 
example knowledge base containing information thousands cities countries contain assertion countries contain cities contain thousands assertions includes individual city country mappings 
system support kinds quite important differentiate 
term traditional ontology ontologies consisting definitions 
term hybrid ontologies combining ontological relations instances defined thereon 
second group may consist relatively small ontological part larger example base dense combination relations instances 
currently significant amount research done area ontology development management 
classified overlapping categories efforts create large ontologies define expressive languages representing ontological knowledge implement systems support ontology applications 
page limitations feasible give exhaustive list projects currently dealing creation ontologies 
significant examples include efforts create large ontology thesauri dictionaries sensus project isi knight luk wordnet project princeton miller efforts develop domain specific ontologies medicine umls umls snomed code efforts populate large common sense ontologies cyc project lenat guha japanese knowledge archive project 
efforts create specific ontologies important concern ontology research define expressive languages define ontologies 
important ontologies easily accessible reusable combinable 
examples current efforts include ontolingua gruber kif gruber conceptual graphs sowa 
third set projects focusing implementations ontology management systems 
group systems knowledge representation systems provide ontological support loom mac gregor classic borgida patel schneider cyc lenat guha sneps shapiro rapaport kris baader 
systems support languages expressive currently suited host large ontologies lack secondary memory support database integration techniques critical scaling kr systems extremely large ontologies especially larger hybrid ontologies necessary current applications 
alternatively projects designed directly examine issues scaling kr systems haase lee lee gkb karp paley shastri ajjanagadde parka hendler spector 
systems scalable certain extent quite limited closer object oriented data base system kr system gkb relies loom knowledge bases limited scalability loom lee system limited restricted set queries specific parallel computers cm cm limited number conjunctions handle single query 
system describe motivated parka research done umd 
extending algorithms system require supercomputers 
supports wide variety computer systems pcs workstations scale high parallel computer systems 
defined low level input language enables write simple translators reuse kbs ontologies defined systems 
secondary storage realized relational data base efficient memory management allows host largest existing ontologies 
addition show algorithms parallelized provide scaling 
parallel algorithms defined generic message passing primitives scheduling mechanisms provide independence specific machine architectures discuss detail 
hendler saltz cyc ontology part large system includes inference algorithms language definitions spanning categories 
motivating examples section describe ontologies various applications testing system 
choose publicly available research community 
briefly describe contents structure 
definitions previous section ontologies umls wordnet traditional ontologies 
third hybrid ontology 
umls unified medical language system umls large medical ontology created national library medicine 
nlm developed system support wide range medical applications including descriptions biomedical literature categorization clinical records development patient domain definitions knowledge systems 
main thesaurus umls consists frames represented semantic net 
total relations link types defined providing total assertions 
ontology project johns hopkins hospital create high level interface browsing lab databases data mining tasks databases 
word net wordnet line lexical system design inspired current psycholinguistic theories human lexical memory miller page 
system primarily developed natural language processing researchers mind ontology defines proposed standard comparing knowledge systems 
umls ontology comprised concepts class subclass hierarchy small number attributes relating 
attributes occurrences sense antonym attribute attribute entailment cause 
total number frames ontology contains assertions 
large hybrid ontology case ai planning system 
size umls different structure 
particular significantly attributes shallower ontology 
attributes relate frames total links 
large knowledge bases available world wide web www cs umd edu projects parka 
large examples applications system contain private licensed material 
system structure developing system supports storage loading querying updating large ontologies 
concentrates mainly querying crucial enabling capabilities section describe structure approach 
system consists basically layers 
lowest level system relational data base management system rdbms 
layer manages operations simple relational operations selects joins projections processing ontology queries 
layer maintain insert delete update relationships ontology case hybrid ontologies lower level instance data 
second level consists set efficient inferencing algorithms 
simple inheritance algorithms support inferential distance ordering inheritance horty thomason touretzky transitive closures arbitrary predicates transfer inferences lenat guha 
level sends basic requests relational operations database level 
relational table returned inferencing modules result produced sent back level storage rdbms 
third level general purpose user interface 
allows user insert delete update information ontology pose queries 
operations done graphical user interface 
allow large ontologies embedded computer systems datamining program system invoked api allows frontend processes access system 
api offers superset functionality graphical interface form remote procedure calls rpcs 
internal data structures information contained ontology stored relational database system 
section describe important specialized datastructures maintain information 
efficiency separate links called inheritance algorithms load directly memory soon ontology loaded system 
structural links encode class subclass hierarchy converted relational representation table datastructure dag directed acyclic graph kept memory repeatedly accessed inferencing inefficient load disk repeatedly 
dag encoded array integers provides extremely efficient access 
example approach optimizes performance ontological opposed database 
actual implementation number datastructures maintain indices translation tables low level data space precludes discussion details 
second important datastructure maintains non structural attributes 
stored binary relational tables database 
attribute exists table columns column containing integer id corresponding specific frame second contains id value attribute 
advantage keeping attributes separate binary tables minimal amount data loaded information concept requested 
multiple attributes stored single relation table loaded attribute interest 
optimization designed support large ontologies 
serial algorithm serial algorithm process ontological queries consists main parts 
preprocessing step divides complex query underlying constituents generates join tree specifying order execute combine subqueries expected best optimize performance 
preprocessor schedules substring matches queries variables specifying partial string example query umls defined 
second loop fetch data needed join perform requisite inferencing 
second part consists main steps 
relational tables needed particular subquery inferencing loaded rdbms 
tables relations specifying particular attribute may intermediate results produced previous iteration 
inference algorithms inheritance closure applied core data loaded previous step 
resulting data joined previous intermediate results stored back database 
algorithm repeats subqueries join tree completed 
key feature algorithm keeping efficient large ontologies relational database store ontology 
tables large kept primary memory inferencing algorithms efficient 
particular large ontologies exploit space time tradeoffs maximal portion online memory process inferencing store ontology large intermediate datastructures may generated loop described 
example queries results test system run wide range queries large ontologies described number 
small sample appear typical performance easily described 
queries expressed respect terms attributes described previously 
query conjunctive query consists variable constants practice efficiency gained algorithms outweighs overhead moving data disk 
unify ontology 
query number variables query number matches ontology 
umls queries medical systems described 
choose queries typical keyword search ontological inferencing medical systems 
umls find isa sibling qualified chemistry 
variable results umls find isa organism contains string virus 
variable results wordnet system comes query engine finding synonyms hierarchical relations query engine significantly stressed queries explore large 
demonstrate system particularly finding animals mammals respectively wordnet 
third query demonstrates efficiency algorithm complex query combining attributes hyponyms member meronyms 
queries difficult express wordnet query engine extremely inefficient 
wordnet find senses animal hyponyms 
variable results wordnet find senses mammal hyponyms variable results wordnet find senses tree hyponyms member meronyms senses genus 
variable results 
queries generated casebased planning system part problem solving reported 
queries complex previous contain attributes relating variables believe typical useful queries sorts hybrid ontologies 
queries paraphrase form specify number different attributes include 
find plans train delivered package particular location 
variables attributes results 
find top level plans regular truck variables attributes results 
show cities delivering liquid cargo 
variables attributes results 
results system queries run ibm rs workstation 
report timings table 
able issue queries wordnet wordnet query engine supplied wordnet ontology 
wordnet engine evaluated wordnet seconds compared seconds 
wordnet system takes seconds wordnet query engine took minutes followed request restrict query 
system timings queries similar differing seconds query time query time wordnet wordnet wordnet umls umls table sequential results times ms despite large difference number results returned wordnet shows great difference particularly necessary query large 
seen single processor results quite significantly better reported literature systems discussed related section 
unfortunately direct comparisons impossible cited papers report exactly queries wordnet umls publicly available ontologies 
parallel algorithms obvious way parallelize basic algorithm described task parallelization approach evaluating subquery parallel combining results available 
andersen 
parallelization tends utilize small number processors leave processors idle especially queries fewer subqueries available number processors 
example wordnet available processors 
experience handling large ontologies sorts queries quite prevalent 
example queries reported allow processors go idle node machine 
get better utilization large ontologies move data parallel approach 
particular processor loads parts relational table query subquery processing parts occur parallel 
algorithm processors processor preprocess query broadcast nodes subquery processor load pth partition necessary relational tables partition tuples processor execute required inferences data partition processors broadcast partial results subquery processor partial result received join result previous intermediate result write database new intermediate result subqueries processors scatter partial results gather node 
return result gathered node 
approach significantly higher degree parallelism 
theory maximal number processors limited size query wordnet wordnet wordnet umls table parallel results times ms largest relation 
practical applications number typically higher number available processors 
trade degree parallelism time broadcast exchange partial results 
amount data sent processor approximately gamma roughly amount data node receive total 
approximation guarantee data perfectly distributed 
node amount data sent subquery grows number processors large size size result gets large nearly data broadcast 
hand amount total disk operations processor linearly reduced operations expensive broadcasts 
addition total inferencing part speeds amount data inference algorithms applied reduced factor parallel results queries previously evaluated system parallel processors ibm sp parallel computer 
report timings table 
umls wordnet traditional ontologies query evaluation times decreased number available processors increased 
times wordnet example drop seconds seconds processors efficiency 
query times hybrid ontology exhibit behavior 
system performs primarily efficiency inferencing algorithms 
examples hybrid ontology system speeds nodes degrades slightly 
hybrid ontologies require significantly complex database processing 
system currently optimized larger ontologies current database algorithms speed overcome additional communication burden 
overcome doing better data distribution currently exploring issue 
umls took milliseconds serial machine parallel advantage simple queries 
efficient algorithms query processing existent large ontologies 
shown secondary storage form relational database efficient memory management high performance computing technology enabled handle large ontologies single parallel processing applications 
demonstrated efficiency algorithms large ontologies containing hundreds thousands assertions showing process queries seconds single processor fractions seconds multi processor system showing high degree scalability 
steps development system automate translation ontologies standard representation languages ontolingua kif 
intend extend number kbs sample queries details results available www www cs umd edu projects parka 
continuing push application technology especially large ontologies kdd 
discussed system efficient hybrid ontologies may scale large parallel supercomputers 
solve problem exploring integration system advanced databases particularly parallel db systems 
example binary structure relations record attributes similar parallel rdbms monet kersten siebes map nicely system 
similarly aspects system resemble features object oriented databases exploring languages integration 
acknowledgments research supported part onr arpa dast arl daah 
dr hendler affiliated um institute systems research nsf nsf eec 

proceedings th national conference american association artificial intelligence aaai press mit press 
andersen hendler 
massively parallel matching knowledge structures 
massively parallel artificial intelligence 
aaai mit press 
baader hollunder nebel franconi 
empirical analysis optimization techniques terminological representation systems making kris get move 
applied intelligence 
borgida patel schneider 
semantics complete algorithm subsumption classic description logic 
journal artificial intelligence research 
code 
nomenclature human veterinary medicine snomed 
college american american veterinary medical association 
hendler spector 
parallel knowledge representation connection machine 
international journal parallel distributed computing 
gruber 
development large shared knowledge bases collaborative activities stanford 
technical report knowledge systems laboratory 
gruber 
ontolingua mechanism support portable ontologies 
technical report knowledge systems laboratory 
haase 
knowledge large 
ibm systems journal 
kersten siebes 
data surveyor searching nuggets parallel 
fayyad shapiro smyth uthurusamy eds advance knowledge discovery data mining 
aaai mit press 
horty thomason touretzky 
skeptical inheritance nonmonotonic semantic networks 
technical report cmu cs carnegie mellon department computer science pittsburgh pa usa 
www cs umd edu projects parka 

proceedings th international joint conference artificial intelligence morgan kaufmann san francisco ca 

plan knowledge archives project 
technical report technical report distributed japan society promotion machine industry english language addition 
karp paley 
knowledge representation large 
ijcai 

case planning highperformance parallel memory 
ph dissertation university maryland college park 
knight luk 
building large knowledge base machine translation 
aaai 
lee 
parallel transitive reasoning mixed relational hierarchies 
aiello doyle shapiro eds principles knowledge representation reasoning 
lenat guha 
building large knowledge systems 
addison wesley 
macgregor 
description classifier predicate calculus 
aaai 
miller 
human language technology 
technical report psychology department green hall princeton university 
shapiro rapaport 
sneps family 
computers mathematics applications 
shastri ajjanagadde 
simple associations systematic reasoning 
behavioral brain sciences 
sowa 
conceptual structures information processing mind machine 
addison wesley 
saltz hendler dick merz miller 
semantic indexing efficient grouping 
submitted 
hendler saltz 
parka mimd supercomputers 
rd international workshop parallel processing ai 
canada ijcai 
umls 

unified medical language system 
national library medicine 
