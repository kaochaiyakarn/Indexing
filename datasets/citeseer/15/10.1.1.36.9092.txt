categories concurrency glynn winskel mogens nielsen brics computer science department aarhus university denmark notes survey range models parallel computation including interleaving models transition systems synchronisation trees languages called hoare traces context models asynchronous transition systems event structures pomsets mazurkiewicz traces concurrency represented explicitly form causal independence 
presentation unified casting models framework 
aim category theory provide characterisations constructions parallel composition valid range different models provide formal means translating different models 
framework helps extending useful concept bisimulation equivalence familiar situation transition systems independence models careful analysis appropriate definition bisimulation clear cut 
contents transition systems category transition systems 
constructions transition systems 
restriction 
relabelling 
product 
parallel compositions 
sum 
prefixing 
notes largely pieces winskel nielsen joyal nielsen winskel nielsen winskel modifications additions 
particular proof representation theorem event structures mazurkiewicz trace languages follows winskel nielsen modified mazurkiewicz traces languages general just coherent trace languages additional proofs included 
omissions hope eager reader 
winskel nielsen process language synchronisation trees languages relating semantics trace languages category trace languages 
constructions trace languages 
event structures category event structures 
event structures trace languages 
representation theorem 
coreflection 
asynchronous transition systems asynchronous transition systems trace languages 
asynchronous transition systems petri nets 
labelled models bisimulation labelled models relationship 
path lifting morphisms 
pomset bisimulation 
presheaf models 
weak bisimulation 
basic category models concurrency computational behaviours distributed sense may seen spatially separated activities accomplishing joint task 
systems meant terminate little sense talk behaviours terms traditional input output functions 
interested behaviour systems terms complex patterns stimuli response relationships varying time 
reason systems referred reactive systems 
structures modelling reactive systems studied past years 
key models 
common rest idea atomic actions behaviour system defined 
models differ mainly respect behavioural features systems represented 
models fact informal classifications models respect expressibility 
aims principal representatives models covering landscape concrete formalise nature relationships explicitly representing steps abstraction involved moving 
programme category theory convenient language formalising relationships models 
give idea role categories play focus attention transition systems model parallel computation 
transition system consists set states labelled transitions 
assume transition system distinguished initial state tran set states initial state set labels transitions elements tran sls transition generally written models process transitions represent process atomic actions labels action names starting initial state traces computation path transitions occur consecutively 
processes arise relationship processes 
example process may refine process component 
corresponding relationships behaviours expressed morphisms transition systems 
models choice define appropriate morphisms depends extent relationship processes wish express 
eye languages milner ccs communication synchronisation atomic actions 
viewpoint get useful class morphisms sufficient relate behaviour processes subcomponents morphism transition system pair function states sends initial state winskel nielsen partial function labels transition defined transition undefined 
morphisms respect choice granularity actions sense action may sent action computation consisting actions 
partial function labels particular accommodate fact projecting parallel composition processes ccs component may change action names allow actions vanish correspond component case occurrence effect state component 
definition morphism sufficient express relationship constructed process components morphisms language ccs 
conversely choice morphisms produces constructions 
transition systems morphisms form category universal constructions including limits colimits category determined uniquely isomorphism exist 
fact universal constructions category transition systems form basis process description language 
little richer ccs csp sense operations straightforwardly definable 
consider models categories universal constructions yield sensible interpretations process language constructs 
categories unity lost denotations parallel compositions nontrivial define invented ad hoc fashion models 
categorical notions come play relating different models 
model synchronisation trees arises ignoring repetitive behaviour 
identify synchronisation trees special transition systems loops distinct transitions state states reachable 
synchronisation trees inherit morphisms transition systems form category 
inclusion synchronisation trees transition systems functor 
inclusion functor part adjunction inclusion functor left adjoint accompanied uniquely determined way functor right adjoint unfolding transition systems synchronisation trees 
step abstraction time ignoring branching computation paths takes languages models processes 
process represented set strings actions perform 
languages identified certain kinds synchronisation trees inclusion part adjunction 
parts adjunctions functors enjoy preservation properties coupled understanding process operations universal constructions useful relating different semantics 
discussed just simplest models general approach applies models 
main idea model equipped notion morphism making category operations models concurrency process calculi universal constructions 
morphisms preserve behaviour time respecting choice granularity actions description processes 
role morphisms relate behaviour construction processes components 
shall see turns certain kinds adjunctions reflections provide way express model embedded models expressed different mathematical terms 
adjoint say embed model away aspect representation 
importantly preservation properties adjoints show semantics model translates semantics 
adjunctions provide aid understanding different models relationships vehicle transfer techniques model example extending notion bisimulation transition systems models 
transition systems transition systems commonly understood model computation 
provide basic operational semantics milner calculus communicating systems ccs underlie approaches hoare communicating sequential processes csp 
constructions transition systems methods frequently seen universal category transition systems morphisms understood expressing partial simulation refinement process 
nonsense universal properties characterise constructions isomorphism 
strikingly universal properties apply case models petri nets event structures seemingly different nature 
category transition systems transition systems consist set states initial state transitions states labelled specify kind events represent 
definition transition system structure tran reflection adjunction right adjoint full faithful coreflection left adjoint full faithful 
knowledge basic category theory acquaintance notion adjunction monad sufficient notes 
light suffice earlier parts 
introductory van oosten peirce barr wells maclane remains classic text 
winskel nielsen set states initial state set labels tran transition relation 
definition narrows attention transition systems extensional distinct transitions label pre post states 
notation tran transition system 
write indicate tran notation lends familiar graphical notation transition systems 
convenient extend strings labels write possibly empty string labels mean states 
state said reachable string definition say transition system tran reachable iff state reachable label transition tran 
say acyclic iff strings labels empty 
convenient introduce idle transitions associated state 
representation partial functions explained appendix view partial function set set total function distinguished element standing undefined 
representation reflected notation partial function assumes appear sets generally shall assume reserved element appear sets appearing constructions 
definition tran transition system 
idle transition typically consists define tran tran 
idle transitions help simplify definition morphisms transition systems 
morphisms transitions systems discussed 
morphism transition systems consisting pair component function states preserving models concurrency initial states partial function labels property send transition transition sense 
precisely transition transition provided defined case undefined insisted states equal 
device idle transitions particular representation partial functions effect achieved definition definition tran tran transition systems 
morphism pair tran tran intention definition morphism effect transition label leads inaction precisely undefined 
definition morphism idle transitions represent inaction avoid fuss considering defined 
idle transitions morphisms transition systems described preserving transitions initial state 
stressed idle transition represents inaction distinguished action expressed transition label morphisms preserve initial states transitions clearly preserve reachable states proposition morphism transition systems 
reachable state reachable state transition systems morphisms form category important category study proposition class objects transition systems class morphisms transition systems defines category winskel nielsen composition morphisms composition left pair total functions right partial functions identity morphism transition system form identity function states identity function labelling set definition denote category labelled transition systems proposition 
constructions transition systems transition systems areas 
focus modelling process calculi 
constructions understood universal constructions category transition systems 
point explain familiar terms unfamiliar find characterisations sufficient generality apply models 
see category transition systems rich categorical constructions furnish basic combinators language parallel processes 
restriction restriction important operation processes 
example milner ccs labels distinguish input output channels connected processes ports internal events 
effect hiding specified set ports process communication longer take place hidden ports restrict original behaviour process transitions occur hidden ports 
transition system subset labelling set operation restriction removes transitions labels set definition tran transition system 
assume associated inclusion morphism define restriction transition system tran tran tran 
restriction construction depends labelling sets functions 
seeing categorical construction involves dealing explicitly functions labelling sets borrowing fundamental idea fibred category theory 
observe functor set category sets partial functions sends morphism transition systems models concurrency transition systems partial function associated restriction morphism inclusion map fact morphism essentially inclusion restricted original transition system 
morphism associated restriction universal property morphism unique morphism diagram set says inclusion morphisms associated restrictions cartesian morphism said cartesian lifting respect proposition inclusion 
labelled transition system states morphism 
cartesian 
inclusion cartesian liftings labelling set restriction automatically extends functor transition systems labelling set labelling set state fully note labelling set associated subcategory transition systems called fibre consisting objects transition systems labelling set morphisms preserve labels 
explicit choice cartesian lifting provided restriction operation yields functor fibres functor action morphisms coming universal property cartesian liftings 
relabelling ccs copies process renaming port names 
associated operation relabelling transitions transition system representing behaviour 
total relabelling construction takes transition system labelling set underlying transition system 
winskel nielsen definition tran transition system 
total function 
define relabelling transition system tran tran tran 
operation relabelling associated construction dual cartesian lifting forming cocartesian lifting 
letting transition system states morphism 
morphism cocartesian lifting sense morphism unique morphism diagram oo set proposition total function 
labelled transition system states morphism cocartesian 
relabelling extends functor total function 
product parallel compositions central operations process calculi set processes communication 
communication actions mutual synchronisation possibly exchange values 
precisely actions synchronise varies enormously language example ccs occam processes imagined communicate channels linking ports 
languages input action channel process combine output action channel form action synchronisation 
languages allow processes parallel composition reserve possibility communicating undetermined process environment 
parallel compositions general derived restriction relabelling product operation transition systems 
product operation special kind parallel composition conceivable synchronisations allowed 
models concurrency definition assume transition systems tran tran 
product tran projections projections 
tran tran tran define 
example transition systems oo oo labelling set 
product labelling sets projections coordinate second 

product takes form 
intuitively transitions labels form represent synchronisations processes set parallel labelled involve process performing transition 
clearly far generous parallel composition useful stands allowing possible synchronisations synchronisations processes 
wide range familiar useful parallel compositions obtained product operation applications restriction remove unwanted synchronisations relabelling rename results synchronisations 
winskel nielsen product transition systems projection morphisms satisfy universal property required product category viz 
morphisms transition system unique morphism oo dd oo proposition transition systems 
construction projections product category state reachable iff reachable reachable considered binary products products exist category transition systems 
particular empty product nil transition system nil consisting single initial state special case universal property products amounts transition system unique morphism nil nil terminal object category transition systems 
transition system nil initial object category transition systems transition system unique morphism nil product machine automata theory arises fibre product viz 
product fibre 
recall fibre category consists subcategory transition systems common labelling set morphisms preserve labels 
parallel compositions framework obtain arbitrary parallel compositions single universal constructions 
generally obtained product restriction relabelling parallel composition labelling sets respectively got product give transition system labelling set restricting models concurrency inclusion followed relabelling respect total function way combination product restriction relabelling represent conceivable parallel compositions occur synchronisation 
general parallel compositions derived combination product restriction relabelling 
range associative commutative parallel compositions synchronisation uniform way synchronisation algebras 
synchronisation algebra set labels containing distinct elements consists binary commutative associative operation 
role specify synchronisations allowed composition specifies relabelling 
may helpful look example ahead synchronisation algebra ccs 
synchronisation algebra labels projections product set parallel composition transition systems labelled obtained inclusion determined element relabelling synchronisation algebra example form tables including value passing winskel winskel 
example synchronisation algebra pure ccs ccs milner events labelled complementary labels label idea events bearing complementary labels may synchronise form synchronisation event labelled events labelled synchronise sense invisible processes environment occurrence may lead internal changes state 
labelled events may occur asynchronously 
synchronisation algebra ccs takes form 
resultant parallel composition processes say represented ccs 

winskel nielsen sum nondeterministic sums process calculi allow process defined capabilities processes process behave alternative processes 
alternative depend communications environment offers cases nondeterministic sum plays important role conditional traditional sequential languages 
aim understanding nondeterministic sums universal constructions examine coproducts category transition systems 
definition tran tran transition systems 
define tran injections disjoint union injections transitions tran tran tran 
construction transition systems injection morphisms satisfy universal property required coproduct category viz 
morphisms transition system unique morphism oo oo dd proposition transition systems 
injections coproduct category transition systems 
state reachable coproduct iff reachable reachable 
coproduct quite kind modelling sum ccs example coproduct labels disjoint 
look coproducts fibre 
labelling set fibre coproducts 
recall subcategory consisting transition systems common labelling set morphisms project identity form fibre coproducts similar coproducts transition systems general differ labelling part 
models concurrency definition tran tran transition systems labelling set define tran note labelling set injections tran tran tran 
proposition transition systems transition system injections defined coproduct subcategory transition systems consisting fibre 
coproduct fibre coproduct transition systems quite match kind sums modelling processes example ccs 
coproduct changes labels tagging disjoint fibre coproduct seemingly appropriate leaves labels unchanged assumes transition systems labelling set 
traditional sum definition transition systems respectively 
define sum tran injections tran tran tran 
sum understood fibre coproduct form cocartesian liftings inclusion maps union labelling sets simply effect enlarging labelling sets common labelling set union form fibre coproduct proposition transition systems respectively 
inclusion maps 

coproducts transition systems considered 
coproducts exist fibres category transition systems 
indexed sums transition systems kind ccs 
sum construction transition systems form required ccs transition systems transitions back initial state 
giving relating semantics shall mindful fact 
example fibred coproduct winskel nielsen oe ae assumed labelling set takes form oe ae sum behave returning initial state behave prefixing categorical constructions form basis languages parallel processes constructs parallel compositions nondeterministic sums 
cartesian cocartesian liftings give rise restriction relabelling operations special cases general constructions arising morphisms base category truly partial useful constructions introduce programming language 
raises omission collection constructions mentioned operation introduces new transitions scratch 
traditionally languages ccs csp occam done form prefixing operation effect produce new process behaves process specified initial action taken place 
transition system operation prefixing introduces transition label new initial state initial state copy transition system 
way define prefixing transition systems concretely definition label 
define prefix tran tran tran 
ensure prefixing label distinct labels prefixing extend functor morphisms transition systems 
extends functor subcategory label preserving morphisms morphisms transition systems inclusion function 
special case prefixing extends functor fibres 
models concurrency process language process language proc semantics built constructions category transition systems 
process language interpreted models consider 
syntax nil rec label subset labels total function labels labels 
seen interpret constructions transition systems particular yield labelling set term 
convenient broaden understanding restriction means situation labelling set include 
denotation obtained cocartesian lifting respect function labelling set cut domain new construction recursive construction form rec involving variable processes 
presence process variables means denotation term transition system respect environment mapping process variables transition systems 
proceed routinely induction structure terms give interpretation syntactic operations operations transition systems introduced example set nil nil choice initial transition systems nondeterministic sum section colimits interpret rec won go details refer winskel nielsen 
proc operational semantics agreement operational semantics see winskel nielsen 
synchronisation trees turn consider model 
gives rise example illustrating different models related help adjunctions associated categories 
foundational ccs milner milner introduced synchronisation trees model parallel processes explained meaning language ccs terms operations 
section briefly examine category synchronisation trees relation labelled transition systems 
illustrates method models related role category theoretic ideas play formulating proving facts relate semantics model semantics 
winskel nielsen synchronisation tree tree labels arcs 
formally define synchronisation trees special kinds labelled transition systems transition relation acyclic branch away root 
definition synchronisation tree transition system tran state reachable string empty transition system acyclic regarded way obtain synchronisation trees full subcategory labelled transition systems projection functor category labelling sets partial functions 
definition write full subcategory synchronisation trees fact inclusion functor right adjoint ts effect unfolding labelled transition system synchronisation tree 
definition labelled transition system tran 
define ts tran set consists finite possibly empty sequences transitions element empty sequence 
set tran consists triples 

obtained appending transition define 
theorem labelled transition system labelling set ts synchronisation tree labelling set definition ts morphism 
ts cofree respect inclusion functor morphism synchronisation tree unique morphism ts shall concerned categories functors name functors way indicates domain range 
models concurrency ts follows operation ts extends functor right adjoint inclusion functor morphisms ts adjunction see maclane theorem 
full subcategory implies intuitively obvious fact synchronisation tree isomorphic unfolding ts see maclane 
transition systems synchronisation trees give semantics languages ccs csp see 
milner brookes 
nondeterministic sums processes modelled operation joining synchronisation trees roots special case nondeterministic sum transition systems 
sum synchronisation trees indexed semantics parallel composition generally milner expansion theorem see milner 
context expansion parallel composition nondeterministic sum appears characterisation product synchronisation trees 
proposition product synchronisation trees form coreflection transition systems synchronisation trees fibrewise restricts adjunctions fibres common labelling set 
example reason right adjoint unfolding automatically preserves restriction associated cartesian lifting see appendix winskel nielsen 
right adjoints operation unfolding transition system tree necessarily preserve colimits nondeterministic sums 
languages synchronisation trees away looping structure processes 
examine model languages ignore nondeterministic branching structure processes 
winskel nielsen definition language labelling set consists nonempty subset strings closed prefixes language empty string contained languages called traces hoare reason context modelling concurrency called hoare traces 
consist simply strings confused traces mazurkiewicz seen 
morphisms languages partial functions alphabets send strings language strings definition partial function extends strings defining sa defined undefined morphism languages consists partial function write category languages understanding morphisms composition usual composition partial functions 
ordering strings language extension enables regard language synchronisation tree 
ensuing notion morphism coincides languages 
observation yields functor hand transition system particular synchronisation tree gives rise language consisting strings labels obtained sequences transitions perform 
operation extends functor 
functors form adjunction 
definition language 
define ls synchronisation tree tran tran ha 
tran synchronisation tree 
define sl string language iff sequence possibly empty transitions extend sl functor defining sl morphism synchronisation trees 
theorem language 
ls synchronisation tree labelling set sl ls isomorphism 
sl ls cofree respect functor sl morphism sl synchronisation tree unique morphism ls sl models concurrency sl ls sl sl demonstrates adjunction left adjoint sl right adjoint ls fact counit isomorphism adjunction full reflection 
set functor sending morphism languages set functor sending synchronisation trees labelling sets restriction functor transition systems 
respect projections adjunction fibred 
immediately observe categorical constructions 
fibre product coproduct simply intersection union languages labelling set 
product languages takes form projections obtained product set coproduct languages injections left right component disjoint union 
fibre product coproduct languages alphabet simply intersection union respectively 
expected constructions restriction relabelling arise strong cartesian cocartesian liftings 
relating semantics summarise relationship different models recalling coreflection reflection introducing little notation depict adjunctions coreflection reflection associated inclusions embedding model direction embedding indicated hooks arrows tips point direction left adjoint 
inclusion adjoint inclusion coreflection right reflection left adjoint 
functors right left correspond respectively losing information looping addition nondeterministic branching structure processes 
warning term coreflection mean adjunction unit natural isomorphism equivalently theorem maclane left adjoint full faithful 
similarly reflection mean adjunction counit natural isomorphism equivalently right adjoint full faithful 
uses literature entirely standard 
winskel nielsen categorical facts useful ways 
coreflection tells construct limits particular seen form products determined simpler form regard synchronisation trees transition systems inclusion functor form limit transport fact right adjoints preserve limits 
adjunctions fibrewise right adjoints preserve cartesian liftings left adjoints cocartesian liftings see appendix winskel nielsen 
fact embedding functors full faithful ensures reflect limits colimits cartesian cocartesian morphisms adjunctions fibrewise 
imagine giving semantics process language proc section models 
particular construct interpreted built way universal constructions 
example product process language interpreted categorical product nondeterministic sum language combination cocartesian liftings coproduct transition systems 
constructions interpreted uniform manner different models 
prefixing languages requires straightforward definition 
recursion requires separate treatment omitted 
respect environment process variables synchronisation trees obtain denotational semantics yielding synchronisation tree process term respect environment process variables languages denotational semantics yields language process term relationship semantics 
consider relationship semantics transition systems trees 
letting environment process variables transition systems semantics related ts ts process term proved structural induction cases product restriction follow directly preservation properties right adjoints 
cases require special easy argument 
example fact ts ts depends 
similar relationship sl sl models concurrency process term environment synchronisation trees holds semantics synchronisation trees languages 
time structural induction straightforward cases nil nondeterministic sum relabelling preservation properties left adjoint sl 
simple arguments suffice cases 
summary operations processes interpreted uniform manner universal constructions different semantics 
preservation properties adjoints useful relating semantics 
directly knowledge expect preserved automatically provides useful guidelines 
failure general preservation property warn semantics construct preserved special circumstances 
instance expect right adjoint ts preserve colimit nondeterministic sum 
accordingly semantics sums preserved ts virtue special circumstance transition systems denoted 
advantages categorical approach striking turn intricate models non interleaving approach concurrency universal constructions 
trace languages models considered far identified concurrency parallelism nondeterministic interleaving atomic actions 
turn consider models concurrency modelled explicitly form independence actions 
models mazurkiewicz traces relation independence basic notion petri nets derived primitive 
idea actions enabled independent occur concurrently parallel 
models kind said capture true concurrency convenient regrettably biased expression 
called models inappropriate petri nets event structures described forms transition systems 
better term independence models concurrent computation established 
models independence actions generally derivable underlying property labels depending occurrences considered see important distinction basic richer models 
concept events distinguished labels 
events thought atomic actions support relation independence 
events bear structure having label instance signifying channel process belong 
greater part development models indifferent extra labelling structure impose course restriction relabelling depend labels 
treatment models relationship winskel nielsen done primarily unlabelled structures 
adjoin labelling provide semantics terms various models discuss relationship 
category trace languages simplest model computation built notion independence mazurkiewicz trace languages 
languages alphabet possesses relation independence 
shall see small addition striking effect terms richness associated structures 
noteworthy applications trace languages different understandings alphabet mazurkiewicz original alphabet thought consisting events especially events petri net authors interpreted elements labels example standing port names 
elaborated section 
definition mazurkiewicz trace language consists set symmetric irreflexive relation called independence relation nonempty subset strings prefix closed sa closed aib say trace language coherent addition satisfies coherent sa sb aib sab alphabet trace language thought set actions process set strings sequences actions process perform 
actions independent 
axiom closedness expresses consequence independence actions independent occur occur opposite order 
actions independent expected strings represent essentially computation 
example independent strings ab ba represent computation occurring concurrently 
generally strings represent computation independent 
extends equivalence relation strings equivalence classes called mazurkiewicz traces 
associated preorder strings trace language induces partial order traces 
definition trace language 
define smallest equivalence relation aib models concurrency call equivalence class trace 
define su proposition trace language trace equivalence su su relation trace language preorder 
quotient equivalence relation partial order traces 
partial order trace language associated partial order causal dependencies event occurrences 
structure investigated section 
morphisms trace languages morphisms underlying languages preserve independence definition morphism trace languages consists partial function preserves independence aib defined defined preserves strings strings easy see morphisms trace languages preserve traces ordering proposition morphism trace languages 
trace language trace language 
definition write tl category trace languages composition partial functions 
constructions trace languages examine categorical constructions trace languages 
constructions generalise languages added consideration defining independence 
trace languages 
product product set projections aib defined defined winskel nielsen coproduct disjoint union injections relation satisfies aib restriction relabelling 
restriction appears cartesian lifting inclusion labelling sets 
effect simply cut language independence restricting set 
relabelling trace language associated cocartesian lifting 
see consider function sending trace language alphabet independent morphism trace languages cocartesian lifting respect trace language independence irreflexive independence preserved 
difficulty stems implicitly regarding alphabet mazurkiewicz trace language set labels kind operations restriction relabelling 
alphabet taken nature original intention mazurkiewicz 
appropriate discuss ways trace languages model parallel processes 
way trace languages manner languages 
implicitly assumed attempts define relabelling trace language example 
process example ccs denotes trace language alphabet labels process 
regards symbols alphabet trace language labels process algebra 
seen treatment interleaving models labels understood generally simply tags distinguish actions 
general understanding alphabet conflicts approach 
independence relation labels decided say independent denotation process execution 
easy imagine process stage occur independently stage 
remedy suggested independence relation depend trace labels occurred previously 
modification independence relation means independent occurrences label modelling ccs process internal events dependent 
approach regard alphabet consisting labels general kind met process algebras consisting events 
events possess independence relation distinctions wishes caught extra labelling function models concurrency events labels 
true extra level labelling complicates model distinction events labels carry appears fundamental 
models capture concurrency directly independence 
second view fits mazurkiewicz trace language semantics petri nets 
come adjoin extra structure labels restriction associated cartesian lifting relabelling reappear cocartesian lifting 
remains question understanding order trace languages 
shall representation theorem show understood subset ordering configurations event structure 
event structures point analysing precise places times events distributed computation 
generally important significant events occurrence event causally depends previous occurrence 
example event process transmitting message presumably depend performing events right state transmit including receipt message turn depend previous transmission process 
ideas suggest view distributed computations event occurrences relation expressing causal dependency wemay reasonably take partial order 
thing missing descriptions phenomenon nondeterminism 
model nondeterminism adjoin structure form consistency relation specifying finite subsets events occur computation 
definition define event structure structure con consisting set events partially ordered causal dependency relation consistency relation con consisting finite subsets events satisfy finite con con con con con events subsets say events concurrent write iff con 
finiteness assumption restricts attention discrete processes event occurrence depends finitely previous occurrences 
axioms consistency relation express singletons events consistent winskel nielsen relation closed subsets downwards respect causal dependency relation 
say event structure con coherent consistency relation con determined consistency pairs events alternatively necessarily unique binary conflict relation events con describe coherent event structures triple set events partially ordered causal dependency relation conflict relation binary symmetric irreflexive relation events satisfy finite property events causally dependent conflicting events conflict follows con 
shall take liberty identifying presenting coherent event structure associated event structure con words understood referring event structure con determines 
guided interpretation formulate notion computation state event structure con 
computation state process represented set events occurred computation expect event occurred events causally depends occurred finite subsets events computation consistent 
definition con event structure 
define configurations con consist subsets downwards closed consistent finite con 
particular define 
note configuration consistent 
write con set finite configurations 
events manifest atomic jumps configuration follow regard jumps transitions asynchronous transition system 
definition con event structure 
configurations 
write 
models concurrency proposition events event structure concurrency relation iff exist configurations 
category event structures define morphisms event structures follows definition es con es con event structures 
morphism es es consists partial function events satisfies es es defined morphism es es event structures expresses behaviour es determines behaviour es partial function expresses occurrence event es implies simultaneous occurrence event es fact understood expressing event component event sense occurrence implies simultaneous occurrence distinct events es image es belong configuration 
morphisms event structures preserve concurrency relation 
simple consequence proposition showing concurrency relation holding events appears little square configurations 
proposition es event structure concurrency relation es event structure concurrency relation es es morphism event structures 
events es defined 
morphisms event structures described directly terms causality conflict relations event structure proposition morphism event structures con con partial function winskel nielsen defined ii con con defined category event structures possesses products coproducts useful modelling parallel compositions nondeterministic sums 
proposition con con event structures 
coproduct category event structure con con con con injections injections disjoint union 
tricky give direct construction product event structures 
construction product event structures follow product trace languages coreflection event structures trace languages see corollary postpone construction till 
ordered inclusion configurations event structure form di domain sense berry berry fact di domains represented way see winskel nielsen winskel details 
event structures trace languages representation theorem section assume trace language 
section study preorder su trace language show quotient represented finite configurations event structure 

symbols 
strings write number occurrences string write mean occurs 
abbreviation write sit aib symbol events thought event occurrences taken equivalence classes nonempty strings respect equivalence relation defined 
proof generalises winskel nielsen applies trace languages necessarily coherent 
include proofs differ winskel nielsen 
models concurrency definition relation smallest equivalence relation nonempty strings sa sba sa ta sa sba ta lemma yields important technique reasoning trace languages 
lemma suppose sa ta 
aib sa ta 
aia lemma particular yields sa ta sa ta different occurrences symbol string associated different events proposition suppose prefixes show preorder trace languages coincides order inclusion associated sets events definition define events ev nonempty prefix 
lemma ev ev 
lemma shows traces upper bounds upper bounds 
lemma letting vw ev ev ev 
proof assume loss generality suppose su show induction size sv ev sv ev ev 
basis take consider induction step inductively sv ev sv ev ev 
cases consider winskel nielsen ev ii ev 
case fulfil suppose case ii ev 
sv lemma know ev ev sv case ev sv exist cw sv sv cw argue ic suppose ic 
sv sv inequality ev sv ev 
sv sv lemma contradiction 
ic 
observe ev ev ev concludes induction step 
slight detour case trace language coherent refine previous lemma trace language coherent incompatibility traces stems lack independence events shown winskel nielsen 
lemma assume trace language coherent 
letting ev ev ev iff va ev vb ev return main line proof 
lemma says event minimum representative 
lemma events sa ta sa ta 
minimum representatives defining event structure associated trace language 
models concurrency definition trace language 
define tle con set events relation events iff ev sa sa minimum representative con iff ev 
furthermore define sa 
definition follows defined function 
lemma trace language 
structure tle con definition event structure iff ev ev 
furthermore tle coherent trace language tle coherent event structure conflict relation satisfying iff ev ev 
proof follows considering minimal representatives events provided lemma suppose ev 
letting va minimal representative see va ev va ev 
definition ev va ev 
direction follows directly minimal representative definition con easy check tle event structure 
sends concurrent events independent symbols follow provided strings aib ua assume aib ua wb minimal representative representatives wb 
winskel nielsen argue contradiction show assume ua ev wb 
wb minimal representative wb strings ua 
ii recall aib 
lemma uav ii wbs contradiction 
remains show assuming coherent trace language event structure tle coherent conflict 
guided lemma define conflict relation hold events iff definition iff va vb 
lemma ensures conflict relation induces consistency relation tle con 
assuming 
repeated lemma minimal representatives events yields ev witnessing con 
con ev minimal representatives set ev downwards closed 
ev ev ev lemma ev ev ev 
entails lemma 

particular con ev iff contraposition yields 
representation theorem trace languages 
write 
partial order obtained quotienting preorder equivalence models concurrency theorem trace language 
tle con 
order isomorphism ev con ev ev 
con ev con sa ev sa 
proof clearly ev consistent subset events 
lemma ev downwards closed respect 
fact ev defined order preserving reflecting follows lemma 
establish ev isomorphism suffices check ev 
prove 
direction equivalence follows directly follows 
assume sa ev sa sa yields event ev show assume ev ta minimum representative event downwards closed ev ev 
consistent finite ev 
ev ta ev ev ev 
ta lemma ev ev ev ta sw string ev ev sw sa simple induction size con shows exists ev follows ev consequently ev order isomorphism 
representation theorem trace languages establishes connection trace languages pomset languages pratt pratt 
representation theorem trace trace language corresponds labelled partial order events partially ordered multiset pomset partial order events trace induced event structure labelling function trace language corresponds special kind pomset language special chiefly concurrency relations pomsets arise single independence relation alphabet labels consequently pomsets traces concurrent events label 
see bloom kwiatkowska thiagarajan grabowski details 
winskel nielsen coreflection representation theorem extends coreflection categories event structures trace languages 
definition es event structure events define etl es 
iff chain 
en configurations es 
morphism event structures es es define etl 
proposition etl functor tl 
function trace language counit adjunction 
proposition trace language 
etl tle morphism trace languages 
lemma es con event structure etl es 
etl es morphism tl 
defined se se 
theorem trace language 
pair etl tle cofree respect functor etl event structure es morphism etl es unique morphism es tle etl 
proof es con tle con etl es 
define se se follows lemma defined partial function need prove proofs simple modifications winskel nielsen restricts attention coherent models omitted 
models concurrency morphism es tle unique satisfying 
prove morphism suffices proposition prove ii 
defined choose se occurrences equal es 
assume se tle 
prove existence 
may choose minimal prefix se conclude desired property 
ii con require con defined assume con ev 
see ev ensures con assume obtain contradiction distinct events defined 
prefix form ue ue loss generality assume ue prefix definedness equality obtain ue ue contradiction lemma 
completes proof 

defined se se implies definition 
show uniqueness 
assume morphism tle 
want show es assume inductively agree elements firstly assumption get defined iff defined total iff defined 
assume defined equal tle morphism 
representation theorem trace languages follows exactly event tle satisfying requirements picked 
corollary operation tle trace languages extends functor right adjoint etl forming coreflection tl functor tle sends morphism tle tle acting events sa tle sa undefined sa defined winskel nielsen coreflection cuts subcategories coherent trace languages coherent event structures 
coreflection expresses sense model event structures embeds model trace languages 
coreflection restrict trace languages isomorphic images event structures etl obtain full subcategory trace languages equivalent event structures 
existence coreflection event structures trace languages important consequence yielding explicit product construction event structures easy define directly 
product event structures obtained tle etl etl regarding event structures trace languages forming product trace languages regarding result event structure 
result product follows right adjoint tle preserves limits unit adjunction natural isomorphism coreflection 
similar way able obtain product event structures nets asynchronous transition systems general event structures categories event structures models 
existence coreflection category event structures category trace languages surprising seen alongside analogous interleaving models think trace languages analogue languages 
reflection category languages category synchronisation trees 
mismatch reconciled recalling ways regarding trace languages cf 
discussion section 
alphabet trace language thought consisting events view adopted establishing coreflection 
alternatively alphabet thought set labels 
view correct analogy labelled event structures generalise synchronisation trees 
trace languages generalise languages 
analogy formalised diagram adjunctions see winskel nielsen 
model generalise transition systems labelled event structures suitable model consist labels attached certain structures fitting structure allow loops behaviour events possible interpret relation independence 
candidates appropriate structures turn consider closely related petri nets 
models concurrency asynchronous transition systems asynchronous transition systems introduced independently shields shields 
transitions thought occurrences events bear relation independence 
interpretation supported axioms essentially generalise mazurkiewicz trace languages 
definition asynchronous transition system consists tran tran transition system independence relation irreflexive symmetric relation set events 
tran tran tran tran tran 
tran tran 
say asynchronous transition system coherent satisfies tran tran 
tran tran 
axiom says event appears transition axiom occurrence event state leads unique state 
axioms express properties independence independent events occur immediately able occur order interchanged events occur independently common state occur doing reach common state 
situations lead independence square associated independence 
treatment asynchronous transition systems follows winskel nielsen closely proofs omitted simple amendment winskel nielsen 
contrast winskel nielsen asynchronous transition systems need coherent 
winskel nielsen morphisms asynchronous transition systems morphisms underlying transition systems preserve additional relations independence 
definition tran tran asynchronous transition systems 
morphism morphism transition systems tran tran defined 
morphisms asynchronous transition systems compose morphisms underlying transition systems readily seen form category 
definition write category asynchronous transition systems 
category categorical constructions essentially generalise transition systems mazurkiewicz traces 
product coproduct constructions category definition assume asynchronous transition systems tran tran 
product tran tran product transition systems tran tran projections independence relation aib defined defined 
definition assume asynchronous transition systems tran tran 
coproduct tran tran coproduct transition systems tran tran injections independence relation aib 
asynchronous transition systems trace languages asynchronous transition systems generalise trace languages backed straightforward coreflection categories trace languages asynchronous transition systems 
obtain adjunction need restrict trace languages element alphabet occurs trace matches property required definition asynchronous transition systems models concurrency definition define tl full subcategory trace languages satisfying se trace language forms asynchronous transition system states traces 
definition trace language tl trace equivalence define tla tran tran se se morphism trace languages 
define tla 
note defined morphisms trace languages respect follows directly proposition 
proposition operation tla functor tl asynchronous transition system determines trace language definition tran asynchronous transition system 
define atl seq seq consists strings events possibly empty 
transitions 
tran morphism asynchronous transition systems 
define atl 
proposition operation atl functor tl fact functors tla atl form coreflection theorem functor tla tl left adjoint atl tl trace language 
atl tla unit adjunction identity atl tla 
asynchronous transition system events tla atl counit adjunction trace 
equals unique state winskel nielsen coreflection extend adjunction tl tl reflective subcategory tl 
note coreflection event structures asynchronous transition systems follows composing event structures trace languages trace languages asynchronous transition systems 
easy see coreflection tl restricts coreflection tl left adjoint resulting coreflection composition etl tl tla left adjoint coreflection constructed directly 
composition tla etl naturally isomorphic functor yielding asynchronous transition system directly configurations event structure described proposition 
proposition es con event structure define es es tran transitions configurations tran consist 
es es morphism event structures define configuration es 
defines functor naturally isomorphic tla etl asynchronous transition systems petri nets asynchronous transition systems closely related petri nets 
fact asynchronous transition system possesses structure construct petri net conditions taken certain subsets transitions states 
provided asynchronous transition system satisfies restrictions entailing coherence constructed net behave original asynchronous transition system 
equivalence certain asynchronous transition systems petri nets works level categories models adjunctions asynchronous transition systems categories petri nets exhibited winskel nielsen nielsen winskel 
labelled models bisimulation presentation models concurrency categories allows apply general notion bisimulation obtained span open maps proposed joyal nielsen winskel 
models concurrency labelled models relationship semantics processes languages ccs labelled structures 
general way introducing labels models way may carry adjunctions unlabelled models labelled counterparts 
sketch idea applicable categories mazurkiewicz trace languages asynchronous transition systems event structures 
assume category structures possesses distinguished set events morphisms component partial function sets events 
add structures extra component total labelling function structure set events set labels obtain labelled structure pairs 
ii assume morphisms unlabelled structures include component sets events 
morphism labelled structures pair morphism underlying unlabelled structures partial function label sets 
composition morphisms done coordinatewise 
morphisms labelled structures generality order obtain operations process calculi universal constructions 
purpose studying bisimulation suffices subcategories structures having common set labels restrict morphisms extra condition component identity implies event component total 
call resulting category xl subcategory fibre respect obvious functor projecting labelled structures label sets 
emphasis objects xl consist structures object total labelling function events labelling set morphisms xl correspond morphisms event component preserves labels correspondingly set labels denote fibres labelled versions categories asynchronous transition systems event structures el respectively 
similarly category transition systems label set morphisms having identity label component denoted tl full subcategory trees sl synchronisation trees identified event structures having empty relation 
follows general reasons winskel nielsen easy see adjunctions models earlier lift adjunctions winskel nielsen labelled versions 
modified adjoints essentially adjoints previous sections simply carrying label parts model 
sl se st tl el ea specifying functor adopt convention example left adjoint sl tl denoted st right adjoint ts 
left adjoints drawn embed model 
functor se identifies synchronisation tree corresponding labelled event structure right adjoint es takes labelled event structures synchronisation tree serialisation branches correspond sequences event occurrences event structure 
coreflection transition systems tl labelled asynchronous transition systems simply transition systems labelled asynchronous transition systems allow transition label states 
stops natural bijection required inclusion transition systems left adjoint 
path lifting morphisms section briefly main ideas definitions results joyal nielsen winskel providing general notion bisimulation applicable wide range models 
informally computation path represent particular run history process 
transition systems computation path reasonably taken sequence transitions 
suppose sequence finite 
labelling set define category branches full subcategory transition systems labelling set objects finite synchronisation trees maximal branch objects essentially strings alphabet computation path transition system labelling set represented morphism tl object represent computation path labelled asynchronous transition system event structure 
take account explicit concurrency exhibited event structure reasonable represent computation path morphism partial order labelled events pomset 
note pratt pomsets labels identified special kinds labelled event structures el consistency relation consisting finite subsets events 
define category pomsets poml respect labelling set full subcategory el objects missing proofs refer joyal nielsen winskel 
models concurrency consist exclusively finite pomsets 
computation path event structure labelling set morphism el object poml computation paths asynchronous transition systems 
left adjoint ea coreflection el embeds labelled event structures pomsets labelled asynchronous transition systems 
enables identify pomsets poml images ea take computation path labelling set morphism pomset labelling set pomset understood corresponding labelled asynchronous transition system discussing labelled asynchronous transition systems deliberately confuse pomsets image embedding 
generally assume category models categories labelled structures considering choice path category subcategory consisting path objects branches pomsets morphisms expressing extended 
define computation path object morphism object morphism takes path path morphism expresses sense simulates computation path matched computation path demand stronger condition morphism expressed succinctly path lifting condition morphism square commutes meaning path extended path morphism diagram 
triangles commute meaning path extended path matches morphism satisfies condition shall say open 
winskel nielsen easily checked open morphisms include identity morphisms fact isomorphisms closed composition words form subcategory known model transition systems open morphisms familiar proposition respect labelling set open morphisms tl zig zag morphisms morphism segerberg abstraction homomorphisms castellani pure morphisms benson ben label preserving morphisms transition systems labelling set property reachable states state return general set assuming path category category models say objects bisimilar iff connected open morphisms open morphisms fn fn relation bisimilarity clearly equivalence relation objects reflexive identities open 
case pullbacks open morphisms connecting bisimilar objects standardised simple span open morphisms 
words objects bisimilar iff span open morphisms proposition pullbacks open morphisms open 
repeatedly applying proposition connecting chain open morphisms converted span open morphisms pullbacks models consider proposition categories tl sl nl el pullbacks 
proof see nielsen winskel 
interleaving models transition systems synchronisation trees path category taken branches bisimulation coincides milner strong bisimulation models concurrency theorem transition systems synchronisation trees labelling set bisimilar iff strongly bisimilar sense milner 
general facts joyal nielsen winskel nielsen winskel open morphisms bisimilarity preserved reflected functors especially part coreflection 
notational simplicity shall assume left adjoints inclusions 
follows section categories models share choice path category open morphisms bisimilarity preserved directions adjunction 
proposition full subcategory subcategory morphism open iff open lemma subcategory right adjoint inclusion function subcategory morphism open iff open 
ii components counit adjunction open 
iii morphism open iff open corollary subcategory right adjoint inclusion function subcategory bisimilar iff bisimilar 
ii bisimilar iff bisimilar pomset bisimulation seen lemma theorem known model transition systems general definition open morphism bisimilarity coincide familiar notions particular recover equivalence strong bisimilarity central milner 
explore general definitions specialise models event structures labelled asynchronous transition systems nonsequential paths form pomsets 
start characterising poml open morphisms labelled asynchronous transition systems 
convention identify pomsets image embedding el winskel nielsen lemma poml open morphisms precisely satisfy zig zag condition proposition addition reflect consecutive independence morphisms satisfying total label preserving tran exists tran tran reachable ei proof proof lemma straightforward modification proof corresponding result transition systems independence joyal nielsen winskel 
question bisimulations 
joyal nielsen winskel shown case event structures path category pomsets gets reasonable strengthening previously studied equivalence history preserving bisimulation 
definition depends simple important configuration event structure regarded pomset causal dependency relation labelling got restricting event structure 
definition trakhtenbrot rabinovich trakhtenbrot van goltz goltz history preserving bisimulation event structures consists set triples configuration configuration isomorphism regarded pomsets 
ii say history preserving bisimulation strong satisfies configuration implies 
ii configuration implies models concurrency joyal nielsen winskel shown poml bisimilarity event structures el coincides strong history preserving bisimilar 
show poml bisimilarity event structures smaller category coherent event structures coincides strong history preserving bisimilarity 
conceivably span open morphisms noncoherent event structure relating coherent event structures replaced span open morphisms coherent event structure 
fact case event structure el open morphism coherent event structure lemma 
span open morphisms el coherent converted span open morphisms consequently poml bisimilarity subcategory coherent event structures coincides strong history preserving bisimilarity 
result implications poml bisimilarity petri nets coreflection coherent event structures nets see nielsen winskel 
insisted reasonable requirement event structures objects consider countable 
view suspicion result depended crucially allowing event structures uncountable 
reason care taken give countable constructions 
lemma con labelled event structure 
labelled coherent event structure open morphism countable finite taken countable finite respectively 
proof see nielsen winskel 
show restricting category event structures coherent effect relation bisimilarity 
corollary coherent event structures labelling sets equivalent poml bisimilar 
ii poml bisimilar el 
iii strong history preserving bisimilar 
coreflection event structures petri nets draw characterisations poml bisimilarity nets see nielsen winskel 
winskel nielsen presheaf models path category build category presheaves objects consist functors op set category sets 
morphisms natural transformations functors 
intuitively presheaf op set thought specifying typical path object set paths acts morphism give function saying paths restrict paths 
see model transition system labelled event structure gives rise presheaf 
consider category models choice path category forming subcategory canonical functor category models category presheaves functor takes object presheaf intuitively takes model presheaf path object yields set paths canonical functor takes morphism natural transformation component object function intuitively path taken path theorem canonical functor sl full faithful dense 
ii canonical functor el poml full faithful dense 
objects presheaf categories original models 
case path objects branches objects presheaf category consist synchronisation forests viz 
collections synchronisation trees 
collection may empty 
embedding image collections singletons 
collections carry computational intuition similar synchronisation trees longer simply initial state 
embeddings full faithful dense preserve limits products larger category presheaves coincide fibre product synchronisation trees coproducts differ amounting disjoint union forests extra objects poml presheaves corresponding event structures difficult explain representable models general petri nets 
proofs presheaf models joyal nielsen winskel 
presheaves chapter maclane moerdijk 
models concurrency embeddings theorem extend yoneda embedding regarding path object presheaf cases subcategory full 
regard presheaves model image yoneda embedding path category apply general definition section obtain class open morphisms presheaf category 
form category open maps topos sense joyal moerdijk 
notions open open map agree models synchronisation trees event structures generally proposition dense full subcategory morphism open iff morphism open map sense joyal moerdijk 
particular morphism event structures poml open iff corresponding morphism presheaf category poml open map 
comes relating notions bisimilarity care taken 
case event structures poml bisimilar iff associated presheaves related span open maps poml objects presheaf category particular span open maps presheaves subtended initial empty presheaf 
way get correspondence define bisimilarity entire presheaf category spans open maps 
way get correspondence restrict objects presheaf category 
situation path category model initial object rooted presheaf presheaf singleton 
remarked full subcategory rooted presheaves equivalent category note incidentally full subcategories rooted presheaves poml coproduct presheaves common initial state construction coincides required represent milner sum processes 
proposition synchronisation trees labelling set bisimilar strong bisimilar iff corresponding presheaves canonical embedding related span open maps full subcategory rooted presheaves 
ii event structures labelling set poml bisimilar strong history preserving bisimilar iff corresponding presheaves see joyal moerdijk example definition expressed terms existence certain quasi pullbacks equivalence openness expressed path lifting property follows yoneda lemma 
winskel nielsen canonical embedding related span open maps full subcategory rooted presheaves poml indicated joyal nielsen winskel justified gian luca cattani general reasons presheaf models support operations refinement familiar process algebras glabbeek 
presheaves helpful generalising hennessy milner logic new notions bisimulation 
roughly idea modalities indexed morphisms path category case simple path category amounts modalities associated strings labels easily reduced modalities hennessy milner 
hennessy milner logic general logic parameterised path category characteristic equivalence bisimulation see joyal nielsen winskel 
weak bisimulation recall milner see 
milner label special status 
label internal actions 
weak bisimulation equivalence relation account invisibility actions 
follow milner reduce weak bisimulation strong bisimulation construction transition systems 
recall milner defines transition systems weakly bisimilar iff strongly bisimilar construction defined follows transition system tran tran set labels containing simple matter extend functor tl morphism transition systems take 
fact equally simple matter check forms monad unit multiplication transition system tl states forms monad opens door way define weak bisimulation 
form kleisli category tl objects transition systems morphisms morphisms tl compose follows morphisms kleisli category define composition general reasons adjunction tl kleisli category tl left adjoint tl tl takes morphism tl morphism kleisli category tl unit monad models concurrency consists functor essentially inclusion allowing identify tl subcategory tl identification view path category subcategory kleisli category tl ask meaning bisimulation kleisli category 
fact bisimulation tl coincides weak bisimulation fact observed implicitly cheng nielsen 
coincidence arises reasons 
particular case transition systems falls picture 
assume category models choice path category forming subcategory assume monad unit multiplication define objects weak bisimilar iff bisimilar 
generally adjunction kleisli category components unit left adjoint identify path category relation bisimulation kleisli category coincides weak bisimulation provided functor monad preserves open morphisms open morphism components multiplication monad open object component open 
fact bisimilarity kleisli category implies weak bisimilarity extra conditions roughly right adjoints preserve openness 
try follow pattern formulating notions weak bisimulation independence models particular event structures 
difficulties due independence 
roughly just event structures projection set forms fibration appears need broaden category event structures able define suitable monad weak bisimulation 
presheaf models pomsets appropriate generalisation 
conclude remarks research directions semantics concurrent computation 
views admittedly biased quite possibly limited extent represent natural continuations 
cattani winskel parallels presheaf models obtaining results class presheaf models transferred concrete models event structures 
particular simplicity assumed path categories subcategories categories models assumption easily relaxed need components unit monad 
winskel nielsen presents grounds operations process calculi preserving open maps 
games account strong history preserving bisimulation nielsen clausen deal preliminary definitions done greater generality level presheaf models 
probably important motivation presheaf models hope give making concurrency separate study semantics programming languages 
presheaf models trying bring concurrency theory domain theory successful handling higher order recursive features 
term domain theory understood liberally include generalisations domain theory envisaged axiomatic domain theory developed fiore plotkin fiore 
winskel step programme shows presheaf models extended higher order process languages processes transmitted channels similar lines incorporating ideas stark fiore moggi presheaf semantics obtained milner pi milner parrow walker 
known combine systematically higher order features independence models 
question logics concurrent processes looms large 
categorical account bisimulation accompany scheme generalising logic respect path category joyal nielsen winskel 
generality mixed blessing pushing lot choices logic presentations path category 
expected recursively defined path categories introduced winskel provide informative logics constructions logics basic operations path categories 
relations ad hoc logics event structures thiagarajan ramanujam unknown 
fundamental algorithmic questions remain computability complexity deciding bisimulation equivalences finite state independence models 
encouraging independence models different settings useful obtaining feasible model checking algorithms 
mcmillan godefroid wolper valmari peled alur peled 
models concurrency basic category shall particular representation category sets partial functions 
assume sets containing distinguished symbol 
write function 
say undefined defined 
say total defined course total morphisms correspond usual total functions shall identified 
category set take objects sets contain morphisms functions composition functions usual composition total functions sets extended 
course set isomorphic category sets partial functions usually 
categorical constructions set coproduct set disjoint union obvious injections 
product set form projections partial functions left right coordinates 
alur peled 
model checking causality properties 
proceedings lics 
barr wells 
category theory computer science 
prentice hall 


categories asynchronous systems 
phd thesis computer science university sussex report 
benson ben 
bisimulation automata 
information computation 


correspondence theory 
handbook philosophical logic vol ii ed 
gabbay reidel 
berry 

des 
de doctorat etat universite paris vii 
bloom kwiatkowska 
trade offs true concurrency pomsets mazurkiewicz traces brookes main melton mislove schmidt eds mathematical foundations programming semantics 
springer lncs 
brookes 

relationship ccs csp 
diaz 
ed icalp springer lncs 
winskel nielsen castellani 

bisimulation abstraction homomorphisms 
proc 
caap springer lecture notes cs 
cattani winskel 
presheaf models concurrency 
appear brics report 
cheng nielsen 
open maps 
brics report rs 
proc 
th conference fst tcs springer lecture notes cs 
fiore moggi 
fully model pi calculus 
appear proc 
lics 
fiore 

axiomatic domain theory categories partial map 
ph thesis department computer science university edinburgh 
glabbeek 

comparative concurrency semantics refinement actions 
phd thesis cwi amsterdam 
goltz 
equivalence notions concurrent systems refinement actions 
proc mfcs springer lecture notes cs vol 
godefroid wolper 
partial approach model checking 
information computation pp 

grabowski 

partial languages 
fundamenta informaticae iv 
hoare 

model communicating sequential processes 
technical report prg programming research group university oxford computing lab 
joyal moerdijk 
completeness theorem open maps 
annals pure applied logic 
joyal nielsen winskel 
bisimulation open maps 
journal version lics article 
brics report rs aarhus university 
maclane 

categories working mathematician graduate texts mathematics 
springer 
maclane moerdijk 
sheaves geometry logic topos theory 
springer 
mcmillan 

symbolic model checking 
kluwer academic publishers 
milner 

calculus communicating systems 
springer lncs 
milner 

communication concurrency 
prentice hall 
milner parrow walker 
calculus mobile processes parts ii 
information computation 
models concurrency nielsen clausen 
bisimulations games logic 
springer lncs 
nielsen rozenberg thiagarajan 
elementary transition systems 
theoretical computer science 
nielsen winskel 
petri nets bisimulation 
tcs 
peirce 

category theory computer scientists 
foundations computing series mit press 
peled 

model checking representatives 
th conference computer aided verification springer lncs 
plotkin 

algebraic completeness compactness enriched setting 
handwritten notes 
pratt 

modelling concurrency partial orders 
international journal parallel programming 
rabinovich trakhtenbrot 
behaviour structure nets 
fundamenta informaticae xi 
ramanujam 

locally linear time temporal logic 
appear proc 
lics 
thiagarajan 
event structures trace monoids 
theoretical computer science 
segerberg 

decidability 
theoria 
shields 

concurrent machines 
computer journal vol 

stark 

fully domain model pi calculus 
appear proc 
lics 
thiagarajan 

trace extension propositional linear time temporal logic 
proc lics 
valmari 

stubborn attack state explosion 
proc 
nd conference computer aided verification springer lncs pp 

van oosten 

basic category theory 
brics lecture notes ls 
winskel 

event structure semantics ccs related languages 
nielsen schmidt 
eds icalp springer lncs 
full version proofs appears daimi pb computer science department university aarhus 
winskel 

synchronisation trees 
theoretical computer science 
winskel 

event structures 
de bakker de roever rozenberg eds linear time branching time partial orders logics models concurrency springer lncs 
winskel nielsen winskel 

presheaf semantics value passing 
appear brics report 
winskel nielsen 
models concurrency 
vol handbook logic computer science oxford university press 
draft appears brics report rs 
