gracefully declustered raid architecture near optimal maximal read write parallelism siu cheung chau dept physics computing university waterloo ontario canada 
email schau ca ada wai chee fu dept computer science engineering chinese university hong kong hong kong mail cse cuhk edu hk new layout method prime groups proposed evenly distribute parity groups declustered raid 
prime groups satis es layout goals declustered raid layout 
goals satis ed near optimal 
new layout goal maximal write reconstruction parallelism proposed 
layout satis es new goal surviving disks read parallel rewritten parallel reconstruction recon guration 
prime groups satis es new goal write request begins rst disk array 
near optimal term declustering ratio prime 
prime groups compliment layouts proposed alvarez el criteria obtain layout quite di erent prime groups proposed alvarez el 
keywords fault tolerant raid declustered raid disk arrays applications line transaction processing image processing scienti computing require high throughput cost ective storage sub research supported national sciences engineering research council canada systems 
mass storage sub systems traditional mainframe computers higher mean time failure mtbf rating disk systems personal computers 
cost mass storage sub systems mainframes higher personal computers 
redundant array independent disks raid ers signi cant advantages individual disks 
raid method achieve higher level reliability mass storage systems mainframes array inexpensive disks 
multiple disk drives raid achieve better transfer bandwidths reductions seek rotational latencies compared individual disk 
reduction latencies possible le stored multiple disks 
reading writing le done parallel disks 
survey issues methods raid 
raid system described 
raid 
basic method raid dedicate disk parity disk remaining data disks 
data disk fails data failed disk reconstructed information stored parity disk data disks 
higher reliability achieved 
method parity disk may come bottleneck slow system substantially failure 
happens write data disk requires write parity disk 
enhanced approach eliminate dedicated parity disk distributing parity information disks 
example raid level left symmetric parity placement method 
method data interleaved disks blocks arbitrary size block called striping unit 
vertical column table represents disk consecutive numbers refer consecutive blocks data blocks parity blocks data blocks row 
raid system small read request requires data single block accesses single data disk 
small write request update requested data block compute parity update parity block 
parity computed noting di erence new old data applying di erence parity block 
write request requires disk os read old data old parity write new data write new parity 
referred read modify write procedure 
refer set blocks parity block parity group 
table lookup table store distribution parity groups group members disks 
disk contains blocks may logically duplicate table times necessary ensure mapping parity groups disk blocks 
table read write operation look set blocks access 
shall call table parity groups distribution lookup table lookup table short 
row table contains exactly parity group 
unfortunately approach disk failure cause great performance degradations 
disk represented leftmost column failed read access disk trigger read access remaining disks reconstruct data stored failed disk 
suppose load raid left symmetric parity placement standard multiple raid left symmetric parity placement evenly distributed disks failure disk result increase load remaining disks 
muntz lui proposed declustered raid solve problem doubling load disk failure occurs :10.1.1.49.7954
major enhancements comparing declustered raid raid 

number disks greater parity group size parity groups distributed evenly concurrent write disk array may possible 

parity groups distributed evenly disk blocks 
example gi represents members parity group rst enhancement allows concurrent write disk rst columns disk columns 
contribute improvement disk fails 
leftmost disk fails failed disk triggers increase load declustered parity placement disks disks columns 
second enhancement decreases load increases surviving disks disk fails 
example shown 
leftmost disk failed increase load surviving disks 
ecient method evenly distribute parity groups declustered raid method better raid 
method map data redundant information disks disk array 
mapping called disk array layout 
goals layout stated listed :10.1.1.49.7954

single failure correcting 
data blocks parity group mapped physical disk 
recovery possible single disk failure 

ecient mapping 
mapping logical block address actual physical disk blocks eciently computable low time space requirement 

large write optimization 
parity group contains contiguous interval data large write operation writes contiguous data entire parity group read prior contents disk 

maximal read parallelism 
read contiguous user data size equal size data block times number disks induce single block read disks array 

distributed degradation distributed reconstruction 
distributed degradation means disk fails workload evenly distributed disks array 
distributed reconstruction means failed disk replaced repaired reconstruction workload evenly distributed disks raid 
requirements disk blocks accessed cases 

distributed parity 
parity information evenly distributed array write operations access parity block 
evenly distributed parity disk array higher probability allowing concurrent write operations avoid having bottleneck 
large write want write disks parallel 
de ne layout goal called maximal write reconstruction parallelism 

maximal write reconstruction parallelism 
write contiguous data parity size equal size data block times number disks induce single block write disks array 
useful disk fails want fast parallel reconstruction 
surviving disks read parallel rewritten parallel 
layout satis es goal allow large write optimization parity groups 
left symmetric raid layout satis es goals 
increase load surviving disks disk fails 
number blocks disk number disks array maximum size parity group maximum number parity groups appears row lookup table 
value determines fraction surviving disk read reconstruction failed disk 
value called declustering ratio 
achieve layout goals reddy banerjee proposed method solve distribution problem 
method uses results hadamard matrices di erence sets solve problem merchant yu proposed method uses shu distribute parity groups evenly 
method works requires log log operations log log storage space nd parity group block 
holland gibson proposed balanced block design method balanced incomplete block design bibd method nd evenly distributed parity groups lookup table :10.1.1.49.7954
ng mattson proposed method 
balanced block large balanced incomplete block designs known large number possible values alvarez burkhard cristian rst method mask number failures 
method requires optimal amount redundant storage space spreads reconstruction accesses uniformly disks presence disk failures requiring large layout tables disk controller memory 
method information dispersal sequence dm integers coded sequence integers way integers recover consider read write parallelism 
alvarez burkhard stockmeyer cristian method satis es layout goals 
proved possible nd layout satis es goals arbitrary notation xjy means divisible cx integers 
ideal layout possible limited values values listed 

raid 





layouts 
rst prime satis es goals maximal read parallelism close optimal 
layout de ne function parallel read count maximum number data units disk supply reading consecutive units data 
obvious ne 
ne layout maximal read parallelism 
layout created prime parallel read count ne 
order prime prime number 
second layout relatively prime satis es layout goals 
maximal read parallelism close optimal 
layout parallel read count ne reconstruction workload bounded 
euler function counts number positive integers relatively prime method generates layout declustering ratio close propose new layout scheme prime groups satisfy layout goals number parity groups row table prime prime layout goals satis ed 
resulting layout near optimal goals 
new layout compliment prime methods cases solution layout poor distributed reconstruction workload 
organized follows 
section describes basic approach 
section presents new method prime groups special case section generalizes case integer 
section discusses properties prime groups 
section concludes 
assumption assumption previous know including 
reason assumption contiguous user data typically distributed disks improve performance data accesses evenly distributed 
assumption disk read write load amount read write operations disk uniformly distributed blocks 
basic approach propose small lookup table store distribution parity groups 
shall show write operation perform simple calculations determine row table 
write operation takes longer time compared processor operations increase access time negligible 
furthermore small lookup table stored disk controller level 
lookup table constructed circulant matrices 
circulant matrix matrix size column consists integers value rst column chosen values elements column obtained performing rotation respect previous column 
rotation done shifting value element row row mg shifting value element rst row row 
rst column circulant matrix column mg result number rotations respect column 
example circulant matrices 
values rst column circulant matrix distinct values stored row distinct 
furthermore resulting matrix property value appears row column 
note matrix obtained rotating entire rows matrix 
say result rotation circulant matrices matrices construct parity groups distribution lookup table disks parity groups row 
matrices listed 
lookup table constructed combining matrices follows disk row layout matrices table expanded get table 
table entry represents block data belonging parity group row 
entries row form parity group 
entries bold font parity blocks subscripts indicate order user data units 
suppose disk failed 
read operation block row disk requires operation disk disk 
easy see increase load surviving disk 
case 
layout optimal distributed degradation distributed reconstruction 
parity groups distribution lookup table blocks block block 
lookup table blocks 
disk failure increase load segment surviving disk 
furthermore quite easy determine row lookup table particular block 
data block operation mod necessary determine row lookup table 
size lookup table independent number blocks disk 
new layout scheme declustered raid develop general scheme called prime groups ndings example previous section 
de ne number terms 
matrix column fa am am rotation respect matrix column yields matrix column fa am cm rotation cm cm rotation cm rotation say cm obtained rotations simplicity speci ed term rotation refer rotation corresponding rst matrix sub column lookup table 
matrix shall refer element th column th row element 
rst column row column row 
circulant matrix matrix 
rst column column matrix contains values obtained rotations ig 

th column obtained rotations rst column 
de nition circulant matrix see row column contains value mod mod non zero 
compensation matrix matrix 
rst column matrix contains values obtained rotations ig columns identical rst column 
number parity groups row lookup table 
assume prime number restrictions relaxed section 
parity groups distribution lookup table constructed combining matrices considered matrix elements matrices form call sub matrices call rows columns sub matrices matrix rows matrix columns respectively 
call rst row matrices lookup table matrix row rst column matrices matrix column 
call column integers corresponds disk disk column 
column wise construction matrix column consists sub matrices rst rows matrix row value matrices matrix column fm matrices matrix column fm example lookup table shown 
lookup table obtained method leave matrix row contains compensation matrices resulting matrix denoted lemma matrix entry matrix row matrix column rc mod number rotations rc mod example entry row column mod 
number rotations mod 
lemma matrix symmetrical 
lemma matrix distinct matrices matrix rows matrix columns 
lemma assuming lookup table 
disk failed load increase remaining disks theorem assuming lookup table 
disk failed load increase remaining disks optimal terms distributed degradation distributed reconstruction 
prime construct lookup table shown 
prime lemma apply example row occurrences construct lookup table delete rightmost columns table 
call resulting table obvious proofs lemma theorem apply increase load surviving disk 
theorem 
theorem assuming lookup table 
disk failed load increase remaining disks generalization apply similar approach de ne recursively matrices de ned matrix 
matrix matrices elements 
call sub matrices row column sub matrices called matrix row matrix column 
elements arranged similar way compensation matrices added matrix column 
matrix st row contains 
second row contains 
third row contains 
th row contains th row contains 
obtained rotating rows 
obtained rotating rows th times 
layout example matrix layout shown 
see resemblance matrix st row contains 
second row contains 
third row contains 
fourth row contains fth row contains 
theorem integer layout optimal terms distributed degradation distributed reconstruction 
load increase equal technique applied case rightmost block columns deleted resulting table disk failed surviving disks increase load 
theorem integer layout disk failed load increase remaining disks properties new layout recall layout goals listed section 
assign data mapping successive user data mapped successive data units successive parity groups shown 
parity blocks highlighted bold letters subscripts indicate order user data units 
straightforward see prime groups rst properties single failure correcting ecient mapping large write optimization 
shall discuss properties distributed parity distributed degradation reconstruction maximum read parallelism maximum write reconstruction parallelism 
distributed parity parity blocks highlighted bold fonts 
shows possible pattern parity block distribution 
easy see distribution generalized case value prime general cases look 
circled numbers represent parity blocks 
arrangement parity blocks shown achieves parity distribution possible table 
method generalized value multiple values multiple parity distribution may result 
distribution technique similar repeat matrix number times rotating columns repetition :10.1.1.49.7954
example con guration repeated times repetition rotating matrix columns right 
way number parity blocks column combined matrix identical 
distributed degradation section shown layout optimal terms distributed degradation reconstruction prime section show prime groups close optimal prime small 
theorem prime groups layout close optimal degradation distribution prime small 
small hold 
example example section columns lookup table truncated increase load surviving disks single disk failure optimal increase 
increase equal lookup table optimal increase load 
layout close optimal terms distributed degradation distributed reconstruction small 
prime increase load happens matrix layout di erent matrices column case 
maximal read parallelism prime groups layout scheme level maximal read parallelism alvarez burkhard stockmeyer cristian prime schemes schemes parallel read count ne 
theorem prime groups layout parallel read count ne 
prime groups layout maximal read parallelism general case maximal read parallelism achieved read starts rst data block row 
maximum number rows read bo 
maximal write parallelism layout de ne function parallel write count maximum number data blocks disk supply writing consecutive blocks data parity 
obvious ne 
ne layout maximal write parallelism 
layout created prime groups parallel write count ne 
theorem prime groups layout parallel write count ne 
layout maximal write parallelism general case maximal write parallelism achieved write starts rst block row cn 
maximum number rows written 
maximal write parallelism achieve extremely useful reconstruction reorganization 
suppose parity groups row disk failed 
recon gure data parity groups reducing number parity groups 
recon guration disk array tolerate disk failure 
maximal write parallelism re guration done parallel disks 
th block surviving disks read parallel 
data failed disk reconstructed data parity rewritten back th block surviving disk 
furthermore recon guration process done parallel user read write request 
user requests read write consecutive blocks disks row lookup table blocks located read 
data parity information row lookup table reconstructed recon gured 
read operation reconstructed data user 
recon gured data parity rewritten back surviving disks 
read write user requests part reconstruction recon guration process 
new layout method prime groups evenly distribute parity groups declustered raid proposed 
prime groups satis es layout goals single failure correcting ecient mapping large write optimization distributed parity 
near optimal distributed degradation distributed reconstruction maximal read parallelism maximal write reconstruction parallelism 
prime groups alvarez burkhard stockmeyer cristian prime methods satis es large write optimization parallel read count 
roughly terms read write response time disk failure 
disk failed combine user access recon guration prime groups may perform better prime groups satis es maximal write reconstruction parallelism write request begins rst disk array 
optimal layout alvarez el possible limited cases 
prime layout possible prime layout may declustering ratio certain values prime groups layout near optimal terms declustering ratio prime 
prime groups compliment layouts proposed alvarez el criteria obtain layout quite di erent prime groups theirs 
furthermore prime group handle multiple faults 
number parity block parity group number information dispersal method proposed alvarez el 
rabin ecient dispersal information security load balancing fault tolerance 
journal th acm april pages 
guillermo alvarez walter burkhard larry stockmeyer cristian declustered disk array architectures optimal near optimal parallelism proceedings th annual international symposium computer architecture isca june pages 
alvarez burkhard cristian tolerating multiple failures raid architectures optimal storage uniform declustering proceedings th annual acm ieee international symposium computer architecture isca colorado june pages 
brady menon ecient scheme tolerating double disk failures raid architecture proceeding annual international symposium computer architecture pages 
chen raid high performance reliable secondary storage acm computer surveys vol 
june pages 
peter chen edward lee garth gibson katz raid high performance reliable secondary storage 
acm computing surveys vol 
june 
edited crc handbook combinatorial designs 
crc press 
marshall hall jr combinatorial theory nd edition wiley interscience series discrete mathematics 
mark holland garth gibson daniel siewiorek architectures algorithms line failure recovery redundant disk arrays 
distributed parallel databases vol 
pages 
mark holland garth gibson parity declustering continuous operation redundant disk arrays :10.1.1.49.7954
proceedings fifth international conference architectural support programming languages operating systems pages 
association computing machinery new york 
lee katz performance consequences parity placement disk arrays proceedings asplos iv pages 
merchant philip yu design modeling clustered raid 
digests papers nd international symposium fault tolerant computing pages 
computer society ieee june 
merchant philip yu analytic modeling clustered raid mapping nearly random permutation ieee transactions computers vol pages 
muntz lui performance analysis disk arrays failure 
proceedings th conference large data bases pages 
spencer ng richard mattson maintaining performance disk arrays failure uniform parity group distribution proceedings international symposium high performance distributed computing pages ieee computer society 
garth gibson katz case redundant arrays inexpensive disks raid 
proceedings acm sigmod conference pages association computing machinery 
reddy banerjee gracefully disk arrays 
digests papers st international symposium fault tolerant computing pages computer society ieee june 
wilkes golding staelin sullivan hp autoraid hierarchical storage system acm transactions computer systems vol feb pages 
schwabe sutherland improved layouts disk arrays journal computer system sciences vol 
academic press dec pages 
schwabe sutherland flexible usage parity storage space disk arrays proceedings eighth annual acm symposium parallel algorithms architectures padua italy june 
