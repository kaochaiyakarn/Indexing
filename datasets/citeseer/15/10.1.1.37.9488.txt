progress database ii strips connection fangzhen lin ray reiter department computer science university toronto toronto canada tel email fl ai toronto edu reiter ai toronto edu strips introduced fikes nilsson logical semantics problematic 
proposals literature lifschitz pednault bacchus yang 
common reliance meta theoretic operations logical theories order capture add delete lists strips operators clear exactly operations correspond declaratively especially applied logically incomplete theories 
provide semantics strips systems terms purely declarative situation calculus axiomatization actions effects 
view strips mechanism computing progression lin reiter initial situation calculus database effects action 
illustrate idea specifying different versions strips situation calculus 
fellow canadian institute advanced research preliminaries language situation calculus order sorted sorts state situations action actions object 
domain independent predicates functions constant sort state denoting initial state binary function denoting state resulting performing action state binary predicate oss meaning action possible executable state binary predicate state theta state 
write infix form means reached sequence executable actions 
usual abbreviates assume finite number state independent predicates arity object finite number state independent functions arity object object finite number fluents predicate symbols arity object theta state 
denote second order extension foundational axioms situation calculus lin reiter need induction situations reiter 
restrict situation calculus particular situation 
instance initial database finite set sentences mention state terms mention oss 
purpose state term st define st subset mention state terms st quantify state variables mention oss 
st denote second order extension st predicate variables arity object 
second order sentence quantifies predicate variable arity object theta state 
situation calculus theory actions form cf 
reiter lin reiter sigma ss ap una ffl sigma set foundational axioms situation calculus lin reiter 
play role current omit 
ffl ss set successor state axioms form oss oe phi fluent phi ffl ap set action precondition axioms form oss psi action psi ffl una set unique names axioms actions different actions action oe ffl initial database finite set order sentences central concept lin reiter imagine performing action ff initial database ff denote resulting situation ff 
imagine database ff act new initial database sense 
ff set sentences state ff ff ff 
queries ff equivalent suitable formal sense sigma ss ap una ff words ff acts new initial database wrt possible evolutions theory ff 
ff said progression respect action ff 
define progression formally lin reiter introduce equivalence relation structures 
structures language domains sorts action object 
define ff iff conditions hold 
interpret predicate function symbols take arguments sort state identically 

agree fluents ff predicate fluent variable assignment oe oe ff iff oe ff clearly ff equivalence relation 
ff agrees ff fluents state independent predicates functions free vary interpretation states 
particular interpret oss differently 
definition set sentences ff ff progression initial database ff wrt iff structure model ff iff model ff notice new database defined logical equivalence 
new database allowed contain second order sentences shown lin reiter progression order definable ff captured set second order sentences 
lin reiter specify important special cases shall exploit progression order definable 
intuition semantics strips operators mechanisms progressing situation calculus databases 
central idea devoted making intuition precise 
strips lifschitz define operator description triple sentence order language strips delete list add list sets sentences strips world description set sentences strips strips system consists 
world description called initial world description 
binary relation strips theta strips 
set op symbols called operators 
family operator descriptions ff ff ff ff op operator ff associated world description ff successor world description defined ff gamma ff ff successor world description ff admissible iff ff standard entailment relation order language strips case admissibility simply corresponds fact precondition ff entailed initial world description case standard view strips operator ff applicable 
intuitions strips standard prefer leave open interpretation entailment relation semantics strips systems indirect define certain classes theories situation calculus show associate suitable strips systems theories 
strips systems associated situation calculus theories account strips assigned semantics 
leaves strips systems associated situation calculus theory semantics strips systems full generality currently coherent semantics anyway 
strips open world context free strips point departure action theory sigma ss ap una initial database successor state axioms ss syntactic forms 
function symbols sort object second order language possesses constants 
treatment strips lifschitz provide relation recall language expressed 

state dependent sentences ground fluent literals form fluent constants sort object 

contains unique names axioms constants sort object pair distinct constant names sort object axiom 
contains pair complementary literals 

successor state axiom ss context free form oss oe delta delta delta am delta delta delta empty sequence may keeping intuition strips systems mechanisms progressing situation calculus databases want characterize result progressing effects action ff case action theories kind 
turns easy necessary done lin reiter section 
consider context free successor state axiom fluent relativized initial state possibilities ff affects truth value fluent successor state ff depending syntactic form ff case ff constants unique names axioms actions successor state axiom equivalent oss oe case ff constants unique names axioms actions successor state axiom equivalent oss oe logically equivalent oss oe case ff 
unique names axioms actions successor state axiom equivalent oss ff oe ff notice slightly restricted definition context free successor state axioms lin reiter 
abbreviation delta delta delta xn yn notice empty sequence logically equivalent true 
appeal lin reiter section characterize progression action ff 
suppose ff ground action term ff possible initially oss ff set sentences 
initialize state independent 

fluent suppose case ff constants add sentence ff 
ii 
ground instance add sentence ff 
iii 
ground instance add sentence ff different tuples constants 
invoke unique names axioms constants sort object 
suppose case ff constants add sentence ff ii 
ground instance add sentence ff different tuples constants 
invoke unique names axioms constants sort object 
iii 
ground instance add sentence ff 
suppose case ff 
ground instance add sentence ff 
ii 
ground instance add sentence ff 
resulting set enjoys property una progression action ff lin reiter theorem 
notice state dependent sentences ground literals contains pair complementary literals 
follows serve new initial database purposes iterating progression mechanism 
interpret construction set strips operator 
imagine suppressing state argument ground literals ask sequence deletions additions ground literals performed version order obtain state suppressed version state argument ff suppressed sentences 
deletions additions necessary achieve state suppressed transformation define delete add lists strips operator ff 
easy see deletions additions applied state suppressed version yields state suppressed version fluent 
suppose case ff constants 
delete sentence 
add sentence 

suppose case ff constants 
delete sentence 
add sentence 

suppose case ff 
case clear define strips system associated operator ff 
language strips state suppressed version 
initial world description 
ordinary logical entailment world description sentence oe strips oe iff oe 

ff precondition state suppressed version right hand side equivalence ff situation calculus action precondition axiom 

fluent include ff add delete lists literals specified cases 
example consider blocks world actions ffl move move block block block provided clear block top block ffl move block table block provided clear table block clear 
ffl movetotable move block block table provided clear top see section relevant definitions 
take self evident meant formally language obtained suppressing objects sort state language fluents ffl clear block blocks top state ffl block touching block state ffl ontable block table state setting axiomatized follows action precondition axioms oss move clear clear oss clear clear ontable oss movetotable clear successor state axioms oss oe clear move move movetotable movetotable clear move oss oe move movetotable move oss oe ontable movetotable ontable obtain strips operator description schemas move clear clear clear clear clear 
clear clear clear 
clear clear ontable clear ontable clear 
notice schemas standing family operators obtained instantiating variables schema constants language strips clear ontable clear 
movetotable clear 
clear clear ontable 
clear clear ontable 
rcf strips relational context free strips version strips derives action theories form sigma ss ap una initial database successor state axioms ss syntactic forms 
function symbols sort object second order language possesses constants 

contains sentence form fluent delta delta delta tuples constant symbols sort object 
state dependent sentences 
initial databases form special cases relatively complete databases defined lin reiter 
case permitted case axiom false 
example agent hand initially empty holding false initially block block block 
contains unique names axioms constants sort object 

successor state axiom ss context free form 
notice single sentence logically equivalent delta delta delta oe recall language expressed 
notice positive instances trivially determine sentence 
sufficient represent database form say computational purposes set positive instances claim versions strips suppressing state argument 
relational databases fact unique names assumption condition defining properties relational database reiter 
relational tables just ground instances fluents 
bear mind logically database consists table axiom unique names axioms 
previous section want characterize result progressing effects action ff case action theories kind 
appeal results lin reiter section 
consider context free successor state axiom fluent relativized initial state possibilities ff affects truth value fluent successor state ff depending syntactic form ff case ff constants exactly reasoning case section successor state axiom equivalent oss oe assumption syntactic form equivalent oss oe delta delta delta case ff constants exactly reasoning case section successor state axiom equivalent oss oe logically equivalent oss oe delta delta delta equivalent oss oe delta delta delta ffl identical tuples formula false 
ffl different tuples formula equivalent unique names axioms constant symbols sort object 
different tuples sentence logically equivalent oss oe delta delta delta case ff 
successor state axiom equivalent oss ff oe ff logically equivalent oss ff oe ff delta delta delta appeal lin reiter section characterize progression action ff 
suppose ff ground action term ff possible initially oss ff set sentences 
initialize state independent 

fluent suppose case ff constants add sentence delta delta delta suppose case ff constants suppose sentence defining initial state different tuples add sentence delta delta delta suppose case ff 
sentence defining initial state add sentence ff delta delta delta resulting set enjoys property una progression action ff lin reiter theorem 
syntactic form serve new initial database purposes iterating progression mechanism 
seek interpret construction set strips operator 
imagine representing state dependent sentences delta delta delta state suppressed relational database ground instances 
emphasize representation merely shorthand sentence 
ask sequence deletions additions ground literals performed state suppressed relational database version order obtain relational version deletions additions necessary achieve transformation corresponding representation define delete add lists strips operator ff 
easy see deletions additions applied yield state suppressed relational database representation fluent 
suppose case ff constants add sentence 

suppose case ff constants delete sentence 

suppose case ff 
case clear define strips system associated operator ff 
language strips state suppressed version 
initial world description 
sentence oe strips oe iff oe 
world description relational database form fluents sentences mention fluent ground atoms fluent 
translation relational database part full logical form follows consists sentences mention fluent sentences form delta delta delta see section relevant definitions 
ground instances fluent 
ff precondition state suppressed version right hand side equivalence ff situation calculus action precondition axiom 

fluent include ff add delete lists literals specified cases 
example consider actions fluents axioms example treat setting instance rcf strips situation calculus specification 
case obtain rcf strips operator description schemas move clear clear clear 
clear clear 
clear clear ontable clear ontable 
clear 
movetotable clear 

clear ontable 

contrary popular opinion strips systems alternatives deductive logic alternatives situation calculus 
strips mechanism progressing situation calculus database semantics best understood suitable situation calculus axiomatization actions effects 

connection rcf strips relational databases section suggests natural generalization strips operators allow arbitrary relational algebra operators just adds deletes defining operator effects 
done appropriate semantics defined terms situation calculus axiomatization relaxes context free restriction successor state axioms section lin reiter full version 

progression order definable completely general form strips know impossible 
bacchus yang 
downward refinement efficiency hierarchical problem solving 
artificial intelligence 
appear 
fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
lifschitz 
semantics strips 
reasoning actions plans proceedings workshop pages 
morgan kaufmann publishers 
june july oregon 
lin reiter 
state constraints revisited 
second symposium logical formalizations commonsense reasoning pages austin texas 
jan 
lin reiter 
progress database logical foundations 
technical report department computer science university toronto 
lin reiter 
progress database ii strips connection 
technical report department computer science university toronto 
pednault 
adl exploring middle ground strips situation calculus 
brachman levesque reiter editors proceedings international conference principles knowledge representation reasoning kr pages 
morgan kaufmann publishers 
reiter 
proving properties states situation calculus 
artificial intelligence 
appear 
reiter 
logical reconstruction relational database theory 
brodie mylopoulos schmidt editors conceptual modelling perspectives artificial intelligence databases pages 
springer new york 
reiter 
specifying database updates 
technical report department computer science university toronto july 

