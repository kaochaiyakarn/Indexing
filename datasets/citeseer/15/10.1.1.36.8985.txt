syntax semantics dependent types martin hofmann dependent types types simple types products function spaces natural numbers depend vary values 
example dependent type type vectors arrays vec oe length type oe 
objects nil oe vec oe cons oe vec oe suc oe vec oe 
consider function returns vector length entries 
function type pix type functions property type result depends argument 
algorithm typed list 
point dependent typing reveals information function 
example kind exception free head function vectors hd pix vec oe suc oe yields entry vector 
typing prevents unwanted case hd gets applied empty list 
way dependent typing circumvents need partial functions certain cases 
source type dependency comes type variables type universes 
instance type monoids carrier mon def theta theta type depending type variables treated ordinary variables universes types containing names types members 
function constructing free monoid type type pix mon list universe 
third important source dependent types comes types analogy propositions constructive logic seen types type proofs 
instance proof oe consists proof oe proof proof oe oe consists procedure hofmann transforms hypothetical proof oe proof 
conjunction implication identified cartesian product function space respectively 
correspondence predicates propositional functions dependent types 
describe view atomic equality predicate universal existential quantification types type formers 
fact universal quantification corresponds pi type introduced 
propositions ordinary types part types 
instance enrich defined type monoids monoids proposition stating associativity neutrality mon def theta ffi ffi ffi ffi ffi ffi sigma type generalisation cartesian product theta dependent types corresponds propositions types analogy existential quantification 
object generalised signature consists ffl object ffi type theta ffl object type ffl proof ffi associative neutral main aim article explain dependent types formalise constructive mathematics program development specification introduce reader tool metatheoretic study dependent type theory category theoretic semantics 
semantics understand compositional assignment mathematical objects syntactic objects instance sets sets types set theoretic functions open terms types 
interpretation performed aim establishing consistency conservativity certain type theoretic constructs simply order explain motivate justify 
due type dependency verification interpretation validates rules type theory quite involved proven useful define general notion category theoretic semantics proven sound complete 
order obtain interpretation type theory needs check instance semantic notion 
semantics surprising set theoretic semantics order logic trivial completeness property case heyting algebra semantics intuitionistic logic 
point soundness theorem non trivial saved presenting translation syntax model construction 
syntax semantics dependent types overview section give syntax extensible calculus dependent types encompasses various named type theories martin lof type theory calculus constructions 
xx introduce pre syntax syntactic context morphisms 
auxiliary syntactic notions required define interpretation function construct term model 
contains material category theoretic semantics 
introduces categories families provide category theoretic counterpart type dependency form backbone semantics 
compare notion related concepts identify additional structure required model type term formers 
section ends interpretation syntax semantic structures 
devoted extended application material give interpretation types variable sets presheaves establish conservativity martin lof logical framework ordinary type theory 
section larger subsection ends exercises contain definitions proofs similar previously ones required contain applications material 
section contains overview literature applications semantic methods dependent type theory suggestion reading 
article self contained presupposition basic category theory xx included introductions readily available 
required notions summarised 
formal systems dependent types theory dependent types formal system mainly allows derive judgements form oe term type oe oe type oe type 
types may contain terms typing affects kinds judgements defined simultaneously 
instance vec oe type oe type furthermore usually want notion definitional equality built theory example wish consider definitionally equal terms vec oe vec oe definitionally equal types vec oe vec oe 
leads forms judgement oe definitionally equal terms type oe oe type oe definitionally equal types 
keep track types free variables occurring judgement assert know declarations may depend vec convenient judgements hofmann relative list variable declarations including free variables occurring inside judgement 
lists declarations called contexts type assignments 
intuitively context oe oe formed oe type context oe gamma oe gamma pair wise distinct 
typing affects context validity arrive kinds judgements gamma ctxt gamma valid context gamma oe type oe type context gamma gamma oe term type oe context gamma gamma delta ctxt gamma delta definitionally equal contexts gamma oe type oe definitionally equal types context gamma gamma oe def 
equal terms type oe context gamma 
formedness equality contexts defined terms judgements technically easier include primary notions 
regardless rules introduce describe particular type term formers natural numbers pi types structural rules 
ffl rules context formation pi ctxt emp gamma oe type gamma oe ctxt ext gamma delta ctxt gamma oe type gamma oe delta ctxt ext eq variables rules ext ext eq assumed fresh 
ffl variable rule gamma oe delta ctxt gamma oe delta oe var ffl rules expressing definitional equality equivalence relation gamma ctxt gamma gamma ctxt eq gamma delta ctxt delta gamma ctxt eq gamma delta ctxt delta theta ctxt gamma theta ctxt eq syntax semantics dependent types gamma oe type gamma oe oe type ty eq gamma oe type gamma oe type ty eq gamma oe type gamma ae type gamma oe ae type ty eq gamma oe gamma oe tm eq gamma oe gamma oe tm eq gamma oe gamma oe gamma oe tm eq ffl rules relating typing definitional equality gamma oe gamma delta ctxt gamma oe type delta tm conv gamma delta ctxt gamma oe type delta oe type ty conv ffl convenience cf 
introduce weakening substitution rules ranges judgements oe oe type oe oe type 
gamma delta gamma ae type gamma ae delta weak gamma ae delta gamma ae gamma delta subst similarly delta denotes capture free substitution means bound variables systematically renamed prevent free variables bound 
henceforth consider contexts types terms equal agree names bound variables assume existence capture free substitution function equivalence classes 
de bruijn style presentation syntax avoid identification 
huet 
de bruijn presentation gives rise canonical representatives equivalence classes yields algorithm implementing capture free substitution 
hofmann type formers type term formers introduced formation elimination equality rules 
definitive set type formers new ones invented needed 
give idea general pattern 
dependent function space dependent function space called dependent product pi type corresponds set theoretic notion cartesian product family sets pi elements functions mapping index element corresponding set type theory expressed follows gamma oe type gamma oe type gamma pix oe type pi gamma oe oe type gamma oe type gamma pix oe pix oe type pi eq rule expresses dependent function space consists type oe possibly depending types recorded gamma type depending oe gamma viz 
rule pi eq expresses definitional equality respected pi 
variable bound pix oe type subject convention renaming variables set 
form elements pi type rule associated congruence rule gamma oe gamma oe pix oe pi gamma oe gamma oe oe type gamma oe type gamma oe oe pix oe pi eq give element pix oe give element presence variable type oe 
congruence rule pi eq expresses definitional equality preserves pi 
henceforth refrain writing congruence rules 
rules silently understood type term introduce 
elements pi type consumed application settheoretic situation element pi specific gives element gamma pix oe gamma oe gamma app oe pi syntax semantics dependent types notice square brackets typing annotation oe integral part term application indicate binding encounter source definitional equality applying function oe term oe results replaced gamma oe pix oe gamma oe gamma app oe oe pi notice substitution plays prominent role dependently typed calculi needed formulate typing rules conversion rules case simply typed lambda calculus 
attribute definitional en equation pi certainly arguable 
motivated understanding oe canonical element pix oe application derived concept defined equation pi 
view important wants see type theory foundation constructive mathematics accordingly justified philosophical argument interpretation system see martin lof 
distinction canonical noncanonical elements important 
motivate definitional equalities 
pragmatic explanation pi applications uses abstraction means making definitions application instantiate definition 
pi type way sides pi definitionally equal proper sense word 
dependent sum type introduce sigma type dependent sum corresponding disjoint union set theory 
family sets form set sigma def elements consist index element corresponding set type theory corresponding formation rules look follows 
gamma oe type gamma oe type gamma sigmax oe type sigma gamma oe gamma gamma pair oe sigmax oe sigma elimination rule looks bit complicated sight gamma sigmax oe ae type gamma oe ae pair oe gamma sigmax oe gamma sigma sigmax oe ae oe ae sigma variable ae variables bound inside sigma indicated square brackets 
idea sigma order hofmann give possibly dependent function sigmax oe specify canonical elements viz 
pairs 
expressed definitional equality gamma sigma sigmax oe ae oe pair oe ae pair oe gamma sigma sigmax oe ae oe pair oe ae pair oe sigma says function sigmax oe defined eliminator sigma behaves canonical elements specified argument example show define projections sigma type 
assume gamma oe type gamma oe type gamma sigmax oe define def sigma sigmax oe oe oe oe particular case canonical pair oe rule sigma gives gamma oe expected 
second projection defined similarly def sigma sigmax oe oe notice definiens right hand side typed virtue rules sigma ty conv allow conclude gamma oe pair oe restrict elimination operator sigma cases type ae depend sigmax oe define projection longer second 
called weak sigma elimination see luo 
important special cases pix oe sigmax oe arise depend oe 
case gamma oe type gamma type write oe def pix oe oe theta def sigmax oe indicating cases pi sigma types correspond ordinary non dependent function space cartesian product respectively 
constructive proof existential statement oe consists element oe witness proof element 
propositions types analogy sigma type counterpart existential quantification 
syntax semantics dependent types natural numbers example basic type provided type natural numbers rules gamma ctxt gamma type gamma ctxt gamma gamma gamma suc elimination rule similar sigma types order define possibly dependent function give canonical elements suc 
case suc function may called primitive recursively gamma oe type gamma oe gamma oe oe suc gamma gamma oe oe oe primitive recursive behaviour expressed rules definitional equality gamma oe oe oe gamma oe oe oe gamma oe oe suc oe suc gamma oe oe suc oe oe oe suc elimination rule natural numbers allows definition functions primitive recursion proof properties natural numbers mathematical induction 
instance define addition follows def suc writing closed term suc suc times pi set theoretic natural numbers fold application rule nc followed 
see example mathematical induction 
hofmann notation henceforth freely suppress type annotations increases readability 
instance may write oe oe omit prevailing context gamma write gamma write pi want emphasise judgement holds empty context 
oe contains free variable write oe emphasise notation oe oe case 
implementations type theory conventions part official syntax 
important question shorthands treated formally informally 
decided syntax explicit possible facilitate meta theoretic study 
doing proofs theory obviously syntactic sugar unavoidable 
identity types explained definitional equality congruence generated computational equations pi 
main purpose facilitate construction inhabitants types examples definition second projection sigma types unavoidable 
definitional equality merely judgement type proposition established induction sigma definitional equalities assumptions context 
order enable equality reasoning inside type theory lead introduce type corresponding equality identity type 
terms type necessarily inhabited type proofs equality gamma oe gamma oe gamma id oe type id identity types canonical inhabitants corresponding reflexivity gamma oe gamma refl oe id oe id call terms gamma oe propositionally equal type gamma id oe inhabited 
implicit congruence rules rule propositional equality extends definitional equality gamma refl oe id oe provided gamma oe 
far know propositional equality reflexive relation 
properties symmetry transitivity leibniz principle syntax semantics dependent types consequences elimination rule identity types gamma oe type gamma oe oe id oe type gamma oe refl oe gamma oe gamma oe gamma id oe gamma id oe oe id oe oe id associated equality rule gamma id oe oe id oe oe refl oe refl oe gamma id oe oe id oe oe refl oe refl oe id eliminator id induction principle sigma roughly states element type behaves canonical form refl oe 
demonstrate derive leibniz principle id suppose oe ae type propositionally equal terms type oe oe id oe 
ae construct element subst oe ae ae follows 
define oe oe id oe def ae ae recall oe abbreviates pix oe 
ae inhabitant oe refl oe subst oe ae def app id oe oe id oe ae ae id pi get derived rule subst oe ae refl oe ae 
subst derive symmetry transitivity congruence properties propositional equality usual way 
example oe id oe resp oe oe def subst oe id refl id derive similar congruence property case depends derived properties combinators propositional equality refer nordstrom petersson smith streicher hofmann 
collected material carry promised example proof induction 
wish construct element type id type hofmann addition operation defined 
notice refl id immediately definition 
define oe def id 
oe type distinguished free variable refl oe oe suc id suc suc type oe resp suc oe suc conclude oe refl oe resp suc oe refer nordstrom petersson smith examples kind 
metatheory strength formulations identity type analysed hofmann streicher 
propositional equality affect definitional presence identity types remains confined intensional equality 
type theory identity types defined called intensional type theory see martin lof 
exists formulation identity types may conclude gamma oe gamma id oe 
rule called equality reflection possible derive definitional equalities induction extensional 
type theory equality reflection called extensional type theory 
proof discarded application rule definitional equality called equality typing undecidable 
see 
universes universe type containing codes types 
expressed rules gamma ctxt gamma type gamma gamma el type el code form type associated el 
far universe contain closed codes 
syntax semantics dependent types may achieved stipulating universe closed certain type formers 
instance closure pi types expressed gamma gamma el gamma pi el pi gamma el el gamma el el el pi el pi gamma el pi el gamma el gamma app el el el pi gamma app el el el el el gamma app el el el el el pi economic syntax universes closed pi types obtained replace rules single new type equality gamma pi el gamma el pi el pis el el type pi ty states el pi el product el behaving 
need new application abstraction operators app 
syntax fact literature disadvantage longer case equal types share outermost type 
difficult show type formers injective auxiliary property required establish subject reduction property untyped rewrite system derived definitional equality 
models rule pi ty valid canonical interpretation pi see streicher example def 

closure natural numbers described gamma ctxt gamma rules introducing term formers suc witnessing el behaves impose equality gamma el type type theory contains natural numbers 
similar way closure type formers including universe stipulated 
final important closure property universes impredicative quantification gamma oe type gamma oe gamma oe hofmann gamma oe el gamma oe el el oe gamma el oe gamma oe gamma app oe el el gamma app oe el oe el el gamma app oe el oe el el difference closure pi types domain type oe arbitrary confined small type form el 
particular oe form terms el el closed inhabitant pi el el polymorphic identity function known polymorphic lambda calculus 
universes employed modularisation abstraction 
instance permit definition type certain algebraic structure 
way type semigroups carrier defined sem def el theta el el pix el piy el piz el id el ffi ffi ffi ffi element type sem consists binary function el proof function associative 
write function pix mon sem forgets neutral element 
form sigmax sem type semigroups 
complex examples kind may luo 
application pattern semantics modules functional languages harper mitchell 
propositions types analogy view universe type propositions 
instance type oe viewed analogue power set oe 
miscellaneous types counterpart absurdity logic empty type gamma ctxt gamma type gamma oe type gamma gamma oe oe syntax semantics dependent types canonical elements computation rule 
useful type single canonical element corresponding true proposition gamma ctxt gamma type gamma ctxt gamma gamma oe type gamma oe gamma gamma oe oe gamma oe oe gamma oe oe number types considered literature product types corresponding binary disjoint union finite types elements natural number types founded trees subset types quotient types name important ones 
implementations lego coq new type formers defined fly giving rules canonical elements suc case 
elimination rules generated automatically 
alf possible elimination rules replaced general device pattern matching form constructors 
consider arbitrary theories dependent types defined type symbols constants equations 
described pitts 
examples type theories section briefly describe named type theories fit formal framework described 
martin lof type theory collective name type theories containing type formers universe closed impredicative quantification 
characteristic feature martin lof type theory presence identity types equality reflection 
martin lof invented type theories aim extending propositions types correspondence predicate logic provide universal language constructive mathematics martin lof martin lof 
standard martin lof type theories nordstrom petersson smith 
implementation extensional martin lof type theory nuprl system constable 
hofmann logical framework martin lof logical framework lf see part iv nordstrom petersson smith type theory pi types universe 
intended define theories particular martin lof type theory extensions lf constants equations 
idea types type formers declared constants universe term formers declared constants appropriate el types 
distinguish object level type formers different notation pi type framework written oe pix oe oe oe iterated pi types written oe oe pix oe pix oe abstraction written oe oe application written app oe 
iterated abstractions applications written oe oe respectively 
lacking type information inferred 
universe written set el operator omitted 
example pi type described constant equality declarations understood valid context pi oe set oe set set app oe set oe set pi oe oe oe set oe set oe pi oe oe set oe set oe oe app oe oe notice terms free variables represented framework abstractions type substitution represented framework application type app equation 
way burden dealing correctly variables substitution binding shifted object language logical framework handled 
course lf cope type formers dependent function space 
refer consider ad hoc type creating copy argument defined rules gamma oe type gamma oe type gamma oe gamma oe lf rendered constants set set oe set oe oe 
alf system magnusson nordstrom logical framework 
allows definition types set simply giving loc 
cit 
alf system type annotations functional abstractions omitted 
include sake consistency 
syntax semantics dependent types constructors 
functions types defined pattern matching constructors needed 
logical framework encode syntax logical systems predicate logic modal logic 
interested reader referred harper honsell plotkin 
calculus constructions calculus constructions cc coquand huet type theory pi types universe closed impredicative quantification impr 
universe traditionally denoted prop corresponding el operator written prf gamma omitted 
idea universe prop corresponds type propositions prf gamma associates type proofs proposition 
originally intended prop contains propositions datatypes natural numbers definable impredicative encodings instance nat def prf prop prf prf prf type constants suc gamma defined operator permitting definition functions primitive recursion 
point nat form prf gamma serve argument element nat inductive datatypes lists trees defined way 
similarly logical connectives defined type prop usual higher order encodings coquand huet 
encoding datatypes inside prop proved insufficient internal induction principles available 
gave rise extensions pure calculus constructions luo extended calculus constructions ecc implemented lego system luo luo pollack calculus inductive definitions cid implemented coq system coquand paulin mohring dowek 
ecc extends calculus constructions sequence universes contains code prop contained datatypes reside inductive rules ones higher universes modularisation hinted example 
prop propositions 
cid universes closed impredicative quantification set prop 
datatypes reside set inductive rules ecc 
implementation cid coq comes program extraction facility extracts executable ml programs derivations cid essentially removing terms types coming universe prop see paulin mohring 
hofmann pre syntax syntax types terms contexts typing equality rules 
certain purposes convenient simpler inductive definition possibly non typed terms actual ones singled rules 
instance want consider app term albeit typed 
types contexts give semantics type theory terms untyped computation allen martin lof auxiliary device definition interpretation type theory semantic structures definition context morphisms 
pre contexts gamma pre types oe pre terms type theory pi gamma sigma gamma identity types natural numbers grammar 
gamma pi gamma oe provided declared gamma oe pix oe sigmax oe id oe oe app oe pair oe sigma sigmax oe ae oe refl oe id oe oe id oe oe suc oe oe capture free substitution identification terms different bound variables dealt level pre syntax 
predicates formed valid pre terms types contexts occur derivable judgements 
note variables declared pre context pairwise distinct 
exercises construct inhabitant type id type show arbitrary types gamma oe type gamma type gamma oe ae type type corresponding axiom choice inhabited gamma pix oe ae sigmaf oe pix oe ae type syntax semantics dependent types analogy type natural numbers define rules list type type oe associates type list oe consisting finite sequences elements oe 
hint think lists inductively generated empty list successive additions elements oe cons 
define length function type list oe define type vec oe lists length lists identity type sigma type 
define type binary natural numbers constructors zero suc suc define conversion function binary representations give rules universe containing code empty type code unit type 
show type theory supports natural numbers universe empty type type empty context inhabited pi id suc type corresponding peano fourth axiom 
hint define function pi pi suc show semantic argument type inhabited absence universe smith 
troelstra van dalen show type theory empty type empty type defined id suc 
elimination operator oe defined induction structure oe 
notice view semantic result anticipated previous exercise definition hinges fact empty type place 
show type theory containing type formers described rules weak subst admissible 
weak sigma types calculus constructions oe type oe prop define oe def prop oe abbreviates prf define pairing operation oe prf associates element prf oe define case oe prf prop projection witness prf prf prf 
show witness hofmann give rules universe closed impredicative quantification economic syntax exemplified rule pi ty prove gamma oe gamma gamma oe type induction derivations 
find type annotations term formers safely omitted violating property 
discuss properties type theory type annotation application omitted 
words replace app oe app official syntax violating uniqueness types 
see streicher thorough discussion point 
context morphisms definition gamma delta def oe oe valid contexts 
def sequence pre terms write gamma delta say context morphism gamma delta judgements hold gamma oe gamma oe gamma oe gamma gamma examples 
context gamma empty context morphism gamma pi context morphism gamma pi 
gamma oe oe context gamma oe type fresh variable forms context morphism gamma oe gamma denote gamma oe 
concrete example refl forms context morphism pi id pi id 
sequence terms forms context morphism pi id shows target context delta uniquely determined term gamma oe form context morphism gamma gamma oe gamma oe oe identity context morphism gamma id gamma gamma id gamma 
generalised substitution denote syntactic identity renaming variables gamma delta pre type write delta simultaneous replacement delta variables corresponding terms precisely delta oe oe delta syntax semantics dependent types attribute simultaneous means variables delta disjoint gamma performing substitution 
define gamma delta analogously pre terms pre contexts judgements form oe oe type oe oe type 
induction length delta rules weak subst establish property proposition gamma delta delta theta gamma theta delta delta 
interested case theta pi subsumes general case replaced context morphism theta gamma theta delta delta theta theta theta order get inductive argument needs case non empty theta 
theta pi confusion arise write delta similarly terms contexts judgements 
notice special case context morphism gamma oe defined 
gamma gamma oe gamma oe gamma oe generalised substitution subsumes weakening 
similarly gamma oe gamma oe ordinary substitution subsumed 
defined substitution operation allows establish derived typing rule non empty context morphisms gamma delta delta oe ctxt gamma oe gamma delta oe mor cons rule gamma ctxt gamma pi mor empty generates valid judgements form gamma delta 
gamma delta delta theta form list terms ffi 
words ffi obtained simultaneously delta variables corresponding terms list ffi forms context morphism gamma theta ffi indicated associative operation 
seen directly intuition substitutions prefer state proposition properties reader invited prove simultaneous induction length proposition assume gamma gamma delta delta theta 
furthermore theta oe type theta oe 
equations hold syntactic identity 
gamma ffi theta oe ffi oe ffi ffi ffi ffi ffi hofmann hint proof define ffi inductively ffi def ffi def ffi denotes list extended fact delta variables occurs delta 
context morphisms definitional equality 
gamma delta gamma delta write gamma delta abbreviation judgements gamma oe gamma oe gamma oe gamma gamma delta oe oe notice equivalently replace second judgement gamma oe view congruence rules definitional equality 
gamma delta say definitionally equal context morphisms gamma delta 
straightforward induction possible derive congruence rules defined operators context morphisms definitional equality gamma gamma ctxt delta delta ctxt gamma delta gamma delta exercises show defined context morphisms gamma oe theta properties ffl gamma delta id delta ffi ffi id gamma ffl gamma oe gamma oe ffi id gamma ffl gamma delta oe gamma oe ffi ffl gamma delta delta oe ctxt delta oe ffi oe ffi gamma oe 
ffl gamma delta delta oe ffi oe ffi 
ffl gamma oe type fresh id gamma oe gamma oe 
show delta pix oe type gamma delta pix oe pix oe oe 
hint may assume occur delta types identified renaming bound variables 
category theoretic semantics type theory develop notion semantics theories dependent types known interpretations type theory form instance 
syntax semantics dependent types main purpose defining semantics easier show mathematical structure forms instance framework defining interpretation function directly 
achieved essentially properties semantics ffl substitution primitive operation inductively defined 
ffl variables replaced combinators substitutions 
ffl definitional equality modelled true set theoretic equality 
category theoretic semantics abstraction combinators ffi gamma gamma gamma gamma equations context morphisms identified previous section 
key concept category collection objects contexts objects collection morphisms context morphisms associative composition identities 
lack space give categories need presuppose basic notions particular categories functors natural transformations isomorphisms terminal objects category sets functions 
reading relevant parts chapter lambek scott instance suffice attain required state knowledge 
category write jcj collection objects collection morphisms write 
final prerequisite oe informal proposition define set oe oe oe true oe oe false 
categories families choose semantic framework categories families dybjer variant cartmell categories attributes advantage equationally defined conditional equations 
furthermore closer syntax categories attributes hope author easier understand 
definition cwf follows structure judgements type theory context morphisms substitution part structure defined 
explanation define important instances term model calculus dependent types described 
set theoretic model set running examples 
include context morphisms syntax contains kinds objects contexts context morphisms types terms 
accordingly domain interpretation model 
precisely cwf contains hofmann ffl category semantic contexts context morphisms ffl gamma collection ty gamma semantic types ffl gamma oe ty gamma collection tm gamma oe semantic terms appropriate leave attribute semantic write tm oe tm gamma oe 
omit subscripts clear context 
term model collection contexts quotient definitional equality formed contexts pre contexts gamma gamma ctxt 
contexts gamma delta identified gamma delta ctxt 
tend denote equivalence classes representatives 
morphism gamma delta equivalence class respect definitional equality syntactic context morphisms gamma delta 
defined view observations 
composition identities corresponding operations syntactic context morphisms 
ty gamma set pre types oe gamma oe type factored definitional equality oe identified gamma oe type 
tm gamma oe set pre terms gamma oe factored definitional equality 
set theoretic model set category contexts category sets functions 
element ty set gamma family sets oe fl fl gamma indexed gamma 
element tm set gamma oe assignment element fl oe fl fl gamma 
need constants operations domains order interpret rules type theory 
substitution axiomatised way corresponds defined syntactic substitution 
definition accounts structural rules common systems dependent types set 
interpretation various type term formers additional structure 
semantic substitution described operations context morphism types terms gamma delta function gammaff ty delta ty gamma oe ty delta function gammaff tm delta oe tm gamma oeffg 
operations compatible composition identities sense 
gamma delta theta gamma delta delta theta oe ty theta tm theta oe equations required hold theta oe ty theta ty id ffi fg ty gamma ty comp theta tm theta oe tm id ffi fg tm gamma ffi fg tm comp notice equations required typecheck 
notice substitution equations ty id syntax semantics dependent types ty comp ty contravariant functor set sets tm organised functor see 
term model substitution generalised substitution defined 
means oeffg def oe def 
set theoretic model substitution pre composition 
delta gamma function oe fl fl gamma family sets oeffg family sets oeffg ffi def oe ffi similarly tm gamma oe ffi def ffi 
easy see required equations hold 
want interpret context formation rules 
model empty context require terminal object category usually write hi gamma unique morphism gamma 
term model set theoretic model terminal objects empty context arbitrary singleton set respectively 
interpret context extension require gamma oe ty gamma context gamma oe morphism oe gamma oe gamma 
context gamma oe called comprehension oe oe called projection associated oe 
term model gamma oe extended context gamma oe oe context morphism gamma oe gamma oe gamma defined 
set theoretic model gamma oe disjoint union oe fl set fl fl gamma oe fl function oe sends fl fl 
morphism oe seen projection generalised product gamma oe 
second projection takes form element oe tm gamma oe oe corresponding judgement gamma oe oe 
term model term gamma oe oe set theoretic model define assignment fl 
note model oe fl oe fl definition syntactic context morphisms need operation extends semantic context morphism terms 
gamma delta oe ty delta tm gamma oeffg context morphism hf mi oe gamma delta oe extension satisfying equations gamma delta gamma oe ty delta tm gamma oeffg 
oe ffi hf mi oe gamma delta cons oe fhf mi oe tm gamma oeffg cons hf mi oe ffi hf ffi oe delta oe cons nat hp oe oe oe id delta oe delta oe delta oe cons id term model extension gamma delta oe set theoretic model hf mi oe fl gamma def fl fl 
include type information oe hf mi oe inferred types completes definition categories families 
summarise cwf structure ty tm gammaf gammag hi gamma gamma gamma gamma gamma gammai gamma hofmann sorts operations subject requirements set 
substitution gammaf gammag understood types terms 
definition give section equivalent compact definition cwf family valued functors universal property 
idea family valued functors due peter dybjer 
definition category fam families sets objects pairs set family sets indexed morphism pair function family functions 
carrier sets ty tm cwf category compactly single functor op fam 
ty tm obtain functor functor object part gamma ty gamma tm gamma oe oe ty gamma morphism part induced semantic substitution 
conversely functor op fam define ty gamma tm gamma oe oe gamma 
delta gamma writing ty gamma ty delta oe tm gamma oe tm delta oe giving semantic substitution 
required equations follow functoriality definition category ty tm op fam functor 
furthermore gamma object oe ty gamma 
comprehension oe object gamma oe projections oe gamma oe gamma oe tm gamma oe oe delta gamma tm oeffg exists unique morphism hf mi oe delta gamma oe satisfying oe ffi hf mi oe oe fhf mi oe definition dybjer category families data 
ffl category terminal object ffl functor ty tm op fam ffl comprehension gamma oe ty gamma 
definition equivalent 
proof left reader 
fact comprehensions enjoy universal property unique isomorphism see means choice representatives cwf fully determined underlying family valued functor 
syntax semantics dependent types terms sections assume cwf 
tm gamma oe tm gamma gamma def hid gamma mi oe gamma gamma oe cons oe ffi id gamma right inverse called section oe 
conversely gamma gamma oe section oe oe ffi id gamma oe ffg tm gamma oe tm gamma oe ffi fg tm gamma oe ty comp ty id assumption 
operations establish bijective correspondence collection sect oe sections oe tm gamma oe oe mg cons oe ffg hid gamma oe oe hp oe ffi oe oe hp oe oe oe ffi cons nat cons id 
weakening suppose gamma oe ty gamma 
context morphism oe oeffg gamma oe called weakening oe defined oe hf ffi oeffg oeffg oe term model oe syntactic context morphism defined set theoretic model oe fi oe fi fi 
weakening map morphism form oe gamma oe gamma inductively morphism form weakening map 
term model weakening map takes form projection gamma oe delta gamma delta 
introduce abbreviations oe weakening map clear context 
furthermore gamma delta context morphism may write oe 
example demonstrated term model pix oe ffg pix oeffg ff exercises show cwf defined morphisms oe satisfy coherence requirements id gamma oe id gamma oe ffi oe oe ffi oeffg 
transform equations explicit notation prove explain intuitive meaning 
oe ffi oe oe ffi oe id gamma oe ffi ffi hp oe ffi oe oe expand expression gamma oe oe ty gamma 
hofmann check equations cons cons id hold set theoretic model 
exercise taken sections lead jan smith proof independence peano fourth axiom type theory universes smith 
poset truth values fff ttg ff tt viewed category 
show terminal object viz 
tt 
extend cwf putting ty tt ty ff fff ttg tm gamma oe gamma oe 
hint define comprehension gamma oe def gamma oe 
intuition model interpretation syntax view tt potentially inhabited ff empty 
notions semantics literature notions model offered equivalent 
key property models substitution terms defined concept primitive 
understand works need notion pullback category 
definition category morphisms common codomain 
pullback pair morphisms ffi ffi morphisms ffi ffi exists unique morphism ffi ffi 
quadruple morphisms ffi ffi commuting square called pullback form pullback category set pullback exists def projections send pair respectively 
diagrams typeset paul taylor latex diagram package gratefully acknowledged 
syntax semantics dependent types set view morphism family sets indexed family sets gamma gamma def fz yg 
conversely family sets construct function projection disjoint union def fl fl sends fl 
precisely notation pullback defined applying construction composite family precisely put def fl fl projections fl fl fl 
note equal canonical pullback fl fl general correspondence pullbacks substitution arises framework proposition cwf gamma oe ty gamma 
square pullback oeffg oe gamma oe oeffg gamma oe proof 
diagram commutes equation cons 
see pullback assume theta theta gamma oe ffi oe ffi decompose hp oe oe oe ffi hp oe ffi oe fq gi oe hf ffi ni oe def oe fq tm oe oe ffi ffi def hp ni oeffg theta oeffg oeffg ffi cons oe ffi hf ffi oeffg oeffg oe ffi definition hf ffi oeffg ffi oeffg oe cons nat hf ffi oeffg oe cons hf ffi oe fq gi oe cons hp oe ffi oe fq gi oe assumption cons nat cons id hofmann uniqueness assume morphism theta oeffg oeffg ffi oe ffi show see expand hp oeffg ffi oeffg fh gi oeffg cons id id cons nat 
assumption rewrite hp mi oeffg def oeffg fh tm ffi oeffg ffi tm ffi tm oe ffi oe fq oe fq oe ffi assumption oeffg fh definition cons done 
pullback property substitution may taken primitive making substitution terms superfluous 
definition category attributes cartmell moggi pitts consists ffl category terminal object 
ffl functor ty op set set ty gamma gamma function gammaff ty gamma ty gamma ty id ty comp hold 
ffl oe ty gamma object gamma oe morphism oe gamma oe gamma 
ffl gamma oe ty gamma pullback diagram oeffg oe gamma oe oeffg gamma oe id gamma oe id gamma oe ffi oe oe ffi oeffg 
follows prop 
cwf category attributes forget terms 
conversely category attributes construct cwf putting tm gamma oe def sect oe tm gamma oe defining unique morphism oeffg ffi id oe ffi ffi syntax semantics dependent types gamma tm oeffg put hf mi oe def oe ffi define oe unique morphism oe gamma oe gamma oe oe oe ffi oe oe ffi oe id gamma oe leave exercise verify defines cwf 
starts category attributes constructs cwf cwf category attributes ends start 
way round gets back original cwf set terms tm gamma oe replaced set right inverses oe cf 

notice context extensions categories attributes unique isomorphism 
instance oe ty gamma prevents defining gamma oe simply gamma corresponding morphisms identities 
various notions model essentially equivalent far interpretation type theory concerned 
closed categories seely categories display maps taylor lamarche hyland pitts general semantic types identified associated projections 
usually models conditions corresponding ty comp ty id hold isomorphism definition interpretation function complicated 
see hofmann curien 
models fibrations jacobs jacobs ehrhard indexed categories curien general allow morphisms semantic types 
morphisms possible describe certain type formers elegantly direct counterpart syntax 
mention contextual categories semantic contexts carry explicit tree structure corresponding context extensions see streicher cartmell 
taxonomy different notions various back forth constructions see jacobs 
exercises show requirement id gamma oe id gamma oe def 
redundant 
prove comprehensions unique isomorphism sense oe ty gamma sigma gamma tm oeffg comprehension oe exists isomorphism gamma oe sigma satisfying ffi oe oe give proof prop 
showing theta oe fq comprehension oeffg 
hofmann contextual category cartmell streicher category terminal object tree structure objects function objects 
father injective gamma minimal level gamma gamma 
assignment ty gamma delta delta gammag extends category attributes spell notion category attributes define canonical construction contextual category cwf 
objects contextual category lists oe delta delta delta oe oe ty 
oe ty oe delta delta delta oe 
advantage contextual categories rule semantic contexts arise empty context successive applications comprehension 
establish properties semantic contexts induction level 
examples streicher 
assume cwf gamma define category gamma objects types gamma morphism oe morphism gamma oe gamma ffi oe 
equivalently morphism oe defined element tm gamma oe 
explain defines category find extension assignment contravariant functor category categories 
functor called indexed category forms heart curien ehrhard notion categories curien ritter 
semantic type formers order interpret type theory cwf specify various type term formers interpreted 
results certain requirements cwf follow closely syntactic rules 
give precise definition closure pi sigma id convey general pattern 
reader may define conditions type formers 
treated exercises 
definition cwf supports pi types types oe ty gamma ty gamma oe type pi oe ty gamma tm gamma oe term oe tm gamma pi oe tm gamma pi oe tm gamma oe term app oe tm gamma fmg appropriately typed universal closures equations hold app oe oe pi pi oe ffg pi fq oe ty pi oe ffg oeffg fq oe oe app oe ffg app oeffg fq oe app syntax semantics dependent types third equation typechecks virtue second 
equation implicit ty comp fact oe ffi ffi follows rewriting sides hf oe see stipulate exactly type term formers syntax equation corresponding pi 
congruence rules needed semantic level preserves equality need extra equations specify substitution commutes semantic type term formers 
substitution primitive notion semantics obtain economic definition dependent function spaces restricting app combinator variables replacing appropriate morphism 
proposition cwf supports dependent function spaces iff operations pi def 
types oe ty gamma ty gamma oe morphism app oe gamma oe pi oe gamma oe ffi app oe pi oe app term tm app oe ffi mfp oe pi morphism gamma app oe ffi oe pi oe fq oe oe ffi app oeffg fq oe proof 
equation states app oe leaves arguments unchanged corresponds term second equation corresponds pi third app stability substitution 
app morphism define application combinator follows 
tm pi oe tm oe oe ffi hn pi oe tm fp ffi app oe ffi hn pi oe tm fng eqn 
app follows equations term required properties 
conversely suppose model supports dependent function spaces sense def 

delta gamma oe pi oe def oe tm delta oe def pi oe tm delta pi oe tm delta pi oe 
accordingly app oe tm delta fng tm delta define application morphism hp pi oe app oe verifications left reader 
hofmann second definition dependent function spaces allows restriction oe required unique element tm pi oe pi holds 
definition cwf supports pi types strict sense supports tm gamma oe tm pi oe app oe ffi oe 
syntactic counterpart strict pi types rule allows conclude gamma oe pix oe gamma pix oe pi types supported strict sense eqn 
derived 
operation pi oe gamma part adjunction see 
pitts 
term model type theory pi types supports pi types obvious settings pi oe def pix oe oe def oe app oe def app oe corresponding application morphism context morphism defined gamma oe pix oe app oe gamma oe variables gamma 
notice pi types strict enrich type theory abovementioned equation 
set theoretic model supports pi types strict sense 
oe fl fl gamma ty gamma fl fl gamma oe define pi oe fl def pi oe fl fl abstraction application set theoretic companions 
definition cwf supports sigma types data ffl types oe ty gamma ty gamma oe type sigma oe ty gamma sigma oe ffg sigma ff sigma gamma 
ffl morphism pair oe gamma oe gamma sigma oe sigma oe ffi pair oe oe ffi ffi pair oe pair oeffg ff ffi pair gamma 
syntax semantics dependent types ffl type ae ty gamma sigma oe term tm oe term sigma oe ae tm ae sigma oe ae oe sigma sigma oe ae ff sigma oeffg ff hff sigma term model supports sigma types follows gamma oe type sigma oe def sigmax oe pair oe context morphism gamma oe fl pair oe gamma sigmax oe gamma oe ae pair oe gamma sigmax oe sigma ae 
set theoretic model supports sigma types follows 
sigma oe fl gamma def oe fl fl pair oe fl def fl morphism pair surjective take sigma defining equation sigma oe ae ensures sigma oe ae unique term property sigma 
say sigma types supported strict sense case 
definition cwf supports intensional identity types type oe ty gamma data ffl type id oe ty gamma oe oe ffl morphism refl oe gamma oe oe oe gamma oe oe id oe id oe ffi refl oe equals oe gamma oe gamma oe oe diagonal morphism ffl ty oe function id oe tm oe tm way data stable substitution morphisms gamma ty oe tm oe id oe oe term model intensional type theory supports identity types settings gamma oe type id oe type gamma oe oe id oe type refl oe context morphism gamma oe fl refl oe gamma oe oe id oe hofmann gamma oe oe id oe type gamma oe refl oe gamma oe oe id oe id oe defines required function 
set theoretic model supports identity types id oe fl def refl oe fl def fl 
tm set oe put id oe fl def type correct presence id oe furthermore equals 
semantic interpretation natural numbers unit types empty types follows pattern sigma types left reader 
conclude definition semantic analogues type formers specifying interpretation universe closed impredicative quantification 
definition cwf supports calculus constructions supports pi types data ffl type prop ty 
write prop prop ffl type prf ty prop ffl oe ty gamma gamma oe prop morphism oe gamma prop ffl term oe gamma morphism app oe prop establishing prf oe dependent function space prf fpg oe data stable substitution 
term model model calculus constructions prop equal type propositions prop pi prop type type proofs equal prf prop prf type 
morphism gamma oe prop takes form term gamma oe prop 
gamma oe prop morphism gamma prop required properties 
set theoretic model model calculus constructions settings prop def fff ttg prf def tt 
gamma oe prop define oe fl def fl tt oe fl 
notice model elements type prf equal 
reynolds paradox reynolds plotkin set theoretic interpretation calculus constructions 
describe model case 
notice prf oe equal pi oe prf fpg bijective correspondence fl tt oe fl prf oe pi oe prf fpg fl set functions oe fl singleton set bijective correspondence enables define required operations oe app oe syntax semantics dependent types exercises show truth value model supports pi sigma types strict sense identity types settings pi oe def oe oe sigma oe def oe id oe def tt oe denote implication conjunction truth values 
show cwf supports sigma types strict sense iff supports morphism pair oe isomorphism 
spell means id refl stable substitution 
explain cwf supports unit types exists ty 
terminal object equivalently isomorphic 
define means model support natural numbers 
show set theoretic model supports natural numbers def truth value model supports natural numbers def tt 
define means support empty type sense show set theoretic model supports def truth value model supports def ff interpretation possibility 
conclude tm gamma oe model set tm gamma id oe fhm oe empty 
show truth value model forms model calculus constructions prop def tt prf 
def tt oe 
def 
define semantics universe containing code empty type code unit type 
show set theoretic model supports universe truth value model 
poset category posets monotone functions 
extend poset cwf defining ty gamma poset gamma set closed subsets ideals gamma 
oe ty gamma define gamma oe oe considered poset oe inclusion oe gamma 
define tm gamma oe gamma oe 
ty gamma oe pi oe ty gamma ffl gamma oe fl show tm gamma pi oe tm gamma oe pi determine dependent function spaces poset stable hofmann substitution 
fact cwf poset support dependent function spaces 
extensional type theory say cwf identity types supports strict sense oe ty gamma ty oe recall oe def gamma oe oe id oe tm id oe oe 
note case set 
show cwf identity types supports strict sense iff morphism refl oe gamma oe oe isomorphism inverse refl gamma oe def oe 
extensional type theory usually formulated type theory identity types rules id id replaced rules gamma id oe gamma oe reflection gamma id oe gamma refl oe id show term model extensional type theory supports identity types strict sense 
show rule id independent reflection considering set theoretic model setting id oe fl 
independence understood informally establish id derived reflection needs soundness theorem 
show model supports identity types strict sense supports sigma types iff supports strict sense 
set model section important cwf provides non trivial interpretation calculus constructions proposition tm prop tm prf element 
set consists set denoted jxj relation fl theta jxj natural numbers elements property jxj fl fl says realises codes code realiser condition fl means realiser 
morphism set function property exists partial recursive function thought natural number fl feg application defined realises 
sets morphisms form category 
example set jnj fl iff morphisms category sets exactly total recursive functions 
example fl 

set readily seen terminal object 
set form set xj fl syntax semantics dependent types category sets extended cwf follows 
set gamma set ty gamma consists families sets indexed gamma 
oe ty gamma means oe oe fl fl gamma oe fl set 
term tm gamma oe function assigning fl gamma element fl oe fl exists partial recursive function property fl gamma fl gamma fl computation feg defined feg fl oe fl fl 
set gamma oe underlying set disjoint union sigma fl gamma oe fl fl gamma oe fl fl gamma fl fl oe fl inverses bijection def theta 
remaining components left reader exercise 
set model supports pi types setting pi oe fl fm pix oe fl fl means fl oe fl implies feg fl oe fl 
pi oe fl gamma fl pi oe fl 
application abstraction defined set theoretic model 
required obtained untyped application abstraction theorem 
type formers considered supported set model 
modest sets set different elements realiser 
set called modest set 
words modest set consists set partial surjective function fl generally oe ty gamma modest oe fl modest set 
easy see ty gamma oe modest pi oe arbitrary oe 
modest set induces symmetric transitive relation partial equivalence relation set natural numbers putting exists necessarily unique fl fl conversely theta define modest set prf having underlying set quotient fn restricted set equivalence relation 
fl prf 
modest isomorphic prf category sets equal prf suggests interpret calculus constructions putting prop set symmetric transitive relations 
notice prop modest 
defined operation prf yields type prf ty prop 
gamma prop fl fl gamma prf fpg fl prf fl 
gamma oe prop define oe gamma prop oe fl def pi oe prf fpg fl verifications tedious essentially straightforward 
iff prf isomorphic set means interpret type theory impredicative universe prop contains code natural numbers 
prop contains hofmann codes reasonable data types sets furnish model cid mentioned 
beeson allen show model type theory non impredicative universes entirely pers 
exercises set 
show morphism set constant arbitrary set set theoretic function morphism set 
explain set theoretic model supports lists cf 

explain set model supports identity types strict sense 
set defined transitive closure relation relates numbers realise common element define morphism prf sends equivalence class realiser show modest set exists unique morphism prf ffi means modest sets form reflective sub category sets 
define impredicative quantification set model oe fl gamma def pix oe prf fl 
ehrhard reflection part definition model calculus constructions 
interpretation syntax implicitly spoken interpretation type theory appealing informal analogy components type theoretic entities 
section precise defining interpretation function establishing soundness property 
assume rest section fixed type theory cwf supporting type term formers theory 
simplicity restrict attention pi types 
define partial interpretation function gamma maps ffl pre contexts objects ffl pairs gamma oe gamma pre context oe pre type families ty gamma ffl pairs gamma gamma pre context pre term elements tm oe oe ty gamma 
syntax semantics dependent types definition induction lengths involved pre terms types contexts 
show thm 
semantic function defined contexts types terms 
semantic clauses adopt convention expression containing undefined subexpression undefined 
adopt convention expressions typecheck gamma oe oe ty gamma undefined 
ffl pi ffl gamma oe gamma gamma oe gamma undefined 
ffl gamma pix oe pi gamma oe gamma oe ffl gamma oe gamma oe ffl gamma oe delta gamma oe delta fp gamma oe delta ffl gamma app oe app gamma oe gamma oe ffi gamma gamma gamma pix oe ffl gamma oe gamma oe gamma oe gamma oe notice semantics variables defined induction depth declaration appropriate weakening gamma expression 
theorem interpretation function enjoys soundness properties ffl gamma gamma object ffl gamma oe gamma oe element ty gamma 
ffl gamma oe gamma element tm gamma oe 
ffl gamma delta ctxt gamma delta 
ffl gamma oe type gamma oe gamma 
ffl gamma oe gamma gamma 
proof theorem essentially straightforward presents surprising technical difficulties 
idea establish substitution lemma relates syntactic substitution weakening semantic substitution gammaf gammag 
necessary equations governing semantic type formers pi formulated gammaf gammag syntactic counterparts pi refer syntactic substitution defined structural induction 
due type dependency needs account substitution weakening middle merely context 
hofmann need notation 
pre contexts gamma delta pre type ae define expression gamma ae delta inductively gamma ae pi gamma ae gamma ae delta oe gamma ae delta gamma delta oe gamma delta ae pre term 
define expression inductively clauses 
gamma ae pi gamma gamma ae delta oe gamma ae delta gamma ae delta oe fresh idea gamma ae delta morphism gamma ae delta gamma delta projecting ae part 
similarly gamma ae delta intended go gamma delta gamma ae delta yielding gamma ae position variables 
really case proved simultaneously weakening substitution lemmas 
possibly undefined expressions write mean side defined agree kleene equality 
lemma weakening gamma delta pre contexts ae oe pre types pre term fresh variable 
foe ng 
expression gamma ae delta defined iff gamma ae delta gamma delta defined case morphism 
gamma delta defined gamma ae delta gamma delta fp gamma ae delta lemma substitution gamma delta pre contexts ae oe pre types pre terms fresh variable 
foe ng suppose gamma defined 
expression gamma ae delta defined iff gamma delta gamma ae delta defined case morphism 
gamma ae delta defined gamma delta gamma ae delta ft gamma ae delta proofs lemmas proceed induction involved pre terms types contexts 
difficult case arises term variable 
case distinction declared gamma delta perform equational reasoning 
cases follow applying stability substitution participating semantic type term formers pi 
type oe term binder pix oe inductive hypothesis delta extended oe 
order prove correct typing morphisms uses second part lemma shortened delta 
syntax semantics dependent types leave proofs reader calculations require effort doing oneself 
lemmas proof soundness theorem straightforward induction derivations 
reason proof reproduced reader encouraged carry cases inductive argument case serious difficulty consult streicher monograph verification corresponding interpretation contextual categories detailed fashion 
method partially interpreting pre syntax proving definedness induction derivations invented streicher order ensure interpretation depend particular derivation chosen 
notice derivations judgement unique instances conversion rules ty conv tm conv recorded judgements 
alternatively define interpretation induction derivations device pre syntax establish coherence semantics respect conversion rules result complicated proof 
particular model carried hansen 
exercises extend interpretation function sigma types formulate completeness theorem semantics term model prove 
deduce term model gamma oe gamma gamma oe type 
explain interpretation function defined way case application typed app oe replaced 
explain matter leave type annotation oe similar situations 
try define interpretation function triples gamma oe typed terms context pairs gamma goes wrong 
extend interpretation function syntactic context morphisms state general substitution lemma context morphisms pitts 
difficult prove general substitution lemma directly lemmas 
hofmann deduce soundness theorem type inhabited type theory universes 
pi id suc type set model derive calculus constructions natural numbers exist term pi prop propositions pi prop pi prop pi app pi app suc show interpretation existential quantification oe defined set theoretic model tt tt oe ff 
conclude extension calculus constructions choice function consistent sense empty type exists type prf prop inhabited empty context gamma prf oe gamma choice oe known choice function inconsistent addition imposes equation choice oe oe prf see coquand 
extended example presheaf models section encounter family interpretations type theory generalises set theoretic model types interpreted variable sets presheaves families 
various applications interpretations see example asperti martini altenkirch hofmann streicher define models polymorphic lambda calculus type quantification interpreted cartesian product 
presheaf interpretation show logical framework sense forms conservative extension ordinary type theory 
result appears time detailed version published 
preliminaries 
small category 
presheaf contravariant functor category set sets functions 
denote functor category set op presheaves denote presheaf application subscripting 
syntax semantics dependent types may think category stages worlds presheaf set varying stages 
yoneda embedding sending gamma full faithful embedding stages see barr wells information presheaves 
presheaves cwf aim construct cwf category contexts 
category terminal object define types substitution terms comprehension order 
generic letters gamma oe range presheaves natural transformations families presheaves arise context cwf 
gamma presheaf form category elements gamma objects fl fl gamma morphism fl fl morphism gamma fl fl words fl gamma gamma morphism gamma fl fl 
appropriate may write fl morphism 
composition inherited presheaf gamma define set ty gamma consist presheaves gamma 
oe ty gamma fl gamma write oe fl oe fl oe argument fl similarly morphisms 
oe presheaf means fl gamma oe fl oe fl oe gamma fl action compatible composition identities suppose delta gamma natural transformation 
define functor delta gamma ffi ffi ffi delta define ffi ffi 
oe ty gamma family presheaves define oeffg ty delta composition oe ffi 
oeffg ffi oe ffi 
clear required functoriality properties 
define terms 
oe ty gamma element tm oe assigns stage element fl gamma element fl oe fl way oe fl fl gamma fl 
tm oe delta gamma tm oeffg composition ffi ffi 
oe ty gamma presheaf gamma oe defined gamma oe fl fl gamma oe fl fl gamma oe gamma oe fl gamma fl oe fl 
projection oe defined oe fl fl variable oe tm oe defined oe fl delta gamma tm oeffg hf mi oe ffi ffi ffi 
verifications straightforward expansions definitions 
established presheaves furnish cwf 
hofmann type formers presheaf model supports type formers set theoretic model supports constructions 
major difference interpretation pi types carried way similar treatment implication kripke models course similar definition exponentiation functor categories 
suppose oe ty gamma ty gamma oe 
convention write oe pi oe dependent function space oe defined follows 
fl gamma element oe fl associates oe gamma fl element gamma fl oe fl 
notice gamma gamma fl fl oe fl oe gamma fl 
assignment natural sense addition ffi oe gamma fl gamma fl oe fl generalisation stages necessary oe presheaf merely assignment sets stages 
oe fl define oe gamma fl oe gamma fl oe gamma fl oe gamma gamma fl def ffi valid gamma gamma fl gamma fl 
tm gamma oe oe tm oe fl gamma oe gamma fl def gamma fl application morphism app oe gamma oe oe gamma oe maps stage elements fl gamma oe fl oe fl id fl 
routine check defines dependent function spaces strict sense 
dependent sum sigma oe presheaves stage wise set theoretic dependent sum 
means sigma oe fl oe fl fl omit associated term formers 
proof supports natural numbers inductive types supports universes ambient set theory presheaves formed supports 
conservativity logical framework theory dependent types set 
precise nature unimportant 
syntax semantics dependent types furthermore lf denote logical framework presentation dependent type theory pi types universe set constants equations corresponding type term formers conversion map translating terms types judgements ones lf way judgements preserved 
precisely gamma gamma lf distinction write judgement relations type theories 
example piy id id type applying translation yields judgement lf el el piy el id id type words el omit el operator gamma decorations translated judgement looks exactly start 
sequel omit coercion due presence type variables lf proper extension judgements set type set image natural question ask lf conservative way extend notion conservativity logic theories dependent types 
simplest prove theorem theorem gamma oe type gamma oe term exists term gamma oe 
notice need legal term instance contain subterm set suc equal identical suc 
strategy proving theorem consists exhibiting model lf property interpretation notice model models full 
say tm gamma oe gamma oe type exists gamma oe 
model furnished presheaf model category contexts term model fullness interpretation essentially consequence yoneda lemma proved section 
show models logical framework 
demonstrated presheaf model supports dependent function spaces 
interpret set ty 
presheaf ty context gamma associates types context gamma definitional equality 
interpretation el ty set set defined presheaf tm gamma jt oe ty gamma set gamma associates set tm gamma oe terms type oe context gamma factored definitional equality 
extends presheaf term substitution 
hofmann demonstration models lf remains show set contains codes type term formers deal task way example assume contains pi types ad hoc operator 
deal operator 
order simplify notation view soundness completeness semantics syntax type theory named variables denote entities require element tm set set element tm oe set el oe el oe 
dependent function spaces strict task equivalent exhibiting element simplicity denoted tm oe set set describe explicitly gamma oe ty gamma def oe recall set gamma ty gamma 
naturality assignment amounts checking gamma oe ty gamma oe oe immediate properties syntactic substitution 
similarly second task equivalent finding term tm oe set el oe el oe define explicitly gamma oe ty gamma tm gamma oe tm gamma oe recall el gamma oe tm gamma oe 
naturality consequence stability substitution 
notice necessary abstraction tm oe set set tm set set required constants exactly counterparts essence case pi type due binding behaviour encounter slight complication 
wish construct element tm oe set el oe set set uncurrying amounts constructing term pi tm oe set el oe set set stage gamma arguments pi type oe ty gamma element el oe set gamma call set temporarily 
element associates definition dependent function spaces gamma tm oeffg type ty 
assignment natural sense ffi mff ff ty 
means reconstructed particular instance def gamma oe oe oe ty gamma oe 
arbitrary syntax semantics dependent types gamma ty oeffg fhf mi oe naturality equations cons cons 
cons id get converse established bijective correspondence sets el oe set gamma ty gamma oe set gamma oe arguments stage gamma term pi aim construct amount type oe ty gamma type ty gamma oe 
define result syntactic dependent function space pi oe summing defined pi gamma oe set gamma el oe set pi oe gamma oe oe oe bijection function space el oe set gamma set types gamma oe pi constant lf obtained directly syntactic companion 
goes constants app definition omit 
case face argument dependent function space type el oe el stage gamma isomorphic tm gamma oe analysis similar led characterisation el oe set 
generally characterise dependent function spaces form el gamma arbitrary presheaf certain shifts allows systematic translation arbitrary type term formers possibly binding variables lf general strategy clear example pi 
important point function space el oe set strongly confined naturality condition contains functions induced syntactic type free variable type oe 
proof thm 
suppose gamma oe type gamma oe 
induction derivations find interpretations gamma oe properties gamma delta delta gamma gamma oe delta delta gamma oe set delta particular gamma oe gamma id gamma oe 
interpretation yields gamma gamma id gamma tm gamma oe gamma oe representative class gamma 
theorem proved 
may consider logical framework support type formers sigma types modularisation natural numbers define syntax 
long type formers supported sigma conservativity theorem continues hold proof 
dependent version glueing construction crole possible obtain stronger property term thm 
lf equal hofmann particular properties term model construction presheaf model formed cwf gives canonical way lift model type theory model presentation type theory logical framework 
applications semantic methods give directions reading subject semantical methods study theories dependent types 
independence results subject streicher hofmann streicher 
semantical methods order derive syntactic properties type theories strong normalisation decidability type checking hyland ong altenkirch goguen 
moggi harper mitchell moggi categories attributes give account higher order modules functional programming 
intriguing connection paulin program extraction type theory paulin mohring deliverables approach program development burstall mckinna 
works type modelled type set predicate dependent type terms modelled terms preserve predicates 
similar interpretation hofmann translation type theory quotient type ordinary type theory applications syntactic models described 
connections category theoretic semantics machines noticed curien ehrhard subsequently exploited applied ritter evaluator calculus constructions derived category theoretic semantics 
mention domain theoretic interpretations type theory order establish consistency general recursion fixpoint combinators dependent types 
similar direction goes reus interpretation type theory synthetic domain theory employed establish consistency powerful dependent type theory incorporating higher order logic general recursion impredicativity 
allen 

non type theoretic account martin lof types 
symposium logic computer science 
altenkirch 

proving strong normalization cc modifying realizability semantics 
barendregt nipkow eds types proofs programs springer lncs vol 
pp 

syntax semantics dependent types altenkirch hofmann streicher 
reduction free normalisation polymorphic system 
proc 
th ieee symp 
logic comp 
sci 
lics new brunswick new jersey 
asperti martini 
categorical models polymorphism 
information computation 
barr wells 
category theory computing science 
international series computer science 
prentice hall 
beeson 

foundations constructive mathematics 
springer 
burstall mckinna 
deliverables approach program semantics constructions 
proc 
mfcs springer lncs vol 

lfcs technical report ecs lfcs 
cartmell 

generalized algebraic theories contextual categories 
ph 
thesis univ oxford 
constable 

implementing mathematics nuprl development system 
prentice hall 
coquand 

metamathematical investigations calculus constructions 
odifreddi ed logic computer science pp 

academic press coquand huet 
calculus constructions 
information computation 
coquand paulin mohring 
inductively defined types 
lncs 
springer 
crole 

categories types 
cambridge university press 
curien 

categorical combinators sequential algorithms functional programming 
pitman 
curien 

alpha conversion conditions variables categorical logic 
studia logica 
curien 

substitution isomorphism 
fundamenta informaticae 
dowek 
dec 
coq proof assistant user guide 
rapport technique inria rocquencourt 
dybjer 

internal type theory 
proc 
bra types workshop torino june springer lncs 
appear 
ehrhard 

une cat des types 
application au calcul des constructions 
ph 
thesis univ paris vii 
ehrhard 


proc 
conf 
category theory computer science manchester uk pp 

springer lncs vol 

hofmann goguen 

typed operational semantics 
proc 
tlca edinburgh springer lncs vol 

harper honsell plotkin january 
framework defining logics 
journal acm 
harper mitchell 
type structure standard ml 
acm trans 
programming lang 
systems 
harper mitchell moggi 
higher order modules phase distinction 
conference record th acm symposium principles programming languages popl san francisco ca usa pp 

hofmann 

extensional concepts intensional type theory 
ph 
thesis univ edinburgh 
hofmann 

interpretation type theory locally cartesian closed categories 
tiuryn eds proc 
csl poland springer lncs vol 
pp 

hofmann 

conservativity equality reflection intensional type theory 
proc 
bra types workshop torino june springer lncs 
appear 
hofmann streicher 
groupoid model refutes uniqueness identity proofs 
proceedings th symposium logic computer science lics paris 
huet 

uniform approach type theory 
logical foundations functional programming 
addison wesley 
hyland 
ong 
modified realisability toposes strong normalisation proofs 
groote bezem eds typed lambda calculi applications springer lncs vol 

hyland pitts 
theory constructions categorical semantics topos theoretic models 
categories computer science logic 
ams 
jacobs 

categorical type theory 
ph 
thesis university nijmegen 
jacobs 

comprehension categories semantics type theory 
theoretical computer science 
lamarche 

simple model theory constructions 
gray scedrov eds proc 
ams research conf boulder colorado pp 

ams 
lambek scott 
higher order categorical logic 
cambridge university press 
syntax semantics dependent types luo 

program specification data refinement type theory 
abramsky maibaum eds proc 
tapsoft springer lncs vol 
pp 

luo 

computation reasoning 
oxford university press 
luo pollack 
lego proof development system user manual 
technical report ecs lfcs university edinburgh 
magnusson nordstrom 
alf proof editor proof engine 
barendregt nipkow eds types proofs programs springer lncs vol 
pp 

springer verlag 
martin lof 

intuitionistic theory types predicative part 
rose eds logic colloquium pp 

north holland 
martin lof 

constructive mathematics computer programming 
proceedings sixth international congress logic methodology philosophy science pp 

martin lof 

intuitionistic type theory 
bibliopolis 
moggi 

category theoretic account program modules 
math 
struct 
comp 
sci 

nordstrom petersson smith 
programming martin lof type theory 
clarendon press oxford 


categorical algebraic aspects martin lof type theory 
studia logica 
hansen 
domain interpretation martin lof partial type theory 
ann 
pure appl 
logic 
paulin mohring 

extracting programs proofs calculus constructions 
principles programming languages popl pp 

acm 
pitts 

categorical logic 
handbook logic computer science vol 
vi 
oxford university press 
appear 
reus 

program verification synthetic domain theory 
ph 
thesis lmu munchen 
reynolds plotkin may 
functors expressible polymorphic typed lambda calculus 
technical report ecs lfcs university edinburgh 
ritter 

categorical machines higher order typed lambda calculi 
ph 
thesis university cambridge 
hofmann seely 

locally cartesian closed categories type theory 
mathematical proceedings cambridge philosophical society 
smith 

independence peano fourth axiom type theory universes 
journal symbolic logic 
streicher 

semantics type theory 
birkhauser 
streicher 

dependence independence results impredicative calculi dependent types 
math 
struct 
comp 
sci 

streicher 

semantical investigations intensional type theory 
lmu munchen 
taylor 

recursive domains indexed category theory polymorphism 
ph 
thesis university cambridge 
troelstra van dalen 
constructivism mathematics volume north holland 
