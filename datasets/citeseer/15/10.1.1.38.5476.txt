copyright ieee 
published proceedings conference software methods tools australia 
personal material permitted 
permission reprint republish material advertising promotional purposes creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
telephone intl 

support environment distributed software component engineering john grundy department computer science university auckland private bag auckland new zealand john cs auckland ac nz engineering component software systems challenging difficult multiple developers involved 
suitable software process distributed component engineering required appropriate development notations collaborative supporting tools 
describes component engineering methodology developing examples notations development tools tool collaborative facilities 
key characteristics process notations include multiple perspectives component capabilities extension unified modelling language capture 
integrated extended software tools support new component engineering method 
provided range collaborative facilities tools facilitate collaborative component engineering 
illustrate tools multi user development briefly discuss architectural realisation tools integration 
keywords software components processes methods aspects software engineering environments collaborative 
component systems engineering shares commonalities traditional software systems engineering uses common modelling implementation approaches tools 
brings new challenges preserving common problems relating managing distributed software development projects 
include new highly dynamic weakly defined software processes need heavily leverage existing software component designs implementations consistent way allows developers independently various times requires developers tightly collaborate ordinate 
working time developing flexible open internet software engineering environments component techniques :10.1.1.12.4230
developing new component engineering methodology extending software tools help support large scale component systems engineering method 
assembling tools component engineering environment provides various collaborative capabilities enables multiple potentially widely distributed developers incrementally build assemble complex applications component technology 
main features method tools provide include process modelling enactment 
software process management necessary guide developers track done geographically temporally distributed fashion 
developers working locally greatly benefit support better plan manage ordinate 
developed basic process model distributed component engineering realised sophisticated process modelling enactment environment 
processes plan manage ordinate multiple developers 
software agents deployed enhance developers ordination 
component engineering notations tools 
extended uml case tool component modelling particular incorporate notion horizontal slices component functionality call component aspects 
software architecture modelling tool run time component visualisation tool complement design implementation tool functionality 
collaborative editing 
developers need exchange software development artifacts collaboratively edit various ways ranging fully synchronous asynchronous editing :10.1.1.53.9216
need support version artifacts manage component systems configurations versioned artifacts 
added collaborative editing support tools plug software components 
component management 
component systems leverage existing software artifacts components heavily 
shared repository artifacts necessary facilitate distributed component systems development 
developed shared repository various modelling implementation tools 
section overview related areas particularly identifying gaps weaknesses current development methods tools distributed component engineering 
describe component engineering environment includes component analysis design implementation tool software process management tool software architecture modelling tool component implementation testing tool various rd party tools integrated component technology 
describe collaborative support features tools particularly done enhancing distributed usage tool integration facilities 
include integrated process support collaborative editing distributed ordination component repository facilities 

related current component engineering methods catalysis select perspective tm take varying views component focusing software components low level design artifacts 
adequately characterise component capabilities component function independent perspectives 
similarly current component engineering technologies dcom javabeans corba idl generally focus characterising describing vertical component provided service functionality interfaces 
aspect oriented programming aop adaptive programming ap popular approaches describing design level aspects programs incorporating support objectoriented programs code weaving techniques component adaptors 
dynamic composition reconfiguration systems difficult aop component management challenging ap 
methods technologies difficult design components wide variety reuse situations difficult different developers share talk component characteristics 
development component applications approaches produce components user interfaces user configuration persistency distribution security collaborative capabilities adaptable inappropriate situations components reused 
component engineering methods take account component interface requirements system wide component properties designing deploying components 
approaches typically characterising limited forms component services 
tools developed assist component engineering 
include commercial tools rational rose tm tm visual age tm wide variety research prototypes moose argo uml synthesis 
tools provide variety modelling notations implementation support 
tool support software component development heavily focuses low level component interface design component implementation 
currently exists tools distributed component engineering provide high level modelling analysis support complex component interactions little support distributed component system debugging visualisation 
wide variety done building supporting software tools 
tools field message approach support aspects integration synchronous 
approaches tend reasonably restrictive limitations imposed degree synchronous support offered extensibility environments degree process ordination support possible 
approach develop synchronous editors design level code level examples including mercury 
various toolkits support building applications developed including groupkit suite 
unfortunately collaborative editing tools toolkits lack adequate support process management ordination focus heavily synchronous software development activity asynchronous 
process centred environments aim guide enforce codified software process control software development 
examples include epos spade serendipity ii 
environments integrate tools performing collaborative software development limited collaborative editing support tool integration support added 
shared software artifact repositories important supporting primarily asynchronous 
needed order support componentbased software engineering large library reusable components need shared 
examples systems include document centric ones bscw software component libraries codefinder 
main problems existing approaches reliance simple indexing strategies complex restrictive formal program semantics 
various systems taken integrated approach supporting distributed software development tool supports wide range collaborative capabilities multiple tools integrated provide sophisticated environment 
adopting approach include argo uml jcomposer moose 
unfortunately approaches result monolithic difficult maintain extend environments limit kinds tools added environment 
overcome problems current component engineering methods tools collaborative facilities developed new method engineering component systems 
extended component engineering tools developed support method integrated tools form integrated development environment 
added various collaborative facilities seamless manner environment support distributed component engineering 

aspect oriented component engineering example component application constituent components illustrate method tools 
shows screen dump collaborative travel itinerary planner developed software components 
application provides tree structure editor component situation view edit travel itineraries map visualisation component illustrate itinerary route itinerary item property dialogues collaborative text chat web browser collaborative supporting notification task automation agents multi user editing multiple cursors change 
architecture application consists components related various ways reusable components configured suit particular reuse situation 
different components making system provide services components users user interface distribution persistency security collaborative 
components require services developers reason provides requires relationships components comprise application 
developing aspect oriented component engineering new methodology component engineering focuses developing characterisations provided required aspects components grouping systemic aspects relate 

example component application 
shows simple example horizontal slicing component capabilities 
example viewing multiple perspectives chat component aspect characterisations illustrating different kinds services component provides components users requires components 
aspect category grouped various aspect details provided panel extendable menu required frame provided event generation required event transport mechanism note categorisations may overlap example collaboration aspect includes interface persistency related services support event display serialisation transport 
user requirements reusable component specifications requirements level components aspects reusable component designs code design level components case tool component implementation classes generated case tool classes aspects running components aspect objects information de coupled inter component communication reusable components repository feedback 

basic aspect oriented component lifecycle 
user interface aspects provides panel requires frame provides extendable pop menu collaboration aspects provides event generation provides received event requires event transport requires synchronisation persistency aspects provides data serialisation provides data requires data storage requires data retrieval chat component properties username string width integer height integer 
methods sendmessage 
events resize 

chat component aspects 
aspect detail set aspect detail properties characterise events generated component state updated event transport wan support event objects second 
aspect details detail properties provide developers mechanism specify provided required capabilities components allow specify functional non functional characteristics capabilities 
component lifecycle describe reason guide design implementation components 
shows example basic lifecycle component engineered 
requirements engineers develop aspect characterisations components user requirements 
developers may reuse existing components aspects reasoning interactions new component specifications aspect details properties 
refinements components aspects developed produce design level system components design level aspects 
developers software architecture characteristics reusable design level components aspects produce designs 
case tool generate component implementing classes specialised component architecture framework 
class specialisations generated component codify aspects 
component implementers aspect information guide completing component implementations interactions 
classes provide methods interfaces assumed developers implement highly de coupled component interactions run time 
components may coded interact directly methods interfaces patterns support inter component relationships 
components introspect capabilities components run time methods capabilities components deduce aspects interact 

supporting notations designing software components aspects greatly assist developers identifying component capabilities ensuring designers carefully take account possibilities reuse components necessary component interfaces support 
aspects help designers develop general approaches providing aspect services supporting access components discovering tailoring services 
important successfully leveraging aspect approaches component systems 
aspect oriented programming aim avoid doing code weaving distribute aspect codified capabilities component implementation code 
aim component methods implemented aspect related properties handled way general component provision requiring aspect related services supported 
crucial cots systems source code available changeable components reconfigure interact component interfaces 
allows dynamically change way aspect related services provided components usually possible recompiling aspect oriented programming systems 
model implement components aspects extended component software architecture implementation framework called jviews incorporate characterisations component aspects including aspect categories aspect details aspect detail properties 
aspects component capabilities required provided various aspect categories provided required aspect detail set property values characterising component capabilities 
uml notation describe jviews components augmented notation support aspect description 
shows example characterising design level component capabilities aspects modelled jviews architecture description language adl 
example shows tree editor component collaborative travel itinerary planner application components application provide require tree editor aspect related services 
example tree editor provides user interface frame configuration property sheet may optionally require form structure viewer outliner provides event generation capabilities requires event transport synchronisation support provides serialisation support requires data storage retrieval capabilities provides item locking highlighting collaborative awareness requires collaboration event propagation multiple users 
text chat label string user string chat list messages sendmessage 
frame viewer chat panel message bar extensible menu extensible panel viewer provided aspect detail required aspect detail optional required aspect detail component properties methods events component uses event generation event event broadcasting store data retrieve data data user identification authentication encryption messaging secure rmi broadcaster local file store 
example chat component aspects 
aspects aspect details may relate component object functions component object function may multiple aspect details help characterise 
designing components aspects provides set multiple partially overlapping perspectives capabilities components perspective showing particular systemic view component 
views capture functional component capabilities non functional properties performance expected quality service parameters kind user interface integrity needs 

basic architecture component engineering environment 

development tools support developed distributed component engineering environment integrating tools rd party 
illustrates environment 
main tools comprising composite environment outlined process management 
software process management necessary guide developers track done geographically temporally distributed fashion 
serendipity ii process management environment provide distributed process modelling enactment support user programmable deployable task automation tool integration agents 
software architecture design 
architectures complex component systems require careful design analysis 
provides software architecture modelling analysis facilities including reusable software architecture templates analysis agents 
component design 
software component designs captured suitable component implementations realised 
extended jcomposer case tool provide component specification design basic code generation support 
developers describe components aspects jcomposer supports multiple views components aspects allows components aspects inter related provides basic aspect static checking component models 
includes checking components required aspects corresponding provided aspect details related components provided required aspect detail properties consistent 
component implementation 
component implementation low level debugging supported higher level component visualisation support 
allow developers preferred development tools jdk forte 
component visualisation tool view running components added high level dynamic architecture analysis tools support dynamic system visualisation 
component storage retrieval 
component repository allows multiple developers share components jcomposer supports sharing serendipity ii software agent components 
applications 
integrated tools argo uml xml import export mechanisms desktop applications including word tm netscape tm file server simple form rcs 
order effectively develop complex component applications jviews architecture framework built jcomposer case tool 
jcomposer provides multiple views systems jviews adl supports collaborative editing views sophisticated inconsistency management support 
extended jcomposer allow developers describe component aspects aspect details aspect usage 
basic aspect properties constraints specified intercomponent aspect usage checks performed 
requirements level aspects design level aspects represented simple refinement relationships 
basic consistency checking aspect details modified 
show examples adding aspect information jviews components modelled jcomposer 
design level aspect information specified basic aspect usage checks performed jviews component implementation code generated including aspect codification 
shows high level view system architecture 
imports ooa level component characterisations jcomposer argo uml supports developer refining ood level component designs multiple refinement steps views 
style models useful large component systems design analysis 
shows view visualising jviews component instances inter relationships running component system 

distributed support ordinate support distributed component engineering serendipity ii process management tool plug collaborative editing components component repository 
shows example simple component engineering process top view process stages expanded middle view serendipity ii 
serendipity ii provides multiple visual views software processes project plans collaboratively edited 
process stages enacted developer collaborating project automation enactment stages completed software agents monitoring done development tools 
serendipity ii monitor software artifact editing carried tools store events synthesised summaries multiple events process stages providing tracking mechanism 

jcomposer 
distributed ordination tool integration necessary multiple developers need aware doing doing remote server needs data processing 
bottom view shows example task automation agent implementing simple notification mechanism 
example editing events user john occur process stage 
determine design enacted filtered see apply component stored user mark review 
developers collaboratively edit views various tools environment ranging serendipity ii process models jcomposer architecture analysis design level views jdk java source code files 
support provide source code file editing asynchronous editing different versions source code checked rcs distributed file management server 
proved adequate developers edit implementation code independently 
particularly true component ideally defined aspect characterised interface specification 
higher level views software development process models architectures designs need tightly shared collaboratively edited 
jviews tools provide flexible collaborative editing mechanism allows developers share views edit synchronously asynchronously 
example shows jcomposer component design view semi synchronously edited 
changes user john displayed immediately applied view synchronous editing 
user view stage select changes ask jcomposer apply view incrementally 
inconsistencies syntactic semantic errors occur generate error messages displayed dialogue 
user edit views asynchronously jcomposer send collaborating developers stage incorporated discussed refined 
views creating alternative versions developers edit merge changes 

serendipity ii process views 

collaborative editing jcomposer 
developed component repository allow distributed developers share components particularly commonly reused infrastructure components building applications 
order developers effectively share components common language ontology characterising describing components 
component aspects 
shows example developer searching repository component supporting event broadcasting internet 
developer formulates query aspect aspect detail aspect detail properties component searching 
retrieved components displayed aspect organised information components browsed developer 
example developer reused socket implementing collaborative editing component part jviews infrastructure 
validation function run component indicating currently lacks required relationship component order able function 

repository query aspect details 

tool architecture implementation basic approach taken developing integrated distributed component management environment shown 
illustrates architectures decentralised software engineering environments built jviews component framework 
jviews provides abstractions building tools supporting multiple views component integration mechanisms local persistency distributed event data exchange 

basic architecture decentralised environments 
jviews implemented tools integrated developer local machine jviews infrastructure abstractions basically component event data interchange mechanisms 
data tools stored locally users tools storing data locally 
shared data replicated machines producing decentralised architecture system 
architecture supports robust software development environment tolerant network machine failure provides improved security private data scales large projects 
distributed software development support internet communications medium lan wan event data exchange users environments 
involves tools exchanging events jviews event distribution abstractions reconcile updated data notify interesting events data exchanged version control configuration management mechanism manage alternate versions 
local remote rd party tool access support wrapping tools desktop applications word tm tm servers rcs jviews components 
local remote software agents provide tool integration task automation support 
allow behaviour composition environment extended configured developers require 
component engineering environment supported collaborative editing facilities plugged jviews tools decentralised process ordination tools built deployed serendipity ii component repository distributed document file management tool 
implemented local jviews tool data persistency pse pro tm object store 
provides high performance robust local data management 
developed custom event data serialisation mechanism support information exchange jviews environments 
socket event communications rmi assist developers easily building distributed environments 
corba remote object interfaces access distributed software agents rd party tools currently extensive jviews wrapper components facilitate tool integration 

summary described methodology support tools engineering distributed component systems 
methodology aspect oriented component engineering provides new approach characterising component capabilities reasoning component interactions provided required services 
jcomposer tools support modelling implementation visualisation complex component systems 
support variety collaborative mechanisms including process ordination collaborative editing shared repository components 
working new infrastructure building environments described readily facilitate integration configuration 
extending provide richer range aspects aspect details problem domains 
extending uml provide richer notational support component modelling analysis 

allen frost component development enterprise systems apply select perspective tm sigs books cambridge university press 

fuggetta supporting cooperation spade environment ieee transactions software engineering vol 
december 

bentley sikkel trevor supporting collaborative information sharing world wide web bscw shared workspace system proceedings th international www conference boston ma december 

brown barn enterprise scale cbd building complex computer systems components proceedings th international workshop software technology engineering practice august september pittsburgh usa ieee cs press 

conradi larsen nguyen zhu epos object oriented process modeling software process modeling technology finkelstein kramer nuseibeh eds research studies press 

dellarocas synthesis environment component software development proceedings th international workshop software technology engineering practice july london uk ieee cs press 

dewan choudhary high level flexible framework implementing multiuser user interfaces 
acm tois vol 
october acm press 

souza wills objects components frameworks uml catalysis approach addison wesley 

dunne archibald thompson objectoriented framework construction case tools proceedings coset los angeles may university south australia pp 


graham morton visual programming component software architecture journal visual languages computing july 

grundy hosking mugridge apperley architecture decentralised process modelling enactment ieee internet computing vol 
september october ieee cs press 

grundy aspect oriented requirements engineering component software systems proceedings th ieee symposium requirements engineering limerick ireland june ieee cs press pp 


grundy hosking mugridge constructing component software engineering environments issues experiences information software technology vol 
january elsevier 

grundy component storage retrieval aspects proceedings australian computer science conference canberra australia jan feb ieee cs press 

grundy hosking high level static dynamic visualisation software architectures proceedings ieee symposium visual languages seattle wa sep ieee cs press 

henninger supporting construction evolution component repositories proceedings th international conference software engineering berlin germany ieee cs press pp 


kaiser kaplan multiuser distributed language environments ieee software vol 

pp 


kaplan flexible active support collaborative acm conference computer supported cooperative acm press pp 


kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming proceedings european conference object oriented programming finland 
springerverlag lncs 
june 

magnusson minr finegrained revision control collaborative software development proceedings acm sigsoft conference foundations software engineering la pp 


nutt environment rapid construction visual language applications proceedings ieee symposium visual languages ieee cs press 

mezini lieberherr adaptive plug play components evolutionary software development oopsla vancouver wa october acm press pp 


enterprise javabeans reilly 

inside corba distributed object standards applications addison wesley 

visual modelling rational rose uml addison wesley 

reiss connecting tools message passing field environment ieee software vol 
july 

robbins hilbert redmiles extending design environments software architecture design automated software engineering vol 
july 

roseman greenberg network places collaboration 
proceedings acm cscw pp 


sessions com dcom microsoft vision distributed objects john wiley sons 

szyperski component software objectoriented programming addison wesley 

szyperski establishing system wide properties component systems case tiered component frameworks omg darpa workshop compositional software architecture monterey california jan 
