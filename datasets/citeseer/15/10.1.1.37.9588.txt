goal physical simulation interactive medium building manipulating wide range models 
key achieving goal ity create complex physical models dynamically snapping simple pieces integrating pro cess model creation ongoing simulation 
mathematical computational constrained dynamics possible allowing encapsulated objects constraints forces combined dynamically simulated ciently 
formulation handles arbitrary objects including nonrigid bodies 
describe implemen tation interactive dynamics discuss applica tions mechanism construction geometric model ing interactive optimization data tting tion 
keywords constraints simulation animation physical simulation computer traditionally lled niche useful cumbersome tool quan analysis prediction 
skill labor required set simulation followed hours days run time restricted practice hard core dedicated specialists 
increasing availability high performance computers fast graphics rst time feasible perform non trivial physical simulations see results fully interactive speeds 
development opens door host interactive dynamics andrew witkin michael gleicher william welch school computer science carnegie mellon pittsburgh pa new exciting uses machinery physics example virtual worlds user performs physical experiments builds sim machines visualizes manipulates mathematical objects physics serving user interface 
systems value broad range users need necessarily understand underlying mathematics 
skilled manipulating physical world sense simulated physics medium interaction physical model just analogy 
raw performance prerequisite interactive physics creating truly interactive physical medium entails just making simu lations run faster 
traditionally model creation phase completely separate actual execu tion simulation 
involves manual derivation coding system equa tions motion 
speeding simulation pro vide ability manipulate pre de ned model capability limited ity dynamically create new models modify ex ones 
example world experimenting virtual mechanisms little interest adding new pieces mak ing breaking connections forth entailed exiting program writing code re compiling re linking 
maintain virtual world illusion pieces snap apart transparently dynamically simulation running 
akey dynamically creating virtual physical ob jects lies proper treatment constraints 
con straints provide glue combines simple ob jects form complex ones representing bolts joints sliders turn bag parts mechanism 
constraints permit user de ne reported supported part apple computer 
objects form behavior stating desired explicit speci cation shape mo tion 
incorporating constraints interactive set ting poses di cult problem addition dele tion constraint system structurally changes system equations motion re ecting exchange forces causes constraint hold 
interactive medium respond changes forming solving new equations motion automatically noticeable delay 
challenge di cult insist preserving generality solution 
partic ular wish avoid restricting scope collec tions rigid bodies example 
solution prob lem posed describe implementation discuss interactive applications 
de mathematical formulation constrained dy similar loosely re lated 
constraint force linear combi nation constraint gradients imposed projecting system acceleration subspace le gal accelerations 
calculating constraint force linear problem constraints non linear 
general constraint equations cally global dealing objects forces constraints comprising physical model 
develop decomposition equations terms contributions individual elements loss generality 
allows reconcile inherently monolithic nature requirements dynamic construction encapsulation 
describe general system dynamic func tion composition implementation structure 
conclude describing applications interactive dynamics rst world virtual environment user able create manipulate pre de ned parts cally attach variety constraints experiment resulting structures mech 
second dimensional system parametric curves manipulated constraints 
demon strate dynamics medium inter active solution non linear problems constrained optimization image interpretation model tting 
describe interactive dynamics medium creating keyframe animation char built pinning elastic pieces 
constrained dynamics classical mechanics constraints play role means describing physical systems 
standard example bead sliding freely rigid wire important aspect bead behavior summarized just observing bead stays wire matter constraints bead wire physical consequences 
treating bead particle motion governed gives relation tween motion total force force acceleration lie direction magnitudes scaled bead wire con straint implies bead accelerate away moves wire force ap plied 
special case straight wire just means bead acceleration total force lie tangent wire force apply bead points direc tion 
immediate consequence applied force fa total force 
force constraint force fc total force fa fc wire tangent scalar 
words force fc force needs added applied bead accelerate manner consistent constraint 
constrained dynamics concerned making objects behavior consistent forces con straint 
mathematics constrained dynamics hardly new see standard classical ics text begun appear computer graphics lit 
section address problem constrained dynamics light requirements interactivity able freely add delete constraints ongoing sim ulation minimal restrictions form constraints nature objects 
restoring forces curiously constraint force equation depends applied force bead wire sensing applied force responding ac tively attempts pull apart 
obviously mechanism exists 
understand ing dependency comes 
equation obviously doesn determine fc uniquely 
dealt 
naturally bead wire constraint ideal ized approximation 
accurate physical de scription show bead wire deforming tiny bit tried pull apart inducing restoring force cancels applied force 
simplify things think restoring force rubber band connecting bead wire force kc displacement bead wire sti ness rubber band 
order constraint hold approxi mately equilibrium sti ness su ciently large restoring force applied force fmax fmax largest force plan apply 
small large 
di culty making large doing produces di erential equations numerically intractable appropriately called sti equations 
understand problem origin intuitively consider happens bead rest wire try pull constant force fmax 
applied force begins displace bead rubber band begins exert restoring force pro displacement 
restoring force balances applied solve system simple numerical methods dis tance traveled bead accelerating rest un der force fmax single timestep plainly order avoid substantial overshoot instability 
short step size small largest permitted applied force fmax objects move negligible distance single timestep means get 
sti rubber bands may descrip tion really happens way enforce constraints numerically 
constraint forces ironically problem sti ness avoided ting go zero sti ness nity limiting case rule really govern system exactly 
displacements restore restoring force renamed constraint force 
addition depend ing state system time forces constraint forces depend forces 
section develop system linear equations yield constraint forces added applied forces lead system accurately satisfy constraints 
result general switch point speci case bead wire generic system equations motion form mij qj cj qj mass matrix vector system independent variables vector known applied forces vector un known constraint forces 
equation just ma generalized form 
ultimately goal solve allowing integrate di erential equation forward time 
single constraint constraint functions ci qj depending state possibly directly time 
constraints met ci qj 
constraint equation provides condition remain initial time su ces 
depends time directly state chain rule ci ci ci qj qj qj ci di erentiating gives noting ci ci ci qj qj qj ci qj ci qk qj qk qj ci inverse mass matrix equation qj ck qk substituting setting zero yields condition ci ck qk qj ci qj qj ci dt system linear equations constraint force vector unknown 
words equa tion just says constraint force added applied force cause second time deriva tive constraints zero 
condition generally weak system underconstrained usually case move fewer equations unknowns exist values satisfy equation 
index notation quantity scalar subscript denotes vector denote matrix 
summation convention appearance twice term implies summation mij qj mij qj matrix times vector virtual ambiguity equation easy understand 
equation states system acceleration move constraint functions zero underconstrained system subspace legal accelerations exist 
constraint force satis es equation said far pro adding additional force long acceleration induces lies legal subspace 
remove ambiguity su ces add reasonable restriction constraint add remove energy system say may 
guarantee require done constraint force vanish small displacement sys tem consistent constraints 
ev ery legal displacement dq satisfy simply requires constraint force point direction system forbidden move 
requirement known principle virtual derived 
restriction albeit reasonable class constraints considered 
case single scalar constraint le gal displacements lying tangent plane surface 
gradient normal tangent plane means legal displacement satisfy dq 
forbidden displacements satisfy dq scalar 
sional generalizations tangent plane gradient direction null space null space complement constraint jacobian matrix 
null space contains displacements satisfying ci qj null space complement contains satisfy ci qj vector viewing constraint vector collection scalar constraints null space set vectors lie constraint tangent plane null space complement set linear combinations constraint gradients 
lie null space complement constraint force satisfy ci ci qj vector 
enforcing virtual princi ple simply matter replacing ck cr qk equation solving 
components known lagrange multipliers 
substitution re arrangement yields ci cr qj qk ci ci qj qj qj ci entire right hand side known matrix left hand side product con straint jacobian inverse mass matrix jacobian transpose square matrix di constraints 
linear sys tem solved constraint force computed cj ci qj total force cj qj plugged equation obtain acceleration qj 
feedback principle su ces legal initial con ditions ensure solving equation con straint force 
practice extra feedback term needed bring system legal state initially inhibit drift 
including damped feedback term total force ci qj cj ci qj ci ci qj constants 
additional term ectively damped spring pulling system back legal state 
vanishes system legal state feedback true force 
feedback may incor constraint force directly making small modi cation equation described 
advan particularly obtaining squares solu tions overconstrained systems 
order systems machinery constrained dynamics tool manipulating purely geometric non physical objects desirable replace second order equations motion rst order system form qi ect replacing ma mv approximately modeling behavior highly damped system desired invert mass matrix explicitly larger sparser linear system may formed involves mass matrix see 
negligible mass ect change sim ply things moving moment forces withdrawn facilitates accurate positioning geometric modeling applications 
applica tion described 
form equation changes slightly rst order equations adopted term disappears second direct time derivative rst derivation rst order constraint equation follows closely equation held zero rst order equations motion 
decomposition equation equation previous section universal sense equations mo tion constraints represented generic anonymous form representing par ticular constrained system 
equations intrinsically global objects constraints forces system coupled constraint force generally depending applied forces positions velocities mass matrices objects 
monolithic equations applied speci systems interacting objects con straints tackling toy problem hand textbook examples simply generic equations template lling blanks problem speci cs 
toy problem dumbbell represented unit mass particles constrained lie distance apart 
system state vector holds elements representing particles positions mass matrix identity 
equations motion expressed terms components force particle just fx fy fz fx fy fz single scalar constraint held zero written terms components having written expressions di erentiation produced moderately ugly ex pression may tal constraint equation solve constraint force plugged back equations motion applied force feed back term 
small scale example di cult complete implement exercise 
obvious kind sub expansion way build large scale constrained models interactively 
time object constraint added modi ed deleted algebraic manipulations performed derive new equations results put form supports cient numerical evaluation 
obviously system attaching objects triggers extensive algebraic manipulation code generation compilation linking achieve interactive performance symbolic algebra code generation automated 
fortunately system objects constraints forces de ning model need allowed dissolve massive unstructured algebraic expression 
section see global quantities contained equations may constructed composing small stylized set local quantities depending single object single constraint 
exploit mathematical regularity require primitive object constraint com pute local quantities responsible performing composition dynamically 
sec tion describe mathematical decomposition global equations local quantities 
struc ture develop illustrated schematically gure 
section describes cient implemen tation dynamic composition 
state vectors mass matrices state compound model distributed objects contains 
state ob ject may heterogeneous containing scalars vectors matrices quaternions combination 
implementing object may important preserve internal structure 
outside may hidden collapsing state single vector providing operations determine length attened vector get set state time derivative allow ing object mapping internal state external state vector remain hidden 
note instance zero inverse mass matrix identity 
schematized model 
objects state vectors concatenated form global state vector constraints outputs form global constraint vector 
constraints depend state connectors represent puts objects 
structure de nes global constraint function ci qj 
constraint object pair de nes block constraint jacobian matrix 
block may non zero constraint depends object 
global state vector formed just concatenating objects state vectors 
similarly object contributes square block global mass matrix situated diagonal 
special case non overlapping diagonal blocks inverse global mass matrix obtained inverting object matrix independently 
diagonal blocks combined form global matrix constraints connectors global constraint vector state vector formed concatenating contributions constraint 
order evaluate constraint func tions jacobian matrix relates con straints state new layer structure introduced 
global equations constraint vector function state time 
generally dependence con straints state indirect mediated quantities coordinates points surfaces ob jects may viewed outputs ob jects pieces geometry move ob ject sense values depend state 
example point circle coordinates cos constant tracks changes radius center 
connector fragment geometry constant information circle point required de ne 
addi tion representing points surface connectors represent surface normals areas volumes subjected constraint force applied 
bene introducing connectors allow formulate generic constraints points need know advance objects constrained 
consider arbitrary equality con straint pair points written ci qj fi ak qj bk qj function de nes constraints just subtraction case attachment con straint formulae determine functions respective objects state 
standpoint decomposition encapsulation signi cant function prop erty constraint constrained objects position functions prop erties constrained objects constraint 
write constraint jacobian ci qj ci ak ak qj ci bk bk qj simple application chain rule derivative matrices appearing ex pression belongs exactly object constraint 
pairing constraint object generates block global jacobian matrix 
constraint depends object may block nonzero gure 
similar vein matrix ci qj appearing equation may written ci qj ci ak ak qj ci ak ak qj ci bk ci bk qj bk bk qj preserves modularity 
con straint depends directly time dependence de nition encapsulated constraint involves composition 
remains evaluate constraint vector time derivative required feedback term 
simple matter function composition ci fi ak qj bk qj ci ci ci ak ak ci bk bk generalization constraints number inputs straightforward expressions summations inputs 
forces force may applied connector output simple universal formula qj fi xi qj formula transforming applied force generalized force state 
total gen applied force obtained summing applied force contribution 
summary formulae require dis quantities computed object constraint 
object able report state length get set state velocity compute inverse mass matrix connector object able compute output time derivative derivative matrices constraint able eval output inputs direct time derivatives input derivative matrices provided part able perform evaluations constructing constraint equations equations motion governing arbitrary sys tem objects constraints applied forces comparatively simple operation easily performed dy 
operations required assemble global equations just global index assign ment function composition matrix tion 
section addresses aspects cient implementation process 
implementation function blocks assembly constraint equations instance larger class problems involving dynamic com position mathematical functions evaluation outputs derivatives respect inputs 
implementation constrained dynamics built facility called function blocks designed handle broader class 
function block encapsulates real valued mathe function maps inputs puts 
block supports operations evaluate outputs inputs jacobian matrix derivative outputs respect inputs 
implementor task creating new block type provide code computes function jacobian 
task su ciently regular automated process degree mathematical form block embodies need speci ed rest generated sym di erentiation simpli cation conversion expressions code 
complicated functions built creating di acyclic graphs nodes function blocks arcs connecting inputs outputs denote function composition 
runtime function block library provides variety support services creat ing deleting connections doing bookkeeping associated global indexing evaluation output graph simple recursive descent block instructing blocks provide inputs compute puts computing 
recursion bot toms special nodes hold system state 
caching avoid redundant computation shared quantities 
evaluation jacobians involves recursive ap plication chain rule 
block implements function fi xj chain rule derivative respect vector variables qk block inputs presumably depend fi qk fi xj xj qk just product block internal jaco jacobian inputs respect jacobian may computed recur block instructing inputs compute jacobians multiplying collected input jacobian internal 
recursion bottoms state nodes xj qk qj qk identity matrix 
jk practice cient jacobian evaluation far complicated recursive evaluation func tion matrices typically sparse vital sparsity preserved exploited 
complications arise involving example issues allocation storage inter mediate matrices 
naive recursive descent algo rithm caching necessarily best 
see general discussion sparse matrix techniques 
implementation interactive constrained dy employs specialized layer called built generic machinery function blocks 
classes layer corre elements described previous sec tion physical objects connectors constraints 
addition behaviors apply forces connectors im springs motors world structure performs global functions solving linear system resulting con strained di erential equation 
function block machinery automatically han maintenance global coordinates state constraint vectors dynamic composi tion constraint functions derivatives respect state variety support functions 
system environment interactive model construction manipulation 
applications developing number applications inter active dynamics 
section describe 
major purpose developing ex systems explore range problems interactive dynamics applies 
basic motivation research desire build manipulate virtual mechanisms 
system gure allows user build constraints snap pre de ned parts arti cial distinction model construction simulation 
user system need understanding underlying mathematics physics 
geometric modeling experimental system concerned interactive construction manipulation models composed arbitrary parametric curves gure idea convert parametric curves purely geometric objects objects respond intuitive way user input 
user moves curves freely pushing pulling providing consistent mode di rect manipulation shapes 
curve drawn screen interpreted physical object assigning negligible mass uniform viscous drag length 
model curve responds forces changing shape model consisting parametric curves attached constraints 
grabbing pulling ar points curve user may move reshape model subject constraints 
position accordance equations de ne 
example circle may change radius position 
user controls object directly appearance screen underlying parameterization hidden making easy user control curves parameters nonlinearly 
attachment constraints serve nail curves gether springs forces permit user express preferences weaker con straints 
dynamic simulations models created static drawings system proving useful tool experiment ing planar mechanisms tool constraint drawing 
steps go parametric equations de ne geometry curve surface compiled code allows user interact physical object involve rote di erentiation sim pli cation code generation 
fully auto mated steps line compilation process allowing user add new curve type sys tem just entering pure mathematical equations de ne 
interactive optimization additional area interest dynamics medium interactive solution non linear problems constrained optimization 
idea convert local minima objective function attractors model continuously pulled local solution 
user exercises global control dragging model desired lution letting go allowing local attractor take 
earlier application interactive optimization computer vision described dynamic curve called snake superimposed image attracted points high contrast 
curve havior approximates wire 
placed near edge curve locks able track motion 
time user may grab curve pull features interest 
addition continuing investigation vi sion applications exploring tasks ing manipulation nonlinear models opti mal data tting 
experimental system allows user de ne collection variables enter algebraic expressions representing constraints variables functions optimize user accessible outputs 
user may directly manipulate system subject constraints sliders pull outputs 
related investigations include dynamic tting parametric models scatter data 
simpli ed linearly deformable bodies 
may viewed ne sheet containing mass distribution 
internal elastic forces tend rest state tend preserve original area 
deformations undergo linear extremely simple ob jects simpler fact rigid bodies 
case collection attached place constraint matrix left hand side equation constant 
simpli cation allows pre invert constraint matrix eliminating need solve linear system evaluation simulation models built fast 
de ned terms deformations may rendered transforming arbitrary curves drawings created body coordinates see gure 
means rapidly creat ing physical keyframe animation 
control constraining speci ed points move user de ned trajectories 
desired acceleration control point trajectory appears term equation 
subject keyframe constraints attachment constraints hold pieces system moves passive non top collection rendered polygons attached constraints rubber bands 
bottom tion 
animation driven motion paths attached arm shirt 
rigid physics 
resulting behavior best com pared puppet hands feet directly controlled 
adjusting sti ness drag internal forces possible cre ate behaviors ranging highly non rigid jello motion nearly rigid forms 
william armstrong mark green 
vi computer chapter dynamics rigid bodies purposes animation pages 
springer verlag 
ronen barzel alan barr 
topics physically modeling course notes vol ume chapter dynamic constraints 
sig graph 
ronen barzel alan barr 
modeling system dynamic 
computer graphics 
du reid 
direct methods sparse matrices 
oxford university press oxford uk 
michael girard anthony 
computational modeling computer imation legged figures 
proc 
siggraph pages 
herbert goldstein 
classical mechanics 
addi sion wesley reading ma 
paul michael cohen 
controlling dy namic simulation kinematic constraints havior functions inverse dynamics 
com puter graphics july 
proc 
siggraph 
michael kass andrew witkin demetri ter 
snakes active contour models 
int 
computer vision 
john platt 
constraint methods neural net works computer graphics 
phd thesis cal tech 
john platt alan barr 
constraint methods exible models 
computer graphics 
peter schroeder david zeltzer 
dynamic simulation linear constraint pro 
computer graphics 
press 
jane wilhelms brian barsky 
dynamic analysis animate articulated bodies humans robots 
graphics interface 
andrew witkin kurt fleischer alan barr 
energy constraints parameterized models 
computer graphics july 
proc 
siggraph 
andrew witkin michael kass 
spacetime constraints 
computer graphics 

