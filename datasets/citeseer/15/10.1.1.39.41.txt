framework enforceable specification extended transaction models transactional workflows dimitrios georgakopoulos mark hornick gte laboratories incorporated waltham ma usa variety extensions traditional acid transaction model resulted plethora extended transaction models etms 
etms application specific designed provide correctness guarantees adequate particular application 
similarly application specific etm may impose restrictions unacceptable application required 
define new etms determine etm appropriate application integrate etms produce new etms need framework etm specification reasoning 
describe framework 
framework supports implementation independent specification etms described terms dependencies transactions 
dependencies specified dependency descriptors 
transaction specification frameworks dependency descriptors common set primitives enforceable evaluated time transaction execution determine issued operations violate etm specifications 
discuss specifications structure dependencies transaction states ii correctness dependencies serializability various cooperative temporal correctness criteria recoverability 
give etm specification examples telecommunications application illustrating definition new application specific etm framework 
keywords extended transactions workflows transaction model specification transaction dependencies serializability breakpoints successions recoverability 

need introducing extended transaction models etms support various application requirements recognized time numerous etms proposed including 
etms extend traditional acid transaction model allow nested transaction structure transaction grouping ii new correctness criteria permitting functionality necessary advanced applications improving transaction throughput dealing autonomy local databases multidatabase environment 
appear international journal intelligent cooperative information systems september 
etms proposed allow advanced application functionality permit transaction cooperation improve throughput reduce transaction blocking abortion caused transaction synchronization relax atomicity isolation properties acid transaction model 
extensions resulted application specific etms offering adequate correctness guarantees particular application 
furthermore etm may impose unacceptable restrictions application restrictions may required 
example sagas guarantee database correctness banking applications nested transactions allow sharing uncommitted data crucial cad cam applications 
existing etm satisfies requirements application new etm defined 
etms introduced deal autonomy local databases multidatabase environment support multidatabase transactions consisting acid transactions submitted different local dbmss 
local dbmss autonomous etms multidatabase transactions created integrating acid transaction models enforced local dbmss 
examples include global serializability discussed quasi serializability discussed 
multidatabase etms designed compatible transaction models local dbmss etms require subtransactions access local dbmss acid 
etm definition required workflow management 
workflow collection tasks organized accomplish business process 
workflows define task structure describing order task invocation task synchronization data flow 
etms needed ensure correctness workflows 
involves mapping workflow tasks constituent transactions extended transaction supported etm ii workflow structure extended transaction structure supported etm 
workflows obey correctness criterion specified etm 
etms multidatabase transactions workflow etms compatible local transaction models supported systems workflow tasks executed 
multidatabase environments local systems participate workflow execution may support acid transactions 
furthermore workflow requirements diverse single etm sufficient meet needs workflows 
defining new application specific etm workflow involves comparing correctness criterion correctness guarantees provided local systems determine etm enforced 
involves etm definition comparison possibly integration 
define new etms determine etm appropriate application decide existing etms best application integrate etms produce new etms need framework implementation independent specification etms 
clearly framework reason etms simpler reasoning terms locking timestamp ordering logging transaction spawning heterogeneous techniques implement etms 
proposes framework 
etms described terms dependencies types transactions etms allow 
transaction dependencies viewed constraints execution structure extended transactions allowed etm correctness criteria transactions satisfy 
example structural constraint nested transactions parent commit children abort commit 
examples correctness criteria include serializability cooperative temporal 
framework transaction dependencies captured dependency descriptors 
transaction specification frameworks acta dependency descriptors enforceable small set primitives 
dependency specifications enforceable evaluated time determine execution possibly partially completed violates etm specifications 
useful enforcing specifications directly theorem prover indirectly specifications construct conventional transaction management mechanism 
approach etm specifications configure run time transaction management mechanism enforces various etms discussed 
highly desirable distributed object management system support variety etms corresponding advanced applications workflows 
important characteristic transaction specification framework requires standard quantifiers finite transaction sets single operator transitive closure 
consider basic primitives specifying etms 
rest organized follows 
section discuss transaction dependencies 
section introduce dependency descriptors key concept transaction specification framework 
specification transaction structure state dependencies discussed section 
correctness dependencies described section 
related advantages framework discussed section 
transaction dependencies specification extended multi system transactions observation extended transactions consist set constituent transactions set transaction dependencies 
constituent transaction extended transaction simple transaction transaction constituent transactions extended transaction etm permits nesting grouping 
extended transaction constituent transaction transaction kinds transaction dependencies intra transaction dependencies define relationships constituent transactions inter transaction dependencies define relationships transactions constituent transactions constituent transactions extended transaction intra transaction dependencies 
example consider nested transactions 
intra transaction cies exist parent child transactions sibling transactions 
inter transaction dependencies occur top transactions nested transactions constituent transaction transaction 
illustrate intra inter transaction dependencies consider extended transaction performs provisioning billing telecommunications application set transactions constitute set transaction dependencies 
particular suppose executed telephone customer requests telephone service installation 
transaction registers billing information customer database 
perform alternative line provisioning tasks 
provisioning tasks allowed complete result completed circuit set lines equipment connects customer telephone network 
attempts provide connection existing facilities lines slots switches 
succeeds cost provisioning minimal requested connection established allocating existing resources 
successful completion activity may possible facilities available 
achieves objectives involves physical installation new facilities 
higher cost needed fails contingency transaction 
types transaction dependencies transaction state dependencies correctness dependencies 
transaction correctness dependencies intra dependencies transaction state dependencies intra transaction dependencies 
transaction state dependencies conditions transaction states define execution structure extended transactions 
depicts intra transaction dependencies define execution structure assuming commits execute concurrently 
backward commit commits 
backward commit commits 
backward abort commit commit aborts 
strong commit abort abort commits 
forward commit committed note dependencies imply commit commits 
dependency replace dependencies 
allows continue exe dependency 
structural dependencies transaction cution holding resources performing unnecessary computations committed 
correctness dependencies specify concurrent executions extended transactions preserve consistency produce correct results defining correctness criterion 
correctness dependencies include serialization dependencies specify schedule operations performed transactions set set objects serializable serialization order transaction precede serialization order transaction visibility dependencies define schedule operations performed transactions set objects belong set recoverable strict rigorous 
cooperation dependencies define transactions set may perform operations objects belong set restrictions :10.1.1.13.7602
temporal dependencies specify transactions set perform operations objects belong set particular temporal order 
correctness dependencies may reflect application semantics application independent 
illustrate consider extended transaction provides telephone service 
suppose set transactions performed operations objects accessed dependencies application independent sufficient ensure correctness inter transaction serialization dependencies schedule operations performed performed committed transactions serializable 
dependency require constituent transactions appear atomic 
intra transaction serialization dependencies executed concurrently schedule operations performed serializable 
commits execution 
need correctness dependencies 
application independent correctness dependencies sufficient ensure correctness may impose unnecessary restrictions 
example contingency transactions need appear atomic 
removing intra transaction serialization dependencies may result situation transactions able construct complete circuits line equipment 
circuits require exclusive access lines unacceptable provisioning transactions 
semantics particular telecommunications application permits number alternative transactions long allowed commit lines 
case correctness reflects application semantics say intra transaction coop eration dependency 
correctness criteria proposed literature allow transaction cooperation :10.1.1.13.7602
correctness state dependencies considered 
example prevent executing completion specify dependency aborts 
case intra transaction correctness dependencies eliminated 
aware etm proposed literature support telecommunications transaction combination structure intra transaction cooperation dependencies application specific semantics unique new etm designed specifically telecommunications provisioning billing 

dependency descriptors specify dependencies transactions dependency descriptors defined element tuple form en post 
dependent transaction set transactions depends set objects dependency consider 
define dependency considers operations performed transactions objects belong fourth parameter dependency descriptor vector contains real time intervals depends 
elements logical predicates 
postcondition post evaluate true dependency satisfied 
enabling condition en specifies postcondition considered 
dependency descriptor viewed integrity constraint execution extended transactions 
basic requirement dependency specification point execution extended transaction dependency descriptors reveal execution took place satisfies dependencies 
possible determine dependency satisfied simply available execution schedule provide information 
example consider dependency commits depends begins information schedule determine dependency satisfied 
prevent dependency descriptor evaluation information available enabling condition en set state 
en false dependency descriptor evaluates don know 
postcondition evaluated enabling condition true 
postcondition evaluates false dependency violated satisfied 
illustrates results evaluation dependency descriptor respect value enabling condition postcondition 
en post iff en true post false iff en true post true iff en false violated don know satisfied 
evaluation dependency specification 
due existence enabling conditions dependency descriptors provide reliable true false evaluation results 
allows determining specification violations soon enabling condition dependency descriptor true purging descriptors satisfied state dependencies soon enabling conditions true post conditions evaluated dependency descriptor evaluation take place finite execution schedule available dependency descriptors directly synchronize transaction execution etms time independent models flexible transactions allow definition temporal predicates transaction states 
dependency descriptor includes temporal predicates vector contains realtime intervals referenced 
example vector dependency descriptor pm contains pm 
rest omit dependency descriptors temporal predicates 
sections discuss specification implementation state correctness dependencies 

transaction state dependencies transaction state dependencies simply state dependencies associate states different transactions 
state dependency associates pair transaction states simple state dependency 
state dependencies associate transaction states complex state dependencies 

simple state dependencies define kinds state dependencies backward forward strong 
backward state dependencies pair transactions impose conditions type enter state entered state dependencies defined descriptor form state set transactions depends includes set objects 
state indicates current state denotes operation changes state difference state execution schedule contains leaves state operations execution schedule 
dependency descriptor enabled enters state dependency satisfied entered state enters state performed issues 
backward state dependency evaluation results illustrated table 
mark indicate schedule performed issues 
example dependency commits specified state commit satisfied performed commit issues 
forward state dependencies express conditions type enter state entered state specified follows state forward state dependency satisfied performed issues performed 
table illustrates results forward state dependency descriptor evaluations 
example dependency committed captured descriptor state commit 
dependency satisfied performed issues commit performed commit 
strong state dependencies express conditions type enter state entered state defined descriptor state consider dependency abort commits specified state commit abort 
dependency satisfied commits table evaluation backward state dependencies state don know don know violated violated satisfied table evaluation forward state dependencies state don know don know satisfied satisfied violated aborted ii eventually abort 
determined immediately ii may happen executes 
avoid uncertainty strong state dependency satisfied strong state dependency descriptors specify transaction eventually abort 
specified weaker forward state dependency commit commits 
problem abort exists eventual prepare commit 
deal operations execution occurred may occur strong state dependencies implicitly explicitly specify time boundaries require occurrence operation satisfy 
particular strong state dependencies may immediate operational effect ii enabling condition augmented temporal predicate 
example consider abort commits 
commits aborted immediately force abort 
alternatively enabling condition augmented time dependency descriptor enabled commits 
dependency descriptors state dependencies thought variation temporal logic expressive power intentionally limited necessary capture state dependencies 
advantage formalism particular having enabling condition restricted expressive power state dependency descriptors directly evaluated enforce dependencies specify 
important notice state dependencies may enforceable 
example transaction commit guaranteed may impossible enforce strong dependency commit aborts 
addition forward backward dependencies requiring transaction abort may possible enforce transaction may choose abort system transaction executes may unilaterally abort result local deadlock 

complex state dependencies complex state dependencies compositions simple possibly complex state dependencies 
basic categories dependency compositions 
category dependency composition produces complex dependency satisfied dependencies composed satisfied 
example consider telecommunications example 
complex dependency defines commits addition committed specified dependency descriptor state commit commit second category dependency composition produces complex dependency satisfied dependencies composed satisfied 
example suppose simple transaction added set transactions constitute transaction telecommunications example 
transaction updates directory assistance database line provisioning circuits successfully completed 
dependencies commits ii commits 
provisioning transactions allowed commit composition dependencies produce complex dependency requires dependencies satisfied 
complex dependency specified dependency descriptor state commit commit complex dependencies may result arbitrary compositions simple complex state dependencies discussed 

correctness dependencies section discuss correctness dependencies specification 
correctness criterion determines execution schedules produce correct results violate object consistency 
basic approach specifying correctness criteria terms transaction schedules known correct 
schedules preserve correctness concurrent executions sense equivalent correct executions correct allowed system 
example serializability theory considers serial executions executions transactions interleave correct 
serial executions maintain correctness execution equivalent serial execution preserves consistency 
conflict correctness criteria consider operations performed different transactions conflict schedule execution order important determining equivalent schedule known correct 
depending semantic temporal information taken account correctness criterion conflicts defined differently 
conflict definition serializability traditional conflict serializability theory considers operations conflict performed object write operation 
serializability takes account syntactic information determining conflicts operations reads writes 
capture assume object operations property reveals operation changes state object performed 
particular consider type write op type execution operation transaction changes state object reading 
type read 
op type reads state reads changes state read write 
conflicts defined conflict table relation contains entry pair conflicting operations object associated conflict table refer conflict table 
define operations supported efficiency reasons objects class objects objects classes may associated conflict table 
issue discussed hg 
conflict entry inserted conflict table 
conflict table conflict 
conflict table object object specific conflict table default conflict table 
object specific conflict tables provided object designer default conflict table objects object designer provided conflict table 
default conflict table serializability defined follows definition conflicts generic treatment operations 
specific definitions conflicts object specific conflict tables 
notions conflicts consider semantics operations possibly return values proposed literature commutativity invalidation recoverability 
example conflict definition takes account operation semantics consider commutativity define conflict table set object 
commutativity states operations conflict commute executing order produce results final object state 
set object supports operations insert delete op type write member tests set membership op type read 
insert operations writes object default conflict table defines operations performed different transactions conflict 
commutativity defines due semantics insert operations commute conflict 
conflict tables provided object designers may conflict notion considers operation semantics allow concurrency 
furthermore object designers may provide conflict tables capture application specific conflict definitions 
various correctness criteria corresponding conflict tables discussed rest 
conflict definition temporal correctness criteria temporal correctness criteria define conflicts way serializability 
serializability considers schedules equivalent serial schedule correct temporal correctness criteria consider schedules correct equivalent specific serial schedule 
example temporal conflict consider transaction changes interest rates bank computes interest earned bank accounts 
ensure correctness perform write operations reads new interest rate 
serializability may allow read interest rate updates produce incorrect interest deposits 
object designer individual group individuals define state behavior objects defining class definitions implement object behavior coding operation methods 
individual role know details object model capabilities underlying object system smalltalk 
conflict table true op type op type false conflict definition cooperative correctness criteria cooperative correctness criteria restrictive notions conflicts take account transaction semantics :10.1.1.13.7602
example provisioning transactions example allowed commit operations allocate lines slots transaction take effect 
fact considered conflicting 
operations performed pair transactions may conflict 
define operations supported object conflict performed specific transactions conflict performed transactions conflict table entries defined serializability extended element entries form cp cp conflict predicate defined set transactions perform example conflict transactions serializability defined entry true simply inserted conflict table 
suppose due semantics transactions sets conflict perform operations specified re defining conflict table entries follows 
sets transactions allowed cooperate usually defined possibly application specific transaction types 
discussed section 
subsections derive specifications serializability cooperative temporal correctness criteria 
specify correctness criterion formally define transaction execution order permits 
involves specifying possible transaction precedence orders conflict table objects ii specifying set predicates restrict possible transaction precedence orders allowed specifications require single operator transitive closure standard quantifiers finite sets transactions objects 

specifications serialization sr dependencies specification sr dependencies observations 
conflicts define precedence relations transactions 
serializability violated committed transaction indirectly conflicts precedence relation contains 
schedule set transactions 
defines order operations performed transactions conflicting operations define precedence relation transactions transaction directly sr precedes denoted sr iff issues operation conflicts operation precedes non aborted transactions sr true false conflict table abort abort indirect sr precedence determined direct indirect sr precedence transactions follows transitive closure sr precedence relation determines sr precedes directly indirectly sr sr set positive integers 
example consider schedule assuming default read write conflicts sr holds conflict 
sr true due conflicts 
sr holds sr sr hold 
closure sr holds sr holds 
set commit committed transactions serializable transaction sr precede transitive closure hold sr preserve serializability schedule transaction satisfy serialization cycle dependencies involving committed transactions state commit sr dependencies violated serializability violated 
individual dependency descriptor satisfied imply serializability preserved 
ensures performed conflicting operations form cycles 
ensure serializability transactions dependency descriptors similar dependencies satisfied 
example suppose set committed transactions include constituent transactions telecommunications transaction inter transaction serialization cycle dependencies transactions constituent transactions defined descriptors denotes set state commit sr allows constituent transactions participate cycles involving constituent transactions transactions 
inter transaction dependency descriptor specifies transactions involved serialization cycles 
state commit sr serialization cycle dependencies discussed far explicitly define serialization order transactions 
required correctness criteria sr true false sr sr sr cooperative correctness discussed section 
refer dependencies serialization order dependencies 
serialized dependency transactions schedule denoted sr defined dependency descriptor state state commit sr sr serialized dependency sr defined similarly 

specification cooperative correctness criteria cooperative correctness criteria allow compatible transactions cooperate repeatedly read write specific objects restrictions :10.1.1.13.7602
compatible transactions specified breakpoints compatibility sets similar breakpoints 
breakpoint model transaction modeled consisting steps 
step denoted consists sequence atomic operations breakpoint denoted operations 
breakpoint defined transaction represents point execution transactions interleave 
example consider transactions 
ij ij ij ij 

kl kl 
km km associated breakpoint ij transaction transaction set ts ij contains set transaction types type denoted type allowed interleave ij example ts ij contains type transaction allowed interrupt transaction breakpoint ij discuss alternative correctness specifications allow schedules 
specification etm cooperative extended transactions involves viewing steps simple atomic transactions transactions steps belong extended transactions 
example etm extended transaction consists set simple transactions set dependencies specified terms breakpoints 
derive specifications extended transactions convert breakpoint specifications corresponding dependency descriptors 
illustrate mappings consider breakpoint ij transaction suppose ij specifies transactions type transactions interrupt ij transactions interrupt breakpoint 
assumptions ij ij serialization order dependencies 
transactions type serialized 
transactions type serialized 
transactions type serialized ij ij dependencies specify serializable schedules 
dependency specifies correct non serializable schedules relatively consistent schedules 
cooperative dependency descriptors correspond breakpoint specifications ij stated terms serialized sr serialized sr dependency descriptors defined section type sr sr sr sr adding transactions breakpoint requires addition similar dependency descriptors additional transaction type 
specifically ij contains type type type ts ij type type type cooperative dependency descriptors correspond breakpoint specification type ts ij sr sr sr sr adding transactions breakpoints results similar dependency specification breakpoint 
capture fact provisioning transactions telecommunications example cooperate violating correctness define cooperative intra transaction dependencies similar 
terms breakpoint model discussed thought operation allocates lines slots step breakpoint containing vice versa 
specification etm cooperative simple transactions approach just discussed requires representing provisioning transactions complex transactions 
alternative solution specify allowed cooperation simple transactions conflict table level 
illustrate consider provisioning transactions telecommunications transaction addition consider facility fac object line slot object state variable operations 
variable fac object indicates facility allocated 
allocated records id circuit uses facility 
operation simply reads variable records id circuit uses facility sets variable indicate facility free 
assuming serializability correctness criterion fac object operations atomic fac objects conflict table operation pairs conflict 
discussed earlier provisioning transactions construct circuit 
provisioning transaction allocates facilities free previously allocated 
facilities allocated circuit id serializability operations conflict reflected conflict table fac objects 
consider allocate facilities perform operations fac object 
specify allowed cooperate augment conflict table fac objects permit allocate facility prevent transactions doing 
represent transactions introduce corresponding transaction types 
complex transaction type tel service prov type low cost fac prov type guaranteed fac prov 
specify cooperative transactions augment default read write conflict table fac objects follows fac conflict table fac conflict table type tel service prov type low cost fac prov type guaranteed fac prov specification state operations conflict performed transaction type low cost fac prov type guaranteed fac prov ii constituent transactions complex transaction type tel service prov 
specification cooperative correctness dependencies section illustrates telecommunications specific etm allows transactions telecommunications specific types low cost fac prov guaranteed fac prov cooperate 
etm specification framework directly capture application semantics 

specification temporal correctness criteria cooperative correctness criteria proposed ensuring correctness applications serializability restrictive permit required functionality allow multiple circuit design transactions update object repeatedly 
serializability strong correctness criterion applications require transaction cooperation weak may ensure correctness applications require specific transaction execution order 
basic reason serializability guarantee specific transaction order considers possible transaction orderings equally correct 
specifically serializability requires pair conflicting transactions satisfy requirement operations issued transaction precede conflicting operations issued transaction vice versa 
illustrate insufficient ensure specific transaction execution order consider application requires transaction executed case operations precede operations schedules operation precede operations allowed 
addition specific transaction orders serializability cooperative correctness criteria capture real time constraints transaction deadlines 
temporal correctness criteria specified terms temporal transaction dependencies 
dependencies constraints execution transactions respect time order time 
temporal dependencies impose constraints explicitly refer time real time dependencies 
temporal dependencies single transaction real time dependencies 
example constraint start execution transaction time am real time dependency 
hand succession dependencies temporal dependencies impose real time constraints execution transactions 
constraints ordering transactions 
sense succession dependencies refer time implicitly 
issues related temporal dependencies discussed literature 
synchronization site clocks ordering events distributed systems addressed lamport 
deadline scheduling investigated 
elmagarmid ngu proposed methods specification succession dependencies 
methods involve constructing precedence graph specifies ordering transactions required application 
succession dependencies considered decomposition long lived transactions collection transactions succession dependencies 
proposed longlived transactions poor completion rate large deadlock probability increase number restarts transactions 
deal problems proposed break long lived transactions shorter transactions succession dependencies sagas activities causally dependent detached transactions 
methods limitations capturing temporal transaction dependencies including required transactions having temporal dependencies known advance ii consider capture concurrent execution transactions temporal dependencies 
problems addressed 
discuss succession dependencies specification 
discussion specification real time dependencies follows 

succession dependencies specification transactions succession dependencies may may access common objects 
example consider situation travel agent submits transactions possibly different reservation systems flight hotel reservations travel customer 
transactions conflicts serializability 
succession dependency exists hotel reservation useless flight reservation 
usually dependent transactions category carry successive steps accomplish single activity business process workflow various reasons executed single transaction 
succession dependencies ensure correctness preventing order execution steps 
succession dependency transactions issue conflicting operations exists transactions needs results transaction produce correct results 
example transactions telecommunication application set new service rate compute service fees customer record service charges customer accounts billing database executed order accomplish objectives correctly 
succession dependencies particular application defined application semantics 
succession dependency transactions satisfied dependent transactions may produce invalid results way viola tion serializability produce inconsistent retrievals invalid service rate may compute display service fee customer account 
furthermore possible violation succession dependency may introduce inconsistent updates charges recorded customer account database may invalid service rate 
assuming serial non interleaved transaction execution acceptable succession dependencies specified transaction state dependencies 
example consider succession dependency sd transaction sets new service rate transaction computes service fees customer 
sd satisfied commits begins 
sd specified state dependency commits 
cases transactions having succession dependencies executed concurrently 
example transactions perform flight hotel reservations trip interleaved 
restriction hotel reservation transaction committed flight reservation transaction successfully committed 
similarly telecommunications example transaction computes records service fees interleaved transaction sets new service rate 
guarantee correctness case need ensure sees new service rate produced succession dependencies concurrent transactions access objects specified transaction state dependencies 
example succession dependency travel reservation scenario specified state dependency commit commits 
hand state dependencies capture succession dependencies concurrent transactions perform conflicting operations 
example state dependency commit commits capture requirement transaction computes usage fees new service rate produced may read old rate set framework analyze concurrent execution transactions succession dependencies formulated 
concurrent transaction execution may required improve throughput allow necessary functionality framework analyze succession dependencies derive corresponding descriptors described 
sd succession dependency transactions schedule represent sd notation sd sd defines temporal precedence tm precedence relation transactions particular transaction tm precedes transaction sd performs write operations earlier time writes different objects 
furthermore reads objects writes precedes reads objects writes 
schedule satisfies sd preserves tm precedence relation schedule satisfies sd called succession respect sd 
serializability definition temporal correctness criterion captures concurrent successions involves defining schedules known correct satisfy sd ii conditions schedules equivalent 
serializability theory serial schedules satisfy sd successions respect sd 
furthermore exist concurrent schedules conflict equivalent schedule satisfies sd preserve sd 
differences serializability theory succession dependencies discussed 
specify succession dependency sd 
possibly concurrent transactions define tm precedence relation transactions assuming schedule set objects tm precedence relation defined sd derive dependency descriptors successions respect sd 
transaction directly tm precedes denoted tm iff directly sr precedes addition directly tm precedes iff performs write operation precedes write operation ii non aborted transactions indirect tm precedence defined indirect sr precedence section transitive closure tm tm precedence relation determines tm precedes directly indirectly tm set positive integers 
set committed transactions succession respect sd iff pair transactions sd sd tm tm specification tm needed ensure temporally precede tm clearly violates 
second postcondition component tm ensures issue operations form cycles 
defined serializability theory 
tm true false sr op type op type abort abort tm true false tm tm tm required ensure temporal order unique 
similar reason sr needed preserve serializability 
succession dependency descriptors state schedule satisfies sd succession respect sd sd state commit state commit tm tm dependency descriptors violated succession dependency sd violated 
ensure sd transactions dependency descriptors similar dependencies satisfied 

real time dependencies specification earlier defined real time dependencies category temporal dependencies impose constraints explicitly refer time 
real time dependencies typically real time transaction state dependencies 
example consider transactions set new service rate compute usage fees customer account 
way preserve consistency ensure transaction sets new service rate finishes execution time transaction computes service charges begins time enforced specifying strong real time dependencies commit states transactions respectively current time commit current time depend transactions objects transaction set object set elements dependency descriptors empty 
hand time vector originally defined section contains time transaction depends 
dependency descriptors defined time vector empty included 
backward forward real time dependencies defined similarly 
specification enforcement real time dependencies transaction states commit state straightforward discuss 
strong real time dependencies commit state transactions define real time deadlines may easy enforce 
example relatively easy ensure transactions strong real time dependencies state started time serious theoretical practical problems overcome ensure transactions strong real time dependencies commit state meet real time deadlines 
deadline scheduling problems investigated address 

specification visibility dependencies correctness criteria serializability sufficient ensure correctness concurrent transaction executions absence failures 
ensure correctness presence failures schedules recoverable rc 
reality transaction processing systems enforce stronger restrictive visibility constraints addition ensuring recoverability reduce overhead simplify recovery 
basic visibility criteria proposed literature cs strictness st rg 
schedules satisfy properties schedule object read transactions previously wrote commit abort disallows write read conflicts uncommitted transactions 
schedule strict object written transactions previously wrote commit abort disallows write write write read conflicts uncommitted transactions 
schedule rigorous strict object written transactions previously read commit abort disallows conflicts uncommitted transactions 
rc cs st rg increasingly restrictive properties strict schedules schedules recoverable schedules rigorous schedules strict schedules 
cs simplifies recovery avoids cascading aborts situations transaction reads object previously written uncommitted transaction aborts forcing abort 
st required allow images efficient recovery 
rg properties addition ensures serializability rigorous schedules serializable schedules 
relationship schedules allowed visibility criteria discussed illustrated 
assuming schedule set transactions set objects write read write write read write conflicts define read rf update overwrite uo retrieval overwrite ro precedence relations essential specifying cs st rg 
serializable schedules schedules strict schedules rigorous schedules recoverable schedules 
relationships schedules allowed different visibility criteria 
transaction directly rf precedes denoted rf iff write read conflict occurs transactions uncommitted transaction directly uo precedes denoted uo iff write write conflict occurs transactions uncommitted transaction directly ro precedes denoted ro iff read write conflict occurs transactions uncommitted example schedule rf holds operations 
having defined direct visibility precedence relations rf uo ro defining dependency descriptors cs st rg straightforward 
schedule cs transaction dependencies schedule st transaction strictness dependencies schedule rg transaction rigorous dependencies rf true false conflict table op type op type abort abort commit uo true false conflict op type op type abort abort commit ro true false conflict op type op type abort abort commit true rf true rf uo true rf uo ro definitions cs st rg take account operation semantics 
particular original definitions cs st rg visibility precedence relations rf uo ro test operations conflict semantically addition reads writes 
example consider insert operations insert insert issued uncommitted transactions set object assuming conflict table takes account operation semantics insert conflict insert insert insert conflict table 
case visibility precedence relations hold 
hand uses default read write conflict table insert insert operations constitute write write conflict uo holds 
note indirect visibility precedence relations defined similarly indirect sr precedence section 
indirect visibility precedence useful specification etms direct precedence discuss 
visibility criteria including strong recoverability semi discussed 
specifications similar cs st rg 

related automata specification state dependencies discussed 
approach specify correctness criteria 
problem automata capture regular languages 
specification arbitrary execution schedules allowed various correctness criteria requires context free context sensitive language 
automata specification approach sufficiently powerful specify etms 
framework acta supports etm specification reasoning transaction execution correctness structure 
main difference dependency specifications acta dependency descriptors provide reliable true false evaluation results 
necessary etm specifications enforced software system 
dbmss enforce acid transactions 
particular result dependency specification evaluation true imply dependency ensured 
hand false result indicate failure ensuring etm specifications 
kind reasoning supported acta 
problem possible determine dependency satisfied simply available execution schedule provide information 
example consider dependency commits depends begins information schedule determine dependency satisfied 
discussed section dependency descriptors deal problem having enabling condition prevents dependency descriptor evaluation information available 
example suppose enabling condition en dependency descriptor set state 
en false dependency specification evaluates don know 
acta support enabling conditions allow don know evaluation results 
due lack acta specifications may result false evaluations true information schedule vice versa 
example acta specification dependency commits evaluated begins result false 
may change issues 
particular performed commit issues evaluation result acta specification changes true 
unreliable evaluation acta specifications difficult 
deal problem acta originally required availability finite execution schedule schedule contains transactional events commit abort pertaining transactions consideration 
capture executions progress finite schedule requirement relaxed revisions acta 
unreliable evaluation problem remains 
providing reliable true false evaluation results provided approach allows determining specification violations soon dependencies enabled purging descriptors satisfied state dependencies soon enabled evaluated evaluating dependency descriptors finite execution schedule available dependency descriptors enforce etms principle enforcing etms done evaluating specifications dependency descriptors corresponding etm transactions issue new operations ii synchronizing transaction execution evaluation results permit execution operations result false evaluation result 
performance enforcement mechanism may unacceptable applications 
practice conventional transaction management technology transaction schedulers rules enforce dependency specifications 
described transaction specification management environment supports definition enforcement application specific etms 
allows etm specification dependency descriptors 
supports etm enforcement transaction management mechanism toolkit provides rules enforcing transaction state dependencies programmable scheduler ensuring correctness dependencies 
configure transaction management mechanism enforces specified etm uses etm specifications produce instructions transaction management toolkit 
discussed important difference transaction specification framework acta framework requires standard quantifiers finite transaction sets single operator transitive closure 
furthermore acta allows conflict tables defined commutativity 
conflict tables may defined conflict definition may provided application legacy system specified object designer 
framework directly captures application semantics transaction specification frameworks 
example discusses merging existing etms create new nested split etm allows cooperation subtransactions nested transactions 
telecommunications specific etm specified allows constituent transactions extended transactions cooperate section 
basic different nested split transaction model section telecommunications specific etm allows transactions telecommunications specific types low cost fac prov guaranteed fac prov cooperate 
nested split transaction model capture requirement 

summary transaction specification framework needed distributed environment consisting autonomous heterogeneous systems allowing etm designers reason correctness transactions independently implementation providing existing etms proven support specific applications templates tailored reflect application requirements evolve application requirements evolve developing new etms existing ones composing dependency descriptors comparing transaction specifications correctness guarantees provided participating systems determine specifications enforced etm specification framework provides sufficient specification power support objectives 
framework described specification etms including nested transactions sagas variations closed open nested transactions flexible transactions 
detailed specifications provided 
addition dependency descriptors designing new application specific etms various telecommunication applications 
specification power dependency descriptors enforceable evaluated time transaction execution determine issued operations violated specifications etm 
feasibility software systems enforce etm specifications illustrated 
transaction management performance issue software system enforce etm specifications 
factors determine transaction management performance 
application functionality requirements corresponding etm complexity 
transaction management mechanism enforce specified etm example specified etm combination acid nested chained transactions transaction management performance identical dbmss support kinds transactions transaction management mechanism technology 
hand etm takes account transaction semantics allows transaction cooperation scheduler supports breakpoints developed described benchmarked determine performance meets application requirements 
transaction management performance satisfy application requirements application requirements re examined etm re designed accordingly transaction scheduler tuned modified performance objectives met 
transaction management performance depend etm specification framework etm specification framework support etm re design meeting application throughput functionality requirements 

abbott garcia molina 
scheduling real time transactions performance evaluation proceedings th international conference vldb 

attie singh sheth rusinkiewicz specifying enforcing intertask dependencies proceedings th international conference vldb august 

breitbart georgakopoulos rusinkiewicz silberschatz rigorous transaction scheduling ieee trans 
software engineering september 

bernstein hadzilacos goodman 
concurrency control recovery database systems 
addison wesley 

buchmann ozsu hornick georgakopoulos manola transaction model active distributed object systems advanced transaction models new applications elmagarmid ed morgan kaufmann 

badrinath ramamritham semantics concurrency control commutativity proceedings rd international conference data engineering 

bernstein goodman papadimitriou concurrency control mechanism sdd system distributed databases fully redundant case ieee trans 
software engineering may 

chrysanthis ramamritham acta framework specifying reasoning transaction structure behavior proceedings acm sigmod conference management data 

chrysanthis ramamritham acta saga continues advanced transaction models new applications elmagarmid ed morgan kaufmann 

du elmagarmid qsr correctness criterion global concurrency control proceedings th international conference vldb 

dayal hsu ladin organizing long running activities triggers transactions proceedings acm sigmod conference management data 

dayal hsu ladin transactional model long running activities proceedings th international conference vldb 

elmagarmid leu litwin rusinkiewicz multidatabase transaction model proceedings th international conference vldb 

advanced transaction models new applications elmagarmid ed morgan kaufmann 

ozsu semantic knowledge transactions increase concurrency acm trans 
database systems december 

georgakopoulos hornick environment specification management extended transactions workflows doms tech 
report tr gte laboratories incorporated oct 

georgakopoulos extended transaction environment workflows distributed object computing data engineering june 

georgakopoulos hornick piotr frank manola specification management extended transactions programmable transaction environment proceedings th int 
conf 
data engineering houston tx february 

garcia molina semantic knowledge transaction processing distributed database acm trans 
database systems june 

georgakopoulos rusinkiewicz litwin chronological scheduling transactions temporal dependencies vldb journal january 

georgakopoulos rusinkiewicz sheth serializability multidatabase transactions forced local conflicts proceedings th int 
conf 
data engineering 

georgakopoulos rusinkiewicz sheth ticket methods enforce serializability multidatabase transactions ieee trans 
data knowledge engineering february 

garcia molina salem sagas proceedings acm sigmod conf 
management data 

herlihy versus asking permission optimistic concurrency control data types acm trans 
database systems 

special issue workflow extended transaction systems data engineering hsu ed june 

lamport 
time clocks ordering events distributed system communications acm july 

lynch multilevel atomicity new correctness criterion database concurrency control acm trans 
database systems december 

manola georgakopoulos hornick brodie distributed object management int 
journal intelligent cooperative inf 
systems march 

moss nested transactions cambridge ma mit press 

ngu specification verification temporal relationships transaction modeling information systems 

ramamritham chrysanthis search acceptability criteria database consistency requirements transaction correctness properties proceedings internal workshop distributed object management august 

weihl commutativity concurrency control data types ieee trans 
computers december 

weihl local atomicity properties modular concurrency control data types acm trans 
programming languages systems 

wachter reuter contracts means extending control transaction boundaries advanced transaction models new applications elmagarmid ed morgan kaufmann 
