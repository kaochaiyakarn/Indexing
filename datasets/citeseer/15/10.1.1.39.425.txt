precedences specifications implementations programming languages annika aasa programming methodology group dept computer sciences chalmers university technology goteborg sweden mail annika cs chalmers se precedences resolve ambiguities programming language descriptions parser independent definition languages generated grammars precedence rules 
gives definition subclass context free grammars 
definition shown equivalent implicit definition operator precedence parser gives 
problem language containing infix prefix postfix operators different precedences known algorithm transforms grammar infix operator precedences ordinary unambiguous context free grammar 
gives algorithm works prefix postfix operators correctness proved 
application algorithm 
precedences language descriptions resolve ambiguities 
reason resolving ambiguities precedences unambiguous grammar language description shorter readable 
unambiguous grammar reflects different precedences operators usually contains lot nonterminals single productions 
consider example ambiguous grammar simple arithmetic expressions unambiguous alternative 
int int language contains prefix postfix operators unambiguous grammar surprisingly large 
language user defined operators example ml prolog convenient precedences 
new operator introduced grammar augmented new production hard imagine user able indicate place production unambiguous grammar different nonterminals 
dealing precedences questions arise 
precedences situations adequate definition means production grammar higher precedence production 
precedences guide steps parser take ambiguity grammar 
easy ambiguous grammar set disambiguating precedence rules decide parse tree belongs language 
second question possible transform grammar precedence rules ordinary context free grammar 
surprisingly complicated grammars containing prefix postfix operators different precedences 
subclass context free grammars give parser independent definition precedences algorithm transforms grammar precedences unambiguous context free grammar 
distfix grammars precedence define kind grammars consider 
definition op stands arbitrary operator word analogy int id definition distfix grammar grammar form op delta delta delta op delta delta delta op infix distfix operators op delta delta delta op delta delta delta op prefix distfix operators op delta delta delta op delta delta delta op postfix distfix operators op delta delta delta op eop delta delta delta op closed distfix operators int id initial operator word subsequent operator word sequence operator words initial sequence operator words operator 
divide distfix operators kinds left associative infix distfix right associative infix distfix prefix distfix postfix distfix closed distfix 
ae shorthand atomic expressions integers identifiers 
example prefix distfix operator gamma gamma 
examples extra requirements imply consider productions allowed production grammar productions illegal olle erik concentrate special case infix prefix postfix operators ideas easily extended include distfix operators indicate done 
requirements operators consider infix prefix postfix operators mean operators distinct 
requirement distfix grammars nonterminal hard 
language descriptions precedences resolve ambiguity just part language part described grammar nonterminal 
ideas defining precedences extended general grammars shown 
definition precedence grammar distfix grammar precedence rules 
precedence rules mean precedence associativity rules 
denote precedence grammars follows 
left associative int precedences numbers productions 
simple grammars just say operators precedence 
precedence operator op denoted op 
operators different kinds allowed precedence 
example allow prefix operator precedence postfix operator 
variable range precedence grammars satisfy requirements 
convention production higher precedence binding power lower precedence 
usual arithmetic operators addition operator higher precedence multiplication operator 
convention example prolog obj 
convention unusual languages opposite convention chosen algorithm section proof clearer 
precedences structure consider parse trees syntax trees strings talk language precedence grammar defines 
syntax trees example picture derivation gamma gamma note sentence easily obtained syntax tree 
syntax tree operator syntax tree operator root 
allow unary binary minus language may assume lexical analyzer translates different operators 
definition precedence associativity obvious question ask language define precedence grammar 
language course subset language generated ambiguous grammar precedence rules 
precedence rules throw away parse trees 
call parse trees keep precedence correct 
unsatisfactory define precedence correct trees terms specific parsing method 
specification language involve method recognize language defined parsing method hard see parser uses method correct 
define predicate pch precedence grammar defines precedence correct trees 
pch holds syntax tree correct disambiguating rules grammar predicate defined way syntax trees built operator precedence parser precedence correct 
converse precedence correct tree recognized operator precedence parser proved section 
reflections 
syntax tree infix operator root form op lt rt precedence correct subtrees lt rt course precedence correct 
furthermore requirements involving precedence root operator 
languages infix operators look precedences roots subtrees 
precedence root 
language contains prefix postfix operators 
consider precedence grammar left associative int syntax trees precedence correct 
want consider left syntax tree precedence correct syntax tree right 
illustrates prefix operators higher precedence infix operator allowed occur right subtree 
furthermore consider syntax trees generated grammar want consider left syntax tree precedence correct syntax tree right 
illustrates precedence root operator subtree precedence tree syntax tree need precedence correct 
solve problem introduce different kinds precedence weights syntax tree left weight lw right weight rw 
prefix operators precedence right postfix operators left infix operators directions 
weights depend root operator weights subtrees define follows 
definition lw ae lw op max op lw lw op lw lt op rt max op lw lt rw ae rw op rw op max op rw rw lt op rt max op rw rt easy realize right weight syntax tree maximal precedence infix prefix operators chain right left weight syntax tree maximal precedence infix postfix operators chain left pictured 
tree atomic tree prefix operator tree atomic tree postfix operator op op op op op op give definition predicate pch defines precedence correct syntax trees 
definition precedence grammar rules define predicate pch left right pre post respectively denote set left associative infix operators right associative infix operators prefix operators postfix operators 
atomic expressions pch ae left associative infix operators op left pch lt pch rt rw lt op lw rt op pch lt op rt right associative infix operators op right pch lt pch rt rw lt op lw rt op pch lt op rt prefix operators op pre pch lw op pch op postfix operators op post pch rw op pch op rest precedence correct tree assumed precedence correct definition 
definition easily extended distfix operators 
just notice subtrees operator words operator allowed arbitrary precedence weights long precedence correct 
precedence weights subtrees outside leftmost rightmost operator word satisfy conditions infix prefix postfix operators 
op denote complete distfix operator op delta delta delta op denote operator words op example rule infix distfix written follows left associative infix distfix operators op left pch delta delta delta pch rw op lw op pch op delta delta delta gamma op requirement closed distfix operator subtrees precedence correct closed distfix operators op closed pch delta delta delta pch gamma pch op delta delta delta gamma op requirement operators distinct important 
assume operator prefix postfix infix operator 
consider sentence possible trees precedence correct regardless precedences give productions 
arise fact know occurrence operator prefix postfix infix operator 
annotate occurrence operator kind syntax tree sentence 
ambiguity problem arise operators different length character 
consider example grammar 
int sentence different syntax trees precedence correct regardless precedences give productions 
think restriction taken care lexical analyzer 
lexical analyzer usually finds longest possible token 
alternative way define precedence correct trees define operators allowed occur subtree 
say need new definition 
definition occurrence operator syntax tree covered occurs subtree operator higher precedence 
occurrence operator uncovered covered 
possible operator higher precedence occur subtree operator lower precedence covered 
example precedence correct syntax tree generated precedence grammar page left associative int gamma gamma prefix operator covers infix operator 
postfix operators left subtree infix operator node independently precedence right subtree 
analogously prefix operators right subtree infix operator node independently precedence left subtree 
syntax tree lt op rt op left associative precedence correct lt rt precedence correct infix prefix operators lt higher precedence op covered infix postfix operators rt higher equal precedence op covered 
correctness definition definition sensible motivated theorems 
states exactly precedence correct tree sentence generated distfix grammar 
desirable want precedences throw away syntax trees 
note imply precedence grammar unambiguous 
theorems motivate correct syntax tree precedence correct 
state operator precedence parser gives result exactly precedence correct trees 
uniqueness precedence correct trees prove exactly precedence correct tree sentence generated distfix grammar 
theorem 
prove theorem need definitions 
compared definition covering 
definition operator op postfix captured sentence postfix operator right op higher precedence 
delta delta delta op delta delta delta postop delta delta delta op postop definition operator op prefix captured sentence prefix operator left op higher precedence 
delta delta delta preop delta delta delta op delta delta delta op preop definition characterizes operator sentence root precedence correct syntax tree 
definition top operator sentence generated distfix grammar 
postfix operator postop operators right postop infix prefix operators postop higher precedence postop postfix captured 
prefix operator preop operators left preop infix postfix operators preop higher precedence preop prefix captured 
left associative infix operator inl infix prefix operators left inl higher precedence inl postfix captured 
infix postfix operators right inl higher equal precedence inl prefix captured 
right associative infix operator inr infix prefix operators left inr higher equal precedence inr postfix captured 
infix postfix operators right inr higher precedence inr prefix captured definition distfix operators regard operator words operator enclosed expressions 
example expression regard top operator operator outside operator 
proof lemma algorithm finds top operator sentence 
definition top operator lemmas prove theorem 
proofs lemmas 
lemma sentence generated distfix grammar operator top operator 
lemma syntax tree precedence correct ffl operators 
ffl top operator root precedence correct subtrees 
lemma syntax tree root operator top operator precedence correct 
theorem exactly precedence correct tree sentence generated distfix grammar 
proof proof induction structure sentence base operators clearly exactly precedence correct syntax tree induction step assume belonging language exactly precedence correct syntax tree show exactly precedence correct syntax tree 
lemma gives contains top operator top 
assume top infix operator appear middle top belong language induction assumption gives exactly precedence correct syntax tree respectively 
call syntax trees lemma gives top top operator precedence correct syntax tree precedence correct top precedence correct tree follows lemma exactly precedence correct tree assume top prefix postfix operator get 
reasoning 
note extend precedence grammars include nonassociative infix operators theorem longer holds sentences precedence correct tree 
take example usually nonassociative operator 
precedence correct tree sentence 
weaker formulation theorem sentence precedence correct tree shown precedence grammars including nonassociative infix operators 
comparison operator precedence parsing easy translate precedence grammar operator precedence table operator precedence parsing 
algorithm dragon book aho sethi ullman chapter 
theorem parsing sentence generated precedence grammar operator precedence parser gives precedence correct tree result 
proof proof induction number reductions parsing process 
base reductions 
trivial 
induction step show done reductions trees built reductions precedence correct resulting tree reduction precedence correct 
case analysis possible handles operator precedence parser 
delta post delta show tree reduction precedence correct definition show rw post 
know rw maximal precedence chain prefix infix operators right 
assume op highest precedence 
possible op higher precedence post reached configuration delta delta delta op delta post delta delta delta delta time earlier parsing process 
configuration post chosen reduction reach configuration delta delta delta delta post delta delta delta delta delta pre delta analogous postfix case 
delta inl delta proof rw inl analogous postfix case 
proof lw inl analogous prefix case 
theorem operator precedence parser give precedence correct trees result 
proof take arbitrary precedence grammar arbitrary precedence correct syntax tree generated prove result operator precedence parse 
call sentence parsing operator precedence parser give raise syntax error correct sentence result parsing syntax tree shown theorem operator precedence parsers gives precedence correct trees result precedence correct 
theorem says different syntax tres sentence precedence correct 
means equal arbitrary operator precedence parser generate precedence correct trees 
transformation unambiguous grammar theoretical interest knowing precedence grammar transformed unambiguous context free grammar algorithm needed practice 
example want describe language precedence grammar parse language method handle precedence rules algorithm definitely needed 
commonly parsing method recursive descent dcg 
obvious precedence rules earley algorithm possible shown 
grammars infix operators known algorithm chapter transforms ordinary unambiguous context free grammars introducing nonterminal precedence level 
language contains prefix postfix operators method 
consider precedence grammar left associative left associative int grammar method introducing nonterminal precedence level 
method naively give grammar int grammar incorrect generate precedence correct syntax trees 
generate sentences original grammar example 
derivable 
exists unambiguous grammar generates sentences precedence grammar int grammar correct generates syntax trees precedence correct example gamma gamma 
attempt construct grammar precisely precedence correct syntax trees derivable int tried incorporate idea postfix operator forms closed expression 
grammar incorrect ambiguous derives precedence correct syntax trees incorrect ones 
illustrates construct grammar way production possible derive syntax tree postfix operator higher precedence syntax trees postfix operators lower precedence course derivable reflections syntax trees derivable nonterminal production harder want syntax trees postfix operators higher precedence derivable 
consider syntax tree gamma gamma precedence correct left subtree gamma gamma ensure subtree derivable production shown production derive syntax trees postfix operators higher precedence show productions derive syntax trees postfix operators higher precedence consider syntax tree syntax tree subtree gamma gamma syntax tree precedence correct higher precedence 
case ensure syntax tree derivable gamma gamma note occurrence covered syntax tree gamma gamma 
syntax tree derivable precedence correct syntax tree sentence postfix operator allowed occur syntax tree derived nonterminal cover operators 
reasoning case prefix operators allowed occur analogous 
indicated nonterminal possible derive syntax tree specific infix operator root 
nonterminals information postfix prefix operators allowed occur left right subtree 
postfix prefix operator allowed cover operators allowed occur left right subtree 
number different nonterminals need infix operator depends postfix prefix operators higher precedence precedence grammar 
algorithm section transform observations algorithm generates contextfree grammar precedence rules precedence grammar incorporated 
simplicity algorithm handles exactly operator precedence level 
severe restriction 
easily extend algorithm allow operators level extend resulting grammar operators 
restriction handle distfix operators infix prefix postfix operators 
severe restriction 
easily extend algorithm allow distfix operators 
algorithm generates grammar nonterminals form indices natural numbers show operators allowed occur syntax trees derived nonterminal 
giving algorithm introduce notation 
inl th left associative infix operator inr th right associative infix operator pre th prefix operator post th postfix operator pre precedence th prefix operator higher precedence post precedence th postfix operator higher precedence grammar left associative infix operators right associative infix operators prefix operators postfix operators numbered separately increasing precedence order 
define post pre examples section 
define operators occur syntax tree derived 

operator op op max pre post 

uncovered prefix operator op op pre 

uncovered postfix operator op op post 

uncovered infix operator op op mentioned earlier production operator number depends number prefix postfix operators higher precedence 
algorithm generates grammar rules introduce nonterminals productions 

rule left associative infix operators 
inl inl inl inl gamma inl gamma number left associative infix operators number prefix operators higher precedence inl number postfix operators higher precedence inl 
rule right associative infix operators 
inr inr gamma inr inr inr gamma number right associative infix operators number prefix operators higher precedence inr number postfix operators higher precedence inr 
rule prefix operators 
pre pre gamma number prefix operators number prefix operators higher precedence pre number postfix operators higher precedence pre 
rule postfix operators 
post post gamma number postfix operators number prefix operators higher precedence post number postfix operators higher precedence post 
rule 
ae pre pre gamma post gamma post number prefix operators number postfix operators start symbol resulting grammar nonterminal highest precedence 
example method construct unambiguous grammar language generated precedence grammar left associative left associative int grammar inl post post inl post post rule left associative infix operators yields productions postfix operator higher precedence prefix operators rule left associative infix operators yields productions postfix operators higher precedence prefix operators rule postfix operators yields productions production arise 
prefix operators postfix operators higher precedence 
productions arise 
postfix operator higher precedence prefix operators 
rule yields productions postfix operators int int int resulting grammar contains useless nonterminals lot single productions 
easily eliminated algorithms example jacobs 
eliminate productions grammar 
augment grammar prefix operator having greater precedence operators unambiguous grammar consists productions eliminate useless single productions left 
correctness algorithm correctness algorithm shown proving precedence grammar generates language set syntax trees grammar obtain applying algorithm consider set strings grammars generate interested structure expressions 
consider parse trees nonterminals parse trees different names chains single productions parse trees grammars algorithm produces 
correctness formulated theorem 
theorem generated language syntax trees grammar ft pch precedence grammar language equal language 
nonterminal useless appear derivation sentence 
proof proof induction precedence grammar 
induction precedence grammar mean show statement grammar consisting zero operators assumption statement holds grammar consisting operators show holds extend grammar operator 
operators introduced increasing precedence order 
notation hm precedence grammar highest precedence operators hm equal hm gamma plus production new operator precedence important properties 
hm gamma hm 
hm gamma hm denote set productions grammar proof theorem divided parts 

part show syntax tree precedence correct generated precedence grammar generated grammar obtain applying precedence removing algorithm second part show syntax tree generated grammar obtained applying algorithm precedence grammar syntax tree precedence correct 
parts predicate qh informally holds syntax tree precedence correct operators natural numbers occur define precisely 
part show direction qh define way hm start symbol grammar hm hm follows prove shown hm hm theorem follows immediately 
turn definition predicate definition qh holds 

operators occur syntax tree 
operator op op max pre post 
uncovered prefix operator op op pre 
uncovered postfix operator op op post 
uncovered infix operator op op recall occurrence operator syntax tree uncovered occur subtree operator higher precedence 
example illustrate operators allowed syntax tree hold picture infix prefix postfix post pre allowed allowed covered allowed clearly holds hm 
proof give overview proof 
proof 
induction precedence grammar base operators trivial 
induction step assumption transformation correct precedence grammar gamma operators show correct extend grammar new operator 
prove case analysis new operator 

left associative infix operator trees form op old tree op old tree op old tree old tree arbitrary chain new infix operator induction length chain new operator 
base length zero tree old 
induction step assumption derive tree occurrences new infix operator show derive tree occurrences new infix operator 

right associative infix operator analogous left associative infix operator 

prefix operator trees form pin prefix infix operator pin old tree pin old tree pin old tree old tree arbitrary chain prefix infix operators induction length chain infix prefix operators 
base length zero tree old 
induction step assumption derive tree chain occurrences infix prefix operators show derive tree chain occurrences infix prefix operators 
show cases tree infix operator root prefix operator root 

postfix operator analogous prefix operator 
proof sketch proof 
proof 
prove qh induction length derivation 
induction assumption qh fl show fl qh show qh arbitrary assumption fl case analysis step derivation 
gamma 
gamma 
inop gamma 
preop preop gamma 
postop gamma postop 
gamma practical algorithm algorithm implement experimental language user defined distfix operators described 
distfix operator specified operator words optionally precedence associativity 
parser written ml uses parser constructors due burge fairbairn kent petersson holmstrom 
parser constructors easy write parser grammar constructors recognize terminal symbols sequences alternatives constructors introduce actions parsing 
parser constructors construct recursive descent parser grammar left recursive express precedences involved operators 
parser user defined distfix operators rules algorithm described 
changes order remove left recursion generate entire grammar different nonterminals 
see rules production schemas way similar hyper rules level grammars instantiate rules parsing 
hanson describes technique parsing expressions recursive descent introducing additional nonterminals technique handle prefix postfix operators different precedence method 
annika aasa 
recursive descent parsing user defined distfix operators 
licentiate thesis department computer sciences chalmers university technology goteborg sweden may 
annika aasa 
user defined syntax 
phd thesis department computer sciences chalmers university technology goteborg sweden october 
aho johnson ullman 
deterministic parsing ambiguous grammars 
communications acm august 
alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley publishing reading mass 
burge 
recursive programming techniques 
addison wesley publishing reading mass 
cleaveland 
grammars programming languages 
elsevier north holland 
davie morrison 
recursive descent compiling 
horwood limited 
jay earley 
efficient context free parsing algorithm 
communications acm february 
jay earley 
ambiguity precedence syntax description 
acta informatica 
jon fairbairn 
making form follow function exercise functional programming style 
software practice experience 
robert floyd 
syntactic analysis operator precedence 
journal acm 
futatsugi goguen 
jouannaud meseguer 
principles obj 
proceedings th acm symposium principles programming languages pages new orleans january 
dick jacobs 
parsing techniques practical guide 
ellis horwood limited 
david hanson 
compact recursive descent parsing expressions 
software practice experience 
robin milner 
standard ml proposal 
polymorphism ml lcf hope newsletter january 
robin milner mads tofte robert harper 
definition standard ml 
mit press 
fernando pereira david warren 
parsing deduction 
proceedings st annual meeting association computational linguistics pages 
kent petersson 
ml 
department computer sciences university goteborg chalmers university technology goteborg sweden 
michael share 
resolving ambiguities parsing translation grammars 
acm sigplan notices 
leon sterling ehud shapiro 
art prolog 
mit press 
wharton 
resolution ambiguity parsing 
acta informatica 

