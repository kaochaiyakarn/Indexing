optview new approach examining optimized code caroline tice cs berkeley edu university california berkeley susan graham graham cs berkeley edu university california berkeley task mapping source programs machine code code optimized transformed compiler difficult 
instances debugging optimized code attributing performance analysis data source lines useful necessary understand source level occurring binary 
standard approach tools attempt map directly optimized binary original source 
mappings fragile inaccurate misleading 
suggest alternative approach 
mapping directly original source binary create modified version source program recognizable updated reflect effects optimizations facilitating mapping binary 
implemented tool optview demonstrate test ideas 
job compilers translate programs 
compiler takes program written language outputs semantically equivalent program written different language 
compilers perform simple straight translation language addition translating perform various optimizing transformations resulting efficient final program 
optimized program exhibits behavior expected original program machine instructions rarely correspond directly original program statements 
creates difficulties debugging analysis applications reconcile different programs 
applications useful pertinent information optimized program attempt convey programmer terms original program 
unfortunately frequently case transformed program far removed original transparent mapping leading confusing inaccurate results 
debugging done attempt create exact mappings optimized machine instructions original source statements 
transparent debugging optimized code mappings breaks certain uncommon conditions point debuggers fall back truthful behavior telling user debugger find user wants 
ideal user point view 
investigating problem understanding optimized code terms original program concluded wrong question asked 
question exhibit transparent mapping original transformed programs 
better question explain correspondences transformed program original program 
finegrained mapping directly back original source program may necessary 
may suffice derive modified version original program recognizable understandable familiar original program 
modified program correspond closely optimized binary allowing straightforward robust correct mapping mechanism 
tasks useful see modified source code 
instance interest programmers want understand optimizer transforms programs 
performance data resulting dynamic program analyses accurately attributed modified source code 
compiler writers debugging optimizer find useful see optimizations reflected source level 
programmers debugging optimized code may find useful see modified source code 
modified source code teaching tool computer classes studying compiler optimizations program transformations 
test ideas built tool optview generates modified versions original programs 
optview takes programs input 
works closely compiler outputs programs modified show effects various optimizations 
rest organized follows 
section give detailed explanation mean modified source code 
section discusses decisions involved designing tool generate modified source code 
section describes optview detail 
section discusses related section 
explanation modified source code phrase modified source code applied source code undergone set modifications concern primarily user visible structural changes 
relevant modifications obtained applying series transformations program 
transformations include reordering code rewriting expressions replacing language constructs different equivalent constructs duplicating code deleting code 
transformations applied original program obtain modified source code reflect optimizations performed compiler modified source code partially optimized version source program 
transformations visible original source language may extended pseudocode comments may inserted modified source code explanatory purposes 
pseudocode modified source code compilable 
purpose convey information serving intermediary original source code target code non problem 
need pseudocode 
greatest difficulty creating modified code compiles get types declarations correct 
natural question point reverse engineering techniques obtain optimized source program directly optimized binary 
reason doing new program recognizable understandable familiar original program 
due loss types control flow data nature certain optimizations software pipelining loop optimizations code generated reverse engineering unfamiliar hard comprehend 
user understand modified code relates original program user difficulty determining meaning significance attach 
starting original program gradually transforming retain parts original program involved compiler optimization process comments declarations pre compiler directives high level constructs structured control flow statements get lost compilation process 
keeping features original program modified source code easily recognizable 
starting original program irrelevant information optimizations suppressed 
reverse engineering option 
optimizations expressed source level desirable 
fine grained instruction scheduling example optimization 
example register allocation spilling 
modified source code required express effects optimizations assuming possible final result similar assembly code defeating purpose source language 
raises important questions optimizations considered deriving modified source code effects optimizations reflected source language 
address choice optimizations 
showing effects optimizations discussed section 
deciding optimizations reflect modified source code keep mind purpose 
modified source code shows user happening binary source level 
user wants know source statements executing executing 
user needs accurate idea variables exist time values contain 
users need see low level machine specific optimizations 
optimizations interest visibly affect source code constructs eliminate source code move source statements change form source statements altering expressions different constants variables operators needs careful considering optimizations change form source statements 
changes replacing multiplication register shifts probably relevant different constant variable expression 
optimizations focused initially optview code motion coarse grained instruction scheduling common subexpression elimination partial redundancy elimination copy propagation dead code elimination 
basic requirements modified source code meet order useful ffl recognizable understandable familiar original program 
ffl correspond closely optimized binary allow consistent meaningful mapping 
requirements direct conflict 
difficult interesting research issues find appropriate balance 
modifies original program correspond binary recognizable understandable 
imagine continuum transformed programs 
continuum original source code program obtained reverse engineering optimized binary 
concept modified source code falls exact point continuum vary depending intended audience modified program 
writing tool debugging optimizers example focus close correspondence optimized binary expense recognizability 
indicating performance data appropriate modified code remain closer original source 
generating modified source code optimization process source program translated internal form portions internal representation moved duplicated separated eliminated altered 
order modified source code recognizable familiar original program fragments original program possible construct modified source code 
modified source code may contain original source statements reordered modified slightly split apart 
may contain new statements inserted particular optimization effects explicit 
contain fragments pseudocode designed explain important optimization effects adequately described constructs source language 
addition modified source code indicate original source statements eliminated 
reordering source statements essential requirement modified source code order statements occur accurately reflect order statements executed 
turn requires knowledge original code num num num num num reordering wrong num num num num num reordered updated correct num num num num num reordering updating code compiler rearranged statements mechanism identifying source statements optimized internal representation 
optview introduce key instructions purpose see section 
compiler tags key instructions binary source statement eliminated 
order key instructions occur binary determines order corresponding source statements occur modified source code 
modifying source statements show effects certain optimizations preserve semantics program original source statements may need modified 
shows lines code source program 
lines completed executing variable contain value variable num contain value 
optimization process order calculations changed shown 
preserve semantics original program necessary change constant account fact num incremented value calculated 
shows correctly updated code 
inserting new code transformations common subexpression elimination new statements added source code illustrate optimization 
example assignment statement inserted point subexpression evaluated assigning subexpression newly generated variable 
new variable substituted modified source original subexpression evaluation eliminated compiler 
eliminating source code standard feature optimizing compilers elimination dead code 
modified source code clear source statements eliminated compiler 
ways 
particular representation chosen immaterial long conveys information user 
splitting apart statements high level powerful source languages contain single constructs embody multiple pieces functionality 
optimizer may scatter functionally separate pieces construct widely optimized binary 
task hand requires modified source code accurately reflect location order functional events occur binary necessary modified source code split apart constructs 
simple example clarify point 
shows common construct statement 
statement header contains parts initialization statements loop test increment statements 
order allow modified code flexibility mirror order events binary construct needs rewritten simpler constructs embodying single piece functionality 
shows loop rewritten multiple statements 
modification allows various statements moved reordered necessary modified source code 
designing tool generate modified source code particular language needs carefully consider language constructs need broken split apart manner 
ideally multifunctional construct needs rewritten source language contain simpler constructs purpose 
case pseudocode represent pieces functionality need separated 
shows statement split apart represented pseudocode 
creating pseudocode earlier suggested augmenting original source language pseudocode generating modified source code 
sake simplicity comprehensibility creation pseudocode kept minimum 
situations may necessary 
example show strength reduction fortran need mechanism representing pointers 
versions fortran support extensions allow representation pointers 
appropriate pseudocode show pointer fortran case 
advocate ad hoc creation pseudocode 
designing tool generate modified source code able identify design pseudocode needed carefully considering constructs source language optimization effects shown 
presentation final issue considered designing tool generate modified source code interface modified source code user 
modified source code correspondence relation original program clear 
possible solutions question 
probably graphical interface combination windows colors icons layered effects may best 
design decisions appropriate choice depend heavily intended task audience 
optview optview prototype tool implemented demonstrate test ideas 
generates modified source code optimized programs 
optview written compiler aggressively optimizing commercial compiler developed silicon graphics 
sgi 
task mind designed optview debugging optimized code intended audience applications programmers may know compiler optimizations 
optimizations focus effects visible stepping code examining variables code motion code reordering coarsegrained instruction scheduling common subexpression elimination copy propagation partial redundancy elimination dead code elimination constant folding 
key instructions optview generates modified source reusing modifying original source program fragments optimized target code 
determining order source statements executed complicated optimization longer current list current current current 
original statement current list current current current constructs current list current current current od pseudocode rewriting statements 
clear concept individual source statements target code 
broken duplicated recombined interleaved making difficult state statement ends begins 
order deal problem introduce notion key instructions 
key instruction mean single low level instruction closely matches semantics associated statement type 
example key instruction assignment statement stores assignment value variable location memory register write memory eliminated 
key instruction function call jump code function 
key functionality completely new concept 
closely related idea semantic breakpoints 
language statements single easily identifiable key instructions 
control flow constructs multiple key instructions 
types language statements easily identifiable corresponding key instruction instance conditional branch conditional statement 
true assignment statements 
depending calculation involved assignment multiple store instructions associated source statement 
instructions variables name difficult determine stores variable left hand side source assignment 
complicate matters write memory may eliminated key store instruction operator instruction destination register contain value interest 
reasons way accurately determine key instruction assignment statements track key assignment instructions front compiler way optimizations instruction generation phase 
modified front compiler flag assignment statement source program intermediate representation statement stores value 
intermediate representation goes various optimizations transformations lowering stages flag tracked updated appropriately passed assembly code 
key instructions statements uniquely determined nature statement 
point modified source code generated order key instructions determine new order source statements 
key instructions allows accurately reflect effects code motion code reordering 
languages may language constructs vector assignment statement allow single assignment statement assign multiple components left hand side statement 
language constructs split apart rewritten simpler constructs statements assigning single locations left hand side 
similarly statement rewritten separate assignment statements 
rewriting multi functional constructs identified source language constructs inherently embody multiple pieces functionality need split apart statements conditional expressions increment decrement operators embedded statements initialized declarations 
constructs allow multiple assignments variables single statement 
optview obtains information compiler constructs contained original source program rewrites simple manner 
statements rewritten loops loop initializations loop loop increments inserted loop body 
increment decrement operators embedded statements pulled statements question written separate statements containing statements appropriate 
initialization assignments removed variable declarations inserted just prior statement 
assignment statements conditional expressions right hand side rewritten statements 
changes permit greater flexibility rearranging modifying assignments needed reflect optimizations 
front compiler writes data file optview identify source lines contain constructs need rewritten 
modified original source code modified source code cse optview source generated lines parsed find update text needs rewritten moved 
tool takes advantage fact input syntactically correct called 
allows relatively simple parsing strategy 
collecting optimization information accurately reflect effects optimizations common subexpression elimination cse partial redundancy elimination pre copy propagation optview needs know precisely compiler 
modified compiler collect information optimizations write file optview uses reflect optimizations modified source code 
information optview requires includes location assignment statements inserted left right hand sides assignment statements location source statements requiring substitutions assignment statement relevant substitution expressions propagated statements 
optview determine expressions involved optimizations came original source program optimized source expressions shown 
collected necessary information optimizations performed compiler optview modifies source code effects cse pre explicit shown figures 
inserts new assignment statement assigning common expression new temporary variable 
replaces relevant expression subexpression appropriate statements new temporary variable 
new variables part original program expectation properly annotated confusing user 
difficulty encountered implementing part optview common subexpressions generated compiler canonicalized form subexpression source statement substitution performed 
solution pass intermediate representation original source statement original source code 
modified source code 
pre optview tool outputs text canonical form compiler 
source text compiler optimization data canonical form substitution relatively simple 
optview handles copy propagation cpp differently 
cpp optimization enables cse optimizations 
compiler applies cpp applying optimizations 
effects cpp transitory optimization enabled cpp may completely overwrite eliminate propagated expressions 
solution problem parts 
keep track data gathered compiler source statement expression propagated exact propagated expression 
optimization effects reflected modified source code optview goes checks resulting source line expression propagated 
comment added line stating copy propagation occurred 
original variable exists source statement optview replaces propagated expression 
summary compiler modifications modified compiler create small data files optview 
front compiler creates data file records general location parse information source language constructs need rewritten 
back compiler creates data file records information optimizations performs 
currently information file pertains partial redundancy elimination copy propagation common subexpression elimination 
addition creating data files modified compiler mechanism keeping track original canonicalized text obtained existing tool translates pieces internal representation source code positions making accurate giving finer granularity modified compiler flag key instructions assignment statements intermediate representation 
modified compiler immediately prior outputting assembly binary code invokes optview generate modified source code 
structure optview optview reads original source file stores text additional information source line array entry source line 
labels source line white space comment declaration pre processor directive executable code 
optview rewrites loop headers conditional expressions increment decrement operators embedded statements initialized declarations explained section data file created front compiler 
source statements rewritten optview uses data file written back pre cse transformations explicit source code explained earlier 
step determine new order statements appear 
new order determined order instructions target code follows 
source statement corresponding instructions target code key instruction identified 
source statement assignment statement instruction key instruction flagged compiler 
source statement function call key instruction jump instruction 
instruction source statement key instruction statement 
source statement key instruction associated order key instructions target code new order source statements modified source code 
source line original program contains executable code associated instructions target code determined dead code eliminated indicated 
dead code elimination optview goes modified source code annotates updates statements copy propagation occurred see section details 
recall reordering source statements expressions modified maintain semantic equivalence original program see 
optview uses simple algorithm code motion determine expressions update 
existing sgi tool translates intermediate representation expressions back source code 
intermediate code optimized int int return int main num num num num foo num foo cse var foo cse var num cse var foo int int int return main num num num num num num foo foo foo foo num original source code modified source code num dead code optview output simple gui compiler generates correctly updated source 
user interface exploring alternative graphical user interfaces presenting user modified source code generated optview 
choice user interface great impact user ability understand modified source code 
interface critical showing relationship original program modified source code 
possibilities considered include dead code drawing lines arrows margins indicate lines moved highlighting altered constants expressions different color allowing user undo re certain optimization effects dynamically 
aid understanding modified code vertically split screen original code side modified code 
line highlighted selected window corresponding line window automatically highlighted 
question visualize optimized code considered :10.1.1.51.2032
entirely satisfactory solution 
shows example code original source modified code generated tool look nice gui 
related previous attempts convey effects optimizations explicitly programmers 
designers convex debugger optimized code created extremely fine grained accurate mapping optimized binary original source 
debugger combination highlighting code animation original source show user exactly happening binary 
problems approach 
lot information conveyed user code animation single stepping program user sets breakpoint runs program breakpoint clear statements breakpoint executed values variables 
user knows lot optimizations confusing informative see highlighting jump code 
cool describes design system instruction scheduling apparent vliw machine 
cool focussed entirely single optimization implemented design 
done optview reminiscent term rewriting systems trss possibly done framework 
particular rewriting multifunctional language constructs simpler terms applying cse pre copy propagation effects done system 
tracking key instructions compiler lot common compiler written system mind modifying propagate key instructions manner require 
trss applicable transformations reordering statements location key instructions machine code 
new approach displaying effects compiler optimizations source level summarized potential uses 
described optview tool implemented experiment approach discussed detail issues conceptual level design optview 
shown possible create tool explicitly shows effects common optimizations source level highly aggressive optimizing compiler 
done optview 
intend add information high level loop transformations function call inlining modified source code 
plan enhance user interface graphical interface techniques 
initial investigations indicate modified source code recognizable understandable 
continue investigate viability approach uses modified source code especially debugging 
adl tabatabai source level debugging globally optimized code ph dissertation carnegie mellon university may 
breuer bowen decompilation enumeration types grammars acm transactions programming languages systems vol 
sept 
brooks hansen simmons new approach debugging optimized code proceedings pldi conference cifuentes gough decompilation binary programs technical report fit tr faculty information technology queensland university technology australia april 
cool debugging vliw code instruction scheduling thesis oregon graduate institute science technology july debugging optimized code misled ph dissertation university california santa cruz may coutant doc practical approach source level debugging globally optimized code proceedings pldi conference van deursen klint tip origin tracking journal symbolic computation jackson rollins new model program dependences reverse engineering proceedings acm sigsoft conference december 
sites chernoff kirk marks robinson binary translation communications acm vol 
february 
debugging globally optimized programs data flow analysis proceedings pldi conference 
zellweger high level debugging optimized code ph dissertation university california berkeley may 
