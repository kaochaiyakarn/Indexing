register deprivation measurements manuel benitez jack davidson computer science report 
cs november register deprivation measurements manuel benitez jack davidson virginia edu virginia edu department computer science university virginia charlottesville va development register deprivation measurements motivated desire study effect register demand code improvement register allocation strategies 
addition obvious application testing spill mechanism compiler register allocator register deprivation strategy determine relationship number allocable registers effectiveness code optimization phases individually enhance coverage validation suites evaluate register demands benchmark suites help machine designers determine optimal number registers needed support existing compiler technologies 
contains description register deprivation techniques presents useful applications discusses issues addressed order incorporate technique compiler 
included register deprivation measurement results obtained modest set benchmarks provide interesting somewhat unexpected insights pertaining optimizations benchmark programs architectures 
motivation optimizing compilers generate code invoking comprehensive set optimizations 
code improvement transformations increase average number registers simultaneously needed program register allocation essential producing high quality code 
currently graph coloring cac paradigm choice performing register allocation 
typical compiler uses graph coloring allocation performs optimizations infinite set pseudo registers bound hardware registers just prior code generation 
allocator unable assign pseudo register actual register reduces register pressure introducing spills essentially assign pseudo register values memory location hardware registers 
graph coloring register allocation strategies strive minimize spills unavoidable spills values reduce quality resulting code little possible 
regardless slightly spill impacts quality code invalidates assumption accessing pseudo register item roughly equivalent accessing hardware register cause optimizer produce code efficient original code 
need produce efficient spill code complicates simple register allocator 
typical consequence postponing register assignment decisions register resources committed produce spills code provides opportunities perform code improvement transformations target machine lacks sufficient registers 
priority coloring allocation strategies ch vulnerable circumstances explicitly spill provide registers transformations expected get 
problems manageable limit range architectures compiler retargeted number register consuming optimization phases compiler effectively accommodate 
concerns motivated development new graph coloring register allocation strategies retargetable vpcc vpo optimizing compiler bd 
difficult part task developing strategies devising technique evaluate efficacy 
register deprivation measurement techniques initially developed satisfy need 
techniques applications original purpose simple incorporate existing compilers 
applications previous section implies register deprivation measurements evaluate register allocation algorithms 
reason increased competition registers caused global inter procedural optimizations register set simulated architecture set registers reducing number register available compiler 
register deprivation techniques design better register allocation mechanisms provide insights behavior allocator demand register resources varies 
addition register deprivation measurements gauge effectiveness gain insights entire code improvement system individual optimization phases compiler 
course register deprivation measurement spill mechanisms register allocation heuristics exercised frequently severe conditions thorough compiler validation test suite produce 
novel register deprivation technique fraser hanson utilized similar strategy test local register allocator lcc compiler fh 
surprising register deprivation process uncovered defects areas compiler associated register allocator thought reliable 
register deprivation measurements determine benchmark suite fails exercise certain architectural elements 
evaluations select new code validation benchmark suites 
marketing design decisions increasingly basis benchmark test results tools locate inadequacies benchmark suites valuable 
existing compiler technology capable making effective large numbers registers 
register allocation techniques wal limits number registers successfully utilize 
register deprivation measurements probe limits 
hardware designers forced trade offs guidance empirical data 
register deprivation techniques suited task providing architects kinds feedback ensure architecture complements compiler technology supports 
registers provided machine stages included processor pipeline just issues register deprivation measurements help resolve 
organization intent describe register deprivation measurements discuss useful applications technique discuss issues addressed incorporating existing compiler 
description register deprivation process results measurements graphically section 
section elaborates various applications register deprivation technique 
section presents issues addressed order incorporate register deprivation process compiler system 
section concludes brief summary 
register deprivation measurements trials probes register deprivation trial consists sequence probes 
probe collection data obtained compiling executing suite benchmark programs 
successive probe identical previous respect compiler prohibited registers available preceding probes 
data collected trial combination measurements give indication quality code generated program benchmark suite 
potential measurements include execution times instruction memory counts cache performance measurements hardware monitor timing information page replacement traces 
register deprivation results measure number instructions number memory amount processor time required execute set benchmark programs 
number probes complete register deprivation trial depends target architecture 
probe complete set allocable registers available compiler final probe absolute minimum set registers needed successfully compile execute benchmark suite 
total number probes difference number allocable registers available probes plus 
register deprivation experiments vary subset registers register augmentation measurements performed simulating effects having registers available target machine dw possible 
table shows instruction execution counts obtained sample register deprivation trial consisting probes taken mythical machine program benchmark suite 
results indicate system compile benchmark programs uses additional allocable register available manner reduces number instructions benchmark programs execute 
values indicate net effect additional register number instructions benchmark suite executes provide information needed determine individual optimization phase groups phases compiler affected 
obtain information pair register deprivation trials performed 
comparative measurements separate impact additional register global optimization phases optimizer side effects code generated benchmark program base trial performed compiler produces code performing global optimization transformations 
optimized trial results base trial shown table reveal improvements new allocable registers added 
slight improvements result reduction amount spill code produced local register allocator 
illustrate relationship reduction number instructions executed attributable exclusively performing global optimizations number allocable registers available result obtained optimized register deprivation trial compared corresponding base trial result 
process eliminates impact size allocable register set components measured regardless beneficial detrimental 
formula hennessy patterson hp obtain percent improvement initial optimized trial base trial table shows results obtained applying formula corresponding pair values sample trials 
improvement values indicate global optimizations produce slight reduction number instructions executed benchmark programs minimum number allocable registers 
addi benchmark number allocable registers probe prog prog prog table instruction execution counts register deprivation trial benchmark number allocable registers probe prog prog prog table instruction execution counts register deprivation base trial benchmark number allocable registers probe prog prog prog table results comparing register deprivation trials percent improvement instructions executed base trial instructions executed optimized trial instructions executed optimized trial tional registers available global optimization transformations able perform transformations substantially reduce number instructions executed benchmark programs 
rate improvement tapers quickly sufficient registers provided perform beneficial transformations 
point reached successive register enables optimizer modest improvements benchmark suite 
displaying results comparative register deprivation measurement tabular form measurement results plotted number allocable registers available probe axis percent improvement value axis 
plots display individual improvement values produced benchmark program solid line indicates average performance improvement programs trial 
corresponding plot sample register deprivation experiment results shown 
applications system performance measurements process comparing register deprivation base trial compiler optimizations trial applies entire set optimizations determine impact number allocable registers entire code improvement system 
shows number allocable registers affects number instructions executed object code produced vpcc vpo system motorola mot cisc mips kan risc processors 
results show number instructions executed code produced vpcc vpo decreases number allocable registers increases 
inter results sample register deprivation experiment allocable registers percent improvement number instructions executed prog prog prog average motorola mips system performance results instruction counts allocable registers percent improvement number instructions executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average allocable registers percent improvement number instructions executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average note improvements obtained cisc processor small compared risc processor 
effect attributed fact code improvement transformations performed vpcc vpo replace memory register 
cisc machine motorola memory integrated instructions values total number instructions remains fairly constant 
risc architectures replacing memory register eliminates entire load store instruction reductions evident number instructions executed measured 
important emphasize results show effect register set size number instructions executed measure code quality 
attempting draw general code quality exclusively metric inappropriate 
obtain insight impact number allocable registers available vpcc vpo pair register deprivation trials measuring number memory executed performed 
results comparing trials 
memory comparison results suggest register set significant impact number memory code produced vpcc vpo performs 
results support claim effective code improvement transformations performed vpcc vpo primarily replace memory register illustrate additional allocable register produces substantial decrease number memory executed 
relation holds true cisc risc architectures 
instruction memory counts provide useful insights concerning relationship number allocable registers quality code produced compiler execution time measurements indicative code quality system performance 
compiler generates correct code users ultimately concerned speed improved code executes 
instruction execution memory counts concert provide information register deprivation trials performed explicitly measure execution times 
impact varying number allocable registers execution time performance code generated vpcc vpo shown 
results indicate correlation instruction memory counts execution time performance difficult predict magnitude execution time performance improvements instruction memory counts 
instruction memory counts example indicate magnitude impact code improvements performance memory system cache processor instruction pipeline 
instruction memory counts unaffected factors amount time spent performing essential tasks performed operating system behalf program 
addition counts entirely reproducible execution time measurements interaction multi tasking environment low resolution clock provided system obtained substantial margin error 
increase level confidence execution time register deprivation measurements individual measurement repeated times highest lowest execution time results discarded remaining averaged provide final execution time value 
spite precautions unusual identical execution time trials vary percent 
despite unfortunately wide margin error execution time register deprivation measurements show vpcc vpo able improve quality code generated cisc risc architectures allocable registers available 
positive average improvement obtained minimal number regis motorola mips system performance results memory counts allocable registers percent improvement number memory executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average allocable registers percent improvement number memory executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average system performance results execution times motorola mips allocable registers percent improvement execution time cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average allocable registers percent improvement execution time cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average ters available suggests vpcc vpo commit register resources 
suggests limited exclusively architectures provide large sets registers utility machines provide registers 
phase performance measurements register deprivation experiments reveal effect size register set individual optimization phases language translation system 
done comparing register deprivation trial phase impact measured invoked base trial 
technique isolates effect size register set phase measured effect register set optimization phases 
important note interactions measured phase phases influence results comparison 
cases capturing effect interactions direct impact measured phase desirable best represents effect measured phase optimizer 
instances interactions minimized invoking optimization phases register deprivation trials performed 
figures show size register set affects reduction dynamic instruction memory execution counts produced vpcc vpo evaluation order determination phase dav 
recall purpose evaluation order determination reduce number registers required assign register hold temporary values 
results obtained comparing base trial control flow optimizations instruction selection performed trial control flow optimizations instruction selection evaluation order determination invoked 
figures show nearly constant average improvement number instructions memory executed motorola 
system set volatile registers small allocable registers see improvements appear reduction number instructions memory needed preserve values non volatile registers external function calls 
reasons mentioned reductions spill code little difference cisc instruction counts show extent memory counts 
factors responsible nearly constant improvements exhibited evaluation order determination phase architecture 
mips instruction memory counts initially show dramatic improvements allocable registers available remain flat remainder experiment 
significant improvements low scale combination factors 
volatile registers plentiful just allocable registers reduction number registers assigned temporary expression values affect number save store instructions function 
second spills due inefficient expression sequences occur allocable registers available reductions amount spill code generated appear allocable registers scarce 
results suggest ratio volatile non volatile registers significant impact effectiveness optimizations exists optimizations effective number allocable registers increases 
benchmark suite evaluation register deprivation measurements determine suite test programs lacks sufficient amounts types code 
interesting characteristic mips register deprivation results shown presence flat areas probes 
probes add floating point evaluation order determination performance results instruction execution counts motorola mips allocable registers percent improvement number instructions executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average allocable registers percent improvement number instructions executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average evaluation order determination performance results memory counts motorola mips allocable registers percent improvement number memory executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average allocable registers percent improvement number memory executed cache compact diff eqntott espresso gcc iir li linpack mincost sort tsp average registers set allocable registers available compiler see suggesting benchmark suite lacks sufficient floating point codes compiler small number floating point registers effectively 
hypotheses correct determined adding floating point codes benchmark suite 
flat areas pronounced conclude suite heavily biased integer codes 
absence flat areas register deprivation experiment necessarily indicate benchmark suite appropriate balance integer floating point codes ability detect imbalance circumstances useful property 
addition providing insight trends register deprivation results yield useful information individual benchmark programs way interact compiler 
example utility cursory examination mips processor results shown reveals executes instructions registers available 
reason decrease code quality program spends time calling function obtain character input file 
function consists loop skips noise characters 
input files contain characters code loop essential purposes straight line code 
optimization phases perform transformations loops fail determine compile time invest register resources assuming loop body executed frequently code immediately precedes loop new register available new code inserted compute loop invariant expressions outside loop load store instructions added ensure values non volatile registers function properly maintained 
transformations fail improve code additional register merely increases magnitude mistake 
interesting insight gleaned register deprivation results tendency benchmarks improve abruptly gradually number allocable registers increased 
instance seen performance results mips shown 
results show significant improvement execution time iir benchmark registers comes applying recurrence optimization bd main loop benchmark 
transformation effective consumes trio registers mechanism prevents vpcc vpo committing register resources prevents transformation place sufficient registers available support 
reason unusual see sudden improvements execution times individual programs gradual improvement characteristic average performance values 
final example register deprivation measurements detect benchmarks behave extraordinary ways evident mips results shown figures 
contrary general trend improvements mincost benchmark evaluation order determination phase constant regardless number allocable register available 
rest benchmark programs mincost contains expression uses value returned external function call written vpcc emits expression external function called 
arrangement number non volatile registers hold subexpression values 
evaluation order determination applied expression reordered external function call executed 
eliminates need non volatile registers overhead involved saving restoring register values prologue epilogue procedure contains expression 
architecture design register deprivation measurements provide useful architecture design information 
example attempting determine sacrifice potential instructions favor additional registers register deprivation experiment performed suitable simulator determine compiler able additional registers effectively 
similar techniques employed determine number pipeline stages processing units amount chip cache provide 
example determine effect registers pipeline machine simulated number interlocks plotted number registers available 
alternately number register left constant varying number pipeline stages 
example insights register deprivation measurements provide seen motorola results shown 
results indicate significant memory reductions occur probes 
surprisingly probes increase number data registers available compiler see 
information suggests partitioning integer register set registers handle address expressions registers process integer expressions result best possible utilization register set 
validation suite enhancement process implementing obtaining register deprivation measurements exposed deficiencies parts vpcc vpo thought free defects 
particular code responsible inserting spill code local register transfer code global register allocator thoroughly exercised register deprivation process substantially larger validation suites previously employed 
general spill mechanisms thoroughly tested register deprivation probe uses fewest number registers 
interestingly register deprivation measurements uncovered deficiencies parts compiler associated register allocator 
bugs uncovered probe minimum number registers 
example involved problem aliasing mechanism common subexpression elimination phase vpcc vpo 
number available registers decreased common subexpression previously held register re computed re computation improperly handled aliasing mechanism effects memory update 
caused register value incorrectly lieu updated memory value subsequent instruction 
problem manifested intermediate probes register containing incorrect value longer available probes correct value fetched appropriate memory location 
deficiencies parts optimizer uncovered easy characterize 
improved testing capability derived fact probe register deprivation experiment effectively presents optimization phases slightly mutated version original benchmark program 
effective completely different validation program mutated test ability uncover problems original version may 
mutated test advantage quite similar original test helpful attempting locate point failure 
capability allows register deprivation technique effective test tool 
nature deficiencies uncovered register deprivation measurements suggest register augmentation measurements register set machine artificially augmented provide similar testing capabilities 
implementation compiler implementing register deprivation testing requires compiler specifically tailored generate code uses subset registers available target machine 
exhaustive register deprivation testing usually entails just reducing number register register allocation algorithm 
modifications calling convention determines code sequences perform external function calls code generator 
register deprivation process lengthy repeated automated 
best accomplished implementing mechanism controls available registers adjusted option compiler command line constant easily changed compiler modules control register allocation compiled 
implemented register deprivation measurement technique vpcc vpo compiler 
vpcc front accepts traditional kr generates stack intermediate language code directly code generator generate machine level code form register transfer lists rtls 
back vpo improves code produce high quality assembly language code target machine 
traditional optimizations including local variable promotion code motion strength reduction induction variable elimination common subexpression elimination evaluation order determination dead variable elimination constant folding various control flow optimizations asu performed 
instruction scheduling branch delay slot filling essential pipelined architectures recurrence optimization bd significantly improve scientific digital signal processing codes included 
profile tool object code produced vpcc vpo instrumented determine number instructions memory executed ease dw 
ease employed object code produced compiler instrumented execution counters 
instrumented code executes values counters written file instruction information basic block 
report generator uses information provide detailed execution profile includes total number instructions memory executed object code 
facilitate task obtaining execution time measurements ease provides facility measuring amount processor time spent executing program 
facility operates principle bin time utility provided unix systems allows execution time results directed separate file execution log file easily read graph generation utility program 
execution time information provided unix systems affected factors easily controlled number precautions taken minimize impact factors 
minimize errors introduced fairly long interval system clock ticks benchmarks invoked input data sets executed seconds 
eliminate clock drift external effects program executed times highest lowest times discarded remaining times averaged provide single time value 
effort identify reduce external factors affect times 
efforts included running time trials lightly loaded machines avoiding dynamic link library functions overwritten system reload time partially charged user 
precautions increase accuracy execution time measurements resolution provided reveal perfor mance differences percent 
cases instruction memory counts accurate measures performance 
registers careful consideration determining registers eliminated successive probe register deprivation test 
task complicated fact register sets commonly provide register type general purpose floating point registers 
intent register deprivation testing examine integer codes optimization operates loops manipulate floating point values registers type need considered 
interested measuring effects register deprivation general implementation maintains integer floating point register ratio close original value possible 
calling convention systems calling convention dictates caller saves strategy registers partitioned values may arbitrarily changed external function call volatile values affected external function call non volatile 
ratio volatile non volatile registers significant impact code quality dw register deprivation testing implementation maintains volatile non volatile register ratios close original values possible 
calling conventions pass actual parameter values subset volatile register set 
number registers reserved parameter passing usually small register deprivation trials eventually reach point volatile registers withheld remaining registers implement original calling convention 
ability modify calling convention essential performing thorough register deprivation experiment 
register deprivation experiments performed mips passes argument values functions registers adjust number registers pass argument values ratio number argument passing registers total allocable registers remains fairly constant 
probes order maintain register ratios discussed previous sections start original set allocable registers available compiler 
number usually slightly number registers available target machine registers reserved special functions stack pointer frame pointer 
determine register removed successive probe set potential trials considered type register available volatile registers non volatile registers removed 
trial type type volatile non volatile ratios closest original values ratios chosen 
process continues successive probe additional registers withheld compiler 
architectures point usually reached registers register type remain minimum number registers required perform binary operation 
machines binary operations performed memory locations limit may lower 
shows registers available probes register deprivation experiments performed mips 
general purpose floating point registers registers available local global allocation compiler shown 
remaining registers reserved assembler operating system special return fixed constant value exclusively argument pointers frame pointers 
shows registers available probes register deprivation experiments performed motorola 
architecture provides different classes registers address data floating point 
total registers classes address registers reserved stack pointer frame pointer 
pair registers classes required generate code minimum number registers 
volatile non volatile register ratios address floating point register classes ratios data register class kept fairly constant calling convention uses volatile data registers return function values 
final register probe important note registers available mips probe floating point registers volatile argument passing allocable registers allocable registers allocable volatile data register functions return floating point values additional volatile register return sequence 
code sequences minute portion instructions executed probe effect outcome experiments negligible 
library functions systems source code library functions available changes calling convention implemented simply re compiling library 
source code available large portions written language allow calling convention easily modified mechanism implemented allow existing libraries 
mechanism entails generating special code external function call passes actual parameters library function expects argument values arrive specific registers 
systems may possible differentiate calls library functions calls user functions special interface code needed function call 
special code introduces problems code annotated counted part instructions memory executed program registers available motorola probe allocable registers address registers volatile allocable registers data registers allocable registers floating point registers library code modified reflect code generated register limits probe fully enforced execution time programs affected wall clock execution times entirely accurate 
problem trivially handled ease 
order prevent second problem affecting results instruction memory count register deprivation test library codes instrumented number instructions memory executed library functions counted probes register deprivation measurements 
problem affects experiments measure execution time factor overwhelmingly significant benchmarks programs selected measurements spend small portion time executing library functions 
generating code probe limits number parameter passing registers actual parameters normally placed registers placed memory locations normally reserved actual parameter values passed registers 
special interface code consisting series uninstrumented load instructions transfer actual parameter values registers prescribed standard calling convention generated point values stored memory external function call 
library function code satisfied expects parameter values registers special interface code put 
register deprivation measurements measure instruction memory counts remain accurate execution counts identical produced completely modified calling convention 
experiments measure execution times slightly affected approach 
shows sample code generated mips probe allocable registers 
source code consists simple call function accepts integer parameter values 
normally calling convention pass actual parameter value general purpose register second actual parameter value general purpose register 
registers withheld compiler probe calling convention modified actual parameter values passed special location caller activation record 
event function called library function adhering original calling convention actual parameter values passed properly 
special interface code highlighted gray box generated ensure function original calling convention receives actual parameter values correctly 
special interface code instrumented ease execution counts generated code executed reflects instructions generated satisfy new calling convention 
execution time measurements entirely accurate include time required execute interface code 
library functions call user defined functions 
example library function qsort 
function sorts arbitrary array data parameters passed pointer userdefined function accepts pair pointers elements array returns value indicates items ordered 
library functions continue rely original calling convention actual parameter values may available registers specified original calling convention memory locations new code load 
solution introduce special interface code similar code required prior external function call 
shows sample interface code generated register probe mips 
code placed entry point functions accept parameters order transfer actual parameter values registers dictated original calling convention memory satisfy requirements calling convention probe 
test suite program benchmark suite described table perform register deprivation experiments shown 
benchmarks chosen represent kinds codes consume cycles professional development educational environment 
register deprivation results shown took approximately hours collect decstation 
time spent compiling test suite portions vpo vpcc perform register allocation probes trial 
remainder time spent executing test programs collecting execution information 
process completely automated shell scripts avoid human error 
summary register deprivation measurements technique gauge effects register set optimizer single optimization phase 
design test techniques improve performance optimizer machines having small register sets circumstances high demand registers 
experience shows register deprivation experiments enhance ability validation suites reveal deficiencies compiler systems 
register deprivation measurements name description source type lines code cache cache simulation user code integer compact huffman coding file compression unix utility integer diff text file comparison unix utility integer eqntott pla optimizer spec benchmark cpu integer espresso boolean expression translator spec benchmark cpu integer gcc optimizing compiler spec benchmark cpu integer iir infinite impulse response filter kernel benchmark cpu integer li lisp interpreter spec benchmark cpu integer linpack floating point benchmark synthetic benchmark cpu floating point mincost vlsi circuit partitioning user code cpu floating point text formatting unix utility integer sort file sorting merging unix utility integer tsp traveling salesperson problem user code cpu integer table benchmark suite calling convention interface code function declaration int max int produces function prelude code max sp sp sw sp sw sp sw sp function call max produces assembly code li li sw sp sw sp lw sp lw sp jal max helpful determining registers optimizer utilize effectively provides information machine designer may interested designing architecture supported primarily existing compiler 
compiler designers interested developing new optimizations take advantage large register files register deprivation tests determine effectively additional allocable register utilized 
asu aho sethi ullman compilers principles techniques tools addison wesley reading ma 
bd benitez davidson portable global optimizer linker proceedings sigplan symposium programming language design implementation atlanta ga june 
bd benitez davidson code generation streaming access execute mechanism proceedings fourth international conference architectural support programming languages operating systems santa clara ca april 
cac chaitin auslander chandra cocke hopkins markstein register allocation coloring computer languages january 
ch chow hennessy register allocation priority coloring acm sigplan notices june 
dav davidson retargetable instruction proceedings sigplan symposium programming language design implementation palo alto ca june 
dw davidson whalley methods saving restoring register values function calls software practice experience february 
dw davidson whalley design environment addressing architecture compiler interactions microprocessors microsystems november 
fh fraser hanson simple register spilling retargetable compiler software practice experience january 
hp hennessy patterson computer architecture quantitative approach morgan kaufmann publishers san mateo ca 
kan kane mips risc architecture prentice hall englewood cliffs nj 
kr kernighan ritchie programming language prentice hall englewood cliffs nj 
mot motorola mc bit microprocessor user manual prentice hall englewood cliffs nj 
wal wall global register allocation link time proceedings sigplan symposium programming language design implementation palo alto ca june 
