esprit open long term research project pagespace report jada coordination toolkit java ciancarini rossi dept computer science univ bologna 
di porta donato bologna italy technische universitat berlin fachbereich informatik flp kit fr 
berlin germany java concurrent multithreaded language offers little help distributed programming 
introduce jada coordination toolkit java 
coordination concurrent threads distributed java objects achieved shared tuple spaces 
exchanging tuples tuple spaces java programs applets exchange data synchronize actions internet lan single host inside browser enabled java multithreading 
access tuple space set methods tuple space object 
operations put tuple tuple space read get read associatively tuple tuple space inspired linda language 
jada extends syntax java set classes 
show changes way design multiuser distributed applications www 
key rapid diffusion world wide web simplicity 
suggests enhancement www middleware simple 
main components www success currently 
communication protocol interaction web client web server 
minimal asynchronous stateless protocol rapid retrieval remote resources 
features connections context reestablished connection minimality dialog connection consists request response instance images stored resources external text data order fetch document containing images connections necessary 

uris naming scheme providing unique global identification network resources 
urls subset uris providing precise information correct place address protocol accessing 
fact urls allow clients request data kinds servers smtp mail nntp news ftp simplified unified access syntax 

html formatting language specifying web pages displayed web client 

java object oriented programming language animating web pages web client equipped java interpreter 
java building multiuser systems www seen platform aims integrating internet services applications 
coordination applications proactive reactive processing required groupware workflow especially suited monitored web cases fully controlled 
deficiencies ad hoc technical solutions modifying basic protocols prevent current www satisfying needs designing implementing establishing applications distributed processing required 
concentrate java component 
interested www java platform distributed multiuser applications 
groupware electronic commerce 
java quite promising kind applications offers uniform platform coordinate software running heterogeneous architectures 
java multithreaded language distributed programming 
typically integrated sockets libraries support distributed processing 
programming distributed systems sockets notoriously boring difficult error prone 
alternative strategy consists adding java high level coordination mechanisms theme 
report structure sect shortly recall java sect introduce jada java linda sect discuss implemented jada 
sect show simple jada programs 
sect compare system similar systems sect concludes report 
appendices complete sect jada api sect give hints run jada applications 
java world wide web captured interest industrial world companies started projects extend www capabilities order platform multiuser applications users concentrated local area network intranet geographically distributed internet 
software engineers working sun microsystems realized tool companies looking 
fact team engineers started project aimed develop programming language environment suitable market 
started soon realized requirements robustness simplicity wide variety architectures covered introduced problems solved developing new language java simpler cleaner 
fact java object oriented language syntactical structure resembles 
inherits better object oriented semantics smalltalk objective ag 
language model limited strongest point great simplicity 
java programs objects 
java objects instances classes 
class inherit base class just multiple inheritance supported extend behavior base class 
java programs compiled binary format gos executed platforms recompilation bytecode interpreter known java virtual machine 
bytecode linked fly loaded run gos 
dependencies byte code symbolic resolved load time 
java programmer change behavior base class needing recompile derived 
furthermore loading class happens required happen remote host network 
contains mechanisms check code run order avoid viruses security violations 
java architecture neutral machine dependent code part language standard library 
java libraries collections classes called packages 
think java environment built language standard packages 
aspects language depend standard packages defined java designers 
instance multithreading native java way create thread method thread class 
standard packages included ffl java lang package automatically imported compiling 
contains definitions root class object meta class class plus threads exceptions ffl java io contains classes accessing files 
ffl java net contains classes accessing network 
ffl java util contains utility classes containers date time managers 
ffl java awt contains classes windowing toolkit defines basic graphics interface components form independent actual windowing library implementation uses 
windows api windows motif unix 
follows simple example distributed java program programs communicate remotely exchanging ping pong messages 
code describes programs communicate sockets 
note ping pong symmetrical ping import java io import java net public class ping static final int port public void run throws ioexception listen connection request ss new port accept connection create associated streams socket ss accept inputstream outputstream os new ping pong os write value means ping int message read message value means pong public static void main string args ping ping new ping try ping run catch ioexception system println pong import java io import java net public class pong static final int port static final string pong host foo bar public void run throws ioexception connects ping application socket new socket pong host port create streams inputstream outputstream os new ping pong int message read message os write message public static void main string args ping ping new ping try ping run args catch ioexception system println java internet hotjava www browser internet application java 
different browsers ability run java code embedded html documents 
way html documents active easy put animation html pages 
mechanism extend browser natural way implementing example editors spreadsheet groupware applications distributed objects 
important consequence having java enabled browsers hotjava java application spread network 
simplest way take advantage feature think java application just document 
watching java application means run host possibly integrated browser 
java way obtain build piece java code run browser applet 
applet byte code result compilation class extends class applet contained java applet package 
means applet inherits standard behaviour applet comply set conventions run browser 
follows ping pong application include code seen 
time applets need bridge server maintain message buffer th connectionless protocol 
applet ping pong uses programs plus bridge server including concurrent threads redirect messages bridge import java io import java net public class bridge implements runnable static final int port socket null null forward incoming data outgoing connection public void run socket null string name thread getname am 
name equals listen listen try inputstream outputstream os true os write read catch ioexception thread error condition thread public static void main string args try ss new port ss accept new thread new bridge start ss accept new thread new bridge start catch ioexception system println java suffers lack mechanisms managing coordination objects 
way handle simple client server connection explicitly sockets decode byte stream requests replies 
things get worse need objects cooperate complex fashion 
www infrastructure developing implementing business applications distributed collaborative business environments need ability manage coordination remote java applications 
toolkit programming distributed java applications solve coordination problem java known approach adding java minimal set coordination primitives particular add operations access linda multiple tuple spaces cg cia 
designed jada aiming simplicity performance 
jada linda minimalist coordination language 
differently linda implementations usually include preprocessor necessary linda slightly changes constrains host language syntax jada set classes access tuple space containing objects tuples allowing users keep standard java development tools 
main objects jada tuple tuplespace 
jada programs tupleclient tupleserver classes 
tuples jada tuple set objects referred items represented tuple tuple class 
example jada tuple tuple tuple new tuple new integer test tuple includes items say cardinality item integer object second string object 
value object value ond object test 
item tuple value said actual 
item value said formal 
build tuple formal field type string write tuple formal tuple new tuple new string getclass class type argument constructor tuple represent formal field 
tuples contain formal field referred formal tuples 
tuple spaces know create tuples interact tuple space 
tuple space collection tuples 
build tuple space jada write tuple space new tuplespace share object multiple threads 
want thread put tuple tuple space write tuple space new tuple new integer test way new tuple actual field put tuple space 
tuple read thread read methods difference read removes returned tuple tuple space tuple read tuple tuple space read new tuple new integer test tuple argument read method equal tuple put tuple space 
access tuple space performed read operations associative operations return tuple space tuple matches tuple argument 
matching principle quite simple tuples matching cardinality item matches corresponding item items matching type actual value 
tuple tuple new tuple new integer test matches tuple tuple new tuple new integer new string getclass note exchange tuple threads perform pair read operations time jada support rendez vous communication 
fact suppose threads ta tb want exchange message ta put message inside tuple space tb read message tuple space 
ta performs operation tb performs read operation wait tb simply continues execution tuple stored tuple space 
tb performs read operation able read 
tb performs read operation ta performs operation tb blocked tuple satisfy read request available ta performs operation 
read methods blocking 
want thread blocked matching tuple read operations available nb read nb methods access tuple space way read matching tuple available simply return null 
tupleserver tupleclient design jada cope java way access network 
simple client server architecture manage tuple spaces 
allow remote access tuple space tupleserver tupleclient classes provided 
fact tuple space shared remote resource accessed tuple space server 
tuple space server addressed ip address host runs port number usual socket connections 
way run tuple space servers network applications independently operate distributed tuple spaces 
tupleserver multithreaded server class translates requests received tupleclient class calls methods tuplespace class 
fact tupleserver tupleclient tuplespace 
tupleserver tupleclient communicate sockets 
tupleserver uses tuplespace perform requested operations 
tupleclient class extends tuplespace changing internals keeping interface behavior apart new constructor 
tupleclient object just tuplespace provides access remote tuple space run host network 
tupleclient interface remote tupleserver object holds real tuple space requests perform read operations eventually return result 
tupleclient needs know net tupleserver located port listens requests set constructors provided specify tupleserver host port 
details implementation jada implemented set classes allow java threads java applications access associatively shared tuple space small set linda operations 
tuple space local browser tuple tuplespace shared threads remote client tupleclient shared applications order build distributed application 
case tuple space server server tupleserver running host network 
fig graphically outline application access remote tuple space 
tuple basic object implementing jada tuple generic object container contain ordered items 
provided lots different constructors build tuple built setting fields 
constructor create tuple contents tuple tuple new tuple foo new integer incrementally appropriate methods tuple tuple new tuple tuple foo tuple new integer useful methods access tuples fields 
tuple basic object access tuple space need ffl method test tuples match associative read calls 
tupleclient tupleclient tupleclient tuplespace tuplespace tupleclient tupleclient tupleclient application application application application tupleserver tupleserver client server relationships jada ffl method dump tuple contents byte stream order able send tuple network save state file 
ffl method restore tuple set bytes read byte stream 
methods required tuples items need compare tuples fields know match need know dump restore order dump restore tuple 
reason methods part interface implemented object want tuple item exceptions integer string managed special cases 
tuple class implements interface tuple object field tuple jada point view tuples class objects 
technical reasons decided tuples directly objects interface need associative access decided tuples just simplicity integer string simplified linda users feel home 
tuplespace tuplespace object jada tuple container offers set thread safe access methods 
thread safe means accessing tuplespace different threads time safe monitors handle requests avoiding problems critical regions 
methods usual read multiple non blocking variants 
methods just wrappers methods real engines class 
synchronization repository management code part methods 
allows easily redefine tuplespace behaviour extending class just tupleclient example method tuplespace takes care putting specified tuple tuple space reply pending read requests 
tupleclient version sends tuples tuple server asks manage storing replying 
applies tupleclient version 
need just change methods deal remote tuple manager tupleserver object socket connections talk 
tupleserver stated tupleserver object tupleclient objects access possibly remote tuple space 
tupleserver tuplespace object manage tuple space 
time tupleclient perform request tupleserver runs thread perform requested operation 
architectural point view think tupleserver tupleclient stub proxy system 
analyze behavior jada program distinguish main cases ffl tuplespace shared concurrent threads belonging application situation symbolically depicted 
shape picture represents thread running application 
thread thread thread interacting tuple space tuplespace methods 
tuplespace object manages access takes care handling critical regions managing 
note thread may blocked calling method perform blocking read operation 
ffl tuplespace shared concurrent threads belonging different applications 
case tupleserver tupleclient architecture access shared space shown 
thread thread part application thread part different 
tupleclient object access tuple space tuplespace thread thread thread local threads accessing tuple space uses private 
thread performs request calling method tupleclient object request forwarded tupleserver object network connection runs thread handle 
thread run tuple server corresponds remote thread performed request 
see situation automatically replicated inside application runs tupleserver giving evidence implicit scalability jada architecture 
programming jada jada allow threads exchange data quite easy task better 
jada coordinate threads easily solving known coordination problems ffl server client model server read requests form tuples tuple space 
client performs request putting tuple tuple space 
ffl master worker model master put jobs form tuples tuple space reads results tuple space 
workers read jobs tuple space execute task put result tuple space 
ffl producer consumer model decouple producer consumer tuple space temporary repository data exchanged 
ffl mutual exclusion tuple token enter critical section thread need get token enter section 
exiting section thread releases token token tuple put back tuple space ffl message passing synchronous asynchronous sender puts message tuple space synchronous case waits ack tuple 
receiver reads message tuple space synchronous case puts ack tuple tuple space 
tuplespace tupleserver tupleclient tupleclient thread thread thread thread proxy thread proxy thread proxy remote threads accessing tuple space concurrency problems easily solved shared cg 
jada write real application 
application ping pong program 
simple quite useful explain jada coordinate applications threads 
ping pong jada java linda 
code applets loaded host ts host 
version program available benchmark included jada package 
program assumes tupleserver available host ts host 
ping pong symmetric 
ping import jada tuple import java client public class ping static final string ts host foo bar public void run tuple client interacts remote tuple server tupleclient ts new tupleclient ts host ping pong true ts new tuple ping tuple tuple ts new tuple pong public static void main string args ping ping new ping ping run pong import jada tuple import java client public class pong static final string ts host foo bar public void run tuple client interacts remote tuple server tupleclient ts new tupleclient ts host true ts new tuple pong tuple tuple ts new tuple ping public static void main string args pong pong new pong pong run applications built number coordination applications jada 
application wrote applet version testing expressiveness jada developing distributed cooperative applications internet 
ffl pingpong simple application test jada processes alternatively get put tuple incrementing counter 
tuple space coordination local remote 
ffl simple irc application 
users join channel prefer share messages 
ffl multiuser card game applet form 
users play remotely internet need ad hoc graphical client simply getting document java enabled browser interface depicted fig 
jada coordination kernel implementing complex internet languages architectures 
particular developing top jada shade java coordination language ccr pagespace coordination architecture www middleware building cooperative applications 
groupware electronic commerce internet 
related jada developed context pagespace project 
main idea basis pagespace exploit coordination technology enhance www middleware 
projects pursue similar goal different approaches 
fact explicitly refers linda approach quite different described 
integration www browsers helper applications extremely possible activate external application deliver data displayed research team designed flexible modular www browser architecture linda programming language 
independent tools implementing different part www browser activated needs sharing screen space responses user interaction 
allows highly modular architecture new services tools added modifications homogeneous framework 
order allow cooperation helper modules shared tuple space 
tuples allow upgrade simple activate data paradigm browsers helper applications complete coordination protocol 
instance coordinate distributed digital orchestra browsers simulating musical instruments possibly running different machines extract shared tuple space tune played note note 
instrument aware instruments new ones added fly middle perfomance 
features define client side coordination toolkit easily implementable jada 
wu linda toolkit sch simple interface www browser www server implementing tuple space service 
access shared tuple space provided clients users fill html form appropriate linda command interact tuple space 
main application show disc load viewer allows glance check interface current disk usage computers cluster workstations 
workstation hosts wu linda client posts tuples shared tuple space describing current load disks controls 
tuples collected rendered user friendly way html browser querying application 
features wu linda define server side coordination toolkit easily implementable jada 
jada applets similar distributed active objects bn 
program written obliq executed browser 
high level primitives communicate running possibly remote browsers 
bauhaus web designed yale homeland linda similar spirit wu linda toolkit 
main idea consists standard browser access bauhaus server 
bauhaus coordination language nested multiple tuple spaces multisets case controlling hierachical structure pages web site associating agents activities pages 
instance attribute page list users acting page displayed graphic icon interact ad hoc cooperation services 
application coordination technology www language richer linda 
investigating similar extensions multiple tuple spaces coordination language called shade kernel currently written jada ccr 
jada provides ffl coordination inside object oriented syntax extension java just set classes 
data type jada java object 
ffl dynamic tuple creation object tuple created new different constructors provided order build tuple string array object simply set arguments seen 
ffl multithreading support jada multithreading aware different threads access tuple space blocking request managed thread level 
ffl open systems support time threads applications perform operation tuple space 
ffl multiple tuple associative access provided modified flavors read requests order allow multiple matching tuples 
jada kernel building complex internet languages 

robert tolksdorf discussions suggestions 
support eu open ltr project pagespace 
partially supported italian cnr progetto logica 
ag arnold gosling 
java programming language 
addison wesley 
bn brown najork 
distributed active objects 
computer networks isdn systems 
ccr castellani ciancarini rossi 
shape shade coordination system 
technical report ublcs dipartimento di scienze dell informazione universita di bologna italy march 
cg carriero gelernter 
write parallel programs course 
mit press cambridge ma 
cg carriero gelernter 
coordination languages significance 
communications acm february 
cia ciancarini 
distributed programming logic tuple spaces 
new generation computing may 
ciancarini tolksdorf 
pagespace architecture coordinate distributed applications web 
computer networks isdn systems 
nicol 
orchestration service www browsers accessories 
proc 
nd int 
world wide web conference chicago il december 
gos gosling 
java intermediate bytecodes 
proc 
acm sigplan workshop intermediate representations volume acm sigplan notices pages san francisco ca january 

integrated approach collaborative computing 
phd thesis dept computer science yale university new haven ct may 
sch 
www meets linda 
proc 
th int 
world wide web conference pages boston ma december 
jada api describe jada api 
available www cs unibo rossi jada 
package jada tuple interfaces classes tuple tuplespace interface jada tuple public interface extends object base class 
want class tuple item implement interface class 
methods really needed plan tupleclient tuple space 
class implements default constructor class implements public 
method index ffl byte builds item byte array representation 
ffl object clone item source 
ffl returns byte array representation item possible item method returns null 
ffl object returns true item matches 
methods ffl public byte returns byte array representation item possible item method returns null 
ffl public boolean byte builds item byte array representation 
ffl public void object source clone item source 
ffl public boolean object match returns true item matches 
interface jada tuple public interface extends object interface contains set shared constants jada package 
class wants access constants implement interface 
ffl default port default port 
public final static int default port ffl opcode server requests opcode 
public final static int opcode ffl read opcode public final static int read opcode ffl opcode public final static int opcode ffl print opcode public final static int print opcode ffl reset opcode public final static int reset opcode ffl opcode public final static int opcode ffl multi flag public final static int multi flag ffl nb flag public final static int nb flag class jada tuple tuple java lang object jada tuple tuple public class tuple extends object implements base tuple class 
tuple ordered set items 
item jada tuple integer string class implements say actual class say formal 
jada tuple items constructors provided order simplify creation new tuple 
matching rules tuples tuple space operations associative way matching operation 
tuples matching number items th field tuple matches th field second items matching ffl integers represent value ffl string contents ffl implement method returns true ffl class represent class ffl class instance class tuple tuple ta new tuple new integer match tuple tuple tb new tuple new integer new string getclass note tuple implements tuple item tuple 
tuple converted string tostring 
tuple string format list items brackets separated commas 
items actual formal 
item formal starts followed name class represents short formats integer string respectively 
actual tostring method represent value 
note follow rules writing method class notably may generate class related exception caught printed system err stream 
constructor index ffl tuple constructor builds empty tuple 
ffl tuple tuple constructor builds tuple copying 
ffl tuple int constructor builds tuple calling init int 
ffl tuple byte constructor builds tuple byte array calling 
ffl tuple object constructor builds tuple item item 
set constructors differ items number 
tuple object object tuple object object object tuple object object object object tuple object object object object object tuple object object object object object object tuple object object object object object object object tuple object object object object object object object object tuple object object object object object object object object object tuple object object object object object object object object object object method index ffl short form 
ffl returns class integer object 
ffl short form 
ffl returns class string object 
ffl byte interface build tuple tuple array 
ffl byte int builds tuple tuple array starting position ffl object interface clone tuple source ffl interface dumps tuple array bytes ffl formal returns class tuple useful want tuple formal field tuple 
ffl returns index tuple result multiple read operation 
ffl int returns object position 
ffl returns size bytes object method note method calls calculate size called may time consuming 
ffl string allocates basic data sets tuple reading regular string representation 
ffl object checks tuple match current 
ffl read inputstream read tuple inputstream 
ffl int object sets item tuple 
watch just string integer valid object types 
ffl tostring overrides object tostring 
ffl write outputstream write tuple outputstream 
constructors ffl tuple public tuple constructor builds empty tuple 
ffl tuple public tuple tuple source constructor builds tuple copying 
ffl tuple public tuple int items constructor builds tuple calling init int 
resulting tuple contains formal integer values 
see init 
ffl tuple public tuple byte bytes constructor builds tuple byte array calling 
see 
ffl tuple public tuple object item constructor builds tuple item item 
set constructors differ items number 
ffl tuple public tuple object item object item ffl tuple public tuple object item object item object item ffl tuple public tuple object item object item object item object item ffl tuple public tuple object item object item object item object item object item ffl tuple public tuple object item object item object item object item object item object item ffl tuple public tuple object item object item object item object item object item object item object item ffl tuple public tuple object item object item object item object item object item object item object item object item ffl tuple public tuple object item object item object item object item object item object item object item object item object item ffl tuple public tuple object item object item object item object item object item object item object item object item object item object item methods ffl public int returns size bytes object method note method calls calculate size called may time consuming 
see 
ffl public int returns index tuple result multiple multiple read operation 
ffl public static class returns class integer object 
useful integer formal tuple item 
see ffl public static class returns class string object 
useful string formal tuple item 
see ffl public static class short form 
see 
ffl public static class short form 
see 
ffl formal public static class formal returns class tuple useful want tuple formal field tuple 
ffl protected void string allocates basic data sets tuple reading regular string representation 
ffl public void int index object value sets item tuple 
watch just string integer valid object types 
see 
ffl public object int index returns object position 
watch copy object 
see 
ffl public boolean object object checks tuple matches current 
ffl tostring public string tostring overrides object tostring 
uses representation uses init tuple 
overrides tostring class object 
see 
ffl write public void write outputstream os throws ioexception write tuple outputstream 
ffl read public boolean read inputstream throws ioexception read tuple inputstream 
return false empty tuple read 
ffl public void object object source interface clone tuple source 
ffl public byte interface dumps tuple array bytes 
ffl public boolean byte interface build tuple tuple array 
ffl public boolean byte int builds tuple tuple array starting position 
class jada tuple tuplespace java lang object jada tuple tuplespace public class tuplespace extends object tuple space class 
usual linda operations methods class 
constructor index ffl tuplespace constructor 
method index ffl tuple performs operation 
ffl tuple int performs operation tuple array 
ffl tuple int boolean boolean performs read operations blocking non blocking tuple array 
ffl nb tuple performs non blocking inp operation 
ffl nb tuple int performs non blocking inp operation tuple array 
ffl tuple performs operation 
ffl tuple int performs operation tuple array 
ffl print prints tuple space contents system 
ffl read tuple performs read operation 
ffl read tuple int performs read operation tuple array 
ffl read nb tuple performs non blocking operation 
ffl read nb tuple int performs non blocking operation tuple array 
ffl reset resets tuple space deleting contents 
constructors ffl tuplespace public tuplespace constructor 
builds empty tuple space 
methods ffl public synchronized void tuple item performs tt operation puts item item tuple space 
actual tuples check performed performance reasons 
ffl public synchronized void tuple tuples int tuples performs operation tuple array 
puts tuples array tuples tuple space 
ffl read nb public tuple read nb tuple match performs non blocking operation 
returns tuple matches match tuple tuple space 
tuple exist returns null 
ffl read nb public tuple read nb tuple match int tuples performs non blocking operation tuple array 
returns tuple matches item match tuple array tuple space 
tuple exist returns null 
ffl read public tuple read tuple match performs read operation returns tuple matches match tuple 
method return tuple available ffl read public tuple read tuple match int tuples performs read operation tuple array 
returns tuple matches item match tuple array 
method return tuple available 
ffl nb public tuple nb tuple match performs non blocking inp operation 
returns tuple matches match tuple tuple space 
tuple exists returns null 
ffl nb public tuple nb tuple match int tuples performs non blocking inp operation tuple array 
returns tuple matches item match tuple array tuple space 
tuple exist returns null 
ffl public tuple tuple match performs operation 
returns tuple matches match tuple 
method return tuple available 
ffl public tuple tuple match int tuples performs operation tuple array 
returns tuple matches items match tuple 
method return tuple available 
ffl public synchronized tuple tuple match int tuples boolean remove boolean blocking performs read operations blocking non blocking tuple array 
blocking non blocking read methods class just wrappers method 
ffl reset public synchronized void reset resets tuple space deleting contents ffl print public synchronized void print prints tuple space contents system 
class jada tuple java lang object jada tuple tuple jada tuple public class extends tuple utility class allows create tuple directly string representation 
watch object tuple item aware tuple 
tuples tuple new tuple new tuple new tuple new tuple getclass match 
constructor index ffl default constructor 
ffl string constructor builds tuple string representation 
constructors ffl public default constructor 
builds tuple 
ffl public string constructor builds tuple string representation 
watch performed string correctness 
class jada client tupleclient java lang object jada tuple tuplespace jada client tupleclient public class tupleclient extends tuplespace implements interface remote tuple space server 
usual linda operations performed remote tuple space 
errors exceptions printed system exit called 
constructor index ffl tupleclient string int constructor builds tuple client connect server hostname port ffl tupleclient constructor builds tuple client connect server host localhost 
ffl tupleclient string constructor builds tuple client connect server hostname method index ffl sends request remote tuple server 
ffl tuple int boolean boolean sends operation request remote tuple server 
overrides tuplespace 
ffl tuple sends request remote tuple server 
ffl print print request 
ffl reset sends reset request remote tuple server 
constructors ffl tupleclient public tupleclient string host int port constructor builds tuple client connect server hostname port ffl tupleclient public tupleclient constructor builds tuple client connect server host localhost 
ffl tupleclient public tupleclient string host constructor builds tuple client connect server hostname methods ffl public tuple tuple match int tuples boolean remove boolean blocking sends operation request remote tuple server 
overrides class tuplespace 
ffl public void tuple item sends request remote tuple server 
overrides class tuplespace 
ffl reset public void reset sends reset request remote tuple server 
overrides reset class tuplespace 
ffl print public void print print request 
debug request 
causes remote tuple server print contents tuple space standard output 
overrides print class tuplespace 
ffl public void sends request remote tuple server 
watch shuts server 
class jada server tupleserver java lang object jada server tupleserver public class tupleserver extends object implements runnable remote tuple server accepts socket connections runs new threads able handle requests 
constructor index ffl tupleserver constructor builds new tuple server listening default port 
ffl tupleserver int constructor builds new tuple server listening port 
method index ffl main string tupleserver entry point standalone java program 
ffl run main loop accepts socket connections runs new threads 
ffl boolean sets verbose mode 
ffl method returns server running 
constructors ffl tupleserver public tupleserver constructor builds new tuple server listening default port 
ffl tupleserver public tupleserver int new port constructor builds new tuple server listening port 
methods ffl run public void run main loop accepts socket connections runs new threads 
ffl public synchronized void method returns server running 
ffl public void boolean mode sets verbose mode 
requests printed system stream 
ffl main public static void main string args throws ioexception tupleserver entry point standalone java program 
run remote tuple server accepts remote connections runs listen new sockets 
usage java jada server tupleserver port verbose option causes debug output written terminal 
port option specify connection port 
compiling running jada application test installation try compile run programs demo directory 
need set classpath directory directory contains jada installation directory 
compile pingpong java command javac pingpong java compilation succeeds new class files ping class pong class pingpong class 
run method ping class gets tuple form ping integer integer object instance integer class creates new integer object say cnt obtained adding second field got tuple puts tuple pong cnt back tuple space loops steps 
operations performed tuple space tuple space local remote 
pong class specular ping inputs pong integer outputs ping integer 
pingpong class creates new local tuple space runs ping pong concurrent threads passing newly created tuple space shared 
run pingpong class java pingpong see ping pong threads coordinate tuple space 
classes distributed ping pong application 
start just host assume different terminal window java program 
run tuple space server 
java jada server tupleserver switch see tuple server doing 
run ping application java ping pong application java pong switch really distributed environment say hosts alpha beta gamma 
run tuple server alpha host 
run ping application beta host tell application remote server java ping alpha applies pong gamma host java pong alpha running distributed ping pong application network including alpha beta gamma 
run distributed application internet www java enabled browser 
fact run ping application applet form 
class java file applet embedded html document ping html provided example 
due java applets security restrictions run tuple space server host applet loaded usually host runs httpd server 
say host name host 
launch server host follows java jada server tupleserver run pong application host including host java pong host favourite java enabled browser netscape navigator load ping applet www domain path jada demos directory ping html see scrolling list reports ping activity applet 
ping pong application course silly example jada coordinate useful programs 

