methodology testing intrusion detection systems nicholas zhang chung mukherjee ronald olsson correspondence author department computer science university california davis davis ca tel fax mail cs ucdavis edu original submission date october revision date september second revision date september intrusion detection systems idss attempt identify unauthorized misuse abuse computer systems 
response growth development idss developed methodology testing idss 
methodology consists techniques field software testing adapted specific purpose testing idss 
identify set general ids performance objectives basis methodology 
details methodology including strategies test case selection specific testing procedures 
include quantitative results testing experiments network security monitor nsm ids developed uc davis 
overview software platform create user simulation scripts testing experiments 
platform consists unix tool expect enhancements developed including mechanisms concurrent scripts record replay feature 
provide background information intrusions idss motivate 
copyright note published accepted ieee publication 
authors transferred copyright ieee 
published version superseded published version 
funded national security agency university research program contract number dod mda 
short summarized version th national computer security conference baltimore md october 
intrusion detection system ids system attempts identify intrusions define unauthorized uses abuses computer systems authorized users external perpetrators 
idss monitor single computer monitor computers connected network 
idss detect intrusions analyzing information user activity sources audit records system tables network traffic summaries 
idss developed institutions 
example idss national security agency multics intrusion detection alerting system midas sri international intrusion detection expert system ides generation intrusion detection expert system nides uc santa barbara state transition analysis tool unix ustat los alamos national laboratory lanl network anomaly detection intrusion reporter nadir uc davis network security monitor nsm distributed intrusion detection system dids :10.1.1.17.9158
organizations depend idss integral components computer security systems techniques evaluating idss important 
ids users need know effective idss decide extent rely idss extent rely security mechanisms 
evaluating ids difficult task 
difficult impossible identify set possible intrusions occur site particular ids employed 
start number intrusion techniques quite large see 
site may access information intrusions detected past locations 
intruders discover previously unknown vulnerabilities computer system new intrusion techniques exploit vulnerabilities 
second difficulty evaluating ids ids affected various conditions computer system 
example ids ordinarily detect particular intrusion ids may fail detect intrusion level computing activity system high 
complicates task thoroughly testing ids 
developed methodology testing idss confronts difficulties 
basis methodology identified set general ids performance objectives ability detect broad range known intrusions 
methodology designed measure effectiveness ids respect objectives 
consists strategies selecting test cases series detailed testing procedures 
develop methodology borrowed techniques field software testing adapted specific purpose testing idss 
unix tool expect software platform creating user simulation scripts testing experiments 
addition enhanced expect features allow simulate sophisticated intrusions feature greatly facilitates script creation 
useful ids developers methods tools sup approaches testing respective idss 
system administrators check weaknesses idss currently employ 
organization plans acquire ids compare relative strengths weaknesses idss choose system best fits computing environment 
background section presents examples intrusions provides motivation intrusion detection discusses specific approaches intrusion detection 
section describes software platform testing experiments consists expect turn tcl enhancements 
section begins discussion testing methodology identifying set important ids performance objectives discussing selection test cases limitations approach 
section describes specific procedures testing experiments detail 
section presents quantitative results testing experiments conducted nsm 
section concludes 
background section information intrusions intrusion detection background 
readers familiar topics may skip section 
intrusions intrusions computer systems occurring increasingly alarming rate 
sites report targets hundreds intrusion attempts month 
numerous different intrusion techniques intruders 
scenarios examples intrusions ffl employee browses boss employee reviews ffl user exploits flaw file server program gain access corrupt user file ffl user exploits flaw system program obtain super user status ffl intruder uses script crack passwords users computer ffl intruder installs snooping program computer inspect network traffic contains user passwords sensitive data ffl intruder modifies router tables network prevent delivery messages particular computer 
reader easily infer consequences intrusions preceding list 
additional consequences include loss alteration data loss money financial records altered intruders denial service legitimate users loss trust computer network system loss public confidence organization victim intrusion 
concurrent intrusions addition variety intrusion techniques complication task detecting intrusions possibility concurrent intrusions intruders terminals windows workstation carry intrusions simultaneously 
observation classify intrusions categories ffl single intruder single terminal intrusions category launched single intruder single terminal device logical equivalent 
terminal device connected directly system attacked connected system remotely modem network connection 
ffl single intruder multiple terminal category consists intrusion scenarios intruder uses multiple windows computer carry intrusions 
intruder window attack different target computer 
alternatively intruder multiple windows establish connections target hoping hide intrusive activity distributing activity windows controls separate session target computer 
ffl multiple intruder multiple terminal category covers scenarios multiple intruders participate intrusions simultaneously 
intrusions category similar category may target computers intruders attempt conceal intrusion attempt distributing suspicious behavior simultaneous sessions 
motivation intrusion detection approach computer security attempt create completely secure system 
unfortunately environments may feasible render computer system categories intruder person issuing commands manually computer issuing commands automatically intrusion script program 
immune intrusions reasons 
system software complex 
major challenge programmers face software design difficulty anticipating conditions may occur program execution understanding precisely implications small deviations conditions 
system software contains flaws may create security problems software upgrades introduce new problems 
second increasing demand network connectivity difficult impossible isolate protect system external penetration 
central component computer systems computer network may secure 
instance number security flaws inherent widely transmission control protocol internet protocol tcp ip suite regardless particular implementation 
prevention investigation post mortem detection computer system security management model 
response difficulties developing secure systems discussed new model system security management emerged 
model pictured 
realistic approach security developing secure systems prevention component just parts security system 
detection component identifies security breaches 
investigation component determines exactly happened data detection component 
component may include gathering data order identify security 
post mortem component analyzes prevent similar intrusions 
past attention computer security researchers focused prevention component 
emergence proven utility intrusion detection concept detection component receive attention 
unfortunately components received sufficient attention 
summary new model divides field computer security non trivial challenging manageable sub problems encourages security researchers practitioners distribute efforts important components computer security 
approaches intrusion detection major approaches idss detect intrusive behavior called anomaly detection misuse detection 
anomaly detection approach premise attack computer system network noticeably different normal system network activity intruder possibly masquerading legitimate user exhibit pattern behavior different normal user 
ids attempts characterize user normal behavior maintaining statistical profiles user activities 
profile includes information user computing behavior normal login time duration login session cpu usage disk usage favorite editor forth 
ids profiles monitor current user activity compare past user activity 
difference user current activity past activity falls outside predefined bounds threshold values item profile activity considered anomalous suspicious 
interested reader referred thorough discussion topic implementation ides anomaly detection component 
misuse detection approach ids watches indications specific techniques computer system abuse 
ids includes collection intrusion signatures encapsulations identifying characteristics specific intrusion techniques 
ids detects intrusions searching tell tale intrusion signatures records user activities 
exist major approaches intrusion detection idss quite diverse designs 
different idss employ different algorithms different criteria identifying intrusive behavior forth 
idss including example idss mentioned section combination detection approaches 
main source information user activity ids set audit records computer system 
relying audit records problematic 
audit records may arrive timely fashion 
idss separate computer perform analysis audit records haystack 
may take significant amount time transfer audit information monitored computer computer performs analysis 
second audit system may vulnerable 
intruders known able turn audit system modify audit records hide intrusions 
audit records may contain information detect certain intrusions 
example called attack intruder tries guess passwords accounts computers network 
avoid suspicion intruder attempts guesses individual computer 
intrusion detected analysis audit records single computer network 
term network intrusion refer intrusion involves computer component network 
example illustrates effective ids collect analyze information network 
example nsm monitors network traffic local area network lan nsm detect security related network events transfer password file network 
dids collects analyzes information group monitored computers network 
dids capable recognizing network intrusions aforementioned attack 
number scenarios aggregation information network computers necessary detect intrusions described 
user interface expert system communications manager host dids director monitored host monitored host local area network ethernet lan monitor communications agent host monitor communications host monitor communications agent agent distributed intrusion detection system dids 
conclude section describe components elaborate ids way example 
case dids see monitored computer runs host monitor program filters analyzes audit records associated activity particular computer 
communications agent program monitored computer sends information central computer designated dids director 
programs run dids director include expert system analyze aggregated information monitored sources communications manager control information flow entire system user friendly interface sso system security officer 
additional computer runs lan monitor program nsm monitors network traffic lan 
monitored computers lan monitor communicates dids director communications agent program 
architecture intrusions individual computers lan detected host monitor programs network intrusions attack detected dids director information lan monitor monitored computers 
software platform testing methodology simulating computer users intruders normal users ids running 
employ unix package expect simulate users testing experiments 
expect package unix package called tcl tool command language 
expect language write scripts similar unix shell scripts include intrusive commands 
running scripts expect provides script interpreter issues script commands computer system just real user typed commands 
tcl package provides interpreter simple programming language includes variables procedures control constructs statements arithmetic expressions lists strings features 
versions tcl provide string matching commands matching strings regular expressions 
syntax tcl shares similarities syntaxes unix shells lisp 
tcl implemented library package 
expect control process script password login sunos unix telnet login fri aug telnet process stdin stdout stdout stdin output input human user process simulating simulation human user activity 
expect package provides programming language interpreter 
core expect interpreter tcl interpreter expect extends tcl command set include commands controlling interactive programs 
command spawn creates interactive process telnet 
command expect waits receive specified string pattern login process 
command send sends string process 
script containing expect send sequences general programming constructs variables procedures conditionals loops control interactive session simulate human computer user 
illustrates operation expect 
simple expect script controls brief rlogin session spawn rlogin process 
spawn rlogin username expect password prompt send password 
expect password send expect shell prompt send commands 
shell prompt specified regular expression 
expect re send expect re send ls expect re send logout expect package provides capability create script simulate computer user 
augmented expect additional commands provide capability create concurrent scripts complete mechanisms synchronization communication different scripts 
extensions expect provide users ability simulate concurrent intrusions described section 
course testing ids may necessary repeat particular test 
example test repeated determine ids failed test 
repeating execution sequential test script accomplished simply running script input 
tests involve concurrent script sets may difficult repeat exactly 
individual script executed fixed order order events scripts may non deterministic 
testers employ synchronization techniques events guaranteed occur exactly order original test 
event user foo host host foo logs foo host foo issues commands foo logs user foo host host foo logs foo host foo issues commands foo logs command sequence command sequence command sequences interleaving 
illustration non deterministic execution consider execution command sequences shown figures 
command sequences executed concurrently term testers refer group people testing ids 
event user foo host host user foo host host foo logs foo host foo logs foo host foo issues commands foo issues commands foo logs foo logs command sequence command sequence command sequences interleaving 
different interleavings execution commands different sequences result different execution sequences 
user foo host initiates telnet connection host command sequence user foo logs host command sequence 
hand user foo logs host host host time 
legitimate user logged host different hosts time execution sequence suspicious sequence 
ids react differently scenarios commands scenarios 
accommodate reproducible testing replay deterministic execution concurrent script sets required 
developed synchronization mechanism meet requirement 
mechanism provides means programmer establish fixed order execution key events events associated different scripts 
furthermore mechanism flexible programmer easily modify order events 
flexibility useful testing experiments 
testers run concurrent script set times time different synchronization specification observe changes synchronization affected ids reaction commands scripts ids ability detect intrusions 
additional feature incorporated software platform record capability 
user type sequence commands manually record feature record sequence 
recording replayed just scripts 
possible set synchronization points recorded session replayed synchronization recorded sessions 
limitation replay approach directly support programmability 
instance currently possible insert conditional statement recording time recording 
limitation easily overcome combining programmed script recording 
summary record replay feature highly facilitates creation simulation scripts testing experiments 
particular feature useful system managers wish create site specific scripts simulate site specific intrusion techniques described section 
testing issues discussion testing methodology examining key testing issues 
performance objectives ids step ids testing methodology identify set performance objectives ids 
identified objectives similar key design goals developing ids cited ffl broad detection range intrusion broad range known intrusions ids able distinguish intrusion normal behavior ffl economy resource usage ids function system resources main memory cpu time disk space ffl resilience stress ids function correctly stressful conditions system high level computing activity 
ids meet objective intrusions escape detection 
second objective required ids consumes resources ids may impossible environments impractical 
third objective necessary reasons stressful conditions may occur typical computing environment intruder attempt thwart ids creating stressful conditions computing environment engaging intrusive activity 
example intruder try interfere ids creating heavy load ids host computer 
claim necessary sufficient ids meet objectives order effective wide range computing environments 
testing procedures designed measure effectiveness ids respect objectives 
different sites objectives different relative values 
broad detection range may necessary ids monitors site protected attacks security mechanisms 
example site firewall block incoming network traffic strict access control authentication techniques prevent abuse insiders 
economy resource usage may required site security high priority computing resources exceed user needs 
resilience stress may important controls computing environment disk quotas limits number processes user prevent users resources 
important objectives particular site identified system administrators ids evaluated ids tests developed accordingly 
test case selection approach testing idss test case simulated user session 
tests require simulated normal sessions test cases simulated intrusions 
key problem select intrusions simulate 
testers collect intrusion data possible 
unix systems report intrusion data obtained various sources cert advisories periodicals phrack usenet analyzing vulnerabilities detected security tools cops tiger 
assuming number intrusions large simulate testers partition set intrusions classes create representative subset intrusions selecting intrusions class 
technique known software testing field equivalence partitioning 
ideally classes selected class ids detects intrusion ids detect intrusions 
test case class selected represent class final set test cases 
general difficult identify perfect equivalence classes 
consider possible strategies classifying intrusions 
intrusions classified intrusion technique 
comprehensive example type classification 
second strategy classify intrusions taxonomy system vulnerabilities intrusions exploit see 
limitation strategies purpose selecting test cases intrusions share classification ids detect intrusion 
words classification schemes produce perfect equivalence classes 
schemes ensure wide range test cases selected 
third strategy classify intrusions signatures defined section encapsulations identifying characteristics specific intrusion techniques 
classification scheme signatures 
limitation classification strategy select test cases number classes small 
technique may possibly extended yield finer grained classification 
technique extended information internal representation signatures particular ids 
limitations classification strategies respect selecting test cases set test cases constructed strategies 
strategy test cases selected class 
natural extension develop large set test cases various types computer systems testing wide range idss 
final step selecting test cases testers supplement set test cases simulated intrusions particular interest site ids employed 
example environments strict policies governing computer activities considered normal sites considered intrusions 
testers create test cases activities 
second example testers may aware intrusion techniques known 
simulations techniques included set test cases 
limitations approach testing idss limitations 
software platform simulate users completely simulate behavior user working gui program window system 
necessary simulate intruder complete behavior 
intruder activities generate system activity subset related directly attack 
simulation tool capable causing subset system activity occur 
example simulation tool may able simulate user moves mouse pointer presses mouse button select certain option gui menu issue command computer system gui 
cases simulation tool re create key intrusive activity testing methodology valid 
intrusion simulated different tool 
worst case testers simulate intrusion manually 
second limitation methodology designed test systems primarily perform misuse detection 
testing procedures adapted testing idss perform anomaly detection 
test results test results developers users potential customers ids ids effective site secure 
developer results find correct weaknesses ids 
example tests show ids unable detect particular attack developer enhance language describing attack signatures ids recognize attack 
tests indicate ids consuming large amount resources disk space developer create efficient implementation uses resources 
developer advertise weaknesses revealed tests users ids protect sites supplementing ids security tools 
ids user system administrator may employ test results identify configuration problems may occur ids configuration options configuration steps complex 
user detects problems ids user seek additional tools protect computer system 
potential ids customer test results compare idss select perform best customer computing environment 
testing methodology developed set detailed procedures testing ids 
procedures designed testing ids monitors network computers procedures directly applied ids monitors single computer 
best environment tests isolated local area network tests require direct control amount computing activity environment 
installation configuration ids performed carefully 
testers consult ids manuals determine set configuration files select appropriate values configuration parameter testing procedures may eventually reveal weaknesses ids configuration case ids reconfigured tested 
procedures variations basic testing procedure ffl create select set test scripts ffl establish desired conditions level background computer activity computing environment ffl start ids ffl run test scripts ffl analyze ids output 
divided test procedures categories correspond directly performance objectives described earlier section 
test procedures adaptations higher order software testing methods described myers 
intrusion identification tests intrusion identification tests measure ability ids distinguish known intrusions normal behavior 
tests basic detection test conducted follows ffl create set intrusion scripts ffl possible eliminate unrelated computing activity test environment ffl start ids ffl run intrusion scripts 
example configure nsm user set files indicate ip addresses monitored computers names network services monitored 
addition user specify file list strings nsm pattern matching monitored network traffic 
testers analyze ids output 
specific analysis method depends type information available output particular ids 
consider examples 
example ids output classifies monitored session suspicious normal 
conducting test testers simply calculate percentage intrusion scripts identified suspicious 
second example ids output consists numerical warning value session higher warning value indicates suspicious session 
testers compare ids output test large sample ids output associated monitoring normal users computing environment 
testers standard statistical techniques compare warning values associated intrusion scripts warning values associated normal users 
ideally testers find statistically significant difference groups values 
sample ids output available normal users output generated running normal user simulation scripts ids active 
basic detection test indicates ids detects intrusions 
second component ability ids distinguish intrusions normal behavior 
ideally ids rarely generate false alarm flagging normal behavior intrusive 
second intrusion identification test called normal user test measures ids meets objective 
test conducted manner basic detection test normal user scripts intruder scripts 
ids output associated scripts examined determine normal behavior identified suspicious 
measurement estimate time wasted investigating false alarms ids regularly 
returning examples ids output described earlier section note normal user test needed example 
analysis second example addition indicating ids detects intrusions indicate ids generates false alarms 
resource usage tests resource usage tests measure system resources ids 
results tests example decide practical run particular ids particular computing environment 
point developed resource usage test disk space test measures disk space requirements ids 
script simulates user produces computer activity constant rate required test 
example script issue sequence commands repeatedly 
procedure disk space test follows ffl eliminate unrelated activity test environment ffl start ids ffl run test script measured period time hour ffl calculate total disk space ids record session associated script 
test repeated times range different time intervals 
group tests testers determine relationship disk space usage monitoring time 
example case nsm disk space usage increases direct proportion monitoring time 
tests repeated different numbers simulated users running copies test script simultaneously 
testers determine relationship disk space usage number users monitored 
testers analysis test results predict ids storage space requirements ids monitoring real users real computing environment 
testers compare different idss predictions 
stress tests stress tests check ids affected stressful conditions computing environment 
example intrusion ids ordinarily detect go undetected conditions 
developed testing procedures different forms stress 
stress test noise define noise computer activity directly part intrusion 
intruder attempt disguise intrusion employing noise 
example intruder unix computer intrusive commands normal programming commands model 
probability ls check file 
edit file 
compile 
probability ls check file 
probability go back step 
execute program unix ls command lists contents file system directory 

probability go back step 
programming behavior disguise ls edit commands intruder may examine target files 
depending algorithm ids ids may detect intrusive behavior behavior appears normal 
step noise test create suitable test scripts 
approach supplement copy intruder script sequence normal commands pair original commands 
test conducted basic detection test 
ids output script compared corresponding ids output basic detection test 
ideally comparison show ids detects intrusions test 
hand ids detects particular intrusion basic detection test detect intrusion noise test indicator weakness ids 
testers conduct tests determine cause problem 
stress test background noise define background noise noise caused legitimate user activity 
example intrusion may occur working hours legitimate users logged computer system 
prepare background noise test set noise scripts generate continuous normal activity created 
scripts normal user test adapted test 
testers start running noise scripts 
test proceeds just basic detection test attack script run time 
ids output script compared corresponding ids output basic detection test differences may indicate vulnerability ids 
testers repeat procedure times time different amount noise 
different numbers copies noise script script set run time create different levels noise 
possible maximal noise level tests 
example limit number sessions ids monitor time 
case ids forced monitor noise script sessions possible 
stress test high volume sessions volume test checks ids affected high volume sessions 
definition high volume depends ids 
example ids monitors command user sessions high volume session session large number commands issued 
volume script simulates high volume session created test 
purpose test check ids monitors high volume session correctly check ids correctly monitor sessions time 
test detect example case ids runs main memory physically unable monitor user sessions 
volume script started 
intrusion script run time 
script stopped running ids output associated volume script analyzed carefully 
ids output associated intruder script compared ids output basic detection test 
differences may indicate ids affected volume script 
test repeated different numbers volume scripts running concurrently time 
background noise tests maximal level volume tests ids forced monitor volume script sessions possible 
stress test intensity intensity test checks ids affected sessions lot activity generated quickly ids information source logs lot activity short time 
stress script simulates session created 
script simulate consecutive user sessions simulated intruder logs carries intrusive activity logs 
script constructed combining scripts basic detection test 
expect includes mechanism allows user specify quickly consecutive script commands issued 
mechanism stress script commands issued high rate 
script run 
modified version script created generates commands slower rate 
slower script run ids output associated scripts compared 
differences may indicate weakness ids 
example due high rate activity caused stress script ids intrusive activity 
possible run stress scripts concurrently 
stress test repeated times time different number stress scripts running 
important ids may able cope high intensity session errors forced simultaneously monitor high intensity sessions 
case ids output associated stress scripts compared ids output associated slower test script 
stress test load load stress test investigates effect load ids host cpu test conducted way basic detection test high load established ids host test 
high load created running additional programs ids host ids program share cpu time programs 
unix system effect enhanced unix nice command lower scheduling priority ids program programs running host 
tends decrease percentage cpu time allocated ids program operating system ids host 
output test compared output basic detection test 
differences may evidence ids missing intrusive activity running high percentage time cpu 
test repeated times time different load ids host 
experimental results conducted testing experiments nsm 
nsm monitors packets travel lan nsm host connected 
nsm associate packet corresponding computer computer connection 
assigns numerical warning values connections contents packets likelihood connection occurring profile connections 
warning values range higher warning value indicates suspicious connection 
ran nsm sun sparcstation workstation connected computer science cs lan segment uc davis ucd 
basic detection test test different expect scripts designed simulate specific intrusive command sequence 
specifically scripts simulate behaviors ffl browsing directory ls command list files editor view files ffl password cracking ffl password guessing dictionary file testing experiments measure load unix uptime command reports average number jobs cpu run queue 
term nsm host refer computer nsm programs running 
ffl door knob password guessing common passwords ffl attempting modify system files passwd ffl excessive network mobility moving computer computer telnet connections ffl exploiting vulnerability system program obtain super user status 
script establishes telnet connection computer sends sequence intrusive commands remote computer closes connection 
nsm monitored execution scripts assigned warning value connection 
comparison set nsm monitor regular traffic busy computer ucd cs lan segment hours 
traffic caused intrusive behavior expect caused legitimate activities legitimate users 
ideally course warning values connections associated known intrusive behavior high warning values connections associated normal benign behavior low 
assuming connections busy computer normal nsm succeeded case assigning relatively low warning value average connections 
nsm assigned low warning values connections associated intrusive scripts 
determined caused configuration nsm 
idss nsm tuned sensitive particular intrusive sequences commands 
experience illustrates testing procedures uncover weaknesses ids ids configuration 
stress tests hypothesized stress form high load nsm host affect nsm ability monitor network connections 
performed load stress test nsm procedure described section 
configured nsm monitor tcp transmission control protocol packets associated telnet connections specific computer computer lan 
create various levels load nsm host load script simply creates telnet connection nsm host issues continuous sequence unix shell commands 
measured load unix uptime command reports average number jobs cpu run queue 
created higher levels stress successive tests running copies load script simultaneously 
addition added second form stress nsm 
described section unix nice command lower scheduling priority nsm program operating system tend allocate nsm program lower percentage cpu time normally 
scheduling priority nsm program test 
test generated desired load nsm host ran intrusion script computer script establish telnet connection computer computer lan issue sequence intrusive commands remote computer close connection 
intrusion script combination intrusion simulation scripts described section 
test nsm produced report describing connection established intrusion script 
ideally report identical test script run test 
connection reports affected increased loads nsm host 
apparently lower scheduling priority high loads nsm host caused nsm program network packets 
nsm connection reports include number tcp data bytes missed connection 
nsm calculate number monitoring sequence numbers tcp headers 
indicated percentage data bytes missed nsm tended increase load nsm host increased 
nsm host cpu load ave number jobs run queue bytes missed nsm vs nsm host cpu load 
possible explanation missed bytes nsm program waiting run due scheduling decisions operating system transmission tcp data bytes 
monitoring operation involves components network hardware software actual explanation missed bytes may complex 
test results indicate ids affected stressful conditions may potentially vulnerable attack intruder knows exploit weakness 
experimental results demonstrate testing methodology reveal useful information ids capabilities 
growth development idss continues testing techniques growing importance 
includes careful development suite intrusion test cases basic detection test 
plan develop additional performance objectives tests idss related groups 
example tests measure processing speed ustat described 
task fine tune testing procedures develop suitable metrics create benchmark suite idss similar spirit established benchmarks livermore loops dhrystone test performance various computer architectures 
tools approaches systematically evaluate measure effectiveness performance idss 
expect development methods assessing idss positive impact field intrusion detection developers assessment results feedback design process 
expect testing techniques adapted testing software systems 
particular stress testing techniques applied testing computer operating systems real time control systems general software system required cope stressful conditions 
encapsulated package includes sample test scripts enhancements expect concurrent scripts record replay feature complete documentation installation instructions 
readers encouraged contact authors interested acquiring package 
nsa project monitor guidance enthusiastic support project 
appreciate helpful comments anonymous reviewers colleagues computer security research laboratory uc davis 
anderson generation intrusion detection expert system nides software design product specification version description document project sri international july 
division computer science research technology national security agency private communication may 
bellovin proc third usenix unix security symposium baltimore md pp 
september 
bellovin security problems tcp ip protocol suite acm computer communication review vol 
pp 
april 
bishop taxonomy unix system network vulnerabilities technical report cse university california davis september 
brinch hansen reproducible testing monitors software practice experience vol 
pp 

chung olsson mukherjee simulating concurrent intrusions testing intrusion detection systems parallelizing intrusions proc th national information systems security conference baltimore md pp 
october 
denning intrusion detection model ieee transactions software engineering vol 
se pp 
february 
data reduction tool proc th national computer security conference washington pp 
october 
farmer venema improving security site breaking usenet posting december 
farmer spafford cops security checker system proc summer usenix conference pp 
june 
gary talk crime internet session th national computer security conference baltimore md october 
heberlein dias levitt mukherjee wood network security monitor proc ieee symposium research security privacy oakland ca pp 
may 
hochberg nadir automated system detecting network intrusion misuse computers security vol 
pp 
may 
ilgun ustat real time intrusion detection system unix proc ieee symposium research security privacy oakland ca pp 
may 
ilgun kemmerer porras state transition analysis rule intrusion detection approach ieee transactions software engineering vol 
pp 
march 
javitz valdes sri ides statistical anomaly detector proc ieee symposium research security privacy oakland ca pp 
may 
kumar spafford software architecture support misuse intrusion detection technical report csd tr purdue university march 
kumar spafford application pattern matching intrusion detection technical report csd tr purdue university june 
kumar spafford pattern matching model misuse intrusion detection proc th national computer security conference baltimore md pp 
october 
landwehr taxonomy computer program security flaws acm computing surveys vol 
pp 
september 
leblanc mellor crummey debugging parallel programs instant replay ieee transactions computers vol 

pp 
april 
libes exploring expect tcl toolkit automating interactive programs reilly associates 
lunt ides progress report proc sixth annual computer security applications conference tucson az december 
lunt real time intrusion detection expert system ides interim progress report project sri international may 
myers art software testing john wiley sons 
mukherjee heberlein levitt network intrusion detection ieee network vol 
pp 
may june 
neumann parker summary computer misuse techniques proc th national computer security conference baltimore md pp 
october 
ousterhout tcl tk toolkit addison wesley 
hess tamu security package ongoing response internet intruders academic environment proc fourth usenix unix security symposium santa clara ca pp 
october 
hanna expert systems intrusion detection case study proc th national computer security conference baltimore md pp 
october 
haystack intrusion detection system proc ieee fourth aerospace computer security applications conference orlando fl december 
dias heberlein ho levitt mukherjee dids distributed intrusion detection system motivation architecture early prototype proc th national computer security conference washington pp 
october 
weyuker analyzing partition testing strategies ieee transactions software engineering vol 
pp 
july 
zhang methodology testing intrusion detection systems thesis university california davis may 

