computational types logical perspective benton bierman de paiva computer laboratory university cambridge new museums site cambridge cb qg moggi computational lambda calculus metalanguage denotational semantics arose observation different notions computation categorical structure strong monad cartesian closed category 
show computational lambda calculus arises naturally term calculus corresponding curry howard correspondence novel intuitionistic modal propositional logic 
give natural deduction sequent calculus hilbert style presentations logic prove strong normalisation result 
computational lambda calculus introduced moggi metalanguage denotational semantics faithfully models real programming language features non termination differing evaluation strategies non determinism side effects ordinary simply typed lambda calculus :10.1.1.26.2787
starting point moggi explicit semantic distinction computations values 
object interprets values particular type object models computations type example model non termination take complete partial order cpo lifted cpo 
wide variety notions computation unary operation delta turns categorical structure strong monad underlying cartesian closed category values 
observation spivey special case computations raise exceptions suggests unified view programming languages 
having common structure hope firstly able design general purpose metalanguages logics reasoning range programming language features secondly able semantics complicated languages studying ways different monads combined 
lines done crole pitts 
computational lambda calculus syntactic theory expresses semantic idea notions supported epsrc research fellowship ec esprit bra 
supported epsrc research fellowship 
supported epsrc gr 
computation monads corresponds cartesian closed categories strong monads just way simply typed lambda calculus products corresponds cartesian closed categories 
whilst moggi initially aimed structuring semantics programming languages pleasing interplay theory practice considerable impact pragmatics writing functional programs 
wadler shown monads provide elegant way structure functional programs perform naturally imperative operations dealing updatable state engaging interactive input output 
looks extension moggi computational lambda calculus logical perspective 
curry howard correspondence way round derive logic term cl logic 
consists propositional intuitionistic logic plus style modal possibility operator corresponding computation type constructor 
purely intuitive level particularly thinks nontermination certainly appealing idea computation type represents possibility value type cl logic interesting right appears discovered independently times 
soon completing early draft curry briefly considered just system late 
quite independently moggi mendler come sequent calculus hilbert style presentations cl logic context hardware verification 
computational lambda calculus computational lambda calculus moggi refers ml typed lambda calculus types closed terminal object binary products function spaces computation type constructor purposes consider immediately slight extension includes coproduct types 
natural deduction typing rules version ml shown 
intuitively value val trivial computation immediately evaluates construct allows computation evaluated value context computation denotes computation evaluates value proceeds evaluate 
equational theory ml comprises usual fij equalities simply typed lambda calculus coproducts extra axioms val val examples different notions computation fit general scheme non determinism 
take def val def feg def gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma theta gamma theta gamma fst gamma theta gamma snd gamma gamma inl gamma gamma inr gamma gamma gamma gamma case inl inr gamma ta gamma tb gamma tb gamma gamma val ta natural deduction presentation computational lambda calculus exceptions 
take def val def inr def case inl inl inr continuations 
take def val def def case constructs right types equations easily seen hold 
simple fact ml shall substitution typed lemma substitution gamma delta gamma delta propositional cl logic section curry howard correspondence derive logic moggi original presentation ml shall consider sequent calculus axiomatic formulations logic 
natural deduction formulation cl logic curry howard correspondence simply take moggi original presentation erase terms produce logic 
type constructor corresponds logical connective follows constructor connective theta oe derive logic called propositional cl logic tree form sequent form 
delta delta delta oe oe delta delta delta oe delta delta delta oe delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta xy delta delta delta delta delta delta delta delta delta tree style natural deduction formulation cl logic sequent calculus cl logic known correspondence natural deduction sequent calculus proof systems systematically derive sequent calculus formulation cl logic 

somewhat surprisingly completing research discovered kind possibility modality considered years ago curry 
curry formulation identity gamma 
gamma gamma oe gamma oe gamma oe gamma oe gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma natural deduction formulation cl logic referee pointed certain kinds modality rule acceptable allows proof proposed theory possibility strictly dual necessity 
theory looks promising developed 
easy see typical necessity modalities provable logic interpreted possible negation logic paradox antecedent true consequent appears false 
clearly theorem undesirable logic trying capture general notion possibility whilst choice notation questionable logic certainly consistent 
identity gamma gamma gamma gamma cut gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma oe gamma oe gamma oe gamma oe gamma gamma gamma gamma sequent calculus cl logic hilbert system cl logic complete logical analysis cl logic subsection shall give hilbert style presentation 
norm modal logics system example see gor thesis certainly unusual set axioms shall propose seen evidence peculiarity modal logic 
clearly non modal rules characterized set axioms ordinary intuitionistic logic 
shall take proposed van dalen 
modal rules shall follow technique hodges deriving axioms 
essentially logical rules side conditions restrictions called pure logical rules axioms read natural deduction formulation 
recalling modal rules gamma gamma gamma gamma gamma see rules pure 
rule suggests axiom form oe elimination rule suggests axiom oe oe oe 
give hilbert system 
see system enjoys deduction theorem proposition deduction theorem gamma gamma oe noted mendler independently proposed hilbert style presentation cl logic dub pll propositional lax logic compared example intuitionistic :10.1.1.37.9742
axioms oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe rules identity gamma axiom axioms gamma gamma oe gamma modus ponens gamma hilbert system cl logic give axioms modality write fl aspects possibility necessity oe fla fl fl oe fla oe oe fla oe alternative axiomatisation logic equivalent axioms system theorems 
proof normalisation turn question normalise natural deduction proofs cl logic equalities want deductions 
normalisation procedure described terms logic kind normalisation step induces reduction rule corresponding terms 
advantages logical approach equalities ml terms gave earlier arise natural proof theoretic consequences process normalisation cut elimination cl logic 
principal reductions basic kind normalisation step natural deduction proofs comes removing detours arise logical connective introduced immediately eliminated 
consider modality elimination pair standard see example 
followed derivation looks delta delta delta delta delta delta delta delta delta delta delta delta principal reductions known fi rules derivation contains possible applications fi rules said fi normal form 
commuting conversions natural deduction systems give rise secondary form normalisation step 
occur system contains elimination rules minor premiss girard calls parasitic formula 
general rule want able commute rule derivation minor premiss past rule move application rule elimination past elimination rule derivation minor premiss 
important cases moving eliminations introductions 
transformations called commuting conversions 
restriction form rule modal means rule gives rise commuting conversion ffl deduction form delta delta delta delta delta delta delta delta delta commutes delta delta delta delta delta delta delta delta delta clearly need commuting conversions disjunctions standard described places 
new case commutation disjunction modality ffl deduction delta delta delta delta delta delta delta delta delta delta delta delta commutes delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta say derivation possible applications commuting conversion normal form 
derivation fi rule commuting conversion applicable said fic normal form 
reduction rules terms principal reductions commuting conversions derivations induce corresponding reduction steps terms ml usual way ff conversion necessary avoid variable capture commuting conversions fi reductions 
reduction rules terms shown 
note particularly equations ml listed page appear reduction rules essentially forced just shape elimination rules logic 
remaining equation uniqueness rule computation type constructor discuss section 
proposition subject reduction gamma fic gamma proof 
induction lemma 
strong normalisation section examine process normalisation natural deduction proofs cl logic equivalently reduction process terms ml show terminates 
strong normalisation result stronger applies full fic reduction relation just fi relation 
find convenient term calculus ml logic simply reasons space 
strong normalisation proofs usually variants tait reducibility method extension tait method commuting conversions fi reductions due fi fst fi snd fi case inl inl inl fi case inr inl inl fi val fi fst case inl inr case inl fst inr fst snd case inl inr case inl snd inr snd case inl inr case inl hj inr case case inl inr inl inr case inl case inl inr inr case inl inr case inl inr case inl inr reduction rules terms prawitz 
possible prawitz technique give proof strong normalisation ml draft contained proof proof long complicated 
translation argument previously benton show strong normalisation linear term calculus 
wish show strong normalisation language know strong normalisation holds language suffices exhibit translation delta ffi ffi ffi onestep reduction relations respectively 
infinite reduction sequence induce infinite reduction sequence contradicting strong normalisation language 
take computational lambda calculus fic reduction relation obtained precongruence closure rules shown simply typed lambda calculus coproducts usual fic reduction relation 
note just largest sublanguage contain type constructor val constructs 
proposition strongly normalising 
proof 
result proved prawitz 
translation delta ffi simply instantiate generic monad operations computational lambda calculus specific case exceptions monad mentioned earlier 
start defining translation types types ffi def base type ffi def ffi def ffi ffi theta ta ffi def ffi define translation terms terms ffi def ffi def ffi def ffi ffi ffi def ffi ffi fst ffi def fst ffi snd ffi def snd ffi ffi def ffi ffi inl ffi def inl ffi inr ffi def inr ffi case inl inr ffi def case ffi inl ffi inr ffi val ffi def inr ffi ffi def case ffi inl inl inr ffi lemmas easy inductions lemma gamma ml gamma ffi ffi ffi lemma delta ffi translation commutes substitution terms ml variable ffi ffi ffi 
proposition terms computational lambda calculus fic ffi fic ffi proof 
proved induction derivation fact fic induction cases rules explicitly fic precongruence follow trivially compositional nature translation 
similarly axioms easy deal 
example ffl case reduction fi ffi ffi ffi ffi fi ffi ffi ffi equality follows lemma 
prawitz considers commuting conversions associated existential quantification disjunction 
interesting cases fi reductions involving computation type ffl case reduction val fi ffi case inr ffi inl inl inr ffi fi ffi ffi ffi ffl case case inl tj inr case inl inr ffi case case ffi inl ffi inr ffi inl inl inr ffi case ffi inl 
case ffi inl inl inr ffi inr 
case ffi inl inl inr ffi ffi ffl case ffi case case ffi inl inl inr ffi inl inl inr ffi case ffi inl 
case inl inl inl inr ffi inr 
case ffi inl inl inr ffi fi case ffi inl inl inr 
case ffi inl inl inr ffi ffi required 
corollary strong normalisation calculus ml fic reduction relation strongly normalising 
proof 
propositions 
cut elimination corresponding normalisation process natural deductions simplification process sequent calculus proofs consists removing applications cut rule 
section look process cut elimination cl logic see closely related normalisation process 
able look term reductions induced cut elimination shall sequent calculus presentation ml far explicitly 
shall notation application cut rule proof called cut 
gamma delta cut gamma delta previous intuitionistic linear logic principal cuts secondary cuts insignificant cuts 
principal cuts principal cuts ones introduce right left cut formula cut 
new case gamma tr gamma val ta delta tb tl delta ta tb cut gamma delta val tb derivation reduces gamma delta tb cut gamma delta tb giving reduction rule val course reduction obtained normalisation process corresponds fi equality axiom moggi 
principal cuts respect conjunction disjunction implication standard 
secondary cuts case secondary cut gamma tb tl gamma ta tb delta tc tl delta tb tc cut gamma ta delta tc derivation reduces gamma tb delta tc tl delta tb tc cut gamma delta tc gamma ta delta tc reduction gives equality corresponds moggi third axiom derived normalisation process natural deductions 
secondary cut gamma tr gamma val ta delta ta tr delta ta val tb cut gamma delta val val tb reducing gamma tr gamma val ta delta ta cut gamma delta val tr gamma delta val val tb introduce new axioms 
example call insignificant cut 
theorem cut elimination derivation sequent gamma derivation gamma contains instances cut rule 
proof 
proved curry standard lines 
equalities type constructors ml associated equality fi commutation equalities 
seen classes equalities follow direct consequences proof theory cl logic try explain equalities spirit 
naturally multiplicative disjoint contexts additive shared contexts formulation sequent rules logic 
presentation traditional equality associated function space constructor arises reducing derivation fx fx derivation identity similarly obtain rules consequences roughly simplifying right rule applied identity followed left rule identity compound proposition 
general pattern rule obtained reducing derivation tr val ta tl ta val ta derivation identity ta ta yield exactly second equalities ml terms listed page 
see full theory equality ml natural consequence proof theory cl logic 
categorical models computational lambda calculus originally derived categorical considerations know categorical model cartesian closed category ccc strong monad 
completeness shall give categorical definitions 
definition monad category triple functor id natural transformations satisfy diagrams ta ta ta ta id ta ta definition strong monad category finite products monad natural transformation theta tb theta diagrams commute ff evident natural isomorphisms theta ta theta ta theta id theta theta tb theta theta theta tc ff theta theta tc id theta theta theta theta theta ff theta theta theta theta tb theta theta tb id theta theta definition cl model cartesian closed category binary coproducts strong monad 
outlines way ml modelled cl model 
expect cl model validates equalities arising fi reductions commuting conversions 
prototypical computer science example cl model category cpos necessarily bottom continuous maps lifting monad 
note tensorial strength needed interpretation elimination rule 
instance general phenomenon arises modelling different logics see example interpretations logical connectives behave respect tensor product represent structure implied comma left sequents :10.1.1.37.9742:10.1.1.13.7158
means firstly extra categorical structure relating interpretation connective tensor product secondly extra structure satisfy coherence conditions interpretation category proof really uniquely determined 
worth remarking existence strong monad equivalent existence monoidal monad alternative way presenting models 
shown moggi computational lambda calculus initially arrived purely categorical perspective thoughts proof theory corresponds propositions types analogy intuitionistic modal logic 
whilst cl logic odd point view traditional modal logic particular modality aspects possibility necessity natural behaved 
evidence cl logic naturally occurring logic comes fact curry mendler discovered 
mendler particularly interesting discuss logic motivation methodology different 
interested specification verification hardware noted general weakened notion correctness correctness constraints help reason real life behaviour circuits fact gates stabilise time inputs changed having completely model low level details 
logic pll useful proving properties circuits number different notions constraint reminiscent way computational course possible relax categorical definitions obtain class models model fic equalities 
example insist equality associated modality strong monad require right pre monad 
identity gamma theta gamma gamma gamma gamma theta gamma 
gamma cur gamma gamma gamma gamma gamma gamma gamma 
gamma fi gamma gamma theta ev gamma gamma gamma gamma gamma theta gamma fi gamma gamma theta gamma gamma theta theta gamma gamma theta gamma gamma gamma theta theta gamma gamma theta gamma gamma gamma gamma gamma inl gamma gamma gamma gamma gamma inr gamma gamma gamma gamma theta gamma gamma theta gamma gamma hid ei gamma gamma gamma theta gamma theta gamma theta gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma theta gamma gamma hid ei gamma gamma gamma theta ta gamma gamma theta tf gamma gamma modelling computational lambda calculus lambda calculus useful metalanguage describing number different notions computation 
mendler essentially concerned provability proofs give novel complete semantics logic non standard class kripke models 
hope investigate just kripke models related general categorical models considered 
logical reconstruction ml shows equational axioms initially imposed calculus consequences proof theory logic 
extended class interesting constructive logics perfect way correspondence logic term calculus categorical models 
part ongoing project see :10.1.1.13.7158
fact close relationship cl logic linear logic 
linear category model intuitionistic linear logic see gives rise cl model subcategory category algebras comonad 
whilst interesting cl models arise way monad part model commutative strong monad equivalently symmetric monoidal monad 
discussion relationship intuitionistic linear logic cl logic may scope looking example cl logic closely associated non commutative variant intuitionistic linear logic :10.1.1.13.7158
strong normalisation proof extremely straightforward particularly comparison proof principles replaces 
similar subtle translation argument system prove strong normalisation linear term calculus 
certainly number calculi technique profitably applied 
natural extensions cl logic explored 
consider addition order quantifiers cl logic 
proof theoretical viewpoint little difficulty categorical viewpoint suggest move hyperdoctrine model see example 
investigate linear computational lambda calculus computational types linear lambda calculus 
benton bierman de paiva hyland 
term assignment intuitionistic linear logic 
technical report computer laboratory university cambridge august 
benton 
strong normalisation linear term calculus 
journal functional programming january 
benton :10.1.1.13.7158
mixed linear non linear logic proofs terms models 
selected papers computer science logic poland springerverlag lncs 
full version available technical report university cambridge computer laboratory october 
bierman de paiva :10.1.1.37.9742
intuitionistic necessity revisited 
proceedings logic conference 
amsterdam holland december 
crole 
programming fixpoint type 
phd thesis computer laboratory university cambridge 
revised version available technical report 
curry 
elimination theorem modality 
journal symbolic logic january 
van dalen 
intuitionistic logic volume handbook philosophical logic chapter pages 
reidel 
eilenberg kelly 
closed categories 
proceedings conference categorical algebra la jolla 
mendler 
intuitionistic modal logic applications formal verification hardware 
selected papers computer science logic poland springer verlag lncs 
available technical report id tr department computer science technical university denmark january 
gallier 
constructive logics part tutorial proof systems typed calculi 
theoretical computer science march 

girard lafont taylor 
proofs types volume cambridge tracts theoretical computer science 
cambridge university press 
gordon 
functional programming input output 
phd thesis computer laboratory university cambridge february 
available computer laboratory technical report 
gor 
cut free sequent tableau systems propositional normal modal logics 
phd thesis computer laboratory university cambridge 
available computer laboratory technical report 
hodges 
elementary predicate logic 
gabbay guenthner editors handbook philosophical logic 
volume chapter pages 
reidel 
howard 
formulae types notion construction 
hindley seldin editors curry essays combinatory logic lambda calculus formalism academic press 
kieburtz hook 
monads continuations 
proceedings acm workshop continuations pages 
moggi 
computational lambda calculus monads 
proceedings symposium logic computer science pages june 
moggi 
notions computation monads 
information computation 
pitts 
evaluation logic 
technical report computer laboratory university cambridge august 
prawitz 
ideas results proof theory 
fenstad editor proceedings second scandinavian logic symposium pages 
seely 
hyperdoctrines natural deduction beck condition 
zeitschrift fur math 
logik 
spivey 
functional theory exceptions 
science computer programming june 
tait 
intensional interpretations functionals finite type journal symbolic logic 
wadler 
comprehending monads 
proceedings conference lisp functional programming pages 
acm june 
wadler 
essence functional programming 
invited talk 
th symposium principles programming languages 
acm january 

