higher order concurrent programs finite communication topology extended hanne riis nielson flemming nielson computer science department aarhus university denmark 
mail daimi aau dk concurrent ml cml extension functional language standard ml sml primitives dynamic creation processes channels communication values channels 
powerful abstraction mechanisms communication topology program may complex efficient implementation may facilitated knowledge topology 
presents analysis determining bounded number processes channels generated 
analysis proceeds stages 
extend polymorphic type system sml deduce type cml programs communication behaviour expressed terms new process algebra 
develop analysis communication behaviour predicts number processes channels required execution cml program 
correctness analysis proved subject reduction property type system 
appeared proccedings st annual acm sigplan sigact symposium principles programming languages pp 
acm press 
higher order concurrent languages cml facile offer mechanisms dynamic creation channels processes addition possibility sending receiving values channels 
obtain efficient implementation programs languages need information communication topology ffl program spawn finite number processes 
ffl program create finite number channels 
answer question may load processes available processors dispense multitasking 
additionally answer second question may allocate channels statically dispense multiplexing 
leads considerable savings run time system 
analysis communication topology cml programs 
proceeds stages ffl extract communication behaviour program 
ffl analyse topology communication behaviour 
stage effect systems developed polymorphic type inference functional languages :10.1.1.54.5309
basic insight precise picture communication topology necessitates causality effects result straightforward modification done 
establish subject reduction property effect system shows execution cml program correctly modelled evolution communication behaviour 
second stage inference system predicts number processes channels created evolution behaviours 
analysis proved correct respect semantics behaviours subject reduction property correctness result carries cml programs 
idea types extract communication behaviour programs goes back idea types effects extract side effects programs goes back 
application types effects languages concurrency constructs includes may regarded improvement 
approach extended retain causality various effects amounts extracting process algebra mono typed version cml 
sections viewed extension method polymorphically typed version cml define process algebra cml semantics subject reduction property expresses relationship cml process algebra 
important differences approach 
uses type system subtyping instantiation polymorphic types 
difference semantics behaviours defined independently type system notion simulation close chocs ccs provide laws behaviours type system improvement laws type system specification semantics behaviours 
summary believe presents correct static analysis communication topology concurrent programs 
polymorphic behaviours shall follow study polymorphic subset cml expressions exp fn :10.1.1.45.3454
rec 
program variables 
addition function abstraction function application polymorphic construct recursion conditional 
constants const true false pair fst snd nil cons hd tl send receive choose wrap sync channel fork delta delta delta constants corresponding base types unit bool int operations constructing pairs lists 
operations sending receiving values channels choosing various communication possibilities modifying values communicated 
primitives construct suspended communications may enacted synchronisation 
primitives creating new channels processes 
usual shall types classify values expressions evaluate 
executing cml program channels processes may created values may communicated shall extend type system behaviours record 
channels associated channel identifiers programs execute record introduce regions type system 
types typ take unit bool int ff theta list chan com ff meta variable type variables 
function type written indicating argument type functions result type latent behaviour function supplied argument resulting behaviour type channel chan indicating channel allocated region values type communicated 
com type suspended communication eventually enacted sync result value type resulting behaviour formally behaviours beh ffl chan fi fork rec fi ffl stands non observable behaviour 
write sending value type channel typeof unit true bool false bool int pair ff ff fi fi ff ffl fi ff ffl fi ff theta ff fst ff ff fi ff theta ff ffl fi ff snd ff ff fi ff theta ff ffl fi ff nil ff ff list cons ff fi fi ff ffl fi ff list ffl fi ff list hd ff fi ff list ffl fi ff tl ff fi ff list ffl fi ff list ff fi ff list ffl fi bool send ff fi fi ae ff chan ae theta ff ffl fi ff com ae ff fi receive ff fi fi ae ff chan ae ffl fi ff com ae ff fi choose ff fi fi fi ff com fi list ffl fi ff com fi fi wrap ff ff fi fi fi fi ff com fi theta ff fi ff ffl fi ff com fi fi fi sync ff fi fi ff com fi fi fi ff channel ff fi ae unit 
ff chan ae fi ff chan ae fork ff fi fi unit fi ff 
fork fi fi unit fi fi int ffl fi int ffl fi int 
table type schemes constants region similarly receiving value type channel region allocation new channel region written chan type values communicated 
behaviour fork expresses process behaviour spawned 
behaviours may combined sequencing choice may recursive 
write fi meta variable behaviour variables 
example rec fi chan fork fi behaviour program create channel communications take place spawn process inputs channel process recurse 
regions reg delta delta delta ae ae denotes meta variable region variables denote region constants 
type schemes obtained types quantifying type variables behaviour variables region variables form ff fi ae ff fi ae lists variables 
constant associated type scheme shown table 
occasionally context may demand subexpression type latent behaviour larger really illustrated example example consider program choose send ch wrap receive ch fn 
tenv typeof ffl tenv tenv ffl tenv 
tenv fn 
ffl tenv tenv tenv tenv tenv 
ts tenv ts gen tenv tenv 

tenv rec ffl tenv bool tenv tenv tenv table typing system sake readability write cons cons nil pair element list type int com int assuming ch type int chan second element type int com bool assuming ch type bool chan 
want list type int com int bool record branches may chosen run time 
need coerce types int com int int com bool int com int bool 
basically approaches may adopt ffl late subsumption coercions happen time inside type type system general subsumption rule types 
ffl early subsumption generic instantiations produce required specialised types 
approach mono typed version language obtaining type system subtyping 
polymorphic setting avoid potential problems presence polymorphism subtyping shall second approach taken 
means latent behaviour functions suspended communications prepared larger needed accounts fi components behaviours form fi table 
note constants sync channel fork non trivial latent behaviour ffl 
type generic instance type scheme ts ff fi ae written ts exists substitution dom ff fi aeg substitution finite mapping type variables behaviour variables region variables types behaviours regions respectively write dom finite domain 
furthermore type scheme ts instance ts written ts ts ts ts typing judgements form tenv tenv type environment mapping variables type schemes type behaviour 
cml call value semantics behaviour associated accessing variable type environment contain behaviour component type schemes 
typing rules table fairly close standard ones exception behaviour information collected 
types ffl pre order laws 

ffl pre congruence laws 


fork fork 
rec fi rec fi ffl laws sequencing 

ffl laws ffl 
ffl ffl 
ffl ffl ffl laws choice join 

ffl laws recursion 
rec fi fi 
rec fi fi 
rec fi rec fi table ordering behaviours constants variables obtained generic instances appropriate type schemes 
actual behaviour ffl mentioned earlier may want larger behaviour express introduce ordering behaviours 
turns general pattern axioms rules possible enlarge actual behaviour 
rule function abstraction record behaviour body function latent behaviour function type 
construction function observable behaviour ffl 
rule function application see actual behaviour composite construct operator followed operand behaviour initiated function application exactly latent behaviour function type 
may note inherent rule cml call value semantics 
rule local definitions generalise type variables behaviour variables region variables occur free type environment behaviour expressed gen tenv ff fi aeg fv fv tenv fv ff fi ae fv delta delta delta set free type variables behaviour variables region variables delta delta delta 
actual behaviour construct simply expresses local value computed body 
rule recursive functions sure actual behaviour equal latent behaviour type recursive function 
rule conditional straightforward 
ordering behaviours defined axioms rules table 
require preorder pre congruence 
furthermore sequencing associative operation ffl identity distributive law respect choice 
consequence laws choice choice associative commutative 
law recursion allows unfold rec construct 
main difference typing system keep dependencies individual communications 
extend table rec fi fi 
ffl fi 
ffl rec fi system degrade level systems 
example illustrate kind information provided behaviours consider program 
list functions channels creates process function list subsequently connects functions pipeline 
process fn 
fn 
fn 
fork rec loop 
sync wrap receive fn 
sync send loop rec pipe fs 
fn 
fn 
fs process fn 
ch channel process hd fs ch pipe tl fs ch sake readability written abbreviation fn dummy 
type process ff ff fi ae ae ff fi ff ffl ff chan ae ffl ff chan ae unit fork rec fi ae ff fi ae ff fi behaviour see process create process channels 
turning main program type ff fi ae ff fi ff list ffl ff chan ae ffl ff chan ae unit rec fi fork rec fi ae ff ae ff fi ff chan ae fork rec fi ae ff fi ae ff fi fi see number processes number channels may generated 
semantics shall structural operational semantics cml 
formulation close spirit amounts inference systems sequential evaluation concurrent evaluation handle synchronisation need matching communications 
mimicked specification semantics behaviours operator operand result pair fst snd cons hd tl nil true false send wi receive wi choose wi wrap wi 
table tabulation ffi inference system sequential evolution concurrent evolution 
matching simpler behaviours programs need special matching relation 
semantics cml sequential evaluation expressions 
takes care primitives cml sync channel fork constants table non trivial latent behaviour 
transition relation sequential evaluation form closed expressions contain free program variables 
enforce left evaluation introduce concept evaluation context specifies step computation may take place rec 
fn 

rec 
fn 


ae true false ffi table sequential evaluation denotes weakly evaluated expression expression evaluated 
idea empty context called hole general specifies context exactly hole 
shall write expression hole replaced step computation take place point indicated hole 
example consider function application 
presence means computations operator position possible presence means computations operand position possible operator weakly evaluated function abstraction 
way ensured operator operand evaluated function application takes place fi reduction 
weakly evaluated expressions fn 
hc hc wn 
weakly evaluated expressions form hc record evaluation constants indicated table define relation ffi theta theta 
transition relation specified table write 
expression free occurrences replaced clauses fairly straightforward 
rule expresses level unfolding recursive definition 
axioms fi reduction reduction 
fourth axiom abbreviation axioms expressing evaluation conditional depending outcome test 
axiom ffi reduction inspects table determine result 
shall introduce transition relation concurrent evaluation 
channels associated channel identifiers ci processes process identifiers pi 
configurations form ci pp ci set channel identifiers pp finite mapping process identifiers expressions 
transition relation written ci pp gamma 
ev ps ci pp ev event takes place ps list processes take part event depending event processes involved 
event forms ev ffl chan ci fork pi ci ci 
may record empty event creation channel channel identifier creation process process identifier communication channel 
transition relation specified table 
rule embeds sequential evaluation concurrent evaluation name process performing event recorded 
second rule captures creation new channel 
channel associated new channel identifier transition records name process performing event event 
third rule takes care process creation follows lines 
record process performing event created event 
rule expressing synchronisation communications matching relation 
transition records processes involved communication channel 
matching relation weakly evaluated expressions ready synchronise specifies outcome communication records event takes place 
expressed relation form ci ci 
ci ci 
relation specified table 
axiom captures communication send receive ci pp pi 
gamma 
ffl pi ci pp pi 
ci pp pi 
channel gamma 
chan ci pi ci pp pi 
ci ci ci ci pp pi 
fork gamma 
fork pi pi pi ci pp pi 
pi 
pi dom pp fpi ci ci 
ci pp pi 
sync pi 
sync gamma 
ci ci 
pi pi ci pp pi 
pi 
pi pi table concurrent evaluation ci wii cii ci ci 
ii ii ii table matching construct 
second third axiom take care situation possible communications available component 
fourth axiom shows communicated value may modified wrap construct 
restructuring rule 
semantics behaviours sequential evolution behaviours 
configurations transition system closed behaviours behaviours free behaviour variables special terminating configuration transition relation takes form closed behaviour atomic behaviour ffl chan fork ffl supposed capture sequential evaluation steps cml expressions remaining atomic behaviours capture concurrent steps 
relation specified table 
axiom expresses atomic behaviour performed doing ffl 
second axiom expresses ffl terminate fact behaviour step reach terminal configuration 
third axiom means time number ffl actions performed behaviour observe terminal configuration excluded stuck configuration 
axiom reflects semantics cml number evaluation steps performed functional part cml involving concurrency primitives 
fourth axiom expresses unfolding recursive behaviour 
rules evolution sequential behaviours evolution component reached terminal configuration possible start evolution second component 
rules express evolution choice behaviours 
express concurrent evolution behaviours introduce process identifiers semantics cml 
transitions form pb ps pb pb pb mappings process identifiers closed behaviours special symbol furthermore action takes place ps list processes take part action 
semantics cml ps elements depending action 
actions ffl chan fork transition relation specified table 
rules embed sequential evolution concurrent ffl pb pi 
ffl pi pb pi 
ffl pb pi 
ffl pi pb pi 
chan pb pi 
chan pi pb pi 
fork pb pi 
fork pi pi pb pi 
pi 
pi dom pb fpi pb pi 
pi 
pi pi pb pi 
pi 
pi pi table concurrent evolution ffl ffl ffl ffl rec fi ffl fi 
rec fi table sequential evolution evolution rule captures termination behaviour second rule captures behaviour trivial atomic behaviour third rule channel created fourth rule process created 
cases action processes involved recorded 
final rule captures communication processes 
matching simply amounts ensuring channels processes region agree type value communicated 
subject reduction property shall prove typing system section subject reduction properties ffl types preserved computation 
ffl behaviours evolve computation 
formalisation proof result stages prove subject reduction property sequential evaluation expressions 
prove correctness property matching prove subject reduction property concurrent evaluation 
proof involves showing ordering behaviours defined table sound respect simulation ordering obtained semantics behaviours 
sequential correctness natural restrict attention closed expressions definition evaluation context pass inside scope defining occurrence program variable 
allow expressions include channel identifiers allocated computation 
formalise shall write cenv mapping channel identifiers types cenv ci form chan 
shall say closed cenv cenv express correctness result shall need typing rules weakly evaluated expressions 
form tenv ffl ffl tenv ffl tenv hc ffl tenv hc delta delta delta wn gamma ffl ffl tenv wn ffl tenv hc delta delta delta wn ffl rely fact tenv tenv ffl 
explicit latent behaviour constants table form ffl ignore component 
proposition assume cenv cenv proof proposition induction inference matching weakly evaluated expressions gives rise new pair expressions 
formalise shall define cenv ci 
cenv ci 
cenv ci chan proposition assume cenv com ffl cenv com ffl exists cenv cenv cenv cenv proof induction inference matching 
order formulate prove concurrent correctness result need relate ordering behaviours semantics behaviours 
basically amounts definition simulation relation behaviours soundness proof laws table 
define bp mean exists behaviours delta delta delta ffl ffl delta delta delta ffl recall ranges closed behaviours atomic behaviour may prefixed number trivial atomic behaviours 
shall say simulation closed behaviours ffl ffl exists define largest simulation 
simulation extended open behaviours follows holds ground substitutions definition simulation inspired notions bisimilarity developed process algebras ccs chocs 
proposition concurrent subject reduction property expresses step concurrent evaluation expression mimicked number steps concurrent evolution behaviour 
relate configurations ci pp concurrent evaluation expressions configurations pb concurrent evolution behaviours 
shall say ci pp cenv related pb dom pp dom pb dom cenv ci 
ensures dealing processes channel identifiers 
shall need relate events ev concurrent evaluation expressions actions concurrent evolution behaviours 
assume configurations ci pp pb cenv related explained 
clearly expect fork pi correspond fork pb pi chan ci correspond chan cenv ci chan formalised auxiliary function denoted cenv pb 
final preparation introduce notation sequence steps concurrent evolution behaviours 
write pb ba ps pb mean exists configurations pb delta delta delta pbn pb ffl pi delta delta delta ffl pin pbn ps pb pi delta delta delta pi process identifiers list ps 
processes ps allowed perform trivial actions engage joint action theorem assume ci pp gamma 
ev ps ci pp cenv pb ci pp cenv related pb pi dom pp cenv pp pi pi pb pi pi exists cenv pb pb ba ps pb cenv pb ev furthermore ci pp cenv related pb pi dom pp cenv pp pi pi pi pi pi pi pb pi 
possible take pi pi pi defined 
proof theorem induction rules concurrent evaluation 
soundness ordering defined table important proof theorem 
may interesting note laws suffice 
analysis finite communication topology shall say finite communication topology exists pi 
gamma 
ev ps gamma 
psk ci pp ev ev chan cardinality ci chan ci xg fork cardinality pi fork pi xg 
execution cause channels processes created 
similarly say finite communication topology exists pi 
ps ak psk pb chan cardinality ft chan chan xg fork cardinality fork xg 
example consider behaviours rec fi chan fi ii rec fi chan fi iii rec fi chan fi fi iv rec fi ffl fi fi rec fi chan fork fi ffl chan fork rec fi ffig ffig fi fi ffig table test finite communication topology finite topology channel created 
example ii finite topology number channels may created 
iii slight variation finite topology number channels may created 
iv finite topology number processes may created 
test behaviour finite communication topology shall introduce predicate intuitively expresses finite communication topology channels processes created 
predicate defined table 
set set free behaviour variables subset consisting behaviour variables path behaviour variable 
called dangerous variables need special attention handling recursion explained 
explain simple cases 
clauses ffl chan straightforward 
fork ensure contains free behaviour variables encapsulation recursive construct example cause unbounded number processes created 
choice construct simply take maximum numbers channels processes created components 
order behaviour form rec fi finite communication topology create number channels processes level unfolding fi 
rec fi 
analysis perform unfolding want analysis structural 
consider processes free behaviour variables shall boldly claim fi creates channels processes 
clearly correct require recursive behaviours create channels processes restrictive 
shall introduce set dangerous variables keep track really necessary behaviour recursive construct creates channels processes 
situations arise connection sequencing contains free behaviour variable channels processes created iterated number times unfolding encapsulating recursive binding behaviour variable 
ensure create channels processes 
complicated possibility contain free behaviour variables wrongly assumed create channels processes 
ensure free behaviour variables generate channels processes including set dangerous behaviour variables 
impose similar restrictions dual situation 
way behaviour chan fi ii example classify fi dangerous variable chan creates channel fi classify fi dangerous 
behaviour fi fi iii iv causes problems fi recorded dangerous variable analysing encapsulating rec construct iii rejected body may create channel iv accepted 
result expresses soundness analysis theorem pi 
ps ak psk pb prove result shall show property expressed predicate table preserved sequential evolution behaviours proposition assume 
exists furthermore extended predicate table configurations proof proposition induction inference 
handle recursion rely lemma lemma assume free behaviour variables implies 
ffl fi fi 
ffig ffl fi fi 
ffig ffig ffl fi fi 
prove concurrent soundness analysis define pb mean delta delta delta delta delta delta delta delta delta pb pi 
delta delta delta pi 

proposition pb pb ps ak psk pb exists pb theorem directly follows proposition 
combining theorem theorem get corollary finite communication topology channels processes created 
example returning example recall latent behaviour process fork rec fi ae ff fi ae ff fi easy verify corollary shows process created function process executed provided argument create processes 
latent behaviour function pipe rec fi fork rec fi ae ff ae ff fi ff chan ae fork rec fi ae ff fi ae ff fi fi deduce fi included set dangerous behaviour variables body rec construct 
specialise program lists fixed length get finite communication topology 
process algebra polymorphic subset cml proved safety respect semantics cml 
process algebra developed static analysis communication behaviour cml program proved correctness 
applicability analysis obvious knowing finite number channels processes created may facilitate computing resources may efficiently 
approach flexible example number processes interest analysis may modified allow arbitrary number channels 
research needed combine analysis transformation automatically rewrites cml program form processes preloaded architecture 
plenty scope variations analysis 
theorem expresses soundness analysis analysis succeeds behaviour finite communication topology 
may ask analysis complete behaviour finite communication topology analysis say 
case example illustrates rec fi fi rec fi chan fi second component causes analysis reject behaviour 
behaviour finite communication topology looping component prevents channels created 
example fork rec fi chan fi analysis reject behaviour component 
forking process behaviour dead lock prevent channels generated 
get complete analysis respect evolution behaviours may extend analysis form termination dead lock analysis 
alternatively may study completeness class behaviours stage evolution possibility terminating 
conjecture analysis complete respect class 
obviously hope complete analysis respect semantics cml programs 
analysis take account processes may terminate started 
consider example rec fi ffl fork fi behaviour rejected analysis number processes may forked 
time essentially process terminated regard behaviour having finite communication topology 
engberg fruitful discussions 
torben kim larsen bent thomsen mads tofte provided useful comments 
research supported dart project funded danish research councils 
berry milner turner semantics ml concurrency primitives 
proceedings popl acm press 
mishra prasad operational algebraic semantics facile symmetric integration concurrent functional programming 
proceedings icalp 
lucassen gifford polymorphic effect systems 
proceedings popl acm press 
milner communication concurrency 
prentice hall 
milner tofte harper definition standard ml 
mit press 
nielson typed lambda calculus class processes 
proceedings parle 
nielson nielson process algebras 
proceedings concur 
reppy cml higher order concurrent language 
proceedings acm sigplan conference programming language design implementation acm press 
reppy higher order concurrency 
ph thesis report department computer science cornell university 

talpin jouvelot type effect discipline 
proceedings lics 
thomsen calculus higher order communicating systems 
proceedings popl acm press 
thomsen polymorphic sorts types concurrent functional programs 
technical report ecrc 

