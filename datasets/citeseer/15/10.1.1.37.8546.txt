structure performance interpreters theodore romer dennis lee geoffrey voelker alec wolman wayne wong jean baer brian bershad henry levy department computer science engineering university washington seattle wa interpreted languages increasingly popular due demands rapid program development ease portability safety 
general impression slow little documented performance interpreters class applications 
examines interpreter performance measuring analyzing interpreters software hardware perspectives 
examples measure mipsi java perl tcl interpreters running array micro macro benchmarks dec alpha platform 
measurements interpreters relate performance complexity interpreter virtual machine demonstrate native runtime libraries play key role providing performance 
architectural perspective show interpreter performance primarily function interpreter relatively independent application interpreted 
demonstrate high level interpreters demands processor resources comparable complex compiled programs gcc 
conclude interpreters class applications currently motivate special hardware support increased performance 
interpreted wide variety computational tasks 
example java perl standard languages building internet applications tcl commonly rapid development interactive user interfaces 
interpreters play crucial role binary emulators enabling code port directly architecture 
environments reflect extent program function ease development portability safety represent important concerns research supported national science foundation ccr ccr cda ccr office naval research digital intel 
bershad partially supported national science foundation presidential faculty fellowship award 
views contained document authors interpreted representing official policies expressed implied university washington digital equipment intel national science foundation office naval research government 
broad range contemporary application domains 
despite emphasis safety portability performance interpreters remains primary concern 
low consumer oriented systems example low price limits hardware resources interpreted programs execute effectively 
successful design systems requires understanding structure performance interpreters 
date little analysis performance interpreters class applications 
explores performance implications interpreted code executing modern microprocessors 
measure evaluate interpreters mips instruction set tcl perl java languages running wide array micro macro benchmarks dec alpha platform 
goal compare interpreters understand important parameters interpreter performance measure demands interpreters current processors 
various instrumentation tracing techniques provide detailed measurements interpreter implementations 
simulation profile processor resource utilization interpreter execution 
data allows comparison interpreted benchmarks similar microbenchmarks written specint benchmark suite 
previous research concentrated mainly analysis programming languages interaction architecture 
early measurement studies commercial systems looked instruction set usage showed small percentage processor instruction set accounted dynamic instructions typical programs foster alexander 
similar studies provided rationale moving risc processors clark levy hennessy patterson 
researchers looked interaction memory system various object oriented functional languages calder diwan goncalves appel holzle ungar 
researchers studied interaction particular classes applications architecture example maynard uhlig studied memory system behavior commercial productivity applications 
similar vein investigate interaction interpreters modern architectures show interpreted applications facilities provided interpreters 
execution time interpreted program depends number commands interpreted time decode execute command show number commands execution time vary widely interpreter interpreter directly related complexity virtual machine implemented 
interpreters studied example tcl interpreter supports highest level virtual machine identical program executes fewer commands native instructions command interpreters 
measurements show interpreters falls spectrum performance relates characterization virtual machines 
show native runtime libraries play key role providing interpreter performance 
java interpreter example leverages native graphics runtime libraries provide performance graphics oriented applications 
architectural perspective find interpreter performance primarily function interpreter independent application interpreted 
example instruction data cache performance tcl interpreter roughly equivalent running macro benchmarks 
demonstrate interpreter demands processor resources particularly instruction cache function complexity virtual machine architectural behavior high level interpreters comparable complex compiled translators gcc 
result conclude interpreters class applications currently motivate need special hardware support increased performance 
rest investigate question interpreter performance 
section presents interpreters form basis study 
section analyzes compares performance interpreter implementations section extends analysis measuring impact interpreters different components modern microprocessor architecture 
section summarizes measurements results concludes 
interpreter descriptions examined interpreters study ffl mipsi sirer instruction level emulator executes mips kane heinrich binaries compiled dec ultrix operating system 
mipsi investigate architectural alternatives garbage collection goncalves appel multithreaded processors tullsen teaching tool architecture operating system classes 
internal structure interpreter follows closely initial stages cpu pipeline fetch decode execute stages performed explicitly software 
ffl java object oriented language runtime environment designed support safe execution portable programs downloaded world wide web 
java similar provides additional language features automatic garbage collection threads synchronization 
java provides extensive collection native runtime libraries define high level interface routines building graphical user interfaces 
direct interpretation java source programs compiled offline byte codes defined java virtual machine jvm sun microsystems 
java interpreter operates directly files containing jvm byte codes 
ffl perl scripting language designed manipulating text data files processes wall schwartz 
perl supports variety advanced programming abstractions useful string file processing including regular expressions high level interface automatic memory management associative arrays 
perl programs interpreted directly compiled startup time internal representation source program 
perl performs compilation step time program invoked 
ffl tcl embeddable command language allows applications customized single scripting language ousterhout 
tcl stand programming environment providing programming language interface includes basic functionality comparable perl mechanisms easily extending interpreter compiled application specific commands 
popular extension tcl tk toolkit provides simple window system interface enable rapid prototyping graphical user interfaces 
tcl interpreter structured ease addition execution application specific commands executes source programs directly 
chose interpreters reasons 
diverse set goals implementation strategies enabling explore different strategies reflected performance 
second available source form enabling attribute overhead various aspects implementation 
third interpreters available platform tools collecting processing address traces enabling analyze behavior architectural perspective trace driven simulation 
popularity java perl tcl interest large user community mipsi serves representative binary emulator 
interpreter performance section analyzes performance interpreters running variety workloads 
showing behavior simple microbenchmarks 
real programs characterize fundamental interpreter overheads examine distribution commands measure cost command interpretation 
show memory model interpreter presents affect performance 
measurements performed mhz dec alpha workstations running digital unix 
instrumentation data traces gathered atom srivastava eustace binary rewriting tool dec wrl 
explicit timings cycle counts gathered modifying interpreter source sample alpha cycle counter 
times cycle counts include system activity instruction counts exclude behavior operating system window system server 
microbenchmarks virtual machines table demonstrates slowdown various simple operations performed interpreter relative equivalent operations implemented compiled program 
table shows interpreters significantly slower single interpreter performs best microbenchmarks 
furthermore operations access operating system service routines read benchmark slowed operations computation done precompiled code 
string concat string split benchmarks show benchmark description slowdown relative mipsi java perl tcl assign sum memory locations third conditional assignment null proc null procedure call string concat concatenate strings string split split string component strings read read file warm buffer cache table microbenchmark results 
table shows slowdown microbenchmark relative equivalent operation implemented compiled version compiler comes digital unix 
microbenchmark ran seconds trial 
number average runs 
standard deviations usually 
similar effect languages perl tcl provide string manipulation facilities native runtime libraries 
explanation variations microbenchmark results lies virtual machine interface implemented interpreter 
virtual machine interface defines set virtual commands provide portable interface program processor 
implementation virtual machine executes virtual command trip main interpreter loop 
interpreter incurs overhead fetching decoding virtual command performing specified command 
execution time interpreted program depends number commands interpreted fetching decoding cost command time spent executing operation specified command 
cost components interpretation independent number commands required accomplish task depends level virtual machine abstraction defined interpreter 
simple virtual machine require execution large number commands decoding cost command critical program execution time 
hand complex virtual machine execute program fewer commands aggregate decoding cost may moderate 
interpreters measure define virtual machines ranging simple complex 
example mipsi java define simple virtual machines overhead virtual command small nearly fixed large number commands required accomplish task 
contrast perl tcl define complex virtual machines result non uniform slowdowns relative implementations 
string management virtual machines provide efficient implementation service 
times variable summation assignment virtual machine interface introduces substantial overheads 
application performance microbenchmark numbers help explain predict program performance 
gain better insight measured set typical programs selected language publicly available sources 
programs described table 
des program implemented languages provides common point interpreters 
table shows baseline performance interpreters running benchmark suite 
program table shows total number virtual commands executed interpreter running program number underlying native instructions executed interpreter ratio native instructions virtual commands separated fetch decode execute categories program total execution time machine cycles 
perl break number instructions devoted program precompilation native instructions column 
include precompilation overhead calculating average number native instructions virtual command represents fixed overhead program 
table shows average number instructions required fetch decode single virtual command low roughly fixed mipsi java simple uniform representation virtual commands 
contrast perl uses complex internal representation virtual commands increased decoding costs 
tcl fetch decode costs order magnitude higher languages primarily tcl interprets ascii source program directly 
importance fetch decode component command interpretation diminishes cost executing command increases 
java perl average number native instructions required execute virtual command varies dominate fetch decode component 
number virtual commands percentage native instructions mipsi des compress eqntott espresso li number virtual commands percentage native instructions java des hanoi javac mand number virtual commands percentage native instructions perl des ps txt html number virtual commands percentage native instructions tcl des demos hanoi ical xf cumulative native instruction count distributions 
point shows top virtual commands account native instructions executed benchmark 
native instructions include execute component table fetch decode instructions excluded 
shows exact contribution specific commands detail 
virtual native average native instructions total language benchmark description size kb commands instructions virtual command cycles theta theta fetch decode execute theta des des encryption decryption mipsi des des encryption decryption compress unix compress utility eqntott equation truth table conversion espresso boolean minimization li lisp interpreter java des des encryption decryption game hanoi towers hanoi disks javac espresso java compiler beta mand interactive mandelbrot explorer perl des des encryption decryption ps convert ascii file postscript server txt html convert text html html syntax checker tcl des des encryption decryption lexical analysis tool generate emacs tags file demos tk widget demos hanoi tk towers hanoi disks ical tk interactive calendar program tk interface diff xf tk interface builder table table shows baseline performance measurements interpreters running set representative programs benchmark program written size column gives size input interpreter 
native instructions column shows total number instructions executed program excluding operating system windowing system 
perl column shows parentheses number instructions program 
average columns show number native instructions executed divided total number virtual commands split fetch decode execute components 
perl ratios exclude precompilation instructions 
tcl xf demos programs ported version interpreter run version tcl programs run version 
example java hanoi benchmark commands long running implementations native graphics runtime library result instructions due fetching decoding virtual commands 
execution time different virtual commands depends complexity commands 
leads ask specific virtual commands account disproportionate amount interpreter execution costs commands natural targets optimization 
gives initial indication concentration instructions distinct virtual commands 
example des benchmark tcl just virtual commands account execute component native instructions 
presents detailed data benchmark applications 
benchmark show histograms left white barred histogram shows distribution virtual commands right grey barred histogram shows percentage native instructions due command execution virtual command 
example txt html benchmark perl match command accounts virtual commands interpreted native instructions due command execution 
mipsi see program virtual commands responsible instructions dedicated virtual command execution 
part instructions manipulate interpreted program memory model lw sw describe detail section recall table majority mipsi execution time due fetch decode overhead command execution 
initial target optimization mipsi fetch decode loop individual command 
java java programs large fraction execution time native runtime libraries native 
benchmarks graphics heavily hanoi instructions due execute component occur libraries 
applications interpreter primary performance bottleneck 
illustrates java applications extensively native libraries diminish importance primitive byte codes 
benchmark st load stack load commands account virtual commands executed execute instructions program spends half execute instructions native library code 
perl tcl small number virtual commands dominate execution time application 
specific set dominant virtual commands varies program program 
reason high level virtual machines give programmers great deal flexibility counts sll inflated assembler encodes ops fill delay slots sll instructions 
eqntott espresso li sll instructions ops des compress sll instructions ops respectively 
mipsi des lw sw sll lh addu br cond srl andi slt lui compress lw sw sll lh addu br cond srl andi slt lui eqntott lw sw sll lh addu br cond srl andi slt lui espresso lw sw sll lh addu br cond srl andi slt lui li lw sw sll lh addu br cond srl andi slt lui java des native st loads invoke new field loads constants arithmetic cond array st stores logical field stores stack conversion native st loads invoke new field loads constants arithmetic cond array st stores logical field stores stack conversion hanoi native st loads invoke new field loads constants arithmetic cond array st stores logical field stores stack conversion javac native st loads invoke new field loads constants arithmetic cond array st stores logical field stores stack conversion mand native st loads invoke new field loads constants arithmetic cond array st stores logical field stores stack conversion perl des match subst subr eval double bit split bit right shift assign print list ps match subst subr eval double bit split bit right shift assign print list match subst subr eval double bit split bit right shift assign print list txt html match subst subr eval double bit split bit right shift assign print list match subst subr eval double bit split bit right shift assign print list tcl des expr regexp update incr foreach info set gets proc bind eval case format string array expr regexp update incr foreach info set gets proc bind eval case format string array expr regexp update incr foreach info set gets proc bind eval case format string array demos expr regexp update incr foreach info set gets proc bind eval case format string array hanoi expr regexp update incr foreach info set gets proc bind eval case format string array expr regexp update incr foreach info set gets proc bind eval case format string array ical expr regexp update incr foreach info set gets proc bind eval case format string array xf expr regexp update incr foreach info set gets proc bind eval case format string array native instruction virtual command count distributions 
benchmark show histograms 
left white histogram shows distribution virtual command counts table 
right grey histogram shows distribution native instructions virtual commands execute component command interpretation fetch decode instructions excluded 
omit infrequently executed virtual commands group java commands primary categories 
bars higher clipped exact percentage shown bar 
choosing set commands implement program 
set commands program varies 
result optimizing particular command set commands result broad performance improvements languages 
memory model previous subsection discussed virtual command usage interpreted programs 
discuss interpreted programs access data 
virtual machine implemented interpreter provides mechanism accessing memory 
includes way naming data memory primitives fetch store values 
virtual commands access memory complexity virtual memory model affect performance 
specifically ffl mipsi translates memory access core simulated page tables 
average access memory cost benchmarks native instructions percentage total instructions executed memory model implementation ranges 
aspects performance mipsi low level virtual machine exhibits uniform behavior 
ffl java data stored temporarily thread stacks permanently object fields 
stack data accessed implicitly execution java bytecode fetch operands save results iadd explicitly bytecodes 
object fields specific bytecodes getfield putfield 
stack costs instructions average object field costs instructions average 
account total instructions executed java benchmarks 
ffl perl data stored scalars arrays associative arrays 
perl uses symbol table translate variable names preprocessing phase compiles away translations scalars arrays 
associative arrays perl requires hash table translation average costs native instructions 
percentage total instructions executed support memory model ranges 
results illustrate benefits preprocessing compilation phase 
ffl tcl data named strings stored scalars lists associative arrays 
variable require symbol table lookup translates variable name storage location 
average access memory cost ranges des xf native instructions 
cost varies due number entries symbol table 
percentage total instructions executed support memory model ranges average 
measurements show memory model significant source overhead preprocessing input program perl reduce subsequent runtime overhead memory model 
summary simple interpreters mipsi advantage providing core functionality nearly fixed overhead virtual command 
extreme complex interpreters tcl perl provide highly expressive virtual command sets relatively high interpretation overhead virtual command 
java offers compromise approach reasonably efficient core set functionality means accessing native library code 
applications extensive native libraries substantially reduce reliance interpreted code associated overheads 
architectural impact interpreters section trace driven simulation analyze effect interpreter execution architectural resources cache execution units 
benchmark suite simulate instructions memory identify source nature processor stalls 
simulation technique compiled programs allows compare programs interpreters goal determine significant differences exist interpreted directly executed programs respect hardware resource utilization 
focus behavior memory system explore different cache parameters affect interpreter performance 
simulation results evaluate execution behavior detailed simulator modern microprocessor design dec alpha tullsen 
simulator processes instructions memory executing program sources processor stalls instruction execution 
table lists sources stalls penalties impose simulator measured execution behavior interpreters running programs benchmark suite 
simulated subset specint benchmarks basis comparing performance understood compiled programs interpreted programs 
shows results simulations 
benchmark show percentage issue slots filled processor busy distribution unfilled issue slots due delays imposed various architectural components 
larger size component bar component contributed delays instruction execution 
example tcl interpreter running ical benchmark processor utilization issue slots unfilled instruction cache misses 
draw 
interpreter performance generally independent benchmark interpreted 

interpreters define high level virtual machines perl tcl relatively poor instruction locality simulator predicts slightly fewer stalls real alpha system reasons 
user level instructions program simulated effects system instructions context switches programs 
second execution units simulator uniform instruction issuing rules flexible 
support simultaneous issuing load instructions level data cache modeled cache opposed restricts processor access cycle 
believe minor differences affect 
des compress eqntott espresso gcc li mipsi des mipsi compress mipsi eqntott mipsi espresso mipsi li java des java java hanoi java javac java mand perl des perl ps perl perl txt html perl tcl des tcl tcl tk demos tk hanoi tk ical percentage total issue cycles processor busy short int load delay mispredict dtlb itlb execution behavior 
shows distribution stall cycles issue superscalar processor 
processor busy show percentage filled issue slots 
remaining categories show percentage unfilled issue slots 
define low level virtual machines mipsi java tend instruction locality 

data cache behavior interpreted programs roughly similar spec programs 
rest section addresses points detail 
general trends considering performance benchmarks interpreter group evident interpreters differ interpreter exhibits similar performance behavior benchmarks 
words application specific behavior overwhelmed performance interpreter 
seen example comparing performance spec programs run directly alpha interpreted mipsi 
run directly great deal variation impact architecture example contrast compress li 
interpreted mipsi performance profiles programs quite similar 
large number native instructions executed interpret virtual command dilute performance behavior original application instruction stream 
performance profiles perl tcl similar benchmarks 
comparing behavior spec benchmarks see high level interpreters behave gcc 
relatively poor instruction data locality similar instruction tlb behavior 
cause latency description cycles variable control hazards memory bank conflicts floating point integer multiply instructions short int integer shift byte instructions load delay pipeline delay level cache hit mispredict branch misprediction dtlb data tlb itlb instruction tlb level data cache second level unified cache level instruction cache unified cache table causes 
table sources stall cycles machine simulator 
simulated memory system uses kb pages level direct mapped kb caches instructions data unified second level direct mapped kb cache entry instruction tlb entry data tlb 
simulated branch logic includes entry bit branch history table entry return stack entry branch target cache 
java occupies intermediate point spectrum low high level interpreters reflected architectural behavior 
applications spend relatively little time native runtime libraries des javac mand behave programs interpreted mipsi 
hand applications native runtime libraries heavily hanoi performance profile similar gcc high level interpreters 
kb kb kb kb misses instructions cache size direct mapped java kb kb kb kb misses instructions cache size way java des hanoi javac mand kb kb kb kb misses instructions cache size way java kb kb kb kb misses instructions cache size direct mapped perl kb kb kb kb misses instructions cache size way perl des ps txt html kb kb kb kb misses instructions cache size way perl kb kb kb kb misses instructions cache size direct mapped tcl kb kb kb kb misses instructions cache size way tcl des demos hanoi ical xf kb kb kb kb misses instructions cache size way tcl instruction cache behavior 
shows instruction rates java perl tcl programs function cache size associativity 
rate number misses instructions 
rate shown function cache size graph function cache associativity graphs 
examining closely reveals major sources stalls interpreters include instruction data caches 
load delays significant source stalls stall cycles primarily reflect effectiveness compiler processor instruction scheduling 
important architectural components branch prediction hardware tlb large impact performance 
poor instruction tlb behavior exhibited interpreters spec benchmarks due alpha exceptionally small entry itlb increasing size simulated itlb entries size dtlb effectively eliminates itlb stalls 
stalls short int category primarily alpha specific resulting absence byte load store instructions 
instruction cache see instruction cache performance corresponds type virtual machine implemented interpreter 
mipsi low level virtual machine issue slots lost instruction cache misses perl tcl issue slots lost instruction cache misses respectively 
java interpreter implements lowlevel virtual machine java programs instruction cache behavior 
hanoi benchmarks exceptions explained shows benchmarks spend majority time native runtime libraries 
graph reflects performance native runtime library java interpreter 
measurements section provide insight relationship level virtual machine instruction cache behavior 
recall level abstraction virtual commands increases interpreters execute native instructions interpret virtual command table 
interpretation loops mipsi java execute average fewer instructions virtual command iteration loop easily fits inside instruction cache 
instructions fetching decoding shared iteration remain cache contribute low rate interpreters 
mipsi higher percentage instructions devoted fetching decoding java shared instructions iterations lower cache rate 
perl tcl hand execute thousands instructions virtual command consequently iteration interpreter loop flushes cache shared instructions previous iteration 
shows perl tcl hanoi benchmarks java large number instruction cache stalls kb direct mapped instruction cache baseline architecture 
explore instruction increasing level cache size simulated interpreters executing cache sizes kb types associativity direct mapped way set associative 
shows results experiment 
graphs indicate instruction working set size perl interpreter kb kb range working set size tcl interpreter kb kb range 
interestingly tcl applications application des benefit significantly higher associativity 
cache large hold working set interpreters kb larger cache continues suffer conflict misses 
effect seen comparing graphs way associativity way associativity 
example way set associative kb cache rate misses instructions way set associative kb cache rate drops misses instructions 
explanation behavior average number instructions virtual command executed interpreters applications range corresponds kb instruction data loop iteration 
low associativity cache large hold instructions instructions shared iterations flushed cache due conflicts 
increased associativity conflicts removed interpreters achieve instruction cache performance 
data cache tlb shows percentage wasted issue slots due data cache stalls interpreters typically high significantly larger compiled spec benchmarks 
suggests storing program data occurs interpreted environment carry penalty terms data cache performance 
compiled programs code accessed cycle code interpreted programs accessed iteration interpreter loop 
compared total number instruction data loop iteration program code small percentage data accesses 
data tlb measurements emphasize behavior interpreter overwhelm behavior program interpreted 
compress program provides example native version data working set large entry data tlb resulting issue slots going unfilled interpreted mipsi dtlb misses inconsequential accounting unfilled issue slots 
course program runs slowly interpreted 
architecture summary section explored interaction interpreted programs architecture 
importance instruction cache depends complexity virtual machine defined interpreter 
mipsi java define low level virtual machines interpreter loop generally fits kb instruction cache 
perl tcl kb level instruction cache sufficient effectively capture working set 
architectural perspective interpreter performance largely independent program interpreted 
increased processor performance demand portability security ease interpreted languages major part today computing environment 
studied behavior performance interpreters executing range programs microbenchmarks 
showed performance interpreter attributed solely frequently executed command dispatch loop 
performance linked expressiveness virtual command set effectively virtual commands native runtime libraries way virtual 
showed architectural footprint interpreted program primarily function interpreter programs interpreted highlevel interpreters behave similarly large specint applications gcc 
tempting propose specialized hardware support specific language environments interpreted done past mixed success smith patterson flynn meyers moon ungar patterson 
interpreters studied clear significant potential exists improvement software means 
example implementations java tcl may involve sophisticated compiling runtime code generation symantec ousterhout 
instruction fetch decode overhead reduced threaded interpretation dynamically compiling portions interpreted program native code compiling host machine level load time binary translation eliminating fetch decode overhead altogether bell klint deutsch schiffman andrews sand sites cmelik keppel adl tabatabai wilkinson 
optimizations varying degrees success depending interpreter interpreted program 
believe efforts build specialized hardware interpreters may premature greatest advance come designers interpreters realize performance portability flexibility safety crucial goals 
measurements including java intel architecture running windows nt operating system available www cs washington edu research interpreters 
acknowledgments benefited discussions colleagues including jeff dean dave grove lewis 
david becker warren helped overcome minute technical hurdles 
alan eustace invaluable source assistance atom 
larry dec scott john hale sun instrumental providing version java alpha 
gun sirer dean tullsen taught modify mipsi alpha simulator 
adl tabatabai adl tabatabai lucco wahbe efficient language independent mobile programs 
proceedings acm symposium programming languages design implementation pages may 
su motorola powerpc migration tools emulation transition 
digest papers compcon pages february 
alexander alexander static dynamic characteristics programs 
ieee computer november 
andrews sand andrews sand migrating cisc computer family risc object code translation 
proceedings fifth international conference architectural support programming operating systems pages october 
bell bell threaded code 
communications acm june 
calder calder grunwald zorn quantifying behavioral differences programs technical report cu cs university colorado boulder january 
clark levy clark levy measurement analysis instruction vax 
proceedings th annual symposium computer architecture april 
cmelik keppel cmelik keppel shade fast instruction set simulator execution profiling 
proceedings acm sigmetrics conferenceon measurement modeling computer systems pages may 
deutsch schiffman deutsch schiffman efficient implementation smalltalk system 
conference record acm principles programming languages pages salt lake city utah january 
patterson patterson highlevel language computer architecture 
proceedings th annual symposium computer architecture pages la france june 
diwan diwan tarditi moss memory system performance programs intensive heap allocation 
acm transactions computer systems august 
analysis commercial pl programs 
software engineering june 
flynn flynn directions issues architecture language 
ieee computer october 
foster foster riseman measures opcode utilizations 
ieee transactions computers may 
goncalves appel goncalves appel cache performance fast allocating programs 
proceedings seventh international conference functional programming computer architecture pages june 
hennessy patterson hennessy patterson computer architecture quantitative approach 
morgan kaufmann palo alto ca 
holzle ungar holzle ungar object oriented languages need special hardware support 
ecoop object programming pages 
springerverlag august 
kane heinrich kane heinrich mips risc architecture 
prentice hall englewood cliffs nj 
klint klint interpretation techniques 
software practice experience september 
maynard maynard donnelly contrasting characteristics cache performance technical multi user commercial workloads 
proceedings sixth international conferenceon architectural support programming languages operating systems pages san jose california october 
meyers meyers advances computer architecture 
wiley ny 
moon moon symbolics architecture 
ieee computer pages january 
ousterhout ousterhout tcl tk toolkit 
wesley reading ma 
ousterhout ousterhout happening sun labs 
www com research tcl team html april 
sirer sirer measuring limits fine grain parallelism 
princeton university senior project june 
sites sites chernoff marks robinson binary translation 
digital technical journal 
smith smith rice cook symbol large experimental system exploring major hardware replacement software 
proceedings afips spring joint computer conference pages 
srivastava eustace srivastava eustace atom system building customized program analysis tools 
proceedings acm symposium design implementation pages 
acm 
sun microsystems sun microsystems 
java virtual machine specification 
java sun com doc html 
html 
symantec symantec 
symantec cafe 
cafe symantec com june 
tullsen tullsen eggers levy simultaneous multithreading maximizing chip parallelism 
proceedings nd annual symposium computer architecture pages june 
uhlig uhlig nagle mudge emer instruction fetching coping code bloat 
proceedings nd annual symposium computer architecture pages june 
ungar patterson ungar patterson price smalltalk 
ieee computer january 
wall schwartz wall schwartz programming perl 
reilly associates sebastopol ca 
wilkinson wilkinson kaffe machine run java tm code 
web soi city ac uk homes tim kaffe kaffe html 
