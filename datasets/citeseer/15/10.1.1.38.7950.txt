typed exceptions continuations macro express jon riecke thielecke bell laboratories lucent technologies mountain avenue murray hill nj usa riecke bell labs com queen mary westfield college university london london ns uk ht dcs qmw ac uk 
powerful control constructs modern programming languages continuations exceptions 
interchangeably cases fundamentally different semantically 
consider simply typed functional languages exceptions continuations respectively 
give theorems holds language exceptions holds language continuations 
fortiori theorems imply exception constructs macro express continuation constructs continuation constructs macro express exception constructs 
nearly programming languages contain constructs manipulating control flow jumping 
powerful control constructs exceptions standard ml caml java hand continuations standard ml new jersey scheme 
crude goto allow jumps procedures carry values jump 
crucial differences exceptions continuations 
difference lies fact exception raised control transferred dynamically enclosing exception handler continuations entirely static 
difference lies indefinite extent continuations procedure may invoke continuation created point definition procedure containing definition returned 
upward continuations counterpart exceptions 
hand dynamic nature handlers source additional expressive power 
consequence differences exceptions stack allocated continuations indefinite extent need heap allocated general 
illuminating constitute firm distinction conceive inefficient implementation continuations stack popped compare light 
need absolute criterion comparing expressiveness 
criteria pertinent turing completeness ability break contextual equivalences 
lillibridge compares continuations exceptions terms turing completeness 
argument relies key fact languages simply typed explicit recursion 
lillibridge shows continuation passing style cps transform expressions simply typed language continuations terminate 
second shows property hold exceptions 
argument sheds light distinctions continuations exceptions partial answer lillibridge states 
main problem argument robust 
instance add recursion core language aggressively recursive types language continuations turing complete 
fact lillibridge proof relies special status exn type exception continuation operations 
notion expressiveness generally applicable turing completeness landin impossible introduce assignment pure lisp merely definition :10.1.1.51.4656
proof mere definition interfere interchangeability cons car cdr 
firm distinction having having assignment 
paraphrase landin expressive power assignment evidenced fact break law products law product called formally lx second author argue expressive power callcc 
main result continues showing equivalence related equivalence broken exceptions exceptions encoded continuations 
conversely second main result terms quite easily distinguished exceptions distinguished continuations 
proof technically novel relies answer type continuations polymorphic sense inaccessible 
languages precise descriptions languages call value version pcf vpcf short enhanced version continuations vpcf enhanced version exceptions vpcf 
vpcf core language grammar int lx rec succ pred syntactic category ranges simple types category values category terms 
recursive function argument defined construct rec body recursive definition 
vpcf includes divergent term definable recursion simplify certain proofs 
standard conventions identify terms renaming bound variables notation capture free substitution 
simplify notation omit types reconstructed context op succ pred operations 
typing rules vpcf appear table 
judgement typing context finite partial function variables types domain dom 
table 
typing rules vpcf 
var dom int int op int op int int lam lx app omega rec rec operational semantics vpcf evaluation contexts :10.1.1.51.4656
evaluation contexts defined grammar delta succ pred contexts define left right call value evaluation strategy specify location subterm reduced 
words closed typed term parsed evaluation context redex hole context 
operational rules lx succ pred pred rec lx rec vpcf extensions reflexive transitive closure 
notion contextual equivalence due morris definition 
suppose vpcf terms contextually equivalent written vpcf vpcf context delta term zero holes int int iff relation appropriately subscripted extensions vpcf 
vpcf exceptions enhanced language exceptions called vpcf obtained making additions grammar vpcf exn raise handle symbol ranges infinite set typed exception constants 
handle construct expression exception handled second handler third code run handler installed 
typing rules vpcf vpcf exception exn raise exn raise handle exn handle operational semantics extension vpcf 
grammar evaluation contexts raise handle denote set evaluation contexts contain handler spine 
operational rules vpcf handle handle raise vpcf continuations language continuations called vpcf obtained adding constructs syntax types terms cont callcc throw additional typing rules new constructs callcc cont callcc throw cont throw operational semantics requires new class values continuations additions grammar evaluation contexts gx callcc throw throw operational rules vpcf callcc lx gx throw gx exceptions encode continuations difference exceptions continuations explained intuitive level exception raised program return site exception raised 
continuations upward escaping sense may stored inside lambda abstractions invoked multiple times 
instance expression see callcc lk throw lx throw ly grabs continuation immediately throws functional value continuation 
continuation function called 
argument stated yield formal difference need concrete show expressiveness allowing upward continuations 
proposition establishes difference proposition 
vpcf term int int 
lx int int lp lx int int ly int int lp vpcf vpcf 
proposition deduce exceptions express callcc throw 
suppose instance define closed vpcf terms having operational behavior callcc throw 
function vpcf yielding counterexample proposition 
see vpcf part pick 
lx ly abbreviation ld fresh variable 
may show 
example easily tested standard ml new jersey 
left proving vpcf 
carry proof define way relating terms containing occurrences 
define substitution map variables terms 
necessary relation called defined induction lx lx op op similarly rec handle raise substitutions domain variable domain 
table 
natural semantics vpcf succ pred pred lx raise raise handle raise handle raise op raise raise raise raise raise raise raise raise raise raise raise raise raise raise handle raise raise handle raise raise handle raise rec lx rec prove proposition easily natural semantics form semantics rewrites term final answer step relation 
range results case values uncaught exceptions raise 
define relation rules table 
hard show natural semantics essence just reformulation original operational semantics lemma 
suppose iff raise iff raise 
need lemma stating connection terms related lemma 
suppose lemmas give machinery prove vpcf part proposition 
suppose vpcf term int int 
suppose delta vpcf context int int 
note 
lemma iff lemma iff continuations encode exceptions continuations static flavor continuation reified escapes throwing continuation returns control point continuation reified 
exceptions hand dynamic nature raising exception returns control handler determined dynamically 
turns give additional expressive power procedure may dynamically handle exceptions raised inside arguments 
give evidence expressive power prove proposition 
suppose closed vpcf lambda abstractions int int int int int 
define ld ld vpcf lambda abstractions vpcf vpcf see vpcf define lh handle ld ld raise 
equivalence vpcf explained intuitively 
essentially just cases ignores functional argument case return result calls argument 
case control escape performs callcc throw get stuck evaluating infinite loop 
direct formalization intuition techniques section proves elusive 
proof goes applying cps transform vpcf target language vpcf formed enhancing types new base type type additional term constructors intuitively representing abstractness answer type continuations 
abstractness answer type knowledge exploited quite way proof 
cps transform divides translation types terms 
types define int int cont represents values type represents computations type notions derived moggi account side effects computational lambda calculus 
cps transform terms table takes derivation judgement derivation judgement domain table 
cps transform vpcf vpcf var lk int lk int int omega lk op int lk int lm int op int fresh int lk int lm int fresh lam lk lx fresh app lk lm ln fresh rec lk rec fresh callcc cont lk lm cont fresh throw cont lk lm cont ln fresh hard prove proposition 
derivable derivable 
proof goes induction structure typing derivation 
prove techniques plotkin translation adequate theorem adequacy 
consider closed vpcf term int 
variable assumed type int 
iff key lemma proving proposition lemma 
suppose closed recursion free lambda abstractions vpcf int int int int int 
ld ld vpcf numerals proof 
lambda abstractions simple reduction shows vpcf lk ld lk lm lm ld lk series lemmas show equivalent sense vpcf forms lx int int lx int int lx int int ly int lx int int ly int lx int int ly int lx int int ly int second fourth cases imply vpcf lk 
third cases imply vpcf lk lm 
fifth case implies vpcf lk 
sixth case implies vpcf lk 
cases equivalent term depend numerals vpcf adequacy vpcf proof proposition follows straightforwardly 
directions typed languages shown continuations exceptions encode 
may expected know formal proof fact surprised subtlety proof failure initial brute force attempts 
superficial similarity uses continuations exceptions confused authors purported exceptions terms syntactic sugar callcc appeared literature 
addition showing impossibility macro encodings terms believe examples shed light nature difference static dynamic control 
particular exceptions functions statically knowledge pass arguments results communicate exception 
may seen failure modular reasoning 
sitaram felleisen equivalence similar section argument additional expressive power prompt control delimiter 
regard evidence essentially dynamic nature prompt compare dynamic wind scheme 
gave informal argument validity equivalence continuations hint formal proof 
results leave open issues 
ways showing various forms exceptions macro express 
examples concern form closest spirit caml standard ml local exceptions powerful lisp handlers powerful 
second results carry untyped languages 
fact proof exceptions encode continuations untyped versions vpcf vpcf clear adapt proof untyped setting 
proof methods developed probably applicable 
instance show typed cps transform recursion free terms cps type representable target recursion free vpcf terms 
gives kind representation theorem lines danvy lawall typed setting 
interesting consequence prompts target cps transform fact may lead full abstraction theorem vpcf 
barendregt 
lambda calculus syntax semantics volume studies logic 
north holland 
revised edition 

bierman 
computational interpretation lambda mu calculus 
proceedings symposium mathematical foundations computer science number lecture notes computer science 

danvy lawall 
back direct style ii class continuations 
proceedings acm conference lisp functional programming pages 
acm 

felleisen 
theory practice class prompts 
conference record fifteenth annual acm symposium principles programming languages pages 
acm 

felleisen 
expressive power programming languages 
science computer programming 

gosling joy steele 
java tm language specification 
addison wesley 

kahn 
natural semantics 
proceedings symposium theoretical aspects computer science volume lect 
notes computer sci new york 
springer verlag 

kelsey clinger rees 
revised report algorithmic language scheme 
available www neci nj nec com homepages kelsey rs ps gz 

landin 
generalization jumps labels 
report systems programming research august 

landin 
generalization jumps labels 
higher order symbolic computation 

xavier leroy pierre weis 
manual de du language caml 
paris 

lillibridge 
exceptions strictly powerful call cc 
technical report school computer science carnegie mellon university 

lillibridge 
uncaught exceptions strictly powerful call cc 
higherorder symbolic computation 
appear 

meyer wand 
continuation semantics typed lambda calculi summary 
parikh editor proceedings conference logics programs lecture notes computer science pages 
springer verlag 

milner tofte harper macqueen 
definition standard ml revised 
mit press 

moggi 
notions computation monads 
information control 

morris 
lambda calculus models programming languages 
technical report lab 
computer science 


ong stewart 
curry howard foundation functional computation control 
proceedings acm sigplan sigact symposium principle programming languages paris january 
acm press 

plotkin 
call name call value calculus 
theoretical computer sci 

reynolds 
discoveries continuations 
lisp symbolic computation november 

sitaram felleisen 
reasoning continuations ii full abstraction models control 
proceedings acm conference lisp functional programming pages 
acm 

thielecke 
continuation twice implications expressive power call cc 
higher order symbolic computation 

van wijngaarden 
recursive definition syntax semantics 
steel jr editor formal language description languages computer programming proceedings ifip working conference pages 
