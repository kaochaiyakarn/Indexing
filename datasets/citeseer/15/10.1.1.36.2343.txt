autonomous agents business process management jennings norman faratin brien dept electronic engineering queen mary westfield college university london london ns uk 
jennings faratin norman qmw ac uk bt research labs heath ip re uk 
paul info bt uk complete mailing address professor nick jennings department electronic engineering queen mary westfield college university london london ns uk tel fax 
adept collaborative project dti epsrc intelligent systems integration programme 
project partners bt laboratories ici engineering university queen mary westfield college 
traditional approaches managing business processes inadequate large scale organisation wide dynamic settings 
internet intranet technologies widespread increasing number business processes exhibit properties 
new approach needed 
describe motivation conceptualisation design implementation novel agent business process management system 
key advance system responsibility enacting various components business process delegated number autonomous problem solving agents 
enact role agents typically interact negotiate agents order coordinate actions buy services require 
approach leads system significantly agile robust traditional counterparts 
help demonstrate benefits companion describes application system real world problem faced british telecom 
successful companies organise run business activities efficient manner 
core activities completed time specified resource constraints 
stay competitive today markets companies need continually improve efficiency business activities need completed quickly higher quality lower cost 
increasing awareness benefits potential competitive advantage designed business process management systems provide 
systems substantially improve efficiency ensuring business activities better scheduled executed monitored coordinated 
design implementation corporate wide business management systems complex activity 
software support distributed design operation concurrent activities highly interdependent 
activities real time component require ability access legacy software need context dependent execution operation depends state previous activities environment reactive systems 
short business management demanding domain requires state art software solutions 
decided conceptualise design implement business process management system agent approach 
project adept advanced decision environment process tasks business process viewed collection autonomous problem solving entities negotiate come mutually acceptable agreements coordinate interdependent sub activities 
main advantages approach traditional counterparts management information systems workflow management enterprise integration offers greater flexibility agility adaptability 
contribution main areas business process management systems agent systems 
case represents novel means implementing software solutions 
insights gained assist designers business process management systems evaluating appropriateness benefits agent paradigm identifying potential pitfalls offering guidance structure applications 
case represents applications multiagent techniques real world problems identified major shortcoming discipline date 
contributions field automated negotiation previous assumptions unrealistic practical implementations failed adequately capture richness negotiation required practical applications 
remainder structured follows 
section describes domain business process management outlines rationale agent solution identifies solution key abstraction mechanisms 
section details adept system structure agent architecture 
section places context describing approaches business process management related agent systems 
section provides recommendations agents business process management highlights open issues need fully addressed 
companion demonstrates concepts described applied british telecom bt business process providing quote installing network customer premises 
agent business process management section introduces domain business process management section presents case agentbased solution section identifies justifies adept key conceptual components section indicates components build agent solutions section 
basics business process management medina mora categorise processes organisation material processes assembly physical components delivery physical products information processes related automated partially automated tasks create process manage provide information business processes market centred descriptions organisation activities implemented information processes material processes 
detail business process split number constituent components 
firstly needs definition business process left branch 
describes specification language activities need performed participants perform interdependencies exist specification languages vary greatly details conceptual level broadly similar provide set concepts useful describing processes tasks dependencies tasks required roles perform specified tasks 
activities process description may automated involve humans interacting computers 
secondly business process needs executed managed right branch 
software system needs devised capable ensuring process description realised practice 
system allow human manual activities assigned appropriately provide access software tools databases spreadsheets design software required complete tasks ensure dependencies tasks satisfied 
software transparently support multiple invocations instances process task 
types business process management systems devised vary enormously ad hoc interactions set paths set patterns interactions repetitive predictable processes simple hard wired coordination rules dealing predominantly human oriented activities groupware appli 
important aspect successful business process management optimisation process 
step endeavour understand process currently operates typical systems analysis activity involves interviewing people expert knowledge process studying relevant system documentation second step explicitly reconsider redesign process 
business process reengineering typically carried order increase customer satisfaction improve efficiency business process operations increase quality products reduce costs meet new business challenges opportunities changing existing services introducing new ones 
final step encode revised business process description business process specification language 
adept deals exclusively final step assumes necessary process re engineering taken place 
cations entirely automated activities 
see detailed survey classification 
interested large scale hundreds activities organisation wide business processes 
analysis identified key characteristics class application processes dynamic unpredictable 
impossible give complete priori specification activities need performed ordered 
detailed time plans produced disrupted unavoidable delays unanticipated events people ill tasks take longer expected 
coordination tasks needs handled similarly flexible manner 
processes involve mixture human activities automated tasks 
exact ratio varies applications 
issues relating roles interactions humans system dealt companion 
multiple organisations may involved process 
organisation attempts maximise profit activity 
processes physically distributed distribution may site country continents 
organisations decentralised ownership tasks information resources involved business process 
different groups organisations relatively autonomous control resources consumed cost time frame 
information systems idiosyncratic representations managing resources 
high degree natural concurrency interrelated tasks running point business process 
requirement monitor manage business process 
control resources constituent subparts decentralised need place constraints entire process total time total budget 
case agent solution traditional workflow approach business process management involves describing entire process centralised perspective 
complete list activities paths provided criteria particular path specified ordering constraints actions 
complete specification business process management system comparatively straightforward task executing 
approach works simple business processes 
led range commercial products inconcert staffware action workflow estimated market size 
class business processes considered inherent shortcomings mean traditional approach unsuitable lacks reactivity workflow management systems require priori representation business process potential deviations process ii semantics workflow man agement systems lack appreciation content business process decisions nature information generated iii extensibility systems extensible line iv resource management workflow management systems control business process rely process fully dimensioned heterogeneity workflow management systems tend take centralised view single management engine operate multiple server platforms multiple client operating systems 
overcome limitations fundamentally new approach needed 
approach responsibility enacting specific business process activities constituent components maintain centrally components active 
business processes main activities assigned particular problem solving entity entity responsible ensuring activity fulfilled specified constraints 
means activities performed left responsible entity determine 
cases responsible entity needs services achieve specific sub activities interactions may involve responsibility 
delegation continue levels nesting 
responsibility means business process management system needs considerably sophisticated traditional counterpart 
decisions traditionally process description design time moved execution system determined run time 
executing fully defined process description execution system determine activities performed resource activity consume perform performed interdependencies resolved 
conceptualisation natural way design implement business process management system responsible entity autonomous agent 
agents specific goals achieve interact manage interdependencies 
context agent viewed encapsulated problem solving entity exhibits properties autonomy agents perform majority problem solving tasks direct intervention humans agents control actions internal state 
social ability agents interact deem appropriate agents order complete problem solving help activities 
agents take initiative exploit unexpected opportunities appropriate 
responsiveness agents perceive environment respond timely fashion changes 
secondary factors point agents suitable solution technology include domain involves inherent distribution data problem solving capabilities responsibilities conforms basic model distributed encapsulated problem solving components ii integrity existing organisational structure autonomy subparts needs maintained appeals autonomous nature agents iii interactions fairly sophisticated including negotiation information sharing coordination requires complex social skills agents iv problem solution prescribed entirely start finish problem solvers need responsive changes environment unpredictability process proactively take opportunities arise domain includes number legacy systems especially databases need incorporated business process wrap existing code autonomous agent interact flexibly agent social abilities range new applications 
main benefits agent approach traditional workflow view follows offers greater flexibility actions agent current situation prescribed advance ii offers greater agility new services added configured minimal effect agents iii offers greater adaptability agent choices guided feedback received previous invocations particular paths business process 
relative drawbacks agent approach offers fragmented view process difficult ensure process wide constraints satisfied 
balance felt benefits outweigh drawbacks issue returned section 
conceptual framework main components adept conceptual framework interacting autonomous agents responsible performing particular activities 
term service denote activities manual automated agent manage 
service corresponds conceptual unit problem solving activity business process 
examples services include designing artefact providing insurance quote customer reviewing scientific journal 
services characterised functions take possibly inputs undertake computation varying simple database look design chemical factory produce possibly outputs 
services go phases specification detail needs done section ii provisioning determine agent responsible executing service terms conditions section iii management execute service line agreed terms conditions section 
simplest service called task represents atomic unit problem solving adept system 
may performed human automated program 
atomic units combined form complex services adding ordering constraints conditional control 
service description language sdl developed specify services see section details language corresponds adept process definition language section 
agents autonomous control dependencies 
agent requires service managed agent simply instruct start service service provisioning requires agents come mutually acceptable agreement terms conditions desired service performed contracts called service level agreements slas 
mechanism making slas inter agent negotiation process parties contradictory demands move agreement concession making searching new alternatives 
basic context form adept negotiations identical 
involves connecting agent requires service client willing provide server 
term negotiation service oriented 
perform negotiations agents need protocol specifies role current message interchange agent making proposal responding accepting rejecting proposal 
additionally agents need means describing referring domain terms involved negotiation example agents need sure describing service may different local name represent different manner 
heterogeneity inherent 
major features distinguishes agent systems object oriented systems traditional forms distributed computing 
tions department typically models information resources way section 
agents interact number semantic mappings transformations may need performed create mutually comprehensible information sharing language see section details 
business process applications need reflect organisational structure modelling process describing behaviour problem solving components section 
range applications considered types relationship observed peer peer organisational hierarchies 
reflect relationship types adept uses notion agency 
agency recursively defined consisting single responsible agent possibly empty set tasks responsible agent execute possibly empty set sub agencies example agency single responsible agent distinct tasks td td sub agencies 
responsible agent represents interests agency peers communication agency go responsible agent 
agency sub agency agency typically behaves cooperative manner responsible agent agent represents interests agency wider community 
relationship sub agency responsible agent viewed type social commitment 
means responsible agent requests service sub agencies request refused reason 
sub agency subroutine 
retains degree local autonomy 
example manager design department may request design engineer particular project 
engineer perform task request accepted conditions request met open negotiation 
contrast relationship peer agents open agent obliged accept request peer 
agent come agreement peer agent best interests 
agency structure provides mechanism encapsulation abstraction services 
example consider agency illustrated 
suppose diagram represents structure organisation design department agency case responsible agent represents department manager agent departments agencies may contact design department represents single design engineer capable performing distinct tasks atomic services agencies say represents team 
furthermore suppose department manager registered cost design network service provided design department agencies organisation 
department manager able register service know able provide service agents community certain conditions 
suppose manager able provide cost design network service design engineer able provide design network service 
engineer collaborate surveyor ensure design proposed consistent geographical requirements proposed network site 
manager register cost design network service design engineer register peers responsible agent service design network agent representing team register survey site service 
subject negotiated contract department manager may agree cost design proposed network installation certain characteristics particular location agent note necessary agent requiring cost design network service know achieved nec 
agency contain task sub agencies meaningful 

peer agencies responsible agents may communicate crossing agency boundary 
example agency peer agency agency peer agency agency peer agency 
negotiated contract design network service may required cost design network service offered may arranged run time 
choice system designer 
essary department manager know design network survey geographical requirements particular site 
provides mechanism agents represent reason services appropriate level abstraction 
general services agent registers community tasks able perform plus services constructed combination tasks services available sub agencies 
unusual circumstances agent services provided peers combination services construct new service 
lifetime agent may register new services available withdraw services necessary due agents tasks unavailable 
building business process applications adept adept system relieves engineering burden building business process applications automating allocation scheduling execution decisions management level specified design time traditional systems 
refer section details activities realised 
functionality enables design engineer concentrate specification application layer adept implementation process involves number constituent activities 
firstly specifying services adept sdl determining distribution system agents agencies 
secondly defining sla template represents service basis issues need settled particular service oriented negotiation 
example sla template service may specify names client server name service price service time service provided required slots sla 
different service sla template may additionally specify service quality service volume relevant negotiation issues 
thirdly providing acceptability ranges sla slots determined inter agent negotiation maximum minimum price paid particular service shortest time service completed maximum number concurrent invocations service 
reservation values represent agent domain knowledge service constrain process service provisioning 
specifying information models agents information sharing able interoperate despite heterogeneity local representations 
defining sla template providing reservation values services fairly simple knowledge acquisition tasks cases see companion details 
sdl specify services realised different information models related considerably complex time consuming activities 
issue dealt length section discussed remainder section 
service agent provides sdl description produced 
description consists name unique service set inputs set outputs guard body 
inputs specify information service 
inputs mandatory optional 
mandatory input provided 
management application layers supported agent infrastructure provides basic interoperation capabilities heterogeneous distributed components business process management system 
current implementation infrastructure corba compliant common object request broker architecture distribution platform 
adept system restricted corba platform 
distribution platform may employed provided mappings available convergence layer layer provides technology neutral infrastructure interface 
invocation service 
optional input provides information service provider may enable service performed quickly better quality necessary 
inputs categorised origin may provided client server 
inputs example service prepare table mandatory man inputs provided client cli provided server ser provided optional opt input provided client server 
distinctions outputs service assigned value server output information object home seat allocation 
inputs outputs defined terms information model agent responsible service see section 
convention name information object prepended name information model defined 
instance inputs outputs prepare table service information objects defined server home information model 
guard boolean condition relating state world service executed 
evaluated service invoked 
evaluates false service fails body service processed 
example service prepare table requires number guests equal number people accommodated 
guard evaluates true agent starts executing service body 
body service description specifies service executed consists restrictions order component services tasks atomic services conditions service deemed successful information flows component services 
body composed single block may composed nested sub blocks 
block syntax sequence sequence services para services performed parallel para services performed parallel loop service iterates condition holds 
consists sequence block para para sub blocks 
outside block refer completion state block 
example block identifier prepare identifies para sub block 
block identifier completion condition meal block value true block refers successfully completed false failed unknown commenced process executed 
comma separated list services conditionals blocks 
example execution list block meal sequence para sub block organise para sub block prepare single service eat meal para sub block clean 
execution list may include conditional statements 
statements test piece information 
example 
procedural language languages typically require rigorously specified flow control 
body executed autonomous agent unpredictable environment felt control decisions best left agent determine runtime dictated designer compile time 
adept sdl body specifies partial flow control restrictions order degree concurrency execution completion expression supplies agent completion logic block terms success fail unknown 
agent complete service appropriate means current circumstances 
sub block organise tests friends ask meal 
set friends non empty identifier friends evaluates true evaluates false 
block service conditional completion state evaluate success fail unknown 
completion state expresses block service conditional completed successfully 
block executed executed completion state unknown 
loop block type may return unknown finished executing unknown returned block executed 
conditional may return unknown relies information object exist attribute information object unknown value 
services get executed information values change completion states change 
completion expression block meal states block successfully completed meal organised prepared eaten cleaned 
components fails block fails 
services called referring name providing sufficient parameters executed 
example service prepare table called single parameter 
parameter choice output plan service specified syntax plan choice 
note keyword service refers service block situated information service friends friends input service 
application layer instantiated business process defined executed managed functions adept agents described section 
realising agent functionality section describes adept conceptual framework realised 
section describes functional architecture adept agent section deals inter agent communication issues 
description architecture communication infrastructure support agent key activities service provisioning section service management section undertaken 
functional architecture adept agents consist number distinct functional modules responsible handling inter agent negotiation interaction management module imm assessing agent current problem solving situation situation assessment module sam executing services service execution module sem 
modules utilise persistent information agents environment stored acquaintance models ams information stored self model sm 
agent sends receives communications communication module cm 
self acquaintance models self acquaintance models respectively agent repositories knowledge environment 
self model agent maintains information services provide reservation values resources available current schedule activity 
acquaintance models stores information existence known capabilities agents histories past encounters knowledge model information 

agent architecture grate archon 
interaction management module imm responsible provisioning services negotiation 
tries services agent requires acquaintances decides services agent provide terms conditions 
case services provisioned different modes depending client agent intended pattern usage server agent scheduling capabilities service provisioned time needed agreement covers precisely invocation ii demand service invoked client needed basis time frame subject maximum volume measurement 
process obtaining service agent initiated sam 
sam indicates desired mode provision 
imm responsible determining agent agents approach negotiation strategies employ imm decision making supported types information scheduling constraints emanating sam knowledge agent preferences particular agents service prices 
represented sm reservation values issue negotiation represented sm knowledge capabilities agents represented am 
knowledge agent negotiation model section imm generates initial proposals evaluates incoming counter proposals produces counter proposals intention reaching mutually acceptable agreement provision required service 
process deciding services supply initiated receipt proposal agent 
proposal evaluated terms feasible defined sam beneficial decision accepted rejected modified 
process expanded section 
situation assessment module sam responsible assessing monitoring agent ability meet slas agreed assessing agent ability meet slas currently negotiation 
involves main activities scheduling services tasks ii handling high level exceptions occur services tasks executed 
scheduler maintains record problem solving resources agent controls tasks available negotiated slas client indication resources committed 
resource information coupled coarse grain approximate scheduling algorithm determine proposed slas satisfied service provisioning phase fine grain scheduling algorithm determine services executed times service management phase 
coarse grain scheduling initiated server imm receives proposal agent aim decide request feasible 
ascertain imm asks sam proposed schedule acceptable 
clearly advance situation sam provide estimate agent circumstances may change point check time service required execution 
sam uses knowledge current resource commitments commitments may follow agent ongoing negotiations generate responses accept proposed schedule satisfiable reject agent satisfy proposed schedule revise proposed schedule satisfiable service pre satisfiable specified alternative 
fine grain scheduling agreed sla place 
relates fixing particular time service executed specific set agent resources deployed execution 
resources reserved agreed sla executed client 
furthermore service provisioned demand manner sam uses agreed volume invocations predict demand resources agreement 
high level exception handler analyses service execution exceptions occur certain circumstances tries formulate set recovery actions prevent service failing 
example execution particular service sem may realise requires subsidiary service sla agreed subsidiary service little path business process 
sam requests imm arrange service available doing 
second example service delayed sam may decide locally reschedule achieved violating existing sla request imm sla attempt agree new schedule service consumer existing sla met terminate altogether pay penalties specified sla re negotiation fails 
service execution module sem responsible managing services execution 
involves main activities 
firstly service execution management involves parsing service sdl firing constituent subparts logic specified completion condition schedule specified sam 
particular requires invoking suspending resuming terminating tasks services management enacted cm see section 
task service execution instance assigned processing thread multiple services may executed single agent time 
sem second main activity information management 
involves routing information tasks services agents execution specified sdl see section 
sem performs low level exception handling 
involves monitoring execution tasks services unexpected events reacting appropriately 
event task failure example sem may recover attempting restart task schedule met achieved refer problem sam re provisioning renegotiation see section 
communication module cm responsible packaging messages destined agents shared communication language information model receipt interpretation messages agents tasks see section details 
task management activation suspension resumption task messages routed sem tasks managed agent 
service execution management initiation termination service provided agent existing sla messages routed agent sem service provider consumer agent 
negotiation messages routed agent imm agent negotiated 
addition cm checks validity incoming messages ensure correct context agent receives counter proposal agent negotiating appropriate error message generated translates content message shared information model agent local information model 
inter agent communication agents communicate agent communication language acl 
adept acl consists messages containing limited number primitive message types identity sender recipient agent identifiers thread communication service concerned information model contents message understood 
altogether message types table negotiation imm service execution sem 
addition requirements agents share common message syntax interpret different message types uniform manner information shared agents common semantic interpretation 
significant problem interacting agents necessarily model information consistent way suppose example network design department agent telecommunications interprets location customer site mean postal address 
team may understand symbol location refer site grid standard survey map 
design department requires survey customer site agents different models information understand 
approach common information model agents may share information 
information model built number basic information object classes adept boolean adept float adept integer adept char class prepended name information model case adept 
class adept information model contains number named slots containing adept information objects 
example object type adept time may specified follows information model specification parsed create representation model native language agent clips prolog 
adept model application specific common information model built may example specify information object classes customer details may include name address contact number concrete example information objects bt application companion 
event business process management system developed scratch agent designer choose model domain tasks 
cases business process tasks involve legacy software database old customer records built different model information 
furthermore agents representing interests different companies interact common information model reflect information sharing needs organisations extremely identical models internally 
reasons agents ability manage heterogeneous information models transform information expressed task specific organisation specific models common information model 
transforming information internal common model simple schema translations specify mapping objects model may 
example agent may provided function 
information model understood specification symbols agent uses decisions 
class adept time adept integer year adept string month adept integer day adept integer hour adept integer minute adept integer second transforms internal representation time point information object class adept time illustrated 
schema translations advantage computationally cheap basically look table mappings 
costly produce maintain schema translations specified agent system significant modification may required information model changed highly application dependant 
furthermore required schema translation specified agent communicate information required 
alternative deep representations internal common information models referred ontologies search transformation information object model 
initial production ontology solutions costly schema translation advantage potential reused 
reasoning ontologies computationally expensive 
design trade offs number methods manipulation combination schema translations explicit ontological representations generate novel schema translations 
method employed existing schema exists attempt build schema combining various components 
example schema translating interval represented start points may constructed schema translating single time points 
area research 
service provisioning performance adept system various stakeholders offer consume services intimately related efficiency inter agent negotiation process 
agents need able beneficial agreements reasonable time frame excessive resources computational 
negotiation enacted decentralised fashion arbitration third party intervention processes creates bottlenecks susceptible failure 
consequently agent negotiation capability agent imm 
cope variety negotiation situations agent may find imm needs number different negotiation strategies tactics 
vary agent behaviour competitive 
range behaviour necessary negotiating peer differs negotiating subsidiary agent negotiating agent external organisation differs negotiation agent organisation negotiation requires rapid agreement differs negotiation time plentiful 
detail number requirements service oriented negotiation emerged business process applications studied adept service provided agent 
available services may identical characteristics may vary dimensions quality price availability 
individual agents clients servers different services different negotiation contexts 
negotiations range number quantitative price duration cost qualitative type reporting policy nature contract issues 
successful negotiation requires range issues resolved satisfaction parties 
agents may required trade offs issues faster completion time lower quality order come agreement 
social context inter relationships participants influences way agents negotiate 

drawn business process domain subsequent network management led believe applicable service oriented negotiation general 
involve entities organisation department generally cooperative nature 
negotiations inter organisational competitive 
groups agents negotiate service negotiations infrequent 
agents autonomous factors influence negotiation stance behaviour private available opponents especially inter organisational settings 
agents know utilities opponents place various outcomes know reasoning models employ know opponent constraints know agreement possible outset participants may non intersecting ranges acceptability 
communication channel negotiating agents private 
agents competing provide services check behaviour opponents 
time important consideration negotiation 
timings important distinct levels time takes reach agreement reasonable ii time negotiated service executed important cases crucial 
means agents involved unnecessarily complex time consuming negotiations time spent negotiating reasonable respect value service agreement 
means agents hard deadlines agreements place occurs mainly multiple services need combined closely coordinated 
order satisfy requirements number constituent components need designed specified protocol indicating messages sent negotiation section ii structure representing issues negotiation take place section iii reasoning model determine agent behaviour negotiations section 
negotiation protocol agents adhere adept negotiation protocol service provisioning 
state transition arcs represent participants utterances servers clients 
negotiation initiated client utters state state 
server indicate capable state state failure 
server acknowledged capability client knows capable information contained am client may send proposal state 
server reject proposal state failure accept proposal state state 
server accepts client may deny contract server state failure confirm contract state success 
server state client may accept new contract state reject state failure new contract state 
may transitions states 
client eventually accepts contract state server may decide award contract client state success deny client state failure 
negotiation issues slas structures agents negotiate 
represent bid table negotiation final contract successful negotiation 
sla structure derived types legal contract regulate current business transactions 
values contained slots represent conditions providing consuming service server client agent respectively 
agents negotiate multiple issues values different slots time 
detail service name service agreement refers sla id sla unique identifier covering case multiple agreements service 
server agent client agent represent agents party agreement 
delivery type identifies way service provisioned section 
sla scheduling information sam sem service execution management see section duration represents maximum time server take finish service start time time represent time agreement valid 
case agreement specifies agent chl invoke agent ndd cost design network required service execution take minutes 
agreement contains meta service information volume invocations permissible start times price paid invocation penalty server incurs violation client info specifies information client provide server service invocation case chl provide customer profile reporting policy specifies information server returns completion 
negotiation reasoning model reasoning model determines agent behaviour negotiation context 
responsible initiating negotiation obtain desired service responding proposals agents determining proposals accepted rejected determining counter offers counter offers 
reasoning undertaken imm 
detail imm reasoning components see formal specification supported information maintained agent models agent working memory section 
evaluation reasoner section takes proposals counter proposals coming agents determines accepted rejected counter proposal generated 
counter proposal appropriate control handed strategic tactical reasoners produce response 
strategic reasoner decides coarse level granularity agent approach particular negotiation section 
example cooperative competitive time resources primary consideration tactical reasoner fills slots sla way chosen strategy section 
information negotiation reasoning components main repositories information working memory agent models 
represents transitory information related ongoing negotiations represents persistent storage stable information 

legal enforcement actual payment penalties handled adept system time 
information stored working memory structured notion negotiation thread 
thread essentially record history utterances related particular negotiation need finding server particular service 
includes messages agent sent messages agents sent strategies tactics agent deployed current status negotiation threads cases agent managing multiple threads negotiation service service earliest start latest times 
context supporting negotiation agent models represent agent private beliefs environment 
am includes agency agents unique names individual members agent agency agency typology agent relationships peer subsidiary agent community members see section agency status agents organisation external agency capacity agents provide services agent needs negotiation protocol interaction histories persistent records negotiation threads 
sm includes service descriptions services agent perform indication number concurrent invocations permissible commitments agent slas agent reservation values services consumes provides agent preferences various issues negotiation expressed scoring function 
evaluation reasoner evaluation reasoner active agent receives proposal counter proposal agent 
receipt message agent computes utility attains proposal 
uses additive scoring function slot sla slot assigned weight representing relative importance issue agent 
example consider case depicted ndd agent receives sla proposal 
ndd goes slot proposal assigns measure desirability utility rating value contained 
raw utility values multiplied weighting factor indicates relative importance summed slots 
process produces single utility value proposed sla 
parallel agent sends offer just received tactical reasoner see offer agent produce current strategies tactics 
computed offer returned evaluation reasoner rated aforementioned scoring function 
utility offer agent sent equal utility offer just received offer accepted provided meets scheduling constraints coming sam 
acceptance involves conditional commitment server execute specified service sla terms conditions 
commitment conditional client confirm deny contract 
assuming client confirms contract terminates negotiation threads service instance 
second outcome sla evaluation proposal rejected 
occurs deadline reaching agreement reached agent selected perform service 
final evaluation outcome offer accepted rejected 
case agent generates counter offer 
counter offer evaluation reasoner assessment opponent negotiation behaviour current thread 
evaluation confined current offer instance incorporates relationship offer previous ones thread 
particular agent classifies behaviour opponent mutually exclusive states conceding utility recipient offer greater previous offer received agent ii exploiting utility recipient offer previous offer received agent iii utility recipient offer previous offer received agent 
direction change agent uses negotiation thread history determine rate change state 
agent calculates conceding exploiting intensifying lessening constant 
pieces information passed strategic reasoner uses determine strategy successful change needed 
strategic reasoner strategic reasoner invoked evaluation reasoner case ongoing negotiation sam new negotiations 
case purpose reasoning level set broad guidelines agent behave particular negotiation context 
current implementation guidelines relate determining relative importance classes behaviour take time resources opponent behaviour primary basis computing offer 
time important negotiation deadline 
resources need considered agent expends amount appropriate value contract 
opponent behaviour considered ensure agent exploited negotiation 
relative importance classes expressed assigning series weights alternatives 
new negotiations agent receives information sam service required time uses am information number known suppliers service uses am information agent relationship potential service provider organisation external organisation set strategy 
strategic decision relates logistics negotiation negotiate negotiate agent agent negotiated negotiation proceed sequentially parallel 
service provider agent real choice level 
providers agent uses heuristics manage aspect process 
having decided logistics agent determine behave 
example rules setting agent strategy justification shown 
addition setting strategy agent records expectation negotiation develop terms speed converge response opponent 
information monitor progress ongoing negotiation 
ongoing negotiations role strategic reasoner determine current strategy successful terms agent predictions development terms utility agent obtaining deal fulfilling agent negotiation objectives 
monitoring needed world agent operating subject change agent may require service sooner estimated new provider service may discovered operating fixed unchanging strategy means agent open exploitation opponents behaviour easier predict 
strategy modification triggered types event change agent internal state time agreement place critical ii opponent behaving conceding exploiting intensifying lessening constant 
example rules illustrating strategy monitoring modification 
note weights changed agent re values 
tactical reasoner role tactical reasoner enact high level behaviour set strategic reasoner 
output level sla values slots 
tactic function acts line set strategy set value sla slot 
quantitative slot parameters tactics select value allowable minimum maximum value issue 
qualitative values tactics choose discrete range alternatives process achieved mapping qualitative values quantitative scoring function 
way tactics differ go computing slot value 
main ways coming value details operation variety tactics section companion time dependent tactics family tactics base behaviour time remaining agreement place 
negotiation deadline tactics put forward reservation values 
way concede reach values differs 
broad patterns concession maintain offer time exhausted concede reservation value ii move rapidly reservation value 
resource dependent tactics family tactics base behaviour amount resource remaining 
property tactics model urgency deal resources ii willingness parties negotiation decreases measured increase length negotiation thread iii computational load agent increases 
actual relationship quantity time left negotiation proportional number agents negotiation inversely proportional length negotiation thread 
agents potentially available perform service longer agent afford negotiate 
longer duration negotiation urgent need agreement 
behaviour dependent tactics family tactics base behaviour opponent behaves ongoing negotiation thread 
tactics family differ aspect opponent behaviour imitate degree 
ways behaviour imitated relative tit tat ii absolute tit tat iii averaged tit tat behaviour respectively imitated proportionally absolutely averaged fashion 
families computes value negotiation issues particular perspective 
values issue combined relative weightings set strategic reasoner provide single value put forward issue 
service management having agreement provide service agent attempt honour 
process involves principal activities scheduling service constituent sub parts accordance terms conditions sla ii executing service 
agent agrees provide service acquaintance specific sla sam performs fine grain scheduling see section determine service constituent components executed problem solving resources deployed sam uses techniques proactively schedule tasks services required sequential scheduling ii look ahead scheduling 
association demand provisioning 
demand task sub service associated agreed service scheduled service description service executed time 
associated scheduling component parts services 
task service executed component process proactively scheduled execution sdl parsed step ahead step scheduled previous executed 
sequential look ahead scheduling sam sets reservations sem actual execution service task 
reservation principally associates particular task instance service unique sla 
sam sets reservations provide sufficient resources comply agreement considering components agreed volume invocations permissible degree concurrency 
agent may scheduling methodology linked generally available legacy scheduler 
reservations processed ways service demand 
case sem invokes resource set aside fine grain scheduling phase completion informs sam service result 
sam removes reservation frees resource 
case number reservations agreed volume invocations initially set noted 
implies resources priority associated sla 
sem uses resources reservation set committed barring process instance 
completion reservation reset ready re 
associated demand sla completed sam informed reservations removed resources freed 
due dynamic nature domain exceptions arise service execution 
sem monitors execution tasks detects gone wrong 
exception handled sem section sem informs sam problem 
exceptions types functional ii resource related 
functional exception indicates particular activity performed resource gone state error 
case sam attempt re schedule task instance re resource task scheduling instance task type 
options usually considered sam decides effective situation 
example re quicker spare resources immediately available re scheduling require new resources considered 
resource related exception indicates failure occurred underlying resource task 
occurs task instance needs de allocated tasks provisioned instance need re 
failed task instance comes back line sem informs sam re allocates task instances making available subsequent scheduling activities 
sam handle exception sla agreed times instructs imm see re negotiate sla 
new agreement reached revised version sla instantiated 
new agreement reached service fails 
case server pay penalty specified sla 

agent problem solving resources dynamically determined 
agent initialised knowledge resources 
tasks initiated sam forms resource list containing instance names associated certain task type 
specific task instances provisioned 
task instance fails removed task resource list provisioned agreements 
task available running business process sam initiates search incomplete agreements possible uses resource 
added appropriate resource list anticipation related number research areas impact related described 
focus closely related adept key components extant workflow systems section ii automated negotiation autonomous agents section iii techniques allowing agents heterogeneous information models interoperate section 
areas dealt turn 
extant workflow systems time writing commercial systems support business process management meaningful notion agenthood 
existing workflow management systems offer limited support minimal flexibility process enactment 
situations business process fully dimensioned conceivable outcome considered controlled conventional distributed computing techniques traditional workflow systems adequate 
system cope undefined errors failures need dynamic re configuration resources adept approach flexible robust 
core functionality traditional workflow system automate execution sequence tasks support business process 
typically workflow systems consist engine executes business tasks predefined order specified script 
adept system subsumes functionality sdl sem execution service descriptions 
workflow management systems adept performs resource management sophisticated exception handling adept agents ability perform explicit resource management control reason systems databases equipment people organisation 
traditionally business process management systems provide capability direct resource management 
processes dimensioned prior enactment 
adept approach means system far responsive unexpected unusual patterns resource availability 
presently workflow systems exception handling managed explicitly representing alternative path business process 
adept agents dynamically attempt re resource process task order resolve exceptions 
approach allows agents react context dependent manner circumstances type corrective action vary depending availability resources task criticality process 
final differentiator workflow management systems tend operate central workflow engine monitors events system 
type architecture limiting business process spans large enterprise 
adept takes distributed robust scalable approach disparate components business process represented agent 
agents distributed logically physically organisation 
limitations current generation workflow systems number researchers considered multi agent systems various aspects business process management 
hall agent technology enable expert manager business process engineer non expert users involved business process influence design modification process 
language description processes tasks enable automatic reasoning operation business process facilitate reuse existing processes 
task represented role indicates execute task set preconditions task description set conditions 
similar structure service description adept model mandatory inputs service preconditions execution service description processes involved executing service provided body completion conditions similar role conditions 
rigorous description processes tasks provides agent business process management system potential modify business process possibly expert response changing circumstances 
agent technology enable modification business process complimentary agent business process management systems adept 
federation type architecture provides alternative method organising multi agent systems management business processes 
agents organised groups group associated single facilitator agent degree autonomy 
facilitator serves identify agents join leave system manages direct communication participating agents functions similar provided orb 
addition facilitator provides anonymous communication agents informed events registered interest original sender translation message content different information models problem decomposition distribution sub problems agents unspecified original sender delayed communications event agent temporarily line 
architecture enables agents communicate concern particular syntactic semantic requirements recipient 
agent may send message specifying recipient content routing messages performed facilitator 
negotiation participating agents require secure communication direct communication enabled managed facilitators 
facilitators represent interests different agents 
facilitator managing direct communication negotiating agents trusted act interests agents conflicts interests representing 
federation architecture predominantly interoperation purely cooperative agents team level organisation shade pact 
security issues addressed architecture employed business process management organisation involved 
additional difficulty federation architecture support encapsulation services 
ability model peer hierarchical structures adept founded organisational models enterprise logically divided collection services 
agent agency concept adept draws principle group services system pragmatic sense flexibility available federation architecture 
mobile agents proposed approach management workflow business processes 
merz argue technology means organisations require services required implement mobile agents 
organisations need accept arrival mobile agents handle requests organisation may participate passive active manner 
mobile agent encapsulated autonomous unit participate functions negotiation relying facilitator type agent advantage federation architecture 
advantage mobile agents claimed reduce communication overhead shown practice reasonably sophisticated mobile agent may take considerable time transmit network 
potentially serious problem mobile agent technology management business processes lack security 
participate mobile agent business management system organisation allow sophisticated programs possibly competing organisation execute local machines 
mobile agents implementation choice case security issues addressed 

takeda refer facilitator mediator ontology server architecture 
units perform function facilitator federation architecture described genesereth ketchpel automated negotiation context interested designing building engineered coordination techniques increase efficiency flexibility task allocation 
approach adopt necessary adapt tools techniques game theory social sciences 
central aim game theory specification rational equilibrium behaviours strategies multiple agents interact 
game theoretic models obvious source inspiration 
models analytically useful desirable properties 
example rubenstein model alternative offers takes passage time consideration respects negotiation protocol shown games agents simple stable negotiation strategy results efficient agreements delays 
don game theoretic techniques directly 
answer question consider basic assumptions game theoretic models consider involved applying techniques adept context 
game theory models rest assumptions negotiating agents self interested utility computationally unbounded rational 
agents assumed set alternatives fixed known agents agent risk attitude utility function fixed known agents involved decision making 
order apply models designer choose strategic bargaining model ii map application problem chosen model nomenclature iii identify equilibrium strategies iv develop simple search techniques appropriate strategies provide utility functions 
whilst choosing strategic bargaining model mapping application may difficult proficient game theory techniques clear design implement equilibrium strategies adept infinitely possible agreements 
recall game theory requires agreements known advance equilibrium strategies proven 
aforementioned assumptions mean game theoretic models consider computational communication complexities important practical applications 
furthermore context agent utility function set alternatives risk attitude private information especially inter organisational settings information publicly available soon intractable large games 
adept negotiation model influenced social science models negotiation 
models restrictive assumptions game theory attempt identify describe behaviours may achieve satisfactory outcomes prescribe behaviour game theory models 
example competitive negotiation behaviours adept heuristics agents search operators prune set possible actions 
models inspired successful human negotiation behaviour suffer fact system behaviour easily predicted 
considerable effort required simulation empirical evaluation negotiation mechanism design leads stable predictable system 
case experimentation showed adept negotiation model converged majority circumstances communication computational overheads acceptable application 
furthermore subsequent theoretical analysis demonstrated validity results subset adept scenarios 
summary elements game theoretic negotiation utility functions rational choice basis imm decision making 
functions augmented emanating social models provided negotiation heuristics guide imm process setting negotiation generating offers counter offers monitoring modifying strategy time 
information interchange common number related enterprise integration projects adept agents share information expressed common information model referred ontology 
development ontologies reuse important research area distributed system development 
generally accepted domain ontology written scratch fusion existing ontological information 
number ontologies developed domain enterprise integration specifically related activities planning :10.1.1.11.6356
ontologies intended reuse systems 
tools stanford ksl ontology editor serve reduce time consumed development ontology specific application 
reduction overhead explicit ontological representations information system opposed hand coded schema translations attractive 
motivated advantages disadvantages outlined section number methods building schema translations investigated simple initial mechanism employed 
hybrid approach advocated potential benefit advantages schema translations formation novel schema required 
research techniques required 
carnot project cyc global ontology database schema inputs semi automatic user driven model integration software tool mist produces articulation axioms aka 
schema translations 
articulation axioms map local schema cyc cyc global ontology functions shared information model 
restricted domain business process totally automating formation schema translations ontological representations feasible 
agent able communicate interpret information existing schema translation provides greater flexibility agent may able take advantage new services slightly different information requirements offered system 
reuse existing ontologies ontologies automatically domain expert generate schema translations disadvantages explicit ontological representations reduced flexible interaction agents possible 
described conceptualisation implementation agent system managing business processes 
adept philosophy founded key notions responsibility provisioning managing business ii making problem solving components reactive proactive respond unexpected situations 
viewed different levels represents increasing support realisation business process management software systems adept design technology adept proposes method approach structuring design development business process management systems 
identifies key concepts view autonomous agents negotiation service provision service level agreements resource management information sharing 
view readily applied business process applications tied details realised adept 

stanford ksl ontology editor tool supports distributed collaborative editing browsing creation ontologies represented ontolingua language designed representation ontologies www ksl svc stanford edu frame editor sid anonymous user id alien ii adept implementation technology identifying conceptual framework adept system provides concomitant algorithms interfaces language definitions implementation structures 
definitions re implemented programming environments develop adept agent systems business process management 
iii adept solution technology adept programming environment re business management applications 
case adept design methodology structure application adept software implement 
indicated responsibility autonomous agents offers advantages traditional workflow approaches 
potential drawbacks approach mentioned section 
firstly difficult attain coherent view entire business process state distributed 
combat significant efforts expended suite visualisation tools enabled business process manager view re construct system state constituent components see companion details 
secondly autonomous nature problem solving components greater chance business process fail meet overarching constraints placed operation 
business process constructed dynamic fly agreements preset routes 
minimise difficulties negotiation strategies tactics organisation agents need carefully engineered maximise chance making agreements 
empirical analysing properties relative merits different combinations strategies tactics reported theoretical subset scenarios reported 
major technical advances achieved adept relate techniques developed automated negotiation techniques information sharing agents heterogeneous information models 
case approach allows agents exhibit range negotiation behaviours depending context find 
case pragmatic hybrid solution combines speed schema mappings flexibility working ontologies adopted 
indicated adept solution technology real world applications 
particular applied bt business process providing quote install customer network 
details application companion 
serves main purposes illustrates concepts described ii offers insights adept approach applied practical situations 
axelrod evolution cooperation 
basic books 
platform build icl corporate systems publications version 
faratin sierra jennings negotiation decision functions autonomous agents 
int 
journal robotics autonomous systems 
fox gruninger ontologies enterprise integration proc :10.1.1.11.6356
nd conf 
cooperative information systems toronto ont 
fipa specification part network management provisioning foundation intelligent physical agents 
www fipa org fisher getting negotiating agreement giving 
houghton mifflin 
genesereth ketchpel software agents 

acm 
georgakopoulos hornick sheth overview workflow management 
int journal distributed parallel databases 
gruber translation approach portable ontology specifications 
knowledge acquisition 
guha lenat cyc mid term report 
ai magazine 
hall intelligent multi agent architecture support process reuse workflow management system proc 
st int 
conf 
practical application intelligent agents multi agent technology london uk 
rational behaviour bargaining equilibrium games social situations 
cambridge university press 
hollingsworth workflow model 
workflow management coalition 
huhns singh jacobs global information management local autonomous agents 
proc 
th int 
dai workshop seattle wa 
jeffrey logic decision 
university chicago press 
jennings cooperation industrial multi agent systems 
world scientific publishing london 
jennings controlling cooperative problem solving industrial multi agent systems joint intentions 
artificial intelligence 
jennings faratin johnson norman brien wiegand agent business process management 
int journal cooperative information systems 
jennings faratin norman brien wiegand mamdani adept managing business processes intelligent agents 
proc 
bcs expert systems conference intelligent systems integration programme track cambridge uk 
jennings mamdani perez archon develop real world dai applications 
ieee expert 
jennings varga fuchs transforming stand expert systems community cooperating agents 
int 
journal engineering applications ai 
kraus lehmann designing building negotiating automated agent 
comput 
intell 

kraus zlotkin multi agent negotiation time constraints 
artificial intelligence 
kraus negotiation cooperation multi agent environments 
artificial intelligence 
lehmann current status conceptual catalogue ontology group proposals 
proc 
th int 
workshop peirce conceptual graph workbench university maryland 
mccarthy sarin workflow transactions inconcert 
bulletin technical committee data engineering ieee computer society june 
kind workflow software 
november 
medina mora winograd flores action workflow enterprise integration technology 
bulletin technical committee data engineering ieee computer society 
medina mora wong flores action workflow approach workflow management 
proc 
th conf 
computer supported cooperative 
merz liberman mller jones lamersdorf inter organisational workflow management mobile agents 
proc 
st int 
conf 
practical application intelligent agents multiagent technology 
zahavi essential corba systems integration distributed objects 
john wiley object management group 
mller negotiation principles foundations distributed artificial intelligence eds 
hare jennings wiley interscience 
myers wilkins reasoning locations theory practice computational intelligence 
neches fikes finin gruber patil senator swartout enabling technology knowledge sharing 
ai magazine 
norman jennings generating states cooperation autonomous agents 
proc 
rd australian workshop distributed artificial intelligence perth australia 
norman jennings faratin mamdani designing implementing multi agent architecture business process management 
intelligent agents iii eds 
mueller wooldridge jennings lnai springer verlag 
pnueli specification development reactive systems 
information processing elsevier 
negotiation behaviour 
academic press 
raiffa art science negotiation 
harvard university press 
rosenschein zlotkin rules encounter 
mit press 
rubinstein perfect equilibrium bargaining model 
econometrica 
fox constraint directed negotiation resource re allocations 
distributed artificial intelligence ii eds 
gasser huhns pitman 
sierra faratin jennings service oriented negotiation model autonomous agents 
proc 
th european workshop modeling autonomous agents multi agent world ronneby sweden 
takeda agent organization multiple ontologies 
int 
journal cooperative information systems 
workflow fear 
byte april 
tenenbaum weber gruber enterprise integration lessons shade pact 
proc 
st int 
conf enterprise integration modelling 
jennings efficient mechanisms supply services multi agent environments int journal decision support systems 
wooldridge agent software engineering 
iee proceedings software engineering 
wooldridge jennings intelligent agents theory practice 
knowledge engineering review 
www staffware com captions constituent components business process 
conceptual architecture adept system 
logical hierarchy agencies adept implementation system 
exemplar service description prepare table exemplar service description meal functional architecture adept agent 
adept negotiation protocol 
sample service level agreement internal architecture imm 
negotiation logistics rules setting negotiation strategy monitoring modifying negotiation strategy negotiation tactic rules table adept agent communication language constituent components business process adapted 
business process intended happen process definition representation business process management system controls automated aspects process instances representation activity instances items tasks allocated invoked applications computer tools applications activities automated manual intended happen business process happening business process support activity participants managed defined composed may create manage include include sub processes execution represented design team credit legal sales team department services quantity survey service level agreements surveyor agency team subsidiary peers peers responsible agents agency agency agency agency agency agency subsidiary service negotiation service peers designer peers negotiation management management conceptual architecture adept system 
agency agency agency agency agency communication negotiation communication negotiation agency agency responsible agent responsible agent te te td td logical hierarchy agencies service name prepare table inputs home guests guests cli man home accommodation ser man home man home man home glasses glasses opt outputs home seat allocation guard body 
exemplar service description prepare table sequence meal para organise cond friends empty set service friends plan menu restrictions service friends plan candidates service friends friends plan menu plan para prepare prepare food food plan menu menu prepare table guests plan choice prepare food prepare table eat meal para clean wash dry wash dry organise prepare eat meal clean exemplar service description meal management level application level orbix ole convergence layer operating systems machines negotiating service providing agents service provisioning management distributed computing platforms service descriptions information model current platform neutral interface implementation service level agreement templates allocation scheduling execution services unix nt agent infrastructure reservation values adept system adept implementation system 
communication service execution module situation assessment module interaction management module self acquaintance models am sm sam sem imm cm module responsible agent agency task agency peer agency agency service service level agreements negotiation histories schedule service execution records negotiation preferences task availability functional architecture adept agent 
sample service level agreement slot name instantiated values service name cost design network sla id server agent ndd client agent chl sla delivery type demand duration minutes start time time volume price costing penalty client info customer profile reporting policy customer quote accept propose capable reject confirm deny reject accept deny confirm capable adept negotiation protocol 
numbered ovals represent states negotiation process ovals represent states associated outcome negotiation 
shaded ovals represent unsuccessful negotiation states arrived edges primitives capable reject deny filled ovals represent successful negotiation state arrived primitive confirm 
refer table details individual primitives 
internal architecture imm 
servers preference servers negotiate serial preferred multiple providers service agent developed preference ordering servers service negotiate time decreasing order preference 
approach adopted minimise amount resource consumed agent choosing preferred acquaintance 
servers history servers negotiate parallel multiple providers service agent negotiated acquaintances service negotiate parallel order build picture potential providers service servers negotiate parallel multiple providers service agent time reach agreement negotiate parallel order maximise chance providing server willing take service 
negotiation logistics rules communication evaluation reasoner strategic reasoner agency topology agency agent agency capacity agency status negotiation protocol interaction histories service descriptions reservation values agreed slas am sm thread uttered offers cm sam scoring function thread received offers list strategies list tactics list negotiation status start time time service select strategy kb assess strategy kb meta strategy kb assess behaviour assess utility instantiate sla select tactic tactical reasoner memory am sm time different organisation opponent strategy time resource behaviour convergence speed slow response competitive plenty time available negotiation opponent external organisation dominant sole criteria determining negotiation stance opponent behaviour 
minimise scope exploited allow cooperative negotiation reciprocated 
opponent adopt fairly competitive stance negotiation inter organisational 
negotiation take long time reach 
time organisation opponent servers strategy time resource behaviour convergence speed fast response cooperative plenty time negotiation multiple potential suppliers service internal organisation important criteria resource usage minimised 
secondary consideration negotiation take long 
mixed strategy agreement reached fairly quickly response negotiation opponents cooperative organisation 
organisation opponent server strategy time resource behaviour convergence speed fast response cooperative little time reach agreement potential service provider happens organisation dominant sole criteria determining behave amount time remaining 
stance result agreement reached quickly opponent cooperative organisation 
time organisation opponent negotiation threads strategy time resource behaviour convergence speed fast response cooperative plenty time reach agreement provisioning house service agent engaged multiple concurrent negotiations agent ensure takes amount resource consumed account spending time negotiating behaviour opponent reciprocate opponent concessions 
stance result agreement reached quickly opponent cooperative organisation 
setting negotiation strategy time running low convergence speed slow different organisation opponent strategy time time resource behaviour behaviour convergence speed uncertain response uncertain time deal reached fast approaching current speed convergence slow opponent external organisation change strategy time remaining dominant criterion 
pay attention opponent behaviour ensure agent overly exploited 
case possible predict opponent react may try stick firm exploit agent concessions may reciprocate concessions order reach agreement 
time response cooperative exploiting opponent intensifying exploitation strategy time time resource behaviour behaviour convergence speed lower response plenty time reach agreement current strategy elicited cooperative response opponent attempting exploit agent tendency increasing adopt tougher stance 
base negotiation behaviour mainly opponent behaving pay attention amount time remaining 
change negotiation converge slowly may result competitive stance opponent 
time response conceding opponent different organisation opponent strategy time resource behaviour convergence speed lower response uncertain plenty time reach agreement current stance elicited competitive response opponent external organisation opponent conceding firm base behaviour time reach agreement order attain maximum utility 
change prolong negotiation possible predict opponent respond 
monitoring modifying negotiation strategy time different organisation opponent servers strategy time resource behaviour offer time high initial offer concede slowly offer resource high initial offer concede server numbers offer behaviour high initial offer concede offer opponent offer average offer time time offer resource resource offer behaviour behaviour plenty time reach agreement potential suppliers service external organisation time tactic suggest high initial offer concede slowly plenty time available ii resource dependent tactic suggest high initial offer competitive negotiation concede number potential suppliers left negotiation thread iii behaviour dependent tactic high initial offer opponents external organisation concede slightly readily opponent reflect strong market position 
time organisation opponent server strategy time resource behaviour offer time high initial offer concede slowly offer resource low initial offer concede num messages offer behaviour medium initial offer concede offer opponent offer average offer time time offer resource resource offer behaviour behaviour plenty time reach agreement potential provider organisation time tactic suggest high initial offer concede slowly plenty time ii resource dependent tactic low initial offer concede number messages sent negotiation thread organisation resources unduly wasted iii behaviour dependent tactic reasonable initial offer opponent organisation concede slightly opponent order try bring quick agreement negotiation tactic rules table adept agent communication language action content meaning context empty 
sender asks recipient principle able provide service message sent agent time 
capable empty 
informs incapable performing response action 
capable empty 
informs principle capable performing response action 
propose sla single sla information object 
proposes performs conditions specified sla 
believe capable performing nonempty list sla fields proposes service provider may performs conditions described sla table modified list fields response action type propose 
accept empty 
accepts commits performing sla table 
response propose reject empty 
rejects sla table outright wishes terminate negotiation 
response action type propose 
confirm empty 
commits sla table 
response action accept 
deny empty 
withdraws proposal table 
certain circumstances action may consequences agent may pay penalty 
response accept action 
communicative act type propose accept reject confirm deny intends communicative action interpreted negotiation message represents context agent existing agreement 
sla exist request instruction service provider may start providing service suspend terminate service requests agreement indicated conversation identifier field message perform action respect service 
sla message refers exist instruction acceptable scope agreement 
report report state service performed reports state service execution sla message refers exist instance service executed inform information objects 
provides information relevant execution indicated service 
consumer input provider output 
sla message refers exist information relevant execution service 
