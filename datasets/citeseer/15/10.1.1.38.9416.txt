verification fault tolerance real time zhiming liu department maths computer science university leicester leicester le rh liu mcs le ac uk joseph department computer science university warwick coventry cv joseph dcs warwick ac uk transformational method specifying verifying fault tolerant real time programs 
program needs provably correct functional real time requirements despite possible occurrence system failures 
demonstrates suitably expressive logic real time systems possible naturally model state changes caused system failures determine effect functional real time properties executions 
keywords fault tolerance fault tolerant refinement realtime specification transformation 

consider development concurrent program sequence refinement steps requirement specification executable implementation 
step development constructs lower level specification higher level specification provable refines denoted refinement relation reflexive specification transitive ll ll 
different frameworks refinement calculi prove specification refines bac 
refinement steps assume implementation executed fault free system operation executed correctly defined semantics 
concurrent programs may run systems exhibit various failures referred physical faults processors may fail channels may lose messages memory may corrupted 
execution suffers effects faults behaviour may satisfy proved 
presents transformational framework assumed physical faults system modelled caused set fault operations perform state transformations way ordinary program operations 
effect faults execution program modelled transformation affected version 
atomic action model affected version simply union operations executed interleaved manner 
fault tolerance achieved specification tolerant implementation specification program affected version refines fault tolerant systems real time constraints 
important timing properties program refined fault tolerant functional properties program specification 
extends transformational approach adding time bounds actions 
allows fault tolerant redundancy actions checkpointing recovery actions specified time constraints 
method 
requirement specification spec program generally refined canonical specification phi encoded action system analysis possible failures system consultation system engineers provides specification fault environment 
refined tolerant implementation real time fault tolerant programs timing assumptions functional effects faults specified order verify fault tolerant refinements real time constraints 
redundancy operations fault tolerance time constrained meet original deadlines high level specification 
general redundancy operations required satisfy condition fault occurs system recovers error free consistent state time bound takes account possible wasted computation caused fault subsequent recovery 
clear faulttolerance real time systems achieved reasonable timing assumptions occurrence faults 
possible specify variety assumptions 
high level specification powerful faster machines may needed original deadlines high level specification may need relatively loose allow fault tolerant implementations 
shall example interface illustrate points 

program specification refinement section introduces computational model specification language 

action system models program represented action system pair consisting initial condition set atomic operations finite set state variables 
state program associated set values value domain denote value state initial condition order predicate free variables defines permitted initial states execution start 
atomic operation represented guarded nondeterministic multiple assignment vector state variables vector logical variables order predicate state variables logical variables 
guard true enabled state executed change state state ffl variables assigned values variables remain unchanged ae ith element ffl predicate satisfied atomic operation may introduce infinite nondeterminism 
expressive power needed represent fault atomic operation may damage program state setting variable incorrect value 
deterministic assignment special case nondeterministic assignment 
omit guard operation constant true 
atomicity operations behaviour program represented infinite sequence oe states initial state satisfies initial condition obtained stuttering step executing operation program set behaviours program stuttering closed infinite state sequence oe behaviour program behaviour obtained oe adding deleting finite number stuttering steps 
behaviour terminating infinite sequence stuttering steps 
example consider simple processor memory interface 
processor issues read write operations executed memory 
interface consists registers represented state variables op set processor indicate desired operation reset memory executing operation 
value space wg ready read write respectively 
val set processor indicate value written write set memory return result read value space integers describe interface action system introduce internal variable value space denote contents data memory 
delta op rdy delta op rdy op delta op rdy 
op val delta delta op 
op val rdy delta op 
op rdy val delta fr interface described program delta 
reasoning action systems tla tla lam reason formally properties action system 
models tla defined infinite sequences states oe state set state variables 
property program represented formula defines set behaviours action formula boolean valued expression specifies relation values variables execution operation values primed variables execution operation 
interpreted pairs states hs holds variables assigned values state primed variables fx vg assigned values state hs called step hs formulas tla constructed action formulas way 
action formula formula 
satisfied sequence states oe program denoted oe hs order state predicate particular action formula primed variables oe satisfies initial state oe satisfies 
formula 
oe satisfies suffixes oe satisfy 
formula eventually defined satisfied oe suffix oe satisfies 
formulas composed order connectives standard semantics 
quantification possible logical variables values fixed states state variables values change state state 
specify stuttering steps execution program define notation action formula vector variables delta unch unch 

transforming action systems tla formulas relationship action systems tla defined relatively straightforward way 
syntactic operation action system corresponds equivalence class action formulas 
action formula class pair hs states state variables execution state terminates state iff hs step 
operation translated action formula gamma representative equivalence class action formulas corresponding gamma delta unch primed counterparts complement variables set program variables action enabled holds 
enabled executed program state changed new values variables related old values replaced values variable outside remain unchanged 
examples omit unch part specify operations 
action system program np delta gamma state transition relation atomic operations exact specification expressed formula pi delta np formula specifies possible sequences values may taken state variables including internal variables 
existential quantification hide internal variables xn canonical safety specification phi delta pi behaviour satisfies phi iff sequence values assigned obtained behaviour satisfies pi 
example continued processor memory interface gamma op rdy op gamma op rdy op val gamma op op rdy val gamma op op rdy val np gamma gamma gamma gamma pi op rdy np fop val dg 
user point view specification internal variable 
phi op rdy np formulas pi phi safety properties satisfied infinite behaviour iff satisfied finite initial prefix behaviour 
safety properties allow behaviours system performs correctly leaves values variables unchanged 
behaviours undesirable distributed systems ruled adding fairness properties 
simplicity consider safety properties 
treatment liveness properties fault refer reader lj 

verification refinement action system specification phi property described formula 
prove satisfies property prove tla validity implication phi 
relation programs characterises refinement program correctly implements phi np phi np canonical specifications respectively fx xng fy ym refinement relation formalised iff phi phi refinement relation proved implication phi phi 
define state functions ym terms variables prove implication pi pi pi obtained pi substituting free occurrences pi collection state functions ym called refinement mapping 
transformational framework fault tolerance give brief summary transformational approach formal treatment untimed fault tolerant programs 

faults effects program safety specification phi np informally physical fault execution causes transition valid state error state 
execution error state may lead failure state violates specification general physical fault modelled effect atomic fault operation translated action formula gamma defined section 
example malicious fault may set variables arbitrary values crash processor may cause variables unavailable fault may cause loss message channel 
physical faults described set atomic operations called interfere execution possibly changing values variables validity implication phi phi guarantee existence refinement mapping general refinement specification modified adding dummy variables 
specified action formula nf conjunction action formulas gamma executing system simulated interleaving execution operations interference execution defined transformation delta internal external behaviours executed system faults specified respectively pi np nf phi np nf fault prone properties reasoned terms properties 
call affected version behaviour affected behaviour example continued processor memory interface assume memory faulty value may corrupted 
fault represented atomic operation fault delta action formula gamma 
contains single action fault 
affected version op rdy fr nf gamma nf np gamma pi op rdy nf phi pi 
fault tolerance program specification phi np property described formula said implement satisfy phi 
implementation assumes hardware fault free operation executed semantics 
run system subject hardware faults errors may occur program execution lead failures violate specification phi 
affected behaviours may satisfy implementation 
tolerate faults correcting operations carried prevent error leading failure 
called tolerant implementation implementation phi means behaviours comply specification despite presence faults property canonical specification program phi tolerant refinement denoted vf tolerant implementation phi 
anf tolerant refinement relation vf stronger ordinary refinement relation tolerant refinement refinement converse necessarily true 
tolerant refinement generally reflexive 
transitive bit stronger ll vf vf ll vf allows stepwise development fault tolerant program 
faults representations considered lowerlevel step development may differ previous step 
furthermore fault tolerant refinements fault monotonic jan nf nf vf vf means program tolerates set faults tolerates subset faults 
realistic modelling requires specification fault state transitions behavioural fault assumption bf local global properties frequency minimum separation faults 
follows tolerant refinement proved condition bf phi bf phi behavioural fault assumption bf general safety property prevents certain fault transitions place 
property np nf bf safety property transformed formula form np nf shows specification phi bf equals phi bf encoded model fault operations 
separation fault transitions behavioural fault assumptions usually easier specify affected behaviours prove tolerant refinement helpful canonical form proof rule refinement directly 
example continued assume prove fault free memory interface implemented faulty memories values may corrupted condition time corrupted 
denote current data memories respectively 
memory faulty value may corrupted fault 
variable value space assume corrupted 
fault specified follows gamma delta fault fault nf gamma gamma gamma bf delta specification program tolerant refinement interface obtained specifying variables initial condition operations fairness conditions 
variables initial condition follows 
delta fop val delta op rdy specify operations define auxiliary function 
vote delta ae specification rest program gamma op rdy op gamma op rdy op val gamma op op rdy val vote gamma op op rdy val np gamma gamma gamma gamma pi np phi pi defined delta fr action formulas respectively gamma gamma gamma gamma 
notice phi np nf prove tolerant refinement condition bf calculate formula np nf bf np nf action phi phi 
phi modulo 
define mappings op op val val vote proof rules tla easily prove implication phi phi shows tolerant refinement assumption bf 
real time fault tolerance framework developed far extended deal real time fault tolerant properties 
semantic model extended allow specification refinement real time properties 

specification refinement real time programs deadlines introduce set timing constraints program requiring operations executed early late 
time represented set set non negative real numbers 
describe timing constraints atomic operation lower time bound upper time bound ffl lower bound condition operation enabled performed continuously enabled time units ffl upper bound condition operation continuously enabled time units performed 
real time program represented triple hp untimed program defined previous section functions atomic operations time domain operation semantic model real time programs hmp 
example continued assume processor issues write read operations alternately periodically memory starting write operation 
operation issued assume memory take time units complete execution 
ensure message written read overwritten read period ae issuing operation processor greater real time program hp defined follows 
delta op rdy ready issue write delta op rdy 
op delta 
op val delta op 
op val rdy delta op 
op rdy val delta fr ae timed interface program delta untimed programs shall require exact specification pi real time program introduce program distinguished state variable represent time operation advance time constrained assumptions ffl time starts initially 
ffl time decreases ffl time diverges 
assumptions combined specify realtime rt delta assume program state time change simultaneously program state changed program operations 
pi rewritten pi delta np conjunction pi rt specifies interleaving program time advancing operations 
program operations need constrained lower bound upper bound conditions 
specify lower bound operation introduce timer auxiliary state variable 
enabled time divergence called zeno property ensures finite number operations performed finite interval time 
state disabled executed assigned clock time current time plus units time timer delta gamma gamma operation executed reaches mintime delta gamma mintime specifies lower bound operation lower bound condition program conjunction lb lower bound conditions operations 
similarly upper bound operation timer defined timer obtained substitution timer 
operation executed exceeds clock time maxtime delta conjunction timer maxtime upper bound specification operation conjunction upper bound specifications operations upper bound condition ub 
time bound specification conjunction lb ub 
real time executions exactly specified pi delta pi rt hiding internal variables auxiliary timers timers gives canonical specification phi delta timers pi prove program satisfies implements timing property ffi delta ffi prove implication phi ffi 
refinement relation programs proved implication phi phi refinement mapping 
example continued timed processor memory interface op op rdy action formulas operations obtained 
timing constraints specified follows lb timer ae timer ae mintime tr mintime tw ub timer tr ae timer tw ae maxtime tr maxtime tw timer tr timer tw maxtime tr maxtime tw np gamma gamma gamma gamma pi op rdy np rt lb ub phi tr tw tr tw pi proved interface satisfies property op val required value memory output units time processor issuing read operation 
property message written read ae time units op rdy ae val 
faults fault tolerance real time systems functional properties faults modelled set atomic operations specified action formula nf assumes lower upper bound fault operation 
real time program hp affected version defined delta hf domain extended operation time bounds 
achieve fault tolerance real time system deadlines met need timing assumption occurrence faults 
assumption usually constraint frequency occurrence faults minimum time faults 
time long allow recovery computation progress recovery 
timing assumption faults conjunction assumptions form fault occurs fault occur units time 
fault fault specified action formula gamma timing assumption written gamma gamma formula interpreted hold units time 
defined terms time variable delta timing assumption faults denoted tf internal external specifications affected version respectively pi pi rt tf phi timers pi affected version real time program real time program 
normal form allows definition fault tolerance real time systems similar untimed systems 
real time program tolerant implementation real time property implication phi holds 
tolerant refinement real time program implication phi phi holds 
example continued consider timed fault free processor memory interface implemented faulty memories values may corrupted 
fault fault defined untimed case 
obtain specification program proved tolerant refinement assumption bf define variables initial conditions follows op val op rdy specification operations gamma op rdy op gamma op rdy op val gamma op op val rdy vote gamma op op rdy val np gamma gamma gamma gamma pi np phi pi defined fr action formulas respectively gamma gamma gamma gamma 
meet timing properties requires guarantee time bounds actions implementation ensure time processor issue operation upper bound memory complete execution issued operation greater ae ae implication phi bf phi asserts implements assumption bf assumption relaxed timing assumption tf ff tf delta gamma ae gamma phi gamma phi tf written memories may corrupted execution read operation completed 
hp refinement interface fault assumption tf specifications demonstrate practical fact achieve fault tolerance timing constraints requires powerful faster machine 
execution multiple assignment machine slower execution single assignment non fault tolerant implementation similarly execution multiple assignment voting function slower execution single assignment alternatively machine speed original time bounds slack execution fault tolerant redundancy code 
point clearer refined implementing multiple assignments sequential statements delta op 
val val val op rdy delta op val vote op rdy sequential statement specified model terms smaller atomic actions introducing control variables 
variables values sets fw fr respectively initial values sequential statement decomposed set atomic operations fw specified actions gamma delta op val gamma delta val gamma delta val gamma delta op rdy sequential statement set atomic operations fr shown new program enlarged set variables delta fc strengthened initial condition delta operations delta fr fw fr control variables fc treated internal variables 
consider time bounds program meet time constraints program time bounds remain unchanged lower bound upper bound 
sum upper bounds constituent atomic operations greater upper bound corresponding sequential operation si oe oe sj fl fl correctness refinement fault tolerance properties proved showing validity implication phi tf phi tf recalling tolerant refinement refinement assumption tf 
discussion detailed discussion application transformational framework fault tolerance earlier publications 
liu lj shown tolerant implementation program achieved recovery transformation 
transformation refinement transformations formal treatment existing fault tolerant mechanisms multiple implementation version implementation backward forward recovery algorithms recovery blocks conversation structures fault tolerance ran rlt 
lj formally dealt fault tolerance asynchronous communicating systems checkpointing recovery permitting faults checkpointing recovery 
lj stepwise modular method development faulttolerant reactive systems showed design component reactive system tolerate software design faults hardware faults component 
dealt fault tolerant broadcasts sch sg byzantine agreement lsp 
earlier deal real time added similar way shown 
suppose fault tolerance achieved checkpointing backward recovery 
proposed lj done transformation non fault tolerant program hi oi program hi ri adds checkpointing operations recovery operation real time program hp considered need treat time constraints actions consider real time program hr tolerant implementation implication phi tf phi proved time assumption tf faults intuitively tf constrain behaviour way 

time bounds ensure checkpoints taken frequently limit amount computation undone error recovery 
high frequency checkpointing adds overhead 

time bounds guarantee fault occurs recovery algorithm executes completion small time 
tf assumes system stable period sufficient execution recovery algorithm progress underlying execution original time constraints met 
practice periodic checkpointing assumed faults may occur minimum separation 
method verification fault tolerance realtime properties illustrated simple example processor memory interface 
programs reasonable size mechanized proof checking essential 
framework need new semantic model need new proof checking tool 
existing tool pvs ors provide support temporal reasoning reason fault tolerance 
sha gives example pvs fault tolerant clock synchronization 
main purpose show transformations stepwise refinement bac development fault tolerant systems real time constraints need develop new semantics dealing fault tolerant systems 
demonstrated simple action system tla idea transformations faulttolerance serves equally formal frameworks uses hoare csp jan uses milner ccs fault tolerance 
great advantage approach developments specification verification techniques programs faulttolerant systems 
anonymous referees suggestions improved 
second author acknowledges support epsrc research gr gr 
abadi lamport 
existence refinement mapping 
proc 
rd ieee symposium logic computer science 
abadi lamport 
composing specifications 
technical report digital src california 
bac back 
refinement calculus part ii parallel reactive programs 
lecture notes computer science pages 
springerverlag 
hadzilacos 
algorithm minimising rollback cost 
proceedings acm symposium principles database systems march 
hmp henzinger manna pnueli 
temporal proof methodologies real time systems 
proceedings th acm annual symposium principles programming languages pages 
jan 
bisimulation fault tolerance 
phd thesis department computer science university warwick 
lam lamport 
temporal logic actions 
technical report digital src california april 
liu liu 
fault tolerant programming transformations 
phd thesis department computer science university warwick 
lj liu joseph 
transformation programs fault tolerance 
formal aspects computing 
lj liu joseph 
specifying verifying recovery asynchronous communicating systems 
editor formal techniques real time fault tolerant systems pages 
kluwer academic publishers 
lj liu joseph 
stepwise development fault tolerant reactive systems 
formal techniques real time fault tolerant systems lncs pages 
springerverlag 
lj liu joseph 
verification faulttolerance real time 
technical report department maths computer science university leicester leicester le rh march 
lsp lamport shostak pease 
byzantine general problem 
acm transactions programming languages systems july 

specification design dependable communicating systems 
phd thesis department computer science technical university denmark 
ors owre rushby shankar 
pvs prototype verification system 
proc 
th conference automated deduction pages 
springer verlag 
ran randell 
system structure software fault tolerance 
ieee transactions software engineering se june 
rlt randell lee 
reliability issues computing systems design 
computing survey 
sch schneider 
fault tolerant broadcasts 
acm transactions programming languages systems april 
sg schneider gries 
fault tolerant broadcasts 
science computer programming 
sha shankar 
verification real time systems pvs 
proc computer aided verification 
lncs pages 
springerverlag 

