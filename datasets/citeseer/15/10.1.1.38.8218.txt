th international congress cybernetics namur belgium aug preprint reduction language hierarchies robert andrei department computer science institute applied mathematics university copenhagen russian academy sciences dk copenhagen denmark ru moscow russia mail diku dk mail ac su study structure language hierarchies reduction forms metacomputation order overcome time space complexity language hierarchies 
show program specialization program composition sufficient reduce forms language hierarchies constructed interpreters translators 
argue reduction language hierarchies prerequisite effective formal linguistic modeling large scale 
defining features modern science languages informal formal construct linguistic models reality 
computer revolutionary step execution formal linguistic models result number linguistic models created significantly increased branches science decades 
computer science see laying foundations developing research paradigm scientific method formal linguistic modeling 
linguistic models performed computer principle referred programs algorithms 
languages definitions play central role forms linguistic modeling 
modern approach computer science solving wide spectrum problems devise application oriented languages easy user express computational tasks particular area 
languages defined interpreters translating ground language series intermediate languages 
hierarchies languages simplification terms underlying designation process increase computational complexity statement higher level language usually defined sequence actions phrases lower elementary level 
effective efficient reduction language hierarchies prerequisite formal linguistic modeling large scale 
contribution addresses problem systematically reducing computational costs language hierarchies forms metacomputation program composition program specialization 
shall concerned achieved metacomputation 
problems seen test cases existing methods guideline research 
specifically study reduction homogeneous hierarchies hierarchies translators interpreters heterogeneous hierarchies interpretive definitions may occur order 
sake completeness summarize approaches converting translators interpreters vice versa 
shall refer formal languages simply languages 
belongs line research aims better understanding metacomputation transition 
supported russian basic research foundation number 
hierarchical systems languages data programs application assume fixed set data represent programs written different languages input output 
shall assume data chose symbol strings lisp lists express application program input angular brackets output 
omit language index essential 
capitalized names typewriter font denote elements data domain pgm expressions considered equal reduce identical elements data domain sides undefined 
language definitions know exactly forms language definitions interpretive 
interpreter defines source language actions language translator defines source language translation target language translation described meta language definition interpretation 
program int interpreter input definition translation 
program trans ab translator programs programs programs input language hierarchies hierarchical system languages series consecutive definitions definition interpreter translator 
hierarchy starts language highest level ends ground language 
illustrated def interpreter ij translator written lower language 
require language hierarchy closed sense meta languages translators reduced ground language 
sake simplicity translators hierarchy written language identical ground language 
def def def 

correct hierarchies language hierarchies sequences interpreters translators obey certain typing rules 
denote join operation building language hierarchy 
example def def def level hierarchy constructed language definitions 
rules hold pair adjacent definitions correct hierarchy interpreter translator languages 
bc ab bc ab complexity hierarchies abstraction means language hierarchies simplification terms time space complexity contrary 
statement higher level language usually defined sequence actions phrases lower elementary level 
generally speaking computational costs grow exponentially height interpreter hierarchy size translated text grows exponentially height translator hierarchy 
ultimate goal minimize complexity involved language hierarchies 
hierarchy formal language definitions just complicated program composed series interpreters translators 
methods program transformation optimization reduce complexity 
metacomputation metavariables manipulate application expressions specifying data elements introduce metavariables 
metavariable stands unspecified data element ranges domain lowercase names typewriter font denote elements metavariable domain order manipulate arbitrary expressions programs define injective mapping called program expressions possibly including applications metavariables data domain 
plays role metacomputation logic 
shall dimensional notation moving expressions line level 
metacomputation refer process simulating analyzing transforming programs programs metacomputation term underlines fact activity level higher ordinary computation 
equivalence transformation programs main possibility metacomputation program composition program specialization see 
fix particular method metacomputation specify transformation tasks equationally 
definition program composition 
program cpo ab composer program input definition program specialization 
program spec ab specializer program input note definitions say quality metacomputation process expect transformations performed trivial program composition trivial program specialization success reducing complexity language hierarchies depends power metacomputation methods 
formulas involving metacomputation collectively referred mst formulas mst transition 
converting definitions dual form language definitions mathematics usually take form stated meta language excellent example language definitions computer science interpretive 
mathematics example linguistic activity convenient define language extensions stepwise translation elementary phrases defining extended language 
hand defining new language scratch case computer science usually easier give definition interpreter translator 
situations need may arise converting translators interpreters vice versa 
summarize approaches converting language definitions dual form 
converting translators interpreters ab translator written defined interpreter 
level language hierarchy form 
ab translator converted interpreter program composition follows 
define inefficient interpreter programs stages translating program interpreting program 
def cpo cc composer metavariables 
removing intermediate language program composition efficient interpreter may obtained converting interpreters translators interpreter spec cc specializer written interpreter converted bc translator program specialization follows 
program define program def mst efficient program may obtained specializing definition second mst bc translator defined replacing program metavariable mst formula def efficient bc translator may obtained specializing definition reducing language hierarchies homogeneous hierarchies languages consider homogeneous language hierarchies state reduction level case 
methods homogeneous hierarchies height 
recall cases translator interpreter resulting reduction hierarchy converted dual definition explained section 
translator hierarchies language level hierarchy defined translator 
text top language translated translator text lower language translated text written ground language language hierarchy form 
ac translator transac translates directly intermediate translation derived metacomputation program composition 
cpo mm composer metavariable 
simplicity assume translators defined meta language transac interpreter hierarchies language level hierarchy defined interpreter 
text top language interpreted interpreter written lower language turn interpreted interpreter described ground language language hierarchy form 
interpreter interprets directly intermediate interpretation obtained specialization interpreter respect 
spec cc specializer metavariables stand text input 
heterogenous hierarchies languages consider general case heterogeneous hierarchies consist interpretive definitions arbitrary order show heterogeneous hierarchies reduced steps interpreter translator 
heterogeneous hierarchy contains interpreter translator 
interpreter translators subhierarchy form interpreter translator reduced single interpreter replaces definitions 
assume language interpreted interpreter turn defined bc translator 
language hierarchy form 
interpreter interprets directly obtained ordinary computation translating interpreter repeatedly reduction subhierarchy form 
inti trans 
trans interpreter translators top language ground language reduced single 
translators interpreters easy verify hierarchy resulting step consists exactly homogeneous sequence translators followed sequence interpreters 

trans inti 
int part interpretive part reduction requires metacomputation subhierarchy 
homogeneous reduced translator program composer interpreter program specializer respectively methods explained section 
level hierarchy step language hierarchy reduced twolevel hierarchy consisting translator interpreter inti 
inti levels final reduction single interpreter obtained composer cpo shown section recall assumed meta language translators reduced ground language intn result heterogeneous hierarchy consisting interpretive definitions arbitrary order reduced single interpreter 
necessary interpreter intn converted translator section 
summary summarize reduction formulas stated previous sections 
case pair interpreter translator folded single definition 
formulas describe homogeneous cases formulas describe heterogeneous cases 
case describes conversion interpreters translators 
list simpler case pair language definitions reduced definition converted dual definition needed 
shorthand notation interpreters ab translators written interpreter translator ab type reduction mst formula note ab bc ac transac bc ordinary computation ab translator interpreter bc interpreter translator bourbaki de 
des ensembles 
vol 
premier hermann 
fegaras sheard zhou improving programs recurse multiple inductive structures 
acm sigplan workshop partial evaluation semantics program manipulation 

futamura partial evaluation computation process approach 
systems computers controls 
multiple self application 
proceedings symposium partial evaluation semantics program manipulation 
new haven connecticut 
acm press 
occam razor metacomputation notion perfect process tree 
cousot falaschi fil 
eds static analysis 
proceedings 
padova italy 
lecture notes computer science vol 
springer verlag 
metacomputation tool formal linguistic modeling 
trappl 
ed cybernetics systems 
vol 
world scientific singapore 
jones gomard sestoft partial evaluation automatic program generation 
prentice hall international series computer science 
prentice hall new york london toronto 
turchin phenomenon science 
columbia university press 
turchin concept supercompiler 
acm toplas 
turchin constructive interpretation full set theory 
journal symbolic logic 
turchin cybernetic epistemology 
systems research 
wadler deforestation transforming programs eliminate trees 
theoretical computer science 
