parameterized modeling scheduling dataflow graphs degree candidate bhattacharya degree year master science thesis directed dr bhattacharyya department electrical computer engineering institute advanced computer studies dataflow proven attractive computation model programming dsp applications 
restricted version dataflow termed synchronous dataflow sdf offers strong compile time predictability properties limited expressive power studied extensively dsp context 
extensions synchronous dataflow proposed increase expressivity maintaining compile time predictability properties possible 
thesis introduces parameterized dataflow framework applied meta modeling technique significantly improve expressive power arbitrary dataflow model possesses defined concept graph iteration 
parameterized dataflow framework compatible existing dataflow models dsp including sdf md sdf 
clarity sdf currently popular model designing dsp systems precise formal semantics parameterized synchronous dataflow psdf developed 
psdf allows data dependent dynamic dsp systems modeled natural intuitive fashion 
desirable properties modeling environment dynamic re configurability design re emerge inherent characteristics parameterized framework 
scheduling techniques generating efficient quasi static schedules class psdf specifications geared software synthesis embedded systems 
practical dsp applications illustrate efficacy parameterized modeling quasi static scheduling techniques real life data dependent dsp systems 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameterized modeling scheduling dataflow advisory committee graphs bhattacharya thesis submitted faculty graduate school university maryland college park partial fulfillment requirements degree master science dr bhattacharyya chair professor ray liu professor kazuo nakajima bhattacharya parameterized modeling scheduling dataflow graphs 
page 
chapter 
area digital signal processing dsp dataflow widely recognized natural model specifying dsp applications 
dataflow program repre sented directed graph called dataflow graph vertices called actors represent computations edges represent fifo channels called buffers 
channels queue data values form tokens passed output actor input 
actor executed fired con certain number tokens inputs produces certain number tokens outputs 
different models proposed dataflow programming framework diverse objectives 
common strain runs models trade expressivity compile time predictability specifications expressed 
increased predictability translates desirable fea tures thorough optimization verification lower run time head scheduling memory management cost sacrificing expressive power 
lee messerschmitt proposed synchronous dataflow sdf model restricted version dataflow number tokens produced consumed actor firing output input fixed number known compile time 
relatively low expressivity high compile time predictability sdf heavily bhattacharya parameterized modeling scheduling dataflow graphs 
page 
spectrum expressivity predictability trade perspective 
spectrum dynamic dataflow ddf supports arbitrary data dependent behavior non sdf actors unknown token production con sumption compile time model conditionals iterations recursion 
ddf possesses high expressivity turing complete permits minimum useful compile time analysis optimization 
implementation ddf development environment available ptolemy tool provides object oriented framework simulation prototyping software synthesis heterogeneous systems 
extensions sdf model proposed lie ddf sdf spectrum 
objective broaden range applications represented vis 
vis 
sdf maintaining compile time predictability properties possible time allowing representations expose optimization opportunities compiler 
multidimensional dataflow md sdf cyclo static dataflow lie category 
md sdf allows efficient modeling multidimensional applications exposes parallelism effectively pure sdf 
addresses issue re initialization delays graph edges allows cer tain applications represented sdf modeled md sdf 
token production consumption vary actor firings long variation forms certain type periodic pattern 
offers benefits sdf including increased flexibility compactly efficiently representing bhattacharya parameterized modeling scheduling dataflow graphs 
page 
interaction actors decreased buffer memory requirements appli cations increased opportunities behavioral optimizations constant prop dead code elimination 
advantage offered hierarchically abstracting functionality sdf graph represen tation single actor sdf model may introduce deadlock system specification avoided functionally equivalent actor 
md sdf possess increased expressive power sdf similar compile time predictability properties 
behaved stream flow graphs proposed gao allows non sdf dynamic actors switch select modeling con data dependent iteration restricted fashion model retains key predictability properties sdf offering increased ity 
hand boolean dataflow model bdf developed buck kinds restrictions greater expressive power turing complete 
consequently guaranteed compile time predictability properties 
objective bdf extend sdf tech niques generate quasi static schedules possible fall back fully dynamic scheduling analysis 
quasi static scheduling actor firing decisions run time absolutely necessary 
cyclo dynamic dataflow model extends cyclo static data flow manner bdf graphs expressed model 
addition allows user convey application specific knowledge bhattacharya parameterized modeling scheduling dataflow graphs 
page 
internals actor compiler lead better analyzability bdf model 
additionally models computation proposed combine sdf paradigm finite state machine fsm models 
examples composite modeling approaches dataflow hdf bounded dynamic dataflow 
modeling control flow dataflow approaches lead increased expressivity sdf 
sec tions take detailed look synchronous dataflow various extensions sdf model 

basic notation denote set positive integers symbol set extended positive integers set natural numbers greatest common divisor integers denoted gcd ab remainder obtained dividing integer integer denoted mod ab notation represents function domain range respectively 
image denoted gd defined gd gx gd called image finite set denoted simply specifies number elements symbol denote set difference 
directed multigraph denotes ordered pair finite sets associated properties src snk src snk member called vertex bhattacharya parameterized modeling scheduling dataflow graphs 
page 
member called edge 
src called source vertex snk called sink vertex subgraph associated directed multigraph formed set edges src snk denoted subgraph understood context may simply say subgraph path nonempty sequence snk src snk src 
finite path en say directed src snk en path directed vertex called cycle directed cycle fundamental cycle cycle proper subsequence cycle 
graph called acyclic con tain cycles called cyclic 
called bipartite graph vertex set decomposed disjoint subsets edge joins vertex vertex 
synchronous dataflow sdf synchronous dataflow restricted version dataflow num ber tokens produced consumed actor firing output input fixed number known compile time 
edge sdf graph non negative integer delay associated corresponds number initial tokens edge 
edge graph number tokens con sumed number tokens produced equal homogeneous sdf 
single rate sdf production consumption mismatch edge number tokens produced equal number tokens consumed bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edge actors invoked average rate 
hand multi rate sdf allows sample rate mismatches edges 
fig 
shows multi rate sdf graph edge annotated number tokens produced consumed source sink actor edge actor actor specifies unit delay 
delay indicated triangular mark edge 
unit delay implemented initial token edge 
sdf edge source actor sink actor delay denoted src snk de pe ce denote number tokens produced src consumed snk firing actor corresponds removing tokens head buffer input edge appending tokens buffer output edge say actor fireable input tokens input buffer fire actor 
schedule sequence finite infinite actors term fi sequence called invocation corresponding actor schedule 
fi said admissible firing fireable immediately fi fired succession 
schedule admissible schedule fi admissible firing process successively firing invocations 
simple sdf graph 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
admissible schedule called executing schedule schedule executed repeatedly repetition schedule called schedule period execu tion 
fire invocations schedule represent state system numbers tokens queued buffers associated edges 
finite schedule periodic schedule invokes actor produces net change system state 
number tokens queued edge left unchanged 
schedules periodic admissible referred valid schedules 
sdf graph consistent valid sched ule 
dsp applications dealing infinitely indefinitely long sequences input data mandatory support infinite sched ules actor executions 
issues related infinite sched ules buffer memory requirement edge may unbounded graph may deadlocked schedule may may periodic significant advantage sdf issues resolved compile time 
exist efficient techniques determine compile time arbitrary sdf graph valid schedule periodic schedule deadlocks requires unbounded buffer sizes construct valid schedule resulting target program optimized 
minimum number bhattacharya parameterized modeling scheduling dataflow graphs 
page 
times actor fired valid schedule represented vector qg indexed actors suppress subscript understood 
minimum numbers firings derived finding minimum positive integer solution balance equations specify satisfy src pe snk ce edge 
vector exists called repetitions vector schedule minimal periodic schedule invokes actor exactly qg times 
important benefit static properties sdf offer potential thorough optimization effective optimization techniques devel oped contexts improving efficiency buffering code data memory minimization joint minimization code data high throughput block processing multiprocessor scheduling numerous efforts category example see synchronization optimiza tion variety objectives :10.1.1.33.5554
thesis looking scheduling techniques sdf graphs extensions 
fig 
shows commonly model compiling sdf graph 
compilation begins constructing periodic schedule sdf graph 
threading compiler steps schedule actor instance encounters generates block code derived predefined library actor code blocks implements actor 
typically defining new actor user specify code implement actor 
sequence code blocks bhattacharya parameterized modeling scheduling dataflow graphs 
page 
output code generator processed storage allocation phase inserts necessary code route data appropriately actors assigns variables memory locations 
output storage allocation phase target pro gram 
details method compilation 

extensions sdf model possible describe large class useful dsp applications sdf provides benefits static scheduling described section 
interesting applications require amount dynamic data dependent behavior inter actor level allowed sdf model 
extensions sdf model proposed objective sdf graph 
compiling sdf graph 
scheduler periodic schedule actor library threading compiler storage allocation target code bhattacharya parameterized modeling scheduling dataflow graphs 
page 
accommodate broader range applications maintaining significant part compile time predictability sdf 
boolean dataflow boolean dataflow model developed buck number tokens produced consumed edge fixed valued function control token control terminal actor 
control token transferred control port input output actor controls number tokens transferred conditional port 
bdf extends analysis techniques sdf graphs handle bdf actors conditional ports associating symbolic expressions conditional ports 
fig 
switch actor shown symbolic annotations 
switch actor bdf actor reads token control input depend ing value control token true false routes input output marked output marked possible interpretation symbolic annotations shown sequence actor execu tions switch actor proportion true boolean tokens con switch 
switch actor boolean dataflow model 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sumed control port number tokens produced true output switch actor np number tokens produced false output topology matrix constructed similar sdf graphs 
connected bdf graph topology matrix matrix rows indexed edges columns indexed actors entries defined topology matrix constant sdf function symbolic variables bdf graph 
topology matrix compact matrix vector form representing balance equations dis cussed section 
boolean dataflow possible solve balance equations symbolically 
symbolic solution lead detection com plete cycle sequence actor executions returns bdf graph original state net change number tokens residing fifo queue corresponding edge 
src snk constructing schedule bdf actors buck tries come quasi static schedule firing annotated run time condition firing occur 
buck shown bdf model turing complete key decision problems including finding finite bhattacharya parameterized modeling scheduling dataflow graphs 
page 
complete cycle undecidable bdf 
buck presents heuristics finding finite complete cycles form clustering algorithm attempts map graph traditional control structures 
clustering technique succeeds reducing graph single cluster graph executed quasi static schedule corresponding clusters 
resulting clusters executed dynamically 
bdf model subsequently extended buck integer con dataflow value control tokens arbitrary integers boolean 
scheduling techniques developed extensions bdf model 
behaved stream flow gao studied programming model called behaved stream flow non sdf actors switch select part predefined schemas called conditional schema loop schema 
restrictions guarantee infinite schedules implemented bounded memory 
restrictions gao model expressive power buck bdf model 
particular gao model turing complete 
multidimensional dataflow lee proposed extension sdf handle multidimensional data effi ciently 
standard sdf model assumes dimensional data streams multidimensional stream embedded dimensional stream bhattacharya parameterized modeling scheduling dataflow graphs 
page 
result elegant expose data parallelism efficiently 
multidimensional sdf md sdf programming data parallelism addition functional parallelism dataflow naturally models graphical block diagram environment key objective 
fig 
shows simple sdf graph 
numbers tokens produced consumed tuples 
balance equation edge balance equations dimension rx solved smallest integers solutions give number repetitions actor dimension graph fig 
balance equations precedence graph ra oa rb ib ra oa rb ib automatically constructed md sdf graph exposes func tional data parallelism leading efficient scheduling 
md sdf addresses issue re setting delays arc necessary correct functionality certain kinds applications involving repeated computations 
applications resetting delays illustrated section 
delay md sdf coupled tuple shown fig 

interpreted specifying boundary condition index space associ oa oa ib ib 
multidimensional dataflow model 
simple md sdf graph 
multidimensional delay md sdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ated arc sdf shown specifies number initial rows columns 
cyclo dynamic dataflow cyclo dynamic dataflow extension cyclo static dataflow 
cyclo static dataflow number tokens produced con sumed actor vary firings long variations form certain type periodic pattern 
time actor fired different piece code called phase executed 
specification distributor actor actor routes data received single input outputs alternation shown fig 

fig 
shows sdf representation fig 
shows rep resentation 
graph compiled cyclic pattern pure sdf graphs static periodic schedules constructed manner 
advantage sdf lead significantly lower buffer memory requirements 
cyclo dynamic dataflow extends cyclo static dataflow introducing data schedule 
cyclo static dataflow model compared synchronous dataflow model 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
dependent flow control model 
semantics constructed extra knowledge internals actors known programmer expressed natural way syntax analyzed automatic tools 
model allows symbolic variables reflects relevant properties actor behavior 
similar bdf con cept control tokens 
control token determine token transfer actor port actor phase executed 
allow scheduler evalu ate firing rule phase model restricted follows input ter consumption numbers depend symbolic variable 
actual phase invoked scheduler depend symbolic variable addition control tokens moment actual phase determined 
fig 
shows downsampling variable factor represented model 
time actor fires token consumed control input 
value variable expressed symbolically corresponds length sequence 
firings actor tokens consumed control terminal 
terminals token transfer 
downsampling variable factor cyclo dynamic dataflow 
di dout bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sequence function value token read control edge 
compared bdf provides way express programmer knowledge internals actor tool way knowing oth attempting parse individual library specifications 
specifications successfully checked consistency number tokens produced edge number tokens consumed complete cycle corresponding bdf graph checked 
specifications possess better analyzability functionally equivalent bdf specifications 
dataflow charts girault propose concept hierarchical finite state machines multiple concurrency models concurrent hierar fsm models statecharts idea decouple concurrency model hierarchical fsm semantics 
allows hierarchical fsms embedded variety concurrency models including dataflow discrete event synchronous reactive 
dataflow context model allows sdf graph refine state fsm conversely sdf actor refined fsm 
interesting possi bilities arise fsm system state refined sdf graph type signatures number tokens produced consumed fir ing sdf graphs different 
case fsm subsystem embedded sdf graph 
property exploited propose new model bhattacharya parameterized modeling scheduling dataflow graphs 
page 
computation called dataflow hdf actor finite number type signatures associated 
actor fires defined type signature effect 
type signatures allowed change firings 
somewhat similar order type sig natures cyclic predictable 
hdf system starts exe cution initial type signature effect actor solve balance equations find iteration 
semantics demand type signature remain constant duration corresponding iteration 
com iteration new set type signatures take effect balance equations solved anew redefine iteration 
number type signature combinations exponential number actors finite 
combination key issues decidable deadlock bounded memory schedules statically constructed 
hdf model combines sdf fsm semantics obtain greater expressivity sdf retains key advantage sdf decidability 
bounded dynamic dataflow fsm semantics introducing control flow sdf framework 
propose heterogeneous model built top extension sdf called scalable synchronous dataflow 
actor capacity process integer multiple basic token production consumption quantities output input port providing block processing parameter 
substantially reduce inter actor context switching bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sized implementations 
extended bounded dynamic dataflow dis control flow dynamic data flow 
handled introducing dynamic ports distinct normal ports upper bound provided data rate dynamic port keep model bounded 
basic strategy software synthesis identify synchronous regions include blocks provide internal static schedule region 
program generated handle dynamic behavior run time 
control flow handled fsms 
fsm state consists arbitrary set con nected blocks block may part multiple states 
set blocks asso ciated state form subgraph activated corresponding state running 
set transitions specified state 
logical expression events needed trigger transition evaluated run time true successor state started 
code generation control flow results pro switch case statement state repeatedly executed combination multiple events causes stopped state entered 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
chapter 
parameterized dataflow modeling introduce parameterized dataflow modeling framework imposes hierar chy discipline underlying dataflow model allows subsystem behavior controlled set parameters 
parameters vary run time allowing subsystem behavior change dynamically 
parameters control functional behavior token flow behavior dataflow graph 
parameter coordination mechanism parameterized graph behaves graph underlying dataflow model invocations assume different configurations invocations 
parameterized dataflow modeling differs dataflow modeling tech niques discussed section meta modeling technique parameter ized dataflow modeling requires underlying model dataflow model notion graph iteration invocation dataflow zation concepts incorporated dataflow model satisfies requirement increase expressive power 
example minimal peri schedule natural notion iteration sdf md sdf 
similarly bdf complete cycle exists specify iter ation subsystem 
possible combine parameterization techniques existing dataflow models sdf md sdf yield expressivity 
parameterization meta modeling technique discussed bhattacharya parameterized modeling scheduling dataflow graphs 
page 
section 
clarity uniformity sdf currently popular dataflow model dsp develop parameterized dataflow formally context sdf 
comprehensive development parameterized synchronous dataflow psdf model introduces increased dynamic behavior sdf framework controlled fashion 
girault charts hierarchical fsms multiple concurrency models example meta modeling 
bounded dynamic dataflow seeks combine different models computation dataflow finite state machines 
parameterized dataflow differs require departure dataflow framework 
may advantageous users dsp design tools accustomed working purely dataflow domain 
broader sense parameterized dataflow approach spirit girault charts goal enhance effectiveness range existing conceivable models computation advocating single new technique 

parameterized synchronous dataflow psdf uses hierarchical parametrized representation hierarchy denote control dependency parameters expressed symbolic vari ables control functional dataflow behavior hierarchical sub systems 
subsystem associated parameters maintain constant value invocation subsystem constraining psdf subsystem bhattacharya parameterized modeling scheduling dataflow graphs 
page 
behave sdf subsystem invocation 
dynamism introduced allowing parameters assume different values invocations sub system 
gives rise locally synchronous globally dynamic property 
elaborate concept section 
psdf graph dataflow graph consisting psdf actors psdf edges 
psdf actor characterized certain parameters actor functionality dataflow behavior number tokens consumed produced different ports edge incident actor depend parameters 
example psdf actor characterized parameters factor phase factor decimation ratio phase denotes index input token transferred output 
functionality actor depends parameters dataflow behavior depends factor parameter 
precisely number tokens consumed actor depends factor number tokens pro duced actor fixed independent parameters 
addition externally visible parameters external parameters psdf actor internal parameters state information visible side 
henceforth say psdf actor parameters refer external parameters 
example actor see external parameters distinguish external dataflow parameters fac bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tor external non dataflow parameters phase 
dataflow behavior actor token production consumption depends external dataflow parameters depend external parameters 
context worthwhile take closer look different roles played parameters dataflow inputs psdf actor 
time actor invoked consumes tokens dataflow inputs perform certain actions depending value consumed tokens 
value dataflow input change invocation associated actor control behavior actor granularity actor invocation 
hand parameter general set produced maintains constant value sequence successive invocations actor 
parame ters control actor behavior coarser level granularity dataflow inputs 
simplest case parameters assigned static values main tained invocations entire application 
psdf model allows fine grained control time period units number invocations enclosing subsystem parameters maintain constant values 
aside note external actor parameters usually maintain constant val ues multiple invocations actor internal actor parameters state information fir filter change invocation 
derive similar properties subsystem parameters shortly 
psdf edge characteristics number units delay edge number initial tokens bhattacharya parameterized modeling scheduling dataflow graphs 
page 
unit delay value initial token called delay value associated number invocations sink actor associated delay values re initialized re initialization period psdf actor psdf edge parameters determine charac 
application modeled psdf psdf specification called psdf subsystem 
usually application naturally expressible terms certain parameters 
example block adaptive filtering application size block filter order natural parameters application 
psdf subsystems intuitive concept parameters similar psdf actors 
parameters psdf subsystem may visible externally enclosing graph external subsystem parameters parameters may visible externally internal subsystem parameters 
parameters comprise immediate parameter set subsystem 
say parameters subsystem usually refer immediate parameters stated 
external subsystem parameters divided external data flow external parameters depending affect dataflow behavior subsystem 
enclosing hierarchical sub system psdf subsystem appears just psdf actor 
psdf model naturally supports hierarchical specification format psdf graph con bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tain number child psdf subsystems abstracted psdf actors 
semantic hierarchy called control hierarchy distinct syntactic hierarchy allowed supported usual fashion system equivalent flat syntactic hierarchy 
psdf subsystem divided possibly empty control flow part data flow part possibly empty mixture control flow data flow 
appear form psdf graphs called init graph body graph subinit graph 
body graph models dataflow functionality sub system init subinit graphs control behavior body graph appropriately configuring subsystem parameter values actors init subinit graphs 
init graph models pure control flow sense accepts dataflow inputs outside produces dataflow outputs responsible configuring external dataflow subsystem parameters 
subinit graph accepts dataflow inputs produce dataflow outputs configures internal subsystem parameters 
conceivably subinit graph information available dataflow inputs configuring value inter nal subsystem parameter 
reason init graph accept dataflow inputs similar purposes lies invocation semantics psdf 
subinit graph invoked inherent part dataflow specification parent graph subsystem embedded hierarchical actor init graph invoked disjoint fashion separately invocation bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parent graph 
natural subinit graph init graph accept dataflow inputs parent graph actors 
purpose init subinit graphs configure parameters produces dataflow outputs 
external subsystem parameters configured init graph actor subsystem parent graph dataflow predecessor subsystem 
case dataflow edge parent graph actor subsystem corresponding parameter bound dataflow edge 
seen external parameters divided external data flow external parameters depending affect data flow behavior subsystem 
basis external parameters configured divided groups init configured external parameters simply init configured parameters configured init graph parent configured external parameters simply parent configured parameters configured parent graph actors 
viewpoint inter nal subsystem parameters referred subinit configured parameters 
subinit configured parameters parent configured parameters referred non init configured parameters 
init configured external parame ters include external dataflow parameters parent configured nal parameters subset external parameters 
subsystem inherits parameter set parent subsystem inherited parameter set 
psdf specification actor parameters psdf graph bhattacharya parameterized modeling scheduling dataflow graphs 
page 
assigned fixed static values assigned subsystem parameter values 
case say psdf graph uses subsystem parameters 
param eter values set producer consumer fashion graph graph basis psdf graph parameters sets 
subsystem specification purpose init subinit graphs completely specify behavior body graph computing values parameter body graph uses passing value inherited subsystem parame ter value 
necessary body graph inherited parame ters uses init configured external parameters internal parameters subsystem belongs 
configuring behavior body graph init subinit graphs utilize information set init subinit graphs hierar higher level subsystems inherited parameters associated subsystem 
addition subinit graph init configured parent configured external subsystem parameters values 
usage pattern men tioned referred psdf scoping rules 
motivation usage pattern clear introduce local synchrony concepts section formal development psdf model chapter 
invocation semantics subsystem follows 
init graph subsystem invoked invocation subsystem parent graph furthermore actor init graph configures nal parameter value constrained fire invocation init graph 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
invocation comprises invocation subinit graph followed invocation body graph 
parent configured external param eters bound dataflow input edges consumes token edges invocation 
subinit graph actors responsible configuring internal parameter values constrained fire invocation subinit graph 
scenario subsystem internal parameters parent configured external parameters maintain constant values cation subsystem change values invocations init configured external parameters maintain constant values invocation parent graph 
note conceptually similar happens psdf actor 
perspective invoking psdf subsystem application designer assign values actor parameters body graph subsystem ways parameter intended maintain constant value entire duration application assign static fixed value parameter intended maintain constant value cation enclosing parent graph subsystem assign subsystem parameter values set init graph init configured external parame ters parameter intended maintain constant value invocation subsystem general assume different values sub system invocations assign subsystem parameter values set bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subinit graph internal subsystem parameters similarly actor parameters subinit graph intended change invocation subsystem assigned parent configured external subsystem parameter values init configured external parameters inherited parameters depending actor parameters maintain constant values invocation parent graph invocation ancestor graph higher hierarchy tree 
part psdf specification token flow port psdf actor specified programmer statically fixed integer symbolic expression actor parameter set unspecified value 
third case programmer provide software subroutine called parameter tation function actor take input actor port assignment values parameter set produce output token flow speci fied port particular configuration parameter set 
similarly notion parameter interpretation function edge programmer optionally provide associated characteristics edge cally symbolically specified 

local synchrony mentioned init graph subsystem participate dataflow outside graph 
subinit graph accept dataflow inputs outside produce dataflow outputs 
body graph course accepts produces dataflow interface ports 
token flow ports bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem potentially depend internal parameters external parameters subsystem 
locally synchronous seman tics psdf forbids subsystem token flow depend internal subsystem parame ters parent configured external subsystem parameters subset external non dataflow subsystem parameters 
reason restriction explained different perspectives philosophically scheduling viewpoint 
recall token flow actor port function external data flow parameter set actor depend actor external flow parameters internal parameters 
analogous fashion philosophical perspective subsystem token flow depend external dataflow subsystem parameters internal subsystem parame ters external subsystem parameters 
functional behavior subsystem naturally lead parameter choices interface token flow behavior subsystem satisfies local synchrony condition 
semantic perspective local synchrony necessary ity psdf graph 
parameter configuration mechanism invocation semantics local synchrony subsystem ensures psdf graph specification behaves sdf graph invocations 
subsystem embedded psdf graph init graph subsystem invoked invocation init graph uses inherited parameter values fixed init subinit graphs bhattacharya parameterized modeling scheduling dataflow graphs 
page 
hierarchically higher level subsystems behaves sdf graph invocations 
init graph configures external dataflow subsystem parameters fixed values invocation token flow hierarchical actor fixed parent graph behaves sdf graph invocation 
similarly external parameters set fixed values init graph actors fired 
invocation subinit graph uses fixed parameter values behaves sdf graph 
invocation subinit graph fixes internal parameters body graph uses fixed parameter values invocation equivalent sdf graph period 

psdf dataflow models parameterization concept appears naturally application modeling context underlying sdf model powerful semantics psdf intuitive easy understand 
fig 
shows example psdf rep resentation actor 
compared representation fig 
psdf version clearly concise representation 
factor 
downsampling variable factor psdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
concepts psdf explored models different contexts different treatments 
discussed section bdf model symbolic variables form 
md sdf model addresses issue re initialization delays 
fact lee explored re initialization concept context sdf model 
hdf concept leaf sdf actor having different token consumption production type signatures statically specified 
idea actor parame ters known block diagram dsp programming environments 
convention ally parameters assigned static values remain unchanged execution 
parameterized dataflow approach takes concept actor parameters starting point develops comprehensive framework dynamically re configuring behavior dataflow actors edges graphs subsystems 
addi tion parameterized framework provides systematic formalism unifies var ious ideas explored disjoint fashion powerful unit 
example concept vectorization sdf graph pro loops sdf actor optional block processing factor 
psdf block processing factor modeled actor parameter statically configured dynamically re configured 
dynamic re configuration block processing factor may desirable adapt application perfor mance time varying application constraints involving metrics latency throughput power consumption 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 

examples psdf specifications section illustrate syntax semantics model appli cation psdf representation examples 
example shows portion generic psdf specification exercises features psdf model 
examples demonstrate concrete applications 
psdf schedul ing examples illustrated section 
notation 
hierarchy denoted enclosing block double rectangles 
immediate parameter set subsystem specified inside subsystem notation params param param 
inside actor actor parameters represented left hand side equation assigned suitable values right hand side 
brevity times included actor parameters determine dataflow behavior actor affect macro level functionality applica tion 
notation sets param param 
inside actor denote configuration parameter actor 
actor port marked token flow information static integer symbolic expression parameters implies programmer left unspecified pro vided suitable parameter interpretation function 
delay edge denoted placing triangular mark edge 
units delay edge labeled nd followed comma separated expressions parentheses pro vide initial values re initialization periods tokens 
expression bhattacharya parameterized modeling scheduling dataflow graphs 
page 
consists parts separated comma 
part specifies initial value second part specifies re initialization period denotes re initialization necessary 
units delay expressions provided remaining delay tokens take properties expression sequence 
example fragment generic psdf specification fig 
shows component generic psdf specification 
actor parameters denoted prefix ap subsystem parameters start prefix sp 
graph consists non hierarchical actors hierarchical actor subsystem corresponding subsystem parameters sp sp sp comprise immediate parameter set init graph single actor uses inherited subsystem parameter sp 
immediate parameters sp external dataflow parameter set init graph init configured external parameter sp external parameter set parent graph actor parent configured external parameter sp internal parameter set subinit graph actor 
different actor parame ters assigned different subsystem parameter values accordance scoping rules 
output port body graph actor token flow ports actors statically specified fixed integers symbolic expressions subsystem parameters token flow depends 
example body graph actor uses subsystem parameter sp consumes fixed quantity tokens input port produces bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ap sp port sp graph init port port graph subinit graph body sp sets sp 
component generic psdf specification 
port port sets sp ap sp ap sp ap sp port bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sp sets sp sp sp port ap sp ap sp port ap sp graph subsystem params sp sp sp sp number tokens output port 
actor user provided suit able parameter interpretation function determine token flow output port run time 
denote unknown token flow symbolic variable ub 
local synchrony verification subsystem token flow dataflow interface ports subinit graph body graph subsystem computed checked proper containment 
token flow input port subinit graph port sp function init configured parameter token flow input port body graph port statically fixed 
token flow output port body graph port equal unknown quantity ub deter mined compile time 
parameter configuration actor seen ub general depend subsystem parameters sp external data flow parameter sp internal parameter 
recall subsystem locally synchronous ub independent sp sp configured subinit graph init graph 
actor parameter ap assigned subsystem parameter sp local synchrony subsystem depend ap external parameter external dataflow parameter actor determine dependence ub sp 
note port dataflow interface port subinit graph body graph 
subsystem parameter sp bound port subsystem consumes single token input port invocation 
token flow port known compile time relevant local synchrony verification 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
example computation fibonacci numbers user input example fig 
psdf subsystem fib single parameter denoted symbolic variable corresponds fibonacci number computed 
init graph subsystem actor sets value user input random number generation 
dataflow part subsystem body graph uses parameter add actor inputs coming feedback edges output 
input unit delay initialized 
second input units delay initialized zero 
delay values re initialized invocations add sets add graph fib init factor phase 
computation pth fibonacci number psdf 
subsystem fib params graph fib body print bhattacharya parameterized modeling scheduling dataflow graphs 
page 
actor 
output addition goes actor factor actor parameter factor actor set phase parameter set input sample transferred output 
downsampling result passed print actor prints result 
fig 
shows corresponding sdf system computing seventh fibonacci number 
evident representations psdf represen tation straightforward intuitive extension underlying sdf model compute arbitrary sequence fibonacci numbers 
example weighted average variable length data packets example fig 
objective compute weighted average input data stream produced actor 
data stream broken packets frames 
frame consists contiguous packets packet consists contiguous add 
computation th fibonacci number sdf 
print bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tokens 
length packet number packets frame speci fied run time sdf actor 
weighted average frame computed respect weighted value packet 
correspond ing psdf subsystem modeled having parameters denoted symbolic variables flen 
length packet denoted flen gives length frame 
init graph subsystem actor reads tokens produced actor corre sets flen 
compute weighted average body graph subsystem data values data packet length multiplied subsystem params flen graph body graph init mult sets flen flen factor factor add flen phase flen phase 
weighted average variable length data packets psdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
div divisor flen print mult actor product packet added add actor total flen additions sum divided flen div actor obtain weighted average 
div psdf actor divisor specified actor parameter divisor 
example actor parameter sor assigned value subsystem parameter flen 
result computation printed print actor 
re initialization corresponding delay values necessary invocations mult actor flen invocations add actor 
example prediction error filter example fig 
models prediction error filter linear adap tive filter implementing mean square lms algorithm pro vide best prediction value random signal 
value signal provides desired response adaptive filter past values signal supply input applied adaptive filter estimation predic tion error serves output 
psdf model application shown fig 
topmost sub system predictor empty init subinit graphs 
body graph instances fork actor 
functionality fork actor simply replicate input outputs 
outputs fork actor fork provide current value random signal 
output serves desired response adaptive filter port output delayed supplied second fork actor fork provides past value random signal bhattacharya parameterized modeling scheduling dataflow graphs 
page 
graph predictor body port port port port fork fork subsystem params flen step graph subinit fir len flen cfs st step len flen sets subtract 
prediction error filter psdf model 
subsystem predictor port graph body port port port sets step flen bhattacharya parameterized modeling scheduling dataflow graphs 
page 
port graph init fork plot port outputs 
output fork goes adaptive filter input signal port output delayed provided input weight control mechanism adaptive filter port 
error output adaptive filter plotted plot actor supplied weight control mechanism delay port 
control hierarchy model lms adaptive filtering process subsystem 
parameters flen step model adaptive fir filter length step size adaptation weight control mechanism coefficients fir filter respectively 
init graph subsystem appropriate values assigned step size filter length actor subinit graph actor accepts prediction error current value random signal inputs uses step size filter length parameters update filter coefficients fir actor filtering input sample 
invocation actor inputs delay tokens initialized actor provides initial guess filter weights 
actor parameters fir actors assigned suitable subsystem parameter values shown 
subtract actor determines predic tion error filter output desired response 
example fixed step size filter length input samples 
multiple runs application programmer experiment different values step size filter length minimize prediction error 
depending application specific requirements programmer bhattacharya parameterized modeling scheduling dataflow graphs 
page 
control length input samples fixed step size filter length making parameter topmost subsystem predictor config parameter predictor subsystem init graph 
subsystem step size step filter length flen considered external subsystem parameters external case visible outside serve handles control subsystem function ality 
remain fixed invocation subsystem parent graph 
hand parameter modeling fir filter coefficients inter nal subsystem parameter subsystem uses local purposes may change value invocation subsystem 
example invocation subsystem comprises single invocations fir subtract actors 
internal parameter changes invocation subsystem fir actor effec tively receives new set coefficients invocation 
recall discussion dataflow inputs parameters actor section observe filter coefficients prediction error filter example modeled dataflow input actor 
alternative model subsystem shown fig 

model longer internal parameter subsystem actor supplies flen number filter coefficients fir actor dataflow input subsystem empty subinit graph 
demon analogous programming models correct way modeling psdf ways modeling func bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tionality programmer chooses practice may guided vari ous application specific considerations example version fir filter available actor library 
section elaborate relationship dataflow inputs actor parameters 
subsystem params flen step port port port port sets step flen graph body st step len flen flen graph init flen fir len flen subtract 
subsystem alternative modeling style predictor error filter example 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
port chapter 
formal semantics psdf previous chapter introduced psdf concepts intuitive informal man ner 
chapter introduce formalization enables precise spec ification analysis psdf semantics 

parameters parameter set finite set pn objects associated domain denoted domain pi finite nonempty set 
called parameter special object call unspeci fied parameter value denote reserved incomplete parame ter settings 
parameter set pn satisfy domain pi parameter pi default value default pi associated default pi domain pi 
example consider parameter set xy domain domain abc default values parameters specified default default suppose pn nonempty parameter set 
configuration element subset ordered pairs pn vn bhattacharya parameterized modeling scheduling dataflow graphs 
page 
vi domain pi vi said value parameter configuration 
pn vn configuration parameter set called parameter configuration denotes value vi cp say configuration complete 
incomplete 
empty parameter set empty configuration empty con figuration complete 
example parameter set yb complete configuration ya incomplete configuration 
cp sets domain pi viewed domain parameter contributes defining precise configuration higher level object 
context psdf model higher level objects include graph actors edges 
combinations permissible individual parameter values necessarily acceptable 
configuration domain associated nonempty parameter set denoted domain set compatible valid configurations context 
domain pn vn vi domain pi configuration domain viewed error configura tion empty parameter set empty domain associated 

occasionally overload certain symbols domain cases closely related meanings 
cases meaning clear arguments overloaded symbols context 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
example parameter set domain domain values may compatible making ya invalid con figuration concept valid configuration clear section discuss psdf actor parameters 
henceforth thesis consider valid configurations stated 
subset domain consists configurations valid complete denoted domain configuration nonempty parameter set nonempty subset parameters projection denoted cp defined cp pcp 
projection obtained discarding values associated parameters outside projecting configuration empty nonempty empty configuration produces empty configuration 
example param eter set parameter subset configuration parameter set function domain range set subset say invariant pair domain fc fc 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
words invariant value entirely function parameters outside intuitively function depend member depends members family disjoint parameter sets pm associated domains domain domain domain pm joint domain denoted defined domain pi 
set parameterized objects disjoint parameter domains combined single composite object resulting composite parameter domain neces equal joint domain component objects 
actual domain may proper subset joint domain additional configuration constraints imposed application context 
constraints may preclude joint certain pairs component configurations 
development psdf model situations arise composite objects inherit joint domain component parts 
refer process setting unspecified parameter values incom plete configuration process refining configuration 
suppose nonempty parameter set nonempty subset domain domain refinement respect defined pc 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
denotes set parameters contained unspecified unspecified refining configuration empty nonempty respect empty configuration maintains original configuration 
example parameter set yc yc 
psdf actors cp develop psdf concepts precisely useful employ slightly detailed model dataflow graph topologies commonly analysis pure sdf graphs 
representing dataflow specification directed multigraph vertices correspond actors edges connect pairs vertices represent psdf graph bipartite directed graph edges connect actor output ports actor input ports 
representation psdf actor finite set input ports finite set output ports actor input output ports unique sense actor distinct actors 
input output port actor write actor psdf actor number tokens produced consumed port bhattacharya parameterized modeling scheduling dataflow graphs 
page 
general dependent parameter values 
parameter set psdf actor parameter set denoted params parameter domain domain domain params defines set valid parame ter value combinations domain denote set combinations domain params complete valid 
configuration denoted valid necessarily complete configuration params configuration domain viewed syntax error underlying block diagram programming language 
params means corre sponding parameter value statically specified specified programmer 
value determined dynamically run time 
furthermore value may change different invocations enclosing psdf subsystem 
example concept parameterized actors employed block dia gram dsp programming environments years 
medium large grained dsp functions fir iir filters fft computations naturally parameterizable 
simple example consider actor ptolemy parameters params factor phase represent respectively decimation ratio index input token transmitted output 
domains parameters domain factor domain phase pre specified maximum integer value example determined maximum word length host computer 
phase bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameter actor constrained take value factor parameter reflected actor domain domain factor phase domain factor domain phase 
factor phase valid configuration actor factor phase invalid configuration 
port consumption function associated denoted domain gives number tokens consumed specified input port invocation actor complete configuration input port gives number tokens consumed port params parameter assigned value cp port production function domain associated defined similar fashion 
actor understood context may simply write place 
general software subroutine provided takes input complete configuration outputs boolean value indicating domain outputs values bhattacharya parameterized modeling scheduling dataflow graphs 
page 
refer subroutine parameter inter function order facilitate practical implementations applications specified psdf max token transfer function associated denoted specifies upper bound maximum number tokens transferred pro duced consumed port actor maximum value necessary ensure bounded memory executions consistent psdf specifications 
concept bounding maximum token transfer actor port appears similar different discuss section 
definitions complete configuration domain psdf actor yields pure sdf actor denote invocation constant number tokens con sumed input port constant number tokens pro duced output port sdf actor called sdf instance psdf actor psdf actor viewed mapping domain set sdf actors 
summary psdf actor attributes parameter set params parameter domain domain configuration 
cases method processing parameters streamlined reduce run time overhead parameter interpretation 
discuss section 
streamlining conflict techniques consistency analysis scheduling 
analysis adopt simpler formalization clarity 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
may complete incomplete valid set input ports set output ports port consumption production functions specify dataflow properties actor parameter interpretation function fa provides implementations functions max token transfer function specifies upper bound tokens trans actor port 
important properties actor execution time internal memory requirement may represented param fashion optimization purposes 
report focus properties essential operational semantics psdf 
definitions psdf actor nonempty parameter set valid complete configurations pathological 
actor usable practical sense 
valid psdf actor satisfies params domain furthermore say psdf actor pure sdf actor params domain refer actors type psdf actors 
consider psdf actors satisfy params domain port consumption production quantities known constant respective parameter domains 
refer type psdf actors 
may pathological class actors reality actors common 
example iir filter actor ptolemy implements infinite impulse response filter transfer function bhattacharya parameterized modeling scheduling dataflow graphs 
page 
actor parameters bhattacharya parameterized modeling scheduling dataflow graphs 
page 
params iir gain numerator denominator gain specifies floating point arrays numerator denominator specify respectively 
actor input port output port consumes token input port produces token output port 
words valid configuration params iir type actors differ pure sdf actors functionality parameterized dataflow behavior 
dataflow behavior affected distinction type type actors largely ignored past analysis scheduling optimized implementation sdf graphs 
exception code sharing optimization developed sung kim ha attempts implement multiple parameterizations actor definition multiple copies type actor definition sequence program memory instructions 
objective technique reduce memory requirements type type actors core functionality replicated specification 
hz distinction type type actors primarily arises issues syntax 
type actors provide great convenience complicating compilation process dsp programming environments employ sdf typically incorporate actors 
previous analysis optimization techniques sdf graphs developed apply specifications contain arbitrary combinations type type psdf actors 
type psdf actor nonempty parameter set port production consumption quantities may vary depending parameter setting 
possibility significantly complicates problem compiling psdf specifications 
design psdf representation paradigm centered addressing complication efficient manner 
exchange complication obtain model higher expressive power offered type type psdf actors 

psdf edges psdf actor psdf edge associated parameter set parameter domain configuration 
denoted params domain respectively 
set domain defined manner analogous domain connectivity information psdf edge specified attributes src snk value src output port psdf actor snk input port psdf actor 
note case overloading directed multigraph definition edge section sdf src snk refer source actor sink actor respectively case psdf def bhattacharya parameterized modeling scheduling dataflow graphs 
page 
src snk definition mean clear context 
apart connectivity psdf edge characteristics amount delay edge number initial tokens referred delay tokens initial value delay token number invocations re initialization period sink actor actor port belongs delay token re initialized initial value 
different configurations parameter set psdf edge may allow range different values quantities 
delay function domain associated gives delay edge results valid parameter setting 
delay token edge delay initial value function domain gives ini tial value specified delay token valid parameter configuration delay re initialization period function domain specifies re initialization period delay token valid configuration parameter set parameter interpretation function fe provides implementations manner analogous parameter interpretation function psdf actor 
notation ambiguous may suppress attributes snk params domain fe simply denote ordered pair src snk specifying connectivity information 
params constant domain max delay value denoted bhattacharya parameterized modeling scheduling dataflow graphs 
page 
specified provides upper bound maximum number delay tokens reside time bound necessary ensure unbounded token accumulation psdf edge invocations psdf graph belongs leading bounded memory executions consistent psdf specifications 
issues discussed detail sec tions 

psdf graphs psdf graph ordered pair vg vg set psdf actors set psdf edges connect subset actor output ports subset set input ports 
precisely src vg snk vg vg vg vg vg 
furthermore edges share common originating terminating port distinct members src src snk snk 
hold ordered pair vg psdf graph 
psdf graph vg denote set internally connected bhattacharya parameterized modeling scheduling dataflow graphs 
page 
input ports snk internally connected output ports src ig og respectively 
sets ig og may proper subsets vg member vg ig called interface input similarly member vg og called interface output sets interface inputs outputs denoted inputs outputs respectively 
parameter set defined params ap vg params ep params 
called actor parameter parameter domain domain similarly ep called edge parameter domain ep domain set ified parameters actor defined params empty params 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
set unspecified parameters edge similarly defined ep params empty params 
nonempty parameter set member params parameter configuration configuration params domain params denoted domain joint domain params see domain denotes set complete configurations domain intuitively params set psdf actor edge parameters values left unspecified application programmer 
simplified psdf graph associated vg directed multi graph vg actor src actor snk 
simplified graph commonly representation analyzing pure sdf graphs 
parameterized repetitions vector suppose vg psdf graph domain complete configuration clearly pure sdf graph emerges apply ing configuration unspecified actor edge parameters producing complete configurations actor edge parameter psdf actor bhattacharya parameterized modeling scheduling dataflow graphs 
page 
define instantiated configuration associated complete configuration similarly psdf edge instantiated configuration associated complete configuration defined sdf graph results complete configuration called instance associated complete configuration denoted precise terms bhattacharya parameterized modeling scheduling dataflow graphs 
page 
vg instantiated sdf graph sample rate consistent possible compute parameterized repetitions vector indexed actors respect complete configuration satisfies configured balance equations edge sc src qg sn sn snk sc sc actor src actor source sn actor snk actor sink precisely configured balance equations positive integer solution exists unique minimal positive integer solu tion positive integer solution exist exist 
context simplified psdf graph section nota tion accordance sdf graphs described section 
particular configuration domain psdf graph simplified psdf graph pe refer number tokens produced psdf edge src config ce refer actor src actor src number tokens consumed psdf edge actor snk snk config de refer number actor snk delay tokens psdf edge suppressing argument cause ambiguity context pe ce de src snk refer source sink actors psdf edge source sink actor ports context max token transfer bound actor port interpreted bound number tokens produced pe consumed ce psdf edge bhattacharya parameterized modeling scheduling dataflow graphs 
page 
incident actor port 

psdf specifications psdf specification contains psdf graphs init graph subinit graph body graph intuitively invoked invocation minimal periodic invocation hierarchical par ent graph embedded invoked invocation invoked invocation parameter values remain constant execution parent subsystem computed passed subsystem parameter settings 
parameter values remain constant invocation change invocations set set interface outputs outputs init graph partitioned disjoint subsets outputs set output ports set parameter values body graph set output ports set parameter val ues subinit graph 
function bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tb params associates interface output body graph parameter controlled 
similarly function specifies parameter set member invocation produce exactly token member outputs psdf specific issues sample rate consistency local synchrony examined section 
interface outputs subinit graph exclusively set parameters body graph 
mapping associates interface output body graph parameter configured 
fs subscript stands subinit tion constrained produce exactly token member outputs mappings satisfy tb fs outputs bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tb fs outputs params 
images partition parameter set body graph 
ts params fs outputs params tb tb fs fs specification possibly empty set inputs denoted inputs possibly empty set outputs denoted outputs inputs outputs correspond endpoints dataflow connections edges embedded larger subsystem 
unspecified parameter values subinit graph may bound dataflow inputs subinit graph may receive dataflow inputs case values input tokens set values designated graph parameters case tokens directed inputs computational actors types inputs inputs bound parameters parameter inputs inputs dataflow inputs subinit inputs inputs dataflow inputs body inputs 
subsets inputs denoted respectively 
mapping specifies parameter set parameter input 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ps ts inputs inputs inputs 
outputs simply outputs associated body graph 
ps params outputs outputs 
parameters parameters contained set parameters parameter set denoted params defined params params ps ts bhattacharya parameterized modeling scheduling dataflow graphs 
page 
params params params 
parameters configured assigned values init subinit graphs hierarchically higher level subsystems refer mechanism parameter value passing distinguish dataflow 
parameters params appear part parameters termed parameters respectively denote subsets actor edge parameters params configuration configura tion params domain params denoted domain joint domain params see domain denotes set com plete configurations domain words parameter parameter associated init graph parameter associated subinit graph bound input output init graph 
hierarchical actors designing application reasonable complexity abstraction por tions design single elementary block actor necessary scalability modularity 
block diagram dsp programming environments provide concept hierarchical block form internals block described dataflow graph 
context refer kind hierar chy syntactic hierarchy 
mentioned section syntactic hierarchy allowed psdf subblocks dealt usual way flattening system replacing subblock dataflow graph represents 
syntactic hierarchy connotations semantics dataflow model scheduling decisions simply serves convenient tool application programmer 
sections parameterized model delivers addi tional expressive power application programmer providing psdf sub systems distinct subblocks represent logical functional units capable configuring internal functional dataflow behavior 
nal handles available subsystem parameters control sub system behavior outside subsystem 
naturally leads concept hierarchical representation subsystem parameters configured ancestor subsystems 
developing support hierarchy particularly desirable child subsystem appears just psdf actor 
psdf model incorporates concept hierarchical psdf actor repre bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sents child psdf subsystem specification 
hierarchy different syntactic hierarchy sense arises direct consequence psdf semantics key ingredients psdf semantic model 
refer hierarchy semantic hierarchy control hierarchy henceforth refer hierarchical actors context semantic hierar chy 
semantic hierarchy plays important role psdf operational semantics discuss section 
particular syntactic hierarchy semantic hierarchy flattened presence factored scheduling consistency rules 
formally hierarchical psdf actor simply hierarchical actor psdf actor associated subsystem subsystem psdf spec ification 
input output ports correspondence inputs outputs subsystem bijective mapping gh inputs subsystem outputs subsystem defines correspondence 
illustration coordination mechanism init graph subinit graph body graph psdf specification represented hierarchical actor fig 

shows hierarchical psdf actor appears externally internals specification represented bold arrow block indicates existence parameters block configured externally 
slash input output edge indicates group bhattacharya parameterized modeling scheduling dataflow graphs 
page 
init params body set subinit 
operational structure psdf specification 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edges 
dataflow denoted bold lines denoted dashed lines 
parameter set domain set complete configura tions params params domain domain domain domain subsystem sections discuss techniques determine production consumption functions derive parameter interpretation function general max token transfer function derived memory requirements subinit body graphs subsystem represents 
deriving tight memory bounds complex issue warrants investigation 
require application programmer explicitly specify max token transfer function hierarchical actor actor hierarchical actor called leaf actor 
general psdf graphs may contain hierarchical leaf actors 
actor psdf graph say immediately nested hierarchical say subsystem immediately nested subsystem say child subsystem called parent graph enclosing subsystem associated init subinit body graph called parent subsystem parent specification contain hierarchical actors referred leaf graph 
leaf subsystem bhattacharya parameterized modeling scheduling dataflow graphs 
page 
leaf graph 
actor nested nesting depth sequence psdf specifications gd immediately nested gi immediately nested gi similarly subsystem nested nesting depth nested nesting depth topmost psdf specification implicitly assumed embedded psdf graph single hierarchical actor represents 
local synchrony psdf motivation consistency issues psdf arises principle local sdf scheduling psdf graphs concept able view psdf graph sdf graph invocation graph suitably configured 
local sdf scheduling highly desirable allows schedule psdf graph subsystems inside dynamically re config sdf schedule leveraging rich library scheduling analysis techniques available sdf 
relevant issues local sdf scheduling classi fied distinct categories issues related underlying sdf model relate bounded memory execution issues arise direct consequence hierarchical parameterized representation psdf pro poses 
sdf consistency issues sample rate mismatch deadlock detection appear category third category requires subsystem embedded graph hierarchical actor behave sdf actor invocation graph may encompass invocations bhattacharya parameterized modeling scheduling dataflow graphs 
page 
embedded subsystems 
general subsystem communicates parent graph interface ports requirement translates necessity fixed patterns interface dataflow behavior subsystem 
con psdf implies able perform local sdf scheduling referred local synchrony consistency simply local synchrony applies psdf graphs psdf specifications subsystems 
psdf graph locally synchronous domain instantiated sdf graph properties sample rate consistent exists deadlock free max token transfer bound sat port actor max delay value bound satisfied edge child subsystem locally synchronous 
formally local syn condition psdf graph domain valid schedule actor input port output port edge exists hierarchical actor subsystem locally synchronous 
satisfied domain inherently locally synchronous simply locally synchronous 
domain satisfies inherently locally synchronous simply locally non synchronous 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
inherently locally synchronous inherently locally non synchronous partially locally synchronous exists domain domain satisfied exists satisfied 
separately refer different components dataflow consistency existence valid sched ule bounded memory consistency upper bounds satisfied actor port edge subsystem consistency subsystem locally synchronous psdf graph intuitively psdf specification locally synchronous interface data flow behavior token production consumption interface ports determined entirely init graph 
indicated local synchrony specification necessary order enable local sdf scheduling specification embed ded graph communicates actors parent graph dataflow edges 
conditions satisfied specification locally synchro nous 
init graph produce exactly token output port invocation 
output port bound parameter setting body graph subinit graph 
alternative allow multiple tokens produced init output port assign values dependent parameter successive invocations leads problems 
line number tokens produced number tions giving rise sample rate consistency issues graph bound bhattacharya parameterized modeling scheduling dataflow graphs 
page 
aries needlessly complicates semantics 
second violates principle parameters set init maintain constant values invocation parent graph turn violates requirements local sdf schedul ing 
interface dataflow hierarchical actor representing allowed depend parameters set init graph 
parent graph config sdf graph invocation embedded hierarchical actor behave sdf actor parameters set init remain con stant invocation parent graph 
similarly subinit graph produce exactly token put port 
parameters set subinit graph change invocation ensured single token production subinit output port invocation subinit graph 
recall single invocation subinit graph followed exactly invocation body graph 
token produced subinit output port immediately utilized corresponding invocation body graph 
excess tokens redundant accumulate port 
third number tokens consumed subinit graph input port function subinit graph parameters bound dataflow inputs number tokens produced consumed specification interface port body graph member outputs function body graph parameters controlled init graph 
third fourth conditions ensure hierar nested psdf specification behaves sdf actor single bhattacharya parameterized modeling scheduling dataflow graphs 
page 
invocation parent graph embedded necessary local sdf scheduling 
mathematical terms condition requirement init graph locally synchronous domain interface output port 
actor actor comprise init condition local synchrony says init graph inherently locally synchronous produce exactly token interface output port invocation 
similarly second third conditions requirement subinit graph locally synchronous domain interface output port actor actor interface input port product invariant actor actor ps domain 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
refer subinit output condition subinit input condition local synchrony subinit graph inherently locally synchronous produce token interface output ports invocation number tokens consumed input port invocation function parameters controlled init graph parameters see 
fourth condition requires body graph locally synchronous interface input port product invariant actor actor fs outputs domain interface output port product invariant actor actor actor fs outputs domain 
termed body condition local synchrony words body graph inherently locally synchronous total num bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ber tokens transferred port invocation depend parameters controlled loosely refer subinit input condition body con dition local synchrony conditions collectively refer require ments init condition subinit output condition unit transfer consistency 
hold graphs inherently locally synchronous holds domain number tokens transferred interface output init holds domain number tokens transferred interface output sub init hold tokens transferred interface inputs subinit interface ports body invariant subinit body graph parameters set init inherently locally synchro nous simply locally synchronous 
graphs locally non synchronous domain satisfies domain satisfies inherently locally non synchronous simply locally non synchronous 
inherently locally synchronous inherently locally non synchronous partially locally synchronous 
definition see verified comput ing tokens consumed interface input port domain checking tokens consumed identical pair domain params ps equal bhattacharya parameterized modeling scheduling dataflow graphs 
page 
params ps similar verification applied 
note conditions hold lead local non synchrony partial local synchrony 
operational semantics formalization introduced sections develop section precise operational semantics psdf 
fig 
gives pseudocode description 
executing psdf specification equivalent executing graph topmost specification embedded rules specified routine execute 
graph complete configuration parame ters graph routine verifies local synchrony computes schedule executes schedule 
case local synchrony violation execution terminated 
routine returns configuration parameters con figured interface output ports result executing example init graph specification general set parameters body graph subinit graph interface output ports 
configuration parameters returned executing compute schedule need know interface token flow hierarchical actor general depend internals subsystem represented operational semantics shown fig 
hierarchical actor configuration determined init graph parameters subsystem represented parameters bhattacharya parameterized modeling scheduling dataflow graphs 
page 
function execute graph configuration foreach hierarchical actor subsystem configure graph execute init set configure graph init set configure graph init set precompute interface token flow precompute interface token flow configure sdf gc compute repetitions vector compute schedule configuration configuration cout get firing null hierarchical actor subsystem configure graph init set internal execute set configure graph init set set execute verify interface token flow execute sets graph parameter value output port interface output port cout cout pv pv return cout function 
operational semantics psdf specification 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
init graph occur parameter set complete configuration init graph determined complete configuration init graph executed complete configuration recursively calling routine execute 
execution init graph configuration subinit body graph parameters configured init graph returned configuration configuration determined init set init graph configuration computed subinit body graphs parameters subinit graph bound dataflow inputs parameters body graph set subinit graph unknown values known configurations determined far 
parameters assigned default values unspecified default value unknown parameters detected invalid 
routine computing complete configuration parameters graph complete ration set parameters may include parameters shown separately fig 

configurations subinit body graph com puted pre compute token flow interface ports subinit body graph done shown routine precompute token flow fig 

graph complete configura tion routine computes interface token flow cal actor recursively calling 
set sdf graph resolving unknown quantities graph complete configuration process configuration sdf graph routine bhattacharya parameterized modeling scheduling dataflow graphs 
page 
configure sdf elaborated fig 

followed computa tion repetitions vector interface token flow obtained easily 
note interface token flow determined fashion speculative quantity general default values unknown parameters compared actual interface token flow computed real default values subinit graph parameters bound subsystem data flow inputs body graph parameters configured subinit graph 
entire process computing unknown token flow interface ports subinit body graph hierarchical actor interpreted determining port consumption production functions deriv ing parameter interpretation function hierarchical actors processed fashion graph configured sdf graph resolving remaining unknown quantities graph token flow edge delays non negative integer values function configure graph graph configuration configuration cnew foreach params cnew cnew pcp default error default value specified cnew return cnew function cnew default 
routine configure graph appears operational semantics psdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
function precompute interface token flow graph configuration foreach hierarchical actor subsystem configure graph configure graph precompute interface token flow precompute interface token flow configure sdf gc compute repetitions vector assign interface token flow function function configure sdf graph configuration foreach leaf actor ca foreach port assign token flow fa ca foreach edge ce assign delay ef ce function 
subroutines operational semantics psdf precompute interface token flow shown configure sdf shown 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
shown routine configure sdf fig 

leaf actor com plete configuration parameters determined augmenting static configuration configuration specified 
complete configuration resolve unknown token flow port actor calling parameter interpretation function parameter interpretation function actor assumed accept com plete configuration actor parameters actor port inputs return token flow port actor 
provides streamlined representa tion parameter interpretation function actor defined section 
similarly unknown delay characteristics edge obtained inte ger calling parameter interpretation function edge complete parameter configuration edge 
configuring sdf graph token transfer max delay value bounds verified actor edge respectively schedule determined computing tions vector constructing valid schedule 
sample rate consistency existence valid schedules verified process 
init graph subinit graph subsystem init condition local synchrony sub init output condition local synchrony actor configuring parameter invoked producing token interface output port verified computing repetitions vector 
valid schedule constructed actors fired order specified schedule 
prior executing schedule variables initialized empty graph configurations 
internal bhattacharya parameterized modeling scheduling dataflow graphs 
page 
firing leaf actor equivalent executing code actor 
configures graph parameter output ports actions taken depending status output port interface output port configuration cout augmented returned output routine 
interface port internal port implies parameter configured fashion appears subinit graph parameter hierarchical actors represents subsystem parameter bound interface input 
cases configuration augmented 
contains value parameter previous firing entry removed new value added configuration 
augmenting checking pre vious values parameter necessary locally synchronous specifi cation actors configuring parameter values interface output ports guaranteed fire 
internal internal process firing hierarchical actor broken steps 
step configuration assigned parameters subinit graph subsystem represented configuration assembled configuration configuration determined init graph configuration determined parameters set internal ports init set 
note configurations superset subinit graph internal parameters assigning configuration default values param eters necessary 
second step executing subinit graph recur bhattacharya parameterized modeling scheduling dataflow graphs 
page 
calling routine execute subinit graph complete configuration parameters configured subinit graph output ports returned configuration third fourth steps consist set assigning configuration body graph assembled init set set case parameters body graph contained configurations executing body graph 
final step verifying subinit input condition body condition local synchrony executing subinit body graphs previous steps repetition count interface actor known exactly interface token flow fully specified 
represents actual interface token flow com pared pre computed interface token flow obtained earlier performing speculative computation default values subinit graph parameters bound dataflow inputs body graph parameters set subinit graph 
case mismatch actual pre computed interface token flow local synchrony error flagged subsystem schedule exhausted firing actor invocation schedule fashion invocation graph completed configura tion returned configuration parameters set interface output ports topmost specification embedded top level graph unspecified parameters execution initiated calling routine execute empty configuration consists single bhattacharya parameterized modeling scheduling dataflow graphs 
page 
hierarchical actor representing interface output ports returns empty configuration simply discarded 
seen psdf operational semantics dictates subinit input condition body condition local synchrony subsystem ver ified pre computation interface token flow default values parameters bound dataflow inputs parameters set subsequently comparing actual interface token flow 
assigning default values parameters user judicious choices 
particular parameters bound dataflow inputs parameters set unspecified default value 
parameters specified default value inter relationship determining interface token flow combination values parameters take run time 

consistency verification discussing analysis verification issues psdf review pre requisite consistency notions general dsp dataflow specifications adapted 
binary consistency decidable dataflow general dsp dataflow specifications term consistency refers essential requirements absence deadlock unbounded data bhattacharya parameterized modeling scheduling dataflow graphs 
page 
lation 
inherently consistent dataflow specification imple mented chance buffer underflow deadlock unbounded data accumulation regardless input sequences applied system 
exist sets input sequences deadlock unbounded buffering avoided exist sets deadlock unbounded buffering results specification termed partially consistent 
data flow specification consistent partially consistent called inher inconsistent simply inconsistent 
elaborate forms consistency probabilistic interpretation token flow explored 
dataflow model computation decidable dataflow model determined finite time arbitrary specification model consistent binary consistency model specification model inherently consistent inherently inconsistent 
words model binary consistency model contains partially consistent specifications 
decidable dataflow models practice today including sdf binary consistency models 
binary consistency convenient verification point view con inherent property specification deadlock unbounded data accumulation arises dependent input sequences applied 
course convenience comes expense restricted ity 
binary consistency model specify applications 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
consistency psdf specifications psdf consistency considerations go deadlock buffer flow 
particular concept consistency psdf includes local synchrony issues 
seen section local synchrony consistency general dependent input sequences applied system 
clear psdf classified binary consistency model 
furthermore consistency verification psdf decidable problem 
general psdf system completes successfully certain input sequence system may inherently consistent may partially consistent 
similarly psdf system encounters local synchrony violation certain input sequences system may inconsistent partially consistent 
elegance psdf lies robust operational semantics dates rely rigorous verification 
exists defined concept behaved operation psdf specification boundary behaved ill behaved operation clearly defined detected immediately run time efficient fashion 
specifically development parameterized dataflow provides consistency framework operational semantics leads precise general run time simulation time consis tency verification 
particular inconsistent system specification input set psdf parameterized version existing binary consistency models eventually detected inconsistent improvement level predictability models go binary bhattacharya parameterized modeling scheduling dataflow graphs 
page 
consistency bdf ddf 
alternative dynamic models clear cut semantic criterion run time environment terminates ill behaved system termination may triggered buff ers edge full implementation dependent criterion 
con psdf run time environment forces termination ill behaved system defined semantic criterion system inconsistent partially consistent 
addition implementation psdf operational semantics streamlined careful compile time analysis 
psdf model provides promising framework productive compile time analysis warrants investigation 
example streamlining develop efficient quasi static scheduling algorithm sections 
quasi static scheduling frame possible perform symbolic computation obtain symbolic tions vector psdf graph similar done bdf 
depending compiler knows properties specifica tion user assertions amount analysis performed local synchrony consistency 
implied operational semantics strictly enforces local synchrony consistency issues resolved compile time addressed run time verification 
illustrations consistency anal ysis symbolic repetitions vector technique section 
general verification problem psdf specifications clearly non triv ial deriving effective efficient verification techniques appears bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ing area research 
particular issue local synchrony verification psdf subsystem calls investigation arises exclusively psdf specific consideration inherent parameterized hierarchical struc ture psdf proposes 
hand dataflow consistency issues sample rate consistency presence sufficient delays product lying sdf model explored dynamic context models bdf 
bounded memory execution consistent applications necessary requirement practical implementations 
psdf specification inher partially locally synchronous exists constant bound admissible execution execution result run time local synchrony violation buffer memory requirement bound 
bound depend input sequences ensured bounding max imum token transfer actor port maximum delay accumulation edge 
concept upper bounding maximum token transfer rate dynamic port 
psdf bounds guarantee bounded memory execution possess concept local region behaved operation 
psdf inherent partial local syn ensure bounded memory requirements execution associated psdf system sequence consistent sdf executions 
bound token transfer actor port ensures invocation psdf graph executes bounded memory bound maximum delay tokens bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edge rules unbounded token accumulation edge invocations psdf graph 
suitable bound psdf graph expressed max qg actor actor domain 
assume exists domain token production consumption quantities bounded max token trans fer function delay edge bounded max delay value shown 
token transfer actor port bounded finite number possible different values repetitions vector take 
maximum exists 
computing tighter bounds may general possible appears useful direction warrants investigation 
max actor actor domain bhattacharya parameterized modeling scheduling dataflow graphs 
page 

actor parameters dataflow inputs having formally defined psdf model section revisit distinction dataflow inputs parameters psdf actor 
discussed section value dataflow input change invocation associated actor control behavior actor granularity actor invocation 
hand parameter general configured maintains constant value sequence successive invocations actor 
parameters control actor behavior coarser level granularity dataflow inputs 
invocation semantics psdf allows controlling actor parameter dataflow input allowing actor behavior controlled granularity actor invocation 
example shown fig 

fig 
shows psdf actor single parameter param input output port 
actor port marked name port actor parameters indicated parentheses inside actor 
typically application scenario param configured general maintain constant value number successive invocations may applications demand parameter param changes invocation take values dataflow input actor say possible solution shown fig 

param longer modeled actor parameter extra input port added accepts dataflow value token input port internally replace function bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ality performed param 
different solution utilizes psdf subsystem semantics shown fig 

library specification actor remains unchanged actor encapsulated inside body graph new sub system actor provides dataflow input propagate actor subinit graph unspecified actor parameter param configured output port propagate actor 
functionality propagate actor simply copy input token output port 
psdf invocation semantics invocation preceded invocation propagate configure parameter param dataflow output actor effec tively allowing parameter controlled dataflow input 
inb outb ina outa param inb 
example demonstrate actor parameters strictly general dataflow inputs 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
outb outb inp outb propagate ina param ina outa ina subinit body outp sets param outa example demonstrates parameterized framework possible simulate functionality performed dataflow input parameter associated actor parameters strictly general dataflow inputs 
translates increased design flexibility modularity condensed actor library cases block diagram dsp programming environments 
example library specification actor fig 
application designer fulfil various application specific needs suitably configuring parameter param includes assigning fixed static value param maintained invocations holding param constant certain number invocations allowing change window allowing param change invocation flexibility implies necessary increase size actor library adding different version actor fig 


psdf application model formal model reader may noticed intuitive informal psdf model pre sented chapter somewhat different formal model developed sec tions 
henceforth refer application model formal model 
section explain pre served models map model 
formal model bottom approach adopted unspecified actor edge parameters propagate upwards graph parameters specification parameters 
init subinit graphs responsible configuring bhattacharya parameterized modeling scheduling dataflow graphs 
page 
unspecified parameters 
application model top approach subsystem parameters specified separately propagate downwards unspecified actor edge parameters configured appropriate subsystem parameters 
case init subinit graphs configure subsystem parameters 
specification parameter refer definition formal model subsystem parameter refer definition application model 
say parameter subsystem clear context referring specification parameter sub system parameter 
isn fundamental conceptual difference application formal models technical details 
justified reasons separate existence 
experience designing applications psdf felt application model provides natural intuitive style application designer perspective 
typically algorithm application natural parameters modeled subsystem parameters 
top level functionality broken separate logical units subsystems natural set parameters 
designing practical systems actors selected actor library user configure actor application 
sdf systems actor parameters assigned fixed integer values 
natural extension concept psdf allows actor parameters assigned subsystem parameter values 
accordingly psdf examples applications report developed appli bhattacharya parameterized modeling scheduling dataflow graphs 
page 
cation model 
hand formal model useful precise specification analysis operational semantics consistency issues synthesis tasks 
actor parameters defined notion domain set allowing actor parameters assigned arbitrary subsystem parameter values needlessly notion domain set 
fig 
sketch algorithm mapping psdf specification specified formal model specification application model 
reverse mapping psdf specification application model mal model shown fig 
fig 

construction specified fig 
see sub system internal parameters application model equivalent graph step process init graph interface output port outputs init graph assign init configured external subsystem parameter called set port 
subinit graph insert assignment statements form ts configures actor edge parameter subinit graph corresponding subsystem parameter 
body graph insert assignment statements tb step process subinit graph interface output port outputs subinit graph assign internal subsystem parameter called set port 
body graph insert assignment statements fs interface input port specification bound parameter subinit graph assign parent configured external subsystem parameter bind port subinit graph insert assignment statements form ps step hierarchical actor specification go step subsystem 
algorithm map psdf specification psdf formal model equivalent specification psdf application model 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameters fs outputs formal model 
similarly equiva parent configured subsystem parameters application model graph parameters ps formal model 
subinit input condition local synchrony subsystem interpreted requirement number tokens consumed interface input port subinit graph invariant parent configured subsystem parameters associated subsystem 
similarly body condition subsystem local syn restated requirement token flow interface port body graph invariant internal subsystem parameters associated subsystem 
subsequent chapters usually step hierarchical actor process child subsystem go step subsystem proceed step 
step process body graph start empty set graph parameters params empty functions tb fs consider assignment statement form ap configures actor parameter edge parameter ap immediate subsystem parameter gives output port init subinit graph configures subsystem parameter body graph immediate subsystem parameters mark actor parameter graph parameter params params ap outputs subsystem parameter configured init graph insert element ap function tb equivalent introducing mapping tb ap outputs subsystem parameter configured subinit graph insert element ap function fs actor parameter configured subsystem parameter direct edge port fork actor output ports number actor parameters map subsystem parameter 
mark output port fork actor interface output port graph insert corresponding mappings interface port 

steps algorithm map psdf specification psdf application model equivalent specification psdf formal model 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
step process subinit graph start empty set graph parameters params empty set specification parameters params empty functions ts ps consider assignment statement form ap configures actor parameter edge parameter ap immediate subsystem parameter denotes output port init graph configures parameter input port subsystem parameter bound 
mark actor parameter graph parameter params params ap outputs subsystem parameter configured init graph insert member ap function ts parameter bound input port subsystem insert element ap function ps immediate subsystem parameters consider actor edge parameters configured inherited subsystem parameters ap inherited subsystem parameter 
mark actor parameter graph parameter specification parameter params params ap params params ap addition insert assignment statement ap parent graph subsystem ensure specification parameters dealt parent graph 
step process init graph start empty set graph parameters params consider assignment statement form ap configures actor parameter ap inherited subsystem parameter recall init graph inherited subsystem parameters 
mark actor parameter graph parameter specification parameter params params ap params params ap insert assignment statement ap parent graph subsystem 

third fourth steps algorithm map psdf specification psdf application model equivalent specification psdf formal model 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
notation subsystem parameters utilize interpretation sub init input condition body condition local synchrony explaining local synchrony verification techniques 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
chapter 
scheduling psdf specifications chapter develop scheduling techniques psdf specifications includ ing quasi static scheduling techniques run time scheduling techniques 

parameterized looped schedules define quasi static scheduling terminology psdf 
terminology framework looped schedules developed sdf graphs 
section sections section simplified psdf graph basis scheduling techniques accord ingly corresponding notation described section 
looped schedules clustering apgan sdf sdf graph schedule loop parenthesized term form nt positive integer ti actor schedule loop 
parenthesized term nt represents suc repetition times invocation sequence nt schedule loop represents iteration count ti constitutes body looped schedule sequence vk vi actor schedule loop 
looped schedule called single appearance schedule actor appears schedule 
connected consistent sdf graph subset bhattacharya parameterized modeling scheduling dataflow graphs 
page 
actors repetition count defined qg gcd qg viewed number times minimal periodic schedule subset actors invoked adjacent actors repetition count denoted qg ab 
actor clustering means generating new sdf graph src snk modification set edges connect actors actors outside src snk defined src snk snk qg src qg similarly snk src defined src src snk bhattacharya parameterized modeling scheduling dataflow graphs 
page 
pe ce ce qg snk qg specified src snk snk src 
graph results clustering denoted cluster simply cluster intuitively invocation cluster corresponds invocation minimal valid schedule sub graph formed actors cluster consis tent acyclic introduces cycle cluster contains cycles 
fig 
shows example clustering sdf graphs 
fig 
represents cluster bc denotes sdf graph fig 

example shown qg abcd apgan acyclic pairwise grouping adjacent nodes scheduling technique developed acyclic sdf graphs geared joint code data 
example clustering sdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
minimization objectives 
consistent acyclic sdf graph input apgan produces minimal periodic single appearance looped schedule shown optimal certain class sdf graphs 
apgan technique cluster hierar chy constructed clustering exactly adjacent vertices step 
clustering step adjacent pair chosen apgan candidate clustering introduce cycle repetition count greater equal adjacent pairs introduce cycles 
cluster hierarchy con structed apgan outputs schedule corresponding recursive traversal cluster hierarchy 
straightforward construct single appearance schedule sub graph corresponding cluster subgraph consists actors xi yi edges gi directed xi yi depending value de edge optimal schedule gi yi gi xi 
gi xi gi yi starting schedule top level subgraph apgan recursively goes level hierarchy subgraph corresponding child cluster flattened schedule child subgraph replaces corresponding hierarchical actor top level schedule 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf looped schedules psdf graph parameterized schedule loop represents sive repetition invocation sequence ti leaf actor hierarchical actor parameterized schedule loop 
sdf iteration count schedule loop denoted longer integer symbolic expression consisting con subsystem parameters parent specification init configured sub system parameters child specifications represented hierarchical actors invocation sequence compiler generated variables 
ti hierarchical actor representing specification order compute schedule interface token flow necessary 
obtained computing parameterized looped schedule defined shortly evaluating token flow interface ports default values non init configured subsystem parameters occurrence ti replaced represent parameter ized looped schedules subinit graph body graph respec tively consists code checks respectively subinit input condition body condition local synchrony code consists conditionals compare actual token flow interface input input output ports subinit body graph evaluated actual values non init configured subsystem parameters pre com puted interface token flow evaluated default values non init configured bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem parameter flag local synchrony errors case mis matches 
code referred synchrony check code suppose psdf graph contains hierarchical actors hm parameterized looped schedule sg consists parts sm preamble body represents parameterized looped schedule init graph subsystem hi part schedule called phase consists successive invocations parameterized looped schedules init graphs child subsystems third part schedule called body sequence vk vi actor leaf hierarchical parameterized schedule loop 
second part schedule called preamble consists code configures preamble iteration count schedule loop defining proper order body compiler generated variable symbolic expression iteration count includes conditionals checking sample rate consistency bounded memory consistency graph additionally init graph includes conditionals checking init condition local synchrony par ent specification actor init graph configures parameter value output port produce exactly token port 
similarly bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subinit graph includes conditionals checking subinit output condition local synchrony parent specification parameterized looped schedule psdf graph single appear ance schedule actor appears concept clustering psdf graphs exactly similar sdf defi nition addition integer arithmetic symbolic computations performed 
explain psdf clustering process parameterized apgan scheduling technique section examples 

scheduling strategy psdf operational semantics allows streamlined implementation careful compile time analysis 
avoid dependence particular type compile time analysis optimization operational semantics defined terms minimal set requirements correct locally synchronous execution 
implementation guarantees requirements valid implementation operational semantics 
endeavor scheduling psdf specifications streamline implementation operational semantics generating quasi static schedule possible fall back run time scheduler implements operational semantics straightforward manner 
run time psdf graph assumes sdf configuration invocation analyzed scheduled available sdf techniques 
run time kernel utilize quasi static schedules determined compile time sub parts specification 
preamble bhattacharya parameterized modeling scheduling dataflow graphs 
page 
perform quasi static scheduling psdf acyclic graphs certain class cyclic graphs call simple cyclic graphs 
cyclic graphs fundamental directed cycle single delay element known value fundamental cycle statically known single rate sys tem edge fundamental cycle config single rate system 
simple cyclic graphs arise frequently practical systems incorporate feedback loops leading graph cycles single feed back edge containing delay tokens 
simple cyclic graphs easy determine free deadlock sufficient numbers delay tokens exist fundamental directed cycle graph enable construction periodic schedule 
deadlock free simple cyclic graph effectively break cycles convert graph acyclic graph scheduling purposes 
amount delay feedback edge number tokens consumed snk graph detected deadlocked 
edge associated delay equal numbers tokens consumed corresponding sink actor snk break dependence associated equiva lent removing cycle belongs purpose constructing periodic schedule subgraph comprising associated cycle 
removal possible associated cycle repetitions vector components identically equal unity snk depend data pro duced src schedule period associated cycle 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
breaking dependencies single rate data dependence structures studied extensively context vectorization see example imperative pro gramming languages 
systematically breaking cyclic dependencies context general possibly multi rate sdf graphs explored 
fundamental directed cycle simple cyclic graph feed back edge possesses sufficient delay tokens equal numbers tokens consumed snk snk depend data produced src invocation periodic schedule fundamental cycle 
periodic schedule entire simple cyclic graph may general consist invocations periodic schedule fundamental cycle data dependencies implied feedback edges src snk funda mental cycle relevant invocations periodic schedules 
conse quently data dependence preserved deriving periodic schedule entire simple cyclic graph 
feedback edge simply removed graph presence utilized scheduling purposes example choosing adjacent vertices clustering section 
process simple cyclic graphs quasi static scheduler provided pre processor examines input cyclic graph check eligible deadlock free simple cyclic graph break cycle removing feedback edge assign unique identifier fundamental cycle mark actor identifier fundamental cycle belongs provide resulting marked acyclic graph scheduling 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
application design experience appears large class useful dsp applications falls categories acyclic graphs simple cyclic graphs 
fact efficient quasi static schedules computed exam ples applications report 

quasi static scheduling section explain quasi static scheduling technique developed psdf specifications 
develop extension apgan psdf graphs explain consistency analysis issues complete quasi static sched algorithm observations incorporating re delays quasi static scheduling framework provide examples quasi static schedules 
parameterized apgan apgan basic step quasi static scheduling psdf specification deter mine body parameterized looped schedule psdf graph body extension apgan scheduling technique section derive minimal periodic single appearance parameterized schedule loops represent ing body parameterized schedule extended apgan schedul ing technique called apgan parameterized apgan 
psdf graph general possible select adjacent pair actors clustering maximum value repetition count clus ter repetition count obtained symbolically 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
choice adjacent pairs actors clustering adjacent pair introduce cycle graph refer adjacent actor pair apgan candidate scheme selecting adjacent pair clustering 
recall category cyclic graphs apgan clus tering breaking cycles graphs uniquely marking actors belong fundamental cycle 
adjacent actors belong fundamental cycle original graph assigned higher priority clustering compared adjacent actors satisfy criterion 
precisely apgan candidate shares common marking actors comprise apgan candidate assigned higher priority clustering compared apgan candidates share common marking 
ties broken arbitrarily 
example choices apgan candidates terms actor markings null null null notation indicates apgan candidate actor belonging funda mental cycle original graph second actor belonging fundamental cycle marking null indicates actor belong fundamental cycle apgan candidates null null assigned highest priority clustering chosen 
selection scheme apgan candi dates ensures actors belonging fundamental cycle original graph completely clustered reduced single cluster bhattacharya parameterized modeling scheduling dataflow graphs 
page 
clustering performed actors outside fundamental cycle 
data precedences original graph maintained quasi static schedule 
apgan candidates clustering prior ity experimenting giving priority sdf edges edges ce constant known compile time single rate edges edges statically known pe equal ce necessarily known constant goal simultaneously minimizing code size run time computation quasi static schedule 
selecting adjacent pair clustering code size data size minimized certain class graphs guaranteed original apgan interesting area research 
schedule subgraph corresponding cluster constructed symbolic computation code generated actual computation run time 
clustering adjacent vertices apgan shown fig 

fig 
shows portion psdf graph represented subgraph associated actors symbols represent subsystem parameters parent specification compiler generated variables representing unknown token flow suitably initialized parameter interpretation functions corresponding actors preamble code schedule vertices clustered single vertex pe topology graph token flow relevant edges adjusted shown fig 

fig 
shows pseudocode representation schedule bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subgraph corresponding cluster constructed invocations followed invocations com piler generated variable defined gcd pq say reps reps reps denotes local repetition factor actor opposed global repetition count qg schedule sub graph subgraph fig 
obtained apgan tech ga nique 
particular note leads 
gcd pq repeat times fire repeat times fire 
clustering step apgan 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edge going actor belong subgraph associated token consumption modified ce ce reps edge re directed cluster snk edge coming belong subgraph token production pe source vertex src modified analogous fashion 
edges incident actor processed similarly 
modification graph topology token transfer edges incident subgraph derived clustering process sdf graphs described section 
edge going actor subgraph tokens consumed edge modified ce qg qg clustering completed 
stated clustering process modifies token consumption ce reps show derivation fig 
equivalent 
qg qg qg gcd qg qg qg gcd qg qg pe balance equation ce qg ce gcd qg ce qg pe multiplying numerator denominator ce qg ce qg gcd pe ce gcd pe reps 
derivation demonstrate basic apgan clustering step shown fig 
equivalent clustering technique sdf graphs described 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
derivation demonstrates vertex cluster fig 
comprising actors edge repetition count source actor divided repetition count subgraph associated vertices local repetition factor similar derivation sink actor vertex cluster fig 
show qg qg reps data size optimization objective dropped going apgan apgan clustering step apgan entirely local computation need global knowledge repetitions vector graph 
reason constructing schedule subgraph corre sponding cluster apgan take account delay edges subgraph source actor vertex cluster fires corresponding sink actor shown fig 

scheduling nested psdf graph interface edges connecting actors actors parent graph gp hidden appear gp example shown fig 

part shows psdf graph containing single hierarchical actor part shows body graph psdf sub system corresponding actors communicate parent graph actors subsystem ports port port respectively 
parent graph gp edge port edge port appear normal edges graph 
corresponding edges port port indicated dashed lines bhattacharya parameterized modeling scheduling dataflow graphs 
page 
hidden graph 
clustering interface actors actors case apgan algorithm responsible updating connectivity token flow hidden interface edges accordance basic clustering step shown fig 
interface edges normal edges incident interface actors 
precisely input interface edge edge port ce snk updated part clustering step involving snk output interface edge edge port pe src updated part clustering step involving src consistency analysis scheduling compiler analyze psdf specification types consistency sample rate consistency psdf graph bounded mem ory consistency psdf graph unit transfer consistency psdf subsystem init subinit graphs produce exactly token output port invocation local synchrony consistency psdf subsystem subinit input port port port port 
example demonstrate interface edges connecting actors graph inside subsystem actors parent graph subsystem affect apgan clustering 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
body condition body condition local synchrony 
general graph con taining directed cycles consistency requires sufficient delay directed cycle 
psdf specifications con quasi static scheduling techniques limited graphs cyclic graphs cyclic dependencies easily broken described section 
general strategy followed consistency analysis attempt detect consistency compliance violation compile time terminate execution case 
compiler sufficient information reach definitive compile time code generated verify consistency run time terminate execution case run time consistency violation 
sample rate consistency analysis possible compute repetitions vector psdf graph symbolically bdf model depth search method 
balance equations verified cally edge graph 
edge ce pe repetitions vector computed src snk balance equation edge takes form verified compile time balance equation edge satisfied 
balance equa tions similarly satisfied edge graph graph detected sample rate consistent compile time 
balance equation edge graph verified compile time run time sample rate consistency check performed 
example bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edge repetitions vector computed src snk balance equation edge takes form px verified compile time 
cases invocation graph code generated verify balance equations cur rent values parameters 
pairwise clustering method quasi static scheduling natu rally accommodates efficient means detecting sample rate inconsistencies 
clustering strategy encounters pair adjacent vertices edge directed actor consistency graph equiv determining ratio number tokens produced num ber tokens consumed identical edges subgraph 
sample rate consistency checks leads setting number equations may terms unknown variables 
general equations verified symbolically compile time rest verified run time part run time local synchrony verification 
example consider psdf graph shown fig 

represent vertices graph may general represent complex sub 
psdf graph fully checked consistency compiletime 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
graphs consolidated earlier clustering steps 
conditions consistency subgraph gives single constraint consistency equation verified run time consistency 
parameters satisfied graph inherently dataflow consistent 
equation hold permissible values parame ters inherently dataflow inconsistent partially dataflow consistent 
example domain domain inherently dataflow consistent domain domain inherently dataflow inconsistent domain domain partially dataflow consistent 
straightforward verify bounded memory consistency psdf graph consists checking max token transfer bounds satisfied tokens consumed produced edge max delay bounds satisfied edge graph 
token transfer delay edge statically known quasi static scheduler generates code checks bounds run time 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
unit transfer consistency actor init subinit graph responsible configuring value parameter repetition count produce single token output ports 
verified compile time conditional statement inserted preamble code appears init subinit graph schedule 
example shown fig 

part shows init graph subsystem actor produces token output port configures subsystem parameter sp 
repetition count actor depends subsystem inherited parameter sp preamble code init graph contains conditional checking value sp subsystem params sp sp sets sp preamble init sp error unit transfer inconsistent body init fire repeat sp times fire 
quasi static verification unit transfer consistency 
graph init bhattacharya parameterized modeling scheduling dataflow graphs 
page 
repetition count run time shown part 
local synchrony verification subinit input condition body condition subinit body graphs psdf subsystem completely clustered apgan symbolic token flow computed hidden interface edge see section evaluated default values non init configured subsystem parameters evaluated values assigned token flow quantities corresponding edges parent graph embedded 
interface edge known compile time computed token flow depend non init configured parameter subsystem detected locally synchronous compile time 
oth code inserted compare default token flow determined evaluating interface token flow default values non init configured parameters actual token flow actual token flow evaluated current values non init configured parameters example consider subsystem body graph comprising actors shown fig 

suppose subsystem represented hierarchical actor subinit graph interface ports input edge actor interface edge com pletely clustering number tokens consumed interface edge com puted gcd init configured parameters compiler generated variables representing unknown token flow corresponding actors actor actor actor parameters bhattacharya parameterized modeling scheduling dataflow graphs 
page 
assigned static values init configured subsystem parameter values clear compile time interface token flow subsystem depend non init configured subsystem parameters detected locally synchronous compile time 
code check synchrony generated init configured parameter internal param eter subinit configured default value default token flow equal gcd assigned number tokens consumed input interface edge actor addition synchrony check ing code attempt verify equality equivalent gcd gcd gcd gcd 
graph body subsystem params 
example demonstrate local synchrony verification issues scheduling 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
value takes run time maintains gcd relation ship locally synchronous flagged locally non synchronous run time 
may intrinsic property application unknown compiler gcd equal gcd case system inherently locally synchronous partially locally synchronous inherently locally non synchronous 
user assertions compile time predictability seen apgan quasi static scheduling technique signif symbolic analysis computation general performed com piler 
analysis process point compiler sufficient information reach generates code perform analysis run time 
similarly trying compute minimal periodic schedule psdf graph compiler lacks necessary data form gcd information symbolic token production consumption quantities uses compiler assigned sym variables generates code assign appropriate gcd values vari ables run time 
performance standpoint quasi static schedule generated compiler better terms code size run time overhead 
providing information statically allows com putation analysis done compile time resulting better performance 
provide computation power compiler programmer convey bhattacharya parameterized modeling scheduling dataflow graphs 
page 
application specific knowledge compiler user assertions 
examples user assertion formats psdf programmer 
specify token flow psdf actor port symbolic expression actor parameters static integer behaves sdf port pro parameter interpretation function actor computes token flow run time 
similarly statically symbolically specify characteristics psdf edge amount delay initialization values re initialization period providing parameter interpretation function edge 
enable gcd computation tokens produced consumed edge part basic apgan clustering step specify gcd information subsystem parameters specify product relationships subsystem parameters expressing parameter product parameters constants possibly symbolic variables represent parameters 
exam ple subsystem parameters symbolic variables represent parameters 
product rela tionships compiler derive gcd information 
flexibility psdf model improved considerably actor parameters identified affect port production con sumption quantities 
parameter params non dataflow parameter input port invariant put port invariant general may possible efficiently deduce compute bhattacharya parameterized modeling scheduling dataflow graphs 
page 
exact set non dataflow parameters actor 
actor designer usually knows parameter non dataflow parameter 
user indicate known non dataflow set denoted set actor parameters known affect dataflow behavior actor 
example actor number tokens consumed input port equal downsampling factor output port pro duces token 
phase information provided compiler precisely specify ing actor parameters control dataflow port actor 
general number tokens consumed produced input output port actor depend subset actor parameters called controlling set denoted params example actor factor knowledge con trol sets actor port compiler sophisticated local synchrony analysis 
example fig 
init configured parameter com piler generated variable representing unknown token flow actor actor parameters assigned init configured subsystem parameter assigned internal subinit configured subsystem parameter user assertions compiler reach local synchrony compile time 
user asserts controlling set output port actor compiler determine compile time subsystem locally synchronous 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
forms user assertions deliver power compiler result compact schedules decreasing necessity compiler generated vari ables compiler generated conditional statements perform consistency checks 
quasi static scheduling algorithms complete scheduling algorithm compute qs schedule quasi static scheduling psdf graphs 
algorithm shown fig 

psdf graph scheduling performed bot tom fashion subsystem subsystem basis 
hierarchical actor init subinit body graphs subsystem associated cal actor scheduled recursively calling compute qs schedule rou 
scheduling graphs unit transfer consistency constraints init graph subinit graph determined 
interface token flow subinit graph body graph evaluated default values non init config function compute qs schedule graph foreach hierarchical actor compute qs schedule init compute qs schedule subinit compute qs schedule body compute unit transfer constr hh init subinit compute interface token flow hh subinit body compute bounded memory constr initialize clustering compute apgan schedule function 
algorithm computing quasi static schedule psdf graph 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameters local synchrony constraints generated necessary 
implementation quasi static scheduler streamlined inserting syn check code single block body graph execu tion inserting executing subinit graph inserting executing body graph 
hierarchical actor processed fashion graph checked bounded memory consistency generating bounded memory con straints necessary 
ready clustered apgan 
prior cluster ing initialized wrapping actor cluster wrapper 
initial clusters referred leaf clusters opposed non leaf clusters produced clustering steps 
clustered apgan scheduling technique described section 
course apgan clustering sample rate consistency checks performed requisite run time constraints gener ated 
scheduling process initiated calling compute qs schedule rou top level graph containing single hierarchical actor representing topmost subsystem 
algorithm traverse qs schedule traversing quasi static schedule generated compute qs schedule routine shown fig 

schedule traversed top fashion accordance psdf operational semantics section 
routine traverse qs schedule called scheduled graph list possibly empty unit transfer consistency constraints graph 
algorithm involves traversing cluster hierarchy generated apgan bhattacharya parameterized modeling scheduling dataflow graphs 
page 
scheduling 
traversal schedule init graph hierarchical actor traversed recursively calling traverse qs schedule routine leaf cluster contains hierarchical actor 
followed pro cessing turn compiler generated variables bounded memory consistency constraints unit transfer consistency constraints sample rate consistency function traverse qs schedule graph consistency constr unit foreach cluster cluster hierarchy leaf cluster hierarchical actor actor traverse qs schedule init init unit process compiler generated variables process bounded memory constr process unit transfer constr unit process sample rate consistency constr foreach cluster cluster hierarchy leaf cluster hierarchical actor actor traverse qs schedule subinit subinit unit traverse qs schedule body process local synchrony constr local synchrony process actor firing process cluster reps function 
algorithm traversing quasi static schedule psdf graph generated compute qs schedule routine 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
constraints step involves traversing cluster hierarchy non leaf cluster repetitions local repetition factor cluster processed leaf cluster containing leaf actor actor firing processed leaf cluster containing hierarchical actor subinit graph schedule tra versed followed traversing body graph schedule processing local synchrony constraints comprising subinit input condition body condition local synchrony subsystem represented hierarchical actor 
quasi static schedule traversal initiated calling traverse qs schedule top level graph containing single hierarchical actor representing topmost subsystem 
generic algorithm traversing quasi static sched ule generated compute qs schedule routine frame performing variety tasks example printing schedule gathering statistics schedule synthesizing software schedule 
different process routines algorithm speci fied accordingly 
traversal algorithm printing quasi static schedule different process routines specified print argu ments passed appropriate format 
applications synthesis necessitate additional buffer memory management buffers edge psdf graph parameter configuration mechanism associate parameter value token generated actor output port parameter configured 
arriving exact scheme perform additional synthesis tasks bhattacharya parameterized modeling scheduling dataflow graphs 
page 
appears promising direction re initialization delays psdf extends sdf allowing sdf system evaluated differently different invocations suitable assignment parameters re ini delays graph edges necessary functionality 
sim case conceptually psdf system encompasses runs underlying sdf system 
consider fibonacci number example fig 
changing value fly dataflow part system assumes different sdf con multiple runs 
necessary re initialize val ues delay units feedback edges add actor run psdf system 
possible technique inserting re initializations proper point quasi static schedule 
scheduling complete psdf spec ification examine actor input edge specified re able delay re initialization period ascend cluster hierarchy schedule starting actor residual period equals local repetition factor ancestor cluster residual period initialized updated cluster encountered path dividing local repetition factor cluster reps residual period obtain new residual period 
point termination reps equals insert ini traversing schedule initialization processed processing reps reps exceeds break factors bhattacharya parameterized modeling scheduling dataflow graphs 
page 
possible factor 
traversing schedule process factor reps separately coming insert initialization processed processing factor reps generating looped schedule re initialization period coincide loop boundary possible insert tion proper point schedule 
cases possibility sched insert code corresponding actor keeps count number invocations actor initializes modulo fashion 
application design experience suggests re initialization period coincides loop boundaries fibonacci number example fig 
frequently possible incorporate delay re initializations quasi static scheduling framework natural fashion 
examples quasi static schedules quasi static schedules generated quasi static scheduling algorithms section psdf examples section 
quasi static schedules report include code verifying upper bounds specified max token transfer function actor port max delay value edge psdf graph 
bound checking code straight forward omitted unnecessarily clutter quasi static schedules emphasize intricate issues 
schedule generated quasi static scheduler computation th fibonacci number shown fig 

application fired bhattacharya parameterized modeling scheduling dataflow graphs 
page 
runs run possible compute different fibonacci number suitably configuring parameter actor 
delay values input feedback edges add actor re initialized tions add correct computation fibonacci number 
tions add fibonacci numbers fp lined output add 
single invocation transmits th fibonacci number output discarding rest 
print actor prints fp fig 
shows schedule derived quasi static scheduling algorithms computing weighted average variable length data packets 
application fired consecutive runs processing data frames generated actor 
run actor configures values packet length parameter number packets frame parameter repeat times init graph schedule fib fire sets init graph schedule fib body graph schedule fib initialize add repeat times fire add fire fire print body graph schedule fib 
quasi static schedule fibonacci number computation example fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
flen 
invocations mult actor multiplies data values single packet accumulating intermediate products output 
invocation actor transmits final product input add actor 
input mult actor re initialized compute running product data packet 
flen invocations add actor adds computed products data packets single frame 
actor provides final sum div actor divides frame length obtain weighted average single data frame 
input add actor re initialized repeat times init graph schedule fire fire sets flen init graph schedule body graph schedule initialize add repeat flen times initialize mult repeat times fire fire mult fire fire add fire fire div fire print body graph schedule 
quasi static schedule computation weighted average variable length data packets specified fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
process data frame 
fig 
shows schedule predictor application runs 
single run step size parameter step filter length parameter flen adaptive filtering mechanism set certain value sam ples random signal processed adaptive filter tries pre dict value signal value 
actor adapts filter coefficients parameter fir actor processing repeat times body graph schedule predictor init graph schedule fire sets step flen init graph schedule fire repeat times fire fork fire fork subinit graph schedule fire sets subinit graph schedule body graph schedule fire fir fire subtract body graph schedule fire fork fire plot body graph schedule predictor 
quasi static schedule predictor application fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sample 
possible fine tune step size filter length multiple runs application obtain best possible prediction result 

run time scheduling run time scheduling performed psdf specifications quasi static schedules computed partial quasi static schedules computed portions graph clustered 
run time scheduling algorithm compute rt schedule fig 
straightforward implementation psdf operational semantics 
function called psdf graph table parameter values param table 
entries param table represent current snapshot known parameter values point execution program 
partial quasi static scheduling may done compile time apgan may consist normal actor vertices cluster vertices 
appear just actor vertices contain cluster hierarchies inside 
step comprises visiting hierarchical actor actor vertex inside cluster hierarchy cluster vertex scheduling init graph recursively calling compute rt schedule 
hierarchical actor inside cluster hierarchy default interface token flow computed apgan 
wise computed routine compute interface tokens shown fig 

hierarchical actor function computes interface token flow hierarchical actor subinit body graphs bhattacharya parameterized modeling scheduling dataflow graphs 
page 
function compute rt schedule graph param values param table foreach node cluster foreach cluster cluster hierarchy leaf cluster hierarchical actor actor compute rt schedule init param table hierarchical actor compute rt schedule init param table compute interface tokens param table configure graph sdf param table compute sdf repetitions construct valid schedule get firing hierarchical actor configure parent configured params param table compute rt schedule subinit param table compute rt schedule body param table verify interface token flow param table delete params internal params param table delete params parent configured params param table cluster cluster sched invocation sequence replace schedule cluster sched fire actor foreach parameter set value insert param table foreach hierarchical actor delete params init configured params param table function 
algorithm computing run time schedule psdf graph 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
recursively calling 
hierarchical actors taken care config ures subinit body graphs sdf graphs routine configure graph sdf 
done steps 
step integer values assigned pe ce de edge graph including inter face edges evaluating symbolic expressions unknown token flow param eter interpretation functions current parameter values 
parameter occurs param table true init configured inherited parameters associated value obtained param table default value parameter 
second step cluster hierarchy cluster vertex graph traversed symbolic expres sions cluster evaluated integer value analogous manner 
include local repetition factor reps cluster associated sam ple rate consistency constraints associated bounded memory consistency con function compute interface tokens subsystem param values param table foreach hierarchical actor subinit compute interface tokens param table foreach hierarchical actor body compute interface tokens param table configure graph sdf subinit param table compute sdf repetitions subinit configure graph sdf body param table compute sdf repetitions body adjust store interface token flow function 
algorithm pre computing interface token flow hierarchical actor psdf graph run time scheduling psdf graph 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
straints leaf cluster containing hierarchical actor default interface token flow 
operation body graph subinit graphs assumed local sdf configurations 
step compute repetitions vec tor graph 
done routine compute sdf repetitions depth search algorithm discussed 
repetition counts interface actors known interface token flow computed stored local synchrony verification 
point init graphs hierarchical actors fired interface token flows pre computed 
remains determine schedule execute 
configured sdf graph calling rou configure graph sdf explained 
note case param eters known values param table default values needed doing actual scheduling opposed speculative scheduling case interface token flow pre computation 
sdf repetitions vector computed valid schedule constructed applying class algorithm proposed lee 
consists list firings graph ces step execute vertex invocations 
actor extracted order processed follows non hierarchical actor simply fire execute 
actor sets parameters output ports parameter entries inserted param table 
hierarchical actor configure parent configured bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameter bound input edge inserting value param table 
followed scheduling executing subinit graph body graph subinit body graphs sched executed actual values interface token flow compared pre computed values routine verify interface token flow case mismatch local non synchrony error flagged execution terminated 
completes invocation subsystem internal parameters parent configured parameters removed param table 
parameters set fresh values invocation cluster vertex cluster hierarchy inside tra versed obtain equivalent invocation sequence corresponding looped schedule represented cluster hierarchy 
example looped schedule equivalent invocation sequence firing replaced equivalent invocation sequence iteration member sequence extracted 
schedule exhausted invocation completed init configured parameters hierarchical actor removed param table 
parameters assigned new values invocation addition local synchrony verification verifying subinit input condi tion body condition local synchrony child subsystem run bhattacharya parameterized modeling scheduling dataflow graphs 
page 
time scheduler check deadlock sample rate consistency bounded memory consistency init graph subinit graph parent subsystem run time scheduler verify init condition subinit output condition local synchrony parent subsystem bounds specified max token transfer function max delay value verified graph configured local sdf graph configure graph sdf 
sample rate consistency unit transfer consistency init condition subinit output condition checked compute sdf repetitions 
non clustered portions graph detected constructing repetitions vector graph 
clustered por tions graph checks conducted traversing cluster hierarchy computing repetitions vector 
sample rate constraints associated cluster just needs verified 
unit transfer consistency number tokens produced output port actor contained leaf cluster computed compared actor configures parameter par ent subsystem output port 
deadlock detection occurs constructing valid schedule construct valid schedule 
repetitions vector class scheduling algorithm construct valid schedule maintains state system repeatedly schedules fireable actors updating system state actor fired actors scheduled exactly number times spec ified corresponding component actor fireable 
case deadlock detected 
recall quasi static scheduling cluster bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ing done acyclic portions graph deadlock analysis need done inside clusters graph 
re delays edge handled keeping count number executions snk loop fig 
ini delay executions snk re ini period 
fig 
shows trace generated run time scheduler fibonacci number example fig 

application run twice computing th th fibonacci numbers respectively 

implementation implemented psdf tool accepts psdf specifications written specific textual format performs quasi static scheduling prints quasi static schedule 
quasi static schedule constructed tool forms run time scheduling producing output schedule trace actor firings 
schedules report automatically generated tool features explained 
progress incorporate various enhancements tool 
current status section document current status implementation 
re initialization delays part tool 
quasi static scheduling performed acyclic graphs token flow specified bhattacharya parameterized modeling scheduling dataflow graphs 
page 
terms symbolic expressions subsystem parameters static integers unspecified token flow obtained run time parameter inter function 
refer statically unspecified token flow 
cyclic graphs graphs statically unspecified token flow passed run time scheduling 
specifications significant amount statically firing scheduling init graph fib fire set value scheduling body graph fib init add fire add fire add fire add fire add fire add fire fire print firing scheduling init graph fib fire set value scheduling body graph fib init add fire add fire add fire add fire add fire add fire add fire add fire fire print 
schedule trace generated psdf run time scheduler fibonacci number example fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
unspecified token flow appears quasi static scheduler left little static information resulting schedule lot baggage leading inefficiency 
pre processor described section development 
currently simple cyclic graphs cycles manually broken input specification feedback edge specified tool 
actor markings consideration clustering apgan described section implemented 
tool currently implements quasi static scheduling strategy parameterized looped schedule fully dynamic scheduling strategy attempt construct hybrid schedules involving approaches 
provision run time scheduler handle portions specifica tion quasi static schedules developed compile time 
trade offs scheduling strategies psdf context relative degree usage combined model interesting areas research 
advantages clustering portions graph static information sdf subgraphs single rate subgraphs subgraphs symbolic gcd information known user assertions done bdf model obvious 
working moving scenario static clustering possible scenario hav ing run time scheduler efficiently handle clustered vertices outlined run time scheduling algorithm compute rt schedule section 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
library actors provide code exe functionality actor 
affect quasi static scheduler scheduling process independent internal execution actor 
run time scheduler depend actor executions sible configuring value subsystem parameter 
absence actor library tool reads parameter values input file param extension performs simulation application schedule constructed parameter values read file 
implementation leda psdf tool implemented programming language solaris platform 
implementation uses leda software provides library data types algorithms combinatorial computing 
leda uses implement various data types combinatorial algorithms provides 
constructs new operator conjunction leda data types compiler compilation pur poses 
included selected sections code psdf tool appendix thesis 
parameterized graphs graph data type available leda 
parameterized graph graph directed multigraph case nodes edges contain additional user defined data 
node contains element data type called node type edge contains element data type etype called edge type pre defined leda bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subroutines creating parameterized graph accessing traversing graph obtain node graph iterate edges graph updating graph adding new vertices edges hiding removing edge ascertaining various properties graph cyclic acyclic 
implementation employed different types parameterized graphs actor graph cluster graph differentiated node types 
actor graph node type called attr actor structure contain ing single field alist attribute list defined pointer hash table 
edge type etype called attr arc similarly defined 
cluster graph node type called attr cluster defined analogously 
attribute list hash table consists collection list attributes attribute tuple attribute name attribute value 
attribute name enumerated data type representing particular property object associated actor edge cluster 
example relevant attributes psdf actor include actor name parameter list number actor ports hierarchy property leaf actor hierarchical actor psdf edge edge delay appears attribute 
psdf cluster attributes number child members cluster leaf cluster non leaf cluster local repetition factor cluster gcd variable generated compiler creating cluster apgan clustering step 
mentioned collection attributes object maintained hash table attribute name serves key bhattacharya parameterized modeling scheduling dataflow graphs 
page 
attribute value serves associated data 
hash table imple mented generic fashion data type stored attribute value associated attribute name void pointer 
interface attribute implemented uniformly set routines create set get delete print attribute name appears prefix routine 
example actor attribute name actor attr numports routines appear actor attr numports create actor attr numports set actor attr numports get actor attr numports delete actor attr numports print 
handling hash table appropriately attribute abstracted routines higher level routines sim ply utilize interface 
fact attribute name data type attribute value properties attribute provides parameters straightforward automatically generate set routines 
appendix includes file attr defines data types attr actor attr arc attr cluster 
file actor attr shows enumeration attributes psdf actor files actor attr numports actor attr numports provide specification interface routines actor attr numports attribute name actor attribute 
quasi static scheduling algorithms psdf tool perform significant symbolic computation 
symbolic computation abstracted files psdf polynomial psdf polynomial implements data type psdf polynomial 
psdf polynomial comprises symbolic expression bhattacharya parameterized modeling scheduling dataflow graphs 
page 
appearing general fraction numerator denominator repre sented product parameters symbolic variables integers 
header file psdf polynomial declares interface access psdf polynomial form subroutines functions include creating psdf polynomial parameter performing various computations psdf polynomials multi plication division gcd computation ascertaining various properties psdf polynomial integer printing psdf polynomial appropriate format 
input psdf tool psdf specifications written specific tex tual format 
fig 
shows example detailed model including explicit fork actors fibonacci number computation application fig 
specified textual format 
sign line denotes comment line 
sub system specified keyword subgraph followed name subsystem 
subsystem parameter information provided specifics parameter including name classification external dataflow data type default value 
gcd characteristics product relationships param eters see section specified 
init subinit body graphs enumerated keywords init subinit body respectively 
graph number actors edges child subsystems provided 
mat instantiating actors graph uses actor instances keyword 
actor specified actor keyword followed respectively name actor instance name actor actor library optionally num bhattacharya parameterized modeling scheduling dataflow graphs 
page 
simple application demonstrating computation pth fibonacci number 
topmost sub system subgraph fib external dataflow parameter type int default init actor instances actor sets sets body actor instances actor add add actor fork fork actor fork fork actor actor params actor param factor type int assigned sub param actor param phase type int assigned static actor print print connectivity connect add fork connect fork fork connect fork add connect fork add connect fork connect print 
detailed representation fibonacci number example fig 
specified input textual format psdf tool 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ber actor parameters keyword actor params number sub system parameters configured output ports actor keyword sets 
actor parameter specified separate line data type configuration static value subsystem parameter 
actor configures parameter specified separate line name configured parameter 
edges graph enumerated con keyword 
edge represented connecting source actor instance sink actor instance followed number tokens produced edge pe number tokens consumed edge ce delay edge de 
negative value pe ce de implies quantity statically unspecified parameter interpretation functions provided 
child subsystem embedded graph interface con information provided subsystem specification inter face keyword 
interface edge labelled direction input output connects actor instance parent graph actor instance asso ciated init subinit body graph subsystem 
values pe ce de provided interface edge similar normal edge graph 
executable psdf tool called psdf sched main routine specified file psdf sched provided appendix 
tool accepts command line argument name file psdf extension containing psdf specification textual format described 
number firings psdf specification generated schedule provided optional bhattacharya parameterized modeling scheduling dataflow graphs 
page 
command line argument 
textual format psdf file parsed psdf read graph file specification converted actor graph 
code run time scheduler implemented file psdf run time schedule operates actor graph structure obtained parsing input file 
quasi static scheduling specification converted cluster graph actor graph providing cluster wrapper actor vertex 
quasi static scheduling algorithms operate cluster graph specified file psdf schedule 
initializing cluster hierarchy pairwise clustering adjacent nodes apgan traversing cluster hierarchy printing quasi static schedule implemented psdf cluster file 
appendix contains selected sections code files psdf schedule psdf cluster psdf run time schedule 
routines defined psdf read graph psdf schedule psdf cluster psdf run time schedule psdf polynomial interface specified psdf polynomial attribute interface routines different psdf actor edge cluster attributes specified corresponding header files attributes 
output psdf tool file output sched contains schedule quasi static generated run time pseudo code format input psdf specification 
schedules shown thesis fig 
follow output format psdf tool 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
chapter 
dsp applications psdf chapter dsp applications modeled psdf repre sentations quasi static schedules obtained application quasi static scheduling algorithms section 
representing applications omitted specifying upper bounds represented max token transfer function actor port max delay value edge 
done clutter representation emphasize salient features psdf modeling application functionality 
experience appears spec appropriate bound token transfer delay pro grammer application specific knowledge usually straightforward task design process 

speech compression section describe speech compression application modeled psdf framework 
speech sample transmitted sender side receiver side bits possible applying analysis synthesis techniques 
sender side speech sample analyzed lin ear predictors obtain corresponding auto regressive ar coefficients sample 
obtain ar model require speech sample wide sense stationary wss spectral characteristics process remain constant duration sample length 
necessary break bhattacharya parameterized modeling scheduling dataflow graphs 
page 
speech sample small segments spanning duration milliseconds signal may assumed approximately stationary 
sepa rate ar model segment 
important design issue choosing model order ar process 
optimal model order seg ment size determined speech segment analyzed linear pre obtain ar coefficients residual error signal 
quantized transmitted receiver side residual cients followed ar modeling reconstruct original speech segment 
ar model dynamic range residual error signal smaller original signal 
approach allows fewer bits transmit speech signal compared direct transmission 
psdf representation style fig 
shows possible representation speech compression appli cation modeled psdf specification compress 
length speech instance external parameter subsystem set init graph 
init graph actor generates stream header packets header contains information speech instance including length set actor reads header packet accordingly configures speech speech actors responsible generating samples speech instance interface converter 
segment size model order zero padded speech sample length internal parameters compress sub system 
subinit graph select actor reads entire speech instance bhattacharya parameterized modeling scheduling dataflow graphs 
page 
compress init speech len compress body sets analyze len ord speech len synth len ord subsystem compress params gcd compress subinit quant quant select len sets play len 
speech compression application modeled psdf style 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
examines determine model order segment size existing techniques burg segment size selection algorithm aic order selec tion criterion 
zero padded speech length determined smallest integer greater satisfying mod segment size divides zero padded speech sample length exactly 
fact conveyed scheduler user assertion gcd body graph specification upper half diagram repre sents transmitter side lower half represents receiver side 
transmitter side speech actor generates speech sample zero padding length analyze actor accepts speech segments size performs linear prediction speech segment producing ar coefficients residual error signal length output 
model order ord input length len actor parameters analyze actor assigned subsystem parameters respectively 
sample residual signal quantized encoded scalar quantizer quant transmitted receiver side actor 
ar coefficients transmitted received similar fashion synth actor reconstructs speech segment performing ar modeling ar coefficients residual signal length excitation 
play actor allows segments accumulate input accepts samples entire speech instance plays resulting audio segment 
note clarity psdf model specify details bhattacharya parameterized modeling scheduling dataflow graphs 
page 
application 
purpose give overview modeling process concentrate parameters relevant scheduler perspective 
model go details select actor subblock representing syntactic hierarchy opposed semantic hierarchy con actors inside 
omitted parameters affect dataflow behavior application 
example speech speech actors treated black boxes going specifics exactly speech instance generated 
possible scheme reading file au file case parameter specification specified part header packet configured actor simi lar parameter file interface example ptolemy 
interface speech speech instances actor parameters filename set subsystem parameter len functionality read speech instance file produce len samples 
len length speech instance file truncated zero padded 
similarly quantizers actor parameters controlling quantization levels thresholds select block determine sets residual coefficients set internal subsystem parameters assigned actor parameters 
alternate specification init graph consist single actor configures different characteristics speech instance length name associated file user input 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
quasi static schedule generated compress specification quasi static scheduler shown fig 

application run times run different speech instance processed 
schedules init subinit graphs straightforward single invocations actor 
body graph analyze synth actors process samples speech instance repeat times init graph schedule compress fire fire sets init graph schedule compress subinit graph schedule compress fire speech fire select sets subinit graph schedule compress body graph schedule compress fire speech repeat times fire analyze repeat times fire quant fire repeat times fire quant fire repeat times fire synth fire play body graph schedule compress 
quasi static schedule speech compression application style fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
invocation 
scheduled invocations process samples speech instance 
invocation analyze actor generates samples processed quant actors residual signal ar coefficients processed quant actors 
total number invocations quant actors equal total number cations quant actors schedule gener ated compiler knows divides exactly user specified assertion 
knowledge scheduler introduce compiler gener ated variable represent gcd management variable complicates schedule shown fig gives alternative schedule known divides exactly 
psdf representation style alternate psdf model style speech compression application fig 

model analysis synthesis speech sample abstracted separate subsystem embedded top subsystem compress 
init graph compress sets length speech instance generated speech actor body graph passed subsystem processing 
subinit body graphs receive speech sample dataflow input 
segment size model order zero padded length parameters subsystem 
parameters con bhattacharya parameterized modeling scheduling dataflow graphs 
page 
figured subinit graph select actor 
additional parameter introduced subsystem 
need parame ter appropriate place configure somewhat subtle 
actor body graph receives speech sample length parent graph zero pads length passes analyze actor 
subinit graph body graph specify number tokens consumed body graph schedule compress gcd variable declarations int gcd gcd rn int gcd gcd gcd repeat gcd times repeat gcd times fire speech repeat gcd times fire analyze repeat times fire quant fire repeat times fire quant fire fire synth repeat gcd gcd times fire play body graph schedule compress 
quasi static schedule body graph compress subsystem fig 
compiler unaware divides exactly 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
compress init port port subinit body sets compress body speech len select len sets analyze len ord synth len ord subsystem compress params fork subsystem params gcd quant quant propagate sets play len 
speech compression application modeled psdf style 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
port port analyze synthesize init input 
inherited parameter size specified section inherited subsystem parameter associated subinit graph associated body graph 
sub init graph body graph 
new parameter neces sary body graph value set inherited parameter new parameter appears interface edge ana visible parent graph body graph compress set external parameter init graph 
function performed propagate actor simply assigns value fig 
shows corresponding quasi static schedule 
similar earlier schedule points noted 
clustering fork actors body graph compress scheduler generated sample rate consistency constraint checks equal scheduler know parameters equal knowledge need verify constraint run time elimi nated 
second previous model fig 
dataflow interfaces graphs parent graphs local synchrony verification issue 
model dataflow communication body graph compress subinit graph body graph local synchrony verification performed scheduler 
subinit graph straightforward deduce interface token flow bhattacharya parameterized modeling scheduling dataflow graphs 
page 
repeat times init graph schedule compress fire fire sets init graph schedule compress init graph schedule fire propagate sets init graph schedule body graph schedule compress error sample rate inconsistent fire speech repeat times fire fork subinit graph schedule fire select sets subinit graph schedule body graph schedule fire repeat times fire analyze repeat times fire quant fire repeat times fire quant fire repeat times fire synth fire play body graph schedule body graph schedule compress 
quasi static schedule speech compression application style fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
independent parameters 
body graph scheduler know gcd relationship interface token flow computed dependent internal parameters local synchrony verification constraints generated 
model greater dependency user assertions generation efficient quasi static schedule compared model fig 

complexity schedule greater case translates larger code size 
hand generating speech sample twice run application efficient perspective execution time 
zero padding speech sample seen psdf models fig 
neces sary zero pad instance speech sample segment size exactly divides sample length 
necessity arises inherent part underlying sdf model 
consider sdf design body graph compress style suppose zero padding done 
apgan schedule speech analyze synth play quant quant instance speech signal generated run application depending exact mechanism speech production may result bhattacharya parameterized modeling scheduling dataflow graphs 
page 
worst incorrect functionality redundancy inefficiency 
alternative sdf model speech source producing single sample invocation zero padding issue manifests number iterations system necessary processing single speech instance iterations producing samples speech source 
seen psdf inherits zero padding requirement corresponding sdf model 
agrees fact psdf closely mimics underlying sdf sys tem additional objective parameterizing sdf model design reused different inputs appropriately configuring parameters 
application necessity zero padding avoided sdf adopted underlying dataflow model 
model application section 

block adaptive filtering certain applications acoustic echo cancellation teleconferencing necessity frequency domain block adaptive filtering computational effi ciency known 
section psdf model linear lms adaptive filter 
section augment presenting psdf model time domain block adaptive filter corresponding fre quency domain block adaptive filter 
block adaptive filter incoming data sequence blocks applied block fir filter block time 
tap weights filter held fixed block data adaptation filter proceeds block block basis sample bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sample basis standard lms adaptive filter 
time domain block adaptive filtering fig 
shows psdf model time domain lms block adaptive filtering represented subsystem 
length input data size block length fir filter parameters subsystem 
parameters configured init graph actor 
actors input data sources produce input data desired put data respectively 
point blocks input data provided actor modeling block implementation fir filter allows efficient parallel processing 
block filtered fresh set adapted coefficients received actor 
output filtering process compared body input init sets fork ld 
psdf model representing time domain block adaptive filtering 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
blk flen blk flen subsystem params gcd plot subtract fork desired output subtract actor error plotted plot actor supplied actor blocks size actor looks error corresponding input block accordingly adapts current fil ter coefficients block lms algorithm produces new set filter coefficients processing input block 
inputs actor initialized tokens value correspond initiating lms block adaptive process initial values filter weights set actor 
input size filter length actor parameters actors assigned subsystem parameters respec tively 
omitted parameters affect dataflow behavior step size weight control mechanism block lms algorithm set init graph 
application assumed block size exactly divides data size zero padding necessary performed inside input black boxes 
quasi static scheduler generates quasi static schedule shown fig 
implements functionality obvious manner 
run sys tem processes different set data inputs 
run input actors invoked produce data samples 
fork actor invoked times transfer input data samples fir filter weight control mechanism 
invocation actor produces set cients actor process input samples 
invocation actors succession samples produced output fir bhattacharya parameterized modeling scheduling dataflow graphs 
page 
processed subtract fork plot actors successive invocations 
process data samples invocation sequence repeated times 
frequency domain block adaptive filtering time domain block lms adaptive filtering process discussed section implemented computationally efficient manner performing adaptation filter coefficients frequency domain fast fourier transform fft algorithm 
block lms algorithm implemented referred repeat times init graph schedule fire sets init graph schedule body graph schedule fire input fire repeat times fire fork repeat times fire fire repeat times fire subtract fire fork fire plot body graph schedule 
quasi static schedule psdf model time domain block adaptive filtering fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
fast lms algorithm 
linear convolution performed fir filter speeded performing fast convolution overlap save lap add methods 
shown efficient implementation fast lms algorithm obtained percent overlap overlap save method 
describes fast lms algorithm adapted uses overlap save method percent overlap block size chosen equal filter length 
psdf model fast lms algorithm imple mented manner shown fig 

method tap weights filter coefficients fir filter zero padded equal number zeros point fft psdf sub system represents frequency domain block adaptive filtering process 
subsystem parameters 
fig 
shows body graph subsystem 
input actor acts signal source producing samples input signal 
concat block receives input data block sizes concatenates current block previous block th block appended th block provides block size fft actor computes fft coefficients 
coefficients mul frequency domain tap weights computed weight update mechanism described shortly prod actor obtain estimated put frequency domain 
inverse fft obtain samples estimated output time domain block discarded actor obtain samples estimated output corresponding bhattacharya parameterized modeling scheduling dataflow graphs 
page 
input fft prod concat fork add update nd prod fork fft 
psdf model frequency domain block adaptive filtering 
subtract fork bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem params gcd plot fft body subblock update prod step input samples 
acoustic echo cancellation application estimated output provides estimated echo desired output comes actual echo 
difference estimated output desired output calculated subtract actor 
output subtract provides error signal determines actual echo 
actor inserts zeros error sig nal fft actor transforms error signal frequency domain fft operation 
actor computes complex conjugate ele ments frequency domain input signal 
complex conjugate transpose multiplied frequency domain frequency domain error signal prod actor provided update subblock enclosed bold rectangle fig 
represent syntactic hierarchy shown separately fig 
compute update tap weights 
obtained performing inverse fft product input actor deleting elements actor appending zeros resulting data actor computing fft actor fft multiplying twice lms algorithm step size prod 
update added add actor fft coefficients tap weights th block wk obtain fft coefficients set tap weights th block wk 
initial set tap weight fft coefficients pro vided delay elements initialized output edge add actor 
psdf representation denoted data flow system element element basis functionality actor interpret bhattacharya parameterized modeling scheduling dataflow graphs 
page 
input data appropriately column vector row vector matrix identity matrix algorithm described perform computations provide element output 
subsystem parameters affect data flow behavior omitted 
clutter block diagram actor parameters omitted 
block diagram actor parameters determine dataflow behavior actor subsystem parameters assigned deduced easily 
example fft actors len parameter denoting fft size 
len parameters assigned subsystem parameter init graph subsystem shown 
exactly similar init graph subsystem single actor setting subsystem parameters 
quasi static schedule shown fig 
runs application 
block adaptive filtering process initiated firing fork actor times 
transfers fft coefficients initial tap weights input prod actor performs convolution product fft input frequency domain 
assume block size equal filter length divides input length exactly 
input signal length adaptive filtering process applied times block size processing single block fork fork actors operate samples total invocations subtract fork plot actors process samples total number invocations 
actor adaptive filtering process invoked filtering step total bhattacharya parameterized modeling scheduling dataflow graphs 
page 
number invocations 
case quasi static scheduling process affected relationship sample rate changes appear edge terms parameters 
schedule affected scheduler unaware 
cd dat sample rate conversion fig 
shows psdf model sample rate conversion system interface compact disc cd player digital audio tape dat player 
sample rates repeat times init graph schedule fire sets init graph schedule body graph schedule fire input fire repeat times fire concat fire fft fire repeat times fire fork fire fork fire prod fire fire repeat times fire subtract fire fork fire plot fire fire fft fire prod fire fire fire fire fft fire step fire prod fire add body graph schedule 
quasi static schedule psdf model frequency domain block adaptive filtering fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
cd players dat players respectively khz khz 
interfacing example record cd digital tape requires sample rate conver sion 
done efficiently multi stage implementation sample rate conversion 
fig 
shows stage parameterized implementation 
sample rate conversions performed polyphase fir filters respectively perform output input conversion ratios ij dj ij dj represents interpolation decimation factors polyphase fir filter quantities subsystem parameters psdf subsystem cd dat con figured init graph actor 
rate conversion ratios chosen examining prime factors sampling rates 
ratio vari cd dat body subsystem cd dat params cd sets dat cd dat init 
psdf model cd dat sample rate conversion system implemented stages polyphase fir filters 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ous ways perform conversion stages application designer experiment different values different runs system 
possible choices 
polyphase fir filter actor parameters decimation factor set subsystem parameters respec tively 
addition possess parameters affect dataflow behavior set zero filter cients read table corresponding permissible pairs 
true polyphase fir filters application 
quasi static schedule shown fig 

general schedule values decimation interpolation factors 
maintain fixed rela tionships factors user additionally specify rela tionships user assertions may result simplified schedule 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
repeat times init graph schedule cd dat fire sets init graph schedule cd dat body graph schedule cd dat int gcd gcd int gcd gcd gcd int gcd gcd gcd gcd repeat gcd times repeat gcd times repeat gcd times repeat times fire cd fire repeat gcd times fire repeat gcd gcd times fire repeat gcd gcd gcd times fire repeat times fire dat body graph schedule cd dat 
quasi static schedule psdf model stage cd dat sample rate conversion system fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
chapter 
extending psdf 
psdf variable topologies psdf model discussed far parameterizes functionality token flow synchronous dataflow graph 
possible naturally extend model parameterize graph topology 
recall psdf edge parameters delay edge initial value re initial ization period delay token function parameter set specified general edge parameter interpretation function 
similar concept connectivity information edge specified source sink actors dependent parameter set 
src snk longer take fixed actor port values vary determined parameter configuration just variable quantities psdf graph corresponding subinit init graph responsible fixing con information configuring sdf graph maintained cer tain number graph invocations 
configuring connectivity psdf graph prior executing somewhat similar concept higher order func tions hof ptolemy 
hof actors called stars ptolemy typically replace instances star galaxy subblock alter connections graph adding new blocks self destruct pre initialization phase graph graph sched bhattacharya parameterized modeling scheduling dataflow graphs 
page 

scheduler encounters hof stars graph 
somewhat anal psdf run time scheduler comes variable graph topology resolved graph configured sdf graph 
quasi static scheduler take variable graph topology consideration elaborate shortly 
bdf model behaved stream flow model special non sdf actors switch select merge effectively express dynamic graph connectivity 
fig 
shows construct mod bdf psdf 
bdf model actor emits boolean valued token switch select 
statement 
bdf representation 
psdf representation 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sets output serves control token switch select actors 
psdf representation dashed edges converging psdf edge indicates src vary run time dashed edges diverging indicates snk vary dynamically 
edge additional characteristics take non negative integer values determined parameter configuration assigned static integers case graph degenerates fixed topology psdf graph symbolic subsystem parameters left unspecified case parameter tion function provided compute parameter configuration 
integer values taken interpreted configure src follows 
dashed edges converging enumerated total number dashed edges criterion instantiated edge instantiated edge 
value implies source actor dashed edge source actor value greater considered invalid 
property similarly interpreted 
fig 
edge variable sink edge variable source 
property assigned subsystem parameter assigned parameter actor responsible configuring parameter numbers dashed edges indicate enumeration assigned 
token flow specified 
actors assumed homogeneous sdf actors 
efficient general quasi static scheduling variable topology bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf graphs challenge 
possibility apply apgan thread execution separately put necessary statements sched ule 
code size explodes rapidly number variable ity edges 
efficient management code size increase useful direction study 
fig 
shows simple example psdf specification single variable connectivity edge 
psdf specification conditional shown fig 
dashed edges annotated enumeration fig 

fig 
specifies possible quasi static schedule 

parameterization meta modeling technique psdf model applies parameterization concept synchronous dataflow formalism 
discussed chapter possible apply parameterization techniques static models obtain similar extensions 
fact applicable arbitrary dataflow models imposing hierarchy discipline requiring certain properties hold sub system defined period time 
dataflow models defined concept graph iteration particularly amenable parameterized extensions 
example cyclo static dataflow extended parameter ized cyclo static dataflow model appealing re ration related properties psdf 
illustration fig 
models speech compression application section 
straightforward extension psdf specification fig 
section 
recall bhattacharya parameterized modeling scheduling dataflow graphs 
page 
conditional body sets conditional init repeat times init graph schedule conditional fire sets init graph schedule conditional body graph schedule conditional repeat times fire fire fire fire fire repeat times fire error invalid sink configuration body graph schedule conditional 
example psdf specification single variable connectivity edge 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem conditional params compress init sets compress body speech len subsystem compress params compress subinit speech len analyze synth select len sets quant quant play len 
parameterized cyclo static dataflow specification speech compression application 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf specification instance speech sample length zero padded length size segment exactly divides zero padded length 
zero padding longer necessary specifica tion 
zero padded length parameters gives number segments size contained speech sample represents size residual segment 
divided represents quotient represents remainder 
gives model order ar model speech segment 
specification compress code analyze synth actors divided phases token flow vary invocation parent graph psdf token flow vary invocations parent graph 
notation pn denotes parameterized cyclo static token flow sequence nq repeated times 
similarly denotes sequence form mm repeated times 
token consumption pattern pn signifies invocations analyze consume tokens input port th invocation consumes tokens 
possible quasi static schedule body graph compress shown fig 

actor invocations enclosed firings process segments speech sample length block actor execu tions process residual segment length summary demonstrated informal intuitive concept bhattacharya parameterized modeling scheduling dataflow graphs 
page 
illustrated speech compression application 
rigorous formalism lines psdf calls investigation 

summary parameterized synchronous dataflow psdf model significantly increases expressivity synchronous dataflow sdf imposing hierarchy discipline underlying sdf model allows parameterized dynamic control subsystem different levels granularity 
basic building block provided body graph schedule compress fire speech repeat times fire analyze repeat times fire quant fire repeat times fire quant fire fire synth fire analyze repeat times fire quant fire repeat times fire quant fire fire synth fire play body graph schedule compress 
quasi static schedule body graph specification speech compression application fig 

bhattacharya parameterized modeling scheduling dataflow graphs 
page 
application designer psdf specification subsystem decomposed distinct psdf graphs init graph subinit graph body graph parameters provide control functional behav ior dataflow behavior token production consumption sub system parameters change dynamically dynamically modifying system behavior 
specification init subinit graphs control behavior body graph configuring body graph parameters appropriately 
speci fication embedded specification giving rise powerful hierarchical structure application designer represent nested concurrent logical functional units capable dynamically configuring internal functional dataflow behavior 
parameterization subsystem functionality comes natural concept application modeling viewpoint com underlying sdf model proven suited designing static dsp systems psdf natural choice modeling broad class data dependent dynamic dsp systems 
underlying sdf model semantics intuitive easy understand 
furthermore parameterized framework provides natural concept re configurability design re desirable properties modeling environment 
experience significant population practical data dependent dsp applications represented naturally psdf model 
performance viewpoint psdf possesses robust elegant oper semantics provides promising framework developing elaborate bhattacharya parameterized modeling scheduling dataflow graphs 
page 
verification techniques verifying qualities bounded memory execution local synchrony rely rigorous verification correct opera tion 
efficient quasi static schedules geared minimizing code size buffer memory requirements developed large class psdf specifica tions making attractive synthesis purposes optimized synthesis quasi static schedules appears interesting area 
parameterized framework psdf model looks promising naturally extensible rating dynamically re configurable graph topologies conditionals increasing expressivity 
addition parameterized modeling architecture underlies psdf appears hold promise general meta modeling technique applied alternative dataflow models sdf 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
appendix section provide selected portions code implementation psdf tool section accepts input psdf specifi cation performs quasi static scheduling run time scheduling appropriate generates schedule input psdf specification 
attr ifndef attr define attr include include useful enum attr status attr status ok attr status range attr status negative attr status absent attr status exists alternate name pointer hash table typedef ptr attr list define structure contain attr list 
contain attributes stored actor 
passed leda property actor 
possibly add fields 
typedef struct attr actor attr list alist attr actor similarly define property stored arc etype typedef struct attr arc attr list alist attr arc similarly define property stored cluster typedef struct attr cluster attr list alist attr cluster bhattacharya parameterized modeling scheduling dataflow graphs 
page 
boolean attr exists const attr list int endif attr actor attr ifndef actor attr define actor attr enum actor attr actor attr number actor attr name actor attr numports actor attr psdf repetitions attribute actor represents subsystem actor attr psdf subsystem attribute actor interface node communicates actor parent graph actor attr psdf interface node 
endif actor attr actor attr numports ifndef actor attr numports define actor attr numports include attr include actor attr attr status actor attr numports create attr list attr status actor attr numports set attr list int attr status actor attr numports get attr list int attr status actor attr numports delete attr list void actor attr numports print file const void endif actor attr numports actor attr numports bhattacharya parameterized modeling scheduling dataflow graphs 
page 
include actor attr numports attr status actor attr numports create attr list alist void int key data key allocate scalar int key actor attr numports find element alist void key null return attr status exists data allocate scalar int data add element alist void key void data actor attr numports print return attr status ok attr status actor attr numports set attr list alist int int allocate scalar int actor attr numports int find element alist void free return attr status ok free return attr status absent attr status actor attr numports get attr list alist int int allocate scalar int actor attr numports int find element alist void free return attr status ok free return attr status absent bhattacharya parameterized modeling scheduling dataflow graphs 
page 
attr status actor attr numports delete attr list alist int allocate scalar int actor attr numports del element alist void false free return attr status ok free return attr status absent void actor attr numports print file fp const void data int int data fprintf fp actor attr numports psdf sched include string include error include psdf read graph include cluster include psdf cluster include psdf schedule include psdf run time schedule global variable indicate quasi static scheduling done written psdf read graph boolean quasi static int main int argc char argv local variable declarations file psdf file param file sched leda actor graph ptr leda cluster graph ptr int num firings bhattacharya parameterized modeling scheduling dataflow graphs 
page 
sched fopen output sched quasi static true argc format read graph filename psdf psdf file open psdf file argv argc format read graph filename num firings psdf file open psdf file argv num firings atoi argv argc format read graph filename num firings quasi static run time psdf file open psdf file argv num firings atoi argv quasi static atoi argv error usage psdf sched filename psdf num firings static runtime psdf file error fatal open file argv psdf read graph psdf file schedule qss run time quasi static qss scheduling printf doing quasi static scheduling initialize cluster hierarchy new leda cluster graph cluster init hierarchy psdf cluster init hierarchy psdf schedule graph psdf cluster print schedule sched num firings run time scheduling printf doing run time scheduling param file open param file argv param file error warn param file provided param file null psdf run time schedule graph param file sched num firings fclose sched bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf sched psdf schedule include files local function declarations void psdf schedule graph leda cluster graph ptr top graph leda node supernode topmost cluster dummy 
stays container single supernode points subgraph user specified topmost graph 
extract supernode 
supernode top graph node psdf schedule supernode top graph supernode return void psdf schedule supernode leda cluster graph ptr supergraph leda node supernode attr cluster su attr node attr attr cluster ptr su attr ptr attr actor ac attr leda cluster graph ptr graph ptr leda cluster graph ptr body graph init graph subinit graph leda node control cluster psdf input interface ptr input psdf polynomial ptr cn snk cn cn new pr pr new constr psdf polynomial list ptr init constr list subinit constr list boolean locally synchronous leda edge inp edge otp edge attr arc arc attr int param value char su name psdf parameter list ptr param list psdf cluster interface list ptr cl intf ptr su attr supergraph inf supernode graph ptr allocate scalar leda cluster graph ptr su attr ptr allocate scalar attr cluster su attr ptr su attr init constr list allocate scalar psdf polynomial list subinit constr list allocate scalar psdf polynomial list bhattacharya parameterized modeling scheduling dataflow graphs 
page 
obtain attributes hierarchical actor contained inside supernode cluster variable ac attr actor attr name get ac attr alist su name schedule init graph 
schedule child subsystems schedule init graph attr exists su attr alist cluster attr psdf init graph cluster attr psdf init graph get su attr alist graph ptr init graph graph ptr forall nodes nd init graph node attr init graph inf nd attr exists node attr alist cluster attr psdf subsystem psdf schedule supernode init graph nd psdf schedule subgraph apgan init graph su attr ptr recurse schedule hierarchy computing product repetition count tokens produced output port leaf actor 
check leaf actor configures parameter output port product 
verify compile time put constraint control cluster init graph node psdf check unit transfer init graph control cluster psdf polynomial allocate int init constr list psdf process constraint list su attr ptr init constr list schedule subinit graph similarly 
schedule body graph 
schedule child subsystems 
attr exists su attr alist cluster attr psdf body graph cluster attr psdf body graph get su attr alist graph ptr body graph graph ptr forall nodes nd body graph bhattacharya parameterized modeling scheduling dataflow graphs 
page 
node attr body graph inf nd attr exists node attr alist cluster attr psdf subsystem psdf schedule supernode body graph nd child subgraphs body graph successfully scheduled 
schedule body graph psdf schedule subgraph apgan body graph su attr ptr look interface token flow expression 
depend non init configured parameters need run time constraint checking 
evaluate expression default values non init configured parameters 
assign token flow parent edge 
insert constraint checking evaluated expression actual expression 
expression init set non init set params default default constraint error inconsistent graph 
put subinit schedule body schedule 
cl intf ptr allocate scalar psdf cluster interface list ptr cluster attr psdf interface get su attr ptr alist cl intf ptr cl intf ptr param list allocate scalar psdf parameter list ptr actor attr psdf parameters get ac attr alist param list process interface input edges input cl intf ptr input input input input cn input sink consumed cn new psdf polynomial product cn psdf polynomial allocate int locally synchronous true inp edge input input edge arc attr supergraph inf inp edge arc attr psdf tokens consumed set arc attr alist cn supergraph assign inp edge arc attr check function supernode parameter param list parameters cn pure number psdf polynomial pure number cn new error fatal psdf schedule supernode tokens consumed subgraph bhattacharya parameterized modeling scheduling dataflow graphs 
page 
positive integer su name check cn function parameter param list psdf polynomial function polynomial cn new name param type psdf param type internal param type psdf param type external say compile time locally synchronous locally synchronous false evaluate token flow default value parameter data type psdf param data type int error psdf schedule integer parameters appear token flow param value atoi default value cn new psdf polynomial evaluate expression cn new name param value locally synchronous assign cn new consumed quantity edge parent graph arc attr psdf tokens consumed set arc attr alist cn new supergraph assign inp edge arc attr insert local synchrony constraint 
cn new cn error equivalent cn new cn error constr psdf polynomial divide cn cn new psdf process constraint su attr ptr constr process interface output edges similarly supergraph assign supernode su attr ptr return void psdf schedule subgraph apgan leda cluster graph ptr graph attr cluster ptr supernode attr ptr leda edge cluster edge null leda node src snk cluster src null cluster snk null boolean cycle bhattacharya parameterized modeling scheduling dataflow graphs 
page 
cluster single rate sub systems sdf arcs arcs gcd known variable assigned psdf schedule single rate graph supernode attr ptr psdf schedule sdf graph supernode attr ptr psdf schedule gcd known graph supernode attr ptr schedule multi rate psdf gcd unknown portion dataflow graph graph number edges find suitable cluster edge forall edges graph src source snk target check clustering introduce cycle cycle false forall nodes graph clustering introduce cycle node reachable src reach snk leda reachable src leda reachable snk cycle true break cycle point valid cluster edge cluster edge cluster src src cluster snk snk break psdf pairwise cluster graph supernode attr ptr cluster src cluster snk cluster edge graph contains edges cluster remaining nodes graph number nodes graph node graph node psdf pairwise cluster graph supernode attr ptr null return bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf schedule psdf cluster include files local function declarations leda node psdf pairwise cluster leda cluster graph ptr cluster graph attr cluster ptr supernode attr ptr leda node cluster source leda node cluster sink leda edge cluster edge performs pairwise apgan clustering 
cluster edge null implies trying cluster disconnected components 
case just absorb cluster source cluster sink new cluster repetition 
new cluster won gcd term constraints term 
attr cluster ptr newc attr attr cluster src attr snk attr supernode attr attr arc attr edge attr leda node new cluster leda edge edge edge edge psdf polynomial ptr prd cns reps reps src reps snk new prd new cns psdf polynomial ptr prd cns prd cns gc polynomial eqn leda cluster graph ptr psdf user gcd list ptr user gcd null psdf polynomial product table ptr user product null user may provided gcd information product information user assertions 
obtain variables user gcd user product 
create new non leaf cluster attribute initialize newc attr allocate scalar attr cluster 
check cluster edge null cluster edge bhattacharya parameterized modeling scheduling dataflow graphs 
page 
reps src reps snk absorb clusters inside new cluster redirect edges new cluster 
hide src snk 
code similar cluster edge non null simpler 
create new non leaf cluster cluster graph attribute newc attr return new cluster point cluster edge non null 
obtain tokens produced consumed cluster edge prd allocate scalar psdf polynomial ptr cns allocate scalar psdf polynomial ptr attr cluster graph inf cluster edge arc attr psdf tokens consumed get attr alist cns arc attr psdf tokens produced get attr alist prd prd prd cns cns check sample rate consistency build list sample rate consistency constraints store new cluster attributes forall edges edge cluster source look edges going cluster source cluster sink cluster edge edge cluster edge continue target edge cluster sink consistency ratio tokens produced edge tokens consumed edge corresponding ratio cluster edge prd allocate scalar psdf polynomial ptr cns allocate scalar psdf polynomial ptr edge attr cluster graph inf edge arc attr psdf tokens consumed get edge attr alist cns arc attr psdf tokens produced get edge attr alist prd prd prd cns cns bhattacharya parameterized modeling scheduling dataflow graphs 
page 
eqn psdf polynomial divide psdf polynomial product prd cns psdf polynomial product cns prd psdf polynomial simplify eqn psdf polynomial pure number eqn psdf polynomial equal int eqn error psdf pairwise cluster inconsistent graph check run time psdf process sample rate constr newc attr eqn hide edge remove cluster graph hide edge edge cluster graph hide edge cluster edge compute gcd produced consumed terms cluster edge store new cluster attributes 
check gcd defined user gc polynomial psdf polynomial compute gcd prd cns user gcd user product psdf polynomial gcd function gc polynomial create gcd term new cluster 
compute repetitions cluster source store cluster attr psdf repetitions 
cluster sink 
reps src psdf polynomial divide cns gc polynomial reps snk psdf polynomial divide prd gc polynomial src attr cluster graph inf cluster source snk attr cluster graph inf cluster sink cluster attr psdf repetitions set src attr alist reps src cluster attr psdf repetitions set snk attr alist reps snk cluster graph assign cluster source src attr cluster graph assign cluster sink snk attr absorb cluster src cluster snk new cluster cluster attr num members set newc attr alist 
create new non leaf cluster cluster graph attribute newc attr new cluster cluster graph new node newc attr bhattacharya parameterized modeling scheduling dataflow graphs 
page 
adjust token flow adjacent edges cluster sink cluster source 
redirect edges new cluster forall edges edge cluster source edge attr cluster graph inf edge cns allocate scalar psdf polynomial ptr arc attr psdf tokens consumed get edge attr alist cns cns cns new cns psdf polynomial product cns reps src arc attr psdf tokens consumed set edge attr alist new cns cluster graph move edge edge source edge new cluster forall edges edge cluster source edge attr cluster graph inf edge prd allocate scalar psdf polynomial ptr arc attr psdf tokens produced get edge attr alist prd prd prd new prd psdf polynomial product prd reps src arc attr psdf tokens produced set edge attr alist new prd cluster graph move edge edge new cluster target edge process input output edges cluster snk similarly 
check cluster src cluster snk interface node case adjust token flow edges supernode attribute interface information attr exists src attr alist cluster attr psdf interface node adjust interface token flow supernode attr ptr cluster graph cluster source new cluster attr exists snk attr alist cluster attr psdf interface node adjust interface token flow supernode attr ptr cluster graph cluster sink new cluster remove cluster source cluster sink cluster graph 
deleting node hiding 
new cluster attribute points cluster source cluster sink 
removing pointers invalid 
cluster graph hide node cluster source cluster graph hide node cluster sink return new cluster bhattacharya parameterized modeling scheduling dataflow graphs 
page 
void psdf cluster print schedule file fp leda cluster graph ptr cluster graph int num firings leda node supernode attr cluster su attr psdf polynomial ptr reps topmost cluster dummy 
stays container single supernode points subgraph user specified topmost graph 
extract supernode 
user specified number repetitions stored top cluster 
print necessary 
num firings need printing repeat fprintf fp psdf cluster print graph schedule fp cluster graph null fprintf fp print repeat fprintf fp repeat fprintf fp num firings fprintf fp times psdf cluster print graph schedule fp cluster graph null fprintf fp void psdf cluster print graph schedule file fp leda cluster graph ptr cluster graph psdf polynomial list ptr unit constr list int depth int num nodes leda node cluster node traverse cluster hierarchy cluster graph supernode print schedule init graph supernode 
supernodes traversed print schedule graph num nodes cluster graph number nodes bhattacharya parameterized modeling scheduling dataflow graphs 
page 
num nodes error psdf cluster print supernode improper clustering detected dataflow graph cluster node cluster graph node print init graph schedules sub systems graph psdf print init schedule fp cluster graph cluster node depth print graph schedule preamble followed body psdf print apgan schedule fp cluster graph cluster node unit constr list depth void psdf print apgan schedule file fp leda cluster graph ptr cluster graph leda node cluster psdf polynomial list ptr unit constr list int depth print preamble unknown token flow declaration gcd declaration checking unit transfer consistency 
sample rate consistency checks implemented code cluster pair 
conceptually checks 
preamble print looped schedule comprising body 
psdf polynomial list ptr constraint cn psdf polynomial ptr attr cluster cluster attr cluster graph inf cluster int new depth depth print gcd assignments preceded starting brace specify scope gcd variable declarations 
closing brace comes printing dataflow schedule gcd assignments valid point attr exists cluster attr alist cluster attr psdf gcd print tab fp depth fprintf fp gcd variable declarations print psdf print gcd fp cluster graph cluster depth print unit constr list unit constr list print error 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
print looped schedule graph print tab fp new depth fprintf fp looped schedule psdf print cluster reps fp cluster graph cluster new depth void psdf print cluster reps file fp leda cluster graph ptr cluster graph leda node cluster int depth psdf polynomial ptr reps allocate scalar psdf polynomial ptr attr cluster cluster attr cluster graph inf cluster cluster members list ptr members list member list ptr mem leda node mem node int new depth leaf allocate scalar int new depth depth cluster attr psdf repetitions get cluster attr alist reps psdf polynomial equal int reps print repeat 
new depth depth print tab fp depth fprintf fp repeat psdf polynomial print fp reps fprintf fp times check non leaf recursively traverse children cluster attr get cluster attr alist leaf leaf leaf node actor subgraph pointer attr exists cluster attr alist cluster attr psdf subsystem traverse subgraph psdf cluster print supernode fp cluster graph cluster new depth print fire actor 
non leaf recursively traverse children check sample rate constraints attr exists cluster attr alist cluster attr psdf sample rate constr bhattacharya parameterized modeling scheduling dataflow graphs 
page 
print error members list allocate scalar cluster members list ptr cluster attr members list get cluster attr alist members list mem members list members mem mem mem mem node mem node psdf print cluster reps fp cluster graph mem node new depth new depth depth print tab fp depth fprintf fp void psdf cluster print supernode file fp leda cluster graph ptr cluster graph leda node supernode int depth attr cluster su attr leda cluster graph ptr data char name psdf polynomial list ptr unit reps su attr cluster graph inf supernode obtain name subsystem represented supernode variable name print tab fp depth fprintf fp allocate scalar leda cluster graph ptr print schedule subinit graph attr exists su attr alist cluster attr psdf subinit graph cluster attr psdf subinit graph get su attr alist print tab fp depth fprintf fp subinit graph schedule name extract unit transfer subinit graph constraint su attr variable unit reps 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
psdf cluster print graph schedule fp unit reps depth print tab fp depth fprintf fp subinit graph schedule name print schedule body graph attr exists su attr alist cluster attr psdf body graph cluster attr psdf body graph get su attr alist data print tab fp depth fprintf fp body graph schedule name psdf cluster print graph schedule fp data null depth print tab fp depth fprintf fp body graph schedule name print local synchrony verification constraints attr exists su attr alist cluster attr psdf local synchrony constr print error print tab fp depth fprintf fp 
psdf cluster psdf run time schedule include files local function declarations void psdf run time schedule graph file user file file fp leda actor graph ptr gr int num firings ptr param table user table int user provide parameter values file user file 
read file store information hash table user table 
parameter name psdf polynomial key data array values user provided parameter 
values read user table entries param table represents dynamic parameter setting run time 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
user table psdf run read user file user file param table allocate param hash size polynomial hash func polynomial cmp func polynomial key init param table param table contain parameter name value tuples hashed parameter name 
table filled init subinit graphs 
exiting sub system parameter entries sub system deleted table num firings fprintf fp firing fprintf fp psdf run sched graph fp gr user table param table fprintf fp return void psdf run sched graph file fp leda actor graph ptr gr ptr user table ptr param table leda node nd act attr actor nd attr char actor name leda actor graph ptr init gr subinit gr body gr schedule ptr sched list sc psdf polynomial list ptr set par list set par int val ptr val psdf polynomial ptr par user values ptr user val hierarchical actor schedule init node forall nodes nd gr nd attr gr inf nd actor attr name get nd attr alist actor name attr exists nd attr alist actor attr psdf init graph allocate scalar leda actor graph ptr bhattacharya parameterized modeling scheduling dataflow graphs 
page 
actor attr psdf init graph get nd attr alist init gr point delete param table init set parent set parameter entries supernode 
entries correspond older run obsolete 
fprintf fp computing schedule init graph subsystem actor name psdf run sched graph fp init gr user table param table attr exists nd attr alist actor attr psdf subsystem compute interface token flow sub system psdf run compute interface token flow gr nd param table configure edges graph integer values info param table compute repetitions vector psdf run compute reps null gr param table construct valid schedule sched list psdf run construct valid gr fire actor sched list sc sched list sc sc sc act sc member nd attr gr inf act actor attr name get nd attr alist actor name attr exists nd attr alist actor attr psdf subsystem schedule subinit graph attr exists nd attr alist actor attr psdf subinit graph allocate scalar leda actor graph ptr actor attr psdf subinit graph get nd attr alist subinit gr fprintf fp computing schedule subinit graph subsystem actor name psdf run sched graph fp subinit gr user table param table schedule body graph attr exists nd attr alist actor attr psdf body graph allocate scalar leda actor graph ptr actor attr psdf body graph get nd attr alist body gr fprintf fp computing schedule body graph subsystem bhattacharya parameterized modeling scheduling dataflow graphs 
page 
actor name psdf run sched graph fp body gr user table param table verify local synchrony interface entry interface list supernode compare pre computed token flow actual flow flag error mismatch psdf run check interface token flow gr act param table remove internal parameters sub system param table 
leaf actor fire fprintf fp fire actor actor name check configures parameter assign value parameter set insert param table 
get value user table randomly attr exists nd attr alist actor attr psdf sets pars set par list allocate scalar psdf polynomial list ptr actor attr psdf sets pars get nd attr alist set par list set par set par list set par set par set par par psdf polynomial product set par member psdf polynomial allocate int fprintf fp parameter psdf polynomial print fp par read parameter value user table user val user values ptr find element user table void par extract user provided value table variable val fprintf fp set user value val user hasn provided value set random value val psdf set param random fprintf fp set random value val insert parameter value param table return bhattacharya parameterized modeling scheduling dataflow graphs 
page 
void psdf run compute reps attr actor ptr su attr leda actor graph ptr gr ptr param table routine configures edge graph sdf edge resolving parameter token production consumption quantities param table default values 
supernodes token flow resolved 
psdf polynomial ptr tf ptr pr cn dl attr arc ed attr leda edge ed int prd cns delay attr actor src attr snk attr leda node src snk forall edges ed gr ed attr gr inf ed tf ptr allocate scalar psdf polynomial ptr arc attr psdf tokens produced get ed attr alist tf ptr pr tf ptr arc attr psdf tokens consumed get ed attr alist tf ptr cn tf ptr arc attr psdf delay get ed attr alist tf ptr dl tf ptr src source ed snk target ed src attr gr inf src snk attr gr inf snk source supernode produced field set psdf run compute interface token flow attr exists src attr alist actor attr psdf subsystem prd psdf run resolve token flow su attr pr param table arc attr sdf tokens produced set ed attr alist prd attr exists snk attr alist actor attr psdf subsystem cns psdf run resolve token flow su attr cn param table arc attr sdf tokens consumed set ed attr alist cns process delay delay psdf run resolve token flow su attr dl param table arc attr sdf delay set ed attr alist delay gr assign ed ed attr bhattacharya parameterized modeling scheduling dataflow graphs 
page 
edges configured sdf edges compute repetitions vector psdf run compute sdf reps gr return void psdf run compute sdf reps leda actor graph ptr gr straightforward implementation procedure software synthesis dataflow graphs bhattacharyya pg 

schedule ptr psdf run construct valid leda actor graph ptr gr straightforward implementation procedure software synthesis dataflow graphs bhattacharyya pg 

psdf run time schedule bhattacharya parameterized modeling scheduling dataflow graphs 
page 
glossary unspecified parameter value 
subset parameters params psdf graph comprising unspecified actor parameters subset parameters params psdf specification comprising unspecified actor parameters actor psdf actor port belongs 
body condition part requirement local synchrony psdf specification body graph inherently locally synchronous token transfer interface ports body graph invariant body graph parameters configured init graph 
body graph body inputs body body third part parameterized looped schedule graph called body sequence vk vi actor leaf hierarchical parameterized schedule loop 
bounded memory consistency part requirement local synchrony psdf graph possible instantiated sdf graph satisfy upper bounds specified max token transfer function actor port max delay value edge 
cp value parameter configuration nonempty parameter set ce number tokens consumed psdf edge equivalent token consumption function actor sink port belongs corresponding complete configura bhattacharya parameterized modeling scheduling dataflow graphs 
page 
tion parameters child specification child subsystem child subsystem psdf specification subsystem associated hierarchical actor psdf graph complete configuration configuration nonempty parameter set cp config config config config configuration params may incomplete 
instantiated configuration associated complete configuration psdf graph obtained applying configuration unspecified parameters configuration params may incomplete 
instantiated configuration associated complete configuration psdf graph obtained applying configuration unspecified parameters configuration assignment values parameters nonempty parameter set denoted pn vn domain pi empty parameter set empty configuration 
configuration configuration parameters params psdf graph configuration configuration parameters params psdf specification control hierarchy hierarchy represented psdf hierarchical actor represents psdf specification 
de number delay tokens psdf edge equivalent corresponding complete configuration parameters bhattacharya parameterized modeling scheduling dataflow graphs 
page 
dataflow consistency part requirement local synchrony psdf graph possible instantiated sdf graph valid schedule 
default default value parameter default domain domain domain parameter set params psdf actor domain subset domain comprising complete configurations psdf actor domain domain parameter set psdf graph defined params domain subset domain comprising complete configurations psdf graph domain set compatible valid configurations nonempty parameter set context 
empty parameter set empty domain 
domain subset domain parameter set consists configurations valid complete 
domain domain parameter set params psdf edge domain subset domain comprising complete configurations psdf edge domain finite nonempty set denoting domain parameter provides enumeration values take 
domain domain parameter set psdf specification defined joint domain params domain subset domain comprising complete configurations psdf specification subset parameters params psdf graph comprising unspecified edge parameters subset parameters params psdf specification bhattacharya parameterized modeling scheduling dataflow graphs 
page 
comprising unspecified edge parameters external subsystem parameter subsystem parameters control behavior subsystem way visible externally parent graph subsystem 
parameters configured associated init graph actors parent graph subsystem 
external dataflow parameter parameter associated psdf object actor subsystem affects dataflow behavior object number tokens produced consumed actor ports subsystem interface ports 
external parameter parameter associated psdf object actor subsystem affect dataflow behavior object number tokens produced consumed actor ports subsystem interface ports 
parameter interpretation function psdf actor implements internally connected input ports psdf graph comprising set input ports actors belong edges originate 
vg set actor input ports psdf graph vg immediate parameter subsystem subsystem parameter 
set input ports psdf actor inherently locally non synchronous see local synchrony local synchrony inherently locally synchronous see local synchrony local synchrony inherited parameter subsystem subsystem inherits immediate inherited parameters parent subsystem parent graph inherited parameters 
inherited parameters subsystem comprise immediate parameters ancestor subsystems 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
init condition part requirement local synchrony psdf specification init graph inherently locally synchronous produces exactly token output port invocation possible configuration init graph 
init graph init configured parameter subsystem parameter configured associated init graph 
phase part parameterized looped schedule graph consists successive invocations parameterized looped schedules init graphs child subsystems mechanism configuring parameters psdf specification params init subinit graphs hierarchically higher level subsystems 
distinct dataflow 
parameters params inputs interface inputs psdf graph comprising set input ports actors belong edges terminate 
inputs interface inputs psdf specification comprising dataflow inputs go embedded psdf graph 
body inputs psdf specification comprising set dataflow inputs appear dataflow inputs parameter inputs psdf specification comprising set dataflow inputs bound parameters subinit inputs psdf specification comprising set dataflow inputs appear dataflow inputs pure sdf actor obtained complete configuration psdf actor instance associated complete configuration denotes sdf graph emerges applying complete con bhattacharya parameterized modeling scheduling dataflow graphs 
page 
figuration domain unspecified actor edge parameters psdf graph internal subsystem parameter subsystem parameters controls internal behavior subsystem visible externally parent graph subsystem 
configured associated subinit graph 
internally connected input ports internally connected output ports invariant parameter set function domain range set subset invariant function depend member iteration count joint domain family disjoint parameter sets pm defined union valid configurations parameter set 
local synchrony psdf graph inherently locally synchronous domain instantiated sdf graph properties valid schedule dataflow consistent deadlock free satisfies upper bounds provided max token transfer function actor port max delay value edge child subsystem locally synchronous 
domain satisfies properties inherently locally non synchronous 
partially locally synchronous 
local synchrony psdf specification inherently locally synchronous simply locally synchronous inherently locally synchronous domain produces token output port invocation domain produces token output port invocation token transfer interface input ports invariant parameters bound dataflow inputs token transfer interface ports invariant parameters bhattacharya parameterized modeling scheduling dataflow graphs 
page 
configured graphs locally non synchronous init subinit graphs produce token output port valid configuration respective graph parameters inherently locally simply locally non synchronous 
partially locally synchronous 
iteration count parameterized schedule loop psdf graph denoting number repetitions invocation sequence associated general symbolic expression consisting constants compiler generated variables subsystem parameters 
max token transfer function see max delay value see non init configured parameter subsystem parameter configured associated init graph 
set non init configured parameters comprise internal subsystem parameters parent configured subsystem parameters 
internally connected output ports psdf graph comprising set output ports actors belong edges terminate 
vg set actor output ports psdf graph vg set output ports psdf actor outputs interface outputs psdf graph comprising set output ports actors belong edges originate 
outputs interface outputs psdf specification comprising dataflow outputs go embedded psdf graph 
outputs simply outputs associated body graph apgan clustering technique quasi static scheduling acyclic psdf graphs called parameterized apgan acyclic pairwise bhattacharya parameterized modeling scheduling dataflow graphs 
page 
grouping adjacent nodes 
apgan candidate adjacent actors psdf graph clustering apgan introduce cycle graph 
psdf actor psdf actor set input output ports parameter set 
psdf edge psdf edge parameter set connecting psdf actor output port psdf actor input port 
psdf graph bipartite directed graph represented ordered pair vg vg set psdf actors set psdf edges connect subset actor output ports subset set input ports 
psdf hierarchical actor psdf actor represents psdf specification psdf specification psdf specification subsystem composed psdf graphs init graph subinit graph body graph 
psdf subsystem psdf specification 
pe number tokens produced psdf edge equivalent token production function actor source port belongs corresponding complete configuration parameters parameter inputs parameter set finite set objects pn pi called parameter parameterized looped schedule sg schedule psdf graph consisting parts phase preamble body bhattacharya parameterized modeling scheduling dataflow graphs 
page 
parameterized schedule loop psdf graph represents successive repetition invocation sequence ti leaf actor hierarchical actor parameterized schedule loop 
params parameter set psdf actor params parameter set psdf graph comprises unspecified actor parameters edge parameters params parameter set psdf edge params parameter set psdf specification called specification parameters comprises parameters parameters set init subinit graphs hierarchically higher level subsystems 
set unspecified parameters psdf actor psdf graph obtained set ap nonempty parameter set defined empty 
set unspecified parameters psdf edge psdf graph obtained set ep nonempty parameter set defined empty 
params parameters comprising parameters bound interface output port dataflow input parent graph psdf graph hierarchical actor belongs subsystem parent specification psdf specification psdf graph associated init graph subinit graph body graph 
parent subsystem parent specification parent configured parameter bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem parameter configured actor parent graph subsystem 
partially locally synchronous see local synchrony local synchrony preamble preamble second part parameterized looped schedule graph called preamble consists code configures iteration count schedule loop defining proper order compiler generated variable symbolic expression iteration count includes conditionals checking sample rate consistency bounded memory consistency graph additionally init graph includes conditionals checking init condition local synchrony parent specification similarly subinit graph includes conditionals checking subinit output condition local synchrony parent specification 
projection nonempty parameter set configuration nonempty subset parameters projection obtained discarding elements containing parameters belong projecting configuration empty nonempty empty configuration produces empty configuration 
parameterized repetitions vector associated instantiated sdf graph complete configuration domain psdf graph quasi static schedule schedule computed compile time contains code performing data dependent computations run time 
refinement nonempty parameter set nonempty subset parameters configuration domain configuration domain refinement respect obtained augmenting configuration assigning value parameters unspecified specified refining configuration empty nonempty respect empty configuration maintains original configuration 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
semantic hierarchy control hierarchy 
simple cyclic graph cyclic psdf graph fundamental directed cycle single delay element known value fundamental cycle statically known single rate system edge fundamental cycle configured single rate system 
simplified psdf graph directed multigraph vg associated psdf graph vg actor src actor snk words edges interpreted connect actors connecting actor ports 
snk psdf actor input port psdf edge terminates 
overloaded simplified psdf graph indicate actor psdf edge terminates 
src psdf actor output port psdf edge originates 
overloaded simplified psdf graph indicate actor psdf edge originates 
subinit graph subinit input condition part requirement local synchrony psdf specification subinit graph inherently locally synchronous token transfer interface input ports subinit graph invariant subinit graph parameters set init graph 
subinit inputs subinit output condition part requirement local synchrony psdf specification subinit graph inherently locally synchronous produces exactly token output port invocation possible configuration subinit graph parameters 
subinit configured parameter internal subsystem parameter 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
subsystem parameter parameters psdf specification subsystem directly derived application modeling application psdf 
actor edge parameters psdf graph configured subsystem parameters 
subsystem psdf subsystem specification associated psdf hierarchical actor syntactic hierarchy hierarchy represented psdf actor subblock internals actor represented psdf graph 
hierarchy flattened subblock replaced graph represents 
set interface output ports set parameters associated body graph set interface output ports set parameters associated subinit graph unit transfer consistency input condition subinit output condition local synchrony psdf specification block code verify body condition local synchrony psdf specification appears part parameterized schedule loop parent graph block code verify subinit input condition local synchrony psdf specification appears part parameterized schedule loop parent graph delay re initialization period function specifies re initialization period delay token complete valid configuration parameter set psdf edge delay function gives number delay tokens psdf edge complete valid configuration port consumption function psdf actor defined domain bhattacharya parameterized modeling scheduling dataflow graphs 
page 
fs ps tb ts max delay value psdf edge specifying upper bound dynamically varying delay tokens max token transfer function psdf actor specifies upper bound maximum number tokens transferred produced consumed port delay initial value function psdf edge gives initial value associated delay token complete valid configuration parameters body graph psdf specification function maps output port subinit graph parameter associated body graph init graph psdf specification function maps member parameter subinit graph psdf specification function maps member parameter function maps member parameter port production function psdf actor defined domain bhattacharya parameterized modeling scheduling dataflow graphs 
page 
ade data memory minimization synchronous data flow graphs emulated dsp fpga targets proceedings design automation conference june 
allen kennedy automatic transformations fortran programs vector form acm transactions programming languages systems vol 
october 
banerjee chau macro pipelining scheduling high performance heterogeneous multiprocessor systems ieee transactions signal processing vol 
june 
bhattacharyya buck ha lee generating compact code dataflow specifications multirate signal processing algorithms ieee transactions circuits systems fundamental theory applications march 
bhattacharyya lee looped schedules dataflow descriptions multirate signal processing algorithms journal formal methods system design december 
bhattacharyya lee memory management dataflow programming multirate signal processing algorithms ieee transactions signal processing vol 
may 
bhattacharyya leupers marwedel software synthesis code generation signal processing systems tech 
report umiacs tr institute advanced computer studies university maryland college park september 
bhattacharyya murthy lee software synthesis dataflow graphs kluwer academic publishers 
bhattacharyya sriram lee optimizing synchronization multiprocessor dsp systems ieee transactions signal processing vol 
june 
buck scheduling dynamic dataflow graphs bounded memory token flow model tech 
report ucb erl ph thesis university california berkeley september 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
buck static scheduling code generation dynamic dataflow graphs integer valued control streams th asilomar conference signals systems computers november 
buck ha lee messerschmitt ptolemy framework simulating prototyping heterogeneous systems international journal computer simulation vol 
april 
chao sha unfolding retiming data flow dsp programs risc multiprocessor scheduling proceedings international conference acoustics speech signal processing april 
clark mitra parker block implementation adaptive digital filters ieee transactions circuits syst vol 
cas 
engels cyclo static dataflow ieee transactions signal processing vol 
february 
freund israel rousseau berge codesign experiment acoustic echo cancellation acm transactions design automation electronic systems vol 
october 
gao panangaden behaved programs dsp computation proceedings international conference acoustics speech signal processing march 
girault lee lee hierarchical finite state machines multiple concurrency models october revised memorandum ucb erl electronics research laboratory uc berkeley august 
harel statecharts visual formalism complex systems sci 
comput 
program vol 

hayes statistical digital signal processing modeling john wiley sons 
haykin adaptive filter theory rd edition prentice hall information system sciences series 
rabaey compiler multiprocessor dsp implementation proceedings international conference acoustics speech signal processing march 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
lee consistency dataflow graphs ieee transactions parallel distributed systems vol 
april 
lee representing exploiting data parallelism multidimensional dataflow diagrams proceedings international conference acoustics speech signal processing april 
lee static scheduling data flow programs dsp advanced topics data flow computing ed 
bic prentice hall cliffs nj 
lee messerschmitt static scheduling synchronous dataflow programs digital signal processing ieee transactions computers vol 
february 
mehlhorn uhrig leda user manual version www mpi sb mpg de leda 
ritz meyr dynamic data flow control flow high level dsp code synthesis proceedings international conference acoustics speech signal processing april 
messerschmitt static rate optimal scheduling iterative data flow programs optimum unfolding ieee transactions computers vol 
february 
pino bhattacharyya lee hierarchical multiprocessor scheduling system dsp applications proceedings ieee asilomar conference signals systems computers november 
frequency domain multirate adaptive filtering ieee signal processing magazine vol 
january 
sung kim ha memory efficient synthesis dataflow graphs proceedings international symposium systems synthesis 
ritz meyr optimum vectorization scalable synchronous dataflow graphs proceedings international conference application specific array processors october 
multirate systems filter banks prentice hall signal processing series 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
engels cyclo dynamic dataflow th euromicro workshop parallel distributed processing january 
zitzler teich bhattacharyya evolutionary algorithms synthesis embedded software appear ieee transactions large scale integration vlsi systems 
bhattacharya parameterized modeling scheduling dataflow graphs 
page 
