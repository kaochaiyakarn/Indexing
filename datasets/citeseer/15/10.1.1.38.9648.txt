new framework debugging globally optimized code le chun wu rajiv patil bruce olsen wen mei hwu coordinated science laboratory university illinois urbana il crhc uiuc edu application delivery laboratory hewlett packard cupertino ca cup hp com patil compaq com bruce olsen hp om om hp com increasing number executable binaries generated optimizing compilers today providing clear correct source level debugger programmers debug optimized code necessity 
new framework debugging globally optimized code proposed 
framework consists new code location mapping scheme data location tracking scheme forward recovery model 
control early emulating instructions selectively debugger preserve gather required program state recovery expected variable values source breakpoints 
framework prototyped impact compiler gdb 
preliminary experiments conducted spec integer programs yielded encouraging results 
extra time needed debugger calculate limits emulated region emulate instructions hardly noticeable increase executable file size due extra debug information average executable file debug information 
today high performance computer systems compilers playing increasingly important role optimizing programs fully utilize advanced architecture features 
increasing number executable binaries highly optimized necessity provide clear correct source level debugger programmers debug optimized code 
debugging optimized code difficult 
primary aspects associated code optimization author currently compaq computer ma 
appear acm sigplan conference programming language design implementation atlanta georgia may 
debugging difficult 
complicates mapping source code object code due code duplication elimination reordering 
problem called code location problem 
second reporting values source variables inconsistent user expects simply impossible 
code reordering deletion assignments user variables take place earlier expected 
register allocation algorithms reuse registers memory locations may variable values non existent 
problem referred data value problem 
general ways optimized code debugger meaningful information debugged program 
provides expected behavior program hides optimization user presents program behavior consistent user expects unoptimized code 
provides truthful behavior user aware effects optimizations warns surprising outcomes expected answers debugging queries provided :10.1.1.30.270
possible recover program behavior user expects constraining optimization performed inserting instrumentation code desirable user see expected program behavior possible 
focus new debugging framework designed recover expected behavior possible addresses code location data value problems 
framework deals programs globally optimized techniques involving code duplication deletion instruction level reordering 
debugging framework breakpoint source statement debugger suspends execution executing instructions expected happen object code location debugger suspends normal execution referred interception point 
moves forward instruction stream emulating instructions executed process called forward recovery 
debugger reaches farthest extent instructions referred finish point begins answer user inquiries source consistent program state produced forward recovery 
breakpoint add ld ld ld mul mov example program style source code optimized assembly code basic idea approach illustrated example 
user sets breakpoint source line instruction originates source line debugger suspends execution 
debugger keeps moving forward skipping emulates instruction originates source line executed breakpoint 
debugger hands control user starts user requests 
basic idea new debugging scheme appears straightforward straight line code challenging issues scheme address dealing globally optimized code 
example shown illustrate global optimization complicates problem 
shows control flow graph unoptimized program instruction statement 
shows optimized version program instruction moved loop instruction hoisted basic block merged sunk basic block basic block empty removed 
suppose source breakpoint set statement user 
problems need addressed scheme include 
calculate possible interception points finish points 
code reordered globally instructions executed source breakpoint hoisted breakpoint different paths leading breakpoint 
example instruction instructions executed breakpoint hoisted 
see iteration loop debugger suspend execution rest loop iterations debugger suspend execution interception points 
similarly executed breakpoint sunk basic block debugger needs able identify continue forward recovery executed 
necessary devise set systematic algorithms calculate possible interception points finish points 

debugger confirm source breakpoint 
preserve required program state debugger suspend execution early interception point 
reaching interception point source breakpoint necessarily mean breakpoint reported user 
consider 
control instruction interception point debugger report breakpoint basic block reached 
continue normal execution reporting breakpoint 
bgt bgt breakpoint control flow graph example original program code hoisting tail merging case basic block removed optimization 
see single object location debugger decide statement reached 
set object locations possibly branch conditions need incorporated mapping scheme help confirmation breakpoint 
new code location mapping scheme addresses problem described section 
ensure correct execution forward recovery scheme instructions emulated selectively forward recovery 
optimizations register reuse safe naively reorder instructions debug time 
novel forward recovery model ensures correct execution proposed section 
locations user variables run time 
run time locations user variables may altered optimization 
variable value may different places constant register memory different points execution 
may exist 
allow user access value variable breakpoints debugger know obtain value variable 
new data location tracking scheme addresses issue described section 
remainder organized follows discussing abovementioned techniques section section provides experimental results evaluations prototype 
section discusses relevant previous works compares approach 
section contains discussion current limitations approach 
code location mapping source object mapping scheme conventional debuggers source statement mapped single object location approach maps statement set object locations classified categories different functionalities anchor points interception points finish points escape points 
anchor point information base deriving interception finish escape points needs constructed maintained compiler 
interception points finish points escape points derived anchor point information debug time 
discuss object locations subsections 
anchor points order debugger able correctly confirm source breakpoint globally optimized code associate source statement anchor point information 
anchor point source statement object code location instruction 
anchor point comes boolean condition referred anchoring condition 
anchor point source statement reached execution anchoring condition true breakpoint set source statement reported 
anchor point information source statement constructed maintained compiler 
optimization performed anchor point source statement set instruction anchoring condition set boolean value true 
process code optimization code duplication optimization loop unrolling function inlining loop peeling performed anchor point statement contained duplicated code anchor point information duplicated 
instruction anchor point statement deleted moved away original place compiler modify anchor point information algorithm shown 
step immediate succeeding instruction basic block replaces anchor point anchoring condition boolean value 
step immediate preceding instruction basic block replaces anchor point anchoring condition boolean value 
step immediate preceding instructions jk jointly replace anchor points conditional branch instruction condition branch anchoring condition 
anchoring condition boolean value 
note algorithm assumption conditional branches removed assuming predicated code 
instruction removed conditional branch anchoring condition 
condition branch constant method allows branch treated unconditional jump allows removed 
proof anchor point information maintained algorithm correct debugger unambiguously decide source breakpoint take effect appendix basic block removed due optimization 
algorithm instruction new anchor point anchoring condition 
interception points finish points user sets breakpoint debugger needs identify interception points finish points corresponding source breakpoint knows normal execution suspended forward recovery 
calculate interception points finish points information source ordering instructions constructed preserved compilation 
source line number sequence number reflects dynamic execution flow included source ordering information attached instruction 
sequence numbers assigned basic blocks original program basic block smaller sequence number basic block path involves back edge 
compiler computes sequence numbers duplicating nodes flow graph reducible removing back edges topologically sorting resulting acyclic graph 
note sequence number assignment unique relative execution order basic blocks execution control reach traversing back edges 
regard breakpoint source statement instructions function divided groups source ordering information instructions instructions source execution order smaller post breakpoint instructions instructions source execution order equal larger interception points breakpoint set assuming instruction anchor point calculated ffl path function entry point traversing back edges ffl path starting loop header traversing back edges loop resides 
path mentioned post breakpoint instruction encountered interception point referring back assuming anchor point paths leading debugger needs consider path path 

assuming earliest instruction interception point 
assuming earliest post breakpoint instruction interception point 
algorithm backward data flow analysis systematically calculate interception points regard anchor point 
control flow graph function suppose anchor point statement basic block function entry block find interception points regard need split basic blocks 
top portion including instructions instruction instructions reach reached traversing back edges may classified post breakpoint source ordering information 
instructions irrelevant long moved place reach reached optimization 
values variables affected denoted unavailable avoid providing misleading information 
definitions loop header back edge ref 


contains bottom portion including instructions immediately 

predecessors predecessors 

successors successors 

edge directly 
set basic blocks reach traversing back edges graph including 
basic block graph define gen kill follows ffl gen element set containing instruction basic block 
empty set 
kill ae gen oe oe ffl gen kill oe data flow equations sets successor gen gamma kill standard iterative algorithms solving data flow equations find basic block union set interception points regard finish points calculated similar fashion 
path anchor point statement function exit point traversing back edges pre breakpoint instruction finish point dataflow algorithm similar shown calculate finish points regard anchor point 
escape points conceptually debugger confirms source breakpoint anchor point breakpoint reached forward recovery anchoring condition true 
debugger sure anchor point statement going encountered scan forward binary way function 
order allow debugger resume normal native execution soon possible breakpoint take effect set object locations referred escape points derived anchor point information proposed 
escape point source breakpoint object location reached forward recovery corresponding breakpoint allowed take effect normal execution resumed 
breakpoint set source statement sets escape points corresponding 
set includes instructions reached interception point lead anchor point traversing back edges 
escape points set calculated way obtained simple backward depth search step simple backward depth search find basic blocks reach anchor points traversing back edges 
set containing basic blocks step 
step simple forward depth search find basic blocks reached interception points set containing basic blocks step 
step set contain basic blocks reached interception points lead anchor points traversing back edges 
step basic block contain anchor point instruction immediate successor set escape point second set escape points includes anchor points anchoring conditions boolean constant 
anchor point reached anchoring condition false lead anchor point traversing back edges anchor point escape point 
selective emulation change history section outline basic approach forward recovery 
assume debugger user set breakpoint source statement debugger calculates interception finish points definition program execution reaches interception point know normally happen happened 
debugger sets binary level breakpoints interception points starts program execution 
binary breakpoint hit debugger scans forward binary looking instructions correspond statements preceding emulates instructions 
reaches finish point stops uses combination state emulated state answer user queries variable values 
source level breakpoint considered hit control flows emulation phase anchor point anchoring condition true 
expression anchoring condition evaluated combination state emulated state 
control flows escape point debugger report breakpoint 
user continues breakpoint debugger report breakpoint debugger second pass emulated region selectively emulating instructions skipped pass 
writes emulated state resumes native mode 
general safe emulate pre breakpoint instructions post breakpoint instructions optimizer respect data dependencies source program reordering instructions 
machine resources shared different source level variables naive reordering fails 
example register allocation done instruction scheduling false dependencies may introduced binary 
consider transformation gamma 
mapped register 
breakpoint set source line emulate 
point emulate continue breakpoint value second instruction value overwritten 
accomplish represent emulated state history changes 
simply list change records emulated instruction 
change record stores modified values registers memory 
note change records constructed emulation start building change records forward recovery begins thrown away forward recovery complete 
instructions emulated order list ordered binary ordering emulated instructions 
emulating instruction find position binary order preceding change records construct machine state needed emulation 
change record instruction inserted appropriate place list 
effectively roll back state needed emulating instructions order 
consider example 
emulate create change record recording new value 
emulate create change record value 
emulating change record find value instruction precedes instruction binary order 
forward recovery scheme complicated presence function calls emulated region 
emulating instructions typically orders magnitude slower executing hardware strong performance incentive native execution function calls 
may possible emulate certain function calls example system calls 
seeing function call emulated region write emulated state recorded change history address space 
skipped instructions belong post breakpoint statements function call depend 
program state seen function call include effects pre breakpoint instructions precede binary order 
updating space prematurely middle forward recovery hurts ability roll back state needed handle register reuse 
update address space values change history original values registers need saved buffer 
updating address space save copy registers private buffer buffer 
note buffer holds values registers just function call buffer holds original values registers interception point 
resume function call execute standard operating system support regain control return point 
compare registers saved registers buffer construct change record modified registers 
need restore state back status right interception point register values saved buffer 
emulation process resumed 
absence precise side effect analysis possible add change records memory locations modified call 
assume memory locations reused different variables visible scope different points program 
change history mechanism described section addresses problem register reuse absence change records memory modified native calls affect correctness 
subsequent instructions see memory changes due function call directly state 
loop bodies lie entirely emulated region candidates native execution 
instructions moved loop instructions loop executed mechanism similar described function calls 
instructions belonging post breakpoint statements may moved inside loop example fill empty slots vliw machine 
instructions skipped 
possible solution replace instructions nop prior native execution 
works long operands instruction reach loop exit points available need emulate instruction 
data flow analysis indicates operands instruction reach loop exit points replace instruction breakpoint save values operands overwritten 
large performance penalty preferable emulating entire loop 
source complication arises post breakpoint branches emulated region 
instructions pre breakpoint statement may moved branch belonging post breakpoint statement 
example consider transformation gamma 
flag flag doa doa dob dob assume user sets breakpoint source line 
decide emulate instructions side branch side compute flag 
computation flag post breakpoint operation 
necessarily true instructions moved sides branch identical particular different instructions may go dead side branch 
entire sequence instructions may specialized compiler knowledge control flowing particular side branch means branch predicate particular value 
absence native execution handling cases straightforward simply emulate instructions affect outcome branch order determine control flow throw away emulated state 
second pass emulates instructions precede breakpoint source order control flow information pass decide way go branch 
won emulate instructions went dead chosen branch different instructions go dead straight line code 
native execution complicates problem lack accurate change histories natively executed region means effects instruction emulated find outcome branch thrown away 
illustrate consider previous example assume flag computed function call 
decide side branch taken execute 
way knowing memory locations modified call longer roll back state second pass 
particular value may modified call user see non current value breakpoint 
possible solution problem independently emulate instructions sides branch results get final state 
organize change history tree linear list 
different paths change history correspond different binary execution paths executable 
enables maintain histories paths time 
reach interception point start emulating instructions initially linear change history 
reach branch point supposed emulate fork change history emulate instructions side branch 
done side branch go back branch point emulate instructions side branch change history fork 
done change history tree report state 
variable values reported variable live branches 
course native function calls sides branch executed 
change records function calls shared branches change history tree duplicated 
data location tracking scheme run time location user variable may vary different points optimized program 
allow user access value variable debugger know location holds value variable breakpoint 
coutant proposed data structure called range communicate debugger location information variables different ranges binary program 
variable set range records consists address range storage location register memory constant 
comparing address object code location range record debugger decide get variable value object code location 
address range records variable value available point 
range information calculated live ranges variables 
adl tabatabai proposed data flow algorithm extend range value location point value killed 
data location information generated aforementioned techniques provides foundation debugger determine variable value place insufficient debugger attempts recover expected variable values breakpoints framework illustrated 
shows original code sample program 
shows optimized code instruction definition variable moved deleted 
range records constructed variable previous approach depicted 
suppose breakpoint set statement anchor point 
user requests value breakpoint debugger scheme address anchor point compare range records range records shown debugger think value register fact value breakpoint come definition register order provide expected behavior 
range information desire order provide expected value depicted range extended cover instruction 
solve problem mentioned provide data location information fitting new debugging framework new data location tracking scheme extended previous techniques proposed 
user variable scheme keeps track effective definition point source assignment effective definition point source assignment object code location source assignment take effect semantics original program 
optimization performed effective definition point source assignment variable instruction originates moves source value storage location 
moved deleted anchor point source assignment effective definition point example unoptimized program shown effective definition point second source assignment instruction 
moved shown assuming instruction anchor point source assignment new effective definition point 
scheme effective definition point actual definition point starting point range record assignment variable 
previous example range record ended effective definition point second assignment starts new range record shown 
resulting range records provide accurate information data locations debugging framework 
data location tracking scheme provides systematic approach recover expected values variables assignments deleted 
time assignment variable removed value assigned variable place recovered expression 
refer back optimized code shown 
instruction definition variable deleted see value assigned recovered expression 
exploit fact extended location information variable expression referred location expression constant register number memory address arithmetic expression 
definition variable removed compiler track recover value variable create new location expression exists expression 
previous example deleted new location expression deleted assignment 
note deleted optimization process applied recursively long operands location expression available effective definition point deleted assignment 
code movement optimizations partial dead code elimination treated code deletion 
def def def def def 
def def def def def original code optimized code range records variable previous technique range records desired scheme scheme avoid providing misleading information 
detailed discussion maintain effective definition points location expressions variables optimization data flow algorithm calculate range information technical report ref 

evaluations traditional debug information extra information compilers need emit debugging framework includes source ordering instructions anchor point information range table records run time locations variables 
compiler support preserving maintaining required debug information implemented impact compiler 
table summaries experimental results increase executable file size due extra debug information 
evaluations conducted hp pa risc workstations running hp ux 
compiled integer programs spec benchmark suite optimization option turned 
optimizations performed compiler include instruction scheduling register allocation classical local global optimizations induction variable optimizations strength reduction common subexpression elimination constant folding copy propagation loop invariant code motion store copy optimizations 
size debug information may vary different sets optimizations performed results table give feel large extra information 
row table shows executable file size optimized spec programs debug information 
row shows increase executable file size byte percentage source ordering information 
row row show evaluation anchor point information range table 
average increases executable file size source ordering information anchor point information range table respectively 
debug information including traditional extra information expect executable file program twice large debug information believe acceptable 
noticed compared programs compress relatively small percentage executable file size increase debug information 
examining executable files code sections occupy size executable file contains big data section compress programs code sections occupy size executable files shown bottom row table 
easily understood percentage file size increase due debug information small code sections occupy small portion executable file 
interesting know cost incurred setting reporting source level breakpoints new debugging framework 
answer questions conducted experiments statically dynamically 
table summarizes results static measurements 
static results obtained analyzing optimized code collecting data possible source breakpoint source line contains source statement benchmark programs 
rows table show average numbers anchor points interception points finish points escape points source breakpoint 
framework hitting interception point run time starts forward recovery 
forward recovery instructions emulated instructions skipped 
row table shows total number instructions scanned skipped emulated forward recovery row shows number instructions emulated 
numbers obtained statically looking possible paths interception point source breakpoint finish point escape point 
worst cases hundreds instructions need scanned forward recovery average instructions need scanned half need emulated 
note code moved source breakpoint interception point finish point coincide anchor point instruction scanned emulated forward recovery 
prototyped emulation forward recovery scheme gdb 
dynamic measurements conducted modified gdb automated testing framework called 
results summarized table 
choosing source locations setting breakpoints automated testing challenge 
profiled test programs prof picked test source locations list frequently executed functions 
wrote testing scripts set source level breakpoints gdb modified break command row table interior function selected 
gdb run command run test programs ultra lite inputs collect preliminary run time statistics 
row table shows number interception points encountered run time 
row shows total number instructions scanned row shows number instructions emulated 
case ijpeg instructions path goes loop counted number instructions loop body 
dynamic number instructions emulated scanned debug time larger loop lies forward recovery region native executed 
program compress ijpeg li ksim perl vortex executable file size byte debug info source ordering size byte information percentage anchor point size byte information percentage range size byte information percentage code sections size byte executable file percentage table size debug information optimized spec programs 
program compress ijpeg li ksim perl vortex average 
anchor points source breakpoint average 
interception points source breakpoint average 
finish points source breakpoint average 
escape points source breakpoint instructions scanned average skipped emulated max forward recovery min instructions emulated average forward recovery max min table results static analysis optimized spec programs 
encountered pre breakpoint skipped 
forward recovery may lead escape point normal execution resumes may lead finish point leading source level breakpoint report row table 
noticed case perl interception point encountered run time corresponding anchor point hit resulting reporting source level breakpoint 
time set breakpoint scheme tens milliseconds required gdb regular breakpoint 
extra time hardly noticeable human user 
number instructions emulated forward recovery dynamic measurements 
emulation time consuming add overhead noticeable interactive debugging situation 
related solve code location mapping problem debugging optimized code different source object mapping schemes proposed semantic breakpoints syntactic breakpoints statement labels 
mapping schemes maps source breakpoint different place object code preserve different kind source code properties 
debuggers adopt mapping schemes usually problems reporting expected variable values map source breakpoint single object location program state single point available 
zellweger concentrated code location problem 
proposed implemented method handle programs optimized function inlining cross jumping 
method correctly map source breakpoint object code location corresponding breakpoint determine report breakpoint merged area inserting hidden breakpoints program 
generalize optimizations code location mapping scheme handle optimizations involving code duplication deletion reordering general 
thesis adl tabatabai proposed branch conditions help debugger confirm source breakpoint single object location debugger map breakpoint 
idea similar anchoring condition scheme 
provide depth discussion topic provide algorithms keep track required branch conditions compilation 
hennessy adl tabatabai proposed techniques recover expected values variables 
approaches similar concept 
recover value variable reconstructing interpreting original assignment variable 
expected value variable recovered successfully long source operands assignment available object breakpoint 
approaches traditional source object mapping scheme debug program compress ijpeg li ksim perl vortex 
breakpoints set 
interception points encountered instructions scanned average skipped emulated max forward recovery min instructions emulated average forward recovery max min breakpoints reported average forward recovery max min table results setting modified gdb breakpoints optimized spec programs 
ger suspend execution early preserve values original source operands 
adl tabatabai address recovery variable values globally optimized code hennessy briefly mentioned extensions support limited set global optimizations 
mentioned section scheme data location tracking extension done coutant adl tabatabai 
works provided early implementation experience valuable 
research works different strategies provide expected program behavior 
gupta proposed approach debug trace scheduled code 
user specify monitoring commands compilation 
commands compiled program debugger report monitored information user 
major problem invasive approach adding extra code debugged program change program behavior consequently introduce new bugs 
holzle chambers ungar proposed approach working interactive programming environment 
dynamically code demand debugger provide full expected behavior 
deoptimization scheme user debugging unoptimized code scheme optimized code debugged 
current limitations scheme debugging globally optimized code 
control user program sufficiently early selectively emulating just instructions effects happen user breakpoint source consistent program state user queries produced 
enables recover expected behavior program presence optimization 
require extensions typical debug information emitted compilers support scheme source ordering instructions anchor point information data location information 
approach described currently number limitations 
notably depend fact anticipate breakpoints take control early perform debug time instruction reordering 
debugger functions signals general anticipated 
dealing unanticipated stops major area 
certain user optimizer errors may masked reordering scheme propose 
example consider code snippet int gamma 
assume assigned contiguous memory locations 
case aliases memory location 
user writing outside array bounds language implementations consider transformation shown valid 
user sets breakpoint source line skip assignment forward recovery phase 
means get value gets value binary program 
outlined scheme incapable handling loop transformations mix instructions different iterations original loop iteration new loop example modulo scheduled loops 
handle need generalization approach deals dynamic instances instructions static instances considered 
believe approach suitable optimizations reorder loop iteration spaces 
example consider loop reversed compiler source iteration binary iteration vice versa 
handle set breakpoint start loop interception point emulate entire loop skipping instructions belong iteration 
believe kind optimization better handled presenting transformed source user 
area debug time live range extension 
current approach variable goes dead reach interception point way recover known value 
way overcome problem place hidden breakpoint location just variable goes dead debugger save value 
doing variable goes dead expensive 
prototype debugger currently allow user change values variables debug time 
general possible optimizer transforms code inferences values variables constant propagation loop invariant code motion relations values variables induction variable optimizations user prevented modifying variables way inferences violated 
figuring safe modify value variable updating compiler generated temporaries depend new value interesting area research 
spite abovementioned challenges framework proposed represents significant advancement debugging globally optimized code 
order validate concepts implemented concepts prototype compiler debugger 
addition initial experience prototype shows proposed scheme provides low cost practical approach debugging optimized code 
acknowledgments authors carol thompson bhaskar john gyllenhaal valuable comments suggestions 
research supported hewlett packard 
correctness proof algorithm maintaining anchor point information prove anchor point information maintained compiler algorithm shown section correct show debugger unambiguously decide source breakpoint take effect anchor point information 
introduce concept reaching condition 
definition reaching condition instruction rci boolean expression comprising program variables intermediate results condition true instruction reached function entry point 
note assume conditional branches removed optimization reaching condition instruction remains optimization long instruction moved deleted 
path lead instruction 
instruction reached specific path path branch condition path taken true 
single path reaching condition instruction specific path rci conjunction branch condition taken 
definition rci condition branch taken number branches instruction reached multiple paths operational definition reaching condition instruction rci disjunction reaching conditions 
definition rci rci ith path leading number different paths leading reaching condition instruction derived predecessors lemma shows lemma reaching condition instruction basic block rci expressed set immediate preceding instructions reaching condition instruction ji branch condition ji branch number immediate preceding instructions 
instructions basic block control reaches instruction definitely reach reached 
lemma instructions basic block reaching condition 
mentioned earlier source breakpoint reported anchor points reached corresponding anchoring condition true 
condition debugger report source breakpoint referred breakpoint confirmation condition 
definition breakpoint confirmation condition source statement set anchor points anchoring condition ii number anchor points 
optimization performed scheme map anchor point statement instruction say set anchoring condition 
assuming compiler correct true unoptimized code breakpoint set reported reached 
optimization performed breakpoint confirmation condition sufficient necessary condition breakpoint set reported 
prove breakpoint confirmation conditions algorithm section applied algorithm correct 
lemma instruction removed due optimization reaching condition rci equal jk instructions calculated algorithm section anchoring condition ji 
proof algorithm section applied step step true instruction returned anchoring condition 
assuming instruction returned basic block lemma rci rci rci step applied immediate preceding instructions jk returned branch condition branch anchoring condition lemma know rci branch condition ji branch rci theorem instruction anchor point source statement removed due optimization breakpoint confirmation conditions algorithm section applied 
proof assuming anchor points ii ik ii definition rci aci rc ik ac ik instruction ii removed algorithm applied assuming new anchor points jm calculated place ii definition rci aci acj rc ik ac ik lemma know assumption algorithm non conditional branch instructions removed know anchoring condition ii 
replacing equation zellweger interactive source level debugging optimized programs 
phd thesis electrical engineering computer sciences university california berkeley ca 
zellweger interactive high level debugger control flow optimized programs sigplan notices vol 
pp 
august 
gupta debugging code reorganized trace scheduling compiler structured programming vol 
pp 
july 
holzle chambers ungar debugging optimized code dynamic deoptimization proceedings acm sigplan conference programming language design implementation pp 
june 
hennessy symbolic debugging optimized code acm transactions programming languages systems vol 
pp 
july 
wall srivastava note hennessy symbolic debugging optimized code acm transactions programming languages systems vol 
pp 
january 
coutant doc practical approach source level debugging globally optimized code proceedings acm sigplan conference programming language design implementation pp 
june 
debugging optimized code misled 
phd thesis computer information sciences university california santa cruz ca 
debugging optimized code misled acm transactions programming languages systems vol 
pp 
may 
debugging globally optimized programs data flow analysis proceedings acm sigplan conference programming language design implementation pp 
june 
adl tabatabai gross evicted variables interaction global register allocation symbolic debugging conference record th annual acm symposium principles programming languages pp 
january 
adl tabatabai gross detection recovery endangered variables caused instruction scheduling proceedings acm sigplan conference programming language design implementation pp 
june 
adl tabatabai gross source level debugging scalar optimized code proceedings acm sigplan conference programming language design implementation pp 
may 
adl tabatabai source level debugging globally optimized code 
phd thesis school computer science carnegie mellon university pittsburgh pa 

wu hwu new data location tracking scheme recovery expected variable values tech 
rep impact ftp ftp crhc uiuc edu pub impact report impact 
ps impact university illinois urbana il september 
aho sethi ullman compilers principles techniques tools 
reading ma addison wesley 
chang mahlke chen warter hwu impact architectural framework multiple instruction issue processors proceedings th international symposium computer architecture pp 
may 
tice graham optview new approach examining optimized code proceedings workshop program analysis software tools engineering june 
