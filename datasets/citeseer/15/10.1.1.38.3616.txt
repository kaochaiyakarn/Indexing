conte udo relat de es 
contents report sole responsibility author 
high speed software multiplication julio opez ricardo relat ic maio de high speed software multiplication julio opez ricardo institute computing state university campinas campinas ao paulo brazil dcc unicamp br may describe ecient algorithm multiplication eld elements represented standard polynomial basis 
proposed algorithm practical software implementations elliptic curve cryptography 
timing results platforms show new method signi cantly faster shift add method 
key words 
multiplication polynomial basis elliptic curve cryptography 
ecient algorithms multiplication required implement cryptosystems die hellman elliptic curve cryptosystems de ned ecient implementation eld arithmetic depends greatly particular basis nite eld 
common choices bases normal polynomial 
normal bases suitable hardware implementations see 
describe technique multiplication nite eld eld elements represented binary polynomials modulo irreducible binary polynomial degree proposed method times faster standard multiplication particularly useful software implementation elliptic curve cryptosystems observation lim lee method comb method designed exponentiation modi ed remainder organized follows 
section describe nite eld polynomial basis description standard algorithm multiplication description simple version lee lim method versions proposed method described section 
section timing results di erent computational platforms 
institute computing state university campinas campinas sp brazil dept computer science university valle cali colombia 
institute computing state university campinas campinas sp brazil 
research partially supported 
high speed software multiplication nite eld polynomial basis representation section describe nite eld called characteristic nite eld binary nite eld terms polynomial basis representation 
irreducible polynomial degree polynomial called reduction polynomial 
polynomial basis speci ed reduction polynomial 
representation bit string taken represent polynomial am nite eld represented set polynomials degree gg eld arithmetic implemented polynomial arithmetic modulo 
representation addition multiplication performed follows addition mod 
multiplication 
polynomial remainder division polynomial 
ab mod eciency reasons reduction polynomial selected trinomial 
ansi speci es rules choosing reduction polynomial 
software implementations partition bit representation eld element blocks size 
word size computer typical values number words required pack words 
dm 
write sw bit number consisting words word length write length iw iw iw polynomials terms iw iw iw high speed software multiplication methods multiplication years algorithms software multiplication reported interested techniques prime 
various programming tricks discussed implementing shift add method basic algorithm multiplication slight variant method described de win 
ko word level montgomery multiplication algorithm proposed 
method signi cantly faster standard method multiplication words size representing polynomial performed cycles 
operation available general purpose processors alternative table lookup 
approach requires example kbytes gbytes making attractive practical applications 
known method multiplication karatsuba see example 
shift add method section describe basic method computing 
mod analogous binary method exponentiation square multiplication operations replaced shift multiplication eld element eld addition operations respectively 
shift add method processes bits polynomial left right uses equation perform ab mod 
am mod 
mod assume wi wi wi steps shift add method 
algorithm shift add method 
input output 
mod 
set 
downto downto set shift iw set 
return 
algorithm requires shift operations eld additions average number eld additions reduced selecting reduction polynomial standards include elliptic curves de ned recommend security reasons binary nite elds property prime 
high speed software multiplication trinomial 
observe algorithm multiplication step computation 
reduction step computation mod integrated 
proposed algorithm steps separated include algorithm performing reduction step 
assume degree polynomial algorithm modular reduction 
input output mod 
downto set iw set 
iw 
downto set 
set sw am 

downto set 
return algorithm works zeroing signi cant word iteration step 
chosen multiple reduction polynomial added lowers degree possible degree leading sw bits cancelled step obtaining polynomial degree number xor operations depend weight reduction polynomial 
example algorithm requires xor operations 

standard programming tricks separated name variables loop unrolled code improve performance algorithms 
see suggested programming optimizations 
proposed method section describe versions new algorithm multiplication rst version straightforward extension lim lee method require extra temporary memory 
second version window technique 
describe proposed algorithms discuss simple version lim lee method exponentiation terminology additive groups help understand extension high speed software multiplication order compute multiplication 
addition times integer element additive group number divided words size written wi binary representation iw iw iw binary representation group elements wi 
de ne vector precomputations equation 




multiplication 
wi 
computed 
iw wi 
aw detailed algorithm computing 
lim lee precomputation technique algorithm 
algorithm lim lee algorithm 
input wi iw iw output 
precomputation 
downto set set wi 
main computation 
set 
downto set set aw set 
return 
algorithm performs situations group element known advance calculation precomputation step line 
faster version algorithm precomputations discussed 
explain extension algorithm nite eld polynomials assume represented 
replacing 
obtain formal expression product high speed software multiplication iw wi easy verify formula correct 
algorithm analogue algorithm derived computing ab mod polynomial known advance 
observing operation wi virtually free consists arrangement words representing precomputation polynomials wi online 
eliminates need storing polynomials resulting algorithm faster algorithm xed polynomial 
details method algorithm 
algorithm basic proposed method 
input output ab mod 
set 
downto iw set xt shift 
set mod algorithm 
return 
idea window methods pp 
exponentiation extended algorithm obtain ecient algorithm provided extra temporary memory available 
example de ne precomputed vector equation product computed iw iw iw iw iw 
iw iw iw high speed software multiplication wi iw iw formula ab derived algorithm processes simultaneously bits word trades iteration multiplications multiplication method described algorithm 
algorithm fast proposed method 
input output ab 
set 

set 
downto set mod set 
set mod algorithm 
return 

known advance algorithm modi ed larger window size 
process bits time need eld elements precomputations 
observing reduce precomputation eld elements expense doing xor operations 
performance comparison compare performance algorithms 
calculate number xor operations shift operations required algorithm 
assume reduction polynomial total number xor operations required algorithm 
algorithm requires shift operations sm xor operations average 
similarly algorithm requires shift operations xor operations average 
time saved algorithm expense eld elements temporary memory 
table compared number operations required algorithms particular case 
assuming multiplying polynomial comparable speed multiplying polynomial high speed software multiplication algorithms xor shift algorithm algorithm algorithm table number operations algorithms 
timing results section presents running timings proposed algorithms shift add method platforms mhz pentium mmx mhz pentium ii mhz sun ultrasparc workstation mhz intel processor rim interactive pager 
implementation written entirely compilers gcc workstation sun pentium mmx microsoft visual version architectures 
algorithms implemented comparable level programming optimizations 
tables show timings perform multiplication algorithms 
table algorithm performs faster algorithm best speed obtained ultrasparc machine 
table performances fast version proposed algorithm algorithm standard method compared 
observed signi cant improvement algorithm times faster standard method 
pentium mhz ultrasparc mhz algorithm algorithm table timings microseconds shift add method algorithm multiplication applications important application software implementations elliptic curve cryptography timings di erent architectures shown algorithm signi cantly faster standard method modern workstations wireless devices rim pager hand held device intel processor running mhz 
nist recommended elliptic curves federal government 
high speed software multiplication rim pentium pentium ii ultrasparc mhz mhz mhz mhz algorithm algorithm table timings microseconds shift add method algorithm multiplication techniques speeding computation ab mod shown technique lim lee method exponentiations 
turns software implementation optimized version algorithm di erent platforms proved signi cantly faster shift method making useful software implementations elliptic curve cryptography di erent computational environments 
acknowledgments authors wish guido ara cl audio lucchesi alfred menezes daniel helpful comments suggestions 
mullin vanstone implementation elliptic curve cryptosystems ieee journal selected areas communications pp 

ansi elliptic curve digital signature algorithm ecdsa american bankers association 
www net blake smart elliptic curves cryptography cambridge university press 
ko montgomery multiplication gf designs codes cryptography pp 

lim lee exible exponentiation precomputation advances cryptography crypto pp 
springer verlag 
menezes van oorschot vanstone handbook applied cryptography crc press 
high speed software multiplication mullin vanstone wilson optimal normal bases gf discrete applied mathematics pp 

national institute standards technology digital signature standard fips publication february 
available csrc nist gov fips malley spatscheck fast key exchange elliptic curve systems university arizona tech 
report 
de win de vandewalle fast software implementation arithmetic operations gf advances cryptology proc 
asiacrypt lncs pp 
springer verlag 
