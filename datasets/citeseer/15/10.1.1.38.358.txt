verification futurebus cache coherence protocol edmund clarke orna grumberg jha david long kenneth mcmillan linda ness school computer science carnegie mellon university pittsburgh pa computer science department technion haifa israel currently visiting bell laboratories murray hill nj department information communication sciences kyoto university kyoto japan bellcore morristown nj hardware description language construct formal model cache coherence protocol described ieee futurebus standard 
applying temporal logic model checking techniques errors standard 
result project concise comprehensible unambiguous model protocol useful futurebus working group members responsible protocol actual designers futurebus boards 
keyword codes keywords computer industry standards futurebus multiple data stream architectures interconnection architectures network protocols protocol verification research sponsored part avionics laboratory wright research development center aeronautical systems division afsc air force wright patterson afb ohio contract arpa order part national science foundation 
ccr part semiconductor research contract dj part israeli binational science foundation part japan cooperative research japanese society promotion scientific research part japan cooperative research number int national science foundation 
views contained document authors interpreted representing official policies expressed implied government 

describes formalization verification cache coherence protocol described ieee futurebus standard ieee standard 
constructed precise model protocol hardware description language temporal logic model checking show model satisfied formal specification cache coherence 
process formalizing verifying protocol discovered number errors ambiguities 
believe time formal methods find nontrivial errors proposed ieee standard 
result project concise comprehensible unambiguous model cache coherence protocol useful futurebus working group members responsible protocol actual designers futurebus boards 
experience demonstrates hardware description languages model checking techniques help design real industrial standards 
futurebus bus architecture high performance computers 
goal committee developed futurebus create public standard bus protocols unconstrained characteristics particular processor device technology widely accepted implemented vendors 
cache coherence protocol futurebus designed insure consistency data hierarchical systems composed processors caches interconnected multiple bus segments 
protocols notoriously complex quite difficult debug 
futurebus fact bus standard include capability 
development cache coherence protocol began years ago best knowledge previous attempts validate protocol entirely informal techniques 
particular attempt specify entire protocol formally analyze automatic verification system 
formalizing verifying protocol smv temporal logic model checker binary decision diagrams bdds 
smv includes built hardware description language accepts specifications expressed temporal logic ctl 
tool extracts finite state model smv program uses exhaustive state space search algorithm determine model satisfies specifications 
model satisfy specification smv produce execution trace shows specification false 
smv represents transition relation model bdds 
representation possible handle examples state variables reachable states 
biggest part project textual description cache coherence protocol standard develop formal model protocol derive ctl specifications correctness 
model cache coherence protocol consists lines smv code counting comments 
model highly nondeterministic reduce complexity verification hiding details cover allowed design choices indicated standard word may 
believe important contributions project model bus bridges connect bus segments hierarchical system configurations 
components specified detail standard 
modeling bus bridges impossible analyze hierarchical systems subtle complex behaviors occur 
smv model bridges able find potential errors hierarchical protocol 
largest configuration verified bus segments processors states 
organized follows section contains brief description temporal logic writing specifications 
basic ideas symbolic model checking explained 
section describes smv language model checking tool 
design futurebus cache coherence protocol discussed section 
examples illustrate protocol supposed 
section describes model constructed section explains able specify cache coherence temporal logic 
section describe errors protocol 
section outlines directions research 

temporal logic model checking temporal logic method expressing ordering events time introducing time explicitly 
pnueli temporal logic reasoning concurrent systems 
correctness proofs constructed hand small systems verified 
temporal logic model checking algorithms early allowed type reasoning automated 
checking single model satisfies formula easier proving validity formula models technique implemented efficiently 
proof checker methods model checking completely automatic 
importantly formula true model model checker produce concise execution trace shows formula satisfied 
particular logic specifications branching time temporal logic called ctl computation tree logic 
formulas ctl built components atomic propositions boolean connectives temporal operators 
atomic propositions talk values individual state variables 
boolean connectives standard ones 
temporal operator consists parts path quantifier temporal modality 
quantifier indicates operator denotes property true execution paths state property need hold path 
modalities describe ordering events time execution path intuitive meanings 
holds true path exists state path formula true 

holds globally means true state path 

holds state means true second state path 

holds holds means exists state path true states preceding true 
formula logic true false state 
atomic proposition true state state variable refers appropriate value 
truth formula built boolean connectives depends truth subformulas usual way 
formula top level operator temporal operator universal existential path quantifier true paths path starting state property required operator modality 
formula true system true initial states system 
examples illustrate expressive power logic 

ag req af ack case signal req high eventually ack high 

enabled enabled holds infinitely computation path 

restart state possible get restart state 

ag send send recv case send occurs eventually recv true time send remain true 
model checking algorithm ctl linear size state space system consideration 
state space usually exponential number components system 
state explosion major problem methods exhaustive state exploration 
reason model checkers implicit representation finite state systems binary decision diagrams bdds 
bdds canonical form boolean formulas substantially compact conjunctive disjunctive normal form 
representation alter worst case complexity algorithm practice procedure efficient 
number cases verification time scales polynomially number components system 
sets states transitions represented bdds follows 
set state components system 
assume components boolean 
state determined assignment variable truth valuation possible write boolean expression true exactly valuation 
example fv valuation fv obtain boolean formula formula represented bdd 
general boolean formula may true different truth valuations 
adopt convention formula represents set valuations true describe sets states boolean formulas bdds 
addition representing sets system states able represent transitions system 
extend previous technique 
copy state variables 
valuation variables viewed designating starting state state transition 
represent sets valuations bdds 
symbolic model checking algorithm ctl takes formula determines set states represented bdd subformula including true 
bottom fashion starting atomic propositions formula 
handling atomic propositions logical connectives straightforward 
formula ex want find states having successor true 
done image computation 
formula ef fixed point characterization temporal operator ef fixed point computed iterating starting empty set states 
temporal operators handled similar ways 

smv smv symbolic model verifier tool checking finite state systems satisfy specifications ctl 
uses bdd symbolic model checking algorithm 
hardware description language built smv features 
modules user structure description complex systems modules 
individual modules instantiated multiple times modules variables declared modules 
standard visibility rules naming variables hierarchically structured designs 
modules parameters may state components expressions modules 
module facility heavily modeling futurebus protocol type device described standard represented separate module 
synchronous interleaving composition individual finite state machines smv modules composed synchronously interleaving 
synchronous composition single step composition corresponds single step components 
interleaving step composition represents step exactly component 
keyword process precedes instance module interleaving synchronous composition assumed 
types composition model futurebus protocol 
devices single bus run synchronously separate buses composed interleaving 
nondeterministic transitions state transitions model may deterministic nondeterministic 
nondeterminism reflect actual choice actions system modeled describe model certain details hidden 
ability specify nondeterminism missing hardware description languages crucial making high level models 
ways ability described section 
transition relations transition relations modules specified explicitly terms boolean relations current state values state variables implicitly set parallel assignment statements 
parallel assignment statements define values variables state terms values current state 
fairness constraints module may contain fairness constraints 
constraints rule certain infinite executions 
example suppose constructed model device nondeterministically responds request inputs 
wish ensure device eventually respond requests 
add fairness constraint specifies infinitely request acknowledgment 
execution request acknowledged eliminated satisfy constraint 
important features smv counterexample facility 
model satisfy specifications smv produces execution trace illustrating specification false 
counterexamples extremely useful debugging 
models moderate complexity generally produced minutes 
smv extremely effective design process 
provide formal syntax semantics language mcmillan thesis 
consider small example illustrating part hand shaking protocol 
comments continue line 
module definitions keyword module 
module main top level module 
modules sender receiver formal parameter input 
variables declared keyword var 
example strobe boolean variable state variable value ready sending waiting 
var statement instantiate modules shown lines 
case modules sender receiver instantiated names snd rec respectively 
module instantiated multiple times different names 
modules refer variables defined modules prefixing variable name name module 
example rec ack refers variable ack defined module instance rec 
modules example composed synchronous manner interleaving composition instantiating follows var snd process sender rec ack rec process receiver snd strobe assign statement define initial states transitions model 
example initial value variables state strobe ready respectively 
state value variable state case statement lines 
value case statement determined evaluating clauses statement sequence 
clause consists condition expression separated colon 
condition clause holds value corresponding expression determines value case statement 
clause evaluated 
expressions may represent sets values 
sets written explicitly shown line constructed union operator shown line 
set expression assigned variable value variable chosen nondeterministically set 
define statement define abbreviations expressions 
module main handshaking protocol example var snd sender rec ack rec receiver snd strobe spec ag snd strobe 
af rec ack module sender input var strobe boolean state ready sending waiting enumerated type define busy state sending waiting assign init state ready state case state ready ready sending nondeterministic choice state sending input state state sending input state union waiting input waiting state union ready esac init strobe strobe state sending fairness state sending input input stays eventually don send module receiver input 

smv code simple handshaking protocol example busy defined abbreviation state sending waiting 
expression true value state element set sending waiting 
fairness constraints fairness statements properties verified spec statements 

overview protocol ieee futurebus logical protocol specification technology independent protocol generations single multiple bus multiprocessor systems 
part standard cache coherence protocol designed hierarchically structured multiple bus system 
protocol coherence maintained individual buses having individual caches snoop observe bus transactions 
coherence buses maintained bus bridges 
special agents ends bridges represent remote caches memories 
order increase performance protocol uses split transactions 
transaction split completion delayed bus freed time explicit response issued complete transaction 
facility possible service local requests remote requests processed 
example protocol works consider example transactions single cache line processor system shown 
cache line series consecutive memory locations treated unit coherence purposes 
initially 
single bus system processor copy line cache said invalid state 
processor issues read shared transaction obtain readable copy data memory transaction may wishes obtain readable copy called 
transaction caches contain shared unmodified copy data 
decides write location cache line 
order maintain coherence copy held eliminated 
issues invalidate transaction bus 
transaction line cache 
invalidate exclusive modified copy data 
standard specifies possible states cache line processor state updated possible transaction 
consider bus example illustrate protocol works hierarchical systems see 
initially processor caches invalid state 
bus bus ma ca 
bus system processor issues read modified obtain writable copy data memory agent ma bus split transaction get data memory bus 
command passed cache agent ca ca issues read modified bus 
memory supplies data ca turn passes ma 
ma issues modified response transaction bus complete original split transaction 
suppose issues read shared bus 
ca knowing remote cache exclusive modified copy intervenes transaction indicate supply data splits transaction obtain data remote cache 
ca passes read shared ma issues bus 
intervenes supplies data ma passes ca 
cache agent performs shared response transaction completes original read shared issued 
standard contains english description hierarchical protocol specify interaction cache agents memory agents 

modeling protocol ieee standard futurebus logical protocol specification contains sections dealing cache coherence protocol 
description section written english contains informal readable overview protocol operates cover scenarios 
second specification section intended real standard 
section written attributes attribute essentially boolean variable rules setting clearing 
attributes precise difficult read 
behavior individual cache memory terms roughly attributes deal cache coherence 
example attribute cache modules shared unmodified shared unmodified 
cache cache agent shall set shared unmodified clear invalid exclusive unmodified exclusive modified master invalid status address read shared read modified keep copy copy back shared response cached requester shared shared response invalid status address transaction flag status data address requester exclusive modified response address split invalid status keep copy read shared read invalid 
cache cache agent may set shared unmodified clear exclusive unmodified exclusive unmodified 
cache cache agent shall allow modify access data cache line shared unmodified set 
cache cache agent may allow read access data cache line shared unmodified set 
note specification section aspects module allowed behavior described informally 
example attribute specifies processor readwrite permissions english 
addition aspects protocol bus bridges completely specified attributes 
order verification feasible number abstractions 
eliminated number low level details dealing modules communicate 
significant simplification model step corresponds complete transaction half split transaction buses system 
allowed hide handshaking necessary issue command 
example concerns bus arbitration 
standard specifies arbitration schemes model bus master chosen completely nondeterministically 
addition standard describes models behave various exceptional situations parity error observed data bus 
consider conditions 
second class simplifications reduce size parts system 
example considered transactions involving single cache line 
sufficient transactions involving cache line affect transactions involving different cache line 
data cache line reduced single bit 
third class simplifications involved eliminating read invalid commands 
commands dma transfers memory 
protocol guarantee coherence cache line write invalid transaction issued line 
class abstractions involved nondeterminism simplify models components 
example processors assumed issue read write requests cache line nondeterministically 
responses split transactions assumed issued arbitrary delays 
model bus bridge highly nondeterministic 
shows part smv program model processor caches 
code determines state cache line updated 
code state components upper case names cmd sr tf denote bus signals visible cache components lower case names state tf control cache 
part code lines specifies may happen idle cycle occurs cmd 
cache shared unmodified copy line line may nondeterministically kicked cache outstanding request change line exclusive modified 
cache exclusive unmodified copy line may kick line cache change exclusive modified 
second part code lines indicates cache line state updated cache issues read shared transaction master cmd read shared 
happen cache copy line 
transaction split sr data supplied cache 
caches data tf case cache obtains exclusive unmodified copy cache data obtains shared unmodified copies 
transaction split cache line remains invalid state 
piece code lines tells caches respond observe cache issuing read shared transaction 
observing cache invalid shared unmodified copy may indicate want copy line tf output 
case line invalid 
alternatively cache may assert tf try data 
case transaction split sr cache obtains shared unmodified copy 
cache stays current state 

specifying cache coherence section discuss specifications verifying protocol 
exhaustive specifications obviously possible particular tried describe cache coherence achieved 
class properties check device observes illegal combination bus signals unexpected transaction 
device model includes flags bus error error signal conditions 
flag bus error true illegal combination bus signals defined section standard seen error true device observes transaction occur internal state 
example processor cache shared unmodified copy cache line read shared state case cmd case state shared unmodified case requester exclusive shared unmodified invalid shared unmodified kick line cache esac state exclusive unmodified invalid shared unmodified exclusive unmodified exclusive modified state esac 
master case cmd read shared cache issues read shared case state invalid case sr tf exclusive unmodified sr shared unmodified invalid esac 
esac 
esac 
cmd read shared cache observes read shared case state invalid shared unmodified case tf invalid sr shared unmodified state esac 
esac 
esac 
portion processor cache model issued cache intervene transaction 
cache intervene happen exclusive modified copy error flag cache true 
formula device ag bus error error class properties states cache exclusive modified copy cache line caches copies line 
specification includes formula ag writable readable pair caches writable define statement true exclusive modified state 
similarly readable true invalid state 
consistency described requiring caches copies cache line agree data line ag readable readable data data similarly memory copy line cache copy agree memory data 
ag readable memory line modified data data variable memory line modified false memory date copy cache line 
final class properties check possible cache get read write access line 
readable writable give stronger specification cache issues read write request eventually obtains readable writable copy 
unfortunately model guarantee progress 
due heavy nondeterminism especially bus bridges 
try precise model ensure progress adding fairness constraints rewriting parts code expense increase verification time 

errors verification section describe errors trying verify protocol 
error single bus protocol 
consider system shown 
scenario excluded standard 
initially caches invalid 
processor obtains exclusive unmodified copy 
issues splits invalidation 
memory supplies copy cache line transitions shared unmodified state 
point having exclusive unmodified copy transitions exclusive modified writes cache line 

single bus system bus bus ma ca 
bus system inconsistent 
bug fixed requiring transition shared unmodified state splits read modified invalidation 
change fixes number related errors 
consider error hierarchical configuration 
obtain shared unmodified copies cache line 
issues invalidate transaction ma split 
issues invalidate ca splits 
bus bridge detects invalidate invalidate collision occurred 
trying invalidate trying invalidate 
happens standard specifies collision resolved having memory agent invalidate 
memory agent tries issue invalidate purpose sees transaction progress cache line asserts busy signal bus 
ma observes acquires requester waiting attribute 
module attribute wait sees completed response transaction retrying command 
finishes invalidating issues modified response 
split ma invalid 
ma maintains requester waiting attribute 
point ma issue commands waiting completed response response occur 
deadlock avoided having ma clear attribute observes finished invalidating 
checked configurations buses processors 
number boolean state variables models ranged corresponding number reachable states number bdd nodes needed represent model nodes largest models tried 
terms asymptotic performance number nodes needed represent system grew linearly number components bus quadratically number buses 
verification times ranged minute hour depending configuration 
important point models moderate size feedback verifier obtained matter minutes 
possible find bugs try possible fixes quickly 

formal verification involves making model system consideration 
saying system correct really claim model satisfies specifications 
attempted detailed model futurebus cache coherence protocol possible check system configurations possible 
remains done example combining model checking induction possible verify arbitrarily configurations 
mcmillan technique verifying cache coherence protocol encore 
plan try induction futurebus protocol protocol complex protocol 
believe standards benefit collaboration experts specification automated verification design process 
formal language state requirements result significantly faster development correct designs 
strategy doubt result lower cost implementations vendors 
model checking limited finite state models arising hardware 
formalization analysis types systems telecommunications protocols possible smv 
researchers keep mind ultimate test new formal verification technique handle real examples futurebus protocol 

acknowledgments paul dixon ieee futurebus working group time spent discussing reviewing results 

bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
burch clarke long 
representing circuits efficiently symbolic model checking 
proceedings th acm ieee design automation conference 
ieee computer society press june 
burch clarke mcmillan dill 
sequential circuit verification symbolic model checking 
proceedings th acm ieee design automation conference 
ieee computer society press june 
burch clarke mcmillan dill hwang 
symbolic model checking states 
proceedings fifth annual symposium logic computer science 
ieee computer society press june 
clarke emerson 
synthesis synchronization skeletons branching time temporal logic 
logic programs workshop yorktown heights ny may volume lecture notes computer science 
springer verlag 
clarke emerson sistla 
automatic verification finitestate concurrent systems temporal logic specifications 
acm transactions programming languages systems 
dixon 
multilevel cache architectures 
minutes futurebus working group meeting december 
ieee computer society 
ieee standard futurebus logical protocol specification march 
ieee standard 
mcmillan 
symbolic model checking approach state explosion problem 
phd thesis carnegie mellon university 
mcmillan 
formal verification encore cache consistency protocol 
proceedings international symposium shared memory multiprocessors april 
pnueli 
temporal logic concurrent programs 
theoretical computer science 
sifakis 
specification verification concurrent systems cesar 
proceedings fifth international symposium programming 
