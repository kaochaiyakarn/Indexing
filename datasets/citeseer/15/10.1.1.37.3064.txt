robust universal complete codes transmission compression fraenkel shmuel klein department applied mathematics computer science weizmann institute science rehovot israel department mathematics computer science bar ilan university ramat gan israel discrete applied mathematics measures defined investigated allow comparison codes robustness errors 
new universal complete sequences variable length codewords proposed representing integers binary fibonacci system 
sequence constant need generated probability distribution 
codes alternatives huffman codes optimal compression required simplicity faster processing robustness preferred 
codes compared real life examples 

motivation fa delta delta delta finite set elements called cleartext elements encoded static uniquely ud code 
notational ease term code abbreviation set codewords corresponding encoding decoding algorithms clear context 
code static mapping set cleartext elements code fixed encoding text 
restrict attention static codes excluding adaptive methods particular popular lz techniques 
probability occurrence element elements single characters pairs triplets gram characters represent words natural language form set items completely different nature provided unambiguous way decompose file sequence items way file reconstructed sequence see example 
think applications size large relative size standard alphabet 
criteria may govern choice code 
shall concentrate robustness errors ii simplicity encoding decoding process iii compression efficiency 
length bits binary codeword chosen represent known weighted average length codeword minimized huffman procedure 
huffman codes extremely error sensitive single wrong bit may render tail encoded message error useless 
ii new set codewords generated probability distribution encoding decoding algorithms involved 
approach limit possible damage errors add redundant bits error detection correction 
obviously diminishes compression efficiency complicates coding procedures 
simplest possible codes fixed length codes considered robust error inverting single bit causes loss codeword 
compression point view static fixed length codes fixed fixed variable fixed length codes optimal probability distribution cleartext elements uniform uniform wasteful probability distributions 
bit lost extraneous bit picked causes shift remaining tail lost 
compression capabilities codes compared means weighted average codeword lengths simplicity coding decoding procedures measured time space complexity algorithms 
section define sensitivity factor enables quantitative comparison codes regarding robustness errors 
review codes appearing literature evaluate sensitivity factor 
classes infinite codes considered section simplicity coding algorithms compression efficiency 
section new family variable length codes introduced considered compromise huffman fixed length codes respect mentioned criteria 
new family codes depends number items encoded ordering frequencies exact distribution binary fibonacci system see 
corresponding coding algorithms simple 
related various representations integers fibonacci numbers order investigated application transmission unbounded strings 
assume underlying probability distribution explore properties fibonacci representations variable length codeword sets particular trade robustness compression efficiency 
section codes compared numerically various probability distributions real life alphabets 
broad area data compression ably reviewed storer hirschberg williams bell cleary witten refrain giving review cite works connected investigation 
restrict binary codes ideas generalized arbitrary base 
particular binary codes binary fibonacci system may generalized codes sequence integers fa defined recurrence relation ma gamma gamma fixed positive integer fibonacci case 
resulting codes ary codes properties investigated fraenkel 

robustness reliable transmission message needed error correcting codes may 
don care single transmission typing errors long influence remains locally restricted 
need measure enables compare codes error sensitivity 
sensitivity factor family errors may occur encoded string deletion complementation bit intuitively consider code robust code error string encoded error number misinterpreted codewords smaller henceforth restrict contain substitution deletion insertion errors 
error occurring position understood changing value gamma lost bit inserted just right propose measure expected maximum number codewords may lost single error occurs expected maximum obtained calculating maximum possible locations error averaging appropriately 
formally code codewords length appear probability probability bit randomly chosen location long encoded string belongs note proportional particular fixed length codes maximal number codewords may lost error occurs th bit assuming bit equal chance erroneous expected maximum number codewords may lost error occurs sensitivity factor defined sf def average codeword length 
reason preferring expected maximum expected average definition sf technical average number codewords lost error bit depends entire set codewords distribution harder evaluate maximum independent distribution 
evaluate sensitivity known codes consider order increasing sf absolutely robust code code representation codeword triple replication transmit bit times retain value occurred twice 
assumption single error codeword misunderstood sf 
economical error correcting codes low sensitivity required 
order get better compression variable length codes 
hand vulnerable fixed length codes substitution error change codeword different length error propagate 
hand insertion deletion error cause damage fixed length code synchronization lost forever sf unbounded certain variable length codes resynchronize sooner 
finite set cleartext elements optimum compression obtained huffman codes mentioned generated probability distribution 
consider fixed infinite sets variable length codewords yield inferior compression easier set elements encoded simple procedure 
sort probabilities non increasing order delta delta delta pn 
assign th codeword sorted non decreasing length element probability encoding decoding algorithms simply table lookups 
simplest variable length code unary code th codeword consists preceded gamma zeros 
code distributions close gammai error deletes right codeword changes zero adjacent codewords fuse 
insertion bit affects codeword insertion bit just adds new codeword 
error occurs zeros current codeword decoded codewords case substitution insertion codeword lost 
un codewords average codeword length ip get sf un gamma gilbert method generating block codes length proposed 
called prefix synchronized codes special cases comma free codes see fix binary pattern bits consider set strings form binary string length gamma pattern occurs prefix suffix 
allows receiver encoded message resynchronize transmission error looking appearance pattern variant appears lakshmanan studied variable length codes 
consider synchronization problem interested mainly ud codes defined set strings form occurs suffix codeword binary string length bit restriction occurs exactly suffix 
obtains prefix code 
set binary strings length occurs suffix called set generated denoted 
note adjoined code defined lakshmanan order get better compression 
berstel perrin called semaphore code 
various choices investigated 
gilbert conjectured number possible codewords length maximized choosing prefix form delta delta delta suitable length conjecture proved guibas odlyzko large showed generally maximized choice prefix autocorrelation delta delta delta gamma zeros length jk gamma log 
binary string autocorrelation delta delta delta proper prefix identical suffix example delta delta delta autocorrelation delta delta delta 
suppose autocorrelation delta delta delta 
error occurs codeword length gamma leftmost bits lost 
inserting deleting changing bit cause prefix altered create new occurrence pattern case new occurrence overlapping bits suffix autocorrelation delta delta delta 
altered codeword possibly decoded codewords codewords affected 
error occurs bits suffix new occurrence created overlapping bits suffix autocorrelation delta delta delta 
example pattern codeword decoded substitution error third bit left codeword substitution error rightmost bit yield decoding 
occurrence concatenation altered form prefix lost new occurrence partly overlapping suffix case codewords lost 
get sf ln gamma ln set elements ordered non decreasing codeword length 
unary code special case 
suppose autocorrelation delta delta delta 
sf necessarily bounded 
consider example pattern encoded message occurrences delta delta delta delta delta delta substitution error leftmost bit leftmost occurrence yield decoding delta delta delta delta delta delta example extended arbitrarily 
sf ln bounded number codewords tends infinity 
elias code fr proposed encodes cleartext element logarithmic ramp representation integer element 
denote standard binary representation leading integer obtained way prefixed blog ic process recursively placing length string minus front string repeated string length obtained 
strings leading bit bit mark logarithmic ramp 
example dashes added clarity 
substitution error dlog rightmost bits appended zero change length codeword lost 
insertion deletion error error bits may change codeword different length decoding codeword start error propagate indefinitely sf bounded 
result holds similar logarithmic ramp code discussed rodeh 
huffman code error may self correcting codewords fixed length code see bookstein klein 
easy construct arbitrarily long sequences codewords scrambled single error sf bounded number encoded cleartext elements grows indefinitely 
sensitivity synchronous codes examples sf bounded delicate definition sf respond intuitive notion robustness error sensitive codes robust 
instance ferguson method proposed certain classes probability distributions yielding huffman codes self synchronizing probabilistic sense code contains called synchronizing codeword appears encoded string codewords recognized regardless possible errors preceding formally codeword delta delta delta defined synchronizing satisfies conditions 
codeword appear substring possibly suffix 
proper prefix delta delta delta suffix codeword corresponding suffix delta delta delta string codewords 
existence synchronizing codeword bounds expected length propagation error increasing redundancy code authors show distributions synchronous huffman code constructed 
definition sensitivity existence certain codes synchronizing codewords taken account 
define code fc sensitivity factor sf similarly sf sf def defined expected number codewords synchronizing codeword including case error th bit changed codeword different length error th bit changed codeword length lost define 
note expected number codewords lost possibly codewords recover certain errors definition synchronizing codeword requires resynchronize possible error 
hand sf sf sf sf shows robust definitions sensitivity factor 
evaluation sf easy sum probabilities synchronizing codewords gamma number possibilities transform codeword length changing single bit 
noted codes synchronizing codeword synchronizing sequences 
preferred take account definition sf ln length bits codeword delta delta delta length gamma synchronizing 
condition 
obviously satisfied codeword 
condition suffixes length codewords 
suffixes length need checked corresponding prefixes length prefix suffix codeword rightmost bits contradicts fact 
particular codeword unary code synchronizing 
sf ln fj gamma sf un 
consider elias infinite code certainly synchronous 
codeword regarded standard binary representation integer appears substring followed violating condition 
finite codes rn fr synchronizing codewords certain cases 
example synchronizing maximal length condition trivially satisfied suffix sequence codewords 
possible construct synchronous huffman code certain cases sf bounded 
examples section synchronous huffman codes chosen sensitivity factor sf compared sf codes 
robustness vs compression trade huffman codes high error sensitivity huffman codes suggests certain applications may profitable improve sf cost reduced compression efficiency 
substitution errors possible achieved grouping codewords blocks fixed size bit block bit codeword codeword tail fit block entirety moved block 
order avoid incorrect interpretations bits block remain unchanged contain prefix consequence average length codeword increase 
huffman coded message repeated traversals corresponding huffman tree 
starting root passes level lower left resp 
right pointer bit input string resp 
leaf reached leaf corresponds codeword output algorithm proceeds root 
bit blocks decoding procedure modified follows time pointer points current place huffman tree updated passing left right son leaf reached resetting pointer root counter cn incremented 
cn indicates completed processing bit block set point root regardless leaf reached counter zeroed 
possible substitution error affect neighboring bit blocks 
insertion deletion errors devastating effect fixed length codes 
consider sub section substitution errors done example define new sensitivity factor sf similar sf restricted interpretation word error 
clearly sf sf code parameter chosen obtain predetermined sf average codeword length obviously smaller maximal codeword length 
choose block size relatively prime greatest common divisor codeword lengths assume probability codeword bit block proportional codeword bit position chance block 
average number redundant bits block average length prefix codeword block truncated gamma gamma original average codeword length 
new average number codewords block gamma new average codeword length ml gamma bound derived desired upper bound new average codeword length new average codeword length exceed delta gamma block size fixed proceed calculate sf error occurred probability error codeword bit block case entire block codewords lost 
error second codeword block gamma codewords lost probability assuming integer get sf gamma gamma delta delta delta delta resulting formula sf approximately true possible achieve predetermined sf smaller maximal codeword length 
distributions obtain sf constant code ln larger average codeword length 
distributions block size gives better sf better compression ln cases advantage reduces simplicity faster decoding robustness insertion deletion errors see examples section 
noted sf sf ln codes bounded sf huffman codes depends ratio maximum average codeword length turn function number elements set distribution 
ratio minimized uniform distribution worst case compression point view 
alternative way protect huffman codes noise proposed hamming section break huffman encoded message blocks hamming error correcting codes protect block 
size huffman code blocks output blocks size dlog attractive alternative large compression slightly deteriorated sf 
hand coding algorithms complicated time consuming 

universality completeness previous section dealt criterion mentioned 
turn criteria 
pointed earlier simple way encode alphabet elements codewords fixed infinite code 
elias shown possible construct infinite codeword sets calls universal infinite set codewords lengths universal finite probability distribution inequality holds max gamma log entropy distribution constant independent arbitrary probability distribution alphabet universal code encode resulting average codeword length constant times optimal possible distribution 
universality logarithmic ramp code shown 
unary code universal 
codes universal bits see 
consider codes yielding sub optimal compression shall restrict complete infinite codes 
defined code complete adding binary string gives set fcg ud 
authors call code 
note infinite code complete extended adjoining codewords forming sequence better compression capabilities 
ud code codeword lengths satisfies mcmillan inequality gammal 
sufficient condition completeness gammal 
recurrence relations developed giving fixed number elements length relations show codes gammar implies completeness sets 
algebraic proof completeness chapter ii section 
give direct string theoretic proof 
theorem 
codeword set generated fixed pattern bits complete 
proof delta delta delta binary string 
order show complete construct binary string possible decomposition set fcg 
delta delta delta define string delta delta delta define sequence indices def gamma delta delta delta 
words scanning string left right try decompose elements denoting index bit belongs th codeword detected way scanning 
occurs suffix true decomposed entirety way 
example take left suffix seen example problem arises occurrence overlapping bits suffix way parse possibly empty proper suffix case empty 
decompositions 
case empty 
denote binary complement delta delta delta gamma string defined consider string possible decomposition 
proper prefix remains show suffix decomposed elements occurs suffix 
occurs twice occurrences overlapping choice yields decomposition elements 
proof completed showing pattern occur twice proper suffix bits occurrence starts extend hand occurrence start bits appearances occurrences suffix gamma remaining occurrences start different positions having suffixes different lengths implies bits equal contradiction 
saw far robustness concerned pattern code chosen autocorrelation delta delta delta 
theorem suggests sets patterns preferable sense 
extend gilbert block codes variable length code way technical reasons shall consider codewords fixed suffix fixed prefix fixed pattern length bits denote set codewords form binary string length pattern occurs prefix suffix 
union block codes length defined gilbert permit case code obtained way comma free code ud example showing difference string 
condition elements restrictive condition elements follows 
theorem 
assertions equivalent 
autocorrelation form delta delta delta 


code complete 
proof know holds opposite inclusion codeword appears suffix 
proper prefix suffix occurs prefix suffix 

theorem 
autocorrelation delta delta delta proof theorem simpler case occur 
show autocorrelation delta delta delta ae holds strict inclusion possibly complete look codeword generated belong 
delta delta delta suppose delta delta delta gammah delta delta delta denote binary complement define strings delta delta delta gamma delta delta delta gamma consider string delta delta delta 
remains show generated words occurs suffix 
choice occur suffix choice occur delta delta delta string assume string identical bits start 
suppose appears form delta delta delta gamma delta delta delta gamma cases autocorrelation delta delta delta contradicting assumption 

fibonacci codes pointed earlier elements code certain patterns attractive alternative huffman codes optimal compression critical 
encoding process simpler code need generated probability distribution 
fact message encoded easily parsed locating separators actual decoding algorithms similar huffman codes 
generally simple relation codeword index fixed length codes unary code needs translation table consists columns column containing codewords containing corresponding cleartext elements 
decoding having detected codeword algorithm searches column codewords retrieves corresponding element cleartext column 
existence easily computable mapping code integers column codewords search superfluous 
means space requirements huffman codes cut 
noted refer straightforward approach decoding huffman codes 
certain cases sophisticated data structures may yield efficient algorithms 
section study code special case show mapping exists code related binary fibonacci system 
relation noted investigated 
fibonacci code binary encoding integer encoding element fixed length code length codewords blog nc standard binary system 
want uniquely code possible pass variable length code just omitting leading zeros codeword resulting ambiguities 
propose exploit property binary fibonacci system th fibonacci number gamma gamma integer represented binary string delta delta delta note indexing string increases left right contrary usual notation reason clear sequel 
uniquely express integer form gamma words adjacent number bits needed represent integers fixed length codes increases blog oe oe golden ratio able variable length representation replacing trailing zeros additional act comma separating consecutive codewords 
denote infinite sequence codewords fc length sequence possible orderings 
properties generalized fibonacci systems kautz synchronization control fixed length codes devised satisfy condition codeword contains string consecutive fixed 
code extends idea variable length codes choosing additional bit codeword needed allow unique 
sake completeness give direct proofs propositions derived special cases corresponding general proofs 
proposition 
codewords length 
proof proposed representation integer satisfying needs bits encoding claim follows add separating note gamma proposition 
code uniquely universal complete 
proof adding comma bit codeword terminates consecutive appear codeword 
prefix code 
proposition get number codewords length including gamma induction shown equal gamma 
length index 
oe gamma 
log oe log arranged non increasing sequence sum unity ip log gamma log log gamma log chosen constant definition universality 
completeness denote gammal fibonacci recurrence relation get gamma gamma gamma gamma gamma delta gamma gamma gamma gamma gamma gamma words complete 
note conventional notation gamma delta delta delta represent integer fibonacci system leading zeros replaced leftmost position resulting code suffix code prefix 
decoding procedure somewhat complicated string ones know parity length interpret codeword preceding string 
evaluate sf autocorrelation 
sf bounded 
bits codeword 
error occurs codeword lost possibly codeword interpreted notations section gamma 
problem may arise case error rightmost bits codeword error occurs followed consecutive 
suppose string followed parsing encoded string including change 
example case insertion rightmost bits substitution error penultimate bit substitution error third bit right 
choice differs example section gamma codewords obtained incorrect parsing worst case codeword lost 
precisely error rightmost bit codeword causes codewords lost 
error penultimate bit may cause false interpretations gamma 
case error third bit right may possible decode example substitution error codewords lost gamma 
denote average length codeword 
get sf gamma gamma delta gamma gamma gamma delta gamma numerical examples sf various distributions section 
decoding process message encoded consists phases 
input string parsed codewords just locating separator 
index codeword evaluated table accessed translate index corresponding cleartext element 
dominant part processing time taken table access slower scanning phase 
hand huffman codes phase involves table tree accesses bit codeword detected 
input string encoded longer string encoded huffman algorithm number codewords number times access table decoding smaller number bits number times access table tree decoding 
expect faster decoding huffman codes 
relative savings increase average codeword length size set cleartext elements 
algorithm encoded message bit vector elements denoted 
algorithms encoding decoding translation table cleartext element stored entry codeword compute index fibonacci system directly access translation table appropriate entry 
computation speeded table fibonacci numbers decoding procedure pointer length index points leftmost bit codeword repeat evaluate index codeword index index theta gamma look pattern access translation table index higher order fibonacci codes idea previous subsection easily generalized higher order fibonacci codes 
fibonacci numbers order defined recurrence gamma gamma delta delta delta gammam 
particular standard fibonacci numbers 
integer represented binary string delta delta delta run consecutive fact devise variable length codes bit run separator 
proofs mary fibonacci codes ud universal complete 
higher order fibonacci codes glance inefficient particularly codewords corresponding higher probabilities bits delimiters bits carry actual information 
hand increasing number possible codewords fixed length increases 
large language encoded certain near uniform distributions possible obtain average codeword length smaller 
denotes length th codeword ary fibonacci code 
line table gives minimal size language ary fibonacci code yields average codeword length larger code supposing uniform distributions distributions transition points exist higher 
similar arguments gets ary fibonacci codes sf gamma gamma delta gamma gamma gamma delta gamma gamma delta gamma gamma mp gamma second line table depicts sf standard code uniform distribution language size line gives sf ary fibonacci code distributions 
table comparison ary fibonacci codes sf sf ary table shows compression improved higher order codes fairly large sizes language 
variants fibonacci codes order bit playing role comma added codeword 
additional bit avoided codeword rightmost position leftmost 
new code generated 
deleting rightmost bit codeword 
dropping codewords start 
way obtain set 
deleting rightmost bit codeword 
prefixing codeword 
adding codeword 
equivalence definitions established noting function delta delta delta delta delta delta gamma defines definitions mapping gamma 
set codewords respective lengths denoted immediate consequence proposition proposition 
codeword length gamma codewords length 
substitution error occurs consists single bit preceding codewords join case codewords lost deletion insertion affect codeword 
codewords substitution deletion error bit causes loss codewords cases single codeword lost denoting average codeword length get sf gamma gamma delta gamma gamma gamma delta distributions gamma particular robust 
note prefix code decoding simple codeword easily detected 
proposition 
code uniquely universal complete 
proof ambiguous encoding message delta delta delta delta delta delta bits encoded message consists 
smallest index necessarily jc jc suppose jc jc index rightmost bit bit bit contains adjacent contradiction 
ud 
construction implies lengths elements related gamma 
gamma universality follows completeness gamma gamma sum quantity proposition 
decoding algorithm searches occurrence pattern formed codewords 
special treatment codeword avoided additional input string 
function maps codeword index simply ignores bits proceeds decoding procedure length mn input string points leftmost bit codeword codeword access translation table entry index skip repeat evaluate index codeword index index theta gamma look pattern access translation table index generalizations code higher order fibonacci codes 
attempt avoid comma bit construct new sequence codewords obtained 
deleting rightmost bit codeword 
duplicating set codewords length identical blocks codewords 
prefixing block codeword second 
yields set codewords lengths denoted note codeword leftmost bit codeword consecutive bits appear prefix codeword terminates 
construction proposition get proposition 
gamma codewords length 
substitution error bit affects preceding codeword codewords lost 
error bit error bits causes loss codewords 
codewords including error penultimate bit causes incorrect interpretations 
setting get sf gamma gamma delta gamma gamma delta gamma gamma delta distributions robust distributions robust set prefix proposition 
code uniquely universal complete 
proof notations proposition 
codeword consecutive chosen codeword penultimate position 
contains pattern impossible ud 
universality follows fact 
proposition completeness follows gamma gamma shown proof proposition 
decoding having checked codeword search pattern 
add input allow identical processing codewords 
index codeword length form delta delta delta recall computed adding quantities number codewords length gamma gamma gamma gamma gamma depending value codeword belongs blocks size gamma defined step construction relative index block 
relative index obtained considering gamma rightmost bits codeword representation integer fibonacci system subtracting gamma gamma gamma rightmost bits represent integers range xf gamma gamma 
summarizing index gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma bit codeword 
decoding procedure length mn input string points nd bit left codeword gamma codeword access translation table second entry index gamma second bit repeat evaluate index codeword index index theta gamma gamma look pattern access translation table index gamma gamma 
examples real life examples chosen showing optimality variant distribution 
example distribution characters english text words chosen different sources heaps 
table letters listed decreasing probability occurrence huffman code codes 
huffman code codewords letters synchronizing 
example huffman code english maximizes sum probabilities synchronizing codewords finding best possible huffman code sense open problem 
second example distribution hebrew letters including kinds blank computed data base retrieval project hebrew words 
method constructed huffman code alphabet synchronizing codeword appeared probability 
third example different kind 
large sparse bit vector may compressed way see example vector partitioned bit blocks possible block patterns assigned huffman codes probability occurrence 
statistics collected bit vectors bits constructed project vector serves occurrence map different word referring number document value position word appears th document 
chose alphabet consisted characters 
vectors extremely sparse proportion bits probability block consisting zeros high waste code codeword longer bit 
theorem huffman code corresponding distribution synchronous synchronizing codeword probability 
notion generalized systems achieve better compression sparse bit vectors huffman compression approach 
see 
table summarizes results 
lines headed length give expected length bits file coded characters 
sensitivity factors computed probability distributions 
huffman codes table table distribution letters english text letter probability huffman weighted average gives sensitivity factor sf values italicized differentiate sf values 
fixed length codes bits necessary english hebrew alphabet bits bit vector 
table gives new values length sf bit blocks improve robustness huffman codes 
values computed table average values coded characters english hebrew bit vectors letters letters letters length huffman sf length sf length sf length sf formulae section 
line corresponds original huffman algorithm sf table average values bit blocks english hebrew bit vectors length sf length sf length sf seen english alphabet sf average length better best codes example 
hebrew alphabet code gives better compression better robustness values better 
example case value sf sf codes reached smaller length longest codeword 
small values sf length worse average length shorter sf high 

concluding remarks new sequences variable length codes proposed applications huffman codes applied probability distribution exactly known changes time situations optimal compression huffman codes critical simplicity faster processing robustness errors preferred 
restrict model allowing substitution errors section simplest way obtain properties fixed length codes independent probability distribution may inefficient 
codes proposed encoded decoded efficiently time space regarded compromise fixed length huffman codes 
definition error allows number transmitted bits changed fixed length code vulnerable huffman codes 
additional bit lost bit cause shift encoded string incorrectly interpreted sf bounded number encoded cleartext elements grows indefinitely 
single bit error may self correcting codewords certain codes codewords length possible number transmitted bits changes 
hand codes immune errors number false interpretations 
apostolico fraenkel robust transmission unbounded strings fibonacci representations ieee trans 
inf 
th 
bell cleary witten text compression prentice hall englewood cliffs nj 
berstel perrin theory codes academic press orlando florida 
bookstein klein huffman coding dead computing 
choueka klein perl efficient variants huffman codes high level languages proc 
th acm sigir conf montreal 
elias universal codeword sets representation integers ieee trans 
inf 
th 
rodeh economical encoding commas strings comm 
acm 
ferguson self synchronizing huffman codes ieee trans 
inf 
th 

fraenkel retrieval project wanted know afraid ask expanded summary 
fraenkel systems amer 
math 
monthly 
fraenkel usefulness systems information computation 
fraenkel klein novel compression sparse bit strings preliminary report combinatorial algorithms words nato asi series vol springer verlag berlin 
gilbert synchronization binary messages ire trans 
inf 
th 

guibas odlyzko maximal prefix synchronized codes siam appl 
math 

hamming coding information theory edition prenticehall englewood cliffs nj 
heaps information retrieval computational theoretical aspects academic press new york 
hirschberg efficient decoding prefix codes comm 
acm 
huffman method construction minimum redundancy codes proc 
ire 
jakobsson huffman coding bit vector compression information processing letters 
results comma free codes canad 
math 

kautz fibonacci codes synchronization control ieee trans 
inf 
th 

lakshmanan universal codeword sets ieee trans 
inf 
th 

hirschberg data compression acm computing surveys 
mcmillan inequalities implied unique ire trans 
inf 
th 

storer data compression methods theory computer science press rockville maryland 
williams adaptive data compression kluwer academic publishers 
repr esentation des nombres par une de nombres de fibonacci ou de nombres de lucas bull 
soc 
sci 
li ege 
ziv lempel universal algorithm sequential data compression ieee trans 
inf 
th 

ziv lempel compression individual sequences variable rate coding ieee trans 
inf 
th 


