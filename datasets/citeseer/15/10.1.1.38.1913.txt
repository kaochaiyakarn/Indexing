algorithm deciding set observed independencies causal explanation thomas verma research park ca verma com judea pearl cognitive systems laboratory computer science department university california los angeles ca judea cs ucla edu april previous algorithm extracting causal influences independence information causal influence defined existence directed arc minimal causal models consistent data :10.1.1.51.7221
address question deciding exists causal model explains observed dependencies independencies 
formally list conditional independence statements required decide exists directed acyclic graph perfectly consistent statement reflected separation analyze effective algorithm tests existence dag produces exists 
key words causal modeling conditional independence 
directed acyclic graphs dags widely modeling statistical data 
starting pioneering wright introduced path analysis statistics development bayesian networks influence diagrams dag structures served primarily encoding causal influences variables actions variables 
statisticians usually treat causality extreme caution structure dags advantageous model explanatory purposes 
wermuth example mentions advantages 
dag describes stepwise stochastic process data generated case may prove basis developing causal explanations 
second parameter dag understood meaning conditional probability measures probability response variable particular configuration explanatory parents variables variables unspecified 
third task estimating parameters dag model decomposed sequence local estimation analyses involving variable parent set dag 
fourth general results available reading implied independencies directly dag deciding topology dags equivalent specify set independence restrictions joint distribution dag specifies restrictions specified adds fifth advantage list 
presents algorithm decides arbitrary list conditional independence statements defines dag corresponding dag drawn 
algorithm basis inferred causation ic algorithm described lemmas :10.1.1.51.7221
interested detecting local relationships called genuine causal influences consider entire dag unit ought fit data hand :10.1.1.51.7221
criterion dag equivalence lemma 
follows analysis chain graphs applies strictly positive distributions 
direct analysis verma pearl renders criterion applicable arbitrary distributions non probabilistic dependencies type 
problem list conditional independence statements ranging set variables required decide exists directed acyclic graph dag consistent definitions dependency model list conditional independence statements form bjc disjoint subsets set variables dag consistent dependency model statement statement outside follows topology case said dag isomorphic 
statement follows topology dag holds probability distribution compatible probability distribution compatible decomposed product conditional probabilities aj nodes set containing parents statement bjc holds probability distribution iff ajc bjc 
definitions notation needed understand proposed solution 
partially directed acyclic graph pdag graph contains directed undirected edges contain strictly directed cycles 
extension pdag fully directed acyclic graph skeleton underlying undirected graph vee structures nodes form vee structure written abc adjacent nodes adjacent written ab gamma overview section details solution problem posed section 
presents algorithm consists phases 
ffl phase examines independence statements tries construct pdag guarantees assume closed axioms 
see section processing lists closed 
alternatively statement corresponds separation condition 

dag isomorphic extension consistent 
phase fails generate pdag dag isomorphic 
ffl phase extends pdag dag possible 
ffl phase verifies consistent consistent dag isomorphic definition 
inconsistent definition dag consistent additional improvements algorithm extensions problem discussed section 
dag construction algorithm phase generate pdag possible 

pair variables look statement form bjs set variables including 
construct undirected graph vertices connected edge iff statement bjs mark pair non adjacent nodes set call set 

pair non adjacent nodes test node adjacent node direct arcs exists directed path case phase fails 

orientation step completed phase succeeds returns partially directed graph phase extend dag possible 

initially empty stack equal 
contains undirected arcs repeat close rules possible 
rule gamma adjacent direct rule gamma gamma gamma rule gamma gamma psi direct rule gamma gamma direct 
closure successful directed cycles new vee structures ffl contains undirected arcs select choose direction push arc copy stack continue loop go back 
ffl contains undirected arcs loop completed phase succeeds returns directed acyclic graph 
closure unsuccessful discard current value pop copy stack selected arc reverse chosen direction arc continue loop go back 
phase check consistent 
test statement holds separation criterion linear time algorithm testing separation reported 

pick total ordering nodes agrees directionality stand set nodes precede ordering 
node test statement 
tests confirmed exit success return exit fail 
correctness phase phase examines generates graph subject guarantees possible 
dag isomorphic extension consistent correctness step phase follows lemma detailed proof lemma dag isomorphic dependency model dag consistent iff conditions hold 
ab iff bjs 
abc iff abc ac cjs portion lemma guarantees 
exists dag consistent dag consistent skeleton 
furthermore dag consistent vee structures part guarantees dag skeleton vee structures consistent step phase attempts construct invariant skeleton dag isomorphic 
arrowheads added second step identify invariant vee structures dag isomorphic 
note step phase directs arcs immediately finding set satisfying condition lemma 
decision correct due lemma lemma dag isomorphic dependency model variables forming chain abc cjs cjs implies proof suppose abc cjs order separate case head head link path active set containing head head case set contains activate link path bjs lemma permits orient vee structures 
dag isomorphic possible phase build graph pdag weren failure condition step 
example illustrates failure resulting application phase non dag isomorphic dependency model 
example fa dg closure set fi cj dj dj symmetry step phase construct skeleton gamma gamma gamma 
chain abc ac step direct similarly bcd bd step direct directions assigned attempting second algorithm fail 
phase task phase find pdag extensions find exists 
purely graph theoretic task involve prove phase construction correct sufficient prove rules sound orientation choices dictated rules need revoked 
symmetry states bjc iff ajc 
noted dependency models assumed closed symmetry trivial operation 
ffl rule gamma adjacent direct directing gamma create new vee structure abc consistent extension contain ffl rule gamma gamma gamma directing gamma create directed cycle consistent extension contain ffl rule gamma gamma psi direct directing gamma imply gamma directed directed cycle 
gamma directed directed cycle directed new vee structure abc 
consistent extension contain ffl rule gamma gamma direct gamma directed new vee structure dab 
gamma directed gamma directed directed cycle 
gamma directed new vee structure bcd 
consistent extension contain simple examples pdags extended dags 
example consider graph initially rules apply algorithm select arc direct rule apply twice directing third application infer produce directed cycle 
easy see cycle chosen direction selected arc reversed 
graph dag extension 
gamma gamma gamma gamma 
pdags extended 
example consider graph application rule direct arc gamma create new vee structure 
graph dag extension 
phase soundness step follows definition consistency simply checks independence statement represented soundness step testing form sufficient follows proof soundness separation 
example fi bj cj cj phase produce empty graph trivially extended empty dag 
independence statement true empty dag including bjc dag isomorphic 
example fi bj bjd ab djc phase produce phase extend reflect bjd dag isomorphic 
complexity analysis phase completed jm ju steps follows ffl start complete graph statement bjs pair variables remove links gamma define ffl node gamma bg set neighbors ffl separating set defined note children direct 
phase may appear require exponential amount time worst case due possible backtracking step 
conjecture extendible rules sufficient guarantee choice need revoked 
empirical studies far confirmed conjecture 
possible replace backtrack step definite failure case time complexity phase polynomial ju jej 
phase completed jm jej jm ju steps 
extensions improvements general set independence statements hold domain grow exponentially number variables grows 
impractical specify explicit enumeration statements 
cases may desirable specify basis logical closure cl relative semantics axioms correlational axioms probability theory 
major difficulty permitting dependency model specified closure basis lies solving called membership problem 
simply stated problem decide particular statement contained closure list statements general membership problems undecidable decidable np complete 
particular membership problems probabilistic independence unsolved 
spite difficulty may possible efficient dag construction algorithm queries required special form 
algorithm types queries 
phase step bjs cl 

phase step set cjs cl 

phase step statement cl represented 

phase step statement represented cl 
case assumed closure queries type manageable 
queries phase quickly answered due lemma lemma bjs cl aa note simplification possible due special form queries singletons separating set suffice 
type queries pose particular problem axioms hold separation 
check statement represented ensure statement closure represented check statement represented contained cl necessary ju membership queries explicated step phase 
statements special form unclear lemma similar exits simplify queries 
possible source simplification note dag tested step phase just random dag output construction algorithm 
example demonstrates possible contain statements cl may case statements certain form property simplify membership query 
cox 
causality statistical aspects 
appear roy 
statist 
soc 
ser 
lemma follows immediately form axioms 

chain graph markov property 
scand 
statist 
geiger 
qualitative framework probabilistic inference 
phd thesis ucla 
geiger verma judea pearl 
identifying independence bayesian networks 
networks 
lauritzen dawid larsen 
independence properties directed markov fields 
networks 
pearl 
probabilistic reasoning intelligent systems 
san mateo ca 
pearl geiger verma 
logic influence diagrams 
oliver smith editors influence diagrams belief networks decision analysis pages 
john wiley sons sussex england 
pearl verma :10.1.1.51.7221
theory inferred causation 
allen fikes editors knowledge representation reasoning proceedings second international conference pages 
morgan kaufmann san mateo 
judea pearl paz 
graph logic reasoning relevance relations 
du boulay editor advances artificial intelligence ii pages 
north holland amsterdam 
verma 
invariant properties causal models 
technical report ucla cognitive systems laboratory 
verma pearl 
equivalence synthesis causal models 
proceedings th conference uncertainty ai pages 
verma 
causal networks semantics expressiveness 
technical report ucla cognitive systems laboratory 
shachter levitt kanal editors uncertainty ai pages elsevier science publishers 
wermuth 
block recursive linear regression equations 
technical report issn psychological institute university mainz mainz frg september 
forthcoming brazilian journal probability statistics 
wright 
causation 

res 
appendix proof lemmas definition separation dag disjoint sets nodes separated third written jz path node node activated set path active set head head node path active node path node active set directed path element equivalent terms active active activated interchangeably 
lemma dag isomorphic dependency model dag consistent iff conditions hold 
ab iff bjs 
abc iff abc ac cjs proof basic parts proof condition necessary consistency second condition necessary conditions sufficient 
part consistent condition holds 
consistent independence identical show nodes adjacent iff way separate 
link adjacent nodes path deactivated ab set bjs remains show set bjs adjacent 
suffices consider fx ancestor bg 
assumption separated set case bjs path ae connecting active path active head head node descendent node descendant 
head head node ae node ae ancestor head head nodes path 
node ae exception node ae head head node 
paths satisfying condition case possible 
ancestor common child directed cycle adjacent 
part consistent condition holds 
head head link path de activated set containing rest portion condition follows trivially definition vee structure 
complete proof part consider abc chain ac 
furthermore assume set bjs implies head head path abc set cjs necessarily contain order deactivate path 
ac assumption head head path abc case abc 
part conditions hold consistent dag isomorphic exist dag consistent call parts skeletons vee structures show dags skeletons vee structures active path dag corresponds active path 
links ae path shown path length reduction ae active proof parts part proves ae contains head head nodes active second part proves ae contains head node ae active active third part proves active ae contain head head nodes active contains head head node show ae head head nodes suppose contain head head node called parents ae adjacent graphs share links uncoupled head head nodes 
sequence nodes formed removing ae path parents adjacent 
path active contain head head nodes contained directed loop 
path contradict minimality ae ae contains head head nodes active suppose ae contains head head node parents ae nodes shown 
note may equal may equal ae subpath ae ae subpath ae ae minimal active paths shorter ae reductive hypothesis active adjacent active parents active node follows path ae formed removing ae active contradict minimality ae 
adjacent graph common parents 
head head ae subpaths ae ae active follows ae active iff active active exists directed path node oe shortest path 
remains show length induction oe strictly directed cases oe single link oe contains links 
trivially active oe single link consider parents adjacent common parents sequence nodes ae formed replacing ae active path path contradict minimality ae parent uncoupled loss generality assume uncoupled parents parents graphs share uncoupled head head nodes 
parent active oe contains links consider uvw may equal 
initial subpath oe directed induction 
adjacent shorter directed path uncoupled parents parents parent oe active lemma dag isomorphic dependency model chain abc cjs cjs implies proof suppose abc cjs order separate case head head link path active set containing head head case set contains activate link path bjs definition dependency model satisfying axioms symmetry jz xjz decomposition xy jz jz weak union xy jz xjy contraction jz xjy xy jz lemma bjs cl aa proof proven induction derivation bjs 
derivation length lemma trivial 
length bjs follow rules 
rule antecedent separated manner satisfying inductive hypothesis 
antecedent derivation length lemma holds 

