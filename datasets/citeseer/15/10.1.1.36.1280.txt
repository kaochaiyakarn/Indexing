evolving soccer softbot team coordination genetic programming sean luke cs umd edu charles harris com jonathan wam umd edu gary jackson wam umd edu james hendler hendler cs umd edu department computer science university maryland college park md usa 
explain applied genetic programming behavior team coordination robocup soccer server domain 
genetic programming promising new method automatically generating functions algorithms natural selection 
contrast learning methods genetic programming automatic programming natural approach developing algorithmic robot behaviors 
robocup soccer server challenging domain genetic programming pleased results 
genetic programming produced teams soccer softbots learned cooperate play game simulator soccer 
robocup competition pits robots simulated soccer tournament kitano 
aim robocup competition foster interdisciplinary approach robotics agent artificial intelligence presenting domain requires large scale cooperation coordination dynamic noisy complex environment 
robocup competition leagues real robot league virtual simulation league 
robocup virtual competition players robots computer programs manipulate virtual robots robocup provided simulator robocup soccer server 
soccer server provides simulator environment complex dynamics noisy limited sensor information noisy control real time play 
win soccer match soccer server players overcome issues cooperate team face limited communication ability incomplete world view 
proceedings international workshop robocup ijcai nagoya japan 
springer verlag 

block goal opp closer home mate closer weight away mates ball fig 

typical small gp algorithm tree robocup soccer server model loosely distributed agent coordination dynamic environment reactive behavior approach appealing way coordinate softbot soccer team 
wide variety possible behaviors simple ones number permutations behavior combinations eleven independent players quite high 
hand coding behaviors agent think attractive agents learn behaviors coordination 
interesting ai alife aspects agents learn may find interesting solutions problem overlook 
dynamics robocup soccer simulator complex difficult optimize 
time learned strategy evaluate broad range different behaviors hone successful 
learning strategies neural networks decision trees designed develop algorithmic behaviors learn nonlinear function discrete set variables 
strategies effective learning low level soccer player functions ball interception may suited learning emergent highlevel player coordination 
contrast genetic programming gp uses evolutionary techniques learn symbolic functions algorithms operate domain environment koza 
gp natural learning programmatic behaviors domain soccer server 
describes gp evolve coordinated team behaviors actions soccer softbots robocup 
genetic programming successfully applied times field multiagent coordination 
reynolds gp evolve boids flocking herd coordination 
gp evolve cooperative sporting strategies luke spector haynes iba gp develop cooperation predator prey environments domains 
evolutionary computation rarely applied problem domain difficulty 
goal evolutionary computation develop finely tuned soccer players see evolving fair team possible 
turned pleasantly surprised results 
evolved teams learned disperse field pass dribble defend goal coordinate defer teammates 
kick opponent close kick goal mutation point far mate 
mutation mutation home kick kick opponent close dribble kick goal far mate 
mate kick clear kick goal 
kick goal 
fig 

point mutation operator action 
operator replaces subtree genome randomly generated subtree 
genetic programming genetic programming variant genetic algorithm holland uses evolution optimize actual computer programs algorithms solve task 
gp parlance algorithms known individuals genomes 
common form genetic programming due john koza koza 
form optimizes lisp program trees formed primordial soup atomic functions 
trees serve genetic material individual code resultant algorithm intermediate representation 
example gp tree shown 
gp genome tree thought chunk lisp program code node tree function takes arguments results children node 
way viewed lisp code opp closer block goal mate closer weight home away mates ball block goal opp closer block goal sight weight crossover point home mate closer weight away mates block goal ball ball opp closer sight weight home mate closer weight away mates block goal ball ball crossover crossover fig 

subtree crossover operator action 
operator swaps subtrees genomes 
genetic programming optimizes genome trees process similar genetic algorithm 
user supplies gp system set atomic functions gp may build trees 
additionally user provides evaluation function procedure accepts arbitrary gp genome tree returns assessed fitness genome 
evaluation function assesses fitness tree executing code problem domain 
gp system begins creating large population random trees generation 
uses evaluation function determine fitness population selects fit genome trees applies various breeding operators produce new generation trees 
repeats process successive generations optimally fit genome tree user stops gp run 
gp breeding operators customized deal gp tree structured genomes 
common operators subtree crossover point mutation reproduction 
gp mutation operator shown takes single fit genome replaces arbitrary subtree tree new randomly generated subtree adds resultant tree generation 
gp crossover operator swaps random subtrees fit trees produce new trees generation shown 
gp reproduction operator simply takes fit tree adds generation 
implementation crossover mutation reproduction 
challenge evolutionary computation soccer server complex dynamics didn evolving robot team hard server adds enormously problematic issue time 
provided soccer server runs real time players connect separate udp sockets 
server dispenses sensor information receives control commands milliseconds result games seconds minutes 
game play sped hacking server players unified program removing udp eliminating millisecond delay 
unfortunately variety reasons increase speed dramatically imagined carefully done runs risk changing game dynamics changing game players optimize 
reason problem evolutionary computation genetic programming specific typically requires huge number evaluations new evaluation soccer simulator trial 
previous experiments considerably simpler cooperation domains luke spector genetic programming may require evaluations find reasonable solution 
suspected soccer domain worse 
consider just minute long evaluations serial soccer server require full year evolution time 
challenge cut years weeks months produce relatively playing soccer team evolutionary runs 
accomplished variety techniques tried various evolutionary computation techniques example evolution cut number evaluations 
customized gp variety ways able smaller population sizes numbers generations 
initial experimentation designed function set evaluation criteria promote better evolution domain 
performed simultaneous runs different genome styles promote diversity 
sped play performing single player evaluations full team game evaluations parallel 
cut time minutes seconds minute 
genetic programming evolve soccer behaviors basic function set soccer softbots built consisted terminal functions arity returned sensor information nonterminal functions operated data provided flow control modified internal state variables 
strongly typed gp montana provide variety different types data booleans vectors accepted returned gp functions 
strongly allows user assign type arguments return value function 
forms gp trees constraint types child parent nodes match appropriately 
allowed include rich set gp operators constrain possible permutations function combinations 
function syntax returns description home vector home 
ball vector ball 
zero length vector ball 
block goal vector closest point line segment ball goal defend 
away mates vector away known teammates computed inverse max away vector away known opponents computed inverse max squad am squad nil 
opp closer opponent closer ball am nil 
mate closer teammate closer ball am nil 
home vector home teammate 
block near opp vector closest point line segment ball nearest known opponent known opponent return 
mate vector teammate see return 
return return 
sight rotate just keep ball sight 
return ball max units nil 
return ball max units home nil 
return ball max units goal nil 
weight return 
far mate vector offensive positioned teammate receive ball probability 
return 
mate vector teammate position known receive ball probability 
return 
kick goal vector goal kick successful probability 
return 
dribble dribble kick size max direction 
kick goal 
kick goal 
far mate 
kick offensive positioned teammate 
kick goal 
kick clear kick goal area 
kick away opponents computed away adjust direction degrees goal defend 
kick return return 
opponent close return opponent max constant integer values 
table 
gp functions soccer evaluation runs 
functions included internal state magnitude cross product comparison angle rotation boolean operators move history max approximate maximum distance kicking set 
kick vector move vector integer boolean 
evolving team create set low level basic behavior functions players 
table gives sampling basic functions provided gp system build gp trees 
decided early enrich basic function set vector operators control constructs relatively domain specific behavior functions 
behaviors derived directly soccer server sensor information 
included vector functions kick goal home 
behaviors important include handcoded evolving unsuccessful limited time constraints 
included ball interception surprisingly complex task formed ball moving optimally point objects forming block near opp example 
genetic programming evolve low level behaviors 
notably gp technique symbolic regression evolve symbolic functions determining probability successful goal kick pass teammate opponents various positions 
symbolic regression evolves symbolic mathematical expression best fits set data points basic mathematical operators 
sin 
symbolic regression data points generated playing trials soccer server 
evolved results formed mechanism decisionmaking functions kick goal mate far mate 
meet needs soccer softbot domain significant changes traditional gp genome 
player algorithm consisting single tree players consisted algorithm trees 
tree responsible making kicks evaluated output vector gave direction power kick ball 
tree responsible moving player evaluated output vector gave direction speed turn dash 
evaluation time program executing player moves follow instructions tree depending simplifying state rules player see ball close kick ball call kick tree 
kick ball told moving player slightly way necessary 
turn direction ball kicked 
player see ball isn close kick call move tree 
turn dash told player continue watch ball doing dash moving reverse 
player see ball turn direction turned player see 
basic function set variety ways genetic programming evolve soccer team 
obvious approach form teams populations individual players 
difficulty approach introduces credit assignment problem team wins loses blame credit spread various teammates 
took different approach genetic programming genome entire team players team stay evaluations breeding death 
gp genome team raises question homogenous heterogeneous team approach 
approach soccer player move tree kick tree move tree kick tree team members players squad move tree kick tree players squad move tree kick tree players squad 
homogenous pseudo heterogeneous squad fig 

homogeneous pseudo heterogeneous squad genome encodings follow effectively algorithm gp genome tree pair 
heterogeneous approach soccer player develop follow unique algorithm gp genome just kick move tree pair forest pairs pair player 
domain heterogeneity useful heterogeneous approach provides considerably flexibility promise specialized behaviors coordination 
homogenous approaches take far time develop require evolving single algorithm case soccer domain eleven separate algorithms 
implement fully heterogeneous approach soccer domain necessitate evolving genome consisting separate gp trees far reasonably evolve time available 
ran separate runs homogeneous teams hybrid pseudo heterogeneous teams see 
hybrid teams divided players squad evolved separate algorithm players squad 
way pseudo heterogeneous teams genomes twelve trees 
player develop unique behavior primordial soup included functions player distinguish 
genomes consisted forests trees adapted gp crossover mutation operators accommodate 
runs crossover mutation apply single tree genome homogeneous pseudo heterogeneous approaches disallowed crossover kick tree move tree 
approaches allowed trees cross squad restricted breeding previous experience proven useful promoting specialization luke spector 
introduced special crossover operator root crossover swapped trees subtrees 
allowed teams effectively trade players hoped spread strategies population rapidly 
issue evaluation function needed assess genome fitness 
way assess team play team hand created opponent teams known difficulty 
problems approach 
evolutionary computation strategies typically efficiently difficulty problem ramps evolution progresses population gets better problem gets harder 
suite pre created opponents difficult gauge 
second opponents particular difficulty level runs common risk evolving team optimized beat particular set hand opponents generalizing playing soccer 
opted evolving teams evolution teams fitnesses assessed competition peers 
implementation evaluate fitness teams population gp system paired teams population played matches pair 
team fitness game score game criteria 
evolution chaotic occasionally undesirable effects population natural competitive domains robot soccer 
evolution naturally ramps problem difficulty teams population play peers approximate ability 
evolution promote generalization number opponents population faces size population 
initially fitness variety game factors including number goals time possession ball average position ball number successful passes early runs entire population converge poor solutions 
ultimately simply basing fitness number goals population avoided convergence 
glance simplistic fitness assessment overly crude measure early games scores 
luckily turned untrue 
discovered initial game scores fact high vectors ball goal fundamental parts function set teams simple defense poorly 
teams evolved better defensive strategies scores come reasonable levels 
performed gp runs parallel custom strongly typed multithreaded version lil gp zongker punch running node dec alpha cluster 
speed evolution run time population sizes small gp required large amount mutation prevent premature convergence 
ran final runs generations time re introduced population high fitness individuals past generations 
continued runs time robocup competition twelve generations 
just prior competition held tournament champions teams point submitted winner 
feel evolution time learned strategies pseudo heterogeneous teams ultimately outperform homogeneous teams best teams competition time including submitted homogeneous 
fig 

competition initial random teams 
history evolution benefits working evolutionary computation able watch population learn 
typical evolutionary computation experiment conduct large number runs provides statistically meaningful analysis population growth change 
obvious reasons possible 
shot nature robocup runs final run took months time observations population development admittedly anecdotal 
observed interesting trends 
initial random teams consisted primarily players place ball chased teammates 
ball kick goal 
basic functions occasional players go ball kick goal 
players helped teams rack scores completely opponents 
shows random teams competition 
early populations produced sorts bizarre strategies 
particular favorite homogeneous competition team programmed move away ball team programmed move away team 
strategies didn generations 
fig 

soccer problematic early suboptimal strategy team go ball try kick goal 
careful tuning populations escape 
suboptimal strategy particularly troublesome chase ball kick goal known soccer shown 
strategy gained dominance early teams effectively defensive ability 
soccer proved major obstacle evolving better strategies 
overwhelming tendency converge soccer similar strategies chief reason simplification evaluation function goals scored 
simplified evaluation function population eventually way soccer better strategies 
number generations population began develop rudimentary defensive ability 
approach noted players hang back near goal close ball 
teams players clumped ball soccer style simple defensive moves effectively eliminated long distance goal shots created high scores past 
fig 

players hang back protect goal chase ball 
eventually teams began disperse players field pass teammates appropriate kicking straight goal shown 
homogeneous teams usually players home positions information nearby teammates ball position 
pseudo heterogeneous teams appeared forming separate offensive defensive squad algorithms 
unfortunate pseudo heterogeneous teams sufficiently fit time robocup arrived suspect time approach ultimately yielded strategies 
project begun see possible successfully evolve team challenging domain robocup soccer server 
richness soccer server environment large amount evolution time required get reasonable results pleased outcome 
evolved softbots learned play constraints place evolution 
think experiment success 
fig 

teams eventually learn disperse field 
compromise order project reality 
function set provided heavy flow control functional operation little internal state 
hope try computationally sophisticated algorithms 
hope perform longer runs significantly larger population sizes 
disappointed pseudo heterogeneous teams outperform homogeneous teams robocup competition time 
hope try heterogeneous teams suspect yield better results 
genetic programming successful domains surprisingly difficult adapt especially domains evaluations expensive 
think shows considerably done technique usually thought 
price computer continues drop feel evolutionary computation may attractive variety areas currently purview human programmers 
research supported part dr james hendler onr afosr arl daah arpa contract dast 
lee spector kilian bob daniel john peterson shu choudhury help development project umiacs system staff turning heads played soccer games supercomputers 
haynes 
haynes sen wainwright 

evolving team 
working notes aaai fall symposium genetic programming 
siegel koza editors 

aaai press 

evolving predictive functions observed data simulated robots 
senior honor thesis 
department computer science university maryland college park 

holland holland 
adaption natural artificial systems 
university michigan press 
iba iba 
emergent cooperation multiple agents genetic programming 
koza editor late breaking papers genetic programming conference 
stanford university bookstore stanford ca pages 

soccer server simulator robocup 
ai symposium special session robocup 
december 
kitano kitano asada kuniyoshi noda osawa 
robocup robot world cup initiative 
proceedings ijcai workshop entertainment ai alife 
koza koza 
genetic programming programming computers means natural selection 
mit press cambridge ma 
luke spector luke spector 
evolving teamwork coordination genetic programming 
koza editors proceedings annual conference genetic programming gp 
mit press cambridge ma pages 
montana montana 
strongly typed genetic programming 
evolutionary computation 
mit press cambridge ma 

evolution sporting strategies 
yu editors complex systems mechanisms adaption 
ios press amsterdam pages 
reynolds reynolds 
evolved vision behavioral model coordinated group motion 

meyer editors proceedings second international conference simulation adaptive behavior 
mit press cambridge ma 
zongker punch zongker punch 
lil gp user manual 
available isl cps msu edu ga software lil gp 
