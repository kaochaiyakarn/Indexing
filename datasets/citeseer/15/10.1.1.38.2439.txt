ieee transactions vlsi systems vol 
xx 
month programmable active memories reconfigurable systems come age vuillemin bertin shand touati programmable active memories pam novel form universal reconfigurable hardware processor 
field programmable gate array fpga technology pam virtual machine controlled standard microprocessor dynamically indefinitely reconfigured large number application specific circuits 
pams offer new mixture hardware performance software versatility 
review important architectural features pams example experimental device built 
pam programming contrast classical gate array full custom circuit design 
emphasis large code generated synchronous systems descriptions compromise regard performance target circuits 
exhibit dozen applications pam technology proves superior performance cost existing technology including supercomputers massively parallel machines conventional custom hardware 
fields covered include computer arithmetic cryptography error correction image analysis stereo vision video compression sound synthesis neural networks high energy physics thermodynamics biology astronomy 
comparable cost computing power virtually available pam exceeds conventional processors depending specific application 
technology shrink increases performance gap conventional processors pams 
law predict performance gap widen time 
keywords programmable active memory pam reconfigurable system field programmable gate array fpga 
ways implement specific highspeed digital processing task 
ffl simplest program general purpose computer perform processing hand 
software approach effectively maps algorithm interest fixed machine architecture 
structure machine highly optimized process arbitrary code 
cases poorly suited specific algorithm performance short required speed 
ffl alternative design ad hoc circuitry specific algorithm 
hardware approach machine structure processors storage interconnect tailored application 
result efficient actual circuitry general purpose computers require 
done digital equipment paris research laboratory dec prl france 
vuillemin shand touati members prl research staff 
bertin visiting scientist institut national de recherche en informatique en automatique inria rocquencourt france 
drawback hardware approach specific architecture usually limited processing small number algorithms single 
general purpose computer programmed process computable function know days church turing 
adding special purpose hardware universal machine say video compression speeds processor system compressing video 
contributes system required perform different task say cryptography stereo vision 
alternative machine architecture offers best worlds software versatility hardware performance 
proposal standard high performance microprocessor enhanced pam coprocessor 
pam configured wide class specific hardware systems interesting application 
pams merge hardware software 
presents results years research inria dec prl places 
aim answer questions build pams 
program pams 
applications 
section ii introduces principles underlying fpga technology 
section iii highlights interesting features pam architecture 
describe section iv methods programming large pam designs 
section presents dozen applications chosen wide variety scientific fields 
pam technology outperforms existing implementation media 
hypothetical machine equipped dozen different conventional processors achieve level performance higher price 
reconfiguration pam able time share internal circuitry twelve applications hypothetical machine require different custom circuits physically times 
assess computing power pam technology times 
ii 
virtual circuits commercial fpga introduced xilinx 
revolutionary component large internal configuration memory modes operation download mode configuration memory written external device con ieee transactions vlsi systems vol 
xx 
month figured fpga behaves regular application specific integrated circuit asic 
realize fpga simply connects regular mesh theta identical active bits pabs 
surprisingly ways implement pab required universality 
particular built primitives ffl configurable logic block implements boolean function inputs typically truth table defined configuration bits stored local registers ffl configurable routing block implements connectivity table set local configuration bits 
fpga implements von neumann cellular automaton 
fpga universal structure synchronous digital circuit emulated suitable configuration large fpga slow clock 
vendors xilinx form pabs configurable routing logic blocks 
early ones xilinx concurrent logic atmel combine routing computing functions single primitive fine grain school 
idealized implementation fine grain concept 
third possibility build pab configurable routing box connected fixed non configurable universal gate multiplexor 
clk pab inputs hn wi outputs hn register flip flop input output combinational gate truth table specified theta bits 
fig 

field programmable gate array fpga implementation emulate granted pabs 
order quantitative performance comparisons diverse significant implementations choose unit active bit input boolean function configurable internal bit state see section vi vuillemin 
input functions pab counts units 
fpga virtual circuit behave number different asics takes emulate particular feed proper configuration bits 
means prototypes quickly tested corrected 
development cycle circuits fpga technology typically measured weeks opposed months hardwired gate array techniques 
fpgas just prototypes get incorporated production units 
branches electronics industry mass market fpgas despite fact cost times asics volume production 
fpgas fastest growing part semi conductor industry increasing output compared chips 
consequence fpgas leading edge silicon chips 
grow bigger faster rate enabling technology static ram storing internal configuration 
past years feature size silicon technology shrinking factor ff year 
phenomenon known thesis observed early sixties 
implications thesis fpga technology analyzed vuillemin 
prediction leading edge fpga pabs operating mhz year contain pabs operating mhz 
iii 
pams virtual machines purpose pam implement virtual machine dynamically configured large number specific hardware devices 
fpga array local ram host computer external devices download fig 

programmable active memory structure generic pam 
connected links host processor 
function host download configuration bitstreams pam 
configuration pam behaves electrically logically asic defined specific bitstream 
may operate stand mode hooked external system links 
may operate processor host control specialized speed crucial computation 
may operate connect host external system audio video device pam 
justify choice name observe pam attached high speed bus host computer ram memory module 
processor write vuillemin programmable active memories reconfigurable systems come age fifos host adapter fig 

architecture read pam 
ram pam processes data write read instructions active memory 
specific processing determined contents configuration bitstream updated host matter milliseconds programmable qualifier 
detail architecture specific pam named referred built digital paris research laboratory 
dozen copies operate various scientific centers world credited enumerate operational applications section structure shown 
squares denotes xilinx xc fpga 
rectangles represents mb static ram letter 
line represents wires physically laid printed circuit board pcb photo system shown 
merit structure host natural manner diverse networks processing units section depending application individual units implemented fpgas may implemented look tables lut local ram slow processes implemented software running host 
connections processing units mapped part design configuration pcb wires internal fpga wires 
fpga matrix computational core theta matrix xc letter 
fpga direct connections manhattan neighbors 
fpgas row column share common bit buses 
bit buses traversing array geographical direction purpose organization best extrapolate pcb level internal structure fpga 
close large fpga theta pabs connection bottleneck quarter array fewer wires pcb inside fpga 
thesis implements technology leading edge fpga available single chip 
local ram applications rsa cryptography entirely implemented fpga logic require amount ram buffer re order local data implement specialized luts 
size cache ram mb independent bit wide banks 
bit addresses read write signals ram generated controller fpgas letter 
data ram goes corresponding switch fpga letter applications ram operate mhz 
utilize full ram bandwidth available mb applications ram access critical operate higher clock speeds mhz rsa higher 
external links bit wide external connectors 
represented link edges fpga matrix external connectors 
establishing real time links mhz external devices audio video physical detectors aggregated peak bandwidth exceeds mb fourth external connection links host interface mb adapter 
order avoid having synchronize host pam clocks host data goes fifos input output respectively 
pam side fifos switch fpga shares bit buses switches controllers see 
ieee transactions vlsi systems vol 
xx 
month fig 

interface board host connection consists host independent part implemented mother board part implemented small option board specific host bus 
short cable links parts see 
addition features daughter board connectors provide gb bandwidth specialized hardware extensions 
firmware extra fpga configurable user call pom analogy rom 
function provide control state pam software host 
logical protocol host bus programmed pom configuration 
adapting logical bus format vme pci just matter re programming pom redesigning small host dependent interface board 
function pom assist host downloading pam configuration mb hardware assist able reconfigure times second crucial feature applications 
regard software silicon ms turn time 
take advantage extra feature xc component possible dynamically read back contents internal state register pab 
clock stepping facility main clock trigger clock cycles time host provides powerful debugging tool takes snapshot complete internal state system clock cycle 
feature drastically reduces need software simulation designs 
pam designs synchronous circuits registers updated cycle global clock 
maximum speed design directly determined critical combinational path 
varies pam design 
necessary design clock distribution system speed programmed part design configuration 
clock finely tuned increments order frequencies mhz 
typical design receives logically uninterrupted flow data input fifo 
performs processing delivers results manner output fifo 
host responsible filling emptying side fifos 
firmware supports mode application clock automatically stops attempts read empty fifo write full effectively providing fully automatic transparent flow control 
full firmware functionality may controlled host software 
available hardware design relevant wires brought controller fpgas allows design synchronize manner external links 
unique possibility dynamic tuning clock 
feature designs slow infrequent operation say changing value global controls cycles fast frequent operations 
strategy slow clock vuillemin programmable active memories reconfigurable systems come age infrequent operation cycles speed cycles 
tricky doable 
reconfigurable systems pams built inria perle architecture described detail earlier report dec prl successful implementations reconfigurable systems reported particular universities edinburgh zurich supercomputer research center maryland 
enable machine system built fpgas sram specifically constructed university mannheim solving trt problem section vg 

similar application specific built years reconfigurable nature exploited debugging application 
done final configuration done hardware release 
commercial products exist sells large configurable systems dedicated hardware emulation 
sells modular pam hardware configurations focusing genetic matching algorithms 
systems exist just ones mentioned 
thorough presentation issues involved pam design alternative implementation choices bertin 
iv 
pam programming pam program consists parts 
driving software runs host controls pam hardware 

logic equations describing synchronous hardware implemented pam board 

placement routing directives guide implementation logic equations pam board 
driving software written linked runtime library encapsulating device driver 
logic equations placement routing directives generated algorithmically program 
deliberate choice methodology pam design circuits digital synchronous 
asynchronous features ram write pulses fifo flags decoding clock tuning pushed firmware pom get implemented 
full design large piece hardware excluding ram xc containing pabs roughly equivalent gates 
amount logic barely fit largest gate arrays available 
goal designer encode mb bitstream logic equations placement routing fifteen pabs order meet performance requirements compute intensive task 
achieve goal reasonable degree efficiency designer needs full control final logic implementation layout 
existing computer aided design cad tool adapted needs 
emerging synthesis tools wasteful circuit area delay 
keep mind pay performance penalty sram fpgas raw silicon 
complex designs synthesized placed routed automatically attempt reach high device utilization resulting circuitry significantly slower achieved careful hand placement 
careful low level circuit implementation possible painful laborious process schematic capture 
pam programming schematic capture viable alternative provide best performance labor intensive large designs 
constraints choice middle ground approach designs described algorithmically structural level structure annotated geometry routing information help generate final physical design 
programming tools choose programming language describe circuits 
choices possible generalpurpose programming language hardware description language vhdl language 
discuss approach subject current research 
decided reasons economy simplicity 
vhdl complex expensive language 
programming environments considerably cheaper tapping wider market terms training documentation programming tools 
develop generic software library handle netlist generation simulation amount remains limited 
keep full control generated netlist include circuit geometry information desired 
netlist library describe synchronous circuits library straightforward 
introduce new type net overload boolean operators describe combinational logic add primitive synchronous register 
program written generates netlist representing synchronous circuit 
type low level description convenient basic programming techniques arrays loops procedures data abstraction 
shows example piece code representing generic bit ripple carry adder 
execution program builds netlist memory netlist analyzed translated appropriate format xnf directly simulation 
linking netlist description program behavioral code yields mixed mode simulation special effort 
direct access netlist level description easily annotate logic operators ieee transactions vlsi systems vol 
xx 
month template int 
struct block block void logic net net net net sum net carry input input input output sum output carry int sum carry fig 

circuit description placement directives 
example specify ripple carry adder aligned vertically paired carry sum bits generated logic block simply add lines shown description adder 
void placement net sum net carry int carry sum sum sum offset fig 

circuit layout contrary silicon compilers decade ago placement annotations affect logic behavior generated netlist 
specify contacts specify partitioning logic physical blocks absolute relative placement blocks dimensional grid 
back tool analyzes attributes emulates interface schematic capture software order guarantee placement logic partitioning information preserved fpga vendor software 
runtime library system level programming environment provides main functions device driver interface full simulation support interface 
simulation capability allows designer operate hardware software parts pam program 
device driver interface provides mandatory controls application program usual unix interface open close synchronous asynchronous read write download configuration bitstreams pam fpgas state values pab registers read write pam static rams software control pam board clock 
lessons main lesson draw experience programming tools pam programming easier asic development 
students electrical engineering background able tools weeks training 
particular users easily develop module generators matters days highly skilled engineers able write module generators custom vlsi 
capability main reasons able develop complex applications spanning dozens chips engineers students previously exposed pam matter months 
debugging optimization tools debugging pam design done entirely software 
mixed mode simulation block level allows designers certify datapath components complex designs 
full system simulation eliminate need generating special input patterns test hardware part program 
full system simulation allows hardware software application driver hardware working 
simple bugs removed necessary simulate design large number cycles 
effective technique compile design bitstream download bitstream board run board trace mode single step clock board state cycle collect states analysis possible run mode hz 
simple cases done modification runtime application source code 
complex cases necessary primitives available build application specific code generate analyze traces 
clock generator operated double step mode 
mode clock runs full speed second cycle 
comparing double step traces taken increasing clock frequencies previously recorded single step trace automatically locate critical path design execution 
method alleviates need rely delay simulation provided standard industrial simulation packages 
necessary perform tedious task certifying operating speed final design 
developed screen visualization tool called help analyze traces 
display state flip flop fpga pam board rate tens frames second 
conjunction double step mode detect critical paths execution traces 
interestingly tool proved invaluable demonstrating structure hardware algorithms 
applications applications chosen span wide range current leading edge computational challenges 
case vuillemin programmable active memories reconfigurable systems come age provide brief description design performance comparison similar reported pointers publications describing details 
paradigm systematically applied cast inner loop pam hardware software handle rest 
follows xi denotes quotient deltaj delta remainder euclidean integer division long integer arithmetic reg 
reg 
host data mult 
slice host addr 
reg 
reg 
reg 
cntr 
fig 

long multiplication pams may configured long integer multipliers 
compute product theta bit long multiplier arbitrary size summands may implementation 
multipliers interfaced public domain arbitrary precision arithmetic package programs software automatically benefit pam simply linking modified library 
computes product bits mb radix operations mhz faster previously published benchmarks 
times figures reported buell ward cray ii cyber 
multiplier compute coefficient bit polynomial convolution fir filter times audio real time theta bit samples khz 
operational version multiplier developed week 
subsequent versions refined design basis actual performance measurements developed man days 
aggressive multiplier design reported radix deep pipeline multiplier operates mhz faster times area 
speed design faster conventional multipliers short bit operands 
rsa cryptography investigate tradeoffs hybrid hardware software system focused rsa cryptosystem 
encryption decryption involve computing modular exponentials decomposed sequences long modular multiplications operand sizes ranging bits bits 
starting general purpose multiplier implemented series systems spanning orders magnitude performance years 
system uses differently programmed perle boards operating parallel host 
kb decoding speed faster existing bit rsa implementations regardless technology 
survey previous speed record bit keys rsa decryption vlsi kb data data fig 

rsa cryptography table recalls various original hardware algorithms latest implementation rsa quantifies speedup achieved 
table rsa speedup techniques algorithm speedup chinese remainders precompute powers division carry completion quotient pipelining resulting design rsa cryptography combines techniques see shand vuillemin details 
delivers rsa secret decryption rate excess kb bit keys kb kbit keys 
order magnitude faster previously reported running implementation 
pam implementations rsa rely reconfigurability ways different pam design rsa encryption decryption generate different hardware modular multiplier different prime modulus coefficients binary representation modulus hardwired logic equations design 
molecular biology alphabet probability ij substitution probability resp 
insertion resp 
deletion ieee transactions vlsi systems vol 
xx 
month classical dynamic programming algorithm compute probability transforming word defines distance words word dictionary coefficients distance char 
fig 

string matching applications include automated mail sorting ocr scanners fly keyboard spelling corrections dna sequencing biology 
irisa rennes france implemented algorithm perle design computes distance input word words dictionary reports words dictionary closest input 
system processes words faster solution previously implemented cnet transputers half performance obtained system previously developed irisa custom vlsi chips printed circuit boards 
dna matching algorithm driving application pam developed supercomputing research center maryland reported performance excess obtained existing supercomputers 
commercial sells pam configured number molecular biology search functions 
device coprocessor host server accessed remote procedure call workstation network 
interfaced widely software package transparent speed advantages 
heat laplace equations solving heat laplace equations numerous applications mechanics integrated circuit technology fluid dynamics optics finance 
classical finite difference method provides computational solutions heat laplace equations 
vuillemin shows speed computation help special purpose hardware 
implementation method vuillemin operates pipeline depth operators 
operator computes bit temperatures 
mhz design processes operations add shift second 
smooth problem easily show fixed point yields results floating point operations 
performance achieved bit design exceeds reported ram ram 
fig 

heat laplace equations mcbryan solving problems help supercomputers 
sequential computer execute instructions second order reproduce computation 
raynaud richard improved implementation 
refining statistical analysis show datapath width reduced bits provided rounding low order bit done randomly deterministic round schemes parasitic stable solutions exist significantly perturb result 
implementation uses bit linear feedback shift register randomly set rounding direction processing stage 
datapath width reduction allows extend pipeline length pushing equivalent processing power 
fast dma capabilities large buffer host memory design accurately simulate evolution temperature time volume discretized points arbitrary power source distributions boundaries 
supports multigrid simulation zooms coarser discretization grids order rapidly advance simulated time zooms back full resolution order accurately smooth desired final result 
neural networks implemented hardware emulator binary neural networks boltzmann machine model 
boltzmann machine probabilistic algorithm minimizes quadratic forms binary variables expressions form gamma nn gamma vector binary variables fixed matrix weights 
typically find approximate solutions np hard problems graph partitioning circuit placement 
latest realization solves problems binary variables bit weights total computing power second traditional unit field amounts additions multiplications small coefficients 
multi standard video compression view required input bandwidth mb standard tv color images amount computation required current standards resp 
gop bit integer operations second vuillemin programmable active memories reconfigurable systems come age 
proc proc proc weight ram data ram host fig 

boltzmann machine jpeg dct mpeg custom hardware currently necessary compressing video real time 
matters get complicated different video compression standards emerging 
shows single configurable system perform different designs current leading standards 
jpeg computation specified joint photographic expert group goes stages source image 

dct 

hc 
compressed image initial ram store consecutive lines input image double buffering 
feeds dct module theta square sub images 

dimensional dct discrete cosine transform maps theta squares space frequency domain 

frequency coefficient divided number choice quantization table provides way control compromise compression factor quality decompressed image 

run length arithmetic huffman encodings hc performed quantized values 
mpeg motion picture expert group system motion compensation mc computing correlation blocks time consecutive images 
result difference coded goes processing similar jpeg 
digital video 

mc 

compressed video mpeg requires storage images allowing double buffering 
decoder simpler encoder mpeg decoder requires hardware dct detailed fpga mapping motion estimation algorithm core mpeg standard 
mapping fully laid design straightforward task 
dct vuillemin prl experiment dct version jpeg third dimension time 
ram method requires half hardware mpeg 
leads excellent compression factor appropriate choice quantization table entry cube 
early experiments indicate compression rate quality video subjectively better dct mpeg 
method goes digital video 

dct 
hc 
compressed video diagram numbers arrows indicate transfer bandwidth mb ffl algorithm needs video buffer big store consecutive images twice double buffering dct requires times ram mpeg 
ffl past initial video buffer processing performed straight pipeline operating video cubes size theta theta squares consecutive time 
design computes fixed point operations bit outputs add subtract multiply shift mhz total operations second 
specification software rate algorithm requires lot data movement 
high energy physics image classification calorimeter part series benchmarks proposed cern 
goal measure performance various computer architectures order build electronics required large collider lhc turn millennium 
calorimeter challenging documented cern benchmarks different electronic boxes including fastest current computers architectures different dsp multiprocessors systolic arrays massively parallel systems 
problem typical high energy physics data acquisition filtering theta theta images input particle detectors discriminate image interesting achieved computing simple statistics maximum value second order moment decide sharp peak 
problem difficult high input bandwidth mb low latency constraint 
vuillemin analyzes detail possible implementations calorimeter general purpose computer architectures single multi processors simd nuclear research geneva switzerland ieee transactions vlsi systems vol 
xx 
month mhz sto mhz khz ij mhz lut max max peak sum moment decision fig 

calorimeter datapath jet electron fig 

calorimeter typical input images mimd special purpose electronics full custom gate array fpgas 
provides accurate quantitative analysis computing power required task pam structure meet bound 
algorithm implemented vuillemin 
external capabilities described section iii data input detectors shelf interface boards plugged directly datapath uses half logic ram resources virtual computing power 
image analysis transition radiation tracker trt benchmark cern analyzed report 
problem find straight lines trajectories noisy digital black white image 
algorithm classical hough transform compute number active pixels possible line crossing image physics problem limits candidate lines having small positive negative slope select line maximum number active pixels discard image line sufficient number active pixels 
rate input data mb low latency requirement images preclude implementation solution specialized hardware shown cern 
manner team university mannheim successfully built specialized fpga enable machine solving problem straightforward implementation hough transform 
computes score lines different slopes crossing theta grid required khz rate latency images 
needs twice computing power achieve result 
vuillemin describes log algorithm compute hough transform recursive way analogous fast fourier transform 
resulting gain processing power needed computation just possible fit board 
implemented moll vuillemin 
data directly input detectors boards plugged extension slots 
design computes slopes required khz rate latency image 
bit sequential processor need run ghz achieve computation 
cluster detection nestor telescope construction mediterranean near greece threedimensional array tubes designed detect radiation fast created interactions 
clustered detections actual generated photons expected happen maximum rate second background noise originating radioactive potassium causes random pmt firings rate khz pmt 
board process raw data detect muon trajectories looking space events 
peak average data rates mb mb respectively 
data enters directly wide daughter board connectors see section iii 
provided peak data rate accommodated case solution subsequent processing straightforward see details 
image acquisition adapter see section iii built single xc pam right albeit small 
shand describes number experiments board including interface high energy physics terminology level trigger 
vuillemin programmable active memories reconfigurable systems come age fig 

fast hough transform large frame ccd camera 
camera delivers image data mb flow control 
conventionally interface camera dedicated frame buffer 
interface dispenses buffer transfering incoming image data directly system memory direct memory access dma 
addition obvious cost savings eliminating frame buffer memory system memory captured image immediately available software allows system capture images continuously 
attributes prove essential interface principal image acquisition system swedish vacuum solar telescope system may 
success small pam pamette lead develop new pam board oriented small size explore new kind applications 
shand collaboration wang wei swedish royal observatory investigating board adaptive optics system combining image acquisition image processing fly retro control 
stereo vision part research stereo vision inria focused computing dense accurate reliable range institut de recherche en informatique automatique france 
maps simultaneous images obtained cameras 
selected stereo matching algorithm faugeras recursive implementation score computation method independent size correlation window calibration method require calibration pattern 
stereo matching integrated navigation system inria cart correct inertial odometric navigation errors 
application jointly uses stereo construct digital elevation maps planetary rover 
software implementation selected method computes correlation pair images sparcstation ii 
dedicated hardware implementation digital signal processors dsp developed jointly inria performs task implementation algorithm moll runs times faster key step real time stereo matching 
design uses full mb bandwidth available host 
relies fast reconfiguration processing straight pipeline distinct pam configurations successively swapped time image pair processed 
sound synthesis centre national etudes france ieee transactions vlsi systems vol 
xx 
month fm cur cur fin mmu lev wave table memory times frequency level mix envelope outputs fm fig 

sound synthesizer order explore digital signal processing domain implemented real time digital audio synthesizer capable producing independant voices sampling rate khz 
primarily designed lookup table additive synthesis techniques implementation includes features allows frequency modulation synthesis nonlinear distortion sampling machine 
design contains mb wave table memory shared voice generators partitioned sub tables various sizes allowing simultaneous different sound patterns 
includes ouput mixing section global control 
voices consists ffl phase computation section computes index voice sample selected wave table bit arithmetic output voice computation leads frequency modulation non linear distortion ffl envelope generator static level section computes amplitude value current sample bit arithmetic combines output wave table produce amplitude modulated sample dynamic amplitude envelopes generated linked linear segment techniques ffl control section defines operating mode voice normal oscillator carrier operator frequency modulation non linear transfer fonction operator free running single shot synchronous phase operation wave table size location selection output channel selection output mixing section contains bit accumulators connect stereo digital audio output ports 
synthesizing standard consumer audio format allows direct connection offthe shelf tape recorder audio amplifier mere cable 
parameters controls updated host time parallel running synthesis 
mhz design produces samples second amounts theta bit multiplications alu operations load store operations 
sony philips digital audio interface software implementation algorithm running standard cpus shows implementation equivalent computing power 
simpler version design ported standard dsp processor mhz motorola computes voices required sampling rate 
long viterbi decoder today digital communications systems signal noise ratio snr link severe limitation 
convolutional encoding maximum likelihood viterbi decoding provides means improve snr link increasing power budget important technique satellite deep space communications systems 
coding gain viterbi system primarily determined constraint length code complexity decoder increases exponentially today vlsi implementations typically offer codes 
nasa galileo space probe equipped constraint length rate encoder viterbi decoder array custom vlsi chips developed 
macquarie university sydney australia shand vuillemin prl implemented viterbi decoder galileo code 
board ram trace possible states encoder design computes states parallel ns clock cycle decoding speed kb coding gain measured db optimal gain particular code 
analytical method prove particular code provides optimal coding gain constraint length 
advantage pam reconfigurability system perform code search constraint length convolution codes recompiling new configuration fly code 
vi 
computing power pam quantify computing power pam processor 
earlier reports define virtual computing power pam pabs operate hertz product theta resulting power expressed boolean operations second 
mhz find leading edge single fpga 
mhz pam virtual computing power roughly equivalent get single fpga near year 
particular choice unit measuring computing power input combinational function bit serial binary adder composed functions inputs counts unit 
accounting techniques apply high density magnetic storage devices equivalent reasons 
particular choice unit function affects measure constant factor provided keep bounded fan 
vuillemin programmable active memories reconfigurable systems come age small medium large bandwidth mb computing power fpga area ram size mb unit cost table ii vital figures currently feasible pams rules follow arithmetic logic operations bit wide inputs straightforward 
bit addition worth 
subtraction integer comparison logical operations bit wise equivalent addition 
theta theta 
bit multiplication worth nm 
division integer shifts transitive see vuillemin bit permutations bit wise equivalent multiplication 
due great variety operations required application quantitative performance comparison different computer architectures challenging art 
instructions second mips floating point operations second mflops traditional units measuring computing power 
definition bit standard microprocessor operating mhz mips virtual computing power mhz bit processor features 
mhz bit floating point multiplier delivering operation cycle mflops rate 
follows accounting virtual computing power higher fastest integer microprocessor existing 
vii 
shown possible build highperformance pams applications large number domains 
table ii updates feasible technology 
technology curves pam cost performance derive fpga static ram basis extrapolation 
compare respective merits possible implementation technologies specific highperformance system 
high performance means computational requirement far exceeds possibilities fastest micro processor 
leaves implementation possibilities program parallel machine design specific pam configuration build custom system 
involve software third involves hardware 
review comparative merits technology 

reported pam design implemented tested months starting hardware multiplier delivery specification software 
roughly equivalent time takes implement highly optimized software version system supercomputer technically challenging orders magnitude faster takes cast system custom asics printed circuit boards 

specific high speed computational problems pam technology proved superior performance cost current forms general purpose processing systems pipelined machines massively parallel ones networks microprocessors cost comparable high workstation 
lower cost supercomputer 
figures mcbryan price operation second solving heat laplace equations times higher supercomputers 
pam technology currently best applied low level massively repetitive tasks image signal processing 
due software complexity current supercomputer applications remain outside possibilities current pam technology 

real time problems pams performance cost equal specific custom systems lower volume better pam 
tuning specific application pam shown high performance implementations possible 
cases section performance achieved implementation exceeds order magnitude implementation including custom vlsi ones 

important field applications accessible pam technology high bandwidth interfaces external world fully programmable realtime capability 
bit wide connectors capable deliver gb external bandwidth 
simple matter hardware programming interface directly external device programming communication protocol pam 
applications include high bandwidth networks audio video input output devices data acquisition 
carter freeman hsieh ja mahoney ngo sze user programmable reconfigurable logic array ieee custom integrated circuits conference pp 

xilinx programmable gate array data book xilinx logic drive san jose ca usa 
hill britton oswald woo singh poon new architecture high performance fpgas field programmable gate arrays architecture tools rapid prototyping hartenstein editors lecture notes computer science nr 
springerverlag 
configurable logic data book edinburgh uk 
ieee transactions vlsi systems vol 
xx 
month concurrent logic cli series field programmable gate arrays concurrent logic parkway sunnyvale ca usa 
plessey semiconductors era electrically reconfigurable array data sheet plessey semiconductors sn qw uk 
vuillemin computing power programming languages system architectures gutknecht editor lecture notes computer science nr 
springer verlag pp 

digital equipment hardware specification dec document ek aa od 
bertin vuillemin programmable active memories systolic array processors jr editors prenticehall pp 

buchanan fpgas novel computing subsystem st international acm workshop gate arrays pp 
berkeley ca usa 
pfister chameleon workstation different color field programmable gate arrays architecture tools rapid prototyping hartenstein editors lecture notes computer science nr 
springerverlag 
arnold buell davis splash ii th acm symposium parallel algorithms architectures san diego ca usa pp 

enable systolic nd level trigger processor track finding pi discrimination atlas lhc proc 
ieee nucl 
sci 
symp san francisco ca usa pp 

systems rpm emulation system data sheet systems east road mountain view ca usa 
product brief st ha israel 
bertin conception programmation th ese de doctorat universit paris paris france 
gajski editor silicon compilation addison wesley 
shand bertin vuillemin hardware speedups long integer multiplication computer architecture news vol 
pp 

lyon complement pipeline multipliers ieee trans 
comm vol 
com pp 

vuillemin herv portable efficient package arbitrary precision arithmetic prl report digital equipment paris research laboratory av 
victor hugo cedex france 
buell ward integer arithmetic package journal supercomputing vol 
pp 
kluwer academic publishers boston ma usa 
variable precision multiplier field programmable gate arrays nd international acm sigda workshop field programmable gate arrays berkeley ca usa february 
rivest shamir adleman method obtaining digital signatures public key cryptosystems cacm vol 
pp 

survey hardware implementations rsa crypto lecture notes computer science nr 
springerverlag pp 

shand vuillemin fast implementation rsa cryptography th ieee symposium computer arithmetic windsor ontario canada pp 

lopresti nac systolic array comparing nucleic acid sequences computer vol 
pp 

feynman leighton sands feynman lectures physics volumes addison wesley 
lions mathematical analysis numerical methods sciences technology volumes springerverlag 
vuillemin contribution la esolution num des equations de laplace de la mathematical modelling numerical analysis edited gauthier rairo vol 
pp 

mcbryan connection machine application performance scientific applications connection machine world scientific pp 

mcbryan frederickson linden 
multigrid methods parallel computers survey developments impact computing science engineering vol 
pp 
academic press 
raynaud richard esolution num des equations de laplace de la rapport option ecole polytechnique palaiseau cedex france 
hardware emulator binary neural networks international neural network conference vol 
pp 
paris 
exact hardware implementation boltzmann machine international conference application specific array processors dallas tx usa 
field programmable gate array systolic computing symposium integrated systems pp 
mit press cambridge ma usa 
bock ph 
centro davis 
manner ni odor 
evaluating parallel architectures real time applications khz repetition rate ieee trans 
nucl 
sci vol 
pp 

bertin bock manner moll shand vuillemin memories real time tasks implementing data driven triggers lhc experiments appear journal nuclear instruments methods physics research elsevier publishers amsterdam nl 
moll vuillemin high energy physics programmable active memory appear acm international symposium fpgas monterey ca usa february 
vuillemin fast linear hough transform international conference application specific array processors pp 
ieee computer society press 
shand vuillemin implementation nestor level trigger rd nestor international workshop greece october 
shand measuring system performance reprogrammable hardware prl report digital equipment paris research laboratory av 
victor hugo cedex france august 
kodak motion analysis systems kodak camera model eastman kodak march 
simon brandt november shine large scale motions results extraordinary eleven hour observation solar surface rutten schrijver editors nato asi series kluwer 
faugeras vi th vuillemin hotz zhang moll bertin mathieu fua berry real time correlation stereo algorithm implementations applications research report inria sophia antipolis france 
moll implantation un algorithme de st er par corr sur active programmable perle rapport de stage ecole des mines de paris centre de math ematiques appliqu ees sophia antipolis france 
statman zimmerman collins long constraint length vlsi viterbi decoder dsn progress report jet pasadena ca usa july sept 
lee vuillemin shand implementation long constraint length viterbi decoders programmable active memories th australian microelectronics surfers paradise qld australia 
bertin vuillemin programmable active memories performance assessment symposium integrated systems seattle wa usa mit press 
vuillemin combinatorial limit computing power vlsi circuits ieee transactions computers april 
hennessy patterson computer architecture quantitative approach morgan kaufmann 
vuillemin programmable active memories reconfigurable systems come age thacker computing digital equipment systems research center lytton palo alto ca usa 
jean vuillemin graduate ecole polytechnique 
received ph 
stanford university paris university 
taught computer science university california berkeley universit orsay 
inria dec prl 
professor de vinci 
authored papers program semantics algorithm design analysis combinatorics hardware structures 
current research interests concern programmable hardware theory implementations applications 
patrice bertin received engineer degree ecole polytechnique palaiseau france ph 
computer science degree universit paris paris france 
worked pam project digital equipment paris research laboratory visiting scientist inria institut national de recherches en informatique en automatique rocquencourt france 
currently new de vinci university la near paris france 
mail address patrice bertin inria fr 
didier received degrees electrical engineering computer science computer music paris university 
worked paris france research acoustic computer music 
joined jean vuillemin team inria started pam project 
went digital equipment paris research laboratory worked principally pam project hardware architectures 
currently de vinci university paris france investigating designs generic pci low cost pams specific pam architectures digital audio computer music applications 
mail address didier inria fr 
mark shand born sydney australia 
attended university sydney received bs degree phd degree 
thesis vlsi cad 
spent australian government csiro continuing vlsi cad 
employed digital equipment paris research laboratory worked principally programmable active memories project 
currently sabbatical leave digital equipment swedish royal observatory stockholm sweden investigating uses pam technology high performance image acquisition processing 
herv touati received ph 
degree berkeley 
research scientist digital equipment paris research laboratory 
founded 
philippe received engineer degree ecole nationale sup erieure des el paris france 
worked pam project digital equipment paris research laboratory 
currently mhs france microcontroller design department 
mail address philippe fr 
