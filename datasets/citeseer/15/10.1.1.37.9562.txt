middleware architecture distributed system services philip bernstein digital equipment cambridge research lab crl march help solve heterogeneity distributed computing problems vendors offering distributed system services standard programming interfaces protocols 
standard programming interfaces easier port applications variety platforms giving customer vendor independence 
standard protocols enable programs interoperate 
distributed system services called middleware sit middle layering operating system networking software industry specific applications 
classifies different kinds middleware describes properties explains evolution 
goal provide common vocabulary conceptual model understanding today tomorrow distributed system software 
cr categories keywords phrases distributed system framework information utility interoperability middleware portability system engineering transaction processing monitor 
digital equipment 
rights reserved 
trademarks referenced alpha axp nas open vms trademarks digital equipment 
aix ibm registered trademarks ibm 
windows trademark microsoft 
osf registered trademark open software foundation 
sparcstation trademark sun microsystems 
open trademark open author address digital equipment kendall square building cambridge ma 
internet crl dec com computing facilities large scale enterprises evolving utility power telecommunications 
vision information utility knowledge worker desktop appliance connects utility 
desktop appliance computer computer device terminal personal computer workstation word processor stock trader station 
utility enterprise wide network information services including applications databases local area wide area networks 
servers local area network typically support files file applications electronic mail bulletin boards document preparation printing 
local area servers support directory service help desktop user find users find connect services interest 
servers wide area network typically support database access corporate directories electronic libraries transaction processing applications purchasing billing inventory control 
servers gateways services offered outside enterprise travel information retrieval services news feeds weather stock prices electronic document interchange business partners 
response connectivity businesses redefining business processes utility bridge isolated component activities 
long term utility provide information people need format need 
today enterprise computing facilities approximation vision information utility 
organizations wide variety heterogeneous hardware systems including personal computers workstations mainframes 
systems run different operating systems oss rely different network architectures 
result integration difficult achievement uneven 
example local area servers isolated wide area network 
appliance access files printers local server servers local area networks 
application available local area server available servers departments servers application run 
appliances access application 
wide area servers support dumb terminals desktop appliance emulate access server 
desktop appliance gain access wide area server local area server explicitly programmed access wide area server 
desktop appliance access remote application spreadsheet word processor access data provided application special programming 

response implementing enterprise wide information systems large enterprises vendors help solve heterogeneity distribution problems supporting standard programming interfaces protocols 
standard programming interfaces easier port applications variety server types giving customer vendor independence 
increasingly important server vendors customers buy applications servers customers choose server run applications want 
standard protocols enable programs interoperate 
interoperate mean program system access programs data system 
interoperation possible systems protocol message formats sequences 
applications running systems similar semantics messages map operations applications understand 
systems supporting protocol may different machine architectures oss interoperate 
help solve customers heterogeneity distribution problems enable implementation information utility vendors offering distributed system services standard programming interfaces protocols 
services called middleware sit middle layering os networking software industry specific applications 
large enterprises application developers heterogeneity distribution problems vendors solve 
developers need layer applications standard programming interfaces applications run popular systems 
increases potential market helps large enterprise customers run applications different types systems 
developers need higher level interfaces mask complexity networks protocols allowing developers focus application specific issues qualified add value 
customers focus buying applications underlying computer systems vendors anxious meet requirements attract popular applications systems 
large enterprises vendors respond application developers offering middleware 
new applications middleware components important underlying os networking services applications depended 
example new applications depend relational database system os record oriented file system remote procedure call mechanism transport level messaging send message receive message 
general middleware replacing non distributed functions oss distributed functions network 
applications programming interface provided middleware defines application computing environment 
legacy applications built portable middleware popular benefit middleware services 
encapsulate application set application functions middleware provide remote access high level communications services provide advanced user interface high level presentation services 
replace internal interfaces functions call middleware services 
example replace application specific communications functions middleware communications services 
saves maintenance relying middleware vendor improves functionality middleware vendor greater resources expend distributed system functions application developer 
classifies different kinds middleware describes properties explains evolution 
goal provide common vocabulary conceptual model understanding today tomorrow distributed system software 
main sections middleware services distributed system services core middleware frameworks software environments consisting middleware services tailored specific application domains tp monitors example important class framework product illustrates concepts system engineering task integrating middleware coherent system trends middleware products architectures headed 
middleware services describe properties middleware problems don solve 
see 
middleware service general purpose service sits platforms applications see fig 

platform mean set low level services processing elements defined processor architecture os application programming interface api intel win sun sparcstation sun os ibm rs aix alpha axp 
middleware middleware service defined apis protocols supports 
may multiple implementations conform interface protocol specifications 
middleware services distributed 
middleware service usually includes client part supports service api running application application apis platform interfaces 
middleware distributed system services platform hardware 
os platform hardware os application address space server part supports service main functions may run different address space different system 
may multiple implementations part 
middleware services run multiple platforms enhancing platform coverage applications depend services 
service distributed enhances interoperability applications different platforms service communicate exchange data 
platform coverage middleware services usually programmed portable meaning able ported platform modest predictable effort 
ideally middleware service supports standard protocol published 
way multiple implementations service developed implementations interoperate 
middleware service really run popular platforms may regarded standard protocols published 
example database system products property 
middleware service transparent respect api accessed api modifying api 
non transparent middleware requires new api 
transparent middleware easily accepted market applications existing api new service modification 
example different distributed file sharing protocols implemented standard file access api digital product includes file services personal computers 
useful consider middleware services separate category system software software components fit definition fit 
decision classify service middleware may change time 
facility currently regarded part platform may middleware simplify os implementation service generally available platforms 
example regard record oriented file system standard part oss commercial oss developed 
today think middleware implementations conform open api 
conversely middleware migrate platform improve middleware performance increase commercial value platform 
example interfaces transport level protocols regarded communications access methods products separate os 
usually bundled os 
components middleware services presentation management forms manager graphics manager hypermedia linker printing manager 
computation sorting math services services character string manipulation data converters time services 
information management directory server log manager file manager record manager relational database system object oriented database system repository manager 
communications peer peer messaging remote procedure call message queuing electronic mail electronic data interchange 
control thread manager transaction manager resource broker fine grained request scheduler coarse grained job scheduler 
system management event notification accounting configuration manager software installation manager fault detector recovery coordinator authentication service auditing service encryption service access controller 
services currently distributed portable standard 
sufficiently large number middleware abstraction worthwhile 
categories listed arbitrary presentation computation 
just convenient way grouping services 
main purpose middleware services help solve problems discussed 
provide platform independent apis applications run multiple platforms 
include high level services mask complexity networks distributed systems 
middleware services arise need factor commonly functions independent components shared platforms software environments 
middleware services panacea 
gap principles practice 
middleware services proprietary apis usually making applications dependent single vendor product proprietary unpublished protocols making difficult different vendors build interoperable implementations available important platforms limiting customer ability connect heterogeneous systems 
middleware service state art application developer depends added new risk manage risk service keep pace technology 
example applications layered network databases rewritten benefit relational database systems replaced de facto standard 
second large number middleware services barrier 
small number middleware services lead programming complexity considers service full api including service calls language bindings system management interfaces data definition facilities 
keep computing environment simple developers select small number services meet needs functionality platform coverage 
third middleware services raise level abstraction programming distributed applications leave application developer hard design choices 
example developer decide functionality put client server sides distributed application 
usually beneficial put presentation services client side close display data services server side close database 
isn ideal case leaves open question put application functions 
frameworks framework software environment designed simplify application development system management specialized application domain see fig 

typically includes set middleware services software tools may include specialized api user interface 
popular types frameworks include office system environments transaction processing monitors computer aided design frameworks computer aided software engineering system management 
framework architecture framework api may profile apis set middleware services may new api simplifies apis underlying middleware services abstracts 
example cad case framework api may consist particular presentation service particular invocation service call tools user interface particular repository service store persistent data shared tools simply union services apis abstracted new api maps services 
framework api different underlying services may veneer covers underlying services common syntax 
adds significant value specializing user interface simplifying api maintaining shared context adding framework specific middleware services 
api veneer tool application framework local service framework user interface application apis platform interfaces 
middleware distributed system services platform hardware 
os platform hardware os framework layers middleware framework provider customer middleware 
token application layers framework framework customer indirectly middleware customer 
wide variety complexity middleware services substantial growing fraction applications frameworks directly accessing middleware services 
analogous past trend applications move away direct platform services rely heavily middleware services 
framework may user interface specialization graphical user interfaces guis underlying platforms runs special look feel 
example office system framework may specialize gui provide appearance desktop icons layout suitable office users applications 
way framework simplify api maintaining context calls different services 
example frameworks service calls require user identifier access control device identifier communications binding parameters 
framework maintain identifiers context application require parameters simplifying api 
maintaining context unique property frameworks service maintain context context usually local service 
framework simplify api exploiting model require features middleware services uses 
example case environment may offer simplified interface software configuration management expose features underlying repository manager 
improves ease increases number services transparent respect apis 
framework offers middleware service private framework usually framework requires service standard middleware service available 
example transaction processing tp monitors private implementation remote procedure call rpc 
availability osf distributed computing environment dce includes rpc tp monitors replacing proprietary rpc implementations standard dce middleware 
example case cad frameworks offer framework specific services versioning configuration management 
services may replaced standard middleware repository technology emerges standard 
frameworks usually include tools generic applications framework easier 
tools may designed users programmers system managers 
may provided framework vendor parties 
may designed particular framework variety frameworks 
example tools include editors help facilities forms managers compilers debuggers performance monitors software installation managers 
strictly speaking framework need tools practice sufficiently attractive human users 
tool part framework integrated data control presentation 
data integration tool shares usually persistent data tools part framework 
requires tools agree object model model data formats defined format shared data 
format defined tool owns exports data tools data provided cope owning tool format 
times data equally shared tools case tool vendors negotiate data format 
cases tools may share line access fine grained data may transfer data bulk tool tool 
data accessed line tools may agree protocol set operations allowed data allowed sequences operations 
control integration user tool operating framework invoke tool called tool exchange data control signals appropriately caller 
involves making tool interface known framework invoking tool creating instance tool necessary exchanging messages tool 
useful tool executes different system framework executing case control integration requires remote invocation service 
presentation integration tool shares display tools executing framework 
preferably look feel tools usually graphical user interface tools adopting standard usage conventions offering similar semantics operations cut paste drag drop 
look feel may guided metaphor virtual desktop leads usage conventions screen space control panel layout presentation integration drives requirements data control integration 
example spreadsheet invoked compound document editor data spreadsheet contents control launching spreadsheet application integration needed presentation integration allowed user express concept 
pragmatically presentation control integration usually urgently needed data integration users need multiple tools want deal tool specific look feel invocation technique 
contrast great benefits data integration tools useful easy integration 
presentation control integration easier implement data integration 
control integration tool independently integrated general guidelines 
true presentation integration ease integration depends tools common gui 
contrast data integration requires tool vendors agree common format data share 
data accesses scattered tool implementation changing data format tedious expensive 
tp monitors example illustrate middleware concepts look type framework transaction processing tp monitors 
main function tp monitor coordinate flow requests terminals devices application programs process requests 
request message asks system execute transaction 
application executes transaction usually accesses resource managers database communications systems 
typical tp monitor includes functions transaction management transactional inter program communications queuing forms menu management see fig 

tp monitor architecture transaction management involves support operations start commit abort transaction 
interfaces resource managers database systems accessed transaction resource manager tell transaction manager accessed transaction transaction manager tell resource managers transaction committed aborted 
transaction manager implements phase commit protocol ensure resource managers accessed transaction commit see chapter 
transactional inter program communications supports propagation transaction context program calls 
allows called program access resources behalf transaction caller 
communications paradigm may peer peer send message receive message remote procedure call send request receive reply 
queue manager resource manager supports usually persistent storage data move transactions 
basic operations enqueue dequeue 
distributed queue manager invoked remotely may provide system manager operations forward elements queue 
forms transactions rpc queuing tp monitor api sql db indexed files middleware mapping tp monitor api context device id msg middleware apis user id transaction id menus forms manager supports operations send receive forms display devices 
development system defining forms translating internal format run time system interpreting content form application 
early tp monitors implemented functions framework specific services relying platform services 
today services available shelf middleware 
tp monitors built today shelf services record managers transaction managers queue managers 
services may directly applications middleware database system frameworks office system framework 
services subject efforts standardize apis protocols 
example open working standard apis transaction management transactional communication iso working protocol standard queuing working api standard forms management 
tp monitors highly dependent platform built 
today monitors layered middleware services portable 
designed dependent middleware platform sits middleware 
selected middleware services portable ported platforms osf dce 
tp monitors ported variety platforms 
example ibm built new implementation cics tp monitor layered transaction middleware transarc announced implementation ported non ibm unix systems 
tp monitor integrates services re accessible simplified uniform api 
way simplifies api maintaining context avoid passing certain parameters 
example tp monitor typically maintains context current request transaction user 
application functions need specify information 
tp monitor fills necessary parameters translating application call call underlying middleware service 
example application may ask enqueue message tp monitor add parameters current transaction identifier queue manager tell transaction manager accessed transaction user identifier queue manager check user authorization 
tp monitor may specialize user interface 
example may stylized interface login display errors display interaction menus 
tp monitor generally incorporates tools application programming 
example may include data dictionary sharing record definitions forms manager application programs database system 
example data integration 
may include computer aided software engineering case framework simplifying invocation tools compilation software configuration management testing 
example control presentation integration 
tp monitor incorporates tools system management 
tools allow display state transaction request determine components currently unavailable monitor performance tune performance parameters 
system management may implemented framework ties system management facilities tp monitor platform database system system management functions resources managed way device 
customers buy complete tp system system vendor including tp monitor database system platform 
system vendor may may author tp monitor software 
system vendor responsible ensuring complete software complement suitable performance reliability usability system engineering important way add value set middleware services integrating coherent system 
example ensure common naming architecture compatible performance characteristics support international character sets execute platforms 
integrated services encapsulated framework need 
example osf distributed computing environment dce integrated set services framework 
making services distinguishes integrated system set commodity services 
activity creating integrated system called system engineering 
applications middleware systems measured variety dimensions including usability integration conformance standards extensibility manageability performance portability reliability scalability security 
call pervasive attributes apply system just system components 
users want see applications rate highly pervasive attributes 
application programmers help accomplish layering applications middleware rates highly attributes 
system engineers improve things ensuring set middleware uniformly attains certain pervasive attributes common naming compatible performance characteristics 
may defining building codes applications middleware services common way common naming conventions influencing design middleware services require particular security service authenticate callers selecting services compatible trading performance portability services ensure system performance 
today system engineering ad hoc activity 
pervasive attributes performance reliability techniques measuring analyzing implementing systems meet specified goals 
attributes little theory technique apply common sense orderly engineering process 
trend increase shelf components build software systems better techniques system engineering urgently needed 
developing techniques major opportunity challenge computer systems research community 
addition integrating middleware services system important characterize result integration 
performance attribute common practice characterize system behavior benchmarks 
attributes characterize system relative specific functional capability dept defense orange book security labels 
attributes characterization difficult generally agreed metrics extensibility ease 
developing metrics major research opportunity 
pervasive attributes step developing metrics propose definitions pervasive attributes 
usability extent system component helps users jobs efficiently effectively user system manager programmer user 
usability improved example improving system behavior relative pervasive attributes reliability performance improving user interfaces simplifying commands making effective graphics 
sense usability master attribute improving system relative pervasive attribute improves usability 
ability clients components service tool application execute multiple hardware components network acceptable cost efficiency 
ideally distribution transparent application accesses service way service local remote remote accessed local area wide area network 
space time application service distributed time exchange information executing time exchanging messages queue 
phases system life cycle high level design programming testing deployment execution 
integration ability applications consistent manner perform tasks users information system 
integration includes interoperability uniformity aspects 
interoperability extent set components invokes operations exchanges information effectively 
uniformity extent set components constant respect set attributes equally distributable reliable secure 
interoperability sufficient integration attained gateways specific combination components integrated 
due lack uniformity gateway integration hard performs poorly 
conformance standards extent software de de facto standards 
standard customers usually mean widely available multiple vendors sold high volume inexpensive 
usually prefer standard defined international standard body isn required 
customers standard interfaces protocols solve portability interoperability problems promote price competition vendors conform turning computing components commodity products 
system software developers standards standard creates market components buy sell 
implementations standards important example software reusability 
implementations purchased shelf products large vendor builds implementation avoid having software product build non standard implementation 
extensibility ease system adapted meet new requirements 
includes ability add modify program data type causing unwanted side effects requiring changes existing programs data 
ability develop applications display information languages formats appropriate countries cultures applications 
fully application require re engineering support new language culture support multilingual data mixtures languages 
manageability extent system managers economically configure monitor diagnose maintain control resources computing environment 
ideally resources managed way distributed system lifecycle resources 
performance ability produce timely results acceptable cost 
performance factors include response time efficiency utilization throughput 
portability ease software moved platform 
involves designing platform independent interfaces avoid modifying interfaces platform isolating platform dependent components avoid reimplementing components porting new platform 
reliability extent expected results occur repeated trials including availability system process information needed 
reliability measured mean time failures mtbf availability mtbf mtbf mttr mttr mean time repair 
scalability ability solve small large scale problems 
measures problem size amount resources required processors disks memory number users database size input rate 
security protection information computer resources unauthorized 
involves support authentication identify source request access control determine requester authorized perform requested operation auditing evidence attempt authentication request execution 
trends concept middleware long time specific components constitute middleware change time 
earlier explained os services migrate middleware middleware services migrate os 
strong driver middleware evolution new applications areas mobile computing groupware multimedia 
new applications usually new requirements met existing middleware services 
initially vendors build frameworks meet requirements 
longer term successful framework specific service generates demand outside context framework directly frameworks usually available independent piece middleware 
diversity middleware customers application developers cope 
customers standards bodies responding problem developing profiles include subset middleware services cover limited set essential functions duplication service selected type 
open portability guide especially known profile 
unfortunately different profiles select different services putting heavy burden vendors want sell customers require different profiles 
hurts users vendors dilute resources investing different profiles 
standards groups sensitive problem working harder coordinate efforts avoid proliferation competing standards 
market sort certain components profiles low cost commodities making hard components profiles compete 
profiles simplify set middleware lead integration problems 
independently designed middleware services may hard certain usage guidelines adopted common name format common context user session identifiers 
addition popular implementations services may able coexist platform re engineering 
example may generate naming conflicts may require different versions underlying os communications services 
defining profile needs profile level architecture addresses issues 
unfortunately profile leave vendors customers sort 
vendors responding complexity middleware 
formed jointly large users identify profiles vendors customers need 
open object management group examples 
working integrate sets middleware services single component 
example osf dce integrates rpc directory time security file services 
osf pursuing similar style effort distributed management environment dme 
individual vendors publishing preferred sets middleware interfaces tell application developers count 
example digital doing network application support nas microsoft windows open services architecture 
long term complexity current middleware untenable 
developing new middleware service vendor immediately embark path service de facto standard 
seemingly works vendor best interest prematurely technology 
application vendors won rely middleware service re confident de facto standard 
vendor unappealing alternative early standardization wait vendor follows path rendering vendor technology obsolete 
technologies defined independent standards bodies 
standards truly open may implemented multiple vendors 
vendor implementation supports standard functions vendors compete better attainment pervasive attributes extending functionality non standard high value ways 
case pursue standardization route extensions application vendors resist 
large enterprises relying middleware support current approximations information utility 
trends simplify middleware expand functionality new application areas increase reliance 
acknowledgments arose years dozens engineers digital nas middleware architecture products 
wendy scott davis hans chip barry john miles smith david stone mark storm especially leo stimulating discussions middleware issues helping develop key abstractions article 
am grateful people suggested improvements manuscript ed mark john romano judy hall mei hsu hans de jong murray mazer 

bernstein transaction processing monitors 
cacm nov 

bernstein hadzilacos goodman concurrency control recovery database systems 
addison wesley reading mass 

chappell 
osf distributed management environment 
connexions oct 

king steven middleware 
data communications march 

romano network application support architecture manual digital press appear 

fisher understanding dce 
reilly assoc california 

open portability guide 
open reading 
