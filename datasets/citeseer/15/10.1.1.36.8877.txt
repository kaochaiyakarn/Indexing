software practice experience vol 
month value numbering preston briggs tera computer avenue east seattle wa keith cooper taylor simpson rice university main street mail houston tx summary value numbering compiler program analysis method allows redundant computations removed 
compares hash approaches derived classic local algorithm partitioning approaches alpern wegman zadeck historically hash algorithm applied single basic blocks extended basic blocks 
improved technique operate routine dominator tree 
partitioning approach partitions values routine congruence classes removes computations congruent value dominates 
extended technique remove computations define value set available expressions avail able apply version morel renvoise partial redundancy elimination remove redundancies 
presents series hash algorithms series refinements partitioning technique 
series proved method discovers predecessors 
unfortunately relationship exists global techniques 
programs hash techniques eliminate redundancies partitioning techniques partitioning wins 
experimentally compare improvements techniques applied real programs 
results useful commercial compiler writers wish assess potential impact technique implementation 
key words code optimization value numbering redundancy elimination value numbering compiler program analysis technique long history literature practice 
name originally applied method improving single basic blocks describe collection optimizations vary power scope 
primary objective value numbering assign identifying number value number expression particular way 
number property expressions number compiler prove equal possible program inputs 
numbers find redundant computations remove 
objectives accomplished certain forms value numbering 
recognize certain algebraic identities theta simplify code expand set expressions known equal 
ccc received sept fl john wiley sons revised december briggs cooper simpson 
evaluate expressions operands constants propagate values code 
describes different techniques assigning numbers handling redundancies 
ways accomplish goals methods applied different scopes 
includes experimental evaluation relative effectiveness different approaches 
value numbering compiler assign expressions value number prove produce equal values 
techniques proving equivalence appear literature ffl approach hashes operator value numbers operands produce value number resulting expression 
hashing provides efficient representation expressions known point analysis 
hash techniques line methods transform program immediately 
efficiency relies constant expected time behavior hashing 
approach easily extended propagate constants simplify algebraic identities 
ffl second approach divides expressions procedure equivalence classes value called congruence classes 
values congruent computed operator corresponding operands congruent 
methods called partitioning algorithms 
partitioning algorithm runs line run completion transforming code 
run log time number nodes edges routine static single assignment ssa graph partitioning algorithm propagate constants simplify algebraic identities 
value numbers assigned redundancies discovered removed 
techniques possible ranging ad hoc removal data flow techniques 
distinct contributions 
include algorithm value numbering routine dominator tree algorithm unified hash table entire procedure extension alpern wegman zadeck partition global value numbering algorithm perform avail removal expressions partial redundancy elimination experimental comparison techniques context optimizing compiler 
hash value numbering cocke schwartz describe local technique uses hashing discover redundant computations fold constants 
unique expression identified value number 
computations basic block value number provably equal 
literature technique derivatives called value numbering 
shows high level pseudo code value numbering single basic blocks 
algorithm uses arrays maintain mapping variable names value numbers 
vn array maps variable names value numbers name array maps value numbers variable names 
instruction block top bottom find value numbers operands hash operator value numbers operands obtain unique number 
value computed block cai paige give line linear time algorithm uses multiset discrimination alternative hashing 
value numbering assignment form op block expr op vn expr simplified expr replace right hand side simplified expression expr expr expr hash table value number vn vn name replace right hand side name available value number vn add expr hash table value number name 
basic block value numbering exist hash table 
original variable contains value recomputation replaced variable 
verify condition look name corresponding value number verify value number vn name 
operator known constant arguments evaluated resulting value replace subsequent 
algorithm easily extended account commutativity simple algebraic identities affecting complexity 
variables get assigned new values compiler carefully keep track location expression hash table 
consider code fragment left side 
statement expression hash table available redefined 
handle making entry name array contain list variable names carefully keeping lists date 
statement situation worse hash table available 
original ssa form 
value numbering example briggs cooper simpson described technique operates single basic blocks 
minor modifications apply expanded scope called extended basic block extended basic block sequence blocks predecessor unique predecessor 
apply value numbering single extended basic block simply apply single block algorithm block sequence order results gamma initialize tables works single predecessor block multiple successors may member extended basic block 
example consider construct shown 
block contained extended basic blocks fb fb blocks related common prefix 
fact intersection extended basic blocks non empty common prefix 
collection extended basic blocks related intersection forms tree trees form forest representing control flow graph 
start block block multiple predecessors correspond root tree block single predecessor child tree structure avoid processing basic block 
tree representation extended basic blocks leads straight forward efficient technique value numbering 
suggests tree processed preorder walk scoped hash table similar processing declarations language nested lexical scopes point processing scoped table contains sequence nested scopes block ancestor current block 
ffl new blocks processed new scopes created table 
entries added current scope supersede entries name enclosing scope 
searches performed starting innermost scope proceeding outward matching entry 
ffl algorithm returns upward block undo effects processing block 
scoped table corresponds deleting block scope table 
restore entries name vn arrays 
practice adds fair amount overhead complication algorithm change asymptotic complexity 
scoped table matches tree structure sets related blocks 
lets algorithm avoid reprocessing blocks appear multiple extended basic blocks 
section shows properties static single assignment form eliminate name array avoid complication restoring vn array 
static single assignment form difficulties encountered value numbering extended basic blocks overcome constructing static single assignment ssa form routine basic idea constructing ssa form give unique names targets assignments routine overwrite uses assignments new names 
special assignments called oe functions inserted select appropriate definition definition site unique ssa name reaches point routine 
oe function inserted join point name original routine 
practice save space time oe functions placed certain join points certain names 
specifically oe function placed value earliest location value numbering hj phi phi phi phi phi phi phi phi phi phi phi phi hj hj phi phi phi phi phi phi phi phi phi phi phi phi hj oe 
conversion ssa form joined value exists 
oe function defines new name original item function ssa names current join point predecessors 
uses original name oe function replaced oe function result 
oe function selects value input corresponds block control transferred assigns value result 
critical property ssa naming discipline imposes code 
ssa name assigned value exactly operation routine name reassigned expression inaccessible 
advantage approach apparent code converted ssa form 
statement expression replaced second assignment name similarly expression statement replaced transition single extended basic blocks simpler fact scoped hash table new entries removed 
eliminate name array longer need restore vn array 
dominator value numbering technique extend scope optimization requires mechanism handling points control flow graph paths converge 
method extended basic blocks covers maximal length regions merges 
handle merge points rely understood idea classic optimization analysis dominance 
flow graph node appears path start node node dominates strictly dominates ae 
immediate dominator idom closest strict dominator routine dominator tree parent node immediate dominator 
notice nodes dominate node ancestors dominator tree 
aside naming discipline imposed key feature ssa form information provides way values flow basic block 
value enter block ways defined oe function start flows parent dominator tree immediate dominator 
observations lead briggs cooper simpson procedure block mark new scope oe function form oe meaningless redundant put value number vn remove vn add hash table assignment form op overwrite vn vn expr hy op zi expr simplified expr replace expr expr expr expr hash table value number vn remove vn add expr hash table value number successor adjust oe function inputs child dominator tree clean hash table leaving scope 
dominator value numbering technique algorithm extends value numbering larger regions dominator tree 
algorithm processes block initializing hash table information resulting value numbering parent dominator tree 
accomplish scoped hash table 
value numbering proceeds recursively walking dominator tree 
shows high level pseudo code algorithm 
simplify implementation algorithm ssa name occurrence expression path dominator tree expression value number 
eliminates need name array value number ssa name 
clarity surround ssa name represents value number angle brackets hx 
redundant computation expression compiler removes operation replaces uses defined ssa name expression value number 
compiler replacement scheme limited region code 

value number replace redundant computation block dominated occurrence 

value number replace redundant evaluation parameter oe node value numbering corresponding control flow block dominated occurrence 
find oe node parameters compute dominance frontier block containing occurrence expression 
dominance frontier node set nodes dominates predecessor strictly dominate df fy pred ae 
cases know control flow block evaluation occurred defining ssa name value 
oe functions require special treatment 
compiler analyze oe functions block previously assigned value numbers inputs 
possible cases specifically oe function input value flows back edge respect dominator tree value number 
parameters oe function assigned value number compiler analyze oe function assign unique new value number result 
conditions guarantee oe function parameters block assigned value numbers 
procedure see called recursively children block dominator tree children processed reverse postorder 
ensures block predecessors processed block predecessor connected back edge relative dfs tree 

block incoming back edges 
conditions met analyze oe functions block decide eliminated 
oe function eliminated meaningless redundant 
oe function meaningless inputs value number 
meaningless oe function removed result replaced value number input parameters 
oe function redundant computes value oe function block 
compiler identify redundant oe functions hashing scheme analogous expressions 
additional information conditions controlling execution different blocks compiler compare oe functions different blocks 
value numbering oe functions instructions block algorithm visits successor block updates oe function inputs come current block 
involves determining oe function parameter corresponds input current block overwriting parameter value number 
notice resemblance step corresponding step ssa construction algorithm 
step performed value numbering block children dominator tree compiler going analyze oe functions 
illustrate algorithm works apply code fragment 
block processed expressions seen names assigned ssa name value number 
block processed expression defined block dominates delete assignments block assigning value number hv finish processing block fill oe function parameters successor block argument oe functions corresponds input block replace hu hv hv respectively 
ssa construction algorithm uses dominance frontiers place oe nodes briggs cooper simpson hj phi phi phi phi phi hj phi phi phi phi phi oe oe oe hj phi phi phi phi phi hj phi phi phi phi phi oe oe oe 
dominator tree value numbering example block visited 
right hand side expression seen assign value numbers hu hw hw respectively remove assignments 
finish processing fill second parameter oe functions hu hw hw respectively 
final block processed step examine oe functions 
notice able examine oe functions processed children dominator tree reverse postorder back edges flowing oe function defining meaningless parameters equal value number hu 
eliminate oe function assigning value number hu interesting note oe function meaningless eliminating assignment block dominance frontier 
words eliminate assignment block eliminate reason oe function inserted construction ssa form 
second oe function combines values appearance oe function parameters assigned ssa name value number 
oe function defining redundant equal eliminate oe function assigning value number hx processing assignments block replace operand value number 
results expression hu hx assignment assignment eliminated giving value number hu notice applied single basic block value numbering example redundancies remove assignments applied block value numbering remove assignments dominator value numbering remove assignments value numbering incorporating value numbering ssa construction described dominator value numbering applied routines ssa form 
possible incorporate value numbering ssa construction process 
advantage combining steps improve performance optimizer reducing amount performed reducing size routine ssa representation 
algorithm dominator value numbering ssa construction 
great deal similarity value numbering process renaming process ssa construction renaming process modified follows accomplish renaming value numbering simultaneously ffl name original program stack maintained contains subscripts replace uses name 
accomplish value numbering stacks contain value numbers 
notice element vn array represents value number vn array represents stacks value numbers 
ffl inventing new name oe function assignment check eliminated 
push value number oe function assignment stack defined name 
unified hash table improvement hash value numbering possible 
walk dominator tree unified table single hash table entire routine 
illustrates technique differs dominator value numbering 
blocks siblings dominator tree entry removed scoped hash table processing block processing block occurrences expression assigned different value numbers 
hand hash table entries removed unified table 
allows occurrences assigned value number hx unified hash table important algorithmic consequence 
replacements performed line table longer reflects availability 
previous algorithms existence expression hash table meant expression computed earlier program 
relationship expressions exists approach 
immediately remove expressions table 
example unsafe remove computation block computations simplified meaningless oe function block may directly removed 
second pass code eliminate redundancies 
fortunately unified hash table results consistent naming scheme entire routine required avail removal partial redundancy elimination described 
strictly speaking unified hash table algorithm global technique works acyclic subgraphs 
particular analyze oe functions blocks incoming back edges assign unique value number oe function block 
value partitioning alpern wegman zadeck technique uses variation aho hopcroft ullman formulation hopcroft dfa minimization algorithm partition values briggs cooper simpson procedure rename value number block mark new scope oe function name meaningless redundant value number push vn remove invent new value number push vn add hash table assignment form op overwrite top vn top vn expr hy op zi expr simplified expr replace expr expr expr expr hash table value number push vn remove invent new value number push vn add expr hash table value number successor adjust oe function inputs child dominator tree rename value number clean hash table leaving scope oe function assignment original name defined pop vn 
value numbering ssa construction value numbering oe hj phi phi phi phi phi hj phi phi phi phi phi hj phi phi phi phi phi hj phi phi phi phi phi 
unified hash table congruence classes 
operates ssa form routine values congruent computed opcode corresponding operands congruent 
legal expressions congruent values equal 
definition congruence recursive routines solution unique 
trivial solution set ssa name routine congruent solution seek maximum fixed point solution contains congruent values 
algorithm differs slightly alpern wegman zadeck 
describe algorithm operates structured programming language ssa form modified oe functions represent structures oe enter oe exit functions represent loop structures 
extensions ssa form allow oe functions compared oe functions different blocks 
true oe enter oe exit functions 
order general implementation value partitioning operates pure ssa form means oe functions different blocks congruent 
shows partitioning algorithm 
initially partition contains congruence class values defined operator program 
partition iteratively refined examining uses members class determining classes subdivided 
partition stabilizes registers oe functions routine congruence classes congruent definitions name 
words ssa name replace occurrence program name chosen represent congruence class containing effects partitioning renumbering similar value numbering unified hash table described previous section think technique form global intraprocedural value numbering 
value partitioning unified hash table algorithm necessarily discover equivalences provide consistent naming expressions entire routine 
partitioning renaming improve running time routine rosen wegman zadeck describe technique called global value numbering 
interesting powerful approach redundancy elimination confused value partitioning 
briggs cooper simpson place values computed opcode congruence classes worklist classes initial partition worklist select delete arbitrary class worklist position touched add uses position touched class ae touched ae create new class touched gamma worklist add worklist add smaller worklist 
partitioning algorithm find remove redundant computations 
explore possible approaches dominator removal avail removal partial redundancy elimination 
dominator removal alpern wegman zadeck suggest removing computation dominated definition congruence class 
computation redundancy method eliminate 
computation block dominates hj phi phi phi phi phi phi phi phi phi phi hj hj phi phi phi phi phi phi phi phi phi phi hj 
program improved dominator removal value numbering hj phi phi phi phi phi phi phi phi phi phi hj hj phi phi phi phi phi phi phi phi phi phi hj 
program improved avail removal computation block second computation removed 
perform dominator removal compiler considers congruence class looks pairs members dominates 
bucket sort members class preorder index dominator tree block computed efficiently compare adjacent elements list decide dominates 
decision ancestor test dominator tree 
entire process done time proportional size congruence class 
avail removal classic approach redundancy elimination remove computations set available expressions avail point appear routine 
approach uses data flow analysis determine set expressions available paths start routine 
notice calculation removed avail set 
fact computation removed dominator removal removed avail removal 
block dominates paths start routine dominated block 
improvements avail technique possible dominators 
calculated avail set calculation removed 
dominate dominator removal remove properties value numbering renaming algorithm simplify formulation avail 
traditional data flow equations deal lexical names equations deal values 
important distinction 
need consider killed set block values redefined ssa form partitioning preserves property 
consider code fragment left side 
code produced value numbering renaming assignments equal 
traditional data flow framework assignment kill expression 
assignment caused assignments different values congruent assigned different names 
partitioning algorithm determined briggs cooper simpson entry block pred defined example data flow equations 
avail removal assignments congruent second redundant removed 
way intervening assignment name value computed congruent definition reaches assignment data flow equations shown 
partial redundancy elimination partial redundancy elimination pre optimization introduced morel renvoise partially redundant computations redundant execution paths 
pre operates discovering partially redundant computations inserting code fully redundant removing redundant computations 
figures computations redundant paths block removed pre 
hand computation block pre inserts copy evaluation prove insertion followed removal newly redundant code path longer 
practice prevents removing partially redundant expressions inside constructs 
hj phi phi phi phi phi phi phi phi phi phi hj hj phi phi phi phi phi phi phi phi phi phi hj 
program improved partial redundancy elimination value numbering gamma gamma gamma gamma oe oe improved hash techniques improved partitioning techniques 
comparing techniques removed avail removal available path block value computed twice path path considered partially redundant 
pre move computation block block inserts copy computation making computation redundant 
removes computation shorten path leave length path unchanged 
pre added advantage moves invariant code loops 
comparing techniques effects hash value numbering unified table value partitioning similar techniques discover different sets equivalences 
assume known equal code fragment left column 
partitioning algorithm find congruent congruent careful examination code reveals congruent zero 
partitioning technique discover equal discover expressions equal zero 
hand hash approach conclude zero 
critical difference hashing partitioning algorithms identified example notion equivalence 
hash approach proves equivalences values partitioning technique considers congruent computations equivalent 
code example hides redundancy algebraic identity 
techniques value equivalence discover common subexpression 
hash approach combines congruence finding constant propagation produce optimization powerful sum parts 
click described precisely combining optimizations profitable consider code fragment right column 
apply hash approaches example able prove equal time value number assigned expressions congruent operator 
partitioning technique discover compute value 
briggs cooper simpson techniques visited assign different value numbers partitioning technique prove congruent congruent 
key feature partitioning algorithm possible initial optimistic assumption values defined operator congruent 
proceeds disprove instances assumption false 
contrast hash approaches pessimistic assumption values equal proceed prove equalities possible 
point eliminating redundancies necessarily result reduced execution time 
effect result way different optimizations interact 
primary interactions register allocation optimizations combine instructions constant folding peephole optimization 
replacement affects register allocation potential shortening live ranges operands lengthening live range result 
precise impact replacement lifetimes values depends completely context impact demand registers difficult assess 
address intermediate code replacement opportunities shorten live range opportunity extend live range 
believe impact replacements demand registers negligible issue deserves study 
interaction value numbering optimizations affect execution time optimized program 
example illustrates removing redundancies may result improved execution time 
code block loads value second element common block called foo code block loads element common block 
compared value numbering single basic blocks value numbering extended basic blocks remove redundancies 
particular computation register needed value register definition longer block due constant folding definition definition partially dead path block path path block taken run time computation unused 
hand value numbering single basic blocks remove definition definition removed dead code elimination 
result paths cfg short possible 
optimizations fold combine optimizations constant propagation peephole optimization produce analogous results 
test suite routine exhibits behavior 
experimental results prove partitioning techniques form hash value numbering worse predecessor terms eliminating redundancies equally important question theoretical distinction matters practice 
assess real impact techniques implemented optimizations experimental fortran compiler 
compiler centered intermediate language called pronounced eye lock 
pseudo assembly language risc machine arbitrary number symbolic registers 
load store operations provided access memory computations operate symbolic registers 
front translates fortran 
optimizer organized collection unix filters consume produce 
design allows easily apply optimizations order 
back produces code instrumented count number value numbering hj phi phi phi phi phi hj phi phi phi phi phi foo load foo load original program hj phi phi phi phi phi hj phi phi phi phi phi foo foo load load hj phi phi phi phi phi hj phi phi phi phi phi foo foo load foo load extended basic blocks single basic blocks redundancies removed fewer removed hj phi phi phi phi phi hj phi phi phi phi phi foo foo load load hj phi phi phi phi phi hj phi phi phi phi phi foo load foo load final code final code 
interaction optimizations briggs cooper simpson tomcatv fpppp single extended dominator avail pre supp single extended dominator avail pre saxpy single extended dominator avail pre si heat yeh single extended dominator avail pre sigma inter single extended dominator avail pre 
comparison hash techniques spec benchmark value numbering svd fmin spline decomp solve rkf single extended dominator avail pre 
comparison hash techniques fmm benchmark instructions executed 
comparisons routines suite benchmarks consisting routines drawn spec benchmark suite forsythe malcolm moler book numerical methods refer fmm benchmark 
routine optimized different ways varying type redundancy elimination value numbering followed code removal motion 
achieve accurate comparisons varied type redundancy elimination performed 
complete results shown figures 
bar represents dynamic counts operations normalized leftmost bar 
routines optimized sequence global redundancy elimination global constant propagation global peephole optimization dead code elimination operator strength reduction redundancy elimination global constant propagation global peephole optimization dead code elimination copy coalescing pass eliminate empty basic blocks 
forms value numbering performed ssa form routine 
hash approaches unified table method 
global name space needed avail removal pre 
tests run processor sparc model running mhz mb cache mb memory 
figures compare hash techniques 
general refinement technique results improvement results 
see significant improvements moving single basic blocks extended basic blocks dominator removal 
surprising aspect study differences dominator removal avail removal small practice 
differences avail removal pre significant 
ability pre move invariant code loops contributes greatly improvement 
examples value formulation avail removal better pre operates lexical names 
figures compare partitioning techniques 
results similar sizes test cases matrix tomcatv reduced ease testing 
suggests situation depicted occurs infrequently tested codes combination optimizations catch situation 
appears explanation correct 
briggs cooper simpson tomcatv fpppp dominator avail pre supp dominator avail pre saxpy dominator avail pre si heat yeh dominator avail pre sigma inter dominator avail pre 
comparison partitioning techniques spec benchmark value numbering svd fmin spline decomp solve rkf dominator avail pre 
comparison partitioning techniques fmm benchmark results hash comparison 
figures compare unified hash table version dominator tree value numbering value partitioning code removal motion strategies 
hash value numbering eliminates significantly redundancies value partitioning 
due fact hash value numbering fold constants simplify algebraic identities 
frequent practice global redundancies identified value partitioning 
table compares time required hash value numbering value partitioning larger routines test suite 
number blocks ssa names operations indicate size routine optimized 
cases hash value numbering runs faster value partitioning 
routine blocks ssa names operations hash partitioning tomcatv fpppp table compile times value numbering techniques briggs cooper simpson tomcatv fpppp dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash supp dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash saxpy dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash si heat yeh dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash sigma inter dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash 
comparison hash vs partitioning techniques spec benchmark value numbering svd fmin spline decom solve dominator partitioning dominator hash avail partitioning avail hash pre partitioning pre hash 
comparison hash vs partitioning techniques fmm benchmark summary study variety redundancy elimination techniques 
introduced technique applying hash value numbering routine dominator tree 
technique superior practice value partitioning techniques faster simpler 
additionally improved effectiveness value partitioning removing computations available values dominance information applying partial redundancy elimination 
experimental data comparing effectiveness type value numbering context optimizing compiler 
data indicates extensions existing algorithms produce significant improvements execution time 
interest problem began suggestions jonathan ibm bob morgan dec independently suggested investigate value numbering dominator regions 
bruce knobe urged look extending value numbering larger regions 
referees number detailed comments suggestions improved exposition content 
colleagues massively scalar compiler project rice played large role 
particular owe debt gratitude cliff click tim harvey jiang john lu nat mcintosh philip rob lisa thomas linda torczon 
implementation efforts completed study 

john cocke jacob schwartz programming languages compilers preliminary notes technical report courant institute mathematical sciences new york university 
briggs cooper simpson 
bowen alpern mark wegman kenneth zadeck detecting equality variables programs conference record fifteenth annual acm symposium principles programming languages san diego california january pp 


john cocke global common subexpression elimination sigplan notices 
proceedings symposium compiler optimization 

etienne morel claude renvoise global optimization suppression partial redundancies communications acm 

cai robert paige look ma hashing arrays conference record eighteenth annual acm symposium principles programming languages orlando florida january pp 


ron cytron jeanne ferrante barry rosen mark wegman kenneth zadeck efficiently computing static single assignment form control dependence graph acm transactions programming languages systems 

alfred aho ravi sethi jeffrey ullman compilers principles techniques tools addisonwesley 

charles fischer jr richard leblanc crafting compiler benjamin cummings publishing redwood city ca 

john reif symbolic programming analysis linear time conference record fifth annual acm symposium principles programming languages tucson arizona january pp 


thomas lengauer robert endre tarjan fast algorithm finding dominators flowgraph acm transactions programming languages systems 

matthew hecht flow analysis computer programs programming languages series elsevier northholland vanderbilt avenue new york ny 

alfred aho john hopcroft jeffrey ullman design analysis computer algorithms addison wesley reading massachusetts 

barry rosen mark wegman kenneth zadeck global value numbers redundant computations fifteenth principles san diego california january pp 


cliff click combining analyses combining optimizations ph thesis rice university 

spec release september 
standards performance evaluation 

george forsythe michael malcolm cleve moler computer methods mathematical computations prentice hall englewood cliffs new jersey 

preston briggs keith cooper effective partial redundancy elimination sigplan notices 
proceedings acm sigplan conference programming language design implementation 

mark wegman kenneth zadeck constant propagation conditional branches acm transactions programming languages systems 

frances allen john cocke ken kennedy reduction operator strength steven muchnick neil jones eds program flow analysis theory applications prentice hall 

keith cooper taylor simpson christopher operator strength reduction technical report tr center research parallel computation rice university october 
