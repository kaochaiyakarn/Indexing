optimal approximation algorithm bayesian inference paul dagum michael luby approximating inference probability pr xje sense single evidence node np hard 
result holds belief networks allowed contain extreme conditional probabilities conditional probabilities arbitrarily close 
previous approximation algorithms failed approximate efficiently inferences belief networks extreme conditional probabilities 
prove approximate efficiently probabilistic inference belief networks extreme conditional probabilities 
construct randomized approximation algorithm bounded variance algorithm variant known likelihood weighting algorithm 
bounded variance algorithm algorithm provably fast inference approximation belief networks extreme conditional probabilities 
bounded variance algorithm construct deterministic approximation algorithm current advances theory pseudorandom generators 
contrast exponential worst case behavior previous deterministic approximations deterministic bounded variance algorithm approximates inference probabilities worstcase time subexponential log integer linear function depth belief network 
keywords bayesian inference approximation belief networks section medical informatics stanford university school medicine stanford california 
international computer science institute berkeley ca approximation algorithms belief networks powerful graphical representations probabilistic dependencies domain variables 
belief networks successfully realworld problems diagnosis prediction forecasting example papers included 
various exact algorithms exist probabilistic inference belief networks 
special classes belief networks algorithms shown compute conditional probabilities efficiently 
cooper showed exact probabilistic inference general belief networks np hard 
cooper result prompted constructions approximation algorithms probabilistic inference trade complexity running time accuracy computation 
algorithms comprise simulation approximations 
simulation algorithms source random bits generate random samples solution space 
simulation algorithms include straight simulation forward simulation likelihood weighting randomized approximation schemes 
variants methods backward simulation exist neal provides overview theory simulation algorithms 
search algorithms search space alternative instantiations find probable instantiation 
methods yield upper lower bounds inference probabilities 
search algorithms probabilistic inference include nestor algorithms restricted level bipartite noisy belief networks general algorithms 
approximation algorithms categorized nature bounds estimates produce reliability exact answer lies bounds 
inference problem instance characterizes forms approximation instance real value ffl belief network binary valued nodes arcs conditional probabilities pr hypothesis node set evidence nodes instantiated respectively absolute relative approximations refer type approximation error defined follows absolute approximation estimate pr xje gamma ffl pr xje ffl relative approximation estimate pr xje gamma ffl pr xje ffl deterministic randomized approximations refer probability approximation specified bounds 
approximation algorithm deterministic produces approximation specified bounds 
contrast approximation algorithm randomized approximation fails specified bounds probability ffi 
parametrize size input approximation algorithm size input bounded polynomial function example algorithms designed approximate inference belief networks may number belief network nodes size largest conditional probability table 
deterministic algorithm running time approximation procedure pr xje said polynomial polynomial ffl gamma randomized algorithm running time defined polynomial polynomial ffl gamma ln ffi gamma simulation algorithms examples randomized approximation algorithms search algorithms examples deterministic approximation algorithms output absolute approximations 
types algorithms known require exponential time estimate hard inferences 
example forward simulation likelihood weighting algorithms require exponential time converge small inference probabilities 
algorithms estimate inference probability pr xje ratio probabilities pr pr require exponential time rare hypotheses rare evidence 
search algorithms heuristic algorithms require exponential time approximate inference probabilities 
example know single node allow nodes extreme conditional probabilities values near polynomial time algorithm generate deterministic approximations inference probability pr xje absolute error ffl np randomized approximations absolute error ffl failure probability ffi np rp 
complexity exact approximate computation inference probabilities pr xje belief networks extreme conditional probabilities remained 
known results categorize problems np hard previous approximate inference algorithms failed output reliably solutions polynomial time exact algorithms exponential worst case run times 
construct bounded variance algorithm proves complexity approximating inferences belief networks extreme conditional probabilities polynomial time solvable 
bounded variance algorithm simple variant known algorithm employs results design optimal algorithms monte carlo simulation 
consider node belief network extreme conditional probabilities evidence set constant size 
prove small failure probability ffi bounded variance algorithm approximates inference pr xje relative error ffl time polynomial ffl gamma ln ffi gamma prove belief networks extreme conditional probabilities probabilistic inference approximation polynomial time solvable np hard 
bounded variance algorithm randomized algorithm associated failure probability ffi 
current advances theory pseudorandom generation algorithm 
resulting algorithm algorithm 
previously known deterministic algorithms example search methods output relative approximations require exponential running time worst case 
prove deterministic algorithm outputs relative approximation pr xje worst case subexponential time log integer 
integer depends depth belief network longest directed path root node leaf node 
small deterministic bounded variance algorithms offers substantial speedup known exponential worst case behavior previous deterministic algorithms 
prove belief network contains extreme conditional probabilities efficiently approximate certain inferences provided conditional probabilities nodes inference probability pr xje extreme prove bounded variance algorithm deterministic algorithm approximate pr xje efficiently 
apply results belief networks extreme conditional probabilities provided conditional probabilities nodes appear inference probability extreme 
deterministic versus randomized algorithms introduce difference deterministic randomized algorithms contrast complexity deterministic algorithms complexity randomized algorithms simple case algorithms output absolute approximations 
randomized algorithms random bits generate samples solution space 
computer scientists shown randomization renders problems tractable polynomial time approximations 
problems constitute complexity class rp 
generate deterministic approximations polynomial time problems rp major open problem 
yao shows pseudorandom generators exist generate deterministic approximations problem rp subexponential time log integer 
constructions deterministic approximation algorithms specific problems rp rely conjectures existence pseudorandom generators achieved subexponential time 
far algorithms require substantially increased run time comparison randomized approximation algorithm problem 
deterministic algorithms significant advantages require random bits fail produce approximation 
random bits computationally expensive poor source random bits biases output 
furthermore failure probability randomized algorithm small increasing run time know algorithm fails output valid approximation approximate inference probability pr randomized algorithms attempt find small number instantiations set nodes representative probability space omega omega pr omega denotes set instantiations phi ae omega denote subset instantiations instantiation pr phi denote fraction instantiations phi instantiate nodes subset phi preserves properties probability space subset nodes instantiation nodes inference probability pr phi differs probability pr absolute error ffl 
refer set phi preserving set 
monte carlo theory proves exists preserving set phi size ffl 
result follows directly chebyshev inequality 
unfortunately theory provide method construct deterministically set phi 
prove nonzero probability ffl instantiations generated monte carlo algorithm provides set phi 
example simple randomized algorithm forward simulation generate complete instantiations belief network nonzero probability set instantiations generated ffl simulations provides preserving set 
efficiency randomized approach improves substantially complexity deterministic search algorithms 
algorithms output absolute approximations randomized approach requires cases polynomial time search algorithms require exponential worst case time 
tradeoff course output ffl simulations randomized algorithm may fail provide preserving set phi estimates computed output simulations valid approximations 
know verify efficiently outcome ffl simulations provides preserving set 
monte carlo theory proves small sets phi preserving properties probability spaces exist researchers attempted decades monte carlo algorithms deterministic constructions sets 
early latin hypercube sampling dimensional problems uniform grids multidimensional problems 
methods led exponentially large sets phi 
advances theoretical computer science pseudorandom generators shed light deterministic construction small sets phi 
heart methods lies ability stretch short string truly random bits long string pseudorandom bits 
pseudorandom bits appear random specific model computation inputs randomized algorithm model computation 
stretching possible bit strings length pseudorandom bit strings generate deterministically set sample points phi 
current methods stretching short random bit strings longer pseudorandom bit strings construct sets phi subexponential development field may ultimately elucidate methods deterministically constructing sets phi approach ffl bound suggesting rp randomized approximation section bounded variance algorithm 
formally characterize class belief networks extreme conditional probabilities local variance bound belief network 
bound captures representational expressiveness complexity inference belief networks 
prove boundary class belief networks intractable approximations polynomial approximations 
construct polynomial approximation algorithms class 
define follows 
belief network node parents fy denote maximum denote minimum pr instantiations fy 
maximum ratio nodes instantiations binary valued belief networks example reduces ratio max gammal gammau node interval contains conditional probability pr instantiations 
note interval contains pr instantiations contains pr instantiations 
assumptions rest nodes binary valued number nodes size belief network belief network bounded polynomial integer assumption simplifies presentation derandomized algorithms apply belief networks arbitrary ary valued nodes similar running time results 
assumption simplifies presentation 
assumption valid provided conditional probability table entries polynomial function 
classes belief networks polynomial parametrize belief network size 
case prove convergence times relative approximations polynomial subexponential input size bounded variance derandomized algorithms respectively 
results apply belief networks bounded polynomial 
cases may interesting space requirement belief network encoding computational time approximation may exponential function number nodes exponential function 
large storage computation intractable 
likelihood weighting algorithm want approximate inference probability pr xje 
generate relative approximations inference probabilities pr pr relative errors ffl ratio pr pr represents relative approximation pr xje relative error ffl 
construct absolute approximations pr xje absolute approximations pr pr 
chebyshev inequality proves algorithms forward simulation generate absolute approximations pr pr polynomial time approximations estimate pr xje type error 
generate approximations inference probabilities pr xje algorithms proceed follows 
denote belief network nodes contained subset decompose full joint probability pr belief network path probability ae weight distribution ae pr pr notation appended functions pr pr denotes instantiation arguments respectively 
path probability represents probability distribution space omega jzj instantiations set nodes weight distribution represents random variable probability space mean 
omega ae pr 
sample probability space mean oe values generated samples converges pr limit infinite samples define new random variable equal instantiates node equal 
mean random variable delta omega ae pr sample distribution ae limit infinite samples mean oe values converges pr 
complete description likelihood weighting algorithm show generate samples distribution ae 
generate sample probability ae root nodes belief network 
root node belongs set instantiate root node choose number uniformly interval set pr 
chosen uniformly interval probability pr precisely pr 
probability pr algorithm instantiates probability pr instantiates 
root nodes instantiated proceed set nodes parents instantiated 
nodes belong set instantiate set outcome random sample 
proceed instantiate nodes method generates instantiation desired probability ae 
discussed means oe oe random variables respectively converge inference probabilities pr pr limit infinite samples 
generate relative approximations require probability gamma ffi estimates oe oe approximate pr pr relative error ffl 
generate samples polynomial time run time likelihood weighting algorithm depends number samples required guarantee convergence 
likelihood weighting algorithms interested upper bound guarantees ffl ffi pr gamma ffl oe ffl gamma ffi equal pr pr 
zero estimator theorem gives upper bound number ffl ln ffi provided probability pr pr small example number samples polynomial algorithm converges polynomial time 
unfortunately consists nodes node instantiated rare value pr satisfy constraint 
furthermore pr satisfy constraint verify priori 
likelihood weighting algorithm revisited interested efficient algorithm approximate inference probabilities 
efficient version likelihood weighting algorithm suggests 
refer version likelihood weighting bounded variance algorithm distinguish algorithm described section 
likelihood weighting algorithm bounded variance algorithm approximates inference probabilities polynomial time 
recall approximate inference probability pr xje likelihood weighting algorithm outputs relative approximations inferences pr pr 
glance may find unusual likelihood weighting approximates probabilities different methods 
clearly approximate inference probability pr simply averaging likelihood weights joint evidence version algorithm constitutes basis bounded variance algorithm 
random variable reduce substantially variance estimates 
fact inference probability pr xje small know straightforward application generalized zero estimator theorem likelihood weighting requires exponential time converge approximation 
contrast prove bounded variance algorithm converges polynomial time 
describe formally bounded variance algorithm 
denote subset belief network nodes denote instantiation nodes 
provided generate relative approximations inference probabilities pr subset nodes generate relative approximations pr xje set evidence nodes 
want approximate inference pr 
suppose nodes constitute set version likelihood weighting algorithm described section score random variable product conditional probabilities pr prove rapid convergence modify algorithm slightly 
intervals contain conditional probability pr instantiations form new random variable contained interval 
generate instantiations nodes prescription described likelihood weighting 
denote sum sample outcomes delta delta delta run algorithm ffl ffl ln ffi number samples output oe proof polynomial runtime prove bounded variance algorithm halts polynomial number samples outputs estimate oe approximates pr relative error ffl 
theorem instantiate nodes fw gamma ffl ffl bounded variance algorithm halts expected number samples gamma ln ffi outputs estimate oe probability gamma ffi approximates pr relative error ffl 
proof ei denote mean random variable algorithm 
stopping theorem section appendix bounded variance algorithm halts expected number samples ei gamma ln ffi 
definition bounded variance algorithm ei gamma gamma gamma ln ffi 
stopping theorem algorithm halts gamma ln ffi successes estimate approximates ei relative error ffl 
estimate oe approximates ei pr relative error ffl 
corollary belief networks polynomial oe bounded variance algorithm approximates inference pr relative error ffl polynomial time oe gamma ln ffi 
proof ei denote mean random variable algorithm 
construction interval contains outcomes 
interval contain mean ei ei oe gammak proof follows theorem ei oe discussion bounded variance algorithm corollary proves estimate single evidence inference probabilities pr xje bounded variance algorithm requires polynomial time oe gamma ln ffi 
result improvement known convergence requirements simulation algorithms 
example consider belief network conditional probabilities pr ej pr xj contained interval delta small 
bounded variance algorithm approximates inference pr xje time independent size forward simulation likelihood weighting require time proportional small algorithms inefficient 
interval contains pr ej pr xj corollary bounded variance algorithm requires ffl ffl gamma ln ffi samples approximate pr xje independent size belief network 
inferences bounded variance algorithm halts far fewer samples predicted upper bound 
inference probability pr approaches number samples halting approaches upper bound 
algorithm self corrects account fewer required samples 
example conditional probability pr xje equal theorem algorithm halts gamma ln ffi ffl ffl gamma ln ffi simulations outputs approximation pr xje relative error ffl 
input ffl ffi initialize pi ln ffi ffl ffl function generate instantiation generates random instantiation gammak gammak initialize fg fg gamma choose ff uniformly 
ff pr fz fz return algorithm generate instantiation pr pi denote total number experiments output pis bounded variance algorithm 
theorem corollary suggest polynomial approximation inference pr possible polynomially bounded 
recall intervals contain conditional probabilities pr instantiations approximate pr polynomial time require polynomially bounds ratios nodes regardless bounds nodes rest belief network 
corollary shows bound performance bounded variance algorithm deteriorates number evidence nodes increases 
algorithm guarantees polynomial time convergence inferences constant number query nodes 
empirical results real world applications may observe large fraction query nodes run bounded variance algorithm completion suggest algorithm continues provide reliable approximations guarantee error approximations 
may entertain possibility design randomized algorithm lead polynomial solutions inference probabilities regardless number observed nodes prove contrary 
section show approximate pr absolute error ffl np hard large sets deterministic approximation deterministic approximation algorithms search algorithms improve run time randomized algorithms 
clearly class problems rp randomized polynomial time solutions contains class problems deterministic polynomial time solutions deterministic solution requires computation randomized solution 
advantages deterministic algorithms require source random bits associated failure probability 
recall output randomized algorithm fails approximate solution probability ffi 
probability small know estimate fails approximate solution 
previous deterministic approximation algorithms search algorithms tighten incrementally bounds inference probability 
example sum probabilities pr jzj instantiations yields exact computation inference pr 
exists small number instantiations probabilities pr contribute mass inference probability pr summing instantiations approximates pr 
unfortunately cases exist small set instantiations captures mass probability 
exist small set instantiations general np hard find 
researchers developed various heuristic methods attempt find instantiations possible 
deterministic approximation algorithm probabilistic inference 
approach randomized bounded variance algorithm 
methods bounded variance algorithm applicable constant depth belief networks 
contrast exponential worst case behavior search algorithms output approximations subexponential worst case behavior demonstrated derandomized bounded variance algorithm 
derandomization bounded variance algorithm approximate inference probability pr bounded variance algorithm generates instantiations nodes distribution ae scores random variable 
recall generate instantiations distribution ae order belief network nodes node occurs parents 
instantiate nodes remaining uninstantiated nodes fz gammak ordered parent node belongs occurs belongs set instantiated 
lowest ordered node node root node parents belong instantiated 
root node choose number interval uniformly set pr 
root node denote instantiation parents 
choose number interval uniformly set pr 
instantiate instantiate similarly continue process instantiate nodes order nodes guarantees instantiate parents node instantiate process forms generate instantiation function bounded variance algorithm shown 
choosing number uniformly choose bit string uniformly bit strings 
example denote integer representation set pr set 
instantiate probability approximates pr absolute error assume choose sufficiently large error insignificant computation inference probability 
section appendix show choose bound error 
generate instantiation nodes distribution ae choose nm bit string uniformly space nm strings length nm 
bits instantiate second bits instantiate forth instantiate nodes score outcomes random variable instantiations mean approximates pr recall monte carlo theory dictates nonzero probability approximate inference probability pr absolute error ffl ffl trials 
words theory proves exists subset phi nm bit strings size ffl score random variable instantiations generated subset mean approximates pr know find deterministically set size ffl show find set subexponential size approximates pr absolute error integer result prove constant depth belief networks extreme conditional probabilities approximate pr xje subexponential worst case time relative error integer deterministic specification input set phi evaluate function generate instantiation provides key bounded variance algorithm 
observe compute pr exactly follows 
cycle nm possible instantiations nm bits instantiation generate instantiation score random variable instantiation mean nm values yields pr cycling set nm instantiations nm bits prove cycle subset phi subexponential size 
denote depth belief network log nm construct set phi set bit strings length stretched length nm bit strings special binary valued matrices nm size nm theta 
section appendix describes construction matrices 
string phi generate instantiation score random variable 
mean evaluated instantiations generated set phi deterministic approximation inference probability pr algorithm defines derandomized bounded variance algorithm simply derandomized algorithm approximate inference probabilities 
summarize algorithm section prove approximation relative error pr integer proof subexponential runtime discuss boolean circuits model computation prove subexponential runtime model 
input depth oe function construct phi initialize phi fg log noe log nm construct matrix nm defined section appendix gamma bit binary representation nm phi phi fug return phi function generate instantiation phi generates instantiation gammak gammak 
initialize fg fg gamma gamma gamma delta delta delta gamma gamma ff ff pr fz fz return algorithm construct phi phi generate instantiation pr pi output pis phij deterministic bounded variance algorithm 
boolean circuits discuss model computation nisan proves stretch short string truly random bits long string pseudorandom bits appears random model 
models constant depth unbounded fan boolean circuits consist directed acyclic graph dag set binary valued input nodes binary valued gate nodes polynomial binary valued output node dag input nodes source nodes output node sink node 
number parents gate node output node unbounded example output node may nodes parents 
gate node output node determines value values parent nodes boolean operations define types nodes nodes nodes nodes 
value node parent nodes value node parent nodes value node parent node 
figures depict boolean circuits boolean operations 
size circuit number nodes circuit 
depth circuit longest directed distance dag input node output node 
constant depth circuits depth function size circuit 
henceforth circuits synonymous constant depth unbounded fan boolean circuits 
nisan gives method stretches log truly random bits bits appear random family circuits size polynomial depth specifically nisan proves result 
theorem fc denote family circuits depth size polynomial number inputs log exists easily constructible family theta matrices fa integer ffl pr gamma ffl pr pr ffl chosen uniformly bit strings chosen uniformly bit boolean circuits 
boolean circuits corresponding operations respectively 
boolean circuit tests schematic representation circuit 
strings denotes modulo matrix vector multiplication section appendix describe nisan design matrices sufficient detail allow implementation 
matrices effectively stretch log truly random bits bits circuit distinguish truly random bits error ffl put result context discussion section 
omega denote set instantiations omega denote subset inputs 
probability pr denotes fraction jsj omega inputs omega circuit outputs 
phi denote subset omega constructed bit strings log inputs phi denote subset strings circuit outputs 
second probability pr denotes fraction js phij log inputs phi circuit outputs 
theorem states js phij approximates jsj omega absolute error ffl 
construct deterministic approximation jsj omega absolute error ffl enumerating log bit strings computing output scoring output equal 
polynomial denotes size circuit evaluate input time approximation algorithm requires log computations 
theorem bounded variance algorithm construct deterministic approximation algorithm probabilistic inference 
overcome difficulties 
prove implement circuit function generate instantiation shown 
construct circuit matrices described section appendix generate set input strings phi circuit 
prove approximation inference probability set inputs phi absolute error ffl exact computation inputs 
theorem proves property circuits single output bit circuits compute inference probabilities output bits example require bits express output probability section construct circuit simulation function generate instantiation phi appears derandomized algorithm 
section circuit simulation prove score random variable output generate instantiation phi evaluated subexponential number inputs phi produce relative error deterministic approximation pr 
circuit simulation proof purposes algorithm implementation 
circuit implementation described bounded variance algorithm algorithm refer derandomized algorithm 
correctness derandomized algorithm relies proof circuit constant depth simulate generate instantiation phi 
section construct circuit depth simulates generate instantiation phi belief networks depth prove elementary bit string relations verifiable constant depth circuits 
lemma denote bit string 
exists circuit depth bit string outputs outputs 
similarly exists circuit depth outputs outputs 
proof observe verify ith bits equal depth circuit 
result follows 
circuit input nodes gate node computes node computes node negates output node computes 
illustrates circuit 
verify bits equal observe verify relations individually depth circuits output circuit tests length bit strings fx fu schematic representation bit wise comparison circuits 
outputs circuits output illustrate circuit 
relation satisfied exists gamma agree bits 
gamma ik verify ik depth circuit 
outputs circuits verifies relation depth circuit 
prove belief network node construct depth circuit cx instantiation fy fy input string length cx integer representation satisfies pr 
shows circuit cx input randomly chosen input circuit cx derandomized algorithm set probability 
lemma denote belief network node parents respectively 
exists circuit cx depth instantiation input string length cx integer representation satisfies pr 
proof denote number parents 
instantiation parent nodes bit string 
enumerate possible strings denote binary expression integer pr construct circuit cx inputs outputs observe lemma output circuit depth circuit depth 
compute circuit depth verify exists satisfies equation depth circuit 
prove circuit depth suffices compute equation 
substitute expression lemma relation equation 
rearranging get equation gamma lr jt compute lr jt depth circuit compute expression depth circuit 
easily show circuits allow simulate function generate instantiation phi constant depth circuits constant depth belief networks 
construct circuits cx cxn belief network nodes connect circuit output cx input cx shows example circuit node belief network 
simulate generate instantiation phi proceed follows 
set output node circuit cw gammak denote ordering remaining circuits order gammak imposed derandomized algorithm parents node occur node order 
choose nm bit string uniformly space nm strings bits inputs circuit second circuit cx node parents fy conditional probabilities parents possible instantiations conditional probability represents bit string pr input bit string fu um instantiation parents fy circuit outputs integer representation satisfies pr 
bits output inputs circuit third bits outputs belongs inputs forth 
outputs gammak randomly chosen nm bit string generate instantiations probability generate instantiation phi 
instantiation score random variable 
proof subexponential convergence section prove output derandomized algorithm approximates inference probabilities relative error integer essence proof uses result theorem 
oe denote belief network nodes depth define log nm chosen section appendix 
phi denote set binary strings length nm constructed section appendix 
omega denote space nm bit strings length nm 
omega denote mean random variable evaluated nm instantiations generated different nm bit strings 
theorem belief networks depth polynomial bounded input strings phi output derandomized algorithm approximates inference probability pr constant size relative error ffl integer proof omega denote set nm bit strings 
section appendix log sufficiently large constant disregard error approximating pr omega fz denote nodes determine outcome random variable 
instantiation denote instantiation subset nodes 
denote node belief network evidence nodes corresponding circuit simulates generate instantiation phi 
example fx fx outputs circuits cx cx fixed evidence values need run circuit randomly chosen bits input string delta delta delta delta delta delta delta delta delta delta delta delta instantiation input corresponds settings nodes input 
partition set omega subsets omega omega omega contains instantiations omega instantiate partition phi similarly sets phi phi omega nm omega ji phi phi ji 
show phi approximates omega nm absolute error integer construct depth circuit input nodes input string denote circuit connected circuit pr omega nm nm bit string chosen uniformly omega gamma choose string phi uniformly choose bit string uniformly strings stretch string nm phi 
pr nm phi depth theorem pr nm approximates pr absolute error integer shown phi approximates omega absolute error integer convert approximation relative error approximation observe integer ck jwj belief network node log parents recall bound size conditional probabilities polynomial omega gammaq absolute error approximation gammaq relative error approximation 
complexity approximation revisited shown belief networks polynomially bounded belief networks extreme conditional probabilities approximate efficiently inference probability pr xje size set constant 
contrast results prove size large fraction number nodes belief network approximate inference probabilities belief networks near 
theorem consider class belief networks constant 
exists algorithm approximate inferences pr xje evidence set size fl constant fl constant algorithm deterministic approximation absolute error gamma np algorithm randomized approximation absolute error gamma probability greater np rp 
proof proof similar proof complexity approximating probabilistic inference single evidence node 
denote instance sat variables fv clauses fc cm formula defines belief network bn binary valued nodes delta delta delta set nodes fc represents copy set clauses arcs directed node nodes variable appears clause example shows bn node prior probability instantiated 
clause index variables contained clause conditional probabilities associated nodes having parent nodes fv belief network defined pr ji ji fv ji ji satisfies 
denote instantiation assume satisfying assignment pr 
determine truth assignment satisfies variable time starting finding value approximate pr ajc absolute error gamma constant 
observe pr pr gamma pr ajc pr gamma ajc pr jv pr jv gamma denote ratio pr xjc 
rp gammaa gamma gamma 
show satisfiable gamma sufficiently large log gamma log gammad get satisfiable gamma gamma approximates absolute error gamma determine truth assignment leads satisfying assignment set gamma omega denote set assignments variables satisfy exactly gamma clauses omega pr jv pr jv pr pr jv omega pr omega gammai gamma gamma similarly show pr jv gamma gamma gammaa gamma lead satisfying assignment gammaa satisfiable assumption 
delta delta delta gammaa delta delta delta gammaa inequalities follow gammaa gammaa find truth setting second variable proceed follows 
child bn modification bn parents redefine conditional probabilities child pr jv pr jv delete node bn bn denote resulting belief network pr denote full joint probability distribution bn find truth assignment bn exactly way truth assignment bn proceeding way find truth assignment variables 
assignment guaranteed satisfy original formula assumption satisfiable 
satisfiable algorithm terminates instantiation nodes satisfy determine satisfiable running algorithm checking satisfies prove analogous result respect randomized algorithms 
proof applies methods preceding construction 
size evidence set delta delta delta inference probability pr xjc mm number nodes belief network bn mm constant fl add bn fl gamma dummy nodes nodes connected bn nodes change values conditional probabilities pr jc 
denotes number nodes new belief network size evidence set new belief network fl 
proved constant sized evidence sets generate relative approximations inferences pr xje polynomial time belief networks belief network structure sat instance 
extreme conditional probabilities 
proved generate approximations deterministically subexponential time 
showed results apply belief networks extreme conditional probabilities provided conditional probabilities nodes inference pr xje extreme 
conditional probabilities assume values approximate inference probability pr xje high probability polynomial time deterministically subexponential time 
addition proved size evidence set large approximate pr xje np rp np 
appendix stopping rule denote independently identically distributed random variables values interval mean intuitively outcome experiment stopping rule algorithm input ffl ffi initialize ln ffi ffl ffl generate random variable total number experiments output stopping rule theorem proves output stopping rule algorithm approximates mean relative error ffl probability gamma ffi 
addition theorem gives upper bound expected number experiments algorithm halts 
stopping rule theorem 
pr gamma ffl ffl gamma ffi 
ln ffi ffl ffl 
pseudorandom generator nisan gives construction theta matrices theorem 
denote prime number size approximately log log choose distinct vectors dimension space gamma vector defines polynomial delta delta delta denotes jth coordinate polynomial construct set jk gamma 
sets subsets lg define matrix gamma gamma element ij ij 
discretization error function generate instantiation phi takes input string length nm chosen uniformly nm bit strings 
function generate instantiation takes input real numbers chosen uniformly interval 
determine length nm bit string affects error computing inference probability pr generate instantiation phi generate instantiation generate instantiations oe denote belief network nodes 
pr denote inference probability contains nodes omega denote space nm bit strings length nm 
omega denote mean random variable evaluated nm instantiations generated different nm bit strings 
lemma log noe ffl omega approximates pr relative error ffl 
proof delta denote set gammak instantiations observe pr gammak delta ae omega omega denote subset nm strings omega derandomized algorithm outputs instantiation omega delta omega omega nm delta omega ji complete proof show omega nm approximates ae relative error ffl log noe ffl 
recall ae gammak pr gamma pr gamma 
design derandomized algorithm easily verify omega oe approximates relative error oe omega nm approximates ae relative error noe log noe ffl error ffl 
acknowledgments anonymous referees insightful constructive comments improved presentation substantially 
lyn thorough review manuscript 
supported national science foundation iri ccr stanford university project ip lm national library medicine national institutes health israeli nsf binational science foundation 
special issue probability forecasting 
international journal forecasting 
special issue real world applications uncertain reasoning 
communications acm 
chavez cooper 
empirical evaluation randomized algorithm probabilistic inference 
henrion shachter kanal lemmer editors uncertainty artificial intelligence pages 
elsevier amsterdam netherlands 
chavez cooper 
randomized approximation algorithm probabilistic inference bayesian belief networks 
networks 
cooper 
nestor computer medical aid integrates causal probabilistic knowledge 
phd thesis medical computer science group stanford university stanford ca 
cooper 
computational complexity probabilistic inference bayesian belief networks 
artificial intelligence 
dagum chavez 
approximating probabilistic inference bayesian belief networks 
ieee transactions pattern analysis machine intelligence 
dagum horvitz 
bayesian analysis simulation algorithms inference belief networks 
networks 
dagum karp luby ross 
optimal algorithm monte carlo estimation 
proceedings ieee symposium foundations computer science pages milwaukee 
dagum luby 
approximating probabilistic inference bayesian belief networks np hard 
artificial intelligence 
ambrosio 
incremental probabilistic inference 
proceedings ninth conference uncertainty artificial intelligence pages washington dc july 
association uncertainty artificial intelligence 
goldreich luby nisan 
approximations general independent distributions 
proceedings th ieee annual symposium theory 
fung 
chang 
weighing integrating evidence stochastic simulation bayesian networks 
henrion shachter kanal lemmer editors uncertainty artificial intelligence pages 
elsevier amsterdam netherlands 
fung del 
backward simulation bayesian networks 
proceedings tenth conference uncertainty artificial intelligence pages washington 
american association artificial intelligence 
henrion 
propagating uncertainty bayesian networks probabilistic logic sampling 
lemmer kanal editors uncertainty artificial intelligence pages 
north holland amsterdam netherlands 
henrion 
search methods bound diagnostic probabilities large belief nets 
proceedings seventh workshop uncertainty artificial intelligence university los angeles los angeles california july 
horvitz suermondt cooper 
bounded conditioning flexible inference decisions scarce resources 
proceedings workshop uncertainty artificial intelligence pages windsor ontario july 
huang henrion 
efficient search inference noisy belief networks 
proceedings twelfth conference uncertainty artificial intelligence pages portland oregon 
american association artificial intelligence 
jensen lauritzen olesen 
bayesian updating causal probabilistic networks local computations 
computational statistics quarterly 
karp luby madras 
monte carlo approximation algorithms enumeration problems 
journal algorithms 
lauritzen spiegelhalter 
local computations probabilities graphical structures application expert systems 
journal royal statistical society 
luby wigderson 
deterministic approximate counting depth circuits 
proceedings second israeli symposium theory systems 
neal 
probabilistic inference markov chain monte carlo methods 
technical report crg tr department computer science university toronto 
nisan 
pseudorandom bits constant depth circuits 
combinatorica 
pearl 
addendum evidential reasoning stochastic simulation causal models 
artificial intelligence 
pearl 
evidential reasoning stochastic simulation causal models 
artificial intelligence 
pearl 
probabilistic reasoning intelligent systems networks plausible inference 
morgan kaufmann san mateo ca 
peng reggia 
probabilistic causal model diagnostic problem solving part integrating symbolic causal inference numeric probabilistic inference 
ieee trans 
systems man cybernetics smc 
peng reggia 
probabilistic causal model diagnostic problem solving part diagnostic strategy 
ieee trans 
systems man cybernetics special issue diagnosis smc 
poole 
average case analysis search algorithm estimating prior posterior probabilities bayesian networks extreme probabilities 
proceedings thirteenth ijcai pages 
pradhan dagum 
optimal monte carlo estimation belief network inference 
proceedings twelfth conference uncertainty artificial intelligence pages portland oregon 
american association artificial intelligence 
santos shimony 
belief updating high probability independence assignments 
proceedings tenth conference uncertainty artificial intelligence pages seattle washington 
shachter peot 
simulation approaches general probabilistic inference belief networks 
henrion shachter kanal lemmer editors uncertainty artificial intelligence pages 
elsevier amsterdam netherlands 
shimony charniak 
new algorithm finding map assignments belief networks 
proceedings sixth conference uncertainty artificial intelligence pages cambridge massachusetts 
yao 
separating polynomial time hierarchy oracles 
proceedings th ieee annual symposium foundations computer science pages 

