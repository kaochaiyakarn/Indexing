software components chang liu debra richardson information computer science information computer science university california irvine university california irvine irvine ca irvine ca usa usa liu ics uci edu ics uci edu cots components software development process introduces new problems software testing 
particular consumer user cots component typically source code access aware component tested best test embedded application 
doesn established guidelines integration test adequacy 
proposes solution problem software components record testing execution history component testing information available software testers 
analyzes problems testing component software introduces techniques discusses help test component software 
keywords software testing software component model cots brooks speculated software reuse buy versus build provide silver bullet software engineers bro hope software reuse achieve higher software productivity greater quality 
years software engineering discipline seeing satisfactory results 
emergence component software models gives discipline new hopes 
widely commercial component models sun javabeans ham microsoft com rog establish consistent powerful component software architecture models enable software developers share software effectively 
help component models software organizations software developers able produce software components sell organizations developers building blocks constructing software systems 
component producers typically don specific knowledge software systems components 
hand component consumers components build software systems typically don access components source code necessarily need understand 
proper information passed ways cots commercial shelf software component market greatly benefit component producers component consumers 
wonderful world software engineers 
cots component market emerges problems architecture technology arise 
problems software testing theme 
problems testing component software traditional software testing techniques usually assume software testers complete knowledge software requirements software implementation source code execution context environment 
world cots component software development case 
cots component consumers don necessarily access source code cots components 
testers component software software systems cots components existing integration testing techniques typically require access source code won situation 
example path integration testing technique jor object oriented integration testing techniques je need source code components construct method message path graph perform testing 
consuming organization testers perform integration testing sure resulting software systems properly access cots component source code 
new testing techniques needed 
second consumers access source code cots components instance paying purchase need test componentbased software thoroughly avoid repeating producer testing activity 
producer responsibility fully test cots component delivering 
consumer just sure usage component consistent intended usage doesn emphasize problems software system working properly 
additional problem observed ros software uses component bypass part component 
traditional test coverage techniques don take account supporting skipping unused source code 
full access cots component source code component software tester equipped traditional testing techniques difficulty carrying effective testing 
third cots component producers completely know execution context component writing 
usually assumptions 
proper technique tool support cots component producers express assumption component explicitly 
mismatched assumptions different components cause architectural mismatch gao cots component users wish integrate components system 
current popular component models javabeans com don address software testing issues 
cots component market matures adoption cots components increases testing problems major barrier wider acceptance component models 
propose way enhance component models solve problems adding software components 
solution add software components needed solve aforementioned problems component software testing mechanism enable component producers prepare cots components usage advise component software developers testing component software containing components 
help mechanism testers component software perform testing efficiently particular test component software thoroughly avoid repeating testing tested cots components 
propose mechanism called added software components 
definition software entity assists testing software component recording testing execution history component 
analogous javabeans fragment records static component information ham 
communicates builder tools tester tools related testing information available software testers 
tester tool software tool software testers test cots components component software 
analogous builder tool component javabeans refers software tool software developers manipulate cots components build component software ham 
records component producer recommendations test cases usage patterns component 
short component records reports static information component builder tools records reports dynamic information component builder tools tester tools 
retro component software component 
retro component software component complies current requisites software component matter component model adopted 
addition retro component maintains testing dynamic execution history 
benefits retro components retro components help software testing component producers component consumers develop component software 
component producers help record testing history perform coverage analysis 
furthermore help possible collect execution information software component component users 
help carry perpetual testing ost 
component consumers great difference 
recommendation test cases component software testers design test cases easily effectively 
results test coverage analysis testers better knowledge extensive tests far decide software testing precisely 
furthermore assist component software developers testers 
usage patterns stored precious design information components 
help component software developers understand cots components better quicker 
example example consider component 
object object inside component 
methods previous go slide show previous image go slide show image hide hide slide show show show slide show picture component coding style complies component model specification example javabeans javabeans component bean 
retro component component 
component producer doesn write recommended 
coding style complies retro spec specification common properties retro components default created component 
programmer take advantage benefits retro components doing coding 
content default shown table course practical need methods 
simplicity suppose methods interest 
stated component unit deployment contain object 
simplicity focus simple case object component example 
entry value supported coverage path coverage analysis methods statement coverage path definition source code level path coverage coverage recommended test case current coverage recommended coverage test case untested meaningful generator test case statement coverage definition source code level statement coverage recommended test case current coverage recommended coverage test case untested meaningful generator test case meaningful test cases show previous hide coverage analysis method recommended component producer statement coverage execution history nil table content default retro component notice default coverage criteria source code 
doesn conflict goal help testing component source code 
include source code coverage analysis providing compiled version source code instrumented necessary support coverage criteria 
way users retro component don access source code access source code coverage analysis methods 
default meaningful test cases expression show previous hide generated methods 
regular expression includes possible combinations invocations methods order 
programmer customize 
example add user defined coverage criterion 
example add coverage criterion cares user defined test cases 
testers execute test cases userdefined coverage criterion report coverage 
simple customized greatly help unfamiliar users component choose test cases 
programmer write meaningful test cases expression replace default 
usually written programmer include semantic information method invocations precise 
resulting customized shown table 
component producer component consumer tester customize 
example tester add entry meaningful test cases specified tester write expression interested test cases 
instruct test case generator expression defined component producer 
example tester component software uses component interested button previous add meaningful test cases specified tester entry value show hide test case generator generate test case related previous 
feature especially useful cots component consumers fraction functions provided cots components happens frequently 
retro component executed twice tester tool test case contains invocation methods order show hide test case show status change shown table 
notice parameters recorded execution history 
example methods takes parameters 
cases parameters significant instrumented code capture values included execution history 
information listed tables accessible developers tester tools builder tools 
help testers component software easily check current status retro component time 
entry value supported coverage analysis methods user defined coverage path coverage statement coverage definition percentage specified test userdefined cases executed coverage recommended test case show current coverage recommended coverage test case untested test case generator specified test case list specified test case list show show hide show hide show hide path definition source code level path coverage coverage recommended test case show hide current coverage recommended coverage test case untested meaningful test generator case statement coverage definition source code level statement coverage recommended test case show hide current coverage recommended coverage test case untested meaningful test generator case meaningful test cases show previous hide coverage analysis method recommended component producer user defined coverage execution history nil table content customized retro component entry value supported coverage analysis methods userdefined coverage user defined coverage path coverage statement coverage definition percentage specified test recommended test case cases executed show hide current coverage recommended coverage test case untested test case generator specified test case list specified test case list show show hide show hide show hide path recommended show hide coverage test case current coverage real data recommended coverage test case untested meaningful test generator case specified testers statement coverage recommended test case show hide current coverage real data recommended coverage test case untested meaningful test generator case meaningful test cases show previous hide meaningful test cases specified tester show hide coverage analysis method recommended component producer user defined coverage execution history show hide show table content customized retro component execution test cases design principles specifying retro spec want follow principles similar successful design principles javabeans eng 
automatic default behaviour allow automatic retro component 
developers choose implement class provide testing information associated retro component explicitly just predefined class doing 
predefined class part retro spec 
long developers follow certain simple coding style default behaviour satisfactory job 
default automatic help keep retro components simple create easy 
design time vs test time vs run time retro spec retro component modes design time test time run time 
instances class usually test time mode wouldn carried run time mode capability desired operational testing perpetual testing 
help keep lightweight final execution mode 
requirement visibility requirement retro component visible run time user interface level 
invisible run time retro component shown visually tester tools 
technique works reusable software components visible 
currently available cots components run time visible components 
experiment visible components 
flexible test time component test case generators retro spec allows producers consumer testers associate custom test case generators 
custom test case generator written component producers records component producers knowledge function implementation retro component valuable test time continued testing producer testing consumer 
hand able write custom test case generators consumer testers convenient testing tool 
prototype support initial prototype support retro spec popular component model currently expect javabeans 
intend retro spec tied single component model 
goal keep specification model independent component model easily adopt 
choosing component model base component model ways implementing retro spec 
way incorporate part component architecture specification part versions component model specification 
retro spec doesn require additional language mechanism 
coding convention plus class libraries tools possibly including pre processor instrument source code source code coverage criteria 
technical point view natural part component model specification 
popular component model specifications javabeans com maintained industry companies re university researchers barriers approach 
approach implement retro spec separate model top component model specification 
develop separate set tools support retro components 
approach require greater effort safer embark 
possible adopt second approach demonstrating success follow approach 
perpetual testing researchers perpetual software testing working support seamless perpetual analysis testing software requirement specification deployment ost 
users developers component software agree keep final release version deleting software release remain active software deployment keep collecting actual usage real interactions real software users 
information collected sent back software developers periodically agreement software developers users 
feedback valuable software developers starting point depth perpetual software testing practice 
perpetual testing new research area researchers characteristics perpetual testing 
perpetual testing continuous incremental ost 
collect testing execution information case case serve mechanism support perpetual testing 
summary research component software testing infancy 
concepts described experimental stage 
importance research undoubtedly clear 
component software development main stream approach software engineers world wide testing component software soon time part software development worse impact productivity costs software testing poses today software development paradigms 
believe technique provide promising solution component software testing problems 
store testing information inside component convenient effective mechanism enables component software testers test component software access cots components source code 
bro brooks silver bullet essence accidents software engineering 
ieee computer april eng developing java beans 
reilly 
gao garlan allen architectural mismatch reuse hard ieee software november ham hamilton editor javabeans specification sun microsystems www sun com beans july je jorgensen erickson object oriented integration testing cacm september jor jorgensen software testing approach crc press ost osterweil perpetually testing software ninth international software quality week qw san francisco may rog rogerson inside com microsoft press ros rosenblum adequate testing component software 
technical report uci ics university california irvine 
august szyperski component software object oriented programming addison wesley 

