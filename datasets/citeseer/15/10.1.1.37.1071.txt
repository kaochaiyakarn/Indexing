branching time partial order temporal logics wojciech penczek institute computer science polish academy sciences warsaw poland aim existing propositional temporal logics branching partially ordered time 
logics specifying proving properties programs systems 
branching time approach useful non deterministic programs applied concurrent programs 
partial order approach especially useful concurrent programs allows study subtle properties branching time 
survey branching time logics computation tree logics partial order temporal logics logics event structures 
issues concerned completeness proof systems finite model property decidability model checking expressiveness logics 
aim existing formal languages propositional temporal logic frames branching time structures general partial orders 
branching time partial order logics differ underlying frames way logics linked behaviour concurrent systems 
formal systems studied comprise syntax semantics logic motive study partly supported technical university eindhoven wolfson research awards scheme united kingdom 
derives way frames correspond differing behavioural aspects concurrent systems 
branching time approach adopts tree structured time time instant may immediate successors correspond different futures instance resulting non determinism modelling concurrency interleaving 
partial order approach partial order structure applied situation similar time instant may immediate predecessors corresponding different resulting interleaved non interleaved concurrency 
stressed difference approaches little philosophical question structure physical time problems versus free 
pragmatically choice type systems choice properties formalized proved 
reasons develop logics branching time partial order structures 
branching time approach considers program input execution tree generated program 
execution tree universal properties involving computations maximal sequences states studied existential properties referring specific computation 
approach useful non deterministic programs applied concurrent programs 
partial order approach considers program input set trees partial orders representing full runs 
structures universal existential properties computations properties involving runs studied 
ability approach especially useful concurrent programs 
partial order logics divided groups respect structures serving frames 
configuration structures event structures 
configurations represent states entire system events event structure models represent local states sequential agents 
ideas branching time logics appeared papers abrahamson 
year ben ari manna pnueli defined unified branching time system ub 
year clarke emerson extended expressiveness ub defining computation tree logic ctl results fully described 
emerson halpern gave definition ctl 
logic partial orders potl defined pinter wolper extended pinter 
years katz peled interleaving set temporal logic configuration structures 
history event structure logics shorter 
logic dealing sequential event structures defined thiagarajan 
penczek temporal logic unrestricted event structures 
logic extended refined consequently 
logics mentioned 
pattern presentation followed logic 
firstly syntax semantics logic 
shown frames logic linked behaviour concurrent system obvious 
expressiveness proof system characterization logic discussed 
issues concerned completeness proof systems finite model property decidability model checking 
part chapter deals branching time logics ffl ub unified system branching time ffl ctl computation tree logic ffl ctl computation tree logic 
second part contains descriptions partial order logics ffl potl partial order temporal logic ffl potl partial order temporal logic ffl istl interleaving set temporal logic temporal logics event structures ffl sequential agent event structure logic ffl esl event structure logic ffl esl ffi event structure logic run proposition ffl discrete event structure logic ffl esl event structure logic concurrency operator 
branching time temporal logics branching time temporal logics section begins definition computation tree logic ctl formal language restrictions constitute formal systems ub ctl 
ctl powerful temporal logic specifying variety program properties due modal operators 
allow quantifying paths ctl models states paths 
trees canonical models ctl 
easily defined standard kripke models 
semantics ctl formulas characterization postponed ub ctl defined 
formal language ctl language ctl composed state path formulas 
names indicate state formulas interpreted states path formulas interpreted paths 
fact path formulas contain state formulas 
path quantifiers intuitive meaning path paths respectively 
path modalities fl state eventually 
syntax ctl ap set atomic propositions 
set state formulas set path formulas defined inductively set state formulas defined member ap state formula state formulas path formula state formula set path formulas state formula path formula path formulas path formulas fl pu 
connectives modalities abbreviations ffl def ffl def branching time temporal logics ffl def ffl def ffl def ffl def tu ffl def semantics ctl model non empty set states theta total binary successor relation state successor gamma 
ap valuation function assigns state set atomic propositions assumed true state 
forward fullpath starting infinite sequence states 
denotes suffix denotes state path formula holds state fullpath resp 
model omitted implicitly understood 
defined inductively arbitrary state fullpath resp 
follows iff atomic proposition ap iff iff iff forward fullpath starting iff state formula iff iff fl iff pu iff 
state formula valid model written state 
set state formulas valid model written formula 
state formula said valid written model 
state formula satisfiable model state 
case said model state formula said semantical consequence set state formulas written implies model notions defined similarly path formulas 
branching time temporal logics follows proof systems composed axioms inference rules restrictions ctl 
usual denotes formula derived set formulas axioms inference rules 
proof system said sound complete iff finite set formulas formula discussing logical features ctl restrictions ub ctl considered 
unified system branching time ub system discussed contained ctl unified system branching time ub 
ub introduced ben ari manna pnueli 
ub basic modalities fl duals fl 
formal syntax ub language 
language contains state formulas simply called formulas 
syntax ub set ub formulas maximal generated rules member ap formula formulas formula fl derived basic modalities ffl def ffl def ffl fl def fl semantics ub semantics ub subset semantics ctl concerning ub formulas 
follows semantics ctl ub formulas semantic meaning ffl iff forward fullpath ffl iff forward fullpath 
branching time temporal logics expressiveness ub system ub ctl ctl specify properties concurrent non deterministic programs 
frame logic represents execution tree generated program 
program properties class possible models restricted class execution trees program 
properties expressed execution trees listed 
safety property expressible invariance assertion form expresses holds states computation tree 
example mutual exclusion specified formula cs cs cs holds state process entered critical section 
liveness property expressible inevitability assertion says holds state path 
example absence starvation expressed formula try cs try holds state process ready enter critical section 
possibility property expressed formula form 
fairness constraints expressible ub 
proof system ub proof system ub extracted proof system ctl shown 
proof system equivalent original proof system ub 
axioms substitution rules propositional calculus fl fl fl fl fl fl inference rules fl fl 
fl 
fl axioms show defined fixed point equalities 
says state successor 
branching time temporal logics characterization ub logical characterization ub 
contains results concerning completeness proof system finite model property complexity checking satisfiability 
firstly stated formally proof system ub satisfactory 
theorem proof system ub sound complete 
finite model property important feature logic enabling apply standard constructions checking satisfiability 
theorem ub finite model property 
shown satisfiability problem ub decidable complexity algorithm 
theorem deterministic algorithm deciding ub formula satisfiable exponential complexity length tested formula 
turns better algorithm testing satisfiability complexity algorithm matches lower bound satisfiability 
theorem deterministic exponential time lower bound ub satisfiability 
proof sketches theorems ctl extension ub 
computation tree logic ctl computation tree logic ctl defined 
extends ub introducing new path modality language ctl single linear time operator fl follow path quantifier 
formal syntax semantics ctl 
syntax ctl set ctl formulas form maximal generated rules member ap formula branching time temporal logics formulas formulas pu pu fl derived basic modalities ffl def tu ffl def tu 
semantics ctl semantics ctl subset semantics ctl defined section concerning ctl formulas 
expressiveness ctl properties expressible ub obviously expressible ctl 
formulas expressing new properties contain modality example relative order events specified fact process enter trying region try gaining access critical region cs computation paths expressed cs ry 
ub fairness constraints expressible ctl 
proof system ctl proof system terms state formulas ctl formulas state formulas 
axioms substitution rules propositional calculus fl fl fl pu fl pu pu fl pu fl inference rules fl fl 
fl pu 
fl pu pu branching time temporal logics characterization ctl ctl shown finite model property decidable possess complete proof system 
step consists establishing ctl finite model property formula satisfiable satisfiable finite model size bounded function length formula having established property non deterministic algorithm determine satisfiability formula 
algorithm runs time polynomial size model guesses model size length checks model turns possible find faster algorithm testing ctl satisfiability 
shown theorem 
theorem ctl finite model property 
proof stages 
stage defines quotient structure hintikka structure 
stage quotient structure unwound order get finite model 
stage notion structure hintikka structure defined 
structure triple non empty set states theta binary relation gamma 
form function assigning state set formulas 
notice structure model iff 
hintikka structures dealt 
roughly speaking hintikka structure structure formulas true state satisfy certain consistency conditions weaker required case model 
shown notions model hintikka structure sense equivalent 
definition hintikka structure structure total relation satisfies conditions branching time temporal logics pu fl pu pu fl pu pu fl pu pu fl pu fl fl implies pu forward fullpath starting state pu forward starting state 
easily proved ctl formula satisfiable iff hintikka structure looking finite model satisfiable formula fischer ladner closure see defined 
set formulas containing satisfying conditions fl pu fl pu pu fl pu 
fl shown induction length formula card fl jp card denotes number elements set model fl equivalence relation defined follows fl iff fl iff 
denotes set fv fl vg 
quotient structure fl structure branching time temporal logics wg theta rg fq fl qg 
unfortunately need hintikka structure satisfiability formulas form pu may 
quotient structure provides useful information 
easy check satisfies conditions definition hintikka structure possibly 
satisfies important condition possible prove modally equivalent hintikka structure 
definition modally equivalent structures follows 
structures said modally equivalent form iff 
definitions part proof 
definition structure interior frontier node having having resp 
successor 
root unique node exists nodes accessible relation directed acyclic graphs known dag 
definition fragment rooted structure interior nodes satisfy frontier nodes satisfy graph finite dag 
said contained written iff remember model fl 
lemma suppose pu 
fragment rooted contained frontier nodes interior nodes 
pseudo hintikka structure defined 
definition pseudo hintikka structure structure total resp 
satisfies condition holds pu implies fragment rooted contained frontier nodes interior nodes 
branching time temporal logics proved quotient structure pseudo hintikka structure 
stage thing show second stage proof structure modally equivalent hintikka structure done unwinding pseudo hintikka structure way described fully 
main steps proof 
formulas form fl pu pu said eventuality formulas 
firstly notice eventuality formula fragment call dag contained satisfied 
follows definition pseudo hintikka structure 
secondly shown dags construct node fragment call frag eventuality formula satisfied frag 
noticed fragment containing condition holds fragment conditions required fulfil propagated frontier nodes 
means path fragment frontier node path path path 
frag constructed inductive way 
pn list eventuality formulas 
frag consists successors ensure 
frag obtained frag extending frontier nodes follows 
frag frag frag depends frontier node replaced copy dag 
new frontier nodes copies node identified 
shown get hintikka structure 
construction performed inductively stages 
frag frontier node interior node frag contained arcs nodes frag nodes frontier nodes frag identified 
replaced copy frag constructed 
construction terminates mm empty set frontier nodes mm hintikka structure shown jp pseudo hintikka structure size larger hintikka structure size larger branching time temporal logics shown better algorithm testing satisfiability examine finite pseudo hintikka structures size jp order find theorem deterministic algorithm deciding ctl formula satisfiable exponential complexity length tested formula 
proof formula tested satisfiability 
pseudo hintikka structure size larger jp constructed 
step step starts building structure fw fl maximal satisfies maximality means fl theta iff fl implies step step consists building structure obtained repeatedly eliminating nodes conditions satisfied successor 
resulting structure empty contains state structure satisfiable 
complexity algorithm dt ime cn jp note deterministic exponential time lower bound ctl satisfiability ub contained ctl 
theorem proof system ctl sound complete 
proof shown consistent formula satisfiable 
supposed consistent ctl formula 
pseudo hintikka structure built proof decidability theorem 
define formula pw conjunction formulas pw maximality follows fl iff pw proof consists showing state eliminated algorithm decidability theorem proof pw inconsistent 
shown continuation follows 
easily observed fw pw pw branching time temporal logics consistent pw consistent 
eliminated construction 
pseudo hintikka structure obtained 
satisfiable 
proved induction state eliminated state eliminated pw easy check eliminated step pw inconsistent 
shown formula pw consistent eliminated step 
firstly observe pw fl inconsistent 
definition fl fl 
fl fl 
pw fl inconsistent 
secondly shown state eliminated step pw case satisfied considered 
cases similar proofs 
suppose eliminated step account failing respect pu 
formula pw shown inconsistent 
fv eliminated step 
fails course suppose shown fl pu 
inference rule pu 
pw pu 
assumption pu pw inconsistent 
order show fl pu suffices show fl pu 
suppose true 
fl pu consistent 
fl pu consistent fl pu consistent 
implies implies pu maximality 
pu hold pu hold contradicting fact way shown states pw inconsistent eliminated 
ends proof 
model checking ctl model checking method verifying algorithmically formula model 
finite model representing behaviour concurrent system ctl formula representing property 
order establish concurrent system satisfies property checked formula holds model turns complexity problem polynomial 
branching time temporal logics theorem deterministic algorithm determining ctl formula holds state finite model complexity jpj theta card card 
proof finite model 
checked model formula algorithm shown designed finishes state labelled subformulas hold algorithm operates stages 
gamma th stage handles subformulas length jpj 
stage state labelled subformulas holding 
easily noticed equivalence holds cases considered depending atomic forms fl algorithm discussed cases straightforward 
handle formula form algorithm finds states labelled goes backwards relation gamma finds states reached path state labelled states labelled step requires time card card 
case considered 
firstly structure constructed fw theta secondly graph partitioned maximal strongly connected components maximal subgraphs path arrows nodes 
states belong components size greater self loop selected 
consequently algorithm goes backwards gamma finds states reached path state labelled step requires time card card 
order handle arbitrary ctl formula state labelling algorithm successively applied subformulas starting shortest deeply nested 
pass takes time card card jpj different subformulas algorithm requires time jpj theta card card 
branching time logic ctl discussed 
subsumes ub ctl 
branching time temporal logics computation tree logic ctl ub ctl specifying important properties concurrent programs languages week 
wants specify properties including fairness requirements ctl applied 
expressiveness ctl properties expressible ctl obviously expressible ctl 
combinations linear time operators useful expressing fairness constraints ctl ffl abr 
ffl abr 

consider example simple computation fullpath enabled hold moments fullpath process ready execution executed hold state scheduled execution 
fairness assumptions family processes expressed formulas ffl executed ffl enabled executed fairness ffl enabled executed justice 
examples ctl formulas ctl formulas 
ffl pu expresses weak property path ffl executed describes unfair computation path certain point time process scheduled execution 
ffl similarly condition execution sequences family processes impartial executed ctl formula 
question concerning axiomatizability ctl open 
checking ctl formula satisfiable difficult case ctl 
decidable 
temporal logics partial orders theorem algorithm deciding ctl formula satisfiable deterministic double exponential complexity length formula 
proof theorem consists showing satisfiability problem reduced testing non emptiness tree automata 
lower bound deterministic double exponential time established 
deterministic double exponential algorithm ctl interpreted fair structures defined 
model checking ctl model checking problem ctl solvable deterministic linear time 
situation different ctl 
unfortunately method assigning subformulas tested formula states model applied 
powerful automata theoretic methods 
theorem model checking ctl pspace complete 
main reason ctl broadly applied high complexity checking satisfiability performing model checking 
logics ctl ctl mentioned ctl ectl ectl extend expressiveness ctl complicated algorithms testing model checking ctl 
mentioned branching time logics syntax ctl ctl formulas interpreted fair structures abrahamson structures suffix fusion closed probabilistic structures 
logics shown decidable finite model property 
temporal logics partial orders aim section existing formal languages temporal logic specify behaviours concurrent systems represented partial orders 
logics partial order frames event structure logics istl pre order frames potl potl representing partially ordered computations 
firstly formal systems potl potl istl discussed 
frames linked behaviours concurrent systems represented temporal logics partial orders general partial order structures 
logics interpreted event structures esl esl ffi esl 
ways frame represent behaviour concurrent system 
possibility defined branching time temporal logics frame represents entire concurrent system see esl esl 
second option defined linear time temporal logics frame represents run full execution concurrent system 
case structure representing full behaviour concurrent system defined set frames run see potl potl istl 
partial order temporal logic potl firstly definitions temporal logics reasoning partially ordered computations 
logics called potl potl defined pinter wolper pinter 
potl extension potl obtained introducing 
potl intended describe partially ordered computations directly 
able specify states successors predecessors 
state successors viewed corresponding fork creating new processes state predecessors representing join merging processes 
potl includes temporal operators talk successors predecessors 
potl viewed branching time temporal logic ub past operators fl 
language potl extension language ub allowing quantification backward paths 
potl got basic modalities fl duals fl 
formal syntax potl formulas 
syntax potl ap set atomic propositions 
set potl formulas defined inductively member ap formula formulas formula fl formula fl connectives defined standard way 
derived basic forward paths modalities ub 
dealing backward paths defined temporal logics partial orders ffl def ffl def ffl fl def fl semantics potl model non empty set states theta binary relation gamma assumed total state successor predecessor gamma 
ap valuation function assigns state set atomic propositions 
forward backward fullpath infinite sequence states gamma resp 

denotes gamma th state fullpath denotes state path formula holds state fullpath resp 
model omitted implicitly understood 
forward backward fullpath defined inductively arbitrary state follows iff atomic proposition ap iff iff fl iff forward fullpath starting iff forward fullpath starting iff forward fullpath starting fl iff backward fullpath starting iff backward fullpath starting iff backward fullpath starting 
noticed semantics potl identical semantics ub rules incorporating new backward path modalities 
notions satisfiability validity validity model defined similarly case ub 
temporal logics partial orders expressiveness potl potl framework ub structure represents entire concurrent system 
extends expressiveness ub making possible refer past 
example formula expresses earlier state holds formula says backward fullpath state holds specifies holds states past 
potl defined applied different framework structure represents possible run system composed sequential processes 
run system processes viewed directed acyclic graph 
node represents process state edge node node represents immediately follows framework potl specify properties involving runs 
concurrent system represented potl structure ap fm represents run system pg 
potl structure 
said validate formula written iff model meaning potl formulas follows 
formulates model state holds 
example expresses run backward fullpath states holds state holds 
proof system potl axioms substitution rules propositional calculus fl fl fl fl fl fl fl fl fl fl fl fl fl fl fl fl temporal logics partial orders inference rules fl fl 
fl 
fl fl fl 
fl 
fl proof system viewed composed parts part contains axioms inference rules ub second mirror image 
third part consists axioms relating past 
characterization potl turns adding backward operators ub results lost finite model property 
theorem potl finite model property 
proof formula def fl shown satisfiable infinite models 
model formula contains state holds states forward accessible formulas hold 
total relation infinitely states accessible model state say accessible accessible 
impossible infinite backward fullpath hold contradicting holding direct consequence theorem proof completeness infinite model formula built 
checking formula satisfiable requires exponential time algorithm case ctl 
theorem deterministic algorithm deciding potl formula satisfiable exponential complexity length tested formula 
temporal logics partial orders theorem proof system potl sound complete 
proof sketches theorems potl extension potl 
partial order temporal logic potl similar extension potl ctl extension ub 
case potl new path modality introduced 
syntax potl set potl formulas maximal set generated rules member ap formula formulas formulas fl pu pu formulas fl pu pu 
derived basic modalities ffl def tu ffl def tu ffl def tu ffl def tu 
derived modalities defined potl 
definition model potl potl difference relations gamma required total 
motivated fact initial terminal state process may predecessors successors respectively 
kind frames required example reasoning petri nets 
semantics potl formulas new ones potl involving new definition forward backward fullpath 
forward backward fullpath maximal sequence states gamma resp 
notice forward temporal logics partial orders backward fullpath finite state successor predecessor resp 
semantics formulas containing 
model pu iff forward fullpath starting pu iff forward starting pu iff backward fullpath starting pu iff backward starting 
expressiveness potl potl extends expressiveness potl similarly way ctl extends expressiveness ub 
properties expressible potl expressible potl 
properties concerning relative order events past expressed formulas form pu pu pu pu 
shown potl strict extension potl 
proof system potl axioms substitution rules propositional calculus fl fl fl pu fl pu pu fl pu fl fl fl fl pu fl pu pu fl pu fl fl fl fl fl temporal logics partial orders inference rules fl fl 
fl pu 
fl pu pu fl fl 
fl pu 
fl pu pu proof system viewed composed parts part contains axioms inference rules ctl fl second mirror image third contains axioms relating past 
characterization potl potl finite model property expect potl 
theorem potl finite model property 
proof potl formula fl fl fl differs formula proof potl subformulas fl subformulas added order require relation total 
shown check potl formula satisfiable 
theorem deterministic algorithm deciding potl formula satisfiable exponential complexity length tested formula 
proof proof theorem similar proof ctl 
consists defining algorithm constructs pseudo hintikka structure satisfiable potl formula 
construction repeated shown define pseudo hintikka structure potl formula unwind hintikka structure 
potl finite model property finite pseudo hintikka structure potl formula unwound infinite hintikka structure 
construction slightly complicated case ctl 
temporal logics partial orders firstly definition hintikka structure potl formula 
definition hintikka structure structure theta relation satisfies conditions definition conditions pu fl pu pu fl pu pu fl pu pu fl pu fl gamma fl gamma implies pu backward fullpath starting state pu backward starting state 
easily proved potl formula satisfiable iff hintikka structure looking finite pseudo hintikka structure satisfiable formula fischer ladner closure see quotient structure model defined 
set formulas containing satisfying conditions ctl fl pu fl pu pu fl pu 
fl shown induction length formula card fl jp model fl equivalence relation defined follows fl iff fl iff 
set fv fl vg denoted 
temporal logics partial orders quotient structure fl structure wg theta rg fq fl qg 
case ctl need hintikka structure satisfiability formulas form pu pu may preserved 
analogously quotient structure provides useful information 
easy check satisfies conditions definition hintikka structure possibly 
satisfies important condition possible prove modally equivalent hintikka structure 
definitions useful part proof 
definition backward fragment backward resp 
rooted structure interior nodes satisfy resp 
frontier nodes satisfy resp 
graph finite dag 
said contained written iff definition pseudo hintikka structure structure resp satisfies conditions hold pu implies fragment rooted contained frontier nodes interior nodes 
pu implies backward fragment rooted contained frontier nodes interior nodes 
easily proved pseudo hintikka structure 
shown second stage proof pseudo hintikka structure modally equivalent hintikka structure done unwinding pseudo hintikka structure way described fully 
method fact state structure forward tree ftree backward tree btree built 
trees satisfy formulas form pu pu pu pu 
ftree simply tree btree tree directedness edges changed 
combination ftree btree called 
construction proceeds alternating combining forward backward trees 
definition unwinding pseudo hintikka structure inductively temporal logics partial orders step backward forward unwinding definition 
defined deterministic exponential time lower bound potl satisfiability potl includes ub lower bound shown 
theorem proof system potl sound complete 
proof similar ctl new definition structure potl formula 
main change adding symmetrical claims handle past components potl formulas requiring gamma total 
potl models required relation gamma total case potl proof system extended formulas form fl fl results valid small changes proofs 
model checking potl model checking potl complicated ctl 
reasons 
firstly formulas contain backward modalities 
secondly formulas interpreted models corresponding runs concurrent systems 
theorem model checking potl exponential size model doubly exponential length tested formula 
proof theorem complicated 
interested reader referred 
potl potl constitute bridge branching time partial order logics 
viewed extensions branching time logics ub ctl past modalities 
semantic structures linked partial orderings representing runs concurrent systems 
interleaving set temporal logic istl far temporal logics interpreted pre order structures 
interleaving set temporal logic interpreted partial order structures global states introduced 
main aim defining logic express properties inherent partial order interpretations specifically distinguish concurrency non determinism 
temporal logics partial orders syntax istl formal language istl ctl contains basic formulas form ffl ap pu pu fl derived basic modalities abbreviating tu abbreviating tu abbreviating abbreviating fl abbreviating fl define semantics istl lot new notions introduced 
frames istl ctl connected possible executions distributed systems different ways 
case ctl ub ctl entire concurrent system considered defining large partial order branching structure 
branching modalities pu distinguish different paths interleaved runs 
view istl explicit nondeterministic choice code program single partial order includes specific choice execution 
note potl potl connected concurrent systems way 
concurrent program represented set partial orders branching structures representing separate run system 
structure representing possible run system defined 
approach followed general definition concerning non discrete uncountable systems reader referred 
definition irreflexive partial order events satisfying conditions countable set ii fe finite condition ii says history event finite 
partial order represent single execution system 
notion global state introduced 
definition global state subset satisfying condition 
backward closedness 
temporal logics partial orders global state contains event events happened past 
global states constitute states frames 
set global states generated denoted 
understood stands 
partial order global states defined 
definition theta irreflexive partial order global states iff ae discrete partial order transition relation step relation defined gamma means iff event feg case branching time logics maximal paths global states considered 
definition forward fullpath maximal sequence global states 
forward special interest 
definition forward fullpath said observation iff obs denote set observations observations special sequences global states represent full executions system 
shown obs empty suffix fusion closed 
semantics istl model ordered pair frame partial order global states gamma 
ap valuation 
observation notion formula holding state model written simply defined inductively iff ap iff iff pu iff observation starting pu iff observation starting fl iff state 
temporal logics partial orders formula said valid model written iff expressiveness istl concurrent system represented istl structure ap fm model representing single execution system pg 
istl structure 
said validate formula written iff meaning istl formulas follows 
expresses model state holds 
properties expressible ctl possibility ones expressible istl 
formulas quantified paths observations executions 
semantics related runs 
example properties formulated 
expresses observations starting states holds state 
says invariant states execution state holds observation starting containing state holds 
formula express property serializability database transactions 
characterization istl price paid extra expressiveness istl undecidability 
shown conditions required istl models istl undecidable 
theorem istl interpreted full executions trace systems undecidable 
satisfiability problem istl reduced recurring tiling problem known undecidable pi complete 
far complete proof system language istl defined 
complete infinitary axiomatization istl formulas form 
defined logic istl uses language ctl models istl logic branching version istl 
logics event structures logics event structures behaviour concurrent system need represented structure global states 
described events occurrences system actions 
relations events needed earlier relation representing causality conflict relation reflecting choices system 
section contains definitions formal systems event structures 
system put forward thiagarajan 
section introduces event structures related notions 
event structures notion event structure introduced winskel 
event structure represents behaviour distributed system means set event occurrences causality relation partially orders event occurrences conflict relation reflects choices available system 
definition event structure triple es ffl non empty set events ffl theta partial order called causality relation ffl theta irreflexive symmetric relation called conflict relation ffl implies conflict inheritance 
clause definition captures intuition past event events conflict 
notice follows definition relations disjoint 
notions related event structures 
necessary understand behaviour sytem described event structure 
definition es event structure rn ffl rn conflict free iff rn theta rn ffl rn backward closed iff implies rn rn logics event structures ffl rn run iff rn maximal backward closed conflict free subset ffl rn run esg set runs es 
runs represent possible full executions event structures 
correspond single executions defined istl 
definition event structure es said sequential iff events sequential event structures represent sequential nondeterministic concurrent systems 
important restrictions event structures class agent event structures defined representing concurrent systems consisting sequential components agents 
individual agents aware properties agents explicit communication modelled global partial ordering relation 
definition agent event structure structure es en satisfying conditions implies ii event structure iii agent sequential event structure theta theta iv part iv definition captures idea choices locally individual sequential agents information propagated causality relation 
consequently different agents influence explicit communication modelled global causality relation logics event structures sequential agent event structure logic temporal logic subclass event structures agent event structures 
example semantics asynchronous sequential processes defined agent event structures 
syntax ap countable set atomic propositions 
set ft ng consisting atomic type propositions fixed 
assumed ap phi ap type propositions identify agents 
range ng fixed logical connectives indexed forward modalities agent indexed backward modalities 
set formulas built inductively member phi formula formulas formula derived logical connectives modalities ffl defined standard way ffl phi def ffl def forward ffl def backward 
semantics frame model defined standard way restriction valuation function needs assign type propositions corresponding agents 
definition frame agent event structure es en 
convenient specify agent event structure es assume implicitly partitioning en logics event structures definition model ordered pair es ffl es frame ffl gamma 
phi valuation function satisfying iff denotes formula holds state model omitted implicitly understood 
defined inductively iff atomic proposition phi iff iff iff implies iff implies 
notions validity satisfiability defined standard way 
expressiveness behaviour concurrent system represented agent event structure 
safety possibility properties concerning system separate agents expressed 
example formula holds state agent holds states agent formula holds state agent earlier state agent holds means agent communicated agent information 
formula holds earlier states agent formula held 
holds state agent holds state agent holds state agent earlier state agent formula held 
says earlier state agent held 
eventuality properties expressible 
type properties shown expressible esl ffi 
proof system proof system composed seventeen axioms inference rules reflecting properties agent event structures 
logics event structures axioms substitution rules propositional calculus 

deductive closures 
local reflexivity 
transitivity backward linearity agents relating past communication axioms phi phi type axioms inference rules modus ponens generalization rules characterization main results known 
completeness proof system 
theorem proof system sound complete 
proof similar proof esl sketch 
model built formula proof completeness theorem infinite logic lacks finite model property 
proof fact similar corresponding proof esl 
theorem decidable 
logics event structures fact decidability slightly different logic shown changes proof applied 
results model checking 
logics dealing unrestricted event structures 
introduced 
syntax logics event structures firstly definition rich language temporal logic 
restrictions give rise different formal systems discussed section 
language contains modalities corresponding relations causality conflict backward forward step concurrency 
meaning explained soon system modalities introduced 
ap fp countable set atomic propositions 
distinguished symbol ffi fixed 
assumed ffi ap phi ap 
logical connectives modalities omega omega 
set form formulas built inductively member ap formula ffi formula formulas formula formula omega omega formula derived logical connectives modalities defined ffl def standard ffl def standard ffl def forward ffl def backward ffl def dependent ffl fl def omega fl forward ffl fl def omega fl backward ffl def ffi ffi inevitable ffl fl def ffi fl ffi fl inevitable ffl def concurrent meaning fl explained section esl ffi 
logics event structures event structure logics slightly different frames semantics defined separately logic considered 
event structure logic esl logic discussed section extension formal system called event structure logic esl short 
note esl extension known axiomatic system 
contains new modality corresponding conflict relation 
operator introduced order express important behavioral properties event structures conflict freeness inevitability 
syntax esl 
syntax esl set esl formulas maximal generated rules page 
semantics esl notion kripke frame extended adding second relation 
definition frame arbitrary event structure 
model defined standard way 
definition model ordered pair ffl frame ffl gamma 
ap valuation function 
model state formula 
denotes formula holds state model usual omitted implicitly understood 
notion defined inductively follows iff ap iff iff logics event structures iff implies iff implies iff implies 
standard abbreviations ffl iff ffl iff ffl iff model ffl iff implies model expressiveness esl similarly case behaviour concurrent system represented event structure 
safety property expressible invariance formula form expresses holds states event structure 
possibility property expressed formula form conflict freeness property expressible formula form says states conflict formula holds 
words states holds conflict 
formula says held past 
eventuality properties expressible esl 
shown operator allows axiomatize extension esl eventuality properties expressible 
proof system esl proof system esl composed twelve axioms inference rules reflecting properties causality conflict relations 
logics event structures axioms substitution rules propositional calculus 

deductive closures 
reflexivity reflexivity gamma transitivity transitivity gamma relating past relating past symmetry conflict inheritance inference rules modus ponens generalization rules characterization esl shown proof system sound complete esl 
proved esl lacks finite model property decidable 
theorem proof system esl sound strongly complete iff set formulas formula 
proof soundness proof system easy show method proving completeness discussed 
consistent set formulas 
assumed supposed aim construct model satisfying validating show way supposition wrong 
set maximal consistent sets formulas containing defined standard way 
note original change idea proof 
canonical structure defined follows 

theta fp logics event structures 
theta fp 
iff ap notion pseudo model defined definition structure pseudo model iff conditions satisfied non empty set ii reflexive transitive iii symmetric implies iv gamma 
ap valuation function 
notion formula holding state pseudo model written defined models 
shown satisfies properties pseudo models 
step proof consists unwinding canonical pseudo model modally equivalent model esl 
method called copying see 
structure defined follows ffl theta set integers abbreviates ffl mod mod iff jj gamma ij number 
ffl mod ffl shown properties ffl partial order ffl irreflexive symmetric ffl implies logics event structures event structure 
modal equivalence proved 
formula state equivalence holds iff 
implies completes proof completeness esl 
theorem esl finite model property 
proof shown formula def ap valid finite model theorem 
formula satisfiable infinite models 
note formula equivalent formula finite model 
consider arbitrary assume suppose 

way infinite sequence states constructed implies contradiction finite 
show theorem sufficient construct model satisfiable 
set integers standard equal relation iff jij odd 
clearly esl model 
shown esl decidable 
theorem esl decidable 
proof esl shown finite model property respect pseudo models 
implies esl decidable respect 
pseudo model unwound modally equivalent model esl decidability respect pseudo models equivalent decidability respect models esl 
consistent formula 
canonical pseudo model pseudo model obtain finite pseudo model fisher ladner closure fl defined 
fl set formulas containing satisfying conditions 
fl fl 
fl fl 
fl fl 
fl fl 
logics event structures shown card fl jp canonical pseudo model fl equivalence relation defined follows ffl fl iff fl fl 
denote set fe fl quotient structure fl structure ffl ffl transitive closure theta ffl gamma ffi ffi theta ffl gamma 
ap iff ap fl shown finite pseudo model formula fl iff completes proof 
mentioned earlier esl formulas express inevitability properties 
extension formal system esl possible express 
definition inevitability properties event structures 
definition es event structure ffl said inevitable iff rn rn fe rn 
ffl said inevitable iff inevitable intuitively speaking inevitable run contains state order express inevitability properties notion run incorporated frame 
language extended possible refer runs 
logics event structures esl run proposition esl ffi idea extend esl distinguished proposition ffi marking particular run interest 
syntax esl ffi set esl ffi formulas maximal generated rules 
semantics esl ffi definition frame quadruple rn es event structure rn run es 
model ordered pair rn frame ii gamma 
phi valuation function set set subsets phi ffi iff rn 
semantic rule run proposition ffi added semantic rules logical connectives esl modalities 
ffi iff ffi iff rn 
expressiveness esl ffi behaviour concurrent system represented structure ap set models rn represents full behaviour system rn run 
esl ffi structure 
said validate formula written iff model meaning esl ffi formulas follows 
expresses model state holds 
esl ffi extends expressiveness esl enabling express inevitability properties 
formula defined ffi ffi says inevitable structure logics event structures proof system esl ffi proof system contains proof system esl extra axioms reflecting run properties 
ffi ffi conflict freeness run rn ffi ffi maximality run rn characterization esl ffi case esl shown proof system sound complete 
theorem proof system esl ffi sound complete 
proof having completeness theorem esl sufficient prove model rn condition holds iff rn run 
show introducing ffi change properties logic 
esl ffi finite model property decidable 
extension event structure logic esl motivated great interest specifying discrete systems 
discrete event structure logic class frames restricted discrete event structures 
new modality reflecting successor relation introduced formal language esl 
syntax set formulas maximal generated rules 
semantics firstly notion discrete event structure introduced 
definition event structure es discrete iff exists irreflexive antisymmetric intransitive relation theta called successor relation 
definition frame structure discrete event structure successor relation 
logics event structures definition model ordered pair frame gamma 
ap valuation function 
semantic rules composed rules esl new rules introduced modalities omega iff implies omega iff implies 
expressiveness properties expressible esl obviously expressible 
formulas omega omega enable speak successors predecessors 
example omega expresses holds successors states holds 
fl guarantees state satisfying predecessor holds 
proof system proof system contains proof system esl new axioms omega 
omega omega omega 
omega omega deductive closures omega 
omega 
gamma gamma omega 
omega 
gamma gamma omega fl relating step past omega fl relating step past characterization firstly shown proof system complete finite model property decidability discussed 
theorem proof system sound complete 
proof consistent formula 
firstly canonical structure constructed similar way described esl 
case esl quotient pseudo model equivalence relation induced fisher ladner closure fl defined 
elements fl denoted 
fl set formulas containing satisfying conditions logics event structures 

esl 
omega omega fl fl 
shown satisfies conditions ffl empty ffl reflexive transitive ffl symmetric ffl ffi ffl fl iff copying method pseudo model improved order get model structure defined follows ffl theta set integers ffl jg ffl mod mod iff jj gamma ij number 
ffl mod ffl shown model modally equivalent completes proof 
argument case esl show finite model property 
theorem decidable 
proof follows finite pseudo model property modal equivalence pseudo models models 
case esl possible extend language run proposition making possible refer runs event structure 
allow express formula inevitable state fl step extending esl mukund thiagarajan 
introduced new modal operator corresponding concurrency relation 
logics event structures esl concurrency operator esl definition concurrency relation event structure 
definition es event structure concurrency relation defined follows theta gamma gamma intuitively speaking events concurrency relation occur concurrently 
syntax esl set esl formulas maximal generated rules 
semantics esl semantics nearly esl exception causality relation event structure assumed irreflexive 
extends expressiveness case absence step operators 
new semantic rule modality iff implies 
expressiveness esl properties expressible esl expressible esl 
properties incorporating concurrency relation specified 
example formula expresses states concurrency relation state satisfying formula holds 
example allows specify agent agent event structure sequential proof system esl proof system esl contains proof system esl reflexivity axioms additional axioms operator new inference rules 
logics event structures 
deductive closure symmetry conflict free past relating modalities ii relating modalities iii relating modalities iv relating modalities relating relating relating inference rules generalization rule uniqueness rule def atomic proposition appearing formula says proposition holds exactly state 
uniqueness rule construct model state different formula holds 
characterization esl shown proof system complete 
theorem proof system esl sound complete 
proof consistent formula shown satisfiable 
standard way maximal consistent sets formulas relations defined ffl def fp ag ffl def fp ag ffl def fp ag method proving completeness esl 
follows fact modalities esl correspond relations union equal cartesian product states model 
known distribute relations copies states exactly relation conditions relations satisfied 
logics event structures new method relies model iterative way starting adding needed formulas existing hold notions chronicle chronicle structures defined 
definition es frame 
notions defined ffl chronicle es function ffl chronicle coherent iff satisfies conditions 
implies 
implies 
implies 
chronicle structure pair es es frame coherent chronicle 
requirement pair mp stands mp stands resp 

general coherent chronicle may contain requirements define model 
called perfect iff coherent requirement fl fl contains subformulas negations 
perfect chronicle viewed sense hintikka structure easily shown perfect chronicle defines model formula idea proving completeness consists constructing perfect chronicle formula start fq ng set atomic propositions appearing ap fixed position sequence 
injective function theta fl gamma 
defined 
gives code number pair composed event formula infinite sequence chronicle structures ch ch defined inductively 
chronicle structures perfect chronicle upper bound 
ch defined follows es fe containing fp set formulas obtained replacing occurrence atomic proposition formulas containing assumed chronicle structure ch es es event structure fe coherent chronicle see definition 
ch obtained ch way 
mp requirement ch code requirements 
requirement exists ch ch ch constructed conditions satisfied es event coherent chronicle mp requirement requirement ch requirement ch construction consists steps 
set formulas obtained replacing atomic propositions 
construct belongs 
extend resp 

extend preserving semantic relationship existing preserving requirements 

fe iff cog 
sequence defined es proper extension es resulting event structure es defined perfect chronicle defined follows 
ji set formulas built atomic propositions fq definition correct allows show 
decidability esl remains open problem 
similar language modality corresponding minimal conflict relation introduced axiomatized 
logics specifying proving properties concurrent systems 
kinds logics introduced 
interpreted branching time structures ub ctl ctl partial order structures potl potl istl event structures esl esl ffi esl 
discussed frames correspond behaviour concurrent systems 
main emphasis put logical characterization formal languages 
proof systems provided axiomatizable logics finite model property decidability discussed 
expressiveness logics interpreted structures compared attempt done relate expressiveness logics interpreted different frames 
shown logics partial orders expressive branching structures may complicated algorithms testing satisfiability model checking 
author wishes dr kuiper dr brian monahan suggesting valuable improvements 
abrahamson modal logics concurrent programs 
lncs springer verlag 
abrahamson decidability expressiveness logics processes 
ph 
thesis univ washington 
ben ari manna pnueli temporal logic branching time 
proc 
th annual acm symp 
principles progr 
languages williamsburg pp 

appeared acta informatica vol 
pp 

clarke emerson design synthesis synchronization skeletons branching time temporal logic 
proc 
workshop logics programs yorktown heights lncs springer verlag pp 

clarke emerson sistla automatic verification finite state concurrent systems temporal logic practical approach 
proc 
th annual acm symp 
principles programming languages austin pp 

courcoubetis vardi wolper reasoning fair concurrent programs 
proc 
th annual acm symp 
theory computing berkeley pp 

emerson branching time temporal logic design correct concurrent programs 
ph thesis harvard university 
emerson alternative semantics temporal logics 
tcs pp 

emerson automata tableaux temporal logics 
proc 
conf 
logics programs brooklyn lncs springer verlag pp 
emerson clarke branching time logic synthesize synchronization skeletons 
science computer programming vol 
pp 

emerson halpern decision procedures expressiveness temporal logic branching time proc 
th annual acm symp 
theory computing san francisco pp 
appeared journal computer system sciences vol 
pp 

emerson halpern 
revisited branching versus linear time temporal logic 
proc 
th annual symp 
principles programming languages austin pp 
appeared journal acm 
emerson jutla complexity free automata logics programs 
proc 
th ann 
ieee cs symp 
foundations computer science 
emerson lei modalities model checking branching time logics strikes back 
proc 
th annual acm symp 
principles programming languages new orleans pp 
appeared science computer programming vol 
pp 

emerson sistla deciding full branching time logic 
information control vol 
pp 

emerson srinivasan branching time temporal logic lncs 
fischer ladner propositional dynamic logic regular programs 
comp 
syst 
sci 

pinter potl extension partial order temporal logic potl 
ee pub department electrical engineering technion israel institute technology 
pinter model checker partial order temporal logic 
ee pub department electrical engineering technion israel institute technology 
pinter hyper finite state systems hypergraph model distributed finite state systems 
ee pub department electrical engineering technion israel institute technology 
katz peled interleaving set temporal logic 
th acm symposium principles distributed computing vancouver canada pp 

katz peled efficient verification method parallel distributed programs 
lncs 
ramanujam thiagarajan decidability partial order temporal logic 
lncs springer verlag pp 

lehmann shelah reasoning time chance 
information control vol 
pp 

thiagarajan modal logic subclass event structures 
lncs springer verlag pp 

mazurkiewicz nski penczek concurrent systems inevitability 
tcs pp 

mukund thiagarajan axiomatization event structures lncs springer verlag pp 

mukund thiagarajan axiomatization branching prime event structures tcs vol 
pp 

penczek temporal logic event structures 
fundamenta informaticae vol 
pp 

penczek temporal logic local specification concurrent systems 
information processing elsevier science publishers 
north holland ifip pp 

penczek undecidability propositional temporal logics trace systems 
information processing letters pp 

penczek axiomatizations temporal logics trace systems 
lncs springer verlag pp 

peled pnueli proving partial order liveness properties 
lncs springer verlag pp 

pinter wolper temporal logic reasoning partially ordered computations 
proc 
rd symp 
principles distributed computing vancouver 
reisig temporal logic causality choice distributed systems 
lncs springer verlag pp 

sistla clarke complexity propositional temporal logic 
acm symp 
theory computing 
winskel events computation 
ph thesis department computer science university edinburgh 
winskel event structure semantics ccs languages 
lncs 
winskel event structures 
lncs springer verlag pp 

winskel event structures 
lncs springer verlag pp 


proc 
th conference logic methodology phil 
science moscow vol 

vardi stockmeyer improved upper lower bounds modal logics programs 
proc 
th ann 
symp 
theory computing 
