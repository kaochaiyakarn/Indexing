van der aalst barros ter hofstede kiepuszewski eindhoven management department information technology box nl mb eindhoven netherlands 
distributed systems technology centre university queensland brisbane qld australia cooperative information systems research centre queensland technology box brisbane qld australia limited box brisbane qld australia conventional ow functionality task sequencing split parallelism join synchronization iteration proven ective business process automation widespread support current ow products 
newer requirements ows encountered practice opening grave uncertainties extensions current languages 
di erent concepts appearing di erent paradigms fundamentally di di specialized modeling generalized posit 
way developmental requirements de ne ow patterns imperatively independently ow languages 
patterns provide basis depth comparison ow reported seen academic response evaluations prestigious consulting companies 
typically evaluations hardly consider routing capabilities focus purely technical commercial aspects 
background ow technology continues subjected going traditional application areas business process modeling business process part done university colorado usa sabbatical leave 
partially supported component system architecture open distributed enterprise management system con gurable ow support qut 
coordination emergent areas component frameworks ow business business interaction 
addressing broad ambitious reach large number ow products mainly ow management systems wfms commercially available see large variety languages concepts di erent paradigms see 
current provisions compared newer concepts languages embarked striking little standards glossaries available central 
reasons attributed lack consensus constitutes ow speci cation organizational level de nition imparted ows 
absence universal organizational theory contended explains ultimately justi es major di erences opening horses courses diversity di comparison di ow products winds dissemination products critique bigger picture di erences ow speci cations highlighted technology typically platform dependent issues 
ow speci cations understood broad sense number di erent perspectives see 
perspective process perspective describes activities execution ordering di erent constructors permit ow execution control sequence splits parallelism join synchronization 
activities elementary form atomic units compound form modularize execution order set activities 
layers business processing data control perspective 
business documents objects activities local variables ow qualify ect pre post conditions activity execution 
provides organizational structure anchor form human device roles responsible executing activities 
perspective describes elementary actions executed activities actions map underlying applications 
typically business ow data passed applications activity application interfaces allowing manipulation data applications 
clearly control ow essential ow speci cation ectiveness 
data ow perspective rests organizational operational perspectives ancillary cations extended meet newer processing requirements control ow constructors require fundamental insight analysis 
currently ow languages support basic constructs sequence iteration splits joins see 
interpretation basic constructs uniform unclear complex requirements supported 
vendors orded opportunity recommend implementation level hacks database triggers application event handling 
result ow speci cations clean newer requirements advanced 
problem formal quali cation distinctive features di ow languages fundamentally di erent semantics 
languages allow multiple instances time 
languages structure loops entry point exit point loops allowed arbitrary entry exit points 
languages require explicit termination activities ows compound activities termination implicit 
di erences point di erent insights di erent levels 
challenge whichwe undertake understand complex requirements addressed current state art 
requirements experiences recur quite frequently analysis phases ow projects grave uncertainties looking current products 
fundamental di erences indicated tempting build extensions language semantic context 
strategy rigorous results provide detailed unambiguous view extensions entail 
strategy practical 
draw implementation consequences big potentially big players 
increasing ow technology ow language extensions feel board slip technique proposals 
approach indicate new requirements ow languages ow 
described pattern abstraction concrete form recurring speci non arbitrary contexts 
gamma rst catalogued systematically design patterns describe smallest recurring interactions object oriented systems 
design patterns provided independence implementation technology time independence essential requirements domain attempting address see 
purpose patterns address business requirements imperative ow style expression removed speci ow languages 
claim way addressing business requirements 
ow approach allowing potential mapping positioned closely di erent languages implementation solutions 
lines patterns described conditions hold pattern applicable examples business situations problems typically semantic problems realization current languages implementation solutions 
rest describes ow patterns 
patterns just small sample patterns ed 
report patterns 
assumed reader familiar basic functionality current ows sequence splits joins iteration 
goal provide ow functionality shows avor research conducted 
complete overview refer 
advanced synchronization patterns ow engines basic forms synchronization supported join join 
actual semantics constructs di er system system safely assumed intention synchronize concurrent threads intention join merge threads implicit assumption thread active run time 
di erent business scenarios require advanced synchronization patterns 
example advanced synchronization pattern called synchronizing merge 
pattern synchronizing merge ow process multiple paths converge single thread 
path taken synchronization active threads needs take place 
path taken alternative branches synchronization 
synchronizing join executing activity activity activity executed 
possible need executed 
activities completed activity needs performed exactly 
main diculty pattern decide synchronize merge 
synchronizing alternative ows leads potential deadlocks merging parallel ows may lead unwanted multiple execution activity follows standard join construct 
ow engines known authors provide straightforward construct realization pattern mqseries ow inconcert 
noted earlier synchronising merge follows split outgoing transition split triggered runtime tell synchronization take place 
mqseries ow works problem passing false token transition evaluates false true token transition evaluates true 
merge wait receives tokens incoming transition 
inconcert false token concept 
passes token transition graph 
token enable execution activity depending entry condition 
way activity having incoming transition expect receive token deadlock occur 
careful reader evaluation strategies require ow process contain cycles 
ow engines implementation synchronizing merge straightforward 
common design pattern avoid explicit split may trigger outgoing transition splits splits guarantee trigger outgoing transitions call splits remaining 
easily synchronize corresponding branches join join constructs 
synchronizing merge just example advanced synchronization pattern 
wehave identi ed additional ones multi merge discriminator join 
structural patterns di erent ow management systems impose di erent restrictions ow models 
restrictions arbitrary loops allowed nal node natural modeling point view tend restrict speci cation freedom business analyst 
result business analysts restrictions ow language start model problems freely transform resulting speci cations 
real issue suitability cases resulting ows may unnecessarily complex impacts users may wish monitor progress ows 
example typical structural requirement imposed ow products ow model contain node case nodes ow model terminate rst reached 
business models follow pattern natural think business process terminated done 
pattern implicit termination agiven subprocess terminated done 
words active activities ow activity active time deadlock 
semantics typically assumed ow model analysis stage 
ow engines terminate process explicit node reached 
current activities happen running time aborted 
ow engines sta ware mqseries ow inconcert terminate sub process done 
typical solution problem transform model equivalent model terminating node 
complexity task depends actual model 
easy fairly straightforward typically combination di erent join constructs activity repetition 
cases possible 
clearly cases impossible model involves multiple instances see section 
required semantics impossible achieve resorting external triggers 
pattern described called arbitrary cycle cf 

virtually ow engine constructs support modeling loops 
ow engines provide support refer 
structured cycles entry point loop exit point loop interleaved 
compared loops programming languages arbitrary cycles goto statements 
analogy deceive reader thinking arbitrary cycles desirable important di erences classical programming languages presence parallelism cases impossible remove certain forms arbitrariness fact removal arbitrary cycles may lead ows harder interpret opposed programs ow speci cations understood runtime users 
patterns involving multiple instances activity ow management systems problems phenomenon refer theoretical point view concept relatively simple corresponds token place petri net representation ow graph 
practical means ow graph running active instance time 
see valid frequent requirement 
fundamental problem implementation pattern due design constraints lack anticipation requirement ow engines allow instance activity active time 
example discuss pattern dealing multiple instances 
pattern multiple instances requiring synchronization case times 
number instances may known design time 
completing instances activity activity started 
booking trip activity executed multiple times trip involves multiple 
bookings invoice sent client 
computers results certain number deliveries 
deliveries processed closed 
ow engines allow multiple instances 
languages instances fort provide allow synchronization instances 
languages support asynchronous subprocess invocation visual construct provide means synchronization spawned subprocesses 
number instances maximum number instances known design time easy synchronize multiple instances implemented activity repetition basic synchronization 
language supports multiple instances decomposition terminate activities nished multiple instances synchronized placing ow sub loop generating multiple instances inside decomposition block 
activity done instances completed follow block 
mqseries ow construct number instances known point runtime synchronize created instances 
ow languages solutions easily implemented 
typical problem external triggers 
instance activity completed event sent 
activity main process waiting events 
activity complete events instance received 
pattern just example pattern dealing multiple instances 
ed additional ones 
illustrates design patterns dealing multiple instances 
ow implemented languages supporting multiple concurrent instances implicit termination see pattern 
activity invoked times activity determine instances needed 
instances completed subprocess complete activity processed 
implicit termination subprocess synchronizing mechanism multiple instances activity ow implemented languages support multiple concurrent instances 
activity invoked asynchronously typically api 
easy way synchronize xor instance instances instances task determine number required instances solution xor sub merge xor instances needed instances needed task determine instances needed merge xor instances needed instances needed task determine instances needed invoke workflow workflow workflow design patterns multiple instances instances activities 
ow demonstrates simple implementation known design time instances 
state patterns real ows ow instances state awaiting processing processed 
computer scientists frame mind typically derived programming notion state interpreted narrower fashion essentially reduced concept data 
section illustrate real di erences processes computing business scenarios explicit notion state required 
notation far suitable capturing states explicitly adopt variant petri nets described illustrating patterns section 
petri nets provide possible solution modeling states explicitly example commercial ow management system petri nets cosa 
moments choice constructs xor splits ow management systems typically nature data captured decision activities 
means choice priori actual execution selected branch starts internal choice 
notion appropriate 
consider adopted 
gure ows depicted 
ows execution activity followed bythe execution ow late possible 
execution activity race activities external message required activity explains envelope notation arrives starts executing activity activity indicates requires human intervention executed 
ow choice xed execution activity 
activity selected arrival external message impact 
activity selected activity bypass activity 
important realize ow activities stage simultaneously scheduled 
actual choice disabled 
ow activities stage scheduled 
explicit split implicit split illustrating di erence implicit explicit xor splits ow management systems states subsequent activities diculties modeling implicit choices 
pattern deferred choice ow process branches chosen 
contrast xor split choice explicitly data decision alternatives ered environment 
contrast split alternatives executed 
means environment activates branches alternative branches withdrawn 
important note choice delayed processing alternative branches started late possible 
external choice implicit choice 
receiving products transport products department 
selection availability corresponding resources 
choice deferred resource available 
see choice 
activity may sending form customer 
activity corresponds processing form returned 
activity corresponds situation form received time 
ow management systems support xor split support implicit xor split 
types choices desired see example absence implicit split real problem 
assume ow language supports splits cancellation activities 
implicit xor split realized enabling alternatives split 
processing alternatives started alternatives cancelled 
consider implicit choice 
enabled 
selected executed activity cancelled 
selected executed activity cancelled 
note solution selected executed concurrently 
solution problem replace implicit xor split explicit xor split additional activity added 
triggers activating alternative branches redirected added activity 
assuming activity distinguish triggers activate proper branch 
consider example shown 
introducing new activity redirecting triggers implicit xor split replaced explicit xor split origin rst trigger 
note solution moves part routing application task level 
identi ed patterns related deferred choice 
example pattern called milestone 
pattern branch parallel process ered time window branch executed certain parts process 
related patterns cancel activity cancel case interleaved parallel routing 
patterns common explicit notion states required supported ow management systems 
interesting think reason ow products problems dealing state patterns 
systems states typically messaging activity completes noti es triggers activities 
means activities receipt messages 
state patterns common activity temporarily 
states implicit means disable activities negative messages systems problems dealing constructs mentioned 
note synchronous nature patterns deferred choice pattern complicates asynchronous communication mechanisms message passing negative messages messages cancel activities 
epilogue ow patterns described correspond routing constructs encountered modeling analyzing ows 
patterns illustrate complete set ow patterns reported 
patterns dicult impossible realize ow management systems available today 
indicated routing functionality hardly taken account comparing evaluating ow management systems 
system checked presence sequential parallel conditional iterative routing considering ability handle subtle ow patterns described 
evaluation reports provided prestigious consulting companies big andersen worldwide ernst young price waterhouse typically focus purely technical issues database management systems supported pro le software supplier vendor taken near marketing strategy product speci cally target telecommunications industry 
result select ow management system needs 
wehave comprehensive set ow patterns compare ow management systems cosa visual ow fort conductor meteor mobile mqseries ow sta ware ow inconcert sap ow cf 

comparison clear tools support selected patterns 
fact tools support fraction patterns best support 
speci cally limited support state patterns advanced synchronization patterns multiple instances merge worth noting 
typically confronted questions certain complex patterns need implemented product respond analyst may need resort application level external events database triggers 
defeats purpose ow engines rst place 
worthwhile set patterns check list selecting ow product 
disclaimer 
authors associated institutions assume legal liability responsibility accuracy completeness product speci information contained 
possible orts sure results best knowledge upto date correct 

van der aalst 
chapter reasons petri ow management system 
wakayama editor kluwer international series engineering computer science pages 
kluwer academic publishers norwell 

van der aalst 
application petri nets ow management 


van der aalst barros ter hofstede kiepuszewski 

unpublished pages 

van der aalst ter hofstede 
veri cation ow task structures petri net approach 


ga tamer ozsu sheth editors 
volume 
springer verlag berlin 

ellis nutt 
modelling enactment ow systems 
ajmone marsan editor volume pages 
springer verlag berlin 

fowler 
addison wesley reading massachusetts 

gamma helm johnson vlissides 
addison wesley reading massachusetts 

georgakopoulos hornick sheth 
overview ow management process modeling ow automation infrastructure 


jablonski bussler 
international thomson computer press 

kiepuszewski ter hofstede bussler 
structured ow modelling 
bergman editors volume pages stockholm sweden june 
springer verlag berlin 


van nostrand reinhold new york 

lawrence editor 
john wiley sons new york 

leymann roller 
prentice hall ptr upper saddle river new jersey usa 

riehle 
understanding patterns software development 


sch volume 
springer verlag berlin 

wfmc 
ow management coalition terminology glossary 
technical report ow management coalition brussels 
