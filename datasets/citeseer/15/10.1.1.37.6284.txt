zeus system algorithm animation multi view editing marc brown february systems research center dec business technology objectives require strong research program 
systems research center src research laboratories committed filling need 
src began recruiting research scientists charter advance state knowledge aspects computer systems research 
current includes exploring high performance personal computing distributed computing programming environments system modelling techniques specification technology tightly coupled multiprocessors 
approach hardware software research create real systems investigate properties fully 
complex systems evaluated solely 
belief strategy demonstrate technical practical feasibility ideas building prototypes daily tools 
experience gain useful short term enabling refine designs invaluable long term helping advance state knowledge systems 
major advances information systems come strategy including time sharing arpanet distributed personal computing 
src performs mathematical flavor complements systems research 
established fields theoretical computer science analysis algorithms computational geometry logics programming 
rest explores new ground motivated problems arise systems research 
dec strong commitment communicating results experience gained pursuing activities 
values improved understanding comes exposing testing ideas research community 
src report results conferences professional journals research report series 
seek users prototype systems common research interests encourage collaboration university researchers 
robert taylor director equipment may copied reproduced part commercial purpose 
permission copy part payment fee granted nonprofit educational research purposes provided partial copies include notice copying permission systems research center digital equipment palo alto california acknowledgment authors individual contributors applicable portions copyright notice 
copying reproducing republishing purpose shall require license payment fee systems research center 
rights reserved 
algorithm animation form program visualization concerned dynamic interactive graphical displays program fundamental operations 
describes zeus algorithm animation system 
zeus noteworthy objects strong typing parallelism 
interest system building multi view editors 
review jim applications important observe program progress obtain final result 
zeus system described provides support watching hearing program action different views 
programmer animating application provides description application fundamental operations called interesting events 
interesting event occurs view updates visual aural display appropriately 
zeus system exploits modula object inheritance lightweight threads compile time type checking programmer take advantage predefined classes methods construct sophisticated efficient animation quickly easily 
algorithm animation systems provide facilities users view interact animated display algorithm programmers develop animations 
users system provides ways control data algorithms ensemble views execution algorithms 
programmers system provides support producing animation algorithm easy producing textual trace 
common approach animating algorithms specified high level procedural languages pioneered balsa 
briefly approach follows algorithm annotated markers identify fundamental operations displayed 
annotations called interesting events parameters typically identify program data 
view controls screen real estate notified event happens algorithm 
view responsible updating graphical display appropriately event 
views propagate information user back algorithm 
describes zeus algorithm animation system 
began developing system summer system stable years 
addition animating algorithms domains computational geometry operating systems hardware design distributed spanning trees communication protocols zeus conceptual framework multi view editor building graphical user interfaces 
zeus noteworthy objects strong typing parallelism 
zeus allowed explore color sound previously areas algorithm animation 
videotape algorithm animations developed zeus available 
client code system implemented house dialect modula tailored building large integrated object concurrent programs 
language distributed shall sake illustration examples modula 
section describes facilities zeus offers user 
describe programmer views system give example algorithm view coded zeus 
essentials system implementation 
final section describes zeus building multi view editors 
user perspective user invokes zeus application control panel shown fig 
appears window screen 
control panel provides user configuration interpretive facilities 
configuration facilities user select algorithm run views open data give selected algorithm 
view appear window installed workstation window manager 
contents data subwindow specific algorithm zeus provides defaults giving data 
configuration facilities user write snapshot state system file locations view windows data values selected algorithm restore system previously created snapshot 
interpretive facilities allow starting stopping single stepping algorithm 
user control speed animation 
zeus interpreter special purpose works terms interesting events generated algorithm 
instance user command single step causes zeus allow algorithm advance event generated 
intention zeus runtime facilities minimal 
specific features chose implement felt important expected users experiences balsa balsa ii considerable effort devoted user interface 
instance expected zeus classroom setting balsa systems implemented scripts high level recordings user session replayed 
utility views novel feature zeus generate utility views automatically set interesting events algorithm generates 
views appear animation selection sort shown fig 

transcript view contains displays interesting event symbolic expression generated 
editable part contains lisp read eval print loop preloaded functions names events 
function invoked system behaves algorithm view caused event generated 
second view zeus provides automatically control panel 
view zeus control panel 
buttons corresponding interesting event appropriate graphical widgets specifying parameter 
clicking button causes event generated specified parameter values 
views proven extremely valuable debugging algorithms views 
develop debug view implementing algorithm 
programmer perspective programmer zeus thought domain independent framework associating multiple client defined views set client defined interesting events generated client program called algorithm 
view animated picture events generated algorithm 
example canonical view sorting algorithm see fig 
shows elements sorted row sticks height stick proportional value corresponding element array 
algorithm exchanges values array elements generates event exchange 
response exchange interesting event view changes height sticks corresponding array elements swapped 
interesting events interesting events specified procedure signatures 
zeus preprocessor reads file containing event specifications generates definitions algorithm view classes ll terms class object interchangeably 
generates utility views described section procedures dispatching events algorithms views shall see 
approximation view object subclass window additional methods process events generated algorithm 
similarly algorithm window subclass typically seen screen additional methods process events views may generate 
recall view typically generates events response user gesture 
views algorithms subclasses zeus class window subclassed support algorithm animation multi view editing 
file event specifications elementary sequential sorting algorithms animation selection sort 
events sort array key cardinal output init cardinal output cardinal old key output cardinal feedback cardinal new key name keyword events naming objects files generates 
keyword specifies data fields sorting algorithms class generated 
keyword output indicates event flow algorithm views feedback events flow view algorithm 
definitions generated procedures dispatch events algorithms views interface procedure init cardinal procedure cardinal old key procedure cardinal procedure cardinal new key algorithm annotated calls routines passing identifier parameter 
procedures called invokes method view designated respond event 
similar way views may annotated calls typically response user gestures 
body invokes corresponding method algorithm 
implementation dispatching routines discussed section 
flow events algorithm views appearing fig 
follows selection sort sticks view dots view transcript view control panel view output events flow left right feedback events right left 
box represents module white generated contents event specifications gray implemented programmer animating algorithm 
ll look implementation sort section sticks view section 
remainder section describes class hierarchy leading implementations sort sticks view 
basic classes class hierarchy views algorithms animation selection sort appearing fig 
follows root window zeus algorithm view sticks transcript dots root object part modula language basis objects 
window object window installed screen 
contents windows maintained window subclasses 
zeus class window methods zeus needs multi view event processing 
algorithm view subclasses domain independent subclassed domain specific ways 
subclasses generated specifications sorting events saw section 
subclasses sorting algorithms instrumented animation subclasses views meaningful displaying sorting algorithms 
views appear fig 

definition zeus class follows interface zeus type window object methods init dispose configure deleted boolean snapshot wr restore rd init method perform initialization happen exactly zeus object 
dispose method called object longer needed 
instance view longer needed view window deleted user window manager algorithm longer needed user changes algorithm run 
dispose method release resources 
method called user starts algorithm handy way views reinitialize displays 
method called algorithm finishes possibly user explicitly aborted execution abort button 
method easy algorithm clean concern terminated normally prematurely abort button 
configure method invoked view deleted added 
occasionally useful algorithm views know views currently screen available user 
snapshot restore method implement snapshot facility mentioned section 
algorithm class subclass zeus class additional methods 
run invoked user starts algorithm clicking go button zeus control panel 
data invoked user clicks data button control panel 
definition interface algorithm type zeus object methods run data run method typically collects data specified user starts generating events 
typically thinks algorithm 
data method typically displays dialog lets user specify data algorithm 
examples dialogs appear data subwindows figs 

methods inherited zeus class typical behaviors init method fills initial values dialog dispose method releases resources data dialog algorithm 
snapshot restore methods cause values interactors data dialog saved restored 
configure methods 
keep mind algorithm inheritance window typically installed window manager 
algorithm class generated event file domain specific subclass algorithm 
contains data fields specified information event specifications methods process feedback event 
definition interface type algorithm object array key cardinal methods cardinal new key method invoked view interprets user gesture mean value key sorted change 
algorithm told view initiating change algorithm response message key value changed independent view user 
implementation provide default methods algorithm methods 
methods support dialog ways enter set integers sorted 
view class simply subclass zeus class additional methods interface view type zeus object methods inherited zeus class snapshot restore methods interesting defaults 
default snapshot method records screen location window 
views allow user interaction control viewing parameters information algorithm local view override default snapshot method encode current parameters set user 
restore procedure inverse snapshot procedure 
view zeus objects may appear equivalent data types modula 
zeus system exploits fact language features distinguish view algorithm subclasses zeus class 
view class generated event file subclass view additional methods process output event interface type view object methods cardinal cardinal old key cardinal methods invoked algorithm runs events generated 
view essentially window additional sets procedures 
set common zeus views zeus class set common views particular algorithm class 
algorithms consider elementary sorting algorithm selection sort 
subclass class examined run methods overridden module type object overrides run run run method copied verbatim textbook procedure run self var min integer key getdata self self self min min min self min run call referred earlier annotation algorithm interesting events 
call cause method view invoked order update displays actual implementation generated 
method instructive examine 
method invoked view interprets user gesture change value key 
procedure changes specified element broadcasts views key value changed procedure self view cardinal new key self self old new self old multi threaded environment zeus possible called run method executing 
zeus simplifies client code reader writer locking scheme view may generate event holds write lock algorithm may generate event read lock 
note scheme allows multi threaded algorithm generate events parallel 
course changing value data elements program underway may proposition 
certainly cause selection sort perform incorrectly 
hand editing underlying data views essence multi view editors shall explore section 
views difficult part animating algorithm creating views 
hardest enjoyable part deciding view look sound order convey interesting information 
systems tango provide powerful dimensional graphics package 
tango systems allow users graphically demonstrate views look behave 
zeus sophisticated graphics packages specially built graphical editors 
zeus allow algorithm animator graphically demonstrate instance object view look rudimentary library procedures interpolate changes object parameters time 
editor defining objects user interface development environment 
originally designed dialog boxes general purpose completely easily extensible 
quickly incorporate new widgets appropriate building blocks views 
fig 
shows view fig 
constructed 
way zeus helps programmers create views stems fact zeus views true objects 
standard types behavior saving state installing window system provided inheritance 
sophisticated views customize behavior simple views need concerned 
algorithm animation system dictate long list rules view behave systems 
second easy subclass compose views 
example fig 
back back stem view composed instances view 
views programmed directly 
instance sticks view fig 
coded subtyping window class maintain collection rectangles 
definition object implements sticks view constructing view graphically multi view editor 
multiple views multiple algorithms 
type object overrides init init init method creates new object stores handle object installs window 
event processing methods straightforward calls entry points module 
events procedure self cardinal zeus self set self set self parameters set handle window class unique identifier rectangle north south east west coordinates 
safe view method access sequential algorithm data fields zeus stops current algorithm thread running event progress 
multi threaded algorithm threads modifying data fields event thread progress views careful acquire appropriate lock algorithm accessing algorithm data 
complication arises multi threaded window system regardless algorithm multi threaded concerns requests issued window manager 
view subclass window handle requests issued 
view method careful algorithm data algorithm may running concurrently coordinate locking scheme algorithm 
system implementation zeus system comprises control panel event dispatching default methods algorithm view classes 
seen gist default algorithm view classes 
implementation configuration aspects control panel straightforward 
commands snapshot just invoke appropriate zeus method snapshot method algorithm current set views 
implementation control panel interpretive commands tricky primarily user commands happen asynchronously algorithm running 
go button hidden pull menu fig 
causes algorithm run method invoked separate thread 
thread terminated user invokes abort button 
step command implemented setting zeus variable true variable checked event dispatching code 
step command awakens algorithm thread case currently stopped advanced 
program stopped go button replaced resume button 
resume button implemented algorithm thread setting 
zeus event dispatching implemented bodies event procedures generated 
case event sent algorithm views event forks thread view thread invokes appropriate method 
views completed message dispatcher returns algorithm set 
case flag cleared algorithm sleeps awakened result user issuing resume step command 
pseudo code procedure alg cardinal foreach view zeus alg fork view wait threads join zeus zeus false sleep awakened actual code slightly complicated reasons happen concurrently event dispatching access list views step flag protected lock 
second forked view methods raises exception caught reported back caller 
events event algorithm animation systems notably balsa tango events zeus strongly typed 
impossible algorithm invoke event wrong number types parameters likewise impossible view respond event retrieving correct number types parameters 
discussion benefits costs strong type checking scope experiencing types systems strong proponents strong type checking 
preprocessor preprocessor plays important role zeus system generates class definitions bodies event procedures various utility views 
important flexible generate 
achieve flexibility driving file event definitions various template files 
template file expanded event procedure signatures 
example actual template event follows module procedure event alg alg foreach view zeus alg fork view oe event wait threads join zeus zeus false sleep awakened event 
template file sorting events generate body saw 
initial version written unix awk sed trans house awk filter 
shell script lines long consisted dozen calls sed awk trans 
unfortunately text manipulation template files rich generate control panel view view know base type parameter order type specific widget displaying parameter value 
subsequently reimplemented modula linked type system existing compiler tools 
multi view editing zeus building multi view editors 
multi view editing system algorithm maintains data structures shared views editors 
view interprets user gestures initiates feedback events algorithm algorithm updates common data structures sends output events views 
view including view user initiated editing action updates response output events 
algorithm run method invoked important maintain distinction algorithm view ensure proper directional flow events 
framework implemented multi view editor creating user interfaces system see fig 

editable views graphics view left direct manipulation graphical editor text view lower right uses conventional text editor display edit expression underlying user interface graphics view 
changes editor reflected simultaneously editor 
result view upper right shows user interface look runtime proper reaction mouse keyboard activity proper sizing stretching 
result view updated user edits graphics text view 
editing result view change underlying expression 
organized central data structure parse tree 
tree represents expression having node component 
algorithm module maintains parse tree communicates tree changes views output events 
change request arising user action editable views issued feedback event editor parse tree module 
module change tree generates output event 
parallel view updates local data structures appropriately 
block diagram shows information flows modules feedback feedback output output output text view graphics view result view parse tree important realize modules call arrows diagram suggest 
modules annotated events body event routine generated hand preprocessor historical reasons invokes method editor output events parse tree module feedback events 
modules generate events calling modules directly new editors multiple instances editor added changing existing editors algorithm module 
example convenient run multiple instances result view 
important view initiating editing action report error conditions may algorithm view detects error 
handled appropriate bookkeeping event dispatching procedure 
systems algorithm animation matured significantly decade 
zeus contributes evolutionary path practical system design implementation quite simple 
simplicity achieved primarily exploiting modern programming technologies objects type checking threads 
constructing animations zeus appears easy straightforward algorithm animation system 
objects easy reuse views build sophisticated views composing subclassing views 
graphical editor helps construct new views 
contains support specification incremental transformations haven felt hindered practice 
zeus events strongly typed eliminating large class common programming errors 
typed events allow automatic creation event generating views 
inspired suited zeus turned building multi view editor application look forward discovering uses algorithm animation systems 
acknowledgments ken brooks john hershberger implemented preprocessor 
john lyle ramshaw improved clarity 
gideon kenneth brooks marc brown 
view approach constructing user interfaces 
computer graphics july 
marc brown 
exploring algorithms balsa ii 
ieee computer may 
marc brown john hershberger 
color sound algorithm animation 
proc 
ieee workshop visual languages pages october 
expanded version available research report dec systems research center lytton ave palo alto ca 
marc brown robert sedgewick 
system algorithm animation 
computer graphics 
marc brown ed 
algorithm animations zeus 
research report videotape dec systems research center lytton ave palo alto ca september 
segment entitled zeus audio visualization elementary sequential parallel sorting algorithms part chi video program 
robert 
visual programming program visualizations 
proc 
conf 
visual languages august 
sam harbison 
modula 
prentice hall englewood cliffs nj 
esa kari 
graphical specification algorithm animations aladdin 
proc 
nd hawaii int 
conf 
system sciences pages january 
greg nelson ed 
systems programming modula 
prentice hall englewood cliffs nj 
john stasko 
tango framework system algorithm animation 
ieee computer september 

