succinct representation balanced parentheses static trees planar graphs ian munro venkatesh raman department computer science institute mathematical sciences university waterloo campus waterloo canada 
india 
uwaterloo ca ernet november consider implementation data types static objects binary tree rooted ordered tree balanced parenthesis expression 
representations amount space lower order term information theoretic minimum support constant time richer set navigational operations previously considered similar 
case binary trees instance move node left right child parent constant time retaining knowledge size subtree positioned 
approach applied produce succinct representation planar graphs test adjacency constant time 
keywords data type succinct representation binary trees balanced parenthesis rooted ordered trees planar graphs 
ams subject classifications binary tree fundamental data structures 
case substantial amounts data associated node important results appeared preliminary form proceedings th annual symposium foundations computer science focs 
cases little representation tree lg bit pointers node substantial dominant component total storage cost system 
binary trees nodes bits necessary ignoring logarithmic terms encode arbitrary binary tree 
easy come bit representation node binary tree balanced nested parenthesis sequence preorder traversal tree outputting open parenthesis visiting node time matching closing parenthesis visiting visiting nodes subtree 
difficult come optimal representation navigation tree matter parentheses done efficiently 
jacobson proposed method achieving information theoretically optimal bound lower order term 
interest representing static data structures succinctly permitting natural operations navigating structure performed quickly 
encoding permitted operations moving parent child node inspection theta lg bits 
shortcomings approach 
bits inspected means localized 
point binary search theta lg bits performed 
runtime certainly constant single operation permit inspection lg consecutive bits 
second really inspired 
number applications retention size subtree rooted current node essential 
example binary trie index full text search query phrase traces index trie bit pattern query 
runs query bits entire subtree rooted current node corresponds set matches query text 
subtree large crucial system able announce number matches enumerating 
example word occurs times oxford english dictionary 
clark munro bit encoding binary tree demonstrate viability succinct tree representations indexing large text files 
encoding important features bad 
explicitly giving size subtree node keeping track size subtree byproduct moving tree 
second structural information needed time 
meant considered trans dichotomous sense machine model changes match problem size model word sequence lg consecutive bits basic operations performed constant time 
shortcoming technique support efficient determination parent node 
give encoding arbitrary binary trees nodes bits lg bit word ram model 
representation supports operations left child right child parent size 
method mentioned maps nodes tree integers appropriate applications data associated nodes lg denote ceiling logarithm base lg denote square 
leaves 
despite motivation coming initially binary tree application technique focuses problem optimal representation sequences balanced parentheses 
class strings length isomorphic class binary trees nodes convenient denote number left parentheses half string length 
jacobson considered problem proposed bit solution factor times optimal 
solution supports operations ffl find position close parenthesis matches open parenthesis position ffl find position open parenthesis matches closing parenthesis position ffl excess find difference number open parentheses number closing parentheses position solution tree representation problem operations require inspection theta lg bits 
solution lower order term information theoretic bits operations performed constant time model 
operations necessary applications planar graph representation consider constant time support ffl enclose parenthesis pair open parenthesis position find closest enclosing matching parenthesis pair ffl double enclose non overlapping parenthesis pairs open parentheses appear positions respectively find parenthesis pair exists tightly encloses parenthesis pairs 
equivalent finding common ancestor analogous tree 
section discusses implementation nested balanced sequence parentheses section discusses representations static trees 
section gives efficient representation bounded page number graphs including planar graphs 
section presents concluding remarks appearance 
balanced parentheses nested sequence balanced parenthesis length left right parentheses 
want auxiliary storage bits answer standard operations constant time 
jacobson breaks sequence blocks length lg simply keeping theta lg bits information block contributes heavily lead term theta term amount storage required 
get problem levels blocking 
break sequence big blocks size lg permits constant number particular parentheses stored big block 
preclude scanning entire block constant time forces notion small block 
big block divided small blocks size lg lg lg local parenthesis big block requires lg lg bits single parenthesis stored header small block 
small blocks subdivided tiny blocks length lg lg small afford single table entry possible distinct tiny block 
help answer queries associate auxiliary storage blocks 
similar level storage succinctly represent sets support membership represent gamma strings support operations rank select determine respectively number point bit string position ith bit string 
gear description auxiliary storage answer operation finds matching close parenthesis open parenthesis position operations excess required way enclose implemented operation 
specifically address operations 
terminology jacobson call parenthesis far matching parenthesis lies outside block 
far parenthesis pioneer matching parenthesis lies different block previous far parenthesis sequence 
note matching parenthesis pioneer precede previous far left parenthesis may may far 
definitions general respect blocks sizes big small tiny 
noted terms context big blocks 
example matching parenthesis far parenthesis lies outside big block 
pioneer parenthesis keep address matching parenthesis 
achieved storing efficient hash table see addresses pioneer parentheses matching parentheses membership performed constant time 
parenthesis keep sufficient information find ffl immediately preceding pioneer parenthesis sequence ffl matching parenthesis matching parenthesis pioneer 
particular bits auxiliary storage contains ffl pioneer parenthesis position matching parenthesis 
ffl big block head position immediately preceding pioneer pioneer left excess binary number open parentheses minus number closed parentheses position 
ffl head small block big block position immediately preceding pioneer big block pioneer left big block excess binary starting big block head position value negative bit indicating pioneer small block bitmap pioneers small block small block contains pioneer 
block sizes big small blocks size information stored block headers information bitmap pioneers small block containing pioneer fixed information stored couple arrays indexed rank big blocks small blocks 
bitmap pioneers small block small blocks containing pioneer stored efficient hash table containing ranks bitmap pioneers small blocks containing pioneers 
furthermore possible gamma string length lg lg position string create table entry 
values table entry giving location string preceding string left position giving excess minus binary position inside string value negative 
note associated storage individual tiny blocks 

claim storage far sufficient find target big block excess position far parenthesis constant time 
jacobson noted blocks gamma pioneers lg pioneer parentheses 
hash table stores location matching parenthesis pioneer parenthesis takes lg bits see 
clear total space values associated big block head lg 
address previous pioneer inside big block excess inside big block till position headers small blocks take lg lg bits number small blocks lg lg total space store values lg lg bits 
number small blocks pioneers lg hash table storing bitmap pioneers take lg bits 
total number table entries lg lg lg lg lg table entry takes lg lg lg bits total lg lg lg lg lg lg lg lg bits 
find preceding pioneer parenthesis far parenthesis position constant time follows ffl position check consulting header small block belongs small block belongs pioneer 
ffl small block header big block header give address previous pioneer 
ffl pioneer small block table lookup index bitmap pioneers small block position gives address previous pioneer 
completely analogous strategy finds excess position 
treat left parenthesis right parenthesis index table table look 
words table entry header small block left header big block left inspected appropriate values summed get answer 
find preceding pioneer parenthesis parenthesis know target big block parenthesis matching parenthesis information pioneer 
call excess value referring left excess retain auxiliary storage similar information regarding excess reversal sequence 
right excess position defined determined analogous way 
specifically right excess position number close parentheses minus number open parentheses right position far open parenthesis left excess position matching parenthesis target big block left closing parenthesis right excess note may parentheses excess 
compute information need similar inverse excess operation excess value block want find parenthesis excess value block 
headers small blocks big blocks excess information positions simply consult headers scan small block find answer 
require parenthesis right excess target block 
handle problem create auxiliary storage 
note excess big block lg block keep table answers closing bracket excess lg inside block 
requires lg lg bits answer lg lg lg bits total 
find bracket specified excess multiple lg scan portion answers corresponding closest multiple lg excess 
portion consecutive answers size lg solve problem keeping table answers string position 
takes lg lg lg bits total 
hand portion consecutive answers larger lg keep answer intermediate excess closest lg multiples 
lg answers portion requiring total lg lg lg bits portion 
lg portions total space requirement values lg lg lg bits 
constant time find matching closing parenthesis far open parenthesis bits extra storage 
completely analogous strategy finds matching open parenthesis far closing parenthesis 
way saw find excess value position constant time 
need explain implement enclose double enclose operations deal parentheses far 
outline method finding closest enclosing parentheses matching parenthesis pair positions suppose parenthesis position left excess position 
right parenthesis answer closest enclosing parenthesis closing parenthesis block block having far parenthesis right excess gamma 
method described earlier find closing parenthesis excess target block 
excess gamma may block containing block header keep pointer parenthesis right excess minimum block 
requires additional lg bits 
find right parenthesis answer matching parenthesis constant time operation 
find closest enclosing parenthesis exists matching parenthesis pairs positions similar procedure 
left excess position right parenthesis answer exists closing far parenthesis block block having far parenthesis right excess gamma 
check parenthesis matching pair inside big block check far respect big block run exactly procedure big block small blocks playing role big blocks tiny blocks playing role small blocks 
difference initial entire sequence balanced nested sequence sequence inside big block may 
easily taken care imagining blocks big block required number open closing parenthesis respectively augmented sequence balanced 
need keep auxiliary storage imaginary blocks 
furthermore parenthesis matching parenthesis imaginary blocks know far 
rest argument goes 
completion give complete description auxiliary storage count 
purpose fix big block big block parenthesis lies speak far pioneer parentheses respect small blocks big block 
note sequence inside big block general balanced imagine augmenting block preceding succeeding balanced 
parentheses matching pairs lie imaginary blocks far ones interested 
fact pioneers respect small blocks 
addition storage described earlier auxiliary storage analogous previously described full structure consists note discussion far pioneer respect small blocks big block 
ffl pioneer parenthesis store position matching parenthesis 
pioneer parentheses matching pair big block far simply indicate special bit 
hit parenthesis immediately know far 
ffl small block head keep position immediately preceding pioneer big block pioneer left excess binary number open parentheses minus number closed parentheses position big block 
ffl head tiny block small block keep excess binary starting small block head position bit indicating pioneer tiny block bitmap pioneers tiny block block contains pioneer position immediately preceding pioneer small block pioneer left small block furthermore possible gamma string length lg lg position string create table entry 
values table entry giving location string preceding string left position giving excess minus binary position inside string value negative 
show storage suffices identify constant time parenthesis far respect big block 
lg lg lg small blocks inside big block lg lg pioneer parentheses total 
space store matching parenthesis pioneer parenthesis lg lg bits requiring total lg lg bits hash table storing addresses pioneers 
clear total space values associated small block head lg lg 
values address previous pioneer inside small block excess inside small block headers tiny blocks take lg lg lg bits number tiny blocks lg lg total space store values lg lg lg lg lg bits 
number tiny blocks pioneers lg lg bitmap pioneers take lg lg bits hash table storing bitmaps 
total number table entries lg lg lg table entry takes lg lg lg bits total lg lg lg lg lg lg bits 
completely analogous procedure described earlier find target small block exists far respect small blocks open parenthesis constant time 
target block happens imaginary blocks 
excess target small block find answer small block similar strategy big blocks require auxiliary storage bits 
size big block lg size small block lg keep auxiliary storage answers analagous described earlier replacing required storage bits big block resulting bits turns lg lg lg lg lg 
check parenthesis matching pair inside small block size lg lg table parenthesis strings answers position string 
requires lg lg lg lg lg lg lg lg bits 
summarize open parenthesis check matching pair small block table answers 
check matching pair big block procedure described small tiny block divisions 
procedure described big small block divisions find matching parenthesis 
completely analogous strategy works find excess value position 
theorem nested string balanced parentheses auxiliary bits perform operations excess enclose double enclose constant time 
static trees rooted ordered trees represent general rooted ordered tree node unbounded number children isomorphism general ordered trees balanced parenthesis expressions 
performing preorder traversal general tree starting root write open parenthesis node encountered going tree closing parenthesis going traversing subtree 
example rooted ordered tree represented parenthesis sequence 
representation observations 
represent node corresponding left parenthesis 
ffl parent node closest parenthesis pair enclosing parenthesis pair corresponding node 
ffl subtree node consists nodes represented parenthesis pairs sequence starting left parenthesis corresponding matching right parenthesis 
subtree size simply half difference indices right parenthesis left parenthesis points included 
ffl th child node obtained follows 
parenthesis left parenthesis right parenthesis children 
left parenthesis matching right parenthesis form child parenthesis left matching parenthesis form second child 
process operation gamma times find left parenthesis th child find th child 
similar fashion node find left right sibling constant time 
theorem static rooted ordered tree nodes represent bits way node find parent subtree size constant time find th child time 
note require node position left parenthesis sequence 
left parenthesis position sequence find constant time preorder index node corresponding follows 
preorder index corresponding node simply number left parenthesis including position ways simply rank function sequence find rank current left parenthesis 
option excess operation find excess left parenthesis right parenthesis position gamma compute know binary trees binary tree just special case ordered rooted tree distinction node having left child right child right child left 
take advantage known isomorphism classes 
ordered tree root correspond node binary tree 
left child node binary tree corresponds leftmost child ordered tree right child binary tree corresponds sibling right ordered tree 
consequence root binary tree corresponds leftmost child root ordered tree 
see example figures isomorphism map ordered tree binary tree permit representation ordered tree nodes fixed size pointers 
opposite direction representation rooted ordered trees enables store subtrees contiguous segments infer size subtree 
represent binary tree sequence nested balanced parentheses length 
example binary tree represented fig binary tree nodes fig equivalent rooted ordered tree fig parenthesis representation parenthesis sequence 
convention denote node corresponding left parenthesis sequence 
facts follow immediately binary tree representation parenthesis sequence 
ffl symbol left parenthesis corresponding node left parenthesis corresponds left child node 
left child absent 
ffl find right child exists find matching parenthesis left parenthesis corresponding node 
symbol open parenthesis parenthesis corresponding right child node 
right child 
ffl find parent node symbol parenthesis corresponding node open parenthesis parent 
symbol root 
symbol closing parenthesis left sibling general tree 
find matching open parenthesis 
parenthesis corresponding parent binary tree 
ffl subtree rooted node binary tree consists nodes subtrees rooted right siblings general tree 
parenthesis notation corresponds parentheses pairs left parenthesis including right parenthesis parent general tree 
parent parentheses closest enclosing parenthesis parentheses 
left parenthesis find closest enclosing parentheses enclose operation obtain parentheses corresponding nodes entire subtree rooted size subtree rooted simply half difference indices right parenthesis parent excluding left parenthesis theorem static binary tree nodes represent bits node tree find left child right child parent node size subtree rooted node constant time 
node position left parenthesis sequence 
planar graphs represent planar graph efficiently tempting fact planar graph partitioned edge disjoint spanning forests succinct representation represent trees forest 
note representation trees unlabelled trees gives implicit labelling preorder traversal tree 
clear partition planar graph spanning forests maintains consistency vertex labelling vertices forest labelled representation 
resort approach jacobson edge partition planar graph maintain vertex labelling part partition 
partition partition edges pages defined 
linear time planar graphs embedded pages leads succinct quickly representation planar graphs 
jacobson gives representation page graphs generalizes graphs bounded number pages 
representation page graphs uses parentheses representation fairly inefficient terms space 
parenthesis representation gives immediate reduction higher order term number bits 
furthermore expanded types operations handled implementation represent page graphs differently resulting reduction space 
give details defining term page 
terminology jacobson 
page book embedding graph printing order permutation specifying ordering nodes spine book plus partition pages 
edges page intersect pages share printing order nodes 
page number graph minimum number pages book embedding page graph parenthesis representation graph vertices edges 
fig page graphs book drawn spine horizontal edges form nesting structure balanced string parentheses see 
representation balanced parentheses sequence follows 
represent node edge matching pair open close parentheses 
associate node representative matching pair parentheses followed sequence single parenthesis edge incident open parenthesis corresponding edge sequence parentheses associated node matching closing parenthesis sequence associated node respect vertex matching pair parentheses represent node sequence closing parentheses decreasing order points edges incident points followed sequence open parentheses increasing order points edges incident points greater concatenate sequences respect vertex order vertices spine see 
representation pair adjacent symbols forms matching pair parentheses pair represents node page graph 
clearly representation uses bits number edges number vertices graph 
fact gamma bits sufficient matching pair representing vertex redundant 
easy see nested sequence balanced parentheses length gamma construct exactly reverse way page graph multiple edges vertices allowed 
representation optimal lower order terms page multigraphs 
representation label node matching parenthesis pair sequence select operation denoting adjacent parenthesis pairs nodes parenthesis 
conversely parenthesis pair corresponding node find label rank operation similar way 
furthermore neighbors vertex immediately corresponding matching parentheses pair 
time proportional degree vertex find neighbors vertex parentheses sequence operations 
just want degree vertex rank select operation find parenthesis pair corresponding vertex spine difference indices pairs corresponding vertices gives degree vertex 
find nodes spine order adjacent graph vertex immediately vertex immediately spine ordering 
find parenthesis pair exists tightly encloses pairs parentheses corresponding vertices call double enclose operation parentheses implementation 
parenthesis pair positions respectively open parenthesis closing parenthesis position 
easy see vertices adjacent greater index right parenthesis corresponding vertex index left parenthesis corresponding vertex find parentheses corresponding vertex spine rank select computation described 
alternatively test adjacency method jacobson representation 
simply find matching parenthesis open parenthesis pair corresponding vertex index index pair corresponding vertex adjacent 
corresponds edge incident adjacent 
find matching open parenthesis closing parenthesis pair corresponding vertex corresponds edge incident adjacent 

verified constant number rank select computations sufficient perform operations 
theorem page multigraph vertices edges represented bits way adjacency pair vertices degree vertex constant time neighbors vertex produced time proportional degree vertex 
furthermore representation page multigraphs optimal lower order terms 
graphs page generalization graphs page direct 
simply represent page page graph separately representation section concatenate 
pages share printing order vertices matching pair corresponding vertex appears pages 
address page stored separately lg bits 
graph pages vertex requires bits edge requires bits 
parenthesis representation requires kn bits 
adjacency pair checked time checking page 
similarly degree vertex time 
neighbors vertex listed time proportional degree vertex adjacency list page 
particular planar graphs embedded pages representation requires bits ignoring lower order terms requiring constant factor increase time spent 
theorem page graph vertices edges represented kn nk bits way adjacency pair vertices degree vertex time neighbors vertex listed time degree vertex particular planar graph vertices edges represented bits test adjacency pair constant time 
planar graphs space ignoring lower order terms 
drastic reduction bits required jacobson representation planar graphs extremely close bits representation planar graphs keeler westbrook allow efficient search operations 
efficient representation special classes planar graphs emphasis fast encoding decoding navigational operations compressed representation see 
concluding remarks representation static binary trees nodes uses information theoretically optimum bits supports left child right child parent subtree size operations constant time 
representation uses simply natural preorder traversal sequence 
gave information theoretically optimum representation sequence nested balanced parenthesis supporting natural operations constant time 
related restricted scheme static binary trees implemented ken 
operations moving tree amazingly fast scheme support finding size subtree 
note tree nodes total number bits including noteworthy lower order terms times size tree 
feel method discussed comparable implementation supporting full range motion tree 
preliminary report number related advances 
representation supports operations described 
example node suppose want find leftmost leaf subtree rooted node 
bracket representation ordered tree corresponding binary tree simply node corresponding matching parenthesis pair matching parentheses adjacent pair open bracket corresponding node 
considering adjacent matching parenthesis pairs representing parentheses representing operation simply computation rank select bracket sequence 
similar way find rightmost leaf subtree rooted node 
operations representation static trees munro demonstrated efficient representation suffix trees text searching 
rooted ordered trees known ordinal trees representation takes time find th child node navigational operation takes constant time 
benoit reported representation ordinal trees operation constant time operations support performed constant time 
generalized binary tree representation ary cardinal trees subtrees node empty 
representation uses ke bits supports searching child labeled lg lg time supporting navigational operations constant time 
raman rao improved time searching child labeled lg lg lg time maintaining feature structure benoit employed parenthesis operations represent planar graph vertices edges bits supporting adjacency degree queries constant time 
efficient representation multiple parenthesis sequences canonical ordering planar graphs chuang improved space requirement bits constant query support 
bit count reduced adjacency queries supported constant time simple triangulated 
benoit demaine munro raman representing trees higher degree proceedings th workshop algorithms data structures wads springer verlag lncs 
book thickness graph journal combinatorial theory 
munro membership constant time minimum space appear siam journal computing preliminary version appeared proceedings european symposium algorithms esa springer verlag lncs 
chuang garg ming yang kao lu compact encodings planar graphs canonical orderings multiple parentheses proceedings th international conference automata languages programming icalp springer verlag lncs 
efficient representation binary search trees essay university waterloo 
clark compact pat trees ph thesis university waterloo 
clark munro efficient suffix trees secondary storage proceedings th acm siam symposium discrete algorithms soda 
kao lu linear time succinct encodings planar graphs canonical orderings siam journal discrete mathematics 
kao lu fast general methodology optimal encodings graphs proceedings th annual european symposium algorithms esa springer verlag lncs 
jacobson succinct static data structures ph thesis carnegie mellon university 
jacobson space efficient static trees graphs proceedings ieee symposium foundations computer science focs 
keeler westbrook short encodings planar graphs maps discrete applied mathematics 
munro tables proceedings th foundations software technology theoretical computer science fst tcs springer verlag lncs 
munro raman rao space efficient suffix trees proceedings th foundations software technology theoretical computer science fst tcs springer verlag lncs 
st nash williams edge disjoint spanning trees finite graphs journal london math 
society 
pagh low redundancy dictionaries worst case lookup time proceedings international automata languages programming icalp springer verlag lncs 
raman priority queues small monotone trans dichotomous proceedings th european symposium algorithms esa springer verlag lncs 
raman rao static dictionaries supporting rank appear proceedings tenth international symposium algorithms computation isaac springer verlag lncs 
turan succinct representations graphs discrete applied mathematics 
yannakakis pages necessary sufficient planar graphs proceedings th acm symposium theory computing stoc 

