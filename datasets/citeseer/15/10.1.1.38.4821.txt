online type directed partial evaluation dynamically typed languages naoki kobayashi yl tokyo ac jp university tokyo may article presents alternative method type directed partial evaluation simpler efficient previous methods 
previous methods straightforwardly applicable functional languages various powerful type systems 
extreme instance article mainly deals dynamically typed functional language scheme 
key idea extend primitive value destructors function application pair destruction car cdr generate residual code operands dynamic 
operation type directed partial evaluation called reflection major cause complication inefficiency previous methods 
formalize method extension level calculus prove correct 
furthermore show type directed partial evaluator derived simple online syntax directed partial evaluator higher order syntax transformation offline program cogen derived offline syntax directed partial evaluator 
clarifies type directed partial evaluation faster ordinary syntax directed partial evaluation implies obtain powerful partial evaluators replacing underlying syntax directed partial evaluator sophisticated ones 
background type directed partial evaluation 
partial evaluation program manipulation program part input generates specialized program satisfying rest input 
article explicitly write function application give higher precedence closely related strong normalization program strong normalization amounts partial evaluation respect example calculus 
strong normal form traditional syntax directed partial evaluation performs normalization symbolically manipulating syntax tree term type directed partial evaluation expanding term level term type reducing expanded level term statically weakly :10.1.1.103.291
expansion called reification 
example typed ff ff 
type tells function expand reduces fresh symbol syntax constructor abstraction 
scheme procedure illustrated 
generation fresh symbol omitted brevity 
reformatted version article appeared computer software vol 
pp 
may japan 
revised september 
reformatted june type ff oe 
oe fresh ff oe 
oe fresh type directed partial evaluation simply typed calculus 
define lambda lambda 
define lambda lambda lambda codomain function compound type function types type directed partial evaluation performs reification recursively 
example normalize term type ff fi ff term function type expand function type expand obtain reduces 
define lambda lambda lambda 
define lambda lambda lambda lambda lambda lambda domain function compound type problem arises 
example try normalize 
typed int ff ff 
term function type want expand naively type error happens specialization stage symbol applied integer 
define lambda lambda 
define lambda error attempt apply non procedure danvy original type directed partial evaluator solves problem coercing symbol value type int ff expanding level term operator syntax constructor function application 
lambda lambda lambda general function applied symbol symbol expanded value domain function 
expansion called reflection 
type directed partial evaluator simply typed calculus looks denote static weak reduction reification reflection respectively 
note types name type directed partial evaluation 
type directed partial evaluation known faster traditional syntax directed directly executes source program symbolically manipulating syntax tree 
problem reflection doesn reflection difficult method works pure simply typed calculus doesn straightforwardly apply practical programming languages scheme ml impossible coerce symbol arbitrary type 
example coerce symbol integer 
powerful type system difficult impossible reflection 
instance reflection disjoint sum types inductive types impossible complicated :10.1.1.103.291
extreme case dynamic typing 
dynamically typed languages scheme domain function essentially undecidable specialization stage reflection impossible 
reflection inefficient addition problem reflection causes inefficiency specialization source program execution residual program post processing reduction 
example true typed ff ff 
ff ff 
reified fresh symbol reflected function applied 
function returned reified expression result reified redundant expression 
define lambda lambda lambda 
define lambda lambda arg lambda res arg lambda res lambda lambda case hadn reflected applied obtained reified source program simpler residual program lambda lambda general unnecessary reflection lengthy result occur type doesn exactly express function behaves 
formally type directed partial evaluation produces long fi normal form may contain redices 
inevitable type systems complete type inference hindley milner type system 
purpose avoiding problem sheard proposed technique calls lazy reflection 
solution unsatisfactory normalize example annotate program hand exact type information denotes type abstraction type application 
ff fi fi fi ff true ff fl fl fl fl fl addition reflection disjoint sum types bool causes code duplication 
example reifying function xor respect type ff ff ff ff bool bool ff results residual code 
lazy reflection doesn solve problem 
solution avoid reflection destructors smart order avoid problems don perform reflection 
conservatively extend primitive value destructors correctly handle residual code 
similar idea proposed previous application limited probably reflection :10.1.1.103.291
exploit idea extensively completely reflection 
example extend function application evaluates static function evaluates dynamic expression 
assume distinguish dynamic expressions static values partial evaluation ordinary online partial evaluation 

previous example function reflection obviously unnecessary 
happen try reify say 
typed int ff ff doesn matter 
type domain just apply function symbol reduces reduces extended function application 
define func arg implements dynamic 
func func arg func arg 
define lambda lambda lambda leave residual code purpose multi level specialization 
dynamic input safely replace 
comparison previous methods applicability previous methods type directed partial evaluation applicable languages particular static type systems new kind type required new mechanism reflection 
example reflection disjoint sum types polymorphic types inductive types required partial continuation type passing lazy reflection respectively 
contrast method applicable languages various type systems including dynamic ones provided static value dynamic expression evaluates static value lambda merged type static values dynamic expressions distinguished partial evaluation 
efficiency type directed partial evaluator generates efficient residual code previous ones doesn perform reflection 
may source inefficiency specialization stage destructors examine binding time operands 
examination necessary previous primitive data integers lazy reflection additional cost small 
addition binding time analysis source programs help reduce unnecessary tests destructors 
example known static safely replaced 
relationship syntax directed partial evaluation type directed partial evaluator directed types values reify syntax directed partial evaluator embedded source language 
corresponds online version thiemann cogen approach syntax directed partial evaluators higher order syntax 
observation significant reasons 
ffl clarifies type directed partial evaluation faster traditional cogen involves interpretive overhead syntax dispatch environment manipulation 
pair fst snd pair fst snd pair fst snd pair terms values object language ffl implies combine flexibility syntax directed partial evaluation efficiency type directed applying approach powerful syntax directed partial evaluators 
contribution main contribution article proposal formalization novel method online type directed partial evaluation simpler powerful previous methods clarification correspondence type directed partial evaluation cogen approach syntax directed partial evaluation higher order syntax enables incorporation techniques 
method useful partial evaluation requires extension destructors preprocessing source program replace 
furthermore article address issues side effects including type errors non termination detail may incorporate existent techniques find critical computations program analysis insertion example 
overview rest article structured follows 
section formally presents object language partial evaluator 
section explains derivation type directed partial evaluator online partial evaluator higher order syntax 
section shows results experiments compares method previous methods type directed partial evaluation 
section discusses extensions limitations method section mentions related section concludes article 
appendix gives implementation examples subset scheme 
formalization object language object language variant level calculus pairs 
syntax defined 
terms second third rows called dynamic terms fourth fifth sixth rows called static 
term called completely dynamic resp 
completely static subterms dynamic resp 
static 
ordinary program completely static 
destructors fst snd annotated online sense defined static values dynamic expressions 
usual care names bound variables static dynamic implicitly perform ff conversion time 
consider reduction relations calculus strong reduction relation weak reduction relation reduction rules standard destructors fst snd weak reduction fst pair snd pair dynamic fst fst dynamic snd snd dynamic weak reduction relation object language base cases fresh fl pair pair fl fst fst snd snd weak reduction relation object language base cases cw pair pair fst snd pair pair fst snd cw cw fl weak reduction relation object language weak reduction context fst pair snd pair dynamic fst fst dynamic snd snd dynamic strong reduction relation object language base cases cw strong reduction relation object language strong reduction context relation smallest relation satisfies rules denotes usual substitution free strong reduction relation smallest relation satisfies rules 
example 
write resp 
reflexive transitive closure resp 

write resp 

exists resp 

reification operator 
basically operates static value 
operates dynamic terms introduced reduction reifies static values embedded dynamic terms 
alternatively redefine reduction rule dynamic simplify reduction rules dynamic 
alternative method simpler efficient formalize original method discussion section 
object language dynamically typed reification operator directed dynamically examined types statically ones 
performs case analysis binding time static dynamic type value reify reify appendix 
lines may syntax directed essential omitted appendix means alternative method described 
reason call partial evaluator online type directed 
example strong reduction yields weak reduction yields follows 
example fst pair 
strong reduction yields weak reduction yields follows 
fst pair addition type directed partial evaluation historically implying directed types reification 
partial evaluator type directed sense 
erase erase erase erase erase erase erase pair pair erase erase erase fst fst erase erase snd snd erase erase erase erase erase erase erase erase pair pair erase erase erase fst fst erase erase snd snd erase erase erase definition erase fst pair fst pair fst pair correctness show system correct sense completely static closed weakly normalizes call value reduction completely dynamic erase term obtained erasing underlines strong normal form formally stated proposition 
object language dynamically typed source program may potentially type unsafe cause type errors partial evaluation 
brevity assume source program type safe sense reduction causes type errors formally defined definition 
straightforward prevent ordinary type checking delay execution stage making dynamic additional reduction rules definition erase denotes term obtained erasing underlines formally defined 
definition term called type safe term contains subterm form pair fst snd 
term typed ordinary static type system simply typed calculus type safe 
proposition completely static closed type safe term 

completely dynamic erase erase 
proposition means partial evaluator correct sense ordinary evaluation weak reduction coincides partial evaluation strong reduction note guarantee termination reification 
see subsection remedy 
example fst pair 

erase 
cf 
example 
proposition proved corollary theorem 
interested proof skip rest subsection 
definition term called statically closed static variable bound static abstraction contains subterm including form pair fst snd static 
intuitively term term argument 
note completely static closed terms 
lemma erase erase 
proof induction derivation note reduction rule introduces inside replaces dynamic term static 
lemma 
proof induction derivation lemma type safe term proof prove contraposition induction structure static abstraction dynamic value value 
case static pair values type safe type safe induction hypothesis 
case 
type safe induction hypothesis 
cases similar trivial 
theorem type safe term 

completely dynamic erase erase 
proof induction length reduction sequence base case length 
type safe lemma 
induction step length greater perform case analysis reduction rule derivation ffl rule fl exists lemma erase erase 
lemma 
type safe completely dynamic erase erase 
induction hypothesis 
erase erase 
ffl rule fl reduction sequence form fresh 
type safe completely dynamic erase erase 
induction hypothesis 
completely dynamic erase strongly normalizes erase follows 
erase erase erase erase erase 
ffl rule fl reduction sequence form 

type safe completely dynamic erase erase 
erase erase 
induction hypothesis 
completely dynamic 
furthermore dynamic term dynamic abstraction erase dynamic term static abstraction erase strongly normalizes erase follows 
erase erase erase erase erase erase 
cases similar trivial 
view online cogen approach partial evaluator doesn perform reflection performs reification type directed manner 
time similar online syntax directed partial evaluators primitive operators reconstruct operands dynamic 
fact seen combination library interpret program generating extension derived online partial evaluator higher order syntax converter higher order syntax order syntax 
approach known offline syntax directed partial evaluation kind called cogen approach simpler efficient traditional self application approach 
going show applicable online syntax directed partial evaluation result coincides online type directed partial evaluator 
background subsection briefly explain basic ideas cogen approach online syntax directed partial evaluation 
higher order syntax higher order syntax meta programming technique represents binding object level binding meta level environment manipulation simple efficient 
example represent untyped terms ml 
order higher order syntax data type defined follows 
datatype lam var string abs string lam app lam lam example represented abs app abs var var 
higher order syntax data type defined follows 
datatype 
happ string term represented fn 
happ fn 

converter higher order syntax order syntax written follows 
val seq ref fun gensym seq seq int tostring seq fun val gensym abs happ app var partial evaluation higher order syntax general surprisingly easy write evaluator terms higher order syntax 
example online syntax directed partial evaluator untyped terms written follows 
fun normalize fn 
normalize normalize happ val normalize val normalize case 

happ normalize codomain partial evaluator higher order syntax result converted order syntax displayed 
fact ml weak evaluation strategy evaluation occurs conversion 
normalize fn 
happ fn 
val abs var lam pair fst fst snd snd case case pair pair fst snd cw pair pair fst fst snd snd case case pair extension object language syntax reduction context composition partial evaluator syntax constructors example constructed term syntax constructors partial evaluator 
waste memory storing intermediate data structure time traversing pattern matching 
remove overhead composing constructors destructors 
fun fn 
fun val val case 

happ simplify composed constructors reduction inlining 
val fun happ extremely simple partial evaluator works follows 
fn 
fn 
val abs var lam formalization partial evaluator untyped terms higher order syntax similar online type directed partial evaluator dynamically typed languages 
specifically partial evaluator composed syntax constructors similar extended value destructors object language converter higher order syntax order syntax similar reification operator partial evaluator 
prove intuition formalizing partial evaluator converter syntax constructors composed partial evaluator 
purpose extend syntax semantics object language subsection shown symbols double underlines denote syntax constructors denotes partial evaluator denotes converter denotes composition partial evaluator 
resp 
extended accordingly cw resp 

pair unnecessary equivalent pair 
fresh case fresh pair pair fst case pair fst fresh snd case pair snd fresh case case case pair pair case pair pair extension object language reduction rules partial evaluator terms higher order syntax fresh pair pair fst fst snd snd extension object language reduction rules converter higher order syntax order syntax fst pair fst fst pair snd pair snd snd pair extension object language reduction rules syntax constructors composed partial evaluator pair fst snd free pair fst pair snd pair free syntax hoas terms pair pair fst fst snd snd definition definition input hoas term denoted output hoas term denoted terms syntax restricted 
intuitively input resp 
output hoas term term argument resp 
result easy see output hoas term statically closed input hoas term values output hoas terms input hoas term 
definition input hoas term 
denote term defined erase denote term defined 
definition show correspondence reduction rules 
proposition statically closed input hoas term erase type safe 

erase proposition means computations give result closed expression higher order syntax 
erase erase erase erase erase erase erase erase pair pair erase erase erase fst fst erase erase snd snd erase erase erase definition erase ffl normalize expression interpreter normalize convert order syntax 
ffl replace syntax constructors happ expression syntax constructors composed interpreter evaluate convert order syntax 
ffl evaluate expression reify 
confirm second computation efficient efficient third closely looking reduction rules follows 
ffl reduction requires case analysis syntax 
compare 
ffl reduction steps resp 
correspond resp 

see example proof details relationship 
type directed partial evaluation believed faster syntax directed directly executes source program symbolically manipulating syntax 
hand cogen approach syntax directed partial evaluation higher order syntax known way achieve similar result 
observation implies techniques equivalent online partial evaluation suggests obtain powerful partial evaluators replacing underlying syntax directed partial evaluator sophisticated inserting ones 
example fst pair 

erase follows cf 
example example 
fst pair fst pair fst pair fst pair fst pair fst pair pair pair fst fst pair fst fst snd snd pair snd snd definition erase erase erase erase erase erase erase erase erase erase erase erase pair pair erase erase erase fst fst erase erase pair erase fst fst erase erase snd snd erase erase pair erase snd snd erase erase erase definition erase fst pair erase fst pair proposition proved corollary theorem 
interested proof skip rest subsection 
definition input hoas term 
denotes term defined erase denotes term defined 
going definition show correspondence reductions erase 
easy see erase erase provided erase type safe 
addition erase values 
remember output hoas term input hoas term 
properties necessary proofs reason define erase erase 
lemma statically closed input hoas term 
statically closed output hoas term 
furthermore erase erase 
proof induction length reduction sequence length greater perform case analysis rule derivation reduction 
ffl rule second reduction sequence follows fresh 
case statically closed input hoas term weakly normalizes statically closed output hoas term induction hypothesis 
perform case analysis form output hoas term 
reduction sequence continue follows fresh 
case statically closed input hoas terms output hoas terms erase erase erase erase induction hypothesis 
furthermore statically closed input hoas term statically closed output hoas term erase erase erase induction hypothesis 
erase weakly reducible erase follows 
erase erase erase erase erase erase erase erase erase erase erase cases similar trivial 
theorem statically closed input hoas term erase type safe 
erase proof induction length reduction sequence base case length 

static variable contradicts assumption statically closed 
induction step length greater perform case analysis reduction rule derivation ffl rule reduction sequence form fresh 
statically closed input hoas term erase 
induction hypothesis 
erase weakly reduce follows 
erase erase erase erase erase erase ffl rule second reduction sequence follows fresh 
case statically closed input hoas term weakly reduces statically closed output hoas term lemma 
perform case analysis form output hoas term 
erase erase lemma reduction sequence continue follows case statically closed input hoas term statically closed output hoas term erase erase lemma 
furthermore input hoas term erase erase induction hypothesis 
erase weakly reduce follows 
erase erase erase erase erase erase erase erase erase cases similar trivial 
table type directed partial evaluators experiments name description dan danvy totally offline type directed partial evaluator destructors extended reflection performed eagerly types :10.1.1.103.291
sheard partially offline partially online type directed partial evaluator destructors primitive data integers extended reflection performed lazily compound types function types 
sum totally online type directed partial evaluator destructors functions extended reflection performed 
table source programs experiments name description id identity function int int int int pairs variants integers 
example supposes term special type principal type context probable hindley milner type system 
power power function integers exponent static 
append append function lists integers argument static 
sk combination combinators computes church numbers 
example lot polymorphic function application occurs specialization stage 
format string formatter control parameter represents plus equals static 
int interpreter simple turing complete imperative language source program computes static 
environment represented finite partial function strings values 
int similar int environment represented pair list strings list values 
experiments purpose assessing merit avoiding reflection extending primitive destructors implemented type directed partial evaluators described table specialized source programs described table 
variant dynamically typed calculus pairs variants integers strings object language 
measured time required specialization source programs static inputs time required execution residual programs dynamic inputs 
object language dynamically typed static type information necessary dan 
specifically reification dan needs guided static types residual programs functions need annotated static types arguments 
provided types hand may inferred automatically 
dan reify value type includes primitive types int inductive types int list negative positions leads non termination :10.1.1.103.291
abstracted primitive operators types source programs danvy dynamic :10.1.1.103.291
example order partially evaluate tail typed int list int list tail tail tail typed ff ff ff ff 
result fail normalize tail performed transformation hand 
table time required specialization source programs microseconds id power append sk format int int dan sum table time required execution residual programs microseconds id power append sk format int int pe dan sum type directed partial evaluators residual programs executed chez scheme version sunos sun enterprise ultrasparc mhz processors gb main memory 
results experiments shown table table table 
time average sufficiently repeated trials excluding overhead empty trial specialization execution null program 
line pe shows time required execution source program static input dynamic input 
rationalize results follows 
ffl id format int dan unnecessary reflection caused inefficiency specialization stage execution stage 
ffl append sk dan residual programs simply typed type append hand ff unit int unit int unit int ff types accurately represented behavior :10.1.1.103.291
cases efficient perform reflection examine destructor operands repeatedly 
ffl source programs especially append sk manipulation polymorphic types inductive types caused inefficiency specialization stage 
ffl int methods residual program slower source program computation duplication 
environment ae 
ae ae 
ae ae represented function repeatedly computed 
see subsection solution kind problem 
ffl int dan environments completely dynamic order compilation loop terminate environment manipulation unnecessarily car cons 
case sum reify function domain inductive type 
ffl int specialization impossible order reify partial functions disjoint sum types environment lookup need catch runtime type errors scheme provides mechanism 
table size residual programs expressions number cons cells id power append sk format int int pe dan sum sum comparable faster dan specialization stage execution stage dan append sk domain simple type 
fact expect method superior realistic application programs input sophisticated data structure dynamically typed languages 
extensions limitations recursion theorem imply termination reification 
fact reification recursive function dynamic recursive variable may terminate partial evaluation dynamic conditional expression condition part dynamic requires partial evaluation part part order ease difficulty danvy introduced special fixed point operator doesn unfold recursive call user defined condition arguments argument static false 
straightforward incorporate remedy method 
side effects side effects occur execution stage specialization stage managed insertion 
duplication elimination reordering code computation avoided similar technique 
treat complicated side effects set car 
scheme 
arithmetic reduction straightforward perform arithmetic reduction primitive operators 
example implement reduction rules static dynamic course may adopt sophisticated reduction rules 
dynamic static static typing method applicable dynamically typed languages scheme statically typed languages ml 
order merge static values type dynamic expressions evaluate value type define data type level values datatype exp ml 
annotate value constructors fn ml static tag value destructor function application hd tl ml type value reify 
straightforward provide annotations automatically ordinary type inference 
example partially evaluate ml 
represent type reification operator values type yang 
example represent type variable function dynamic expressions 
undefined static values need reify static value type unknown provided type annotation correct 
fun val fn exp similarly represent function type codomain reification operator functions type 

omit domain function unnecessary method 
fun 

val gensym abs reify var val 
fn exp 
exp reification operator just applies representation type value type 
fun reify exp val reify fn exp exp function application implemented dynamically typed languages binding time tags type annotation 
fun app reify val fn exp getting normalize follows 
reify 
fn 
fn 
val abs var exp related addition berger schwichtenberg theory danvy series papers sheard study closely related 
ffl mogensen realized extension pure untyped calculus 
won partial evaluator realistic languages various values relies property values functions 
ffl thiemann compared danvy type directed partial evaluator second author offline syntax directed partial evaluator similar qualitatively quantitatively 
showed techniques equivalent online partial evaluation 
ffl yang independently implemented partial evaluator similar scheme rigorous formalization comparative experiments 
personal communication january march 
realized online type directed partial evaluator dynamically typed language extending primitive value destructors reflection 
showed correspondence type directed partial evaluator online version cogen approach syntax directed partial evaluator higher order syntax suggests possibility powerful partial evaluators 
includes extensive guarantee termination sophisticated treatment side effects 
acknowledgment people including oliver danvy peter thiemann asai yang morten anonymous reviewers invaluable comments earlier versions 
asai akinori yonezawa 
partial evaluation call value calculus side effects 
proceedings acm sigplan symposium partial evaluation program manipulation pages 
ulrich berger helmut schwichtenberg 
inverse evaluation functional typed lambdacalculus 
sixth annual ieee symposium logic computer science pages 
olivier danvy 
pragmatic aspects type directed partial evaluation 
technical report rs basic research computer science 
available www brics dk rs 
appeared danvy gluck thiemann editors partial evaluation pe proceedings lncs pages 
olivier danvy :10.1.1.103.291
type directed partial evaluation 
proceedings rd acm sigplan sigact symposium principles programming languages pages 
olivier danvy 
online type directed partial evaluation 
technical report rs basic research computer science 
available www brics dk rs 
extended version article appeared proceedings third fuji international symposium functional logic programming sato toyama editors world scientific 
andrzej filinski 
representing monads 
proceedings st acm sigplan sigact symposium principles programming languages pages 
simon peter thiemann 
flavors offline partial evaluation 
th asian computing science conference volume lecture notes computer science pages 
springer verlag 
richard kelsey william clinger jonathan rees 
revised report algorithmic language scheme 
higher order symbolic computation 
available www brics dk html 
appears acm sigplan notices vol 
pages september 
abelson adams iv brooks dybvig friedman halstead hanson haynes kohlbecker pitman steele jr sussman wand 
julia lawall peter thiemann 
sound specialization presence computational effects 
theoretical aspects computer software volume lecture notes computer science pages 
springer verlag 
robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press 
torben mogensen 
untyped calculus 
draft proceedings acm sigplan symposium partial evaluation semantics program manipulation pages 
available www brics dk pepm proceedings mogensen ps 
frank pfenning conal elliott 
higher order syntax 
proceedings acm sigplan conference programming language design implementation pages 
morten 
study higher order programming languages 
master thesis university aarhus department computer science 
available www daimi aau dk 
tim sheard 
type directed line partial evaluator polymorphic language 
proceedings acm sigplan symposium partial evaluation semantics program manipulation pages 
takano erik meijer 
shortcut deforestation calculational form 
proceedings seventh international conference functional programming languages computer architecture pages 
acm 
peter thiemann 
cogen lines 
proceedings acm sigplan international conference functional programming pages 
peter thiemann 
combinators program generation 
journal functional programming 
yang 
encoding types ml languages 
proceedings third acm sigplan international conference functional programming pages 
appendix implementation examples show implementation partial evaluator subset scheme 
aware doesn support procedures arguments 
assume implemented partial continuation operators shift reset filinski section subsection insertion 
fact don need just global mutable store holds bindings suffices clarity simplicity 
define auxiliary functions residual code follows 
assume programmers don symbol begins represent dynamic variables 
define gensym 
seq lambda set 
seq seq string symbol string append number string seq define dynamic symbol 
symbol 
char 
string ref symbol string represent dynamic operations car pair func arg 
define dynamic operation 
pair 
symbol 
car char 
string ref symbol string car define dynamic 
dynamic symbol 
dynamic operation 
don extend operators define cons cons define list list define syntax syntax rules 
define syntax lambda syntax rules lambda 
lambda implement reification operator 
define reify cond dynamic 
procedure 
var gensym lambda var reset reify var pair 
cons reify car reify cdr null 
quote symbol 
quote instruction primitive procedures dynamic effects define reifying define reify set 
reifying reify set 
reifying define primitive value destructors follows 
define proc args dynamic 
proc proc reify args proc args define apply proc args dynamic 
proc apply proc reify args apply proc args define null 
pair dynamic 
pair null 
pair null 
pair define car pair dynamic 
pair car pair car pair define cdr pair dynamic 
pair cdr pair cdr pair define cond number 
zero 
number 
zero 
dynamic 
dynamic 
define cond number 
number 
number 
zero 
number 
zero 
dynamic 
dynamic 
define positive 
dynamic 
positive 
positive 
define test consequent alternate dynamic 
test test reset reify consequent reset reify alternate test consequent alternate define syntax syntax rules test consequent alternate test lambda consequent lambda alternate define fix proc lambda arg dynamic 
arg fix reify proc reify arg proc fix proc arg declare primitive procedures effects execution stage 
implementation don deal kinds effects 
define syntax declare primitive effect syntax rules declare primitive effect stub func define stub lambda arg reifying shift lambda pk var gensym var apply stub reify arg reset reify pk var apply func arg declare primitive effect newline newline declare primitive effect display display example session partial evaluator 
define power lambda fix lambda lambda positive 

power 
define power reify lambda power power lambda 
eval power 
define rev lambda fix lambda lambda null 
cons car cdr 
define lambda lambda rev 
list list 
define abc reify list abc lambda cons cons cons 
eval abc list 
define power verbose display display power display display display power display newline 
power verbose power 
define power verbose reify lambda power verbose power verbose lambda apply display cons apply display cons power apply display cons apply display cons apply display cons apply display cons apply newline 
eval power verbose power 

