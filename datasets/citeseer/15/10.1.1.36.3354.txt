representation genetic operators evolutionary algorithms stefan droste ls informatik ii universitat dortmund dortmund germany dirk ls informatik xi universitat dortmund dortmund germany application evolutionary algorithms eas requires basic design decision choice suitable representation variable space appropriate genetic operators 
practice mainly representations specific genetic operators miscellaneous extensions observed 
connection attracts attention hardly formal requirements genetic operators stated 
article formalize representation problem propose package requirements guide design genetic operators 
definition distance measures phenotype space possible integrate problem specific knowledge genetic operators 
example show package requirements design genetic programming gp system finding boolean functions 
application evolutionary algorithms eas requires basic design decision choice suitable representation variable space appropriate genetic operators 
choice suitable representation problem appropriate genetic operators requires basic understanding mechanism eas 
unfortunately hypotheses functioning eas 
historically standard representations binary strings real valued vectors corresponding genetic operators emerged stand strong relation relevant hypotheses working mechanisms corresponding eas 
real world optimizing tasks trivial translation standard representations 
possibility fall back standard representation suitable mapping phenotype space choice suitable mapping problems 
instance coding functions non linear continuous 
practice proceeding established 
literature gives multiple examples problem specific representations special genetic operators repair mechanisms various extensions 
algorithms little common canonical forms eas genetic algorithms gas see hol evolution strategies ess see rec sch 
particular attracts attention hardly formal requirements genetic operators stated 
droste ls informatik uni dortmund de ls informatik uni dortmund de article set requirements design representation operators orientated 
definition distance measures phenotype space problem specific knowledge integrated genetic operators 
article fold 
part representation problem formalized set requirements motivated discussed 
second part show requirements design genetic programming gp system finding boolean functions 
designed gp system shows comparison gp systems remarkable increase efficiency 
instance possible solve parity problem gp time 
representation problem order clarify important notations take brief look biological model 
representation problem eas formalized 
biological model building plan living beings linearly encoded acid dna 
alphabet genetic information plan written consists components called nucleotide bases 
entirety genetic makeup called genotype 
creation organism phenotype genetic building plan genotype complex process 
description process scope article give short overview see bac 
carrier phenotype proteins 
proteins long chains amino acids 
finite alphabet amino acids consists natural acids 
certain chemical interactions amino acids cause dimensional folding chain 
linear sequence amino acid chain encoded way 
subsequent nucleotide bases called codons dna strand encode certain amino acid time 
different symbols encode natural amino acids genetic code redundant 
proteins starts transcription dna information rna form messenger acid rna 
rna transfers genetic information synthesize corresponding protein 
ribosome consists acid proteins performs mapping triplets nucleotide bases amino acids translation 
sequence codons encodes protein called gene 
impact genes features organism described simple correspondence genes features 
genes influence characteristic 
hand possible gene influence features pleiotropy 
exist sequences codons called introns genetic information phenotype 
important state information passed genotype phenotype dna rns reproduction process genotype influenced mutation recombination 
single individual characteristics environment limited resources subject selection 
better individual adapted environment greater chance individual lives longer able generate offsprings transmit parts genotype descendants 
nature reproduction leads constant generation new genetic material varying offsprings 
short summary biological genotype translation phenotype shows complicated copy biological model exactly 
representation genetic operators eas eas distinguishes genotype space representation search space phenotype space original variable space see 
connection genotype phenotype see text information 
connection genotype space phenotype space clearer course ea formalized suitable way notation follows bac 
context eas sufficient store individual form genotype phenotype mapping deterministic environmental influences taken consideration 
denote population generation pop denotes number parents number offsprings generation 
mapping composed simply reduced mapping represents phenotype mapping single individuals mapping stands process protein translation development phenotype 
mutation recombination working genotype space 
recombination operator theta omega generates genetic building plan offsprings parent population mixing parental genetic information 
consideration probabilistic influence done probability space omega 
recombination mutation offsprings operator theta omega follows 
omega pm underlying probability space 
selection creates population pop offsprings generation pop 
assessment directly indirectly objective function ir 
objective function assesses phenotypic expression genotype 
selection operator theta theta omega connection clear probability space omega 
evolutionary algorithm described iterated genetic operators selection operator 
auxiliary function theta equation pop pop valid omega omega omega canonical forms eas binary representation gas real valued vectors ess corresponding mutation recombination operators 
example take look continuous parameter optimization problems 
function ir ir minimized 
canonical ga setting ib ir upsilon upsilon ib decoding function decode binary string corresponding rational value 
simple base representation gray code interpretation widespread 
comparison ess setting ir ir valid 
identity 
genotype space phenotype space identical 
rec remarks differentiation genotype space phenotype space 
strong connections dependencies genotype space phenotype space mapping recombination mutation seen 
chosen certain variable space objective function 
possibility choose standard genotype space ib gas ir ess corresponding genetic operators canonical eas 
task design suitable mapping past basic research concentrated standard representations possible case existing theoretical results see rud convergence properties recommendations suitable setting parameters ea 
choice suitable mapping problems 
example continuous parameter optimization gas see bac 
standard ga coding function upsilon shows comparison es directly continuous parameter optimization clear problems convergence speed reliability see bs bac 
possible explanation coding function reduces causality genotype object function value 
take account coding function mapping nonlinear continuous 
deal term causality section detail 
approach formalize term causality regarding mapping 
real world problems canonical mapping standard representation mixed integer optimization bs ss structure optimization 
take example synthesis chemical plants 
different objects pumps heat process units connections represented case 
problem loss information context atoms genes implied coding 
gro comparing standard representation graph representation heat networks 
operators graph representation able information connections streams heat 
difficult extract kind information standard representation 
standard representations recommended basic research long time 
particular area gas argued binary representation superior representations similarity biological model hol 
statement seen critical 
problem discussed section 
practice proceeding observed 
literature gives numerous examples representations specific operators miscellaneous extensions 
evolutionary algorithms little common canonical forms eas 
choice design follow pragmatic point view see mic dav 
working mechanisms questioned useful requirements operators hardly stated exception approach radcliffe rad rs 
depends operators roughly behave recombination exchange information mutation probabilistic modifications 
practice lack theoretical results leads questionable ad hoc solutions thought 
results convergence efficiency available kind eas 
building block vs gradient diffusion order choose suitable representation suitable genetic operators basic understanding mechanisms eas essential 
principles eas finding optima 
unfortunately hypotheses working mechanisms eas available 
best known hypotheses building block hypothesis hypothesis gradient diffusion 
section judge hypotheses 
gas schema theorem called schema theorem hol gol forms basis widespread interpretation functioning gas 
schema subset strings equal certain string positions 
defined string alphabet serves wild card matches 
position string equal fixed position 
number fixed positions order schema 
defining length schema maximum distance fixed positions 
ga proportional selection higher reproduction rates better individuals point crossover fixed crossover probability small fixed mutation rates schema theorem shows exponential increase schemata average fitness population 
assumption population contains globally optimal solution time solution persist definitely population mutation recombination 
schema theorem considers disruptive effect mutation 
probability schema destroyed mutation exponentially decreasing order schema 
recombination destructive depends position crossover point parents 
larger defining length schema higher probability schema destroyed recombination 
point view schemata small defining length small order average fitness particular interest 
schemata kind denoted building blocks exact homogeneous definition building blocks missing 
representation schema theorem statement derived building blocks exponential increase generations 
form schema theorem plays decisive role determining interpretation working method gas 
short schemata small order average fitness put recombination strings potentially higher fitness 
interpretation denoted building block hypothesis 
simply speaking recombination operator assembles parts genotype involved individuals new individual fitness goes fitness parents ideal case 
schema theorem valid binary alphabets 
strong preference binary alphabets arises observation binary alphabet offers maximum number schemata discrete alphabets 
referred similarities binary representation biological model 
manipulation bit strings gas recombination mutation contrast discrete recombination mutation real valued vectors ess 
schema theorem criticized 
discussion schema theorem repeated place 
give listing frequently subjects criticism corresponding bibliographical ffl schema theorem says convergence appropriate explain functioning gas function optimizers bey bey rud 
ffl mainly harmful effects mutation recombination considered sch 
ffl practice populations finite size available bac 
ffl proportional selection interest function optimization rad 
ffl building block hypothesis assume separability objective function rad 
ffl argument implicit parallelism preference binary alphabets valid ant bey fg wm 
eas gradient strategies 
biology mutations appearing rarely nowadays 
changes genetic material caused factors 
simplest form mutation replication error switching specific base pair original dna strand possible base pair copy 
human gottschalk gives probability delta gamma delta gamma occurrence spontaneous mutation specific gene got 
genetic code build way mutations cause small changes genotype 
chemical bonding properties amino acids divided different groups 
amino acid replaced amino acid group change folding proteins smaller amino acids strongly varying bonding properties 
genetic code build way change nucleotide base code word frequently lead amino acid group original code word rec 
section pointed redundancy genetic code 
code word changed mutation new code word necessarily code amino acid 
case mutation direct effect phenotype 
indicates evolution way mainly small steps smooth fitness landscape 
small changes genotype space happen lead due suitable encoding special translation process small changes phenotype space 
large movements phenotype space caused mutations possible happen rarely 
transition individual descendant similar appearance generally result small change fitness 
rechenberg rec pointed see principle strong causality similar causes similar effects 
sees existence strong causality genotype space fitness fundamental basis functioning evolution strong causality guiding principle human action 
strong causality basis evolution 
strong causality optimizer gets lost high dimensional space term smooth fitness landscape seen context strong causality 
high dimensional fitness landscape way small changes position result small changes height 
rechenberg evolution strategies ess small steps world fitness landscape strong causality doing exploring gradient 
population simply running gradient 
strength ess established fact gradient followed exactly gradient diffusion place caused setting new search points direction 
danger convergence local optima reduced 
accordingly gas act fuzzy way gradient ir see section 
approach explain functioning eas gradient diffusion world strong causality questions 
hand ess shown ability performance noisy object functions bac bh 
gas working considering guiding principle strong causality directly see section 
hand connection genotype space phenotype space obvious indicated section 
biology strong causality genotype phenotype respect fitness 
comparative molecular genetics indications need strong connection genetic morphological evolution 
genotype object strong translated german original authors 
changes observing consequences phenotype 
case strong change phenotype caused small genetic change observed 
years research nonlinear dynamics shown world view strong causality incomplete 
recombination mutation eas seen biological evolution transferred imitated directly complexity 
biological information processing examined extend far derive knowledge directly biology guide design genetic operators phenotype mapping 
eas strong abstraction mechanisms biological evolution considered pivotal 
varying interpretations mechanisms 
hypotheses working mechanisms eas 
take closer look recombination crossover mutation gas ess 
look implementation operators assume known described times bac fog sch gol general discussion concepts possible intended mechanisms operators 
propose requirements design genetic operators orientated 
recombination eas recombination generate new individual descendant individuals parents 
genotype descendant put parental genotypes specific rules 
gas bit string representation genotype 
crossover operator point crossover multi point crossover generates offspring mixing parts parental genotypes 
procedure recombination biology 
idea useful segments parts genotype different parents combined offspring better genetic information bit combination means crossover suggests 
go open discussions round building block hypothesis see section 
example sch see ff helpful illustrate differences recombination ess 
crossover gas lead erratic behavior phenotype space 
recombined offspring parents closely related phenotype space may largely deviate parental positions 
table shows situation parents producing offsprings means point crossover 
bit string length phenotypic variables range encoded standard boolean form 
real life extreme deviations offspring parents rare 
genotype phenotype parent parent offspring offspring table effect point crossover ga phenotype 
ess effect recombination limited 
dimensional case bac shows schematically possible results different re dimensional schema different recombination mechanisms 
combination mechanisms ess 
indicate position parental object variables 
mapping identity example valid phenotype space genotype space note offspring generated means recombination leave dimensional formed parent population 
offsprings certain phenotypic similarity parents 
discrete recombination reach corners indicated rectangle 
intermediate recombination generates offspring center rectangles diagonal lines 
generalized intermediate recombination reach points located diagonal line 
panmictic generalized intermediate recombination allows offsprings located arbitrary point rectangle parents restricted 
working mechanism crossover gas induced building block hypothesis 
may benefit offspring phenotypic similarity parents 
theoretical research concerning es beyer bey tries derive basic principles ess especially mutation recombination 
examination normalized progress rate sphere model shows progress positive negative composed progress gain progress loss evolutionary progress principle epp 
progress rate ef expected distance optimum change deltar observed generation generation 
mutation useful part harmful part 
results theory show intermediate recombination reduces harmful part progress loss factor basic principle intermediate recombination called genetic repair gr bey identified 
dominant recombination global discrete recombination principle reads mutation induced species recombination misr 
application dominant recombination mutation generate offspring population replaced special surrogate mutation center mass wild type parent population 
beyer concludes implicit gr strategies see bey 
clues epp misr gr principles transferred eas 
mutation originally mutation small importance gas 
mainly mutation served reintroduce correct bits lost crossover finite populations 
studies shown importance mutation 
helpful large mutation rate decreasing course evolution 
effects mutation phenotype special interest field gas 
indicated section advisable ignore connections phenotype genotype 
different mappings varying influence performance ga instance gray code property neighboring values differ bit position advantages standard base coding cs bac 
normal binary code probably suffers hamming cliffs 
depending position single bit flip smallest possible mutation concerning genotype cause small large change level phenotype bac sch 
really problematic situation small change phenotype achieved great change genotype ea wait long time prefers small changes 
ess mutation important operator 
mutation operator obey rules ffl mutation bias selective pressure resp 
constant objective function mutation pure random walk 
ffl smaller mutations occur large ones 
ess real valued optimization problems genotype space coincides phenotype space identity mapping 
analogously gas advantage mapping needed trying solve problems natural binary encoding combinatorial problems 
cases extent mutation related genotype space phenotype space 
spaces distance measure metric additionally valid ffl small changes genotype lead small changes phenotype regarding euclidean distance 
precisely changes identical spaces 
requirements recombination mutation operators proposal assume optimization task function ir optimized 
space built way objective function evaluated efficiently 
general approaches tackle task eas 

standard ea ga 
genotype space ib chosen mapping defined 
canonical operators applied 
gray code single bit flip may cause large changes corresponding integer values bac 

representation designed close possible characteristics phenotype space 
genotype space needs special genetic operators adjusted genotype space 
approach suffers mapping usually induces additional nonlinearities genetic operators change genotype allows statement change fitness 
second approach tries avoid problem choosing representation similar phenotype space designing operators allow insight working mechanisms pre knowledge 
formal requirements genetic operators design instructions available bad proliferation designing problem specific eas observed see section 
general eas parameter optimization 
connection important look biological model order identify new principles possibly enhance performance eas 
helpful consider problem mathematical point view balance biological inspiration mathematical foundation gets lost disadvantage 
ea optimization algorithm questions importance ffl permissible solution reached arbitrary initial population 
ffl operators mutation recombination generating additional bias real selection process 
unfortunately goes trouble answering questions designing problem specific ea 
jones forrest see jf introduced called fitness distance correlation measures relation fitness distance optimum objective function order predict behaviour eas function 
definition distance directly related genetic operators method idea related shows concrete guidelines design genetic operators 
requirements genetic operators mapping 
aim support smooth motion search process fitness landscape 
requirements orientated gradient diffusion hypothesis building block hypothesis 
final judgment said gradient diffusion describes evolutionary search completely 
pointers representations operators supporting smooth motion fitness landscape advantage kind showing erratic behavior bac 
erratic behavior may advantage reducing danger premature convergence suboptimal solution 
advantages hard find especially looking search high dimensional space 
important mention causality exist genotype space objective function fitness function 
genetic operators working genotype space selection considers fitness individuals 
mind find optimal representation problem difficult find global optimal solution 
representation suitable problem hand specific problem domain 
similar free lunch theorem see wm radcliffe surry shown representations equivalent behavior considered average possible objective functions rs 
assuming certain information phenotype space concerning specific problem domain 
pre knowledge form distance measure 
distance measure shows similarity phenotypes regarding certain mark quality elements phenotype space small distance similar quality 
mark quality strongly connected objective function optimized 
pre knowledge possible formulating requirements operators basis distance measure 
performance eas mainly depend suitability distance measure quality available pre knowledge problem domain 
seen ask wm rs fg 
object function directly obtain distance measure 
case optimum development operators takes place 
eas designed problem domain suitable size objective function 
considering aspect assuming suitable metric dp theta ir phenotype space chosen 
metric fulfill requirements definition metric metric set mapping theta ir metric called metric space 
metric space follows genotype space phenotype space assumed finite spaces 
extend proposal infinite spaces extend formalization infinite spaces continous probability spaces restrict infinite spaces finite fixed length representations real numbers finite precision computer 
mapping assuming mapping injective metric dp induces automatically metric theta ir genotype space dg dp genetic operator causes small change regarding result just small change phenotype space 
reversal valid condition bijective 
general assumption injective useful 
thinks neutral mutations introns impossible different genotypes coding exactly phenotype 
hand perfect identical individuals require individuals take place exactly environmental factors 
rules constant environmental factors assumption injective possible 
course mapping consider effect environmental factors far 
injective valid requirement stated mapping requirement dp dp bijective requirement automatically valid 
recombination recombination operator guaranteed offspring certain similarity parents 
look way created recombination 
general form suffices reduced recombination operator theta omega finite probability space omega 
recombination operator theta omega assigns probability omega wg parents offspring omega 
requirement recombination operator form requirement omega max dg dg genotype offspring allowed away parents regarding parents 
recombination operator generate additional bias independent parents 
illustrated 
discrete recombination offspring reach corners rectangle indicated 
points higher probability reached recombination rest points recombination operator induces direction independent parents 
recombination operator fulfill additionally requirement ff ff ff recombination operators parents requirements formulated analogous way 
account pre knowledge experiences implementation details see example requirements extended specialized 
intermediate recombination ess limits space offsprings available panmictic generalized intermediate recombination special area 
mutation mutation operator theta omega basically individuals time 
mutation individual independent individuals sufficient look reduced mutation operator theta omega finite probability space omega pm 
probability pm pm omega vg mutation operator generates element new element requirement guarantee point point reached mutation step requirement pm requirement weakened replacing mutation finite sequence mutations ffi pm ffi ffi small mutations measured occur larger mutations requirement pm pm genotypes distance probability reached mutation requirement dg dg pm pm requirement guarantees mutation operator induce bias 
search information position global optimum mutation give population certain direction 
working dynamic adaptation step size step sizes requirement violated 
learning internal model topology preference certain search direction useful 
suitable information topology search space available anymore guaranteed state reached fulfilled 
metric evolutionary algorithm requirements definition suitable metric genotype phenotype space ea fulfills requirements metric mapping called metric evolutionary algorithm 
case possible elements lower fitness preferred elements higher fitness 
metric genetic programming looks requirements define obvious build 
give example metric genetic programming mbgp system section show crossover mutation operators conforming requirements build 
paradigm genetic programming gp see koz koz detailed gp existing gp systems crossover mutation operators results phenotype space unclear times 
look instance gp system koz standard gp systems elements programs represented expressions tree structures functions inner nodes terminals leaves 
function terminal set include set input variables predefined expression evaluated bottom evaluation tree structure 
gp systems recombination expressions chooses node parent exchanges subtrees starting nodes 
functional behaviour resulting expression dependent function terminal set chosen nodes form expressions chosen nodes parental expressions 
parental expressions similar functional behaviour functional behaviour child vary drastically parents general method known predicting 
looking requirements gp systems fulfill properties child differ parents parents differ phenotype space 
assume fitness landscape phenotype set smooth probably advantageous gp system searches parents assume elements phenotype space exist 
holds smooth fitness landscape implies neighborhood points similar fitness points approximately fitness lie 
mbgp system expressions 
data structure better appropriated problem attacked allows implement mutation recombination operators conform requirements defining 
task mbgp system solve find representation unknown function complete training set input correct output 
task practical applications representation completely specified function easily build compare quality search methods space computer programs see instance koz koz gr che 
case unknown function boolean function inputs output 
training set simply set element phenotype set get fitness jfx gj number inputs output unknown function unknown function maximum fitness function task mbgp system find representation maximum 
stated data representation plays major role success efficiency search method 
mbgp system expressions representation special data structure boolean functions called ordered binary decision diagrams obdd see bry 
obdds allow polynomially sized representation practically important boolean functions boolean functions input variables data structure represent boolean function polynomially bounded space operations obdds done polynomially bounded time regard size involved obdds 
efficient operations implementation mutation recombination operators 
mbgp system described detail subsections give short obdds overview existing gp systems obdds 
ordered binary decision diagrams ordered binary decision diagrams obdds data structure efficient representation boolean functions see bry 
permutation input variables xn obdd directed acyclic graph source sinks fulfilling properties ffl inner node labeled input variables xn outgoing edges leading successor resp ffl exactly nodes outgoing edges called sink resp ffl edge inner nodes obey permutation edge node node label smaller label regard obdd correspond boolean function evaluate function represented obdd input 
just repeat recursive procedure starting source sink reached label actual node go successor 
value sink reached sink reached 
label nodes increase regard going successor node procedure finished steps 
advantage obdds comparison expressions evaluated time expression needs time omega gamma jsj worse non trivial expressions containing input variables terminal symbols 
shows obdd inner nodes represented circles sinks squares get better overview sinks shown sinks stored memory 
ffifl fflfi ffifl fflfi ffifl fflfi ffifl fflfi theta theta thetafl theta theta thetafl sw au pq obdd representing function 
variable ordering essential influence size obdd 
functions obdds linear exponential size depending variable ordering existence polynomial time approximation scheme finding optimal variable ordering implies np see sie efficient scheme finding variable ordering nearly optimal exists 
obdds state art data structure boolean functions disadvantage 
practically important functions represented obdds polynomial size 
second point existence efficient algorithms important operations 
special interest mbgp system algorithms counting number inputs synthesis obdds see bry 
problem consists determining jfx gj obdd representing 
problem solved linear time size see bry 
synthesis obdds representing construction obdd function omega omega omega omega synthesis function 
algorithm synthesis known needs time jd log jd see sw 
obdds polynomial size algorithms polynomial time 
big advantage obdds existence reduced obdds 
function variable ordering reduced obdd representing unique obdd set obdds representing having minimal number nodes see bry 
obdd reduced time jd hash table bottom construction implicitly build reduced obdds space efficient mbgp system 
existing gp systems obdds subsection intended give short overview different gp systems obdds representation programs 
especially interested effects crossover mutation emphasize point discussion gp systems 
advantages obdds gp time see yan 
obdds form representation task gp system find representation boolean function complete training set 
determine fitness obdd uses method run obdd unknown function build possible training set includes inputs 
fitness evaluation performed 
number inputs leading output counted 
number exactly number inputs disagree 
algorithms mentioned section evaluation needs time log comparison time omega gammam delta jsj expression time decrease gp system multiplexer 
aware method practical applications output unknown function known inputs 
method evaluation mbgp system time efficiency compare runtime algorithms 
furthermore important method evaluation influence search process 
recombination described yan mbgp system implicitly mutation 
implicit mutation child disagree parents inputs parents agree 
done low probability change functional behaviour child high degree 
furthermore obdds yan maximum breadth maximum number nodes label reached new nodes label constructed build anymore 
edges leading node redirected existing nodes label 
naturally effect recombination hard predict 
mutation system look implicit mutation recombination 
gp system described uses obdd structures representation find representation unknown function complete training set 
recombination mutation operators similar operators described koz koz expressions swap substructures parental obdds create new substructures 
measures taken guarantee resulting structures valid obdds selection pressure results obdd giving obdd structures higher fitness 
method parity function variables 
investigations behaviour mutation recombination difficult genetic operators especially obdds 
gp system obdds genetic operators similar standard operators described koz koz dro 
boolean functions represented reduced obdds 
task gp system approximate unknown boolean function incomplete set training examples 
recombination mutation dro swap substructures parental obdds create random substructures obdd resp 
special measures taken guarantee resulting structures valid obdds effect recombination mutation functional behaviour unclear 
main advantage obdds system described dro possibility build obdds consistent training set 
initial generation done explicitly 
generations obdds consistent training examples replaced parents consistent obdds 
allows concentrate size obdds determine fitness gp system tries find consistent obdd minimal size 
strategy results generalizing boolean functions similar unknown function inputs training set 
dro effect size program generalization properties investigated theoretical viewpoint 
gp systems obdds far genetic operators investigating effects search process 
requirements behaviour genetic operators cases authors satisfied crossover mutation exchange information create random information respectively 
concrete seen requirements fulfilled existing gp systems working expressions obdds 
gp system detail fulfills requirements showing fulfilled 
start metric phenotype space fitness landscape phenotype space smooth uses metric define neighborhoods 
metric reflects knowledge problem try solve 
rough outline gp system resembles es 
outline filled giving detailed descriptions recombination mu tation operators 
order show system prove requirements mutation recombination operators fulfilled 
metric gp system shall try find unknown boolean function measure fitness individual counting number inputs unknown function agree 
appropriate metric dp function counts number inputs measured functions disagree dp jfx gj metric easily seen realizing equivalent hamming distance space bitstrings length functions differ fitnesses und dp fitness landscape smooth neighbouring functions similar fitness 
genotype space space concrete representations analogous function defined dp mapping genotype phenotype space 
reduced obdds represent individuals mapping bijective reduced obdd represents exactly boolean function boolean function represented exactly reduced obdd assuming variable ordering fixed 
dg metric 
subsection rough outline gp system 
rough outline gp system assume maximum number generations size parental generation number children predefined user 
mbgp system looks follows algorithm mbgp system 

set 
initialize choosing boolean functions equal probability ff gg including reduced obdds representing functions 

choose reduced obdds equal probability ii 
recombine call resulting reduced obdd iii 
mutate call resulting reduced obdd iv 
include 
choose obdds highest fitness form 
set 
output obdd highest fitness 
mbgp system resembles es respect points ffl size parent population ffl number children generation ffl best children form parent generation 
ffl children generated choosing parents equal probability recombining mutating result 
subsections fill rough outline content describing recombination mutation detail 
mutation mutation operator fulfill requirements 
concrete implementation fulfilling requirements 
basic idea mutation obdd consists steps 
choose number 
choose inputs elements 
change output chosen inputs 
number chosen randomly probability distribution ff predefined constant non adapting mutation rates hopefully improve system left research ae ff gamma ff falls ff delta gamma ff falls slight modification geometrical distribution parameter ff ff delta gamma ff order guarantee equally distributed random variable modified geometrical distribution created algorithm expected time ff algorithm rud algorithm choose number inputs modified 

set 
choose equally distributed random variable 

ff set go step 
set 
output choosing algorithm choose inputs elements output obdd changed 
reason identify input space gamma interpreting bit string binary code 
order fulfill requirements guarantee choose different inputs equal probability subsets gamma size done algorithm algorithm choose subsets gamma elements 

mg choose gamma jg equal probability 
set 
set 
ii 
set 
set ii 
set iii 
set iv 
set 
output fi loop step maps element th element fi gamma assume previous elements gamma sorted increasing order 
easily shown induction step correct position elements shifted position step 
algorithm chooses subset elements equal probability subsets gamma elements 
runtime expected runtime ff 
obdd mutated changing outputs inputs done algorithm algorithm change output inputs 
choose applying algorithm 

choose fi applying algorithm 

build reduced obdd outputs input element fi 
output result exor synthesis obdd step build time delta delta nodes 
exor synthesis step done time jdj delta delta delta log jdj delta delta expected runtime jdj delta delta log jdj delta ff ff 
expected runtime mutation reduced obdd polynomial size ff constant 
theorem mutation operator described algorithm fulfills requirements 
proof requirement states mutating arbitrary reduced obdd result reduced obdd follows fact algorithm number positive probability chosen algorithm subset size chosen positive probability 
function result mutation reduced obdd 
requirement fulfilled algorithm chooses higher probability chooses subset elements probability 
small changes respect greater ones 
requirement states obdds probability resulting reduced obdd mutation 
follows fact chooses subset elements equal probability subsets elements 
mutation operator fulfills requirements 
recombination recombination operator theta theta omega creates new reduced obdd parental obdds random influence represented omega 
fulfill requirement new obdd allowed greater distance parents distance parents 
requirement kind symmetry requirement probability result recombination distance parent second parent respectively 
source resulting obdd recombining reduced obdds results calling recursive algorithm gets sources resp arguments successor node resp sinks assumed label xn variable ordering xn algorithm rec 
return 
sinks return equal probability 

label label return node label rec rec 
return node label rec rec 
return node label rec rec 
recombination operator works follows starting sources obdds run parallel manner 
node smaller label node zero successor node visited successors node 
nodes label successors nodes visited 
sinks reached obdds sinks returned equal probability 
result call rec pair nodes stored guarantee random decisions independent 
strategy running time recombination upper bounded polynomially obdd sizes 
easily think worst case examples recombination needs exponential running time obdds polynomial size instance reduced obdd parity function recombined complement 
experiments indicate average running time small caused increasing similarity obdds population 
recombination operator similar synthesis algorithm boolean operator omega omega returns arguments equal probability result different omega synthesis obdds 
instance omega synthesis sink zero sink result function recombination results sinks equal probability 
prove requirements fulfilled need knowledge behaviour recombination operator probability distribution space reduced obdds look represents possible results recombination obdds 
answer question function represented obdd different way 
obdd input defines set nodes visited evaluating obdd input 
nodes set form path source sinks 
variable tested path identify path vector interpretation ffl variable tested path 
ffl variable tested zero successor chosen 
ffl variable tested successor chosen 
easily seen obdd equivalence path vector 
call vector path 
called block set inputs evaluation procedure inputs visits nodes path written fx ng clear inputs belonging block output obdd 
label sink reached path obdd elements mapped 
represented set blocks sink path leading representation obdd explain effect recombination obdds easily remember returns sink sinks 
paths reached resp 
compatible ng sink returned recombination operator lies union defined ng ae block intersection 
sink chosen equal probability child obdd representation omega form representation clear parents output input child obdd output input 
parents disagree output child probability 
important random decisions independent bit dependent obdd structure 
characterisation prove requirements fulfilled theorem recombination operator described algorithm fulfills requirements 
proof show distance greater distance obdds disagree output exactly inputs 
child obdd disagree parents parents disagree follows furthermore disagrees inputs agrees follows requirement states distance probability look series random decisions probability leads child distance inputs agrees 
complementary series random decisions recombination leads obdd complementary old child obdd inputs disagree 
distance disagrees exactly inputs old child obdd agrees disagree 
series probability argumentation valid series requirement fulfilled 
follows corollary gp system described algorithms 
experimental results experiments show usefulness requirements 
see mbgp system needs individuals comparable gp systems solving benchmark problems attacked 
shows requirements sense problem class attacked 
mbgp system tries find obdd representation unknown boolean function complete training set compare system systems trying find representations unknown boolean function complete training set 
computational effort see koz definition compare results koz koz che 
subsections shortly summarize results koz koz che results 
compare respect computational effort 
gp system introduced koza koz detailed gp choice representation expressions genetic operators mainly recombination exchange sub standard choice gp systems 
koz usefulness automatically defined functions adfs extension representation expressions shown experiments comparisons results adfs 
advantages adfs standard gp systems 
problems attacked koz koz finding representation unknown boolean function complete training set 
systems adfs formal requirements genetic operators general difficult predict functional behaviour child parents known 
gp adfs function runs successful runs pop 
size max 
generation multiplexer parity parity parity parity gp adfs function runs successful runs pop 
size max 
generation parity parity parity parity parity parity parity parity parity table results experiments koz koz table number runs compared number successful runs gp systems described koz koz 
run successful correct output inputs maximal number generations reached 
maximum number generations runs population size varied shown table 
gp adfs parity experiments repeated times running times long 
koza states function runs successful exact number successful runs known 
different runs allow reliable guess computational effort 
omitted functions comparison 
ep system system described che uses recombination different mutation operators having effects different strength individual 
system evolutionary programming ep system see fog gp system 
applied number problems problem finding representation unknown boolean function complete training set 
boolean functions ffl multiplexer ffl parity functions 
maximal number generations runs function population size 
parameters experiments che look shown table ep system function runs successful runs pop 
size max 
generation multiplexer parity parity parity parity table results experiments che results mbgp system tested mbgp system different functions ffl multiplexer ffl parity functions ffl randomly chosen boolean function inputs 
randomly chosen boolean function chosen independently equal probability runs set boolean functions inputs 
approach tested mbgp system find representations functions completely structure 
maximal number generations run dependent number inputs order give mbgp system time find solution 
parameters determine size parental successor generation chosen parental obdds child obdds generated 
initial generation consists obdds number individuals generation delta parameter ff mutation strength chosen experiments expected number mutating bits approximately 
results mbgp system table 
mbgp system function runs successful runs pop 
size max 
generation multiplexer multiplexer parity parity parity parity parity parity parity parity parity parity random table results mbgp experiments runs functions successful 
fact naturally depends maximum number generations system allowed run percentage successful runs fair measure comparison 
comparison computational effort fairer measure subsection 
furthermore see random function unknown function chosen randomly runs single function function class boolean functions inputs runs generations 
indicates mbgp system works boolean functions structure 
get better overview performance mbgp system show table average avg maximum gmax generation optimum time runs 
function avg gmax multiplexer parity parity parity parity parity parity parity parity parity parity random table average maximal generation optimum mbgp experiments 
comparison results general careful comparing systems search representations different spaces case space reduced obdds space expressions special terminal function set search process different complexities different search spaces 
compare mbgp system systems expressions obdd transformed time jdj expression function set fand common systems 
unknown boolean functions comparisons function types ffl parity function result number bits input odd 
ffl multiplexer function defined gamma gamma gamma delta multiplexer problem difficult gp systems multiplexer yan time parity function widely assumed difficult gp systems working expressions 
parity function biggest parity function standard gp systems expressions adfs see gr 
adfs representations parity parity function see koz 
section difference parity function number bits input parity function easily transform representation function function obdds expressions 
compare results respect computational effort min guess number individuals evaluated reach optimum probability population size guess number individuals evaluated get optimum probability generations population size compute formulas see koz detailed description hits number runs optimum generation hits total number runs log gamma log gamma delta delta number runs necessary get optimum generation probability population size number individuals evaluated number generations assumed initial generation size generations times population size times number runs 
experiments described koz koz probability 
computational effort comparison reflects efficiency search process terms number individuals evaluated 
independent implementation details hardware allow direct running time algorithm 
table shows results 
koz runs done parity function computational effort computed functions 
abbreviated table entry 
data 
comparison shows mbgp system works functions tested small fraction number individuals described koz koz ep system che needs 
systems rely completely recombination resp 
mutation experiments investigate role recombination mutation mbgp system described subsection 
interplay recombination mutation gp system basing recombination operator fulfilling requirements supposed population converge single individual child lie parents requirement 
generations maximum distance individuals population decrease 
sense assume fitness landscape function gp adfs gp adfs ep mbgp multiplexer multiplexer parity parity parity parity parity parity parity parity parity parity table comparison computational effort smooth indicating neighborhood individuals similar fitness individuals fitness lie 
gp system recombination operator fulfilling mutation lead best individual lies individuals initial generation 
search space large optimum lies initial population 
recombination operator fulfills requirements lead stagnation search process 
assume mutation necessary reliable convergence optimum 
empirically investigate theories modified mbgp system different versions ffl mbgp system mutation eliminating step iii algorithm including step iv 
ffl mbgp system recombination eliminating step ii algorithm mutating step iii 
versions original mbgp system run times parity function 
average number hits best individual generations shown 
results confirm theory recombination leads stagnation initial convergence rate high 
mutation powerful ensure convergence convergence slower initial speed recombination mutation recombination average number generations optimum maximal value mutation 
mutation recombination optimum generations average generations 
mbgp system mutation recombination high convergence speed reliable convergence trying find representation parity function 
generation parity mbgp alpha recombination mutation mutation recombination results parity function runs mutation recombination mutation recombination 
explained formalized problem representation evolutionary algorithms 
proper choice representation genetic operators need knowledge problem domain 
assume knowledge metric genotype space similar metric elements search space similar fitness 
assumptions number formal requirements mutation recombination formulated define metric evolutionary algorithm 
requirements shall lead evolutionary algorithm controlled behaviour effects recombination mutation limits defined 
assuming fitness landscape smooth behaviour lead better performance 
empirically test performance experiments mbgp system trying find unknown boolean function complete training set 
emphasizing role proper representation ordered binary decision diagrams obdds representation 
introducing defining obdds compared existing gp systems obdds gave detailed mbgp system 
number experiments show system needs individuals gp systems find representation unknown boolean function 
experiments show sense formal requirements genetic operators accordance knowledge problem domain 
furthermore choice proper representation respect evaluation genetic operators necessary order efficiently implement evolutionary algorithm 
algorithm underlying data structure form representation 
aware requirements proposal methods problem domain knowledge may practical probably lead better results 
incorporating knowledge problem domain algorithm necessary chance solving problem average quality despite validity nfl theorem see wm 
concept possibility formalization problem knowledge evolutionary algorithms 
course concept tested problem domains difficult find representation allows metric smoothing fitness landscape construction genetic operators fulfilling requirements 
course aware finding metric costs time guarantee successes compare effort find better algorithm resulting performance gain 
order circumvent risk theoretical investigation properties lead requirements probably guaranteeing properties convergence speed reliability 
thomas back ulrich hammel thomas jansen gunter rudolph hans paul schwefel ingo wegener help preparing 
research supported deutsche forschungsgemeinschaft part collaborative research center computational intelligence 
ant 
new interpretation schema notation binary encoding constraint 
schaffer editor proc 
rd int 
conf 
genetic algorithms pages 
morgan kaufmann 
bac th 
back 
evolutionary algorithms theory practice 
oxford university press new york 
bey 
beyer 
theory evolution strategies results dependent multi recombinant theory 
technical report systems analysis research group sys university dortmund department computer science october 
bey 
beyer 
gas understanding gas schemata building blocks 
technical report systems analysis research group sys university dortmund department computer science april 
bey 
beyer 
alternative explanation manner genetic algorithms operate 
biosystems 
th 
back fogel michalewicz editors 
handbook evolutionary computation 
oxford university press new york institute physics publishing bristol 
bh th 
back hammel 
evolution strategies applied perturbed objective functions 
michalewicz schaffer 
schwefel fogel kitano editors proc 
ieee conf 
evolutionary computation ieee world congress computational intelligence volume pages orlando fl june 
ieee press piscataway nj 
bry bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
bs th 
back 
schwefel 
overview evolutionary algorithms parameter optimization 
evolutionary computation 
bs th 
back schutz 
evolution strategies mixed integer optimization optical multilayer systems 
reynolds fogel editors evolutionary programming iv proceedings fourth annual conference evolutionary programming pages cambridge ma 
mit press 
che chellapilla 
evolving computer programs subtree crossover 
ieee transactions evolutionary computation 
cs schaffer 
representation hidden bias gray vs binary coding genetic algorithms 
laird editor proceedings th international conference machine learning pages san mateo ca 
morgan kaufmann publishers 
dav davis 
handbook genetic algorithms 
van nostrand reinhold new york 
dro droste 
efficient genetic programming finding generalizing boolean functions 
koza deb dorigo fogel garzon iba riolo editors genetic programming proceedings second annual conference pages stanford university july 
morgan kaufmann 
dro droste 
genetic programming guaranteed quality 
koza banzhaf chellapilla deb dorigo fogel garzon goldberg iba riolo editors genetic programming proceedings third annual conference university wisconsin madison july 
morgan kaufmann 
print 
fg fogel 
note representation variation operators 
ieee transactions evolutionary computation 
fog fogel 
evolutionary computation new philosophy machine intelligence 
ieee press new york 
gro hammel meyer schutz 
optimization heat networks means evolution strategies 

voigt ebeling rechenberg 
schwefel editors parallel problem solving nature ppsn iv int conf 
evolutionary computation pages berlin september 
springer berlin 
gol goldberg 
genetic algorithms search optimization machine learning 
addison wesley reading ma 
got gottschalk 
allgemeine 
georg thieme verlag stuttgart 
gr ross 
tackling boolean parity problem genetic programming limited error fitness 
koza deb dorigo fogel garzon iba riolo editors genetic programming proceedings second annual conference pages stanford university july 
morgan kaufmann 
hol holland 
adaptation natural artificial systems 
university michigan press ann arbor mi 
jf jones forrest 
fitness distance correlation measure problem difficulty genetic algorithms 
proceedings th international conference genetic algorithms pages 
morgan kaufmann 
koz koza 
genetic programming programming computers means natural selection 
mit press 
koz koza 
genetic programming ii 
mit press 
mic michalewicz 
genetic algorithms data structures evolution programs 
springer berlin 
rad radcliffe 
algebra genetic algorithms 
annals mathematics artificial intelligence 
rad radcliffe 
schema processing 
th 
back fogel michalewicz editors handbook evolutionary computation pages 
oxford university press new york institute physics publishing bristol 
rec rechenberg 
evolutionsstrategie optimierung technischer systeme nach prinzipien der biologischen evolution 
frommann holzboog stuttgart 
rec rechenberg 
evolutionsstrategie 
frommann holzboog stuttgart 
rs radcliffe surry 
fitness variance formae performance prediction 
whitley vose editors foundations genetic algorithms pages san francisco ca 
morgan kaufmann 
rud rudolph 
evolutionary algorithm integer programming 
davidor 
schwefel manner editors parallel problem solving nature ppsn iii int conf 
evolutionary computation pages jerusalem october 
springer berlin 
rud rudolph 
convergence properties evolutionary algorithms 
verlag dr hamburg 
sch 
schwefel 
evolution optimum seeking 
sixth generation computer technology series 
wiley new york 
higuchi iba 
approach genetic synthesizer binary decision diagram 
proceedings international ieee conference evolutionary computation pages nagoya japan may 
sie 
existence polynomial time approximation schemes obdd minimization extended 
proceedings th symposium theoretical aspects computer science stacs pages 
springer verlag 
sendhoff kreutz von seelen 
condition genotype phenotype mapping causality 
th 
back editor proceedings seventh international conference genetic algorithms michigan state university east lansing mi july 
morgan kaufmann 
ss schutz 
application parallel mixed integer evolution strategies mutation rate pooling 
fogel angeline th 
back editors proceedings fifth annual conference evolutionary programming pages cambridge ma 
mit press 
sw wegener 
reduction bdds linear time 
information processing letters 
wm wolpert macready 
free lunch theorems optimization 
ieee transactions evolutionary computation 
yan 
efficient genetic programming binary diagrams 
proceedings international ieee conference evolutionary computation pages 

