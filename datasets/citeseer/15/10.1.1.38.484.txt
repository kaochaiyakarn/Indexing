program comprehension multi language systems bernt andreas winter peter dahm jurgen ebert informatik universitat koblenz landau institut fur informatik koblenz mail uni koblenz de www www uni koblenz de universitaet fb fb program comprehension multi language systems bernt andreas winter peter dahm rgen ebert university koblenz landau institute software technology koblenz germany informatik uni koblenz de presents approach program comprehension multi language systems 
systems characterized high amount source codes various languages programming database definition job control 
coping systems requires crossing language boundaries analysed 
eer approach graph conceptual modeling models representing relevant aspects single language built integrated common conceptual model 
conceptual modeling focusses specific problems integrated model especially tailored multi language aspects 
software systems parsed represented conceptual model queried powerful graph query mechanism 
allows multi language cross easily retrieved 
multi language conceptual model query facilities developed cooperation maintenance programmers insurance project 

widely agreed software system legacy soon delivered 
software maintenance increasingly important 
worldwide benchmark project percent allocated new development software spent maintenance modification migration 
performed generic unit program understanding joint project ibm wt heidelberg university koblenz landau institute software technology koblenz und informatik service gmbh hamburg 
supported wissenschaft forschung und technologie national initiative software technology program understanding plays essential role phases software development 
late seventies reported maintenance efforts spent program understanding spent modification 
studies program understanding effort said cover 
program understanding key activity software maintenance providing large potential improving efficiency software development maintenance processes 
various approaches program understanding follow common structure source codes translated general data structure analyzed 
different choices representing source code information exist relational databases prolog databases object oriented databases syntax trees lisp images hybrid knowledge bases 
repository structures described terms textual languages entity relationship languages formal algebraic models 
coarse grained repository definitions pascal language 
set data structures different level granularity defined 
way chosen representing program information implies analysis mechanism 
database driven approaches convenient database query mechanisms 
defines prolog query language analyzing syntax tree representations 
database independent program query language pql introduced 
algebraic expression query language implemented software refinery toolset 
approaches repository structures fixed 
cope single programming language 
suited support program understanding multi language systems usual thing today enterprises 
real world software systems consist languages 
especially holds system old surviving generations programming languages hardware architectures 
concerned software und informatik systeme gmbh subsidiary german insurance mvs system consisting multiple sources various programming languages database definitions job control languages 
altogether system consists jcl csp cobol ii delta cobol pl assembler rexx sources programs written languages apl sas 
furthermore data models entities attributes considered 
approach program comprehension multi language software systems 
section describes multi language model established multi language source codes parsed object repository 
coarse grained conceptual model subset programming language environment insurance introduced 
section analysis multi language system described 
section sketches realization multi language program understanding system part approach 
papers ends outlook section 
representing multi language systems exist various kinds software maintenance tasks ranging analyzing single program statements inspecting architecture software system 
building tools support programs understanding define aspects software relevant maintenance tasks approached 
definition performed conceptual modeling techniques derived knowledge representation conceptual graphs entity relationship modeling niam information structure diagrams uml class diagrams 
conceptual models focus attention relevant concepts software system interdependencies respect maintenance problem 
eer approach graphbased conceptual modeling 
eer general class graphs 
conceptual modeling enabled extended entityrelationship dialect eer constraint language 
approach formal semantics defined 
implementation toolkit eer pro vides seamless approach object modeling implementation 
ongoing addressed conceptual model multi language software systems obtained eer source codes translated repository suited conceptual model 

building multi language conceptual model important problem maintaining multi language systems cope crossing language boundaries 
mvs systems connections sources different languages defined job control procedures 
job control procedures programs called 
furthermore mappings programs databases defined respect calls 
application systems consists number jcl procedures 
identifying programs belonging application find programs called respective jcl procedures 
context indirect calls programs programs considered 
significant cross referencing problem arises database migration 
changing database system requires modifications programs accessing respective data 
programs detected treating jcl procedures database definitions conjunction 
conceptual model multi language software system capturing kind analysis include concepts representing relevant source code aspects jcl procedures programs conceptual relationships 
multi language models composed single language models identifying interconnections 
ongoing integration mvs jcl cobol shall sketched example 
example 
shows coarse grained conceptual model mvs jcl 
consists steps 
jcl steps call programs provide bindings physical data files logical file names specify accesses hierarchical databases psb definitions 
conceptual model cobol introduced contain call necessarily cobol programs modeled relationship respectively 
cobol programs may access data files 
cobol code access specified indirectly logical file 
see connection physical file established conjunction jcl pro cedure 
reason relationship marked dashed 
psb name jcl procedure name step name file program name 
jcl single language model multi language model primarily interested concepts relevant inter language 
concepts internal definitions cobol data division represented model 
building common conceptual model requires corresponding single language models integrated 
respect general integration strategy adapted eer approach conceptual modeling concepts similar generalized common super concept 
denote information unified 
concepts different models interconnections connected conceptual relations 
integrating conceptual models jcl cobol figures common concepts identified firstly program called 
secondly models include bindings resp 
accesses files 
strategy concepts program file unified models 
file cobol program program name cobol procedure name 
cobol single language model integration type conceptual relation program file established indicating access program file 
logical file cobol programs mapped physical file jcl step 
conceptual relation file established iff file bound call cobol program jcl step 
furthermore match name logical file specified cobol program called 
condition specified constraint completes integrated conceptual model shown 
just case cobol conceptual models programming languages added model integration type pl programs integrated additional subconcepts program 
complicated situation arises databases added integration 
ims hierarchical databases example consist tree structure segments 
subtree structure mirrored psb specifications steps 
responsible connecting physical segments programs 
integration step type access programs segments defined conceptual relationship 
respective constraint defined re psb name jcl procedure name step name file cobol program program name cobol procedure name assert cob file cob file stmt ref ref cob stmt file 
integrated conceptual models jcl cobol spect ims psb jcl respective programming language macro assert prog seg prog seg prog seg integration far part multilanguage model representing programming environment und depicted model developed maintenance engineers insurance 
result integration mvs jcl cobol pl csp esf ims psb sql dml ddl 
eer dialect depicts generalization usual triangle notation allows alternative notation nesting object types useful clustering eer diagrams 

filling multi language repository multi language model defines repository structure program comprehension tool 
eer approach repository held objectbased graph representation 
order fill repository source codes translated underlying graph representation 
software system consists enormous amount documents feasible fill repository 
consequence translation process allow arbitrary parsing order sources various languages 
furthermore parsing facilities enable updating removing repository entries caused changes software components 
requirements met step parsing approach 
step checks document represented repository version 
removed 
document parsed second step 
third step representation integrated repository fourth step ensure integrity constraints 
parsing steps controlled set rules derived conceptual model 
demand parsing source codes different languages arbitrary order affects definition conceptual model 
model assure incom psb mode mode list string specifies isa name segment name jcl procedure step name file isa isa file cobol program program parsed program module procedure division cobol section paragraph copies name name isa pl file prologue type format pl procedure pl main procedure links isa links isa entity pl program isa isa name date description option column isa name name date organisation prologue view name date prologue displays represents name db column db table table defined db column datatype 
eer part multi language conceptual model macro plete conceptual relationships derived necessary informations captured parsing defining sources 
order delete code versions remove step keep information caused source codes parsed earlier step repository 
detailed description parsing processes see 

querying multi language systems order retrieve information multi language system repository analyzed general query mechanism 
query facility suited eer approach provided graph query name isa isa stmt isa qualified column name date device language graph repository query language 
expression language offering restricted order logic especially suited querying structures 
powerful means queries may include paths expressions defined 
allows complex relationships concepts represented repository included 
comes extensible library built functions predicates 
include specific functions relations aggregate functions counting average computing 
language shall explained detail mvs application example example 
get general idea software modules making application maintenance programmer isa find programs called jcl procedures defining application 
said indirect calls interest 
query addressing task looks follows jcl called program jcl called report jcl name called name query embodies basic construct report expression 
clause introduces variables concepts conceptual relationships 
example query type program respectively 
clause imposes restriction possible values variables defined 
conceptual model subpart model call program jcl procedure represented path connecting object type jcl object type program called 
case direct calls path follow relation opposite direction 
denoted path expression jcl called 
including indirect calls path description inserted 
program object may contain modules reached relationship reverse order call program objects 
retrieve indirectly called programs reflexive transitive closure denoted subpath calculated 
report clause defines output query composed 
example program identifiers reported 
specified conceptual model name attributes 
clause may contain report expressions resulting nested queries 
shows query screenshot presenting question nested query query result tabular form 
output report expression bag 
implementation bag interpreted visualized table 
order give deeper insight querying multi language systems ims maintenance problem sketched section approached 
example 
replace ims database relational programs database affected 
unfortunately programs connected ims databases 
query indirectly jcl psb definitions 
starting object ims programs prog interest reached path relationship segment object accessed program psb step objects 
complete path conceptual model follows ims prog conceptual model multi language system access programs segments represented relationship defined constraint page 
course query ims prog program ims prog report ims name prog name query yields pairs ims databases programs affected modifying database specification 
queries evaluated eval apply evaluator automaton driven strategy calculating path expressions efficiently respect repository content including query optimizer 
provide non wizards querying facility form user interface restricted power implemented 

current implementation program understanding tool multi developed instance toolset 
toolset provides generic environment parameterized specification actual maintenance problem order derive concrete program understanding tool instances 
problem specification defined eer conceptual model defined 
software parsed parsers model represented object repository 
parsers large extent generated pdl parser description language parser generator 
pdl extends yacc parser generator ebnf syntax notational support compiling textual languages 
source code independent query facility working underlying model static source code analysis 
system coded runs sun solaris ibm aix ibm os 
toolset multi language program understanding built parameterizing system conceptual model defined 
additionally parsers language included model built sketched section 
analyzing multilanguage system described section performed general retrieval component 
multilanguage instance currently integrated software production maintenance process und 
instance developed supporting understanding ansi cobol fine grained level granularity 
instance reverse engineering demonstration project 
instance exists analyzing conceptual models eer approach 
applied understanding models 

approach program understanding multi language systems represent programming environment und insurance 
formally eer modeling approach 
accordance single programming languages multi language environment modeled eer dialect constraint language 
common concepts resulting models combined single model general integration strategy 
stepwise parsing technology fill repository defined conceptual model varying source code information 
program comprehension enabled repository query language 
queries paths expressions exactly represent cross concepts different languages model 
queries und easily retrieve multi language cross 
tool provide maintenance engineers increased productivity 
addressing special needs und querying facility extended form query interface 
ongoing query facility integrated browsing component user combine query navigation desired 
component presenting query results terms source code tabular representation depicted 
multi language program comprehension tool just instance environment 
additional instances developed 
fine grained multi language tool desired goal 
context new problems different kinds parameter exchange formats encountered 
eer offer adequate support upcoming problems 

ein interpreter cke 
universit koblenz landau fachbereich informatik koblenz 
brown 
system jcl 
wiley new york edition 
canfora mancini 
workbench program comprehension software maintenance 
cimitile ller editors proceedings fourth workshop program comprehension march berlin germany pages 
ieee computer society press los alamitos 
chen 
entity relationship model unified view data 
acm transactions database systems march 

chen ramamoorthy 
information abstraction system 
ieee transactions software engineering march 
crew 
language examining syntax trees 
proceedings conference domain specific languages dsl pages berkeley oct 
usenix association 
dahm 
pdl 
technical report appear universit koblenz landau institut koblenz 
dahm ebert kamp winter 
und eer schemata formale grundlagen 
universit koblenz landau institut koblenz 
dahm ebert 
das ems 
universit koblenz landau institut koblenz 
dahm kamp winter 
der 
universit koblenz landau institut koblenz 
devanbu 
genoa customizable language front independent code analyzer 
proc 
th international conference software engineering melbourne pages 
ebert 
declarative approach graph modeling 
mayr schmidt editors graphtheoretic concepts computer science number lncs pages berlin 
springer 
ebert winter 
ein zum 
lehner editor und reengineering und pages 

ebert 
extract transform rewrite cycle step 
lehner editors proceedings nd euromicro conference software maintenance reengineering pages los alamitos 
ieee computer society 
ebert winter dahm 
graph modeling implementation eer 
thalheim editor th international conference conceptual modeling er proceedings number lncs pages 
springer berlin 

application program maintenance study report respondents 
ibm dp marketing group 

manual 
informatik universit koblenz landau fachbereich informatik koblenz 
grass 
object oriented design archaeology cia 
computing systems winter 
henninger 
case knowledge management tools software development 
journal automated software engineering july 

entwicklung und implementation eines zum reverse engineering von ansi cobol 
universit koblenz landau fachbereich informatik koblenz 
ibm editor 
mvs extended architecture jcl 
international business machines north york ontario edition september 
ibm editor 
vs cobol ii application programming language 
international business machines san jose edition march 

pql language specifying program views 
schafer botella editors proc 
th european software engineering conf 
esec volume lecture notes computer science pages spain sept 
springer verlag berlin 

design generic reverse engineering assistant tool 
wills newcomb chikofsky editors proceedings second working conference reverse engineering july toronto ontario canada pages 
ieee computer society press los alamitos cal 
johnson 
yacc compiler compiler 
computing science technical report bell laboratories murray hill 
kamp 
eine das repository 
universit koblenz landau institut koblenz januar 
kamp 
managing multi file multi language software repository program comprehension tools generic approach 
proceedings sixth international workshop program comprehension iwpc june italy appear 
ieee computer society press 
linton 
implementing relational views programs 
proc 
acm sigsoft sigplan software engineering symposium practical software developement environments pages may 
ller orgun tilley uhl 
reverse engineering approach subsystem structure identification 
journal software maintenance research practice dec 
mylopoulos borgida jarke 
telos representing knowledge information systems 
acm transactions information systems october 
newcomb 
legacy system cataloging facility 
wills newcomb chikofsky editors proceedings second working conference reverse engineering july toronto ontario canada pages 
ieee computer society press los alamitos cal 
paul prakash 
querying source code algebraic query language 
proceedings international conference software maintenance pages 
ieee computer society press sept 

ein cke 
diplomarbeit universit koblenz landau fachbereich informatik koblenz september 
rubin systems worldwide benchmark project 
final report 
selfridge 
integrating code knowledge software information system 
editor proceedings knowledge software engineering conference pages 
sowa 
conceptual structures 
information processing mind machine 
systems programming series 
addison wesley reading 
standish 
essay software reuse 
ieee transactions software engineering se sept 
unified modeling language 
notation guide 
technical report version alpha rational software santa clara july 
van 
niam information analysis method 
olle sol stuart editors information systems methodologies pages 
north holland amsterdam 
wells brand markosian 
customized tools software quality assurance reengineering 
wills newcomb chikofsky editors proceedings second working conference reverse engineering july toronto ontario canada pages 
ieee computer society press los alamitos cal 
wong tilley ller 
storey 
structural case study 
ieee software pages january 
information services 
reverse engineering demonstration project 
www com 
available research reports bernt andreas winter peter dahm jurgen ebert 
program comprehension multi language systems 
dix jorge lobo 
logic programming nonmonotonic reasoning 
hans michael kurt carlo simon jan thieme 
anwendungen 
manfred kamp 
managing multi file multi language software repository program comprehension tools generic approach 
peter baumgartner 
hyper tableaux generation 
jens 
component agent architecture modelling mas social sciences 
marcel 
software test bed global illumination research 
marcel 
des radiosity 
jurgen ebert bernt andreas 
extract transform rewrite cycle step 
jose jurgen dix mauricio 
con uent rewriting systems logic programming semantics 
lutz 
note nondeterministic reversible computations 
stephan 
system modelling object oriented pr nets 
lutz maurice 
finite systems test tubes predictable 
peter baumgartner 
en der gi der 
jens thomas marx 

angelika 
specifying object oriented systems gdmo sdl 
angelika 
recommendations improvement gdmo 
jurgen dix lu pereira przymusinski 
logic programming knowledge representation proceedings ilps workshop 
lutz 
uniform approach concurrency interleaving semantics petri nets 
ulrich furbach ed 
ijcai workshop model automated reasoning 
jurgen dix frieder 
framework incorporate non monotonic reasoning constraint logic programming 
carlo simon ridder thomas marx 
petri net tools poseidon 
juha andreas winter eds 
caise th doctoral consortium advanced information systems engineering barcelona june proceedings 
jurgen ebert roger 
omt metamodel 
stefan brass jurgen dix przymusinski 
super logic programs 
jurgen dix mauricio 
behaved semantics suitable aggregation 
peter baumgartner 
rational cient algorithm view deletion databases 
wolfgang albrecht dieter zobel 
integrating fixed priority static scheduling maintain external consistency 
jurgen ebert alexander 
operational semantics visual notations 
thomas marx 
april der 
jurgen ebert manfred kamp andreas winter 
generic system support multi level understanding heterogeneous software 
roger jurgen ebert 
booch metamodel 
jurgen dix luis pereira przymusinski 
prolegomena logic programming non monotonic reasoning 
angelika 
manual 
ulrich furbach 
view automated reasoning arti cial intelligence 
jurgen dix ilkka niemela research project disjunctive logic programming 
wolfgang albrecht 
fur alters oder 
kurt 
action logical correctness proving 
frieder stephan ulrich koch martin 
constraint logic programming computational linguistics 
kurt ridder 
die algebra der ein petri ansatz 
peter baumgartner ulrich furbach 
re nements restart model elimination 
peter baumgartner peter frohlich ulrich furbach wolfgang nejdl 
tableaux diagnosis applications 
jurgen ebert roger 
meta case practice case 
lutz 
algebraic characterization petri net pomset semantics 
lu 
minimal model generation hyper tableaux 
frieder 
flexible system constraint disjunctive logic programming 
ilkka niemela ed 
proceedings ecai workshop integrating nonmonotonicity automated reasoning systems 
jurgen dix luis pereira przymusinski 
non monotonic extensions logic programming theory implementation applications proceedings jicslp workshop 

disjunctive logic programming system protein theorem prover 
jurgen dix gerhard brewka 
knowledge representation logic programs 
lutz 
application compositional petri net semantics 
peter baumgartner ulrich furbach 
calculi disjunctive logic programming 
klaus 
physically volume rendering gaseous objects 
ebert winter dahm 
graph modeling implementation eer 
angelika 
querying graph structures ql 

abductive framework negation disjunctive logic programming 
peter baumgartner ulrich furbach ilkka niemela hyper tableaux 
ilkka niemela patrik simons 
cient implementation founded stable model semantics 
ilkka niemela implementing circumscription tableau method 
ilkka niemela calculus minimal model reasoning 
stefan brass jurgen dix 
przymusinski 
characterizations implementation static semantics disjunctive programs 
jurgen ebert manfred kamp andreas winter 
generic support understanding heterogeneous software 
stefan brass jurgen dix ilkka niemela 
przymusinski 
comparison static semantics wfs 
ebert 
alternative konzepte fur sprachen und bad 
dix furbach 
mit negation und 

compositional petri net semantics 
ebert engels 
speci cation object life cycle de nitions 
dix gottlob marek 
reducing disjunctive non disjunctive semantics shift operations 
baumgartner dix furbach schafer 
und 
lutz 
fairness semantics 
volker 

workshop 
frieder bernd thomas 
analysing rule sets calculation banking fees theorem prover constraints 
frieder 
membership constraints complexity logic programming sets 
stefan brass jurgen dix 
wfs con uent calculus equivalent characterization 
thomas marx 
net method database application design generation 
kurt ridder 
completion invariance technique means fixed point algorithms 
christian thomas marx stephan 
integration integrity constraints object oriented database schema odmg 
christoph andreas weihrauch 
modelling timeouts protocol design 
jurgen ebert vossen 
serializability generalized correctness transaction environments 
baumgartner 
disjunctive positive re nement model elimination application subsumption deletion 
baumgartner schumann 
implementing restart model elimination theory model elimination top setheo 
lutz jens volker rainer 
mit dem color structure code ein 
lutz 
class fully semantics petri nets 
baumgartner posegga 
th workshop theorem proving analytic tableaux related methods poster session short papers 
baumgartner furbach 
model elimination logic programming computing answers 
