universit di pisa dipartimento di informatica technical report tr compact transition systems degano priami july addr corso italia pisa italy 
tel 
fax compact transition systems degano priami dipartimento di informatica universit di pisa corso italia pisa italy di unipi major drawback representing concurrent systems transition systems exponential size semantic representations 
way obtaining compact transition systems mildly exponential average 
idea computation represent ones differing temporal ordering concurrent transitions occur 
characterise axioms transition systems may reduced size preserving non interleaving bisimulation equivalences 
exemplify reduction technique process calculus compact transition system generated sos style 
behaviour concurrent systems conveniently operational approach transition systems 
generally accepted assumption transitions represent occurrences events execution concurrent system represented interleaving transitions 
previous assumption leads transition systems states transitions number events 
state explosion problem major impediment mechanical verification processes commonly performed labelled transition systems 
overcome problem state explosion particular class transition systems independence yielding compact version 
proposals literature partially supported esprit basic research action 
exploit relation concurrency transitions enabled state 
basic idea give ordering concurrent transitions sequentially fired 
single computation sufficient represent ones obtained permutation concurrent transitions especially non time dependent aspects systems causality locality enabling interest 
order get compact representations step identify computations 
example ccs process originates sets maximal computations concurrent turn causes computations set equivalent sensible non interleaving aspect 
step consists choosing representative equivalence classes 
instance example may choose paths precedes turn precedes way transition kept outgoing initial state 
transitions configuration reached kept 
transitions possible leading final state 
example compact transition system transitions 
mainly interested checking non interleaving equivalences bisimulation 
essentially consider semantics concurrency primitive semantically expressible combination relations 
characterize intuition 
purpose postulate additional axioms 
basically assume firing event prevent occurrence ones concurrent 
furthermore show complete transition system retrieved compact representative 
consider calculi concurrency intentionally express transition systems equip sos semantics directly yields compact transition systems 
compact transition systems log log transitions average number events 
state explosion reduced mild exponential complexity 
polynomial degree dominates events estimated number atoms degree events 
complexity decreases number concurrent events increases 
example compact representation system pairwise concurrent events exactly transitions 
formal evidence non interleaving representations may economic interleaving ones 
particular non interleaving bisimulations checked log log time average 
needless say tion depending selected bisimulation see applicable compact transition systems reduction number transitions 
true smart representation transition systems bdds 
compact transition systems greater benefits starting linguistic level 
case avoid waste time derive fly compact transition systems processes investigation 
consider subset ccs introduced operators prefix choice parallel composition communication 
adding recursion creates problem 
communication requires additional axioms transition systems independence satisfied higher order name passing calculi scope operator 
define operational semantics calculus sos style 
rely proved transition systems transitions labelled encodings deduction trees 
additional information expresses concurrency relation making explicit definition independence useless 
compact transition system generated way equivalent obtained reduction 
matter fact results bisimulation complexity sketched hold 
prototype check bisimulation ideas runs macintosh described 
related similar sketched 
problem addressed finding compact representation processes studying safety properties absence deadlock bisimulation equivalences 
random selection run kept leads efficient solution 
solution represents processes exploiting properties independence mutual exclusion events case 
representatives preserve failure csp semantics said bisimulations 
reduces labelled transition systems preserves equivalence notions stable failure divergence 
semantic model conforms semantics csp divergence system 
predefined relation independence events constructing transition system contains representative path obtained interleaving independent events 
tool implemented yielding state graph model checking may performed efficiently 
methods propose reductions petri nets permit efficient checking deadlocks liveness properties 
method developed par ticular class petri nets 
simplification relies kind reachability relation computations 
approach unfoldings petri nets easier establish reachability 
solution user supply pomset grammar describes behaviour considered net 
organized follows 
section recall transition systems independence impose restrictions 
subsection describes reduce size kind transition systems loosing information non interleaving behaviour 
subsection estimate complexity size compact transition systems time needed obtain 
eventually characterize non interleaving bisimulations 
prove reduction preserves 
calculus concurrency sect 
describes derive compact transition system 
sect 
integrates previous sections cope communications 
compact transition systems main idea approach limit state explosion selecting representative computations differ temporal ordering concurrent transitions fire 
recall transition systems independence 
transition system quadruple gamma gamma gamma set configurations ranged fl fl labelling alphabet metavariables gamma gamma theta theta gamma transition relation start state 
computation path transition system 
write tr fl transitions source fl 
transition system equipped symmetric irreflexive relation gamma 
theta gamma called concurrency get transition system independence ts gamma gamma transition systems introduced 
restrict finite state finite branching tss 
formal characterization transition systems axioms fl gamma 
fl fl gamma 
fl fl fl fl gamma 
fl fl gamma 
fl fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl equivalence relation including defined fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl relation says transitions occurrences event 
axiom states occurrence event state drives unique state 
axiom see fig 
shows intuitive property concurrent transitions occur consecutively occur reverse order 
axiom extends events 
fl fl fl fl fl fl fl consecutive concurrent transitions occur order 
impose sensible restrictions asynchronous transition systems 
assume finite set pairwise concurrent transitions computation occur consecutively 
assumption precise axiom fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl event may seen firing prefix language firing condition net 
interleaving transitions associated event 
instance axiom fl fl shows firing transition prevent execution transitions concurrent 
instance called forward stability 
immediate consequence statement depicted fig 

note uniqueness fl follows axiom 
proposition forward stability fl gamma 
fl fl gamma 
fl fl fl gamma 
fl fl gamma 
fl fl fl fl fl fl fl fl forward stability 
assume restricted computation represents enabling relation sense petri net theory 
formally transitions fl gamma 
fl computation fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl theorem help 
states concurrent transitions computation exists computation source target transitions occur reverse order 
theorem permutation transitions fl gamma 
fl gamma 
fl gamma 
fl computation fl gamma 
fl fl gamma 
fl exists permutation indexes oe computation fl oe gamma 
fl oe gamma 
fl oe gamma 
fl ffl oe oe ffl oe gamma ffl oe proof 
proof induction statement trivially true axiom 
assume inductive hypothesis proposition holds transitions occur fl gamma 
fl fl gamma 
fl minimum index fl gamma 
fl fl gamma 
fl assume need trivial adjustment indexes 
fl gamma 
fl fl gamma 
fl fact fl gamma 
fl fl gamma 
fl axiom fl gamma 
fl fl gamma 
fl minimum 
axiom exists computation fl gamma 
fl gamma 
fl fl gamma gamma 
fl gamma gamma 
fl gamma 
fl fl gamma gamma 
fl repeat times obtain computation fl gamma 
fl gamma 
fl fl gamma gamma 
fl transitions fl gamma 
fl fl gamma gamma 
fl inductive hypothesis suffices 
restrict class transition systems stipulating axiom see fig 

says concurrency operate choices 
words concurrent transitions occur set transitions enabled firing change apart fired 
transitions designated represent interaction elementary actions say communications interplay choice interaction requires attention 
come issue section 
fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl reduction show extract canonical compact representative transition system way non interleaving equivalences preserved checkable efficiently 
basic idea give ordering fl fl fl fl fl fl fl fl fl concurrency operate choices 
concurrent transitions sequentially fired 
computations differ ordering concurrent transitions occur convey information non interleaving aspects system 
preserve bisimulation equivalences choose deterministically leader transitions kept concurrent outgoing configuration fl 
assume lexicographic ordering labels define induced pre ordering transitions outgoing configuration fl gamma 
fl fl gamma 
fl fl gamma 
fl gamma 
fl note pre ordering transitions exiting configuration share label transitions originate loop 
consider instance transition system fig 
initial state source transitions 
clear leader transition originates different compact transition systems full color dashed transitions 
necessary keep interested preserving bisimulation equivalences 
second condition definition states transitions originating loop greater 
postponing selection ensuring fairness 
instance condition ccs process rec transition labelled generated 
note extends condition loops total transition systems finite state 
ffl ffl ffl ffl ffl transition system 
ts gamma gamma transition system independence 
auxiliary function defined tr fl min tr fl ffl gamma 
fl fl gamma 
fl min tr fl function defined applied finite state finite branching transition systems 
recursively discards transitions concurrent current leaders keeps 
note transition fl gamma 
fl equivalent discarded fl gamma 
fl occur leader fl gamma 
fl due iterated applications forward stability 
starting initial configuration transition gamma 
fl tr removed transition system subgraph reached 
reduction iteratively applied configurations targets computations source transitions kept far 
compact transition system ts cts gamma 
fl gamma fc tr fl 
flg gamma ffl gamma 
flg property immediate definition proposition transition system ts compact version cts uniquely finitely generated 
proof 
reduction terminating size ts decreases step 
relation irreflexive ts finite state finite branching configuration processed 
cts unique computation min tr fl deterministic 
claim information behaviour process lost generation compact representation 
possible rebuild transition system compact 
theorem ts gamma gamma cts gamma compact transition system 
fl gamma 
fl ts fl gamma 
fl cts fl gamma 
fl fl gamma 
fl proof 
consider transition fl gamma 
fl ts occurring cts 
distinguish cases fl fl gamma fl 
fl cts fl gamma 
fl fl gamma 
fl definition fl 
fl fl gamma 
fl previous case 
ts finite state finite branching case proved 
case fl gamma consider minimal predecessor fl cts fl computation gamma 
fl gamma 
fl gamma 
fl ts 
fl gamma 
fl cts exist fl 
fl fl gamma 
fl fl gamma 
fl 
proceed induction number transitions fl fl base case 
single transition fl fl fl fl 
fl gamma 
fl fl gamma 
fl axiom fl gamma 
fl fl gamma 
fl previous case 
case fl gamma 
fl fl gamma 
fl examine relations transition 
forward stability exists fl gamma 
fl ts fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl done fl gamma 
fl fl gamma 
fl eventually appear cts 
axiom fl gamma 
fl fl gamma 
fl previous case 
assume theorem holds transitions fl fl labelled apply arguments transition labelled allows reach state distance fl fl decreases gamma inductive hypothesis applies 
theorem gives means retrieve transition system compact representation 
theorem ts gamma gamma cts gamma compact transition system 
possible rebuild part reachable ts cts 
proof 
transition system ts finitely obtained fixpoint construction 
define function psi rebuilds diamonds concurrent transitions 
apply psi fix point reached 
build sequence transition systems ts gamma gamma 
gamma gamma gamma 
gamma 
abbreviate conditions saying ts ts starting ts cts 
conditions introduce family equivalence relations defined theorem 
function psi ts ts fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl axiom hfl gamma 
fl fl gamma 
fl hfl gamma 
fl fl gamma 
fl definition application psi adds nodes transitions ts axiom 
transition systems finite state finite branching psi strictly monotonic increases cardinality gamma fl gamma strictly increases cardinality gamma 

psi cts ts psi unique fixed point ts ts 
prove ts ts follow pattern proof theorem 
report example application transformation psi introduced proof 
consider cts fig 
shows psi cts diamond restored 
step get transition system depicted part 
ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl reconstruction full transition system 
complexity estimation sub section estimate space time complexity compact transition systems 
claim minimality reduction shown sect 

theorem ts transition system equivalence classes originated average space complexity cts log log 
proof 
transition systems finite state finite branching initial state maximal length acyclic paths assume forward stability exists integer jn jn jn jn number nodes reached acyclic computations length fl transition source fl fl transitions concurrent 
note transitions originating loops appreciably contribute number transitions choice delayed possible 
consequence may think graphs acyclic 
estimate number order magnitude transitions cts assuming transition systems structure 
initial state degree max gamma fk fl configurations reached transition degree average 
follows assumption fact average half transitions non concurrent leader appear immediately 
number transitions half graph assumption computing summation dk 
log log log 
estimate number transitions compact transition system 
tr leader belongs 
proceed recursively transitions concurrent assumption transition left 
number transitions 
exiting log difference equation log replaces upper bound total number transitions log order log order number transitions cts log log log log theorem establishes exactly transitions occur cts assuming empty concurrent transitions distinct labels holds pair transitions exiting configuration 
note second condition amounts say system deterministic 
furthermore establish worst space complexity representations occurs concurrent transitions share label complete transition system 
theorem ts transition system equivalence classes originated 
fl fl gamma 
fl fl gamma 
fl fl cts exactly transitions 
fl fl gamma 
fl fl gamma 
fl cts ts 
proof 
start item 
ts exactly transitions equivalences classes singletons 
case transitions outgoing node concurrent distinct labels 
kept cts 
item 
discard transition 
cases hypotheses theorem item apply compact transition system exactly transitions 
consider ts depicted fig 
transitions concurrent transitions pairs 
labels transitions omitted sake readability assuming parallel arcs belong equivalence class 
transitions cts ones full color 
exists bisimilar ts relations transitions configurations target transitions labelled duplicated see fig 

corresponding cts contains occurrences gamma transition fig 
full color 
estimate generation time cts 
assume comparison labels unitary cost checking transitions relation 
theorem ts transition system equivalence classes originated 
average generation time cts log log ffl ffl ffl ffl ffl ffl ffl ffl optimum case space complexity 

fl fl gamma 
fl fl gamma 
fl fl generation time cts log proof 
item 
selection leader transitions requires log time 
iterate selection subset transitions concurrent 
upper bound iteration selection log consequence transition kept exiting node determined log time 
theorem know procedure applied log times 
upper bound average generation time log log generation time order log log log log 
item 
transitions exiting configuration discard transitions 
theorem item ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl non optimum space complexity 
generation time log bisimulation behaviour distributed systems usually compared bisimulation equivalences 
intuitively transition systems bisimilar starting initial state fire transition label reached configurations bisimilar vice versa 
precisely definition 
definition gamma gamma gamma gamma 
transition systems 
binary symmetric relation gamma theta gamma bisimulation iff ffl prp ffl fl fl gamma 
fl fl gamma 
fl fl ffl fl fl gamma 
fl fl gamma 
fl fl exists bisimulation say transition systems bisimilar write immediate prove bisimulations induce equivalence relations 
bisimulation equivalences preserved reduction semantics considers concurrency primitive semantically expressible combination relations 
words concurrency basic ingredient bisimilarity check style 
call non interleaving equivalences respecting axiom fl gamma 
fl fl gamma 
fl fl fl fl fl fl gamma 
fl fl gamma 
fl fl fl fl fl prove main theorem subsection 
theorem gamma gamma gamma gamma 
transition systems 
ct gamma fli ct gamma 
fl compact transition systems respectively 
non interleaving bisimulation ct ct proof 
concurrency relation holds transitions related bisimulation axiom 
non interleaving bisimulation define gamma fl fl gamma fl gamma prove bisimulation ct ct hfl fl fl 
fl exists fl fl gamma 
fl hfl fl left prove fl 
fl fl gamma fa fl gamma 
fl fa fl 
fl hfl fl min min fl 
fl fl gamma 
fl hfl fl hfl fl hp conclude bisimulation ct ct non interleaving bisimulation fl 
fl fl 
fl hfl fl fl 
fl fl 
fl hfl fl fl 
fl fl 
fl iff fl 
fl fl 
fl non interleaving gamma 
symmetrically symmetric case 
non interleaving bisimulation ct ct hfl fl exist fl gamma gamma fl gamma gamma hfl gamma fl gamma fl gamma 
fl fl gamma 
fl hfl fl implies sets non empty fl gamma fl gamma hfl fl fl 
fl fl 
fl apply sources targets transition transformation psi theorem 
application psi adds ct node fl transitions fl gamma 
fl gamma 
fl similarly ct extended node fl transitions fl gamma 
fl gamma 
fl fl gamma fl gamma non interleaving bisimilar transition exits concurrent fl gamma gamma 
fl fl gamma gamma 
fl respectively 
similarly fl fl non interleaving bisimilar 
safe defining fl ig generally obtain th approximation starting define gamma fl ig fl fl added configurations 
fixed point psi reached required non interleaving bisimulation fixed point example shows reduction preserve interleaving bisimulation reduces concurrency nondeterminism interleaving 
processes clearly interleaving bisimilar 
compact transition systems depicted fig 

ffl ffl ffl ffl ffl ffl ffl compact transition systems section time complexity estimation non interleaving bisimilarity check 
known partition refinement algorithm paige tarjan complexity log number nodes approximately transitions 
log log transitions cts corollary 
corollary check non interleaving bisimilarity cts equivalences classes average time complexity log log 
similarly theorem allows state corollary 
corollary check non interleaving bisimilarity cts satisfying item theorem average time complexity log 
application section directly generate compact transition system specification process calculus 
way avoids generation exponential complete transition system subsequent reduction 
rely proved transition systems defined sos style 
transitions labelled proofs permits retrieve concurrency relation 
language test bed non deterministic concurrent calculus communication 
show tiny calculus enriched features similar ones ccs calculus 
set actions ranged ff fi 
process expressed bnf grammar nil tjt sequel omit nil irrelevant 
define set labels transitions 
jj jj set proof terms theta 
intuitively symbol jj jj denotes action performed left right component parallel composition 
tag means nondeterministic choice resolved favour left right summand 
operational semantics obtained standard way apart prefixing encoding proof transition action 
standard labelling actions interest needs apply proof terms function defined term proved transition system pts ht theta gamma gamma 
defined axiom rules tab 

report example derivation transition process jd 
gamma 
gamma 
jd jj gamma 
bjd fixed simply write gamma 
proved transition system deterministic 
proved transition system lacks independence relation 
labels transitions record proof derivations easy define transitions tr concurrent act gamma 
sum gamma 
gamma 
sum gamma 
gamma 
gamma 
jt jj gamma 
jt gamma 
tjt jj gamma 
tjt table proved transition system left symbol differ jj 
instance transition derived transition jd jj gamma 
concurrent 
precisely process tr 
concurrent denoted jj jj perform respectively jt context represents gamma 
note gamma 
gamma 
jt gamma 
jt gamma 
jt gamma 
jt gamma 
relation instantiated language 
equivalence relation induced concurrency relation closure respect note tags jj necessary distinguishing concurrency nondeterminism transition systems 
consider process ffjfi transitions possible 
tags dropped proof terms impossible say jj ff concurrent jj fi jj ffi 
similarly jj ignored 
instance exchange process 
sos generation show calculus generates transition systems satisfy axioms introduced previous section 
theorem transition system independence pts hp theta gamma satisfies axioms 
proof 
axioms satisfied ffl pts deterministic axiom ffl rules discard context axioms ffl rules sum discard alternative context 
restricted computation represents enabling relation determined nesting prefixes axiom 
give sos rule defines compact proved transition system 
filter deduction transition hopefully single interleaving concurrent transitions generated 
particular process set leader transitions prevent deduction transition concurrent rules discard context generation delayed 
determine leaders tr need auxiliary definition 
total proved transitions process defined follows 
tr 
lexicographic ordering actions 
compact proved transition system cpts ht theta gamma 
gamma 
defined rule gamma 
auxiliary arrow red gamma 
gamma gamma 
gamma 
stands transition labelled note checking negative premise effective finite branching property transition systems 
example consider process ffl ffl ffl ffl ffl ffl fl ffl ffl ffl ffl ffl fl ffl compact full color complete pts 
readability transitions labelled actions 
cpts illustrated fig 
full color 
compact representation states transitions states transitions complete pts 
note left summand labels jj jj jj jj jj jj transitions fl fl see kept 
immediate noticing rule red just rephrasing function 

compact proved transition system term obtained inductively coincides defined 

theorem terms ht theta gamma 
ti ht theta ti 
corollary reports complexity estimations transition systems originated calculus 
assume operators language equiprobable 
forward stability ensure transition systems fit assumptions theorem 
complexity estimation valid number equivalence classes replaced number actions occur process 
corollary process occurrences actions operators language probability occur 
average space complexity compact transition system log log 
theorem determines generation time complexity 
theorem process occurrences actions operators language probability occur 
assume generation transition cost equal number rules applied derivation 
average time complexity compact transition system log log 
proof 
generation transition source degree requires time proportional gamma 
generation transitions tr 
selection leaders performed log times check concurrency relation need compare proof terms length theorem prune set tr log iterations 
cost reduction applied configuration log log 
consequence generation transitions exiting node belonging cts 
steps iterated targets log transitions kept far 
degree new states average rules sum discard alternatives equiprobable consider number prefixes 
iterations log theorem 
generation cost log log log log log log conclude proof 
recursion added calculus preserving results reported 
need tag special symbol transitions performed recursive process greater transitions 
corresponds delay possible selection reduction strategy 
adding relabelling operator absolutely straightforward 
claim minimality compact transition system 
due preorders transitions arbitrarily 
instance compact transition system arcs arcs duplication arc labelled complete transition systems shape 
note problem show ordering 
interaction particularly relevant distributed systems case transitions designate interaction elementary activities 
typical case communication 
section extend results 
consider transitions originated cooperation action call compound assume distinguished label problem may arise ccs calculi actions may communicate occur scope restriction operator na 
case concurrency may implicitly choices 
consider example ccs process jb nc occurrence concurrent prevents occur restricted 
chosen computation followed communication possible 
give axioms ensuring concurrency hidden choice occurrence compound transition prevents partners 
prove ccs restriction satisfies new axioms 
assume family ary relations gamma 
theta gamma 
equivalence classes transitions identify components compound transition 
components element represent transitions partners originating compound transition 
turn th component 
enrich transition systems family relations yielding ts gamma gamma interaction mechanism fixed instance complementary actions ccs actions family relations safely omitted 
assume axioms fl gamma 
fl fl gamma 
fl abuse notation write fl gamma 
fl fl gamma 
fl belongs th equivalence class requirement put says components compound transition concurrent pairwise concurrent compound transition 
fl gamma 
fl fl gamma 
fl fl gamma 
fl note fl gamma 
fl fl gamma 
fl implies transition fl gamma 
fl concurrent transition belonging class axiom 
instance ccs communication arises interaction ternary relation contains gamma 
gamma 
gamma 
transition concurrent components compound transition concurrent compound transition 
fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl postulate compound transition fl gamma 
fl equivalence class components transition leaving fl transition entering fl fl gamma 
fl fl gamma 
fl fl fl ffl gamma 
fl fl gamma 
fl fl gamma 
fl ensure concurrency operate choices need axiom extends axiom holds fl gamma 
fl fl gamma 
fl fl gamma 
fl fl fl gamma 
fl fl gamma 
fl note classical process calculi ccs acp calculus verify axioms particular axioms 
due interplay concurrency nondeterminism scope scope operator exemplified section 
example arises communication mechanism forces communications set labels 
example process jj fbg violates axiom transitions fire asynchronously 
note sequential composition processes usually written rises problem 
action occur concurrently action compound 
far reduction concerned compact transition system cts gamma 

relations may equivalence class compound transitions empty definition function case put placeholder ffl corresponding class 
instance consider process assume ccs communication mechanism 
reduction selects 
unique transition transition 


reduction generates state enables transition action action corresponding communication belong compact transition system means loss information 

ffl 
reconstruct aja gamma 
see 
rebuild complete transition system compact need rebuild compound transitions family relations fix point construction theorem add transition source sequence consecutive transitions compose transition relations definition psi add item fl gamma 
fl gamma 
fl gamma dn gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl ffl fl gamma 
fl fl gamma 
fl item rebuilds compound transitions axiom axiom join set items defining fh fl gamma 
fl fl gamma 
fl fl gamma 
fl fl gamma 
fl sets introduced reconstruct concurrency relation axioms respectively 
omit proof reconstruction sketched yields back original complete transition system 
shape proof theorem requires technicalities 
show ccs restriction satisfies axioms 
recall communication ruled com gamma 
gamma 
gamma 
com gamma 
gamma 
gamma 
theorem transition system independence pts hp theta gamma 
satisfies axioms 
proof 
need prove statement second group axioms 
axioms satisfied rules com share premises 
show axiom satisfied consider context communication partners enabled 
assuming performs lays left jj gamma 
jj gamma 
gamma 
assume transition enabled concurrent partners 
cases possible performed subterm performed subterm performed subterm context third case similar 
write transition gamma 
subterm context definition label differ ones transitions jj share possibly empty prefix proof term 
jj jj 
transition concurrent communication 
axiom satisfied rules discard context 

authors help complexity issues 

categories asynchronous transition systems 
phd thesis university sussex 
bianchi degano priami 
efficient verifier truly concurrent properties 
editor proceedings pact lncs pages 
springer verlag 
boudol castellani hennessy 
theory processes localities 
theoretical computer science 
brookes hoare roscoe 
theory communicating sequential processes 
journal acm 
bryant 
graph algorithms boolean function manipulation 
ieee transactions computers 
cleaveland parrow steffen 
concurrency workbench tool verification concurrent systems 
acm transaction programming languages systems pages 
valmari 
reduced labelled transition systems save verification effort 
proceedings concur lncs 
springer verlag 
ph 
darondeau degano 
causal trees 
proceedings icalp lncs pages 
springer verlag 
de simone 
aboard auto 
technical report inria sophia antipolis 
degano de nicola montanari 
partial ordering semantics ccs 
theoretical computer science 
degano priami 
proved trees 
proceedings icalp lncs pages 
springer verlag 
degano priami 
causality mobile processes 
proceedings icalp lncs pages 
springer verlag 
fernandez 
tool set deciding behavioural equivalences 
proceedings concur lncs 
godefroid 
partial orders improve automatic verification methods 
proceedings cav 
godefroid wolper 
partial orders efficient verification deadlock freedom safety properties 
proceedings cav lncs pages 
springer verlag 

net implementation optimal simulations 
proceedings application theory petri nets pages 
joyal nielsen winskel 
bisimulation open maps 
technical report brics rs 
mcmillan 
unfoldings avoid state explosion problem verification asynchronous circuits 
proceedings cav 
milner 
communication concurrency 
prentice hall london 
milner moller 
unique decomposition processes 
theoretical computer science pages 
paige tarjan 
partition refinement algorithms 
siam journal computing 
peled 
model checking representatives 
proceedings cav lncs pages 
springer verlag 
probst li 
partial order semantics avoid state explosion problem asynchronous systems 
proceedings cav 
shields 
concurrent machines 
computer journal pages 
stark 
concurrent transition systems 
theoretical computer science pages 
valmari 
stubborn attack state explosion 
proceedings cav 
valmari 
improved failure equivalence finite state systems reduction algorithm 
proceedings ifip wg protocol specification testing verification stockholm june 
winskel nielsen 
models concurrency 
technical report daimi pb computer science dept aarhus university 
appear handbook logic computer science 

