preliminary version maude versus haskell experimental comparison security protocol analysis david basin institut ur informatik albert universit freiburg universit ande freiburg br 
germany email basin informatik uni freiburg de denker computer science laboratory sri international menlo park ca usa email denker csl sri com compare executable languages rewriting logic speci cation language maude higher order lazy functional programming language haskell 
compare languages experimentally problem modeling reasoning security protocol authentication 
explore di erences models formalized analyzed performance tool 
building analyzing models systems heart software engineering languages formalisms proposed tasks 
rewriting logic established powerful logical semantic framework 
rewriting logic model formalized rewrite theory modulo equational theories 
rewriting logic mechanization systems maude elan cafe obj number strengths 
include support structured theory speci cations algebraic data types function speci cation rich equational logics system support built equations 
maude system supports supported darpa rome laboratories contract 
preliminary version 
nal version published electronic notes theoretical computer science url www elsevier nl locate entcs basin denker high level formalization models prototyping analysis 
allows re ective reasoning rewrite theories data manipulated theories rules theory applied strategies speci ed 
course executable languages share similarities rewriting logic data types speci cation functions equations 
compare rewriting logic competitor haskell modern functional programming language 
haskell lacks rewriting logic features ers higher order polymorphic functions lazy data types 
ecient tools haskell interpreters compilers :10.1.1.47.6555
compare languages building analyzing models small non trivial problem formalizing model security protocol authentication distributed environment nite state space model checking nd attacks 
rewriting logic shown particularly suited specifying communication protocols including security 
interesting see haskell rise challenge 
goal provide critical investigation relative strengths weaknesses languages tool support 
achieve tried keep formalizations close possible 
comparison analysis main di erences reasons ects 
example show lazy data types haskell allow formalize nite objects speci ed approximations maude 
signi cant di erences higherorder versus re ective reasoning formalizing coordinating heuristics search 
tool side compare development time size formalisms runtime performance 
believe interest rewriting logic community 
general results embed formalisms rewriting logic knowledge depth comparisons competing formalisms 
encourage comparisons help clarify myths preconceptions di erent approaches bring light limitations advantages commonalities di erences 
comparisons help determine progress 
interest researchers working formalizing analyzing security protocols 
community formal methods play important role particular models protocols modeled kind state transition system 
comparing di erent paradigms examples studies model analyzed di erent formalisms close di erent modeling languages allow 
better understanding di erences various languages tools help protocol designers consumers formal methods choose tool best suited basin denker tasks 
organization remainder organized follows 
section provide background maude haskell 
section explain authentication protocol case study model 
sections parts formalization 
section compare formalizations nally section draw 
background give brief overviews rewriting logic haskell concentrating aspects relevant case study comparison 
maude rewriting logic executable logic extends algebraic speci cation techniques concurrent reactive systems 
simple expressive logic naturally models static dynamic aspects communicating systems 
rewriting logic mechanized maude system 
maude system supports analysis systems metaprogramming example prototyping systems de ning execution strategies logic 
brie outline key syntactic features maude executable speci cation language rewriting logic essential case study 
maude module declare sorts subsorts specifying sort inclusion operators 
operators declared sorts arguments result syntax user de nable underscores mark argument positions 
operators equational attributes assoc comm stating example operator associative commutative 
attributes maude match terms modulo declared axioms 
logical axioms kinds equations introduced keywords eq ceq conditional equations rewrite rules introduced keywords rl crl 
details maude see 
haskell haskell general purpose functional programming language incorporating innovations programming language design 
include higher order functions lazy evaluation static polymorphic typing user de ned algebraic data types pattern matching modules syntactic constructs list comprehension 
freely available haskell interpreters optimizing compilers 
compiler ghc :10.1.1.47.6555
basin denker relevant language features study lazy evaluation data types list comprehension 
lazy evaluation evaluation strategy ensures expressions expanded demand driven way evaluated necessary provide value top level 
example head function head lists built empty list cons de ned pattern matching head xs evaluating head evaluates far necessary determine outermost constructor cons head tail evaluated 
haskell data types standard algebraic data types declared naming type constructors 
constructors functions components evaluated lazily types called lazy data types emphasize 
example consider model nite set natural numbers nat haskell program de nes nat nite list 
evaluate head list forces computation far produce rst element 
evaluation remainder delayed forced computation 
haskell supports notation specifying possibly nite sets list comprehension analogous set comprehension 
sets haskell represented lists 
example represent set mod haskell equal 
notation represents set list xs predicate holds add element result set 
general generator expressions xs zero predicates 
generator term composite term called pattern matched element xs 
due technical reasons patterns haskell linear means variable occur just 
renaming common variables apart adding predicates equate translating generator selects lists xs elements identical 
see applications shortly 
modeling security protocols motivation background security protocol recipe describes agents principals act achieve goal 
protocols described informal notation example sequence instructions explaining actions taken basin denker agents 
example typical presentation protocol case version public key authentication protocol nspk proposed needham schroeder fa na gk fna nb fnb protocol consists steps agents exchange messages order mutually authenticate 
step states exchanges message messages consist atoms agent names nonces randomly generated strings composed tupling 
messages may encrypted agent key 
rst step sends name nonce na message encrypted public key 
second step sends na back nonce nb encrypted public key 
sending na back authenticates return na assume perfect cryptography knows private key agents guess nonce na sends challenge nonce nb returns third step demonstrating really security protocols small appear intuitive appearance deceptive 
protocol proposed eighteen years went lowe discovered contrary believed nal step authenticate nish run protocol agent claimed rst step 
attack attacker learns nonce believed secret honest parties attack man middle attack steps 
spy fa na spy spy fa na fna nb spy fnb gk spy spy fnb agent role initiates communication malicious party spy sending nonce spy 
spy uses nonce fake message agent role reply includes second nonce ts protocol session agent assumes second nonce came spy acknowledges receipt sending back spy encrypted spy key 
spy learns identity second nonce intended shared se basin denker agents 
violates secrecy property nonce nb spy nonce send nal message protocol run making believe communicates violates authentication property nspk 
kinds errors exceedingly subtle motivate need formal analysis 
asynchronous knowledge model standard way modeling protocol away possible implementation steps model relevant aspects distributed system global state state evolves time 
case global state provides snapshot system point time comprised local states agent current messages network knowledge attacker 
protocol modeled kind computation tree global states root models system starting con guration node successors model di erent ways global state evolve step run protocol interference attacker 
note general tree nite agents may engage arbitrarily runs protocol interleaved runs agents attacker send arbitrarily messages 
model adaptation cil speci cation language developed interface language various protocol analysis tools 
model global state consists cf 
knowledge agent status di erent protocol runs ii messages sent received constitutes asynchronous communication model iii knowledge possible attacker 
modeling asynchronous communication means protocol step decomposed parts sending receiving re ects fact communication real networks atomic sent messages need necessarily received 
agent knowledge models protocol run agent may take part multiple runs protocol playing di erent roles nspk step agent involved role information learned run 
formalize commonly attacker model due dolev yao attacker called spy controls network read intercept messages 
construct messages information extract messages previously sent network extraction assumes perfect cryptography extract encrypted parts messages appropriate keys 
model provides basis formal analysis protocol property precisely property holds global state tree analogously protocol lacks property precisely property fails global state tree 
sections parts basin denker rewriting logic haskell formalizations nspk protocol formalize check attacks 
rewriting logic formalization provide representative parts speci cations 
due space limitations omitted details 
intention give reader feel style speci cations provide basis comparison 
formalizing protocol basic data type cryptographic protocols eld 
application field agent name nonce encrypted message list elds 
interested attacks imperfect cryptography guessing keys nonces abstractions specifying data types 
identify agent name public key assume agent inverse private key compromised 
name nonces integers 
maude speci cation data types involved sorts nonce agent field fields 
subsorts agent nonce subsort field op nil fields op fields fields fields assoc id nil fields op fields op nonce machineint field op crypt agent field agents including spy engage roles 
op alice agent op bob agent op spy agent sort role ops role model protocol state set facts 
fact information local state agent note agent identi ed rst entry eld list agent states sequentially numbered message agents information network basin denker attacker 
sorts facts fact subsort fact op facts op mt op assoc comm id mt op state role machineint fact op msg agent agent fact op net fact model asynchronous communication formalize step nspk rules sending message receiving 
rst step nspk protocol modeled rules rl state fs state fs msg crypt fs fs rl rcvmsg state msg unknown crypt na fs state na fs global system state records agent ready start protocol agent rule re 
result new successor state agent records freshly generated nonce message added fact set 
note variables bound matching successor generated pair agents start protocol 
similarly rcvmsg formalizes unknown agent sent message agent enter protocol role remove message fact set update local state content 
variable fs represents facts fact set 
formalize transitions due attacker 
information extracted messages sent intercepted attacker stored global state data form net list elds model possible attacker actions additional rules intercept messages place net fake new messages rules decompose messages net place parts net compose messages parts rules encrypt messages rules 
give examples faking encrypting messages 
crl fake basin denker net net fs net net msg spy fs true msg spy fs crl fake net fs net msg spy fs true msg spy fs crl encrypt net net fs net crypt net net fs net crypt fs crl encrypt net fs net crypt net fs net crypt fs fake states agent network message message msg spy inserted global state 
condition assures spy send faked messages message new 
note adopted convention message source destination arguments true source intended destination message accessible receiver message 
spy sender rcvmsg sender unknown 
rule fake similar allows matching state fact 
rules encrypt select agent message second rule encrypt add encrypted key global state 
rules formalize global state transitions 
initial state modeled fact set alice start run protocol role spy bob enter run protocol 
names agents net 
eq initial state alice spy state bob net alice net bob net spy model checking aim model checking explore state space possible attacks 
problems state space nite model checking enumerative search constitutes semi decision procedure 
characterizing states represent attacks 
nspk state represents secrecy attack agent sent nonce encrypted agent di erent spy nonce compromised spy net 
op attack facts ceq state na nb net nb fs attack true true basin denker applying rewrite rules maude build parts computation tree rooted initial state 
particular maude interpreter delivers particular branch computation tree determined interpreter default evaluation strategy applying rules 
nd possible attacks need explore possible branches 
proceed employing maude metalevel reasoning capabilities de ne metalevel maude strategy speci es rules applied 
de ne maude module function implements iterative deepening search tree speci ed implicitly initial state rewrite rules object module 
specialize initial protocol state module de ning protocol rules 
doing protocol speci cation term metalevel passed manipulated search strategy 
show part iterative deepening strategy 
state strategy performs rewrite step generates successor state 
step test attack backtrack case branch terminates maximum depth reached 
specify iterative deepening search formalize function arguments module reduction takes place case nspk protocol current search path sequence steps step triple consisting rule label maude internal substitution number new term current depth search tree maximum depths list protocol rule names quoted identi er list 
ceq ids path apath step depth max depth backtrack path apath step depth max ids path path apath step depth max fi backtrack path apath step depth max fi facts theory iterative deepening nd attack practice heuristics needed manageable resources 
heuristics simple ideas 
model contains possible interleavings agent spy actions 
turns considerable redundancy possible ignore certain interleavings removing attacks search space 
give examples heuristics prove attack preserving 
formalize certain action sequences occur block interleaved actions 
example agent basin denker receiving message immediately sends follow message 
formalize predicate part de nition equation de ning rule label 
predicate called order test possible new global state 
eq qi qi true meta apply error qi step term meta apply fi qi fi eq qi rcvmsg qi true false fi second heuristic actions faking composing messages meaningful messages received message right format exists agent system receive message 
ignore faked messages received 
example op fact bool eq msg unknown crypt na state fs true states message agent sends message encrypted key contains agent name nonce format rst message 
similar way specify messages resulting steps protocol messages ignore non messages 
formats messages de ned predicates net facts 
note implemented second heuristic object level opposed metalevel 
de ned predicate object level extended fake encrypt compose protocol rules conditions test predicate incorporated test protocol rules 
mentioned section attack nspk violates secrecy nonce sent agent role attack maude ply search tree sequence rules intercept decompose encrypt fake rcvmsg rcvmsg intercept decompose 
eleven rules correspond actions described lines attack scenario section 
rst rules describe rst line attacker intercepts message sent rules decompose encrypt local actions attacker sends faked message line line basin denker attack description mirrored pairs rules line fake rcvmsg line rcvmsg line intercept 
attacker decomposes information message reveals nonce 
haskell formalization formalizing protocol rewriting logic formalization formalizing data type facts encodes global state 
data agent alice bob spy data role data field agent agent nonce int crypt agent field data fact state role int field msg agent agent field net field type facts set fact lazy data types explicitly formalize nite protocol computation tree 
tree arbitrary branching node contains element type type variable instantiated facts list zero subtrees 
data tree node tree similar maude approach protocol step corresponds functions 
model extension functions type facts facts global state function speci es possible successor states action occurred 
rst step modeled functions 
fs diff msg crypt agent nonce na state agent agent nonce na fs state agent agent state agent agent na fs rcvmsg fs diff state agent nonce na agent fs msg unknown crypt agent nonce na state agent msg unknown crypt agent nonce na state agent basin denker formalization similar maude uses set comprehension associative commutative matching select facts fs 
example select instance state agent agent 
build successor state adding fs facts msg crypt agent nonce na state agent agent nonce na deleting diff state agent agent 
mentioned section equality constraints guards arise due haskell restriction linear patterns 
note matching comprehension iteratively selects facts doing generates list possible extensions 
formalize extension functions attacker model 
functions faking encrypting messages 
fake fs msg spy fs net agent net msg spy notin fs encrypt fs fs crypt net crypt net agent net fake example select fs name agent di erent spy message net insert msg spy global state new 
set comprehension generates list possible extensions extension describes possible fake 
formalize protocol model employ generic function build tree builds possibly nite tree root labeled init successors ply generated function extension 
build tree extension init node init map build tree extension extension init initial state agent alice agent spy state agent bob net agent alice net agent bob net agent spy nspk build tree exts initial initial exts fs foldr res label fs union res rcvmsg rcvmsg rcvmsg rcvmsg rcvmsg rcvmsg fake fake intercept intercept encrypt encrypt compose compose basin denker decompose decompose label fs map fs complete model speci cation build tree formalize model nspk 
extension function iteratively applies foldr rule unions results 
formalization somewhat complicated pairing successor state name rule applied 
mere convenience heuristics introduce 
model checking formalized nite state model lazy tree 
perform model checking lazy state enumeration search state space global states constitute attacks constructing parts model demand 
haskell formulate secrecy attack follows fs elem net nonce nb fs state agent nonce agent nonce nb implemented identical heuristics maude formalization quite di erent 
restrict interleavings attack preserving way generic function takes predicate tree lters nodes subtrees predicate false 
node ts node filter map ts pred nspk decompose elem decompose compose encrypt fake compose elem encrypt fake encrypt elem fake fake elem rcvmsg rcvmsg rcvmsg rcvmsg elem rcvmsg elem true pred node compose encrypt format head true predicate function speci es certain successor states allowed receives followed sends decomposing composing encrypting lead faked basin denker message 
achieve pruning employing heuristic check message built compose encrypt extension fake 
model check optimized search space iterative deepening search ids iterates bounded depth rst search bounds 
ids pred flatten pred node node rest rest rest flatten map result returned ids stream lazy list states pred holds 
pieces hand model check 
command head ids applies iterative deepening search optimized tree head forces computation rst element stream returned result 
ply optimized tree nd attack maude 
comparison qualitative compare maude haskell speci cations respect qualitative criteria separation concerns reusability readability 
criteria chosen re ect languages qualities resulting speci cations 
separation concerns conceptually approach model checking subdivided tasks specifying model formalizing heuristics search 
approaches separate tasks di erently 
haskell lazy data types central problem decomposition 
provide direct formalization protocol model nite tree built functions describe local state transitions 
formalization independent notion heuristics search 
heuristics seen tree transducers transform nite model 
search functions simply generic tree search functions lines specifying ids 
decomposition completely separate tasks 
execution lazy evaluation combines search drives coroutining tree construction heuristics incrementally build explore parts tree contain attacks 
maude speci cation organized bit di erently 
haskell tasks implemented level maude object level metalevel di erent tasks 
local state transitions mod basin denker rewrite rules object level cryptographic data types 
maude support lazy data type de nitions haskell 
locally declare evaluation strategies operators full lazy data types require sophisticated algorithms see section 
metalevel search build computation tree depth stepwise application protocol rewrite rules 
heuristics partly implemented separate metalevel functions called rewriting step order decide valid extension search tree 
partly implemented additional conditions added protocol rules 
haskell separated heuristics protocol model 
experiments suggested approaches incorporating heuristics directly construction protocol model improves model checking performance see quantitative comparison 
reusability observed speci cation conceptually decomposed parts 
carrying decomposition speci cation language reuse parts protocols 
haskell parts correspond functions composed straightforward function composition 
lazy data types play role allowing formalize model independently heuristics search 
function build tree constructs model ids conducts search completely generic 
speci cation protocol steps heuristics course protocol speci standard higher order functions map filter foldr build parts simpler functions 
maude provide lazy data types higher order functions 
alternative parameterized modules re ective programming decompose speci cation 
search strategy instance metalevel speci cation takes module argument reused protocols 
parties fair amount debugging haskell speci cation proved exible 
generic combinators various parts easier adapt adding debugging information changing output parameters 
maude search strategy encompasses lines code change parameters cascade entire speci cation increasing development time extended strategies 
readability languages er di erent possibilities modeling showed comparative advantages di erent parts speci cation 
built ins maude particular support user de ned syntax rewriting modulo lead simpler intuitive encoding protocol rules haskell 
maude associative commutative matching lead simple elegant way expressing global state modi ed removing adding information 
contrast achieved haskell iterated set comprehension amounts technical device simulate pattern matching patterns modulo associativity basin denker commutativity 
haskell formalization complicated technical restrictions concerning linearity variable occurrences 
contrast formalizing heuristics search straightforward haskell 
higher order functions played large role 
standard lazy programming paradigms 
example programming streams successes leads simple formalization search formulate search backtracking enumerating attacks forcing head computation just attack 
specifying just level avoiding metaprogramming things simpler 
quantitative compare quantitatively developments 
provides indication relative ease modeling system performance 
caveat care taken interpreting results 
di erent metrics favor di erent systems metrics re ect part story 
metrics surprisingly dicult measure accurately 
example developments took place approximately week period dicult accurately attribute development time authors experience formalizing protocols respective formalism reuse parts previous developments 
considerable part development spent trying match model closely possible 
simple metrics give problem free 
example number lines uenced layout conventions tradeo development time spent optimizing model clarity speci cation code size execution time 
rst metric code size measured lines speci cation 
total libraries stripped modeling heuristics search maude haskell total measures lines entire speci cation including comments excluding auxiliary libraries measured libraries 
haskell speci cation imports de nitions standard functions map filter elem 
maude import meta level 
stripped size speci cation removing comments 
case haskell removed type annotations serve kind comment types necessary compiler infers automatically 
columns compare size model size heuristics search procedures 
note distributions quite comparable 
haskell code modeling idempotence instances comprehension match term 
result able encode attacker actions rule haskell cases fake encrypt maude formalization required 
basin denker consists rules model speci cation build tree 
maude rules 
rule application takes place search code building computation tree counted 
conclude maude protocol speci cation twice size haskell counterpart 
partially due fact maude currently requires operations variables types de ned 
signi cant di erence concerns object level haskell versus metalevel maude speci cation search 
previously explained development times approaches hard measure 
experience generally takes times longer develop maude code 
particular initial design search strategy adaptations di erent variants strategies time consuming maude haskell 
part write maude code scratch standard routines traversing data structures 
loading time maude nspk speci cation uses mb 
includes mb core maude mb structured version full maude remainder meta representation protocol 
runtime additional mb search 
haskell program quite memory 
haskell compiler produces program compiled gcc 
resulting binary uses mb memory searching attack 
design approaches result search space size 
table shows nodes computation tree ply listed pruning heuristics 
size unoptimized size optimized list execution times measured seconds nth column records time spent searching tree depth nal column time iterative deepening search levels attack depth 
test performed mhz pentium iii workstation mb memory kb cache 
note depths entire tree unsuccessfully searched 
low run time depth due heuristics attack early search 
basin denker haskell unoptimized maude unoptimized haskell optimized haskell optimized maude optimized included sets timings haskell optimized heuristics 
rst heuristics incorporated explained section unoptimized protocol tree rst lazily generated heuristics applied prune subtrees 
results surprised 
unoptimized case haskell signi cantly factor faster holds rst optimized case 
happens depth 
problem turned somewhat subtle 
true lazy evaluation brings generation testing search 
optimized case deeper vast majority generated nodes pruned 
generation testing means rst allocate memory successors look prune 
solve problem modi ed speci cation heuristics incorporated maude test generation extension function rst test composed encrypted faked messages received 
isn generate extension 
kind optimization analogous deforestation transformations reduce execution time functional languages avoiding building intermediate data structures 
applying optimization drastic ect run time displayed second set haskell timings 
compiled haskell signi cantly faster interpreted maude 
shouldn surprising approach advantages disadvantages 
languages designed particular domains mind excel 
protocol analysis serves case study brings number interesting di erences 
example specifying transition systems rewriting logic notion rewriting modulo leads exceedingly perspicuous formulation 
support lacking haskell ended approximating rewriting set comprehension auxiliary functions 
conversely higher order programming lazy data types er ability decompose speci cation ways feasible maude 
formalisms learn counterpart terms extensions language libraries 
simple changes haskell rules readable 
relatively simple matter lift linearity basin denker restriction patterns insisting variables range types belonging equality class 
support maude speci cations protocol rules implemented programming rule compiler take protocol rules maude syntax generate speci cations form 
dicult achieve generality maude making major changes language adding matching modulo equational theories 
maude side comparison shows developments bene library support common data types standard search 
orts currently underway design general purpose search strategies maude applied model checking analysis 
type reconstruction planned maude release ease design orts 
interesting questions concerning easily elegance higher order programming simulated parameterized modules maude 
suggests possibilities direction 
maude supports locally declared lazy evaluation strategies operators 
plan explore feature combination strategies provide equivalent lazy data types 
borovansk kirchner kirchner 
strategies rewriting elan 
gramlich kirchner editors proceedings cade workshop strategies automated deduction australia july 
borovansk kirchner kirchner 
moreau vittek 
elan logical framework computational systems 
meseguer 

automatically detecting vulnerabilities cryptographic protocols 
pages 
com discex 
cafeobj project 
proc 
cafeobj symposium japan 
april 
cervesato lincoln mitchell scedrov 
protocol analysis 
th ieee computer security foundations workshop pages 
ieee computer society press 
clavel dur eker lincoln mart oliet meseguer quesada 
maude speci cation programming rewriting logic 
sri international computer science laboratory menlo park ca january 
maude csl sri com manual 
clavel eker lincoln meseguer 
principles maude 
meseguer pages 
basin denker clavel meseguer 
re ection strategies rewriting logic 
meseguer pages 
denker meseguer talcott 
protocol speci cation analysis maude 
heintze wing editors proc 
workshop formal methods security protocols june indianapolis indiana 
www cs bell labs com nch index html 
denker meseguer talcott 
formal speci cation analysis active networks communication protocols maude experience 
pages 
com discex 
denker millen 
integrated protocol environment 
pages 
com discex 
denker millen grau 
optimizing protocol rewrite rules cil speci cations 
th ieee computer security foundations workshop csfw july cambridge united kingdom pages 
ieee computer society 
dolev yao 
security public key protocols 
ieee transactions information theory 
goguen 
higher order functions considered unnecessary higher order programming 
turner editor research topics functional programming 
addison wesley massachusetts 
jones 
editors 
report programming language haskell 
www haskell org de nition haskell report ps gz 
jones hall hammond partain wadler :10.1.1.47.6555
glasgow haskell compiler technical overview 
proceedings joint framework information technology technical conference pages keele march 
lowe 
breaking fixing needham schroeder public key protocol fdr 
proceedings tacas volume lecture notes computer science pages 
springer verlag 
lowe 
casper compiler analysis security protocols 
journal computer security 
mart oliet meseguer 
rewriting logic logical semantic framework 
meseguer pages 
maude web site 
maude csl sri com 
editors 
proc 
darpa information survivability conference exposition discex january hilton head island sc usa 
ieee computer society press 
com discex 
basin denker meadows 
nrl protocol analyzer overview 
journal logic programming 
meseguer 
conditional rewriting logic uni ed model concurrency 
theoretical comput 
sci 
meseguer editor 
rewriting logic applications international workshop asilomar conference center paci grove ca september 
elsevier science electronic notes theoretical computer science volume www elsevier nl locate entcs volume html 
meseguer 
rewriting logic semantic framework concurrency progress report 
montanari sassone editors proc 
th intern 
conf 
concurrency theory concur pisa august pages 
lncs 
meseguer 
research directions rewriting logic 
berger schwichtenberg editor computational logic nato advanced study institute marktoberdorf germany july august pages 
springer verlag 
millen rue 
protocol independent secrecy 
ieee symposium security privacy 
ieee computer society 
mitchell mitchell stern 
automated analysis cryptographic protocols mur 
ieee symposium security privacy pages 
ieee computer society 
needham schroeder 
encryption authentication large networks computers 
communications acm 
paulson 
inductive approach verifying cryptographic protocols 
journal computer security 
shmatikov stern 
ecient finite state analysis large security protocols 
th ieee computer security foundations workshop massachusetts june pages 
ieee computer society 
song 
athena automatic checker security protocol analysis 
th ieee computer security foundations workshop pages 
ieee computer society 

stehr meseguer 
pure type systems rewriting logic 
proc 
workshop logical frameworks meta languages paris france september 

