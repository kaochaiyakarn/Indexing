fast multiple string pattern matching algorithm sun kim central research development dupont experimental station de sun kim usa dupont com kim department computer information sciences university md edu propose simple efficient multiple string pattern matching algorithm compact encoding scheme 
algorithm scans text left right encoding characters text alphabet occurs input patterns 
simple scanning algorithm demonstrates ability handle large number input patterns simultaneously 
experiments demonstrate algorithm runs faster stateof art multiple pattern matching programs including grep agrep cases 
multiple string pattern matching problem find occurrences multiple input patterns text naive way solve problem scan pattern separately requires scanning times number input patterns 
clearly better solution problem devised 
desirable solutions find pattern occurrences scanning regardless number input patterns 
lot research multiple string pattern matching literature 
state art algorithms quickly find pattern occurrences scanning large number patterns example wu manber algorithm find occurrences input patterns text seconds partially supported university illinois critical research initiatives sun sparc 
due efficiency multiple string pattern matching techniques applications 
wu manber proposed efficient approximate pattern matching software agrep text searching tool glimpse multiple string matching algorithm 
kim proposed fast reliable dna sequence assembly algorithm multiple string pattern matching technique 
propose efficient multiple string pattern matching algorithm compact encoding hashing scheme 
searching pattern occurrences intuitive way compare text characters pattern characters 
known string pattern matching algorithms kmp boyer moore algorithm character comparisons 
techniques finding pattern occurrences called techniques exists 
algorithms category bit operations arithmetic representing patterns text bit strings 
bit representation results comparing pattern text characters simultaneously lead efficient techniques finding multiple patterns simultaneously 
propose multiple string pattern matching algorithm bit representation patterns text compact encoding scheme 
start describing compact encoding scheme 
propose multiple string pattern matching algorithm compact encoding scheme hashing technique section 
experimental results section followed discussion section 
compact encoding patterns text section explain encode patterns text compact way 
advantage compact encoding scheme multiple characters compared simultaneously single bit operation 
start simplest case dna sequences alphabet characters exploiting small alphabet size encode character bits example illustrates dna pattern dna sequence encoded encoding scheme 
example consider dna pattern dna sequence 
encode bit representation 
extend compact encoding scheme general case 
pattern text count number distinct symbols number distinct symbols smallest integer 
encode symbol bits assigning distinct bits character assigning distinct bits character occur occurs example illustrates scheme 
example consider pattern encoding compact encoding 
distinct symbols character encoded bits 
introduce function encode encoding characters encode encode encode encode encode encode encode encode character occur encoded 
space bit representations characters provided readability 
space bit representations characters provided readability 
compact encoding scheme summarized follows 

scan input pattern determine bits needed compact encoding 

define encoding function encode symbol symbol occur 
encode symbol function encode 
new multiple string pattern matching algorithm compact representation patterns text remaining questions store bit representation patterns text registers words find pattern occurrences 
simplicity assume bit representation pattern stored single computer word 
finding occurrences single pattern pattern stored words simply repeatedly shifting logical oring 
example illustrates store variable word size 
example store bit representation pattern encoding initialize variable 
remember character pattern encoded bits see example 

perform logical encode 
shift left bits perform logical encode 
continue step pattern character processed 
word lower bits bit representation input pattern encoding 
scan text bit representation prepare variable exactly thing text character pattern character scanning text character left right 
determine pattern occurrences need mask 
contains lower bit positions pattern length bits bit positions 
example pattern encoding example 
masking non pattern part text word pattern word bit operations determine pattern occurrence 
perform logical 

perform logical xor result step 
test result pattern occurs dose 
example illustrates pattern text series bit operations 
example pattern encoding compact encoding example 
bit representation 
variable scanning text 
case 
time blank character right character text scanned 

xor result pattern occur position 
case 
time character text scanned 
xor pattern occurrence result 
finding occurrences multiple patterns consider multiple input patterns easily extend single pattern search algorithm preparing separate input pattern find occurrences perform pattern testing procedure explained earlier section finding occurrences single pattern input pattern unfortunately take significantly time number input patterns increases 
avoid unnecessarily pattern prepare hashing table size bits distribute input pattern hash table entry corresponds lower bits bit representation pattern 
perform pattern testing hash entry corresponding lower bits text variable empty 
bit length shortest input pattern 
set value depending memory availability 
note larger compact encoding scheme reasonably large value screen unnecessary pattern effectively 
example suppose number bits character 
kb memory hashing affordable 
characters bits bits theta prefiltering unnecessary pattern expect unnecessary pattern avoided 
utilize hashing technique need introduce mask hashing lower bits remaining bits 
text variable perform logical check hash entry corresponding resulting value empty 
empty skip pattern 
pattern patterns hash entry performed 
multiple string pattern matching algorithm summarized 
sample code 
scan input patterns determine number bits character encoding define encoding function encode see section 

encode pattern set associated mask 
set hash mask hash table size 

initialize text scanning variable 
scanning text character shifting bits left perform pattern testing procedure patterns hash entry position computed logically anding hash entry position empty skip pattern testing procedure see section scan text character 
experiments evaluate performance algorithms multi compare algorithms grep agrep sun ultra workstation mhz processor mb memory 
multi hash table size entries 
times reported user times measured unix command time 
performed different kinds experiments different texts text king james bible characters obtained project gutenberg large file dna sequences characters different completed genomes organisms escherichia coli rd obtained genbank experiment english pattern searching prepare set patterns randomly selecting patterns unix dictionary usr dict words measured runtimes grep agrep multi 
actual text inflated concatenating king james bile times text characters 
string matching algorithms fast hard measure runtimes reliably text mb 
result shown table 
ftp cso uiuc edu pub gutenberg ftp ncbi nlm nih gov searching text bits size hash table bits encoding character bit length shortest pattern struct pat struct exp struct pat mask hashing text null candidate candidate candidate candidate candidate candidate candidate encode text partial code multiple string pattern matching algorithm multi patterns mpl grep agrep multi table runtimes english pattern searching seconds 
mpl stands pattern length measure grep cases patterns larger took time 
see multi runs faster agrep cases patterns larger 
result misled algorithms run faster state art algorithms agrep cases speed pattern searching affected structure input patterns text 
factors consider analysis pattern searching speed minimum pattern length algorithms grep agrep text skipping scheme boyer moore shifting scheme multi text skipping scheme scheme 
example agrep takes seconds multi takes seconds case patterns minimum pattern length expect text skipping scheme effective longer patterns 
addition minimum pattern length factors affect pattern searching speed example alphabet size patterns text experience variable input pattern structures report 
experiment dna pattern searching section results experiment dna file 
main difference dna data english data size alphabet dna patterns mpl grep agrep multi table runtimes dna pattern searching seconds 
mpl stands pattern length alphabet size english data alphanumeric characters 
experiment show string matching algorithms behave texts different alphabet size 
randomly generate dna patterns length ranging measured runtimes grep agrep multi 
result shown table 
measure grep cases patterns larger took time 
shown table multi runs faster grep cases 
interesting observation runtimes multi vary respect number input patterns just took seconds patterns took seconds patterns 
interesting observation multi runs faster agrep number input patterns increases 
hashing scheme utilizes small alphabet size automatically compact encoding scheme 
show effectiveness compact encoding hashing scheme searching multiple patterns simultaneously 
discussion proposed new multiple matching algorithm compact encoding hashing scheme 
algorithm demonstrates ability handling large number patterns simultaneously runs faster grep agrep cases 
hashing techniques multiple string matching algorithms handle large number patterns 
example wu manber algorithm uses hash tables shift hash prefix filter unnecessary pattern occurrence 
hashing scheme proposed exploits compact character encoding scheme dynamically adjusts alphabet size achieve better runtime performance 
algorithms rely hashing techniques essential reduce number collisions hash entries speed pattern searching 
thing explored reduce number collisions hash entries different compact encoding scheme characters depending input pattern structure 
call technique adaptive string pattern matching emphasize string matching algorithm adapts input pattern structure optimize performance 
adaptive string matching technique successfully applied various algorithms including new string pattern matching algorithm text reported forthcoming 
aho corasick efficient string matching aid bibliographic search communications acm yates improved string searching software practice experience yates gonnet new approach text searching communications acm boyer moore fast string searching algorithm communications acm walter string matching algorithm fast average proc 
th international colloquium automata languages programming usenet archive comp sources reviewed vol 
manber wu glimpse tool search entire file systems usenix winter technical conference kim new string pattern matching algorithm partitioning hashing efficiently submitted acm journal experimental algorithmics march kim structured pattern matching approach shotgun sequence assembly journal computational biology vol knuth morris pratt fast pattern matching strings siam journal computing karp rabin efficient randomized pattern matching algorithms ibm journal research development wu manber agrep fast approximate pattern matching tool usenix winter technical conference wu manber fast algorithm multi pattern searching technical report computer science department university arizona 
