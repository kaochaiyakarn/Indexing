password authenticated key exchange rsa philip mackenzie patel ram swaminathan bell laboratories lucent technologies lucent com hewlett packard research laboratories godel hpl hp com 
proposals years key exchange protocols 
shown insecure ones proven secure active adversaries may attempt perform line dictionary attacks password diffie hellman problem 
fact protocols diffie hellman proven secure random oracle model 
examine design provably secure password authenticated key exchange protocol rsa 
look oke protected oke protocols rsa show insecure 
show modify oke protocol obtain password authenticated key exchange protocol proven secure random oracle model 
resulting protocol practical fact basic protocol requires amount computation diffie hellman protocols known ssh protocol 
consider scenario alice bob share short secret say digit pin number character password wish identify authenticate insecure network say internet 
carry information 
course wants reveal secret revealed knowledge secret 
fact wants reveal verify secret way function applied secret secret dictionary attack simply iterating relatively small number possible secrets applying way function comparing result transmitted value 
alice bob authenticate 
general alice bob want authenticate set secure channel 
need cryptographically strong shared session key 
variation question alice bob bootstrap short secret secure strong secret 
problem call password authenticated key exchange proposed bellovin merritt bm 
encrypted key exchange eke protocol proposed solution 
problem studied extensively bm gon luc stw wu papers bpr bmp protocols proofs security fact previously proposed protocols shown insecure ble pat 
protocols proven secure diffie hellman 
specifically bpr developed clean elegant protocol eke proved security computational diffie hellman cdh random oracle ideal symmetric encryption function assumptions 
protocol bmp similar proof security decisional diffie hellman ddh random oracle assumption 
overview results study password authenticated key exchange protocols rsa 
look oke open key exchange protected oke protocols luc ones rsa claimed proofs security 
show fact insecure 
show modify oke protocol obtain protocol prove secure 
new protocol requires moves public key operation modular exponentiation side encryption decryption 
efficient practice securing remote user access server roughly efficient diffie hellman protocols ssh protocol require exponentiations side 
scenario useful server store verification information password way function applied password password 
provides resilience server compromise meaning adversary compromises server steals password information able impersonate user adversary performs dictionary attack verification information 
show extend protocol provide resilience server compromise due space limitations omit full proof security extended protocol 
proposals informal settings names secure network authentication password information 
avoid confusion continue names 
security model definitions mean password authenticated key exchange protocol secure 
informally means probability adversary successfully authenticate negligibly adversary runs trivial attack simply iteratively guessing passwords running difficult rough comparisons modulus size exponent size may vary different protocols 
authentication protocol attempting login 
specifically show adversary non negligibly better trivial attack break rsa rsa 
random oracle model br proofs 
protocol having security proof random oracle model certainly desirable protocol having proof standard model standard cryptographic assumptions cgh certainly preferable protocol lacks proof 
techniques proven secure random oracle model include optimal asymmetric encryption padding br pkcs provably secure signatures br 
proofs security model password authenticated key exchange bmp adversary totally controls network la br multi party simulatability paradigm described bea bck sho 
paradigm security defined ideal system describes service key exchange provided real system describes world protocol participants adversaries 
ideal system defined ideal world adversary definition break security 
intuitively proof security show adversary real system done ideal system follow protocol secure real system 
password protocol point oneway authentication protocol halevi krawczyk hk password authentication protocol formally proven secure standard security assumptions 
proof methods significantly influenced techniques 
boy discussed enhancements protocol halevi krawczyk secure multi user scenario 
note basic shared secret authentication protocols br secure parties share short secrets 
similarity basic authentication password authentication difficult get correct protocols published subsequently broken 
precisely reason emphasize provable security 
attack rsa open key exchange protocol interest developing rsa password authenticated key exchange protocols strong luc bellovin merritt described rsa eke protocol bm rsa version encrypted key exchange protocol 
rsa password protocols proven quite tricky 
rsa password authenticated key exchange protocols shown insecure ble pat 
different approach eke protocols luc propose rsa protocol far resisted attacks 
section efficient attack rsa protocol 
sections modify basic protocol luc obtain rsa password authenticated key exchange protocol proven secure 
protocols open key exchange oke protocol protected oke protocol described terms generic encryption functions certain properties 
instantiated rsa oke protocol problem noted allow attacker recover password 
modified basic oke protocol create protocol supposed secure encryption function instantiated rsa 
basic steps rsa versions oke protected oke protocols attack 
details oke protected oke luc 
describe oke step alice bob agree common secret alice advance generates rsa key pair 
step alice chooses random sends bob 
step bob chooses random random computes pi sends alice 
random function range rsa encryption function pi rsa multiplication operation 
step alice computes bob recovers performing rsa decryption pi gamma remaining authentication key generation steps omitted needed attack 
noted problem scheme attacker choose function may invertible uniformly distributed 
information leaked useful ruling candidate values lead propose protected oke changes step step step bob chooses bob chooses values gamma bob uses gamma gamma compute random function mapping value gamma computed pi sent alice values gamma reasoned invertible choices gamma choice gamma choices gamma 
expect choices gamma suitably large values say infeasible adversary evaluate possible information leaked pi adversary 
unfortunately rsa protected oke weakness example attack step attacker picks large prime jn gamma sends bob 
step unwittingly bob calculates jmj gamma sends gamma step uniquely recover values basic results number theory showing recover gamma gamma note efficiently find dth roots djn gamma bs 
decrypt gamma pi gamma solving cubic roots multiply root gamma gamma get possible solutions gamma possible solutions cubic residue 
know apriori correct value gamma cubic residue gamma formed encrypting cubing gamma gamma pi gamma 
possible values identify cubic residue gamma gamma mod continue recover rest values step gamma random values uniquely recovered step 
possible values value possible values gamma possible gamma pairs 
try eliminate candidate passwords list possible password bob 
password guessed correctly gamma pair correct solving pi result cubic residue 
conversely solved cubic residue assuming gamma pair correct know password guess incorrect 
know correct gamma pair pairs possible solutions turn cubic residues eliminate password guess 
happen significant probability eliminate significant portion possible passwords 
probability password gamma pair result non cubic residue equivalent random number non cubic residue probability gamma pairs result non cubic residues 
step repeat procedure step step eliminating constant fraction remaining passwords run password remains 
may tempting propose blocking attack checking primality rejecting session prime 
described example attack prime keep presentation simple done steps composite pq chinese remainder theorem necessary omit details 
attack efficiently discover user password small number sessions 
try reduce probability attack success requiring large factors 
may allow leakage rule attacks 
ad hoc countermeasures satisfactory password protocols avenue information leakage blocked 
details matter 
model proofs model defined bmp extends formal notion security key exchange protocols shoup sho key exchange 
assume adversary totally controls network la br 
briefly model defined ideal key exchange system real system protocol participants adversaries 
ideal system secure definition idea show adversary protocol real system done ideal system follow protocol secure real system 
ideal system assume set honest users indexed 
user may instances 
refers user instance 
user instance told identity partner user supposed connect receive connection 
instance told role session going open connection going connect instance 
adversary may perform certain operations ring master handles operations generating certain random variables enforcing certain global consistency constraints 
operations result record placed transcript 
ring master keeps track session keys fk ij set user instances explained key instance set instance starts session 
addition ring master access random bit string agreed length string revealed adversary 
refer environment 
purpose environment model information shared users higher level protocols 
denote password shared users 
adversary may perform operations initialize user operation new user number new identifier id parameters set password new user number new identifier id password parameters modeling adversary creating account initialize user instance parameters including user instance role user identifier denoting partner wants connect terminate user instance user instance parameter test instance password user instance password guess parameters query asked instance models adversary guessing password attempting authenticate start session user instance parameter modeling user instance successfully connecting partner establishing random session key application function parameter returning function applied environment session keys established modeling leakage session key information real protocol key example encryptions messages implementation comment parameter modeling real world queries needed ideal world 
adversary random variable denoting transcript adversary operations 
detailed description syntax semantics operations see bmp 
real system real system users user instances denoted ideal system 
user instances defined state machines implicit access user id id password user instance access id pid ij 
user instances access private random inputs may randomized 
user instance starts initial state may transform state receives message 
point updates state generates response message reports status continue accept reject meanings continue user instance prepared receive message 
accept user instance say finished generated session key ij reject user instance finished generated session key 
adversary may perform types operations initialize user operation ideal system set password operation ideal system initialize user instance ideal system deliver message input message user instance parameters returning message output receiving random oracle random oracle index input value parameters returning result applying random oracle application ideal system 
adversary realworld denotes transcript adversary operations 
details operations bmp 
definition security definition security sho key exchange 
requires 
completeness real world adversary faithfully delivers messages user instances complimentary roles identities user instances accept 
simulatability efficient real world adversary exists efficient ideal world adversary realworld computationally indistinguishable 
section start presenting definition rsa giving standard accepted version rsa security assumption 
protocols 
give preliminary definitions 
denote security parameters main security parameter thought general security parameter hash functions secret keys say bits thought security parameter rsa discrete log type public keys say bits 
denote set finite binary strings set binary strings length denote concatenation bit strings real valued function ffl negligible exists ffl rsa encryption scheme generally defined follows key generator ge define family rsa functions ge pq prime numbers 
public key pair gcd oe order group oe gamma delta gamma 
encryption function defined mod decryption function mod secret exponent chosen ed mod oe 
choice generally left implementation recommended random large primes bit length security parameter iee efficiency chosen small prime small number ones binary representation 
security explicit requirements generation scope general rsa security recommendations 
specifically require ge chooses random primes range gamma convenience assume multiple 
implies gamma require prime range note guarantees gcd oe 
efficiency protocol standard value security parameter chosen 
eliminate need primality test bob 
alternative requirement prime mod checked probabilistic polynomial time implies gcd oe len 
requirements ge assumption rsa rsa security assumption security parameter 
key generator ge define family rsa functions ge 
probabilistic polynomial time algorithm pr mod ge negligible 
security protocol proven slightly general security assumption 
details omitted 
protocol protocol starts players agree common password identities players playing role alice playing role bob 
point refer alice bob explicitly identities 
assume alice chosen rsa key pair 
general alice key pair sessions perfect forward secrecy alice need choose new pair session 
adv discovers decryption key adv determine session keys obtained sessions key pair 
obviously tradeoffs security versus efficiency performed 
alternatively parties obtain perfect forward secrecy computing session key key exchange dh instance values 
require diffie hellman assumption security rsa assumption 
simplicity assume alice uses encryption decryption pair session adv alice adv different 
define hash functions 
assume independent random functions 
sn fp gamma mod gcd 
protocol shown 
alice bob exchange random values alice gives public key bob 
compute hashes values plus password 
bob encrypts random value multiplies hash sends alice 
alice divide received value hash decrypt result private key obtain value long secret authentication 
idea works bob computes hashes corresponding passwords bob find value encryption times hash equal value sent alice bob private key 
theorem protocol secure password authenticated key exchange protocol rsa assumption random oracle model 
proof appendix 
protocol password authentication weakly resilient server compromise 
generator cyclic group omega size superpolynomial diffie hellman problem hard 
protocol assume naturally proving case difficult 
weakly mean protocol proven secure assuming adversary corrupted server impersonate server real client unable network address spoofing 
alice step choose send bob 
bob step gamma prime reject 
choose 
compute 

sn set set pa mod 
send alice 
alice step gcd reject 
compute 

sn reject set mod send bob 
bob step sn reject send alice set accept 
alice step reject set accept 
fig 

protocol initialization client identity refer bob chooses password computes identity server refer alice sends alice call password verifier 
alice generates rsa key pair 
initialization bob needs remember assume alice chosen rsa key pair 
define hash functions 
assume independent random functions 
sn fp gamma mod gcd 
protocol shown 
alice bob exchange random values alice gives public key bob 
compute hashes values plus password verifier 
bob encrypts random value multiplies hash sends alice 
alice divide received value hash decrypt result private key obtain value long secret authentication 
verify bob knows password just password verifier type exchange 
alice generates diffie hellman values randomly bob uses password verifier discrete log value 
secret diffie hellman value computed parties included authentication value sent bob 
due space restrictions omit discussion security model proof simply state theorem 
bob step send alice 
alice step retrieve password file choose send bob 
bob step gamma prime reject 
set 

choose 
compute 

sn set set pa mod 
send alice 
alice step gcd reject 
compute 

sn reject set mod choose fl 
set fl 
send bob 
bob step sn reject 
send alice 

set accept 
alice step fl reject set accept 
fig 

protocol theorem protocol secure password authentication key exchange protocol weak resilience server compromise random oracle model rsa assumption assuming hardness decision diffie hellman 
daniel bleichenbacher helpful stimulating discussions showing protocol remain secure shorter rsa public exponent alternative requirement section 
victor thorough reading helpful comments 
bck bellare canetti krawczyk 
modular approach design analysis authentication key exchange protocols 
stoc sto pages 
bea donald beaver 
secure multiparty protocols zero knowledge proof systems tolerating faulty minority 
journal cryptology 
ble bleichenbacher 
personal communication 
bm bellovin merritt 
encrypted key exchange password protocols secure dictionary attacks 
proceedings ieee symposium research security privacy pages 
bm bellovin merritt 
encrypted key exchange password protocol secure dictionary attacks password file compromise 
ccs ccs pages 
bmp mackenzie patel 
provably secure password authentication key exchange diffie hellman 
eurocrypt eur 
boy 
public key cryptography password protocols multiuser case 
ccs ccs pages 
bpr bellare pointcheval rogaway 
authenticated key exchange secure dictionary attacks 
eurocrypt eur 
br bellare rogaway 
random oracles practical paradigm designing efficient protocols 
ccs ccs pages 
br bellare rogaway 
entity authentication key distribution 
crypto lncs vol 
pages 
springer verlag august 
br mihir bellare phillip rogaway 
optimal asymmetric encryption 
eurocrypt lncs vol 
pages 
springer verlag may 
br bellare rogaway 
exact security digital signatures sign rsa rabin 
eurocrypt pages 
bs bach 
algorithmic number theory volume efficient algorithms 
mit press cambridge massachusetts 
ccs acm conference computer communications security 
ccs sixth acm conference computer communications security 
cgh canetti goldreich halevi 
random oracle methodology revisited 
stoc sto pages 
dh diffie hellman 
new directions cryptography 
ieee trans 
info 
theory 
eur advances cryptology eurocrypt lncs vol 

springerverlag may 
gong lomas needham saltzer 
protecting poorly chosen secrets guessing attacks 
ieee journal selected areas communications june 
gon gong 
optimal authentication protocols resistant password guessing attacks 
proc 
th ieee computer security foundations workshop pages 
hk halevi krawczyk 
public key cryptography password protocols 
proceedings fifth annual conference computer communications security pages 
iee ieee annex editorial contribution standard specifications public key cryptography june 

integrity sciences web site 
www com 

strong password authenticated key exchange 
acm computer communication review acm sigcomm 

extended password key exchange protocols immune dictionary attack 
workshop enterprise security 
len lenstra 
divisors residue classes 
mathematics computation 
luc stephan 
open key exchange defeat dictionary attacks encrypting public keys 
proc 
workshop security protocols 
mps mackenzie patel swaminathan 
password authenticated key exchange rsa 
full version 
rsa laboratories technical note 
pkcs version rsa encryption standard 
www rsa com pubs pkcs 
pat patel 
number theoretic attacks secure password schemes 
proc 
ieee symposium research security privacy pages 
roe christianson wheeler 
secure sessions weak secrets 
technical report univ cambridge univ hertfordshire 
rsa rivest shamir adleman 
method obtaining digital signature public key cryptosystems 
comm 
acm 
sho shoup 
formal models secure key exchange 
ibm research report rz april 
sto thirtieth acm symposium theory computing may 
stw steiner tsudik waidner 
refinement extension encrypted key exchange 
acm operating system review 
wu wu 
secure remote password protocol 
proc 
internet society network distributed system security symposium pages 
wu wu 
real world analysis kerberos password security 
internet society network distributed system security symposium 
security protocol completeness requirement follows directly inspection 
prove simulatability requirement holds 
basic technique essentially shoup sho 
idea create ideal world adversary running real world adversary simulated real system built top underlying ideal system 
particular simulator combined behave ideal world just behaves real world idealized session keys real world simulation actual session keys computed real system 
proof consists constructing simulator built top ideal system real system transcript adversary attacking simulator computationally indistinguishable transcript adversary attacking real system 
due space restrictions able sketch simulation 
details may full version mps 
difficult part simulation answer queries user instances random oracles consistent ideal world priori knowing passwords 
deal random oracle queries 
note user ids nonces allow simulator know conversations correspond 
simulator answers query encryption known value helps simulation 
query simulator able test corresponds password test encrypting value query query corresponding conversation multiplying encryption result query testing result equals value sent conversation 
query test positive simulator test instance password query ideal world 
naturally show simulator test instance password query adversary actively involved conversation case simulator test instance password query 
sketch proofs 
password tested password tested incorrect simulator simply responds random bit string 
simulator responds bit string consistent previous values protocol 
queries simulator simply responds random bit strings indistinguishable details omitted 
deal user instance queries 
general handled actual protocol value set random encryption multiplied result query password known simulator authentication values generated randomly password test adversary detected random oracle queries 
necessary simulator test instance password query ideal world responds accordingly 
simulator detects matching conversation incoming authentication value sent valid partner nonces simulator accepts authentication value check simulator know password 
prove adversary forces simulator test instance password query matching conversation assume adversary break rsa assumption follows 
take challenge rsa key ciphertext guess user involved offending conversation 
simulator sends challenge rsa key simulating user user instance conversation sends equal random encryption multiplied challenge ciphertext 
random oracle query tests password compute decryption ciphertext fact output oracle value decryption known simulator 
prove adversary forces simulator test instance password queries non matched conversation alice user instance assume adversary break rsa assumption follows 
take challenge rsa key ciphertext guess user involved offending conversation 
simulator sends challenge rsa key simulating user query involving user flips coin decide set output encryption known value encryption known value multiplied challenge ciphertext 
queries queries password tests performed correspond value sent user related equation allows solve decryption challenge ciphertext long exactly query outputs included challenge ciphertext 
happens probability 
