dimension types andrew kennedy university cambridge computer laboratory pembroke street cambridge cb qg united kingdom andrew kennedy cl cam ac uk 
scientists engineers ensure physical equations dimensionally consistent existing programming languages treat numeric values dimensionless 
extends strongly typed programming language notion dimension type 
approach improves previous proposals dimension types may polymorphic 
furthermore expression typable system general type describe algorithm infers type automatically 
algorithm exploits equational unification abelian groups addition ordinary term unification 
implementation type system described extending ml kit compiler 
discuss problem obtaining canonical form principal types sketch powerful systems dependent higher order polymorphic types 
aim strongly typed languages detection common programming errors run time 
types act constraint range allowable expressions happening program run addition integer string 
similar way scientists engineers know equation correct constraints dimensions broken 
add subtract values differing dimension multiplication division values results values dimensions multiplied divided 
sum values dimensions speed time dimension error product dimension distance 
addition dimensions programming language suggested times kl hou man dmm bal 
seriously flawed systems severely restrict kind programs written 
house extension pascal better hou 
monomorphic language allows functions polymorphic dimension arguments 
submission anonymous referee pointed wand keefe dimensional inference style ml type inference wo 
ways similar approach taken comparison system 
appeared european symposium programming lncs volume issues dimension unit representation confusion concepts dimension unit man 
quantities dimension describe kind property length mass force 
quantities different units dimension differ scaling factor 
value measured inches times value measured feet dimension length 
say units commensurate kl dmm 
units simple scaling conversions 
complicated units temperature measured degrees celsius fahrenheit worse amplitude level decibels 
base dimensions defined terms dimensions 
international system units si defines length mass time electric current thermodynamic temperature amount substance luminous intensity 
derived dimensions defined terms existing dimensions example acceleration distance divided time squared 
dimensions conventionally written algebraic form inside square brackets lan example dimensions force written mlt gamma 
similarly base units si base dimensions just listed respective units metres seconds kelvin candela 
examples derived units include inches metres gamma 
issue representation numeric type store numeric value quantity question 
electrical quantities represented complex numbers distance reals common languages provide level precision 
dimensionless quantities common science 
examples include refractive index coefficient angle solid angle 
properly considered dimensionless tempting think 
angle ratio lengths distance arc divided radius solid angle ratio areas surface area sphere divided square radius 
types polymorphism concepts dimension unit representation fit conventional programming language notion type 
expressions strongly typed language typed acceptable compiler 
functional languages example rule function application insists expression type arrow type form argument type similar way mathematical expressions dimensionally consistent 
expressions form gamma sub expressions identical dimension 
product sub expressions may dimension say ffi ffi giving resultant dimension expression ffi ffi appears dimensions treated special kind type programming context 
question representation 
associate particular dimensions fixed numeric types current represented complex number distance real parameterise numeric types dimension give programmer flexibility choosing different representations different quantities dimension 
monomorphic dimension type system limited value 
non trivial programs write general purpose functions range dimensions 
simple squaring function expressed monomorphic system 
modern polymorphic language quantified variables express idea function squares dimension argument dimension 
type inference type systems standard ml designed compiler infer types programmer leaves 
turns possible dimension type system 
desirable property inferred types general type called principal 
valid typing obtained general type simple substitution type variables 
system feature algorithm described finds principal type exists 
idea system described spirit ml mth pau 
polymorphic functions mean variance coded values dimension 
polymorphism implicit dimension variables implicitly quantified way ml type variables 
possible system infer dimension types automatically check types programmer specifies 
described extension ml language ml type system suffice added extension typed language house pascal 
conservative extension ml sense ml typable programs remain typable functions may refined type 
start set base dimensions mass length time represented identifiers conventional 
dimensions written inside square brackets example mlt gamma 
notation confused ml list value shorthand languages haskell denote list type 
polymorphic dimensions need dimension variables 
distinguish ordinary type variables ff fi 
unit dimension dimensionless quantities indicated 
assume kind construct declaring base dimensions 
extended provide derived dimensions discuss possibility 
provision multiple units single dimension easy extension system 
dimension types introduce new numeric types parameterised dimension 
obvious candidates real complex speeds having type lt gamma real electric current current complex 
parameter written left type constructor style standard ml 
remainder consider single type constructor 
type form ffi real ffi dimension expression completely separate type forming expressions may appear parameter numeric types 
arithmetic give type schemes standard arithmetic operations gamma real theta real real real theta real real real theta real gamma real sqrt real real exp ln sin cos tan real real useful coerce integer dimensionless real provide suitable function real int real turns need polymorphic zero zero real examples zero 
polymorphic zero value able test sign number example absolute value function fun abs zero zero type real real 
essential identity addition functions fun sum zero sum xs sum xs type scheme real list real list 
statistical functions 
statistics provides nice set example functions want apply large variety differently dimensioned quantities 
list code mean variance functions fun mean xs sum xs real length xs fun variance xs val real length xs val mean xs sum map fn 
sqr xs real principal types statistical functions mean real list real variance real list real real list real skewness real list real correlation real list real list real differentiation 
write function differentiates function numerically 
accepts function argument returns new function differential provide increment fun diff fn 
real type scheme real 
real real 
real gamma real statistical examples type result related type argument 
root finding 
tiny implementation newton raphson method finding roots equations fun newton eps val dx val dx abs dx eps newton eps accepts function derivative initial guess accuracy eps 
type real real theta real gamma real theta real theta real real powers 
illustrate unusual type function arguments 
fun inferred type scheme real theta real theta real real dimension type system formalise system considering small ml language 
dimension expressions defined ffi ffi delta ffi ffi gamma base dimension dimension variable 
shorthand stand fold product occasionally write delta define monomorphic type expressions ff ffi real ff type variable 
polymorphic type expressions called type schemes defined oe ff oe oe extended usual ml style type schemes quantification dimension variables distinct type variables order distinguish kinds quantification 
flavour polymorphism dimension types ordinary ml polymorphism 
leads usual problems mean inference straightforward 
shall say subject 
expressions defined variable real valued constant 
full set inference rules cardelli car 
new rules required generalisation specialisation dimension quantification 
denotes type assignment obtained removing typing statement var oe oe real real gen oe ff oe ff free spec ff oe oe ff oe oe free oe oe ffi abs fx app oe fx oeg addition rules equations relating dimensions ffi ffi ffi ffi commutativity ffi ffi ffi ffi ffi ffi associativity delta ffi ffi identity ffiffi gamma inverses inference rule relating equivalent types deq lifted types obvious congruence 
observed rules explicitly introduces types involving base dimensions 
assume means declaring constants represent base unit particular base dimension 
length dimension example constant metre type real 
dimensional type inference unification algorithm unify heart type inference algorithms process unification 
equation form wish find general unifier substitution 

unifier substitution ffi equality purely syntactic straightforward algorithm devised robinson 
accepts pair types returns general unifier fails 
unify ff ff identity substitution unify ff unify ff ff fail unifier exists return substitution fff 
unify ffi unify unify extend deal types form ffi real unify dimensions algorithm additional clause simply unify ffi real ffi real ffi ffi dimensional unification algorithm require algorithm accepts dimension expressions ffi ffi returns substitution dimension variables expressions 
ffi ffi 
unifier substitution ffi kind unification called equational contrast ordinary robinson unification syntactic free 
dimension type system want unify respect laws listed earlier associativity commutativity identity inverses 
turns particular brand unification decidable unitary baa nut single general unifier exists 
consequence ml polymorphic types expression typable general type type may derived simple substitution dimension variables 
lankford algorithm abelian group unification 
relies solution linear equations integers exist algorithms including knuth knu 
treatment slightly different consider single equation 
transform equation normalised form delta delta delta delta xm delta delta delta delta delta yn distinct dimension variables base dimensions 
start setting empty substitution 
finished 
fail unifier 
find dimension variable exponent smallest absolute value equation 
negative take reciprocals sides negating exponents 
loss generality assume 
mod mod unifier composed 
gammax delta delta delta gammax delta gammay delta delta delta gammay 
introduce new variable compose substitution 
delta delta delta delta delta delta delta delta transform equation delta delta delta delta delta delta delta delta yn stage variables equation solution unifier exists 
find smallest exponent repeat procedure 
method terminate iteration reduce size smallest nonzero coefficient equation 
inference algorithm infer type inference algorithm ml known places 
version differs respects quantified dimension variables instantiated time quantified type variables variable generalization free dimension variables added usual generalization free type variables expression 
type assignment expression algorithm infer determines pair general type substitution type dimension variables true 
infer dm ff ff ff ff dm ff ff fresh dimension variables ff ff fresh type variables infer ffi ffi ff infer infer unify ff ff fresh type variable infer ff infer fx ffg ff fresh type variable infer ffi infer infer fx dm ff ff dm free dimension variables ff ff free type variables algorithm correctness shown theorems lei dam 
theorem soundness infer 
infer succeeds result derivation theorem syntactic completeness infer 
derivation infer principal typing succeeds result ffi substitution prove theorems devise syntax oriented version inference rules prove equivalent rules 
proofs follow straightforwardly induction structure appear fuller version 
implementation dimension type system described article implemented extension ml kit compiler rot full implementation standard ml defined mth 
order fit naturally rest standard ml concrete syntax dimension types necessarily messy 
dimension variables distinguished ordinary type variables identifiers initial underline character base dimensions ordinary identifiers declared special construct 
introduce constants representing base units dimension specified mentioned section dimension unit kg dimension unit metre dimension unit sec easy extend permit derived dimensions fashion similar ml type definition 
dimension expressions enclosed square brackets conventional 
happens fit nicely notation parameterised types 
unit dimension simply 
exponents written colon area product indicated simple concatenation density 
new type datatype may parameterised dimension type mixture 
assuming built real type define complex datatype complex real real built functions defined prelude new types example val sqrt real 
real val sin real 
real val real real 
real val real real 
real major problem ml overloading functions 
definition standard ml gives types num num 
num arithmetic comparison functions 
type checker surrounding context determine num replaced real int 
want give dimensionally polymorphic types functions 
definition scheme unworkable especially case multiplication 
current implementation alternative names dimensioned versions operations 
problems equivalent types ml type inference determines general type renaming type variables 
example type scheme fffi ff theta fi equivalent fffi fi theta ff 
equivalence easy programmer understand 
dimension types principal types respect equivalence relation obvious way choosing canonical representative equivalence class principal syntax 
type scheme dn equivalent dn substitutions bound variables dn just plus renaming type dimension variables 
example current implementation system described article assigns type scheme correlation example section 
real list gamma real list real equivalent real list real list real substitutions 
forwards 
gamma backwards 
second types obviously natural know formalise notion modify inference algorithm accordingly 
cases appear natural form type 
expressions different representations principal type scheme differentiation function section 
real 
real real 
real gamma real real 
real real 
real real dependent types consider function raising real numbers integral powers fun power power power dimension result depends integer value system give better type dimensionless int real real limited variable exponents fact rarely seen scientific programs dimensionless expressions power series 
dependent type system give informative type function pi int real real functions intuitively static type expressible system inferred 
geometric mean example 
type real list real arithmetic mean mentioned earlier 
unfortunately definition prod dimensionless type fun exp ln fun prod prod xs prod xs fun xs prod xs real length xs polymorphism recursive definitions ml polymorphic occurrences recursively defined function inside body definition 
typical ml programmer problem rarely manifests 
unfortunately serious irritation dimension type system 
fun xs ys ys xs function calculates products corresponding elements pair lists switches arguments recursive call 
naturally difference result commutativity multiplication whilst version exchange type scheme real list theta real list real list version general real list theta real list real list analagous example standard ml useless function shown fun funny funny inferred type ff int ff ff int expected general type fffi int ff fi int 
extensions ml type system permit polymorphic recursion proposed 
shown inference problem system undecidable hen ktu 
lack polymorphic lambda abstraction reduces generality inferred types fun twice fun sqr fun fourth twice sqr type schemes assigned twice ff ff ff 
ff ff sqr real real fourth real real fourth type real real require sqr different instances inside twice real real real real 
serious problem unpredictable long programmer fully understands nature ml style polymorphism 
situation occurs ordinary ml change definition sqr 
time expect fourth type ff ff 
ff theta ff theta ff theta ff expression untypable sqr instances ff ff ff theta ff ff ff theta ff 
ff theta ff theta ff theta ff 
fact write term second order lambda calculus 
requires higher order type system 
system intersection types give twice type ff fi fi fl 
ff fl pass sqr instances 
related house extension pascal wand keefe attempt polymorphic dimension type system extension pascal proposed house hou 
system types procedure declarations may include kind dimension variable example function ratio real real real dim ratio compared modern notions polymorphism strange construct introduces new variable standing dimension dim introduced variables 
contains implicit quantifier 
wand keefe system wand keefe define ml type system extended single numeric type dimension wo 
takes form nn number expressions formed number variables rational constants addition subtraction operations multiplication rational constants 
differs ffi real type ways 
fixed number base dimensions assumed 
dimension types expressed tuple number expressions base dimensions represents dimension 

dimensions rational exponents 
means instance type square root function expressed contrast real real system function may applied value type system disallows application real 
inference algorithm generates equations dimensions 
system dimension constants base dimensions equations necessarily integral gaussian elimination solve 
wand keefe types unnecessarily expressive nonsensical dimensionally 
consider type squares length dimension leaves swaps mass length dimensions 
fortunately expression language assigned types 
non integer exponents necessary polymorphic types expressed values fractional dimension exponents occur science 
propose construct introduces local dimension 
system dimension declaration local context way datatype construct ml 
problem finding canonical expressions types presumably occurs system limitations implicit polymorphism described 
system described provides natural way adding dimensions polymorphically typed programming language 
implemented successfully straightforward add features derived dimensions local dimensions multiple units measure single dimension 
overcome problems discussed section possible system polymorphic dimensions order retain decidability 
alternative studied intersection types 
far formal semantics devised system 
prove result analagous familiar typed programs go wrong theorem ml 
supported financially serc studentship 
alan mycroft francis davey nick benton ian stark discussions subject anonymous referees comments 
baa baader 
unification commutative theories 
journal symbolic computation 
bal baldwin 
implementation physical units 
sigplan notices august 
car cardelli 
basic polymorphic typechecking 
science computer programming 
dam damas 
type assignment programming languages 
phd thesis department computer science university edinburgh 
dmm mohr 
programming pascal physical units 
sigplan notices december 
gehani 
ada derived types units measure 
software practice experience june 
hen henglein 
type inference polymorphic recursion 
acm transactions programming languages systems april 
hou house 
proposal extended form type checking expressions 
computer journal 
kl karr iii 
incorporation units programming languages 
communications acm may 
knu knuth 
art computer programming vol 
pages 
addison wesley 
ktu kfoury tiuryn urzyczyn 
type reconstruction presence polymorphic recursion 
acm transactions programming languages systems april 
lan 
dimensional analysis theory models 
john wiley sons 
lankford butler brady 
abelian group unification algorithms elementary terms 
contemporary mathematics 
lei leivant 
polymorphic type inference 
acm symposium principles programming languages 
man manner 
strong typing physical units 
sigplan notices march 
man 
letter 
sigplan notices march 
mth milner tofte harper 
definition standard ml 
mit press cambridge mass 
nut nutt 
unification monoidal theories 
th international conference automated deduction volume lecture notes computer science pages 
springer verlag july 
pau paulson 
ml working programmer 
cambridge university press 
rot rothwell 
miscellaneous design issues ml kit 
technical report ecs lfcs laboratory foundations computer science university edinburgh 
wo wand keefe 
automatic dimensional inference 

lassez plotkin editors computational logic essays honor alan robinson 
mit press 
