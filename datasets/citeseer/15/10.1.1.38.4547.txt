scalable architecture maintaining referential integrity distributed information systems frank institute information processing computer new media graz university technology graz austria tu graz ac problems experience today widespread internet information systems www gopher lack support maintaining referential integrity 
resource re moved dangling resources may occur 
presents scalable architecture automatic maintenance referential integrity large thousands servers distributed information systems 
central feature proposed architecture flood algorithm scalable robust probabilistic server server protocol efficient distribution update information large collection servers 
flood algorithm implemented hyper system may principle implemented add existing www gopher servers 
key words hypertext link consistency distributed information system internet gopher www hyper scalability flood 
category problem quite familiar net surfers activate link case www berners lee menu item case gopher lindner resource link menu item refers fetched 
may temporary problem network server may indicate resource permanently removed 
systems mentioned rely uniform resource locators urls berners lee accessing information may mean resource moved new location 
may happen resource eventually replaced different name location 
net effect certain percentage invalid 
may expect percentage rise time goes documents outdated eventually removed services shut moved different servers urls get re obviously desirable support automatically removing dangling resource deleted inform maintainers resources 
sake discussion stick hypertext terminology documents links general terms resource 
techniques described relationship object explanation purposes easier speak links documents 
assume maintain link database server keeps track links involving server emanate point document resides server 
storing links outside documents link database done intermedia haan hyper andrews systems give efficient solution dangling link problem see enables advanced user interfaces navigation information space local maps location feedback andrews 
scalability important issue needs addressed dealing distributed algorithms systems protocols scalability 
ideally behavior scalable system depend variables number servers documents links concurrent users system 
internet environment scalability important aspect system design values variables high continuing grow extremely fast 
looking closely issue may distinguish kinds scalability scalable performance performance measured response time perceived user depend number concurrent users documents 
requirement met centralized system implies distributed system users documents evenly distributed number servers connected network 
unfortunately may happen reason large number users access small set documents residing single server 
circumstances distributed system performs centralized system load placed single computer certain part network 
obviously avoid situations replication placing copies scarce resource number servers 
example scalable system relies heavily replication usenet news service kantor lapsley 
read news am connected local news server holds copies news articles posted lately 
accessing certain article need fetched originating site 
response time depend internet users access article time depend number users connected local news server 
searching number documents response time increase number documents searched 
search engines data structures giving logn access performance exists constant time takes search documents smaller delta log intuitively means large increase effect 
contend logarithmic performance acceptable algorithm qualify scalable performance 
scalable traffic replication may require additional traffic sent network 
obviously news article sent news server read locally 
may articles sent local news server read 
care taken total traffic increases linearly number servers 
example solutions server periodically sends state information directly servers scalable requires messages sent number servers time 
scalable robustness robustness mean system rely single server single network connection times assume servers set available time 
multi server transaction services master slave distributed update control systems described section examples scale respect 
scalable management functioning system rely single management entity 
example internet domain name service works management distributed 
current internet growth rate hosts year network wizards day centralized registration infeasible 
requirement suggests configuration reconfiguration server server communication paths automatic opposed managed central service 
related gopher www hyper world wide web berners lee data model documents connected links 
links stored directly inside documents advantage simple server implementation 
hand absence separate link database limits set linkable document types prohibits advanced user interfaces overview maps navigation hard impossible ensure integrity web 
document removed require parsing documents find links pointing document removed owners documents informed 
tool conceivable local server simply impossible scan www documents web servers world aid pre indexed link databases 
consequence referential integrity today world wide web documents stored server 
interestingly primitive gopher lindner system maintain referential integrity local case 
document ordinary file server file system deleted moved modified menu item refers directory entry updated 
automatically taken care underlying operating system try real hard break symbolic links unix 
remote servers remain insecure 
gopher www scale quite respect number servers documents links scalability problem respect number users 
large number users reason decides access document time affected server network region overloaded 
phenomenon jakob nielsen calls flash crowd nielsen science fiction story larry observed winter olympics norwegian provided latest results event photographs web information requests 
similar smaller flash crowds appear new service announced ncsa new page relevant newsgroups 
problem may alleviated cache servers keep local copies information requested give users requesting information local copy fetching originating site 
strategy cases 
users access different documents large data set encyclopedia database 
replication dataset help general require moving urls urns uniform resource names identify document name id location 

information updated frequently 
update protocol required ensures caches updated latest version document delivered 
hyper system full blown database engine employed maintain meta information documents relationships includes restricted links 
links stored database documents modifications documents relationships possible hyper server referential integrity easily maintained local documents 
link database links bidirectional find source destination vice versa 
order keep useful property link spans physical server boundaries servers store link information replicas remote document meta information 
means updates related documents link question performed servers order keep web consistent requiring update protocol servers 
multi server transactions possible solution update problem called multi server transaction collaborating servers 
document server modified deleted server storing document acts coordinator contacts informs servers involved 
servers acknowledged receipt update coordinator tells change permanent 
details necessary sure transaction committed servers case server crash middle transaction general method works implemented number systems knowledge xerox distributed file system israel 
earlier version hyper adopted method 
multi server transaction scalability problems certain situations 
reason servers say decide refer specific document pointing link replicating informed acknowledge update performed 
increases network traffic slows things considerably requires servers involved running transaction completed 
number participating servers increases unreliability internet probability reachable approaches zero 
means practically impossible modify heavily referenced object 
master slave systems master slave system primary server master number secondary servers slaves 
primary server holds master copy replicated object services update requests 
slaves updated receiving notification changes master copies master copy 
clients may read data master slaves write master 
scheme suited applications objects read frequently updates happen infrequently 
sun yellow pages yp service nowadays known nis example master slave system 
central master server easy resolve conflicts update requests maintain consistency 
obvious disadvantage master server running order perform updates 
scheme scales provided way propagating updates master slaves 
distributed update control distributed update control scheme allows server holds copy object perform updates single coordinating server servers unreachable possibility conflicts 
requires server knows servers copies call set servers server set 
perfect world copies identical network failures performance reasons may possible desirable immediately notify servers update 
may adopt looser form consistency weak consistency copies eventually converge value time interval updates stopped 
wants sure read requests todate copies updates performed latest version 
trick ensures majority consensus updates written random majority server set 
read write operation server charge performing request contacts servers server set requests object version number modification time identify current version 
majority answered current version 
common member 
advantage algorithm robustness single point failure works face failure server set 
downside scalability server set object known members server set set contacted write read operation 
set contains say servers get response 
requirement may relaxed read operations willing accept weak consistency 
mandatory write operations ensure conflicting updates occur 
harvest flood harvest bowman new internet resource discovery system supports efficient distributed information gathering architecture 
socalled collect indexing information resource socalled brokers provide indexed query interface gathered information 
brokers retrieve information brokers incrementally update indexes 
idea located close resources index brokers located close users 
harvest heavily relies replication achieve performance 
indexes created periodically replicated brokers 
indexes tend large done efficiently 
harvest uses technique called flooding purpose 
having gatherer send indexes brokers sent 
responsibility chosen nodes distribute indexes 
course total number indexes transferred remains flooding nice property distributing network server load network 
flood algorithm harvest called flood danzig 
tries minimize network cost propagation time flood computing cheap connected logical update topology bandwidth measurements underlying physical network 
important requirement topology need manual configuration example network news kantor lapsley shall computed updated automatically 
finding approximation optimal topology computationally expensive finding optimum npcomplete especially replication group large 
danzig suggests hierarchical scheme smaller replication groups 
left open hierarchy updated automatically 
architecture referential integrity assume maintain link database server keeps track links local server go server emanate point document residing server 
maintaining referential integrity relatively easy case local links 
concentrate issue maintaining integrity case links span server boundaries 
surface document surface link core document core link partitioning web servers see text illustrates situation 
hyperweb partitioned server boundaries servers labeled 
links span server boundaries shown thicker edges 
call links surface links documents connected servers links shall called surface documents called core links core documents respectively apparent server surface typically small compared core 
order keep useful property bidirectional links link information surface links stored affected servers 
increased performance servers keep replicas surface document metainformation 
server stores document plus replica document meta info link server stores document plus replicas documents meta info links 
setup documents different servers interconnected tightly documents single server 
bidirectional links enable advanced navigation techniques link map shown computed shown user simplifies maintenance hyperweb choose remove document system inform affect document server document server server 
may information manually modify affected documents links system ensure automatically links removed 
problem remains inform servers document removed 
mentioned earlier implementation hyper knowledge documents affected directly engage servers multi server transaction remove document links 
discussed earlier approach problems servers participate transaction links point document 
decided adopt weak consistency approach accept hyperweb may inconsistent certain period time guaranteed converge consistent state eventually 
course keep duration inconsistency short possible 
master slave model updates may take place defined server 
master slave model server operations depends document link modified removed inserted documents server holds document links server holds document link emanates example server responsible updates document link updated server 
reduces problem overload master eliminating problem conflicting updates handled 
disadvantage remains master server available update time 
security reasons users wishing update document write permission document checked server holds document fact inevitable live anyway 
updates core documents core links require action integrity maintained local link database 
servers need notified updates happening server surface updates surface documents surface links 
chose flood algorithm similar employed harvest propagate updates master slaves servers scalability traffic generated depend number object question require recipients available update time purposes distributing server addresses statistics maintaining consistency replicas caches 
flood algorithm flood algorithm described danzig optimized minimizing cost flood 
sense designed applications need flood large amounts data 
application sending update notifications sends small messages document removed encoded bytes somewhat different requirements speed messages propagate fast order minimize duration inconsistencies 
robustness protocol guarantee eventual delivery message server servers 
server unavailable comes receive messages missed 
scalability time takes inform servers depend heavily number servers 
likewise amount traffic generated depend heavily number servers 
course message sent server lower bound total traffic generated 
automatic want configure flood paths manually news service 
priority intend protocol purposes nice priority parameter attached message determines acceptable propagation delay bandwidth consumption 
step flood algorithm flood algorithm probabilistic algorithm fulfills requirements 
illustrates behavior 
servers arranged circle example sorting internet address see section discussion done better way 
server knows servers updates server list course transported algorithm 
servers accumulate update messages generated server result modification surface document surface link received servers update list 
minutes update list sent servers 
call time period step algorithm 
updates sent immediate successor sent gamma servers chosen random 
fractional sent servers probability gamma 
example means message sent successor probability random server means sent successor random servers plus random server probability 
shows step flood algorithm 
note step operations described performed servers parallel step time period server performs step clocks servers synchronized 
may observe step delta update lists sent number servers 
higher value shorter time takes reach servers higher amount traffic generated happens message received servers 
algorithm principle allows assignment different values individual messages may call priority message 
message successfully transmitted server immediate successor removed sending server update list sent server steps 
messages time stamped server sequence number duplicates discarded messages processed correct order receiver 
ensures messages removed received servers keeps update lists relatively short 
happens server unreachable 
message discarded update list successfully sent successor assume reliable transport protocol tcp receipt acknowledged message effectively wait successor comes 
immediately accumulated update messages sent 
way server responsible delivering messages successor 
penalty server long period time predecessor update list grows 
setting priority send messages successor effectively block update messages case unreachable server feasible 
higher values speeds propagation messages significantly contributes robustness algorithm 
example crash server inhibit update messages server propagated servers 
extensions flood necessary real 
described section order burden reader additional complexity point 
simulation results section presents data gathered running extensive simulations flood 
concentrate perfect world simulations servers reachable look effect network server faults 
behavior flood perfect world set experiments want find weak exactly weak consistency long takes arrive consistent state updates stopped time depends number servers priority factor traffic generated time 
propagation delay average update list size time steps network traffic performance flood different values gives feeling flood performs 
assumed update messages generated different servers simulation starts watch propagation servers particular long takes arrive 
turns matter updates single server distributed randomly servers random placements gives smoother curves chosen method producing graphs 
top graph shows update information propagated servers different values higher value gives faster propagation servers reached steps steps typically updated steps 
price faster propagation higher load servers networks middle graph shows average size update list held server bottom graph shows traffic messages sent step 
message sent server algorithm delivers message server need transmit delta messages call number optimum traffic 
perfect world conditions total traffic sent flood delta delta messages delta optimum 
point flood algorithm distributes traffic nicely time network opposed trivial solution server simply sends updates servers requires optimum messages sent 
lower value network friendly update 
clearly tradeoff fast propagation peak network load 
suggests setting 
number servers updated updated time update servers demonstrates remarkable scalability flood respect number servers 
time reach servers plotted number servers 
logarithmic performance flood clearly visible meaning flood suited context large server groups 
plots propagation delay reaching servers versus priority constant number servers 
ran experiments surprised see messages traveled twice fast expected 
example takes steps reach servers takes steps reach servers turns happens clocks servers determine step time synchronized 
server timer expires server sends update list server server timer general expire full step time random time interval step time 
average expire half step time explains observed effect 
simulation behavior parallel server processes modeled single computer step individual servers performed update operations 
implemented serialization lead wrong results example processing servers order propagate updates servers single step 
reality modeled closely processing servers order randomly chosen permutation servers time update servers course integral value subject great deal randomness 
value interpolated affected randomness decided value get smoother curves graphs 
value steps higher 
priority time update servers mimicking random expiration server timers 
messages travel slightly slower reality especially step time large compared average transmission time updates lists 
network server failure major requirements flood algorithm robustness respect network server failures take close look issue 
distinction soft transient errors hard persistent errors 
soft errors temporary network errors due routing problems network overload 
type errors occur frequently internet usually short period time 
hard errors longer result hardware failure fortunately happen frequently 
shows effect soft errors propagation delay traffic generated 
propagation delay time reach servers increases slowly increased soft error rate 
soft error rate means step update propagations fail servers unreachable chosen randomly 
step random set fail sets identical 
bottom graph shows traffic increases increased soft error rate 
set messages sent increases number acknowledged messages sent successfully remains constant 
propagation delay updated updated soft error rate network traffic messages sent messages sent acknowledged effect soft errors propagation delay traffic flood detects duplicate messages messages arrive order principle unreliable protocol udp transmit messages acknowledgments 
udp subject soft errors packets dropped 
tcp transport protocol repairs large number soft errors 
server temporarily unreachable usually detected opening connection messages sent case 
means tcp messages sent graph significant number messages sent constant respect soft errors 
mtbf mttr time mtbf mttr hard errors usually described variables mean time failure mtbf mean time repair mttr 
uptime fraction time server defined uptime mtbf mtbf mttr simulations measure mtbf mttr units steps 
mttr soft transient errors larger values mttr mean server longer time 
expected server uptime bad value means server unreachable hours day 
mttr mtbf mttr servers marked time remain chosen randomly mttr 
assigned time remain mtbf 
assumed servers carry update messages accumulated went servers unreachable outside running 
simulation servers come remain mtbf steps go remain mttr steps 
propagation delay updated updated mean time repair steps network traffic messages sent messages sent acknowledged effect hard errors uptime uptime constantly mttr varies 
top graph shows effect propagation delay 
probabilistic nature flood effect remaining servers time reach servers remains constant 
course impact time reach servers available grows linearly mttr 
number messages sent grows linearly 
time number messages sent acknowledged ones sent tcp increases slowly 
takes closer look effect hard errors performance flood 
order effects clearly visible servers held unreachable step come simultaneously 
graphs divided phases phase step updates propagate usual slightly slower curve level messages processed average update list size time steps network traffic messages sent messages sent acknowledged servers step approximately updates processed updates processed servers remember unreachable servers generated updates 
second phase steps system stable state 
state may long time servers come experiment step worth analyzing happens exactly phase 
may observe set servers partitioned disjoint groups 

call fraction servers number servers group delta example delta 

predecessors servers 
predecessor may probability case belongs previous group number members group gamma delta example 

predecessors unavailable server 
number servers gamma delta example 
members group able flush update list phase update list size phase zero 
members group keep messages destined group members 
number messages gamma delta server 
unavailable servers carry messages 
average update list size plotted middle graph phase gamma delta delta gamma delta delta delta delta gamma members group constantly try send messages successors group members random servers 
group server sends messages step random nodes succeed probability gamma plus message step successor guaranteed fail 
members group send 
total number messages sent step phase calculated delta gamma delta delta gamma delta example delta delta 
gamma successful example third 
calculation corresponds nicely simulated results shown bottom graph 
number messages sent acknowledged insignificant tcp transport protocol fact server discovered attempting open connection sent open fails 
third phase unavailable servers come step members group immediately succeed propagating update lists successors causes dramatic effects shown shown step 
takes steps propagate updates kept unavailable servers servers 
traffic estimates try estimate additional amount network traffic caused applying described architecture distributed information system 
order assume values variables servers 
surface objects documents links server assume total surface objects 
note number core objects higher irrelevant 
surface objects updated day total updates messages propagated day 
updates core objects irrelevant 
note traffic generated dependent number servers documents depend number users system 
total number messages sent day optimum delta messages message shall delivered server 
message bytes long say 
generate network wide traffic theta bytes mb day gb month 
hand nsfnet currently nov transmits gb month merit network information center 
assume non local internet traffic pass nsfnet traffic gb month means update messages information system cause additional network traffic words effect negligible 
update message propagated server nature flood compared usenet news service 
messages smaller news articles 
numbers perfect world performance 
consult figures see effect soft hard errors network traffic 
extensions flood description flood section bit simplistic purpose understanding results 
details addressed implementing flood arranging servers potential weakness flood random usage logical internet connections knowledge underlying physical network 
preference fast links slow ones flood 
hand random selection flood paths propagates updates faster cost selection danzig tends links 
flood chooses propagation paths non probabilistic immediate successor probabilistic servers ways 
amount randomness controlled parameter 
reasonable values see simulations section traffic runs static circle servers see clever arrangement servers circle vastly reduce network cost delay giving away advantages fast propagation robustness random choice flood paths 
computing optimal circle actual bandwidth measurements difficult require gathering fully connected matrix bandwidth servers 
furthermore measurements repeated quite frequently global network utilization changes time day 
hand configuring considered option 
choose pragmatic heuristic approach servers sorted reversed fully qualified domain name 
server successor server gamma server successor 
sorting reverse domain name character results servers example belgium domain neighbors circle followed servers germany domain de forth 
germany servers located berlin neighbors domain berlin de 
cases local connectivity cheaper faster international connections simple trick result better available bandwidth computations sorting measurements necessary 
adding removing servers server added removed server list flood high priority notify servers 
servers modify server list accordingly sort order described section 
unfortunately host names domains edu com gov mil net general give hints host geographical location exception new domain 
propagation server list updates addition removal servers moving server different host important server uses old server list flooding message acknowledged successor 
simple modifications server attributes description internet address email administrator require precautions 
recovery catastrophic events operating large number servers may happen hopefully catastrophic events occur result loss information example head crash server disk 
cases operation needs resumed backup copy information base 
backup copy days old restarted server lost updates days 
inevitable 
servers may obsolete picture server surface 
example somebody may days ago created new document server link pointing document server 
document disappeared course link destroyed order keep consistent state 
words servers roll back situation days ago 
situation server may flood special message contains surface documents links requesting servers check picture view server adjust information server accordingly 
repairing inconsistencies certain conditions inconsistency hyperweb may occur 
example assume link document server document server document server previously surface 
time update message reflecting operation arrives server server deletes document links going point 
surface need inform servers deletion server notified keep link 
server detect inconsistency update message server eventually arrives requests creation link non existing object 
may flood document removed message non existing object surface 
alternatively may choose live rare inconsistencies servers periodically flood surface catastrophic event section 
serve fall back mechanism deals kinds inconsistencies errors including hardware software errors update server 
messages may long sent infrequently low priority 
exact time priority determined feeling problems occur 
summary presents scalable guaranteeing referential consistency large distributed information systems example distributed hypermedia systems gopher www hyper 
server objects documents links divided surface core objects 
assume servers able maintain referential integrity core objects hyper server surface objects need treated specially modified 
fast robust flood algorithm flood specified propagate messages containing update information surface objects servers 
extensive simulations flood show protocol scalable fast cope spurious errors persistent failure servers networks 
traffic generated compared total internet traffic 
architecture described flood implemented hyper system principle applied kind distributed information system 
andrews andrews hyperspace snapshot hyper harmony client 

editors proc 
eurographics symposium multimedia hypermedia open distributed environments graz austria 
springer 
andrews andrews maurer hyper generation network information technology 
information processing management 
special issue selected proceedings workshop distributed multimedia systems graz austria nov 
berners lee berners lee uniform resource locators 
available www url info cern ch hypertext www addressing url overview html 
berners lee berners lee cailliau luotonen nielsen secret world wide web 
communications acm 
bowman bowman danzig hardy manber schwartz harvest scalable customizable discovery access system 
technical report cu cs department computer science university colorado boulder 
available anonymous ftp ftp cs colorado edu pub cs techreports schwartz harvest ps 
distributed systems concepts design 
addison wesley 
danzig danzig obraczka massively replicating services autonomously managed wide area internetworks 
technical report computer science department university southern california 
available anonymous ftp usc edu pub ton ps haan haan kahn riley coombs meyrowitz iris hypermedia services 
communications acm 
israel israel mitchell sturgis separating data function distributed file system 

editor operating systems theory practice 
north holland amsterdam 
kantor lapsley kantor lapsley network news transfer protocol proposed standard stream transmission news 
internet rfc 
available anonymous ftp nic ddn mil file rfc rfc txt 
hyper distributed hypermedia system 

editor proc 
inet san francisco california 
internet society dcc dcc 
andrews pichler hyper new tool distributed hypermedia 
iig report iig graz university technology graz austria 
available anonymous ftp tu graz ac directory pub doc 
schnabel architecture massively distributed hypermedia system 
internet research electronic networking applications policy 
lindner lindner internet gopher user guide 
university minnesota 
available anonymous ftp micro umn edu file pub gopher docs jan ps 
merit network information center merit network information center nsfnet backbone statistics 
date figures available anonymous ftp nic merit edu nsfnet statistics 
network wizards network wizards internet domain survey 
date figures available www url www nw com zone www top html 
nielsen nielsen multimedia hypertext 
appear 
article processed macro package style 
