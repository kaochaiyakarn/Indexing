logical view composition refinement mart abadi gordon plotkin define logics safety specifications reactive systems 
logics provide setting study composition refinement rules framework modular specification methods rules underpin 
logics arise naturally extant specification approaches logics intuitionistic linear 
modular hierarchical methods specifying reactive systems hp include rules composing refining specifications 
form rules suggests possible specification logic 
propositions system specifications notations combining specifications logical connectives rules composition refinement formulated sound inference rules 
logic provide setting study composition refinement rules 
provide framework developing specifications verifying rules 
define develop logic 
fact logics arise naturally 
logics intuitionistic logic linear gir 
intuitionistic logic specification set allowed behaviors lam bkp 
digital equipment systems research center lytton avenue palo alto california usa 
dept computer science university edinburgh king buildings edinburgh eh jz uk 
completed digital equipment 
linear logic specification set allowed processes sense abrahamson abr 
composition rules refinement rules typically apply safety properties significant complication certain liveness properties 
treat safety properties 
restriction logics provide new understanding current specification methods suggest extensions 
intended basis lamport transition axiom method reactive systems lam 
reactive system expected operate correctly environment operates correctly 
example concurrent program module expected exhibit desirable behavior inputs proper types 
environment required operate correctly system obligations void environment operates incorrectly 
assumption guarantee specification states reactive system satisfies specification operates environment satisfies assumption specification written composition principle gives way combining assumption guarantee specifications discharging assumptions mc pnu sta 
simple version principle applied reactive systems says satisfies satisfies run parallel satisfies satisfies stated composition principle sound general 
underlying propositional reasoning obviously circular 
principle sound safety properties additional hypotheses 
instance consider processes page communicate distributed integer variables assumed writes writes decreases corresponding assertion suppose satisfy respectively 
sound conclude hold decreases 
important test logic specifications express illuminate composition principle 
logics designed satisfy criterion 
example intuitionistic formulation principle just proviso guarantee specifications separate processes 
logics express variants composition principle serve comparing variants occasionally discovering new ones 
internal hidden variables writing specifications easier 
specification buffer instance may convenient mention sequence elements buffer contains directly observable 
unfortunately hidden variables complicate proof specification implements weaker specification 
various refinement rules proposed proofs instantiating internal variables 
logically hiding represented existential quantification lam 
order prove implements gives instantiation variable proves implements instantiation 
function known refinement mapping 
specifications special forms basic refinement mappings complemented history variables generalized multivalued mappings lt mer 
logics hiding exactly existential quantification simple refinement mapping rule follows easily usual logical laws quantifiers 
reads consider safety properties closed sets obtain intuitionistic logic 
follow hennessy plotkin hp directly abramsky proposal general logic open sets abr 
parallel composition represented conjunction works lamport pnueli 
dam dam abramsky vic pointed general parallelism give extra structure 
happens take specifications sets processes logic specifications linear 
may yield evidence relevance linear logic concurrency 
evidence petri nets mom testing equivalence av 
introduce logics overview 
sections give formal definitions develop material 
usual intuitionistic linear logics need enriched order support assumption guarantee specification style 
need enriched example prefixing fixpoint operators order obtain basis complete specification language 
specification formalism considered section 
section compares logics 
overview review basic propositional intuitionistic linear calculi 
describe usual connectives motivate addition new constructs 
logic fragments covered needed study composition rules 
calculus sets behaviors intuitionistic logic inspired lamport pnueli specification system set allowed behaviors 
turn behavior sequence states state assignment values state components variables 
state transition attributed agent environment process system process caused state change 
behavior sequence gamma 
gamma 
gamma 
state agent sequence infinite ends state 
agents motivated obvious need distinguish actions performed environment performed system 
particular specification suffices consider agents environment system 
preferable allow arbitrary sets agents order ease composition specifications 
concerned safety properties restrict attention finite behaviors 
safety property prefix closed set behaviors 
logic propositions denote safety properties simply stands 
collection safety properties forms complete heyting algebra joh page intuitionistic logical operations available 
intersection union 
conjunction serves usual logical role process satisfies mm satisfies conjunction represents parallel composition satisfies satisfies parallel satisfy disjunction corresponds nondeterministic choice satisfies satisfies processes acts satisfies implication turns familiar handy operation set behaviors satisfy long satisfy connective arisen works composition principle implicitly mc pnu :10.1.1.33.1637
reasonable hypotheses specifications implementations replaced 
encouraging logical formulation naturally yields connective 
specification system require environment properly environment action allowed 
precisely property intended specify process represented agent set agents behavior state change 
condition holds say constrains write notation composition principle reads provided sets disjoint proviso expresses requirement describe different processes 
principle sound example 
note logical approach obviates need explicit processes mc pnu realizable parts properties :10.1.1.33.1637
variants composition principle treated framework example easily obtain disjoint 
variants known new 
proved equivalent propositional reasoning rules constrains relation 
calculus sets processes linear calculus proposition denotes set processes 
take process set sequences state pairs 
intuitively process contains 
change state 
study safety suffices consider finite sequences state pairs 
require processes prefix closed 
turns set safety properties isomorphic set processes may identify safety properties processes 
logical operations meaningful 
arise complete heyting algebra structure partial order safety properties 
property allows processes allowed conjunction particular relation concurrency 
disjunction corresponds nondeterministic choice 
includes processes behave process long behave process intuitionistic linear logic arises consider parallel composition processes 
parallel composition set shuffles sequences sequences 
level specifications gives rise new logical operation omega multiplicative conjunction linear logic 
process satisfies omega parallel composition process process 
satisfies satisfies parallel composition satisfies omega associated connective omega linear implication operation gammaffi 
property gammaffi largest omega subset gammaffi parallel composition satisfies conjunction disjunction additive connectives linear logic 
exponential trivial construct added represent parallel composition number processes 
subsection propose interpretation classical constructs 
standard intuitionistic linear connectives suffice basis assumption guarantee specifications 
particular gammaffi equivalent desired satisfies environment satisfies 
assertion gammaffi means composition process process 
possible environment third process running parallel possible satisfy page environment parallel composition 
remedy deficiency introduce connective gamma pi 
property gamma pi consists processes run parallel process behave processes 
special case gamma pi contains null process particular interest gamma pi set processes behave process run interference environment 
denote property pi composition principle goes gamma pi omega gamma pi omega pi formula valid model additional proviso 
intuitionistic case number variants composition principle available example general omega omega gamma pi omega gamma pi gamma pi omega testing linear logic described far intuitionistic 
include constant resembles falsehood negation involution notion testing suggests useful constructs gives rise different account specifications 
view environment process tester process 
distinguish state fail represent result failed tests 
process passes test yield state fail run parallel fails 
process succeeds yield fail runs isolation 
passes test parallel composition succeeds 
success safety property write set processes succeed 
sort negation defined set processes fail processes 
naturally particularly interested propositions called facts 
specifications sound complete testers characterized explicitly simple set closure conditions 
certain expressions classical linear logic reminiscent assumption guarantee specifications 
particular set processes pass tests processes pass provided tests words includes processes distinguished processes environments tests 
analogous assumption guarantee specification obvious analogues composition principle hold 
small correction solves problem 
fu fail processes behave processes may fail point 
facts gamma pi expected composition principle follows 
intuitionistic logic model underlies intuitionistic logic small variant refer reader previous works additional motivation :10.1.1.33.1637
assume nonempty set states nonempty set agents sets disjoint 
behavior finite sequence gamma 
gamma 
gamma 
gamma gamma 
state agent 
state hsi denotes sequence sole element 
oe sequence agent state oe delta denotes concatenation oe 
set behaviors denoted safety property set behaviors closed prefixes 
set safety properties denoted safety properties defined isomorphic safety properties example caveat treated invariance stuttering :10.1.1.33.1637
quite natural desirable add straightforward condition invariance stuttering definitions advocated lamport lam 
simplicity point 
length joej behavior oe number agents occur oe 
joej oej prefix oe length joej oej oe 
proposition complete heyting algebra associated foe oej oej algebra safety properties model intuitionistic logic 
subsections discuss composition refinement intuitionistic setting 
page composition say safety property constrains set agents write hsi ii oe oe delta note smallest superset constrains definition constrains form monotone closure condition guarantees exists 
fact behavior behavior extended arbitrary steps simply behavior consists exclusively steps 
machinery formulating composition principle 
example briefly study variants 
variants possible 
particular take initial conditions account initial conditions useful pose major problem calculus 
basic law call composition principle applies single specification 
soundness law proved induction length behaviors 
clearly hsi induction hypothesis assume oe oe suppose oe delta order prove oe delta safety property oe induction hypothesis yields oe case follows oe delta oe delta implies oe delta case obtain oe delta apparently general law applies specifications sets disjoint 
yields special case letting observing somewhat surprisingly converse holds derived 
suppose disjoint assume 
propositional reasoning follows follows assumption 
proof exactly analogous 
logical style proof pleasant 
helped deriving variants composition principle safety properties simplest 
refinement discuss refinement need choice set states 
var countably infinite set variables set values var functions var states write different relation extended behaviors requiring behaviors length corresponding states relation safety property invariant oe oe existential quantification invariant safety property containing clearly invariant converse rule sound 
specification logic invariance hypothesis signalled syntactically free variable proviso 
converse yields need substitution order derive refinement rule 
function states states extend behaviors evident way oe delta oe delta 
gamma substitution safety property defined gamma equals 
gamma monotone get particular safety properties invariant unchanged substitution apply get combining obtain refinement rule evident generalization multiple quantifications 
page refinement principles literature deal properties special forms 
example lam properties initial condition state relation progress property relates liveness 
intention principles derived treatment existential quantification plus considerations relating definition prefixing construction recursion treated 
refinement functions general holds may suitable exists 
various known remedies incompleteness rely auxiliary variables multivalued mappings combination 
logical setting auxiliary variables introduced help general forms semantic substitution 
certain forward substitution enables history variables backward substitution enables variables 
complications arise standard kind substitution dealt new substitutions approximated syntax specification logic section 
practical applications take account stuttering closure conditions suggested classical linear logic section 
intend treat issues detail full version 
intuitionistic linear logic section develop intuitionistic linear logic proposed overview 
study classical linear logic postponed section 
assume set states notion agent calculus 
transition pair states 
process prefix closed set sequences transitions 
note empty sequence ffl allowed 
set processes denoted set processes left closed exists safety property set processes left closed closed arbitrary unions 
set safety properties denoted safety property largest process fact proposition function maps safety specification largest element isomorphism partial orders 
define operations complete heyting algebra operations intersection union associated fu uj uj prefix uj defined usual sequences 
empty set falsehood written 
processes parallel composition jj jj language shuffle operator 
processes specifications identified parallel composition specifications defined shuffle omega jj proposition omega commutative quantale ffflg 
associated implication gammaffi fu fug jj follows immediately algebra safety specifications provides model intuitionistic linear logic 
parallel composition multiplicative conjunction operation additives 
exponential treated interesting 
operation available defined fold parallel composition represents arbitrary number processes running parallel 
started consider existential quantifiers refinement linear logic pose new problems 
omit discussion 
composition transition sequence chained form 
gamma gamma gamma sequences ffl chained 
intuitively chained transition sequences correspond runs system interference environment 
write say runs chained shuffle 
assumption guarantee specifications possible new connective gamma pi 
set fu vg gamma pi definition says prefix sequence gamma pi chained shuffle sequence sequences gamma pi page distinguished sequences environment 
various formulations composition principle available 
powerful ones considered omega gamma pi omega gamma pi gamma pi omega gamma pi gamma pi omega variant applies composition arbitrary number processes depend environment omega gamma pi gamma pi intuitionistic calculus composition principle extended handle initial conditions 
extension elegant intuitionistic calculus requires generalization gamma pi connective 
classical linear logic notion testing linear logic specifications goes intuitionistic classical 
notion testing adopt internal distinguished state fail represents result failed tests 
fail represents fatal failure restrict attention transition sequences contain fail possibly state 
particular shuffle operation redefined respect restriction shuffle sequences fail example drop shuffle fail say fail shuffle fail 
simplicity assume fixed initial state start fail require chained transition sequences start start chained transition sequence succeeds fail fails 
process succeeds chained transition sequences succeed 
set processes succeed left closed closed arbitrary unions safety property denote safety property 
process passes test jj succeeds 
note passes passes formal distinction tester 
abramsky suggested related opposite definitions ccs framework vic 
proposed set processes fail 
choice processes fail appropriate calculus safety properties model abramsky left closed 
negation connective defined 
arbitrary set processes standard definition gives fp jj words largest hardest set tests processes pass equals gammaffi 
clearly safety property 
safety property easy understand process fu vg write say crashes chained shuffle fails 
usual focus facts propositions useful characterization facts terms relation relation defined smallest preorder uv uv start start fail safety property downward closed exists shall see fact 
transition sequence 

gamma start start 
gamma 
fail fail 
definitions apply example equals ffl start depending start special case ffl ffl ffl start fail 
operations convenient properties proposition proposition follows behaves set theoretic complementation proposition downward closed set transition sequences obtain desired characterization facts proposition set transition sequences fact downward closed 
page classical linear logic product omega required map facts facts 
omega denotes jj similarly ffflg redefinition needed additives 
facts fact mm defined equal follows proposition 
keep properties additives proposition interestingly reminiscent set theoretic models relevance logic dun 
concludes definition model classical linear logic 
model viewed ways quantale safety properties phase space processes 
option consider sets processes safety properties safety properties facts choice viewpoint unimportant 
composition suggested subsection fu fail sg note fact general fact 
obtain proposition facts gamma pi description gamma pi leads general composition principle classical linear calculus omega gamma pi omega gamma pi gamma pi omega gamma pi gamma pi omega facts 
principle follows analogue intuitionistic linear logic identical analogue omega redefined slightly 
particular composition principle says gamma pi omega gamma pi omega pi omega 
follows gamma pi omega gamma pi gamma pi gamma pi converse proved omega 
gamma pi gamma pi implies omega 
gamma pi gamma pi gamma pi 
furthermore self duals arise self dual omega 
gamma pi specification language give language specifying safety properties 
language minimal intended basis practical languages 
example certain temporal operators expressible language quite natural add abbreviations 
similarly state machines coded syntax useful 
treat calculus behaviors 
lam assume fixed order signature assume kinds order variables primed unprimed correspondence serve writing actions 
unprimed variables section define states 
range formulas language countably infinite set specification variables sets agents 
formulas ranged grammar tt ff ai gamma 
propositional connectives closure operator hiding operator quantification binds prefix construction guarding construction primed variable appears guard formula specification variables fixpoint expression assumed occurrences positive number 
notation adopted part formal logic remains metalanguage 
expressions denote safety properties values free variables 
define semantics formally just point semantic operations corresponding syntactic ones 
denotations propositional connectives obtained appropriate heyting operations closure section 
existential quantification subsection 
prefixing define ri sg fhs srs fhs delta oe srs oe begins hs delta oe delta hs delta oe delta hs delta hs hsi delta 
guarding define gamma 
foe oe begins element gg interpreted difficulty giving similar language process safety properties 
example may simply add linear operators omega gammaffi plus gamma pi drops closure operator prefixing 
page comparisons intuitionistic logic linear logic different connectives different semantic models fairly straightforward translation 
oe behavior gamma 
gamma 
gamma gamma 
oe subsequence 
gamma transition gamma appears oe runs identity behaviors oe oe yields map left inverse maps set behaviors general process implements set behaviors 
operations calculi related example gamma pi nontrivial set agents 
intuitionistic logic captures external view processes behaviors 
notation possible express subject specification 
linear logic specifications describe process time notion constrains unnecessary 
hand difficult express process complete environment system form closed 
closed systems essential notion testing helps analysis assumption guarantee specifications 
luca cardelli encouraged initial phase tried ideas ccs setting 
cynthia hibbard provided editorial help 
abr abrahamson 
modal logic concurrent nondeterministic programs 
international symposium semantics concurrent computation july 
abr samson abramsky 
domain theory logical form 
annals pure applied logic 
mart abadi leslie lamport 
existence refinement mappings 
research report digital equipment systems research center 
appear theoretical computer science 
preliminary version appeared proceedings third annual symposium logic computer science pages ieee computer society edinburgh scotland july 
mart abadi leslie lamport :10.1.1.33.1637
composing specifications 
research report digital equipment systems research center 
preliminary version appeared 
av samson abramsky steve vickers 
quantales observational logic process semantics 
technical report imperial college january 
bkp howard barringer kuiper amir pnueli 
may compose temporal logic specifications 
sixteenth annual acm symposium theory computing pages 
acm april 
dam mads dam 
relevance logic concurrent computation 
proceedings third symposium logic computer science pages 
ieee july 
de bakker 
de roever rozenberg editors 
stepwise refinement distributed systems models formalism correctness volume lecture notes computer science berlin 
springer verlag 
dun michael dunn 
relevance logic entailment 
gabbay guenthner editors handbook philosophical logic volume pages 
reidel publishing 
gir 
girard 
linear logic 
theoretical computer science 
hp david harel amir pnueli 
development reactive systems 
apt editor logics models concurrent systems volume nato asi series pages 
springer verlag 
hp matthew hennessy gordon plotkin 
finite conjunctive nondeterminism 
petri festschrift 
page joh johnstone 
stone spaces 
cambridge university press cambridge 
lam leslie lamport 
specifying concurrent program modules 
acm transactions programming languages systems april 
lam leslie lamport 
temporal logic 
mason editor information processing proceedings ifip th world congress paris september 
ifip north holland 
lam leslie lamport 
simple approach specifying concurrent systems 
communications acm january 
lam leslie lamport 
temporal logic actions 
research report digital equipment systems research center april 
lt nancy lynch mark tuttle 
hierarchical correctness proofs distributed algorithms 
proceedings sixth symposium principles distributed computing pages 
acm august 
mc misra mani chandy 
proofs networks processes 
ieee transactions software engineering se july 
mer merritt 
completeness theorems automata 
de bakker 
de roever rozenberg editors stepwise refinement distributed systems models formalism correctness volume lecture notes computer science pages 
springer verlag 
mom narciso mart oliet jos meseguer 
petri nets linear logic 
technical report sri csl sri international december 
pnu amir pnueli 
transition global modular temporal reasoning programs 
krzysztof apt editor logics models concurrent systems nato asi series pages berlin october 
springer verlag 
sta eugene stark 
proof technique rely guarantee properties 
maheshwari editor foundations software technology theoretical computer science volume lecture notes computer science pages berlin 
springer verlag 
vic steve vickers 
samson abramsky linear process logics 
foundation workshop notes october november 
david yetter 
quantales noncommutative linear logic 
journal symbolic logic march 
page 
