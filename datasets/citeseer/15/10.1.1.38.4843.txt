pushing envelope planning propositional logic stochastic search henry kautz bart selman laboratories mountain avenue murray hill nj research att com www research att com planning notoriously hard combinatorial search problem 
interesting domains current planning algorithms fail scale gracefully 
combining general stochastic search algorithm appropriate problem encodings propositional logic able solve hard planning problems times faster best current planning systems 
stochastic methods shown effective wide range scheduling problems demonstration power truly challenging classical planning instances 
provides new perspective representational issues planning 
widespread belief ai community planning amenable general theorem proving techniques 
origin belief traced early plan generation order resolution theorem proving green failed scale realistically sized problems 
relative success strips system fikes nilsson established basic paradigm practically subsequent planning 
planning viewed systematic search statespace space partial plans 
different representations actions states fluents 
control strategies discussed terms general rules inference terms rules establishing protecting goals detecting conflicts actions forth 
results described challenge belief 
applied general reasoning systems task plan synthesis obtained results competitive cases superior best specialized planning systems 
possible believe lesson planning required specialized algorithms simply order deductive scale 
contrast past years seen dramatic progress size problems handled propositional satisfiability testing programs trick johnson selman 
particular new algorithms randomized local search selman solve certain classes hard problems order magnitude larger solved older approaches 
formalization planning propositional satisfiability firstorder refutation 
appears proceedings thirteenth national conference artificial intelligence aaai portland 
ran experiments best systematic satisfiability algorithms tableau crawford auton best stochastic algorithms walksat selman 

task specific information uniform clausal representation inference engines explicit indication stood goal stood operator 
meant solvers constrained perform strict backward forward chaining search done planning systems 
far disadvantage greatly adds power approach allowing constraints propagate freely quickly reduce search space 
idea viewing planning general constraint satisfaction directional search explored authors see example joslin pollack 
notion formalizing planning propositional reasoning immediately raises certain questions 
planning notoriously hard problem 
fact general plan existence problem strips style operators pspace complete bylander erol backstrom 
possible formulate planning np complete problem 
difficulty disappears realize result holds potential solutions exponential length 
interested polynomial length plans planning np complete 
planning systems viewed specialized propositional reasoning engines 
surprisingly efficient planning system graphplan developed blum furst 
graphplan works phases problem stated strips notation converted data structure called planning graph 
second graph systematically searched solution 
planning graph fact propositional representation 
experiments directly converted planning graphs sets clauses applied walksat tableau 
experiments developed hand compact efficient clausal encodings problems 
see case walksat dramatically outperformed general specialized systematic search engines 
success stochastic local search planning may come surprise 
local search successfully applied scheduling problems johnston minton seen little planning 
authors kautz selman crawford baker suggested planning finding partially ordered set operators achieve goal scheduling assigning times resources fixed set operators require different control mechanisms planning inherently systematic process 
success mainly attributed factors greater speed power walksat earlier local search satisfiability algorithms gsat selman second better problem encodings including compiling away plan operators extending technique blum furst encoding partially ordered plans parallel actions 
results appear convincing evidence stochastic local search powerful technique planning 
discuss techniques encoding planning problems propositional sat detail 
experience search domain axiomatizations better computational properties led valuable insights representational level 
example describe encoding compiles away explicit propositions stand actions leaving fluents 
encoding initially motivated concern reducing number different propositions final formula turned enable particularly simple elegant solution frame problem parallel actions 
important note suggesting control knowledge mixed declarative information occurs logic programming 
suggesting advantageous try optimize gross statistical properties axiomatization developing choosing declarative representations 
organized follows 
short preview results discuss general approaches planning satisfiability particular encoding techniques 
experimental results drawn domains including logistics problems rocket domain blocks world 
compare performance systematic stochastic algorithms different kinds sat encodings performance graphplan cite comparisons graphplan known prodigy carbonell stone ucpop penberthy weld systems 
preview results describe approach detail highlight main experimental results 
order evaluate method considered planning domains lead serious computational difficulties traditional planners 
barrett weld discuss various characteristics domains 
general hardest planning domains contain intricate interactions planning operators various types goal subgoal interactions 
interactions complicate order goals subgoals established difficult select right operator establishing goal 
real world domains contain sources computational difficulties 
experiments focussed natural domains rocket domain blum furst logistics domain veloso 
blum furst showed graphplan outperforms prodigy ucpop rocket problems 
extended problem somewhat challenging graphplan 
logistics domain viewed extension rocket domain making harder 
considered relatively large blocks world problems small blocks world instances surprisingly hard traditional planners 
table gives results hardest instances considered 
column clear stochastic method walksat direct sat encoding solve instances orders magnitude faster graphplan 
walksat optimal shortest possible plans problems 
example optimal step plan blocks world problem bw large 
instance contains blocks multiple stacks initial goal state 
aware planning algorithm solve instances size incorporating domainspecific search control knowledge 
table contains results running sat encodings derived graphplan planning graphs 
instances solved significantly faster graphplan 
sat encodings instances large sat procedures 
sat encoding compact original graphplan representation graphplan handle larger internal data structures sat procedures 
planning graph bw large contains nodes exclusion relations 
just graphplan reach hours encoding walksat takes seconds 
walksat solution proved optimal systematic algorithm tableau 
interestingly tableau able show shorter solution find solution 
show stochastic systematic methods complement 
planning satisfiability planning traditionally formulated deduction order logic green mccarthy hayes pednault allen kautz walksat graphplan implemented ran sgi challenge mhz mips processor 
avrim blum providing code 
tableau ran sparc processor 
jimi crawford making sparc executable latest version tableau program available 
tableau code optimized sparc architecture 
previous code comparisons estimate tableau code run approximately faster sgi processor 
experimental data code available authors 
problem time graphplan sat planning graph direct sat encoding actions systematic stochastic stochastic rocket ext logistics bw large bw large table preview experimental results 
times seconds 
long dash indicates experiment terminated hrs solution 
selman formalized planning terms propositional satisfiability 
framework plan corresponds model truth assignment satisfies set logical constraints represent initial state goal state domain axioms 
time consists fixed discrete number instances 
proposition corresponds time varying condition fluent holding particular instant action begins occur specified instance ends instance pickup 
general constraints facts actions written axiom schemas instantiated objects number time instances particular problem 
maximal length plan fixed instantiation time quantity known advance straightforward perform binary search instantiations various sizes find smallest solution 
example optimal plan length search proceed plans length plan plan 
satisfiability approach directly implemented sat algorithms general better scaling properties deductive fol theorem provers 
advantage expressive power 
easy represent arbitrary constraints intermediate states just initial goal states structure plan 
example assert pickup immediately followed stack write schema pickup oe stack 
quite hard represent kinds constraints strips 
real logic opposed strips relationships predicates stated explicitly unnecessary distinguish primitive derived predicates 
example strips style operators planning handle predicates clear separately framework simply assert clear domain axioms satisfiability approach general stronger deductive framework necessary rule unintended models 
describe ways done encodings derived planning graphs graphplan blum furst ii linear encodings kautz selman iii general state encodings incorporate best features previous 
refer linear state encodings direct encodings 
graphplan encodings mentioned graphplan system blum furst works converting strips style specification planning graph 
ordered graph alternating layers nodes correspond grounds facts indexed time step layer fully instantiated operators indexed time step 
arcs lead fact operators contain precondition layer similarly operator effects layer 
operator layer fact op maintain operator simply fact precondition add effect 
solution subgraph planning graph contains facts initial goal layers contains operators layer conflict operator deletes precondition effect 
solution corresponds partially ordered plan may contain operators occuring time step semantics operators may occur order parallel 
planning problems take advantage kind parallelism planning graph fewer layers number steps linear solution smaller 
planning graph quite similar propositional formula fact able automatically convert planning graphs cnf notation 
translation begins goal layer graph works backward 
rocket problem blum furst fig 
example load means load location time move means move time translation ffl initial state holds layer goals hold highest layer ffl fact level implies disjunction operators level gamma add effect oe load load maintain ffl operators imply preconditions load oe ffl conflicting actions mutually exclusive load move graphplan uses set rules propagate effects mutually exclusive actions leading additional exclusiveness constraints 
logical formulation additional constraints logically implied original formulation 
linear encodings kautz selman described set sufficient conditions ensuring models domain axioms initial goal states correspond valid plans 
ffl action implies preconditions effects ffl exactly action occurs time instant ffl initial state completely specified ffl classical frame conditions actions action change truth condition fact fact remains true remains false action occurs 
intuitively condition sure actions occur preconditions hold single action frame axioms force state follows legal state legal state 
models encoding correspond linear plans number operators plan increases encodings large 
kautz selman observed number propositional variables significantly reduced replacing certain predicates take arguments plus time index argument ones take single argument plus time index 
example predicate move meaning move block time predicates object source destination correspondence move object source destination instantiated yields propositions propositions 
technique viewed kind lifting 
blocks world problems described kind linear encodings 
state encodings ability express partially ordered plans single model gives graphplan powerful performance advantage 
hand seen strips style input notation expressive limitations 
developed methodology call general state encodings enjoys advantages previous approaches incorporating representational refinements 
term state emphasizes axioms assert means individual state valid gives secondary role axioms describing operators 
example blocks world state axioms assert block block block clear logistics domain state axioms include assertions transportable object single truck truck single location 
state axioms force state internally consistent turns relatively small number axioms needed describe state transitions transition result application number mutually non conflicting actions 
axioms describe means fact change truth value states 
way write axioms possible actions account change 
example logistics domain instance goes false true object loaded oe load style axiom seen instance domain specific frame axioms described haas schubert 
note classical frame axioms type linear encodings included fact inconsistent parallel actions 
axioms similar backward chaining axioms graphplan encodings 
graphplan example axiom rewritten maintain oe load load formula identified instance general schema dummy maintain proposition replaced precondition 
axioms added assert actions entail preconditions effects conflicting actions mutually exclusive 
described far approach greater expressive power graphplan encodings compact 
number propositional variables form encoding significantly decreased trick reducing arity predicates described previous section 
furthermore axioms relating actions preconditions effects safely eliminated strong state consistency axioms propagate consequences remaining assertions 
process eliminating propositions simplifying axioms carried extreme completely eliminating propositions refer actions 
fluents axioms directly relate fluents adjacent state 
done logistics domain relatively complex domain involves moving packages various locations trucks airplanes 
strips style formalization requires operators load truck unload truck drive truck load airplane hand explicit load axioms single schema relates predicates obj loc oe obj loc truck airplane obj loc loc english simply asserts object location remains location goes truck plane parked location 
schema accounts state transitions associated unloading asserting object vehicle stays vehicle location vehicle parked 
interestingly additional transition axioms needed vehicle movement operators drive truck fly airplane domain 
state validity axioms ensure vehicle single location 
solution state encoding planning problem yields sequence states 
missing actions easily derived sequence pair adjacent states corresponds easy problem finding unordered plan length 
general case finding unordered plans length np hard domains examined far including logistics blocks world domains linear time algorithm finding plans 
initial motivation developing purely state representation pragmatic wished find compact logical encodings size handled sat algorithms 
achieved goal example stochastic algorithm solve state encodings logistic problems solved domainindependent planner aware 
example high performance planning domain dependent control heuristics blocks world see bacchus kabanza 
computational concerns encodings interesting purely representational standpoint 
explicit frame axioms axioms preconditions effects axioms conflicts actions subsumed simple uniform relationships fluents 
axiomatizations appear natural situation calculus strips formalizations avoid traditional problems approaches encounter 
experiments reported involve automatic way deriving state encodings strips style problem specification 
encodings experiments created hand understanding semantics various benchmark domains described strips operators 
separate kautz describes initial results automating process compiling away operators domain 
equally take state description domain primary add actions axioms meaning postulates 
experiments systematic versus stochastic search section discuss experimental results 
compare various encoding schemes respect cost finding plan 
show solutions obtained optimal showing shorter plans exist 
solve sat encodings consider systematic stochastic method 
tableau systematic procedure davis putnam procedure developed crawford auton 
fastest current complete sat procedures trick johnson dubois 
walksat stochastic procedure descendant gsat randomized greedy local search method satisfiability testing selman selman 
stochastic local search methods shown outperform traditional systematic methods various classes hard boolean satisfiability problems 
note procedures inherently incomplete prove formula unsatisfiable 
walksat operates follows 
picks random truth assignment randomly selects clauses sat instance satisfied assignment 
flips truth assignment variables clause satisfying clause 
process clauses may unsatisfied 
deciding variable flip clause walksat uses greedy bias tends increase total number satisfied clauses 
specifically bias picks variable minimizes number clauses satisfied current assignment unsatisfied variable flipped 
bias lead algorithm local minima performance enhanced bias applied 
best rule appears apply bias choice clauses unsatisfied randomly apply half time 
procedure keeps flipping truth values satisfying assignment predefined flips reached 
selman 
shown method significantly outperforms basic gsat local search methods simulated annealing kirkpatrick 
finding plans table gives computational cost solving hard planning problems 
consider sat encodings instance graphplan direct linear state 
sat encodings give timings systematic tableau method stochastic walksat procedure 
compare results graphplan system 
mentioned preview results considered hard instances rocket logistics domains blum furst veloso blocks world 
noted graphplan shown outperform prodigy ucpop rocket problems 
logistics domain strictly richer environment rocket domain 
column marked time actions give length plan terms number time steps 
allow parallel independent actions give total number actions lead initial state goal 
created state encoding rocket logistics problems blocks world original preliminary data indicate graphplan algorithms outperform ucpop logistics domain expected friedman 
important note ucpop regression planner certain state notions inaccessible obscure 
ucpop may prove superior domains reasoning causal related topological notions 
sat encoding time graphplan graphplan direct problem actions nodes time vars syst 
stoch 
vars syst 
stoch 
rocket ext rocket ext logistics logistics logistics bw large bw large bw large bw large table computational cost finding plans hard planning problems 
instance optimal minimal length plan 
times seconds 
long dash indicates experiment terminated hrs solution give number variables number nodes means problem instance large fit main memory 
rocket logistic direct encodings state bw blocks world direct encodings linear 
linear encodings kautz selman 
applying solvers sat instances simplified linear time algorithm unit propagation subsumption deletion unit clauses 
table gives number variables instance simplification 
results rocket ext show general trend 
direct encodings compact solved times faster sat encodings turn efficient extracting plans directly planning graphs graphplan system 
see stochastic search walksat see column marked stoch outperforms systematic search tableau see column marked syst order magnitude 
especially striking performance walksat state encodings column 
results strongly suggest stochastic methods combined efficient encoding techniques promising method solving challenging classical planning problems 
instances harder difference performance walksat direct encodings approaches dramatic 
example see logistic bw large discuss section problems solved optimality 
blocks world instance bw large minimal length plan operations pickup putdown stack unstack initial state goal state 
walksat linear encoding synthesize plan 
problem involves blocks stacks initial stacks goal state 
note encode special search control knowledge move block directly goal position possible 
get better feel computational difficulty problem briefly consider formal computational properties blocks world domain 
optimal blocks world planning shown npcomplete plan factor optimal obtained polynomial time gupta timings include time needed generating planning graph constructing sat encodings 
harder instances times just fraction takes solve planning graph sat problems 
nau 
gupta nau give algorithm finding approximate solutions 
basic idea move blocks table build goal stacks 
gupta nau approximation algorithm generate plan operations instance requiring table moves 
blocks don moved table 
note table move generally involves unstack putdown pickup stack operation 
selman shows find better polytime approximation algorithm difficulty lies deciding avoid table moves making direct stack stack moves 
determine stack stack moves order 
walksat manages eliminate table moves leaving optimal plan steps single unavoidable table move 
know planning system optimally solve unrestricted blocks world problems size kind domain specific control knowledge 
despite fact blocks world domain somewhat artificial encouraged results believe rich interactions operator sub goal sequencing domain relatively hard quite practical domains example softbot planning domain etzioni weld 
phase project hope apply methods softbot domain 
columns give number nodes number variables see direct encodings particular state encodings result significant reduction number variables problem instances 
graphplan sat encodings fewer variables number nodes corresponding planning graph unit propagation simplification described 
results quite promising stochastic methods mean suggest methods outperform systematic ones 
fact done preliminary experiments artificial domains studied barrett weld blum furst 
considered graphplan encoding graphplan system scales better sat approach walksat tableau 
special structure domain specifically designed check sequencing operators appears steer walksat repeatedly wrong direction 
tableau performs poorly performs depth search domain appears require breadth approach 
state encodings may give better results domain 
obtained promising results instances sat encodings mcallester rosenblitt causal planning formulation 
general expect systematic stochastic methods complement having different relative strengths depending domain 
section ll discuss way methods complement 
proving optimality show plans previous experiments optimal show shorter plan exists 
table gives results 
time methods systematically explore space possible plans certain size demonstrate shorter plans exist 
table see case tableau graphplan sat encoding effective logistics 
graphplan system tableau direct sat encodings strictly dominate superior logistics problems blocks world problems 
methods show inconsistency logistics time steps 
show optimality step solution logistics constructed logistics strictly smaller subproblem 
graphplan able show problem step solution 
follows logistics step solution 
general results suggests harder show non existence plan certain length find plan exists 
kind asymmetry observed problem domains selman 
issue closely related practical difference solving np np complete problems 
tableau show infeasibility time slot stack unstack solution bw large walksat find time slot stack unstack plan table 
systematic approach find feasible solution 
demonstrates stochastic systematic methods complementary plan synthesis determine lower bounds plan length 
shown solving hard planning problems challenging domains approach discussion issue depth version breadthfirst search variations davis putnam procedure see dechter rish 
linear state axiomatizations general stochastic satisfiability algorithm walksat outperforms best specialized planning algorithms orders magnitude 
furthermore walksat superior general tableau specialized graphplan systematic search engines sat encodings derived strips style operators 
results challenge common assumptions ai planning requires specialized search techniques planning inherently systematic process 
course ruling possibility domains specialized planning systems prove superior 
important issue research 
shown systematic local search algorithms complement planning satisfiability framework 
systematic algorithms provide lower bound length solution plans stochastic algorithms find actual solutions 
interesting observe certain cases systematic algorithms better proving infeasibility finding solutions problems instances comparable size 
experiments different sat encodings planning problems indicates progress considering novel kinds axiomatizations 
particular experience suggests axiomatizations concentrate states fluents compact easier solve approaches directly encode strips style state changing operators 
furthermore statebased encodings interesting representational standpoint appear provide clean elegant ways handle parallel actions frame conditions 
johnston 

discrete stochastic neural network algorithm constraint satisfaction problems 
proc 
int 
joint conf 
neural networks san diego ca 
allen 

planning temporal reasoning 
proc 
kr cambridge ma 
bacchus kabanza 

temporal logic control search forward chaining planner 
proc 

backstrom 

computational complexity reasoning plans ph thesis linkoping university linkoping sweden 
barrett weld 

partial order planning evaluating possible efficiency gains 
artificial intelligence 
blum furst 

fast planning planning graph analysis 
proc 
ijcai montreal canada 
bylander 

complexity results planning 
proc 
ijcai sidney australia 
carbonell blythe etzioni gil joseph kahn knoblock minton perez reilly veloso wang 
prodigy manual tutorial 
cmu cs tech 
report cmu cs 


np hardness blocks world 
proc 
aaai anaheim ca 
crawford auton 
experimental results cross point satisfiability problems 
proc 
aaai washington dc 
crawford baker 

experimental results application satisfiability algorithms sat encoding graphplan graphplan state problem time nodes time vars syst 
vars syst 
rocket ext rocket ext logistics logistics logistics bw large bw large bw large bw large table showing infeasibility shorter plans 
times seconds 
scheduling problems 
proc 
aaai seattle wa 
dechter rish 

directional resolution davis putnam procedure revisited 
proc 
kr bonn germany 
dubois andre carlier 

sat sat 
dimacs series discrete mathematics theoretical computer science 
appear erol nau subrahmanian 

complexity domain independent planning 
proc 
aaai 
etzioni weld 

softbot interface internet 
comm 
acm july 
fikes nilsson 

strips new approach application theorem proving problem solving 
artificial intelligence 
friedman 

personal communication 
green 

application theorem proving problem solving 
proc 
ijcai washington 
gupta nau 
complexity results blocksworld planning 
proc 
aaai anaheim ca 
gupta nau 
complexity blocks world planning 
artificial intelligence 
haas 

case domain specific frame axioms 
frame problem artificial intelligence proceedings workshop brown ed lawrence ks 
morgan kaufmann publishers los altos ca 
joslin pollack 

passive active decision postponement plan generation 
european workshop planning italy sept 
kautz selman 
planning satisfiability 
proc 
ecai vienna austria 
kautz mcallester selman 

encoding plans propositional logic 
preparation 
kirkpatrick gelatt vecchi 

optimization simulated annealing 
science 
mccarthy hayes 

philosophical problems standpoint artificial intelligence 
machine intelligence michie ed ellis horwood chichester england page ff 
mcallester rosenblitt 

systematic nonlinear planning 
proc 
aaai anaheim ca 
minton johnston philips laird 
solving large scale constraint satisfaction scheduling problems heuristic repair method 
proc 
aaai 
minton johnston philips laird 
minimizing conflicts heuristic repair method constraint satisfaction scheduling problems 
artificial intelligence 
pednault 

synthesizing plans contain actions context dependent effects 
computational intelligence 
penberthy weld 

ucpop sound complete partial order planner adl 
proc 
kr boston ma 
davis logemann loveland 

machine program theorem proving 
comm 
acm 
schubert 

monotonic solution frame problem situation calculus efficient method worlds fully specified actions 
knowledge representation defeasible reasoning kyburg loui carlson eds 
selman 

near optimal plans tractability reactivity 
proc 
kr bonn germany 
selman 

stochastic search phase transitions ai meets physics 
proc 
ijcai montreal canada 
selman kautz cohen 

noise strategies local search 
proc 
aaai seattle wa 
selman kautz cohen 
local search strategies satisfiability testing 
dimacs series discrete mathematics theoretical computer science 
appear selman levesque mitchell 

new method solving hard satisfiability problems 
proc 
aaai san jose ca 
stone veloso blythe 

need different domain independent heuristics 
aips pages chicago 
trick johnson 
eds 
proc 
dimacs challenge satisfiability testing 
piscataway nj 
dimacs series discr 
math 
veloso 

learning analogical reasoning general problem solving 
ph thesis cmu cs techn 
report cmu cs 
