look ahead value ordering constraint satisfaction problems daniel frost rina dechter dept information computer science university california irvine ca ics uci edu looking ahead search useful solving constraint satisfaction problems 
previous studies shown looking ahead helps causing dead ends occur earlier search providing information useful dynamic variable ordering 
show benefit looking ahead useful domain value ordering heuristic call look ahead value ordering lvo 
lvo counts number times value current variable conflicts value variable value lowest number conflicts chosen 
experiments show look ahead value ordering substantial benefit especially hard constraint satisfaction problems 
new heuristic prioritizing selection values searching solution constraint satisfaction problem 
task finding solution constraint satisfaction problem np complete solution technique exists works cases 
algorithms heuristics developed provide substantial improvement simple backtracking depth search problem instances 
constraint satisfaction problem solution knowing right value variable enable solution backtrack free manner 
constraint satisfaction problem small number solutions time spent searching branches search space lead solution 
minimize backtracking try values lead consistent solution 
slight increase probability value chosen part solution substantial impact time required find solution 
partially supported nsf iri electrical power research institute toshiba america xerox rockwell 
new algorithm look ahead value ordering lvo implements heuristic ranks values variable information gathered looking ahead determining compatibility value values variables 
heuristic accurately predict values lead solutions frequently accurate uninformed ordering values 
experiments show overhead lvo usually outweighs benefits easy problems improvement large problems substantial 
interestingly lvo improves performance backjumping problems solutions 
look ahead value ordering type lookahead forward checking algorithm forward checking rejects values determines lead solution viewed doing simple form value ordering 
regard lvo refined orders values may part solution 
section define formally constraint satisfaction problems describe look ahead value ordering algorithm 
section describes experiments conducted 
section discuss results experiments 
review related approaches section section summarize results 
definitions algorithms constraint satisfaction problem csp represented constraint network consisting set variables 
xn respective value domains 
dn set constraints 
constraint subset cartesian product theta 
theta consisting tuples values subset 
variables compatible 
solution assignment values variables constraint violated problem solution termed satisfiable consistent 
desired find solutions focus task finding solution proving solution exists 
binary csp constraints involves variables 
constraint satisfaction problem represented constraint graph node variable arc connecting pair variables contained constraint 
algorithms heuristics experimented look ahead value ordering testing conjunction algorithm combines backjumping dynamic variable ordering temporary pruning domains characteristic forward checking 
previous experiments shown combination extremely effective wide range problems lvo heuristic practical interest improves performance state art algorithms 
backjumping backjumping improvement backtracking takes advantage sparseness structure constraint graph 
backtracking backjumping consider variable order instantiating current variable cur value domain cur violate constraint cur previously instantiated variables 
cur non conflicting value dead occurs 
version backjumping prosser backjumping effective choosing best variable jump back 
basic ways determine values consistent variables lookback methods consider element check ensure constraints earlier variables violated 
look ahead approaches simplest forward checking assigning value current variable forward checking removes values domains variables conflict value 
refer subset incompatible values removed reached values remaining consistent previous variables instantiated 
value removed conflicted instantiation earlier variable restored assigned new value jumped backjumping 
dynamic variable ordering dynamic variable ordering dvo scheme order variables different different branches search tree 
implementation dvo uses information derived forward checking style look ahead 
step variable smallest remaining domain size selected 
empty uninstantiated variable moved variable dead occurs immediately 
technique breaking ties important variables domain size 
implementation maintain list variables sorted degree original constraint graph case tie variable choose highest list 
scheme gives substantially better performance picking tying variables random 
look ahead value ordering backjumping dynamic variable ordering combined algorithm call bj dvo bj dvo algorithm specify choose backjumping dvo lvo inputs set variables 
xn set possible values domain 
uses mutable domain set values proven inconsistent current partial assignment initially set earlier variables instantiated conflict value initially 
output variables instantiated failure 

current variable variable variables value assignments exit solution 
dynamic variable ordering 
select uninstantiated variable smallest remaining domain variable ordering call cur set cur 
look ahead value ordering 
rank values cur value cur examine uninstantiated variable examine compute heuristics described section rank conflicts cur resulting size 
select value cur follows cur go 
choose highest ranked value cur remove cur 
lvo choose arbitrarily 
lvo step avoided caching results 
examine uninstantiated variable examine conflicts cur remove add cur empty go immediately 
instantiate cur go 


cur previous variable exit failure 
jump latest variable cur remove jump cur jump jump cur jump cur set set set cur jump go 
backjumping dynamic variable ordering look ahead value ordering bj dvo lvo 
removing step leaves plain bj dvo 
parameters lvo lvo mc lvo md lvo wmd lvo pds comparison bj dvo lvo lvo heuristics described text 
number mean consistency checks instances 
set parameters produced problems near cross point 
value 
experiments reported refer plain bj dvo values arbitrarily assigned sequence number selected sequence 
explore feasibility information gleaned look ahead phase bj dvo improve ordering values 
method rank values order decreasing likelihood leading solution follows 
current variable tentatively instantiated value domain value lvo looks ahead determine impact value domains uninstantiated variables 
discuss section heuristic functions information look ahead rank values current domain 
current variable instantiated highest ranking value 
algorithm variable highest ranked remaining value domain selected 
variable earlier variables changed order values recalculated 
lvo heuristic right decision 
small improvement algorithm ability choose right value big impact required solve problem 
high level description bj dvo lvo fig 

avoid repeating consistency checks implementation saves tables results looking ahead step 
value chosen variables copied tables recomputed step 
bj dvo uses space sets size largest domain levels search tree saved level recomputed backjumping theta variables theta values variable 
implementation bj dvo lvo uses space 
additional factor level search tree values explored look ahead value ordering 
similarly space complexity sets increases bj dvo bj dvo lvo 
solve typical problem instance described section bj dvo required kilobytes random access memory bj dvo lvo required kilobytes 
computers additional space requirements lvo severe 
experimental methods results instance generator experiments reported run random instances generated model takes parameters problem instances binary csps variables having domain size parameter tightness specifies fraction value pairs constraint disallowed constraint 
value pairs disallowed constraint selected randomly uniform distribution constraint fraction incompatible pairs 
ranges low value termed loose relaxed constraint 
parameter specifies number constraints gamma possible 
specific constraints chosen randomly uniform distribution 
certain combinations parameters generate problems satisfiable problems average difficult solutions constrained solutions constrained set parameters called cross point 
value call value produces solvable problems 
lvo heuristics bj dvo lvo algorithm fig 
specify exactly information conflicts variables prioritize values current variable 
experimented heuristics rank values looking ahead 
heuristic called min conflicts mc considers value current variable associates number values domains variables compatible 
current variable values selected increasing order count 
heuristics inspired intuition subproblem solution doesn variables value 
size md heuristic prefers value creates largest minimum domain size variables 
example instantiating cur value min ng cur min preferred 
consistency checks cpu seconds parameters mean median best mean best dvo lvo ratio dvo lvo ratio ratio dvo lvo ratio ratio solvable unsolvable instances unsolvable instances instances solutions crossover point solvable instances results experiments csps various parameters near crossover point noted 
experiment instances generated solved bj dvo dvo bj dvo lvo mc heuristic lvo 
consistency checks cpu time recorded 
mean median consistency check figures low order digits omitted 
ratio columns show lvo statistic left divided corresponding dvo statistic 
best ratio column number times bj dvo lvo better divided number times bj dvo better 
small numbers parentheses tell size confidence interval consistency checks 
instance means size confidence interval 
interval centered confident true mean 
values domain current variable cur may create size md heuristic frequently leads ties 
refined version md weighted max domain size wmd 
md wmd prefers values leave larger domains break ties number variables domain size 
continuing example previous paragraph leaves variables domain size rest domain sizes larger leaves variables domain size preferred fourth heuristic called point domain size pds gives value cur point value points domain size points domain size points domain size point domain size 
value smallest sum points chosen 
fig 
shows results experiments comparing lvo heuristics 
terms mean consistency checks lvo usually improves bj dvo matter heuristic chosen 
mc heuristic clearly best selected experimentation 
rest lvo implies mc heuristic 
experimental results draw experiments comparing bj dvo bj dvo lvo sufficiently difficult problems lvo produces substantial improvement medium problems lvo usually helps frequently hurts easy problems overhead lvo worse benefit 
roughly sufficiently difficult consistency checks easy consistency checks 
experimented lvo selecting sets parameters set generating instances solved bj dvo bj dvo lvo 
approaches selecting combinations parameters large values generate problems computationally expensive 
strategy tight constraints sparse constraint graphs 
instance problems extremely time consuming solve small number extremely tight constraints 
method generating easier problems large select parameters exactly cross point 
approach experiment estimated 
results experiments summarized fig 

data ways table show mean median ratio times algorithm better 
ratio columns mean median fig 
provide indication relative performance algorithms 
mean ratios median ra consistency checks bj dvo ffl ffl bj dvo lvo ffi ffi times lvo worse lvo worse ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi instances experiment divided groups number consistency checks bj dvo 
point mean instances group 
dotted line showing percentage times bj dvo better bj dvo lvo measuring consistency checks related right hand scale 
indicate bj dvo lvo better bj dvo required fewer consistency checks cpu time 
best ratio column larger number indicates superior performance bj dvo lvo number times bj dvo lvo better bj dvo divided number times bj dvo bj dvo lvo measured consistency checks cpu time 
uses mean relevant statistic takes account impact occasional extremely difficult problem 
convey estimate accuracy sample instances provide consistency check measure size confidence interval expressed percentage sample mean 
confidence interval true population mean computed gamma oe oe sample mean oe population standard deviation number trials factor associated confidence interval 
don know standard deviation entire population estimate sample standard deviation acceptable long introduces source possible inaccuracy 
medians fig 
lower means sample small number extremely difficult problems difficult ones 
experiments half cpu time spent solving hardest problems 
fig 
shows skew distribution lvo affects problems different difficulties 
instances experiment divided groups number consistency checks required bj dvo 
consistency checks lvo consistency checks dvo ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl point ffl solution ffi solution represents instance 
points diagonal line required fewer consistency checks lvo 
easiest put group easiest second group 
lvo harmful groups produces increasingly larger benefits problems difficult 
scatter chart fig 
indicates distribution data 
due space constraints figures show data drawn parameters 
charts data experiments parameters quite similar 
general statistics cpu time slightly favorable lvo statistics consistency checks reflecting fact implementation approximately performance penalty cpu time lvo 
caused need store copy large tables hold results looking ahead different values variable caching referred step fig 

problem instances required slightly fewer consistency checks lvo slightly cpu time resulting substantially different consistency checks best ratio cpu seconds best ratio numbers fig 

graphs fig 
show impact lvo increases number variables increase 
variables small domain sizes larger number variables required lvo beneficial impact 
instance lvo improves bj dvo substantially small domain size impact lvo appear larger 
efficacy lvo depends near parameters solvable crossover point 
data fig 
indicate lvo detrimental easy consistency checks number variables bj dvo ffl ffl bj dvo lvo ffi ffi ffl ffl ffl ffl ffi ffi ffi ffi ffl ffl ffl ffl ffl ffl ffl ffi ffi ffi ffi ffi ffi ffi benefits lvo increases larger point mean instances 
consistency checks percentage bj dvo ffl ffl bj dvo lvo ffi ffi ffl ffl ffl ffl ffl ffl ffi ffi ffi ffi ffi ffi varying effectiveness lvo problems cross point 
point chart represents mean number consistency checks solving csp instances bj dvo bj dvo lvo 
constrained problems means bj dvo bj dvo lvo identical 
underconstrained problems solutions 
problems extra lvo exploring values variable unnecessary 
problems sufficiently overconstrained greater lvo little effect number consistency checks 
addition experimenting lvo random problems compared bj dvo bj dvo lvo scheduling problems transformed graph coloring problems 
case impact lvo minimal slight degradation cpu time 
symmetrical nature graph coloring constraints provide information look ahead value ordering exploit 
constraint graph csp variables 
domain variable listed inside oval constraints indicated disallowed value pairs arc discussion backtracking order values chosen difference problems solution searching solutions 
may surprising value ordering scheme help bj dvo instances unsatisfiable data fig 
fig 
indicate 
theorem states reason interaction backjumping look ahead value ordering 
theorem searching solutions problems solution 
order values chosen affect search space backtracking explores 
order values chosen affect search space backjumping explores 
proof 
part consider search tree rooted variable children 
xn size search space ss tree ss 
addition commutative search spaces children interact order search spaces rooted children expanded affect ss 
part consider problem depicted fig 
assume assigned 
value orders considered dead 
instantiated eventual dead lead jump back 
jumped connected hand considered different search space explored encountered 
jumped dead ends note theorem holds look ahead look back method variable ordering static dynamic 
lvo help unsatisfiable problems unsatisfiable branches problems solutions quickly finding consistent instantiation small set variables jumped backjumping 
related value ordering techniques investigated information derived forward checking style look ahead 
pearl discusses similar value ordering heuristics context queens problem 
highest number cells max conflicts heuristic row number cells heuristic max domain size 
dechter pearl developed advised backtrack algorithm estimates number solutions subproblem created instantiating value 
estimate tree relaxation remainder problem 
value number solutions counted count rank values 
advised backtrack implementation general idea heuristics generated relaxed version problem instance 
sadeh fox tree relaxation remaining problem context job shop scheduling problems 
value ordering heuristic considers impact capacity constraints demand scarce resources 
introduced look ahead value ordering algorithm ordering values constraint satisfaction problem 
experiments show large hard problems lvo improve bj dvo algorithm factor 
drawback lvo somewhat complex implement uses set tables cache results values examined ranking process instantiated 
manipulating tables incurs small cpu overhead 
disadvantage lvo easy solvable problems solutions acceptable value choices usually detrimental 
lvo needlessly examines value variable backtrack free search solution 
lvo beneficial difficult instances require consistency checks 
unexpectedly helps problems solutions conjunction backjumping 
tested lvo forward checking level look ahead 
plan explore possibility computationally expensive scheme partial look ahead full look ahead directional arc consistency pay increased accuracy value ordering 
research direction reduce overhead lvo easy problems 
achieved employing value ordering earlier levels search having value ordering automatically turn notices current values conflict relatively values indicating underconstrained problem 
simple way eliminate overhead lvo easy problems run non lvo algorithm algorithm completed say consistency checks cancelled problem solving restarted lvo version 
price extra consistency checks difficult problems costs lvo easy majority problems avoided 
peter cheeseman bob kanefsky william taylor 
really hard problems 
proceedings international joint conference artificial intelligence pages 
rina dechter 
enhancement schemes constraint processing backjumping learning cutset decomposition 
artificial intelligence 
rina dechter judea pearl 
network heuristics constraint satisfaction problems 
artificial intelligence 
daniel frost rina dechter 
search best constraint satisfaction search 
proceedings twelfth national conference artificial intelligence pages 
gaschnig 
performance measurement analysis certain search algorithms 
technical report cmu cs carnegie mellon university 
haralick elliott 
increasing tree search efficiency constraint satisfaction problems 
artificial intelligence 
david mitchell bart selman hector levesque 
hard easy distributions sat problems 
proceedings tenth national conference artificial intelligence pages 
judea pearl 
heuristics 
addison wesley reading mass 
patrick prosser 
hybrid algorithms constraint satisfaction problem 
computational intelligence 
paul walton purdom 
search rearrangement backtracking polynomial average time 
artificial intelligence 
norman sadeh mark fox 
variable value ordering heuristics activity jobshop scheduling 
proceedings fourth international conference expert systems production operations management pages 
ramin zabih david mcallester 
rearrangement search strategy determining propositional satisfiability 
proceedings seventh national conference artificial intelligence pages 
