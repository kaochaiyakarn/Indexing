distributed simulation high level algebraic petri nets limited capacity places school computer studies university leeds leeds ls jt uk email scs leeds ac uk aim search techniques accelerate simulations exploiting parallelism available current multicomputers techniques study class petri nets called high level algebraic nets 
nets exploit rich theory algebraic speci cations high level petri nets 
gain great deal modelling power representing dynamically changing items structured tokens algebraic speci cations turned adequate exible instrument handling structured items 
focus extended concurrent algebraic term nets kind high level algebraic petri nets limited capacity places 
distributed simulation techniques considered asynchronous conservative asynchronous optimistic synchronous 
algorithms implemented network workstations mpi message passing interface 
uence factors characteristics simulated models organisation simulators characteristics target multicomputer performance simulations measured characterised 
concluded distributed simulation multicomputer system fact gain speedup sequential simulation achieved small scale simulation models 
keywords distributed simulation high level petri nets rewriting logic parallel programming 
petri nets oldest best established model concurrent systems 
various formats studied extensively algorithms exist determine functional properties nets 
promising tool describing studying information processing systems characterised concurrent asynchronous distributed parallel nondeterministic stochastic 
high level algebraic nets introduced order exploit rich theory algebraic speci cations high level petri nets petri nets gain great deal modelling power representing dynamically changing items structured tokens algebraic speci cations turned adequate exible instrument handling structured items 
multisets domain speci ed sorts operations equations 
concept algebra semantics relating terms interpretations appear directly applicable high level petri nets 
extended concurrent algebraic term nets proposed way speci cation modelling validation applications various areas communication networks concurrent programming manufacturing systems 
built combination formalisms 
rst formalisms constitute net data model de ning syntax system terms capture structure 
net model kind advanced petri net describe process architecture system data model algebraic formalism specifying data structures system 
third formalism rewriting logic de ning semantics system words describe behaviour 
logic system behaviour may explained formal reasoning 
transforming logic rewriting system rapid prototyping automatic proving system design 
features capacity places limited nite 
parallel distributed simulation techniques consolidating potentially ective way improving elapsed time discrete event simulation experiments system models 
common aim approaches divide single simulation program logical processes lps executed individual processing nodes parallel computer 
issues critical concern firstly di erence approaches deal ordering events causality errors secondly problem partitioning simulation models number cooperating simulation lps mapping processing nodes 
studied speci cations simulation models 
adaptation distributed simulation protocols partitioning ecatnet models studied order optimise distributed simulation time 
distributed simulation techniques considered asynchronous conservative asynchronous optimistic synchronous 
proposed partitioning characteristics properties structure ecatnet model 
results obtained performing set experiments distributed simulators sequential purpose get insight behaviour di erent conditions 
characterise parameters ecatnet model synchronisation strategy ways organising lps uence achieved performance 
interested behaviour simulators getting useful informations model 
show approaches ectively useful evaluation systems modelled 
related section review literature introduce signi cant domains application techniques petri nets 
clear studies parallel simulation algorithms 
ones selected similarity 
worth mentioning attention parallel simulation petri nets limited capacity places 
contributions parallel distributed discrete event simulation area petri nets reported literature include 
deal timed stochastic nets 
thomas zahorjan proposed conservative simulation protocol performance petri nets 
decomposition petri net subnets node place transition simulated lp order maximise potential parallelism 
technique called selective receive communication protocol transition input places 
re transition messages exchanged lps 
hardware platform sequent shared memory processors 
nicol roy introduced conservative approach 
net partitioned transitions con ict assigned lp input places 
simulator handles kinds events exploits lookahead implemented intel ipsc distributed memory multiprocessor 
ammar deng proposed optimistic simulator stochastic petri nets time warp allowing completely general decompositions redundant representation places 
messages exchanged lps synchronisation ensure marking place subnet consistent image subnets 
simulator tested encore multimax processors 
speedup gures 
ferscha exploited petri net structural analysis ecient implementation techniques approaches conservative optimistic 
tests done sequent balance intel ipsc multicomputer 
authors state ecient distributed simulations timed petri nets done real speedups obtained identifying model intrinsic parallelism causality information optimise lps 
communication overhead main obstacle achieve performance 
nicol mao described new heuristic technique automated mapping static dynamic timed petri net parallel architecture 
simulations conducted yawns windowing network simulator parallel simulation testbed implemented intel family multiprocessors ipsc touchstone delta 
cui turner proposed new partitioning technique assuming transitions assigned priorities model 
partitioning transition input places assigned separate lp 
decision place assigned lp containing transition highest priority output transitions 
simulator tested transputer network processors 
concentrate development distributed simulation mechanisms classical approaches conservative optimistic queueing networks timed petri nets 
overlap simulation models domain distributed simulation addressed 
little attention high level nets distributed discrete event simulation 
worth mentioning concerning simulation techniques high level nets arc inscriptions enabling test ring operations substantially complex 
thor timed hierarchical object related nets sch reported 
optimistic distributed simulator developed runs workstation cluster transputer network 
thorn model idle rq communication protocol implicit retransmission 
speedup gures reported 
organisation organised way section review basic notions 
section brie presents parallel distributed simulation techniques 
section describes synchronisation protocols conservative optimistic synchronous approaches distributed simulation 
simulation environment section 
section discusses empirical results derived implementation strategies ecatnet models 
concluding remarks section 
timed basic concepts ecatnet structure ic dt ct tc fp pn nite set places called elements ft nite set transitions called elements function associates sort place ic input condition dt destroy tokens ct created tokens cap capacity partial function domain cap cap tc transition condition bool function tc bool set variables occurring ic dt ct called transition context 
called ecatnet syntactic substructure 
marked ecatnet ecatnet function cap domain 
graphical representation generic ecatnet 
ic dt ct multisets equivalence classes terms respectively multiset union intersection inclusion di erence 
terms de ned algebraic speci cation data type user 
tc boolean expression may contain variables occurring ic dt ct place associated capacity cap de ned multiset closed equivalence classes terms may nite 
marking place net multiset closed terms 
tc ic dt ct generic ecatnet transition various conditions simultaneously true 
rst condition ic input place enabled 
second condition tc true 
addition ct output place result exceeding capacity capacity nite 
red dt removed input place simultaneously ct added output place transition ring conditions expressed rewrite rules strongly depending form syntactic notation representing ic 
rewrite rules metarules set deduction rules de ne rewriting logic gives semantics net 
act parallelising compiler tries nd sequences code may executed parallel 
ecatnet viewed model concurrent system certain number transitions enabled simultaneously con ict red parallel 
rewrite rules associated transitions 

initial state 
deduction nal state initial state may performed rewriting logic associated net 
decomposition rules firing parallel 



application rewrite rules parallel 
application structural axiom commutativity application parallel structural axiom identity examples concrete instantiations practical rewrite rules 
aspect time literature shows petri nets extended di erent ways order incorporate concept time 
lot properties systems involving time particularly issues performance evaluation simulation covered decorating petri nets requirements timing occurrence transitions residence tokens places assumed take distinguished amount time 
extensions widely adopted necessity 
time essential performance evaluation convenience purposes 
marking related rate introduced transition 
leads take account ring delay perform operations remove deposit tokens 
transitions model active parts system assigned timed behaviour natural manner 
choice allows preserve incremental approach de ning semantic framework de ned terms rewriting logic 
transitions integrate timing aspects achieved introducing new syntactic notation 
transition speci ed ring rate assigns ring delays elements major types transitions zero delays associated transitions called immediate deterministic timed transitions annotated ring rate deterministic value stochastic timed transitions instance random variable 
contains stochastic timed transitions ring delay random variable exponentially distributed 
enriched temporal speci cation suitable discrete simulation 
important step quantitative performance evaluation 
approach form rewrite rule associated transition guarantee constraint timestamp created token ct equal time transition starts ring augmented ring time right hand side rule 
situations necessary specify activity duration action performed deadline 
rewrite rules level concurrent execution rewrite rules associated transitions controlled monitored 
rewrite rule associated transition marked ring starts unmarked ring ends 
firing semantics integrate di erent kinds timing aspects relate transitions 
er delay times de ned stochastic petri nets 
provide ring times de ned timed petri nets usually preferred modelling activity duration delay times suitable represent waiting period preparation time 
ring policies de ned leading di erent semantics intents di erent modelling domains 
firstly transition ring atomic removing tokens input places dt depositing tokens output places ct single indivisible operation 
random time elapses enabling ring transition enabling tokens reside input places continuously enabled time re time disabled ring transition 
secondly transition enabled res phases 
immediately removes enabling tokens dt places preset 
tokens disappear new tokens ct created postset transition duration associated transition elapsed 
di erent ring semantics ect construction simulation engine sequential parallel event list management 
distributed discrete event simulation distributed discrete event simulation system modelled viewed composed number physical processes pps interact various points simulated time 
simulator constructed set logical processes lps physical process 
logical processes exchange timestamped event messages interact 
relationship events may exist concurrent execution events synchronised causality errors occur 
falls categories conservative optimistic 
consider synchronisation protocols chandy misra bryant scheme cmb conservative time warp described je erson optimistic virtual time paradigm 
conservative mechanisms strictly avoid possibility causality error occurring forcing lps block long possibility receiving messages lower timestamp 
cope deadlock situations alternatives literature deadlock detection recovery cmb ddr deadlock avoidance cmb da 
cmb ddr deadlocks detected recovery procedure simulation allowed resume 
simulation consists sequence phases performing useful computation parallel separated phase interfaces computation takes place break deadlock allows various lps proceed 
drawbacks approach apparent simulation making progress phase interfaces done reduce amount blocking 
alternative deadlock detection recovery deadlock avoidance deadlock occurs uses null messages 
null message represent event simulated system 
null message tt null sent lp process lp control message tells lp messages process lp timestamps tt 
message tt null determined adding minimum clock value lp input queues minimum time increment message passing process 
highlights lookahead de ned process ability predict happen importantly happen simulated time regards behaviour may ect processes 
process nishes processing event sends null message output ports indicating bound 
null messages synchronisation purposes correspond activity physical system 
optimistic mechanisms detect recover causality errors strictly avoid 
process single input queue arriving messages stored input queue order increasing virtual receive time 
note global virtual time gvt considered virtual clock system 
process maintains state queue containing copies previous state checkpoint 
lp determines error occured procedure recover invoked rollback 
causality error detected event message received contains timestamp smaller lp local time clock 
event called 
recovery accomplished undoing ect events processed prematurely process receiving restoring correct state 
positive message sent lp virtual send time copied sender virtual clock 
process rolls back time tt immediately sent previously sent positive messages timestamp larger tt undo ect 
called aggressive cancellation 
lazy cancellation process resumes executing new logical virtual time messages di erent previously sent messages transmitted 
approaches protocols literature synchronous approach 
synchronous simulator processes events timestamp parallel 
global clock shared lps rest data structures private 
probabilistic protocol performance ecient compromise classical approaches conservative optimistic 
distributed discrete event simulation refers implementation machine communication message passing loosely coupled multiprocessor parallel discrete event simulation pdes refers implementation shared memory machine tightly coupled multiprocessor restrict 
framework distributed simulation di erent ecatnet simulators implemented tested seq sequential event driven cmb da chandy misra bryant deadlock avoidance null messages tw lz time warp lazy cancellation message cancellation technique sync synchronous distributed event driven 
distributed simulators description model 
seq works slightly di erent description model 
simulators share code possible fair making comparisons obviously reduce development ort 
logical processes perform ecatnet distributed simulation spatial model decomposition ecatnet model decomposed subnets subregions subnet going assigned lp 
xed fifo communication channels lps timestamped messages exchanged channels lps synchronisation 
lp identify components partition assigned communication behaviour simulation engine constituent parts distributed simulation framework 
lp deals categories events internal event scheduled executed lp external event scheduled lp executed 
events may occur constructing discrete event simulator timed start ring transition enabled re tsim input place remove appropriate tokens 
dt tokens destroyed execution event destroy tokens 
event ring timestamp tsim inserted event list 
event create tokens inserted event list output place timestamp tsim ct tokens created scheduled external event sent timestamp message lp assigned 
ring ends ring tsim checks condition tc input places ic output places ct cap 
enabled conditions satis ed re red event start ring inserted event list time tsim 
create tokens tokens arrive place tsim marking updated 
deposit may enable output transitions 
output transition enabled event start ring tsim inserted event list 
events start ring ring inserted lp event list 
event start ring processed ring transition lp output place event create tokens needs encapsulated timestamp message carrying ct sent lp assigned 
ecatnet partitioning seen performance reasons generality partition limited way con icting transitions input places reside lp 
partitioning avoids implementation distributed con ict resolution algorithm minimises overhead 
partitioning related ring rule lp set transitions input places local information sucient decide enabling ring transition 
respectively set places set transitions ecatnet model decomposed partition set subnets ecatnet ic dt ct tc set rates local transitions communication interface decomposition requires interface ecatnet partitions preserving behavioural semantics ecatnet 
interface implemented appropriate protocol partitions simulation strategy 
communication arc transition ecatnet lp place exists unidirectional channel nite capacity bidirectional channel 
motivated transitions interact output places sending tokens transitions re places nite capacity interact input transitions test enabling conditions 
map set arcs interconnecting di erent subnets channels communication interface 
de ne channels ecatnet communication interface channels ch ch lp lp set directed channel lp lp corresponding arcs carrying messages type simulation engines simulation engine implements simulation strategy 
simulation events performed virtual time causality 
data structures local virtual time representing lp simulation time accumulated value ring time input queues iq queue input channel collects arrived messages ordered time output queues oq queue output channel keeps messages send ordered time list events ordered time occurrence 
general format messages exchanged lps type message source destination timestamp type token source destination place lp transition lp depending communication arc timestamp represents accumulated ring time transitions may di erent meanings di erent types messages type token algebraic term token moved subnets 
messages labelled port number clearly states channel sent 
conservative simulator conservative approach allows processing safe events ring transitions lp guaranteed receive messages smaller timestamps 
types messages causality events conservative simulation engine preserved lps sending timestamped token messages type create tokens tt ct non decreasing order 
message carrying created tokens lp res leading deposit tokens place lp create tokens tt null null message sent synchronisation purpose 
null message timestamped signal sent lp indicate lps lower bound timestamp create tokens messages 
highlight lookahead exists petri nets simulation transition starts ring tsim lp predict exactly tokens generated ring deposited tsim ring delay associated 
lookahead comes directly ecatnet structure increment ring time succeeding timed transitions lp plus ring time transition output border lp 
value lookahead established pair transitions subnet static analysis subnet structure 
message simulated ecatnet model represented obvious way record elements representing type sending process sending receiving transition receiving process sending receiving place token time timestamp 
additional information generating process simulation cyclic models avoid ow null messages message passing system 
addition ic enabled tc true third transition enabling condition related capacity output place created tokens ct deposited 
transition output place assigned lp information regarding capacity actual marking available locally 
case assigned lp synchro communication necessary messages steps algorithm step deposit request ct 
message related ring transition lp checking rst enabling conditions satis ed tc ic true 
message sent lp time request ring lp output place lp leading deposit ct tokens step deposit request ack ct place lp waits deposit request messages lp input transitions proceeds sorting increasing timestamp order number transitions requesting ring 
starting transition timestamp checks enabling condition ct cap satis ed 
ring allowed time speci ed lp deposit tokens possible cap place full ct cap ow lp sends deposit request ack message reply specifying exactly re 
value local lp related time output transition going re 
exploit information lp check wait messages neighbours 
step waits reply deposit request message previously sent collects deposit request ack processes max 
res enabled sends create tokens lp output places 
lp behaviour behaviour conservative engine process rst event token message iq smaller timestamp process token message minimum token time 
input queue iq clock cc associated equal timestamp message head queue queue contains message timestamp received message queue empty 
lp blocks soon minimum timestamp messages larger occurrence time rst event change value cc iq empty 
ring transition follows lp res create tokens message generated deposited corresponding output queue oq 
output place lp schedules event firing null message deposited output border transition corresponding oq 
optimistic simulator optimistic simulation engine main task synchronise lps simulating various subnets controlling timestamp message implement functions communication arcs state saving gvt management 
additional data structures required lp output queue contains negative copies messages sent ordered time originals event stack es records state variables past state reconstructed case rollback 
form entries tt tt transition red time yielding new marking types messages lps communicate sending types timestamped messages create tokens tt ct message carrying created tokens lp res leading deposit tokens place lp timestamp message accumulated ring time transition create tokens tt ct rollback mechanism needed indicate previously sent message cancelled 
transition output place nite capacity assigned lp synchronisation communication necessary optimism protocol 
create tokens ct message generated lp transition res accepted lp marking full message rejected 
case lp sends create tokens ct message inform lp incorrect computation done 
force lp rollback time transition re case 
lp behaviour lp processes messages input queue iq checking sign positive negative timestamp messages ordered tt head queue corresponds smallest tt 
messages timestamp inserted iq 
case positive message inserted timestamp order sign negative annihilates positive message iq previously sent 
message timestamp message lp roll back restore valid state 
conservative simulator processing rst event rst message iq generates new events output messages 
step simulation state subnet de ned current marking ring transitions remaining ring times ring events 
lp rolls back rst inserts message iq updates 
state new time restored 
rollback applied aggressive cancellation messages token time annihilated removing sending incorrect computation undone records prematurely pushed es 
optimistic simulation engine applies rollback lazy cancellation 
case reevaluation yields exactly positive messages sent new positive message resent 
prevent unnecessary message transfers possibly new rollbacks lps 
knowledge gvt reduces past state savings es 
message input output queue virtual time gvt discarded 
gvt computation method computation performed fully distributed fashion token passing scheme lps 
time lp receives gvt message performs fossil collection retrieving memory input iq state es output queues 
synchronous simulator synchronous simulation engine derived conservative 
sync lps form simulator share global clock 
events simulated order sequential simulator choose simulating parallel events scheduled time 
causality events preserved lps sending timestamped token messages types create tokens tt number synchronisation timestamped message sent lp lp indicate number actual create tokens messages ready send create tokens tt ct message carrying ct lp res leading deposit tokens place lp sync ecatnet lp executes loop basic operations 
lp computes minimum timestamp events stored event list start fire fire create tokens messages stored iq create tokens 
collectively lps compute minimum values tmin min reduction operation 
global operation performs barrier synchronisation 

event consumption 
events timestamp tmin executed safely relationships 
step internal events start fire fire create tokens stored event list external events stored messages oq 
lp advances clock reach tmin 
message distribution 
lp sends messages generated previous step 
order avoid deadlock situations done phases neighbour informed messages sent create tokens tt number messages messages sent create tokens tt ct 

message reception 
lp receives external events sent lps 
done phases gathering neighbours number messages receive messages received 
messages distribution gathering phases designed way messages generated iteration safely received stored iteration interfering 
simulation experiments section set experiments distributed simulators sequential 
purpose get insight behaviour di erent conditions parameters ecatnet models ways organising lps 
aim show approaches ectively useful evaluation systems modelled 
presentation experiments organised synchronisation mechanism rst cmb da tw lz nally sync 
analysis performance simulator done showing obtained results series 
carry set experiments producer consumer ecatnet model described 
partitioning related ring rule lp set transitions input places local information sucient decide enabling ring transition 
order reduce number messages exchanged lps minimises overhead 
transition enabled res phase ring 
execution time sequential event driven simulator running set model parameters serve point computation speedup values 
orts real event processing distributed simulators exceed communication ort order achieve speedup 
grain size event processing varied evaluate ect execution time simulator msecs 
lp assigned processor resides simulation 
simulation run long duration cycles prevent performance results dependent initial conditions representative real system 
obtained performance results represented form tables execution time speedup curves 
lps pro les simulation engine 
proceed analyse ect parameter model simulator execution time 
convenient parameters grouped studied 
description ecatnet model simulate detailed allow obtain deal insight behaviour lps 
addition performance measures simulated ecatnet model maximum average number algebraic terms places number transitions red simulators measure give information number generated messages events time statistics producer consumer model distributed systems constructed producer consumer systems producer processes generate data consumer processes generated data computation 
producer consumer processes may proceed di erent rates applications unlimited size produce consume buffer ready ready send produce ready ready ready ready consume ready send receive subnet subnet subnet subnet ready ecatnet producer consumer model xed size bu er temporary storage data 
sending data directly consumer producer deposits bu er similarly consumer process requests data bu er directly producer process 
bu er ensure data sent consumer order received producer 
producer process blocked bu er full consumer blocked bu er empty 
describes ecatnet model producer consumer system 
model parameters include produce rate consume rate bu er size rst parameters represent mean rates producer consumer processes generate data third parameter size bu er 
produce rate consume rate represented timed transitions produce lp consume lp respectively 
suppose remaining transitions send lp receive lp immediate 
bu er modelled place bu er lp possible limited capacity 
applications temporary storage data studied rst bu er size unlimited second xed 
parallel programming environment parallel programs implemented network workstations 
considered special case multicomputer node complete workstation interconnection network typically lan local area network 
code written plus mpi message passing interface 
environment provides opportunity designing mimd multiple instruction multiple data spmd single program multiple data programs message passing communication 
message passing paradigm widely certain classes parallel computers specially distributed memory 
mpi eciently portably implemented parallel environments 
distributed simulation algorithms described means message interchange implementation direct way 
pes seq cmb da tw lz sync secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs min secs mins secs table unbounded bu er capacity 
execution times di erent simulators ethernet lan homogeneous workstations share medium provides raw mb data rate 
type workstation sun sparc classic elc characteristics processor mhz bits registers mb physical memory mb virtual memory 
remaining processor processing element pe refers sun sparc machine single processor 
performance results bu er capacity ecatnet model described set subnets 
bu er unbounded represented place bu er lp unlimited capacity 
rewrite rule associated transitions model ic dt ready ready 
ready ready 
ready ready bu receive lp bu ready receive lp ready 
ready ready 
ready receive lp ready scenario simulation follows duration cycles transition ring times exponentially distributed mean produce rate consume rate 
ecatnet model initially marked ready produce ready subnet ready receive ready subnet simulation total transitions red 
execution times di erent simulators shown table 
worth mentioning lp lp lp single iq lp generates ring internal events 
results cmb da conservative simulator provides time statistics time spent processing event event proc sending positive null messages comm 
send receiving positive null messages comm 
lp cmb da term 

blocking comm 
recv comm 
send event proc 
lp tw lz blocking rollback comm 
recv comm 
send event proc 
lp sync sync 
blocking comm 
recv comm 
send event proc 
unbounded bu er capacity 
execution pro les pes number processors cmb da tw lz sync unbounded bu er capacity 
speedup di erent simulators seq grain size ms recv awaiting increments acceptance horizon causality awaiting messages received communication blocking awaiting barrier terminate protocol term 

structure model see lp sends create tokens message lp transition produce res say timestamp tt 
turn lp sends create tokens ready message lp create tokens message lp transition send res timestamp tt transition immediate 
explained transition output border generates null message computing lookahead 
null messages generated transitions type exist model faced deadlock situation mainly lp check channel clocks cc cc modi ed algorithm lp sends null message lp say timestamp cc received lp advance timestamp consume advance increases horizon may allow awaiting create tokens message lp consumed 
case null messages exchanged lp lp 
lps pro les see lp lp terminate simulation earlier lp lp lps wait total execution time synchronisation barrier terminating simulation pes 
perfectly understandable long size bu er xed lp lp block especially lp depositing data bu er faster lp consequently lp manage reception messages input queues iq iq 
behaviour cmb da depends mainly way lps synchronise simulator 
number useful messages positive messages managed simulator ected size model structure scenario simulation 
increment number messages means lps opportunities synchronise doing useful computation 
null messages needed lps block frequently 
say high degree natural synchronisation 
useful messages process lps block null messages needed maintain lps clocks updated 
lps spend real time blocked processing null messages synchronising making progress 
results tw lz optimistic simulator provides time statistics time spent processing event event proc sending positive negative messages comm 
send receiving positive negative messages comm 
recv rolling back rollback awaiting messages received blocking saving states checkpoint managing gvt gvt awaiting barrier terminate protocol term 

simulation lp lp rollback timestamp create tokens ready sent lp lp equal timestamp create tokens previously sent lp lp transition send immediate 
lp lp receive messages lp lp lead rollback lp 
regarding ect synthetic workload performance tw large value grain size event processing may important ect speedup 
cmb da simulator busy wait loop emulates high workload done just needed undone 
hand tw jobs processed speculative way ect undone 
means workload high ect erroneous computations serious drawback better wait consume message just consumed consume undo ects 
results sync synchronous simulator provides time statistics time spent processing event event proc sending positive synchronisation messages comm 
send receiving positive synchronisation messages comm 
recv awaiting messages received blocking barrier synchronising sync awaiting barrier terminate protocol term 

sync showed poor performance 
sync parallelism exploited eciently multiple events occur exactly time 
amount attainable parallelism granularity small useful 
simulator performance su ers barrier synchronisations performed frequently 
situation occurs events occur exactly time load imbalance causes long waiting times synchronisation points 
reasons explain sync poor performance 
firstly lp expect executing start ring internal event create tokens message making density events low 
secondly transitions produce consume buffer ready ready send produce ready ready ready ready consume ready send receive subnet subnet ready subnet ecatnet producer consumer model re time necessarily mean occurs synchronisation step 
highlight suppose lp receives create tokens message timestamp tt lp transition produce res 
global clock equal tt synchronisation step ready receive ready transition send lp res rst tt 
step transitions produce lp receive lp re tt parallel 
step transition consume res tt 
thirdly addition excessive amount time lps spend synchronising calculate broadcast new value global clock additional overhead introduced create tokens tt number messages 
order avoid deadlock situations step simulation lp informs neighbours positive messages sent create tokens tt number messages sends create tokens tt ct 
protocol synchronous create tokens tt number message sent lp neighbours synchronisation step positive messages follow 
tw lz performed better cmb da speedup pes observed respectively simulators 
sync showed poor performance 
bounding bu er capacity case bu er bounded represented place bu er lp limited capacity 
conditional rewrite rule associated transition send lp ready 
ready ready bu bu bu partitioning performance impact addition experiments carried partitioning subnets described previous section wanted test impact di erent alternative partitioning performance simulators simply assigning con icting transitions subnet input places limited capacity ouput places 
partitioning set subnets lp generates ring internal event ring transition send 
transition subnet may output places limited capacity di erent lps 
transition enabled depend marking input places output places limited capacity 
assigning transition output places limited capacity subnet prevents lps exchanging synchronisation additional messages enabling conditions tested locally local information sucient decide enabling ring transition 
simulation run di erent scenarios 
scenario produce rate consume rate produce rate consume rate 
scenario produce rate consume rate produce rate consume rate 
scenarios duration simulation cycles capacity bu er data data 
producer fast sender continuously data faster consumer absorb producer slow sender continuously data slower consumer absorb 
results experiment total transitions red producer idle time consumer 
execution times simulators running scenario shown table distributed simulators perform better partition partition 
partition pes seq cmb da tw lz sync cmb da tw lz sync secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs mins secs min secs min secs mins secs mins secs mins secs mins secs table bounded bu er capacity 
experiment 
execution times partitions cmb da sync time transition send lp input conditions enabled presence token place ready send sends message lp request deposit lp cmb da lp cmb da blocking comm 
recv comm 
send event proc 
lp tw lz lp tw lz blocking rollback comm 
recv comm 
send event proc 
lp sync lp sync sync 
blocking comm 
recv comm 
send event proc 
bounded bu er capacity 
experiment 
execution pro les partitions tokens place bu er deposit request message say timestamp tt 
checking marking place bu er lp replies sending deposit request ack message specifying timestamp time deposit possible 
time depends mainly enabling conditions transition receive res destroys tokens place bu er consequently new deposit possible place 
worth mention communication time lp lp blocking time lp lp quite important especially cmb da 
simulators need deposit request deposit request ack messages information concerning place bu er marking available locally lp overhead substantially reduced 
results important event processing time lp 
tw lz protocol optimistic transition send res soon input conditions enabled lp really care actual marking place bu er lp sends create tokens message leading deposit token place 
receiving message lp checks marking place bu er 
deposit result capacity ow message accepted deposit performed 
case deposit exceeds bu er handle lp send negative message asking lp rollback incorrect computation done 
message lp specify time ring place send take place say tt 
situation similar ow control needed force sender frequently give receiver chance 
rollback lp may result rollback lp 
lp resumes execution sending new create tokens message tt 
lp prevented receiving create tokens message result ow place bu er capacity leading rollback lp information concerning place bu er marking available locally 
results reduction overhead 
frequent sending deposit request deposit request ack messages partition cmb da performed better tw lz manage cascaded rollbacks lp lp speedup pes observed respectively simulators 
tw lz performed better partition speedup pes observed respectively cmb da tw lz 
sync showed poor performance 
results experiment total transitions red consumer idle time producer 
execution times simulators running scenario shown table simulators perform better partition partition tw lz 
cmb da sync observations 
time transition speedup number processors cmb da tw lz sync speedup number processors cmb da tw lz sync bounded bu er capacity 
experiment 
speedup seq partition partition grain size ms partition pes seq cmb da tw lz sync cmb da tw lz sync secs mins secs mins secs mins secs mins secs mins secs mins secs min secs mins secs mins secs mins secs min secs mins secs min secs min secs mins secs mins secs min secs mins secs table bounded bu er capacity 
experiment 
execution times partitions send lp input conditions enabled presence token place ready send sends deposit request message lp say timestamp tt 
scenario lp replies deposit request ack message specifying deposit possible tt tokens available place bu er 
worth mention communication time lp lp blocking time lp lp quite important especially cmb da 
tw lz expect rollbacks lp scenario surprised see occur 
reason lp keeps accepting create tokens messages lp cause ow place bu er late reception create tokens ready messages lp deposit place ready receive 
arrival messages prevents transition receive re time causes rollbacks 
lp sends negative message asking lp rollback incorrect computation speci es time ring transition send take place say tt 
rollback lp may result rollback lp 
lp resumes execution sending new create tokens message tt 
lp cmb da lp cmb da blocking comm 
recv comm 
send event proc 
lp tw lz lp tw lz blocking rollback comm 
recv comm 
send event proc 
lp sync lp sync sync blocking comm 
recv comm 
send event proc 
bounded bu er capacity 
experiment 
execution pro les partitions speedup number processors cmb da tw lz sync speedup number processors cmb da tw lz sync bounded bu er capacity 
experiment 
speedup seq partition partition grain size ms partition tw lz performed better cmb da manage frequent sending deposit request messages lp reply messages lp deposit request ack messages responses positive ring transition send took place time speci ed lp request 
speedup pes observed respectively tw lz cmb da respectively 
cmb da performed better tw lz partition speedup pes observed 
sync showed poor performance 
addressed problem developing conservative optimistic synchronous distributed simulation techniques analyse 
implementation protocols described prototypes developed run network workstations 
compared attempts parallel distributed simulation petri nets methods di er points high level algebraic nets state net distributed simulation techniques respect timed transitions places limited capacity 
experience distributed discrete event simulation strategies study producer consumer system modelled ecatnet model 
experiments executed distributed simulators got insight behaviour di erent conditions 
characterised structure parameters ecatnet model synchronisation strategy ways organising simulator scenario simulation uence achieved performance 
partitioning strongest uence performance simulators 
initial ecatnet model partitioned eciently subnets reasons avoid overhead due distributed con ict resolution algorithm cmb da tw lz sync assigning set con icting transitions input places subnet models places limited capacity avoid overhead due synchronisation deposit request deposit request ack messages cmb da sync possible rollbacks tw lz 
experience cmb da tw lz positive experience sync quite discouraging 
experiments cmb da tw lz performed better sync 
performance tested sync implementation poor introducing series optimisations 
sync exploits eciently parallelism inherent ecatnet models right tool kind parallel environment study 
sync advantage simple implementation environments cmb da applicable presence loops zero timestamp increment 
characteristic sync simple algorithm complicated memory management strategies tw 
collection workstations ethernet network run experiments 
cost synchronisation high due slow communication infrastructure tcp ip ethernet 
sources overhead sender cpu network routers receiver cpu lead poor performance distributed simulators compared sequential 
cmb da tw lz considered suitable approaches distributed simulation 
main requirement remains fast message passing mechanism better performance 
ajmone marsan balbo conte 
modelling generalized stochastic petri nets 
john wiley sons 
ammar deng 
parallel simulation petri nets spatial decomposition 
proceedings ieee international symposium circuits systems pages singapore jun 

algebraic petri nets supervisor evaluation discrete event systems 
borne editors proceedings cesa computational engineering systems applications pages april 
ieee 
de 
incremental speci cation power plant control systems class modular algebraic nets 
de michelis diaz editors proceedings th international conference application theory petri nets pages torino italy jun 
lecture notes computer science springer 

specifying communication software osi framework 
lauer editors proceedings international conference computing information pages toronto canada may 
ieee 

protocol speci cation 
networking distributed computing 
hermes paris 

reusing modules protocol speci cation 
journal systems software nov 

modeling object systems hidden sorted 
proceedings mascots pages durham north carolina jan 
ieee 
ferscha 
distributed simulation timed petri nets exploiting net structure obtain eciency 
ajmone marsan editor proceedings th international conference application theory petri nets pages chicago illinois jun 
lecture notes computer science springer verlag 
ferscha 
performance comparable design ecient synchronization protocols distributed simulation 
proceedings mascots pages durham north carolina jan 
ieee 
cui turner 
new approach distributed simulation timed petri nets 
proceedings scs european simulation multiconference pages budapest hungary jun 
society computer simulation 

queueing networks versus petri nets performance case studies distributed simulation 
proceedings cnp colloque national sur la pages algeria may 

distributed simulation high level algebraic petri nets 
phd thesis computing science department university glasgow uk jul 
gilles mackenzie 
performance comparison high level algebraic nets distributed simulation protocols 
journal systems architecture 
ehrig mahr 
fundamentals algebraic speci cations 
eatcs monographs theoretical computer science springer verlag 
ferscha 
parallel distributed simulation discrete event systems chapter pages 

fujimoto 
parallel discrete event simulation 
communications acm oct 
ghezzi mandrioli uni ed high level petri net formalism time critical systems 
ieee transactions software engineering feb 
je erson 
virtual time 
acm transactions programming languages systems jul 
jensen rozenberg ed 
high level petri nets 
springer verlag berlin 
yew 
parallel discrete event simulation shared memory multiprocessors 
editor proceedings th annual simulation symposium pages louisiana 
ieee computer society press 

du dans les alg de son application dans les syst emes de production 
editors proceedings pages france jun 
hermes 
french 
meseguer 
rewriting logic semantic framework concurrency progress report 
montanari sassone editors proceedings th international conference concurrency theory pages pisa italy aug 
lecture notes computer science springer 
message passing interface forum 
mpi message passing interface standard 
technical report cs university tennessee jun 
misra 
distributed discrete event simulation 
acm computing surveys mar 
murata 
petri nets properties analysis applications 
proceedings ieee apr 
nicol mao 
automated parallelization timed petri net simulations 
journal parallel distributed computing 
nicol roy 
parallel simulation timed petri nets 
nelson clark editors proceedings winter simulation conference pages phoenix az dec 
ramamoorthy ho 
performance evaluation asynchronous concurrent systems petri nets 
ieee transactions software engineering se sep 
reisig 
petri nets algebraic speci cations 
theoretical computer science 

event ordering parallel discrete event simulation 
proceedings th workshop parallel distributed simulation pages atlanta ga may 
acm ieee scs 
sch 
ecient simulation thor nets 
de michelis diaz editors proceedings th international conference application theory petri nets pages torino italy jun 
lecture notes computer science springer 
thomas zahorjan 
parallel simulation performance petri nets extending domain parallel simulation 
nelson clark editors proceedings winter simulation conference pages phoenix az dec 

cluster computing chapter pages 


parallel system speci cations coloured petri nets algebraic speci cations 
rozenberg editor advances petri nets pages 
lecture notes computer science springer verlag 
editor 
parallel distributed computing handbook 
mcgraw hill 

