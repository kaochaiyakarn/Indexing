aaaaa guaranteeing safe destructive updates type system uniqueness information graphs smetsers erik barendsen marko van eekelen rinus plasmeijer university nijmegen type system graph rewrite systems uniqueness typing employs usage information deduce object unique certain moment locally accessible 
type function specified function requires unique argument object 
correctness type assignment guarantees external access original object take place 
type system proven correct 
illustrate power system defining elegant quicksort algorithm performs sorting situ data structure 

operations complex data structures arrays implemented efficiently allowing form destructive updating 
convenience speak functions destructively arguments 
case graph implementations functional languages precautions destructive usage dangerous level underlying model computation appears arguments shared functions 
specific cases destructive updates safe known access original object necessary 
call object locally unique 
sharing update analysis find spots destructive updates possible 
functions require destructive update done contexts function applied 
updating functions functions file array manipulation interfacing existing fortran libraries window functions require efficient storage management situ sorting large data structure 
requirement explicitly specified type system 
presents type system related linear types uniqueness types 
uniqueness type system defined graph rewrite systems 
employs usage information deduce uniqueness attribute assigned type subgraph 
type uniqueness attribute called unique type 
department computer science toernooiveld ed nijmegen netherlands mail cs kun nl fax 
functions require object unique type type system guarantees external access original object possible anymore 
depending object function body information destructively update unique object 
compiler exploit uniqueness types generating code automatically updates unique arguments possible 
important consequences time space behaviour functional programs 
type system implemented lazy functional graph rewriting language concurrent clean 
far implementation arrays efficient high level library screen file see 

structure follows graph rewrite systems briefly introduced standard terminology section 
notion typing defined graph rewrite systems section 
section describes analysis provides important information necessary assign uniqueness attributes 
uniqueness attributes assigned defined section 
extension algebraic type definitions section 
correctness type system proven section 
section illustrates reasoning programs uniqueness types done section discusses related 

graph rewriting term graph rewrite systems introduced barendregt 

section summarizes basic notions term graph rewriting barendsen smetsers 
graphs objects interest directed graphs node specific label 
number outgoing edges node determined label 
sequel assume basic set nodes infinite usually takes sigma possibly infinite set symbols arity 
definition 
labeled graph hn sigmai triple hn symb set nodes symb sigma symb symbol node args length args arity symb 
args specifies outgoing edges th component args denoted args 
ii rooted graph quadruple hn symb args ri hn symb labeled graph node called root graph 
iii collection finite rooted labeled graphs hn sigmai indicated convention 
range nodes range rooted graphs 
ii rooted graph components referred symb args respectively 
iii simplify notation usually write 
definition 
path graph sequence nodes gamma edge specifications args 
case said path notation 
ii reachable notation path 
definition 
graph subgraph notation rooted graph hn symb args ni fm mg symb args restrictions symb args respectively 
graph rewriting section introduces notation connected graph rewriting 
complete operational description reader referred papers mentioned earlier 
rewrite rules specify transformations graphs 
rewrite rule represented special graph containing roots 
roots determine left hand side pattern right hand side rule 
variables represented special empty nodes 
rewrite rule 
graph rewritten applicable pattern matches match mapping pattern subgraph preserves node structure 
combination rule match called redex redex determined graph rewritten structure right hand side rule involved 
done steps 
firstly graph extended instance right hand side rule 
connections new part original graph determined root redex redirected root right hand side 
unreachable nodes removed performing garbage collection 

definition 
special symbol sigma arity 
graph 
set empty nodes notation ffi collection ffi fn symb ii set non empty nodes interior denoted ffl ffi ffl 
iii closed ffi 
objects computations performed closed graphs auxiliary objects defining graph rewrite rules 

definition 
term graph rewrite rule rule short triple hg ri possibly open graph called left root right root ffl ffi ffi 
ii symb said rule 
iii left linear tree 
condition expresses left hand side rewrite rule just variable 
condition states variables occurring right hand side rule occur left hand side 
notation 
write respectively 

definition 
graphs 
match function ffl symb symb args args case write 
definition 
graph set rewrite rules 
redex just redex tuple delta hr 
ii result rewriting redex delta denoted delta just 
iii delta hr redex 
redex root delta notation delta defined delta 
term graph rewrite systems collection graphs set rewrite rules combined term graph rewrite system 
special class called orthogonal graph rewrite systems subject investigations 

definition 
term graph rewrite system tuple hg ri set rewrite rules set closed graphs closed reduction 
ii left linear left linear 
iii regular redexes pairwise disjoint 
iv orthogonal left linear regular 
shown large class orthogonal called interference free systems church rosser property holds see barendsen smetsers 
notation 
hg ri 
sigma denotes symbols sigma appear set function symbols notation sigma symbols exist rule sigma sigma sigma denotes set data symbols 
typing graphs section define notion simple type assignment graphs type system traditional systems functional languages 
approach similar introduced bakel 

meant illustrate concept classical typing graphs 
section different typing system described 

definition 
set type variables set type constructors arity write arity 
set graph types defined inductively follows 
ff ff oe oe oe oe oe oe ii set symbol types defined oe oe oe oe oe oe arity symbol type introduced rule 
arity convention 
sequel ff fi ff range type variables oe range function types 

definition 
substitution function 
ii substitution oe result applying oe notation oe inductively defined follows 
ff ff oe oe oe oe oe oe oe oe oe oe 
iii oe instance notation oe exists substitution oe 
iv oe isomorphic oe oe substitutions usually identify isomorphic types types result consistent renaming type variables 
regard types type schemes 
applicative graph rewrite systems symbols fixed arity 
consequently impossible functions arguments yield functions result 
higher order functions modeled associating symbol arity ary constructor adding special apply rule function symbol ap supplying new constructors arguments 
example combinatory logic cl expressed xyz xz yz xy modeled self explanatory linear notation 
ap ap ap ap ap ap ap ap ap note new constructor symbol introduces new rule ap 

definition 
hg ri 
sigma arity 
symbol sigma called curry variant 
ii set sigma sigma denotes set curry variants sigma arity 
iii say curry complete contains ap rule symbol arity described ap rules 
iv principal node notation symb ap node containing assumption 
assume curry complete 
assigning types symbols rest section describe types assigned graphs fixed type assignment function data symbols called environment currying imposes restriction type environments say type curry variant related type assigned assume standard type symbol ap declared 

definition 
oe oe oe 
function type 
curried version oe notation oe oe oe 
oe 
delta delta delta oe delta delta delta ii type environment function sigma 
ff ap ff fi ff fi algebraic data types consider new basic types introduced called algebraic type definitions type definitions possibly infinite set constructor symbols associated new type general form algebraic type definition ff oe oe ff oe variables appearing oe contained ff 
assume fresh constructor symbol 
type lists obtained follows 
list ff cons ff list ff nil set algebraic type definitions induces type environment ea constructors introduced specifically th constructor defined algebraic type ea type ea oe ff convention 
set type definitions 
sigma denotes constructor symbols defined definition assumption 
sequel assume constructors curried variant symbol introduced algebraic type definition sigma sigma sigma assigning types graphs 
definition 
hn symb graph 
type assignment typing function 
ii typing function type notation defined arity symb args 
iii environment 
typing exists substitution symb 
example 
environment containing type declarations 
list fi fi cons ff list ff list ff nil list ff int graph typing indicated 
cons nil int list int int list int 
definition 
hg ri set algebraic type definitions 
furthermore environment 
typable exist typing meets requirements 

symb ii typable exists environment extending ea typable condition states left root node typed exactly type assigned root symbol environment 
contrasts requirement applicative occurrences function symbol 
notice condition provides abovementioned way typing rewrite rules essentially mycroft type assignment system lambda calculus see mycroft 
milner type assignment system see milner obtained stating condition occurrences symbol rule possible formulate conditions typing preserved reduction cf 
bakel 

go 

usage analysis approach classification unique access nodes graph count node 
practice refined analysis possible 
achieved account specific evaluation order dictated specific reduction strategy 
standard evaluation conditional statement causes evaluation part subsequently evaluation 
single access node combined single access result unique access important note property holds execution proceeds chosen strategy may disturbed allows reduction arbitrary redexes 
consider classification function arguments 
assumption 

sigma say arity assume lg divided disjoint argument classes ii arguments constructor sigma belong single class intended meaning arguments occurring evaluated argument preliminaries groups alternate arguments actual evaluation arguments belonging different groups evaluated 
furthermore assumed preliminaries graph released graph accessed alternate arguments 


assume argument classification consistent reduction rule way arguments left hand side passed functions corresponding right hand side conflict respective argument classifications 
describe weighted count analysis argument classification 
argument dependency functions translated dependency relations nodes graphs 

definition 
symbol write belong argument class 
ii convenience denotation extended paths starting node 

symb symb 
definition 

paths joined notation disjoint discarding node 
ii relations defined intuitively indicates accessed indicates appear common argument class function accessed order 
arc graph labeled called attribute 

definition 
set attributes ffi omega gamma get intuition attributes convenient consider objects accessed attributed fi local allowed destructively objects accessed remain unaffected 
say symbol fi stands write access omega read access 
simple approach counts place fi arcs pointing node degree omega 
refined approach described 

definition 
set accesses notation acc acc args ng 
definition 
arcs annotated function length arity symb defined follows 
say acc omega fi note definition completely specifies function 

example 
standard classification arguments conditional specific assumptions symbols assignments 
formulate redexes allowed contracted terms function 

definition 
local ii delta hr redex say delta applicable fi args local intention redexes chosen strategy applicable 

uniqueness typing uniqueness types analysis described far takes reduction strategy account particular structure rewrite rules 
attributes arguments may change reduction fi attribute certain argument may change omega redex contracted 
function destructively uses arguments guaranteed moment evaluated argument fi attribute 
way ensure require property holds moment application built remains valid reduction 
aim rest type system abovementioned analysis performed 
fact function may arguments destructively expressed uniqueness type 
syntax types definition 

definition 
set uniqueness types defined inductively ffl theta theta ffl ii set ffl unique types defined ffl fu ffl ffl ug theta unu ffl 
iii set uniqueness symbol types defined constants ffl theta represent unique potentially multiple respectively 
arrows annotated distinguish unique function objects unique objects specified structure nonunique function objects general nonunique objects 
example illustrated 

example 
suppose upd denotes binary function destructively updates argument second argument 
intended type upd form ffl theta natural require uniqueness updated object propagated 
arrives type upd 
upd ffl theta ffl partial application upd unique expression results function ap upd may copied 
copying allowed applications copy function allowed update argument destructively illustrated expression ap upd assuming rule pair ap ap obviously unwanted 
type system type expression ap upd theta ffl ffl prevent copied 
context nonunique nonfunctional type expected harmless offer unique object 
gives rise subtype hierarchy specifying types convertible coerced types 
coercions defined ordering depending demanded offered types context way offered object accessed 
information graphs taken account graphs wrongly accepted 
reason define coercion relation depends value corresponding part graph accessed 

definition 
orderings fi omega defined follows 
coercions fi generated ffl fi ffl theta fi theta ffl fi theta fi fi ffl fi ffl theta fi theta ii coercions omega 
theta omega theta ffl omega theta fi fi theta omega theta type variables notion type instance adjusted slightly 
intuitively type instance type structure precise definition 

definition 
relation defined ffl ffl ffl ffl theta theta theta theta ffl ffl theta theta say type instance currying seen cases dangerous copy functions 
prevent dangerous function copied distinguished safe functions typing arrow type supplied ffl attribute 
observation symbol applied unique argument may copied anymore see example leads currying rule 

definition 
uniqueness attribute notation defined follows 
ffl ffl theta ffl ii cumulative uniqueness attribute notation defined ffl ffl theta 
iii set curried versions notation theta 
delta delta delta gamma delta delta delta ffl 
delta delta delta gamma delta delta delta effect applying possibly curried function unique argument result application unique 
say uniqueness information propagates upwards 
correspondence symbol arity curry variant ap rule 
contrast ordinary type system section ap different instances type 
generic functions possible allow type environment contain type symbol 

definition 
applicative uniqueness type environment function sigma 

ffl thetag ap theta theta theta theta theta ffl theta theta ffl theta theta theta ffl theta ffl ffl theta ffl ffl ffl theta ffl theta theta theta ffl ffl theta ffl theta theta ffl ffl theta ffl ffl ffl ffl ffl ffl fa ag 
assigning uniqueness types graphs assigning types graphs done ways 
way comparable standard type assignment section 
second way attributes graph coercions taken account 

definition 
hn symb graph environment 
furthermore 
function type notation arity symb args 
ii uniqueness typing exists symb iii function supplies attributes 
weighted uniqueness typing exist symb args arity symb 
iv weighted uniqueness typing type notation simply 

definition 
hg ri set algebraic type definitions 
furthermore environment 
uniqueness typable symb exist function uniqueness typing weighted uniqueness typing fi called uniqueness typing 
ii uniqueness typable exists environment extending ea uniqueness typable 
iii uniqueness typable exists uniqueness type environment extending ea uniqueness typable 
algebraic type definitions allows pattern matching function definitions wrongly concluded part pattern unique 
appears example ffl theta constructor theta ffl rule reason require data symbols appearing pattern rewrite rule obey upward propagation rule say symbol expects unique arguments application unique 
example typed ffl ffl rejecting type 
symbols appearing function patterns constructors introduced algebraic type definition upward propagation requirement obtained making assumption 
assumption 
sigma uniqueness type ffl ffl consequently data object contain unique subparts object unique 
fact symbol may environment type useful constructors 
remember example algebraic type definition lists 
list ff cons ff list ff nil list spine unique obtained typing cons cons theta ffl ffl list unique elements specified assuming cons ffl ffl ffl notice propagation rule uniqueness elements implies uniqueness spine 
allowing types cons simultaneously type system may cause type conflicts 
rule cons typed ffl ffl wrong illustrated application cons cons nil way solve problem distinguish different types constructors introducing uniqueness type constructors give example 

example 
extended system cons typed follows 
cons ffl ffl list ffl ffl list ffl cons theta ffl list theta ffl list theta spine unique list typed ffl list theta list containing unique elements typed ffl list ffl 
extension elaborated 
prevent incorrect type assignments assumption type environments 
assumption 
uniqueness type environment constructor types chosen way type conflicts mentioned occur 

correctness order show uniqueness typing preserved reduction analysis respect function needed 
focus relation uniqueness typing rewrite rule usage information graph applying rewrite rule 
merely give outline proof 
details appear separately 
fix orthogonal hg ri 

definition 
delta hr redex 
delta type correct uniqueness typing say args ffl fi ii delta type correct delta type correct note definition applicable see formulates locality condition direct arguments 
result extends property nodes matching fragment graph 

lemma 
delta applicable type correct 
ffl local proof 
ordinary reduction rules follows propagation criterion constructors regularity ap reduction rules specific form curry types predefined types ap imply result 

lemma 
acc 
suppose cycle containing omega proof 
examine definition 

proposition 
delta hr applicable say delta suppose delta type correct ffl acc delta acc proof sketch 
case distinction 
case 
delta 
delta fresh acc delta acc redirection 
case 
delta 
ffl follows type correctness lemma local 
acc 
acc 
want show easily seen 
redirection garbage collection 
omega acc lemma contradicting type correctness delta 
effect redirection account follows acc acc 

proposition 
delta applicable type correct say delta 
suppose ffl acc fi fi ii suppose ffl acc fi fi denotes node corresponding proof sketch 
suppose fi 
proposition consider acc determine causing omega redirection taken place 
occur cycle contradicting lemma 
ii case distinction distinguishing possible positions lemma case 
proposition 
delta applicable say delta acc fi fi proof sketch 
suppose contradiction fi omega suppose caused 
acc say situation occur parts contain new nodes new arcs 
distinguish cases 
delta arrives conflict argument classification cf 

assuming hand delta delta leads contradiction fi 
reduction uniqueness typed graphs results imply subject reduction result typing remains correct reducing applicable redexes 

lemma 
suppose uniqueness typable 
delta applicable delta type correct 
proof 
obvious 

lemma 
fi omega omega ii suppose fi exists fi 
theorem 
suppose uniqueness typable uniqueness typing 
furthermore delta delta applicable 
exists uniqueness typing 
proof 
extended uniqueness typing defining new nodes type assignment delta proposition ii 
type assigned nodes remains correct follows propositions ii lemma distinguishing different kinds nodes 
reasoning programs uniqueness types uniqueness types contexts 
wants interface functional languages imperative programs assign unique type arguments destructively updated imperative function 
way file array updating incorporated loosing referential transparency 
applications mind may destructive behaviour function explicitly programmed non functional programming language 
course possible compiler generate destructive updates pure functions defined functional language 
great importance improving time space behaviour functional programs 
example functional programming language assumed uniqueness types assigned underlying graph rewrite system derived directly program removing syntactical sugar 
language uses underlining indicate type uniqueness attribute ffl type denotes list type 
rule denotes nil element denotes cons 
denotes standard tupling 
denotes list type unique spine 
qs qs qs hd tl qs left hd qs right left right split tl hd split 
split split hd tl hd left right hd left hd right left right split tl compared imperative quick sort algorithm functionally written quicksort algorithm qs disadvantage split function construct new lists result 
function split defined spine unique list construction new cons nodes done updating old ones 
looking actual difference old cons node argument split hd tl new cons node constructed hd left hd right deduced tail cons node updated 
means split function create new cons nodes rearranging tail pointers way ordered list obtained 
situ updating essential able handle large data structures efficiently 
respect updating run time behaviour functional program similar imperative counterpart 
specified program require relatively large recursion stack 
split qs transformed tail recursive version program transformations eliminate construction intermediate data structures 
tail recursion usually translated loop machine code level 
applied transformation maintains uniqueness types 
resulting elegant functional program compiler generate code efficient code imperatively written quick sort algorithm 
example shows uniqueness types solve challenges set dagstuhl seminar functional languages johnsson 
qs qs tail tail qs hd tl tail qs left hd qs right tail left right split tl hd split 
split left right left right split hd tl left right split tl hd left right hd split tl left hd right reasoning programs implicitly certain assumptions generated code 
assumed updating done possible 
specifically assumed updates take place objects type 
general kinds assumptions uniqueness type information storage behaviour functional program deduced improved program transformation 
important assumptions formalised 
compiler obey resulting formal rules reasoning time space behaviour functional program independent specific compiler 
programmer deduce worthwhile uniqueness types cases efficiency behaviour critical 
reasoning relatively simple applied successfully design time space efficient purely functional programs kinds real life applications 

related update problem addressed linear types wadler guzm hudak 
papers lambda calculus basic model requiring indirect kind analysis 
proposed approach graphs directly objects consideration 
system uniqueness types incorporates solution questions raised wadler 
uniqueness types sense orthogonal standard type systems functional languages 
uniqueness type system successfully support high level efficient array handling 
experience uniqueness types shown important change functional languages academic exercises reallife programming ranging window text editor relational database 
function section inspired analysis poly lam st guzm hudak geared efficient array manipulation 
wadsworth shared lambda calculus involving partly copying lambda terms functions shared 
certain sense proposed uniqueness types generalisation single threadedness analysis general graph rewriting context 
van groningen plasmeijer 
high level specification functional languages proc 
international workshop functional languages glasgow uk springer verlag 
bakel van smetsers brock 
partial type assignment left linear term rewriting systems proc 
th trees algebra programming caap rennes france springer verlag lncs pp 

barendregt van eekelen kennaway plasmeijer sleep 
term graph reduction proc 
parallel architectures languages europe parle eindhoven netherlands springer verlag lncs ii pp 

barendsen erik smetsers 
graph rewriting copying technical report university nijmegen 
guzm juan paul 
hudak 
single threaded polymorphic lambda calculus proc 
logic computer science lics ieee computer society press pp 

johnsson thomas 

discussion summary analysis proc 
functional languages optimization parallelism dagstuhl germany dagstuhl seminar pp 

milner 

theory type polymorphism programming journal computer system sciences 
mycroft 

interpretation optimising transformations applicative programs dissertation university edinburgh 
wadler 

linear types change world proc 
working conference programming concepts methods 
