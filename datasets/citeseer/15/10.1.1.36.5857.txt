linear approximation shortest superstrings avrim blum mit tao jiang mcmaster ming li waterloo john tromp cwi yannakakis bell labs consider problem collection strings 
find shortest string appears substring consecutive block problem known np hard simple greedy procedure appears quite routinely dna sequencing data compression practice repeatedly merge pair distinct strings maximum overlap string remains 
denote length optimal superstring 
common conjecture states greedy procedure produces superstring length fact previous nontrivial bound known polynomial time algorithm log result 
show greedy algorithm fact achieve constant factor approximation proving upper bound 
furthermore simple modified version greedy algorithm show produces superstring length 
show superstring problem max snp hard implies polynomial time approximation scheme problem 
key words shortest common superstring approximation algorithms 
supported part nsf graduate fellowship 
part done author visiting bell labs 
address lab computer science mit technology sq cambridge ma 
mail avrim theory lcs mit edu supported part mcmaster university nserc operating ogp 
address department computer science mcmaster university hamilton ont canada 
mail jiang mcmaster ca supported part nserc operating ogp ogp 
address department computer science university waterloo waterloo ont canada 
mail mli waterloo edu supported part nserc ogp author visiting university waterloo 
address cwi box ab amsterdam netherlands 
mail tromp cwi nl address room bell labs mountain ave murray hill nj 
mail research att com finite set strings find shortest common superstring 
want shortest possible string string set substring question np hard 
due important applications data compression dna sequencing efficient approximation algorithms problem indispensable 
give example dna sequencing practice 
dna molecule represented character string set nucleotides fa tg 
character string ranges symbols long simple virus approximately theta symbols human 
determining representation different molecules sequencing molecules crucial step understanding biological functions molecules 
current laboratory methods small fragments chosen unknown locations bases sequenced time 
hundreds thousands millions fragments assembles superstring representing molecule 
simple greedy algorithm routinely cope job 
algorithm call greedy repeatedly merges pair distinct strings maximum overlap string remains 
open question greedy approximates shortest common superstring common conjecture states greedy produces superstring length times optimal 
different point view li considered learning superstring randomly drawn substrings valiant learning model 
restricted sense shorter superstring obtain smaller number samples needed infer superstring 
finding approximation bound shortest common superstring implies efficient learnability dna sequences 
linear approximation result improves li log approximation multiplicative logarithmic factor 
tarhio ukkonen turner established performance guarantees greedy respect called compression measure 
basically measures number symbols saved greedy compared plainly concatenating strings 
shown optimal solution saves symbols greedy saves symbols 
general implies performance guarantee respect optimal length best case says greedy produces superstring length half total length strings 
show superstring problem approximated constant factor fact algorithm greedy produces superstring length 
furthermore give simple modified greedy procedure mgreedy achieves bound algorithm mgreedy show achieves 
rest organized follows section contains notation definitions basic facts strings 
section describe main algorithm mgreedy proof 
proof forms basis analysis sections 
mgreedy improved section 
give bound greedy section 
section show superstring problem max snp hard implies exist polynomial time approximation scheme superstring problem 
preliminaries fs 
set strings alphabet sigma 
loss generality assume set substring free string substring common superstring string substring string written opt interchangeably length shortest common superstring goal find superstring length close opt possible 
example 
assume want find shortest common superstring words sentence alf ate half alpha 
word alf substring half immediately eliminate 
set words ate half alpha trivial superstring length simply concatenation substrings 
shortest common superstring length saving characters previous compression 
looking greedy example see start largest overlaps half producing 
choices single character overlap lead shortest superstring sense giving superstring character longer 
fact easy give example greedy outputs string twice long optimal instance input fc ab ba ab cg 
strings necessarily distinct longest string uv vw non empty strings call jvj amount overlap denote ov 
furthermore called prefix respect denoted pref 
call juj distance denote 
string uvw pref length jtj jsj jtj gamma ov shortest superstring appears strictly called merge abbreviate pref simply pref ov ov respectively 
overlap string called self overlap 
example self overlap string overlap ov pref 
string ov shows overlap limited half total string length list strings 
define superstring hs 
string pref pref delta delta delta pref gamma shortest string 
appear order string 
superstring substring free set order defined substrings start position substring starts define iteration greedy invariant holds claim distinct strings greedy set strings substring proof 
initially strings claim follows fact substring free 
suppose invariant invalidated merge strings string ht say substring 
substring properly contain piece overlap ov juj 
ov ov contradiction 
greedy variation mgreedy introduce chooses having maximum overlap overlap ov fact equals ov result merge 

say greedy orders substrings finding shortest superstring substrings appear order 
rephrase terms permutations 
permutation set 
mg hs 
shortest superstring substrings appear total order say 
equal consider traveling salesman problem weighted directed complete graph derived show achieve factor approximation tsp graph yielding factor approximation shortest common superstring problem 
graph vertices 
mg edges mg 
take weight overlap distance graphs 
function distance edge weight obtain distance graph 
graph similar considered turner 
take overlap ov weight function obtain overlap graph 
call string associated vertex pref pref string associated edge 
examples draw overlap graph distance graph previous example ate half alpha edges shown overlap 
note sum distance overlap weights edge length string notice tsp opt gamma ov opt tsp cost minimum weight hamiltonian cycle reason turning superstring hamiltonian cycle overlapping substring saves cost charging full length 
define notation dealing directed cycles call strings equivalent cyclic shifts strings uv vu 
directed cycle vertices 
gamma order define strings equivalence class pref pref delta delta delta pref gamma strings rotation starting pref string pref delta delta delta pref gamma subscript arithmetic modulo say equivalence class periodicity invariant rotation characters uv vu juj 
obviously periodicity jsj 
moment reflection shows minimum periodicity equal number distinct rotations size equivalence class denoted card 
furthermore easily proven periodicities periodicity gcd 
see 
follows periodicities multiple minimum 
particular jsj multiple card 
general denote cycle vertices 
order delta delta delta weight cycle equal jsj strings 
convenience say vertex cycle preliminary facts cycles delta delta delta gamma cycles string denotes string consisting copies concatenated 
claim string substring strings sufficiently large proof 
induction prefix pref delta delta delta pref gamma addition modulo 
djs kr get prefix pref delta delta delta pref kr gamma kr strings substring strings 
claim fs 
jr substring string sufficiently large exists cycle weight jsj containing strings 
proof 
infinite repetition string appears substring jsj characters 
naturally defines circular ordering strings fs 
jr strings successive distances sum jsj 
claim superstring hs delta delta delta gamma substring strings proof 
string hs 
gamma clearly substring hs 
gamma definition equals pref delta delta delta pref gamma strings claim strings strings exists third cycle weight containing vertices proof 
follows claims 
claim exists cycle weight card strings containing vertices proof 
prefix length card strings string strings 
periodicity arguments juj divides jsj juj 
follows string strings substring claim lemma proved 
gives graphical interpretation 
vertical bars surround pieces string match showing possible overlap gamma giving upper bound gamma 
lemma gamma strings necessarily different ov ov gamma ov ov gamma ov ov gamma gamma gamma 
choice merging gamma merging gamma best choice contains pair largest overlap 
conditions lemma known monge conditions context transportation problems 
sense lemma follows observation optimal shipping routes intersect 
string context transporting items ends substrings fronts substrings 
gamma oe gamma oe oe strings overlaps delta opt bound modified greedy algorithm set strings associated graph 
finding minimum weight hamiltonian cycle weighted directed graph general hard problem polynomialtime algorithm similar problem known assignment problem 
goal simply find decomposition graph cycles vertex exactly cycle total weight cycles minimized 
cyc weight minimum assignment graph cyc tsp opt 
proof modified greedy algorithm mgreedy finds superstring length delta opt proceeds stages 
show algorithm finds optimal assignment opens cycle single string concatenates strings performance ratio 
show theorem fact particular graphs greedy strategy find optimal assignments 
result somewhat different form theorem hoffman 
consider algorithm finding superstring strings algorithm concat cycles 
input create graph find minimum weight assignment collection cycles fc 

cycle delta delta delta hs 
string obtained opening arbitrarily chosen 
string length js claim 
concatenate strings produce resulting string output 
theorem algorithm concat cycles produces string length delta opt 
proving theorem need preliminary lemma giving upper bound amount overlap possible strings different cycles lemma implied results 
lemma cycles minimum weight assignment overlap 
proof 
strings strings 
minimum weight assignment know claim find lighter assignment combining cycles addition claim card 
suppose overlap string juj 
denote substring starting th symbol th claim large large 
conclude assume loss generality 
shows periodicity card contradicts fact card minimum periodicity 
proof theorem 
fc 
optimal assignment cyc opt 
second lower bound opt determined follows cycle denote length longest string lemma consider longest string cycle merge optimally total amount overlap resulting string length gamma opt max gamma 
output string algorithm concat cycles length claim 
sj gamma opt delta opt delta opt ready algorithm mgreedy show fact mimics algorithm concat cycles 
algorithm mgreedy 
input set strings empty 

non empty choose necessarily distinct ov maximized breaking ties arbitrarily 
remove replace merged string hs ti 
just remove add 
empty output concatenation strings look mgreedy choosing edges overlap graph theta ov 
mgreedy chooses strings having maximum overlap may equal chooses directed edge see claim 
mgreedy constructs joins paths closes cycles collection disjoint cycles ae cover vertices call assignment created mgreedy 
think mgreedy list edges sorted decreasing order overlaps resolving ties definite way going list deciding edge include 
say edge dominates edge precedes list shares head tail head tail respectively definition mgreedy includes edge included edge dominating theorem assignment created algorithm mgreedy optimal assignment 
proof 
note overlap weight assignment distance weight add total length strings 
accordingly assignment optimal minimum total weight distance graph maximum total overlap 
maximum overlap assignments maximum number edges common shall show suppose case edge maximum overlap symmetric difference ties broken way mgreedy 
suppose edge mgreedy include included adjacent edge dominates edge assignment contradicting choice edge suppose edges share head tail dominated ov ov lemma ov ov ov ov 
replacing edges yield assignment edges common overlap contradict choice algorithm mgreedy finds optimal assignment string produces longer string produced algorithm concat cycles 
fact shorter breaks cycle optimum position 
improving delta opt recall step algorithm mgreedy simply concatenate strings set compression 
intuitively try overlap strings able achieve bound better delta opt 
denote algorithm operates way mgreedy step merges strings running greedy 
show achieves better bound produces superstring length delta opt 
theorem algorithm produces superstring length delta opt 
proof 
fs 
set strings superstring obtained opt length shortest superstring show jsj 
set self overlapping strings obtained mgreedy assignment created mgreedy 
denote cycle corresponding string weight 
set strings define jxj total length strings set cyc tsp opt lemma compression achieved shortest superstring jj gamma 
results know compression achieved greedy set half compression achieved superstring jj gamma jsj jj gamma jj gamma gamma jj gamma jj gamma gamma jsj string cycle prefix fs jx tg opt jx tg opt 
claim superstring superstring opt 
permutation js js superstrings obtained overlapping members respectively order observe implies summing get combined jsj gives jsj greedy achieves linear approximation expect analysis similar mgreedy original greedy 
turns case 
analysis greedy severely complicated fact continues processing self overlapping strings 
mgreedy especially designed avoid complications separating strings 
greedy denote length superstring produced greedy set tempting claim greedy fsg greedy jsj true simple argument extend result mgreedy greedy 
counterexample seemingly innocent claim 
fca cg greedy cj greedy fsg jb 

complicated analysis show theorem greedy produces string length delta opt 
proving theorem formally give sketch basic idea proof 
want relate merges done greedy optimal assignment keep track happens greedy violates maximum overlap principle self overlap better overlap greedy merge 
thing try charge greedy extra cost reflects optimal assignment new set strings greedy merge may somewhat longer optimal assignment set self overlapping string form cycle 
just bound extra costs bound greedy 
unfortunately approach fails self overlapping string may merged greedy larger string self overlapping nesting go arbitrarily deep 
proof concentrates inner self overlapping strings 
called culprits form linear order final superstring 
avoid complications higher level self overlaps splitting analysis parts 
part ignore original substrings connect right culprit 
part ignore original substrings connect left culprit 
case possible bound extra cost 
method yields bound delta opt 
combining analyses clever way eliminate effect extra costs obtain delta opt bound mgreedy 
detailed formal proof follows 
proof theorem 
need notions lemmas 
think greedy mgreedy list edges sorted overlap going list deciding edge include 
call edge better worse appears list 
better edges overlap worse ones 
recall edge dominates iff better shares head tail 
greedy formed hamiltonian path delta delta delta greedy edges 
strings reflect order superstring produced greedy 
convenience usually abbreviate greedy include edge iff 
dominated chosen edge 
dominated form cycle 
call bad back edges bad back edge necessarily bad back edge corresponds string hs 
point execution greedy self overlap pair merged 
greedy considers chosen better edges greedy path worse edges gamma 
bad back edge said span closed interval 
observations provide proof lemma 
culprits weak links greedy merge path 
lemma bad back edges 
closed intervals disjoint contains 
oe worse ov ov 
intervals bad back edges nested bad back edges cross 
culprits minimal innermost intervals 
culprit corresponds culprit string hs 
note minimality culprits back edge culprit bad back edge shares head tail oe dominates call worst edge successive culprits greedy path weak link note weak links worse edges adjacent culprits back edges 
remove weak links greedy path partitioned set paths called blocks 
block consists nonempty culprit middle segment possibly empty left right extensions 
set strings nodes partitioned sets sm left middle right strings 
example substrings merge form culprits indicated thicker lines 
bad back edges 
weak link worst edge culprits 
blocks example 
lemma shows bad back edge middle right node middle left node 
lemma bad back edge 
node left node node culprit 
node right node node culprit 
proof 
leftmost culprit node left extension right extension culprit left case includes weak link definition worse edges culprits including edge gamma contradicts observation preceding lemma 
similar argument holds cm assignment set sm middle strings nodes cycle culprit consisting greedy edges back edge culprit 
consider application algorithm mgreedy subset strings sm easy see algorithm construct assignment cm theorem implies lemma 
lemma cm optimal assignment set sm middle strings 
graph consist left middle part blocks greedy path sm set non weak greedy edges nodes maximum overlap assignment created mgreedy ordered sublist edges theta sm define similarly graph optimal assignment right middle strings 
sum lengths culprit strings 
define total length left extensions sr gamma total length right extensions 
denotes reversal string 
length string produced greedy gamma summed block overlap sum overlaps weak links 
denoting overlap ov set edges ov define cost set edges set strings nodes cost jjv jj gamma ov note distance plus overlap string equals jsj 
assignment edge node cost equals distance weight 
subsets optimal assignments cost cost cost cost established equalities gamma cost cost gamma jjv jj gamma ov jjv jj gamma ov gamma cost ov gamma ov cost ov gamma ov gamma ov gamma ov ov gamma ov gamma proceed bounding overlap differences equation 
basic idea charge overlap edge edge weak link back edge culprit way edge weak link charged back edge culprit charged twice 
achieved combining left middle left middle middle right parts weak links 
middle right parts carefully shown 
convenience refer union operation multisets allowing duplicates disjoint union 
disjoint union disjoint union disjoint union string occurs string sm occurs twice modify take advantage block overlaps 
add weak link edge node corresponding middle right path node corresponding left middle path procedure yields new set edges overlap equals ov ov ov picture previous example 
disjoint union assignment graph overlap equals ov ov ov 
edge connects nodes nodes edges satisfy hypothesis lemma 
lemma assignment edge theta dominated 
adjacent edge 
culprit back edge shares head 
culprit back edge shares tail proof 
suppose corresponds bad back edge 
lemma corresponds left node node culprit 
case dominated back edge culprit see comment lemma 
node culprit case holds similarly node culprit case holds theta follows case case holds 
note fact back edge culprit cases hold 
suppose correspond bad back edge 
dominated greedy edge chosen greedy 
greedy edge dominating case 
node culprit node culprit cases dominated back edge culprit 
case 
lemma ensures edge bounded overlap may edges double charged 
modify decreasing overlap invalidating lemma assignment edge dominated adjacent edges 
lemma assignment ne contain edges theta assignment satisfying properties 

edges theta 
ov ov 
edge dominated adjacent edges 
proof 
properties suffices argue violates property construct assignment satisfies properties edges common edge gamma dominates adjacent edges lemma replacing edges produces assignment large overlap 
see new edge ne theta observe edge edges theta implies edge edges theta implies edge lemmas construct assignment assignment large total overlap charge overlap edge edge back edge culprit 
edge charged edge back edge culprit charged edges edge entering culprit node edge coming culprit node ov ov ov summed overlap culprit back edges 
denote summed weight culprit cycles weight optimal assignment cm sm lemma 
proof theorem gamma 
note overlap culprit back edge length longest string culprit cycle 
putting string produced greedy length gamma ov gamma ov ov gamma ov gamma gamma ov gamma ov gamma gamma gamma algorithm best 
having proved various bounds algorithms greedy mgreedy may wonder implies relative performance 
note mgreedy better applies greedy algorithm intermediate set strings merely concatenates 
bound mean best 
proves case 
example fc ab ab ba cg greedy produces shortest superstring ab ac length separates middle string ab ac ab length 
greedy better despite fact prove upper bound 
turns case shown example 
input ab ab dab gamma separates middle string merges combines produce shortest superstring cab dab ab length greedy merges leaving better cab ab ab dab gamma length 
greedy type algorithm may come mind arbitrarily picks strings repeatedly merges right string maximum overlap 
algorithm call naive turns disastrous examples bcde cde de producing optimal abcde naive pick starting point produce de cde bcde abcde 
clear way superstrings may produced length grows quadratically optimum length lower bound show superstring problem max snp hard 
implies polynomial time approximation scheme superstring problem wide class optimization problems including variants maximum satisfiability node cover independent set problems bounded degree graphs max cut considered 
optimization maximization minimization problems 
say linearly reduces polynomial time algorithms constants ff fi 
instance algorithm produces instance cost optimum solution opt ff delta opt 
solution algorithm produces polynomial time solution gamma opt gamma opt basic facts reductions composition reductions reduction 
second problem reduces problem approximated polynomial time relative error ffl factor ffl gamma ffl depending minimization maximization problem approximated relative error fffi ffl 
particular polynomial time approximation scheme class max snp class optimization problems defined syntactically 
known problem class approximated constant factor 
problem max snp hard problem max snp reduced 
theorem superstring problem max snp hard 
proof 
reduction special case tsp triangle inequality 
tsp tsp restricted instances distances 
consider instance problem specified graph edges precisely length edges length 
need version tsp seek shortest hamiltonian path cycle importantly need additional restriction graph bounded degree precise bound fact arora shown max snp hard problems polynomial time approximation schemes np 
important 
shown tsp problem restricted version max snp hard 
graph bounded degree specifying instance tsp 
hardness result holds symmetric asymmetric tsp undirected directed graphs 
directed graph 
loss generality assume vertex outdegree 
reduction similar show np completeness superstring decision problem 
prove reduction 
vertex letters addition letter 
corresponding vertex string called connector vertex enumerate edges arbitrary cyclic order 
gamma 
corresponding ith edge string gamma subscript arithmetic modulo say strings associated number vertices number edges vertices degree dn 
minimum number edges addition suffices form hamiltonian path 
optimal cost tsp instance gamma shall argue length shortest common superstring 
follow reduction linear linear consider distance weighted graph set strings subgraph edges minimal weight 
clearly exactly component vertex consists cycle associated strings connector edge 
need consider standard superstrings strings associated vertex form subgraph string outgoing edge weight 
vertex fails requirement associated strings outgoing edges weight increase length putting strings directly connector standard way 
standard superstring naturally corresponds ordering vertices 
converse remains choice string succeeds connector edge edge goes say choosing results weight edge string connector weight 
doesn edge choice doesn matter 
call superstring standard addition standard satisfies requirement vertices 
suppose addition edges gives hamiltonian path 
gamma construct corresponding standard superstring 
degree length 
conversely suppose common superstring length 
turned standard superstring longer 
corresponding order vertices follows missing edges 
strings reduction bounded length reduction applies maximization version superstring problem 
maximizing total compression max snp hard 
open problems open questions raised research obtain algorithm achieves performance better times optimum 
prove disprove conjecture greedy achieves times optimum 
acknowledgments samir khuller vijay vazirani discussions superstring algorithms samir brought authors bringing hoffman monge sequences attention 
referees helpful comments 
alon hochbaum shamir 
algorithm detection construction monge sequences 
linear algebra applications 
arora lund motwani sudan szegedy 
proof verification hardness approximation problems 
proc 
rd ieee symp 

comp 
sci 
barnes hoffman 
transportation problems upper bounds leading rectangles 
siam journal algebraic discrete methods 
fine wilf 
uniqueness theorems periodic functions 
proc 
amer 
math 
soc 

gallant maier storer 
finding minimal length superstrings 
journal computer system sciences 
garey johnson 
computers intractability 
freeman new york 
hoffman 
simple transportation problems 
convexity proceedings symposia pure mathematics vol american mathematical society 
lesk edited 
computational molecular biology sources methods sequence analysis 
oxford university press 
li 
dna sequencing theory 
st ieee symp 
foundations computer science 
papadimitriou steiglitz 
combinatorial optimization algorithms complexity 
prentice hall 
papadimitriou yannakakis 
optimization approximation complexity classes 
th acm symp 
theory computing 
papadimitriou yannakakis 
traveling salesman problem distances 
mathematics operations research 
appear 
tarhio ukkonen 
algorithms string matching problems arising molecular genetics 
information processing proc 
ifip congress 
storer 
data compression methods theory 
computer science press 
tarhio ukkonen 
greedy approximation algorithm constructing shortest common superstrings 
theoretical computer science turner 
approximation algorithms shortest common superstring problem 
information computation 
valiant 
theory learnable 
comm 
acm 

