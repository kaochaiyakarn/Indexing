pre scheme scheme dialect systems programming richard kelsey nec research institute kelsey research nj nec com june pre scheme statically typed dialect scheme gives programmer efficiency lowlevel machine access retaining desirable features scheme 
compiler type inference partial evaluation scheme lisp compiler technology compile problematic features scheme closures code significant run time overhead 
features pre scheme programs restricted cases compiled efficient code 
type reconstruction done modified hindley milner algorithm allows overloaded user defined functions 
top level forms pre scheme programs evaluated compile time gives user additional control compiler partial evaluation program 
pre scheme implemented write byte code associated support code complete scheme implementation 
high level programming languages scheme haskell ml don writing programs require maximum fl nec research institute rights reserved performance direct access machine level instructions data structures 
deliberate circumstances checking run time array range unavoidable example run time overhead required garbage collection 
statically typed dialect scheme avoids overhead attempting preserve features scheme possible 
important scheme feature preserved scheme semantics 
pre scheme semantics identical scheme caveat pre scheme program may run space lacks garbage collector full proper tail recursion 
pre scheme program produce answer compiled run scheme implementation compiled program run space 
programs pre scheme appropriate usually written low level language example pascal 
doing gives desired access machine giving advantages higher level language 
pre scheme attempt get best worlds restricting scheme programs compiled run overhead equivalent programs written lowlevel languages 
obviously want minimum necessary restrictions preserve scheme expressiveness possible 
pre scheme provides features lacking ffl local proper tail recursion ffl nontrivial syntactic extensions macros ffl higher order procedures ffl type checked polymorphism ffl interactive debugging ffl module system ffl scheme semantics local proper tail recursion necessary recursion way express iterative constructs scheme pre scheme 
pre scheme inherits scheme macro facility 
macros textual opposed syntactic powerful convenient scheme macros 
proper tail recursion implemented long compiler translate iterative construct user indicated willingness put additional overhead 
scheme allow user define polymorphic procedures 
scheme polymorphism unlimited type checking done dynamically 
functions polymorphic type casts 
limited types having common size prevents type checking polymorphic values 
pre scheme static type checker ml haskell correctly handles parametric polymorphism 
pre scheme module system part standard scheme inherited scheme described 
main differences scheme ffl pre scheme program top level forms evaluated compile time may full scheme 
exactly evaluation happens scheme program loaded interpreter 
ffl pre scheme programs statically typed compiler type reconstruction algorithm 
ffl pre scheme garbage collection 
ffl pre scheme tail recursive calls done proper tail recursion 
proper tail recursion guaranteed calls lambda forms bound letrec explicitly declared particular call 
course pre scheme programs scheme programs developed run scheme implementation case programmer full scheme implementation programming environment 
especially helpful storage management 
pre scheme program developed debugged presence garbage collector explicit storage management added program satisfactory 
differences get desired program performance 
pre scheme presupposes powerful compiler fair amount partial evaluation 
fancy compiler restrictions necessary 
restrictions result languages pascal efficient powerful 
performance comparable low level languages occasionally claimed implementations high level languages claims typically small benchmarks full applications 
current pre scheme compiler produces code compiler described :10.1.1.9.6252
compile scheme virtual machine moderate sized program includes byte code interpreter garbage collector 
particular application program written pre scheme compiled compiler performs comparable programs written directly shown compiled systems including orbit optimizing scheme compiler runs slowly 
timings discussed detail 
scheme orbit lining orbit lining pre scheme time seconds scheme virtual machine run fib byte code instructions mips compiled various compilers 
pre scheme differs scheme section describes differences scheme pre scheme detail 
pre scheme statically typed managing type information needed scheme dynamic type checking type discrimination slows execution denies user direct access machine data instructions 
reason pre scheme statically typed language 
pre scheme type system parametric polymorphic similar ml 
main differences handling overloaded numeric operators extended notion polymorphism see section type inference 
lack dynamic type information means type discrimination procedures pair 
number 
available 
plan add record types tagged unions tuples similar ml 
currently data structures scheme 
garbage collection pre scheme data model scheme 
values represented arguments passed 
static typing allows compiler elide values question atomic numbers known side affected 
means values general require kind allocated storage 
garbage collector deallocation done programmer system procedure free 
lack garbage collection closures useful scheme 
instances code ordinarily require closure compiled various compiler optimizations 
compiler directed indicate code result creation closures run time 
proper tail recursion scheme implementations required properly tail recursive 
significant run time overhead certain platforms 
example compiling implementing proper tail recursion involves form driver loop 
pre scheme tail requirement applies calls local procedures defined lambda forms bound letrec 
programmer declare individual calls compiled properly tail recursive 
goto proc arg 
syntax indicating proc called tail recursively assuming goto form occurs tail position 
call current continuation call current continuation available pre scheme 
plan add downward continuations pre scheme incur significant run time cost 
compile time evaluation toplevel forms pre scheme program top level forms evaluated compile time 
identical evaluation occurs scheme program loaded 
evaluation program consists sequence definitions procedures literal values 
programmer specify compile time entry points program 
compile time evaluation allows programmers scheme building initializing complex data structures may include procedures rest compilation process treat static 
example programmer creates vector procedures top level call unknown element vector implemented computed goto 
scheme available evaluation top level forms restrictions described apply 
type reconstruction complex restriction pre scheme programs statically typed 
goal pre scheme static type checking model scheme dynamic typing accurately possible allowing compiler decide machine representation variable insert necessary coercions produce intelligible messages describing type errors 
type reconstruction done hindley milner style polymorphic type reconstruction algorithm augmented deal overloaded operators insert coercion operations 
coercions limited computationally example different numeric types 
coercions procedural values done require dynamically allocating closures hold values code necessary coercions 
type conflicts repaired insertion unsafe coercion function reported compilation process 
type reconstruction algorithm produces program augmented coercions set type relations encoding constraints coercions similar 
sample type inference rules appendix 
coercions corresponding relations introduced expression produces value 
type reconstruction completed compiler produces solution type relations determines actual type coercion 
type reconstruction algorithm allows different kinds polymorphism ffl polymorphism ffl single size polymorphism 
different types values allowed share single representation size 
ffl multi size polymorphism 
different copies procedure required different sizes values 
ffl full polymorphism 
separate copy procedure type including associated relations produced 
procedure lined compiler 
value representation size single multi size polymorphism identical 
ml implementations fashion 
full polymorphism procedure lined 
example full polymorphism consider procedure define add 
scheme dynamic type checking type discrimination mean add scheme different numeric types result coerced necessary 
duplicate statically requires multiple copies add procedure different uses require different coercions different addition operators 
haskell type system define carefully op lambda succ fail op extract extract overflows 
goto fail goto succ enter define add carefully carefully define arith op lambda op return arithmetic overflow define primitive op number 
number 
arith add carefully pre scheme code implementing scheme virtual machine addition instruction allows user define overloaded procedures overloading resolved run time unacceptable pre scheme 
mitchell algorithm type inference simple subtypes introduce coercions assigns single type add reject expression add vector ref add add force add take floating point argument return floating point result cause type error result passed vector ref requires integer 
example section presents code example show pre scheme programs really scheme programs just programs scheme syntax 
code taken scheme virtual machine contains byte code interpreter garbage collector code reading writing heap images 
virtual machine written entirely pre scheme 
example code implementing virtual machine addition instruction operates small tagged integers 
scheme virtual machine serves example utility having defined semantics pre scheme 
project uses scheme basis fully verified scheme implementation 
verifying correctness scheme virtual machine difficult portions written semantics complicated defined scheme pre scheme 
members able write pre scheme compiler generated code motorola prove correct 
illustrates coding style scheme virtual machine 
example consists code implementing addition instruction 
procedure carefully takes arithmetic operator returns procedure performs operation tagged arguments passing tagged result success continuation passing original arguments failure continuation operation overflows 
extract enter remove add type tags small integers 
function overflows 
checks argument unused bits type tag 
carefully define add carefully performs addition integers 
define primitive macro expands call procedure define opcode defines instruction 
arguments macro instruction define input argument specifications body instruction 
expanded code retrieves arguments stack performs type checks coercions executes body instruction 
simple scheme macro painful impossible write limited macro facility 
implementation current pre scheme compiler transformational compiler described :10.1.1.9.6252
uses optimization techniques ffl beta reduction substituting known values variables 
ffl block compilation 
entire program compiled 
maximizes opportunities performing beta reduction 
increases number programs accepted type checker allowing global dependency analysis 
ffl transforming tail recursion iteration 
tail recursive loops identified transformed iterative ones described 
ffl hoisting closures 
closures free lexically bound variables toplevel procedures 
ffl constant folding 
ffl translation tricks 
number transformations applied take advantage capabilities compiler 
techniques new example see previously applied language intended low level programming 
pre scheme programs pay penalty type tags garbage collection full run time polymorphism pre scheme 
result programmer direct access machine data 
best done full scheme implementation give programmer benefits single procedure 
implementing scheme full generality greatly increases speed programs run low level expressiveness resulting language 
scheme virtual machine illustrates effectiveness pre scheme compiler 
including comments virtual machine consists forms containing lines scheme code compiled procedures lines code 
shows code produced addition instruction 
part large switch statement performs instruction dispatch 
code written place efficient 
pre scheme program moderately comprehensible easy modify incurring run time cost 
assembly code produced gcc mips processor 
surprisingly machine code closely follows code code straightforward 
important job done compiler register allocation 
quite code quite done started writing mips assembly language 
thing gcc unhelpful tail merging making program instructions smaller case long arg pop operand stack arg long unsigned char arg check operand tags long long arg 

remove tags add overflow check goto underflow check goto 
add tag continue goto start arg goto arg goto break compiler output pre scheme code resulted unnecessary jump code 
tag small integers zero possibly added numbers tags intact hardware overflow check comparisons machine provided check 
failings avoided writing scheme pre scheme 
compiler introduces unnecessary jump offers direct access hardware overflow check 
scheme identifiers legal identifiers hand case sensitive scheme 
compiler uses upper case letters char discussion timings show pre scheme compiler better job compiling scheme virtual machine orbit scheme scheme virtual machine written modular fashion number procedure interfaces contains large number line definitions 
legal identifiers scheme example val 
compiler introduces local variables shadow global variables improve register usage similar 
introduced variables local variable shadowing global variable 
addu pop argument stack lw check tags arguments andi bne li fff overflow check ori sra remove tags sra addu addition slt bne check overflow move li check underflow slt beq move jump instruction dispatch sll add tag assembly code code procedures compiled line system performance poor shown timings 
lining definitions orbit gives better performance pre scheme compiler 
cases orbit lining standard scheme procedures specific arithmetic 
inlining done scheme mechanism handling user lining declarations sufficiently robust 
reason orbit output slower orbit top level form evaluation result compiles code virtual machine op codes separate top level procedure instruction requires full procedure call 
cost avoided rewriting virtual machine single large case cond expression cost code 
costs fundamental need maintain type information run time 
related section compare pre scheme approaches design standard languages high performance scheme lisp implementations low level languages lisp syntax 
pascal low level languages languages syntactic restrictions force programmers write programs run efficiently particular type implementa tion 
syntactic restrictions advantage easy understand easy enforce 
unfortunately implementation limitations tend easily modelled syntax result syntactic restrictions stronger necessary 
example closures avoided pascal 
closures result allowing unrestricted nested procedures values 
allows unrestricted procedures values allow nested procedure declarations 
pascal allows nested procedures restricts procedure values may 
enforcing exactly implementation restriction require syntactically distinguishing procedures contained free lexical don 
languages lisp syntax lisp syntax variety lowlevel languages assembly code lap code lisp implementations fortran 
allows syntactic macros parsing language trivial 
syntax languages typically little lisp high level languages general 
high performance implementations efforts produce efficient scheme lisp implementations hampered required implement full language 
low level language speed claimed particular lisp scheme implementations usually basis running fairly small benchmarks 
small benchmark nontrivial useful application written pre scheme performs similar programs written scheme vm compiled pre scheme compiler runs speed scm widely scheme implementation hand written different implementation strategies actual relative speeds varies widely depending code run 
discussed section scheme decreases drastically vm compiled orbit compiler 
pre scheme compiler translate high level languages scheme ml scheme translates calls global scheme procedures calls procedures pre scheme compiler calls global tail recursion implemented implementation 
cmu ml uses driver loop implement global tail recursion pre scheme compiler user declares call pre scheme scheme uses type bits implementations require programs linked special run time library 
scheme global optimizations necessary get maximal performance 
pre scheme language enhanced adding additional functionality compiler allowing larger set scheme programs compiled 
downward closures allowed pascal doing compromise efficiency compiled programs 
require declarations part programmer indicate closure passed downwards needing eliminated beta reduction 
downward continuations implemented 
obtaining maximally efficient code current compiler requires programmer directives compiler having information dynamic behavior program knowledge target architecture 
example programmer may want procedure deals exceptional case inlined slow normal case desire set procedures particular global variable shadowed local variable machine register 
opens avenues design experimentation 
sophisticated compiler get user information sophisticated directives produce better output increase number programs compiled effectively 
pre scheme scheme restricted programs compiled efficient object code current techniques 
pre scheme programs run scheme programs compiled native code 
running scheme programs gives full access debugging automatic storage reclamation features scheme implementation 
scheme programs pre scheme programs statically type checked compiled native code require type tags garbage collection features slow execution 
programs scheme features restricted exactly instances compiled efficiently 
shown restrictions allow scheme powerful features writing low level programs sacrificing perfomance 
pre scheme developed part scheme project joint effort part jonathan rees 
rees suresh rick mohr mitch wand provided helpful comments 
alfred aho ravi sethi jeffrey ullman 
compilers principles techniques tools 
addison wesley reading ma 
andrew appel 
compiling continuations 
cambridge university press cambridge 
bartlett 
scheme portable scheme compiler 
technical report dec western research laboratory 
john ellis 
bulldog compiler vliw architectures 
mit press 
guttman monk farmer swarup 
guide verified programming language implementation 
technical report mitre 
hudak wadler eds 
report programming language haskell 
technical report yaleu dcs tr department computer science yale university new haven ct 
richard kelsey 
compilation program transformation 
technical report yaleu dcs tr department computer science yale university new haven ct 
richard kelsey paul hudak 
realistic compilation program transformation 
conf 
rec 
acm symposium principles programming languages pages 
richard kelsey jonathan rees 
tractable scheme implementation 
lisp symbolic computation 
david kranz richard kelsey jonathan rees paul hudak james philbin norman adams 
orbit optimizing compiler scheme 
proceedings sigplan symposium compiler construction 
sigplan notices july 
milner tofte harper 
definition standard ml 
mit press 
john mitchell 
type inference simple subtypes 
journal functional programming 
ito 
common lisp efficient portable implementation 
proc 
acm conf 
lisp functional programming 
oliva wand 
verified compiler 
lisp symbolic computation 
jonathan rees eds 
clinger william revised report algorithmic language scheme 
sigplan notices december 
stallman 
porting gnu cc 
free software foundation 
tarditi acharya lee 
assembly required compiling standard ml technical report school computer science carnegie mellon university 
appendix type reconstruction rules simplified scheme syntax literal constant lambda procedure value body local binding identifier set 
variable binding mutation proc arg procedure application test cons alt conditional statement means type environment expression expands type 
lambda lambda 
oracle oracle needed choose various kinds polymorphism 
integer coerce integer 
coerce 

set 
set 
unit coerce boolean coerce 
