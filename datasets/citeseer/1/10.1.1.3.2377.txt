sampling unique structures behaviours genetic programming steven gustafson edmund burke graham kendall school computer science university nottingham uk smg cs nott ac uk 
examines sampling unique structures behaviours genetic programming 
novel description behaviour better understand solutions visited genetic programming search 
results provide new insight deception improve algorithm demonstrate capability genetic programming sample di erent large tree structures evolutionary process 
genetic programming searches solutions objective representations 
task evolving solution structure content complex dicult understand 
previous research focused understanding relationship diversity search particularly kind level diversity encourages performance 
showed increased diversity negatively positively effects performance problems 
metaphor hill climbing search helped explain results deception appeared cause poor performance 
understand diversity search particularly respect deception introduced problem representation interested type structures behaviours genetic programming samples evolutionary process 
research code growth operator biases understand type structures sampled genetic programming 
subtree crossover representation solutions code growth bloat 
programs continue grow tend grow deeper structures 
space tree shapes visited genetic programming search studied showing types shapes easily sampled 
problem solution easily sampled structures problem dicult genetic programming 
respect growth solutions subtree crossover operator shown local operator upper portion trees xed variations mainly occur near leaves 
diversity research demonstrates ects convergence structures 
content trees functions terminals provide solution problem 
stochastic sampling techniques proportion solutions increasing size shown increase certain threshold 
space increasingly larger solutions yield higher proportion solutions 
tness function typically coarse description behaviour dicult understand type solutions sampled genetic programming 
comparisons genetic programming hill climbing methods similar representations operators helpful 
genetic programming performed better worse various problem domains comparisons emphasised domains hill climbing explorative search bene cial 
results particularly useful explaining ects increased genetic diversity 
case solutions behaviour remains hidden tness function value 
better understand sampling structures behaviours search examines number unique structures genotypes node content behaviours enriched de nition tness sampled 
structure aspect study provides additional views search process coarseness tness function values addressed problem speci behaviour descriptions re ect tness elucidate behaviour solutions better 
problems methods problem domains frequently understand genetic programming arti cial ant problem fe trail parity problem regression problem binomial function 
domain causes genetic programming behave di erently experiments spanning domains provide basis understanding 
ant problem attempts pick food pellets grid functions fif food ahead prog ng terminals right 
parity problem attempts classify combinations bit length strings functions fand boolean terminals 
binomial regression problem attempts approximate function terminals ephemeral random constants range functions division protected returns denominator extremely small 
problems minimisation errors number missed food pellets ant problem mean squared error regression binomial function number misclassi ed bit strings parity problem 
evolutionary algorithm scalar value typically de ne solution behaviour multiobjective methods may vector 
value de ned tness function able distinguish di erent degrees solution quality 
coarseness leads deception arti cial ant problem fails identify solutions relatively current population extremely poor continue search case small solutions regression problems 
measuring sampling behaviours run tness value may informative de ne problem speci de nitions behaviour follows ant label food item uniquely create vector representing order food collected parity vector integer values size total classi ed correctly contents indicate test cases correctly classi ed regression vector integer values represents angles test points horizontal taken solution 
de nitions capture information typical scalar value tness reduction complete behaviour solution 
ant behaviour represents unique sequence food collection largest sequence smallest 
parity behaviour describes speci instances correctly classi ed 
de nition behaviour regression domain describes change angle horizontal function point candidate solution 
casting angles integers successive angles vector identical rst kept 
size vector complexity solution number bends graph function directly tness value target function considered 
tracking sampled structures performed considering binary tree structures regardless tree content 
count number unique structures size sampled run algorithm 
note unique tree structures equal size depth 
canonical genetic programming system run generations generational algorithm population size 
initial tree creation carried ramped half half tree sizes depths 
subtree crossover internal node selection set probability maximum depth recombination mutation duplication 
random runs collected problem domain 
results problem domain depicted graphs showing average number unique structures sampled unique behaviours sampled size 
line represents cumulative total unique structures behaviours generation run 
successive generations highlighted symbols 
space lines represents number new unique structures behaviours size sampled generation 
larger space ort genetic programming spends searching unique structures behaviours size 
size structure generation generation generation generation generation generation size structure generation generation generation generation generation generation fig 

ant results cumulative sampling unique structures behaviours 
results shows structure behavioural sampling ant problem 
distinct trend highest number unique structures sampled sizes 
bottom graph shows sampled behaviours size ant problem 
note number unique behaviours sampled sizes generation greatly reduced approximately generations 
unusual peaks behaviours size number unique sampled behaviours greatly decreases behaviours large size represent solutions 
sampling structures parity problem shown top graph 
problem samples fewer unique structures larger sizes 
number unique behaviours sampled parity problem shown bottom graph 
behaviour maximum length represents correct classi cations 
possible unique behaviours length expected random strategy classi cation size structure generation generation generation generation generation generation size structure generation generation generation generation generation generation fig 

parity results cumulative sampling unique structures behaviours 
size nearly unique behaviours sampled course run 
genetic programming spends large amount ort searching neutral behaviours equivalent random strategy slight peaks tness 
symmetry parity bit string instances probably rewards solving additional instance symmetrical instance solved correctly explaining tness concentrated random strategy initially followed instance additionally solved 
regression problem sampling structures shown top graph 
distinct trend seen sampling unique structures sizes near 
fewer unique structures larger sizes sampled 
number unique behaviours sampled regression problem depicted bottom graph shows strong attraction behaviours size 
generations run sample unique behaviours size 
behaviour directly re ect tness behaviours may may neutral tness 
binomial tness function contains equidistant values size structure generation generation generation generation generation generation size structure generation generation generation generation generation generation fig 

regression results cumulative sampling unique structures behaviours 
generate target values testing individual 
angle gradient successive values nearly greater 
behaviour measure behaviour represent function ideally need close angle changes points 
con dence bars average distributions figures shown 
left right ant parity regression structures shown top row behaviours bottom row 
sampling runs fairly uniform greatest variations occurring near peaks regression problem 
discussion search computer programs know program better 
intuitive broad sampling complex solution space population genetic programming reason algorithm may considered useful 
early cramer koza laid foundations procedural representation scalars tness combined complex representations evolutionary algorithm domains 
may straightforward apply methods program evolution genetic programming con icts arising representation documented 
results sampling unique tree structures unique behaviours describe genetic programming ability sample complex solution space 
behaviour de nition enriched description sampling solutions genetic programming 
ant problem geographic distribution food pellets ant trail may allow ant behaviours able collect pellets unable easily collect 
problem standard de nition tness creates deception shown negatively impair tness improvement 
gradual decrease ability sample di erent behaviours higher tness explains genetic programming outperforms hill climbing methods hill climb poor solutions 
peaks behaviours sampled size may represent local optima trap search 
behaviour distribution parity problem particularly interesting shows ability genetic programming sample may di erent near random type behaviours 
sampling high numbers di erent behaviours promising cause deception negative contextual shifts subtrees explaining hill climbing elitist strategies ective problem 
regression problem behaviour directly re ect tness value behaviour re ect complexity solutions 
prefer size structure size structure size structure size behaviour size behaviour size behaviour fig 

con dence bars average cumulative structure behaviour sampling distributions 
left right ant parity regression problems structure top behaviour 
ence sampling behaviours small size complexity caused neutrality tness values result biased structure sampling 
case inability increase structure size hypothesized positively correlated inability increase complexity solutions 
hypothesis plausible regression domain considering subtree crossover typically functions near leaves terminals 
respect sampling unique structures various sizes problems showed genetic programming code growth bloat unique tree structures large sizes sampled 
fewer number big tree structures sampled 
di erent structures size sampled frequently appear attractive genetic programming reason 
depth limit imposed possible cause 
results suggest possibilities improve performance 
sizes behaviours sampled high numbers may represent areas deception tness space 
deception may reduced search away areas neutral tness 
previous research showing positive correlation high tness diversity tness result avoided deception leading better tness 
population contains di erent equal tness behaviours may wish move search deceptive region search space 
leading ant follow speci food trail reduced deception improved tness 
regression domain component complexity tness function may improve performance genetic programming 
similarly parity tness function amended re ect instances solution solves correctly reduce deception 
course exploration global search exploitation local search ability ected methods employed reduce deception 
examined sampling unique tree structures unique behaviours genetic programming 
enriched de nition behaviour provided information solutions typical tness functions 
genetic programming algorithm requires search structure content important understand issues deception ort algorithm spends searching di erent types behaviours structures 
behaviour sampling results showed sampling trends help explain previous diversity research suggests new ways improve search 
structure sampling results showed bloat code growth occur fewer di erent unique structures large sizes sampled 
problems require speci structures large sizes dicult genetic programming 
acknowledgments authors anonymous reviewers ek art 

daida bertram khoo chaudhri ii 
problem gp hard 
analysis dicult problem genetic programming 
genetic programming evolvable machines june 


reilly 
impact external dependency genetic programming primitives 
proceedings ieee world congress computational intelligence pages anchorage alaska usa may 
ieee press 

hu seo li fan rosenberg goodman 
structure tness sharing sfs evolutionary design genetic programming 
langdon editors proceedings genetic evolutionary computation conference pages new york july 
morgan kaufmann publishers 

burke gustafson kendall 
survey analysis diversity measures genetic programming 
langdon editors proceedings genetic evolutionary computation conference pages new york july 
morgan kaufmann publishers 

burke gustafson kendall 
advanced population diversity measures genetic programming 
merelo os editors parallel problem solving nature volume lncs pages granada spain september 
springer 

burke gustafson kendall 
increasing diversity genetic programming bene cial 
analysis ects tness 
mckay editors congress evolutionary computation pages canberra australia december 
ieee press 

soule foster 
code size depth ows genetic programming 
koza editors genetic programming proceedings second annual conference pages stanford university ca usa july 
morgan kaufmann 

langdon soule poli foster 
evolution size shape 
lee spector editors advances genetic programming chapter pages 
mit press cambridge ma usa june 

langdon 
evolution size variable length representations 
ieee international conference evolutionary computation pages anchorage alaska usa may 
ieee press 

banzhaf langdon 
considerations reason bloat 
genetic programming evolvable machines march 

langdon 
quadratic bloat genetic programming 
whitley editors proceedings genetic evolutionary computation conference pages las vegas nevada usa july 
morgan kaufmann 

soule heckendorn 
analysis causes code growth genetic programming 
genetic programming evolvable machines sept 

luke 
modi cation point depth genome growth genetic programming 
evolutionary computation 

langdon 
scaling program tness spaces 
evolutionary computation 

daida 
limits expression genetic programming lattice aggregate modeling 
fogel editors congress evolutionary computation pages honolulu usa 
ieee press 

daida li tang 
problem gp hard 
validating hypothesis structural causes 
cant paz editors proceedings genetic evolutionary computation volume lncs pages chicago july 
springer verlag 

rosca ballard 
causality genetic programming 
eshelman editor genetic algorithms proceedings sixth international conference icga pages pittsburgh pa usa 
morgan kaufmann 

igel chellapilla 
investigating uence depth degree genotypic change tness genetic programming 
banzhaf editors proceedings genetic evolutionary computation conference pages orlando florida usa july 
morgan kaufmann 

poli langdon 
search properties di erent crossover operators genetic programming 
koza editors proceedings third annual genetic programming conference pages wisconsin usa july 
morgan kaufmann 

haeseleer 
ects locality individual population evolution 
kinnear jr editor advances genetic programming chapter pages 
mit press 

mcphee hopper 
analysis genetic diversity population history 
banzhaf editors proceedings genetic evolutionary computation conference pages florida usa 
morgan kaufmann 

langdon poli 
foundations genetic programming 
springer verlag 


reilly oppacher 
program search hierarchical variable length representation genetic programming simulated annealing hill climbing 
davidor editors parallel problem solving nature number lncs pages jerusalem october 
springer verlag 


reilly oppacher 
comparative analysis gp 
angeline kinnear jr editors advances genetic programming chapter pages 
mit press cambridge ma usa 

juels wattenberg 
stochastic hillclimbing baseline method evaluating genetic algorithms 
technical report technical report csd 
computers science department university california berkeley usa 

cramer 
representation adaptive generation simple sequential programs 
grefenstette editor proceedings international conference genetic algorithms applications pages carnegie mellon university pittsburgh pa usa july 

koza 
genetic programming programming computers means natural selection 
mit press cambridge ma usa 


reilly goldberg 
tness structure ects acquisition genetic programming 
koza editors proceedings third annual genetic programming conference pages madison wi usa july 
morgan kaufmann 
