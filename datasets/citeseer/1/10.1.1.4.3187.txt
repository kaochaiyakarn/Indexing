technical report number bigraphs mobile processes ole gh jensen robin milner july cl tr issn computer laboratory jj thomson avenue cambridge cb fd united kingdom phone www cl cam ac uk ole gh jensen robin milner technical reports published university cambridge computer laboratory freely available internet www cl cam ac uk techreports series editor markus kuhn issn bigraphs mobile processes ole gh jensen brics university department computer science july robin milner university cambridge computer laboratory bigraphical reactive system brs involves bigraphs nesting nodes represents locality independently edges connecting allows bigraphs reconfigure 
brss aim provide uniform way model spatially distributed systems compute communicate 
memorandum develop static dynamic theory 
part illustrate bigraphs action show correspond process calculi 
develop non graphical notion wide reactive system wrs brss instance 
starting reaction rules called rewriting rules rpo theory leifer milner derive labelled transition systems way leads automatically behavioural congruences 
part ii develop bigraphs brss formally 
theory directly graphs syntax 
key results static theory sufficient rpos exist enabling results part applied parallel combinators familiar process calculi may defined complete algebraic theory exists pure bigraphs binding 
key aspects dynamic theory brss definition parametric reaction rules may replicate discard parameters full application behavioural theory part part iii introduce special class simple brss 
admit encodings process calculi including calculus ambient calculus 
narrower class basic brss admits easy characterisation derived transition systems 
exploit case study asynchronous calculus 
show structural congruence process terms corresponds equality representing bigraphs classical strong bisimilarity corresponds bisimilarity bigraphs 
explore directions 
contents page part illustrations mathematical framework bigraphs action precategories relative pushouts wide reactive systems transition systems bisimilarity part ii bigraphical reactive systems pure bigraphs definition place graphs link graphs pure bigraphs development algebra pure bigraphs binding bigraphs reactions transitions part iii specialisation application simple brss adequacy characterising basic brss asynchronous pi calculus research directions appendix part illustrations mathematical framework part provides rationale bigraphs account leads bigraphs synopsis memorandum 
continue illustrations bigraphs may reconfigure correspond process calculi 
categorical framework theory bigraphs developed includes notion supported precategory properties relative pushouts rpos 
introduce notion dynamic system called wide reactive system wrs graphical gives prominence spatial extension width shall call 
allows develop important aspects structure behaviour shall apply brss part ii 
particular wrs parametric reaction rewriting rules terms define labelled transition systems wide range prove behavioural congruence theorems 
part provides mathematical frame brss part ii applications part iii developed 
example bigraph bigraphical reactive systems brss graphical model computation locality connectivity prominent 
recognising increasingly topographical quality global computing take challenge base distributed computation graphical structure 
typical bigraph shown 
graph reconfigurable nodes ovals circles may represent great variety computational objects physical location administrative region data constructor calculus input guard ambient cryptographic key message replicator 
bigraphs development action calculi simpler 
ideas sources chemical machine cham berry boudol calculus milner parrow walker interaction nets lafont mobile ambients cardelli gordon explicit fusions gardner developed fusion calculus parrow victor nomadic pict sewell uniform approach behavioural theory reactive systems leifer milner 
memorandum self contained builds preliminary definitions results put forward milner approach lot simpler developed fully 
theory brss responds twin challenges application existing process theory 
demands greater breadth concepts demands continuity ideas 
discuss challenges separately 
challenge applications long term aim provide model computation global scale represented internet worldwide web 
aim just build mathematical model analyse systems exist 
seek theory guide specification design programming systems guide adaptations deteriorate adaptations implemented 
talk vanishing ubiquitous computer visibly lives 
technology enable create 
speak crudely sure understand vanishes 
achieved reverse typical order events design implementation come modelling 
example programming language rarely thoroughly theoretical model 
inevitably meant initial understanding designed systems brittle deteriorates seriously adapted 
believe acceptable solution long run system designs expressed concepts notations theory rich admit designers wish 
arrival ubiquitous mobile computing provides opportunity simply new languages implementation techniques entrenched 
reason concurrency theorists anticipated mobility structures offer new languages 
designers analysts may come speak tongue 
example calculus model adopted business process management provide languages analytical tools business processes mobile structure 
optimism expect arrive immediately right model 
initially strike compromise incremental development existing ideas hand making large leap hand 
model seriously design somewhat complex grasp complexity real systems allow assess right track 
tackle aspect global computation isolation may develop elegant theory may survive aspects taken account 
tackle aspects defeat 
strategy tackle just aspects mobile connectivity mobile locality simultaneously 
fact combination contains novel challenge extent model connectivity locality interdependent 
plain words affect talk 
user internet total independence want model internet high level way appears users 
engineer remote communications atomic represented chains interactions neighbours provide low level model reflects reality 
want ways furthermore want able describe rigorously high level model realised low level 
models low level novel 
von neumann cellular automata original paradigm agents arranged fixed rectangular grid interaction occur neighbours 
model realise higher level single agent represented different cells different moments may send messages distant agents 
challenge address provide means locality connectivity dependent independent wish 
require new mathematical structures bigraphs represent attempt provide 
defining bigraph model concerned ignore familiar calculi mobile processes deal interaction mobility variety different ways 
want theory specialised calculi unifies 
leads naturally second twin challenges 
challenge process theory existing process calculi great progress interconnected concurrent processes processes having mobile connectivity processes having notions spatial location mobility 
agreement approaches basic notions theories strongest feature understanding behavioural specification equivalence 
time space possible calculi large lack uniform development theories settled way combine various kinds mobility 
particular shown castellani comprehensive survey widely varying notions locality explored 
bigraphical model aims generality treatment mobility behavioural theory 
far mobility concerned notion spatial region akin ambients cardelli gordon find supports mobility physical space analogous organisational spaces may virtual dynamical control structures traditional process calculi 
way works explained length examples section 
turn quest uniform behavioural theory 
common dynamics processes means reactions typically known rewriting rules form agents 
context process calculi treatment typically refined labelled transitions form label drawn vocabulary expressing possible interactions agent environment 
transitions great advantage support definition behavioural preorders equivalences traces failures bisimilarity 
extension labelled transitions tailored calculus 
ask labels derived uniformly set reaction rules form agent may change state natural approach take labels certain class environmental contexts context transition implies reaction occur leading new state 
shall see bigraphical agents contexts live category generally precategory composition represents insertion agent context 
sure behavioural relations bisimilarity determined transitions congruential preserved insertion surrounding environment 
don want contexts labels sewell points behavioural equivalences result choice unsatisfactory 
find satisfactory suitably minimal set labels uniformly remained open problem years 
step sewell able uniformly derive satisfactory context labelled transitions parametric term rewriting systems parallel composition blocking showed bisimilarity congruence 
remained problem reactive systems dealing connectivity presents extra difficulty 
leifer milner able define minimal labels terms categorical notion relative pushout rpo ensure behavioural equivalence congruence wide class reactive systems 
results extended refined leifer phd dissertation cattani applied theory action graphs rich connectivity 
milner developed bigraph model action graphs inspiration mobile ambients cardelli gordon 
development driven simplicity comes treating locality connectivity independently inspired gardner development symmetric action graphs undirected edges 
memorandum technical thrust theory bigraphs behaviour uniformly represented rpo transitions 
reader soon see purpose mind different paths taken 
proceeded slowly analysing different option implications 
chose follow path far provide evidence bigraphical approach aimed point new theory recover successes existing theories calculus 
time tried easier explore different paths dividing theory possible independent topics 
example bigraphs defined terms independent structures place graphs link graphs varied 
bigraphical reactive systems brss defined merely instance general concept wide reactive systems theory develop instances possible 
making reasonable choices re examined taken theory far able set version calculus 
main example finite asynchronous calculus member broad class able derive transition system corresponds closely defined classical approach structural congruence calculus turns represented equality bigraphs exactly bisimilarity congruence achieved 
deriving system define general tools refinement contextual transition systems comment may tackle richer calculi including ambient calculi approach 
related turn related researchers apart mentioned 
longest tradition graph reconfiguration called graph rewriting double pushout dpo construction originated ehrig 
relative pushouts derive transitions quite distinct dpo construction purpose explain anatomy graph rewriting rules labelled transitions working category graph embeddings graphs objects embeddings arrows 
contrasts contextual pre categories objects interfaces arrows bigraphs 
links formulations categorical isomorphism graph embeddings contextual pre categories 
ehrig investigated links discussion second author believe useful cross possible 
just cited gadducci heckel represent categories cells correspond reactions 
categories sassone alternative way deriving congruential categories replace precategories 
correspondence ongoing discussion appears close 
categories link theory closely category theoretic standards corresponding precategories may continue provide ease manipulation 
formulations graph reconfiguration employ hypergraphs example hirsch montanari 
model hypergraphs nested bigraphs rewriting rules may replace hyperedge arbitrary graph 
hoffmann plump deal hierarchical graphs links join graphs different levels 
synopsis part section illustration bigraphs action shown dynamics calculus detail ambient calculus modelled bigraphs 
section sets category theoretic framework including notion relative pushout rpo particular introduces supported precategories building leifer phd thesis 
roughly speaking precategory arrows graphs syntactic entities support way identifying occurrence node subterm 
supported precategories enriched wide precategories suitable representing systems distributed regions 
basis section defines notion wide reactive systems wrs equipped parametric reaction rules illustrated examples section formulate bigraphs explicitly part section shows labelled transition system ts uniformly derived wrs rpos closely associated idem pushouts ipos kind weak pushout 
adapts leifer milner show bisimilarity ts sufficient rpos congruential 
wrs functors defined section seen tss congruential transmitted wrs functor sufficiently behaved 
behaved functor support quotient forgets identity nodes subterms 
final topic part notion adequate sub ts allows ts reduced leaving bisimilarity unchanged 
important part iii certain applications tractable 
part ii section notion pure bigraph formally defined terms constituents place graph link graph 
notions dealing respectively locality connectivity developed sections 
sections crucial results theorem rpos exist characterisation ipos pair arrows 
section static theory bigraphs developed 
pure bigraph arrow supported precategory objects interfaces interface consists places place graphs points link graphs 
structural properties introduced especially rpos ipos characterisation provided place graphs link graphs respectively 
section provides taxonomy bigraphs including notions ion atom molecule single control node 
defines forms parallel product close parallel composition operators familiar process calculi 
algebra pure bigraphs axiomatised proved complete section 
section required subsequent section 
section pure bigraphs enriched binding bigraphs adding binding names lines set 
relaxes independency placing linking allowing certain names scope 
precategory binding bigraphs enriched interfaces arrows defined terms underlying pure bigraphs 
forgetful functor binding pure bigraphs rpo theory binding bigraphs derived functor 
section addition reaction rules central notion bigraphical reactive system brs defined 
brs seen special case wrs defined part furthermore bigraphs rpos congruence results part immediately apply 
part results brss closely related process calculi 
shown rpos exist brss concrete brss concrete supported precategories introduced 
part iii section class simple brss introduced 
brss include models calculus mobile ambient calculus 
structural properties ensure adequacy certain sub ts engaged transitions eases task modelling calculi mentioned 
section narrows class brss basic ones 
purpose obtain nice characterisation labels involved modelling asynchronous calculus believe slight widening class basic brss embrace full calculus mobile ambients 
section characterisation specialised finite asynchronous calculus 
proved bisimilarity induced representation coincides standard congruences strong bisimilarity strong barbed bisimilarity 
provides technical detail authors conference 
justifies claim bigraphical systems consistent previous process calculi main purposes reported 
section explores lines research 
bigraphs action introduce bigraphs informally examples showing kinds system represent kind mobility model 
illustrate simple term language describing bigraphs 
examples allow explain locality connectivity operate help understand bigraphs naturally treated arrows pre category objects simple kind interface 
shows uninterpreted example bigraph 
nodes support kinds structure term bigraph 
nodes may occur inside nodes bigraph depth node represents locality call nesting structure bigraph place graph 
second nodes ports may connected links represented thin lines may fork call linked structure bigraph independent locality link graph 
node assigned control tells kind node control arity finite ordinal example arity node ordered set ports link may impinge 
may impinge inside outside node 
diagram shows names names allow bigraph linked larger bigraph 
place graph link graph share node set independent structures 
dynamics bigraphs reconfigurations may occur depend structural components determined reaction rules 
rule redex 
redex precondition reaction represented pattern nesting linkage postcondition indicating reaction change pattern 
places reactions may occur determined controls 
control may specified atomic meaning may nested node non atomic may specified active meaning reactions may occur node 
hand non atomic passive node destroyed inhabitant nodes react 
give typical reaction rules 
reaction consists replacement redex occurring bigraph corresponding shall see notion occurrence represented precategory bigraphs 
example reaction calculus example represents familiar reaction rule asynchronous calculus summation xy reaction rule terms bigraphs need controls send get arity 
recall asynchronous calculus output guards xy reaction forbidden inside input guard match declare send atomic get non atomic inactive 
redex illustrates feature bigraphs absent notion hole grey box 
place bigraph may inserted 
arcs may impinge points hole call inner names bigraph inserted outer names fused inner names 
inner names ports bigraph collectively called points 
link may send get send xy get reaction rule asynchronous calculus connect arbitrary number points may need outer name 
hole represents parameter calculus rule port hole represents name bound fact bigraph parametric general inner interface parameter outer interface indicating kind hole turn may placed 
shall call respectively inner face outer face precategory bigraphs interfaces objects parametric bigraphs arrows 
interfaces triples form width number sites represented vector length indicating local names associated site set global names 
case inner face width tells hole singleton vector tells hole local name corresponding calculus rule associated third component tells global names involved inner face 
note inner face bigraph names local global inner names outer face xy width telling occupy just hole outer bigraph 
third component indicates global names called global outer names bigraph outer names ports binding 
free names binding name local name outer face dually local inner name inner face corresponds binding name parameter 
parameter example really corresponds calculus abstraction represent binding occurrence point small circle note port second port get may binding means may connected ports inside node 
inner face parameter persists reaction outer face may replace outer context 
substitution calculus rule represented just arc name nodes discarded 
send get get send xy get get reaction rule input replication asynchronous calculus turning term language note local name written parentheses 
local names may changed alpha conversion 
holes squares 
note especially operation bigraphs linking edges name common represented term parallel composition 
occurrence means unused part outer face correspondence terms bigraphs quite accurate 
example calculus reaction rule replication previous rule parameter calculus redex appears exactly reflected bigraphical rule single occurrence hole fact inner face 
calculus rule called replicated input xy parameter replicated think input triggering creation copy handle 
represents rule note uses different control get preserved 
case different inner face width example calculus reaction rule summation shows communication rule calculus summation xy parameters discarded 
controls send get sum passive means reaction may occur inside nodes controls 
note sum arity serves group alternatives enacted 
send sum sum get sum send xy sum get reaction rule calculus summation amb amb amb amb amb amb amb amb reaction rule ambient calculus send get send xy get global reaction rule calculus example reaction ambient calculus ambient calculus cardelli gordon primitive forms reaction movement ambient 
shows bigraphs may represent rule 
controls arity amb ambient command move parent ambient 
declare atomic hand declare amb non atomic active ambients intended localize activity inhibit 
redex global names outer face width interface zw inner face sites width names local global associated site parameters rule literally passengers linkage plays part reaction 
shall see prevent passengers passengers mobile phones train linked 
imagine interactions occurring independently occurrence ambient reaction 
example provides possible instance 
preceding examples reactions permitted local 
example ambient reaction rule permit ambient named enter ambient named ambients neighbours separated control boundaries 
similarly calculus rule requires send get nodes neighbours 
may want permissive rule allow action distance case calculus mean model passing message step arbitrarily control boundaries 
purpose sender receiver linked region boundaries shown example 
example global reaction calculus calculus reaction rule example redex width means rule applies send get molecules located 
allow context place apart need xy xy interfaces simple bigraphs xyz xy change outer width redex shown case xy note term language parallel composition combinator keeps regions separate merges links common global name 
wide reaction rules interesting presence active controls separate components distributed redex allow react 
introduced amb example active control 
categorical representation allow insert bigraph arbitrarily global names double width hole ambient rule redex 
particular insert instance redex remote calculus rule means create interwoven independent redexes reaction precludes 
occurrence internet modelled suitable level abstraction 
illustrations reaction rules chose stay close familiar calculi 
possibilities range widely 
example combination active passive controls various forms failure management modelled 
may include inactivation processes due failure reporting failures recovery procedures subsequent re activation processes 
illustrations far emphasised dynamics 
realise bigraphs dynamic behaviour useful building blocks 
shows simple examples terms denote 
left side just region containing 
inner face called origin simplest possible interface null outer face simplest interface width 
second categorical identity third identity interface width site local names 
bigraphs right side called interfaces width form abbreviate set names 
function link global inner outer names various patterns 
wiring just identity interface xy think identity substitution names 
involves substitution name inner names wiring closes inner name composed bigraph name example remove outer face 
example gardner call fusion 
substitution closes concludes illustration bigraphs 
main purpose show represent dynamics process calculi seen simple things name closure substitution bigraphs 
wrote bigraph term language shall formalise done 
terms mildly sugared form mathematical constructions shall introduce parts shown indicate bigraphs far programming language programmer define wide variety specialised reaction rules 
discussion means examples informally introduced shall call part ii bigraphical reactive system brs 
brs precategory agents contexts built signature defines controls static properties set reaction rules defines dynamics 
bigraphical theory part ii direct formulation bigraphs classical tradition graph theory 
said bigraphs arrows precategory objects interfaces 
reader may ask go trouble graphical formulation illustrated examples pleasant algebraic formulation 
develop algebraic theory consider bigraphs just alternative presentation elements 
reasons graphs primary 
space mobile computing want model strong topographical character topography real virtual reasonable seek model directly 
second reason theoretically deeper 
main goals build theory dynamic systems embracing possible behavioural theory embodied process calculi 
labelled transition system wish apply theory originated leifer milner defines transition systems terms called relative pushouts weak form pushout ensures resulting behavioural equivalences congruential provided sufficient relative pushouts rpos exist appropriate precategory agents contexts 
turns algebraic theory bigraphs straightforward presentation category possesses rpos 
cater notion occurrence bigraph represent bigraphs identity nodes absent 
moving concrete bigraphs formulated precategory category regain structure rpo theory gain congruential behavioural theory 
fortunately quotient theory recover category bigraphs behavioural theory congruential derive uniform roots 
names 
sites 
place graph bigraph inner names 


link graph resolving pure bigraph place graph link graph approach behaviour instantiated different process calculi 
shall formalise bigraphs directly part ii 
manage complexity shall consider pure bigraphs local names section introduce local names binding define binding bigraphs 
represent pure bigraph combination independent mathematical structures place graph link graph 
note combination quite distinct categorical composition insert bigraph agent context 
simply related compose bigraphs categorically resolve respective place graphs link graphs compose combine results new bigraph 
helpful see example pure bigraph resolved place graph representing locality link graph representing connectivity 
controls shown diagram 
nodes 
common structures independent 
note bigraph double inter faces third component pure bigraph local names 
interface combines place graph interface link graph interface determines names belong particular region bigraph root place graph inner names belong particular site 
repeat pure bigraph admit association names roots regions inner names sites dissociation enables treat locality connectivity independently yielding tractable theory 
theory extended easily binding bigraphs 
part ii ends section introducing dynamic theory bigraphs part iii goes specialise apply theory 
foundation theory laid setting wide reactive systems topographical element reduced simple categorical notion width 
remainder part devoted entirely dynamic systems 
precategories relative pushouts section develop mathematical framework static dynamic properties bigraphs 
varieties bigraph wish derive setting definitions properties apply varieties 
sections adaptation extension started leifer milner developed leifer phd dissertation milner 
sections closely follows section 
reader perfectly study part ii independently sections provided willing take main results trust refer back important definitions time time 
section concerned categorical framework important concepts especially relative pushouts underlie treatment dynamics section 
notation shall accent name precategory id composition identity tensor product 
denote domain codomain arrow dom cod set arrows called homset denoted 
ids denote identity function set empty function shall union sets known assumed disjoint union functions domains known assumed disjoint 
sets confused disjoint sum sets union 
assume fixed representation disjoint sums example means pv means pv 
write restriction function relation set natural number interpreted finite ordinal 

range complement denote finite sequence xi ordered pair 
definition precategory functor precategory defined exactly category composition arrows defined 
composition identities defined id id equation sides equal undefined 
defined subcategory defined exactly defined functor precategories total function objects arrows preserves identities composition sense defined general shall 
stand objects 
arrows 
shall extend category theoretic concepts precategories comment unambiguous 
concept extend explicitly monoidal category definition tensor product monoidal precategory strict symmetric monoidal precategory partial tensor product objects arrows 
unit object called origin symmetry isomorphism tensor symmetries satisfy equations sides exist idi idi strict means equation holds exactly stated merely isomorphism symmetric refers symmetry isomorphisms satisfying equations 
shall omit strict symmetric shall assume properties 
wish precategories 
pointed dynamic theory bigraphs require existence relative pushouts rpos 
means need develop theory concrete bigraphs nodes identity transfer results graphs quotient functor forgets identity 
precategories allow direct presentation concrete bigraphs stipulate bigraphs may composed form node sets disjoint 
think composition keeping track nodes recover exactly nodes come generally interested monoidal precategories definedness composition tensor product depends support set associated arrow 
bigraphs support arrow node set 
general assume support drawn unspecified infinite set 
give general definition precategories support continue accented notation dropping accent category 
definition supported monoidal precategory precategory supported arrow finite set called support idi 
composition defined iff dom cod 
arrow injective map domain includes leifer development see chapter special category track keep track nodes precategory allowed theory rpos developed categories precategories 
developed succinctly stay 
arrow called support translation idi idi id monoidal precategory monoidal supported precategory satisfies equations required hold sides defined 
exercise deduce condition conditions 
consider functors supported precategories 
definition support equivalence supported functor supported precategory 
arrows support equivalent written support translation 
definition equivalence relation 
supported precategory functor called supported preserves support equivalence 
longer need keep track support may quotient category just precategory 
define quotients need notion definition static congruence equivalence defined homset supported precategory say preserved operator imply defined 
static monoidal congruence preserved tensor product composition 
example simple static congruence bigraphs may define mean identical nodes discarded particular control important example static congruence support equivalence 
definition shows static congruence coarse support equivalence yield defined quotient category definition quotient categories supported precategory static congruence includes support equivalence 
quotient category def objects objects arrows equivalence classes arrows def term static congruence emphasize congruences depend static structure contrast behavioural congruences bisimilarity depend dynamics system 
identities composition tensor product idm def idm def def assigning empty support arrow may regard supported precategory special supported functor called quotient functor note quotient affect objects tensor product may partial objects 
composition defined implies tensor product provided defined domains codomains 
abbreviate call support quotient functor 
definition clearly coarser quotient exists equivalence includes arbitrary static congruence support equivalence 
parts ii iii shall define coarser quotient functors bigraphs means 
turn notion relative pushout rpo crucial importance defining labelled transitions section 
notation follows shall frequently denote pair arrows precategory 
example arrows share domain codomains write definition bound consistent arrows share domain pair share codomain say bound bound said consistent 
definition relative pushout precategory bound bound relative triple arrows bound hi gi 
may call triple relative bound understood 
relative pushout rpo relative relative bound relative bound unique arrow hi ki shall omit word relative example may call bound rpo familiar notion pushout bound bound exists left hand diagram commute 
pushout bound rpo provides minimal bound relative bound bigraphs shall find rpos exist cases pushout see discussions constructions 
suppose create rpo happens try iterate construction 
precisely rpo 
answer lies important concept definition idem pushout precategory pair arrows common domain pair idem pushout ipo idj rpo turns attempt iterate rpo construction yield bound isomorphism intuitively minimal bound bound reached just step 
consequence parts proposition summarises essential properties rpos ipos relies 
proved categories leifer dissertation see leifer milner proofs routinely adapted precategories 
proposition properties rpos precategory rpo exists unique isomorphism 
rpo ipo 
ipo rpo exists triple rpo 
ipo pasting suppose diagram commutes rpo pair 
squares ipos big rectangle big rectangle left square ipos right square 
ipo sliding supported ipos preserved support translation ipo injective map domain includes supports ipo adaptation works definition precategory definition satisfied sup ported precategories 
wide reactive systems introduce kind dynamical system bigraphs instance 
section adapts extends section 
previous notion reactive system defined 
terms consisted supported precategory arrows called contexts including agents domain origin set agent pairs called reaction rules called active contexts 
reaction relation agents taken smallest active context reaction rule 
systems uniformly derived labelled transitions ipos 
behavioural preorders equivalences transitions including bisimilarity shown congruences subject conditions sufficient rpos exist precategory second decomposition preserves activity active implies active 
subsequent sufficient rpos interesting cases leifer cattani 
cases condition decomposition preserves activity met limit attention contexts single hole 
certain derived transition systems unsatisfactory limitation sewell pointed examples 
saw section wish consider bigraphical contexts represent parametric reaction rules accommodate multiple wide agents remote calculus reaction rule example 
reasons treating wide agents example understand reactions may occur agents located arbitrarily far apart 
gives rise possibility contexts sites may active may permit reaction occur 
definitions allow 
lead wide reactive systems refine notion reactive system little necessary purpose 
shall see specialise new treatment narrow contexts unit width recover original notion reactive system 
follows shall nat strict symmetric monoidal category objects finite ordinals arrows functions 
definition wide precategory wide functor wide precategory supported precategory equipped functor width nat invariant support translation distinguished object called origin width 
permutation ordinal width isomorphism width 
precategory monoidal unit width preserves tensor product equipped width wide monoidal precategory 
objects 
called interfaces arrows 
called contexts 
set contexts called usual homset pair denoted call inner outer faces homset 
arrows homset gr def called ground arrows lower case letters 
range abbreviate supported functor called wide preserves origin width 
distinguishing elements prime width width 
shall define bigraphs wide precategory section 
discussion section easy see bigraphs width concerned locality connectivity width bigraphical interface just multiplicity width bigraph function mapping site unique region contains define width level wide precategories specialised bigraphs allow define exactly sites bigraph permit reaction 
notion location help formulate definition location location interface width subset denote loc set locations powerset width 
width function context extended loc width def width 
offset def 
ready consider add dynamics wide precategories 
shall define reaction relation ground arrows 
start section spoke reaction rules form pair agents redex homset 
reflect examples reaction rules parametric pairs form general different inner faces parameter rule ground arrow gr 
general composed transform parameter gr 
illustrated example replication rule duplicates parameter example discards parts parameter may course arbitrary width 
definition allows rules arbitrarily transform parameters 
allows possibility parameters constrained lie subset gr 
remarkably congruence theorem section holds constraint parameter set nature parameter transformations 
reactions supposed occur contexts active definition introduces activity map determine sites context active activity treated composition map explained discussion follows definition 
definition wide reactive system wide reactive system wrs wide precategory equipped triple par reacts act set par gr represents parameters reaction rules 
reacts set reaction rules form trans redex transform map trans par gr 
activity map act loc satisfies properties act idi width act act width act require par reacts closed support translation trans preserves act respects 
say active act similarly active act active act width dom 
reaction relation ground arrows defined follows iff exist reaction rule trans active context parameter par trans 
monoidal wrs require third condition act act act width dom act shall usually denote wrs just explain activity conditions fully 
condition asserts active iff active active width 
width dom condition asserts active iff active active leave reader check conditions sense consistent equations governing composition tensor product 
passing suppose concerned reaction contexts interfaces unit width width 
active iff active 
conditions amount requiring active contexts form closed decomposition 
promised proper generalisation conditions original congruence theorems proved 
definition ensures ingredients closed support equivalence allowing definition divide forming quotient wrs 
immediate proposition support translation reactions reaction wrs closed support equivalence natural notion functor preserves reaction 
means ingredients constitute reaction generous definition follows definition wrs functor sub wrs wide reactive systems 
wide functor wide precategories wrs functor definition requires active width codomain redex alternative refined approach equip reaction rule fourth component location require active imagine reaction rules example width wish part redex lie active site 
follows adapted refinement avoid sake simplicity 
preserves extra components wrs 
distinguishing components prime par par trans reacts trans reacts trans trans act act call monoidal monoidal preserves tensor product 
monoidal inclusion functor call monoidal sub wrs proposition wrs functors preserve reaction wrs functor preserves reaction clearly functors form category 
important example functor support quotient functor extended follows definition quotient wrs wide reactive system 
support quotient wide reactive system support quotient ingredients defined follows parameters parameter reaction rules trans rule trans define trans def trans active sites act def act 
proposition quotient reflects reaction support quotient functor preserves reflects reaction iff quotient functor takes concrete wrs precategory wrs category 
section show obtain behavioural congruence arbitrary concrete wrs sufficient rpos 
support quotient may possess rpos quotient functor allows derive behavioural congruence 
concrete wrs rpos supply behavioural congruence corresponding wrs represented functorial reactive systems leifer thesis 
wide transition systems consider equip wrs labelled transition system 
comprise subset ground arrows called agents set transitions form agents context defined 
bisimilarity defined usual way interested general conditions congruence 
definition labelled transitions leifer milner follows reaction rule active context idem pushout ipo shall close refinements 
refinement equip transition information locality 
agent transition form tells extra context needed create redex specify completed redex occurs location reaction takes place 
difference unit width 
turns achieve congruence bisimilarity index transition location outer face illustrate simple example involving bigraphs 
need superficial understanding bigraphs supplied 
example non congruence example shows bisimilarity transitions denote general congruence bigraphical systems 
take signature arity zero atomic non atomic passive 
ports names links irrelevant example take interfaces just finite ordinals widths 
write agents single atomic node elementary passive context consisting single node 
single reaction rule allows reaction active context 
consider agents illustrated transition turns id id transitions record different places reaction occurs turns def id put context def id shown find node active transition id transition node passive 
second refinement concerned parametric nature reaction 
reaction redex parameter reflect transitions adopt pair labels form red par red arises redex par parameter 
pair label require composition red par defined represents previous single label 
transition underlying pair ipos just single ipo 
pair label expressions shall usually write mean red par equivalence shall take mean red red par par results part ii appears depend pair labels adopt mainly anticipation may depend 
example provides starting point relating closely sewell labels parametric 
refinements define transition systems 
allow broad class transitions distinguish ipos 
par red definition transition transition consists quadruple written ground pair label exist reaction rule trans active context parameter diagram commutes width width cod trans say reaction rule diagram underlie transition 
transition minimal underlying diagram ipo pair 
definition transition system wrs labelled transition system pair agi trans agi set interfaces called agent interfaces agi members gr called agents trans set transitions sources targets agents full resp 
standard transition system wrs consists interfaces resp 
minimal transitions 
wrs concerned understood shall denote transition systems respectively ft st static congruence definition wrs equipped suppose transition label defined exist agent transition said respect 
abbreviate labelled transition system ts 
ts sub ts written interfaces transitions included examples exist bisimilarity single labels strictly coarser pair labels 
shall label mean pair label 
note respect mutual equivalence ts respects means respects shall interchangeably 
note definition transition presupposes set reaction rules unlabelled transition relation 
example ccs labelled transition systems primary means providing process dynamics unlabelled transitions corresponded transitions null label ccs 
committed reaction rules primary described generally presupposition interaction discipline calculus 
returning briefly example see location component transitions allows distinguish agents fact transitions take respective forms id id 
shall meet various different equivalences deal bigraphical 
support equivalence deduce propositions proposition support translation transitions wide reactive system full standard transition systems respect support equivalence 
standard transition system st useful rpos exist 
shall show derive ts quotient wrs may possess rpos 
transitions defined derived may define behavioural equivalences preorders usual way 
shall limit attention strong bisimilarity 
shall omit strong define weak bisimilarity 
definition wide bisimilarity wide reactive system equipped ts simulation binary relation agents equal interface defined exists sb bisimulation symmetric simulation 
bisimilarity denoted largest bisimulation 
shall omit write understood context 
usually st note slight departure usual definition bisimulation park require defined 
merely technical detail provided ts respects support translation defined exist defined 
wrs category particular support quotient side condition holds automatically case definition bisimilarity reduces standard 
may prove main congruence theorem 
main point st ensures bisimulation congruence 
reader deduce obvious 
result ft ensures simply replace word ipo commuting square proof 
theorem congruence wide bisimilarity wide reactive system rpos equipped standard transition system wide bisimilarity agents congruence 
par red par lpar red lred par red lpar lpar lred lred proof proof lines theorem leifer 
establish bisimulation def context suppose label defined 
find exist reaction rule trans outer face active context parameter diagram ipo pair width width trans 
consistent pairs rpos exists rpo relative bound proposition complete diagram square ipo 
active definition lower squares represent transition width trans 
active 
transition 
note defined defined 
exist reaction rule trans outer face active context parameter diagram ipo pair width trans 
replace lower squares diagram obtaining diagram def proposition large square ipo 
active active 
def trans 
required 
shall henceforth omit adjective wide discussing bisimilarity 
strong bisimilarity representative preorders equivalences leifer proved congruence theorems expect results transferred setting 
wrs equipped ts define transitions various quotient follows definition transitions quotient wrs equipped ts wrs functor 
say respects static congruence induces respects ts induced agent interface agent interface transition transition definition sense bisimilarity congruence theorem tells ensured 
recall full functor surjective homset 
theorem transitions induced functors equipped ts full wrs functor identity objects respects hold iff 
bisimilarity congruence congruence 
hold support quotient functor 
proof establish bisimulation definition induced ts find defined 
follows done 
establish bisimulation defined 

transition arise transition 
equivalence induced defined respects find done 
assume bisimilarity congruence 
context defined 
exist defined 
assumption applying functor required 
result follows immediately proposition 
section shall set bigraphical reactive systems 
theorems just proved close analogues shall derive ts deduce behavioural congruences 
turn question arises strongly applications 
standard ts containing minimal transitions course smaller full ts 
turns particular cases reduce standard ts affecting bisimilarity 
introduce basic concepts idea precise depend notion bigraph 
definition relative bisimulation adequacy assume ts sub ts relative bisimulation symmetric relation transition defined ex sb define relative bisimilarity denoted largest relative bisimulation 
call adequate coincides agents interfaces write understood may omit equally may write note require match transitions lie matching transition need lie means relative bisimilarity general transitive behavioural equivalence 
value relative bisimilarity lies case adequate proof technique relative bisimulation relieve task checking large class transitions 
may case fewer labels employed transitions transitions consider transitions involving smaller set labels 
level draw attention possibilities transition system adequate particular st simple example depends fact st closed isomorphism transition st isos 
omitting composing iso 
checking bisimilarity intuitively suffice consider transition iso class 
holds generally proposition representative transitions transition system closed isomorphism sub ts 
suppose transition transition iso 
adequate proof show bisimulation 
find matching transition isomorphism preserves transitions transition assumption transition def transition applying isos transition def done 
shall exploit result section 
deeper example adequacy arises intuition transitions really matter agent contributes underlying reaction supplies part redex leaving label supply rest 
precise terms support interested transitions underlying redex 
call transitions engaged 
intuitively may conjecture engaged transitions adequate standard ts 
shall prove particular class bigraphical reactive systems broad include calculus ambient calculus 
nice conjecture holds means significant labels leading part red strictly contained redex look behaved kind sub ts 
arbitrary pair possible contains transitions case pairs determine transitions situation somewhat simpler definition definite sub ts call definite pairs transitions iff immediately deduce relative bisimilarity absolute proposition definite sub ts definite definite adequate deduce important corollary 
illustrate suppose standard ts 
interested agents able establish interfaces definite adequate deduce congruence bisimilarity generally corollary adequate congruence interfaces definite adequate coincide 
congruence congruence part ii bigraphical reactive systems part ii defining notion pure bigraph formally terms constituents place graph representing locality link graph representing connectivity 
continue defining notions turn ensuring enjoy categorical properties shall need 
combine yielding theory pure bigraphs locality connectivity totally independent 
short section devoted algebraic theory pure bigraphs showing possess simple complete axiomatisation 
proceed relax independence locality connectivity controlled manner defining binding bigraphs allow certain local names scope consisting particular bigraphical region 
properties binding bigraphs derived underlying pure ones 
introduce dynamics form reaction rules yielding bigraphical reactive systems brss 
shown special case 
apply part yield labelled transition systems behavioural congruences pure binding brss 
pure bigraphs definition section define notion pure bigraph formally terms constituent notions place graph link graph dealt sections 
section resume study pure bigraphs combining properties constituents 
section develop algebraic theory 
section define binding bigraphs enrichment pure ones ensure enjoy properties allow apply theory developed part section give central definition bigraphical reactive system brs study dynamic behaviour apply results part derive labelled transitions congruences pure binding brss 
definition pure signature pure signature set elements called controls 
control provides finite ordinal ar arity determines controls atomic non atomic controls active 
controls active including atomic controls called passive 
note signature need finite denumerable 
bigraph finite may denote element continuous state space 
shall exploit possibility comment section 
saw section part non atomic node non atomic control may contain nodes 
node control determines ports control active reactions permitted inside node 
passive node get node calculus thought script program awaiting activation take form reaction destroys node boundary 
refinements theory signature may carry information sign type port 
sign may example enforce restriction negative port connected exactly positive port action calculi 
possible refinement kind assigned node determining controls nodes may contain 
atomic nodes represent restrictive kind 
part iii shall define important refinement allows names scope controls bind names 
theory pure bigraphs names scope prerequisite understanding refinements 
defining concrete bigraphs 
definition top define bigraph combination parts sections define parts 
definition concrete pure bigraph concrete pure bigraph signature takes form ctrl inner outer faces combining width finite ordinal finite name set 
components finite sets nodes edges respectively 
third component ctrl control map assigns control node 
remaining ctrl place graph ctrl link link graph place graphs link graphs defined definitions respectively 
refer concrete bigraphs nodes edges identity 
shall supported precategory bigraphs shall able find rpos 
support concrete bigraph consists nodes edges terms definition section shall take quotient support equivalence obtain bigraphs 
usual graph theory shall omit adjectives concrete unimportant implied context 
shall normally fixed unspecified signature 
refer combination constituents write place graph combined link graph iff node set control map 
section revisit bigraphs developing structure combining attributes constituent place graphs link graphs 
place graphs definition place graph place graph ctrl inner width outer width finite ordinals finite set nodes control map ctrl parent map parent map acyclic atomic node control atomic may parent 
write just mean 
widths index sites roots respectively 
sites nodes domain called places 
acyclicity condition parent map represent forest unordered trees 
sites roots provide means composing forests place graphs root planted distinct site second 
shows simple examples composition 
formally definition precategory place graphs precategory plg finite ordinals objects place graphs arrows 
composition place graphs ai vi ctrl mi mi defined def node sets disjoint ctrl ctrl ctrl ctrl 
identity place def graph idm idm easy check id id composition associative 
note plg supported node sets support 
basic properties definition sibling active passive node root children 
places siblings parent 
site active ctrl active passive 
active resp 
passive say active resp 
passive dealing place graphs 
indexing parent maps shall find convenient abuse notation denote parent map place graph context prevent ambiguity example talking place graphs talking parent maps 
means parent map composite place graph applied node note especially differs fact va equal node equal 
proposition isomorphisms place graphs arrow plg isomorphism iff nodes parent map bijection 
suitable tensor product plg 
want effect merging nodes adopt partial tensor product defined exactly node sets disjoint case node set va vb 
intuitively tensor product place graphs consists placing side side 
definition tensor product tensor product plg defined follows objects take def place graphs ai mi ni take defined disjoint node sets parent map adjust sites roots adding respectively take union parent maps 
epimorphisms epis play central role place graphs link graphs 
monomorphisms monos 
recall category sets functions epis monos surjective injective functions respectively 
find analogous proposition epis monos place graphs plg place graph epi iff root mono iff sites siblings 
shall prove rpos exist place graphs show construct 
give simple intuition 
bound wish build rpo shown diagram 
form truncate removing roots nodes upper interface create new parent root place orphaned truncation equating new roots required 
notation considering pair place graphs common sites shall adopt convention naming nodes 
denote node set ai vi denote 
recall means 
shall vi 
range vi ri range roots mi 
shall 
range useful shared sites behave just shared nodes construction pushouts 
shall give construction rpos plg 
construction rpos place graphs rpo pair place graphs relative bound built stages 
notational conventions introduced 
nodes vi nodes ai nodes di 
define nodes bi respectively 
interface construct shared codomain follows 
define roots mi mapped def mi di disjoint sum define smallest equivalence 
define codomain isomorphism def denote equivalence class parents define simulate far possible similar def def define simulate def di def di checks necessary ensure definition sound right hand sides clauses defining parent maps defined places respectively 
points checked appendix gives proof theorem rpos place graphs plg pair place graphs bound exists rpo construction yields rpo 
behavioural theory bigraphs need know construct rpo place graphs link graphs separately characterise set ipos pair common domain 
redex shall know labelled transitions 
place graphs immediate question rpo vary keep fixed vary bound 
corollary theorem epi remains fixed varies case unique ipo fact pushout 
general vary ipos 
phenomenon important transition systems occurs link graphs worth seeing simple example 
diagram shows pair consists root nodes bound shared root extra node keeping fixed vary choosing keeping fixed 
diagram indicates pair rpo varies take take extra root shown parentheses appears 
example illustrates possible ipos pair root ri ai may mapped bi special root node 
case composite bi ai special root trace ri case retains trace shall call case elision 
constructing ipo families formally answer question conditions pair bound 
bound exists call consistent step define certain conditions necessary sufficient consistency 
roughly speaking conditions ensure treat shared members sites nodes compatibly bound exist extend include part shared 
bound ipo roughly adds necessary 
definition consistency conditions place graphs define consistency conditions pair place graphs 
range recall range shared places 
cp ctrl ctrl cp ai ai cp ai vi ai ai may helpful express cp cp words children nodes ai 
cp says parent place node shared shared parent 
cp says hand parent shared place unshared node parent root sibling sibling 
necessity conditions easy omit proof proposition consistency place graphs pair bound consistency conditions hold 
going may helpful see simple example 
consistent pair place graphs bound example consistent place graphs consider pair roots sites nodes subscript shared 
controls shown 
worth checking consistency conditions hold 
happens extra node added sibling 
unshared cp violated bound exist 
shared preserve consistency conditions particular cp sibling remains bound 
assuming consistency conditions definition shall prove exist ipos 
ipo bound shall shown consistency conditions sufficient bound exist 
idea construction epis unique ipo root allows variation saw earlier 
construction ipos place graphs assume consistency conditions pair place graphs define family ipos follows 
nodes take nodes ci 
interface choose subset roots mi 
set ki mi define ki roots mapped codomain def ki 
ai disjoint sum define smallest equivalence 
define codomain isomorphism def denote equivalence class parents choose functions arbitrary non atomic node define parent map follows similar def def maps called refers fact roots ai exported ipo interface mapped body ci 
distinct ipo choice ipo unique forced 
happen reasons ai roots empty nodes shared elision exist 
show definition sound 
clause ensure exists yields value second clause ensure 
consistency conditions ensure 
validate construction theorem characterising ipos place graphs pair ipo iff generated isomorphism construction 
proof outline isomorphism 
recall bound ipo iff legs rpo bound assume built construction recall subsets mi equivalence defined 
apply construction create pair choosing sets follows def mi ai di def di coincides prove show ipo construction coincide rpo construction codomain coincides codomain show parent maps ci coincide bi 
ipo bound built construction 
prove converse consider bound built construction sets 
apply construction yield rpo coincides prove show rpo construction coincide ipo construction codomain coincides codomain show parent maps bi coincide ci 
bound built construction ipo 
shall finish section introducing important place graphs motivated development studied section 
definition hard place graphs hard place graph root non atomic node 
form sub precategory denoted 
condition roots ensures hard place graphs epi 
means seen consistent pair unique ipo pushout 
extra condition non atomic node mathematics simpler example hard change ipo pushout construction needed see proposition pushouts hard place graphs consistent pair hard place graphs pushout built plg construction hard pushout 
connection plg 
signature choose new atomic control zero arity adjoin form arrow plg hard place graph adding node child root node 
shall call nodes place nodes 
say bigraphs place equivalent differ occurrences place nodes 
place equivalence static congruence definition 
exists quotient precategory arrows place equivalence classes hard place graphs support equivalence class just support member place nodes 
furthermore quotient precategory isomorphic plg 
reader may safely omit rest section reading section 
shall hard place graphs ipos pushouts helps avoid 
point need invoke place equivalence order forget place nodes 
purpose order transfer results setting need know certain properties 
prepare showing operation generates addition removal single place node affect pushout property certain conditions 
propositions ease notation shall mean fresh place node distinct 
proofs appear appendix 
proposition pushout variation bound 
add new place node yielding 
pushout iff pushout 
ways adding single place node square consisting bound preserving bound 
ways preserve pushout property directions proposition 
add lose pushout violate ipo property nodes ipo nodes adding 
case may gain pushout bound previously existed 
best seen reverse pushout augmented pair deleting may remove shared node leaving merging roots occur pushout 
adding constraint obtain proposition second pushout variation bound 
fresh place node added members yielding bound node root 
pushout pushout 
sibling pushout pushout 
link graphs link graphs capture connectivity bigraphs ignoring nesting 
treatment significantly simpler previous treatment compatible 
close formal analogy treatment place graphs link graphs 
place graphs assume signature assigning control arity ar 
assume infinite set names 
definition link graph link graph ctrl link finite sets inner names outer names nodes edges 
function ctrl called control map function link called link map def ar ctrl set ports shall call inner names ports points edges outer names links 
outer inner names interfacing important defining composition 
talk name adjective mean outer name 
basic properties definition idle open closed peer lean link idle preimage link map 
outer name open link edge closed link 
point inner name port open link open closed 
distinct points peers link 
link graph lean idle edges 
idle name needed example may want consider bigraphs members homset uses name 
hand idle edge serves useful purpose may created composition 
shall need ensure property idle edges preserved certain constructions 
definition precategory link graphs precategory lig name sets objects link graphs arrows 
composition link graphs ai vi ctrl ei link xi xi defined node def sets edge sets disjoint ctrl link ctrl ctrl ctrl link ide link link ide 
def identity link graph idm idx note lig supported node edge sets support sets 
describe composite link map link follows considering possible arguments link link link link link link main difference give identity nodes links link graph 
terminology previously defined links terms equivalence points names link equivalence class 
avoided introducing explicit link set manipulation equivalences required exhibit characterise rpos ipos harder treatment 
analogy place graphs denote link map simply proposition isomorphisms link graphs arrow lig isomorphism iff nodes edges link map bijection note names interface identified alphabetically 
difference mathematically unimportant 
alphabetical names convenient link graphs just convenient calculus lead naturally forms parallel product familiar process calculi 
defining tensor product require disjoint interfaces definition tensor product tensor product lig defined follows objects simply union sets required disjoint 
link graphs ai xi yi take defined interface products defined disjoint node sets edge sets take union link maps 
important variant tensor product merges outer names require disjoint 
fewer algebraic properties tensor categorically bifunctor important modelling process calculi definition parallel product parallel product lig defined follows objects def link graphs ai xi yi define disjoint union link maps 
shall need epis monos proposition epis monos link graphs link graph epi iff name idle mono iff inner names peers 
notation considering pair link graphs common domain shall adopt convention naming nodes ports edges 
denote node set ai vi denote 
shall vi 
range vi 
similarly pi pi ei ei ports edges 
shall pi points pi pi context resolve ambiguity 
reasons equipping link graphs explicit edge sets node sets get simple rpo theory 
reader noticed striking formal analogy link graphs place graphs 
closer inspection analogy appears break 
parent map domain codomain include nodes link map link sets disjoint parent map link map iterated link graph notion nesting 
rpo theories identical similarly possible 
give intuition place graphs 
suppose bound wish construct rpo 
form truncate removing names points edges outer face create new link name point unlinked truncation equating new names required 
formally construction rpos link graphs rpo pair link graphs relative bound built stages 
rpos preserved isomorphism assume disjoint 
notational conventions introduced 
nodes edges vi nodes ai nodes di 
define nodes bi respectively 
edges ei treated exactly analogously ports pi inherit analogous treatment nodes 
interface construct shared codomain follows 
define names xi mapped def xi di disjoint sum define smallest equivalence point 
define codomain isomorphism def denote equivalence class links define simulate far possible similar def def define simulate def di xi def di definition proved sound shown right hand sides clauses defining link maps bi defined links bi respectively 
prove proof appears appendix theorem rpos link graphs lig pair link graphs bound exists rpo construction yields rpo 
proceed characterise ipos pair link graphs just place graphs 
fortunately formal analogy allows omit proofs shall exhibit construction full 
ask link graph rpo vary keep fixed vary bound 
answer epi remains fixed varies case pushout 
place graphs need treat general case 
step establish consistency conditions 
definition consistency conditions link graphs define consistency conditions pair place graphs 
range arbitrary points pi 
range pi 
range shared points 
cl ctrl ctrl cl ai ai cl ai ei ai ai express cl cl words 
cl says link point closed shared shared link 
cl says hand link shared point closed unshared link open peer peer 
proposition consistency link graphs pair bound consistency conditions hold 
going may helpful see simple example 
example consistent link graphs consider pair link graphs 
nodes subscript shared 
controls shown 
pair consistent bound shown 
worth checking consistency conditions 
assuming consistency conditions definition shall construct empty family ipos construction exactly follows analogy place graphs 
clear epi ipo unique pushout 
construction ipos link graphs assume consistency conditions pair link graphs define family ipos follows 
nodes edges take nodes edges ci 
interface choose subset li names xi members li idle 
set ki xi li 
define ki names mapped codomain def xi ki 
ai xi consistent pair link graphs bound disjoint sum define smallest equivalence 
define codomain isomorphism def denote equivalence class links choose arbitrary functions li 
define link maps ci xi follows give similar def def maps called refers fact idle names li ai exported ipo interface mapped body ci 
distinct ipo choice li ipo unique li forced 
happen reasons ai idle names empty edges shared elision exist 
soundness definition fact bound established analogy corresponding results place graphs 
similarly characterisation theorem stating construction creates ipos proved analogously theorem place graphs theorem characterising ipos link graphs pair ipo iff generated isomorphism construction 
pure bigraphs development develop theory pure bigraphs definition 
introduce obvious precategory combining plg lig definition precategory pure concrete bigraphs precategory big pure concrete bigraphs signature pairs objects interfaces bigraphs ctrl arrows contexts 
call inner face outer face 
bigraph node set disjoint composition defined directly terms composition components follows def identities idm idx consists hard bigraphs place graphs 
section stated definitions results apply equally big 
section pure bigraphs contrast binding bigraphs studied section shall omit adjective pure 
shall omit concrete time definition shall introduce bigraphs forgetful functor 
shall continue omit signature important 
combine familiar place graph link graph structures yield bigraph structures 
proposition isomorphisms bigraphs isomorphisms big combinations place graph isomorphism link graph isomorphism 
definition tensor product tensor product bigraph interfaces defined def disjoint 
tensor product bigraphs gi ii ji defined def interfaces exist node sets disjoint 
combination wellformed constituents share node set 
routine verify axioms partial tensor product 
fact bigraphs instance mathematical structure introduced section theorem bigraphs wide monoidal signature precategories big wide monoidal origin interface width proof leave details reader check 
note big supported support sets form disjoint sum node set edge set 
width functor arrows bigraphs follows width function sending site unique root section lower case 
ground bigraphs inner face write represent agents brss section model agents conventional process calculus section 
properties bigraphs inherited place graphs link graphs 
example proposition epis monos bigraphs bigraph big epi resp 
mono iff components epi resp 
mono plg lig 
follows theorem equip bigraphs reaction rules shall wrs apply main congruence theorem theorem provided rpos 
draw rpo results place graphs link graphs 
deduce theorem corollary rpos bigraphs big rpo provided triple place graph rpo link graph rpo proof check constructions combination triple formed constituents node set 
established rpo property easily verified diagram chasing 
shall consider ipos bigraphs 
theorems prove corollary ipos bigraphs pair ipo big iff place graph ipo link graph ipo proof prove just big 
assume ipo big 
plg definition bound need show id rpo candidate rpo find unique mediating arrow intended rpo candidate 
shown members support members id 
may form triple combinations id consistent pair bigraphs ipo suitable interfaces prove candidate rpo big unique mediating arrow rpo id candidate 
place graph constituent mediator provides required unique mediator plg done 
similar argument applies lig 
assuming ipos plg lig routine diagram chasing verify ipo property big 
example bigraph ipos illustrate ipos big combine example place graphs example link graphs node sets 
cases bounds ipos pushouts graphs epi 
combination shown 
bigraphs epi results show bound ipo pushout 
give special cases ipos 
pushouts ipos easy verify precategory proposition containment pushout epi 
pair pair id pushout 
particular id id respectively pair id id pushout epi id id pushout 
tensor product preserves ipos disjoint support proposition tensor ipo plg lig big ipo ipo supports ipos disjoint 
provided tensor products exist ipo important corollary help proposition ipos contain identities idi idj idj idi idi idj corollary tensor ipos identities share nodes free names disjoint pair idj idi ipo idi idj 
see diagram 
particular ground bigraphs ipo diagram 
shall call bigraph lean link graph lean idle edges 
section shall need transform ipos addition subtraction idle edges 
write result adding set fresh idle edges easy prove ipo construction link graphs proposition ipos idle edges pairs ipo lean lean 
fresh set edges ipo iff ipo 
turn bigraphs 
get concrete bigraphs wish factor identity nodes edges wish forget idle edges 
define equivalence little coarser support equivalence definition pure bigraphs category concrete bigraphs lean support equivalent written discarding idle edges support equivalent 
category big pure bigraphs objects big arrows lean support equivalence classes concrete bigraphs 
lean support equivalence clearly static congruence definition 
associated quotient functor assured definition big big definition analogous restriction quotient functor 
id id bigraphs may lack rpo note natural versions place graphs link graphs 
little combine place graph link graph form bigraph 
combination sense nodes identity 
deeper reason studying concrete bigraphs possess rpos 
allow section derive behavioural congruence big show transfer certain assumptions big 
see directly big see lacks structure big 
simple example functor loses epis example bigraph epi idle names preimages epi 
seriously big lacks rpos general shall show 
example bigraphs lack rpos controls atomic arity 
shows candidate rpos pair bigraphs pair 
candidates di id speaking informally candidate keeps nodes distinct second candidate coalesces 
treatments node occurrences properly distinguished bigraphs rpo fails exist example 
see suppose rpo exists 
mediators candidates shown making diagram commute 
leads contradiction follows 
empty support example id deduced 
follows contradiction 
shall finish section introducing terminology operations needed sections 
notations terminology abbreviate interface similarly abbreviate interfaces identical origin identity id may written variously 
bigraph interfaces zero width having nodes called wiring 
generated composition tensor product basic forms called closure function necessarily surjective called substitution 

xn write xn multiple closure 
vectors equal length xi distinct write 
surjective substitution xi yi 
unique substitution empty domain codomain written substitution expressed uniquely surjective 
range renamings bijective substitutions 
interface prime width 
shall write prime interface note particular prime bigraph inner names prime outer face 
important prime merge nodes simply maps sites single root 
bigraph inner names converted merge prime merge idx bigraph discrete edges link map bijective 
means point open points peers name idle 
non atomic control arity sequence distinct names define discrete ion kv single node ports linked omit subscript understood 
discrete prime names composite discrete molecule 
atomic ion define discrete atom resembles ion possesses site 
arbitrary non discrete ion molecule atom gained composing id discrete 
omit 
idi compositions ambiguity examples merge merge idx wiring may restrict link map subset yielding restricted wiring outer face may write simply idm note atom molecule prime atom ground molecule need sites 
reader may wonder primes inner names 
allows prove prime factorisation property proposition 
look variants tensor product reflect closely notion parallel composition familiar process calculi 
operations apply immediate epi 
representatives big epi 
specific argument case 
arbitrary bigraphs especially significant applied ground bigraphs model processes 
process calculi parallel product processes may share names 
extend parallel product link graphs definition follows definition parallel product parallel product bigraphs defined interfaces def bigraphs def interfaces exist node sets disjoint 
easy verify associative unit 
insist disjoint inner names ensures parallel product formed 
note keeps regions separate purpose remote reaction rule calculus shown 
way constructing shall extending product binding bigraphs names take tensor product merge names proposition parallel product defined 
substitutions defined follows zi names shared wi fresh names bijection zi zi wi wi zi zi 
shall continue combine fact defined link graphs means 
shall abuse notation extending primes definition prime product prime product prime interfaces def prime bigraphs defined define prime product def merge associative unit applied primes 
chosen symbol ccs calculus correspondence turn exact 
shall find useful abuse notation write joining wiring prime 
summarise defined width maximum widths 
consider discrete bigraphs 
precise sense fully complement wiring proposition underlying discrete bigraph bigraph big expressed uniquely iso idn wiring discrete 
shall call unique factorisation discrete normal form dnf 
applies equally bigraphs play important part complete axiomatisation big subject section 
discreteness behaved 
clear composition tensor product preserve proposition synthesis analysis discrete bigraphs big discrete pure bigraphs form monoidal sub precategory 
discrete may factored uniquely isomorphism domain factor di dn renaming di prime discrete permutation 
ipo discrete discrete 
discrete ipo 
note renaming discrete prime zero width factor 
unique factorisation depends fact primes inner names 
special case ground factorisation just dn product prime discrete ground bigraphs 
preparation section dynamics 
define parametric reaction rules allow replicate parameters discard 
shall call operation parameters instantiation 
definition ensures names shared copies parameter uses support translation ensure copies disjoint supports 
definition instantiation instantiation width width write determined function function defines map gr gr follows 
decompose dm di prime discrete 
define def en ei map defined support translation propositions 
note names en may fewer may surjective 
convention outer names determined outer names deduce important properties proposition wiring instance wiring commutes instantiation proof take dnf 
proposition wiring product wiring commutes parallel prime product proof routine 
deduce apply instantiation product primes proposition instantiating product ai yi prime ground yi 
instantiation 
bj am bn proof express ai dnf discrete di disjoint name sets 
apply propositions 
instantiation breaks ground bigraph general break prime fact applied product primes simply copies prime factors 
instantiate prime broken result may contain copies fact important section means transformed replacing finite number occurrences formally proposition instantiating prime component arbitrary prime inner face instantiation 
choose disjoint renamings xi exists context xi ak defined ai ia pair context proof part apply propositions express terms product prime discrete factors 
fact factors ground prime inner face obtain equation dm permutation prime outer face right hand side independent proposition obtain expression involving support disjoint copies required 
second part define ci bi ai ak ci differs ci replacement single copy required result need observe ci ci choosing context ei bi ai ak taken theory pure bigraphs far required dynamics bigraphs introduce section 
algebra pure bigraphs section diverge main theme behavioural theory bigraphs sharpen understanding algebraic structure 
reader may safely study sections reading 
ths algebra develop just bigraphs big 
primary model introduced concrete bigraphs big mainly obtain part iii behavioural theory transferred big 
algebraic theory big minor modifications valid big 
shall find simple complete axiomatisation pure bigraphs 
useful kinds normal form 
terms discrete bigraphs useful proving completeness axioms uses parallel products better fitted practical applications 
defining algebraic signature confused control signature consisting elementary bigraphs sufficient generate bigraphs 
elementary bigraphs define elementary forms pure bigraph closure substitution root merge map sites root swap places discrete ion distinct 
shall show generate bigraphs composition tensor product 
elements generate node free link graphs explained section 
notation introduced clarity distinguishing bigraphical substitution underlying functional substitution recall ranges bigraphical substitutions renamings 
elements generate node free place graphs 
example merge merges sites defined merge def def merge id note merge id merge merge 
note unit absent hard bigraphs 
range permutations generated isomorphism product renaming permutation 
usual symmetries strict symmetric monoidal category defined extending place symmetries follows def idx node free elements require discrete ions express big 
particular express discrete atom 
discrete normal forms proposition shows expressive power elementary bigraphs 
shows bigraph big expressed kind normal form called discrete normal form dnf 
shall consistently stand discrete discrete prime discrete molecular bigraphs 
proposition discrete normal form big bigraph discrete discrete prime discrete molecule expressed discrete parts equation respective form recall renaming permutation idn qn merge idn np expression unique certain isomorphisms parts 
applying equations bigraph expression transform dnf applying equations apply repeatedly 
note unit occurs special case 
axiomatisation address question set axioms complete sense valid equation terms elementary bigraphs provable 
answer turns simple axioms shown table 
categorical axioms id id id id idi idi link axioms idx place axioms merge id id unit merge merge id merge id merge associative merge merge commutative categorical axioms standard strict symmetric monoidal category 
note tensor product defined interfaces disjoint name sets equations required hold sides defined 
remarkable axioms required ions non empty elements 
bigraphs free structure 
theorem complete axiomatisation expressions constructed elements composition tensor product denote bigraph big congruence generated axioms 
proof proof theorem quite detailed give brief outline 
direction soundness just requires easy proof axioms valid 
direction completeness requires steps 
show induction structure expressions equality arbitrary expression dnf provable axioms 
second unique certain isomorphisms show equality isomorphic provable axioms 
connected normal forms discrete normal form dnf important proof completeness axioms 
tensor product heavily axiomatisation particular plays important part 
hand parallel products allow sharing names preserve discreteness natural process calculi programming main purpose combinator calculus combine expressions channel may communicate channel reaction rule xy see examples section combinators see discussion parametric reaction rules section follow 
fact find normal form sense opposite dnf 
dnf pull wiring outermost adopt strategy pushing inwards far 
achieved place pushing closures inwards possible 
call result connected normal form cnf embodied proposition analogous proposition 
primes molecules necessarily discrete proposition connected normal form big bigraph prime molecule expressed equation respective form recall substitution permutation idn pn idm idm mn id case member name members ensuing product 
names need distinct 
case expression unique renaming certain isomorphisms parts 
regard cnf important practical 
example shall hard derive cnf cnfs shall leave open exists pleasant axiomatisation uses parallel products place tensor product 
binding bigraphs reader interested dynamics adding binding bigraphs safely skip section proceed dynamic theory section 
able read sections part iii interpreting pure bigraphs 
binding needed section asynchronous calculus 
section studied pure form bigraph placing linking completely independent structures set nodes 
doing roles played place may define neighborhood reactions confined ambient calculus contrast may prevent reaction boundary removed calculus may define site parameter reaction rule determining may replicated discarded 
section shall relax independence placing linking defining role place may define scope bound link 
allow represent things input prefix calculus binds name 
step take enrich signatures 
definition binding signature binding signature pure signature definition arity control consists pair finite ordinals binding arity free arity determining number binding non binding ports node 
atomic 
example calculus controls get send see examples 
wish define binding bigraph terms underlying pure points linked binding port node lie inside points may inner names ports ensure inner names transmit scope discipline bigraph composed inner face enrich interfaces follows definition binding interface binding interface takes form width global names new component 
km sequence finite ordinals indexing set kr local names say located denote local names set call pure interface underlying call interface global names global 
note represent local names continue represent global names alphabetically 
ready main definition definition binding bigraphs concrete binding bigraph consists underlying pure bigraph extra structure follows 
declare binders binding ports nodes local names outer face satisfy scope rule binder located node root peer located place site node gu precategory bbg concrete binding bigraphs composition identities defined underlying pure bigraphs easily respect scope rule 
forgetful functor bbg big forgets binding sends analogous definition holds hard binding bigraphs 
pure bigraphs link open name closed 
binding bigraphs distinction link bound contains binder free 
terms extend points link 
scope rule ensures bound link exactly binder global inner names free local inner names local names free bound 
note considering names global local distinction interfaces free bound distinction bigraphs 
example inner name may local name free shall say bigraph free outer face global outer name free 
avoid confusion note may pure bigraph may closed links bound 
free bigraphs important follows characteristic bound point free shall embark recording verifying properties binding bigraphs relates corresponding property section pure bigraphs 
correspondence easy give new definition proposition merely cite corresponding pure bigraphs 
cases correspondence illuminated attribute forgetful functor recall relevant attributes 
faithful full restricted particular homset bbg injective surjective 
functor characterised properties preserves reflects 
letting range arbitrary commuting diagrams functor said preserve property diagrams reflect 
interesting example preserves rpo property reflect 
means find rpo binding bigraphs take preimage rpo pure bigraphs shall find particular preimage unique iso rpo 
remainder section shall extend binding bigraphs properties pure bigraphs order treated section 
binding bigraphs elementary notions isomorphisms proposition iso binding bigraphs combines permutation places bijection global names place bijection kr local names corresponding places 
preserves reflects isos 
tensor product definition tensor product interfaces disjoint tensor product binding bigraphs gi ii ji defined just local inner outer names names 
preserves reflects tensor product 
essentially partial nature tensor standard categorical tensor product total name sets product 
complicate application bigraphs process calculi 
shows tensor behaved binding bigraphs wide monoidal theorem bbg wide monoidal precategories 
epis monos proposition binding bigraph epi resp 
mono iff underlying pure bigraph epi resp 
mono 
preserves reflects epis monos 
concludes elementary notions binding bigraphs 
move central properties relative idem pushouts 
ensure rpos ipos exist take little care rely corresponding results pure bigraphs 
follows shall terms binding pure rpo mean rpos binding pure bigraphs respectively results apply bbg big 
shall talk binding ipos pure ipos 
construction building binding rpo bound binding bigraphs 
wish build binding rpo build pure rpo separate constructions place graphs link graphs constructions 
interface rpo inner face shall build required interface link isomorphism big see diagram general triples exist bounds relative vary chosen isomorphism name may choose global name local name located place binding rpos amounts saying reflect rpo property pure binding bigraphs 
binding bigraphs pure bigraphs fact shall choose obey scope rule subject constraint contains local names possible 
construction notation linked names xi xu name set au name xi global name ai choose global member xi local name ai choose located site ii choose located unique determines isomorphism 
note scope rule ensures definition independent choice local name xi linked construction defined 
proposition binding rpos binding rpo provided construction corollary 
proof construction 
note pure rpo au du interface bound relative find unique mediating arrow interface bound au relative du unique mediating arrow shown diagram 
claim obeys scope rule 
shown case analysis bound points depends facts bu cu obey scope rule second name iu linked bu name xi iu third construction local iff xi local 
follows mediating arrow unique unique mediating arrow faithful functor 
completes proof 
corollary preserving rpos forgetful functor preserves rpos binding rpo pure rpo au du proof assume binding rpo interface interface binding rpo built construction 
rpos unique isomorphism mediating iso rpos 
construction know pure rpo au du mediating iso iu rpo relative bound isomorphism preserves rpo property pure ipo 
turn binding ipos 
construction rpos depends set consistency conditions find extra condition needed binding bigraphs 
show construct family binding ipos consistent pair corresponding construction pure ipos 
check yields binding ipos isomorphism 
definition consistency conditions pair binding bigraphs common inner face 
define conditions consistent cp conditions cp cp underlying place graphs definition cl conditions cl cl underlying link graphs definition cb shared point bound closed ai open local name 
see need cb suppose bound bound closed name 
scope rule requires local 
place graphs link graphs find conditions necessary sufficient existence bounds ipos binding bigraphs 
characterise binding ipos terms pure ones 
deal single theorem follows note sufficiency consistency conditions follows clause theorem theorem binding ipos consistency conditions cp cl cb necessary existence bounds binding bigraphs 
satisfy consistency conditions pure ipo binding ipo isomorphic 
binding ipo pure ipo proof suppose bounds binding bigraphs 
bounds pure bigraphs immediately cp cl hold necessary bound place graphs link graphs respectively 
condition cb established argument preceding discussion 
suppose satisfies consistency conditions au pure ipo 
note conditions cp cl ensure ipo 
construct binding bigraph pure isomorphism bu construction proceeds construction uses condition cb bu pure ipo id rpo au bu construction corollary special case conclude binding ipo 
third result special case corollary 
pair binding bigraphs consistent precise correspondence binding ipos pure ipos lift static properties binding bigraphs especially ipo properties 
note especially pure bigraphs sub precategory binding bigraphs binders 
shall labour point theory binding bigraphs conservative extension pure bigraphs property binding bigraphs restricted pure ones coincides corresponding property previously defined 
binding bigraphs properties special ipos propositions corollary proposition containment pushout ipos disjoint supports hold unchanged binding bigraphs 
notion lean bigraph idle edges unchanged course idle edge bound properties relating ipos idle edges unchanged 
follows lean support equivalence extends support equivalence discarding idle edges unchanged 
leads bigraphs definition binding bigraph lean support equivalence class concrete ones 
signature leads category bbg quotient functor big big 
similarly hard binding bigraphs 
ground bigraphs ground bigraph inner face 
interfaces general form interface global may write places may write names may write prime width may write 
note unit width differs zero width 
wiring bigraph faces zero width 
nodes takes form retain notations closure substitution global names 
prime bigraphs bigraph prime outer face prime inner face global names note particularly may local inner names 
important prime datum links local inner names free names 
xk 
abstraction dual datum new operation abstraction primes may form abstraction turns free name local name 
violate scope rule global inner names 

xk vector distinct names write xk dual properties idx id discreteness notion discreteness subtle binding bigraphs 
recall link free bound binder local name binding port point port inner name 
binding bigraph discrete free link outer name exactly point 
conservative extension discreteness pure bigraphs imposes constraint bound links 
ions atoms molecules definition ion allow binding 
non atomic control sequence distinct names define free discrete ion local inner names bound single node 
prime discrete outer face disjoint names call free discrete molecule 
atomic free discrete atom just 
arbitrary ion molecule atom got imposing wiring abstracting free names 
concludes second list properties binding bigraphs including taxonomy conservative extension taxonomy pure ones 
conservatively extend important operations decompositions pure binding bigraphs add new ones 
binding bigraphs operations decompositions parallel product definition proposition extending previous definition parallel product interfaces ji ni ki yi keeps local names disjoint may share global names def define parallel product binding bigraphs equation proposition 
prime product definition extending previous definition prime product prime interfaces def expression prime product prime binding bigraphs terms parallel product just 
underlying discrete bigraph proposition previous unique decomposition bigraph terms underlying discrete extended exactly idi wiring discrete free names 
called discrete normal form dnf synthesis analysis discrete bigraphs proposition discrete binding bigraphs form monoidal sub precategory 
factorisation discrete tensor product prime discrete factors course essentially zero vectors ipo properties discrete bigraphs replacing wiring component idn idi free names 
instantiation definition replace pure bigraphs binding bigraphs interfaces free names 
instantiation determined underlying function satisfy condition allows map gr gr defined just terms dnf wiring component idn replaced idi free names 
wiring instance proposition proof instantiations proceeds 
wiring product proposition proofs proceed 
instantiating product proposition proof proceeds ai prime total name set bj am bn instantiating prime component proposition proposition asserts prime inner face prime agents instances similar sense transformed replacing occurrences property vital proofs bisimilarity proof proceeds pure bigraphs 
concludes extension operations decompositions binding bigraphs 
shall refine algebraic theory section binding bigraphs 
conjecture definitions results need minor adjustments chiefly concerning data abstractions need 
conclude established static theory binding bigraphs conservative extension pure bigraphs 
refinements minor rpos ipos non trivial extra argument needed 
sections develop dynamics binding bigraphs shall appeal definition result pure bigraphs extended refined binding bigraphs shall add superscript example definition 
reactions transitions section ensured existence rpos binding bigraphs defined useful structural properties discreteness 
ready specialise definitions theory wide reactive systems section obtain bigraphical reactive systems brss 
binding bigraphs 
binding brss form objects category arrows wrs functors pure brss constitute subcategory 
readers omitted reading section binding bigraphs may interpret section terms pure bigraphs simply read big big bbg bbg ignore superscript definitions results 
define notion brs main remaining step define parametric reaction rules binding bigraphs main result obtain congruence theorem bbg able transfer bigraphs bbg 
consider reaction rules brs recalling definition examples section 
parameters par transform maps trans par gr 
parameters discrete recall section binding bigraph discrete free link open free name exactly point 
limit applicability reaction rules proposition obtain combining discreteness wiring technical development smoother discrete parameters 
transforms allow replication discard parameters instantiations definition definition reaction rules bigraphs ground reaction rule pair ground outer face 
set ground rules reaction relation agents active ground rule 
parametric reaction rule redex takes form inner faces widths free names 
third component instantiation definition 
discrete parametric rule generates ground reaction rule idx idx note dm discrete di prime instance takes form di occurs instance bound names copy may treated differently hand free names exported context surrounds reaction 
pure bigraphs shall instantiation follows requiring discrete limit reaction outer context impose wiring non discrete parameter 
limit transitions essentially parameter part par label reflects discreteness limitation parameter underlying transition impose arbitrary substitution part shared exceeding role parameter play 
function underlying instantiation need injective allows replication parameters 
similarly need surjective allows discard parameters 
definition bigraphical reactive system bigraphical reactive system brs signature consists bbg equipped set reacts reaction rules closed support equivalence 
denote similarly bbg reacts proposition brs wrs bigraphical reactive system wide reactive system 
proof easy see bbg wide precategories signature support bigraph disjoint sum node set edge set width interface discussed width bigraph 
details easy check 
reaction rules parameters par interface just discrete agents activity map act act def active lastly transform reaction rule provided instantiation 
result ensures brss inherit definition transitions ipo pairs standard transition system st induced reaction rules 
inherit definition bisimilarity immediate corollary theorem corollary congruence wide bisimilarity concrete brs equipped standard transition system st wide bisimilarity agents congruence 
transfer st congruence property brs bbg reacts bbg defined quotient functor definition reacts obtained reacts 
similarly 
recall functor quotient lean support equivalence little coarser quotient support equivalence discards idle edges 
transfer congruence result prove respects st purpose impose slight constraint reaction rules reacts redex lean recalling section idle edges 
deduce crucial property lean support equivalence proposition transitions respect equivalence concrete brs redexes lean equipped st transition label components lean 
transitions respect lean support equivalence sense definition 
transition label defined exists transition proof part proposition fact discrete agent lean 
second part proposition assumption redex lean ensures share idle edge agent ready transfer congruence result corollary concrete brss 
immediate invoking theorem corollary behavioural congruence brss concrete brs redexes lean equipped st quotient functor equivalence 
iff 
bisimilarity congruence concludes elementary theory bigraphical reactive systems 
part iii shall refine results important classes brs obtaining tractable transition systems 
part iii ends applying results bigraphical presentation asynchronous calculus exactly recovering standard behavioural theory 
part iii specialisation application class simple brss introduced include models calculus mobile ambient calculus 
structural properties allow simplify transition systems derived generally part ii 
particular prove important adequacy theorem asserts derived transition system simple brs confine attention transitions agent contributes non trivially underlying reaction 
narrow simple brss basic brss 
purpose obtain nice characterisation labels involved derived transition systems result verified techniques relative pushouts 
proceed encode finite asynchronous calculus basic brs 
result independently dynamics processes structurally congruent representing bigraphs coincide 
turns labels derived transition system correspond standard labels 
prove bisimilarity induced bigraph representation calculus coincides standard congruences strong bisimilarity strong barbed bisimilarity 
supports claim bigraphical systems consistent previous process calculi 
final section explores lines research including suggestions varying technical presentation bigraphs enriching domain application 
simple brss adequacy shall specialise theory defining simple brss redexes certain structural properties 
predicted section working able show engaged transitions free prime agents adequate standard transition system st yields tractable transition system transfer brss yielding bisimilarity congruence 
class simple brss admits calculus ambient calculus 
recall section link open belongs outer face closed properties inherited points link 
recall section bigraph free open link free 
definition simple brss call bigraph open free link open 
call guarding inner name open site root parent 
call simple idle names regions inner names peers sites siblings free prime open guarding 
brs simple redexes simple 
conditions easy accept see purpose redex fails 
concrete brs equate respectively epi mono properties 
define preserved quotient functor preserves epis monos 
guarding easy condition accept 
main constraints freeness openness 
remains seen far relax constraints weakening results 
give proof easy properties openness proposition openness properties composition open iff open 
open bigraph lean idle edges 
ipo open open 
rest section concerned hard brss signature see adequacy proof shall underline condition 
consequence hard concrete brs limit consideration free agents avoid arise ipos rpos proposition transition pushouts hard concrete brs ipo pair underlying standard transition free agent simple redex main rectangle right hand square pushouts 
easy show left hand square need pushout fact may ipo 
arises discrete may idle bound names 
happen pure bigraphs case left hand square pushout 
proof typical ipo pair underlying transition shown diagram 
idw ground redex 
show ipos red par idw 
place working hard place graphs need consider link 
case open parameter discrete open proposition 
elision name bound closed link violating scope rule free 
hand names elided idle names epi 
argument second case similar par may bound names 
free left square ipo outer name par bound linked par bound name busy name elided 
rest argument second case case done 
par red par idw shall need specific property transitions simple redexes lemma hard concrete brs ipo pair underlying standard transition shown simple redex suppose par 
par idi isomorphism inner face proof prove name necessarily local local outer name par par peers par guarding open binding port commutativity red par port par assumption outer name par red binding local scope rule par suppose peer par point red par inner name contradicts mono node port contradicting par 
exist 
result follows similar argument showing site root parent siblings 
turn engaged transitions especially involving free prime agents 
definition engaged transitions standard transition said engaged reaction redex 
denote fpe transition system free prime interfaces engaged transitions 
write fpe fpe st bisimilarity fpe relative st prove fpe adequate standard bisimilarity definition fpe restricted free prime interfaces free prime agents establish need prove fpe purpose need match engaged transition resp 
arbitrary transition resp 

lighter task matching transitions 
proving fpe implies free prime show match non engaged transitions antecedent tells match engaged ones 
turns non engaged transition suitably matched fpe 
intuitively surprising contributes transition replacing prevent transition occurring 
lemma justifies intuition case may contribute parameter reaction 
par red par idw lemma hard concrete brs free prime standard transition reaction rule underlying ipo pair shown diagram 
simple assume 
red expressed isomorphism form red idw idw par proof lemma find par takes form par idi isomorphism domain zero width 
claim nodes 
exists node exists prime region par different regions par contradicting par par par idi wiring 
proposition right hand square diagram pushout tensor ipo corollary isomorphism red idw idj required equation red equation calculate idw idj idw idw idi idw idi idw par commute instantiation wiring proposition prove adequacy theorem 
theorem adequacy engaged transitions hard concrete brs simple equipped st free prime engaged transitions adequate engaged bisimilarity fpe coincides bisimilarity free prime agents 
proof immediate fpe restricted free primes 
converse prove free prime fpe implies 
purpose shall show fpe free prime standard bisimulation transitive closure 
suffice id deduce fpe 
suppose fpe 
standard transition defined 
find exist reaction rule underlying ipo pair diagram active width width 
rpos complete diagram square ipo 
par par lpar red lpar red red red idw idw idw active width active 
proposition lower rectangle lower right hand square diagram pushouts 

defined deduce defined proceed show separate cases existence transition underlying ipo pair shown diagram 
note immediately infer fpe transition may lie fpe 
substituting diagram lower squares infer transition 
cases argue completing proof theorem 
case suppose transition engaged 
suppose 
lower large rectangle pushout tensorial isomorphism calculate idw idw idw idw idw case form diagram forms pair ipos def def context fpe required 
case suppose transition engaged 
prime lemma find isomorphism red idw idw par shall find similar transition 
consider par 
discrete know proposition par discrete proposition find wiring discrete par idi proposition represents pushout 
adjoining tensorial pushout ipo pair shown par lred idw idi idw manipulations lemma idj def idj idw idw par comparing similar form fpe free prime appeal proposition find sequence 
ck ck ci ci required 
case suppose transition engaged 
free prime considering ipo outer face find free prime transition lies fpe 
fpe transition free prime fpe def required 
seen case proof simple transition engaged free prime proving bisimilarity prime agents confine attention bisimulations containing free prime agents 
adequacy easy verify desirable properties idle names hold generally proposition idle names bisimilarity hard concrete brs simple equipped st iff 
imply idle names 
proof forward implication congruence 
converse shall verify bisimulation 
consider transition consider transition easily deduce idx idx assuming see proposition transition involve elision easy verify takes form isomorphism sb done 
consider asynchronous calculus rule example 
agent send xy consisting message channel closed single name idle 
hand send xy idle name agent engaged transition bisimilar 
wish transfer fpe brss functor know fpe definite st see definition proposition equate relative bisimilarity fpe absolute fpe 
need know pair determine transition engaged 
turns holds wide range brss including natural encoding calculus ambient calculus 
satisfy simple structural condition define 
definition definite brs define ctrl control bigraph multiset controls nodes 
brs definite redexes different rules ctrl ctrl sub multiset 
note property applies equally concrete brss preserved reflected quotient functor 
chosen term definite concrete brs ensures definiteness engaged transitions relation st sense definition 
fact help corollary deduce corollary engaged congruence hard concrete brs definite simple engaged transition system fpe definite st 
engaged bisimilarity fpe coincides standard bisimilarity prime agents 
fpe congruence context free prime interfaces fpe implies fpe recall proposition simple bigraph lean 
derive analogue corollary fpe place st extra assumptions corollary engaged congruence hard brss hard concrete brs definite simple 
quotient functor lean support equivalence 
fpe denote bisimilarity fpe induced transition system fpe fpe iff fpe 
engaged bisimilarity fpe congruence proof note quotient functor satisfies conditions theorem 
particular proposition respects fpe sub ts st theorem yields immediately 
yields help corollary 
ensured congruence engaged bisimilarity hard brs satisfying reasonable assumptions 
conclude section ask effect working done bbg bbg 
theory smoother avoid place graph 
hand disadvantage empty agent missing 
particular empty process nil calculus encoded atom atomic control zero arity see section 
minor prove provided redex contains 
section shall improve shall find subclass simple brss remove forgetful functor bbg replaces turning unit prime parallel product 
characterising basic brss section prepare wide range applications theory process calculi 
defining class basic brss obtain tractable characterisation transitions showing parts label pair take particularly simple form 
show basic brss transfer congruence engaged ts hard concrete brss soft ones wish deploy theory practice 
section shall deploy results finite asynchronous calculus 
basic brss extend need refinement handling full calculus ambient calculus 
confident refinement possible prefer simplest setting allows application treated fully 
embark defining basic brss 
done 
recall definition simple brs simple redex free prime open guarded satisfies structural conditions concrete brs ensure epi mono 
basic brs extra conditions 
definition basic brs redex flat node node parent 
redex basic flat simple 
binding brs basic definite definition redexes basic 
proposition shows basic redexes easy describe proposition products atoms ions redex basic iff non empty prime product free atoms ions 
seek characterise uniformly exactly possible fpe transitions basic brs reacts 
particular brs task may relatively simple general characterisation avoid repeated particular cases 
section consider fpe transitions write omitting location index zero 
crucial property basic brs shall exploit order characterise transition underlying redex expressed parallel product essentially nodes shared hand nodes disjoint 
call property pseudo flatness 
definition pseudo flat transition transition agent pseudo flat underlying redex expressed forms 
proposition basic ensures pseudo flatness fpe transition arising basic redex pseudo flat 
brs basic sufficient necessary fpe transition pseudo flat consequently shall content characterise pseudo flat fpe transitions 
need couple lemmas ipos link graphs 
lemma wiring concrete link graph square pushout idx lemma ai xi concrete link graphs disjoint support xi 
square ipo idx idx idx idx recall abbreviations prime interface shall find convenient extend notation denote bigraph id note placing angle brackets somewhat arbitrary example idx id id come characterisation theorem 
proof relies notion pseudo flatness allows factor redex underlying transition part shared hand part disjoint 
general factorisation different decomposition parametric redex parameter turn leads decomposition label pair red par 
convenient prove result unstructured labels 
shall refine characterisation obtain red par separately 
theorem characterising transitions basic brs fpe transition underlying ground rule 
suppose transition pseudo flat expressions names 
forms pushout substitutions satisfy 
proof transition underlying ipo shown required expression follow establishing expressions refine diagram 
epi lower square pushout upper square ipo 
form pushout substitutions shown determines bijection substitutions empty support open 
suppose names 
consistency upper square names open 
choose suppose 
port disjoint support shared 
consistency open shows disjoint follows obtain restricting domain 
refine upper square diagram follows idx idx idx idx idx idx idx idx lower square left pushout preceding construction squares right pushout lemma remaining small square ipo lemma top rectangle tensorial 
required expressions follow calculation composite arrows 
corollary characterising parametric transitions theorem suppose idw redex discrete idw discrete components par idx red proof consider ipo pair underlying transition lpar par red idw clearly par red par discrete discrete par contribute nontrivially 
factorisation follows stated 
shift attention brss 
mentioned repeatedly worked concrete brss structure rpos ipos pushouts apply theory ensures congruential behavioural equivalence 
eased task working hard concrete brss place graphs pushouts 
open apply quotient functor definition order transfer fpe congruence theorem hard brss 
fact transfer justified crucial theorem links concrete wide reactive systems ones 
specific result congruence engaged bisimilarity corollary 
may appropriate applications fails reaction rules destructive sense may create bigraphs empty regions inadmissible hard bigraphs 
consider example illustrated empty region created 
recall discussion section hard bigraphs encode empty agent nil calculus unit parallel product exist hard bigraphs place node node atomic control zero arity 
expect prove bisimilarity just treat equation calculus structural congruence nil bigraphs hope treat identity bigraphs just bisimilarity 
quotient place equivalence static congruence 
define smallest equivalence including 
call soft lean support equivalence 
definition quotient functor bbg transfer dynamic theory functor show respects fpe transitions basic brss 
know remains show 
proposition place equivalence respects fpe basic brs redexes free place equivalence respects fpe transitions 
proof uses corollary appears detail appendix exploits flatness may hold weaker conditions 
ready prove corollary allow create tractable congruential ts basic soft brss 
exact analogue corollary preceding proposition replace hard brs soft 
corollary engaged congruence soft brss hard concrete brs definite basic redexes free 
bbg quotient functor bbg 
fpe denote bisimilarity fpe induced transition system fpe fpe iff fpe 
engaged bisimilarity fpe congruence proof functor quotient smallest equivalence includes 
know engaged transitions respect proposition respect respect course quotient functor functor transition system fpe fulfil conditions theorem help corollary yields required results 
reader find helpful compare corollaries 
case transfer transition system concrete brs case show congruence associated bisimilarity preserved 
third case advantage deals engaged transition system tractable works soft bigraphs expect inconvenient avoid having empty regions 
conclude section outline normally expect apply corollary shall apply section 
assume hand brs bbg reacts basic reaction rules simple flat addition definite roughly meaning redex properly included 
wish equip brs suitable transition system prime free agents way bisimilarity congruence 
stages 

create reacts preimage bbg reacts quotient functor follows 
choose fresh nullary atomic control concrete reaction rules reacts take lean preimage rule reacts insert node empty region 

equip reacts engaged transition system fpe knowing previous results associated bisimilarity fpe congruence 

equip bbg reacts transition system fpe invoke corollary ensure associated bisimilarity fpe congruence 
construction corresponds construction details simpler 
worth remarking passage concrete brss purpose 
concrete brss provide rpos absent ones give meaning engaged notion clear transition systems 
finite asynchronous calculus section illustrate bigraph theory applying asynchronous calculus honda tokoro boudol 
restrict attention fragment replication summation refer calculus 
encode brs investigate ts bisimilarity induced 
processes syntax xy denoting output input inaction parallel composition restriction respectively 
dynamics single reaction rule xy indicates communicated substituted rule applied context underneath input prefix input output terms may brought application structural congruence relates process terms differing syntactical detail names reordering parallel components 
dynamics terms ts variations bisimilarity defined asynchronous calculi considered standard including early late open coincide form congruence 
shall refer simply bisimilarity 
variant ts calculus called early style 
summarised lemma characterises transitions structure processes structural congruence lemma process 

xy iff xy 
iff xy 

xy iff exist 

iff exist xy 
define brs lines anticipated example 
definition bbg brs bbg bbg ka ra signature ka consisting controls send atomic get non atomic passive rule set ra consists single reaction rule get instantiation identity 
ready translate processes bigraphs 
conventional abbreviation help 
recall composing wiring write adopt convention ions data writing get xg get conventions model processes bbg ka follows xy get output input operational ingredients modelled atom molecule respectively built controls introduced specifically purpose parallel composition modelled prime product justifying overloading symbol restriction modelled name closure 
basic properties encoding immediate lemma 
prime free busy agent fn 


non input contexts bigraph processes 

implies 
proof outline 
clauses proved induction structure clause check axiom structural congruence respected translation result follows compositionality translation 
map bijective processes iff provided structural congruence taken include restriction input axiom axiom usually included necessary defining reaction 
contend axiom entirely natural respects bisimilarity change behavioural theory calculus 
confuse translation function quotient functors earlier sections 
reaction bbg accurately models reaction 
state formally deal slight complication 
expect imply true general 
simple counterexample consider reaction xy suppose occur free 
corresponding reaction bbg xy get problem reaction reduces set free names bigraph interfaces constant reaction 
solve extend mapping agents idle names indexing process name set containing free names follows bijection processes bbg agents extended cover prime free agents just busy ones agent shall denote corresponding process unique structural congruence 
state correspondence reaction bbg 
theorem dynamics correspondence process agent iff obtained accurate bigraphical model reaction interested equivalence induced bisimilarity bbg 
different related question tss bbg relate 
order investigate issues choose reflect bbg bisimilarity transitions back bbg analyse images relevant relations 
choose approach enables developed theory calculus possible 
definition induced bisimilarity ind smallest relation processes ind theorem congruence ind congruence 
proof lemma congruence ind respect non input contexts follows immediately general congruence property bigraph bisimilarity theorem ref 
treat input contexts separately 
suppose ind 
bisimilar get get bisimilar engaged transitions forms id id right hand sides bisimilar congruence bigraph 
result follows observing 
lemma statements equivalent 
ind 
fn 
fn 
proof implication immediate noting implication immediate fn finite proper subset implication suppose ind fn 
fn 
proposition fn result follows 
order relate ind bisimilarity analyse ts induced encoding 
shall see transitions brs correspond closely ordinary transitions 
certain transitions alien easily eliminated 
problem brs transitions defined isomorphism means transition particular arbitrary name substitution applied including label 
avoid arbitrary substitutions introduce concept definition straight link graph link graph straight outer name satisfies condition open lemma link graph isomorphism straight 
proof outer name open pick inner name def pick fresh name def clearly defines iso construction directly ensures say transition straight label straight straight link graph 
immediate consequence preceding lemma proposition proposition adequacy straight transitions brs straight transitions adequate 
justified limiting attention straight engaged transitions bbg 
define alternative ts purpose reflect exactly transitions 
definition induced transitions define induced labels xy output label binds name process require name may free occurrence consider labels equal differ structural congruence induced label declare agent names environment names en follows en fn xy en xy en en mapping bbg ka defined en idx get xy idx id idx process name set fn write denote pair 
define transition relation pairs labelled induced ind labels smallest ind straight engaged transition bbg 
note definition ensures transition ind process provides free names environment provides new names fresh 
reflects ipo property transitions bbg ipo names essentially equated required commutativity 
shall prove induced transition relation ind induced bisimilarity ind associated bisimilarity words ind provides coinductive characterisation ind give intermediate results characterising respectively straight engaged transitions bbg induced ts 
lemma bbg la straight engaged transition 
forms ra rl bijection names cases holds case ra rl conditions get id discrete names get id get id xi get id proof rule underlying transition forms get discrete 
bbg pseudo flat apply theorem characterise transition 
factored pushout substitutions satisfy 
transition straight non empty 
proceed cases factorisation denotes case get iso pushout property implies idx maps bijectively idx get discrete discrete bijective case table follows 
case get 
iso pushout property implies idx maps get idx case table follows 
case get 
pushout property implies idx symmetric case swapped 
assume 
pushout property implies get idx case table follows 
pushout property implies idx maps get idx case table follows 
lemma follows straightforwardly preceding 
lemma ind fn en form cases case xy xy xi xi xy ready prove transition relation ind characterises ind essentially standard sense 
equivalence ind relates processes ind pairs processes name sets 
mismatch remedied simply requiring transitions involve pairs name sets large include free names processes relating 
lemma ind iff fn ind bisimulation proof ind fn show ind bisimulation 
suppose ind fn ind straight engaged transition def bbg 
note 
lemma matching transition def ind 
note ind required 
ind bisimulation show bisimulation bbg 
suppose la ind matching transition ind 
def lb 
coinductive characterisation ind address main question section relating ind ordinary bisimilarity 
theorem characterising induced bisimilarity induced bisimilarity ind coincides standard bisimilarity barbed congruence 
proof bisimilarity barbed congruence coincide 
suffice establish inclusions ind inclusion immediate observing ind congruence ind transitions characterise observations reductions follows 
ind iff 
ind iff inclusion consider relation consisting pairs form fn 
show ind bisimulation suffice 
pair suppose ind proceed cases label 
case lemma xy ii xy similar cases restriction assume case omit similar simpler 
lemma 
match ing transition 
lemmas reverse order xy ind def 
loss generality assume fn follows zy zy 
required 
case xy 
similar previous case 
case lemma get subcases 
case uy fn zy 
symmetrical cases roles swapped sender recipient cases sender receiver cases varied dropping restriction omit additional cases similar simpler stated 
loss generality assume fn 
lemma xy 
matching transition xy 
lemmas reverse order form ind def zy 
required 
case 
similar previous case 
research directions final section examine possible developments 
consider kinds development model adapting extending model deepening model theory 
course uses model may entail developments second third kind 
model previous section shown model substantial fragment calculus basic brs 
progress extending results full calculus involves largely independent developments synchronous output calculus considered previous section asynchronous sense outputs continuations 
full calculus outputs form xy modelled non atomic form 
expect extension straightforward 
replication form replication recursion necessary order express agents infinite behaviour 
simplest form handle replicated input encoding outlined example 
slight complication arises handling restriction presence replication careful location restriction 
example consider processes free occurrence shared copies copy private copy done far handle restrictions name closure 
version get control binds ports shared copied agents provide simple solution 
replicated input amounts extra variant reaction standard calculus introduce replication structural notion including axiom elude direct graphical modelling possible wrs obtained quotienting brs equivalence induced axiom 
summation example outlines encoding summation inputs 
extension cover synchronous outputs immediate 
reaction rule departs conditions basic brss redex flat 
refinement theory necessary order obtain results believe flatness constraint weakened sufficiently adopting notion sorting bigraphs summations actions inputs outputs different sorts redex example essentially flat pseudo flatness transitions established 
encodings calculi calculus interest 
example ambient calculus encoding outlined example 
intend pursue detail compare resulting transitions congruences exist example hennessy 
note rule illustrated example violates flatness constraint redexes calculus summation ambient calculus subject obvious notion sorting 
encode ambient calculus may need find means relaxing flatness condition alternatively hard brs 
case may note ambient calculus purely form simpler calculus important aspect employ binding 
wishing establish firm link existing process calculi wish explore 
may wish combine existing calculi set new ones 
case analysis programming algebraic formulation bigraphs important preliminary algebraic results section provide promising start 
combining convenient notations suggested illustrations section propose define generic bigraphical programming language 
allow systems designers explore new design structures mobile systems providing essential experimental tool assessing power tractability model 
particular line modelling explored cardelli concerns bigraphs model biological processes 
building original model shapiro calculus purpose cardelli shown direct modelling possible ambient reaction rules 
bigraph model embraces calculus ambients cardelli able show map rules bigraphs extension 
experimental usage typically exposes need adapt extend bigraph model accommodate real world phenomena lie scope 
stochastic treatment non determinism important cited shapiro order run simulations calculus model check observed behaviour 
real world extension add continuum allow continuous reactions 
comment extensions 
adapting extending model formulated bigraphs admit wide variety dynamical systems including existing process calculi 
wider go 
directions look model appear block 
direction may try refine locational structure 
particular easily think uses model locations regions forced nested 
example agent may reside geographical location say cambridge may part national research network multinational business process locations physical virtual may overlap lying 
model place graphs directed acyclic graphs forests 
effect theory 
difficulties arise rpos section algebra section programming language suggested examples section 
direction form reaction rules 
confined transitions ground bigraphs domain 
number inter related issues chose tackle study 
sewell points consider reactions non ground contexts 
suppose example reaction rule possible parameter may wish allow reactions id id ground reaction 
avoided wished allow reaction replicate discard parts parameter model means proper context schematic bigraph contexts linear composition entail discard replication 
fact result reaction general performs appropriate replications discards 
reactions sense theory admit non linear contexts non trivial matter 
clear composition bigraphs treat support clear rpos exist 
leave question research 
strong challenge represent real time hybrid systems wish model embrace communication networks physical devices connected embedded 
process calculi moving direction 
far real time concerned research timed transitions hope adopt similar approaches bigraphs 
hybrid systems approach relevant bigraphs calculus rounds combines mobility calculus differential equations behaviour real continuous variables 
formulation prevents control signature denumerably infinite continuum example family controls indexed real numbers represent distance 
differential equation say relating distances rates change modelled reaction rule representing infinitesimal variation 
represent calculus brs may provide useful metatheory 
doubt technical hurdles overcome handling approach worth investigation 
purposes modelling non determinism reaction relation generated reaction rules arbitrary brs needs refined stochastic treatment 
considerable body stochastic process calculi particular stochastic calculus priami exploited shapiro project model biological processes 
rich opportunities modelling real life mobile processes applications worldwide web stochastic treatment bigraphs 
just biological processes stochastics provide opportunity compare bigraphical simulations experiment offering way validate bigraphical model 
deepening model theory bigraph model supported precategories effort find mathematical medium best suited express uniform behavioural theory 
possible categorical structures satisfy needs standard way 
supported precategories behaved appear 
sassone begun investigate categories strict commutation diagrams relaxed admitting second order arrows 
note arrows form groupoid bigraphs modelled rpos turn groupoid rpos 
consistent may useful providing access existing categorical results approach may retained detailed theoretical analysis 
memorandum placed strong emphasis transition systems behavioural congruence 
notions allowed form useful connections existing process theory suitable form analysis 
important algebraic systems csp failures pre order allow specification implementation expressed matched medium 
reason models adaptable bigraphs leifer shown setting failures preorder precongruence rpo derived transition systems just csp 
process theory strong tradition non standard logics temporal logic modal calculus allow incremental analysis processes simple properties opposed full specifications system expressed verified 
bigraphs obvious challenge find logic spatial temporal 
cardelli spatial logics mobile ambients way years provides promising starting point logic bigraphs 
final direction theoretical development may wish refine notion wide reactive system wrs 
recall section designed framework transitions behavioural congruence derived systems locality allowing reaction occur remote components 
brss structural properties absent enjoy refined theory example rpos shown exist ipos fully characterised 
time bigraphs defined somewhat arbitrary 
worth asking impose axioms satisfied bigraphs allow theory derived axioms fully specified model bigraphs 
axiomatic theory may come closer essence mobile distributed systems 
said outset model bigraphs pilot study 
arbitrary choices aim explore topographical theory mobile systems right see generalise existing process theories 
hope demonstrated success 
best considered definitive theory study possible ingredients theory incentive develop thoroughly 
bergstra klop 
algebra communicating processes abstraction 
theoretical computer science pp 
berry boudol 
chemical machine 
journal theoretical computer science vol pp 
boudol 
asynchrony calculus 
rapport de recherche rr inria sophia antipolis 
brookes hoare roscoe 
theory communicating sequential processes 
acm pp 
cardelli 
languages 
computer systems papers roger needham springer monographs computer science appear pp 
cardelli 
spatial logic concurrency part 
proc 
th international symposium theoretical aspects computer software lncs springer verlag pp 
cardelli gordon 
mobile ambients 
foundations system specification computational structures lncs pp 
castellani 
process algebras localities 
handbook process algebra eds bergstra ponse smolka elsevier pp 
cattani leifer milner 
contexts embeddings closed shallow action graphs 
university cambridge computer laboratory technical report 
submitted publication 
available pauillac inria fr leifer 
hoffmann plump 
hierarchical graph transformation 
foundations software science computation structures lncs springer verlag 
ehrig 
theory graph grammars 
graph grammars application computer science biology lncs springer verlag pp 
ehrig 
bigraphs meet double pushouts 
eatcs bulletin october pp 
fournet gonthier 
reflexive cham join calculus 
proc 
rd annual acm symposium principles programming languages florida pp 
gadducci heckel 
bi categorical axiomatisation concurrent graph rewriting 
proc 
th conference category theory computer science ctcs vol electronic notes tcs elsevier science 
gardner 
process calculi process frameworks 
proc 
con cur th international conference concurrency theory pp 
gardner 
explicit fusions 
proc 
mfcs 
lncs pp 
hirsch montanari 
synchronised hyperedge replacement name mobility 
proc 
th international conference concurrency theory concur lncs pp 
hoare 

communicating sequential processes 
prentice hall 
honda tokoro 

object calculus asynchronous communications 
ecoop workshop object concurrent programming lncs 
jensen milner 
bigraphs transitions 
th sigplan sigact symposium principles programming languages 
lafont 
interaction nets 
proc 
th acm symposium principles programming languages popl pp 
leifer 
operational congruences reactive systems 
phd dissertation university cambridge computer laboratory 
distributed revised form technical report 
available pauillac inria fr leifer 
leifer milner 
deriving bisimulation congruences reactive systems 
proc 
concur th international conference concurrency theory pp 
available pauillac inria fr leifer 
hennessy 
bisimulation congruences safe ambients 
proc 
th international symposium principles programming languages oregon pp 
milner 
calculi interaction 
acta informatica pp 
milner 
calculus communicating systems 
lncs springer verlag 
milner 
computational flux 
proc th acm sigact sigplan symposium principles programming languages pp 
milner bigraphical reactive systems basic theory 
technical report university cambridge computer laboratory 
available www cl cam ac uk users rm 
milner 
bigraphical reactive systems 
proc 
th international conference concurrency theory lncs pp 
milner parrow walker 
calculus mobile processes parts ii 
journal information computation vol pp pp 
park 
concurrency automata infinite sequences 
lncs springer verlag 
parrow victor 
fusion calculus expressiveness symmetry mobile processes 
proc 
lics ieee computer society press 
priami 
stochastic calculus 
computer journal vol pp 
priami regev silverman shapiro 
application stochastic process algebras bioinformatics molecular processes 
information processing letters vol pp 
rounds song 
calculus language distributed control reconfigurable embedded systems 
hybrid systems computation control lncs springer verlag pp 
sassone 
deriving bisimulation congruences categorical approach 
electronic notes theoretical computer science vol pp 
sewell 
rewrite rules bisimulation congruences 
proc con cur lncs pp 
full version appear theoretical computer science vol 
regev silverman shapiro 
representation simulation biochemical processes calculus process algebra 
proc 
pacific symposium biocomputing psb vol pp 
smith 
business process management third wave 
amazon com 
sewell 
nomadic pict language infrastructure design mobile agents 
proc 
asa ma palm springs california 
proofs proofs place graphs appendix justifying rpo construction place graphs section 
restate convenience 
construction rpos place graphs construct rpo pair place graphs relative bound stages 
nodes vi nodes ai nodes di 
define nodes bi respectively 
interface construct shared codomain follows 
define roots mi mapped def mi di define disjoint sum equivalence smallest ai ri 
define codomain isomorphism def denote equivalence class parents define simulate far possible similar def def define simulate def di def di lemma definition construction sound 
proof second clause defining sound definition node set 
similar reasoning applies second clause defining 
clause defining sound impossible 
clauses defining sound right hand sides independent choice seen appeal definition equation 
lemma candidate rpo relative proof prove symmetry consider cases value 
case 

case 

case 

case 

case 


case 

prove case analysis 
case 

case 

case 

case exists readily deduce 
case 

ready prove theorem justifying construction theorem rpos place graphs plg pair place graphs bound exists rpo relative construction yields rpo 
proof proved triple built construction rpo candidate 
consider candidate intervening interface ci nodes nodes 
construct unique mediating arrow shown diagram 
define nodes follows def ci def ci note equations bi ci determine uniquely force definition 
prove equations considering case 

case 


case 


case 
case 

remains prove cases suffice case 

case 
definition 
case 

case definition 
case 

required unique mediator rpo 
turn proofs pushout variations section 
restate convenience 
proposition pushout variation bound 
add new place node yielding 
pushout iff pushout 
proof refer diagrams directions proof 
forward direction assume pushout diagram assume uppermost arrows bound diagram prove bound reverse direction reasoning goes way 
directions note sibling say node site 
assume pushout arbitrary bound 
establish pushout find mediator shown 
uniqueness mediator ensured arrows epi 
clearly contains 
sibling sibling sibling 
obtain formed hard place graph form omitting 
bound pushout mediator 
show mediator suffices show 
consider cases sibling case sibling node shared sibling case sibling node site shared 
sibling calculation place 
assume pushout arbitrary bound 
need mediator shown 
consider sibling case sibling node shared 
sibling bound 
extend adding sibling node bound mediator exists 
require mediator suffices show 
follows directly fact obtained just omitting 
case sibling node site shared 
sibling extend adding sibling site bound proceed exactly previous case 
proposition second pushout variation bound 
fresh place node added members yielding bound node root 
pushout pushout 
sibling pushout pushout 
proof recall establish pushout direction need exhibit mediator arbitrary bound epi property ensures unicity mediator 
assume pushout diagram 
arbitrary bound diagram 
formed omitting bound mediator exists shown 
trivially required mediator 
assume pushout diagram 
arbitrary bound diagram 
shared sibling shall show bound suffices prove 
calculate pushout mediator shown 
trivially mediator ensuring pushout required 
proofs link graphs justifying construction rpos link graphs section 
repeat construction convenience 
construction rpos link graphs construct rpo pair link graphs relative bound stages 
rpos preserved isomorphism assume disjoint 
notational conventions introduced 
nodes edges vi nodes ai nodes di 
define nodes bi respectively 
edges ei treated exactly analogously ports pi inherit analogous treatment nodes 
interface construct shared codomain follows 
define names xi mapped def xi di disjoint sum define smallest equivalence ai xi point 
define codomain isomorphism def denote equivalence class parents define simulate far possible similar def def define simulate def di xi def di soundness definition checked way construction place graph rpos 
show lemma candidate rpo relative proof prove symmetry consider cases value 
case 

case 

case 

case 

case 


case 

prove case analysis 
case 

case 

case 

case exists readily deduce 
case 

ready prove theorem justifying construction theorem rpos link graphs lig pair link graphs bound exists rpo relative construction yields rpo 
proof proved triple built construction rpo candidate 
consider candidate intervening interface ci nodes nodes 
construct unique mediating arrow shown diagram 
define nodes follows def ci def ci note equations bi ci determine uniquely force definition 
prove equations considering case 

case 


case 


case 
case 

remains prove cases suffice case 

case 
definition 
case 

case definition 
case 

required unique mediator rpo 
proofs basic brs give proof proposition place equivalence respects transition system fpe basic brs 
technical lemma shows pushout pair underlying transition agent affected addition removal single place node lemma invokes propositions proved appendix 
write mean formed adding single place node 
lemma diagram underlies transition transition diagram diagram 
transition underlying pushout pair takes form diagram diagram corresponding transition diagram respectively 
par red par idw par red par idw par red par idw proof case place node added form sibling node say 
assume transition diagram 
cases occurs diagram 
case node occurs parameter form setting def 
clearly diagram commutes proposition new lefthand square pushout diagram underlies transition case node occurs par redex flat site form par par setting def def 
clearly diagram commutes proposition new squares pushout diagram underlies transition case node occurs par form par par setting def def argue previous case diagram underlies transition 
assume transition contains underlying pushout pair occur redex occur parameter vertical arrows 
diagrams represent cases analyse separately 
case transition sibling commutation sibling omitting obtain formed parameter obtain commuting diagram 
diagram differs left hand square 
shared sibling invoke proposition showing new square pushout diagram underlies transition case transition par sibling commutation sibling par 
sibling may may site 
omitting par obtain formed arrows par obtain commuting diagram 
invoke proposition square turn showing diagram pushout pair diagram underlies note lemma flatness 
prove property justifies quotient hard place graphs place equivalence 
proposition place equivalence respects fpe basic brs redexes free place equivalence respects fpe transitions 
proof fpe transition 
things prove show defined prove cases lemma assures transition underlying pushout pair arrows agreeing place equivalence 
instantiation easily verify 
putting find required 
label par par red red defined 
show suffice prove simple case par par par par corollary par id tensor product prime factors parameter underlying transition par form new discrete parameter replacing factors new factors proposition direction property instantiations noted obtain pushout pair underlying transition required 
check engaged transition new transition generated cases adding subtracting place nodes respectively 
need note node shared redex place node construction changes place nodes leaving unchanged 
completes proof 

