hyper arc consistency algorithm soft alldifferent constraint willem jan van cwi box gb amsterdam netherlands van cwi nl homepages cwi nl 
presents algorithm achieves hyper arc consistency soft alldifferent constraint 
prove exploit equivalence minimum cost flow problem 
consistency constraint checked nm time hyper arc consistency achieved time number variables involved sum cardinalities domains 
improves previous method ensure hyper arc consistency 
constraint satisfaction problem csp constrained solution satisfying constraints natural allow certain constraints soft constraints violated search solutions violate soft constraints possible 
constraints decided soft hard constraints satisfied 
methods proposed handle constrained csps see instance 
follow scheme proposed gin petit bessi re puget particularly useful non binary constraints 
idea follows 
cost function assigned soft constraint measuring violation 
soft csp transformed constraint optimization problem cop constraints hard weighted sum cost functions minimized 
approach allows specialized filtering algorithms soft constraints shown petit gin bessi re 
soft alldifferent constraint algorithm removes inconsistent values time number variables sum cardinalities domains 
algorithm ensure hyper arc consistency 
propose algorithm ensure hyper arc consistency runs nm time 
principle consider soft alldifferent constraint minimum cost flow problem particular graph 
checking consistency done nm time 
domain values checked consistency efficient shortest path computation takes total time 
outline follows 
section presents definitions related constraint satisfaction problems 
section shows graph theoretic analysis soft alldifferent constraint flow theory 
section filtering algorithm 
conclude discussion section 
background assume familiarity basic concepts constraint programming 
thorough explanation constraint programming see 
constraint satisfaction problem csp consists finite set variables 
vr finite domains 
dr vi di finite set constraints subset constraint defined subset cartesian product domains variables tuple 
dr dr solution csp constraint variables vi 
vik di 
dik constraint optimization problem cop csp objective function optimized 
solution cop solution corresponding csp optimal objective function value 
definition hyper arc consistency 
constraint variables 
xk called hyper arc consistent variable xi value di di exist values 
di di 
dk 
di di 
dk 
dk definition consistent csp 
csp hyper arc consistent constraints hyper arc consistent 
csp inconsistent solution 
similarly cop 
definition pairwise difference 

xn variables respective finite domains 
dn 
alldifferent 
xn 
dn di di dj dk 
different measures violation soft constraint 
minimum number variables need change value order satisfy constraint 
measure applied alldifferent constraint contains hyper arc consistency algorithm 
second measure number violated constraints binary decomposition constraint decomposition exists 
alldifferent constraint decomposition exist xi xj 


follow second refined measure terms soft alldifferent constraint 
alldifferent 
xn cost violation defined violation 
xn xi xj 
definition soft pairwise difference 

xn variables respective finite domains 
dn dz 
soft alldifferent 
xn 
dn di di dz violation 
dn 
variable definition serve called cost variable minimized solution process 
means admissible tuples definition instantiations variables number violated dis equality constraints di dj currently best solution represented max dz 
time min dz currently lowest possible value violation 
xn 
constrained csp alldifferent constraint transformed cop introducing replacing alldifferent soft alldifferent minimizing illustrated example 
example 
consider constrained csp transform csp alldifferent 

soft alldifferent minimize cop hyper arc consistent support 
remove dz cop hyper arc consistent simultaneously violated dis equalities 
suppose search solution tuple violated dis equality 
remaining search 
assignment leads solution removed 
resulting cop hyper arc consistent 
take account simplified csp considered example 
general csp consist constraints cost variables form objective function minimized 
di variables 
xn 
graph theoretic analysis directed graph pair finite set vertices family ordered pairs called arcs 
pair occurring called multiple arc denote family arcs entering leaving respectively 
directed walk sequence 
ak vk 
vk 
ak ai vi vi 
confusion may denoted 
vk 
directed walk called directed path 
vk distinct 
closed directed walk vk called directed circuit 
vk distinct 
family set elements may occur 
minimum cost flow problem introduce concept flow schrijver pp 

directed graph function called flow flow ii property ii ensures flow conservation vertex amount flow entering equal amount flow leaving value flow defined value 
words value flow net amount flow leaving shown equal net amount flow entering study flows typically endow capacity constraints capacity function 
say flow feasible flow flow assign costs flows cost function 
doing cost flow defined cost 
minimum cost flow flow maximum value minimum cost 
minimum cost flow problem problem finding flow 
minimum cost flow computed algorithm originally due ford fulkerson follow description schrijver pp 

consists successively finding shortest respect cost function paths called residual graph maintaining optimal flow 
define residual graph gf af respect af 

extend defining directed path gf gives undirected path 
define ra traverses traverses traverses algorithm minimum cost flow set termination criterion satisfied compute minimum cost path gf path gf exists terminate set maximal reset define cost path cost 
call feasible flow extreme minimum cost feasible flows value 
holds cf 
theorem 
denote zero vector appropriate size 
theorem 
flow extreme directed circuit gf nonnegative cost 
theorem 
extreme flow 
minimum cost path gf satisfies extreme flow 
fact theorem holds value value cost cost cost 
means find minimum cost flow successively computing minimum cost paths gf 
path increase amount flow maximum possible value 
theorem flow maximum value obtain extreme optimal 
algorithm 
note cost minimum cost paths gf bounded directed circuits negative cost gf rational capacities algorithm terminates feasible flow maximum value minimum cost 
faster algorithms exist general flow problems algorithm suffices applied problem 
particular graph algorithm faster algorithms general minimum cost flow problems 
soft alldifferent minimum cost flow transform problem finding solution soft alldifferent constraint minimum cost flow problem 
construct directed graph dx fig 

graph soft alldifferent constraint example 
arc 
bold arcs indicate optimal flow cost 
ax 
xn dx di ax xi di xi 
di 

note contains parallel arcs variables share domain value 
parallel arcs dx distinguish numbering arcs 
fixed arbitrary way 
arc assign capacity cost 
ax 
dx integer value graph soft alldifferent constraint example depicted 
arc 
theorem 
integer flow solution minimum cost flow problem corresponds instantiation variables 
xn soft alldifferent 
xn minimizing violation 
xn 
proof 
integer flow arc 
arc xi ax corresponds instantiation xi construction solution minimum cost flow problem value solution corresponds assigning value variable xi 

cost function ai parallel arcs 
ak corresponds counting number violations caused assigning variables particular value 
parallel arcs minimum cost path gf uses arc lowest cost 
arc ai st arc causes violation previously arcs 
feasible flow corresponds assignment 
xn measures exactly violation 
xn 
minimum cost flow minimizes violation 
xn 
consider graph 
bold arc denotes 
particular flow value cost 
violation 
describe behaviour algorithm compute minimum cost flow need compute sequence minimum cost paths gf maintaining extreme intermediate flows 
note minimum cost path gf increase flow maximum 
extreme flows integer 
construction exactly paths containing arc fact paths may computed starting vertices xi arcs ax 
minimum cost path contains exactly arc 
consider minimum cost path multiple arcs 
consists path arc followed path 
path cost may omit part path arc 
path circuit negative cost contradicts theorem 
effectively means path improve preceding intermediate solution contradicting extremity solution 
conclude minimum cost paths need compute exactly arc arc 
follows paths computed time total time complexity finding maximum flow minimum cost nm 
follows theorem consistency soft alldifferent constraint checked nm time 
filtering algorithm theorem identifies hyper arc consistent domain values soft alldifferent constraint 
arc arise enforcing flow theorem 
constraint soft alldifferent 
xn hyper arc consistent arcs ax minimum cost flow maximum value cost max dz ii values dz smaller cost minimum cost flow maximum value proof 
enforcing arc xi corresponds assigning xi result follows definition theorem 
property checks consistency domain values 
dn 
property ii checks consistency domain values dz 
algorithm naive hyper arc consistency set minimum xi di compute minimum cost flow xi cost max dz remove di cost minimum set minimum cost min dz minimum set min dz minimum theorem construct algorithm enforces hyper arc consistency soft alldifferent constraint algorithm 
variables xi algorithm scans domain values di checks exists minimum cost flow xi maximum value cost max dz 
flow exist theorem removed di 
remove values dz smaller cost minimum cost flow time complexity algorithm 
construct efficient filtering algorithm 
algorithm theorem 
follow notation introduced section 
theorem 
extreme flow maximum value xi ax minimum cost xi path gf 
extreme flow maximum value cost cost cost 
proof 

case xi cost done 
case note exists xi path gf 
exactly di xi allows path xi 
minimum cost xi path gf arc xi forms circuit directed circuit gf gives undirected circuit ga define flow ga follows 
easy check flow maximum value 
extreme may assume enters leaves say arcs bin bout respectively bin 
follows cost algorithm efficient hyper arc consistency compute minimum cost flow cost max dz return inconsistent min dz cost set min dz cost xi compute minimum cost xi path gf cost cost max dz remove di bin bout 
theorem know cost 
similarly cost bin bout cost cost remains show extreme suppose exists flow maximum value cost cost 
cost cost cost cost possibilities 
cost cost possible extreme 
second exists xi path gf cost cost leads contradiction minimum cost path 
extreme 
algorithm computes minimum cost flow takes nm time seen section 
cost max dz know soft alldifferent constraint inconsistent 
case update min dz 
scan arcs xi 
arcs compute minimum cost xi path gf 
theorem theorem remove di cost cost max dz 
done efficiently shown theorem 
theorem 
soft alldifferent 
xn consistent integer minimum cost flow soft alldifferent 
xn hyper arc consistent time 
proof 
complexity filtering algorithm depends computation minimum cost xi paths arcs xi 
fact arcs contribute cost path 
consider strongly connected components graph gf copy gf incident arcs removed 
xi path gf equal xi xi cost 
strongly connected component directed graph subset vertices exists directed path xi strongly connected component gf 
case strongly connected component avoid gf cost 
case xi different strongly connected components visit 
split vertices 
vertex dx compute minimum cost path total time 
strongly connected components gf computed time tarjan 
total time complexity achieving hyperarc consistency proof theorem applies constraint graph representation resembles costs arcs dx constraints consistent hyper arc consistency achieved time 
note equal complexity achieving hyper arc consistency constraints costs involved 
discussion algorithm checks consistency soft alldifferent constraint variables nm time achieves hyper arc consistency time sum cardinalities domains 
previous method removing domain values inconsistent soft alldifferent constraint ensure hyper arc consistency 
method time complexity 
algorithm improves terms quality time complexity 
soft alldifferent constraint related standard alldifferent constraint minimum weight alldifferent constraint 
minimum weight alldifferent constraint particular instance global cardinality constraint costs 
constraint hyper arc consistency achieved log time cardinality union domains 
achieved finding shortest paths log time compute 
algorithm similar flavour underlying graphs different cost structure 
improve efficiency exploiting cost structure particular graph computing shortest paths 
result applied constraints similar graph representation cost structure 
bert lex schrijver valuable comments 
go sebastian brand jean charles gin fruitful discussion 

apt 
principles constraint programming 
cambridge university press 

montanari rossi 
semiring constraint satisfaction optimization 
journal acm 

caseau laburthe 
solving various weighted matching problems constraints 
smolka editor proceedings third international conference principles practice constraint programming cp volume lncs pages 
springer 

cooper schiex 
arc consistency soft constraints 
artificial intelligence 
appear 

ford fulkerson 
constructing maximal dynamic flows static flows 
operations research 

freuder wallace 
partial constraint satisfaction 
artificial intelligence 

petit 
gin bessi re 
specific filtering algorithms constrained problems 
walsh editor proceedings seventh international conference principles practice constraint programming cp volume lncs pages 
springer 


gin 
filtering algorithm constraints difference csps 
proceedings twelfth national conference artificial intelligence aaai volume pages 


gin 
arc consistency global cardinality constraints costs 
jaffar editor proceedings fifth international conference principles practice constraint programming cp volume lncs pages 
springer 


gin 
cost arc consistency global cardinality constraints 
constraints 


gin petit bessi re 
puget 
original constraint approach solving constrained problems 
dechter editor proceedings sixth international conference principles practice constraint programming cp volume lncs pages 
springer 

schrijver 
combinatorial optimization polyhedra efficiency 
springer 


arc consistency algorithm minimum weight different constraint 
van hentenryck editor proceedings eighth international conference principles practice constraint programming cp volume lncs pages 
springer 

tarjan 
depth search linear graph algorithms 
siam journal computing 
