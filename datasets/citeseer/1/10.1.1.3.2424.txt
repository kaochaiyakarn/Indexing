data mining knowledge discovery kluwer academic publishers 
manufactured netherlands 
mining frequent patterns candidate generation frequent pattern tree approach jiawei han cs uiuc edu university illinois urbana champaign jian pei cse buffalo edu state university new york buffalo yin cs sfu ca simon fraser university mao microsoft com microsoft editor heikki mannila received may revised april 
mining frequent patterns transaction databases time series databases kinds databases studied popularly data mining research 
previous studies adopt apriori candidate set generation test approach 
candidate set generation costly especially exist large number patterns long patterns 
study propose novel frequent pattern tree fp tree structure extended prefix tree structure storing compressed crucial information frequent patterns develop efficient fp treebased mining method fp growth mining complete set frequent patterns pattern fragment growth 
efficiency mining achieved techniques large database compressed condensed smaller data structure fp tree avoids costly repeated database scans fp tree mining adopts pattern fragment growth method avoid costly generation large number candidate sets partitioning divide conquer method decompose mining task set smaller tasks mining confined patterns conditional databases dramatically reduces search space 
performance study shows fp growth method efficient scalable mining long short frequent patterns order magnitude faster apriori algorithm faster reported new frequent pattern mining methods 
keywords frequent pattern mining association mining algorithm performance improvements data structure done simon fraser university canada supported part natural sciences engineering research council canada networks centres excellence canada 
correspondence addressed 
han 
frequent pattern mining plays essential role mining associations agrawal agrawal srikant mannila correlations brin causality silverstein sequential patterns agrawal srikant episodes mannila multi dimensional patterns lent kamber max patterns bayardo partial periodicity han emerging patterns dong li important data mining tasks :10.1.1.118.8773:10.1.1.33.4036:10.1.1.40.6757:10.1.1.40.9892:10.1.1.49.3594
previous studies agrawal srikant mannila 
agrawal 
savasere 
park 
lent 
sarawagi 
srikant 
ng 
grahne 
adopt apriori approach anti monotone apriori heuristic agrawal srikant length pattern frequent database length super pattern frequent 
essential idea iteratively generate set candidate patterns length set frequent patterns length check corresponding occurrence frequencies database 
apriori heuristic achieves performance gained possibly significantly reducing size candidate sets 
situations large number frequent patterns long patterns quite low minimum support thresholds apriori algorithm may suffer nontrivial costs handle huge number candidate sets 
example frequent itemsets apriori algorithm need generate length candidates accumulate test occurrence frequencies 
discover frequent pattern size generate candidates total 
inherent cost candidate generation matter implementation technique applied 
repeatedly scan database check large set candidates pattern matching especially true mining long patterns 
develop method may avoid candidate generation test utilize novel data structures reduce cost frequent pattern mining 
motivation study 
develop integrate techniques order solve problem 
novel compact data structure called frequent pattern tree tree short constructed extended prefix tree structure storing crucial quantitative information frequent patterns 
ensure tree structure compact informative frequent length items nodes tree tree nodes arranged way frequently occurring nodes better chances node sharing frequently occurring ones 
experiments show tree compact orders magnitude smaller original database 
subsequent frequent pattern mining need fp tree data set 
second fp tree pattern fragment growth mining method developed starts frequent length pattern initial suffix pattern examines mining frequent patterns candidate generation conditional pattern base sub database consists set frequent items cooccurring suffix pattern constructs conditional fp tree performs mining recursively tree 
pattern growth achieved concatenation suffix pattern new ones generated conditional fp tree 
frequent itemset transaction encoded corresponding path frequent pattern trees pattern growth ensures completeness result 
context method apriori restricted generation test restricted test 
major operations mining count accumulation prefix path count adjustment usually costly candidate generation pattern matching operations performed apriori algorithms 
third search technique employed mining partitioning divide andconquer method apriori level wise generation combinations frequent itemsets 
dramatically reduces size conditional pattern base generated subsequent level search size corresponding conditional fp tree 
transforms problem finding long frequent patterns looking shorter ones concatenating suffix 
employs frequent items suffix offers selectivity 
techniques contribute substantial reduction search costs 
performance study conducted compare performance fp growth representative frequent pattern mining methods apriori agrawal srikant treeprojection agarwal 
study shows fp growth order magnitude faster apriori especially data set dense containing patterns frequent patterns long fp growth outperforms treeprojection algorithm 
fp tree mining method implemented dbminer system tested large transaction databases industrial applications 
fp growth proposed briefly han 
additional progress follows 
properties fp tree thoroughly studied 
point fact compact fp tree may minimal 
optimizations proposed speed fp growth example section technique handle single path fp tree developed performance improvements 
projection method developed section cope situation fp tree held main memory case may happen large database 
extensive experimental results reported 
examine size fp tree turning point fp growth data projection building fp tree 
test fully integrated fp growth method large datasets fit main memory 
remainder organized follows 
section introduces fp tree structure construction method 
section develops fp tree frequent pattern mining algorithm fp growth 
section explores techniques scaling fp growth large han databases 
section presents performance study 
section discusses issues improvements method 
section summarizes study points research issues 

frequent pattern tree design construction am set items transaction database db tn ti transaction contains set items support occurrence frequency pattern set items number transactions containing db 
frequent support predefined minimum support threshold 
transaction database db minimum support threshold problem finding complete set frequent patterns called frequent pattern mining problem 

frequent pattern tree design compact data structure efficient frequent pattern mining examine example 
example 
transaction database db bethe columns table minimum support threshold 
compact data structure designed observations 
frequent items play role frequent pattern mining necessary perform scan transaction database db identify set frequent items frequency count obtained product 

set frequent items transaction stored compact structure may possible avoid repeatedly scanning original transaction database 

multiple transactions share set frequent items may possible merge shared sets number occurrences registered count check sets identical frequent items transactions listed fixed order 
table 
transaction database running example 
tid items bought ordered frequent items mining frequent patterns candidate generation 
transactions share common prefix sorted order frequent items shared parts merged prefix structure long count registered properly 
frequent items sorted frequency descending order better chances prefix strings shared 
observations may construct frequent pattern tree follows 
scan db derives list frequent items number indicates support items ordered order 
ordering important path tree follow order 
convenience discussions frequent items transaction listed ordering rightmost column table 
second root tree created labeled null 
fp tree constructed follows scanning transaction database db second time 

scan transaction leads construction branch tree notice frequent items transaction listed order list frequent items 

second transaction ordered frequent item list shares common prefix existing path count node prefix incremented new node created linked child new node created linked child 

third transaction frequent item list shares node prefix subtree count incremented new node created linked child 

scan fourth transaction leads construction second branch tree 
transaction frequent item list identical path shared count node path incremented 
facilitate tree traversal item header table built item points occurrence tree node link 
nodes item name linked sequence node links 
scanning transactions tree associated node links shown 
example frequent pattern tree designed follows 
definition fp tree 
frequent pattern tree fp tree short tree structure defined 

consists root labeled null set item prefix subtrees children root frequent item header table 

node item prefix subtree consists fields item name count node link item name registers item node represents count registers number transactions represented portion path reaching node han 
fp tree example 
node link links node fp tree carrying item name null 

entry frequent item header table consists fields item name head node link pointer pointing node fp tree carrying item name 
definition fp tree construction algorithm 
algorithm fp tree construction 
input database db minimum support threshold 
output fp tree frequent pattern tree db 
method fp tree constructed follows 

scan transaction database db 
collect set frequent items support frequent item 
sort support descending order flist list frequent items 

create root fp tree label null 
transaction trans db 
select frequent items trans sort order flist 
sorted frequent item list trans element remaining list 
call insert tree 
function insert tree follows 
child item name item name increment count create new node count initialized parent link linked node link linked nodes item name node link structure 
nonempty call insert tree recursively 
analysis 
fp tree construction takes exactly scans transaction database scan collects set frequent items second scan constructs fp tree 
mining frequent patterns candidate generation cost inserting transaction trans fp tree freq trans freq trans set frequent items trans 
show fp tree contains complete information frequent pattern mining 

completeness compactness fp tree important properties fp tree derived fp tree construction process 
transaction database db support threshold 
frequent items db transaction freq isthe set frequent items freq called frequent item projection transaction apriori principle set frequent item projections transactions database sufficient mining complete set frequent patterns infrequent item plays role frequent patterns 
lemma 
transaction database db support threshold complete set frequent item projections transactions database derived db fp tree 
rationale 
fp tree construction process transaction db frequent item projection mapped path fp tree 
apath ak root node fp tree count node labeled ak ak sum counts children nodes ak 
construction fp tree path registers frequent item projections ak transactions 
fp tree registers complete set frequent item projections duplication 
lemma fp tree db constructed contains complete information mining frequent patterns transaction database 
fp tree needed remaining mining process regardless number length frequent patterns 
lemma 
transaction database db support threshold 
considering null root size fp tree bounded db freq height tree bounded maxt db freq freq frequent item projection transaction rationale 
fp tree construction process transaction db exists path fp tree starting corresponding item prefix subtree set nodes path exactly set frequent items root extra node created frequent item insertion node contains node link count 
bound size tree stated lemma 
height prefix subtree maximum number frequent items transaction appearing head frequent item list 
height han tree bounded maximal number frequent items transaction database consider additional level added root 
lemma shows important benefit fp tree size fp tree bounded size corresponding database transaction contribute path fp tree length equal number frequent items transaction 
lot sharings frequent items transactions size tree usually smaller original database 
apriori method may generate exponential number candidates worst case circumstances may fp tree exponential number nodes generated 
fp tree highly compact structure stores information frequent pattern mining 
single path inthe prefix subtree registers transactions maximal frequent set form ak size fp tree substantially smaller size database candidate sets generated association rule mining 
items frequent item set ordered support descending order frequently occurring items shared arranged closer top fp tree 
ordering enhances compactness fp tree structure 
mean tree constructed achieves maximal compactness 
knowledge particular data characteristics possible achieve better compression frequency descending ordering 
consider example 
set transactions cdef minimum support threshold 
frequent item set associated support count 
item frequency ordering fp tree constructed contain nodes shown 
item ordering contain nodes shown 
compactness fp tree verified experiments 
small fp tree resulted quite large database 
example database connect bayardo contains transactions items transaction support threshold experiments 
fp tree constructed frequency descending ordering may minimal 
mining frequent patterns candidate generation bayardo total number occurrences frequent items total number nodes fp tree represents reduction ratio holds hundreds thousands frequent patterns 
notice databases short transactions reduction ratio high 
surprising gigabyte transaction database containing long patterns may generate fp tree fits main memory 
assume fp tree fit main memory matter large database methods highly scalable fp growth mining discussed section 
mining frequent patterns fp tree construction compact fp tree ensures subsequent mining performed compact data structure 
automatically guarantee highly efficient may encounter combinatorial problem candidate generation simply uses fp tree generate check candidate patterns 
section study explore compact information stored fp tree develop principles frequent pattern growth examination running example explore perform optimization exists single prefix path fp tree propose frequent pattern growth algorithm fp growth mining complete set frequent patterns fp tree 

principles frequent pattern growth fp tree mining subsection examine interesting properties fp tree structure facilitate frequent pattern mining 
property node link property 
frequent item ai possible patterns containing frequent items ai obtained ai node links starting ai head fp tree header 
property directly fp tree construction process facilitates access frequent pattern information related ai traversing fp tree ai node links 
facilitate understanding properties fp tree related mining go example performs mining constructed fp tree example 
example 
examine mining process constructed fp tree shown 
property patterns containing frequent items node ai participates collected starting ai node link head node links 
examine mining process starting bottom node link header table 
node immediate frequent pattern paths fp tree path indicates string appears twice database 
notice path indicates string han appears times appears times 
appear twice study string appear prefix path simply fcam counts 
similarly second path indicates string appears set transactions db orp prefix path cb prefix paths fcam cb form subpattern base called conditional pattern base subpattern base condition existence 
construction fp tree conditional pattern base called conditional fp tree leads branch 
frequent pattern cp derived 
notice pattern itemset denoted string 
search frequent patterns associated terminates 
node immediate frequent pattern paths notice appears need include analysis frequent patterns involving analyzed previous examination similar analysis conditional pattern base fca 
constructing fp tree derive conditional fp tree asingle frequent pattern path shown 
conditional fp tree mined recursively calling mine 
shows mine involves mining items sequence 
derives frequent pattern am conditional pattern base fc call mine am second derives frequent pattern cm conditional pattern base call mine cm third derives frequent pattern fm 
recursive call mine am derives patterns cam fam conditional pattern base leads call mine cam derives longest pattern fcam 
similarly call mine cm derives pattern fcm 
set frequent patterns involving am cm fm cam fam fcam fcm 
indicates single path fp tree mined outputting combinations items path 
similarly node derives paths conditional pattern base fca generates frequent item mining terminates 
node derives frequent pattern subpattern base fc asingle path conditional fp tree 
set frequent patterns 
mining fp tree fp tree item mining frequent patterns candidate generation table 
mining frequent patterns creating conditional sub pattern bases 
item conditional pattern base conditional fp tree fcam cb fca fca fc generated combinations 
concatenating fa ca fca 
node derives subpattern base set frequent patterns associated fc 
node derives conditional pattern base 
conditional pattern bases conditional fp trees generated summarized table 
correctness completeness process example justified 
accomplished introducing important properties related mining process 
property prefix path property 
calculate frequent patterns suffix ai prefix nodes labeled ai fp tree need accumulated frequency count node prefix path carry count corresponding node ai path 
rationale 
nodes path labeled order root prefix subtree leaf subtree ai node referenced 
process fp tree construction algorithm prefix node ak prefix subpath node ai occurs ak exactly ai count times 
prefix node carry count node ai 
notice postfix node am path occurs node ai 
patterns am generated examining suffix node am enclosing lead redundant generation patterns generated am 
need examine prefix subpath ai example example node involved path calculate frequent patterns node path prefix subpath node need extracted frequency count node prefix path carry count node node counts prefix path adjusted han property prefix subpath node ai path copied transformed count adjusted prefix subpath adjusting frequency count node prefix subpath count node ai 
prefix path transformed called transformed prefix path ai path notice set transformed prefix paths ai forms small database patterns occur ai 
database patterns occurring ai called ai conditional pattern base denoted pattern base ai 
compute frequent patterns associated ai ai conditional pattern base creating small fp tree called ai conditional fp tree denoted fp tree ai 
subsequent mining performed small conditional fp tree 
processes construction conditional pattern bases conditional fp trees demonstrated example 
process performed recursively frequent patterns obtained pattern growth method lemmas corollary 
lemma fragment growth 
itemset db conditional itemset support db equivalent support rationale 
definition conditional pattern base sub transaction occurs condition occurrence original transaction database db appears times appears db times 
items collected conditional pattern base occurs exactly times db 
lemma 
lemma directly derive important corollary 
corollary pattern growth 
frequent itemset db conditional pattern base itemset frequent db frequent corollary mining performed identifying set frequent itemsets db frequent itemset constructing conditional pattern bases mining set frequent itemsets conditional pattern base 
indicates process mining frequent patterns viewed mining frequent itemset progressively growing itemset mining conditional pattern base turn done similarly 
doing frequent itemset mining problem successfully transformed sequence frequent itemset mining problems set conditional pattern bases 
mining done pattern growth need generate candidate sets entire mining process 
notice construction new fp tree conditional pattern base obtained mining fp tree items frequent itemset ordered frequency descending order node occurrence item support represents item occurrence 
node fp tree may represent occurrences item node represents single unit itemset elements occur construction item associated fp tree 
mining frequent patterns candidate generation 
frequent pattern growth single prefix path fp tree frequent pattern growth method described works kinds fp trees 
optimization explored special kind fp tree called single fp tree optimization especially useful mining long frequent patterns 
single prefix path fp tree fp tree consists single path single prefix path stretching root branching node tree branching node node containing child 
examine example 
example 
single prefix path fp tree consists prefix path stretching root tree branching node 
mined frequent pattern growth method described better method split tree fragments single prefix path multipath part root replaced 
parts mined separately combined 
examine separate mining processes 
frequent patterns associated part single prefix path mined enumeration combinations subpaths support set minimum support items contained subpath 
subpath distinct occurs number times minimum occurrence frequency items subpath equal support item subpath 
path generates set frequent patterns freq pattern set ab ac bc abc 
second fp tree multipath part rooted mined follows 
treated null root forms multipath fp tree mined typical frequent pattern growth method 
mining result freq pattern set df 

mining fp tree single prefix path 
han second frequent itemset viewed conditional frequent pattern base itemset pattern generated may form distinct frequent pattern 
example freq pattern set viewed conditional pattern base pattern generated generate new frequent itemset ad appears times 
set frequent patterns generated freq pattern set ad bd cd abd acd bcd abcd means pattern combined form cross product larger itemset support minimum support patterns 
complete set frequent patterns generated combining results freq pattern set freq pattern set support support itemset support itemset 
summary set frequent patterns generated single prefix path consists distinct sets freq pattern set set frequent patterns generated single prefix path freq pattern set set frequent patterns generated multipath part fp tree freq pattern set freq pattern set set frequent patterns involving parts 
show fp tree consists single path generate set frequent patterns lemma 
lemma pattern generation fp tree consisting single path 
suppose fp tree consists single path complete set frequent patterns generated enumeration combinations subpaths support minimum support items contained subpath 
rationale 
single path fp tree ak sk fp tree contains single path support frequency si item ai frequency ai occurring prefix string 
combination items path ai frequent pattern cooccurrence frequency minimum support items 
item path unique redundant pattern generated combinational generation 
frequent patterns generated outside fp tree 
lemma 
show fp tree consists single prefix path set frequent patterns generated splitting tree lemma 
lemma pattern generation fp tree consisting single prefix path 
suppose fp tree similar tree consists single prefix path similar tree multipath part viewed independent fp tree pseudo root similar tree 
mining frequent patterns candidate generation complete set frequent patterns consists portions 
set frequent patterns generated enumeration combinations items path support minimum support items pattern contains 

set frequent patterns generated root null 
set frequent patterns combining formed taken cross product frequent patterns generated denoted freq pattern set freq pattern set frequent itemset union frequent itemset support minimum supports itemsets 
rationale 
fp tree construction rules node ai single prefix path fp tree appears tree 
single prefix path fp tree forms new fp tree multipath part forms fp tree share nodes representing item 
fp trees mined separately 
show pattern generated portions pattern generation rules distinct frequent 
lemma pattern generated fp tree formed single prefix path distinct frequent 
set frequent patterns generated root null distinct frequent patterns exist combining items conditional databases items set frequent patterns generated combining cross product frequent patterns generated support minimum supports itemsets distinct frequent 
frequent pattern generated considered frequent pattern conditional pattern base frequent item support minimum supports frequency patterns appear 
second show patterns generated portions 
lemma fp tree split fp trees generates complete set frequent patterns pattern growth 
pattern generated generated portion combination method generates complete set frequent patterns 

frequent pattern growth algorithm lemmas properties algorithm mining frequent patterns fp tree 
algorithm fp growth mining frequent patterns fp tree pattern fragment growth 
input db represented fp tree constructed algorithm minimum support threshold 
output complete set frequent patterns 
han method call fp growth fp tree null 
procedure fp growth tree tree contains single prefix path mining single prefix path fp tree single prefix path part tree multipath part top branching node replaced null root combination denoted ofthe nodes path pdo generate pattern support minimum support nodes freq pattern set bethe set patterns generated tree item ai mining multipath fp tree generate pattern ai support ai support construct conditional pattern base conditional fp tree tree tree call fp growth tree freq pattern set bethe set patterns generated return freq pattern set freq pattern set freq pattern set freq pattern set analysis 
properties lemmas sections show algorithm correctly finds complete set frequent itemsets transaction database db 
shown lemma fp tree db contains complete information db relevance frequent pattern mining support threshold 
fp tree contains single prefix path lemma generation complete set frequent patterns partitioned portions single prefix path portion multipath portion combinations 
lines line procedure 
lemma generated patterns single prefix path enumerations subpaths prefix path support minimum support nodes subpath 
lines procedure 
treat multipath portion fp tree contain single prefix path portion lines construct conditional pattern base mine conditional fp tree frequent itemset ai 
correctness completeness prefix path transformation shown property 
conditional pattern bases store complete information frequent pattern mining lemmas corollary patterns successively grown conditional fp trees set sound complete frequent patterns 
especially fragment growth property support combined fragments takes support frequent itemsets generated conditional pattern base 
lines procedure 
line sums complete result lemma 
examine efficiency algorithm 
fp growth mining process scans fp tree db generates small pattern base bai frequent item ai mining frequent patterns candidate generation consisting set transformed prefix paths ai 
frequent pattern mining recursively performed small pattern base bai constructing conditional fp tree bai analysis algorithm fp tree usually smaller size db 
similarly conditional fp tree fp tree ai constructed pattern base bai usually smaller bigger bai pattern base bai usually smaller original fp tree consists transformed prefix paths related frequent items ai 
subsequent mining process works set usually smaller pattern bases conditional 
mining operations consist mainly prefix count adjustment counting local frequent items pattern fragment concatenation 
costly generation test large number candidate patterns 
algorithm efficient 
algorithm reasoning see fp growth mining process conquer process scale shrinking usually quite dramatic 
shrinking factor constructing fp tree database expected hundreds times reduction constructing conditional fp tree quite small conditional frequent pattern base 
notice case database may generate exponential number frequent patterns size fp tree usually quite small grow exponentially 
example frequent pattern length fp tree construction results path length possibly items ordered list frequent items 
fp growth algorithm generate frequent patterns time permits fp tree contains frequent pattern path nodes lemma need construct conditional fp tree order find patterns 

scaling fp tree fp growth database projection fp growth proposed section essentially main memory frequent pattern mining method 
database large minimum support threshold quite low unrealistic assume fp tree database fit main memory 
disk method worked ensure mining highly scalable 
section method developed partition database set projected databases projected database construct mine corresponding fp tree 
revisit mining problem example 
example 
suppose fp tree held main memory 
constructing global fp tree project transaction database set frequent item related projected databases follows 
starting tail frequent item list set transactions contain item collected projected database 
infrequent items item removed infrequent items useful frequent pattern mining han table 
projected databases fp trees 
item projected database conditional fp tree fcam cb fcam fca fca fca fc fc fc item default associated projected transaction 
projected database fcam cb fcam 
similar conditional shown table fcam fcam expressed fcam table 
conditional fp tree built projected database fp tree construction algorithm 
similarly set transactions containing item projected projected database 
notice infrequent items item item excluded set projected items item association considered projected database 
reason projected database formed collecting transactions containing item infrequent items items excluded 
process continues deriving projected database projected database 
complete set item projected databases derived transaction database listed table corresponding conditional fp trees 
easily see processes construction global fp tree projection database set projected databases derive identical conditional fp trees 
shown section conditional fp tree usually orders magnitude smaller global fp tree 
construction conditional fp tree projected database mining dramatically reduce size fp trees handled 
conditional fp tree projected database fit main memory 
project projected database process go recursively conditional fp tree fits main memory 
define concept projected database formally 
definition projected database 
ai frequent item transaction database db 
ai projected database ai derived db collecting transactions containing ai removing infrequent items frequent items ai list frequent items ai 
frequent item projected database 
projected database derived projected database collecting entries containing removing mining frequent patterns candidate generation infrequent items frequent items list frequent items 
rules construction fp tree construction projected database ai projected database derived projecting set items transactions containing ai projected database collected construction ai subtree fp tree 
methods derive sets conditional fp trees 
methods database projection parallel projection partition projection 
parallel projection implemented follows scan database projected database transaction database projected database 
transaction database frequent item ai project database transaction projection rule specified definition projected database 
transaction projected parallel projected databases scan called parallel projection 
set projected databases shown table example demonstrates result parallel projection 
process illustrated 
parallel projection facilitates parallel processing projected databases available mining scan projected databases mined parallel 
transaction database projected multiple projected databases database contains long transactions multiple frequent items total size projected databases multiple times original 
transaction contains average frequent items 
transaction projected projected database 
total size projected data transaction implies total size single item projected databases times original database 
avoid overhead propose partition projection method 
partition projection implemented follows 
scanning database original projected projected transaction projected ai projected database ai frequent item item ai list frequent items appearing 
parallel projection vs partition projection 
han transaction 
transaction projected projected database database scan scan database partitioned projection set projected databases called partition projection 
projected databases mined reversed order list frequent items 
projected database frequent item mined 
time projected database processed ensure remaining projected databases obtain complete information transaction projected projected database item transaction item list frequent items appearing transaction 
partition projection process database example illustrated 
advantage partition projection total size projected databases level smaller original database usually takes memory os complete partition projection 
processing order projected databases important process projected databases sequential manner 
processing projected database needs project processed transactions corresponding projected databases may take 
due low memory requirement partition projection promising method frequent pattern mining 
example 
examine database example projected partition projection 
scan transaction database transaction projected projected database 
transaction projected database frequent item list frequent items 
fcam infrequent items removed inserted projected database 
similarly transaction projected projected database projected database projected database cb projected database fcam 
phrase entries projected databases shown table 
projection original database replaced set single item projected databases total size smaller original database 
second projected database processed construction conditional fp tree item list frequent items 
processing projected database transaction projected corresponding projected database table 
single item projected databases partition projection 
item projected databases fcam cb fcam mining frequent patterns candidate generation partition projection rule 
example fcam projected database fca cb projected projected database 
process continues single item projected database completely processed 

experimental evaluation performance study section performance comparison fp growth classical frequent pattern mining algorithm apriori alternative database projection algorithm treeprojection give concise analysis treeprojection report experimental results 

comparative analysis fp growth treeprojection methods treeprojection algorithm proposed agarwal 
constructs lexicographical tree projects large database set reduced item sub databases frequent patterns mined far 
applies tree construction method performs mining recursively progressively smaller databases shares similarities fp growth 
methods fundamental differences tree construction mining methodologies lead notable differences efficiency scalability 
explain similarities differences working example 
example 
transaction database example construct lexicographic tree method described agarwal 

result tree shown construction process follows 
scanning transaction database frequent itemsets identified 
recommended agarwal 
frequency ascending order chosen 
lexicographical tree built transactional database db 
han ordering items 
order exactly reverse order fp tree construction 
top level lexicographic tree constructed root nodes labeled length patterns 
stage root node labeled null nodes store frequent itemsets generated 
transactions database projected root node infrequent items removed 
node lexicographical tree contains pieces information pattern node represents ii set items may generate longer patterns adding pattern 
piece information recorded active extensions active items 
matrix root node created shown 
matrix computes frequencies length patterns pairs frequent items included matrix 
items pairs arranged ordering 
matrix built adding counts transaction computing frequent itemsets transactions stored root node 
time building matrix transactions root projected level nodes follows 
transaction items listed ordering 
projected node ai ai ai ai 
matrix frequent itemsets pc ma mc mf ac af cf 
nodes lexicographic tree generated 
stage nodes itemsets active contain descendants potentially generate longer frequent itemsets 
nodes including level nodes pruned 
way lexicographic tree grown level level 
matrix node nodes labeled mac maf mcf added ma active nodes frequent itemsets 
easy see lexicographic tree total contains nodes 
number nodes lexicographic tree exactly frequent itemsets 
treeprojection proposes efficient way enumerate frequent patterns 
efficiency treeprojection explained main factors transaction projection limits support counting relatively small space related portions transactions considered lexicographical tree facilitates management counting candidates provides flexibility picking efficient strategy tree generation phase transaction projection phase 
agarwal 
reports algorithm order magnitude faster techniques literature 
mining frequent patterns candidate generation comparison fp growth method treeprojection suffers problems related efficiency scalability 
analyze follows 
treeprojection may encounter difficulties computing matrices database huge lot transactions containing frequent items support threshold low 
cases exist large number frequent items 
size matrices high level nodes lexicographical tree huge shown section 
study treeprojection agarwal developed smart memory caching methods overcome problem 
wise generate huge matrices finding smart caching techniques reduce cost 
matrix cached efficiently computation involves nontrivial overhead 
compute matrix node projected transactions cost ti ti length transaction 
number transaction large length transaction long computation costly 
fp growth method need build matrices compute itemset frequency avoids generation candidate itemsets applying pattern growth method 
pattern growth viewed successive computation frequent itemset database conditional pattern bases assembling longer patterns 
computing frequent itemsets expensive computing frequent itemsets cost substantially reduced 
second transaction may contain frequent itemsets transaction treeprojection may projected times different nodes lexicographical tree 
long transactions containing numerous frequent items transaction projection nontrivial cost treeprojection 
fp growth method constructs fp tree highly compact form transaction database 
size cost computation conditional pattern bases corresponds roughly compact form projected transaction databases substantially reduced 
third treeprojection creates node lexicographical tree frequent itemset 
glance highly compact fp tree ensure frequent node mapped node tree 
branch fp tree may store hidden frequent patterns due potential generation combinations prefix paths 
notice total number frequent itemsets large large database database quite long frequent itemsets 
example frequent itemset number frequent itemsets th level lexicographic tree 

frequent itemset fp tree fp growth need path nodes 
summary fp growth mines frequent itemsets constructing highly compact fp trees share numerous projected transactions hide carry numerous frequent patterns applying progressive pattern growth frequent itemsets avoids generation potential combinations candidate itemsets implicitly explicitly treeprojection generate candidate itemsets projected database 
fp growth efficient scalable treeprojection especially number frequent itemsets really large 
observations analyses supported experiments reported section 
han 
environments experiments experiments performed mhz pentium pc machine megabytes main memory running microsoft windows nt 
programs written microsoft visual 
notice directly compare absolute number runtime published reports running risc workstations different machine architectures may differ greatly absolute runtime algorithms 
implement algorithms best knowledge published reports machine compare running environment 
please note run time means total execution time period input output cpu time measured experiments literature 
feel run time comprehensive measure takes total running time consumed measure cost cpu time considers cost cpu resource 
reports runtime fp growth include time constructing fp trees original databases 
experiments pursued synthetic real data sets 
synthetic data sets experiments generated procedure described agrawal srikant 
refer readers details generation data sets 
report experimental results synthetic data sets 
items 
data set average transaction size average maximal potentially frequent itemset size set respectively number transactions dataset set sparse dataset 
frequent itemsets short numerous 
second synthetic data set items 
average transaction size average maximal potentially frequent itemset size set respectively 
exist exponentially numerous frequent itemsets data set support threshold goes 
pretty long frequent itemsets large number short frequent itemsets 
contains abundant mixtures short long frequent itemsets 
test capability fp growth dense datasets long patterns real data set connect compiled connect game state information 
data set uc irvine machine learning database repository www ics uci edu mlearn mlrepository html 
contains transactions transaction items 
dense dataset lot long frequent itemsets 

compactness fp tree test compactness fp trees compare sizes structures 
alphabetical fp tree 
includes space links 
fp tree alphabetical order items frequency descending order 
ordered fp tree 
size covers links 
fp tree items sorted frequency descending order 
mining frequent patterns candidate generation 
compactness fp tree data set connect 
transaction database 
item transaction stored integer 
simply sum occurrences items transactions 
frequent transaction database 
sub database extracted original removing infrequent items 
real dataset connect fp tree achieves compactness 
seen result shown size ordered fp tree smaller size transaction database frequent transaction database 
dense database size database frequent database close 
size alphabetical fp tree smaller databases cases slightly larger times larger size ordered fp tree 
indicates frequency descending ordering items benefits data compression case 
dataset contains abundant mixture long short frequent patterns fp tree compact time 
result shown 

compactness fp tree data set 
han 
compactness fp tree data set 
support threshold lower size fp tree larger frequent database 
long support threshold fp tree smaller transaction database 
difference sizes ordered fp tree alphabetical fp tree quite small dataset 

sparse dataset fp tree achieves compactness support threshold 
difference ordered fp tree alphabetical fp tree trivial 
result shown 
experiments lead 
fp tree achieves compactness time 
especially dense datasets compress database times 
clearly overhead pointers counters 
gain sharing frequent projections transactions substantially overhead fp tree space efficient cases 
support low fp tree bushy 
cases degree sharing branches fp tree low 
overhead links size fp tree large 
building fp tree construct projected databases 
reason build fp tree transaction database projected database passes certain density threshold 
experiments see threshold pretty low easy touch 
large sparse database rounds database projection fp tree remaining mining tasks 
experiments employed implementation fp growth integrates database projection fp tree mining 
density threshold set items listed frequency descending order 

scalability study runtime apriori treeprojection fp growth synthetic data set support threshold decreases shown 
mining frequent patterns candidate generation 
scalability threshold sparse data set 
fp growth faster apriori treeprojection 
treeprojection faster scalable apriori 
dataset sparse support threshold high frequent itemsets short set itemsets large advantages fp growth treeprojection apriori impressive 
support threshold goes gap wider 
fp growth finish computation support threshold time apriori 
treeprojection scalable slower fp growth 
advantages fp growth apriori obvious dataset contains abundant number mixtures short long frequent patterns 
shows experimental results scalability threshold dataset 
fp growth mine support threshold low apriori reasonable time 
treeprojection scalable faster apriori slower fp growth 

scalability threshold dataset abundant mixtures short long frequent patterns 
han 
scalability threshold connect 
advantage fp growth dramatic datasets long patterns challenging algorithms mine complete set frequent patterns 
result mining real dataset connect shown 
best knowledge algorithm handles dense real dataset performance study 
see fp growth scalable long patterns 
candidate generation fp growth enumerates long patterns efficiently 
datasets apriori treeprojection comparable performance fp growth 
long patterns apriori generate tremendous number candidates costly 
main costs treeprojection matrix computation transaction projection 
database large number frequent items matrices quite large computation cost jumps substantially 
contrast height fp tree limited maximal length transactions transactions share prefix paths fp tree 
explains fp growth distinct advantages support threshold low number transactions large 
test scalability fp growth number transactions set synthetic datasets generated parameters number transactions ranges fp growth tested support threshold percentage 
result shows linear increase runtime number transactions 
please note way reported literature replicate transactions real data sets test scalability 
matter times transactions replicated fp growth builds fp tree size identical original scaling databases trivial 

discussions frequent pattern growth method introduced represents interesting approach scalable frequent pattern mining 
section discuss additional issues related implementation usage extension 
mining frequent patterns candidate generation 
scalability fp growth number transactions 

materialization maintenance fp trees studied dynamic generation fp trees possible materialize incrementally update fp tree 
examine related issues 

construction disk resident fp trees 
database grows large unrealistic construct main memory fp tree 
database projection introduced section effective approach 
interesting alternative construct disk resident fp tree 
tree structure popularly relational database systems index fp tree 
operations localized single paths individual item prefix sub trees pattern matching node insertion creation transformed prefix paths node ai important cluster fp tree nodes tree subtree structure 
store item prefix sub tree page possible sequence continuous pages disk store subtree page put shared prefix path header information page cluster node links belonging paged nodes facilitates breadth search fashion mining patterns starting nodes header parallel 
reduce costs node links mining performed group accessing mode accessing nodes node links exhaust node traversal tasks main memory fetching nodes disks 
notice may construct node link free fp trees 
case traversing tree path project prefix subpaths nodes corresponding conditional pattern bases 
feasible fp tree page conditional pattern bases fit memory 
additional os needed swap conditional pattern bases 

materialization fp tree frequent pattern mining 
fp tree compact construction needs scans transaction database may han represent nontrivial overhead 
beneficial materialize fp tree regular frequent pattern mining 
difficulty fp tree materialization select minimum support threshold materialization usually query dependent 
overcome difficulty may low may usually satisfy mining queries fp tree construction 
example notice queries may choose fp tree materialization threshold queries may need construct new fp tree 
fp tree organized way frequently occurring items located deeper paths tree easy select upper portions fp tree drop low portions satisfy support threshold mining queries higher thresholds 
directly materialized fp tree starting appropriate header entry just need get prefix paths matter low support original fp tree 
incremental update fp tree 
issue related fp tree materialization incrementally update fp tree adding daily new transactions database containing records accumulated months 
materialized fp tree takes minimum support just compact version original database update cause problem adding new records equivalent scanning additional transactions fp tree construction 
full fp tree may undesirably large 
setting minimum support may solution 
general case register occurrence frequency items track updates 
costly benefits incremental updates fp tree follows 
suppose fp tree constructed validity support threshold called watermark db transactions 
suppose additional transactions added 
frequency item updated 
highest relative frequency originally infrequent items fp tree goes say watermark need go accordingly exclude item 
transactions added watermark may drop item relative support frequency may drop transactions added 
fp tree watermark raised undesirable level reconstruction fp tree new db necessary 

extensions frequent pattern growth method data mining philosophy database compression partition frequent pattern mining extended constraint mining mining kinds frequent patterns max patterns sequential patterns 

fp tree mining constraints 
constraint frequent pattern mining represents important direction user controlled data mining 
constraint association mining apriori mining methodology studied extensively srikant ng :10.1.1.41.407
fp growth method mining frequent patterns candidate generation may wonder constraint mining may benefit fp tree structures 
thorough study issue classification various kinds constraints development methods fp tree mining sophisticated constraints ng 
task research 
show apply fp tree structure mining frequent patterns incorporation constraints associated set items 
suppose may just derive frequent patterns associated particular set items mining set frequent patterns containing example 
mining frequent patterns frequent items may explore fp treebased mining follows 
fp tree fp growth mining method may just need modified 
additional care computing transformed prefix path item needs look path include items previous computation database need consider pairing checked examining node pair missed computation look path include 
fp tree mining frequent patterns 
fp tree mining method extended mining kinds interesting frequent patterns 
examine examples 
example mining frequent closed itemsets 
frequent pattern mining generates large number frequent itemsets hinders effectiveness mining users sift large number mined rules find useful ones 
interesting alternative method proposed pasquier 
mine frequent closed itemsets itemset closed itemset exists proper superset support database 
mining frequent closed itemsets power mining complete set frequent itemsets may substantially reduce redundant rules generated increase effectiveness mining 
study mining closed items apriori philosophy adopting vertical data format viewing database item id set transactions transaction id set items studied zaki hsiao 
fp tree frequent pattern growth method extended optimized mining closed itemsets reported subsequent study new closed pattern mining algorithm called closet pei 
second example mining sequential patterns 
sequential patterns frequent pattern event sequence database sequence set events happening different times 
previously developed sequential pattern mining methods agrawal srikant srikant agrawal mannila 
follow methodology apriori apriori method may substantially reduce number combinations examined 
apriori encounters problems sequence database large sequential patterns mined numerous long 
frequent pattern growth method extended mining sequential patterns ideas projection sequence database growth subsequence fragments confine search space 
efficient sequential pattern method called prefixspan pei han developed direction performance study shown substantial performance improvement apriori gsp algorithm srikant agrawal :10.1.1.40.6428

proposed novel data structure frequent pattern tree fp tree storing compressed crucial information frequent patterns developed pattern growth method fp growth efficient mining frequent patterns large databases 
advantages fp growth approaches constructs highly compact fp tree usually substantially smaller original database saves costly database scans subsequent mining processes 
applies pattern growth method avoids costly candidate generation test successively concatenating frequent itemset conditional fp trees 
ensures generates combinations new candidate sets database itemset transaction encoded corresponding path fp trees 
context mining apriori restricted generation test frequent pattern fragment growth 
major operations mining count accumulation prefix path count adjustment usually costly candidate generation pattern matching operations performed apriori algorithms 
applies partitioning divide conquer method dramatically reduces size subsequent conditional pattern bases conditional fp tree 
optimization techniques including direct pattern generation single tree path employing frequent events suffix contribute efficiency method 
implemented fp growth method studied performance comparison influential frequent pattern mining algorithms large databases 
performance study shows method mines short long patterns efficiently large databases outperforming current candidate pattern generation algorithms 
fp growth method implemented dbminer system tested large industrial databases retail chain database satisfactory performance 
publication fp growth method mining frequent patterns candidate generation han subsequent studies improvements performance frequent patterns pattern growth philosophy extension scope method cover kinds pattern mining tasks 
pattern growth framework extended mining closed itemsets proposed closet algorithm pei mining sequential patterns proposed prefixspan algorithm pei pushing tough constraints deep frequent pattern mining processes pei 
notable effort proposal mine algorithm pei mining frequent patterns efficiently sparse data sets 
fp growth efficient mining dense data sets may incur unnecessary overhead due recursive construction fp trees 
philosophy frequent pattern growth constructing fp trees mine algorithm constructs data structure called struct mines directly struct recursive generation numerous conditional fp trees 
experiments reported pei 
mining frequent patterns candidate generation shows mine outperforms fp growth database sparse 
suggested approach integrate algorithms dynamically select fp tree algorithms characteristics current data distribution 
studies show various fp tree mining strategies bottom vs top methods may lead different efficiency data sets different data distributions 
interesting research issues related extensions pattern growth approach mining structured patterns development frequent approach mining approximate fault tolerant patterns noisy environments frequent pattern clustering classification 
acknowledgments express anonymous reviewers conference journal submissions theme 
constructive comments improved quality 
notes 
notice support defined absolute occurrence frequency relative literature 

study performed pei 

agarwal aggarwal prasad 
tree projection algorithm generation frequent itemsets 
journal parallel distributed computing agrawal imielinski swami 
mining association rules sets items large databases 
proc 
acm sigmod int 
conf 
management data sigmod washington dc pp 

agrawal mannila srikant toivonen verkamo 
fast discovery association rules 
advances knowledge discovery data mining fayyad piatetsky shapiro smyth uthurusamy eds aaai mit press pp 

agrawal srikant 
fast algorithms mining association rules 
proc 
int 
conf 
large data bases vldb santiago chile pp 

agrawal srikant 
mining sequential patterns 
proc 
int 
conf 
data engineering icde taipei taiwan pp 

bayardo 
efficiently mining long patterns databases 
proc 
acm sigmod int 
conf 
management data sigmod seattle wa pp 

brin motwani silverstein 
market basket generalizing association rules correlations 
proc 
acm sigmod int 
conf 
management data sigmod tucson arizona pp 

dong li 
efficient mining emerging patterns discovering trends differences 
proc 
int 
conf 
knowledge discovery data mining kdd san diego ca pp 

grahne lakshmanan wang 
efficient mining constrained correlated sets 
proc 
int 
conf 
data engineering icde san diego ca pp 

han dong yin 
efficient mining partial periodic patterns time series database 
proc 
int 
conf 
data engineering icde sydney australia pp 

han pei yin 
mining frequent patterns candidate generation 
proc 
acm sigmod int 
conf 
management data sigmod dallas tx pp 

han kamber han chiang 
metarule guided mining multi dimensional association rules data cubes 
proc 
int 
conf 
knowledge discovery data mining kdd newport beach ca pp 

lent swami widom 
clustering association rules 
proc 
int 
conf 
data engineering icde birmingham england pp 

mannila toivonen verkamo 
efficient algorithms discovering association rules 
proc 
aaai workshop knowledge discovery databases kdd seattle wa pp 

mannila toivonen verkamo 
discovery frequent episodes event sequences 
data mining knowledge discovery 
ng lakshmanan han pang 
exploratory mining pruning optimizations constrained associations rules 
proc 
acm sigmod int 
conf 
management data sigmod seattle wa pp 

pasquier bastide taouil lakhal 
discovering frequent closed itemsets association rules 
proc 
th int 
conf 
database theory icdt jerusalem israel pp 

park chen yu 
effective hash algorithm mining association rules 
proc 
acm sigmod int 
conf 
management data sigmod san jose ca pp 

pei han lakshmanan 
mining frequent itemsets convertible constraints 
proc 
int 
conf 
data engineering icde heidelberg germany pp 

pei han lu nishio tang yang 
mine hyper structure mining frequent patterns large databases 
proc 
int 
conf 
data mining icdm san jose ca pp 

pei han mao 
closet efficient algorithm mining frequent closed itemsets 
proc 
acm sigmod int 
workshop data mining knowledge discovery dmkd dallas tx pp 

pei han asl pinto chen dayal hsu 

prefixspan mining sequential patterns efficiently prefix projected pattern growth 
proc 
int 
conf 
data engineering icde heidelberg germany pp 

srikant agrawal 
mining sequential patterns generalizations performance improvements 
proc 
th int 
conf 
extending database technology edbt avignon france pp 

silverstein brin motwani ullman 
scalable techniques mining causal structures 
proc 
int 
conf 
large data bases vldb new york ny pp 

savasere omiecinski navathe 
efficient algorithm mining association rules large databases 
proc 
int 
conf 
large data bases vldb zurich switzerland pp 

sarawagi thomas agrawal 
integrating association rule mining relational database systems alternatives implications 
proc 
acm sigmod int 
conf 
management data sig mod seattle wa pp 

srikant vu agrawal 
mining association rules item constraints 
proc 
int 
conf 
knowledge discovery data mining kdd newport beach ca pp 

zaki hsiao 
charm efficient algorithm closed itemset mining 
proc 
siam int 
conf 
data mining arlington va pp 

jiawei han professor department computer science university illinois urbana champaign 
previously endowed university professor simon fraser university canada 
working research data mining data warehousing spatial multimedia databases deductive object oriented databases bio medical databases journal conference publications 
chaired served program committees international conferences workshops 
served serving editorial boards data mining knowledge discovery international journal ieee transactions knowledge data engineering journal intelligent information systems 
currently serving board directors executive committee acm special interest group knowledge discovery data mining sigkdd chairman acm sigkdd curriculum committee 
jiawei received ibm faculty awards outstanding contribution award international conference data mining acm service award 
mining frequent patterns candidate generation jian pei received eng 
eng 
degrees computer science shanghai tong university china respectively ph degree computing science simon fraser university canada 
ph candidate university 
currently assistant professor computer science engineering state university new york buffalo usa 
research interests include data mining data warehousing online analytical processing database systems bio informatics 
current research supported part national science foundation nsf 
published research papers refereed journals conferences workshops 
served program committees international conferences workshops 
reviewer leading academic journals 
member acm acm sigmod acm sigkdd ieee computer society 
yin received sc 
degree computing science simon fraser university working software engineering canada 
mao received eng degree university china sc 
degree simon fraser university canada computer science 
currently working sql server group microsoft worked china telecom 
