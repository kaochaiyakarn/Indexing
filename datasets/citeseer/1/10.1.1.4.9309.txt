simulated real environments sesam software development kl gl rainer christoph lehrstuhl nstliche intelligenz und angewandte informatik institut informatik universit am informatik uni de 
want show possibilities agentbased modeling simulation software development 
integrated environment sesam extensions allow creating simulated environments agent software developing deploying software agents 
development agent software quite hard task incorporates difficulties example sophisticated software architectures synchronization concurrent processes distributed control data unpredictability interaction patterns 
solving problems exist diverse approaches agent oriented software engineering lots tools frameworks implementing agent software 
spite constant progress agent software engineering gap specification implementation seldom addressed question implement completely designed agent system way validity robustness ensured 
problem twofold 
hand specification agent system translated executable code hand code tested thoroughly validation verification 
want show existing simulation environment agent models tools provided support development agent software testing different useful ways 
going detail agent software development continue remainder presenting modeling simulation environment sesam allows visual agent modeling experimenting analyzing agent simulation experiments 
section distinguish agent software agent simulation environment agent system existing 
agent simulation environment simulated completely control modeler 
agent software working real world environment 
developing agent simulations sophisticated 

eds mates lnai pp 

springer verlag berlin heidelberg kl gl describe possibilities sesam tool supporting agent software development 
place approach proposed modeling simulated environment testbed agent systems describe transfer automatically agent programs simulated environments real world environments 
terminate short outlook 
agent software development simulation agent methodologies engineering multi agent systems try direct developers providing process models single phases development requirement engineering analysis specification 
proposing graphical means representing outcomes 
huge amount proposals aim supporting agent systems distributed problem solving applications gaia agent oriented software engineering methodologies proposed specially open agent systems 
survey methodologies problem general 
problem producing code left traditional objectoriented procedures methods merely design level 
extreme formal specification frameworks produce executable code 
earlier ones built temporal logic bdi logic schemes 
logic frameworks problems applied complex problems lot different agents 
practically oriented frameworks proposed providing modifications enhancements uml specifications 
famous agent uml introduced capture flexible high level interactions agents 
specification languages concern class diagrams specifying social concepts 
message uml providing means formulating knowledge level concepts goals roles extending class activity diagrams 
flake focus generate code multi agent system uml diagrams method called casa 
hand lots tools supporting implementation providing environments development agent software pre defined building blocks platforms fipa standards 
agent construction tools site lists tools mobile agents agent infrastructure development commercial products products research institutes 
extensive heterogeneous list agentlink pages 
environments fipa compliant platforms jade fipa os mentioned 
jade developing institute 
approaches formal verification agent software testing agent software refers debugging issues 
www com sharon cselt projects jade fipa os sourceforge net simulated real environments tools systematic testing general modeling simulation area determining sensitivity program environmental changes 
course due fact environment agent software deployed part implementation environment 
tools provide simulated environment necessary detail testing agent software facilitated 
modeling simulating environment simulating behavior agents reaction abstracted potentially simplified environment useful seldomly manageable require double implementing real agent system simulated environment simulated agent system environment 
propose reflection adapting agents behavior acting simulated environment 
uml extensions called see focus behavior specification agents activity diagrams share similarities specification languages tools uml activity graph uml state graph see 
approach bridging gap specification implementation provide complete visual modeling tool allows build specification analogous graphical primitives implement specification adding additional information render precisely 
approach described different jade jack supports simulation analysis simulation results implemented agent models 
supports visual modelling behavior agent type models contrast jade low level predefined agent types jack support bdi agent types continuous visual 
sesam sesam stands shell simulated agent systems 
provides generic environment modeling experimenting agent simulations 
development specially focused providing tool easy construction complex models main vision tool researchers actual programming background 
want important properties sesam currently working methodology performing simulations evaluate modify context multi agent software development 
results addition deep evaluation long case study forthcoming 
information sesam obtained www de 
visual agent programming sesam agents consist body contains set state variables behavior implemented form uml activity diagrams 
activities kl gl nodes activity graph seen scripts initiated terminated firing rules 
simple concept specification language software environment modeling simulation developed 
specification framework focuses representation agent behavior especially relation agents resources general environment 
example seen 
part specification model evolution sociality ants 
shows different agent classes behavior interaction 
behavior graphs augmented class diagrams fig 

example specification biological model interactions different agents female male adult resources nest 
parameters general environment influence certain activities 
agents internal structure 
basically predefined distinction agents active entities resources passive entities environment global surrounding 
simple models protocol type specification agents interaction necessary 
cases interaction consists mainly implicit coordination agent changes environment 
agent may perceive modified surroundings adapts behavior 
complex agent models require detailed specification interaction sequences 
specification agent simulation model directly implemented sesam description provides sufficient details primitive actions perception predicates 
activity actions associated executed agent activity 
rules responsible termination selection activities 
actions activities conditions rules composed extensive number primitive building blocks 
shows screenshot part implementation specification shown central behavior agent class female adult 
simulated real environments fig 

screenshot implemented sesam model partial behavior agent adult female class specified 
addition normal activity nodes rule arrows special forms nodes input output nodes introduce 
describe activities agent interacts agents marked denoting special purpose 
processing activity graph initiates start node terminates node 
lifetime activity graph node selected 
activity graphs hierarchically organized way rule selects activity graph simple activity 
additionally activity graphs may determine behavior agent parallel 
agent terminated activity graphs ends 
implementation complex behavior possible resemble functionality reactive planning routines rap 
indicated user able design visually behavior agent 
analogous mechanisms provided specifying static structures agent agent system environmental elements configuration 
complete agent simulation model implemented visually programming traditional programming language 
modularization graphical modeling built set predefined primitive elements action primitive perception primitive operator primitive 
combined function calls visualized form tree 
expression constructed time needed composed user functions arguments 
kl gl may represent building blocks subroutines 
possible forms combination recursion selection composition 
primitive actions perceptions operators form interface underlying programming language java 
integrating java method declared additional information describe arguments functionality declaration interpreted visual programming integration 
set attributes user functions may defined independently grouped called feature representing notion additional nonbasic abilities assigned agents environmental classes 
may implemented visually modeler supporting modularization 
predefined features example spatial representation functions capture movement gene attributes evolutionary operators 
important issue question basic data types available agents static structure behavior implementation 
addition standard data types boolean numeric string values composed data types hashtables lists index access 
built features added types modeler specify new types 
support sophisticated high level agent structures behaviors 
types user types enumerations compositions 
range consists collection predefined symbols example female male data typ gender 
value variable type element collection female 
second form user defined data types composition arbitrary number attributes data types user defined ones may aggregated 
database interface ontology import large input data comfortable useful implement fill complex data structures simulation databases available organization storage large data sets 
special feature provides online interface jdbc database mysql 
attributes agents environment connected database entities 
agents may read write database entities 
additional components real world data weather data task structures may integrated agent simulation 
hand way connection 
sesam may provide dynamic testbed intelligent systems information database planning 
complex open agent systems step ensuring interaction abilities define ontology clarifies common terms relations 
certain domains established ontologies exist 
grounding simulation model existing ontology increases readability transparency modelled structures 
supports communication model enhancements 
developed plugin importing large parts ontology developed protege sesam models 
structures directly converted user data structures simulated real environments converted standard refactoring tools sesam agent resource classes attributes simulation experimentation support information parts simulation model agent structure behavior relevant features ready run simulation run specification stored xml file xml schema 
model data format developed converter printable html visualization complete model 
support simulation model implemented completely 
testing executing experiments demanding effortful tasks 
freely configurable instruments gathering data scripting options constructing simulation experiments computers concurrently sesam highly valuable tool agent simulations 
due fact sesam agent simulations programming facilities may agents simulated world completely control modeler 
aiming agent software 
aim extending usability sesam adding new enhancements relating sesam agents real world agents 
sections 
simulation controlled mas agent applications part environment containing real world agents users systems possibly agent systems 
agent software development isolated tests usually difficult tests conditions environment 
mentioned idea extend sesam way testbed agent software re modeling agent interacting simulated environment 
creating models global system intuitive 
shows sketch possible related scenarios 
agent application integrated environment consisting additional information systems users seen agents 
mapping scenario simulation controlled mas depicted 
agents real world environment replaced simulated agents sesam 
level detail simulation depending requirements agent system 
due representation real world simulated testbed developed components tested realistic extreme conditions 
usually done real world reasons cost security 
technical base realization support connecting agent systems sesam new plugin developed allows extend sesam agents fipa compliant communication kl gl agent application user interface agents existing information systems agent real world scenario agent application simulated environment sesam agents simulated testbed scenario fig 

sketch possible development scenario describes original situation represents simulated environment 
ties 
extended way sesam agents interact agents running kind fipa platform 
new primitives registering directory facilitator sending receiving messages sesam models 
supported ontology feature mentioned enabling domain modelers construct agents message contents ontology terms concepts 
coupling agent applications environment real simulated possible effort systems standardized interfaces 
technically sesam fipa feature realized integrating complete jade platform 
sesam started developer may start jade platform special platform configuration parameters allow default start sesam 
sesam allows simulation runs parallel simulation run started associated single agent container jade 
concept keep different worlds separated 
sesam agents running simulation decide create representation associated jade agent container 
agent seen kind passive shadow 
state representation reasoning carried sesam agent actions regarding fipa functionality mainly communication tasks delegated jade shadow 
received messages hand stored shadow incoming message queue sesam agent performs sensing action 
primitive actions functions added sesam primitive set function starts local jade platform isn running 
window showing view platform opened 
acting agent decides create shadow identity 
functions described called shadow created 
agent simulation needs shadow 
name function returns list addresses agents name 
executed function query simulated real environments directory service platform 
returned address agent identifier contact agents 
function returns list addresses agents offering certain service 
directory service local platform returns matching candidates set registered agents 
boolean function returns true shadow agent received acl messages 
message received primitive 
function receive pending message simulation blocked message received 
blocking desired predicate 
function returns content message address sender answering purposes 
receiver content function sends message agent running fipa agent platform 
example application agent hospital example development simulation controlled mas integrated health care scenario agent hospital 
agent hospital various agent health care systems offer services fipa compliant platforms 
multi agent systems linked joint directory facilitator integrated worldwide network agent platforms named agentcities 
agent hospital developed couple research institutions germany working priority research program founded german research foundation dfg 
testing participants agreed creating integrated simulation scenario may systems concurrently 
central control integrated scenario modelled sesam 
exemplified patient process chosen required interaction projects agent system 
simulated patients modelled domain experts specifying possible interactions agent applications 
prerequisite interoperability sesam agent applications development hospital ontology built participants advance 
final result simulation model virtual hospital software agents simulated agent systems integrated 
simulation runs show behavior resulting system consisting different multi agent systems 
addition integrating new agent application environment shows implemented interfaces applicable 
example application seen evaluation representative evaluation 
experiment showed possible comparatively easy create simulated testbeds software agents 
kl gl sesam agents breaking sesam development capabilities just limited create environment simulations software agents 
language agent behavior descriptions power programming language development agent applications directly visual programming facilities rapid agent development 
described agent behavior representation specification level provided programming quite comfortable modeling process error prone gaps specification running code 
idea take agents implemented sesam simulated environment apply agent programs real world problem solving 
step real world applicability enabling sesam agents communicate fipa agents 

step agents break simulated environment 
possible ways technical realization interpreting agent wrapper generic jade agent developed able load interpret sesam behavior description 
generic agent wrapper works adapter agent description 
evaluating restrictions sesam behavior specification meet external 
restrictions example step wise simulation implicitly synchronization agents search communication partners done directory facilitator 
sesam java compiler cases developers may prefer creating source code 
common practice especially building graphical user interface code generation uml diagrams 
code generation sesam available moment promising steps undertaken 
approaches similar power issues deciding compilation interpretation 
compiling restricts round trip engineering dynamic runtime 
side compiling cause faster execution flexible compiled result modified extended manually 
software development sesam compete existing integrated development environments non visual traditional programming languages 
due powerful pre defined agent structure abilities huge potential providing online syntax consistency tests refactoring debugging functions 
facilitating development agent simulation models offer features 
small test example simple supply chain model bicycle production 
results showed possible xml behavior description outside simulated environment wrapper sesam agent jade 
steps integrating interfaces users real world data sources 
focus general applicability approach 
simulated real environments approaches practically relating agentbased simulation software development 
showed virtual environments agent software created interoperability features sesam 
feasibility utility approach shown agent hospital project 
visionary proposal focused re powerful visual agent programming facilities sesam allowing simulated agents deployed real world 
interpretation approach transfer simulated agents real word environments available development compilation approach just started 
development approaches sophisticated application scenarios necessary improvements sesam concerning implementation support 
important point agent dynamics sesam just described activity graphs generated goals planning abilities 
necessary applications really intelligent agents 
development profit lot structures visual interfaces provided sesam 
enhancement sesam agent abilities realization scheduling planned goal oriented behavior 

authors alexander huber students tu erlangen implementation database interface 
described partially supported dfg sfb christoph spp rainer 

becker heine 
ontology hospital scenarios 
technical report julius maximilians universit institut informatik september 
caire garijo gomez kearney stark evans ph 
massonet 

agent oriented analysis message uml 
agent oriented software engineering lncs pp 
ff 
analysis design mase 
proceedings th midwest artificial intelligence science conference 
oxford ohio 
fisher 
representing executing agent systems 
wooldridge jennings editors intelligent agents proceedings atal volume lnai pages 
springer 

flake geiger ch 
ster 

uml analysis design multi agent systems 
international symposium information science innovations engineering natural artificial intelligent systems march 
kl gl 

adl designing agent systems 
proc 
agent oriented software engineering aose agents montreal 
griss fonseca cowan kessler uml state machine models precise flexible jade agent behaviors 
proceedings third international workshop agent oriented software engineering aose bologna italy 
hodgson lucas jack intelligent agents summary agent infrastructure 
th international conference autonomous agents url www agent software com 
garijo gonzales 

survey agent oriented methodologies 
ller singh rao editors intelligent agents proceedings atal volume lnai 
springer 

jennings agent software engineering 
artificial intelligence 

juan pearce sterling 

roadmap extending gaia methodology complex open systems proceedings international joint conference autonomous agents multi agent systems aamas bologna italy july 

heine 

agent hospital agent open framework clinical applications accepted linz june 

kl gl 
multi agent simulation concepts tools application german addison wesley nchen 
luck griffiths inverno 

agent theory agent construction 
ller wooldridge jennings editors intelligent agents iii proceedings atal volume lecture notes artificial intelligence pages 
springer 

odell van dyke parunak bauer 

extending uml agents 
proceedings agent oriented information systems workshop aaai 

kl gl 
uml behavior oriented multi agent simulations 
dunin keplicz theory practice multi agent systems poland september lncs springer heidelberg pp 
ff 
poggi jade fipa compliant agent framework 
proceedings paam london 
rao 
agentspeak bdi agents speak logical computable language van de velde editors agents breaking away proceedings th european workshop modeling autonomous agents multi agent world lnai volume 
springer verlag 



reflection simulating testing agents 
th european meeting cybernetics systems research 

wooldridge jennings kinny 

methodology agent oriented analysis design 
proceedings rd internation conference autonomous agents 
acm press 

wooldridge 
agent software engineering 
iee proc 
software engineering 
