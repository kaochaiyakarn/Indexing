consistent interaction software components gregor engels jochen ster department computer science university paderborn paderborn germany engels de de leiden institute advanced computer studies leiden university box nl ra leiden netherlands nl constructing complex software systems integrating different software components promising challenging approach 
functionality software components models possible ensure consistency models implementation order successfully build system 
models consisting different submodels absence formal semantics numerous possibilities employing models requires development techniques ensuring consistency 
discuss issue consistency models different submodels proposing concept management consistency 
consistency management relies concept consistency process ensuring consistency models 
introduce consistency concept software components modeled unified modeling language uml devise suitable consistency checks 
basis propose process locate resolve inconsistencies ensuring consistency models consistency componentbased systems derived models 
software systems usually large complex 
size complexity engineering software system task taken lightly 
variants known generally successful divide conquer approach software engineering process 
approach consists building software system smaller software systems referred subsystems usually components 
component software system program size complexity engineering reasonable effort general far difficult engineering system 
component may composed smaller simpler components 
order deal complexity software systems models nowadays established approach 
integrated design process technology printed united states america june society process science models software engineering process means communication documentation requirements capture allow abstraction implementation details programming language computer platform 
functionality component descriptions form models foundation ability reasoning nature complex systems simpler components place 
successfully integrating components model level gives rise problem model consistency model number component models consistent contradictory 
implementation model feasible making model useless 
discuss issue consistency models different submodels proposing concept management consistency 
consistency management relies concept consistency process ensuring consistency models 
introduce consistency concept software components modeled extension uml devise suitable consistency checks 
organized follows discuss issue modeling components 
section iii discuss consistency models section iv consistency management general 
section propose general methodology ensuring consistency models apply problem ensuring consistency component models section vi 
ii 
modeling components software systems programs comprise different partially overlapping aspects static structural ones data architecture dynamic process ones visible behavior interface behavior hidden behavior functionality interaction aspect covered communication collaboration cooperation coordination 
components comprise aspects software systems 
composing view world analyse design abstracts comp model comp comp components larger software system consists putting sufficiently careful manner respect aspects involved components fit 
order able compose components required wants reason analyse possible compositions components wants understand eventual configuration wants convinced consistency 
particularly interested consistency interactions performed components 
modeling software software studied best order enable reasoning analysing understanding 
case software components want study composition respect aspects involved model software reflect components composition covering relevant aspects sufficiently precise manner 
visualizes modeling situation software consisting components 
representation clarifies details interaction program components studied details interaction model components provided conditions fulfilled 
condition meaning models fixed way reasoning analysis understanding models possible 
second condition abstraction program model preserves aspect details relevant interaction program components 
means interaction program components generated model components principle interaction study model level 
regarding condition meaning models usually fixed modeling language 
modeling language allows construct models meaning models communicated 
modeling language determines semantics models crucial ability constructing useful models 
code comp abstracts comp program comp comp fig 

model relation reality program composed components modeling language insofar provides means abstraction real world program concentrating certain aspects considering aspects 
typically model consists submodels submodel concentrating specific aspects 
concerning second condition observe nature modeling language determines kind abstraction preservation aspect details 
consequence choice characteristics modeling language crucial success modeling 
determine modeling language suitable 
problem domain understanding system built modeler certain generic conceptual model mind 
generic conceptual model determines aspects modeled kind abstraction 
chosen modeling language support aspects 
relationship generic conceptual model modeling language illustrated 
abstraction real world program yields generic conceptual model 
generic conceptual model concentrates certain aspects real world program 
chosen modeling language support construction concrete models consequently support aspects generic conceptual model 
consequence set aspects generic conceptual model includes serves classification criteria choice semantics modeling language 
particular individual aspect serves requirement semantics modeling language possible express model aspect generic conceptual model 
analysis design concrete model constructed chosen modeling language 
previous ideas exemplified problem modeling component software choosing unified modeling language modeling language 
view world analyse design view generic conceptual model modeling language defined concrete model note general purpose modeling language uml covers mentioned aspects principle suitable studying interaction program components model level 
uml offers number different sublanguages typical uml model consists submodels submodel concentrating important aspects system modeled 
concerning ability analysing interaction component software model level fixed meaning models crucial 
uml formally defined semantics reasoning analysis component models straightforward 
order apply uml successful modeling components deficiencies uml respect consistency different submodels coped component model uml consisting submodels concentrating different aspects ensured model proper semantics contradictory 
sections discuss notion consistency general proposing general methodology consistency management uml models 
methodology applied order ensure consistent interaction software components 
iii 
consistency section introduce discuss notion consistency 
explain general concepts consistency software engineering introduce terms consistency problem consistency condition 
explain characteristics consistency problems 
general concepts models consisting different submodels software development numerous advantages 
different persons may different submodels simultaneously driving forward development system 
code aspect wise correspondence program fig 

conceptual model modeling language abstracts different types submodels allow separation different aspects system built structural aspects dynamic behavior system components 
making different submodels involves drawbacks 
traditional approach exists model system 
model transformed coding running software product 
case collection submodels easy anymore needs describe submodel transformed part code 
gives rise problem different parts code working wishes leading system functioning 
order run problems ensured different submodels compatible consistent model level 
different submodels model called consistent integrated single model proper semantics 
consequence consistency submodels ensures existence implementation consistency ensured implementation submodels obtained implementing integrated model 
integrated model implementation exist 
previous definition allows discuss consistency high level abstraction 
particular types models consisting specific submodels specific semantics definition refined resolving means integrate submodels single model 
submodels integrated called consistent 
depending models software development distinguish different scenarios consistency 
semantics submodel defined terms common system model consistency submodels refined existence nonempty system model 
semantics submodel defined semantic domain semantic domains integrated common semantic domain 
consistency refined possibility integrating semantics submodels 
submodels model consistent speak consistency problem 
models consisting different submodels applied software development techniques order ensure consistency model resolve inconsistencies model 
order resolve potential inconsistencies get clear idea model consistent 
purpose uses consistency conditions consistency condition defines model consistent 
model consisting different submodels number consistency conditions determined model consistent 
consistency conditions insofar provide basis defining consistency models 
consistency conditions depend heavily modeling language development process determine aspects described 
characteristics consistency problems consistency problems characterized hand situation occur hand depending consistency condition 
problem consistency arises cases specification consists different parts system modeled different viewpoints 
allows concentration different aspects different models 
different viewpoint specifications consistent contradictory implementation inconsistent specification unfeasible 
type consistency problem call horizontal consistency 
important prerequisite type consistency problem arise certain viewpoint overlap called correspondence 
means viewpoint specifications completely independent describe common aspects 
quite different problem consistency arises specification transformed refined specification 
desirable refined specification consistent previous specification order keep specification consistent 
type consistency problem call vertical consistency 
vertical consistency problems induced development process prescribes models iteratively refined 
quite different characterization obtained looking consistency condition consistency problem 
syntactic consistency ensures model consistent respect syntax ensured formulating consistency conditions syntax models 
concerning horizontal consistency problems syntactic consistency ensures model consisting submodels syntactically correct 
regards vertical consistency problems syntactic consistency ensures changing part model development process results syntactically correct model 
semantic consistency ensures model consistent respect semantics ensured formulating consistency conditions semantics models 
respect horizontal consistency problem semantic consistency requires models different viewpoints semantically compatible regards aspects system described submodels 
vertical consistency problems semantic consistency requires refined model semantically consistent model refines 
iv 
consistency management ensuring consistency models software development process gives rise need consistency management 
section introduce discuss notion consistency management identifying important characteristics 
characteristics categorize related relevant ensuring consistency models 
notion consistency management set models development process arises question ensure consistency models development process 
obviously requires understanding concept consistency definition consistency conditions specification consistency conditions checked case inconsistencies order resolve 
need sort management consistency introduce term consistency management consistency management technique goal ensure consistency models software engineering process 
order generally ensure consistency models foundation consistency management ability decide models consistent 
consequence consistency management relies consistency conditions 
able define consistency conditions clarified models inconsistent semantically integrated 
basis consistency management careful inspection models semantics leading definition consistency 
definition consistency consistency management enable definition consistency conditions models 
includes identification potential consistency problems decision models consistent respect consistency condition 
foundations consistency management fixed consistency conditions defined consistency management involves embedding dealing consistency development process 
purpose set consistency conditions set models consistency management describe depends relies foundation concept consistency consistency condition consistency condition consistency check performed models order ensure consistency models respect consistency conditions 
consistency management illustrated 
consistency management depends heavily modeling language mirroring underlying generic conceptual model 
modeling language includes certain form syntactic consistency ensured syntactical correctness models 
furthermore prescribes certain degree semantic consistency ensured semantics models 
depending underlying generic conceptual model development process consistency management ensure additional syntactic semantic consistency 
order achieve consistency management relies foundation consistency consisting concept consistency including consistency conditions 
prescribes process including identification consistency problems definition consistency conditions 
basis consistency management involves location potential inconsistencies performing consistency checks software development process 
related approaches existing approaches categorized categories 
category contains approaches particular consistency problem tackled 
instance fradet propose approach consistency checking diagrams consisting nodes edges multiplicities 
distinguish generic instance graphs define semantics generic graph set instance graphs fulfill constraints generic graph 
consistency defined equivalent semantics generic graph empty set 
consistency checking performed solving system linear inequalities derived generic graph 
category falls approach li ana consistency management process depends prescribes identification consistency problems definition consistency conditions location inconsistencies consistency tests fig 

consistency management timing constraints sequence diagrams consistency solving systems linear inequalities 
category seen approaches achieve consistency object oriented models completely formalizing integrating models semantic domain 
moreira clark translate objectoriented analysis models lotos order detect inconsistencies 
cheng formalize omt models terms lotos specifications 
specifications perform consistency analysis tools state exploration concurrency analysis 
grosse rhode integrates models translating transformation systems 
problem involved completely formalizing models application restricted certain problem domain mirrored choice semantic domain 
third category seen approaches deal consistency models object oriented 
zave define consistency translation logics define set partial specifications consistent composition satisfiable 
approach requires models semantics form logics 
define consistency basis development relations define set partial specifications consistent common development relation exists 
approach requires existence formal semantics models concept development relations defined models development process 
quite different category related seen approaches deal inconsistency management 
trying achieve complete consistency approaches tackle problem managing inconsistencies 
management location inconsistencies appropriate handling resolving inconsistency tolerating 
concentrating process consistency management assume dation consistency management terms consistency conditions place 
section approach consistency management idea partially formalizing model enabling consistency checks 
consequence approach regarded combination approaches second category 
approach comprises idea consistency management development process related fourth category idea tolerating inconsistencies focus 
methodology consistency management uml models having discussed issue consistency consistency management turn attention modeling component systems 
model systems uml uml nowadays modeling language 
despite numerous advantages user friendliness visual models currently certain drawbacks comes establishing consistency models 
describe situation follows due unclear semantics different uml development process general concept consistency management uml models missing 
concerning syntactic consistency type consistency partly achieved defining formedness rules metamodel 
due absence generally accepted formal semantics semantic consistency currently 
semantic consistency great importance dealt 
problem informal development process followed leads need flexible notions consistency 
conclude consistency conditions uml models depend problem domain language applied development process followed 
propose general methodology consistency management models exemplified case uml models 
methodology applied problem consistency modeling components focusing consistency interaction components 
approach consistency management uml models observation fundamental question answer collection uml models exist common semantic interpretation 
formally defined semantics exist possible restrict oneself certain aspects models determine integration common semantic interpretation exists 
concept approach illustrated 
submodels development overlap number aspects 
ensuring consistency submodels integrated common semantic domain supports aspect submodel 
submodel aspect mapping mapping semantic domain fig 

concept approach overlapping aspects 
concrete model integrated inconsistent 
propose methodology establishing consistency step identification generic conceptual model aspects modeling language 
step methodology establish generic conceptual model problem domain systems wishes model 
done informal basis involves abstracting minor aspects concentrating important aspects model support 
aspects captured model elaborated classification aspects 
modeling language fixed development process defined submodels step development process 
furthermore consistency requirements application domain identified stated textual form 
step identification consistency problems 
basis identification consistency problems obtained relating submodels aspects discovering submodels model aspects system 
due common description aspects different submodels called overlap aspects consistency problems may occur description aspects contains contradictions 
consistency problems identified stated prototypical situation leading consistency violation 
concerning prototypical situation relate development process deciding prototypical situation may occur 
furthermore decide far submodels syntactically consistent define syntactic consistency conditions 
step choice semantic domain 
consistency problem identified choose appropriate semantic domain 
semantic domain support aspects lead consistency problem aspects submodels overlap 
furthermore semantic domain provide tool support order facilitate consistency checks 
order validate semantic domain appropriate translate prototypical situations semantic domain 
aspect static dynamic datatype structure fig 

aspects component systems communication step definition partial mapping 
aspects model lead identified consistency problem mapped semantic domain 
definition partial mapping crucial correctness defined consistency conditions aspects model left influence consistency model 
hand aspects model mapped semantic domain important consistency analysis may get complex 
step specification consistency conditions 
language semantic domain consistency conditions formulated ensure establishment consistency model 
general consistency requirements conceptual model taken account 
order consistency test performed grouping consistency conditions efficiency determined fixed development process 
step location inconsistencies analysis potential inconsistencies 
concrete model consisting submodels prototypical situations specified earlier locate potential inconsistencies 
done finding instances prototypical situation concrete model 
analysis techniques semantic domain previously formulated consistency conditions analyzed models mapped language semantic domain 
vi 
application components modeled uml section apply general methodology consistency management order ensure consistency models component systems 
identification generic conceptual model aspects modeling language basis methodology firstly identification generic conceptual model identification aspects secondly choice modeling language thirdly definition development process fourthly identification consistency requirements 
concerning modeling components recall discussion modeling software components elaborate aspects classification aspects see 
protocol protocol sb protocol connector protocol fig 

submodels usage uml rt general distinguish static dynamic aspects 
static aspects divided structure aspect describing structure system data type aspect dealing definition data types 
respect dynamic aspects distinguish communication local behavior 
concerning modeling language stated uml 
precisely concentrate uml rt profile uml modeling realtime systems incorporating concept components called capsules 
shortly describe concepts uml rt relate submodels uml rt previously identified aspects showing uml rt covers identified aspects 
uml rt extension uml introducing notions capsules ports connectors protocols protocol roles 
originally targeted enabling modeling complex real time systems uml rt seen candidate modeling software architectures modeling concurrent systems general 
concepts uml rt explained detail 
capsule stereotyped active class modeling self contained component system 
ordinary classes capsule operations called capsule 
communication capsules capsule may ports interconnected capsules connectors 
connector association capsules 
represents hardware connection capsules communicate sending receiving signals 
signals enter leave capsule port 
port realizes protocol role specifies signals sent received port 
protocol roles form protocol 
point view behavioral modeling statechart may associated capsule 
capsule statechart describes capsule reacts signals received ports signals sent ports 
state transitions capsule statecharts may include calls cap protocol protocol fig 

simplified development process operations 
protocols exist possibility modeling valid sequences message exchanges protocol statechart 
protocol statechart expresses requirements specifying implementation protocol 
concepts uml rt illustrated simple example consisting capsule instances connected connector ports 
ports bound protocol roles respectively 
capsule associated capsule statechart sa sb respectively describing dynamic behavior capsule 
protocol statechart associated connector capsules 
regarding suitability uml rt modeling component systems relate submodels uml rt aspects 
note data type structure aspect covered class diagram capsule collaboration diagram uml rt 
communication aspect covered protocol statechart capsule statechart 
covers aspect local behavior 
concerning submodels development process assume simple development process consisting steps step capsule collaboration diagram model structure system capsule data type aspect modeled common class diagram 
second step protocol statecharts may added model describing communication aspect respect allowed message exchanges connectors 
third step capsule statecharts defined capsule describing communication local behavior aspect capsules 
simplified development process illustrated space reasons common class diagram shown 
regards consistency requirements identify property deadlock freeness protocol conformance 
concerning deadlock freeness communication resulting interaction capsules dead protocol protocol protocol fig 

prototypical situation consistency problems uml rt lock free 
protocol conformance requires conformity capsule interaction protocol specified protocol statecharts associated connector capsules focus 
identification consistency problems basis identification consistency problems description modeling aspects submodel covers 
particularly interested ensuring consistent interaction components restrict communication interaction aspect 
identify consistency problems describe prototypical situations relate prototypical situations development process discuss issue syntactic consistency identified consistency problems 
case uml rt group submodels modeling aspects concern finding capsule statechart protocol statechart relate communication modeling aspect 
identification possible aspect overlap capsule statecharts protocol statecharts look problem detail 
realize consistency problems may occur consistency problem capsule statecharts consistency problem capsule statecharts protocol statechart prototypical situation consistency problems 
prototypical situations locating potential consistency problems 
case consistency problem may occur capsule statecharts capsules defined capsule connected connector 
second consistency problem occurs additionally protocol statechart associated connector connects capsules 
order point importance prototypical situations consider fig ure 
protocol statecharts describe communication aspect system consistency problem occur assuming additional conformance requirement protocols associated different connectors 
prototypical situations related development process way consistency problems arise third step development process 
considering development process surprising third step submodels describing communication interaction aspect 
consistency problems syntactic semantic characteristics 
concerning syntactic consistency syntactical consistency conditions form formedness rules syntax models formulated order enable common semantic interpretation 
possible rules set signals sent sa subset set signals received sb 
submodels syntactically consistent semantic consistency established syntactically consistent model necessarily semantically consistent 
steps methodology deal semantic consistency 
choice semantic domain consistency problem choose appropriate semantic domain enables determine models may integrated semantically 
important semantic domain supports modeling aspects models overlap 
concerning consistency problems modeling aspect overlap communication 
choose semantic domain csp provides mathematical model concurrency simple programming notation supported tools 
fact existence language tool support important aim specifying verifying consistency constraints despite existence expressive mathematical models 
briefly review syntax semantics csp processes 
set actions set process names syntax csp skip pn pn process names defining recursive processes equations pn interpretation operations follows 
processes skip represent respectively deadlock successful termination 
prefix processes performs action continues parallel composition results interleaving actions performed synchronously 
processes represent internal external choice respectively 
means performs internal action evolving requires observable action example performs order perform evolves respectively 
distinction shall relevant translation statechart diagrams 
process behaves occurrences action hidden 
semantics csp usually defined terms traces failures divergences 
trace just finite sequences actions may observed process executing 
failure provides addition set actions refused process executing divergences traces followed infinite internal computations communication 
denote set traces semantic models come notions process refinement 
write trace trace analogously failures included failures general idea refinement deterministic completely specified refinement relations shall express consistency constraints 
definition partial mapping choosing semantic domain csp define partial mapping models csp 
hand mapping take account aspects leading consistency problem 
hand mapping take account important aspects order keep analysis feasible 
order able focus important aspect refine communication modeling aspect considering modeled 
concerning consistency problems focus protocol statecharts capsule statecharts construct table comparison see showing differences similarities concerning communication modeling aspect 
note local behavior modeled capsule statechart protocol statechart lead consistency problems 
derived mapping need take account local behavior 
mapping statecharts csp processes inspired 
precise description mapping reader referred 
briefly summarize results capsule statechart csp process constructed denoted csp parameterized states statechart 
similarly translate protocol statechart csp process 
additionally define csp process csp view process restricts process messages exchanged specific port denote process vp csp informally view process mirrors decision concentrate messages sent specific port 
diagram modeling aspect behavior description direction communication messages local behavior lifetimes objects multi party global uni directional modeled modeled uml specification statechart associated event queue incoming messages stored 
behavior event queue defined 
order precise flexible size buffers behavior assume storage scheduling events task connectors 
currently connector behavior supported uml rt 
reason propose connector stereotypes selecting specific pre defined connector behavior 
associate connector stereotype csp process con describing behavior 
capsules connected ports connector associated connector process con capsule statecharts associated capsules named sa sb define semantics construct protocol statechart messages participants csp sa con vp csp sb vp denote process sa sb con specification semantic consistency conditions having described mapping partial models semantic domain csp able specify consistency conditions models translated csp 
referring prototypical situation specify desired semantic consistency 
desired semantic consistency describes properties implementation deduced consistency requirements specified step methodology 
concerning prototypical situation require behavior resulting execution components deadlock free 
formulated consistency condition follows capsule statechart single party local bi directional messages ordered capsule modeled explicitly modeled fig 

modeling aspects capsule protocol statecharts condition deadlock freeness capsule statecharts sa sb capsules connected connector behavior con ports consistent induced system csp processes sa con sb deadlock free 
concerning second prototypical situation require interaction resulting execution capsule statecharts conforms protocol 
checked refinement notion csp process capsule connector capsule construct csp process protocol 
accordingly define condition protocol consistency capsules connected connector con ports consistent protocol iff csp sa con sb important notice base consistency condition failures model csp traces model allows specification safety conditions 
want capsules exhibit complete protocol behavior just part 
traces model expressing action occur actions occur 
respect development process discovered consistency problems concerning consistency interaction occur step simplified development process 
semantic consistency checks performed checking deadlock freeness involves translation capsule statecharts 
condition holds protocol consistency checked additionally translating protocol statechart 
location inconsistencies analysis concrete uml rt model prototypical situations consistency problems locate potential inconsistencies 
done finding parts model prototypical situation arises finding potential concrete consistency violations 
syntactic consistency capsule statecharts capsule statecharts protocol statechart checked 
syntactic consistency ensured semantic consistency conditions evaluated model checker fdr csp allows evaluation conditions 
output model checker model consistent respect semantic consistency conditions output counterexample see 
vii 
discussed issue modeling software components focus achieve consistency interaction model level 
discussed issue modeling general identified fig 

fdr tool trace deadlock composition software components interaction studied model level abstraction system components preserves aspects relevant meaning models fixed reasoning analysis models performed 
pointed importance choice modeling language tackled problem modeling components uml discovering uml shortcomings concerning consistency models 
studied notion consistency detail 
model submodels called consistent submodels integrated single model defined semantics 
need consistency management modeling identified shown related approaches currently offer concept consistency management uml models 
general methodology consistency management uml models 
approach idea submodels describing common aspects system non contradictory semantics common semantic domain 
methodology applied problem achieving consistent interaction software components modeled uml rt uml profile incorporating notion components connectors 
grouped directions 
concerning methodology applied application domains order show general applicability 
respect concrete steps methodology choice semantic domain supported catalogue semantic domains relationships modeling aspects 
order facilitate detection consistency violations software engineer extension methodology include step constructing uml models output model checker may necessary 
direction research seen improvement uml order enable exchange consistency conditions profile 
require sophisticated profile mechanism case tool support able store change consistency conditions 
concerning modeling components extended aspects componentbased systems reconfiguration yielding complete set consistency conditions enabling analysis component systems model level 
bowman derrick steen 
viewpoint consistency odp 
computer networks august 
bowman derrick steen 
viewpoint consistency lotos case study 
fitzgerald jones lucas editors fme industrial applications strengthened foundations formal methods proc 
th intl 
symposium formal methods europe graz austria september volume lecture notes computer science pages 
springer verlag september 
breu hofmann klein rumpe 
formalization unified modeling language 
mehmet aks satoshi matsuoka editors ecoop object oriented programming th european conference jyv skyl finland volume pages 
springer verlag new york ny 
cheng campbell wang 
enabling automated analysis formalization object oriented modeling diagrams 
proceedings ieee international conference dependable systems networks 
ieee computer society 
engels 
object oriented modeling roadmap 
anthony finkelstein editor software engineering pages 
acm june 
engels ster heckel 
methodology specifying analyzing consistency object oriented behavioral models 
volker editor proceedings th european software engineering conference esec pages 
acm press 
engels ster heckel 
rule specification behavioral consistency uml meta model 
gogolla editors uml unified modeling language 
modeling languages concepts tools th international conference toronto canada october proceedings volume lncs pages 
springer 
finkelstein gabbay hunter kramer nuseibeh 
inconsistency handling multi perspective specifications 
ian sommerville manfred paul editors proceedings fourth european software engineering conference pages 
springer verlag 
formal systems europe 
failures divergence refinement fdr user manual 
fradet le tayer rin 
consistency checking multiple view software architectures 
oscar nierstrasz michel editors esec fse volume lecture notes computer science pages 
springer verlag acm press 
ghezzi nuseibeh 
special issue managing inconsistency software development 
ieee transactions software engineering november 
grosse rhode 
integrating semantics object oriented system models 
orejas spirakis van leeuwen editors proceedings icalp lncs pages 
springer verlag 


statecharts csp ein csp zur analyse von statemate statecharts 
verlag 
hoare 
communicating sequential processes 
prentice hall 
li lilius 
timing analysis uml sequence diagrams 
robert france bernhard rumpe editors uml unified modeling language 
standard 
second international conference fort collins usa october 
proceedings volume lncs pages 
springer 
moreira clark 
combining object oriented modeling formal description techniques 
tokoro pareschi editors proceedings th european conference object oriented programming ecoop pages 
lncs springer verlag 
nuseibeh easterbrook russo 
making inconsistency respectable software development 
journal systems software november 
object modeling group 
unified modeling language specification version september 
rumpe schoenmakers sch rr 
uml room standard adl 
proc 
fifth ieee international conference engineering complex computer systems las vegas usa 
ieee computer society press 
selic 
uml modeling complex real time systems 
mueller bestavros editors languages compilers tools embedded systems volume lecture notes computer science pages 
springer verlag 
zave jackson 
conjunction composition 
acm transactions software engineering methodology october 

