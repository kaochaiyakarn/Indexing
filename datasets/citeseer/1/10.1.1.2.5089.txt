medvidovic computer science department university southern california los angeles ca usa usc edu stemming architectural erosion coupling architectural discovery recovery ideally software project commences requirements gathering specification reaches major milestone system implementation delivery continues possibly indefinitely operation maintenance phase 
software system architecture ways process supposed effective reification system requirements faithfully reflected system implementation 
furthermore architecture meant guide system evolution updated process 
reality developers frequently deviate architecture causing architectural erosion phenomenon initial architecture application arbitrarily modified point key properties longer hold 
approach intended address problem architectural erosion combining complementary activities 
approach assumes system requirements implementation available architecturally relevant information exist incomplete unreliable 
combine techniques architectural discovery system requirements architectural recovery system implementations leverage architectural styles identify reconcile mismatches discovered recovered architectural models 
promising approach progress discuss number remaining research challenges 
ideally software systems developed progression starting requirements architecture implementation regardless lifecycle model employed 
changes systems possibly indefinite lifespans follow progression change requirements reified architecture subsequently implementation 
frequently initial development process system evolution maintenance follow path reasons include developer requirements immediately implemented due perception short deadlines architectural decisions violated achieve non functional qualities improve performance satisfy real time constraints reduce application memory footprint shelf ots functionality directly incorporated system implementation existence legacy code perceived prevent careful system architecting 
reasons architectural artifacts sync system requirements implementation say architecture eroded :10.1.1.135.5430
alexander admiralty way marina del rey ca usa acm org paul sys 
eng 
automation johannes kepler university linz austria acm org potential problems associated architectural erosion difficulties assessing current implementation satisfies current requirements inability trace specific requirement implementation artifacts lack understanding complex effects changing requirement inadequate system maintainability evolvability 
incorrect perception architecture may lead incorrect architecture level subsequently implementation level decisions response new changing requirements 
deal problem architectural erosion researchers practitioners typically engaged architectural recovery system architecture extracted source code 
existing architectural recovery approaches fail account pertinent issues 
rely primarily implementation information leveraging requirements limited fashion 
implementation may violated certain system requirements effect recover incorrect architectures cases 
addition architecturally relevant decisions frequently obscured implementation 
may result justified implementation level decisions eliminating processing bottlenecks removing duplicate modules efficiency ots reuse 
architectural decisions ignored justification due missing system wide view developer misguided creativity implementing desired functionality 
problem existing approaches architectural recovery relative heavy weight product lack reliance information system requirements 
importantly existing architectural recovery approaches exhibit understanding importance role architectural styles developing largescale complex software systems 
architectural style key design idiom implicitly captures large number design decisions rationale effective compositions architectural elements system qualities result style 
knowledge system architecture partial picture regardless faithfully structural compositional behavioral interaction details recovered 
research goal combine software requirements implementations architectural styles light weight scalable manner stem architectural erosion 
requirements serve basis discovering software system architecture 
implementations serve basis recovering system architecture 
different inputs discovery recovery reveal different possibly incomplete architectural models 
architectural styles discovery reconcile models combine coherent complete model software system architecture 
approach consists interrelated activities depicted 
technique supporting discovery architecture system requirements 
technique recovering architecture system implementations 
architectural style characterization technique identify reconcile mismatches discovered recovered architectural models 
assume existing information architecture exist unreliable 
assume system requirements known inspectable implementation exists 
acknowledge modern software systems depend heavily theshelf libraries gui libraries middleware platforms corba dcom 
deriving architectural properties technologies challenging task outside current scope 
background dam ram recovery 
conceptual view approach 
builds related areas software architectures architectural styles software requirements specifically approaches mapping requirements architectural decisions architectural recovery 
software architectures styles legend requirements implementation architecture dam discovered arch 
model ram recovered arch 
model software architecture level design involves description elements systems built interactions elements patterns guide composition constraints patterns 
goal software architectures facilitate development large scale systems preferably integrating pre existing building blocks varying granularity typically specified different designers implemented different developers possibly different programming languages varying operating system requirements supporting different interaction protocols 
architectural style set design rules identify kinds building blocks may compose system local global constraints way composition done 
styles codify best design practices successful system organizations 
architectural styles number years including client server pipe filter blackboard rest 
architectural discovery software requirements describe aspects problem solved constraints solution 
requirements deal stakeholder goals options agreements issues conditions capture desired system features properties 
requirements may simple complex precise ambiguous stated concisely elaborated carefully 
informal requirements described natural language lead ambiguities inconsistency frequently practice special interest research 
relationship requirements architecture desired system readily obvious 
existing techniques provide suggestions addressing problem 
example approach relates desired system features system secure solution fragments effect features employ encryption scheme 
objective allow reuse compose solution fragments systems similar desired features 
begun addressing relationship desired features software architectures 
technique supports evaluation architectural decision alternatives light non functional requirements similar limitation 
twin peaks attempts overcome separation requirements specification design activities intertwining 
approach twin peaks take account implementation 
perry coined term architecture prescription language extension kaos goal specification language include architectural dimensions 
approach limitations architectural discovery technique unable suggest complete architectural configuration information extracted requirements currently non functional requirements modeling discovered architecture 
decided couple architectural discovery recovery styles 
key issue transforming requirements architecture software models traceability 
researchers recognized difficulties capturing development decisions software models 
response finkelstein suggest formal approach ensuring traceability requirements development 
architectural recovery number existing approaches focus recovering software architecture source code 
arm approach architectural reconstruction distinguishing conceptual architecture actual architecture derived source code 
arm applies design patterns pattern recognition compare architectures 
architectural recovery approach arm assumes availability system designers formulate conceptual architecture 
similarly recovery approach software reflexion models treat system architecture perspectives idealized high level view low level view derived source code 
reflexion models support incremental architectural recovery analyze varying sets relationships hold idealized actual architectures 
reflexion models direct architectural concepts styles connectors 
morale approach evolving legacy software systems developed procedural languages 
approach converts procedural object oriented systems steps design recovery application modeling object mapping source code adaptation 
approaches provides means determining implemented systems completely correctly satisfy original requirements requirements complete consistent 
series studies undertaken recover architectures open source applications 
approach taken studies come conceptual architecture system documentation basis understanding system implementation 
system documentation assumed correct fact documentation requirements implementation may partially incorrect incomplete internally inconsistent 
approaches architectural style information leveraged recovery 
example application illustrate discussed concepts application implemented visual 
extension application provided part microsoft foundation classes mfc release 
allows users manipulate graphical objects lines ovals polygons 
extends 
screenshot clients shown 
distributed application adds collaborative drawing chatting facilities depicted 
architecture available 
similarly requirements available 
highly interactive nature application easily extract functional requirements application observed behavior 
requirements extension available 
informally stated requirements describing commonly performed operations follows reqt allow user save drawings retrieval 
reqt object manipulation operations easily accessible user 
reqt allow user group simultaneously manipulate multiple drawing objects 
reqt allow user instantly view actions users 
approach goal research develop generally applicable style centered approach integrating architectural discovery recovery techniques reconciling identified differences 
approach comprise separate complementary techniques depicted 
architectural style technique architectural discovery software requirements 
architectural style technique architectural recovery software implementations 
technique leverages styles reconcile results discovery recovery 
architectural discovery elaborating system requirements viable software architecture satisfying requirements intuition 
software engineers face critical challenges performing task requirements frequently captured informally natural language software architectures usually specified formally :10.1.1.10.6542
non functional system requirements hard capture architectural model 
mapping requirements architectures maintaining inter consistency complicated single requirement may address multiple architectural concerns vice versa 
large scale systems satisfy hundreds possibly thousands requirements making difficult identify refine architecturally relevant information contained requirements 
address challenges developed cbsp light weight technique distill system requirements key architectural elements dependencies :10.1.1.10.6542
result technique intermediate model requirements architecture con tains essence architectural information embedded requirements 
model referred discovered architectural model dam 
cbsp approach creates dam structured process conflict resolution address ambiguities requirements 
process consists main activities detailed :10.1.1.10.6542
classify architecturally relevant requirements 
identify resolve classification inconsistencies 
refine restate architecturally relevant requirements 
section detail dam model 
discovered architectural model basic idea approach architectural discovery software requirement may explicitly implicitly contain information relevant software system architecture 
frequently hard surface information different stakeholders perceive requirement different ways 
cbsp captures information intermediate dam model 
dam structured simple set general architectural concerns derived existing software architecture research components provide application specific functionality :10.1.1.135.5430:10.1.1.106.9588
may data processing components 
connectors facilitate govern interactions components 
configuration system particular subsystem describes relationships organization multiple possibly components system 
properties describe non functional characteristics individual components connectors entire configuration 
derived dam element explicates architectural concern represents early architectural decision system 
example requirement reqt system provide interface web browser 
recast dam processing component element dam connector element comp web browser component system 
conn connector provided ensure interoperability third party components 
complexity relationship requirements architecture dam gives software architect leeway selecting appropriate refinement times generalization requirements 
examples refinement generalization 
possible dam dimensions discussed illustrated simple examples share draw application 
dimensions involve basic architectural constructs time reflect simplicity approach 
comp comp model elements describe involve individual processing data component architecture respectively 
example reqt system allow user directly manipulate graphical objects 
may refined dam elements describing processing components data components comp graphical object manipulation component 
comp data depiction graphical object 
conn model elements describe imply connector 
example reqt manipulated graphical objects stored file system 
may refined conn connector enabling interaction ui file system components 
conf model elements describe system wide features features pertinent large subset system components connectors 
example reqt allow independent customization application look feel graphical object manipulation tools 
may refined conf strict separation graphical object manipulation visualization storage components 
prop comp model elements describe imply data processing component properties reliability portability incrementality scalability adaptability evolvability 
example reqt user able view effects actions minimal perceived latency 
may refined prop comp graphical object manipulation component efficient supporting incremental updates 
prop conn model elements describe imply connector properties 
example reqt system support loading graphical manipulation tools runtime 
may refined prop conn robust connectors provided facilitate runtime component addition removal 
prop conf model elements describe imply system subsystem properties 
example reqt system support collaborative editing graphical objects 
may transformed prop conf system distributable 
note prop conn example involved refining general requirement specific dam element 
hand prop conf example involved generalization specific requirement general dam artifact 
fact cases multiple dam artifacts may produced part single requirement 
currently studying issue goal providing practical guidelines architects engaging task 
summary open issues point intermediate model dam 
dam classifies key architectural concerns categories data components processing components con configurations component properties connector properties sub system properties 
dam stated requirements notation verified intentions system non architect stakeholders customers 
dam architecturally relevant requirements requirements changed aside clarifications arise discovery process 
dam classifies describes system architecturally relevant information way easier derive architecture subsequently implementation raw requirements 
remaining problem dam elements provide low level view architecturally relevant system requirements recall examples 
may straightforward map aspects dam configuration information properties effective architecture realize 
example experience architectural discovery unable infer interdependencies architectural elements 
directly motivates need introduce additional information picture discussed 
architectural recovery architectural recovery complements architectural discovery highlighting major structural characteristics implemented system data processing components connectors configuration 
result architectural recovery recovered architectural model ram 
section discuss process generating ram 
show information coupled dam arrive complete architectural model 
uml represent recovered architecture 
recovered architectural model proposed architectural recovery technique consist simple activities 
fro clas se mdi hi nd cmd nd ro am ind ows fro frame windows cla se cm struct ction fr om dial og rom frame rom fr ame fr om las ses om vi rom ar ch ram ram props hdr sum info cr cs ec pro pert cp ect ion rope le ps um info app lica tion rc tu re dialog ro dia lo boxes el ec ool st prop set fro di tion ra cs ent ro ap io ar hit ec fr je ct la ro pert yp ge ab ro dia log boxes ps info iew ion ar aw ps cd oc ume nt cs tat pag cs pa ge aw le cd ly aw cd bj pd raw bj pd nt pd raw bj cs fro pp lic ation ar ch ite tu fr om pd raw obj ol ecl em cd cd cd raw ec om pp lica io hit ct ur pd raw obj pc pd raw bj pd raw ob pc ien fr om appli ure cp ra cw om ap io de aw em hdr ool struct dic te mgr mgr summary mgr artist mgr mgr dialog mgr view mgr mgr summary mgr mgr server mgr mgr dialog mgr view mgr 
identifying components uml class diagram 
magnification top diagrams shown illustration convey scope task 
generate class diagrams 
numerous tools available infer class diagrams source code automatically engineer need look system source code accomplish step 
shows class diagram client subsystem automatically generated rational rose 
group related classes 
typically large number implementation classes required implement individual architectural components connectors 
classes grouped different criteria architectural concerns 
multiple architects may participate process consequently disagreements mismatches may arise 
diagrams show possible grouping classes obtained applying simple rules adopted focus technique classes isolated rest diagram comprise grouping 
classes related generalization inheritance comprise additional groupings classes related aggregation composition 
classes way associations grouped denote tight coupling 
package groups classes architectural elements 
clusters classes identified previous stage packaged processing components connectors relationships links 
elements aggregated larger elements 
process client implementation abstracted components inter component links remote procedure call rpc connectors 
connectors shown uml rational rose provide mechanisms distinguishing connectors components 
show data components introduced perry wolf discussed section 
data components may extracted processing components states interfaces varying desired criteria class variables public method parameters 
determine partial system configuration 
relationships components identified preceding steps reflect system configuration 
configuration information may incomplete cases components interact easily detectable ways access shared implementation substrate classes implicit invocation distributed interaction 
shows partial configuration client topological relationship mgr dialog mgr view mgr components remaining components identified process addition diagram identify connectors reasons discussed 
summary open issues described architectural recovery technique simple scalable relying structural tion system implementation 
outcome technique ram model collection existing system major processing data components connectors partial architectural configuration 
ram intended map structural aspects dam proposed section 
result recovery step complete architecture system 
pieces information missing 
discussed architectural configuration information incomplete 
addition similarly great majority existing recovery techniques proposed approach take account non functional properties 
shortcoming suggests step approach coupling information represented ram dam architectural style information mitigate problem complete picture architecture discussed 
reconciling discovery recovery techniques provide related disconnected models system architecture depicted 
requirements refined rephrased dam elements dimensions representing key architectural concerns data processing components connectors configurations component properties connector properties sub system properties 
implementation abstracted types ram elements data processing components connectors partial configurations 
section discusses clientserver filter models matched derive complete architecture combined information 
determining appropriate architectural styles discussed earlier architectural styles provide rules exploit recurring structural interaction patterns class applications 
styles constrain architectural models syntactically semantically 
order select appropriate style application propose classify existing architectural styles set commonly recurring dimensions 
goal provide foundation classification rich allow effectively represent select styles dam ram models 
preliminary study architectural styles identified dimensions candidate set effectively describing styles 

types data exchanged style elements 
structure elements allowed style 
allowed topologies architectural elements 
allowed behavior style element 
types supported interactions style elements allowed specializations 
key non functional properties especially enabled style 

style domain applicability 
table depicts result exercise mapped commonly occurring styles framework 
experience indicated challenges table characterization architectural styles data structure topology behavior interaction properties domain discrete events separable components limited component dependencies exposed named services asynchronous coordination data tuples explicit connectors partially ordered connectivity top bottom relations dynamic creation connections data queueing buffering connectors multi tasking mechanisms threads implicit invocation event interaction direction oriented events propagated recipients heterogeneity composability dynamicity gui systems parameterized request independent servers connections clients servers listening server connections setup teardown buffering queueing server location remote connection communication protocol implicit server invocation security distrib specialized clients requests data marshalling evolvability typed response distributed protocol stacks dynamic creation connections multi tasking mechanisms threads exposed named services unmarshalling client call synchronization request response protocol heterogeneity tems explicit pipes stream pipe synchronization heterogeneity filters filter stream transformation state filter reads writes streams typed input output records ports filters sources sinks pipes sources sinks connected port instance machine data buffering pipes propagation stream contents sinks reusability composability dataflow systems channel independent producers producers connected content filtering distributors distributor location cation subscription request explicit distributors channel access subscribers receiver user interface distributors channels receivers distributors buffering queueing distributors subscription setup content storage expiration remote connection communication protocol data marshalling unmarshalling distribution policy implicit invocation scalability robustness security component document component dialog boxes component application object connector connector connector connector component windows gui component view component frame windows need address 
need carefully specify large representative complete set existing architectural styles 
process help test hypothesis dimensions sufficient uniquely richly describe style 
second need characterize style manner simplify task relating information contained dam ram models information contained table 
third need address situations multiple styles highlighted process plausible candidates 
related issue dealing situations multiple styles appropriate tandem problem 
fact selected styles example application client server handle distributed coarse grained aspects application ability compose gui intensive application components client server 
choice aided factors including familiarity styles fact past relatively small number styles considered table includes styles domain properties distribution gui aspects clearly mapped styles 
envision greater challenge general setting 
include identifying conditions situations specific combinations styles dis allowed 
non trivial problem deserves particular attention 
integrating dam ram manager connector connector manager connector dialog manager connector connector determined suitable architectural style integrate separate dam ram models single integrated model 
possible approaches accomplishing step client server client windows gui summary manager manager view manager manager chat 
apply style information dam derive intended architecture map information ram architecture 

apply style information ram derive implemented architecture map information dam architecture 

integrate dam ram extracted architecture apply style information integrated model 

currently investigating respective benefits drawbacks approaches 
intended architecture application obtained integrating dam architectural style information discussed 
complete architecture obtained mapping information contained ram intended architecture shown 
mentioned final share draw architecture combines client server styles 
irrespective chosen integration approach integrating dam ram requires knowledge elements interrelate 
dam ram architectural perspectives may inconsistent element names level architectural detail 
models need reconciled 
various interesting reconciliation scenarios envisioned 
example single ram element may map multiple dam elements vice versa 
possible obvious relationship established element models model elements 
carefully study scenarios 
server connector connector manager connector connector manager connector dialog manager connector connector windows gui summary manager manager view manager manager 
intended architecture client subsystem 
number details elided brevity 
final architecture application shown client subsystems roughly equivalent draw cli application 
highlighted connectors rpc communicate processes 
chat described motivated observation architecturally relevant information readily available system requirements implementation obvious form 
information uncovered help stem architectural erosion 
information captured system requirements high level possibly imprecise rich human stakeholders insights rationale information suggests suitable architectural style system 
hand information contained system implementation low level precise rich detail information reflects style applied system construction 
postulate sources information considered complete correct 
propose combined techniques architectural discovery recovery reconciliation 
described going 
identified open issues frame research 
addition envision combination techniques result process architecture known incorrect incomplete addition requirements implementation need assumed correct complete 
furthermore proposed approach result clearly specified maintainable traceability links requirements architecture implementation 
plan adopt existing techniques capture manage traceability links 
batory malley 
design implementation hierarchical software systems reusable components 
acm transactions software engineering methodology october 
bowman holt brewster 
linux case study extracted software architecture 
icse los angeles ca may 
perry 
transforming goal oriented requirement specifications architecture prescriptions 
icse straw workshop toronto may 
de bruin van vliet 
documenting analyzing context sensitive design space 
august montreal 
dardenne fickas van lamsweerde 
goal directed concept acquisition requirement elicitation 
th int 
workshop software specification design oct 
ding medvidovic 
focus light weight incremental approach software architecture recovery evolution 
amsterdam august 

scenario driven approach trace dependency analysis 
ieee transactions software engineering 
accepted appear 
fielding 
architectural styles design network software architectures 
ph thesis uc irvine 
fielding taylor 
principled design modern web architecture 
icse limerick june 
gall 
object oriented re architecting 
esec berlin sep 

traceability integration 
nd international conference systems integration pp 

finkelstein 
analysis requirements traceability problem 
st international conference 
eng pp 

medvidovic :10.1.1.10.6542
reconciling software requirements architectures cbsp approach 
th ieee international symposium requirements engineering re toronto august 
guo kazman 
software architecture reconstruction method 
san antonio feb 
hassan holt 
architecture web servers 
working conference reverse engineering brisbane australia nov 
hauswirth jazayeri 
component communication model push systems 
esec fse toulouse sep 
kazman experience performing architecture tradeoff analysis 
icse 
kazman carriere 
view extraction view fusion architectural understanding 
th international conference software reuse canada june 
van lamsweerde darimont letier 
managing conflicts goal driven requirements engineering ieee transactions software engineering vol 
nov 
macdonald carrington guiding object oriented design 
tools melbourne nov 
medvidovic taylor 
classification comparison framework software architecture description languages 
ieee transactions software engineering vol 
pp 
january 
mehta medvidovic 
architectural style requirements self healing systems 
st workshop self healing systems charleston nov 

core method controlled requirements specification 
icse munich germany sept 
murphy notkin sullivan software reflection models bridging gap design implementation ieee transactions software engineering vol 
april pp 

nuseibeh weaving requirements architectures 
ieee computer march 
nuseibeh kramer finkelstein 
framework expressing relationships multiple views requirements specification 
ieee transactions software engineering oct 
perry wolf 
foundations study software architectures 
software engineering notes oct 
rugaber 
tool suite evolving legacy software 
icsm oxford england aug sep 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall 
taylor medvidovic component message architectural style gui software 
ieee transactions software engineering june 
holt 
hybrid process recovering software architecture 
cascon toronto nov 
wong tilley muller storey 
structural case study 
ieee software jan 
