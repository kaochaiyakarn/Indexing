lixto data extraction project back forth theory practice georg gottlob christoph koch robert baumgartner marcus herzog gottlob koch dbai tuwien ac baumgartner herzog lixto com dbai tu wien lixto software gmbh vienna austria sergio flesca flesca si deis vienna austria universit della cs italy lixto project research project database theory commercial enterprise develops web data extraction wrapping web service definition software 
discuss project main motivations ideas particular logic framework wrapping 
theoretical results monadic datalog trees elog close relative internal wrapper language lixto system 
results include characterization expressive power complexity languages 
describe visual wrapper specification process lixto various practical aspects wrapping 
discuss complexity query languages trees theoretical study logic languages wrapping 
return practice wrapping lixto transformation server allows streaming integration data extracted web pages 
natural requirement complex services web wrapping 
discuss industrial applications lixto point open problems study 

nowadays web content mainly available form html documents 
documents separate data presentation ill suited target database queries forms automatic processing 
problem addressed called web wrappers programs extract relevant information html documents translate machine friendly format xml easily queried processed 
wrapping problem addressed substantial amount see tsimmis florid debye xwrap lixto research systems 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
pods june paris france 
copyright acm 

web service designers face task wrapping large number sites 
order provide useful web service information significant number source sites relevant domain service integrated accessible uniform manner 
web service may fail attract acceptance users intended 
web page layouts may subject frequent change 
intentional discourage wrapper access force humans personally visit sites 
just reasons wrapping tools need assist humans render creation wrappers manageable task 
ways approach requirement proposed machine learning techniques create wrappers automatically annotated examples visual specification wrappers :10.1.1.33.2176:10.1.1.56.7152
approach currently suffers need provide machine learning algorithms example instances wrapped manually negative theoretical results put bound expressive power learnable wrappers 
lixto takes alternative route visual wrapper specification 
ideally mean process interactively defining wrapper example document mainly mouse clicks supported strong intuitive design metaphor 
visual process wrapper program automatically generated require human designer know wrapper programming language 
way wrapper creation process requires user example documents facilitated simple user interface 
visual wrapping reality supported implemented systems varying 
discuss lixto visual data extraction project started commercial enterprise established customer base perspectives theory practice 
project engendered fundamental questions led theoretical results report 
lixto number unique example known regular string languages learned positive examples 
tics distinguishes state art web wrapping possible foundational research results techniques database theory remained focussed producing working practical industrial strength software system 
lixto distinctive features summarized 
lixto employs fully visual wrapper specification process allows steep learning curve high productivity specification wrappers 
manual fine tuning knowledge html internal wrapping language necessary 
lixto expressive visual wrapper generation possible allows extraction target patterns surrounding landmarks content html attributes order appearance semantic syntactic concepts 
lixto allows advanced features web crawling recursive wrapping 
visual specification framework internal logic language similar datalog elog 
elog closely studied 
particular shown core fragment captures precisely expressiveness monadic second order logic mso trees quite expressive evaluated efficiently 
believe presents web wrapping significant new application logic programming information systems 
database programming language datalog received considerable attention database theory community years see ultimately failed attract large database practice deserve experience context trees web 
datalog framework selecting nodes trees situation substantially different general case full datalog arbitrary databases 
monadic datalog trees low evaluation complexity programs simple normal form rules long intricate various automata theoretic language theoretic logical techniques exist cf 
evaluating programs optimizing available full datalog 
lixto led move title suggests times back forth systems theory research 
believe journey ends spectrum vital outcome lixto form possible 
motivated range related research problems 
particularly expressiveness theory query languages trees xml summarized 
character survey research related lixto including discussion address integration wrappers definition complex web services lixto transformation server 
industrial application case studies lixto discuss open research problems 
structure basically follows outline 
start logic framework wrapping discuss monadic datalog trees basically fragment elog wrapper programming language section 
move visual wrapper specification lixto framework section 
discuss elog language detail section 
results complexity queries trees section 
come back practice wrapping give overview lixto transformation server section real world applications lixto 
conclude section 
logical view wrapping desiderata wrapping languages allow foundational study wrapping languages need establish criteria compare languages 
desiderata proposed wrapping language satisfy 
language solid understood theoretical foundation ii provide trade complexity number practical wrappers expressed iii easy wrapper programming language iv suitable incorporation visual tools 
clearly languages right expressive power computational properties considered satisfactory wrappers easy define 
words right expressiveness wrapper programming language order 
understood literature scope wrapping conceptually limited 
information systems architectures employ wrapping usually consist layers lower restricted extracting relevant data data sources making available coherent representation data model supported higher layer higher layer data transformation integration tasks performed necessary fuse syntactically coherent data distinct sources semantically coherent manner 
term wrapping refer lower syntactic integration layer 
wrapper assumed extract relevant data possibly poorly structured source put desired representation formalism applying number transformational changes close minimum possible 
wrapping language permits arbitrary data transformations may considered overkill 
core notion base wrapping approach information extraction function takes labeled unranked tree representing web document returns subset nodes 
wrapper program implements functions assigns unary predicates document tree nodes 
predicate assignments structure input tree new data tree computed result information extraction process natural way lines input tree new labels omitting nodes relabeled form tree minor computation framework higher semantic integration layer addressed lixto transformation server 
set information extraction functions natural way wrap input tree compute new label node filter function predicates assigned information extraction functions 
output tree computed connecting resulting labeled nodes transitive closure edge relation preserving document order words output tree contains node predicate corresponding information extraction function computed contains edge node node directed path input tree assigned information extraction predicates node path assigned information extraction predicates 
formalize operation natural way doing obvious 
way take tree re label nodes declare irrelevant significantly transform original structure 
coincides intuition wrapper may change presentation relevant information packaging data model apply case web wrapping handle substantial data transformation tasks 
believe captures essence wrapping 
assume unary queries monadic second order logic mso trees expressiveness yardstick information extraction functions 
mso trees wellunderstood theory wise see quite expressive 
fact considered language choice defining expressive node selecting queries trees see acknowledges role mso argues stronger languages 
experience considering wrapping system lacks expressive power usually quite easy find real life wrapping problems handled see related discussion mso expressiveness node selecting queries 
section discuss monadic datalog trees simple form logic language datalog wrapper programming language 
monadic datalog satisfies desiderata iv raised argue core elog language inherits property 
monadic datalog program compute set unary queries information extraction functions 
intensional predicate program selects subset dom considered define information extraction function 
general intensional predicates define information extraction functions 
declared auxiliary 
tree structures trees defined normal way node 
assume children node fixed order 
node label taken finite nonempty set symbols alphabet consider elog hand supports visual features allow handle common tasks quickly easily 
contains features render strictly expressive mso 
simple model unrestricted sets tags string attribute values assumed encoded lists character symbols modeled subtrees document tree 
nextsibling nextsibling nextsibling unranked tree representation binary relations nextsibling 
unranked finite trees correspond closely parsed html xml documents 
unranked tree node may arbitrary number children 
unranked ordered tree considered structure tur dom root leaf nextsibling dom set nodes tree root leaf relations unary nextsibling binary 
relations defined intuitive meanings 
root contains exactly node root node 
leaf consists set leaves 
true iff leftmost child nextsibling true iff th th children common parent node respectively counting left see 
true iff labeled tree 
contains set rightmost children nodes 
root node sibling parent 
structure may clear context state subscript relation names 
default assume trees represented schema signature outlined refer ur 
document order relation natural total ordering dom xml related standards see 
defined order opening tags document tree nodes reached reading html xml document flat text file left right 
monadic datalog assume function free logic programming syntax semantics datalog language known refer detailed survey datalog 
monadic datalog obtained full datalog requiring intensional predicates unary 
unary query denote function assigns predicate elements dom words selects subset dom 
monadic datalog obtains unary query distinguishing intensional predicate query predicate 
signature denote finite set extensional predicates fixed arities available datalog program 
default signature ur unranked trees 
example 
monadic datalog program ur italic 
italic italic 
italic italic nextsibling 
computes unranked tree representing html parse tree nodes contents displayed italic font ancestor node parse tree corresponds formed piece html form 
labeled 
program uses intentional predicate italic query predicate 
monadic second order logic mso extends order logic quantification set variables variables ranging sets nodes coexist order quantification variables ranging single nodes 
unary mso query defined mso formula free firstorder variable 
tree evaluates set nodes dom 
holds arbitrary finite structures proposition folklore 
monadic datalog query mso definable 
main measure query evaluation cost combined complexity database query program considered variable 
proposition 
see monadic datalog arbitrary finite structures np complete combined complexity 
properties monadic datalog trees restricting structures trees monadic datalog acquires number additional nice properties 
theorem 
ur monadic datalog dom combined complexity size program dom size tree 
follows fact binary relations ur bidirectional functional dependencies instance node child child node 
program equivalent ground program computed time dom 
ground programs evaluated linear time 
unary query trees mso definable exactly definable monadic datalog 
theorem 
unary mso definable query ur definable monadic datalog ur 
direction follows proposition judging experience lixto system real world wrappers written monadic datalog small 
practice trade complexity compared mso note tree structures contain redundancy leaf node monadic datalog expressive generalization 
datalog allows complements extensional relations rule bodies 
query evaluation problem known pspace complete considerably expanded program sizes 
monadic datalog program trees efficiently rewritten equivalent program restricted syntax 
motivates normal form monadic datalog trees 
definition 
monadic datalog program ur tree marking normal form rule forms 


unary predicates intensional ur binary predicate ur 
result signature unranked trees may extend ur include child relation common form navigation trees 
theorem 
monadic datalog program ur child equivalent program ur computed time 
discussion previous section shown monadic datalog expressive power yardstick mso trees evaluated efficiently easy wrapper programming language 
existence normal form demonstrates rules monadic datalog long intricate 
monotone semantics wrapper programming task quite modular intuitive 
differently automaton definition usually understood entirely certain correctness adding rule monadic datalog program usually change meaning completely adds functionality 
wrappers defined monadic datalog need specify queries full source trees run 
important practical wrapping way changes parts documents immediately relevant objects extracted break wrapper 
wrappers 
monadic datalog trees framework web information extraction satisfies desiderata stated section efficient evaluation appropriate expressiveness suitability practical wrapper programming language 
fourth desideratum visual specification wrappers remains discussed 
address issue 

visual wrapping lixto section discuss lixto visual wrapper system 
system architecture 
introduce core visual specification procedure lixto wrapper generator 
elog wrapping language 
lixto visual wrapper system 
elog programs completely visually specified similar monadic datalog core language called elog studied detail monadic datalog discussed minor syntactic restrictions lower expressiveness 
property unary queries entirely visually specified inherited mso 
provide useful metaphor building blocks wrappers lixto calls visual counterparts monadic intensional predicates patterns rules filters 
architecture lixto visual wrapper toolkit consists modules see interactive pattern builder provides user interface allows user visually specify desired extraction patterns basic algorithm creating corresponding elog wrapper output 
extractor elog program interpreter performs actual extraction elog program 
extractor provided html document previously constructed program generates output pattern instance base data structure encoding extracted instances hierarchically ordered trees strings 
single elog program continuous wrapping changing pages wrap html pages similar structure 
xml designer user chooses map extracted information stored pattern instance base xml 
process includes tasks declaring intensional predicates auxiliary tree nodes matching necessarily propagate output xml tree specifying labels nodes receive patterns matched 
pattern name act creation new pattern default node label case node matches pattern 
xml transformer module performs actual translation extracted pattern instance base xml 
interactive wrapper generation discussed visual wrapper specification refer process interactively defining wrapper example documents ideally mainly mouse clicks 
visual wrapping process systems lixto heavily relies main operation performed users marking region example web document displayed screen input device mouse node document tree best matching selected region robustly determined 
selecting region followed second region inside possible define fixed path example document 

word labeling alphabet interpreted directed path tree true th node path node excluding labeled ai 
note expressed fixed conjunction child label atoms consider shortcut new built predicate 
theorem provides method eliminate child atoms obtain programs strictly ur 
example shortcut child child new variable 
example document representative family documents wrapped user may guided graphical specification rule follows 
destination pattern selected existing newly created parent pattern selected patterns defined far 
initially pattern available root pattern 
root pattern corresponds extensional predicate root ur exception correspondence patterns intensional predicates 
system display document highlight regions correspond nodes parse tree classified wrapper program specified far 
new rule defined selecting mouse clicks example document subregion highlighted 
system automatically decide path relative highlighted region best describes region selected user 
way rule 
obtained system adds wrapper program 
filter definition general user refine filter rule generalizing path adding restricting conditions unary atom 
restriction system adds corresponding condition atom filter rule 
tasks carried visually see 
procedure depicted 
obtain expressiveness mso little power added conditions able refer root leaf leftmost sibling nodes tree patterns unary atoms able specify nextsibling atoms 
rules specified selecting child node say labeled instance pattern program tree view books example example document selecting destination pattern produces rule generalizing specified path result adding condition left sibling sibling 
elog fragment elog discussed detail precisely expressive power mso 
example documents needed defining wrapper program required rule specified exists document instance parent pattern recognized instance destination pattern relates desired manner 
shows screenshot lixto interactive pattern builder showing tree view patterns filters defined top left user interface elements add change delete test patterns filters top right lixto browser bottom displays example document means patterns filters visually defined 
example wrapper created meant extract amazon com site 
elog language full elog language extends monadic datalog wrapper language number features 
particular various forms conditions properly restrict filters exclude false positives wrapping elog sup ports string tree wrapping stratified datalog negation navigation certain forms regular paths optionally called distance tolerances web crawling 
features serve shortcuts simplify wrapper specification process improve productivity render full elog language strictly expressive mso 
presenting features detail scope detailed overview full elog language 
points discussed 
striking change monadic datalog elog internal syntax elog pattern predicates binary 
may invalidates theoretical considerations regarding expressive power complexity earlier fact true 
elog satisfies syntactic restrictions sense monadic datalog dyadic syntax basically favorable properties details see 
standard elog rule form new ar ex parent instance variable terms filter defined visual specification process pattern instance variable ex extraction definition atom possibly empty set condition atoms 
new par pattern predicates 
sense second argument position pattern atom corresponds argument previously monadic pattern atoms represents parent pattern root node 
purpose practical binary pattern relations define multigraph basis transformation wrapped data xml 
lixto visual wrapper elog offers basic mechanisms data extraction tree string extraction 
tree extraction employ predicate allows richer way specifying paths discussed paths may consist certain regular expressions tag names may put conditions values html node attributes 
second extraction method string allows wrap strings leaves html parse tree tag structure 
feature predicate analogous takes string path definition regular expression specifying substrings element texts extracted predicate path expression matching path document tree 
lixto visual wrapper supports wide range conditions allow define wrappers simple steps 
main types conditions context conditions express target pattern instance appear specific element 
called internal conditions express permit called specialization rules table contains td color green exact 
lack extraction atom making step html tree match subset nodes matched parent pattern 
analogous extraction predicates refer 
specific element appear inside target pattern concept conditions pattern conditions 
added wrapper program fully visually lixto having deal elog 
context condition predicates specify subtree text appear desired extraction target 
compared nextsibling predicates flexible allow nodes target pattern instance node arbitrarily distant course possible require paths nodes match regular expression conditions attributes distance certain tolerance interval 
internal condition predicates impose conditions internal structure subtrees matching patterns 
include predicates checking tree contains certain subtree node matching path 
concept condition predicates subsume semantic concepts see syntactic ones true string represents country currency date respectively 
predicates built enrich system interactively added 
syntactic predicates created regular expressions semantic ones refer ontological database 
comparison conditions allow comparison data values dates 
pattern conditions allow add pattern atoms rule parent pattern respect filter rule defined basic visual specification procedure discussed previous section 
shows example elog program defines wrapper ebay pages 
wrapper applies pages contain lists items offered auction 
entry list contains item description price associated currency name number bids far 
details elog program technical aim exploit html formatting robustly spot data extracted 
time writing ebay pages offered item stored table 
sequence tables extracted pattern asks largest sequence nodes children body node document starting table node table node node immediately follows list header pages table containing text item final node immediately followed hr html node 
record extract individual records 
remaining patterns defined relative record 
example pattern extracts item descriptions nodes record labeled item description field hyperlinked record 
pattern price uses concept attribute currency matches strings dm euro bids pattern uses price pattern 
final filter rule employs string extraction 
discussion practical aspects web wrapping lixto visual wrapper system look theoretical side wrapping place 
theorems show monadic datalog child document www ebay com body table table table item substr hr record table record td 
content substr price record td var regvar bids record td td price currency price var elog extraction program information ebay nextsibling und unary relations evaluated polynomial time 
full elog introduces number powerful built predicates navigating nodes tree rules build cyclic rules arbitrary size 
raises question complexity cyclic rules conjunctive queries programs tree relations child nextsibling descendant consider 

complexity issues seen theorem monadic datalog trees defined unary relations binary relations child nextsibling complete solved time linear size database linear size tree 
relations child descendant play important role various query languages trees xpath xquery xslt called axes 
main modes navigation trees horizontal vertical 
horizontal navigation distinguish navigating sibling nodes nodes intuitively left right tree axis xpath 
natural axis relations child child child nextsibling nextsibling nextsibling child nextsibling child 
note consider complexity expressiveness need deal relations addition may assume unary predicate child 
natural question ask complexity monadic datalog programs axes start basic problem conjunctive queries seen datalog programs containing single nonrecursive rule 
note conjunctive queries trees natural applications computational linguistics term rewriting data integration 
case individual rules acyclic conjunctive queries known monadic datalog arbitrary axes evaluated linear time 
elog programs acyclic rules 
observed proposition full datalog exptime complete monadic datalog arbitrary finite structures np np complete 
lower bound trees known boolean conjunctive queries structures form pi child child np hard combined complexity 
detailed study tractability frontier conjunctive queries trees full proceedings volume 
observed subset maximal polynomial cases axis sets child child child nextsibling nextsibling nextsibling 
class conjunctive queries subset sets unary relations query evaluation problem polynomial respect combined complexity 
dichotomy cases conjunctive queries axis relations child child problem np complete 
obviously complexity monadic datalog set axes conjunctive queries axes 
special case queries acyclic worth studying probably important node selecting query language trees xpath naturally tree shaped 
xpath engines available took exponential time worst case process xpath 
theorem 
xpath ptime combined complexity 
result dynamic programming algorithm improved form yielded xpath engine guaranteed run polynomial time 
people common features xpath worthwhile study restrictive fragments language 
introduced core xpath navigational fragment xpath includes horizontal vertical tree navigation axes node tests boolean combinations condition predicates 
shown core xpath evaluated time linear size database linear size query 
theorem 
core xpath hard combined complexity 
property shared xpath core xpath strictly fragment renders highly query evaluation massively parallelizable complexity class nc algorithms exist take polynomial amount space query processing 
pspace xpath mso mso trees core xpath pos 
core xpath logcfl complete pspace complete mon 
datalog child nextsibling complete cq mon 
datalog cq child child np complete cq child nextsibling nextsibling nextsibling trees complexity expressive power query languages trees 
interestingly remove negation condition predicates complexity core xpath reduced logcfl parallel complexity class nc 
theorem 
positive core xpath combined complexity 
generalizes large fragment full xpath called negation minor features removed obtain theorem 
logcfl complete combined complexity 
results complexity various fragments xpath 
positive core xpath queries correspond acyclic positive queries axis relations 
interestingly conjunctive query axis relations mapped equivalent acyclic positive query polynomial translations doing 
corollary 
conjunctive query trees equivalent positive core xpath query 
course talking conjunctive queries trees assume binary relations signature relations set axes 
np core xpath queries mapped monadic datalog linear time 
slightly curious fact remains true presence negation core xpath analogous language feature exists datalog 
theorem 
core xpath query translated equivalent query linear time 
overview results discussed section 
venn diagram notation refers complexity classes usual complexity theoretic assumptions logcfl np pspace arrows refer expressive power means query language translated equivalent query 
notation refers queries language binary relations axis set unary relations 

lixto transformation server usual setting creation services web wrappers information obtained multiple wrapped sources integrated source sites monitored changes changed information automatically extracted processed 
push information systems architectures wrappers connected pipelines integration engines process streams data natural small information pipeline integrating information books 
scenario supported lixto suite lixto transformation server 
task information processing composed stages building blocks assembling information processing pipeline call information pipe 
stages acquire required content source locations component resembles lixto visual wrapper integrate transform deliver results users 
actual data flow transformation server realized handing xml documents 
stage transformation server accepts xml documents wrapper component accepts html documents performs specific task produces xml document result 
result fed successor components turn performs information processing stages 
components boundaries network activated neighboring components 
boundary components wrapper components ability activate user specified strategy trigger information processing behalf user 
architectural point view lixto transformation server may conceived container environment visually configured information agents 
pipe flow model complex unidirectional information flows see 
components information processing service maintained updated smoothly 
information services may controlled customized outside server environment various types communication media sms rmi 

applications section report real world applications lixto 
applications tasks integrating transforming delivering information extracted lixto visual wrapper performed lixto transformation server 
mobile applications playing 
playing introduces umts scenario mobile entertainment 
developed mobile house umts demonstration lab vienna austria lixto technology 
application aims monitoring playlists individual radio stations pda displaying current songs integrating current song data charts lyrics server 
playing playlists national austrian international radio stations taken web sites real time integrated portal 
possible listen live currently played songs mobile devices pdas view information songs titles artists lyrics 
images cd covers offered current rankings selected songs major music charts 
data extracted different web sites lixto visual wrapper 
web sites split groups radio channels charts lyrics 
information sources upgraded periodic intervals ranging seconds radio channels hours days charts lyrics 
soon module translated data xml lixto transformation server integrates incoming xml data 
information flow chain syndication mobile devices 
application layout optimized suite small display pdas time offer navigation capabilities 
starting main page user choose view international national austrian radio stations 
pages offers index radio stations link live offered respective radio station 
user asks detailed information currently played songs additional information additional window chart ranking selected charts image cd lyrics 
ranking charts independently accessible simply clicking chart links skimming returned list selecting songs 
additionally offered respective chart supported mobile device short intro song played 
flight schedules information travel particular flight information services vital travelers globe 
flight information usually available web available central site service providers 
case flight information timetables individual flights scattered different airport information systems portals individual airlines 
traveler home definition kind information best communicated mobile devices 
flight schedule information application lixto detail 
user may subscribe specific flights providing flight number departure destination location 
system send actual flight status user means sms message status changed consecutive requests 
press clipping financial news lixto application discussed detail extracts news various press web sites aggregates extracted information latest stock quotes creates new web site html wml formats displaying integrated information 
specific feature scenario chosen xml structure news items 
xml structure component completely user defined chose standard format nitf news industry text format part news markup language specification 
nitf generally save exchange display news information 
somebody content provider running system integration nitf data delivered lixto transformation server realised easily additional xml 
applications application domain described detail 
created information portal offering general vine news vine crops growing news localized information new recommendations plant pest controls manufacturer news 
portal integrates information weather information various web sources 
wine personalize information region priority 
applications automotive industry business processes automotive industry carried means web portal interaction 
business critical data various divisions quality management marketing sales engineering procurement supply chain management competitive intelligence manually gathered web portals web sites 
automating process automotive part suppliers dramatically reduce costs associated processes time improving speed reliability carried 
manually browsing searching results sites lixto automatically gathers data renders results xml 
data format ideally suited processed enterprise applications distributed various communication channels 
business intelligence important application lixto business intelligence typical scenario monitor product prices news offered competitors web sites 
information obtained way may interpret changes market share quickly react changes sales strategies competitors 
specific application developed financial services provides information ethical responsible investment lixto integrates reports automatically taken sites number organizations uno human rights watch ana study assess companies treatment environment employment children activities countries high levels corruption 
power trading application lixto developed major electric power trader spot market prices electric power integrated major european power trading sites 
information automatically integrated weather water level information imported customer information systems trading risk management 

open problems conclude list open research problems come working lixto considerable theoretical component 
tree wrapper learning 
substantial amount done automatic wrapper induction example documents approach suffers problem large number examples required learn 
visual specification allow guide supervised learning process require examples 
goal render lixto intelligent machine learning techniques order reduce required human wrapper designer visual wrapping system 
data extraction pdf 
substantial interest industry wrapping documents formats pdf postscript 
documents wrapping mainly guided reasoning process white space gestalt theory quite difficult computer separate articles front page daily available machine readable form different web wrapping require new techniques wrapping algorithms 
interesting problem context complexity queries trees remained open tractability frontier complexity conjunctive queries trees accessible regular expressions basic tree relations nextsibling 
xpath axes special case setting child nextsibling 
abiteboul hull vianu 
foundations databases 
addison wesley 
baumgartner flesca gottlob herzog 
semantic markup news items lixto 

baumgartner flesca gottlob 
declarative information extraction web crawling recursive wrapping lixto 
proc 
lpnmr vienna austria 
baumgartner flesca gottlob 
visual web information extraction lixto 
proceedings th international conference large data bases vldb 
baumgartner flesca gottlob herzog 
building dynamic information portals case study domain 
proc 

baumgartner herzog gottlob 
visual programming web data aggregation applications 
proc 

cosmadakis gaifman kanellakis vardi 
decidable optimization problems database logic programs 
proceedings th annual acm symposium theory computing pages chicago illinois usa 
courcelle 
graph rewriting algebraic logic approach 
van leeuwen editor handbook theoretical computer science volume chapter pages 
elsevier science publishers 
eiter gottlob voronkov 
complexity expressive power logic programming 
acm computing surveys sept 

tree acceptors applications 
journal computer system sciences 
flum frick 
query evaluation tree decompositions 
proc 
icdt volume lncs pages 
springer jan 
frick koch 
query evaluation compressed trees 
proc 
lics ottawa canada june 
gold 
language identification limit 
inform 
control 
gottlob koch 
monadic datalog expressive power web information extraction languages 
journal acm 
gottlob koch pichler 
efficient algorithms processing xpath queries 
proc 
vldb hong kong china 
gottlob koch pichler 
complexity xpath query processing 
proc 
pods 
gottlob koch pichler 
xpath query evaluation improving time space efficiency 
icde bangalore india mar 
gottlob koch schulz 
conjunctive queries trees 
proc 
pods 
greenlaw hoover ruzzo 
limits parallel computation completeness theory 
oxford university press 
herzog gottlob 
flexible framework commerce applications 
proc 
tes 
koch 
efficient processing expressive node selecting queries xml data secondary storage tree automata approach 
proc 
vldb pages 
blockeel bruynooghe den bussche 
information extraction web documents local unranked tree automaton inference 
proc 
ijcai 
kushmerick weld doorenbos 
wrapper induction information extraction 
proc 
ijcai 
laender ribeiro neto da silva 
debye data extraction example 
data knowledge engineering feb 
liu pu han 
xwrap xml enabled wrapper construction system web information sources 
proc 
icde pages san diego usa 
www lixto com 
lud scher der lausen may 
managing semistructured data florid deductive object oriented perspective 
information systems 
meuss schulz bry 
aggregated answers semistructured data 
proc 
icdt pages 
minoux 
simplified linear time unit resolution algorithm horn formulae computer implementation 
information processing letters 
project 
www grappa univ lille fr 
muslea minton knoblock 
hierarchical approach wrapper induction 
proc 
rd intern 
conf 
autonomous agents 
neven schwentick 
query automata finite trees 
theoretical computer science 
neven van den bussche 
expressiveness structured document query languages attribute grammars 
journal acm jan 
papakonstantinou gupta garcia molina ullman 
query translation scheme rapid implementation wrappers 
dood pages singapore 
springer 
sahuguet 
building intelligent web applications lightweight wrappers 
data knowledge engineering 
seidl schwentick 
numerical document queries 
proc 
pods pages san diego california 
thatcher wright 
generalized finite automata theory application decision problem second order logic 
mathematical systems theory 
thomas 
languages automata logic 
rozenberg salomaa editors handbook formal languages volume chapter pages 
springer verlag 
world wide web consortium 
xml path language xpath recommendation 
www org tr xpath nov 
