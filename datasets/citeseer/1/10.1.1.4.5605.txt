architecture driven problem decomposition lucia jon hall michael jackson nuseibeh computing department open university walton hall milton keynes mk aa uk hall jackson nuseibeh open ac uk jackson problem frames provide means analysing decomposing problems 
emphasise world outside computer helping developer focus problem domain drifting inventing solutions 
intention delay consideration solution space understanding problem gained 
contrast early consideration solution architecture common practice software development 
software usually developed including existing components reusing existing frameworks architectures 
advantage shortening development time reuse increasing robustness system application tried tested solutions 
show views reconciled demonstrate choice architecture facilitate problem analysis decomposition subsequent recomposition problem frames framework 
particular introduce architectural frames combinations architectural styles problem frames illustrate applying problems literature 
problem frames classify software development problems 
structure analysis problem world located problem space describing effects system located achieve 
emphasis problems solutions problem frame approach uses understanding problem class allow problem owner specific domain knowledge drive requirements engineering process 
characteristics modern software development competition approach 
firstly modestly complex problems force problem owner solution engineer negotiation trade offs consideration details solution 
secondly practice development new systems rarely green field new software usually developed existing components existing frameworks architectures 
expertise developer specific domains subject reuse 
problem frames problem space observe competing views uses knowledge solution space software engineer domain knowledge second choice domain specific architectures architectural styles development patterns third reuse past development experience 
solution space knowledge inform problem analysis new software developments domain 
time market quality systems shortened reuse solution space structures experience 
main contribution architectural styles located solution space guide analysis problem space 
define new tool problem frame framework architectural frame aframe 
characterise combination problem class architecture class 
guide problem decomposition fundamental part analysis process solution recomposition fundamental part synthesis process 
approach validated application problems literature 
builds reported focused component development 
organised follows 
section provides background information motivation 
section introduces notion architectural frame aframe associated decomposition techniques 
sections introduce application examples literature 
section includes reflections section concludes 
background motivation problem frames increasingly popular framework requirements engineering 
identify characterise basic classes problems recur software development reuse requirements analysis 
class captured problem frame initial catalogue provided 
problem characterisation identification description relevant problem domains shared phenomena 
notation problem representation cataloguing documentation communication 
semantic foundation characterises requirements engineering allows construction discharge correctness arguments 
essential elements problem analysis process problem frames building descriptions domains phenomena requirements followed problem decomposition recomposition 
problem decomposition applications problem frame diagrams process reminiscent analysis patterns leading grounded instances 
result instantiation sub problem diagram analysed decomposed form admits solution 
problem recomposition combines sub problem solutions ensuring destructive interference created 
recognising conceptual clarity semantic richness problem frames framework acknowledge certain criticisms raised approach 
firstly green field development process assumed problem analysis solution space structures existing components architectural styles odds current software development practice 
machine assumed general purpose computer essentially turing machine development ab initio 
secondly problem frames rely expertise practitioners understand decompositions subsequent recomposition problem constituent subproblems appropriate lead solution 
expertise assumed particular form encoded small set generic heuristics decomposition guidance 
thirdly problem frames fixed descriptions problem domain artefacts phenomena 
real life problems stay way necessary development skill tracking changing problems 
problem frames part mainstream software development concerns addressed satisfactorily 
address criticisms leaving third strands see 
particular show solution structures case architectural styles aid problem analysis problem decomposition solution synthesis recomposition 
happen required described recognise role solution structures problem space notate suitably develop problem frame analysis decomposition recomposition techniques exploit annotation 
reflects problem domain problem frames important including 
previous authors shown techniques components available looked integrating problem frames component development 
relate criticisms limitations original problem frame framework 
machine object design considered unstructured general purpose computing device little specific problem decomposition guidance little specific solution recomposition guidance 
address limitations 
structuring problem problem domains associated requirements subject considerable years :10.1.1.17.6363:10.1.1.18.1528
similarly structuring solution domain investigated thoroughly 
relationship requirements architectures object attention approaches reported literature explicitly focused problem decomposition goal 
perry suggested intermediate descriptions requirements architecture call architectural prescriptions describe mappings aspects requirements architectural description 
software product lines system families focused identifying core requirements identified process requirements prioritisation linking core architectures identified examining stability various architectural attributes time 
examined relationship certain classes requirements corresponding dynamic architectures enable requirements engineers monitor running systems compliance requirements 
explore relationships software requirements architectures propose approach reconciling mismatches requirements terminology concepts architectures 
introducing architectural frames introduce notion architectural frame aframe short new element problem frames framework 
intention provide practical tool sub problem decomposition recomposition allows problem frames practitioner separate address systematic fashion concerns arising intertwining problems solutions 
rationale recognition solution structures usefully employed inform problem analysis 
aframe captures combination class problems represented problem frame class solution structures represented architectural styles 
notationally aframe shares problem frame diagram corresponding problem class augmented annotation machine domain records intention producing problem solution particular architectural style illustrate aframe diagrams sections 
architectural styles characterise software architecture classes terms architecture element types topology patterns data control elements 
characterisation architectural styles problem frames framework entails ways representing architectural elements impact problem description 
means representing generalised topologies binding domains phenomena 
achieved decomposition templates integral part aframe definition 
decomposition templates capture standard systematic way decomposing problem sub problems complement classical problem frames decomposition providing guidance decomposition rules 
notationally frame diagrams augmented cases indication domain multiplicity illustrate notation sections 
essential step problem analysis addressing recomposition concerns sub problem decomposition analysis completed 
simplify recomposition step providing indication sub problems fit frame concern problem class distributes sub problems 
frame concern addressed recomposition due fact argument motivated problem independently solution structure solution problem 
left task discharging frame concern properties solved sub problems 
pipe filter aframe machinery reflecting architectural styles problem domain cope complexity 
pipes filters style familiar provide convenient vehicle 
develop realistic useful aframe model view controller mvc style 
pipe filter architectural style sees system series filters transformations input data 
data enter system flow components time reach final destination 
filters connected pipes transfer data 
common topology architectures style consider section linear pipeline filter precisely input pipe source output pipe sink 
see illustration 
pipe pipe pipe pipe pipe filter filter 
filter 
linear pipe filter benefits uses pipes filters known 
relate pipes filters problem frames pipes filters solve transformation problems transforming input output particular format applying certain rules process 
transformation problems captured problem frames transformation frame 
frame diagram shown 
correctness argument 
please refer definitive details form correctness arguments 
transform machine tm inputs outputs io relation 
transformation frame diagram linear pipe filter transformation aframe represents class transformation problems solution provided pipe filter architectural style 
components aframe aframe diagram annotated problem frame diagram simplicity restrict linear pipe filter 
specification machine specification domain properties inputs outputs domain properties requirement io relation requirement requirement traversing input domain sequence 
simultaneously traversing output domain sequence 
finding values input domain structured 
creating values output domain structured 
machine ensures input domain values 
produce output domain values 
satisfy io relation 

transformation frame concern shown collection decomposition templates shown correctness argument determine correct recomposition shown 
transform machine pf tm inputs outputs io relation 
pipe filter transformation aframe aframe diagram records decision pipe filter style 
pipe filter transformation aframe aframe diagram annotated transformation frame 
annotation way problem domain annotations indicates domain satisfy constraints case instance pipe filter architectural style 
decomposition templates pipe filter transformation aframe shown identify sub problems needing consideration pipe filter architectural style chosen input machine output machine scheduler filter im om input pipe pipe output filter input output sub problems sc sc sc input machine pipe pipe transformation sub problem output machine scheduling sub problem input stream output fair schedule io relation 
decomposition templates pipe filter transformation aframe lution architecture input output sub problems filter solution data streamed filters pipes 
input output sub problem addresses problem converting data suitable formats 
indexing pipe domains provides linear topology 
designed domains indicated single vertical bar pipe domains reside solution machine may data structures explicitly specified solve input output problem 
transformation sub problem essence transformation problem stripped considerations 
scheduling sub problem problem space assumptions hard ware architecture 
means part problem scheduling filter transformations sub problem specify requirements fair scheduling machine components 
sub problems provide decomposition guidance 
instantiation aframe may require instance template applied problem 
instance typical pipe filter solution applications filter template needed 
consideration filter may require separate instance transformation sub problem 
linear pipe filter architecture enforced indexing filters pipes 
scheduler specification specification input filter 
filter output specification pipe pipe 
pipe domain properties input output domain properties requirement io relation requirement 
pipe filter recomposition requirement appropriate filters synthesis step solutions sub problems addresses transformation problem relationship sub problem machines considered terms shared phenomena 
topology recomposition informed architectural style influences form resulting frame concern 
topology aframe illustrated figures 
correctness argument derived transformation frame figures addition step knowing transformations occur way 
new frame concern requires appropriate traversal input output domains exists completed composition individual filters solve sub problems compose produce original transformation 
part discharged detail specifications solutions input sub problem appropriate description pipes 
note annotate filter domain star indicate may filters share phenomena scheduler 
second part discharged requirement fairness scheduling sub problem prevents machine starved failing traverse domains 
third part discharged appropriate design choice exist filter components 
addition general pipe filter architecture deadlock filters prevent chosen traversal completed 
care taken show sub problem solutions deadlock free 
course choosing linear pipeline done avoid concerns 
general case done correctness argument sub problem solutions appropriate architectural constraints 
consider simple known transformation problem literature keywords context problem 
problem produce keywords sequence lines indexed context 
show application linear pipe filter transformation lead developer classical solution problem instance highlighting assumptions needed reach solution 
non trivial application linear pipe filter solution problem produces filter sub problems leading sub problem decomposition shown figures filters sub problems input output subproblems 
instantiated scheduling sub problem benefit approach sub problems generic solutions scheduling highlighted require analysis 
filter sub problems correctness argument know require filters composition transformation 
designed reused course representatives architectural styles remove need creativity application style 
completeness example assumed developer available box filters reuse including circular shift filter cs sort filter sort reason transformation equal cs transformation followed sort transformation 
removes need problem analysis 
figures assume phenomena chosen correctness argument discharged 
particular input output text files text lines characters pipes capacity contain result intermediate transformations 
cs filter sort filter csf sf pipe pipe pipe pipe circular shifts rules sort rules 
filters sub problems pipe filter transformation aframe input machine output machine im om input pipe pipe output input output file line char file line char 
input output subproblems pipe filter transformation aframe mvc aframe section consider second aframe resulting combination control problems mvc solution architecture 
mvc short model view controller see way structuring software solution parts model view controller separate handle concerns related respectively modelling domain interest visual feedback user user input 
controller interprets user inputs maps commands model effect appropriate change 
model manages data elements responds queries state responds instructions change state 
view responsible feedback model state user 
standard communication patterns observer pattern apply mvc parts 
consider class control problems feedback operator captured user commanded behaviour frame 
precisely problem building machine accept user commands impose control part physical world accordingly provide suitable feedback user user commanded behaviour frame illustrated 
operation machine om cd om controlled domain user required behaviour feedback 
user commanded behaviour frame frame concern user commanded behaviour frame 
notice argument parts satisfying required behaviour domain providing suitable feedback user 
combining mvc user commanded behaviour frame obtain aframe represents class user commanded behaviour problems feedback mvc solution provided 
intention mvc solution space recorded annotation machine illustrated 
guidance decomposition form decomposition templates applied obtain subproblem diagrams 
decomposition templates mvc aframe 
seen original problem decomposable sub problems machine domains view controller machines mvc sense 
model domain introduced represents faithful abstraction domain controlled 
designed domain domain designed introduces subclass frame commanded behaviour frame require user receive feedback 

specification operation machine 
specification controlled domain user 
requirement 
domain properties 
requirement required behaviour feedback 
requirement choice commands current state user issues command may may sensible 
sensible viable machine cause events 
resulting state behaviour 
satisfies requirement 
machine relate user 
satisfying requirement case 

frame concern user commanded behaviour frame faithful representation domain interest reside inside solution machine resulting subproblems building view machine display model representation state controlled domain building controller machine acts model pass commands controlled domain 
problem frames terms model acts connection domain real world domain presentation control subsystems 
recomposition diagram aframe correctness argument 
example consider example user commanded behaviour problem derived reported 
computer system required control safe efficient operation catalyst unit chemical reactor 
system allow operator issue commands activating deactivating catalyst unit monitor outputs 
application mvc aframe mvc aframe user commanded frame defined 
includes third sub problem template establishing equivalence model complex controlled domain 
operation machine mvc om cd om controlled domain user required behaviour feedback 
mvc annotation user commanded behaviour frame controller view mo mo vi model model cd user user controlled domain controller sub problem cd controlled domain view sub problem required behaviour feedback 
decomposition templates mvc aframe problem results decomposition 
possible description interaction rules follows 
machine allow user control catalyst constraints 
catalyst status faithful representation state catalyst 
initial state catalyst catalyst closed 
possible user commands open catalyst close catalyst 
allowed state transitions represented 
discussion see strengths 
suggest problem need restructured fit particular solution form instance mvc case model catalyst needs model 
specification view controlled domain controller user 
specification 
requirement 
domain properties 
requirement required behaviour feedback 
requirement choice commands current state user issues command may may sensible 
sensible viable machine model cause events 
faithful model results state behaviour 
satisfies requirement 
faithful model machine relate user 
satisfying requirement case 

correctness argument mvc recomposition produced 
begins address green site criticism mentioned previously 
second help solution synthesis guiding recomposition subproblem solutions solution original problem 
recomposition facilitated knowledge encoded links architectural elements exploited aframe decomposition 
begins address previously mentioned need expertise criticism 
deriving decomposition recomposition guidance architectural styles assume architectures components offer extend greatly usefulness problem frame framework 
expect return investment time encode architectural artefacts promise problem frames richness architectures 
problem frames unreasonable assumptions machines humans instance substitute creativity 
constrain design process unreasonably provide general decomposition guidance second guess choices properly part design implementation 
addition aframe annotated machine domain controller view mo mo vi model catalyst model ca user ca user catalyst catalyst behaviour feedback catalyst status open catalyst close catalyst open closed open catalyst close catalyst open closed 
mvc decomposition user commanded behaviour sub problem catalyst closed open catalyst catalyst closed waiting open waiting closed catalyst open close catalyst catalyst open 
state machine model catalyst gether fixed number sub problem templates 
complexity aframe constant 
appropriate problem class decomposition guidance aframe offers scales complex problems class 
addition seen support reuse artefacts designs templates identify sub problem classes generated sub problems motivated existing solution space structures correspond existing solution space artefacts worst case produced sub problems closer solution recomposition architecture basis discharge correctness argument 
shown solution structures guide problem decomposition 
specifically addresses limitations problem frames providing way interpreting existing solution structures problem frames framework 
note systematic general say providing ad hoc guidance decomposition recomposition 
believe translation existing architectural styles problem domain bring related development expertise 
available strengthen promise problem frames framework 
defined corresponding filter mvc architectural styles applied transformation control problems respectively applied problems literature produce detailed sub problem decompositions 
discussed properties sub problem solutions contribute recomposition discharge frame concern 
argued problem frames framework addresses criticisms problem frames 
doing brought benefits problem focus closer mainstream software development 
extend approach directions 
firstly scope widened include generic software architectures realistic applications 
practically relevant approach demonstrated useful usable 
measure usefulness usability developed approach validated empirically limited validation offered 
secondly relation provided architectural analysis techniques problem space traditional trade analysis techniques solution space need exploring particular focus nonfunctional requirements emergent non functional characteristics candidate designs 
implications approach terms analysis synthesis processes need considering 
noted literature see design software process iterates problem solution spaces 
detailed single iteration problem space solution space 
iterations possible considering products problem decomposition 
case major issue recomposition solutions derived different architectures produce solution original problem number recomposition concerns need investigation 
acknowledge kind support colleagues especially charles robin department computing open university 
due anonymous referees suggestions greatly improved 
bass clements kazman software architecture practice sei series software engineering addison wesley 
berry kazman wieringa eds proceedings second international workshop software requirements architectures straw portland usa 
perry transforming goal oriented requirement specifications architectural prescriptions 

brier hall problem frames socio technical systems predictability change 
castro kramer eds proceedings international workshop software requirements architectures straw toronto canada 
daniels uml components simple process specifying component software addison wesley 
chung nixon yu mylopoulos nonfunctional requirements software engineering kluwer academic publishers 
clements kazman klein evaluating software architectures methods case studies sei series software engineering addison wesley 
cox hall eds proceedings st international workshop advances applications problem frames icse workshop 
silva requirements closing gap domain computing knowledge proceedings sci vol 
ii information systems development 
souza wills objects components frameworks uml catalysis approach addison wesley 
fowler analysis patterns addison wesley 
gamma helm johnson vlissides design patterns addison wesley 
medvidovic reconciling software requirements architectures cbsp approach proceedings th international symposium requirements engineering re pp ieee cs press 
gunter gunter jackson zave model requirements specifications ieee software 
hall jackson nuseibeh relating software requirements architectures problem frames ieee proceedings re 
hall model requirements engineering ieee proceedings re 
hall problem frames socio technical systems requirements engineering sociotechnical systems mate silva eds idea group 
hall semantics problem frames open university faculty mathematics computing research report 
hall silva 
requirements framework analysis socio technical system behaviour 
procedings th international workshop requirements engineering foundations software quality pp 

heitmeyer jeffords labaw automated consistency checking requirements specifications acm transactions software engineering methodology 
parnas shore software requirements aircraft tr naval research lab washington dc 
jackson software requirements specifications lexicon practice principles prejudices addison wesley 
jackson problem frames acm press books addison wesley 
klein kazman attribute architectural styles technical report cmu sei tr esc tr october 
klein kazman bass carriere barbacci lipson attribute architectural styles proceedings working ifip conference software architectures san antonio tx february 
practical software requirements manual content style manning publications 
letier van lamsweerde agent tactics goal oriented requirements elaboration proceedings th international conference software engineering acm press may 
leveson turner investigation accidents computer vol 
pp 

nuseibeh weaving requirements architecture ieee computer march 
parnas criteria decomposing systems modules communications acm december 
shaw garlan software architecture prentice hall 
parnas madey functional documentation computer systems science computer programming oct 
robertson robertson mastering requirements process addison wesley 
shaw garlan software architecture perspectives emerging discipline prentice hall 
sutcliffe domain theory patterns knowledge software reuse lawrence erlbaum associates 
van lamsweerde goal oriented requirements engineering guided tour proceedings th international symposium requirements engineering re pp ieee cs press 
weiss lai software product line engineering family software development process addison wesley 
residual requirements architectural residues proceedings th international symposium requirements engineering re toronto canada pp ieee cs press 
zave architecture requirements success story 
