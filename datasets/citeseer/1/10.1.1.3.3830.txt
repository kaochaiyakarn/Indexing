clique transparent peer peer collaborative file sharing system bruno richard mac denis hp laboratories grenoble hpl october th mail bruno richard hp com mac hp com denis hp com peer peer groupware file system replication optimistic reconciliation clique hp labs grenoble project 
goal develop novel peer peer server distributed file system optimistic replication algorithms transparently integrates users native file systems 
properties clique system epidemic replication lost updates consistency model conflict management disconnected operation replica convergence 
properties ensure updates done peer group lost converge group member machines 
system adapted highly disconnected environments network partitions variable join leave rates 
adverse connectivity conditions time assuming intermittent point point connectivity peer peer group local file system view node converges consistent global view 
reconciliation protocol stateless notion group membership order achieve linear worstcase scalability order number peers network 
lower layer protocol developed enables communications advantage ip multicast augmented network load management priority mechanism ensuring liveness higher layers protocol 
internal accession date approved external publication copyright hewlett packard clique transparent peer peer collaborative file sharing system bruno richard bruno richard hp com clique hp labs grenoble project 
goal develop novel peer peer server distributed file system optimistic replication algorithms transparently integrates users native file systems 
properties clique system epidemic replication lost updates consistency model conflict management disconnected operation replica convergence 
properties ensure updates done peer group lost converge group member machines 
system adapted highly disconnected environments network partitions variable join leave rates 
adverse connectivity conditions time assuming intermittent point point connectivity peer peer group local file system view node converges consistent global view 
reconciliation protocol stateless notion group order achieve linear worst case scalability order number peers network 
lower layer protocol developed enables communications advantage ip multicast augmented network load management priority mechanism ensuring liveness higher layers protocol 

problem statement development clique motivated perceived need new file sharing technology supports collaboration synchronization simple transparent reliable manner 
scenario case individuals range increasingly powerful computing devices highly varying connectivity patterns 
range desktop pcs permanent high bandwidth connection internet corporate lan firewall laptops cards offer connectivity medium speeds certain limited areas powerful pda devices low bandwidth sporadic connectivity 
user soon sort personal network intermittently connected clients mac mac hp com hp laboratories grenoble cedex france denis denis hp com increasingly differentiated storage processing capacity physical mobility network connectivity bandwidth 
user increasingly able access portfolio files wide range devices 
expect modifications files device automatically reflected devices geographically far apart connected physically separate networks 
want files immediately accessible devices operating disconnected mode 
ideally system scale arbitrary number nodes shared files versions 
scenario second case users want share portfolio files groups people devices 
users read access group files able modify add new files delete ones changes shared users group 
typically adam hp employee clique wish share files machines desktop pc connected hp intranet desktop pc team colleagues bill separated internet corporate firewall 
home network desktop pcs connected isp adsl link dynamically assigned ip addresses 
laptop works commuting home 
computer intermittently connected hp internal network home office network 
hours adam laptop connected hp intranet 
modifications files sub directories clique shared directory device example adam desktop pc automatically propagated background connected clique group case laptop colleagues desktop pcs 
working day adam may disconnect laptop continue shared files commutes 
connecting laptop home network modifications colleagues working day automatically reflected home network pcs modifications example wife diana files local network uploaded laptop may uploaded hp desktop pcs adam modifications adam reconnects hp intranet morning 
show epidemic style replication pattern guarantees nodes clique group eventually achieve consistent view file system state 
maximum performance mobile environment clique employs weakly consistent update policy place limits file modification permissions network access unavailable 
introduces likelihood update conflicts mult users independently modify particular file 
case mult distinct equally valid versions file temp exist system 
current groupware solutions blindly overwrite versions simplistic metric exa mple comparison version timestamps 
technique known thomas write rule disastrous consequences user perspective 
avoid clique uses lost updates reconciliation policy guarantees update node group eventually seen nodes group file modifications lost system 
motivations design motivations split categories ease support real world conditions additional desirable system properties 
ease transparency integration user file system 
nodes ideally local copy file system 
user perspective shared files appear different standard files available user hard disk 
file access latency times noticeably different ordinary files 
self organization full decentralization server required primary master repository particular files 
nodes files share administrative tasks setup 
stability moment files local file system valid usable state 
mutability files fully mutable nodes writeable 
platform independence files may shared disparate platforms 
support real world conditions tolerance network partitions 
long term network partitions feature today internet nat boxes firewalls wireless radio shadows short term partitions occur unreliable ip multicast 
certain highly mobile nodes adam laptop scenario intermittently move network islands act bridge network partitions 
resilience high tolerance node crashes dynamically changing group membership intrinsic characteristic ad hoc wireless networking environments 
disconnected operation files remain accessible disconnected network 
scalability ideally clique system scale nodes large file sizes gb large numbers files system 
additional desirable properties lost updates semantics prevents system losing modification done node 
worst case conflicting modifications saved alternate locations notifications sent appropriate node manual user correction 
update transfer peer receive updates issued peers original issuers directly reachable 
words wish achieve epidemic replication volume contents 
convergence updates occur system nodes reasonably interconnected partitions peer connectivity graph peers converge replicated state 

earlier collaboration tools clique belongs class applications called collaboration tools 
term refers software enhances communication collaboration ordination people enabling share information real time dynamic fashion 
earliest commercial effort area lotus notes personal information management utility today offers group messaging calendar scheduling facilities advanced security scalability features enterprise 
limited support update reconciliation 
client server model generally requires dedicated support staff currently offers support client mobility 
current market leader collaboration software groove workspace developed ray designer lotus notes system 
supports intuitive notion shared spaces users interact sharing editing documents real time 
groove leverages tight integration common microsoft office utilities support automatic resolution conflicting updates deployed lightweight peer peer mode 
centralized server required support advanced functionality offline operation security management support network partitioning 
collaborative interactions conducted windows groove application interface 
distributed file systems clique alternatively seen lightweight distributed file system 
system network file system developed sun microsystems allows hosts share files network pessimistic replication model 
single replica stored central server devices access file remotely required 
nfs unsuited mobile environments assumes permanent lan connections server client nodes 
server represents single point failure performance bottleneck system 
coda file system designed primary goal providing high availability shared information replacing single central server group optimistically replicated servers 
drawback client server approach individual nodes synchronize pair wise manner 
inter node communications pass central server 
clique pdas synchronize automatically coming range short range wireless link 
possible client server model 
roam file system tackle problem geographic mobility users 
roam node peer specific ward may overlap similar clique group 
wards elect ward master connected adaptive ring topology point topoint links 
turn ward masters form super ward 
nodes permitted issue updates moment 
updates propagated ward ward master achieve eventual reconciliation wards 
reconciliation mechanism standard version vector mechanism introduced parker ward required keep list peer nodes members ward potentially limits scalability system 
additionally mechanism peers dynamically discover join particular ward described 
trend emergence second generation fully peer peer platforms 
systems freenet chord pastry tapestry typically construct server overlay network application level implements distributed hash table 
file stored unique key produced exa mple hashing file contents 
node overlay stores files relating particular range key values 
system supports put get operations store retrieve files corresponding node 
overlay networks exhibit high levels fault tolerance generally scale logn 
number file systems cfs past oceanstore implemented top systems past cfs designed read archival publishing platforms 
oceanstore adds client server layer strong security scalability features order provide global storage repository distributed vast number untrusted network nodes 
systems support traditional file system semantics delete rename operations 
efforts focused replication policies gossiping anti entropy algorithms 
clique case took approach relying communication channel 
reconciliation optimistic replication systems allow replica contents diverge short term require method reconciling conflicting updates may generated concurrently different users 
reconciliation protocols categorized general classes state transfer operation transfer protocols 
state transfer protocols involve transfer current object state node object version objects 
case file system application clique objects transferred files 
entire file transferred node updated file nodes reconcile states overwriting local file copy newer version 
methods devised synchronize replicas thomas write rule timestamp algorithm version vectors version histories clique 
operation transfer protocols bayou ficus potentially offer significant gains bandwidth usage transferring semantic operations performed object previous reconciliation object 
objects assumed synchronized null replicas time node maintains ordered log operations performed particular object 
operations performed object application specific operation transfer protocols generally require knowledge semantics application performing update 
case distributed file system node system require consistent profile applications 
bayou framework asynchronous collaboration applications uses operation transfer reconciliation system 
replicable object associated primary node uniquely responsible assigning total ordering operations 
updates propagated epidemic fashion nodes 
primary nodes defined connected stable nodes function cluster servers non primary devices coda model 

approach terminology define terms remainder 
distinguish peer physical device clique installed agent particular instance clique application running separate java virtual machine peer 
launching clique agent user supplies pathname points root local clique volume 
time contents directory converge global view volume particular clique group nodes share communication channel 
single peer may simultaneously running number agents may consequently number clique groups 
file sub directory active volume replicated automatically currently active agents group 
version local file object represents state file contents expressed terms unique hash contents particular moment time time modification 
copy file corresponding particular version machine called replica file 
clique currently notion file ownership particular file replicas equal update replica weight update replica 
network partitions temporary longterm nature 
temporary partitions commonly caused crashes congestion network layer generally heal quickly wireless environment temporary partitions considered rule exception 
long term partitions hand heal 
may result physical disconnections network network management tools disrupt ip routing nat boxes firewalls 
epidemic replication protocol clique exploit physical device mobility allow convergence volume state long term partitions 
local agent system clique system implemented agents running peer group 
agent responsibilities implementing protocol communication peers group 
scanning local volume local modifications file addition deletion update renaming 
communicating performed modifications locally remotely peers group 
resolving update conflicts 
updating local storage device appropriate global modifications 
architecture clique relies group communication channel 
initial implementation ip mult transport layer 
channel protocol builds communication channel top layer see 
protocol tolerates types channel unreliability limited loss finite duplication reordering inherent ip multicast 
clique architecture additionally ip multicast effectively limits maximum packet size data bytes ethernet links 
handle limitations conveniently channel protocol masks message buffering chunking reconstruction low level packet duplication reordering 
layer responsible encryption network traffic 
flow control mechanism carrier sensing random back times implemented reduce probability broadcast collisions prevent saturation multicast channel 
replication layer sees lossy messaging channel ring communication client side buffering form input output queues 
responsible advertising available local files directories properties file transfer 
details 
reconciliation layer ensures proper file versions kept synchronization peers 
resolver layer handles conflicting updates different peers 
channel protocol lower level channel protocol optimistic variation stenning protocol 
stenning defined protocol high level message divided blocks 
blocks sent indefinitely message receipt received higher layer 
case blocks sent 
blocks lost transmission resend command implicitly issued higher layer 
processes considered emitter message recipient note multicast clique case may multiple entities receiving message 
receipt high level message identifier idm divides message equally sized chunks mn tagged sequence number high level identifier idm 
sends chunks sequence 
receives chunks places buffer corresponding message identifier idm correct insertion point indicated sequence number 
chunk mn contains message tag inform message complete 
chunks received received message exposed placing higher layer incoming message queue 
garbage collector process periodically executes detect corrupted incomplete messages 
received chunk particular message received new chunks seconds typically seconds message considered corrupted buffered chunks discarded 
replication protocol replication protocol properties individual nodes knowledge group 
messages broadcast group participant received currently reachable group members additional cost network bandwidth 
nodes required maintain tables current past neighbors removing significant barrier scalability inherent traditional distributed file systems 
order guarantee high tolerance lossy nature communication channel variable rate node disconnections higher layer messaging protocol entirely asynchronous 
nodes assumptions nodes may may respond message required message implosion avoided 
moment participants may disconnect group formal sign procedure 
broadcast nature inter node communications permits efficient network bandwidth 
file updated node random group member node initiate update transfer sequence 
currently connected nodes may take advantage broadcasts update contents local volume cost network bandwidth terms 
updates propagated system epidemic fashion nodes directly connected order achieve eventual synchronization 
particular allows updates jump islands nodes physically disconnected bridge node intermittently connected partitions global consistency achieved strictly local operations 
messaging protocol describes typical clique replica reconciliation process 
file updated node 
node periodically broadcasts journal message contains description version history files local volume 

nodes run version history check procedure locally independently establish version 
node broadcasts message node notes node request suppresses message 

node divides number chunks computes sha hash contents chunk 
broadcasts message lists chunk hash chunk id 
node issues sequence messages 

node issues sequence chunk messages containing chunk contents 
intelligent file transfer messaging protocol clique efficient transfer large files contents changed slightly chunks changed requested receiving node 
chunk sizes currently fixed expect network bandwidth gains achieved employing intelligent variable chunk size algorithm lbfs 
additionally rename operations treated create delete combination operation level agent establish comparison hash value file operation merely rename retrieve deleted file trash folder cost terms network bandwidth 
replica reconciliation synchronize object sites clique uses mechanism derived lightweight version comparison protocol reconcile 
relies knowledge past history file sites 
version file signature sha hash file contents local creation timestamp kept 
signature uniquely identifies file 
fa signature th version file seen site site knows list past versions file site knows history fa fa fa site knows history fb fb fb 
note necessary keep actual previous contents file merely history file signatures requires little space 
synchronize sends version history fb fb fb fb 
compare latest version signature fa latest version signature fb signatures equal files identical need synchronization 
signatures different check equality latest version past versions words compare fa element fb fb fb fb 
match fa fb means version file direct descendant latest version implies version may safely overwritten 
similar mechanism applies opposite order version needs refreshed 
comparisons fail means direct ancestral link versions update conflict detected 
deletion detection delete operations treated explicitly file reconciliation system 
see imagine scenario users set clique network synchronize volume contents 
subsequently disconnects network deletes file offline 
reconnection falsely establish new file volume initiate file transfer fact correct behavior delete copy avoid deletion operation recorded version history file new version hash value version history deleted file kept local journal long time see garbage collection 
allows update delete create delete conflicts detected triggering warning user 
garbage collection version history reconciliation algorithms traditionally suffer garbage collection problems 
stateless system clique nodes knowledge group membership establish moment successfully reconciled nodes group difficult detect version safely deleted node version history table 
clique applies pragmatic localized approach problem simply delete version local version history node days old 
potentially cause false positive conflicts detected nodes completely disconnected group days rejoin violate lost updates policy 
anticipate problems rarely seen real life scenarios value set sufficiently large value days 
conflict resolution shown analysis typical usage patterns write sharing conflicts occur seldom basis conflict file operations justifying optimistic approach 
kistler shows concurrent file sharing distributed environment rare file updates user previous update probability different users modifying file week 
shows worse figures confirms kistler main points 
number previous projects focused development automatic resolvers automatically handle conflicting updates particular file types 
instance cvs able resolve update con source code file provided changes lines code file 
generally shown re automatic resolvers reduce number unrecoverable conflicts orders magnitude typical environment 
clique project focus automatic resolution conflicting updates 
update conflict machines detected file simple timestamp comparison stored place new file created designated conflict directory containing older file contents 
notification pop dialog mail warning message sent user proceed manual resolution problem 
security clique security model currently straightforward surprisingly useful practice 
group candidates band mechanism obtain password group channel characteristics ip address port entry particular clique group 
group communications encrypted password 
users password full read write permissions files clique volume possible interpret group message potential attacker know password 
topological routing issues native communication channel clique ip multicast suffers limitations 
multicast disabled ip routers 
consequently extended clique messaging protocol allow communication machines members ip subnet 
designed specific extension clique uses udp transport layer 
udp toone communications channel routable permits communication machines separated routers possibly firewalls 
demonstrate udp link machines possible extend clique commu nity subnets 
note machine runs instances clique agent concurrently 
agents communicates multicast mode peers subnet communicates direct point point mode machine subnet 
roaming laptop intermittently connects subnet home subnet 
intermittent multiply connected machine possible machines different subnets direct ip routing capability machines members clique group 
topological capabilities extension show machines number subnets added clique group provided subnets linked routable links intermittent multiply connected machines form connected graph 
scalability described carrier sensing backoff algorithms channel protocol level 
combined randomized periodic message broadcasts node ensures network bandwidth remains constant regardless number agents clique group number file versions volume 
note individual peer proportionately reduced opportunity communicate group global convergence times function number agents group 

current status developed working prototype clique java 
abstraction offered language possible share files various architectures pdas windows linux pcs 
research done order refine optimal timer values channel protocol wh ich offer network load control memory cpu usage 
additional step forward improve file monitor 
component currently performs file examination periodically 
replace kernel level component react file system operations file creation modification move rename directly notify local clique agent 
reduce cpu load reactive user changes immediately detected periodically 
low level piece code break platform independency requirement 
envisage number additional features greatly enhance application functionality user perspective 
quota system implemented eliminate possibility overflowing maximum local storage capacity 
manual refresh option incorporated user guarantee local volume contains modified files available currently connected peers 
case update conflict current resolver able keep copies conflicting versions file report conflict user 
useful extension clique port automatic resolver platforms described earlier architecture order limit number conflict instances require user intervention 
security model extended provide file ownership semantics access control lists files goal relax nodes files criterion replace mechanisms setting read write rights files 
allow system prevent inadvertent deletions introduce level privacy control 
repudiation group members security issue handle current version clique 
golding shows decentralized group management scalable system difficult may loosen scalability constraints order provide higher level security 

described original clique peer topeer replicated file system 
essentially clique links nodes group facilitates file directory sharing group members 
offers number interesting benefits user level 
include automatic transparent operation adaptation realworld conditions varying network capabilities support disconnections epidemic replication asynchronous messaging 
project satisfies number important technical constraints global convergence system lost update policy 
clique dis tributed algorithm communication paradigm advantage ip multicast transport layer 
describes prior art field designed clique system agent architecture distributed algorithms 
protocols developed session providing scalability terms number peers group preserving network usage processing memory overhead necessary system operate 
initial prototype implementation developed demonstrates approach taken practical 

thomas majority consensus approach concurrency control multiple copy databases acm trans 
database sy stems tods 
agrawal el abbadi epidemic algorithms replicated databases proceedings pods pp 
cart ferri copies convergence distributed real time environment proceedings acm conference computer supported cooperative 
greif replicated document management group communication system proceedings second conference computer supported cooperative 
rfc nfs network file system protocol specification www faqs org rfcs rfc html rfc nfs version protocol specification 
www faqs org rfcs rfc html kistler satyanarayanan coda highly available file system distributed workstation environment 
ieee transactions computers april 
david ratner 
roam scalable replication system mobile distributed computing phd thesis uc los angeles 
ucla csd 
parker popek stoughton walker walton chow edwards kline detection mutual inconsistency distributed systems ieee transactions software engineering 
clarke sandberg wiley hong freenet distributed anonymous information storage retrieval sy stem designing privacy enhancing technologies international workshop design issues anonymity unobservability lncs springer new york 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications proceedings acm sigcomm san diego 
rowstron druschel pastry scalable distributed object location routing large scale peer peer systems proceedings ifip acm middleware heidelberg germany 
zhao kubiatowicz joseph tapestry infrastructure fault resilient wide area location routing technical report ucb csd berkeley 
ratnasamy francis handley karp shenker scalable content addressable network proceedings acm sigcomm san diego 
si application layer mult delaunay triangulation overlays university virginia department computer science technical report cs 
dabek kaashoek wide area operative storage cfs proceedings th acm symposium operating systems principles sosp 
rowstron druschel storage management caching past large scale persistent peer peer storage utility proceedings acm symposium operating sy stems principles sosp 
kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture global scale persistent storage proceedings ninth international conference architectural support programming languages operating systems asplos 
kantor rfc network news transfer protocol info internet isi edu notes rfc files rfc txt demers greene hauser irish larson epidemic algorithms replicated database maintenance th symposium distributed computing podc vancouver canada 
lin marzullo directional gossip gossip wide area network rd european dependable computing conference prague czech pp 

saito bershad levy manageability availability performance porcupine highly scalable mail service th symposium operating system principles sosp kiawah island sc usa 
gray neil shasha dangers replication solution international conference management data montr canada 
saito shapiro 
replication optimistic approaches 
hp labs technical report hpl 
replicated document management group communication system second ieee conference computer supported cooperative 
portland oregon 
howard reconcile user guide technical report tr mitsubishi electric research laboratory 
edwards mynatt petersen spreitzer terry theimer designing implementing asynchronous collaborative applications bayou proc 
acm symp 
user interface software technology pages 

kermarrec rowstron shapiro druschel approach reconciliation diverging replicas th symposium principles distributed computing podc newport ri usa 
page jr guy heidemann ratner reiher goel kuenning popek perspectives optimistically replicated peer peer filing software practice experience pp 

stenning data transfer protocol computer networks 
wang reiher bagrodia simulation evaluation optimistic replicated filing mobile environments proceedings international performance computing communications scottsdale az usa pp 
kistler satyanarayanan disconnected operation coda file system acm transactions computer sy stems 
experience connected disconnected operation portable notebook computers distributed systems proceedings workshop mobile computing systems applications 
version management cvs www org docs manual 
reiher heidemann ratner skinner popek resolving file conflicts ficus file system 
proc 
summer usenix conference pp 

golding weak consistency group communication membership ph 
thesis university california santa cruz technical report 
crl 
reiher heidemann ratner skinner popek resolving file conflicts ficus file system 
proc 
summer usenix conference pp 

muthitacharoen chen mazi res network file system proceedings 
th symposium operating systems principles banff canada 
