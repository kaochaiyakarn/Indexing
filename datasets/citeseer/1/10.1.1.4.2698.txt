theoretical informatics applications set publisher informatique applications coproducts ideal monads neil ghani uustalu 
question combine monads arises naturally areas interest focusing coproduct monads 
general coproduct arbitrary monads exist 
general construction kelly generality reflected complexity limits applicability construction 
research hyland plotkin power looking specific situations simpler constructions available 
uses fixed points give simple construction coproduct ideal monads 
mathematics subject classification 


monads fundamental concept category theory 
applications give categorical account universal algebra remained central development category theory 
significant applications computer science provide model syntax covering algebraic theories higher order syntax non wellfounded syntax term algebra construction substitution variables taken primitive ii useful abstraction computational ects permitting uniform treatment diverse features impure programming languages stateful computations exceptions iii semantic framework modularity interaction di erent components complex system modelled interleaving representing monads 
applications want combine monads 
case monads models syntax interested combining dept math 
comp 
sci university leicester university road leicester le rh uk mail ng mcs le ac uk 
inst 
cybernetics technical university tee ee estonia mail cs ee 
edp sciences title set publisher di erent theories practiced area algebraic specification 
functional programming combine state monad exceptions monad model program stateful computations may raise exceptions 
semantics modularity systems term rewriting systems modelled monads tr ts reason combined system representing monad tr express tr terms tr ts 
variety di erent methods combine monads proposed notably distributive laws monad transformers 
useful specific situations theories cover situations furthermore comment ad hoc 
approaches observe monads functors carrying extra structure 
obvious way compose monad monad functorial composition sr sr monad general see distributive laws monad transformers attempt sr monad 
alternative point view just functors objects functor category monads objects category monads monad morphisms 
canonical way putting objects take coproduct 
case coproduct arbitrary monads exists mild conditions general construction coproducts colimits monads kelly 
generality construction reflected complexity experienced category theorists certainly limits applicability 
consequently research focussed providing alternative constructions restricting special cases significantly simpler easier apply practice 
particular reduce coproduct monads formulae involving fixed point constructions functorial operations composition coproduct 
section done coproduct free monads proven hyland plotkin power coproduct free monad monad 
comments relating hyland plotkin power section concerning 
monads including important examples free limits applicability results 
particular arose research modularity non wellfounded syntax ii higher order syntax 
want study coproducts free completely iterative monads model non wellfounded terms study monads model calculi variable binding calculus typically arise fixed points higher order functors 
results apply coproducts monads monads free 
understand coproduct monads return central intuition layers semantic proofs modularity term rewriting 
coproduct construction attempts interleave layers general layers collapse causes mathematical di culties necessitating complexities kelly constructions 
examples interest including layers title set publisher collapse 
ideal monads introduced study guarded recursion provide exactly right mathematical structure capture idea layers collapsing result reduction coproduct ideal monads fixed point formulae 
accordingly general thrust avoid commitment specific semantic structure finitary monads lfp categories existence various initial algebras preconditions constructions 
summarise field modularity syntax computational phenomena highly promising held back lack simple mechanisms computing coproducts naturally arising monads 
provides just right kind result spur research area 
structured follows 
section recall basic results monads rest 
section introduces ideal monads contains main results section applies question modularity syntax higher order syntax 
finish section concluding remarks directions research 

monads coproducts layers monads originally arose category theory models term algebras algebraic theories 
monads provide intuitions construct coproduct monads 
standard material refer reader general texts details 

monads term algebras term algebras built signatures defined follows definition 
single sorted signature consists function set 
set ary operators defined 
definition 
signature set variables term algebra set defined inductively rules 

quotes distinguish variable term seen introducing layer information terms 
shall see constructing coproduct monads layer structure central concept 
categorically endofunctor set constructed ways 
start defining associated polynomial endofunctor set set set defined carrier initial algebra fixed point endofunctor set title set publisher equivalently defined non pointwise fashion carrier id initial algebra endofunctor id set set 
way set variables function sending variable associated term 
lastly substitution takes terms built terms flattens described function 
operations natural pieces data construction term algebra set variables embedding variables terms operation substitution axiomatised concept monad 
definition monads 
monad category endofunctor natural transformations id called unit tt called multiplication monad diagrams known post unit pre unit associativity multiplication laws commute 
tt tt ttt mt tm tt tt write multiplication usual reserve fixed points 
monad fully specified data customary refer simply clear monad just functor meant data clear context convention follow 
suggested term algebra functor underlies monad signature 
fact slightly general statement abstracting set category polynomial endofunctor set determined signature endofunctor proposition 
coproducts 
free algebra functor tf id endofunctor category defined initial algebra exists tf underlying functor monad 
lemma typical reasoning properties initial algebras 
general shall assume existence fixed points speak avoid commitment specific semantic structure guarantees existence fixed points 
course cases restricting endofunctors categories colimits su ces guarantee existence fixed points require 
monads model number important structures computer science sorted algebraic theories non wellfounded syntax term graphs calculi variable binders term rewriting systems computational monads state computations exceptions continuations title set publisher applications involve base categories set desire uniform treatment underpins monadic axiomatisation 
order talk coproducts monads course define category monads 
definition monad morphisms 
monads monad morphism natural transformation preserving unit multiplication sense commutation diagrams id tt hh hh monads category monad morphisms form category mon 
observation monad signature capture inductive nature term algebra construction 
proceed addressing point giving proper characterization term algebra construction free monad 
general free monads exist endofunctors powerset functor set define free monad functor universal arrows 
definition free monads 
free monad endofunctor universal arrow forgetful functor mon monad natural transformation monad natural transformation unique monad morphism diagram commutes 
observation standard knowledge 
proposition 
endofunctor category functor tf id defined initial algebra exists monad structure tf free monad classic special case term algebras signature 
term algebra functor just monad free monad just algebra functor containing variables identity functor closed substitution 
title set publisher 
coproducts monads turn coproducts monads 
coproduct monads mean course coproduct objects category monads intuitively monad containing disjoint manner 
write coproduct monads reserve functorial coproduct 
result coproducts monads concerns free monads 
proposition coproduct free monads 
tf tg free monads 
free monad tf exists coproduct tf tg proof 
universal property coproduct follows directly universal properties tf tg hyland plotkin power construction coproduct free monad arbitrary monad 
proposition coproduct free monad monad 
tf free monad monad 
free monad tfs exists underlying functor coproduct tf functorial expression rewritten equivalent form appears id fs fixed point construction free monad id fs id folklore rolling lemma 
needed equations hold existence various initial algebras 
coproduct free monads signatures gives intuitions construct coproducts arbitrary monads 
signatures corresponding term algebra monads seen coproduct calculate terms built disjoint union signatures 
terms inherent notion layer term variable decomposes term strictly smaller subterms head symbols respectively 
suggests build underlying functor coproduct successively applying underlying functors see discussion correction formula give 
summation element thought having top layer followed layer followed layer 
set variables functorial monadic level talk layers 
general monad regard abstractly layer examples layers terms rewrites title set publisher computations 
monads seen abstracting nature layer provide calculus manipulating layers types layers trivial layer type collapsing layers type taken primitive concepts 
shown equation coproduct intuitively consists finite interleavings layers summands 
note natural transformation essentially puts trivial layer adjacent layers 
course terms image really counted having layer contain right hand side coproduct formula really generally really want able talk non trivial layers part monad image unit 
exactly motivation focus ideal monads 

ideal monads coproducts section devoted ideal monads large variety monads covers familiar types monads capturing notions syntax notions computation fixed point construction calculating coproduct ideal monads 
ideal monads introduced exactly reason separate variable non variable parts application mind guarded recursion 
fact separate think may applicable situations 

ideal monads ideal monads monads image unit separated rest monad 
definition ideal monads 
ideal monad category monad endofunctor natural transformation coproduct id unit left injection inl id square inr id tt inr id commutes equivalent requiring inr id 
see ideal monad fully specified data endofunctor natural transformation title set publisher yields ideal monad provided conditions ensure pre unit associative post unit automatic 
just frequently refer monad simply agree refer ideal monad id leave restricted form multiplication implicit possible 
monad morphism source ideal monad id action id forced preservation unit requirement form natural transformation monad morphism condition guarantees preserves multiplication 
syntax motivated examples ideal monads include free monads free completely iterative monads monads arising fixed points higher order endofunctors example free monads 
recall free monad tf endofunctor category tf id id fixed point exists covers term algebra generated signature 
straightforward check monad ideal decomposition monad sum straightforward check multiplication restricts appropriately 
informally know term variable non variable operator application 
example free completely iterative monads 
ideal monad id category completely iterative morphism exists unique morphism diagram inr id commutes 
concept introduced study situation guarded system recursive equations unique solution 
free ideal monads completely iterative monad endofunctor id id ft greatest fixed point exists complete continuous 
set order signature collects non wellfounded possibly infinite terms leaf labelled trees 
switching arbitrary guarded equation systems finitary finitely equations right hand sides finite gets wider subclass ideal monads iterative monads 
free iterative monad induced firstorder signature algebra rational terms ideal 
rational terms non wellfounded terms finite number distinct subterms 
title set publisher example calculus 
language untyped calculus la de bruijn free variables identified positions context names described endofunctor id higherorder functors id id id denoting terminal object ka denoting constant functor returning 
certainly defined monad critical test case set conditions generalise results categories prohibitive 
isomorphism id second summand ll corresponds application terms third summand id abstraction terms raw abstraction formed wrt 
context body formed wrt 
extension extra variable corresponds bound variable abstraction 
monad free ideal 
example explicit substitutions 
way defined language calculus fixed point functor category define language applications explicit substitutions 
identification expressions equal certain notion equivalence explicit substitutions endofunctor id apparent fact ee lan id term bound variables map sending bound variables terms 
mild conditions functor monad follows result 
detailed discussion analysis languages explicit substitutions see 
nice examples ideal monads computational monads 
free monads exceptions interactive output interactive input monads 
examples think programming language semantics assume set cpo 
example exceptions 
computations raise exceptions type modelled monad underlying functor id ke unit inl id ke multiplication id ke inr id ke computation value exception 
monad ideal free monad functor ke id ke id ke 
example interactive output 
computations output tokens type modelled monad underlying functor id list list id 
computations pairs value list unit pairs value empty list multiplication takes value paired list list returns paired concatenation lists 
monad ideal free functor ko id list id ko 
example non non determinism 
non deterministic computations guaranteed deadlock modelled non empty lists values 
corresponding functor nelist idlist id id id carries monad structure singleton formation flattening non empty list non empty lists non empty list unit multiplication 
title set publisher monad ideal singleton lists playing role variables length lists playing role non variable terms multiplication restricts properly flattening length list non empty lists gives length list free 
note lists defined list id nelist give similar monad 
monad models non determinism possible deadlocks ideal despite clear separation variables singleton lists non variable terms empty list length atleast lists 
reason multiplication restrict required ideal monad flattening length list consisting singleton empty list singleton 
example probabilistic choice 
computations probabilistic choice modelled non empty lists values paired rational numbers add list obviously obtainable nonempty lists values paired positive integers identifying equal 
monad structure corresponding functor monad ideal free 
examples course non empty finite multisets non empty lists preferred non empty lists definable fixed points provide informative notions computation non empty finite multisets 

coproducts ideal monads fixed point construction fundamental observation construction coproduct ideal monads id id category contain ii closed application consist alternating sequences ask solution equation system id id define equivalently point freely id id write id id structure maps associated idea id 
intuitively consists elements top layer non variable layer captured layers variables non variable layer henceforth assume exist example may require colimits preserve 
title set publisher theorem coproduct ideal monads 
id id ideal monads 
functors construction defined coproduct ideal monads id id exists underlying functor id 
proof 
construct candidate coproduct cospan category monads prove coproduct initial cospan 
construction candidate coproduct constructing candidate coproduct carrier verifying monad 
proceed constructing candidate injections checking monad morphisms 
construction candidate coproduct carrier defined candidate unit injection id inl id candidate multiplication tt id inr id unique mutual iteration pair natural transformations diagram id id id id commute 
denote composites id id id id id id id id id id unlabelled arrows trivial coproduct rearrangements resp 
title set publisher proof monad post unit law obeyed trivially candidate monad inr id inl id inr id inl see pre unit law met unique mutual iteration pair natural transformations diagrams id id id id id id id id commute 
witnessed commuting diagram id id id inl id id id id id crucial triangle commutes pre unit symmetric commuting diagram 
title set publisher case witnessed commuting diagram id id id id id id id id id bottom right square commutes construction symmetric commuting diagram 
combining observations get id inl id inr id inr id id 
verify associativity multiplication tt tt unique mutual iteration pair natural transformations diagrams id tt tt tt tt tt id id tt tt tt tt tt id commute 
title set publisher get commuting diagram id tt tt tt tt id id id id id rr id id id id id tt id id id id id symmetric diagram 
diagram shown upper half nd th quarters lower half commute construction closest bottom small square lower half commutes associativity get commuting diagram id tt tt id tt tt id tt tt id tt id symmetric diagram 
diagram bottom right square commutes construction putting pieces knowledge get mt inr inr inr inr inr id tm 
realize addition monad data form ideal monad 
construction candidate injections need monad morphisms play role injections 
propose choose title set publisher id inl id inr composites inl id inl id proof monad morphisms preservation unit obvious id inl inl id inl id 
prove preserves multiplication check commuting diagram id inl inl id id inl id id id id id id id inl id inl id id inl id bottom right square commutes construction basis obtain id inl inr inr inl inr inl inr id inl id ri 
preserves unit multiplication proved symmetrically 
proof coproduct turn proof really coproduct construction 
construction candidate mediating morphism monad monad morphisms induced unique title set publisher mutual iteration pair natural transformations diagrams id id id hh id id id hh commute 
claim show monad morphism mediating morphism unique 
proof monad morphism preservation unit trivial inl id show preserves multiplication unique mutual iteration pair natural transformations diagrams id hh id hh commute 
commuting diagram id id id id id id rh hh hh hhh hm hh hh symmetric diagram demonstrate 
diagram upper half commutes construction lower half nd th quarters commute construction middle third rd quarter commutes title set publisher preservation multiplication rightmost smallest square associativity get evident commuting diagram id id id hh hh id hh hh hhh hm hh hh symmetric diagram 
diagram shown nd half middle third commutes construction nd th quarters lower third commute pre unit resp 
associativity consequence inr id id hh th 
proof mediating morphism prove record commuting diagram inl inl id id id hh uses construction fact pre unit get id inl proof symmetric 
proof mediating morphism uniqueness capacity morphism mediating proved commuting diagram symmetric diagram show title set publisher mediator follows construction 
desired result immediate 
id id id id id id inr inl id id inl id id id inr ht hh top right square diagram commutes construction bottom right square preserving multiplication top triangle pre unit triangles middle reflects assumption intuitively uniqueness surprising mediating monad morphism equal variables monad morphisms preserve unit ii determined iii elements essentially multiplications preserved monad morphisms 
bekic lemma definition theorem rewritten simultaneous fixed point lemma id id id title set publisher rolling lemma step id id id id id id id id id id 
applications having disposal general construction coproduct ideal monads theorem apply example ideal monads especially free reach specific result coproduct free monad monad proposition 
turn presenting applications 
example coproduct free completely iterative monads 
know coproduct free monads tf id tg id tf id 
provoke conjecture coproduct free completely iterative monads id id id 
theorem tells get finite interleavings ft gt means infinite alternations coproduct 
intuitively fails coproduct large 
coproduct functor containing closed variables substitution 
produce functor need start allow infinite combinations substitution clearly allow substitution finite number times 
example binding operators added coproduct 
central theorem allows consider questions modularity higher order syntax 
example expect language lambda calculus id coproduct app id id app abs id id abs kind modularity holds order terms 
case deduced theorem coproduct consists finite interleavings app abs sadly excludes term xy body abstraction application application merely uses context outside abstraction terms st context forbidden 
reason terms xy constructible applications abstractions variables proper capture avoiding substitution needs naive substitution manufacture xy 
closer account phenomenon 
title set publisher example combining non non determinism probabilistic choice 
right way combine non determinism probabilistic choice long standing question programming language semantics cf 

notably example distributive law set nondeterminism monad probabilistic choice monad opposite direction theorem tells coproduct consists finite interleavings non trivial non determinism non trivial probabilistic choice think elements wellfounded trees leaves labelled values branching nodes branching factor outgoing nodes alternately unlabelled corresponding non determinism labelled rational numbers adding corresponding probabilistic choice 
datatype close form synchronization trees allows trivial branchings 
feel example applications shown encouraging concluded monads theorem especially relation non free monads relevant notions syntax computation 

central thesis monads model number important interesting syntactic computational phenomena ii understanding combine monads give information phenomena interact iii coproducts monads canonical mechanism combining monads 
current techniques calculating coproduct monads tend general su er resulting complexity specialised case su er non applicability number important situations 
addressed problem showing coproduct large number monads including research currently active reduced fixed point formulae involving functorial operations 
applicability results demonstrated section 
generally feel results contained just required spur research area modular syntax computation 
currently working 
firstly seen section manifestation form non modularity higher order syntax 
general principles modularity 
surely result highlights simply needs take coproduct monads di erent category 
second idea concerns modular proof theory 
clearly theorems cut elimination various simply typed calculi modular mathematical mechanism formally expressing fact 
viewing simply typed calculus monad category graphs cut elimination existence distributive law path functor 
give modular semantic proof claims referring plotkin private communication 
title set publisher cut elimination proving coproduct monads distributive laws distributive law cut elimination theorem 
worth finishing contrasting approach hyland plotkin power object study monads abstractions enriched lawvere theories combinators considered tensor product distributive combination 
certainly interested combinators plan investigate application due course 
monads really provide right level abstraction finer structure play question active research early definitive answer 
certainly merit argument monads really dependent operations equations defining modular rewriting key properties confluence layer structure easier state level monads say level presentations classifying categories 
view pragmatic results approach appropriate needs deeper fundamental results may change view 
authors referees john power insightful comments 
ghani research supported epsrc 
gr royal society london coalgebra recursion 
uustalu research supported estonian science foundation participation etaps possible travel estonian information technology foundation 
aczel infinite trees completely iterative theories coalgebraic view theor 
comp 
sci 

free iterative theories coalgebraic view math 
struct 
comp 
sci 

locally presentable accessible categories london math 
soc 
lect 
note series cambridge university press cambridge 
barr coequalizers free triples math 

barr wells toposes triples theories der mathematischen wissenschaften springer verlag berlin 
beck distributive laws seminar triples categorical homology theory eth edited eckmann lect 
notes math 
springer verlag berlin 
fiore plotkin turi 
syntax variable binding proc 
th ann 
ieee symp 
logic computer science lics trento july ieee cs press los alamitos ca 
ghani luth de power initial algebras math 
struct 
comp 
sci 

ghani luth de coalgebraic monads proc 
th 
coalgebraic methods computer science cmcs grenoble apr edited moss electr 
notes theor 
comp 
sci 
elsevier amsterdam 
title set publisher ghani uustalu explicit substitutions higher order syntax proc 
nd acm sigplan 
mechanized reasoning languages variable binding merlin uppsala aug edited honsell miculan acm press new york 
goguen categorical manifesto math 
struct 
comp 
sci 

hyland plotkin power combining computational ects commutativity sum proc 
ifip th world computer congress tc stream nd ifip int 
conf 
theoretical computer science tcs montreal aug edited montanari santoro ifip conf 
proc 
kluwer academic publishers dordrecht 
jones plotkin probabilistic powerdomain evaluations proc 
th ann 
ieee symp 
logic computer science lics pacific grove ca june ieee cs press washington dc 
jones duponcheel composing monads techn 
report rr dept comp 
sci yale univ 

kelly unified treatment transfinite constructions free algebras free monoids colimits associated sheaves bull 
australian mathematical society 
kelly power adjunctions equalizers presentations finitary monads pure applied algebra 
linton aspects equational categories proc 
conf 
categorical algebra la jolla ca june edited eilenberg harrison mac lane springer verlag berlin 
luth categorical term rewriting monads modularity phd thesis lab 
foundations comp 
sci univ edinburgh 
luth ghani monads modularity proc 
th int 

frontiers combining systems santa margherita ligure apr edited armando lect 
notes artif 
intell 
springer verlag berlin 
luth ghani monads modular term rewriting proc 
th int 
conf 
category theory computer science ctcs santa margherita ligure sept edited moggi rosolini lect 
notes comp 
sci 
springer verlag berlin 
manes algebraic theories graduate texts mathematics springer verlag berlin 
matthes uustalu substitution non wellfounded syntax variable binding proc 
th 
coalgebraic methods computer science cmcs warsaw apr edited electr 
notes theor 
comp 
sci 
elsevier amsterdam 
mislove nondeterminism probabilistic choice obeying laws proc 
int 
conf 
concurrency theory concur university park pa aug edited palamidessi lecture notes comp 
sci 
springer verlag berlin 
moggi computational lambda calculus monads proc 
th ann 
ieee symp 
logic computer science lics pacific grove ca june ieee cs press washington dc 
moggi view programming languages techn 
report ecs lfcs lab 
foundations comp 
sci univ edinburgh 
moss parametric corecursion theor 
comp 
sci 

continuous cones convexity powerdomain constructions phd thesis techn 
univ darmstadt 
powerdomain indexed valuations proc 
th ann 
ieee symp 
logic computer science lics copenhagen july ieee cs press los alamitos ca 
title set publisher communicated editor set publisher 
received october accepted february final version may 
