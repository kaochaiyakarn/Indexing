fast accurate bitstate verification spin peter panagiotis georgia institute technology college computing lab atlantic drive atlanta ga cc gatech edu 
bitstate hashing spin proved invaluable probabilistically detecting errors large models cases number omitted states higher spin allowed hash functions 
example adding just hash function reduce probability omitting states 
hash computation accounts overwhelming portion total execution cost bitstate verification spin adding additional independent hash functions slow process tremendously 
efficient ways computing multiple hash values despite sacrificing independence give virtually accuracy yield speed improvement hash function case compared current spin implementation 
key accurate bitstate hashing utilizing memory available 
current spin implementation limited mb allows power granularity mb mb 
mb mb reduce probability single omission chance demonstrates magnitude maximum granularity limitation 
modified spin utilize addressable amount memory number efficiently computed hash functions empirical results extensive experimentation comparing various configurations modified version original spin 
bitstate verification term model checking community refer explicit state model checking bloom filters 
explicit state model checkers holzmann spin great success variety domains including verification finite state concurrent systems cache coherence network protocols 
research model checking focused tackling state explosion problem linear increase number components leads exponential increase size resulting models 
state explosion particularly acute problem context explicit model checking memory requirements depend linearly size state space 
efficient explicit state techniques call storing set visited states core memory making representation visited set compact means larger models explored quickly 
resorting probabilistic methods storing visited set representation exceptionally compact enabling larger state spaces tackled efficiently 
drawback probabilistic methods course possibility omitting states errors 
bloom filter popular choice data structure compactly storing sets :10.1.1.127.9672
main parameter tuning bloom filter number hash functions bitstate mode spin utilizes bloom filter hash functions 
wolper leroy promote hash functions holzmann choice just cases spin accurate hash functions 
holzmann notes choice adopted spin compromise runtime expense coverage explains hash functions impractical tuned model checker run time requirements search depend linearly number hash functions computing hash values single expensive operation model checker perform 
larger value longer search errors take 
model checker spin instance run take approximately times longer run 
discovered bloom filter enhancement gives virtually effect independent hash functions fraction runtime cost 
example technique produce effect hash functions times cost hash functions far holzmann factor 
process incorporating technique spin discovered ways improving speed accuracy bitstate verification spin 
specifically show making intelligent jenkins hash function significantly speed verification 
tackle issues associated accommodating arbitrary amount memory show simple issue easily orders magnitude difference possibility incomplete coverage 
oriented describing evaluating implementation considerations implementing modified version spin 
analysis techniques experimental formal mathematical analysis techniques appear 
refer system triple spin spin available web download 
experimental results 
timings taken ghz pentium mb running red hat linux 
version gnu compiler third level general optimizations pentium specific optimizations enabled 
combat state explosion problem addition hashing main topic explicit state model checkers techniques partial order reductions symmetry reductions 
improvements bitstate verification discussed affect compatibility techniques disabled reductions tests order easily measure accuracy 
organized follows 
section give overview bloom filters show quite sensitive number hash functions fast accurate bitstate verification spin expected number omissions hash functions orders magnitude greater number expected omissions optimal number hash functions 
bloom filters employing hash functions thought impractical running time overhead incur sections new techniques address issue 
section address memory limitations imposed current implementation bitstate verification spin version 
wrap experimental results incorporating techniques section give directions research section 
bloom filters verification section overview bloom filters consider detail trade offs involved bloom filter apply realm verification 
analysis sets framework evaluating results 
basics turn bloom bloom filter completely gets away conventional concept organizing hash area cells :10.1.1.20.2080
hash area considered individual addressable bits addresses 
assumed bits hash area set 
message set stored hash coded number distinct bit addresses say 
ad 
bits addressed ad set 
test new message sequence bit addresses say 
generated manner storing message 
bits new message accepted 
bits zero message rejected 
refer functions produce indices bit vector index functions represent size bits bloom filter number index functions number objects added bloom filter respectively 
bloom filters compact downside membership query indicates element bloom filter certain probability error false positive 
assume index functions independent uniform probability index function select specific bit inserting elements bloom filter probability specific bit pki probability false positive elements added bloom filter pki false positive rate primary metric evaluation optimization applications bloom filters way bloom filters verification gives rise meaningful metrics expected number omissions probability having omissions :10.1.1.127.9672:10.1.1.127.9672
compute expected number omissions attempting add distinct states adding probability false positive states added bloom filter ranges 
ki compute probability omissions start noting bloom filter containing elements probability adding new element lead omission just minus probability false positive ki probability omission just product omission ranges ki verification metrics number expected omissions probability omissions depend little control values bound amount memory available better size transition system consideration 
obtain best results fixed choose appropriate value shows expected number omissions quite sensitive number index functions note log scale axis 
ran spin calling jenkins hash function times mb bloom filter instance problem consisting states 
varied report actual number omissions averaged runs 
notice number omissions index functions orders magnitude greater number omissions eleven index functions 
second curve shows number expected omissions formula equal 
sizable gap curves may think due ideal index functions disparity caused shortcoming theoretical analysis considers types omissions 
hash omissions states omitted false positive bloom filter queries 
transitive omissions states reached unreachable omissions queried bloom filter 
gap due transitive omissions implementation observable number states total considered 
theoretical analysis far useless shows minimizing number hash omissions tends minimize omissions 
significantly number hash omissions zero number transitive omissions zero consequently probability hash omissions probability omissions altogether 
expected omissions probability omissions matches exactly experimental results see table justifying transitive omission argument disparity 
seen optimum number index functions important getting accuracy bloom filters 
analysis showing choose scope useful formula estimating best omissions log scale fast accurate bitstate verification spin average omissions hash transitive verifier expected hash omissions choice fig 

show expected observed omissions states mb bloom filter varied 
theoretical optimum value 
ln closed estimate best verification derived refining formula ln estimates minimizes false positive rate :10.1.1.127.9672
validation formula accuracy appear 
double triple hashing bloom filters employing index functions improve accuracy thought impractical running time overhead incur 
section describe techniques efficiently computing index values just hash values 
techniques similar double hashing scheme collision resolution open addressed hash tables 
give short overview double hashing chapter complete account see 
double hashing description open addressing refers type hashing elements stored directly hash table 
insert element hash table probed empty location query consists probing table element clear element table 
probing sequence obtained applying sequence hash functions element 
just bloom filters applying multiple hash functions incur significant performance penalty 
double hashing efficient way implementing open addressing uses hash functions generate probing sequence 
value call starting index probing sequence 
index probing sequence obtained adding second value call 
addition done modulo number indices ensure sum valid index 
double hashing scheme bloom filters idea sequence index functions computed independently functions aand compute simple arithmetic values generate required indices bloom filter operation mod mod mod note thatf iy mod pseudocode store index values array actual code values soon computed likewise compute values needed 
mod assuming stock hash functions tailored output values index space 
spin requires similar mod operations get index values hash functions designers chose allow bloom filter sizes powers efficient bit masking mod operations 
implementation mod operations discussed section describe efficiently loosen power restriction 
algorithm complication respect values example ify unique index probed 
way fix problem ensure relatively non zero relatively prime way spin deals issues discussed section 
double hashing example may clear intimately familiar bloom filters double hashing scheme give higher accuracy just index functions 
figures demonstrate boosting double hashing lead better accuracy 
shows bloom filter elements added 
bloom filter bits set added element 
interpret double hashing hash functions serve index functions defined mod div mod 
case double hashing yield pair indices inputs andb mod 
recall double hashing algorithm compute index functions double hashing fi mod example 
adding change bits bloom filter caused hash omission exploring state space 
boost double hashing collision avoided state omitted illustrated 
add 
add 
add 
collision 
fast accurate bitstate verification spin change fig 

add data bloom filter 
collision occurs queried added 
set index functions operates identically double hashing 
add 
add 
add 
add 
collision 
change fig 

add data bloom filter double hashing 
collision occurs queried added 
add 
add 
add 
add 
fig 

example 
collisions occur 
likewise adding lead omission 
shows double hashed index functions omissions 
shown double hashing implement index functions yield better accuracy just hash values indices important degree double hashing accuracy accuracy compares independent hash functions 
double hashing accuracy test accuracy double hashing respect expected number omissions ran spin state instance double hashing independent hash functions varying contains results data point obtained averaging runs 
notice number omissions occur double hashing similar number omissions get independent hash functions 
best choice independent case best double hashing case 
omissions log scale independent hash functions mb double hashing mb choice fig 

shows number omissions state instance varying number index functions specified index function implementation 
data point average iterations 
curve 
test accuracy double hashing respect probability omissions ran spin state instance mb bloom filter double hashing independent hash functions set 
theoretical analysis reveals verification exhaustive time table demonstrates double hashing performs close theoretical ex times faster independent hash function implementation 
competitive accuracy double hashing breaks uses memory independent hash functions undetectable probability omissions 
setup double hashing omissions time see table 
observation motivates stronger double hashing virtually speed 
fast accurate bitstate verification spin table 
show results verifying state instance mb bloom filter index functions specified implementation index functions 
data point average iterations 
triple hashing implementation full coverage runs average running time independent seconds double hashing seconds theoretical order achieve low probabilities omission extended idea double hashing call triple hashing 
idea compute step 
implementation triple hashing obvious extension double hashing mod mod mod mod mod note thatf iy mod intuitions explain superiority triple hashing utilize hash values collisions bloom filter occur 
second intuition function complicated smaller chance indices overlapping indices single previous addition 
pseudocode triple hashing suggests triple hashing significantly overhead double hashing overhead double triple hashing comes main memory latency 
table demonstrates 
overhead triple hashing vs double hashing nearly double faster triple assuming compute hash values assumption addressed section 
table show triple hashing achieve higher accuracy double hashing 
triple come closer expect independent hash functions triple hashing course faster independent hash functions table confirms 
jenkins hash function previous section gave efficient way reduce problem computing index values state problem computing just 
section table 
running times verifying state instance mb bloom filter specified number index functions specified implementation index functions implementations amount hash computation needed 
implementation index functions average running time double seconds triple seconds double seconds triple seconds independent see table table 
show results verifying state instance mb bloom filter index functions specified implementation index functions 
iterations implementation insufficient quantifying accuracies precision give strong indication magnitudes 
implementation proportion runs omissions double hashing triple hashing theoretical show get data popular hash function compute values time default configuration spin computed hash values bitstate hashing 
getting jenkins high quality fast speed bob jenkins lookup hash function popular choice implementers hash tables bloom filters function default hash function spin 
produces bit value function produce larger values sequences values calling function multiple times different seed values 
take look lookup function see propagates full bits data iterates input 
function returns just bit fragment propagated bits 
word returned satisfies certain properties tested jenkins lookup purposes extracting words single run jenkins calling function times 
accuracy validation fast accurate bitstate verification spin ran tests jenkins sure output words uniform 
case sufficiently large unique randomly chosen inputs better chance producing bit word output 
equivalently bit output uniform inputs better chance output matching unique outputs 
running exactly test repeatedly output word yielded probabilities quickly converged desired 
sought evaluate pairwise independence pairings output words 
followed similar procedure attempting establish uniformity bit output 
observing repeated bit output unable put upper bound entropy output results indicate entropy greater bits pair words leaving doubt extracting word jenkins gives access substantially hash information full bits 
practical standpoint ran tests validate words call jenkins gives accuracy bloom filter calling jenkins times 
table shows results executions versions spin index functions 
slow jenkins version uses separate calls jenkins index function calls bloom filter operation 
fast jenkins version uses words call jenkins incurs maximum cost jenkins calls operation 
observed slightly higher accuracy fast jenkins results statistically significant establish relationship 
results establish implementations yield accuracy exceptionally close expected theory 
note tests utilize double triple hashing combination techniques tested validated section 
table 
show results verifying state instance mb bloom filter index functions specified implementation index functions 
ran iterations implementation 
implementation full coverage runs average running time slow jenkins seconds fast jenkins seconds theoretical tested words input 
speed boost table includes execution times slow jenkins version fast jenkins versions 
hash computation clearly dominates total execution cost reduction hash computation time resulted reduction required execution time 
fast jenkins version utilizing index functions runs quickly jenkins configuration spin uses index functions fast jenkins generate index functions single call jenkins 
results tests table 
jenkins configuration spin case calling slow jenkins 
table 
show execution times verifying state instance mb bloom filter 
number implementation index functions indicated table 
implementation index functions average running time spin jenkins seconds fast jenkins seconds fast jenkins seconds arbitrary memory utilization restrictions amount memory utilized bloom filter spin profound effects accuracy bitstate verification 
clearly limitation upper limit amount memory dedicated bloom filter megabytes second limitation bloom filter spin sized power 
impact limitations great theoretical analysis shows user accurate bitstate verification mb memory bloom filter mb chance omissions 
increasing maximum reason spin maximum megabytes dedicated bloom filter megabytes equal megabits bit values index bit vector 
problem byte word addressed memories get close size address space single words insufficient addressing individual bits memory 
computer market currently experiencing problem bit machines sold megabytes memory 
spin mb analysis suggests implementation bug design flaw 
fast accurate bitstate verification spin solution problem certainly involve computation best solution eliminates need existing computation 
example existing computation process dividing bit vector index word byte index index bit word byte 
operations boil dividing small power modulus power implemented bit shifting bit masking respectively 
solution call parallel indexing accommodates addressable amount memory eliminates little bit previously required computation computing word indexes bit word indexes independently 
consider having sets index functions fk give addresses words retrieve fk tell bit extract word 
apply triple hashing get fi values get fi values 
functions required return bits stored word computation simple 
precise granularity modifying spin specified amount memory bloom filter simple ensuring accuracy maintained implementation efficient easy 
simple answer amount memory allocate mod hash function results appropriate value indexes computed 
accuracy problem simple answer mod ing value affect accuracy data structure 
consider case parallel indexing allocates rds bits mb bloom filter 
mod result bit hash function get index half indexes twice chosen second half 
think mod operation putting input values equivalence classes 
matter hard try distribution classes uniform mod gives elements equivalence classes half classes going contain elements half going contain element 
choice indexing words opposed bytes parallel indexing scheme lessens impact uniformity problem factor bit case making problem observable impact 
byte indexing gave worst case indexes twice chosen word indexing yields worst case 
gigabytes difference significant table reveals 
speed simple solution second problem mod operations arbitrary values costly example modulus respect power implemented bit masking 
fact outside spin observed unsigned modulus operator times slow bit masking table 
show result verifying state instance leader mb bloom filter independent index functions varying ratio probability index landing half bit space second 
data point average iterations 
case ratio full coverage runs byte indexing word indexing uniform pentium 
mod operations optimize away double triple hashing parallel indexing scheme 
observation range bit word indexes powers optimized bit masking 
important values computing word indexes fairly uniform distribution possible indexes cheating sacrifice 
fact mod respect greatest power compute values enabling bit masking 
reduced number unoptimized mod operations initialization phase bloom filter operation just computing important mod operations optimize happen iteration part bloom filter operation executing times bloom filter operation 
triple hashing case cheat ranges values eliminate mod altogether 
specifically initialized overflow respect needs incremented value times 
observation allows speed mod iteration loop guaranteed leaving cases handle mod ifx mod 
update line pseudocode reflect optimization mod lines new code efficient graph shows 
faster version graph implements triple hashing optimizations discussed section requiring just unoptimized modulus bloom filter operation 
slower version optimization just described requiring unoptimized modulus operations bloom operation 
time state explored microseconds triple hashing optimized modulus triple hashing literal modulus fast accurate bitstate verification spin memory available bloom filter mb fig 

graph plots verification times depicts difference execution times resulting optimizing modulus operations bloom operation 
varied optimal respect thing notice times reflected graph memory space power implementations run slightly faster speed 
modified version spin dynamically picks implementation best suited choices implementations optimized power orthogonally 
observation power cases optimized graph see optimizations utilizing arbitrary memory incur execution speed cost percent 
overhead worth cost enables nearly twice memory 
bit jenkins short section reveal synergy various approaches improving speed accuracy bitstate verification spin 
bits get single call jenkins hash information effectively utilize triple hashing parallel indexing precise memory utilization 
call version incorporating enhancements triple spin spin short 
precise breakdown hash information spin 
give spin triple hashing word indexes give double hashing bit word indexes 
notice bits bit value reason making odd multiplying adding ensures bit word index unique 
guarantee ensures bloom filter operation addresses unique bit positions bit vector 
bits mod bits bits bits odd original jenkins word st extra jenkins word nd extra jenkins word fig 

diagram shows utilize bits output jenkins 
evaluation bits section evaluate spin system incorporating techniques described 
shows observed average omissions various implementations close hard detect differences 
previous tests shown need high accuracy runs chance distinguishing implementations accuracy 
shows execution times tests 
number omissions execution times profoundly different techniques time implementation advantage improvements 
notice takes twice time far cry holzmann experience independent hash functions suggests times slow 
figures show results various amounts memory available allocation bloom filter 
notice versions incorporate enhancements arbitrary memory allocation bloom filter utilize amount memory equal greatest power greater example mb available versions act mbs available user specify requiring mb 
mb available versions best case expect omissions mb available spin expects th omissions 
spin best mb runs rds time 
mb available spin run half time version independent hash functions 
version independent index functions included figures reflect available latest version spin 
results spin utilize index functions mb case fast spin utilize point spin expects th omissions partially utilizing memory partially suitable set experimental results table just confirm results generalize models rest 
omissions log scale spin double fast jenkins independent jenkins number index functions fast accurate bitstate verification spin execution time seconds spin double fast jenkins indep 
slow jenkins indep 
fast jenkins number index functions fig 

left plotted number omissions state instance mb bloom filter values optimal right shows execution times tests 
data point represents iterations 
omissions log scale spin triple best spin double best independent jenkins best spin independent jenkins memory available bloom filter mb fig 

plotted number omissions various implementations various amounts memory available bloom filter 
notice implementations supporting power granularity utilize greatest power equal amount available 
data point average iterations 
table 
validation approaches models 
case techniques optimizations 
values annotated opt indicating choice optimal sub indicating chose different optimal 
models included spin distribution 
model states runs full expected iterations peterson mb opt leader mb sub sort mb opt time state explored microseconds spin triple best spin double best independent slow jenkins best independent fast jenkins best spin ind slow jenkins memory available bloom filter mb fig 

graph shows times executions 
note implementations optimal values range depending implementation spin uses explains fastest mb 
early holzmann shown utility bloom filter data structure probabilistically verifying systems explicit state model checkers 
main parameter tuning bloom filter number hash functions tension accuracy efficiency small values lead fast running times value yields best accuracy may quite large 
spin optimized speed allows 
holzmann justified choice pointing running tuned model checker hash functions times faster hash functions 
belief get accuracy efficiency 
show cake eat 
entitled fast accurate bitstate verification spin exactly provide spin system developed modifying spin 
key components spin include double triple hashing techniques bloom filters greatly reduce execution time highly accurate bitstate verification 
fact spin hash functions running fast spin hash functions 
spin ability main memory bloom filter available spin allows size bloom filter power mb 
motivation improvement simple available main memory bloom filter improves expected accuracy bitstate search 
example just memory spin allows times omission 
plan explore bloom filters verification analytical standpoint examine impact techniques sequential 
plan compare techniques probabilistic verification techniques hash compaction 
fast accurate bitstate verification spin 
bloom 
space time trade offs hash coding allowable errors 
communications acm july 

broder mitzenmacher 
network applications bloom filters survey 
proc 
th annual allerton conference communication control computing pages 

ip dill 
better verification symmetry 
editors computer hardware description languages applications pages ottawa canada 
elsevier science publishers amsterdam 

cormen stein rivest leiserson 
algorithms 
mcgraw hill higher education 


spin home page 
www cc gatech edu spin 

godefroid wolper 
partial approach model checking 
logic computer science pages 

gonnet 
handbook algorithms data structures 
addison wesley 

holzmann peled 
partial order reduction state space 
spin workshop montr quebec 

holzmann 
algorithms automated protocol validation 
technical report technical journal 

holzmann 
analysis bitstate hashing 
proc 
th int 
conf protocol specification testing verification ifip pages warsaw poland 
chapman hall 

holzmann 
spin model checker primer manual 
addison wesley boston massachusetts 

jenkins 
net bob lookup 

jenkins 
algorithm hash functions 
dr dobb journal september 

knuth 
art computer programming volume sorting searching 
addison wesley longman publishing nd edition 

stern dill 
improved verification hash compaction 
correct hardware design verification methods 
volume lecture notes computer science 

stern dill 
new scheme memory efficient probabilistic verification 
joint int 
conf 
formal description techn 
distr 
systems comm 
protocols protocol spec testing verification pages 

wolper leroy 
reliable hashing collision detection 
th international conference computer aided verification pages 
