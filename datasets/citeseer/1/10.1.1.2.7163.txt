fast kernels string tree matching vishwanathan machine learning program national ict australia canberra act australia axiom anu edu au alexander johannes smola machine learning group australian national university canberra act australia alex smola anu edu au chapter new algorithm suitable matching discrete objects strings trees linear time obviating dynamic programming quadratic time complexity 
algorithm extended various ways provide linear time prediction cost length sequence classified 
demonstrate extensions case position dependent weights sliding window classifiers long sequence efficient algorithms dealing weights form dictionaries 
improvement currently available algorithms string kernels viable alternative practitioner 
problems machine learning require data classification algorithm set discrete objects 
common examples include biological sequence analysis data represented strings durbin natural language processing nlp data form string combined parse tree collins duffy annotated sequence altun 
order apply kernel methods defines measure similarity fast kernels string tree matching sparse vectors discrete structures feature map set discrete structures 
set parse trees language hilbert space 
define kernel evaluating scalar products success kernel method employing depends faithful representation discrete data efficient means computing research effort focussed defining meaningful kernels strings 
ideas substrings herbrich gapped substrings lodhi length substrings leslie mismatch penalties leslie proposed 
chapter presents means computing substring kernels strings herbrich leslie trees linear time size arguments independent weights associated matching subwords 
linear time algorithm prediction independent number support vectors 
significant improvement far fastest methods rely dynamic programming incurs quadratic cost length argument herbrich additionally linear length matching substring leslie 
extensions finite state machines formal languages automata vishwanathan smola vishwanathan cortes 
means generating kernels underlying correlation structure smola hofmann warmuth 
nutshell idea works follows assume kernel index set may large number nonzero entries small comparison terms special structure 
efficient way computing sort set nonzero entries count matching nonzeros 
similar dot product sparse vectors numerical analysis 
long sorting done intelligent manner cost computing linear sum nonzeros entries combined 
order idea matching strings quadratically increasing number substrings trees transformed strings efficient sorting realized compression set substrings suffix tree 
dictionary keeping allows arbitrary weightings substrings compute kernels linear time 
results improve algorithm proposed leslie 
case exact matches algorithm independent length matches furthermore complete freedom choosing weight parameters 
inexact matches unfortunately modifications possible suggest online construction leslie 
efficient implementation 
kernels kernels string kernel definition outline chapter section give basic definition string tree kernels chapter 
section contains main result suffix trees compute string kernels efficiently 
sections deal issue computing weights efficiently newly established algorithms prediction purposes keeping linear time property 
experimental results section discussion section conclude 
string kernels introducing notation 
finite set call alphabet 
elements characters 
sentinel character ak 
called string 
empty string denoted represents set non empty strings kleene closure hopcroft ullman defined alphabet denote strings denote characters 
denotes length uv concatenation strings au concatenation character string 
denote substring locations inclusive 
uvw possibly empty called prefix called substring denoted called suffix denotes number occurrences number times occurs substring 
type kernels studying defined ws nums nums ws 
count number occurrences substring weight ws may weight chosen priori seeing data inverse document frequency counting leopold kindermann 
includes large number special cases setting ws yields bag characters kernel counting simply single characters joachims 
bag words kernel generated requiring bounded whitespace ws bounded whitespace character side joachims 
setting ws yields limited range correlations length consider contributions due substrings length 
spectrum kernel takes account substrings length leslie fast kernels string tree matching tree kernel definition 
achieved setting ws tfidf weights salton achieved creating compressed list including frequencies occurrence subsequently rescaling ws accordingly 
kernels computed efficiently construction suffix trees see sections 
go computing turn trees 
important reasons suffix tree representation string compute kernels efficiently secondly may wish compute kernels trees carried reducing trees strings applying string kernel 
tree kernels tree defined simple directed connected graph cycles 
rooted tree single special node called root 
internal node child nodes called parent children 
root node parent 
node children referred leaf 
sequence nodes 
nk ni parent ni 
called path 
nodes path node called ancestor called descendent define subtree node tree descendents 
subtree rooted node denoted tn indicate subtree ordered tree rooted tree order subtrees hanging node significant 
point trees subtrees consider ordered trees 
set nodes tree corresponding edges forms tree define subset tree 
node tree contains label denoted label tree called labeled tree 
leaf nodes contain labels tree called leaf labeled tree 
kernels trees defined defining kernels matching subset trees proposed collins duffy defining kernels matching subtrees 
case wt 
iff ordered subtrees isomorphic order child nodes level 
compute restrictive tree kernels linear time consider subset tree collins duffy quadratic time algorithms required 
tree obtained tree swapping order child nodes said equivalent 
alternatively equivalent trees obtained permuting order leaf nodes disturbing parent child relationship tree see 
tree kernel defined take equivalence account 
may desirable kernels equivalent trees transformed swapping children root node 
applications ordered trees naturally domains instance phylogenetic trees bioinformatics desirable reduce trees canonical form computing kernels 
achieve implicitly sorting ordering trees 
ordering trees order trees assume lexicographic order associated labels exist 
furthermore assume additional symbols satisfy label labels 
symbols define tags node follows unlabeled leaf define tag 
labeled leaf define tag label 
unlabeled node children 
nc define lexicographically sorted permutation child nodes tag tag define tag tag tag 
tag 
tree string conversion labeled node perform operations set tag label tag tag 
tag 
instance root nodes trees depicted encoded 
prove tag root node unique identifier constructed log linear time 
theorem denote binary tree nodes maximum length label 
properties hold tag root node 
tag root computed log time linear storage fast kernels string tree matching 
substring tag root starting balanced mapping subtree tn tag node 
trees equivalent tag root 
furthermore tag root allows reconstruction unique element equivalence class 
proof claim induction 
tag leaf constructed constant time storing pointer label leaf exists operations 
assume node children 
tn contain ln nodes tn tn contain nodes respectively 
induction assumption construct tag log log time respectively 
comparing tags costs min operations tag constructed constant time linear space manipulating pointers 
loss generality assume 
time required construct tag normalized log log log log ln log ln 
claim loss generality consider labeled tree induction show subtree associated balanced substring tag root 
leaf node assign tag label clear corresponds balanced substring tag root 
suppose internal node child nodes 
furthermore assume subtrees tn tn correspond balanced substrings tag tag respectively 
assign tag label tag tag clear substring corresponding tn balanced 
conversely recursive definition balanced substring tag root form label tag tag node children 
precisely corresponds tag node subtree tn 
proves claim 
way visualizing ordering imagining perform dfs depth search tree emit followed label visit node time leave node time 
clear balanced substring tag root emitted corresponding dfs tn completed 
claim leaf nodes children tag clearly invariant permutation 
internal node perform lexicographic sorting tags children 
sorting maps trees equivalence class canonical representative 
define tag root tree string corresponding tree 
directly proves part claim 
concerning reconstruction proceed follows tag subtree starts ends balanced strip pair tag take left outside brackets label root node repeat procedure balanced 
entries children root node 
construct tree tag tag root proving claim 
suffix trees matching statistics suffix tree 
leaf containing hanging root node omitted readability 
extension trees nodes straightforward cost increases log original cost due additional comparisons required sorting leaves proof particular technical providing additional insight omit generalization brevity 
tree string conversion algorithm claim theorem yields straightforward corollary proof left simple exercise reader 
corollary trees subtree matching kernel defined computed string kernels strings tag tag require balanced substrings form 
nonzero weight ws 
reduces problem tree kernels string kernels need show computed efficiently 
purpose need introduce suffix trees 
suffix trees matching statistics definition suffix tree compacted trie knuth stores suffixes text string weiner 
denote suffix tree string 
nodes set nodes root root 
denotes path root node label node node tw denotes subtree tree rooted node lvs denotes number leaves tw parent denotes parent node 
denote words set non empty strings wu nodes possibly empty string means words fast kernels string tree matching set possible substrings giegerich kurtz 
words define ceil node tu shortest possibly empty substring nodes 
immediate node path leading 
words define floor node wu shortest non empty substring nodes 
node encountered path leading 
internal node clear ceil floor parent string suffix tree decide words time just walking corresponding edges weiner 
sentinel character added string shown words lvs ceil gives number occurrence giegerich kurtz 
idea works follows suffixes starting pass ceil simply count occurrences sentinel character leaves 
note simple dfs enable calculate lvs node time space 
aw node longest suffix nodes 
unlabeled edge aw called suffix link 
suffix link form aw called atomic 
shown suffix links suffix tree atomic giegerich kurtz proposition 
add suffix links allow perform efficient string matching suppose aw substring parsing suffix tree 
clear substring want locate node corresponding wasteful parse tree 
suffix links help locate node constant time 
suffix tree building algorithms instance ukkonen property suffix links construct suffix tree suffix links linear time 
note suffix links just special case called failure functions automata theory allow backtrack gracefully re information obtained checking string accepted automaton hopcroft ullman cortes 
matching statistics strings matching statistics respect vectors vi ci nodes 
define vi length longest substring matching prefix vi vi ci node corresponding ceil vi node corresponding floor vi 
example see table 
construct matching statistics corresponding linear time 
key observation vi vi vi substring definitely vi substring matching suffix trees matching statistics string vi vi bc bab ab ci bc ab root root root table matching statistic respect shown matching substrings 
substring find vi prefix 
matching statistics algorithm chang lawler exploits observation uses cleverly walk suffix links order compute matching statistics time 
specifically algorithm finds intermediate node floor vi walking suffix link walking edges corresponding remaining portion vi reaches ci vi easily walking edges match vi go 
value simply walking find longest prefix matches substring matching substrings matching statistics read number matching substrings useful observation substrings occur prefixes vi 
number occurrences substring lvs ceil discussed section 
lemmas formalize 
lemma substring iff prefix 
number occurrences calculated finding proof substring occurrence write unique indices clearly prefix 
conversely index prefix substring lemma set matching substrings set prefixes vi 
proof substring lemma prefix 
vi length maximal prefix substring follows vi 
prefix vi 
fast kernels string tree matching fast kernel computation conversely position longest prefix matches substring vi 
follows prefix vi substring efficient kernel computation previous discussion know determine set longest prefixes vi linear time 
theorem uses information compute kernels efficiently 
theorem strings matching statistics respect assume wu floor uv 
prefix computed constant time defined computed time val lvs ci vi val val parent lvs val root 
proof show computed linear time 
know number leaves node computed time performing dfs 
computed time invocation matching statistics algorithm 
assumption exploiting recursive nature val pre compute nodes simple top procedure time 
may compute term constant time simple lookup val lvs ci computing vi constant time 
terms procedure takes time proves time complexity 
prove really computes kernel 
know lemma sum decomposed sum matches prefixes vi takes care substrings matching 
reduces problem showing term sum corresponds contribution prefixes vi 
key observation substrings share ceil node occur number times allows bracket contribution due prefixes vi efficiently 
consider previous example 
compute val bab need consider contributions due bab ba looking immediately tells occurs twice lvs ceil contribution weights kernels weights kernels counted twice ba bab occur contributions counted 
recursive definition exploiting observation clear val nodes computes contribution kernel due prefixes 
arbitrary substring floor uv components contribute kernel 
contribution due prefixes contribution due strings form prefix 
substring occurs exactly lvs ceil times perform efficient bracketing compute kernel 
clearly annotations computed evaluating costs time 
suggests prediction gain extra efficiency pre computing large part kernel expansion 
idea explicit section 
need address issue conditions really computed constant time 
length dependent weights weights ws depend ws 
define wi compute values sum telescopes follows floor floor wj floor wj wj floor computed constant time looking pre computed values 
examples weighting schemes include decay factors wi indicator functions wi bounded range interactions wi wi character counts wi joachims 
denote floor string boundaries 
case compute follows exponential decay constant weight max min bounded range bag characters fast kernels string tree matching position dependent weights study case weights ws depend position relative strings ws ux uy 
note words position share weight 
share terminal leaf recall exactly leaf suffix 
sufficient enumerate leaves weigh starting position suffix correspond 
recall section defined lvs number leaves tw 
assume unit weight placed leaves lvs thought sum weights leaves tw 
case position dependent weights leaf contains possibly different weight 
generalize notion define lvs sum weights leaves tw 
furthermore compute kernel needs rewritten follows val lvs ci vi val ci defined theorem 
dictionary weights assume set strings 
xk corresponding weights string weights vanish wd method put practical ben hur brutlag set motifs features classification remote homologies 
provide fast version motif kernel algorithm depend number matching motifs number support vectors ben hur brutlag assumption motifs contain wildcards 
dictionary define xi 
suffix tree denoted defined compacted trie obtained inserting suffixes xi clever modification construction algorithm mccreight construct time amir 
new string xk insert xk time 
suffix tree contains node corresponding strings strings substrings contains unique leaf node corresponding xi 
ensure strings substrings need append new symbol string xi dictionary 
text static dynamic dictionary patterns problem reporting occurrence pattern dictionary text studied aho corasick amir 
concentrate static dictionary matching problem sketch algorithm close spirit weights kernels string kernel algorithm 
basic idea algorithm follows strings construct 
show compute kernel sufficient annotate nodes joint suffix tree 
show annotation performed conceptually constructing suffix tree 
prove technical lemma lemma strings matching statistics respect suffix tree contains node corresponding vi 

proof definition matching statistics vi occurs substring vi 
implies share path corresponding vi represent string vi superstrings need introduce node 
nodes define number times occurs substring respectively 
lemma provides alternate view string kernel characterizing terms nodes 
lemma strings string kernel defined computed nodes defined theorem proof sketch outline proof 
observe strings share common ceil say occur number times respectively 
previous lemma know vi occurs node joint suffix tree 
observations allow bracket terms efficiently compute kernel 
order compute kernel remains compute efficiently nodes nodes 
node parent 
order compute just need sum weights strings dictionary edge connecting easily computed keeping track weights path leading string string suffix tree 
fact computation performed constant time annotate node sum weights path root node 
conceptually easy way think procedure follows assume construct done time amir 
nodes node fast kernels string tree matching 
node parent 
compute weights path 
computation performed constant time annotating nodes 
wildcards mismatches taken account allow simple modification algorithm albeit somewhat higher runtime treat wildcards additional special symbol build suffix tree set dictionary terms 
computing matching statistics algorithm parsing suffix tree allow multiple paths vertex contains contains wildcard symbol children observing paths need followed 
means algorithm expensive exactly number concurrent paths need taken account simultaneously 
approach account wildcards build compact finite state automata fsa represent dictionary patterns navarro 
viewed generalization suffix trees failure functions 
generic weights case generic weights individual subwords assigned weights independent proceed dictionary approach 
main difference dictionary implicitly 
denote 
xm set arguments kernel evaluation purposes 
compute ws substrings xi treat result dictionary 
reduces case situation may result superlinear time annotate due significantly larger number nonzero weights 
surprising need read weights computing kernel 
approach offers option assign weights frequency occurrence strings text 
purpose build suffix tree obtain string frequency counts compute weights proceed annotating suffix tree 
allows implement kernels ones proposed leopold kindermann efficiently 
optimization prediction actual evaluation scalar products extend techniques compute linear combinations kernel functions efficiently 
crucial context fact computation asymmetric insofar suffix tree computed merely compared 
extend idea manipulating suffix tree set support vectors directly allow obtain time algorithms combinations kernels 
optimization prediction weighted leaf nodes linear time prediction 
xm set support vectors 
recall prediction support vector machine need compute xi implies need combine contribution due matching substrings support vectors 
definition string kernel expand xi 
previously substring match contributed weight ws kernel 
substring support vector xi contributes weight 
suggest simple strategy akin position dependent weights 
construct linear time algorithm amir 

leaf arising xi assigned weight iyi 
need define node updated weight weight iyi denotes number leaves xi node ceil 
allows take contribution svs account simultaneously 
straightforward application matching statistics algorithm chang lawler shows find matching statistics respect strings time 
applied verbatim compute 
summary classify texts linear time regardless size training set 
svm large scale text categorization practically feasible 
note ability comes cost store memory requirements linear size support vectors 
sliding windows assume want classify subsequences long string dna sequence typical approach case take specifies window size compute individually correlation function values account 
highly wasteful difference adjoint strings 
see vishwanathan details proof 
fast kernels string tree matching sliding window classifier extend matches cross current window boundary 
just 
symbols order identical 
means large part computed reused successor 
merge suffix trees support vectors master suffix tree denoted 
compute matching statistics entire long denote matching statistics sequence respect 
vj th character th window 
match extend boundary window clear min vi ceil vj experimental results 
means need parse computing matching statistics window turn lead implementation speedups 
efficient strategy keep track strings matches current window boundary 
worst case general number typically smaller perform estimation window need extend matches ended previous window boundary 
number matches need extend perform estimation window sub linear time time 
depicts strategy 
general vi denotes length longest match location string implies match corresponding vi cross vi window boundaries need extended exactly vi times 
total time required compute sliding window kernel proportional min vi typically smaller 
experimental results total number families svm classifier exceeds roc score threshold 
proof concept tested approach remote homology detection problem jaakkola stafford noble svm package training algorithm 
length weighted kernel assigned weights ws substring matches length greater regardless triplet boundaries 
evaluate performance computed roc scores 
proof concept try tune soft margin svm parameters main point chapter novel means evaluating string kernels efficiently applications separate focusing applications preparation 
contains roc scores spectrum kernel leslie string kernel 
tested report best results 
seen kernel outperforms spectrum kernel total number families classifier kernel exceeds roc score threshold 
noted method allow users specify weights 
details data available www cse ucsc edu research discriminative 

available www cs columbia edu svm 

roc score gribskov robinson leslie area receiver operating characteristic curve plot true positives function false positives false positives 
score indicates perfect separation positives negatives score indicates top sequences selected algorithm positives 
fast kernels string tree matching arbitrarily possible lengths matching sequences able compute kernels time plus predict new sequences time set support vectors established 
shown string kernels need come super linear cost svms prediction carried cost linear length argument providing optimal run time behavior 
furthermore algorithm applied trees 
methodology pointed chapter immediate extensions instance may consider coarsening levels trees removing leaves 
unbalanced trees assume tree shrinks constant factor coarsening computation kernel coarsening levels carried cost linear size tree 
idea coarsening extended approximate string matching 
remove characters amounts wildcards 
likewise consider strings generated finite state machines compare finite state machines 
leads kernels automata dynamical systems 
details extensions vishwanathan 
acknowledgments asa ben hur eskin patrick haffner bob williamson comments suggestions 
jean philippe vert tsuda carefully going draft pointing errors helping improve presentation significantly 
research supported australian research council 
india software support 

leslie 
obtain algorithm somewhat restrictive case ws 
aho corasick 
efficient string matching aid bibliographic search 
communications acm june 
altun tsochantaridis hofmann 
hidden markov support vector machines 
international conference machine learning 
forthcoming 
amir farach galil giancarlo park 
dynamic dictionary matching 
journal computer system science october 
ben hur brutlag 
remote homology detection motif approach 
ismb 
chang lawler 
sublinear approximate sting matching biological applications 
algorithmica 
collins duffy 
convolution kernels natural language 
dietterich becker ghahramani editors advances neural information processing systems cambridge ma 
mit press 
cortes haffner mohri 
rational kernels 
proceedings neural information processing systems 
press 
durbin eddy krogh mitchison 
biological sequence analysis probabilistic models proteins nucleic acids 
cambridge university press 
giegerich kurtz 
ukkonen mccreight weiner unifying view linear time suffix tree construction 
algorithmica 
gribskov robinson 
receiver operating characteristic roc analysis evaluate sequence matching 
computers chemistry 
herbrich 
learning kernel classifiers theory algorithms 
mit press 
hopcroft ullman 
automata theory languages computation 
addison wesley reading massachusetts edition 
jaakkola haussler 
discriminative framework detecting remote protein homologies 
journal computational biology 
joachims 
learning classify text support vector machines methods theory algorithms 
kluwer international series engineering computer science 
kluwer academic publishers boston may 
isbn 
knuth 
art computer programming fundamental algorithms volume 
addison wesley reading massachusetts second edition 
leopold kindermann 
text categorization support vector machines represent text input space 
machine learning march 
leslie eskin noble 
spectrum kernel string kernel svm protein classification 
proceedings pacific symposium biocomputing pages 
leslie eskin weston noble 
mismatch string kernels svm protein classification 
proceedings neural information processing systems 
press 
lodhi saunders shawe taylor cristianini watkins 
text classification string kernels 
journal machine learning research february 
mccreight 
space economical suffix tree construction algorithm 
journal acm april 
navarro 
fast regular expression search 
proceedings number lncs pages 
springer 
gerard salton 
automatic text processing 
addison wesley massachusetts 
smola hofmann 
exponential families feature space 
advances neural information processing systems 
submitted 
smola vishwanathan 
hilbert space embeddings dynamical systems 
proceedings th ifac symposium system identification 
ifac august 
press 
manfred warmuth 
predicting nearly best pruning planar decision graph 
proc 
th international conference algorithmic learning theory alt volume lecture notes artificial intelligence pages 
springer verlag 
ukkonen 
line construction suffix trees 
algorithmica 
vishwanathan 
kernel methods fast algorithms real life applications 
phd thesis indian institute science bangalore india november 
weiner 
linear pattern matching algorithms 
proceedings ieee th annual symposium switching automata theory pages university iowa 
ieee 
