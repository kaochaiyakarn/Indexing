ieee transactions knowledge data engineering vol 
february incremental online merge mining partial periodic patterns time series databases walid aref member ieee mohamed ahmed elmagarmid senior member ieee mining periodic patterns time series databases interesting data mining problem 
envisioned tool forecasting prediction behavior time series data 
incremental mining refers issue maintaining discovered patterns time presence items added database 
append nature updating time series data incremental mining effective efficient 
algorithms incremental mining partial periodic patterns time series databases proposed analyzed empirically 
new algorithms allow online adaptation thresholds order produce interactive mining partial periodic patterns 
storage overhead incremental online mining algorithms analyzed 
results show storage overhead storing intermediate data structures pays incremental online mining partial periodic patterns proves significantly efficient nonincremental versions 
new problem termed merge mining introduced generalization incremental mining 
merge mining defined merging discovered patterns databases mined independently 
algorithm merge mining partial periodic patterns time series databases proposed analyzed 
index terms data mining time series databases incremental mining online mining 
data mining defined application data analysis discovery algorithms large databases goal discovering predicting patterns 
time series database database contains data time weather data contains measures temperature different times day 
examples time series databases stock prices power consumption 
early time series data mining addresses similarity matching problem 
agrawal develop model similarity time sequences mining periodic patterns 
studies similarity matching time sequences include 
studies time series data mining concentrate discovering special kinds patterns 
agrawal define shape definition language retrieving userspecified shapes contained histories time series data 
agrawal srikant develop apriori technique mining sequential patterns extended garofalakis 
bettini develop effective algorithms discovering temporal patterns 
han define notion partial periodic patterns algorithms mining kind patterns time series databases 
authors department computer science purdue university university st west lafayette indiana 
mail aref ake cs purdue edu 
manuscript received aug revised may accepted nov 
information obtaining reprints article please send mail tkde computer org ieeecs log number 
ieee published ieee computer society partial periodic patterns patterns interest specify behavior time series points time 
example pattern disclosing prices specific stock high friday low tuesday partial periodic pattern 
partial describe regularity week days 
example consider temperature time series specific town partial periodic pattern may discover average temperature high august low december regular months 
important research issues data mining incremental mining defined maintain discovered patterns time data continuously added database 
term originally proposed agrawal psaila 
incremental techniques proposed maintenance frequent sets discovered transaction databases 
ester develop scalable incremental clustering algorithm 
utgoff develops id incremental version decision tree classifier id scalable 
gehrke develop scalable incremental algorithm maintaining decision tree classifiers 
wang tan incremental mining algorithm finding sequential patterns 
ganti describe algorithms incremental mining frequent sets clusters respect new dimension called data span dimension allows user defined selections temporal subset database 
best knowledge problem incremental mining periodic patterns time series databases studied 
practice expert users need provide appropriate thresholds obtain useful data mining results 
online ieee transactions knowledge data engineering vol 
february fig 

example max subpattern tree 
mining considers providing user ability change thresholds mining process progress 
generally online mining algorithm outputs continuous results long user keeps changing thresholds 
context association rules algorithm online mining proposed 
best knowledge issue online mining periodic patterns time series databases addressed 
new algorithms incremental online mining partial periodic patterns time series databases 
results show algorithms perform order magnitude better nonincremental ones real synthetic data sets 
define new operation termed merge mining technique merging mining results collection databases mined separately 
algorithm performing merge mining operation adaptation incremental online mining algorithm 
rest organized follows section mining problem partial periodic patterns introduced notation 
section presents new algorithms incremental mining partial periodic patterns 
section shows algorithms adapted address online mining problem 
merge mining operation defined section efficient algorithm performing 
section comparison performance algorithms reported 
conclude study section 
mining partial periodic patterns notation assume sequence time stamped features collected time series database 
time instant di feature collected set features 
time series features represented dn 
example time series database power consumption features collected may power consumption rates certain customer hour time series database stock prices features collected may stock prices specific 
quantize time series levels denote level high medium letter set features fa string length pattern sequence sp length pattern si length pattern defined 
pattern length called pattern 
pattern called subpattern pattern position si 
example pattern afb cg fd egf length pattern patterns ac df subpatterns afb cg fd egf patterns abc ac subpatterns afb cg fd note symbol omit brackets si singleton contains element 
clearly length pattern greater equal length subpatterns 
sequence divided disjoint patterns equal length si si dip dip bn pc period sequence 
pattern si called period segment 
example mentioned power consumption timeseries database typical value period divides sequence patterns represents day 
period segment si matches pattern subpattern si 
frequency count pattern time series number period segments time series matches pattern 
confidence pattern defined division frequency count number period segments time series bn pc 
pattern called frequent confidence greater equal minimum threshold 
example series period period segments pattern fa dg frequency count confidence 
max subpattern hit set algorithm section overview algorithm termed max subpattern hit set algorithm mines partial periodic patterns time series database 
algorithm builds tree called max subpattern tree refer fig 
illustration nodes represent candidate frequent patterns time series 
node parent node conditions satisfied pattern represented parent node length larger length pattern aref incremental online merge mining partial periodic patterns time series databases represented child node exactly pattern represented child node subpattern pattern represented parent node 
conditions mean child node pattern similar parent node pattern removing letter 
link parent child node labeled letter 
node count value reflects number occurrences pattern represented node entire time series 
pattern timeseries encountered corresponding node count incremented 
counts nodes correspond subpatterns incremented 
example pattern acd encountered means pattern cd encountered subpatterns recursively 
costly operation 
node corresponds encountered pattern count incremented exact frequency count pattern summation count corresponding node counts parent nodes path tree reach node 
resulting data structure graph tree pattern subpattern patterns 
example pattern cd subpattern pattern acd pattern fb order preserve data structure tree decrease complexity insertion search operations parent child links kept 
imply additional step determine candidate parents child order calculate exact frequency count 
fig 
gives example max subpattern tree 
notice dotted lines represent parent child links kept 
clearly root node tree represent candidate frequent pattern candidate frequent patterns subpatterns 
pattern having maximum length candidate frequent patterns called cmax 
determine pattern patterns extracted time series kept list called respective counts 
set frequent patterns termed generated 
cmax defined union frequent patterns union operation patterns defined si ti 
example union patterns cd fa bg fc 
example fa cmax afb max subpattern tree built incrementally follows sequence divided period segments 
period segment candidate frequent pattern determined search operation tree node pattern performed 
node exists count incremented 
new node created pattern count set 
candidate frequent pattern period segment called hit defined intersection period segment max pattern cmax intersection operation patterns defined si ti 
example cmax afb si hit ab algorithm mining partial periodic patterns time series database summarized steps 
time series divided number period segments value period 

patterns inserted list respective counts patterns happen frequent specified threshold inserted set 

patterns unioned form cmax 

period segment intersected cmax resulting pattern inserted tree pattern new corresponding node count incremented 

exact frequency count pattern calculated adding count node counts nodes patterns pattern subpattern 
example step fig 
frequency count cd fb acd afb 
notice frequent patterns inserted tree stored 
new algorithms incremental mining partial periodic patterns section define incremental mining partial periodic patterns problem new algorithms 
problem definition generally problem incremental mining takes input augmented database composed database new data items added timeseries dn incremented data block features dn dn dn dn incremental mining problem assumes database previously mined 
sufficient information database collected mining process currently available 
incremental mining problem intends discover frequent patterns making available information 
algorithm section available information includes tree patterns list 
unit data incremented defined 
clearly database considered incremented period segment added 
note period segment contains number features letters equal length period 
means database considered incremented number features added length period added period segment contains number patterns equal value period 
patterns inserted patterns list 
inserted pattern added count incremented 
assume period segments added data kp 
pattern incremented value ieee transactions knowledge data engineering vol 
february fig 

max subpattern tree fig 
deleting letter number period segments database incremented set may affected way 
total number period segments database confidence threshold frequency counts pattern respectively 
pattern added period segments cases 
case pattern infrequent 

case pattern infrequent frequent added set 

case pattern frequent remains frequent 

case pattern frequent infrequent removed set 
cases result updating set 
recall max pattern cmax root node tree calculated patterns set 
updated cmax updated max subpattern tree updated accordingly 
entire segments es incremental algorithm max denote max pattern cmax update 
cj component position cmax component position max ifc cj updating cj implies deletion insertion letters 
example cmax afb updated follows pattern removed patterns added max afb letter position deleted letters position position inserted 
order reflect update cmax proposed incremental algorithm contains main steps update max subpattern tree handling deletion insertion events 
step updates max subpattern tree resulting tree contains pattern contains deleted letters 
second step updates max subpattern tree resulting tree contains patterns contain inserted letters 
ct max pattern resulting removing deleted letters cmax previous example ct max abd ct max calculated easily intersecting cmax max clearly ct max equals cmax deleted letters ct max subpattern cmax 
node represents ct max node new root new fig 

max subpattern tree fig 
inserting letters node created 
consider max subpattern tree fig 

furthermore assume max afb 
ct max abd tree initially contains nodes pattern abd count pattern ab count 
aspects concerning resulting tree counts fixed children added 
consider aspects concurrently max subpattern tree scanned node intersection pattern ct max inserted count 
call operation tree update operation 
example fig 
cmax afb assume max afb egf max abd initial tree nodes contain patterns abd count pattern ab count 
performing tree update operation results inserting patterns abd bd abd ab bd ab 
fig 
gives resulting max subpattern tree note counts nodes resulting tree reset zero tree update operation starts 
recall max updated max pattern due updating 
max pattern root node max subpattern tree result second step 
input max subpattern tree step results previous step 
ct max root node pattern calculated intersecting cmax max ct max subpattern new max initial action ct max max root node created contains pattern max root node child new root node 
problem information max subpattern tree list determine counts patterns contain inserted letters patterns originally included example consider fig 
gives result applying initial action max subpattern tree fig 

patterns afb appeared nodes new tree counts determined 
frequent patterns appear ab time series scanned way scanning step max subpattern hit set mining algorithm determine aref incremental online merge mining partial periodic patterns time series databases fig 

max subpattern tree fig 
scanning time series 
frequent patterns appear exact counts 
fig 
gives tree scan 
tree fig 
pattern abd results different data segments 

time series reconsider segments 
reconsidering easy hit abd intersection max node tree 
reconsidering segment bit nontrivial hit count node incremented count node abd decremented order correctly maintain counts nodes 
notice segments need considered scanning step segments contain inserted letters 
maintain inverted list associated pattern contains period segments pattern appears avoid scan time series consider segments lists patterns added 
approach avoid additional scan time series proposed algorithm 
max subpattern tree updated reflect change max pattern cmax added period segments scanned hits inserted tree 
max subpattern tree reflects new time series database es algorithm incremental mining partial periodic patterns outlined steps 
list updated include patterns added period segments set updated consequently needed 

patterns unioned form new max 
tree updated appropriately previous discussion reflect change pattern root node 

added period segments intersected max resulting pattern inserted tree new corresponding node count incremented 

exact frequency count pattern calculated adding count node counts nodes patterns pattern subpattern 
fig 

plot inequalities relations pattern 
analysis quick analysis es algorithm shows scan database inserted letters 
scan expensive operation 
avoid scanning database maintaining inverted lists prove probability performing scan low data size large case practical applications 
assume added period segments uniformly distributed patterns 
pattern si frequency count xi new count pattern xi xi 
pattern xi confidence threshold xi xi xi added scan required 
uniform distribution missed value xi xi order add pattern xi larger assuming xi 
xi 
fig 
gives plot inequalities pattern segment si 
solution inequalities lies shaded area plot 
deduce large values solution inequalities 
probability new patterns added low probability performing additional scan database low 
words database size large cost scan operation high 
discussion scan operation happen case 
fig 
shows increasing value decrease shaded area decrease probability performing additional scan 
inverted lists approach avoid additional scan database proposed algorithm requires additional space 
additional space sum counts patterns equals space occupied original time series times value period 
information obtained original time series obtained inverted lists 
representation alternative original representation data longer require original time series 
worth mentioning inverted lists approach proposed similar way incremental mining frequent itemsets 
ieee transactions knowledge data engineering vol 
february block bl incremental mining entire segments es incremental mining algorithm discussed previous sections assumes new segments dealt simultaneously 
algorithm approach divide new period segments blocks equal size say consider updating technique times block independently 
algorithm called block bl incremental mining 
special case called single segment ss incremental mining 
section gives comparison algorithms performance analysis 
merge incremental mining approach incremental mining partial periodic patterns consider newly added period segments stand time series database apply original mining algorithm time series separately original time series database 
result new instances structures list max subpattern tree 
algorithm merges structures corresponding ones original time series database 
term algorithm merge incremental mining algorithm 
denote max subpattern trees original time series database added time series respectively 
max subpattern tree time series union operation described 
similarly denote patterns lists original time series added time series respectively 
patterns list time series union operation simple perform 
pattern count add count pattern count add count pattern count count add count merge max subpattern trees tree determine root node pattern notation cmax max max patterns respectively 
recall max patterns capture frequent patterns corresponding time series 
clearly possible pattern frequent time series frequent sub timeseries original added 
max pattern time series determined cmax max max cmax max tree updated root node pattern contains technique calculated max pattern max previously proposed algorithm 
recall update operation may trigger corresponding database scan avoided inverted lists approach 
trees root node pattern 
loss generality tree smaller number nodes 
initially set equal scanned node pattern inserted notice subpattern belong tree tree belong data span dimension ganti introduce new dimension problem incremental mining called data span dimension offers options 
unrestricted window option similar regular incremental mining problem data considered mining 
window option specified number segments data considered mining 
proposed model allow window option generalized incremental model maintenance algorithm 
full generality comes fore classes models maintained deletions tuples 
proposed incremental model maintained easily deletion segments 
user specifies window segments segments lie window removed maintained model 
recall maintained model includes patterns list max subpattern tree inverted lists 
deletion operation segment maintained model analogous insertion operation discussed far 
deleting segment performed decrementing count patterns contained segment deleting segment inverted list associated patterns 
deleting segment max subpattern tree performed decrementing count node represents hit pattern segment 
online mining online mining defined maintaining discovered patterns range thresholds 
practically online mining user able change thresholds mining process order refine mining results 
online mining restart mining process time user changes thresholds inefficient considered online 
online mining partial periodic patterns recall mining algorithm partial periodic patterns proposed discussed section uses confidence threshold extracting frequent patterns set patterns list extracting frequent patterns max subpattern tree changing confidence threshold building patterns list effect 
changing confidence threshold building tree main issue may result updating set 
discussed section updating result updating root node cmax oft 
words max subpattern tree rebuilt 
number features scanned far time series dl dl dl dn 
clearly time series divided period segments length kp certain integer shown problem transferred incremental problem features added time series database features mined 
words user changes confidence threshold value updated accordingly aref incremental online merge mining partial periodic patterns time series databases max pattern cmax 
max denote new max pattern update 
process building tree stopped features scanned far 
tree updated new root node contains similar way discussed pattern max section 
process resumes considering remaining features time series 
online algorithm features change confidence threshold 
algorithm theoretically costly analysis shows practically 
confidence thresholds change respectively 
patterns frequent new patterns added 
accordingly letters inserted max database needed 
patterns removed 
accordingly deleted letters max inserted letters 
needed 
practice appropriate user starts mining process lower threshold values gets frequent patterns tries increase values order obtain frequent patterns 
proposed online algorithm practically efficient 
note inverted lists approach discussed avoid conditions 
merge mining merge mining defined merging discovered patterns databases mined independently 
operation viewed generalization incremental mining 
input previously mined databases required discover patterns combined database applying mining algorithm 
problem arises practice database branches 
merging databases running mining algorithm entire database may appropriate time consuming 
merge mining merge mining results databases discover patterns combined database 
application merge mining parallel data mining database composed number smaller databases mined separately results combined merge mining 
procedure recursively performed mining small databases 
input merge mining algorithm number max subpattern trees number pattern lists belongs databases merged 
proposed algorithm algorithm described section merge incremental mining 
obtain max pattern cmax combined time series union operation cmax ci max denotes number time series databases combined ci max max pattern time series number tree updated root node contains combined max pattern 
trees root node pattern nodes selected table sample results power consumption database trees inserted combined tree contains aggregate mining results combined time series databases 
performance study experiments real databases 
relatively small database contains daily power consumption rates customers period year 
available project 
database size approximately megabytes 
appropriate period data corresponds weekly power consumption units days 
second database contains sanitized data timed sales transactions wal mart stores period months 
timed sales transactions data size megabytes 
appropriate period data corresponds daily transactions units number transactions hour 
experiments power consumption database time series data incremented segments period features experiments timed sales transactions database data incremented segments period month data 
databases numeric data values quantized levels low low medium high high 
power consumption data quantization done discussions domain experts low corresponds watts day level watts range 
timed sales transactions data quantization manual inspection values low corresponds transactions hour low corresponds transactions hour level transactions range 
study performance algorithms es bl ss described sections 
table gives results different values confidence threshold power consumption database 
results show incremental algorithms proposed perform better nonincremental mining algorithm 
nonincremental mining algorithm takes approximately seconds mining entire database different values confidence threshold proposed incremental algorithm es takes milliseconds 
additional overhead time paid 
consortium intelligence management electric power grid ecn purdue edu 
ieee transactions knowledge data engineering vol 
february table sample results timed sales transactions database incremental algorithms involve storing tree patterns list column table milliseconds 
additional storage needed store data structures minor compared size database percent size database 
note inverted lists approach experiment 
timed sales transactions database experiment gives similar results table 
nonincremental mining takes seconds proposed incremental algorithms es take time ranges seconds small confidence threshold values second large confidence threshold values 
table gives comparison running time proposed incremental mining algorithms varying period size constant confidence threshold percent power consumption database 
execution times nonincremental mining algorithm second column table 
table shows incremental mining algorithm ss worse algorithms especially large period sizes 
clear ss algorithm considers added segments may require scan database 
results show entire segments incremental algorithm es better merge incremental algorithm large period values 
fig 
gives comparison incremental mining algorithms varying confidence threshold constant period size power consumption database 
shows single segment incremental mining algorithm ss worse incremental algorithms 
note high drop execution time ss happens confidence threshold percent occurs drop tree size 
case number frequent fig 

time comparison respect confidence threshold power consumption database 
fig 

excluding single segment incremental mining algorithm fig 

patterns decreases length cmax root node 
scale fig 
show clear comparison algorithms es fig 
exclude algorithm ss comparison 
fig 
gives results study timed sales transactions database 
results show algorithm es performs better note fig 
high value encountered confidence threshold percent algorithm reason percent confidence threshold number frequent patterns original database happens number frequent patterns added period segments tree size original database max subpattern tree size added segments 
factors may affect performance es algorithms 
study table results respect period size power consumption database aref incremental online merge mining partial periodic patterns time series databases fig 

time comparison respect confidence threshold timed sales transactions database 
factors number levels data quantized period length periodic patterns size increment part original database 
synthesize controlled data timed sales transactions data 
synthesized data set variable number quantization levels fig 
shows difference performance es algorithm algorithm affected number quantization levels varies 
synthesized data sets size different value period length fig 
shows increase trend time increase period length 
similar behavior shown table 
drops time occur frequently prove performance depends mainly tree size original database 
fig 
shows expected increase time increase size increment part database 
figures show es algorithm outperforms algorithm 
study performance block incremental algorithm different block sizes varying confidence threshold constant period size equals power consumption database timed sales transaction data 
fig 
fig 
give comparison results databases respectively 
illustrate increasing block size reduces probability frequent patterns decreases execution time 
fig 
notice drop execution time encountered confidence threshold percent algorithms 
reason fig 

time comparison respect period length percent confidence threshold 
number frequent patterns added segments happens zero point 
note sudden increase execution time happens confidence threshold percent smallest block sizes 
case root max subpattern tree gets updated implies max subpattern tree modified significantly described section 
results increase execution time 
study performance algorithm es considering inverted lists approach discussed sections avoid scan database 
inverted lists approach useful scan needed inserted letters cmax discussed earlier compare performance algorithm scan needed 
table illustrates particular cases inverted lists approach outperforms approach scanning database average speedup percent 
course expense additional space occupied inverted lists 
study performance proposed algorithm merge mining operation 
timed sales transactions database table shows results merge mining time series specific stores versus mining combined time series 
results show achieve high speedup merge mining column mining combined time series column 
note merge mining assumes time series mined previously 
results show total time fig 

time comparison respect number quantization levels 
percent confidence threshold percent confidence threshold 
ieee transactions knowledge data engineering vol 
february fig 

time comparison respect increment size 
percent confidence threshold percent confidence threshold 
mining time series applying merge mining algorithm lower time needed mining combined time series 
believe happens increased size combined time series 
various new algorithms proposed incremental mining problem prove fit online mining problem 
performance analysis shows incremental mining algorithm best fig 

time comparison different sizes block incremental mining power consumption database 
fig 

time comparison different sizes block incremental mining timed sales transactions database 
proposed incremental algorithms 
inverted lists approach expensive saves time avoids database 
define new problem merge mining propose algorithm solving context partial periodic patterns time series databases 
performance analysis shows merge mining promising problem investigated context types mining patterns types databases 
acknowledgments supported part national science foundation iis eia iis aro purdue research foundation crane jointly purdue university center sensing science technology integrated detection hazardous materials program ncr wal mart 
agrawal faloutsos swami efficient similarity search sequence databases proc 
fourth int conf 
foundations data organization algorithms 
agrawal lin sawhney shim fast similarity search presence noise scaling translation time series databases proc 
st int conf 
large databases 
agrawal psaila active data mining proc 
int conf 
knowledge discovery data mining 
agrawal psaila wimmers zait querying shapes histories proc 
st int conf 
large databases 
table comparison results respect inverted lists approach power consumption database aref incremental online merge mining partial periodic patterns time series databases table comparison results regarding merge mining algorithm timed sales transactions database agrawal srikant fast algorithms mining association rules proc 
th int conf 
large databases 
agrawal srikant mining sequential patterns proc 
th int conf 
data eng 
bettini wang jajodia lin discovering frequent event patterns multiple granularities time sequences ieee trans 
knowledge data eng vol 
pp 
mar apr 
chan fu efficient time series matching wavelets proc 
th int conf 
data eng 
cheung han ng wong maintenance discovered association rules large databases incremental updating technique proc 
th int conf 
data eng 
ester kriegel sander xu incremental clustering mining data warehousing environment proc 
th int conf 
large databases 
faloutsos ranganathan manolopoulos fast subsequence matching time series databases proc 
acm sigmod int conf 
management data 
advances knowledge discovery data mining fayyad piatetsky shapiro smyth uthurusamy eds 
aaai mit press 
feldman aumann amir mannila efficient algorithms discovering frequent sets incremental databases proc 
sigmod workshop data mining knowledge discovery 
ganti gehrke ramakrishnan demon mining monitoring evolving data proc 
th int conf 
data eng 
garofalakis rastogi shim spirit sequential pattern mining regular expression constraints proc 
th int conf 
large databases 
gehrke ganti ramakrishnan 
loh boat optimistic decision tree construction proc 
acm sigmod int conf 
management data 
han dong yin efficient mining partial periodic patterns time series databases proc 
th int conf 
data eng 
han gong yin mining segment wise periodic patterns time related databases proc 
fourth int conf 
knowledge discovery data mining 
online association rule mining proc 
acm sigmod int conf 
management data 
mannila toivonen verkamo discovering frequent episodes sequences proc 
int conf 
knowledge discovery data mining 
quinlan induction decision trees machine learning vol 
pp 

rafiei similarity queries time series data proc 
th int conf 
data eng 
srikant agrawal mining sequential patterns generalizations performance improvements proc 
fifth int conf 
extending database technology 
thomas ranka efficient algorithm incremental association rules large databases proc third int conf 
knowledge discovery data mining 
utgoff id incremental id proc 
fifth int conf 
machine learning pp 

wang tan incremental discovery sequential patterns proc 
sigmod data mining workshop research issues data mining knowledge discovery 
walid aref associate professor computer science purdue university 
research interests developing database technologies emerging applications spatial multimedia genomics databases 
interested indexing data mining scalable media servers geographic information systems gis 
professor aref research supported national science foundation don purdue research foundation panasonic microsoft received career award national science foundation 
member acm ieee 
mohamed received bsc msc degrees computer science alexandria university egypt respectively 
pursuing phd degree computer science purdue university 
current research interests include data mining data quality object orientation 
ahmed elmagarmid received bsc degree university dayton ms phd degrees ohio state university respectively 
chief scientist office strategy technology hewlett packard hp 
responsible software strategy coming corporate cto office 
chief scientist office strategy technology contributes cross roadmap initiatives serves technology council hp 
works closely business units identify areas leverage software directions hp 
director indiana center database systems indiana telemedicine 
leave purdue university serves professor computer science 
served faculty pennsylvania state university university padua 
worked long term consulting harris commercial systems ibm bellcore telcordia mdl mcc csc dod padua chamber commerce italian government 
received national science foundation presidential young investigator award president ronald reagan distinguished awards ohio state university university dayton respectively 
dr elmagarmid editor distributed parallel databases international journal editor ieee transactions knowledge data engineering information sciences journal journal communication systems editor book series advances database systems 
written books papers database systems 
senior member ieee ieee computer society 
