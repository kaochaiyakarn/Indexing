link oping electronic articles computer information science vol 
nr link oping university electronic press link oping sweden www ep liu se ea cis application comparison automated theory formation inductive logic programming simon colton division informatics university edinburgh edinburgh eh hn united kingdom dai ed ac uk published october link oping university electronic press link oping sweden link oping electronic articles computer information science issn series editor erik sandewall simon colton typeset author formatted style recommended citation link oping electronic articles computer information science vol 
nr www ep liu se ea cis 
october 
url contain link author home page 
publishers keep article line internet possible replacement network period years date publication barring exceptional circumstances described separately 
line availability article implies permanent permission read article line print single copies unchanged non commercial research educational purpose including making copies classroom 
permission revoked subsequent transfers copyright 
uses article conditional consent copyright owner 
publication article date stated included production limited number copies archived swedish university libraries written works published sweden 
publisher taken technical administrative measures assure line version article permanently accessible url stated unchanged permanently equal archived printed copies expiration publication period 
additional information link oping university electronic press procedures publication assurance document integrity please refer www home page www ep liu se conventional mail address stated 
automated theory formation involves production examples concepts hypotheses concepts 
hr program performs automated theory formation form theories mathematical domains 
addition providing plausible model automated theory formation hr applied applications machine learning 
discuss hr application inducing de nitions examples scienti discovery problem solving puzzle generation 
problem look theory formation applied mention initial results hr 
aim describe applications great detail provide overview hr problems 
facilitate comparison hr progol machine learning system employs inductive logic programming 
comparing concept formation programs perform comparing programs applied problems discussed 
automated induction concept de nition positive possibly negative examples concept known machine learning problem 
instance michalski posed problem learning concept de nition describing trains going east going west 
techniques inductive logic programming ilp perform task designed search goal directed manner 
form concepts way eventual output single concept 
automated theory formation starts roughly information automated concept induction background information including concepts examples 
output programs theory containing concepts conjectures concepts single concept 
reason automated theory formation programs goal directed worry interestingness concepts conjectures produce order theory interesting 
series publications including introduced notion automated theory formation :10.1.1.37.8426
implementation hr system applied automated theory formation various machine learning tasks mathematics including scienti discovery invention integer sequences ii concept induction sequence extrapolation iii creative problem solving iv puzzle generation rst reported automated theory formation common inductive logic programming enabled compare hr progol ilp implementation :10.1.1.31.1630
aim comparison place style automated theory formation hr undertakes machine learning paradigm 
compared programs terms concept formation undertake expand 
extend comparison looking way programs undertake tasks 
serves demonstrate automated theory formation useful technique solving range learning problems 
enable comparison describe automated theory formation 
give overview hr followed description applications 
similarly overview progol describe applications 
compare programs conclude looking nature applications suggesting applications automated theory formation 
automated scienti theory formation term automated scienti theory formation overloaded certain extent machine learning various methods proposed heading 
approach look structure content scienti theories propose methods background information theory produced 
theory discusses objects particular nature 
example pure mathematics number theory integers graph theory concerns graphs group theory concerns groups 
similarly domains objects interest theory forms example acids chemistry sub atomic particles physics 
theories typically contain examples objects interest ii concepts discuss nature examples iii statements highlighting relationships concepts 
example nite group theory groups isomorphism fewer elements 
concepts describing groups example cyclic groups particular type group centre group subset elements group 
group theory contains statements relating concepts instance group cyclic centre group contain elements abelian 
similarly chemistry examples acids acid specialisations concept acids instance organic acids 
statements acids adding acid base produce salt water 
mathematics statements proved sequence logical inferences 
statements usually called conjectures proved theorems 
theories contain proofs counterexamples open conjectures truth unknown 
non mathematical domains possible formalise statements appeal mathematical proofs 
plausibility statement demonstrated experiments explained theory formation 
instance experiments acids bases mixed add plausibility statement acids bases salt solution repeatedly observed 
explain phenomenon chemists may provide reaction mechanism show bonds chemicals break re form reaction 
initial synopsis theories contain automated theory formation able nd examples objects interest invent new concepts plausible statements relating concepts 
mathematics theory formation involve proving disproving conjectures 
automatic approaches individual tasks 
instance progol program invent new concepts program nd reaction pathways chemistry :10.1.1.31.1630
similarly mathematics mathematica program perform calculations symbolic manipulations programs conjectures otter program prove conjectures mace program nd counterexamples 
attempts automate theory formation 
am program rst explore mathematical domains concept formation conjecture making 
gt program automated mathematical activities enabling example generation theorem proving concept formation conjecture making 
hr program performs automated theory formation domains pure mathematics :10.1.1.37.8426
functionality hr start just axioms nite algebra group theory 
nd examples invent concepts conjectures prove theorems nd counterexamples false conjectures 
hr number theory graph theory intend hr mathematical domains 
hr program hr program named mathematicians hardy ramanujan designed form theories domains mathematics group theory graph theory number theory :10.1.1.37.8426
hr starts background information axioms nite algebra concepts number theory divisors integers multiplication addition 
concept supplied de nition user supply nite set examples necessary algebraic domains examples generated axioms 
hr uses general production rules base new concept old concept case say production rule unary old concepts binary production rule 
produces set concepts form core theory 
production rule generates de nition set examples new concept 
table describes action production rule indicating binary production rule 
example starting concept divisors integers number theory gure shows hr constructs concept prime numbers 
concept produced size production rule count number subobjects divisors followed split rule instantiate number 
extracts numbers exactly divisors prime numbers 
detailed description production rules see 
boxes gure contain concepts identi cation concept rst 
tuples letters representing objects concept relates de nition relation tuple 
instance indicates concept describes singletons integers divisors operator commonly overloaded mathematics divisors set size 
rule action production rule compose composes predicates conjunction exists introduces existential quanti cation forall introduces universal quanti cation match equates variables predicates negate finds complements predicates negating property size counts number subobjects satisfying predicate split instantiates variables table action hr production rules important note concept set examples ii de nition iii categorisation examples hr available iv set conjectures involving concept 
instance hr working integers number theory concept prime numbers examples de nition gure 
call specialisation concept produces binary categorisation integers specialises concept integer prime non prime integers 

size 
split construction concept prime numbers theory hr produces set conjectures prime numbers example prime numbers perfect squares 
producing concepts hr conjectures empirical evidence 
particular notices examples new concept exactly old concept data available conjecture de nitions concepts logically equivalent producing conjecture 
similarly notices examples concept examples concept implication conjecture 
nd examples concept non existence conjecture examples whatsoever 
nite algebras hr invokes otter theorem prover prove conjectures 
otter unsuccessful hr uses mace model generator nd counterexample disprove conjecture 
way hr forms theory contains concepts examples open conjectures theorems proofs 
improve quality theories produces hr uses heuristic measures estimate worth concepts performs best rst search interesting concepts basis new concepts interesting ones 
user sets weights weighted sum measures taken estimate worth concept 
measures include intrinsic properties concept number examples relational measures novelty categorisation produces discussed 
quantity quality conjectures concept appears assessed concepts appearing interesting conjectures assessed interesting appearing dull conjectures 
worth theorem assessed length proof produced otter longer proofs indicating interesting conjecture statement 
hr completes cycle mathematical activity concept formation drives conjecture making theorem proving turn improves concept formation 
hr improves previous theory formation programs am gt incorporating theorem proving am prove theorems able domains gt graph theory 
application automated theory formation inducing de nitions examples problem inducing de nition concept positive examples concept possibly negative examples known machine learning explored possibility hr fashion 
hr learn de nitions integer sequences discussed applied hr michalski style train problems program asked nd reason certain subset trains going east certain characteristics train example shape 
naive way theory formation learning tasks supply hr background knowledge ask form theory stopping concept examples matching positive examples target concept matching negative examples 
focus theory formation adapted hr heuristic search favour building concepts achieved categorisation closer achieved target concept 
instructive note general approach failed learn integer sequences 
discernible gradient measures hr uses hill climbing possible see details 
heuristic search unary rst search enhanced look ahead mechanism 
unary rst search combination depth rst breadth rst search unary production rules exhaustively new concept returning binary production rules old concepts 
way new concept receives preliminary development combined previous concepts 
look ahead mechanism comprises set ecient procedures production rule 
check newly formed concept passing production rule possibly followed transform concept target concept 
example target concept positive examples negative examples hr forms concept number divisors lookahead mechanism attached split production rule uses new concept notice divisors true negative examples 
step involving number divisors concept split production rule inserted top agenda carried 
lookahead mechanism faster performing theory formation step overheads involved performing theory formation step majority time lookahead mechanism quickly tells pattern terminates 
hr successful problems trains integer sequences supply results 
particularly ective concept learned combination old concepts concept odd prime numbers combines concepts odd numbers prime numbers 
depth rst breadth rst unary rst searches nd concept quickly look ahead mechanism 
look ahead mechanism odd numbers invented soon prime numbers introduced hr notices positive examples odd prime negative examples 
hr combines concepts reaches solution faster time taken learn concept reduces just seconds 
scienti discovery hour hr produce concepts number theory 
possibility hr producing new interesting concepts dicult tell general concept new interesting 
number theory encyclopedia integer sequences contains sequences collected years neil sloane contributions mathematicians 
concept hr produces number theory interpreted integer sequence missing encyclopedia gives indication means guarantee concept may novel 
encyclopedia give indication new integer sequences hr produces interesting 
chosen sequence enabled hr nd sequences encyclopedia empirically related relations interpreted conjectures trivial example sequence prime numbers hr conjecture square numbers 
noticing prime numbers encyclopedia entry square numbers 
nding disjoint sequences hr able nd subsequences chosen sequences 
due large number sequences encyclopedia sequences related chosen output implemented pruning techniques discard dull results 
example desirable sequence conjectured disjoint chosen sequence terms distributed roughly part number line chosen sequence 
sequences occupy roughly part number line share terms increases possibility conjecture true interesting 
hr discards conjectures disjoint sequences overlap ranges falls minimum percentage speci ed user 
nding conjectures relating sequence hr invented sequences encyclopedia hr provides evidence sequence interest 
invent investigate approach successfully led sequences invented hr added encyclopedia supplied interesting conjectures 
example sequence integers number divisors prime hr invented produced hr encyclopedia 
asked nd subsequences sequence rst answer produced sequence integers sum divisors prime submitted encyclopedia 
interpreted conjecture result states integer sum divisors prime number divisors prime 
subsequently proved result know certain new certainly adds interest sequence hr invented 
information application hr invention integer sequences see 
hr produced new sequences invent investigate approach produced new sequence nding de nition sequence 
determined encyclopedia integer sequences contained sequence starting exceptions 
sequence starting sequence starting 
set hr task inventing sequences starting terms 
case seconds hr identi ed concept prime numbers tted examples sequence encyclopedia 
hr solution rst sequence de nition fairly complicated see submitted encyclopedia 
creative problem solving book mathematical problem solving paul zeitz suggests plug method calculations performed results analysed see pattern emerges provide insight problem 
zeitz supplies problem taken hungarian mathematics contest example approach leads solution show product consecutive integers square number 
plug method zeitz calculates examples product consecutive integers sequence calculations continues eureka moment occurs realisation square 
zeitz conjecture numbers square square numbers 
zeitz states getting conjecture crux move 
point problem exercise 
nish problem necessary show product consecutive integers written square minus applied hr plug problems nature getting suggestions lead eureka moment user 
hr set numbers related problem asked suggest properties numbers hope suggestions provide insight 
new concept hr introduces numbers property prescribed concept de nition output 
example hungarian contest problem hr numbers 
forms theory invents types number numbers satisfy de nition particular number type de nition output 
course suggestions provide insight example numbers 
hr eventually invents concept squares minus nds conjecture problem 
application hr problem solving experimenting compiling corpus problems plug approach help 
hope attach functionality computer algebra system maple mathematica 
information application hr problem solving see 
puzzle generation theorem proving attracted attention conjecture making automated mathematics similarly problem nding solutions puzzles researched question generating interesting puzzles 
interested particular type puzzle odd puzzles 
puzzles ask problem solver assumed human choose object set similar objects give reason choice 
reason terms property share true object chosen odd 
formalise problem generating odd puzzles way puzzle set objects taken possibly nite set examples supplied user specialisation concept positive examples negative example 
negative example odd solution concept producing categorisation provides reason odd 
concentrate case 
example integers concept numbers set integers forms puzzle 
add speci cation problem note solution puzzle satisfying human solvers 
ways solution unsatisfying concentrate solution similar lesser complexity solution unsatisfying 
example consider puzzle number odd 
simple solutions puzzle odd odd ii odd square numbers rst solution answer numbers easily recognised square numbers 
detract fact solutions similar complexity solver gave solution correct solver probably ed puzzle 
additional criterion puzzles solution similar lesser complexity 
hr increase likelihood puzzle satis es criteria claim rule solutions completely puzzle hr produces may unsatisfying 
true human generated puzzles 
application hr puzzle generation early stages 
domain far nite number examples call shortening puzzle diagrams 
gure give example 
circle square triangle corners total 
initial concepts hr starts domain describe shapes positions 
hr complicated concepts diagonals rotation re ection produce 
produce puzzles start hr just perform concept formation production rules compose enables exhaust search 
hr introduces counterexamples false conjectures total hr searches counterexample 
search exhausted odd 
puzzle generated hr seconds stage introduced counterexamples hr de ned specialisations 
hr takes specialisation concept turn attempts embed puzzle 
hr searches positive negative example chosen way specialisations provide rival solution 
rival solution odd di ers negative example chosen choosing examples rival solution increases chance puzzle satisfying guarantee 
experimenting di erent strategies producing puzzles needs done increase yield 
approach distinct puzzles including gure 
puzzle embeds concept having exactly triangle odd number puzzle easy solve 
importantly rival solutions puzzle contrived 
instance number considered odd circles bottom left top right diagonal circle triangle 
hr start concept diagonals invent concept notice rival solution 
rival solutions contrived easy solve solution puzzle satisfying people need con rm experimentation 
progol program inductive logic programming ilp general purpose machine learning technique 
concepts represented rst order logic programs advantages including interpreted underlying logic programming language 
progol program uses ilp underlying prolog interpreter :10.1.1.31.1630
progol usually employed produce logic program de nes set positive examples negative examples 
de nitions background predicates supplied user 
example progol learn concept square numbers background knowledge positive negative examples gure 
mode declarations square 
multiply 
background knowledge 

multiply positive examples square square square 
negative examples square 
square 
square 
square 
square 
square 
square 
input progol learning concept square numbers progol produces answer square multiply 
prolog program identify square number multiplication number 
mode declarations top input gure determine format logic program learned indicating known variable indicating new variable indicating possible instantiation 
progol searches concepts learnability framework 
framework prior probability distribution space concepts probability likelihood concept required 
construction new concepts achieved inverting deductive rules inference produce inductive rules 
rule deduction inverted resolution rule 
simplest form states know deduce progol inverts entailment relation generalises inverse resolution 
ect amounts asking question observed clauses logic programs data clauses resolved give observation 
absorption identi cation inductive rules inference obtained way absorption identi cation absorption rule read observe hypothesis true resolved produce observations 
interpreting hypothesis logic program feasibility true checked data 
identi cation rule read similarly 
induction rules derived inverting resolution steps intra construction inter construction intra construction hypothesis produced states clauses true resolved give observed clauses resolved give observed new predicate symbol introduced likewise predicate introduced inter construction rule 
phenomenon called predicate invention necessary enable ilp programs learn correct de nition concept 
example constructing logic program insertion sort intra construction required introduce insert predicate 
application inductive logic programming look applying inductive logic programming particular progol program applications scienti discovery creative problem solving puzzle generation 
ignore application concept induction main functionality progol progol proved occasions inducing concept de nitions 
knowledge progol applied applications speculate achieved 
nature speculation terms main functionality ilp induce de nition positive negative examples 
speculate progol program able learn de nition set positive negative examples concept 
acknowledge progol certainly able perform tasks interested comparing automated theory formation automated concept induction 
scienti discovery general progol perform scienti discovery tasks identifying de nition concept categorisation examples positives negatives known 
instance applied data experiments involving inhibition coli positive examples concept pairs drugs known ective inhibition task task learn de nition concept ect nd rule describing ective 
rule derived concept may new concepts emphasis nding de nition known concept 
progol responsible nding entirely new concept interesting discussed 
creative problem solving applied progol type problem speculate 
discussed speculation functionality progol learn single concept ignoring clustering abilities 
problem learn de nition concept learn property concept 
machine learning terminology concept thought cluster problem nd larger cluster containing 
hr chose nding new concepts generalisations concept 
way progol include negative examples positive examples attempt learn de nition concept generalisation 
deciding negative examples include possibly problematic systematically choosing may time consuming 
puzzle generation creative problem solving speculate progol application 
learning task set hr produce set specialisation concepts coverage simple concepts domain rival solutions checked 
approach progol supply di erent binary categorisations 
learn de nitions concepts keeping pre de ned complexity limit 
far ways categorise selection categorisations required smaller number 
example di erent ways categorise positive negative examples may possible learn de nitions set 
feasible alternative progol task 
firstly choose set choose negative example positive examples 
attempt learn concept categorisation examples record complexity de nition produced 
achieved legal puzzle generated necessary check rival solutions 
way re categorise examples choosing new negative example attempt nd new de nition 
de nitions larger complexity rst certain extent puzzle odd 
approach appears plausible approach hr need experiment check 
problem approach small number examples positive negative examples 
small number examples progol may able learn de nition achieves compression 
may nd random choice rarely leads set simply de ned odd 
comparison hr progol concept formation striking similarity concepts progol hr form 
highlight examples number theory 
firstly progol concepts formed de nitions conjunctions predicates predicates may variables repeated 
produces concepts hr form compose match exists production rules 
example background concepts integers multiplication hr produces de nition square numbers progol produces de nition square multiply 
secondly progol user set mode declarations describing background predicates appear invented predicates 
mode declarations specify variables instantiated negation predicates allowed 
ability instantiate variables corresponds exactly hr split production rule ability negate predicates corresponds negate rule 
combination negated existentially quanti ed predicates corresponds concepts produced hr forall production rule 
example hr de nes numbers jn similarly background predicate divisors allowed instantiate variables progol produces de nition divisor 
supply additional predicates background knowledge set theory standard prolog predicates setof length progol cover concepts produced size production rule 
example hr de nes function number divisors integer way progol produces equivalent de nition tau setof divisor length 
hr production rules progol produce concepts similar nature 
interestingly covering hr production rules requires di erent aspects progol functionality hr production rule size rule commonly additional background knowledge progol 
progol hypothesis superset hr implement production rules situation change 
particular progol de ne concepts recursively specifying base case step case 
hr produce concepts plan implement path production rule enable 
applications hr progol form similar concepts di er applied problem 
learning de nitions concepts progol generates possible answers builds new answers ones achieve compression rst 
hand application hr concept direct search answer ectively lookahead mechanism enables take shortcut 
tweaking progol appears positive examples concept progol consider complicated de nitions achieves compression 
may drawback learning mathematical concepts de nitions fairly complicated examples scarce 
contrast hr carry regardless complexity concepts formed answer 
hand inductive logic programming powerful technique hr lookahead mechanism mechanism drive search search nearly 
hr application scienti discovery slightly di erent progol 
progol nd possibly complicated de nitions scienti concepts categorisation positive negative examples 
de nitions cases interpreted rules explain phenomenon di erentiating positive negative examples 
progol success approach areas particular chemistry biology medicine 
hr approach discovery exploratory identify concepts new 
supply hr information concepts hoping nd categorisation positive negatives supplied fundamental concepts domain 
concepts domain hr identify interesting search heuristic search reach interesting concepts 
hr concept missing encyclopedia integer sequences mined encyclopedia nd interesting conjectures add interest concept 
contrast progol need nd reasons de nitions interesting fact explain observed phenomenon interesting fact point exercise nd de nition 
dicult comment problem solving puzzle generation applications study progol best applied problems 
mainly suggested progol terms applying de nition induction techniques problem hand looked clustering ability progol may may suitable approach 
problem solving nature applied hr may problematic progol involves nding de nition concept supplied generalisation concept 
suggested macro progol negative examples changed positives de nition sought produce generalisation 
may turn computationally expensive choices positives negatives 
similarly puzzle generation suggested progol learn de nitions sets examples show rival solution occurs 
problem solving puzzle generation applications hr nd concept rst examples 
contrast suggested progol nd examples rst nd de nition ts 
perform experiments progol determine approach better problems 
case puzzle generation human writing puzzle start writing examples try nd concept embedded 
may nd constraint approach ective puzzle generation 
highlighting commonalities applications described draw application automated theory formation general 
rst observation applications part goal learn concept certain properties 
clear application inducing de nition examples goal nd concept achieves categorisation examples supplied 
scienti discovery way hr performs goal nd concept categorisation known 
concept property interesting 
application creative problem solving aim nd concept generalisation concept 
application puzzle generation aim nd concept examples puzzle simple rival solution 
check rivals hr needs generate large set concepts rival 
conclude main applications theory formation nd concept de nition property ii nd entirely new concept particular property iii nd set concepts cover de nitions particular form 
exception generation novel integer sequences concept formation main aspect theory formation required problem 
hope apply conjecture making aspects theory formation areas arti cial intelligence particular constraint satisfaction problems automated theorem proving 
role user di ers task 
user takes part puzzle generation application induction de nitions supplying positive negative examples making adjustments settings 
application creative problem solving user interpret property hr suggests determine provides insight problem hand 
similarly discovery integer sequences user interpret relations hr nds conjectures attempt prove disprove 
case user choose hr new sequences investigate 
application hr performed di erent search concepts 
application required additional module complete task theory formation 
induction de nitions unary rst search implemented lookahead mechanism 
scienti discovery application heuristic search novelty heuristic see employed ability data mine encyclopedia integer sequences added :10.1.1.37.8426
problem solving application di erent heuristic search ability notice generalisations concept added 
puzzle generation exhaustive breadth rst search employed abilities choose examples puzzle check rival solutions implemented 
theory formation provide initial information application varying search improve performance processing required complete task 
progol generally induce de nition set positive negative examples de nition subset trains distinguishes trains 
reactive process concept immediately sought de nes examples 
possible imagine scenario discussed program set trains predicates describing allowed say hour prepare east west question nature 
ective way program spend time invent concepts related trains particular ways classifying trains positive negative class 
proactive machine learning task emphasis studying trains trying learn particular feature 
gave task study trains hr hour produced specialisation concepts 
ways split objects classes user chose subset trains random chance hr supply reason trains 
performed similar pro active learning tasks number theory agency theory formation programs 
shown theory formation applied di erent learning tasks highlighted task involved additional functionality implemented hr role user 
claims theory formation best way approach problems hope shown useful tool tasks involving learning 
compared hr progol terms concepts form application proposed application problems described 
shown progol covers concepts hr form hr developed speci cally mathematical domains production rules corresponds additional background information progol 
suggested tasks puzzle generation necessary nd set concepts just problem solving necessary nd concept categorisation known theory formation may applicable de nition inducing functionality progol mainly employs 
tested progol areas comment general progol employed generate puzzles solve problems type discussed 
applications envisage automated theory formation hr 
particular applied hr generation implied induced constraints constraint satisfaction problems 
conjecture theorem concept hr principal turned new constraint csp 
particular choco constraint programming language generate quasigroups theorems hr additional constraints concepts invented hr specialise search 
classes quasigroups additional constraints enabled choco nd larger solutions cases constraints improved eciency search 
hope apply hr automated theorem proving user supplies conjecture requires proof 
intend test see sequence encyclopedia integer sequences 
initial theory formation proof attempt decrease time taken prove theorem 
theory produced supply lemmas concepts conjecture statement useful proof 
csps necessary hr determine lemma useful particular theorem 
applying hr di erent problems hope show exploratory theory formation type hr undertakes implements important intelligent activity uses arti cial intelligence 
acknowledgments alan bundy toby walsh continued detailed input hr project 
stephen muggleton chris bryant richard depth discussions progol hr chemistry 
herbert simon enthusiastic discussions prospects automated puzzle generation problem solving 
supported epsrc gr author department computer science university york 
hansen 
finding relations polynomial time 
proceedings th international joint conference arti cial intelligence pages 
colton 
numbers machine invention 
journal integer sequences www research att com sequences jis 
colton 
assessing exploratory theory formation programs 
proceedings aaai workshop new research directions machine learning 
colton 
automated plugging 
kerber editors computation automated reasoning pages 
peters 
colton 
automated theory formation pure mathematics 
phd thesis division informatics university edinburgh 
colton bundy walsh :10.1.1.37.8426
hr automatic concept formation pure mathematics 
proceedings th international joint conference arti cial intelligence pages 
colton bundy walsh 
agent cooperative theory formation pure mathematics 
proceedings aisb symposium creative cultural aspects applications ai cognitive science pages 
colton bundy walsh 
automatic identi cation mathematical concepts 
machine learning proceedings th international conference pages 
colton bundy walsh 
automatic invention integer sequences 
proceedings seventeenth national conference arti cial intelligence pages 
colton bundy walsh 
notion interestingness automated mathematical discovery 
international journal human computer studies 
colton miguel 
automatic generation implied induced constraints 
technical report apes apes research group 
available www dcs stand 
ac uk apes html 
colton miguel 
constraint generation automated theory formation 
proceedings th international conference principles practice constraint programming pages 
epstein 
discovery mathematical theorems 
proceedings th international joint conference arti cial pages 

conjectures 
discrete mathematics 
finn muggleton page srinivasan 
discovery inductive logic programming system progol 
machine learning 
jain osherson royer sharma 
systems learn 
mit press 
king muggleton sternberg 
drug design machine learning inductive logic programming model relationships analogues binding 
proceedings national academy sciences 
lenat 
am discovery mathematics heuristic search 
lenat davis editors knowledge systems arti cial intelligence 
mcgraw hill advanced computer science series 
mccune 
otter user guide 
technical report anl argonne national laboratories 
mccune 
davis putnam program application nite rstorder model search 
technical report anl mcs tm argonne national laboratories 
michalski larson 
inductive inference vl decision rules 
proceedings workshop pattern directed inference systems published sigart newsletter acm pages 
muggleton 
inductive logic programming 
new generation computing 
muggleton :10.1.1.31.1630
inverse entailment progol 
new generation computing 
muggleton de raedt 
inductive logic programming theory methods 
logic programming 
muggleton page 
learnability model universal representations 
technical report prg tr computing laboratory university oxford 
ripley 
pattern recognition neural networks 
cambridge university press 
robinson 
machine oriented logic resolution principle 
journal acm 
simon newell 
heuristic problem solving advance operations research 
operations research 
sloane 
online encyclopedia integer sequences 
www research att com sequences 
vald es erez 
machine discovery chemistry new results 
arti cial intelligence 
wolfram 
mathematica book fourth edition 
wolfram media cambridge university press 
zeitz 
art craft problem solving 
john wiley sons 
