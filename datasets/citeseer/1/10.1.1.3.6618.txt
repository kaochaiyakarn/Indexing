flexible framework estimation coverage metrics explicit state software model checking edwin rodr guez matthew dwyer john hatcliff robby department computing information sciences kansas state university 
explicit state model checking studied technique verification concurrent programs 
due exponential costs associated model checking researchers focus applying model checking software units programs 
introduced framework allows developers specify model check rich properties java software units java modeling language jml 
overlooked problem research model checking software units problem environment generation develop code test harness representing behaviors contexts unit may eventually deployed purpose driving unit checked relevant execution paths 
build previous testing community focus coverage information assess appropriateness environments guide design modification environments model checking software units 
novel aspect inclusion specification coverage jml specifications addition code coverage approach assessing quality environments specifications 
study ideas built framework called manta top bogor software model checking framework allows integration variety coverage analysis model checking process 
show framework add different types coverage analysis model checker bogor helped find coverage holes examples 
initial effort describe methodology code specification aid development appropriate environments jml specifications model checking java units 
building concurrent object oriented software high levels assurance challenging due difficulty reasoning possible concurrent task interleavings interference interactions shared data structures 
past years projects demonstrated model checking technology applied detect flaws types software systems including concurrent object oriented systems 
model checking useful analysis supported part army research office daad darpa program afrl contract nsf ccr lockheed martin rockwell collins 
nichols hall manhattan ks usa 
edwin dwyer hatcliff robby cis ksu edu concurrent systems explore program states represented possible execution interleavings threads system spotting intricate errors 
exhaustive nature model checking difficult scale large systems 
lack scalability due mainly state space explosion problem systems complex state space grows exponentially making difficult analyze large systems having analysis exhaust available memory 
reasons believe natural apply model checking software units modules systems 
specifically software model checking envisioned part development quality assurance methodology incorporated unit testing 
model checking software unit typically desires specify check unit behavior possible hope detecting bugs possible 
past model checkers supported checking temporal property specifications simple state predicates assertions 
enhance ability developers specify meaningful properties software units extended bogor software model checking framework support checking rich specifications written jml java modeling language 
jml developers specify class invariants method pre post conditions contain detailed constraints variables data structures various forms universal existential quantification data 
apply model checking software units jml specifications developer needs follow approach similar respects steps involved traditional unit testing 
unit testing develops test harness method calls unit specific sets parameter values examines results method calls invalid results indicating failed test 
applying model checking software modules similarly test harness termed closing environment environment drive unit particular execution paths 
scale complexity software unit interface may vary greatly unit may consist multiple classes interfaces expose fields methods variety mechanisms method call inheritance interface implementation 
consequently general environment unit designed accommodate legal modes external interaction 
environment sequence interactions represent behavior program contexts unit larger piece software 
model checking aims exhaustively explore program execution paths important environment model checking units generate large extent possible execution paths unit occur unit deployed part larger software system 
constructing environments purpose model checking surprisingly difficult 
example note took months construct environment correctly modeled context deos real time operating system scheduler 
furthermore engler describe proper environment construction main impediments applying model checking opposed techniques including static analysis bug finding source code 
bandera environment generation tools provides basic support addresses challenges en countered deos case study treat complexities arise model checking units jml specifications :10.1.1.112.326
setting encounters additional questions complete test harness comes stressing behaviors referred specification dually complete specifications respect behaviors exercised test harness module 
environment determines behaviors system explored model checking directly influences cost checking ability find bugs 
seek build extensive done testing community emphasize various types coverage means determining suitability environment guiding construction refinement environments 
variety strategies developing environments coverage possible example generalizing environment increase coverage adding additional environments provide complementary coverage 
previous model checking code coverage information guide heuristic search strategies determine completeness analysis large software systems including tcp implementations 
view collection coverage information integral part model checker implementation application focusing specifically interaction checking strong specifications written jml 
particular coverage information determine adequacy environment distinguish notions code coverage specification coverage purpose addressing interesting questions relationships code unit specification unit environment check unit 
addition determining code coverage unit respect environment appropriate notions coverage specification 
effective bug finding respect specification high specification coverage code coverage required 
mismatch code specification coverage revisions environment code specification suggest 
cost checking ability find bugs sensitive number generality environments achieve level coverage 
experiment ideas answer questions built extensible framework bogor called manta model checking analysis test harness adequacy implementing collection variety forms coverage information 
describe manta implement coverage estimation procedures show find coverage holes models triggering refinement test harnesses systems 
summarize lessons learned attempt lay methodology uses coverage information help developers build environments appropriate model checking units strong specifications written jml 
rest organized follows 
section discusses general architecture manta framework major components configured effective estimation coverage metrics bogor 
section show results experiments conducted manta implement different types coverage estimation analyses briefly discuss benefits implications results application coverage metrics model checking 
section presents preceding area coverage metrics estimation model checking related works 
section conclude giving drawn experiences research 
need coverage metrics model checking associated model checking represents exhaustive verification explores possible states misled users believe model checker completes specification violations reported system free errors 
believe commonplace errors specifications environment encodings lead successful checks essentially meaningless explore tiny portion behavior system 
consider shows excerpts concurrent implementation linked list 
analyze code construct environment 
general strives develop environments concurrent order expose errors related unanticipated interleavings non deterministic ordering method calls order expose errors related unanticipated calling sequences unfortunately degree concurrency non determinism environment precisely factors lead exponential explosion cost model checking 
reasons users model checkers typically develop restricted environments limited number threads thread implements specific pattern method calls 
took approach developing environment shown 
fed linked queue code driver model checker model checker reported specification violations 
examining manta output code coverage low 
problem lies method run 
processing done thread reduces inserting item list removing item list 
assessment hard see doing thread guaranteed prior extracting element list execution trace list empty 
linked queue class implements blocking discipline client tries extract object list empty block client thread wait see 
shown code implements blocking behavior list executed test harness shows code covered test harness shaded area 
code exercised method called context list empty 
model checker analyze code units closed addition environment violations result model checker give confidence unit analyzed satisfies specification 
results manta able redesign environment increase level coverage significantly 
case generalized environment allow general calling sequences thread 
head 
reach head head head head new head new head boolean isempty synchronized head return head void void throw new synchronized synchronized head return head head reach head reach head head head return void synchronized new synchronized return 
fig 

concurrent linked list queue example excerpts model checker tool support indicate potential problems environment 
believe problem especially important context model checking jml specifications typically specify details program state specification languages traditionally model checking 
accordingly seek develop forms automated tool support environment generation earlier providing feedback quality environments terms code coverage specification coverage 
manta architecture manta seek provide flexible framework allow different coverage metrics included integral part model checking process 
users package void main new new new extends thread void run new true fig 

test harness concurrent linked queue program 
return synchronized return catch ex throw ex throw new fig 

portion executed test harness 
bir config front lexer parser type checking semantics analyses model checking components bogor fig 

bogor architecture 
verified counter example add extra layer confidence verification process simply activating bogor default coverage analyses manta options 
addition users easily include implementation coverage estimation algorithms customize coverage information specific reasoning goals experiment new coverage algorithms 
primary goals developing manta framework support continuing research exploiting coverage metrics model checking 
manta built top bogor software model checking framework 
shows architecture bogor 
framework composed loosely coupled modules enclosing different aspect model checking process 
controls exploration state space graph 
module computes value side effect free expressions accessing heap relevant local activation records 
module easily extended add extra functionality 
example dwyer extended add partial order reductions model checker 
extended allow verification methods frame conditions 
building flexibility manta accumulates coverage information monitoring specific events bogor modules 
achieved observer pattern manta modules subscribe relevant events specific bogor modules 
example module structural coverage described section subscribes module observes transition executed information perform analysis 
similarly specification analysis module section observes commands executed looking execution assertions 
shows simple architecture manta framework 
manager module takes care initialization finalization modules implement specific coverage estimation analyses 
interface provides point implementation different coverage estimation algorithms 
incorporate particular coverage analysis manta simply specifies implementing classes manager loads initialization period 
example fig 

manta architecture 
illustrate configuration aspects framework linked queue example 
suppose wanted model check program implement types coverage analysis structural specification analyses describe detail sections 
specify options bogor configuration file indicate implementation analysis manager choose default manager indicate number analysis modules executed 
analyzers size specify implementation classes manta analysis 
notice manta need know specifics analysis 
needs know name classes implement analyses able load analyzers analyzers specify options analyzers 
structural coverage require option 
specification coverage analyzer takes options configuration file indicate particular locations monitored 
example suppose want monitor post condition object linked queue program 
specify options false size insert option tells analyzer interested specific locations specification formulas 
second third options specify size set locations want monitor method name location label program point want monitor 
able refer specific location simply label program point java label shown 
mandatory refer specific locations order monitor 
common analysis involve monitoring pre post conditions invariants 
lines shown previously turn true tells analyzer monitor pre conditions post conditions invariants checking 
model checking run coverage manager invokes finalization method module collects results 
coverage analyses results reported analyzers manager form object 
interface provides uniform way results regardless type analysis 
case studies applied manta analyze coverage information model checking collection java programs jml specifications 
model checking java programs bogor achieved compiling java byte codes bir bandera intermediate representation bir guarded assignment language primitives defining object oriented features java 
direct correspondence java source lines byte codes sequences bir transitions 
facilitates mapping analysis results including coverage information calculated bir model back input java program 
shows bir translation object linked queue example 
jml specifications encoded embedded assertions bir model 
assertions inserted translation process correspond jml pre post conditions invariants checking partial support assertion generation jml implemented current toolset 
details refer reader 
manta bogor extension operates bir models 
section describe experiences manta implementing coverage analyses 
example shows implementation structural coverage branch coverage 
report interesting findings concerning existing models issues test harnesses 
second example implementation boolean satisfaction analysis 
report results set systems structural analysis case 
structural coverage estimation manta type coverage analysis implemented top manta branch coverage 
classical definition branch coverage ensuring branch decision point example statement executed 
bir boolean spec boolean spec goto spec spec head head spec spec spec spec goto spec spec goto 
goto spec spec new goto spec spec invoke goto spec spec throw goto spec spec goto spec spec goto spec spec head head goto return spec spec throw goto catch loc loc loc loc loc goto fig 

concurrent linked list queue example excerpts program model achieved determining proportion transitions exercised model checking 
information returned analysis percentage transitions executed information actual transitions executed location model 
implementation analysis straightforward 
manta analysis module implementing analysis implement coverage analyzer interface 
initialization period module constructs containing possible transitions system 
module subscribe time transition executed notifies analyzer analyzer removes transition 
tested coverage analysis implementation models 
programs annotated jml specification languages verifying properties bogor 
table summarizes results obtained program 
model checks exhibited high structural coverage 
reason numbers dead code model generated compiler 
estimate model total number number coverage transitions unexplored transitions percentage table 
percentage structural coverage systems analyzed 
models coverage coverage 
close part bir models model exceptional code exercised environments 
possible course trigger exceptional code defining appropriate environments 
examples achieved significantly lower levels coverage 
model checked example structural coverage enabled couple surprises 
error model specifically fragment model derived translating jml specification annotations hand overcome limitation compiler 
error hand translation yielded assertion check short circuited checked 
second shown table coverage percentage program low 
turns environment program inadequate exercising certain implementation behaviors 
discussed section caused failure execute code 
program low structural coverage 
time low coverage due fact compiler generates bir code classes 
bogor needs concrete classes perform checking code generated classes executed 
observations modifying code generation compiler manner coverage information accumulated avoid reporting spurious coverage problems associated classes incorporate options allow user selectively mask non coverage reports different types code exception handlers 
boolean coverage estimation manta structural analysis useful spotting environment limitations 
mentioned section interested analyses help extract information coverage specification level 
coverage analysis specification level useful past specification refinement 
example show coverage analysis similar described refine specification circuits microprocessor design 
case interested type analysis goal checking strong jml specifications 
type specifications expressed jml rich terms expressing complex model total number number unsatisfied monitored formulas formulas table 
number formulas satisfied model checking 
void throw new head head reach head reach head head head return fig 

methods unsatisfied formulas 
properties heap allocated data covering different behavioral cases method 
writing type specification hard demands lot expertise 
written expert potential overlooking constraining aspects method behavior significant 
believe coverage analysis successfully specification debugging 
section describe analysis implemented purpose 
additional coverage estimation analysis simple boolean satisfaction analysis 
implementation involved developing logic coverage analysis module configuring coverage framework interact model checker 
coverage criterion simple monitoring policy boolean expression determine sub formulas expression satisfied 
formulas report possible coverage problem position source code 
table summarizes results analyses 
program showed lack coverage criterion example 
shows methods problem low coverage 
analysis uncovers problems different methods structural coverage analysis 
tool reports null satisfied precondition 
expected condition corresponds exceptional behavior 
sense structural coverage test uncovered issue reported instruction executed 
boolean analysis gives direct indication conditions led code covered 
extract method tool reports result null holds postcondition 
looking carefully note condition corresponds case list empty 
determined information previous test list empty 
problem exposed different point 
test spotted problem code 
specification 
phenomenon suggests techniques complementary types coverage problems find 
uncovered problem different perspectives 
discussion basic forms coverage analyses implemented demonstrated individual coverage analyses effectively integrated model checking provide useful information quality environments 
believe multiple coverage analyses aggregated yield additional benefit top obtained independently 
see consider results obtained sections 
example analyses showed behavior blocking behavior list exposed 
hand structural analysis spotted problem pointing directly portion code executed 
boolean analysis uncovered problem time pointing specification case enabled 
independently analysis give benefit find gap coverage produced environment 
run provide extra benefits discuss turn 
obvious extra benefit increase reliability reports analysis 
certainly analysis point problem chances higher problem concern just superficial issue discussed previously analyses may report spurious superficial coverage problems case structural analysis pointed transitions corresponding classes 
second benefit apparent extremely useful way working analyses help providing estimation coverage guiding way refinement test harness verification process uncovering potential errors implementation specification 
see point keep mind duality approaches 
portion model covered analysis report information form transitions executed conditions enabled structural boolean analysis respectively 
consider 
suppose model checked environment method called state true 
obviously boolean satisfaction analysis report pre condition true 
structural analysis report complete coverage 
mismatch suggests implementation missing code represents specification void boolean void boolean fig 

example methods show structural boolean analysis complemented finding bugs debugging specification 
covered code reported executed 
code missing contain bugs match specification 
fact examine code see implementation incomplete 
results analyses separate disconnected information helped find bug 
notice model checker able find bug environment incomplete place 
boolean analysis suggests environment refined 
refining environment model checker spot error require model checking run 
hand analyzing information coverage analyses find bug effort 
similarly look consider environment see case opposite situation 
structural analysis report portion method executed 
boolean satisfaction analysis report specification completely covered 
implementation correct respect specification 
mismatch analysis suggests possibility specification complete 
true portion specification covered state space represents explored 
specification totally satisfied means insensitive code executed 
fact look specification see specification incomplete handle case false 
lead refinement specification include case handled really want 
case benefit finding bugs implementation specification debugging 
coverage enabled model checking concepts suggest general methodology software verification model checking extended coverage analyses run model checker system verified coverage analysis extensions described 
structural analysis reports complete coverage boolean analysis reports incomplete coverage potential incomplete implementation bug caused missing code specification case 
structural analysis reports incomplete coverage boolean analysis reports complete coverage potential incomplete specification specification insensitive code covered 
analyses report incomplete coverage correspondence non covered cases analysis example sections 
correspondence exists coverage problems attributed test harness 
potential implementation specification incompleteness depending analysis unmatched non coverage case 
note extra benefit achieved model checker run analyses included done independently 
example suppose case specification incomplete cover code additionally executed test harness 
model checker detect problem point view model checker problem implementation satisfies specification 
boolean analysis report problem structural analysis simply point test harness refined cover code executed 
notice methodology detect incomplete specification cases accompanied incompleteness test harness 
example test harness cover case false analyses structural boolean achieve coverage inferred 
spotting specification incompleteness cases interesting direction want pursue 
related coverage estimation received attention areas model checking done address problem 
significant works area done chockler 
definition coverage problem slightly different 
concern model specification system state space relevant specification 
example consider simple transition system 
specification shown system holds initial state outgoing paths lead state true 
third state true totally insensitive specification 
definition coverage say node covered specification refine properties 
find states technique change value specific variables example state run model checker 
nodes property fail nodes insensitive specification covered 
fig 

simple transition system specification verified 
information obtained type analysis gives rough estimation proportion behaviors covered specification 
approach useful shortcomings 
specifications necessarily refer portion states due nature property express 
case specification need refined coverage information useful 
second cost analysis model checking model checks run regular check second values basic propositions negated 
show simply adding book keeping procedures model checker algorithm useful coverage information gathered support model refinement lower cost 
example structural analysis implement simply needs keep track transitions executed 
combination specification structural coverage analysis yields results similar obtained effort 
analysis detects portions state space covered aspect specification pointing directly points state space 
execution separate verification run expensive model checking 
hand approach run model checking system analysis information done monitoring checking process 
monitoring inexpensive respect analysis cost grow analyses attached framework 
system won point directly regions state space covered requires insight user find regions evidence potential problem 
idea explored researchers mentioned previous paragraph concept checking 
boolean satisfaction analysis 
idea verify formulas system trivially satisfied proven correct model checker truth independent model 
show surprisingly checking harder perform imagine common models 
usefulness analysis limited just cases 
vacuous formulas specifications common expected calculation tends fairly expensive yielding information just specific type errors 
example approach described previous paragraph detect formulas system insensitive formula 
see just consider happens false initial state system 
case formula vacuously satisfied states system detected state insensitive formula 
expensive cost amortized type errors approach find 
engler coverage metrics verification tcp implementation model checking 
coverage metric simple line coverage line code executed 
usage metric motivation quite different 
coverage metrics evaluate effectiveness state space reduction techniques implemented model checker 
note identifying unexplored portions state space help refine test harness model check system 
similarly spin time feature reports statements reached 
similar line visser explore coverage metrics heuristic model checking 
coverage metric branch coverage exactly structural coverage analysis 
purpose information estimate effectiveness partial checks branch coverage measure value function guide search heuristic model checking 
coverage metrics reported works mentioned previous paragraphs equivalent structural coverage differences usage metrics motivations 
main difference focus metric obtain measure state space explored useful bounded search model checker runs memory partial checks focus metric refine test harnesses model check open systems 
integrated structural coverage specification coverage proposed exploiting integration enhance verification 
main motivation want check strong specifications software units deeply interested verifying depth specifications covered 
interest refining test harnesses focused increasing specification coverage code coverage 
integrated structural analysis boolean analysis specification 
bandera environment generator beg project takes approach providing tool support deriving appropriate test harnesses environments 
focuses automatically generating test harnesses high level specifications orderings calls module tested information gathered automated static analysis side effects aliases code analyzed 
lets user specify components relevant verification constraints components certain assumptions environment order methods unit analyzed called generates environment stubs driving code translated model checker language 
beg certainly relevant coverage issue complementary beg tries generate adequate environments achieve coverage user provided infor mation regular expression indicating pattern method calls unit test manta estimates coverage achieved environment generated automatically hand 
example user provides regular expression specify ordering unit method calls test harness ordering may give coverage manta detect situations 
coverage problem studied extensively testing community 
case studies test coverage example directly relevant 
notions structural coverage developed testing community 
example concept node coverage branch coverage path coverage includes potential lessons applied monitoring coverage model checking 
manta coverage analysis framework built top bogor software model checking framework guide effective construction environments model checking 
manta allows variety coverage analyses code branch coverage specification boolean satisfaction method pre postconditions integrated model checking process 
model checking exhaustive interleavings considered results coverage analyses pinpoint deficiencies environments system 
example branch analysis determine code regions exercised due specificity environment 
example exercised behaviors particular method may sufficient satisfy specific pre condition method pre condition method 
manta eases incorporation kinds coverage analyses providing api adding new coverage analysis 
showed effectiveness framework easily incorporating widely coverage analyses testing community implementing novel specification coverage analysis 
showed analyses uncover common deficiencies test harnesses respect code specification 
believe manta guide analysts constructing environments usually done unit testing 

ball rajamani 
slam toolkit 
proceedings th international conference computer aided verification pages 
springer verlag 

binder 
testing object oriented systems models patterns tools 
addison wesley longman publishing 

brat havelund park visser 
java pathfinder second generation java model checker 
proceedings workshop advances verification july 

chockler kupferman kurshan vardi 
practical approach coverage model checking 
computer aided verification proc 
th international conference volume lecture notes computer science pages 
springer verlag 

dwyer hatcliff prasad robby 
exploiting object escape locking information partial order reductions concurrent object oriented programs 
formal methods system designs 
appear 

dwyer hatcliff schmidt 
bandera tools automated reasoning software system behaviour 
ercim news jan 

engler 
static analysis versus software model checking bug finding 
steffen levi editors verification model checking interpretation th international conference volume lecture notes computer science pages 
springer 

gamma helm johnson vlissides 
design patterns 
addison wesley pub 
jan 

visser 
model checking java programs structural heuristics 
proceedings international symposium software testing analysis pages 
acm press 

henzinger majumdar 
lazy abstraction 
proceedings th acm symposium principles programming languages pages jan 

holzmann 
model checker spin 
ieee transactions software engineering may 

holzmann smith 
practical method verifying event driven software 
proceedings st international conference software engineering pages 
ieee computer society press 

kam 
ho zhao 
coverage estimation symbolic model checking 
proceedings th acm ieee design automation conference pages 
acm press 

kupferman vardi 
detection temporal model checking 
th advanced research working conference correct hardware design verification methods volume lecture notes computer science pages 
springer verlag 

lea 
concurrent programming java second edition 
addison wesley 

leavens baker ruby 
jml java modeling language 
formal underpinnings java workshop oct 

engler 
model checking large network protocol implementations 
proceedings symposium networked systems design implementation pages 
usenix association 

penix visser larson 
verification time partitioning deos scheduler kernel 
proceedings nd international conference software engineering pages 
acm press 

robby dwyer hatcliff 
bogor extensible highly modular model checking framework 
proceedings th european software engineering conference held jointly th acm sigsoft symposium foundations software engineering 

robby rodr guez dwyer hatcliff 
checking strong specifications extensible software model checking framework 
jensen podelski editors tools algorithms construction analysis systems th international conference tacas volume lecture notes computer science pages 
springer 

dwyer pasareanu 
automated environment generation software model checking 
proceedings th international conference automated software engineering oct 

dwyer 
adapting side effects analysis modular program model checking 
proceedings fourth joint meeting european software engineering conference acm sigsoft symposium foundations software engineering sept 

zhu hall may software unit test coverage adequacy 
acm computing surveys december 
