implementation session types matthias neubauer peter thiemann universitat freiburg georges kohler freiburg germany 
session type abstraction set sequences heterogeneous values sent received communication channel 
session types specifying stream internet protocols 
typically session types attached communication program calculi renders theoretical tools readily usable practice 
transfer session types practice propose embedding core calculus session types functional programming language haskell 
embedding preserves typing 
case study client smtp simple mail transfer protocol demonstrates feasibility approach 
key words functional programming types domain specific languages foundational calculi concurrency devoted studying synchronous shot communications example ccs calculus chemical machine join calculus calculus 
particular distributed systems cost shot communications high new connection established message synchronous operation may restrictive 
calculi programming languages developed asynchronous communication incorporate channel communication primitives 
channel created distinct messages may communicated 
channels homogeneous messages type 
session types emerged expressive typing discipline heterogeneous bidirectional communication channels :10.1.1.110.4730
channel message may di erent type possible sequences messages determined channel session type 
type discipline subsumes typings datagram communication homogeneous channels 
session types describe stream internet protocols pop 
regular language atomic communication actions describes sequence messages channel 
channel type specifies language fixpoint expression 
operation outermost action channel neubauer thiemann informatik uni freiburg de label definitions op rec send close expressions halt receive types type environments session types fig 

syntax type operation changes channel type 
reason channels duplicated treated linearly type system 
resulting type system amenable type inference techniques developed recursive types 
session types compatible polymorphic type inference 
far mainstream programming language supports session types hard take advantage practice 
demonstrates embed session types functional programming language su ciently powerful type system 
extended haskell fits bill languages constrained type systems suitable 
particular type classes functional dependencies required model progression current state channel functions polymorphic parameters required model client server side communication specification 
main contribution encoding session types terms type classes functional dependencies 
key technical problem encoding fixpoint expressions occur description regular language mentioned 
define typed translation calculus session types haskell prove soundness 
demonstrate practicability approach case study typed client simple mail transfer protocol smtp 
structured follows 
section defines small calculus asynchronous communication session types 
section specifies basic ideas translating calculus haskell section gives detailed overview translation 
section contains excerpts type safe implementation smtp client 
section briefly discusses related domain modeling types section concludes 
due lack space assume reader reasonably fluent haskell 
calculus session types presents syntax calculus session types 
simplicity calculus considers communication channel 
restriction avoids necessity semantic complication adopting expression concurrent execution syntax 
adequate purpose interest type checking code peer client server checking consistency system processes 
halt receive fig 

typing rules expressions restriction communication channel transforms session types communication ects linear treatment channel syntactic means simplifies translation section 
calculus deals kinds data order base type values functions labels 
labels status similar labels record variant types occur channel types sent received channels message base value tagged label 
expressions calculus come sequentialized style reminiscent continuation passing style 
precisely expression sequence definitions ends halt instruction conditional function call receive instruction branches received label 
arguments restricted variables 
notation stands sequence 
xn derives context 
definition application primitive operation definition recursive function send operation close operation closing communication channel 
type base type function type 
due sequential style functions return values 
take continuation argument 
function type includes ect specification 
defines latent communication take place function applied 
session type empty channel closed empty word channel depleted closed label tagged alternative di erent session types value may sent received type variable constructing recursive type operator 
operator constructs fixpoint 
uses expansive subterms form 
type system relies judgments check consistency expression prescribe communication ect model ect definition transformation environment 
contains rules expressions 
halt requires channel closed 
expression types body transforming environment definition 
conditional passes environment unchanged branches 
applying function requires function consumes remaining ect 
receiving tagged value eliminates labeled alternative session type 
branches typed remaining session type 
contains typing rules definitions 
primitive operation base type arguments result 
depend session type 
function formation independent current session type 
body op 
xn rec send close fig 

typing rules definitions function checked session type prescribed call site function 
sending labeled value selects part session type rest expression 
closing communication channel requires exchanges left 
rule sets remaining exchanges empty set 
define semantics language 
suitable semantics extended languages may gay 
basic framework mapping calculus session types haskell rests overloaded functions 
message specific type comes functions parse message specific type class command class command command reads command command shows underlying datatype function maps session type string file handle io action 
string contains input output generated handle io monad 
datatype composition reader monads io monad 
data session st session st string handle io attentive reader may wonder design session monad possible 
consider alternatives suppose output generated writer monad 
io monad required io actions performed communication actions resulting type look io output 
unfortunately value io monad return actions specified value completed 
output generated output component middle transaction appear transaction 
late interactive response 
suppose input obtained directly io monad example having parsers call getchar io char directly 
unfortunately reads shows predefined haskell types parsing unparsing data 
obvious definitions session st monad omitted 
see parsers able proceed speculatively characters 
option viable required construction imperative parsing library getchar 
pursued due lack time 
send operation takes message send identified type continuation construct action current session type 
executing send sends message advances session type indicated typing rule invokes continuation new session type 
declaration operation type class clear new type depends old type message functional dependency 
class send st message st message send message session session st receive operation takes message continuation 
attempts parse message input advances session type invokes continuation message new session type 
receive receive st cont cont session st receive session st inp case receive st inp just action action fail receive applied directly message cont form message session case alternative di erent messages possible case type alternative di erent continuations 
auxiliary function attempts parse expected message returns continuation 
class receive st cont st cont receive cont st string handle io io operation serves embed io operations send receive operations 
io io session st io action session action operation close closes communication channel 
applicable session type eps translation 
close session null session eps close cont session cont null translation information session type available haskell type checker parts translated accordingly 
labeled message lifted separate type base types correspond haskell base types 
constructor session type mapped type constructor null recv eps alt send rec send recv data send recv send recv rec fig 

translation types values data null null closed session data eps eps empty session data send msg send msg send message session data recv msg recv msg receive message session data alt alt alternative session translation session types translation concerns types values 
directly refer send msg recv msg parameterized send receive operations send recv 
parameterization enables flipping session type 
flipping required switch point view channel 
session type corresponds exchanging occurrences types parameterized send recv kind values parameterized polymorphic functions send recv type forall send forall recv respectively 
contains definition translation 
function defines special cases value translation cases type translation 
main di culty treatment recursion operator 
problems due restrictions haskell type system 
recursion requires explicit datatype definition 
fortunately generic encoding datatype subsumes recursively defined datatypes data rec rec rec datatype constructor function kind 
technically rec constructs fixpoint function lifting 
second instantiation restricted type constructor terms keep type system decidable 
ideal translation rec 
lambda expression type level 
lambda expressions admissible haskell types reduced pure constructor term example consider translate rec alt send send eps 
translation types needs introduce new parameterized datatype occurrence session type 
furthermore datatype definitions nested translation needs keep track pending type variables corresponding occurrences context parameterize new type variables 
corresponding part translation value level requires recursive definition 
technically translations merged fix association corresponding datatype keep separate readability 
remaining cases equal 
type translation parameters passed unchanged recursive calls 
lemma 
contain types data constructors listed closed expansive session type 
haskell variables send receive provided polymorphic parameters send forall send recv forall recv similarly type translation refers type variables send recv full type value produced translation forall send recv 
forall send forall recv additionally translation restrict instantiation send recv supplied operations opposites 
parameter type class required specify relation 
connecting session types messages specification connection message send receive actual session type requires ingredients 
atomic messages matched specification 
second specification prescribes alternative alt operator matching properly dispatched alternatives 
third recursion unwound matching encounters rec operator 
part straightforward second third require careful consideration 
atomic messages session type prescribes atomic message type send actual message type type remaining session stripped session type 
similarly session type prescribes message type received continuation expects message type continues stripped session state 
instance command send send msg send mess cont session st inp mess cont send st inp instance command receive recv msg session receive st inp case inp inp just recv st inp functions send recv just projections argument send msg recv msg send send msg recv recv msg alternatives current operation receive operation protocol prescribes alternative di erent messages implementation attempts parse input alternatives selects successful parse 
trial encoded receive function main reason keeping receive receive separate 
serves example argument receive operator function 
instance receive spec receive spec receive alt spec spec alt receive alt alt spec spec inp case receive spec inp just action just action receive spec inp current operation send operation protocol prescribes alternative automatic matching protocol specification message type fairly complicated 
reason alternatives explicitly selected prior send operation 
primitive selector functions provided task left session session alt right session session alt left session session alt inp inp right session session alt inp inp design positive ect subtyping session type send operations 
protocol states certain message received implementor sure message understood 
matching receive class complete 
sender perspective protocol states selection messages may sent certain point 
sender implementation may choose omit alternatives 
arrangement possible sender may choose just send left alternative leave unspecified 
require type class unwinding recursion 
halt return receive receive alt op 
xn io op 
xn rec send send close close id left right fig 

translation expressions recursion matching recursion operator requires unwinding 
implementation requires steps 
due definition rec unwinding boils selecting argument rec 
second step derives observation body rec constructor type introduced translation 
needs expanded definition matching proceed 
achieve expansion uniformly requires type class say class instances provided 
definition data send recv selector function type send recv instance send recv unwinding boils selection operations 
case conceptual di erence send receive operations 
instance receive rec receive rec receive session rec inp receive inp instance send rec send rec send mess cont session rec inp send mess cont inp translation expressions translation expressions table 
assumes primitive operations may side ects 
sending message translation requires information current session type 
information needed inject send operation corresponding slot translated session type 
formulation injection lines nondeterministic search matching label tree alternatives 
result deterministic sending label appears exactly session type 
shown typed expression session calculus mapped typed haskell program 
lemma 
suppose haskell session lemma 
case study simple smtp client excerpt real world application type safe implementation simple mail transfer protocol smtp demonstrates practicability haskell encoding session types 
implementation expects email input tries deliver specific smtp server 
automatically derived protocol specification terms session type 
simplified smtp session type session type corresponding full smtp quite unreadable 
consider fragment smtp relevant application 
type client point view flipping decorations results server type 
mail data yz lines quit yz 
receiving greeting smtp server reply client initiates mail session sending perform consecutive email transactions server 
mail transactions starts mail command followed command telling server recipients mail data command announcing mail content actual content lines 
client terminates session issuing quit command 
server usually acknowledges successful commands sending reply 
full protocol di erent kinds error replies return client commands server understands administrative commands anytime session client may quit session 
haskell encoding smtp session type implement session specification haskell translate smtp commands replies haskell data types 
smtp commands data domain instance command undefined protocol specification smtp replies data reply reply domain string instance command reply reply undefined undefined protocol specification declarations show encoding messages occurring smtp session reply holding internet domain additional information mail server command holding internet domain client 
domain datatype represents ip addresses domain names 
commands replies amenable parsing printing instances command type class introduced section 
remaining smtp commands implemented analogously 
translation previously specified smtp session type arises applying translation specified section 
send forall recv forall recv rec ga send alt recv rec ga alt send recv send rec ga recv alt send cdata recv send recv send send null recv yz occurrence session type translation introduces additional parameterized datatypes explained section 
show datatype declaration corresponding instance declaration type class 
data ga send recv ga send alt recv reply rec ga send recv recv reply instance ga send recv send alt recv reply rec ga send recv recv reply ga smtp client specification smtp sessions place encode main function email client sendmessage 
functions adhere smtp session specification statically guaranteed haskell type system 
sendmessage client server string io sendmessage client server sender message str recv receive reply server domain text send cname client receive alt reply text sendmail reply text yz sendmail left send mail sender recv recv cont receive reply text cont send recv left right send send data recv recv receive reply text send lines message recv right send quit finish recv send msg recv msg str hclose takes arguments client server arguments hold information parties involved sender encode email addresses sender recipients message message holds message body 
opening socket connection smtp server getting handle socket read lazily specify di erent interaction steps client server communication send receive 
step recv receives greeting message transfers control step 
step simply sends initial command introducing client server 
continuation shows handle choice possibly incoming messages function apply alt value holding alternative handlers branching di erent continuations receive 
functions recursive functions handling transmission list recipients 
show send message possible alternatives 
continue alternative wrap left continuation apply right second alternative continuation 
close continuation quit command terminates session 
function starts client server interaction recv entry point smtp specification socket input stream output stream 
related mentioned related concurrency session types 
particular system close session types armstrong ubf 
relevant applications domain modeling type systems 
number applications ranging general techniques modeling dtd 
modeling type safe casting encoding type equality predicates representation type indexed values relevant 
foundational considers typed encodings simply typed lambda calculus haskell clarifies necessary prerequisites encoding sound complete 
example encoding developed danvy 
chen xi extends approach meta programming setting 
application area modeling external concepts relational schemes databases obtaining type safe query language wrapping accesses com components integrating access java library 
listed works specifies encoding recursion translation exploit polymorphism guarantee client server specifications match 
calculus session types embedded programming language haskell type safe way 
give detailed account translation prove type safety 
case study demonstrates embedding practical exhibits benefits declarative programming 
resulting program straightforward read understand 
interesting investigate alternative designs session monad 
particular pushing idea character parsing extreme appears lead pure implementation basis stream transformers 
implementation completely decouple processing protocol underlying io actions 

torben flemming nielson hanne riis nielson 
type ect systems behaviours concurrency 
imperial college press 

joe armstrong 
getting erlang talk outside world 
proceedings acm sigplan workshop erlang pages 
acm press 

arthur doaitse swierstra 
typing dynamic typing 
peyton jones pages 

nick benton andrew kennedy 
interlanguage working tears blending sml java 
peter lee editor proc 
international conference functional programming pages paris france september 
acm press new york 

gerard berry gerard boudol 
chemical machine 
theoretical computer science 

chen hongwei xi 
meta programming typeful code representation 
olin shivers editor proc 
international conference functional programming pages uppsala sweden august 
acm press new york 

james cheney ralf hinze 
lightweight implementation generics dynamics 
proceedings acm sigplan workshop haskell pages 
acm press 

olivier danvy morten er rose 
normalization evaluation typed syntax 
journal functional programming 

cedric fournet georges gonthier 
reflexive cham join calculus 
popl pages 

simon gay malcolm hole 
types subtypes client server interactions 
doaitse swierstra editor proceedings european symposium programming number lecture notes computer science pages amsterdam netherlands april 
springer verlag 

simon gay vasco vasconcelos antonio 
session types inter process communication 
technical report tr department computing science university glasgow 

alessandro mishra prasad 
facile symmetric integration concurrent functional programming 
orejas editors tapsoft number lecture notes computer science pages ii barcelona spain march 
springer verlag 

haskell non strict purely functional language 
www haskell org definition december 

kohei honda mario tokoro 
object calculus asynchronous communication 
pierre america editor th european conference object oriented programming ecoop number lecture notes computer science pages geneva switzerland july 
springer verlag 

kohei honda vasco vasconcelos makoto kubo 
language primitives type discipline structured communication programming 
chris hankin editor proc 
th european symposium programming number lecture notes computer science pages lisbon portugal april 
springer verlag 

mark jones 
type classes functional dependencies 
gert smolka editor proc 
th european symposium programming number lecture notes computer science pages berlin germany march 
springer verlag 

leijen erik meijer 
domain specific embedded compilers 
nd conference domain specific languages austin texas usa october 
usenix 
usenix org events dsl index html 

conor mcbride 
faking simulating dependent types haskell 
www dur ac uk dcs ctm faking ps 

erik meijer graham hutton 
bananas space extending fold unfold exponential types 
simon peyton jones editor proc 
functional programming languages computer architecture pages la jolla ca june 
acm press new york 

robin milner 
communication concurrency 
prentice hall englewood cli nj 

robin milner joachim parrow david walker 
calculus mobile processes part ii 
information control 

matthias neubauer peter thiemann martin michael sperber 
functional notation functional dependencies 
ralf hinze editor proceedings haskell workshop 
appear 

martin odersky konstantin laufer 
putting type annotations 
popl pages 

simon peyton jones editor 
international conference functional programming pittsburgh pa usa october 
acm press new york 

simon peyton jones andrew gordon finne 
concurrent haskell 
popl pages 

simon peyton jones erik meijer leijen 
scripting com components haskell 
proc 
international conference software reuse 

simon peyton jones 
tackling awkward squad monadic input output concurrency exceptions foreign language calls haskell 
tony hoare manfred broy ralf editors engineering theories software construction pages 
ios press 

proceedings acm sigplan symposium principles programming languages st petersburg fl usa january 
acm press 

john reppy 
concurrent programming ml 
cambridge university press 

simple mail transfer protocol 
www faqs org rfcs rfc html april 

morten 
foundation embedded languages 
acm transactions programming languages systems 

alan schmitt jean bernard stefani 
calculus higher order distributed process calculus 
proceedings th acm sigplan sigact symposium principles programming languages pages 
acm press 

peter stuckey martin sulzmann 
theory overloading 
peyton jones pages 

stephanie weirich 
type safe cast functional pearl 
philip wadler editor proc 
international conference functional programming pages montreal canada september 
acm press new york 

yang 
encoding types ml languages 
paul hudak editor proc 
international conference functional programming pages baltimore usa september 
acm press new york 

