icap rapid prototyping context aware applications timothy sohn anind dey irb tr october proceedings chi acm conference human factors computing systems disclaimer document provided warranties whatsoever including warranty non infringement fitness particular purpose 
intel authors document liability including liability infringement proprietary rights relating implementation information document 
provision document provide license express implied intellectual property rights copyright intel rights reserved 
icap rapid prototyping context aware applications timothy sohn dep computer science engineering university california san diego la jolla ca usa cs ucsd edu numerous context aware applications implicitly take context account developed advances technology acquire contextual information difficult develop prototype interesting context aware applications 
largely due lack programming support available programmers users 
focus providing support users open space context aware application design larger group users 
icap interactive context aware system allows users visually design wide variety context aware applications including rules temporal spatial relationships environment personalization 
icap allows users quickly prototype test applications writing code 
describe system design applications demonstrate icap richness ease 
describe results user study performed users programmers illustrates icap expressiveness usability 
author keywords context aware user programming visual prototyping acm classification keywords information interfaces presentation user interfaces prototyping programming techniques visual programming general terms human factors design keywords user programming past years increased effort interest building deploying context aware applications 
users environments contain context information sensed application including location identity activity state nearby people 
context aware computing involves sensing context implicitly provide information services appropriate user context 
groups developed infrastructures anind dey intel research berkeley berkeley ca usa anind intel research net toolkits support era ubiquitous computing focused empowering users building context aware applications 
currently developing context aware application requires developers users alike build application scratch involving painful direct interaction hardware sensors devices enabling toolkit 
low level toolkit support acquiring context individuals write large amounts code develop simple sensor rich applications :10.1.1.9.5130
inhibits design interesting applications especially users having little control applications behave 
users little technical expertise able exercise control context aware systems rapidly prototype applications 
intimate knowledge activities environments hired programmer need ability create modify applications activities environments change 
ability applications acting implicitly significantly annoy users fail meet users needs 
address issues built interactive contextaware application icap system aimed lowering barriers users build interesting contextaware applications instrumented environments requiring write code 
particular icap allows user describe situation associate action 
icap visual rule system supports prototyping common types context aware behaviors simple rules relationship actions environment personalization 
supporting prototyping writing code icap allows users exert control sensing systems dictate behavior applications 
common context aware applications described naturally collection rule conditions 
example museum tour guide rule user stands front particular exhibit show content related exhibit canonical example smart home simple rule turn lights room icap system designed rule paradigm separate parts visual rule building interface underlying rules engine 
visual interface shown fig 
allows users build prototype deploy test application 
separates users difficulties dealing low level sensor input toolkit level details 
rules engine database user defined rules receives sends events evaluate execute rule support application 
context inputs trigger rules come wizard oz interface manipulated user real instrumented context aware environment 
repository situation sheets slots action fig 

icap user interface main areas tabbed window left acts repository user defined inputs outputs locations people rules situation area right components dragged construct rule 
rule shown uses situation sheets right split slots 
rule prototyped lights kitchen past pm user bedroom lights lights kitchen turn lights kitchen 
icap supports common types context aware applications 
type simple rules consist rules action triggered condition satisfied 
discussed earlier tour guide example basic applications described way 
type relationship actions 
humans naturally relational think terms personal spatial temporal relationships 
instance am aware entered living room minutes ago room bedroom connected hallway 
system recognizes room prompt ask going grocery shopping 
icap provides necessary support develop rules built types relationships 
lastly supports environment personalization environment satisfies differing preferences occupants 
instance user may enjoy bright lights rock music prefers dim lights classical music 
satisfy users environment account preferences adjust accordingly 
section surveys previous research areas context aware computing rule systems informal interfaces providing motivation 
sections example scenario describe ease interaction building context aware applications visual interface 
describe necessary underlying support required rules engine 
demonstrate benefits icap number demonstration applications built system cover important design space context aware computing 
show icap usable useful system user study conducted 
usability complexity reasons systems designed users functionally constrained systems designed programmers icap exception 
conclude discussion limitations icap directions research 
related informed research areas context aware computing visual rule systems users 
discuss 
context aware computing weiser vision ubiquitous computing decade ago groups explored domain context aware applications 
schilit parctab system began shape infrastructure applications built support context awareness 
soon architectures applications stick notes focused allowing users contextually share data placing virtual objects context aware environment 
types applications written scratch high development cost 
interface external sensing system gather appropriate sensor data develop rule engine execute desired actions 
architectures little support rapidly prototyping applications 
context toolkit step direction eliminating high development costs associated context aware applications providing reusable code allow easy prototyping :10.1.1.9.5130
context toolkit provides sensing system returns desired data application developer providing context enhanced services information 
similar context sensing infrastructures include context fabric cooltown solar tea 
low level sensing support provides vast amount required programmers build applications simple rules 
programmers maintain database rules trigger different actions provide means prototyping application 
essence existing systems provide real support prototyping programmers definitely endusers demonstrating need system icap 
visual rule systems chose icap visual environment users prototype context aware applications reasons simplicity intuitiveness 
visual programming languages proven effective advantage user spatial reasoning skills 
involve interactively laying building blocks defining relationships 
programming style simple effective types users especially intuitive users 
applied new domain context aware computing visual programming provides tools needed allow creative users easily build novel applications 
mackay malone showed information lens project people little computer experience create rules effectively 
rule system built visual environment design context aware rules simple possible 
agentsheets capitalizes idea visual rule programming allowing users establish relationships different autonomous agents 
expanded support context aware applications agentsheets requires high level expertise supports limited sensing actuation 
contrast aim provide novices support build context aware applications 
jigsaw editor supports user reconfiguration home devices novel jigsaw puzzle metaphor 
creators state seek richness programming expression allowed icap 
goal support building expressive applications novice users trading learnability expressiveness 
alfred system uses speech macros support users building applications smart environment 
alfred focuses rules explicit user interaction pressing button speaking phrase icap support conditions contextual cues 
successful rule visual programming languages domains provided inspiration including creator tm gaming 
summary clearly need context aware prototyping environment enables users build rule context aware applications 
building visually rule systems address provide effective prototyping tool empowering users build interesting context aware applications covers important design space context aware computing discussed validation section 
section presents example uses icap visual interface build context aware application demonstrates usefulness tool 
revisit example describe details visual interface underlying rules engine 
example application imagine buddy alert application user john wants notified friends location adjacent 
rule am location friend adjacent location location beep cell phone 
user creates people artifacts involved rule adds repository 
person user sketches icon associated person specifies part friends group fig 

creates new output cell phone specifies name output phone type output binary simplicity sketch image output fig 

ready designing rules simply dragging appropriate icon rule sheets 
fig 

creation person personal groups 
creation 
fig 

rule layout example application friend adjacent locations beep cell phone 
user selects new rule pie menu interactor system creates visual area sheet top entering situation sheet bottom green action fig 

example situation conditions specified laying icons john location friend john location 
user splits single input sheet vertical slots related conjunction 
slot drags icon john set inputs 
second slot drags object john specifies represents john friends 
specify locations slot system automatically assigns variable locations 
specify action user drags cell phone icon set outputs action sheet sets action turn 
location device john location drags location object map icon sets john 
action sheet icons specify action turn john phone 
rule saved user shown drop menu resolve relations variable location values 
specifies adjacency relationship indicating john location adjacent friend location 
rule saved appears rule panel left 
test buddy alert application selecting prototype left pane 
launches window control simulate relevant context inputs connect existing context infrastructure see rule behaves expected fig 

event log simulate values fig 

prototyping mode users simulate values see event changes system event log 
icap system previous section illustrated user icap system build context aware rule 
describe design icap 
rule system consisting main pieces implemented java visual interface building rules rules engine stores built rules evaluates rule run 
icap visual interface shown provides simple way users design prototype context aware applications 
user needs deal defining inputs outputs visually create situations associated actions rules 
explicit coding involved tremendous benefit non programmers allows easily explore context aware computing design space 
iterated design user interface multiple times starting prototypes final interface 
stage obtained feedback local experts test subjects 
interface window main areas fig 
tabbed window left repository user defined inputs outputs locations people rules right rules area components dragged construct conditional rule 
rules area split areas top situations bottom actions 
built icap top satin toolkit building sketching applications 
satin provide pie menus better support pen interaction gesture support issuing common commands cut copy paste graphical objects 
icap interaction interaction icap steps 
user sketches inputs outputs relevant rules exist 
users define person objects personal groups preferences shown example scenario location objects facilitate adjacency comparisons 
second elements dragged composed create rules 
entire set rules simulated connected live context infrastructure prototyping mode 
creating inputs outputs inputs create situations outputs create actions 
input output component associated user sketched graphical icon 
icons colored differently depending input output 
input contains set potential values unit degrees celsius temperature type integer string input potential values provided range list 
example temperature sensor name field temperature units degrees celsius type integer potential values indicating range 
outputs created manner inputs contain different parameters specify 
output binary gradient range device 
addition pre defined categories output device associated lighting sound temperature 
categories user defined categories personalizing environment changing appropriate device user preference sound device sound preferences 
example output cell phone buddy alert application discussed 
addition outputs content field simulate output modalities 
example music player fill content field beethoven symphony output string turned simulate playing classical music piece 
creating people locations person location objects created similarly inputs outputs described example scenario 
objects essential relationship personalization rules 
person objects created name optional fields preferences community groups 
system recognizes predefined preferences person lighting sound temperature 
controls devices user room match preferences occupants 
users define custom preferences music category preference classical music 
person objects created community groups friends family 
person object member multiple groups 
groups allow creation general rule structures family member 
location objects created specify condition action take place particular location 
simply require name creation 
optionally user indicate locations connected allowing creation rules take advantage spatial adjacencies 
addition user specify environment personalization turned location 
turned location attempt satisfy preferences occupants described 
constructing rules simple rules relationship actions environment personalization users create objects define rules 
icap supports construction simple rules spatial temporal personal relationship actions environment personalization 
users build rules dragging dropping inputs outputs situation action sheets rule 
dragging icon user needs specify conditions governing behavior input including combinations form ranges 
support users visually specifying boolean logic simple rules implemented pane myers matching scheme 
matching layout uses vertical dimension label inputs match represent operator horizontal dimension operator 
showed layout provides simple intuitive way express boolean logic including children adults 
support system uses important metaphors sheets slots 
components single sheet related conjunction 
sheet split multiple vertical slots related conjunction 
users add multiple horizontal sheets related disjunction 
fig 
illustrates sheets slots describing rule turns lights kitchen past pm left sheet bedroom right sheet top slot lights turned lights kitchen right sheet bottom slot 
people naturally specify conditions general terms temperature room greater temperature room general terms 
phrases motivate need support generalization specifying rules just simple fixed values 
call general values variable values 
look initial scenario variable values design spatial relationship rule people different locations 
john variable location peter variable location 
comparison included rule variable location adjacent variable location 
addition variable locations variable values assigned person objects create expressive rules involving 
relative temporal relationships supported creating rules 
recall slots creating extra relationships single input sheet 
slots overloaded represent ordering time slot represents event second slot represents event happening 
situation satisfied events happened desired order 
objects set keep track certain time period activity minutes relative time period person walks 
temporal relationships exhibit power icap building conditional rules 
personal relationships environment personalization tightly integrated 
personal relationships supported community groups illustrated initial scenario group friends 
examples include family friends workers 
support personalization allowing individuals develop preferences community groups 
system default supports preferences lighting sound temperature 
addition user declare preferences type music wants played smart environment 
setting flag location user indicate environment take preferences account change users location 
person enters room set flag location analyzes preferences person tries satisfy preferences 
combinations personal relationships personalization supported example combining preferences family members 
aggregation preferences single result performed set heuristics 
point new heuristics added writing code support number common heuristics oldest person wins person room longest wins plan allow users visually create 
running application number rules defined entire rule set tested icap rules engine 
engine set simulate context aware environment conjunction real context aware environment context toolkit 
users interact engine simulation change value defined inputs evaluate behavior rules tested fig 

simulation mode outputs visually updated onscreen real environment real outputs physical environment updated 
engine users quickly design test applications having create entire infrastructure collecting simulating context writing code 
rules engine rules engine sits visual interface real simulated context aware infrastructure 
repository rules accepting inputs triggering outputs 
rules represented engine situation associated action represented boolean tree 
non leaf nodes represent boolean operators leaf nodes contain comparisons john bedroom temperature actions call anne pager 
rules engine supports general comparison operations relative temporal spatial personal relationships evaluating rules described preceding sections 
evaluation rules context input received wizard oz interface fig 
real context environment 
engine provides interface context toolkit support passing events real environment rules engine support rules engine executing actions real environment 
leaf nodes boolean trees act queries discovery service context toolkit enabling bind real world sensors actuators user smart environment 
engine set operate simulated environment user complete control inputs passed system map inputs outputs possible real context provided context toolkit simulate remaining unmapped ones 
situation user simulation control inputs unavailable real context environment 
validation preceding sections motivated described design icap 
validate icap ways 
describe results user study performed icap demonstrating usability 
second show icap covers design space context aware applications outlined schilit icap enables users build canonical applications taken literature 
user study better understand usability icap users experienced computers little programming experience experienced programmers system give feedback 
users college graduates current students users slightly familiar topic smart homes context aware built smart home application 
gave minute tutorial icap covering types rules simple personal spatial temporal relationships supports asked build fixed rules rule types open design rules choice 
analysis user study shows icap usable system 
users successful icap create simple complex rules 
users able create fixed rules reasonable amount time 
table shows average times users programmers completing standard tasks 
success noticeable trends user studies 
clearly learning curve icap 
users took time completing second rule type rule 
second programmers faster users creating rules 
general groups similar difficulties creating rules observations programmers tended recover faster problems icap 
type rule user john bedroom turn lights bedroom 
country music exhibit play garth brooks music 
joe friends office page joe 
joe friends office turn music office 
peter adjacent room joe page peter 
peter room lights lights adjacent room turn lights adjacent room 
year old child kevin enters bathroom enters bedroom sound signal tell kevin wash hands 
ed walks living room daniel walks set lights full lights 
table 
average rule completion time standard deviation minutes 
simple personal location spatial temporal 
third spatial rules took longest create user groups programmers easier time users 
spatial rules inherently variable values particularly difficult concept users grasp 
users understand create variable location 
providing location icon indicate variable location created single location called room multiple locations called room room placed situation sheet 
users correctly created variable locations trouble dropdown menus set constraints necessary resolve variable location comparisons location adjacent location 
address issues revise icap suggestions users create variable location variable person icons users rule creation provide gestures specify constraints grouping icons joining lines 
users pane myers matching scheme useful visualizing relationships 
users able easily recall vertical horizontal mappings respectively boolean operators 
observed instances users unsure add sheet slot trial error able determine wanted visual representation horizontal sheets vertical slots 
addition spontaneously thinking aloud users referred label sheet said says inputs match means sheet relationship 
users trouble overloaded slot operator 
cases slots support anding expressions temporal rules represent ordering events 
overloading confused users added sheets slots 
way prevent confusion label sheet numerically implying order developing temporal rule 
open design rules addition fixed rules user asked build rules choosing icap 
observations users icap successful opening design space creative individuals develop specify rules 
rules touched scenarios constraints conditions envisioned discussed brief tutorial gave users users successful creating rules 
rules attempted person users successfully completed rules covering types rules icap supports 
examples rules created simple lights turn office turn computer 
personal personalization kevin friends living room kevin enters living room raise volume music dim lights living room spatial tim children adjacent pool page tim temporal goes bathroom walks toilet hasn flushed flush toilet 
remaining rules rules icap supports users create 
example pastor looking sleeping shock 
rule created icap quite complex 
final rules ones icap currently support illustrating need extensions icap 
user wanted rule involved specifying john mary son 
rule requires icap support intersections people community groups 
user wanted specify rule object exists bedroom play music turn 
providing existence discovery operator support rules 
third user wanted specify condition room icap support negation conditions 
exploring ways address issues 
summary evaluation icap showed successful supporting users building simple complex rules 
rules spanned range simple rules environment personalization personal spatial temporal relationship actions 
users successful constructing rules open design portion study creating rules quite different proposed 
stated earlier icap trades learnability complexity types rules support allowing users create expressive rules alfred system jigsaw editor 
users issues icap indicated hardware smart home readily available 
user said icap exactly imagined visual programming interface develop applications user described icap easy fun exciting able easily build applications home context aware design space validation icap show icap facilitates building wide variety context aware applications covering important design space contextaware computing canonical applications taken literature 
schilit categories applications context triggered actions rules specify context aware system adapt 
automatic contextual reconfiguration components added removed connections altered 
contextual information commands different results produced current context 
proximate selection objects located nearby emphasized easier choose 
allowing users visually create applications actions rules specifying contextaware system adapt basis icap described examples 
example automatic contextual reconfiguration taken reconfiguration share object people 
icap supports environmental personalization example room lighting devices adjusted meet preferences occupants 
example contextual information commands schilit location browser presents information relevant user location 
icap supports delivery user selected content fixed mobile outputs described 
leveraged build application delivers list people adjacent rooms user cell phone updates user enters new location 
built example proximate selection application shows list available outputs user current location fixed displays room 
icap build variety canonical context aware applications taken literature 
common applications include tour information guides reminder systems environmental controllers 
users build tour guide applications creating collection rules user defined content enters particular location similar schilit contextual information command category 
content delivery customized profile preferences user display information architecture space user interested architecture example 
reminder system built way tour guide application creating number rules deliver content reminder user particular situation 
example am room adjacent remind give book borrowed 
home automation systems environment controllers popular context aware application 
described earlier icap supports creation rules control heating lighting conditions environment personalization occupants space differing preferences 
icap interactive contextaware application 
icap visual rule environment supports users prototyping contextaware applications writing code 
icap provides main benefits opening space context aware application design larger group users just programmers gives control happen context aware environment people affects users 
icap supports users designing implementing context aware application testing simulated real conditions revising needed 
particular supports creation situation action rules triggered contextual cues building spatial temporal personal relationship rules building environment personalization systems 
validated usefulness ways 
obtained feedback users programmers told icap powerful system 
showed icap build canonical context aware applications applications covered schilit design space 
systems designed users constrained functionality systems designed programmers 
icap build wide variety context aware applications expressive existing programming systems building applications 
includes supporting sophisticated boolean logic ability activate deactivate rules contextual cues 
addition extend icap support context retrieval systems tag captured information contextual cues aid retrieval 
icap capture context cues need add ability store cues persistently attach user provided content provide mechanism querying cues content 
increase expressiveness icap time maintaining ease increasing learnability improve users performance creating rules 
plan redesign interface rules engine address issues arose user study 

abowd cyberguide mobile context aware tour guide 
wireless networks 

callahan empirical comparison pie vs linear menus 
proc 
chi 

chen kotz solar open platform context aware mobile applications 
proc 
international conference pervasive computing 

cooltown homepage 
cooltown hp com 
cypher smith user programming simulations 
proc 
chi 

wizard oz studies 
proc 
intelligent user interfaces 

dey conceptual framework toolkit supporting rapid prototyping context aware applications 
hci journal 

social navigational aspects location information systems 
proc 
ubicomp 

gajos user empowerment human centered pervasive computing 
proc 
pervasive 

hayes roth rule systems 
communications acm 

hong landay infrastructure approach contextaware computing 
human computer interaction journal 

hong landay satin toolkit informal applications 
proc 
chi 

humble playing bits user composition ubiquitous domestic environments 
proc 
ubicomp appear 

lamming flynn forget intimate computing support human memory 
proc 
international symposium generation human interfaces 

mackay experienced information lens users rules 
proc 
chi 


schmandt location aware information delivery commotion 
proc 
huc 

mozer neural network house environment adapts inhabitants 
proc 
aaai spring symposium intelligent environments 

pane myers tabular textual methods selecting objects group 
proc 
ieee int symposium visual languages 


pascoe stick note architecture extending interface user 
proc 
intelligent user interfaces 

pascoe issues developing context aware computing 
proc 
huc 

repenning agentsheets applying grid spatial reasoning human computer interaction 
proc 
ieee symposium visual languages 

scerri reed ease actor development environment 
proc 
swedish ai society 

schilit context aware computing applications 
proc 
wmcsa 

schmidt van laerhoven build smart appliances 
ieee personal communications 

shu visual programming perspectives approaches 
ibm systems journal 

weiser computer st century 
scientific american 
