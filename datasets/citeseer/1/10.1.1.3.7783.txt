evolving coordinated systems position fiadeiro andrade gouveia mw di fct unl pt pt jose fiadeiro org com pt atx software sa ant nio linda software sa ant nio linda dep 
informatics fac 
sciences univ lisbon campo grande lisboa dep 
informatics fac 
sciences technology new univ lisbon portugal achieve high levels evolution personalization current information systems deliver propose separate generic aspects computations system perform interactions possible computations configuration computations interactions coherent system contexts system 
context provides principled personalized way interacting system 
interactions change system state may lead run time changes configuration 
sketch ideas layer architecture design agile systems 

nature changes occur business level components model business entities level business rules regulate interactions entities level business policies govern application business rules 
believe successful methodologies technologies provide abstractions reflect architecture systems supporting clear separation computation performed core business components coordination prescribed business rules configuration indicated business policies 
rules policies change time domains banking telecommunications quite rapidly achieve differentiation competition 
important provide modeling primitives precise semantics technological support allow system designers developers easily define implement new business rules policies change existing ones 
different business rules may apply different instances business entity class rules regulate customers may interact accounts may depend status actual account say balance account type 
furthermore instance may affected different rules lifetime 
great importance rules applied instances types turned run time 
words business policies brought dynamic reconfiguration system 
business services offered system application business policies core business entities usually depend user human physical software 
necessary take context usage account 
facilitates conceptual design system providing principled personalized access points system promotes agility system easier add change business services creating modifying specialized contexts 
example new context may created allow customers access accounts interactive tv 
separation coordination computation advocated long time coordination languages community separation concerns central software architecture put forward distinction components connectors architectures 
configurable distributed systems community particular configuration programming approach gives class status configuration 
approaches provide satisfying way model concerns way supports evolution 
coordination languages configuration explicit low level coordination mechanism tuple spaces architecture description languages adls handle evolution deficient way configuration programming modeling level 
hand modeling languages notion context uml cases turn provide adequate support explicit run time configuration management 
position achieve high degree agility including ability add new services personalize systems designed clear separation fundamental concerns computation coordination configuration context mind 
design facilitated coherent architectural framework explicit modeling primitives precise semantics provided 
previous partially supported funda para ci ncia tecnologia project posi formal approach software architecture 
coordination primitive sketch modeling entity configuration contexts 
separate context configuration issues provide overview architecture depicted 

computation layer layer provides component types perform system computations 
component interfaces 
functional interface includes operations allow query change encapsulated component state 
configuration interface provides component constructors destructors operations necessary correct management dynamic reconfiguration 
operation querying component stable state component may deleted connections components changed 
example operation temporarily block component execution reconfiguration involves processed 
reason separate interfaces able constrain access various parts architecture achieve cleaner separation concerns 
case coordination layer require component invoke component configuration operations 
particular implies components may create components change currently existing configuration explicitly managed configuration layer 
approach evolution effective necessary explained functionality operations component kept bare minimum perform strictly necessary computations leaving conditions operations depend business rules may evolve 
example banking system include components represent core business entities customer account 
functional interface provides operations debit amount credit amount 
important issue debit subject preconditions correspond business rules may change 
example rule amount withdrawn current balance 

coordination layer software architecture terminology layer provides connector types regulate interactions components layer 
require connector type provide functional configuration interface 
constructor configuration interface include arguments components connector instance created coordinate 
impose restrictions connector may configuration interface connector component connector may connector functional interface 
rationale condition configuration operations performed configuration layer 
reason second condition possible evolve system un plugging individual connectors components possible dependencies connectors 
developed connector primitive allows interaction rules superposed run time components 
called coordination contract described papers 
implementation lines freely available java www com 
briefly put contract specifies types participating components applied private attributes operations necessary describe interactions set coordination rules 
rule trigger guard body 
trigger condition state participants request particular service event issued participants 
body identifies reactions performed usually terms functional operations partners contract operations 
case component participates multiple contracts trigger set actions body executed atomically transactional mode 
call set synchronization set associated rule 
name rule acts rendez vous sense 
guard determines conditions actions synchronization set allowed occur 
guard false trigger activated synchronization set executed trigger considered failed 
continuing banking example implements business rule allowed customer account 
contract binary participants type customer account 
trigger call customer debit operation account guard checks amount greater balance 
body just calls debit operation 
contract implement business rule allows limit 
contract differences private attribute hold credit limit guard condition amount limit 
functional interface contract operations query change limit 
details actual syntax semantics coordination contracts number examples different application domains banking telecommunications stock trading 

configuration layer contracts possible easily change business rules effect component instances system contracts solve problems arise conflicts dependencies rules 
usually specified business policies 
example policy states withdrawal business rules mutually exclusive 
feature interactions known telecommunications explicit managed configuration layer 
layer provides set high level reconfiguration operations enforce global invariants system configuration 
operation corresponds works called reconfiguration script 
contrasts basic commands provided adls create remove components connectors bindings components connectors 
example token ring architecture configuration layer provide high level node deletion operation automatically connects neighbours removed node transfers token held removed node 
layer explicit invariants configuration keep evolution 
natural express invariants declarative language primitive predicates query current configuration connector type connects components 
languages proposed distributed systems sl software architecture approaches 
approaches program reconfiguration operations provide operational specification changes 
position modeling level operations specified declarative way language invariants stating properties configuration change 
words semantics reconfiguration operation provided layer pre post conditions 
sketched approach reconfiguration management coordination contracts 
actual implementation configuration layer follow technical architecture configuration database containing updated information current configuration consistency manager enforces stable state reconfiguration occur reconfiguration manager executes reconfiguration operations services database consistency manager 
implementation reconfiguration operations configuration interfaces provided components contracts functional interfaces changes configuration depend current state components contracts trigger state modifications restore application wide consistency 
continuing banking example configuration layer specification includes invariant customer account operation customer account limit real automatically replaces enforce invariant 
pre conditions operation state bank wide context independent policy allowed certain limit 
example limit awarded fixed maximum amount 
configuration layer specification language allow easily describe precedence contracts case simultaneous triggering multiple contracts 
example mobile phone companies usually billing packages subscribed separately customers 
package allows get discounts calls list provided customer frequently called mobile phone numbers reduces cost calls non mobile phones area caller currently usual discounts cumulative 
business policy state explicitly package takes priority phone number conditions apply called 

context layer layer defines set contexts particular way interacting system 
context provides set business services taken form profile business activity 
services implemented configuration layer query change current configuration functional operations provided components contracts 
environment access manipulate system provided contexts bottom layers visible outside system contexts set constraints nature operations performed 
constraints add policies rules invariants declared configuration contracts components reflect properties specific business context 
example withdrawal service atm context fixed limit amount withdrawn irrespective balance customer account 
constraint added business rules effect withdrawals performed customer service call directly debit operation account turn trigger contracts effect 
contexts model actors cases mechanisms users regardless human physical software access system users interfere configuration system just state 
context local state consists projection global system configuration components coordination contracts declared context 
projection defines subsystem 
notion subsystem identified context modeling primitive context defines subsystem implicitly overlapping subsystems may associated contexts 
furthermore contexts define subsystems different levels abstraction acting powerful structuring mechanism system development 
example atm context provides view account associated card introduced machine 
business rules govern interaction account largely transparent context services invoke directly part account functional operations 
hand context personal account manager defines subsystem consisting accounts manages business rules effect manager opportunity change discretion customer wishes bank policies 
happen account may part contexts varying levels detail 
context may state order represent information sense business context attributes subsystem identified context 
instance properties average balance average taken accounts customer owns require context accounts 
example atm context attribute store amount money held machine 
withdrawal service uses value check possible withdraw requested amount 

concluding remarks argue system development try separate strictly possible fundamental concerns computation coordination configuration context order achieve levels understanding reuse evolution today large customizable changing software systems require 
coordination languages software architecture distributed systems design methods tackled concerns feel comprehensive coherent architectural framework explicit modeling primitives concern missing 
sketched framework conceived proposing layers different kinds welldefined interfaces showing responsibilities layer possible interactions layers configuration layer may call configuration operations provided bottom layers 
previous papers provided details coordination configuration primitives look 
different layers may enforce different kinds constraints 
coordination contracts enforce local constraints set components connect configuration layer may enforce system wide topological invariants context provides usage constraints 
layer addresses different building block business domain computation layer provides entities coordination layer rules configuration layer policies govern applicability rules contexts services available environment 
separation concerns greatly facilitates evolution 
system easily adapted new ways home banking internet new packages automatic monthly transfer checking savings account offered customers simply adding new context contract types respectively changing layers 
packages easily un subscribed configuration layer manages run time reconfiguration un plugging contracts specific component instances providing great flexibility defining business rules effect business entities moment 
refine framework specify exact primitives describe configuration context layers add coordination development environment built support coordination contracts 

andrade fiadeiro coordination evolutionary dimension technology object oriented languages systems tools ieee computer society press 
andrade fiadeiro interconnecting objects contracts uml standard lncs springer verlag 
andrade fiadeiro gouveia 
support business driven evolution coordination technologies 
intl 
workshop principles software evolution pp 

vienna sept andrade fiadeiro 
enforcing business policies automated reconfiguration th intl 
conf 
automated software engineering pp 
ieee computer society press 
bass clements kazman 
software architecture practice addison wesley 
proc 
th intl 
conf 
configurable distributed systems ieee computer society press 
wei programming generic dynamic reconfigurations distributed applications st intl 
workshop configurable distributed systems pp 

francez forman interacting processes addison wesley 
gelernter carriero coordination languages significance communications acm pp 

gouveia andrade fiadeiro tool support coordination software evolution technology object oriented languages systems tools ieee computer society press 
gouveia andrade fiadeiro managing evolution telecommunications systems proc 
ifip working conf 
distributed applications interoperable systems kluwer 
andrade fiadeiro gouveia coordination technologies business strategy support case study stock trading ecoop workshop object oriented business solutions 
kramer 
configuration programming framework development distributable systems proc 
pp 
ieee 
medvidovic taylor classification comparison framework software architecture description languages ieee trans 
software eng jan 
consistency preserving dynamic reconfiguration distributed systems phd thesis imperial college london 
monroe capturing software architecture design expertise tech 
rep cmu cs school computer science carnegie mellon university oct 
lopes fiadeiro 
graph architectural re configuration language proc 
esec fse pp 

acm press 
young magee flexible approach evolution reconfigurable systems st intl 
workshop configurable distributed systems pp 

