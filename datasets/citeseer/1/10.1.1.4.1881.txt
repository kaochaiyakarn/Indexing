web service composition current solutions open problems srivastava ibm india research laboratory block iit new delhi india ibm com composition web services received interest support business business enterprise application integration 
side business world developed number xml standards formalize specification web services flow composition execution 
approach primarily syntactical web service interfaces remote procedure call interaction protocols manually written 
side semantic web community focuses reasoning web resources explicitly declaring preconditions effects terms precisely defined ontologies 
composition web services draw goal oriented inferencing planning 
far approaches developed independently 
compare approaches discuss solutions problems modeling composing executing verifying web services 
discuss web service composition special derive challenges ai planning community 
growing trend software architecture build platform independent software components called web services available distributed environment internet 
applications assembled set appropriate web services longer written manually 
seamless composition web services enormous potential streamlining business enterprise application integration 
functionality web service needs described additional pieces information semantic annotation functional annotation behaves 
industry views web services standardized interfaces business processes 
specification web service expressed wsdl christensen specifies syntax messages enter leave koehler ibm zurich research laboratory ch switzerland koe zurich ibm com computer program 
order messages exchanged services described separately flow specification 
web services flow specification languages bpel ws curbera wsci arkin 
composition flow plan manually obtained 
semantic annotations widely discussed semantic web community berners lee hendler lassila preconditions effects services explicitly declared resource description format rdf rdf terms pre agreed ontologies 
consequently understanding meaning messages poses problem approach 
composing web services semantic web community draws ai planning decades investigated problem synthesize complex behaviors initial state explicit goal representation set possible state transitions 
assumed business process application associated explicit business goal definition guide planning composition tool select right service mcilraith son 
unfortunately explicit goals usually available industrial perspective 
business process model describes processing persistent data objects discrete process steps 
real goal business remains implicit models expressed higher level balanced score cards implicit goal business process correct handling creation data objects manifested persistent documents 
example explicit goal travel reservation process perfectly organize travel implicit goal creation required travel documents data base 
believe understanding related issues pave way research directions planning effectively address web services composition problem 
take realistic application domain web services specifically trip planning highlight extent business needs qualify web services prefix semantic web services expressed rdf reserve term web services business process interfaces expressed wsdl 
addressed wsdl web services semantic web approaches 
investigate approaches differ respect modeling verification deployment services respective inference methods runtime support assume 
conclude discussion related describe industry relevant unsolved practical planning problem 
example scenario describe detail web service application scenario booking travel packages travel agency consider simple closed world travel example evolves dynamic integrated solution 
closed world case customer talks travel agent notes customer requests generates trip request document may contain needed flight hotel reservations 
travel agent performs bookings done puts trip request cancelled requests completed requests data base see 
completed document sent customer answer request 
booking fails customer contacted process re iterates 
closed world travel agency 
assume travel agency wants cooperate external specialized service providers offer hotel flight reservations 
process longer closed world solution requires reorganize entire processing customer requests 
new services integrated services correctly interact 
new situation receiving customer order travel agent create trip request derive required hotel flight reservations 
sent specialized services independently try book desired reservations 
coordination achieved travel agent process services report success failure making requested bookings 
services successfully completed confirmation process step puts documents informs customer completed see www org ws 
trip plan 
services fails cancellation process step tells service put reservations hold contacts customer revise trip 
open world variant example scenario see properties quite typical real world planning scenarios number processes agents concurrently cooperatively try achieve goal processes spawn processes runtime hotel request hotel service invoked 
number known design time known runtime 
processes partially interleave synchronize run fully independent process exhibits complex behavior certain planned operations may fail require recover failed execution 
going discuss web services implement open world business solutions 
web services web services defined self contained modular units application logic provide business functionality applications internet connection 
web services support interaction business partners processes providing stateless model atomic synchronous asynchronous message exchanges 
atomic message exchanges composed longer business interactions providing message exchange protocols show mutually visible message exchange behavior partners involved 
issue web services described resolved various ways 
web services wsdl web services definition language wsdl christensen xml language specifies web service defining messages provide definition data transmitted operations web service provides transmit messages 
types communication defined involving service operation endpoint endpoint receives message way sends message notification endpoint receives message sends correlated message request response sends message receives correlated message solicit response 
operations grouped port types describe points web service logical address operation invoked 
wsdl message element defines data elements operation 
xml schema syntax define platform independent data types messages 
message consist parts 
parts compared parameters function call traditional programming language 
concrete protocol bindings physical address port specifications complete web service specification 
show sample wsdl fragment possible travel agency service 
port type names simple default strings operation names illustrate interacting process steps 
example customer create itinerary abbreviated create itinerary flight service abbreviated stands replan itinerary flight service 
definitions xmlns schemas org wsdl message name message message name message message name message message name message message name message porttype name pt operation name input message operation porttype porttype name pt operation name output message operation porttype porttype name pt operation name output message operation porttype 
porttype name pt operation name output message operation porttype definitions definition see web service viewed remote procedure call rpc 
exact control data flow determines operation execute provided flow composition language bpel ws show flow travel example section 
service invoked gets synchronous asynchronous response 
fragment operations asynchronous specifies input output message 
messages simple syntactic descriptions usually associated xml schema show semantics 
web services semantic web semantic web berners lee hendler lassila views world wide web globally linked database web pages marked semantic annotations 
core semantic annotations assertions web resources properties example subclass expressed resource description format rdf rdf 
rdf description set triples triple akin subject verb object sentence 
element triple represented universal resource identifier uri 
rdf written multiple notations xml notation rdf rdf schema rdfs express classes properties ranges documentation resources daml ontology represent relationships properties equivalences lists data types 
daml defined service class model web services properties presents supports 
properties turn classes service profile servicemodel respective ranges 
travel reservation example model different participating web services terms daml ontology 
assume travel agency web service interface similar airline bravo air daml description publicly available 
serviceprofile gives high level description service advertise features clients select locate service registries 
important information contains inputs outputs preconditions postconditions service 
example flight itinerary output airline shown 
specialization general flight itinerary concept defined refers round trip resource 
profile output profile rdf id profile profile profile rdf resource concepts daml profile rdf resource roundtrip profile profile output servicemodel detailed description service modeled process 
description sub divided process model describes sub components service process control model provides runtime framework monitor execution service 
process model description composite process sub processes dependencies interactions expressed sequence split unordered show representation static sub flow flight service bravo air section 
provides binding level information client access service soap java rmi 
fragment shown see www daml org services daml 
see www daml ri cmu edu ont daml con cepts daml 
daml parameters mapped wsdl descriptions turn protocol level binding information 
grounding rdf parsetype daml collection grounding grounding rdf resource grounding xsd rdf value grounding grounding grounding semantic web infrastructure place practical powerful applications written annotations suitable inference engines automatically discover execute compose interoperate web services 
type consistency checking currently possible inferencing horn clauses soon available larger subsets order predicate logic supported semantic web degree logical expressivity achieved today planning languages reached 
discussion wsdl provides function centric description web services covering inputs outputs exception handling 
semantic web provides process level description service addition functional information models preconditions postconditions process evolution domain logically inferred 
relies ontologies formalize domain concepts shared services 
modeling flow composition discuss approaches address web service composition problem 
different information available specify web service approach surprising solutions flow composition problem come apparently different albeit divergent ways 
industry solution wsdl bpel ws saw interface description travel agent web service wsdl 
interactions message exchanges travel agent partners customer flight hotel services described business protocol specification language concentrate standard bpel ws proposed ibm microsoft specifies roles partners logical flow message exchanges perspective travel agent process 
example interesting assume interaction customer proceed web service interface 
process name partners partner name customer partner name partner name partners containers 
containers 
process wsdl message corresponding container hold message specified 
containers container name messagetype container name messagetype container name messagetype container name messagetype container name messagetype containers difficult task specialist specify logic message flow 
purpose bpel ws provides programming language constructs sequence switch pick graph links represent additional ordering constraints constructs 
language fairly complex example illustrates 
process starts receives trip request customer 
request received hotel flight request messages sent order partner services 
sequence receive partner customer porttype pt operation container receive flow invoke partner porttype pt operation development effort support partially automate task way industry goes scope 
invoke invoke partner porttype pt operation invoke flow partner services invoked process waits services send results booking operations arrive order 
flow receive partner porttype pt operation container receive receive partner porttype pt operation container receive flow answers received process needs branch depending trip booked services 
introduces switch construct process 
show representation condition reality complex xpath expression contents arriving message 
branch process needs inform customer successful completion reservation sends completed trip request documents 
second branch needs inform customer booking failure decide services informed failure partner 
partners informed order introduces flow construct process 
flow switch construct nested decides partner informed 
switch case condition condition invoke partner customer porttype pt operation invoke case flow invoke partner customer porttype pt operation invoke switch case condition condition invoke partner porttype pt operation eval invoke case invoke partner porttype pt operation eval invoke 
switch partner processes needs specified similar way sure specifications fit 
get back problem section 
semantic web solution rdf daml golog planning try solve service composition problem travel domain semantic web perspective 
focus partners consider static sub flow flight reservation bravo air specified process model servicemodel 
service model states flight reservation bravo air composite process service realized invoking sequence sub processes get book flight 
basically servicemodel construct service describe static process level description complete specification comparable bpel ws process specification 
daml class rdf id process daml subclassof rdf resource process daml daml subclassof daml restriction daml onproperty rdf resource process daml daml daml class daml intersectionof rdf parsetype daml collection daml class rdf process sequence daml restriction daml onproperty rdf resource process daml components daml daml class process rdf parsetype daml collection daml class rdf daml class rdf daml class rdf process 
daml class daml class mcilraith son method compose web services applying logical inferencing techniques pre defined plan templates 
service capabilities annotated daml rdf manually translated prolog 
goal description logic programming language golog levesque implemented prolog instantiate appropriate plan composing web services 
golog situation calculus supports specification execution complex actions dynamical systems 
authors extend support sensing actions find values variables runtime 
proc travel 
table travel reservation procedure golog 
stand origin destination departure time return time 
table shows generalized plan taken mcilraith son input golog reasoner 
plan specifies order travel booking achieve goal travel return air subsequent car reservation origin destination direct car reservation 
followed making hotel reservations sending email reservation user updating expense claim forms 
similar plan action templates individual processes defined 
golog reasoner plan action templates evaluates non deterministic choices executes plan 
execution prolog environment non deterministic choice default evaluation order order appearance literals 
essentially golog programs plan templates customized bound runtime goal instances 
system uses hand built wrappers transform semantic annotations golog representations vice versa 
section compare specific characteristics approaches derive challenges ai planning research 
discussion specification composite service specified bpel ws encodes process infor mation bound different protocols 
thing note significantly emphasis bpel ws error handling message correlation 
bpel ws possible express choice multiple process activities pick switch constructs set choices pre determined activity conditioned occurrence event specific message contents 
similar construct daml choice construct selecting subset sub processes composite process 
semantic web composition solution rdf daml golog comparable bpel ws specification allow customization plan execution runtime select particular branch execution loop exit condition satisfied support binding variables concrete values discovered runtime 
industry approach looks composite services mainly runtime perspective functions data control flow 
angle essential information reasoning service inputs outputs exception handlers 
schemas define restrict format data define relationships 
flexibility dynamically adapting plan limited specification binding details runtime executing specific branches 
planning approaches semantic web focused process centric description services actions applicable states 
state transitions defined preconditions actions transitions leads new states effects action valid 
need representation state actions goals events optionally ontology standard terms 
plan adapted offline online 
flexibility terms considering different choices services plans goals goals explicitly 
impression approaches developed true planning solution service composition problem far 
bpel ws specifications golog programs written manually assembling complex flows atomic message exchanges search process takes place 
see characteristics current ai planning technology directly applicable service composition problem action representations kept simple need model receiving sending particular message type 
plans need contain complex control structures involving loops nondeterminism choice 
far planning model checking approach able provide initial solutions generation complex plans giunchiglia traverso 
planning problem really expected take place level primitive actions control structures require take complex plans building blocks synthesize multi partner interactions 
discuss 
objects manipulated actions typed messages rich structure 
typed message may contain identifiable parts arbitrarily complex descriptions 
resembles object representations description logics sparse objects planning community 
rich structure message objects essential specify flow logic provide mechanisms message correlation 
contrast classical planning objects available initial state actions change state objects web services create new objects runtime produce message objects execution processed services 
open problem behavior adequately modeled currently available planning techniques 
models web services action specifications similar ai planning provide generic powerful solution flow composition problem build new flow plans scratch mcdermott srivastava scalable algorithms synthesize required control structures easy provide 
considering bpel ws example require wrap receive invoke activities actions plan specify pre postconditions explicit way referring structural properties incoming outgoing messages internal state bpel ws process 
note assumptions internal state partner process information available 
fundamental assumption partners hide constantly modify processes standardized message exchange interfaces exposed web services 
currently relevant problem message exchange behavior partner business protocol runs construct valid counterpart partner successfully communicate 
bpel ws complex language specifying business protocols unknown difficult construction dual protocol planning perspective challenging map problem classical representation involving initial states goals 
simpler approach business protocol specification web services conversation language wscl banerji uses simple uml activity diagrams specify protocol 
partner problem easily solved wscl problem difficult multi partner scenario 
problem discussed preliminary solution provided 
decision problem variant highly practical relevance partner protocols partners successfully communicate 
results available far 
discussion apparent web service composition problem similar design specification computer protocols essential difference semantics new business protocol languages precisely defined 
major deficiency attracts critics staab 
see possible candidates formal semantics built process algebras milner automata models brand holzmann situation calculus reiter recall golog discussed 
related issue give semantics input output specification composite service different outputs produced certain complex conditions satisfied composition paths 
industry high performance availability requirements web services deployed production environment 
want web services robust service usage charged secure needed verifiable 
requirements reflected specifications bpel ws initial attempts verify formal methods fu su 
semantic web started look verification problem flows 
narayanan mcilraith semantics subset daml expressed order language petri nets simulate compose verify web services 
related literature web services semantic web abundant staab need rigorous formal foundation widely discussed 
currently description web services syntax flows executed 
necessary view web services context specifying validating automatically synthesizing complex reactive processes 
areas planning relevant area distributed planning desjardins planning model checking giunchiglia traverso approaches planning problem synthesizing controllers just name 
automata representations explored planning context dal pistore traverso far focused representation goals actions 
htn planning erol hendler nau operators express aggregate behavior refined express nondeterminism iterations compound tasks unexplored issue 
planning travel domain demonstrated ambite interactive framework csp solving build travel plans conjunction inputs user 
approach involve usage nondeterministic iterative operators 
planning explored generating workflows grid explicit goal specification blythe 
application regression planning web services described mcdermott 
starting current interest web services explored web service composition problem compared major approaches problem industrial approach semantic web approach 
identified highly relevant subproblems related ai planning perspective 
problems resemble planning problems possible directly apply current ai planning technology 
discussed characteristics problems different commonly studied planning scenarios identified research directions 
ambite ambite 
getting interactive planning agent execution optimizing travel 
proc 
iaai 

daml services 
www daml org services 
arkin arkin 
web services choreography interface wsci 
www org tr wsci 
banerji banerji 
wscl web services conversation language 
www org tr wscl 

method synthesis controllers handle safety liveness real time constraints 
ieee trans automatic control 
berners lee hendler lassila berners lee hendler lassila 
semantic web 
scientific american may issue 
blythe blythe 
role planning grid computing 
proc 

brand brand 
communicating finite state machines 
journal acm 
christensen christensen 
web services description language wsdl 
www ibm com software solutions webservices resources html 
curbera curbera 
business process execution language web services 
www ibm com developerworks webservices library 
dal pistore traverso dal pistore traverso planning language extended goals 
proc 
aaai 
desjardins desjardins durfee ortiz 
survey research distributed continual planning 
ai magazine 
erol hendler nau erol hendler nau 
sound complete procedure hierarchical task network planning 
proc 
aips 
fu su fu su 
formal verification services workflows 
proc 

giunchiglia traverso giunchiglia traverso 
planning model checking 
proc 
ecp 
holzmann holzmann 
design validation computer protocols 
prentice hall new jersey 
levesque levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains 
journal logic programming 
mcdermott mcdermott 
planning interactions web services 
proc 
aips 
mcilraith son mcilraith son 
adapting golog composition semantic web services 
proc 
krr 
milner milner 
communication concurrency 
prentice hall 
narayanan mcilraith narayanan mcilraith 
simulation verification automated composition web services 
proceedings world wide web conference 

web service interfaces inter organisational business processes infrastructure automated reconciliation 
proc 
edoc 
rdf rdf 

rdf resource description framework 
www org rdf 
reiter reiter 
knowledge action logical foundations describing implementing dynamical systems 
preprint version 
srivastava srivastava automatic web services composition planning 
proc 

staab staab 
web ser vices done 
ieee intelligent systems jan feb issue 

