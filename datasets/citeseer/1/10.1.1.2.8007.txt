mapping models different modeling languages dom rubio zapata 
de inform tica de sistemas 
facultad de ciencias 
de matem 
universidad de zaragoza 
zaragoza 
spain 
es 
de matem computaci 
universidad de la 
spain dmc es 
show process defining translation different modeling languages allows map model expressed modeling language model expressed modeling language 
mapping construction process tackled metamodeling perspective applied fragments oml uml modeling languages 
unified modeling language uml widely accepted standard notation object oriented software modeling 
object oriented modeling languages currently different application domains great interest analyzing similarities differences uml non uml languages 
comparisons carried informal way cases precise mapping models modeling language models modeling language 
problem mappings particular solutions defined specific languages reused defining translations modeling languages 
approach obtaining general framework model translation metamodelling proven metamodels improves rigor facilitates system integration interoperability 
issue defining model mappings metamodelling approach faced literature different contexts different metamodelling perspectives 
instance systems interoperability context propose definition metamodel ontology generically represent building blocks data models 
grundy deal integration different notations achieving interoperability means mapping construction metamodel involved languages metamodel integrating initial ones 
example comma project object oriented core metamodel proposed comma compliant methodologies derived allowing smooth translation core concepts done 
metamodelling perspective considered proposed concrete method conducting construction mapping models different modeling languages technique metamodeling language 
approach proposes construct metamodel involved languages approaches cited proposal consists defining chain intermediate metamodels order bring initial ones 
main advantages perspective complex problem assuring semantics preserved mapping delimited simpler steps existing transformations instance refactoring transformations 
partially supported projects tic pb decomposition parent substate state machine state target nonstop state controls source transition boolean boolean operation exception fig 

uml metamodel oml state machines fires controls trigger guard message idea show mapping construction process proposed constructing general way defined translations uml non uml languages 
result method helpful tool analyzing relationship uml languages 
furthermore follow uml definition style reason uml metamodeling language 
prove practical way independence proposed method chosen metamodeling language 
organized follows section mapping construction process illustrating means example 
mapping definition process order compare uml non uml languages propose bring play notion mapping translation 
modeling languages refers method allows model determined starting model problem general definition mapping complex task 
way facilitating process proposed mapping definition method metamodeling approach 
method idea defining mapping starting metamodels languages belief approach facilitates mapping construction process 
precise proposal construction mapping language metamodel language metamodel consists considering finite chain metamodels mn hand consecutive metamodels mi mi differ slightly order development mapping models easier hand composition easier mappings provides complete mapping fulfill requirements 
order construct sequence metamodels step process proposed 
noteworthy advantage multi step process perspective allows delimit difficulties assuring semantics preserved translation 
instance shown third step metamodels approached means transformations proved correct respect semantics 
said proposed technique metamodeling language going uml language constructing languages mapping called transformation 
rq fig 

uml metamodel uml state machines metamodels prove method whichever chosen metamodeling language 
proposed mapping construction process applied uml metamodels 
order illustrate step process practical application construction mapping state machines oml state machines uml 
firstly uml metamodel modeling languages 
constructed metamodel oml state machines taken account oml metamodels proposed uml metamodeling language oml 
hand propose metamodel uml state machines appears 
metamodels defined steps construction mapping followed 
step 
setting mapping context 
context mapping meaningful determined step say analyzed mapping defined model source metamodel 
order ranges application involved metamodels compared 
particular example oml state machine mapped uml state machine general ranges application involved metamodels different necessary restrict context 
step 
understanding similarities differences 
goal step understand similarities differences modeling languages aim getting general perspective mapping determined steps 
order published comparisons involved languages comparison metamodels useful reveal aspects go unnoticed informal comparisons 
instance main concepts state transition operation trigger oml state machines metamodel appear different names uml state machines metamodel subclasses different aspect taken account mapping construction process 
furthermore important fact notion concurrent decomposition considered oml state machines 
step 
approaching initial metamodels 
step starting initial metamodels increasingly similar intermediate metamodels defined 
idea table 
class diagrams transformations oml state machines metamodel 
nonstop state source state 
nonstop state 
state 

controls entry exit 
operation 


transition 
transition 
exception 
message smooth away differences applying uml class diagrams transformations known correct respect semantics 
papers see propose uml class diagrams transformations account semantics 
transformations general allow class attribute method association added moved removed diagram holds predefined constraints 
furthermore complex transformations generalization merge line split proposed 
ideas proposed different mentioned papers applied sequence transformations oml state machines metamodel table obtaining result equivalent metamodel appears 
step 
determining specific mappings 
considered metamodels approached means uml diagrams transformations proposed literature ad hoc mappings defined mappings defined additional intermediate metamodels determined 
step particular semantics involved techniques taken account order construct specific mapping 
example establish pairs synonym concepts state state operation action trigger event metamodels achieved previous step instances concept considered instances synonymous concept 
simple mapping defined concepts transition concept 
case transition oml state machine source target state vertices mapped transitions source target state vertex adding necessary fork junction connectors 
different concurrent components oml state machine determined order establish corresponding concurrent decompositions uml state machine 
aware step mapping oml state machine uml state machine obvious analyzed determined precise way 
study remains ongoing 
step 
determining complete mapping 
global mapping source metamodel target defined suitable composition mappings obtained previous steps 
shown practically mapping construction process proposed applied order define translation uml non uml modeling languages 
particular process help delimit difficulties assuring semantics preserved translation 
time independence method decomposition state machine substate parent target state source entry exit transition operation controls fig 

modified uml metamodel oml state machines metamodeling language proven 
utility method order define mappings different uml models analyzed 

hart smith holmes iii aronson extending uml support ontology engineering semantic web gogolla eds uml unified modeling language lncs springer pp 


claypool rundensteiner evolving software schema evolution system de brock conrad eds database schema evolution meta modeling lncs springer pp 


dom zapata mappings interoperability meta modelling approach eds adv 
info 
syst lncs springer pp 


dom rubio zapata dynamic semantics uml state machines metamodeling perspective journal database management published 

dom zapata rubio conceptual approach meta modelling pastor eds adv 
info 
syst 
eng caise lncs springer pp 


eckert improving object oriented analysis information software technology pp 


evans reasoning uml class diagrams workshop industrial strength formal methods ieee press 

henderson sellers graham oml manual sigs books 

grundy providing integrated support multiple development notations lyytinen eds adv 
info 
syst 
eng caise lncs springer pp 


henderson sellers atkinson viewing oml variant uml france rumpe eds uml unified modeling language lncs springer pp 


henderson sellers object oriented springer 

henderson sellers graham oml metamodel relationships state modelling journal object oriented programming road sigs publications pp 


kim carrington formalizing uml class diagram object france rumpe eds uml unified modeling language lncs springer pp 


architectural patterns metamodeling evans kent selic eds uml unified modeling language lncs springer 

lano semantics transformations uml models 
muller eds uml unified modeling language lncs springer pp 


multi data models translations interoperable information systems mylopoulos vassiliou eds adv 
info 
syst 
eng caise lncs springer pp 


porting roses uml experience report 
muller eds uml unified modeling language lncs springer pp 


omg uml specification version formal 
available www omg org 
september 

suny le quel refactoring uml models gogolla eds 
uml unified modeling language lncs springer pp 

fires guard trigger 
