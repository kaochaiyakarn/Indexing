data structure subsumption tabling top resolution engines data intensive logic applications jacques peter institut fur algorithmen und systeme fakultat fur informatik universitat karlsruhe am karlsruhe germany 
tables top resolution engines effective way optimization avoiding recomputation derived facts 
effect exploited considering identical subgoals facts subsuming reused 
particularly interest recalculation expensive due data transmission cost mere volume data processed 
data structure subsumption tabling resolution 
data structure hb trees multiattribute indexing structure emerged research database management systems 
data structure inherits desirable properties efficient indexing structure secondary storage 
keywords logic artificial intelligence intelligent information retrieval subsumption tabling information integration tabling top proof procedures originally proposed guarantee termination recursive programs allow evaluation ts 
general effect tables recalculation answer substitutions avoided subgoal calculated resolution process calculation currently process 
new subgoal fed answers existing subgoal 
answer tables serve cache 
aspect tables interesting non recursive subgoals optimization technique cost calculating answers high 
case remote sites contacted network order retrieve facts specific information source data volume extremely high 
connection research integration heterogeneous information systems developed logic mediator system komet 
core komet highly flexible resolution engine processes sorted annotated logic programs ks 
uses slg resolution cw extended annotated logic 
slg resolution extensive answer tables program evaluation founded semantics 
context mediator system komet tables play central role query optimization strategy cache expensive subgoal calls 
ideally tables kept queries maximally exploit effect 
certain applications worth local secondary storage devices maintaining answer tables 
mechanism mediator system highly suitable data warehouse system gathering preprocessing locally storing information done implicitly mediator engine contrast explicit preprocessing steps done traditional data warehouse systems 
data structures tabling adopt notion subgoals answer producers selected literals clauses regarded answer consumers 
selection literal clause body necessary find producer generates appropriate answers able resolve clause 
producer exist previous calculations created usually implies program clause resolution initiated 
common approaches tabling rely variant tabling 
tabling existing subgoal accepted producer equals selected literal variable renaming 
variant tabling properties processing answer tables straight forward efficient 
variant tabling schemes adopt sharing approach represent subgoal answer tables form indexing tries rrr 
tries share representations atoms efficient terms space requirements exhibit performance insert lookup operations 
main drawback variant tabling fact potential tables caching facility fully exploited 
variant tabling tends produce large number subgoal answer tables performing redundant computations 
exploiting subsumption subgoal calls performance subgoal resolution engine drastically improved 
shown rrr tries extended subsumption tabling 
believe tabling data structure suitable data intensive logic applications properties support specific needs tabling tabling requires retrieval subsets table contents query literal specific subgoal may contain variables 
requires answers indexed arguments way foreseen binding information supplied consumers 
requirement mechanism registering consumers needed subgoal calculation process subsumed literal selected 
reduction subsumed answers hand new answer ignored subsumed answer data structure 
hand new answer subsumes answers data structure removed table 
support secondary storage main memory limit data volume processed deductive system 
disk accesses sufficiently efficient 
support persistence maximally exploit tabling sensible store answer tables longer period time queries query sessions 
concrete system tables recalculated regularly weekly order reduce resource consumption productive environment 
tries data structure subsumption tabling essential drawback 
dimensional indexes concatenation attributes index keys 
tries inherently index prefixes stored information lookup efficient longer prefix query partial match queries degenerate traversals entire data structure worst case presence bound arguments 
class access methods applicable scenario hash methods 
problems 
poor space efficiency worse case multi dimensional methods 
suitable efficient incorporation secondary storage devices 
dynamic growth hash tables usually involves expensive reorganization processes 
multi attribute indexing structures multi attribute indexing structures mainly concern database research 
usually ordering access methods applicable arbitrary sets key values tree search 
classical indexing structure dimensional access tree approximately balanced binary tree 
naive way achieve multi attribute indexing dimensional index dimension 
greatest disadvantages approach poor space efficiency high cost insertions deletions operations performed dimension individually 
fact cost increases proportionally dimension search space generally acceptable 
grid files trees trees variants known data structures multi attribute indexing 
trees bkk hb trees ls els ub trees bay discussed specific strengths weaknesses 
requirements tabling data structure average storage utilization efficient dynamic reorganization support partial match queries robustness respect data distribution key space dimension 
indexing structures exhibit properties partially 
purposes hb trees data structure guarantees properties time face arbitrary data 
detailed analysis multi attribute indexing methods lom 
hb trees hb tree introduced lomet salzberg els exhibits properties addition requirements 
small data sets hb trees easily modified complete storage management physical main memory 
hb trees extended concurrent access els 
property suitable multi threaded resolution engine 
note slg resolution suited concurrent processing 
hb tree derived tree 
hb trees composed pages contain tree 
tree basically consists types nodes 
data nodes contain data objects represent rectangular subspaces 
index nodes contain index term left right subtree divide subspace dimension 
hb tree page unit storage disk 
contrast trees goal hb tree structure avoid downward cascading page splits avoiding restructuring cost adverse storage utilization 
page full splitting done boundaries subspace 
results removal smaller brick subspace larger brick subspace original full page 
result holey brick name comes 
remainder describe modifications necessary order hb trees tabling structure tabling 
define tabling engine describe data structure terms definition 
currently restricted logical languages free function symbols includes non monotonic reasoning 
addition require domains predicate arguments fully ordered 
tabled resolution section abstractly describe resolution engine tabling 
view help understand central properties difficulties tabled resolution 
definition similar details different rrr emphasizes aspects tabled resolution 
presentation simplified version model restricted programs negation 
divide tabled resolution engine subsystems resolution engine re tabling engine systems true subsystem 
depending evaluation strategy may call 
due decoupling subsystems achieved input queues framework may serve model multi threaded resolution engine 
tabling engine set tabled subgoals subgoal tuple hl qi denotes subgoal literal represents set answers represents set pending clauses selected literal associated subgoal head literal stands queue waiting answers inserted subgoal table 
contains facts subsumed current state processing 
substitution factoring tabling set answer set variables substitution factoring employed transparently framework neglect loss generality 
resolution engine re tuple hp logic program represent queues elements waiting processing 
queue pending pairs hs cli cl clause associated subgoal table head 
queue new subgoals waiting program clause resolution 
queue triples hs cl triple formed clause cl selected literal associated subgoal table clause head substitution answer resolution 
re supports operations cl operation takes clause cl associated subgoal table clause body empty called literal selected called 
operation determines appropriate program clauses resolution subgoal literal clause performs substitution calls re 
cl cl operation performs answer resolution clause cl selected literal cl substitution 
calls re resolved clause 
supports operations operation inserts answer specified subgoal table subsumed 
determines consumers calls re consumer 
cl operation determines appropriate subgoal call exists exist subsumed answers sent consuming clause cl subgoal evaluation process cl registered consumer 
call exist new subgoal table created re invoked 
operations parallel subset transformations slg resolution defined cw 
termination property slg directly transferred tabled resolution engine ensure elements queues processed elements queues 
tables depart hb tree data structure ls els 
documented algorithms tabled resolution engine data structure provide mechanisms insertion answers variable arguments determination subsumed answers partial match queries registration consumers correct page splitting presence modifications 
insertion answers variable arguments inserted standard insert operation appropriate leaf node determined descending hb tree 
answers variables arguments represent region index space inserted data nodes overlap region search finds data nodes regard answers data node candidate answers check individually search literal 
special treatment answers variable arguments subgoal 
need inserted data nodes 
reduce redundancy able guarantee correctness page split algorithm store answers separate list root tree 
pseudocode algorithm 
insert answer root answer answer inserted answer node answer node index node splitting dimension index term answer ground argument position left child answer right child answer argument value answer position index term left child answer right child answer node data node forall answers answer container perform reduction forall answer subsumed insert answer answer container container overruns split node technique trees ub trees 
finding subsumed unifiable answers search subsumed unifiable answers general corresponds partial match query 
query defines subspace search space 
result entries enclosed overlap subspace returned 
candidate data pages determined way insertion algorithm 
algorithm subsumed answers 
algorithm unifiable answers works accordingly 
node query subsumed node index node splitting dimension index term query ground argument position left child query subsumed right child query subsumed argument value query position index term left child query subsumed right child query subsumed node data node add subsumed answers container subsumed consumer registration supplement data structure tree consumers answers particular subgoal stored 
new answer inserted answer tree consumer entries unify new answer determined 
answer queued re resolution 
page splitting general algorithm page splitting remains hb tree 
general idea node overrun content node evenly split parts 
ls shown node point data split possible ratio better 
note splitting criterion may involve dimension search space 
presence spatial data different situation 
answer consumer variable argument position split dimension generally speaking overlaps subspaces duplicated inserted pages 
technique trees srf 
problem arises entries data node cover entire subspace defined node 
possible find appropriate splitting criterion 
exploiting special structure non ground answers application domain guarantee valid data node splits capacity data nodes dim gamma dim gamma 
number corresponds maximum possible number non ground entries presence answer reduction due subsumption 
entries variable arguments answers non ground arguments find splitting criterion splits ratio newnode new index node subnodes realizing criterion forall answers answer container insert newnode forall exchange newnode results implemented version tables complete memory tabling 
implementation system additionally supports negation handles sorted annotated logic programs founded semantics slg resolution 
system aware implements calculation founded semantics annotated logic programs 
inference engine know partially implements slg resolution prolog system xsb 
due additional features engine performs approximately order magnitude worse xsb 
table compare performance tables variant version engine 
size komet komet relative parent relation variant subsumption speedup table 
performance comparison benchmark calculation ancestor relation complete binary tree realized parent relation different sizes tests run intel pentium mmx mb main memory 
execution times seconds 
experiments tables exhibit substantial speedups comparison previous variant tabling technique 
proves robust different circumstances data distribution arity predicates 
par par query anc computes solutions data structure subsumption tabling resolution strategies 
data structure multi attribute indexing data structure called hb tree 
necessary adaptations achieved preserving general properties hb trees node utilization high fan 
tables secondary storage tabling opens wealth possibilities optimization deductive systems distributed heterogeneous environments 
tables incorporated komet logic mediator system integration distributed heterogeneous information systems 
context explore optimization potential subsumption tabling 
bay bayer 
universal tree multidimensional indexing 
proceedings conference pages 
bkk keim 
kriegel 
tree index structure high dimensional data 
proceedings international conference large data bases vldb pages 

komet system integration heterogeneous information sources 
th international symposium methodologies intelligent systems ismis 
cw chen warren 
query evaluation founded semantics 
acm symposium principles database systems 
acm press 
els lomet salzberg 
multi attribute index supporting concurrency recovery node consolidation 
proceedings international conference large data bases vldb 
ks kifer subrahmanian 
theory generalized annotated logic programming 
journal logic programming 
lom lomet 
review multi attribute access methods 
sigmod record september 
ls lomet salzberg 
hb tree multiattribute indexing method guaranteed performance 
acm transactions database systems december 
rrr rao ramakrishnan ramakrishnan 
thread time saves tabling time 
proceedings joint international conference symposium logic programming 
srf sellis 
tree dynamic index multi dimensional objects 
proceedings international conference large data bases vldb 
ts tamaki sato 
old resolution tabulation 
international conference logic programming pages 
