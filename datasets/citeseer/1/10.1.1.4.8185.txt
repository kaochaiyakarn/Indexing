communications acm sept appear 
user software engineering margaret burnett curtis cook gregg rothermel school electrical engineering computer science oregon state university corvallis usa burnett cook eecs orst edu user programming common form programming today little investigation dependability programs users create 
problem dependability programs important cases errors user programs formula errors spreadsheets cost millions dollars 
see example www uk content html cba hawaii edu ssr htm 
investigating ways address problem developing software engineering paradigm viable user programming approach call user software engineering 
user software engineering mimic traditional approaches segregated support element software engineering life cycle ask user think terms 
employs feedback loop supported scenes reasoning system user collaborate monitor dependability user program evolves 
approach helps guard faults user program faults introduced helps user detect locate 
spreadsheet languages widely user programming languages date wide fact may widely programming languages prototyped approach spreadsheet paradigm 
prototype includes user software engineering devices follow standard terminology discussing program errors 
failure incorrect output fault incorrect element source code causing failure 
example answer spreadsheet cell student grade failure incorrect formula omission test grades sum letter grade fault 
interactive testing methodology help user programmers test 
fault localization capabilities help users find faults testing may revealed 
interactive assertions continually monitor values program produces alert users potential discrepancies 
motivational devices gently attempt interest users appropriate software engineering behaviors suitable moments 
article describe devices user programmers 
summarize results empirical investigations usefulness effectiveness devices promoting dependability user programming 
wysiwyt testing see test wysiwyt methodology testing spreadsheets user incrementally develops spreadsheet test spreadsheet incrementally systematically 
point process developing spreadsheet user validate value notices correct 
scenes validations measure quality testing terms test adequacy criterion 
measurements projected user different visual devices help direct testing activities 
example suppose teacher creating student grades spreadsheet 
process teacher notices value cell correct check validate 
checkmark provides feedback reminds teacher cell value validated current inputs 
empty boxes question marks boxes possible indicate cell value validated current inputs 
addition question mark indicates validating cell increase 
second important result teacher validation action colors validated cell borders blue indicating data dependencies validated cell cells exercised producing validated values 
border colors teacher kept informed areas spreadsheet tested extent 
row letter cell border partially blue purple dependencies cell tested 
testing results flow upstream dataflow cells formulas producing validated value 
example dependencies row course cell exercised cell border blue 
teacher chooses view dependencies displaying dataflow arrows cells subexpressions formulas 
chosen view dependencies row letter cell 
arrows follow color scheme cell borders 
third visual device percent tested bar top spreadsheet displays percentage dependencies tested providing teacher overview testing progress 
teacher sequence interactions wysiwyt testing 
teacher need realize colors result placing reflect definition test adequacy criterion tracks data dependencies cell formulas caused cells 
testing program perfectly guarantee detecting faults general requires inputs test adequacy criterion provides way distribute testing effort elements program 
spreadsheet paradigm say cell fully tested data dependencies covered tests cells borders painted blue 
cells dependencies fully covered borders ranging red various shades purple 
testing process similar process professional programmers white box unit testing inputs applied level code coverage achieved 
spreadsheet environment process truly incremental bearing similarity test driven development approaches 
considerations testing theory underlying methodology described detail 
returning teacher eventually may need try different input values certain cells spreadsheet cause dependencies formulas come results checked 
process suitable inputs difficult professional programmers help available 
help test get help finding inputs test cell teacher selects cell pushes help test button spreadsheet toolbar 
system responds attempting generate inputs 
system constructs representations chains dependencies control execution particular data dependencies iteratively explores portions chains applying constrained linear searches spreadsheet input space data gathered iterative executions 
system succeeds suitable input values appear cells providing teacher opportunity validate sought pushing help test button 
empirical results show help test typically highly effective provides fast response 
finding faults suppose process testing teacher notices row letter grade incorrect 
error teacher formulas shall find 
thorny problem professional programmers various technologies proposed assist 
technologies build information available system successful failed tests dependencies 
experimenting approaches draw roots describe :10.1.1.13.5609
teacher indicates row letter grade erroneous placing mark 
row course average obviously erroneous 
shows cells contain pink interiors course darker letter course contributed incorrect values letter letter contributed 
colorings reflect likelihood cell formulas contain faults darker shades reflecting greater likelihood 
goal help teacher prioritize potentially suspicious formulas investigate terms likelihood contributing fault 
example small contribute great deal users empirical technique larger examples tend follow darkest cells 
automatically guided dataflow debugging paid debugging effectiveness 
suppose help colorings teacher fixes fault course cell 
weights weighted average add exactly 
completes edit underlying algorithms partner spreadsheet evaluation engine visiting affected cells order calculate dependencies formulas affected changes 
dependencies marked untested screen display shows resulting colors directing teacher attention portions spreadsheet retested 
assertions testing reveal faults may reveal 
empirical human programming errors categorized types errors participants introducing attempting remove faults 
study errors due poor strategies attention problems paying attention wrong part program working memory overload interfering efforts track fault 
professional programmers assertions form preconditions postconditions invariants help issues assertions continuously attend program reasoning properties programmers expect program logic interactions different sections program 
approach assertions attempts provide advantages user programmers teacher 
assertions composed boolean expressions cells values 
assertions look enumerations values ranges valid values enumerations ranges composed ed ed example suppose teacher noticed fault row course cell show assertions detect fault 
suppose creates assertions continually monitor numeric cells row 
type ranges graphical syntax 
teacher enters assertions system propagates deduce assertions 
case conflict detected circled red revealing fault 
assertions just entered stick figures provide cross check automatically alert teacher subtle faults getting weights slightly wrong course grade calculation 
power goes far simply checking cell values user entered assertions assertions entered user derives mainly sources aggressive participation help test second propagation user entered assertions new system generated assertions downstream cells 
assertions help test behavior slightly different described 
cells constants formulas stays ranges specified assertions 
cells non constant formulas assertions help test aggressively tries derive input cell values violate assertions downstream cells 
presence assertions turns help test aggressive seeker faults 
propagation system generated assertions computer icon produces ways assertions semi automatically identify faults 
system automatically monitors values change see violate assertions 
cell value violate assertion system circles value red 
example student course fall system circle 
second assertions conflict case system circle conflict red 
conflicts indicate fault cell formula erroneous user entered assertions 
third system generated assertions look wrong user indicating presence formula faults user entered assertion errors 
ways identify faults effect users 
example empirical study participants assertions significantly effective debugging spreadsheet formulas participants access assertions 
surprise explain reward strategy key power assertions propagation aspect happen initial source assertions propagate 
cases initial sources assertions derivable statistical monitoring input data nearby labels annotations 
cases possible source teacher 
reasonable expect teacher seek assertions feature spreadsheet environment 
users quality control methods software strategies devised user software engineering approaches capture interest user programmers motivate take appropriate steps enhance software correctness 
devised strategy aims motivate users teacher software engineering devices provide just time support needs effectively follow interest 
strategy termed surprise explain reward :10.1.1.12.9621
aims choose timely moments inform teacher benefits costs risks software engineering devices available potential faults spreadsheet informed choices actions take 
uses element surprise attempt arouse teacher curiosity takes interest surprise system follows explanations potentially rewards 
example help test uses element surprise springboard surprise explain reward strategy introduce users assertions 
teacher invokes help test system generates values input cells creates usually blatantly incorrect surprise guessed assertions place cells 
example teacher selected row letter cell pushed help test generating new values indicated borders help test guessed assertions 
guessed assertions ll refer hmt assertions generated help test intended surprise teacher curious assertions 
satisfy curiosity tool tips explain meaning rewards assertions 
follows accepting hmt assertion guessed editing resulting assertion propagated seen earlier 
result system may detect problems red circles appear 
red circles identify faults circles assertions serve rewards 
important note strategy rests surprise attempt rearrange teacher priorities requiring surprises 
dialog boxes pop modes 
hmt assertions passive feedback system try win user attention require 
teacher chooses follow mouse assertions receive explanation explicitly mentions rewards pursuing assertions 
behavior study users attend hmt assertions minutes task appears amount visual activity reasonable requesting demanding attention :10.1.1.12.9621
eventually turn attention assertions assertions effectively 
generating new values help increase row letter cell help test guessed empirical findings assertions 
conducted dozen empirical studies related research 
results studies stated main results summarized table 
studies conducted early development user software engineering devices inform design early stages labeled formative studies evaluated effectiveness devices stages labeled summative wysiwyt testing number types studies help test formative summative fault localization assertions formative summative surprise explain reward populations studied summative users computer science students spreadsheets users spreadsheets main results wysiwyt associated effective efficient testing debugging 
users wysiwyt tested wysiwyt 
wysiwyt helped reduce spreadsheet correctness completely resolve issue 
users tended test help initially eventually turned help test commented favorably continued 
users willing wait long time help test try find value circumstances tend lose confidence system 
users correct decisions values right wrong 
help test algorithms usually able generate new test values quickly maintain responsiveness 
formative users different fault localization heuristics different advantages early users testing processes 
techniques tended converge lot tests users tend run tests reach point 
users mistaken decisions value correctness mistakes assumed correctness little correctness 
early computations system information collected may important shaping users attitudes usefulness fault localization devices 
technique tended follow dataflow strategies twice participants dataflow strategy tied identification non local faults 
formative summative users users assertions effective faster debugging 
assertions usable users 
users comfort level experience spreadsheet paradigm important factors determining surprises motivating interesting curiosity perceived costly risky 
surprise explain reward effective encouraging users assertions forcing assertions users ready 
type communication communicate surprises may critically affect users problem solving strategies productivity 
table empirical date user software engineering devices 
details studies concluding remarks www engr edu burnett itr empirical html 
giving user programmers ways easily create programs important 
counterparts world professional software development user programmers need support aspects software lifecycle 
users different professional programmers background motivation interest user community served simply techniques tools developed professional software engineers 
directly supporting users software development activities programming stage time differences background motivation interests account essence user software engineering vision 
empirical results show user programming environment employs approaches described significantly improve user programmers abilities safeguard dependability software 
acknowledgments students collaborators listed www engr edu burnett itr contributed methodologies empirical studies described 
supported part nsf itr part consortium nsf itr 
blackwell steps programming rationale attention investment models proc 
ieee symp 
human centric computing languages environments arlington va sept 
boehm brown clark horowitz software cost estimation ii 
prentice hall ptr upper saddle river nj 
burnett cook rothermel wallace user software engineering assertions spreadsheet paradigm proc 
int 
conf 
software engineering portland may 
burnett erwig visually customizing inference rules apples oranges proc 
ieee symp 
human centric computing languages environments arlington va sept 
fisher cao rothermel cook burnett automated test generation spreadsheets proc 
int 
conf 
software engineering orlando fl may 
frankl weyuker applicable family data flow criteria ieee trans 
software engineering oct 
ko myers development evaluation model programming errors proc 
ieee symp 
human centric computing languages environments auckland nz oct 
raz koopman shaw semantic anomaly detection online data sources proc 
int 
conf 
software engineering orlando fl may 
rothermel burnett li methodology testing spreadsheets acm trans 
software engineering methodology jan 
burnett cook fisher ii main user software visualizations fault localization proc 
acm symp 
software visualization san diego ca june 
tip survey program slicing techniques 
programming languages 
wilson burnett beckwith cook durham rothermel harnessing curiosity increase correctness user programming proc :10.1.1.12.9621
acm conf 
human factors computing systems ft lauderdale fl apr 

