ray tracing procedural displacement shaders wolfgang hans peter seidel computer graphics group university erlangen informatik uni erlangen de displacement maps procedural displacement shaders widely approach specifying geometric detail increasing visual complexity scene 
relatively straightforward handle displacement shaders pipeline rendering systems reyes architecture harder efficiently integrate displacement mapped surfaces ray tracers 
commercial ray tracers surface multitude small triangles 
introduces series problems excessive memory consumption possibly undetected surface detail 
describe novel way ray tracing procedural displacement shaders directly introducing intermediate geometry 
affine arithmetic compute bounding boxes shader range parameter domain 
method comparable direct ray tracing surfaces implicit surfaces clipping interval methods respectively 
keywords ray tracing displacement mapping procedural shaders affine arithmetic motivation procedural displacement shaders important means specifying geometric detail surface imperfections synthetic scenes increases realism computer generated images 
small surface features tedious model explicitly geometric modeling system described lines code dedicated shading language renderman shading language 
contrast simple surface shaders bump maps displacement shaders change geometry underlying surface 
allows effects self occlusion self shadowing results realistically looking images particular silhouette regions see 
procedural displacement shaders resolution independent storage efficient 
simple displacement shader showing wave function exponential decay 
underlying geometry image planar polygon 
unfortunately displacement shaders modify geometry rendering systems limited 
ray tracers handle procedural displacements directly commercial raytracing systems alias geometric objects displacement shaders multitude small triangles 
pipeline reyes architecture triangles kept rendered independently 
approach defeats reasons procedural displacements place resolution independence storage efficiency 
storage requirements representing large number polygons hundreds thousands spatial subdivision hierarchy required speeding intersection tests octrees excessive relatively simple shaders 
tessellation methods bear fundamental problems 
shader evaluated discrete set points vertices output polygons possible narrow features 
particularly disturbing displacements features large 
existing systems disallow long skinny displacements require user explicitly specify bounding volumes 
final problem numerical errors may occur intersection tests small polygons 
result cracks adjacent polygons difficult avoid implementations 
potential benefits displacement shaders shortcomings tessellation implementations question way directly ray trace procedural displacements 
algorithm directly procedural description generating intermediate geometry 
prevent cracking preserve resolution independence 
method guarantee intersections sense intersection exists matter fine feature intersections procedural displacements determined analytically algorithm numerical method iteratively compute closest intersection ray 
prior related algorithms finding intersections variety different geometric objects published 
developed clipping compute ray intersections rational patches 
algorithm determines parameter regions contain intersection points 
surface re parameterized remaining parameter range 
process recursively repeated intersection point determined precision 
barr computed ray intersections deformed objects solving initial value problem 
method works parametric implicit surfaces relatively simple global deformations twists 
directly translate complex procedural deformations 
barr developed method finding guaranteed intersections implicit surfaces 
lipschitz bounds global bounds derivative implicit function spatially subdivide space cells contains intersection surface ray 
exact intersection point newton method 
unfortunately computation lipschitz bounds automated algorithm limited cases acceptable user specify 
snyder duff interval arithmetic recursively enumerate implicit surfaces hierarchical data structure :10.1.1.56.7431
cell implicit function evaluated interval arithmetic 
yields bounds value function cell 
bounds include value zero surface potentially passes cell cell subdivided octree fashion small 
lipschitz bounds interval bounds automatically computed specific implementations basic library functions 
stolfi figueiredo stolfi similar algorithm replaced interval arithmetic affine arithmetic developed purpose 
showed affine arithmetic produces significantly tighter bounds interval arithmetic higher cost 
affine arithmetic obtain conservative bounds value procedural surface shaders parameter interval 
drive hierarchical sampling process example hierarchical radiosity 
extend ideas raytracing displacement shaders 
affine arithmetic hierarchically enumerate geometry generated procedural shaders 
section describe basic algorithm 
section briefly review affine arithmetic discuss issues involved applying procedural shaders 
sections contain refinements basic algorithm 
section experimental results obtained method 
direct ray tracing displacement shaders iterative method intersection tests displacement shaders idea hierarchically subdividing parameter domain surface 
parameter regions intersections occur identified regions intersections possible discarded 
parameter ranges containing potential intersections recursively refined intersection determined pre defined accuracy 
pseudocode summarizes algorithm 
order detect potential intersections parameter range compute bounding box value displacement shader range 
recursion terminated bounding box small 
primary rays means projection box screen smaller fraction pixel 
show section bounding boxes obtained help affine arithmetic 
shows example method 
left side see hierarchically subdivided parameter domain intersection ray simple shader 
right side intersect ray shader shader intersects ray return ll intersect ray shader lr intersect ray shader ul intersect ray shader ur intersect ray shader return closest ll lr ul ur return basic intersection algorithm 
hierarchically subdivided parameter domain resulting bounding boxes intersection ray wave shader 
see displaced surface resulting hierarchy bounding boxes 
bounding box computation understand bounding boxes computed describe displacement shaders conceptually integrated rendering system 
displacement shaders procedures describe perturbations points space 
purposes assume process strictly separated parts renderer particular geometry processing surface shading 
displacement shaders defined interface communicate parts system 
example interface defined renderman shading language base discussion 
displacement shader communicates parts rendering system geometry processing stage surface shading stage 
data flow parts depicted 
du dv implicit params implicit params surface shader displacement shader geometry processing data flow selected parts rendering system 
parametric position sampling rate du dv geometry processing stage computes set purely geometric terms parametric surface 
includes point space geometric shading normal point 
set geometric terms passed displacement shader allowed change position point shading normal 
important parameters displacement shader listed table 
shader direct access underlying geometry surface 
variable description position space shading normal point ng surface normal point eye point surface parameters du dv change surface parameters table important implicit parameters displacement shaders 
modified shader 
perturbed point normal information parts system incoming light directions intensities passed surface shader 
determine intensity point 
data flow modules shows difficulty ray tracing procedural displacements order evaluate shader require parametric position 
position known intersection determined 
illustrates necessity iterate stages order find intersection parametric position 
parametric function surface procedural displacement usually evaluated discrete points parameter space 
order compute bounding box specific parameter range compute conservative bounds value shader range 
done automated range analysis method affine arithmetic 
affine arithmetic normal floating point arithmetic evaluation respective parametric formulas geometry obtain conservative bounds parameters displacement shader surface point normal 
conservative bounds displaced point normal computed evaluating shader affine floating point arithmetic 
ranges components resulting point time bounding boxes geometry displacement 
give brief overview affine arithmetic describe detail applied procedural shaders 
affine arithmetic affine arithmetic introduced extension interval arithmetic 
successfully applied problems interval arithmetic 
includes adaptive enumeration implicit surfaces 
interval arithmetic affine arithmetic manipulating imprecise values evaluating functions intervals 
possible keep track truncation round errors 
contrast interval arithmetic affine arithmetic maintains dependencies sources error manages compute significantly tighter error bounds 
affine arithmetic operates quantities known affine forms polynomials degree set noise symbols ffl ffl ffl delta delta delta xn ffl coefficients known real values values noise symbols unknown limited interval gamma 
noise symbols independently vary gamma range possible values affine form gamma jx computing affine forms matter replacing elementary operation library function real numbers adequate operation ffl ffl affine forms 
affine function arguments normal polynomial arithmetic yields corresponding operation example get ffl delta delta delta yn ffl ff ff ffl delta delta delta xn ffl ffx ffx ffx ffl delta delta delta ffx ffl affine forms real values ff 
affine operation function ffl ffl exactly represented linear polynomial ffl case necessary find affine function ffl ffl ffl delta delta delta zn ffl approximates ffl ffl possible additional new noise symbol ffl added represent error introduced approximation 
yields affine form operation ffl ffl ffl delta delta delta ffl ffl coefficient xn newly introduced noise symbol ffl upper bound error introduced approximation process generating affine approximations arbitrary functions described detail 
process relatively straightforward library functions 
library functions implemented affine arithmetic compute conservative bounds expression uses functions library 
affine arithmetic procedural shaders addition functions typical math libraries shading languages provide specific additional functionality 
includes set functions derivatives arbitrary expressions course control structures statements loops 
shown feature set renderman shading language implemented affine arithmetic 
briefly review results 
derivatives arbitrary expressions frequently procedural shaders 
displacement shaders compute normal vector displaced point derivatives point respect parametric directions yields tangent vectors surface 
desired normal 
renderman shading language built function uses method generate normals 
renderman standard defines derivatives help divided differences du du gamma du 
context du sampling rate direction provided shader implicit parameter see table 
derivatives respect arbitrary expressions computed chain rule deriv du du dv dv 
affine arithmetic evaluate formulas obtain conservative bounds value expressions defined renderman standard 
bounds true mathematical value derivatives desired automatic differentiation 
case store triple expression partial derivatives operation computed chain rule programming languages shading languages control statements loops 
statements challenging deal correct execution path selected runtime number comparisons typically inequalities dealing floating point values 
unfortunately affine forms overlapping ranges case comparisons true false 
necessary execute possible execution paths merge resulting ranges single affine form 
simple way determining paths executed replace inequalities step function affine approximation easily 
example step gamma step step 
boolean expressions replaced arithmetic expressions step gamma delta step gamma 
affine arithmetic displacement shaders applied displacement shaders affine arithmetic allows compute region encloses displaced surface parameter range sigma du sigma dv 
ranges components give axis aligned bounding box displacement shader 
note general region smaller complete bounding box usually affine forms depend common noise symbols 
means values components independent 
precisely projection dimensional unit cube delta delta delta xn delta delta delta yn delta delta delta delta ffl 
ffl dependency ignored evaluating ranges components separately 
directly dealing projection dimensional unit cubes expensive vertices axis aligned bounding box preferable intersection tests ray tracing applications 
handling discontinuities form section hierarchical subdivision terminated projection corresponding bounding box small 
works continuous areas shader region represented converges single point parameter range subdivided 
discontinuous areas region converges higherdimensional structure typically line segment 
consequence axis aligned bounding box general converge zero discontinuities shader 
necessary detect discontinuities shader subdivision process terminate recursion appropriately 
discontinuities caused discontinuous library functions step function control statements cause different execution paths adjacent points surface 
cases dealt adding flag implementation affine forms 
flag set library function causes discontinuity results different execution paths merged affine form 
recursive subdivision terminated bounding box small surface discontinuous size bounding box change significantly subdivision 
having detected discontinuities question intersections bounding boxes reported surface intersections 
alternatives possible yield different semantics 
intersection reported result holes disconnected surface parts 
reported gives shader author convenient way specifying vertical surfaces 
approach consistent renderman rendering 
shows simple displacement shader applied disk results nail surface 
handling discontinuities illustrates algorithm capable naturally dealing extreme displacements 
radius displacement simple nail shader applied small disk base nail 
illustrates ability algorithm handle discontinuous extreme displacements 
note divided differences compute derivatives normal vectors discontinuous parts automatically converge desired result 
caching memory considerations modifications basic algorithm able ray trace arbitrary procedural shaders 
unfortunately algorithm section relatively slow computes hierarchy bounding boxes ray 
obviously lot coherence adjacent pixels corresponding rays produce largely identical hierarchies bounding boxes 
depending complexity displacement shader evaluation significantly expensive intersection test ray axis aligned bounding box 
desirable trade memory computation time caching bounding boxes computed 
storing bounding boxes quadtree 
node tree corresponds certain range hierarchically subdivided parameter domain 
node need store axis aligned bounding box floating point values pointer children node 
parameter range represented quadtree node implicitly available path root node 
parameters required leaf nodes anyway obtained evaluating shader 
results fairly storage efficient data structure 
node requires bytes depending single double precision floats bit pointers 
total size tree extremely large especially large image resolutions require levels subdivision 
necessary remove parts tree required soon 
implementation ray tracer uses normal scanline traversal order pixels allocate certain amount memory nodes tree 
memory requirements exceed limit traverse tree deleting node ones previous ray 
allow arbitrary pixel traversal orders easy think methods limiting memory usage 
example screen subdivided rectangular tiles rendered separately space filling curve 
promising approach ray cache 
alternatives explored 
improvement algorithm performance memory requirements achieved adapting traversal order subtrees 
ray tracing intersection ray object required 
algorithm section finds intersections modified traversal order algorithm finds closest intersection 
results reduced number shader evaluations 
refine bounding box hierarchy areas relevant finding closest intersection point 
improved version algorithm branches bounding boxes closest origin ray refined 
branches bounding boxes away known intersections need traversed 
shows method reduces number bounding boxes compared 
results timed method shaders cache sizes 
shaders wave nail shaders ufo shader depicted 
cache sizes kbytes corresponding quadtree nodes size bytes 
resulting timings listed table 
resolution wave shader theta nail shader theta ufo shader theta 
ufo shader computed intersections computed closest 
ufo displacement shader applied sphere 
surface shader renderman wood shader 
shader kb kb mb unlimited wave nail ufo table timings seconds shaders cache sizes sgi mhz processor 
numbers show simple caching scheme moderate cache size kb performance penalty percent compared unlimited cache space 
caching scheme performance drops dramatically small cache sizes hold working set application 
case corresponds number nodes required complete scanline 
loss performance particularly dramatic nail shader bounding boxes discontinuous portion reused large area image 
cache small boxes recomputed 
sophisticated caching scheme certainly help case 
affine arithmetic interval arithmetic affine arithmetic obtain conservative bounds shader values parameter range 
principle range analysis method purpose 
important method generates tight conservative bounds reduces number bounding boxes generated improves performance memory requirements 
sense interval arithmetic performs worse affine arithmetic application 
produces wider bounds affine arithmetic applied procedural shaders 
shows comparison subdivisions generated ufo shader single ray 
interval arithmetic bounding boxes generated affine arithmetic number 
sophisticated shaders worse interval arithmetic performs 
measurements consistent results results surface shaders 
comparison affine arithmetic left interval arithmetic right 
affine arithmetic produced bounding boxes interval arithmetic 
magnified portion showed bottom 
research new iterative method computing intersections rays procedural displacement shaders 
method directly operates procedural description shader introducing approximate geometry 
consequence method resolution independent storage efficient guaranteed find intersection ray surface 
computation time traded memory order improve performance 
mentioned sophisticated caching schemes improve performance 
explored 
interesting area research parallelization method loosely coupled distributed systems rendering farms 
procedural shaders distributed network extremely small 
data host able compute cache bounding boxes having share large amounts tessellated geometry hosts 
design renderer completely range analysis methods affine arithmetic promising area research 
combination mentioned section allows guaranteed intersection tests kind commonly geometric description 
alias wavefront 
manual 
alan barr 
global local deformations solid primitives 
computer graphics siggraph proceedings pages august 
alan barr 
ray tracing deformed surfaces 
computer graphics siggraph proceedings pages august 
james blinn 
simulation surfaces 
computer graphics siggraph proceedings pages august 
jo ao jorge stolfi 
affine arithmetic applications computer graphics 
vii pages 
available www dcc unicamp br stolfi 
tom duff 
interval arithmetic recursive subdivision implicit functions constructive solid geometry 
computer graphics siggraph proceedings pages july 
david ebert kent ken perlin steve 
texturing modeling procedural approach 
academic press october 
luiz figueiredo 
surface intersection affine arithmetic 
graphics interface pages 
luiz figueiredo jorge stolfi 
adaptive enumeration implicit surfaces affine arithmetic 
computer graphics forum 
pat hanrahan jim lawson 
language shading lighting calculations 
computer graphics siggraph proceedings pages august 
wolfgang 
compilation affine approximations math library functions 
technical report tr university erlangen computer graphics group 
wolfgang philipp seidel 
sampling procedural shaders affine arithmetic 
acm transactions graphics 
alan barr 
guaranteed ray intersections implicit surfaces 
computer graphics siggraph proceedings pages july 
ramon moore 
interval analysis 
prentice hall englewood cliffs new jersey 
craig kolb robert mace 
synthesis rendering eroded fractal terrains 
computer graphics siggraph proceedings pages july 
thomas sederberg 
ray tracing trimmed rational surface patches 
computer graphics siggraph proceedings pages august 
ken perlin 
image synthesizer 
computer graphics siggraph proceedings pages july 
matt pat hanrahan 
geometry caching ray tracing displacement maps 
eurographics rendering workshop pages june 
matt craig kolb reid pat hanrahan 
rendering complex scenes ray tracing 
computer graphics siggraph proceedings pages aug 

renderman interface 
san rafael ca sep 
louis rall 
automatic differentiation techniques applications 
number lecture notes computer science 
springer 
john snyder 
generative modeling computer graphics cad symbolic shape design interval analysis 
academic press 
john snyder 
interval analysis computer graphics 
computer graphics siggraph proceedings pages july 
steve 
renderman companion 
addison wesley 
complex scene multiple objects 
underlying geometry object sphere 
