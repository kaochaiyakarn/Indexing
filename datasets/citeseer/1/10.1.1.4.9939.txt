probabilistic automata system types parallel composition comparison de department mathematics computer science tu eindhoven leiden university tue nl win tue nl 
survey various notions probabilistic automata probabilistic bisimulation accumulating expressiveness hierarchy probabilistic system types 
aim twofold hand provides overview existing types probabilistic systems hand explains relationship models 
overview probabilistic systems discrete probabilities 
expressiveness order built hierarchy defined existence mappings corresponding system types preserve reflect bisimilarity 
additionally discuss parallel composition types systems augmenting map probabilistic automata closedness compositional operator 
keywords probabilistic automata transition systems probabilistic bisimulation preservation reflection bisimulation non determinism parallel composition 
notion state machine proved useful modelling situations area validation stochastic systems 
literature great variety types probabilistic automata proposed verification purposes 
discuss number probabilistic automata discrete probability distributions 
continuous time probabilistic systems interested reader referred dep hil alf 
models stochastic systems represented transition systems pa 
due variety proposed models case results interpreted type systems 
compare considered types probabilistic automata terms expressiveness 
comparison achieved placing partial order classes automata class automaton class translated automaton class translations reflect preserve respective notions bisimilarity 
bisimulation bisimilarity central notions overview 
comparison criteria important logical properties logical characterization bisimulation ls complexity algorithms deciding bisimulation bai cy sto 
choose comparison criterion formulated terms strong bisimulation simplicity transition labelled systems bisimulation semantics arises naturally step step behavior 
major distinction probabilistic automata fully probabilistic vs non deterministic ones 
fully probabilistic automaton choice governed probability distribution set states states combined actions 
probability distribution captures uncertainty state 
away actions fully probabilistic automaton left discrete time markov chain 
subsequently standard techniques applied analyze resulting markov chains 
incomplete knowledge system behavior represented probabilistically 
cases consider transition possible 
speak case non deterministic probabilistic automaton 
models consider include form non determinism fall category non deterministic probabilistic automata 
pointed various authors hoa seg alf sto non determinism essential modelling scheduling freedom implementation freedom external environment incomplete information 
furthermore non determinism essential definition asynchronous parallel composition operator allows interleaving 
kinds non deterministic choices mentioned literature see sto external non deterministic choices influenced environment specified having transitions different labels leaving state internal non determinism exhibited having transitions label leaving state 
term non determinism full non determinism including internal external non deterministic choices 
introduce classes automata ranging simplest models complex ones 
questions address individual class definition type automaton respective notion strong bisimulation relation model models presence form non determinism notion product parallel composition model 
set follows section presents necessary notions considering probability theory automata transition systems concurrency theory particular compositional operators 
section focus various definitions probabilistic automata isolation corresponding notions bisimulation 
section operators parallel composition discussed 
address interrelationship introduced types automata section 
section wraps 

holger hermanns editorial support useful ideas directions organizers voss gi dagstuhl initiating organizing nice event 
dept referees various remarks 
special go falk bartels major contribution regarding hierarchy probabilistic systems numerous comments suggestions friendly cooperation 
basic ingredients probability distributions set 
function called discrete probability distribution distribution short finite countably infinite 
set called support denoted spt 
denotes unique probability distribution known dirac distribution distribution notation 
denote set discrete probability distributions set 
distribution finite support 
sn write 
sn sn 
notation 

product distribution defined notation 
adopt jl lifting relation sets relation distributions sets 
definition 
relation sets distributions 
define exists distribution 


lifting relation preserves characteristic properties preorders equivalences cf 

special case equivalence relation simpler way define lifting cf 
sto bai 
proposition 
equivalence relation set 
equivalence classes lifting equivalence relation set relation set fixed set needed 
definition 
equivalence relation set set 
define non probabilistic automata markov chains bisimilarity terms automaton transition system just system synonyms 
non probabilistic automata definition 
transition system ts short pair 
set states 
transition function denotes powerset transition system write call transition 
literature ts triple including set states transition function subset initial states single initial state 
consider initial states definition 
transition function equivalently consider transition relation subset choice transitions transition function 
way representing ts transition diagram 
example system represented follows states terminating states outgoing transitions 
model phenomenon change state system happens result executing action 
labelled transition systems evolve transition systems 
ways incorporate labels ts labelling states usually values variables set propositions true state explicitly labelling transitions actions action names 
focus transition labelled systems 
definition 
labelled transition system lts non deterministic automaton triple 
set states 
set actions 
transition function 
lts transition function equivalently considered function collection functions 
case tss state lts element determines transition denoted class non deterministic automata ltss denoted na 
deterministic automata definition form subclass na 
definition 
deterministic automaton triple 
set states 
set actions 
transition function 
notation denote disjoint union sets 
set singleton set containing special element 
assume notation stands collection functions 
special set disjoint union construction allow write partial functions functions 
deterministic automaton state assigned partial function set actions set states meaning transition enabled denote class deterministic automata da 
note class automata da exhibits external non determinism na full non determinism 
external non determinism full non determinism markov chains simplest class fully probabilistic automata class discrete time markov chains 
theory markov chains rich huge see ks bh hav provide simple definition discrete time markov chain 
definition 
markov chain pair 
set states 
transition function 
markov chains evolve transition systems probability added transition state sum probabilities outgoing transitions equals 
class markov chains denoted mc 
markov chain said go state probability state notation example 
bisimulation bisimilarity different semantics notions behavior labelled transition systems 
bisimulation semantics milner mil mil stating states system represented ltss equivalent exists bisimulation relation relates 
bisimulation relation compares step behavior states nice extension probabilistic case explored ls 
js probabilistic extensions number known process equivalences studied probability trace completed trace failure ready equivalence 
probabilistic process equivalences probabilistic simulation bisimulation segala lynch sl seg yi larsen testing equivalence yl csp equivalences morgan lowe low seidel sei 
overview probabilistic process equivalences ln 
definition 
ltss 
relation bisimulation relation holds exists exists states called bisimilar denoted exists bisimulation relation example 
ltss example bisimulation 

comparing states systems consider joined system bisimulation defined relation set states system 
furthermore bisimulation reflexive symmetric transitive closure bisimulation 
bisimilarity affected choice defining bisimulation equivalence 
definition 
equivalence relation set states lts equivalence bisimulation states called bisimilar denoted exists equivalence bisimulation proposition holds 
proposition 
ltss bisimulation da defined exactly na definition 
standard notion probabilistic bisimulation introduced larsen skou ls originally formulated reactive systems see subsection 
early probabilistic bisimulation bm 
case markov chains bisimulation corresponds ordinary markov chains ks buc 
vr vin shown concrete notion markov chains coincides general coalgebraic notion bisimulation mos jr rut mac 
idea probabilistic bisimulation follows 
bisimilar states considered matter element bisimulation class reached 
bisimulation relation compare probability reach equivalence class probability reach single state 
order define bisimulation markov chains lifting relation state relation defined definition explained proposition 
note comments place 
definition 
equivalence relation set states markov chain bisimulation transition states called bisimilar denoted exists bisimulation definition variations defining bisimulation relations types probabilistic automata consider overview 
note case markov chains states markov chains bisimilar definition bisimulation state set markov chain markov chain equivalence class phenomenon explained fact bisimilarity compares observable behavior states system markov chains simple systems observe 
need comes enrich markov chains actions termination 
notation section introduce types probabilistic automata corresponding notions bisimulation 
order avoid repetition collect 
type automata triple set states set actions transition function 
difference system types expressed difference codomains corresponding transition functions 
bisimulation relation defined equivalence set states system 
depending type systems transfer conditions definition bisimulation vary 
particular type system bisimilarity relation denoted defined exists bisimulation relates notation bisimilarity different types systems clear type systems different relation 
parallel composition ltss mcs compositional operators serve need modular specification verification systems 
arise process calculi ccs mil csp hoa acp bk process terms models processes built atomic process terms compositional operators 
usually model process calculi suitable class transition systems 
case process terms identified corresponding transition systems compositional operators process calculus considered operators combining transition systems 
overview focus parallel composition operator 
definition parallel composition varies lot different process calculi 
section consider non probabilistic case ltss order explain variants different parallel compositions parallel composition markov chains order basics probabilistic parallel composition 
labelled transition systems major distinction different parallel composition operators synchronous components forced synchronize asynchronous components synchronize act independently 
furthermore different approaches synchronization exist 
result parallel composition automata automaton definition varies 
pair write state composed automaton 
subsection running example parallel composition automata 
ccs style set actions case contains compatible actions special idle internal action automata state perform action changing state state perform compatible action moving state composite automaton state perform idle action move state furthermore independent behavior automata possible composed automaton 

compatible actions 

ccs parallel composition asynchronous 
synchronous variant sccs mil defined omitting clauses 

definition 
csp style communication synchronization csp style parallel composition occurs set synchronizing actions 
actions intended synchronize listed set rest actions performed independently 
lt 


type parallel composition operator synchronous expresses interleaving shuffling composition fully asynchronous independent behavior communication allowed 
asynchronous csp style parallel composition defined omitting clause clauses 


case different action sets component automata taken subset 
say synchronization common actions occurs 
acp style acp parallel composition fully asynchronous allowing interleaving independent behavior synchronization communication function 
communication function commutative associative partial function write ab 

bc defined 

aa ab note contains compatible actions idle action compatible undefined acp parallel composition operator specializes ccs parallel composition operator 
hand aa get asynchronous variant csp parallel composition operator 
clauses 

dropped definition get synchronous variant acp parallel composition operator called communication merge 
markov chains markov chains 
parallel product markov chain denoting product distributions 

note parallel composition markov chains synchronous step composed automaton consists independent steps performed components 
way defining product distributions goes favor interpretation put parallel automata independently chooses transition contributes transition composed automaton 
probabilistic models section defines advanced types probabilistic automata 
automata types grouped subsections reflecting common properties 
basically type probabilistic automata arises plain definition transition system labels 
probabilities added transition transitions labelled action distinction probabilistic ordinary non deterministic states ones include probabilistic information transition function equipped structure provides non determinism probability distributions 
kind probabilistic automata comes equipped notion bisimulation notions frequently subtly different find way section 
reactive generative probabilistic automata classical extensions ltss probabilities reactive generative model 
years large amount research devoted reactive generative probabilistic systems 
hard note introduced systems reactive model treated ls ls gss generative gss har hv chr cc classification systems called stratified model proposed gss 
way models arise ltss changing transition function explained denotes transition function lts transition function reactive generative system respectively 
definition 
reactive probabilistic automaton triple transition function write 
specifically spt write generative probabilistic automaton triple transition function 
write 
particularly spt write denote 

definition uses special singleton set appear 
definition helps expressing partial functions 
second definition generative transition function expresses possibility termination 
state generative system terminating state allowing transition 
ltss termination allowed fact 
changing subsets distributions added play role 
reactive system generative system reactive system probabilities distributed outgoing transitions labelled action generative system probabilities distributed outgoing transitions state 
motivation making distinction different treatment actions 
reactive system actions treated input actions provided environment 
reactive system receives input environment acts probabilistically choosing state probability distribution assigned input 
probabilistic assumptions behavior environment 
hand generative system name suggests actions treated output generated system 
generative system state chooses transition probability distribution assigned transition chosen system moves state generating output action labels transition 
note generative system non determinism reactive system external non determinism da 
denote react gen classes reactive generative probabilistic automata respectively 
definition 
equivalence relation bisimulation reactive probabilistic automaton actions exists distribution order state definition bisimulation generative systems lifting definition 
definition 
equivalence relation bisimulation generative probabilistic automaton exists distribution example 
equivalence relation generated pairs bisimulation probabilistic automaton 
note particular automaton belongs react gen intuitive interpretation example obtained adding meaning flip action left sub automaton meaning roll action right sub automaton 
state represents flipping fair coin state represents rolling fair dice 
bisimilarity states shows flips fair coin rolls fair dice interested outcome odd 
probabilistic automata model input output probabilistic automata introduced wu smolka stark wss exploiting input output automata lynch tuttle cf 
lt presents combination reactive generative model 
definition 
input output probabilistic automaton triple 
set actions divided input output actions ain aout 
ain aout transition function 
third component transition function assigns output delay rate state 
iff delay assigned states generate output 
denote class automata io 
similar notation transitions reactive generative model 
ain write furthermore spt write write write transitions state probabilistic automaton automaton input action reactive transition 
note function partial function reactive model 
input action enabled state probabilistic automaton 
output actions treated 
generative probabilistic transition gives output behavior state 
delay rate parameter aspect continuous time systems meaning clear section discuss compositions automata 
automata compared placed hierarchy section involve continuous element 
obvious ignoring delays gets reactive model actions enabled gets generative model delay rate assigned state 
connection exists automata models structured transition relation section 
combined systems similar automata appear models process terms process algebra empa ber bg 
compare automata section need notion bisimulation defined combining transfer conditions reactive generative bisimulation care delay rate 
wss notion bisimulation introduced different notion behavior automata considered 
definition automata scs 
automata distinction states far seen types automata allow modelling probabilistic behavior capability modelling full non determinism 
types systems introduced minute allow full nondeterminism making distinction probabilistic states outgoing probabilistic transitions non deterministic states action labelled transitions 
stratified probabilistic automata simplest system distinction states appears name stratified probabilistic automaton discussed gss ss hv 
stratified automata allow form non determinism distinction states 
definition 
stratified probabilistic automaton triple transition function class stratified automata denote str 
due disjoint union codomain transition function types states stratified automaton probabilistic states consisting deterministic states allowing single action labelled transition terminating states 
definition 
equivalence relation bisimulation stratified probabilistic automaton 
exists distribution 
exists vardi probabilistic automata earliest models probabilistic automata introduced vardi var name concurrent markov chains 
original definition concurrent markov chain terms state labelled transition systems purposes verification logical properties 
slightly modify definition calling class automata vardi probabilistic automata 
definition 
vardi probabilistic automaton triple transition function vardi probabilistic automaton 
note definition 
consider union disjoint identify singleton state transition identified state allowing transition vardi automata probabilistic states generative kind states non deterministic full non determinism lts 
definition bisimulation combination definition definition 
definition 
equivalence relation bisimulation vardi probabilistic automaton 
exists distribution 
exists 
note literature particular var definition bisimulation 
current understanding probabilistic bisimulation concept general coalgebraic definition bisimulation allows state previous definition 
denote class vardi probabilistic automata var 
alternating models hansson model treats separately purely probabilistic non deterministic states alternating model introduced hansson see example han hj 
class alternating probabilistic automata alt subclass strictly alternating probabilistic automata sa turn subclasses sa denoted san sap 
definition 
alternating probabilistic automaton triple 
class alternating automata denoted alt 
denote subsets containing non deterministic probabilistic states respectively 
strictly alternating automaton alternating automaton holds 
spt 
class strictly alternating automata denoted sa 
automaton sa belongs san 
automaton sa belongs sap 
known classes class sa han hj class san chosen presenting classes structurally 
class alt slight generalization class sa similar stratified vardi models 
deserves place overview 
alternating automaton distinction states imposed 
strictly alternating model required successors non deterministic state probabilistic states vice versa 
furthermore subclasses san sap take care initial state nondeterministic probabilistic respectively 
define subclasses san sap order precise comparison class sa models section 
alternating probabilistic automaton strictly alternating automaton san definition bisimulation fits introduced classes alternating automata transfer conditions exactly stratified model definition 
probabilistic automata structured transition function subsection focus types probabilistic automata provide orthogonal coexistence full non determinism probabilities distinguishing states 
segala simple segala probabilistic automata types probabilistic automata introduced segala lynch sl seg 
call segala probabilistic automata simple segala probabilistic automata 
extensive overview simple segala model sto sto verification purposes developing theoretical results situations reported sv sv bs bai bk bk jy kn 
definition 
segala probabilistic automaton triple write spt write simple segala probabilistic automaton triple transition function write spt write simple segala type systems arise na changing target state distribution possible target states 
transition simple segala automaton segala automaton shown 
segala lynch call models probabilistic automaton pa simple probabilistic automaton calls general pa pa respectively 
simple segala transition segala transition transition available state non determinism occurs 
non deterministic choices exist transitions probabilities specified transition 
original definition segala lynch distributions extended set simple case treated distributions probability assigned special symbol interpreted deadlock probability 
choose include definition reasons comparison section models include distributions imitated adding extra deadlock state system 
denote class segala probabilistic automata seg class simple segala automata 
simple segala automaton generalization full nondeterminism reactive model purely probabilistic automata rabin rab 
deterministic version simple segala automaton equivalent reactive model known markov decision process der name probabilistic transition system model state labelled version 
comparison san simple segala model bs 
bisimulation simple segala systems defined transfer conditions reactive systems definition segala systems transfer conditions bisimulation definition generative systems apply changing 
great novelty introduced types segala systems definition stronger probabilistic bisimulation relation identifies states matching combined transitions 
information topic interested reader referred sl seg sto sto bs 
bundle probabilistic automata way include nondeterminism probability consider distributions sets transitions bundle model introduced dhk 
recall segala systems sets distributions transitions 
definition 
bundle probabilistic automaton triple write furthermore write bundle model considered generative probabilities distributed actions 
bundle model offers solution absence non determinism generative setting 
note original definition slightly general codomain transition function denotes finite multi subsets set possible multiple transitions state action bundle 
essential material add multi sets bundle model 
class bundle probabilistic automata denoted bun 
typical bundle probabilistic automaton depicted bundle probabilistic automaton literature particular dhk definition bisimulation bundle probabilistic automata transformed generative systems compared generative bisimulation 
give definition bisimulation bundle probabilistic automata deduced general coalgebraic definition bisimulation cf 
jr rut mos 
justification doing previously stated definitions bisimulation probabilistic bisimulation larsen skou ls coincide general coalgebraic definition bisimulation particular type systems 
non probabilistic case coincidence known see rut 
markov chains proven vr segala probabilistic automata bsv proof technique extends cases 
prior stating definition need way lift relation set relation set 
definition 
relation 
define 
exists 
exists holds equivalence equivalence 
definition 
equivalence relation bisimulation state set bundle probabilistic automaton holds exists denotes lifting relation distributions defined definition 
complex models pnueli zuck general probabilistic automata early model including probabilities structured transition relation proposed pnueli zuck pz pz name finite state probabilistic programs ba 
call type automata pnueli zuck probabilistic automata denote class pz model pnueli zuck complex transition function adds power set bundle model allows types non determinism probabilistic transitions inside transitions 
order get top element hierarchy section expand model bit define general type probabilistic automata 
class denoted mg 
definition 
pnueli zuck automaton triple write write general probabilistic automaton triple notation pnueli zuck automata general automata 
furthermore write pnueli zuck system general system unlabelled transitions appear right general system correspond pure probabilistic transitions markov chains alternating systems change state happen certain probability performing action 
bundle systems notion bisimulation pnueli zuck systems literature 
bisimulation definition formulated general coalgebraic definition leads transfer conditions definition changing 
small modification needed general probabilistic automata 
vardi model automata appear literature state labelled version model checking purposes 
change definition transition labels 
composing probabilistic systems parallel having introduced probabilistic models consider possible definitions parallel composition operator extended systems 
lots results topic exist literature 
broad overview reader referred dhk bai 
overview probabilistic process algebras covering probabilistic operators ln 
classes mc io unique parallel composition defined 
mc operation purely synchronous product distributions cf 
section io definition parallel composition operation strongly relies specific structure systems cf 
section 
classes meaningful consider various definitions parallel composition 
operations synchronous asynchronous nature styles ccs csp acp described section 
style csp plays special role respect definition partly synchronous partly asynchronous gives rise mixed variant parallel composition 
classes probabilistic systems divided groups dependent show reactive generative alternating behavior 
classes belonging groups allow essence similar definition investigation parallel composition 
going obviously quite numerous variants parallel composition single class systems shall subsequent sections 
discuss couple instructive cases detail 
give complete scheme possible studied definitions parallel composition operator means comprehensive table 
table column dedicated class probabilistic automata row introduced styles parallel composition 
intersecting cells symbol representing definability status corresponding parallel composition operator corresponding class placed 
neighboring cells containing symbol column merged 
symbols defined literature straightforward definable carried definable defined literature parameters parameterized version definable carried normalized version definable carried total communication function table presents situation concerning definability parallel composition probabilistic automata 
brief analysis summary results shows allowing full non determinism enables definition type parallel composition 
sync async generative reactive alternating da na react gen seg bun pz mg var alt sa 
str ccs csp acp csp ccs csp acp table 
definability parallel composition reactive setting systems reactive behavior systems classes react na da non probabilistic case 
parallel composition operator lts section nicely extends class 

defined follows ccs style 



csp style lt 



acp style 
bc defined 


definition operators problematic class react 
react happen react variant parallel composition 
synchronous ccs style multiple transitions labelled may appear 
csp style 

may introduce internal non determinism 
contains common actions problem disappears 
case acp 

introduce internal non determinism react closed operator arbitrary communication function example ab ac acp parallel product automata defined react definition yields transition corresponds action prohibited react 
asynchronous parallel composition ccs style simple segala systems defined bk synchronous parallel composition ccs style reactive systems defined gss working simple segala systems 
synchronous csp style parallel composition defined reactive systems jy asynchronous csp style parallel composition synchronization common actions sl seg sto simple segala systems 
parallel composition generative setting systems generative behavior belong classes gen var seg bun pz mg 
vardi systems express alternating behavior discussed alternating systems 
common property generative systems probability distributions actions states appear 
leads difficulties defining parallel composition operators see han seg dhk especially asynchronous case 
generative type system defines state probability distribution set enabled actions offered environment 
systems composed parallel clear common set enabled actions defined probability distributions composed cf 

section explain approaches solving problem 
generative systems 
parallel composition cases denoted possibly parameters 
synchronous ccs csp acp style parallel composition defined generative systems done gss dhk ab pq problems arise class da opposed na parallel composition introduces internal non determinism da closed 
set actions assumed form commutative semigroup gjs ab stands product 
presents example synchronous parallel composition generative systems 
aa ba bc ac order capture possible asynchronous behavior parallel composition operators defined literature bias factors 
cases composition symmetric 
main problem defining asynchronous parallel composition definition introduces non determinism 
proposed solutions non deterministic choices changed probabilistic ones specifying parameters parallel composition 
acp style parallel composition operator generative systems defined bbs 
definition follows non probabilistic definition acp parallel operator changing non deterministic choices introduced interleaving communication corresponding probabilistic choices 
operator parameterized parameters denoted 
product state synchronization occur probability autonomous action probability 
furthermore autonomous move occurs comes probability probability 
definability necessary communication function total function 
define 
bc pq 



note definition get transitions replaced transition previous get looks aa ba ac bc biased parameterized parallel composition operators defined dhk asynchronous ccs style operator denoted csp style operator denoted la 
denote clause definition la lt lt satisfied 
pq 
pq 
pq 
pq 


pq normalization factors calculated pq 
csp style operator parameter needed nondeterminism occurs systems autonomously decide perform actions parameter denotes probability synchronizing set performs autonomous action decided synchronize 
furthermore normalization factors determine actual probability transition 
normalization factors redistribute probability mass due autonomous decisions processes lead deadlock 
asynchronous ccs parallel composition interpretation probabilistic parameters similar acp approach 
provide relevant information adversary needs order resolve nondeterminism arises composing systems 
denotes probability performs autonomous action want synchronize denotes probability autonomous action occurs synchronization possible 
synchronization possible take place probability 
earliest biased parallel composition operator generative systems defined treated detail ln 
parallel composition uses bias parameter 
state composed automaton action certain probability components action csp style action action 
action chosen biased bias factor 
probability synchronous execution calculated normalization function 
basically sums probabilities possible outgoing transitions new state obtained asynchronous behavior introduced non determinism 
calculate actual conditional probabilities distribution assigned completely different solution problem defining parallel composition operator generative setting provided dhk class bundle systems bun 
bundle systems possess non determinism allows elegant definition asynchronous parallel composition operator follows 
bun 
denotes specific product distributions defined follows bs spt bt spt bs bt bs bt bs bt bs bt ab bs bt furthermore 
note defined parallel composition bundle systems acp style 
slight modification definition variants obtained 
similar manner asynchronous parallel composition defined classes pz mg 
literature definition parallel composition operator class seg 
parallel composition setting clean solution problems generative setting class automata wss 
view taken actions divided input output synchronization input actions reactive setting sets output actions components disjoint 
automata 
automata compatible aout aout 
parallel composition defined compatible automata 

convention state transition involving consider convention enforce input enabled requirement composite automaton 
parallel composition automaton 
aout aout aout 
ain aout ain ain aout 
transition function defined holds pq pq pq determined determined example 
automata corresponding transitions diagram 
take ain aout compatible ain aout 
assume automata clearly states compatible 

due convention consider transitions diagram 
pd pc pc pc pd 
pd note proof defined class io wss 
informally explain definition parallel composition role functions 
state positive real number corresponding delay rate state rate exponential distribution determining time automaton waits state generates output actions 
output actions enabled state 
determining distribution output actions denoted components distributions joined probability multiplied normalization factor probability multiplied note compatibility assumption action appears support support normalization factor models racing policy states generating output actions 
value probability state waiting time left state wins race generates output actions 
hand synchronization occurs input actions autonomous behavior allowed components input actions corresponding assumption input provided environment enabled state 
parallel composition alternating setting section focus classes str alt sa san sap var exhibit alternating behavior distinction probabilistic non deterministic states 
gss han elegant parallel composition classes str sa respectively defined 
definition class alt discuss definition restricted classes str alt sa san sap 
alternating automata 
parallel composition alternating automaton transition function defined follows 

probabilistic states composed automaton 
non deterministic states composed automaton different variants ccs csp acp style chosen 
choose acp style 
bc defined 

composing probabilistic state state result probabilistic state 
state non deterministic composed state basically behaves probabilistic state leaves second component state unchanged example 
hand composition non deterministic states exactly non probabilistic case possible parallel composition operator definable case ltss 
inspecting definitions classes sa san sap easy see statement valid 
proposition 
sa san sap sa san sap respectively 
definition parallel composition stratified systems gss synchronous behavior composing non deterministic states 
necessary order stay class str composing automata stratified model single action transition possible non deterministic state 
parallel composition operator synchronization interleaving stratified class systems defined hv 
original definition strictly alternating systems han non deterministic states composed ccs fashion 
complications arise case var models due generative probabilistic behavior 
behavior composite states defined way 
convenient way define coincides defining generative parallel composition 
approaches described section 
comparing classes section results bsv 
hierarchy probabilistic system types coalgebraic setting 
coalgebraic theory proved useful providing uniform framework shortening proofs 
results restated explained machinery introduced far 
expressiveness criterion classes probabilistic automata 
say class included embedded class class expressive class notation exists translation function maps automaton class automaton second class bisimilarity reflected preserved 
explicitly translation function satisfy 
set states 
translation function injective 
states bisimilar translated automaton bisimilarity class bisimilar original automaton bisimilarity class 
relation classes probabilistic automata preorder 
basically expressiveness criterion states class really embedded class translations suitable copies automata class existing second class 
note preservation bisimulation 
example define translation reactive systems ltss preserves bisimulation forgetting probabilities example 
consider class ltss expressive class reactive probabilistic automata translation means injective 
hierarchy result hierarchy reactive generative stratified non deterministic automata gss 
expressiveness criterion van glabbeek different 
consider class expressive class abstraction mapping maps automaton class automaton class state set remains bisimulation preserved 
abstraction mappings injective nature 
example abstraction mapping translation forgets probabilities previous 
setting class react expressive class na 
hierarchy theorem 
bsv class embeddings hold probabilistic system types 
proof theorem strictly alternating classes bsv technical result terms injective natural transformations 
due correspondence concrete bisimulation coalgebraic bisimulation treated systems theorem remains valid mentioning coalgebraic theory 
presenting proof explicitly state translations arrow give examples illustrate preservation reflection bisimulation proven concrete case 
translations arrows react da seg na var pz bun gen mg san fig 

class embeddings sa sap alt str mc groups simple arrows inclusion arrows show change external full non determinism arrows change element singleton arrows change element corresponding dirac distribution specific arrows 
translations quite natural 
property preservation reflection bisimilarity adds justification translations 
simple arrows classes probabilistic automata 

embeddings sa alt san sa sap sa hold 
furthermore defined transition function transition function type automaton class considered automaton class extending codomain transition function 
case 
arrows hold due extending codomain transition function mc str gen var na var pz mg 
cases translation automata basically identity mapping 
example generative automaton vardi automaton non deterministic states markov chain stratified automaton action transitions deterministic states 
external full non determinism embedding arrows da na react show system external non determinism considered system full non determinism uses full nondeterminism option 
da 
na 
consider automata diagrams transition graphs translation change transition graph da system 
react similar translation changing partial function graph 
due notation reactive systems section diagram reactive system considered simple segala system re drawn example 
reactive system simple segala system singleton arrows cases translation changes element state pair state action distribution singleton set containing element 
bun pz bundle probabilistic automaton translation pnueli zuck automaton achieved putting distribution 
bundle transition pnueli zuck transition str alt case diagram stratified automaton translated alternating automaton stays 
seg pz segala automaton 
determined way constructed changing distribution pairs distribution singletons pairs 
segala transition pnueli zuck transition dirac arrows transformation element dirac distribution element needed 
kind translation embeds nonprobabilistic automata da na reactive simple segala automata respectively 
da react case transition changed probabilistic transition probability 
da transition reactive transition da translation put na obtaining simple segala automaton lts change state transition dirac distribution state 
na transition simple segala transition formally 
specific arrows var seg vardi automaton 
injective translation segala automaton vardi system segala system var bun translation orthogonal gives var seg 
vardi automaton put vardi system bundle system 
var seg var bun translated transition function defined consider identify 
furthermore identification needed obtain injectivity translations 
alt mg similarly translating vardi systems extra singleton construction alternating automaton translated general probabilistic automaton 
put seg order change transition simple segala automaton transition segala automaton push action label distribution 
simple segala transition segala transition formally translation illustration give proof preservation reflection bisimilarity 
distribution action denote distribution obtained 
clearly subset yields translation holds 


exists distribu tion 
assume exists bisimulation definition prove bisimulation definition state space 



bisimulation state space exists distribution follows 
furthermore bisimulation state set 
opposite analogous 
bisimulation definition set states prove bisimulation definition set states assume 

bisimulation get exists 
get exists distribution get completes proof 

translations section injective preserve reflect bisimilarity 
strict alternation vs complex transition function translation simple segala automata automata class san known long time justified bs 
similarly class sap compared class bundle probabilistic automata 
order carry comparisons framework slightly change comparison criterion allows translations keep state set 
relaxed expressiveness criteria classes probabilistic automata translation mapping say class embedded class translation notation conditions hold 
automaton automaton 
bisimilarity preserved reflected common states 
translation injective 
furthermore say class embedded irrelevant bisimilarity class translation notation conditions hold 

common states 
translation injective bisimilarity irrelevant states automata class 
theorem 
embeddings compare classes strictly alternating bundle simple segala probabilistic automata 
san sap bun fig 

strictly alternating models models structured transition relation complete proof give translations needed embeddings 
san simple segala automaton san automaton simple segala automaton 
translation function translates inserting new probabilistic state transition changing ss 
formally sp sp set fresh probabilistic states sp ss 
outgoing transition state corresponding new state added sp 
transition function defined follows corresponding new state ss ss ss sp corresponds transition ss 
translation injective preserves reflects bisimilarity san translation embedding inverse case san 
san set probabilistic states set non deterministic states 
translation forgets probabilistic states turns strictly alternating steps san automaton transition corresponding segala automaton 
translation injective bisimilarity disappearing probabilistic states 
fact stricter injective indistinguishable probabilistic states 
cases non injectivity come consequence having probabilistic states sp sp sp sp 
non deterministic state sp sp copies sp sp mapped single transition 
example different san automata translate automaton 
bun sap bundle automaton sap automaton translation follows sn sn containing fresh non deterministic states sn ss spt 
transition function defined put sn ss ss sn put ss sap bun inverse translation bun sap gives translation case 
forget non deterministic states sap automaton left bundle automaton 
sap automaton set probabilistic states non deterministic states put define 
note phenomenon losing copies san appear 
states lost transitions identified arrow lost 

restricting subclasses class sa considering classes san sap necessary obtain injectivity bisimilar irrelevant states embedding mappings 
overview various types probabilistic automata including generative reactive stratified ones strictly alternating alternating ones simple segala segala vardi type probabilistic automata bundle pnueli zuck general ones 
major part devoted comparison various classes probabilistic automata strong bisimilarity automata starting point resulting hierarchy probabilistic system types 
additionally discussed extent non determinism modelled various types automata operator parallel composition 
classes positioned higher map characterized closures simpler classes parallel composition clarifies need complex models 
results obtained briefly table 
various probabilistic system modelling drawn 
instance presence non determinism closedness variants parallel composition desired properties hand having simple model possible needed hand choice input reactive output generative type systems best choice appears simple segala model bundle model respectively 
different requirements lead different choices hope map probabilistic automata models prove useful making right decision 
ah alur henzinger reactive modules formal methods system design preliminary version appeared proceedings th annual symposium logic computer science lics ieee computer society press pp 

de alfaro henzinger compositional methods probabilistic systems concur concurrency theory th international conference aalborg denmark august lncs vol 
springer verlag pp 

alf de alfaro formal verification probabilistic systems ph thesis stanford university 
alf stochastic transition systems international conference concurrency theory concur vol 
lncs pp 

process algebra probabilistic choice proc 
th international amast workshop arts bamberg germany 
katoen ed lncs springer verlag pp 

probabilistic process algebra ph thesis eindhoven university technology 
ba de alfaro model checking probabilistic nondeterministic systems 
software tech 
theor 
comp 
sci lncs vol 
springer verlag 
bai baier polynomial time algorithms testing probabilistic bisimulation simulation proc 
th international conference computer aided verification cav lecture notes computer science vol 
pp 

bai baier algorithmic verification methods probabilistic systems fmi universitaet mannheim 
bbs baeten bergstra smolka axiomatizing probabilistic processes acp generative probabilities information computation 
blute desharnais edalat panangaden bisimulation labelled markov processes lics pp 

baier argenio hermanns 
katoen cook probabilistic process calculus unpublished 
baier deciding bisimilarity similarity probabilistic processes journal computer system sciences 
ber bernardo theory application extended markovian process algebra ph thesis university bologna 
bg bernardo gorrieri tutorial empa theory concurrent processes nondeterminism priorities probabilities time theoretical computer science 
bh brinksma hermanns process algebra markov chains lectures formal methods performance analysis eef euro summer school trends computer science berg en dal netherlands july brinksma hermanns 
katoen eds lncs vol 
springer verlag pp 

baier hermanns 
katoen model checking continuous time markov chains transient analysis cav vol 
lncs springer verlag pp 

bhr brookes hoare roscoe theory communicating sequential processes journal acm 
bk bergstra klop algebra communicating processes abstraction theoretical computer science 
bk baier kwiatkowska domain equations probabilistic processes th workshop expressiveness concurrency express santa margherita vol 
electronic notes theoretical computer science 
bk domain equations probabilistic processes mathematical structures computer science 
benveniste levy fabre le guernic calculus stochastic systems specification simulation hidden state estimation mixed stochastic non stochastic systems theoretical computer science 
bm bloom meyer bisimulation probabilistic processes foundations software technology theoretical computer science lncs vol 
springer verlag pp 

bs baier norm probabilistic bisimulations delays proceedings rd international conference foundations science computation structures fossacs berlin germany march tiuryn ed lncs vol 
springer verlag pp 

bs segala axiomatizations probabilistic bisimulation proceedings th international colloquium automata languages programming icalp crete lncs pp 

bsv bartels de hierarchy probabilistic system types electronic notes theoretical computer science peter ed vol 
elsevier 
buc buchholz markovian process algebra composition equivalence proc 
erlangen germany pp 

cc efficient algorithms verification equivalences probabilistic processes proc 
workshop computer aided verification larsen skou eds lncs vol 

chr testing equivalences fully models probabilistic processes proceedings concur baeten klop eds lncs springer verlag pp 

cleaveland smolka testing preorders probabilistic processes automata languages programming icalp vienna lncs vol 
springer verlag pp 

cy courcoubetis yannakakis complexity probabilistic verification journal acm jacm 
argenio algebras automata timed stochastic system ph thesis university twente 
dep desharnais edalat panangaden logical characterization bisimulation labeled markov processes proc 
lics indianapolis pp 

der finite state markovian decision academic press 
dhk argenio hermanns 
katoen generative parallel composition proc 
entcs pp 

argenio jensen larsen reachability analysis probabilistic systems successive refinements aachen germany de alfaro gilmore eds lncs vol 
springer verlag pp 

reduction refinement strategies probabilistic analysis copenhagen denmark hermanns segala eds lncs springer verlag 
gjs jou smolka algebraic reasoning probabilistic concurrent systems proc 
working conf 
programming concepts methods 
broy jones eds north holland pp 

gss van glabbeek smolka steffen reactive generative stratified models probabilistic processes information computation 
van glabbeek smolka steffen reactive generative stratified models probabilistic processes logic computer science pp 

han hansson time probability formal design distributed systems ph thesis uppsala university department computer systems appeared real time safety critical systems vol 
elsevier 
har den probabilistic extensions semantical models ph thesis vrije universiteit amsterdam 
hav markovian models performance dependability evaluation lectures formal methods performance analysis eef euro summer school trends computer science berg en dal netherlands july brinksma hermanns 
katoen eds lncs vol 
springer verlag pp 

hermanns interactive markov chains ph thesis erlangen revised version appeared interactive markov chains quest quantified quality lncs 
hil compositional approach performance modelling ph thesis university edinburgh appeared bcs distinguished dissertation series cambridge university press 
hj hansson jonsson logic reasoning time reliability formal aspects computing 
hoa hoare communicating sequential processes prentice hall 
howard dynamic probabilistic systems john wiley sons new york 
hv den de mixing nondeterminism probability preliminary report proc 
baier huth kwiatkowska ryan eds entcs 
hv verifying probabilistic programs hoare logic international journal foundations computer science 
jl jonsson larsen specification refinement probabilistic processes proceedings sixth annual ieee symposium logic computer science 
lics ieee 
jonsson larsen yi probabilistic extensions process algebras handbook process algebras elsevier north holland 
jr jacobs rutten tutorial algebras induction bulletin eatcs 
js 
jou smolka equivalences congruences complete axiomatizations probabilistic processes proceedings concur baeten klop eds springer verlag pp 

jy yi testing preorders probabilistic processes characterized simulations theoretical computer science 
kn kwiatkowska norman testing equivalence reactive probabilistic processes express fifth international workshop expressiveness concurrency entcs 
ks kemeny snell finite markov chains springer verlag new york 
ln pez ez overview probabilistic process algebras equivalences volume 
low lowe probabilistic prioritized models timed csp theoretical computer science 
lp lewis papadimitriou elements theory computation prentice hall englewood cliffs nj 
ls larsen skou bisimulation probabilistic testing information computation 
ls larsen skou compositional verification probabilistic processes concur third international conference concurrency theory stony brook ny usa cleaveland ed lncs vol 
springer verlag pp 

lt lynch tuttle hierarchical completeness proofs distributed algorithms proceedings th annual acm symposium principles distributed computing 
mac maclane categories working mathematician springer verlag 
mil milner calculi synchrony asynchrony theoretical computer science 
mil communication concurrency prentice hall 
morgan mciver seidel sanders refinement oriented probability csp formal aspects computing 
mos moss coalgebraic logic annals pure applied logic 
norman metric semantics reactive probabilistic processes ph thesis school computer science university birmingham 
pa plateau stochastic automata network modeling parallel systems ieee trans 
software engineering 
pz pnueli zuck verification multiprocess probabilistic protocols distributed computing 
pz probabilistic verification information computation 
rab rabin probabilistic automata information control 
rut rutten universal coalgebra theory systems theoretical computer science 
scs stark cleaveland smolka process algebraic language probabilistic automata proc 
concur amadio eds lncs vol 
springer pp 

seg segala modeling verification randomized distributed real time systems ph thesis mit 
sei seidel probabilistic communicating processes theoretical computer science 
sl segala lynch probabilistic simulations probabilistic processes proc 
concur lncs pp 

ss smolka steffen priority extremal probability proceedings concur baeten klop eds lncs vol 
springer verlag pp 

sto est verification probabilistic real time parametric systems ph thesis university nijmegen netherlands 
sto probabilistic automata eatcs bulletin vol 

sv vaandrager root contention ieee proc 
th international amast workshop arts bamberg germany 
katoen ed lncs vol 
springer verlag pp 

sv testing scenario probabilistic automata proceedings th international colloquium automata languages programming icalp eindhoven netherlands june lncs vol 
springer verlag pp 

var vardi automatic verification probabilistic concurrent finite state programs proc 
focs portland oregon ieee computer society press pp 

vin de functor probabilistic bisimulation preservation weak pullbacks tech 
report ir vrije universiteit amsterdam 
vr de rutten bisimulation probabilistic transition systems coalgebraic approach theoretical computer science 
wss 
wu smolka stark composition behaviors probabilistic automata theoretical computer science 
yl yi larsen testing preorders probabilistic nondeterministic processes protocol specification testing verification florida usa vol 
pp 

