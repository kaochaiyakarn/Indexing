department computer science university pittsburgh technical report tr fist framework instrumentation software dynamic translators naveen kumar jonathan bruce mary lou soffa department computer science university pittsburgh pittsburgh pa naveen soffa cs pitt edu software dynamic translators sdt typically monitor profile affect execution program 
systems build useful applications including dynamic code optimizers binary machine code java bytecode software security checkers binary translators code profilers program introspection tools 
systems program instrumentation instrumentation usually tailored specific application infrastructure 
missing single scalable flexible instrumentation framework different sdt infrastructures 
describe new framework called fist targeted different algorithms tools enable instrumentation applications portable sdts machine platforms 
interface supports multiple levels granularity source level constructs instruction machine level 
demonstrate fist flexibility evaluate strata sdt system sparc jikes research virtual machine java intel 
show framework scalability describe new instrumentation applications prototype dynamic optimization techniques apply software tests java programs 
software systems dynamically modify control execution program received attention due increased recognition importance 
example dynamic optimizers ibm jikes optimizer apply code transformations run time program behavior 
jikes decisions optimize method predicted benefit optimization cost 
examples software dynamic translators sdt enforcing security policies simulating processor architectures just time compilation java programs debugging programs :10.1.1.13.6511:10.1.1.13.660
systems information executing program decisions control program execution 
example program debuggers insert instrumentation program track values security checkers instrumentation check dynamic optimizers binary translators information identify hot code segments collect profiles optimization :10.1.1.13.660
instrumentation systems department computer science university pittsburgh technical report tr information gathering control modification executing program 
techniques systems proposed instrumentation monitor control program execution 
techniques include static binary rewriting application code profiling dynamic instrumentation programs :10.1.1.41.2316
infrastructures aim provide instrumentation capabilities different machine platforms 
system lack common interface general framework instrumentation sdt infrastructures 
importance number sdt applications need provide framework different instrumentation control purposes 
framework flexible configured dif ferent purposes architectures sdts scalable different granularities amounts run time information gathering control 
describes fist new framework program instrumentation software dynamic translation infrastructures scalable flexible 
framework gather information con trol program dynamically adapt instrumentation 
operate different program granularities map information level 
fist flexible portable different infrastructures machine architectures 
provides consistent single interface instrumentation avoids tying instrumentation algorithms tools single sdt infrastructure machine architec ture 
example security checker uses instrumentation capabilities hosted soft ware dynamic translator incorporates fist 
contributions including novel framework fist combines event response model instrumentation prim enable flexible scalable information collection control sdt systems instrumentation primitives portable different sdt infrastructures machine architectures variable length fixed length instruction sets instance fist software dynamic translator strata sparc second instance framework vm jit java jikes intel fist new approach preloading dynamic optimizer trace cache mini opportunity cost start delay trace formation department computer science university pittsburgh technical report tr fist new path low cost approach structural testing java programs evaluation performance memory overhead primitives tion applications strata sparc jikes 
flexible scalable instrumentation framework sdt configured applications uses 
example enforce security policies monitoring program operating system calls :10.1.1.13.660
security applications monitoring done pro gram vulnerabilities instruction level potential vulnerability aggressive sandboxing applied 
fist aid optimization java jit compiler dynamic optimizer jikes 
compelling sdt applications benefit general framework ranging code profilers software testing tools adaptive code environ ments 
remainder organization 
section describes fist sec tion describes challenges issues associated incorporating framework sdt system java vm 
section presents novel applications fist instruction trace formation structural testing 
section describes related section summarizes 
fist instrumentation mechanism sdt lightweight allows trade offs cost amount interaction program 
supports algorithms techniques monitor profile affect program execution different levels different ways 
mechanism dynamically insert remove instrumentation decisions instrument control program execution run time behavior 
avoids exposing machine platform characteristics 
achieve capabilities framework uses event response model triggers information gathering control prop erty running program satisfied 
approach event occurs program monitor dis covers property running program satisfied response taken event 
reactive model permits controlling instrumentation dynamically affecting program execution department computer science university pittsburgh technical report tr different ways 
instrumentation security checks verify system calls meet security policy call unsafe response taken aborting program error message 
event triggered policy violation response handles event case aborts program 
high level instrumentation mappings high level instruction level events responses instruction level events responses instruction level instrumentation shows components fist 
framework permits information gathering control high level constructs classes methods statements 
programs execute instruction level source information related instructions program execution 
fist mappings indicate high level constructs related translated instruction level 
instrument application framework primitives monitor gather information check specified properties satisfied 
primitives integrate monitoring events responses instruction level mechanism instrumentation application implemented 
combination mappings instrumentation code built primitives form instrumentation plan says gather information control program execution 
mentation plan recipe instrument program primitives steps say exactly 
instrumentation framework source constructs classes methods statements relate lower level program instrumentation back event monitor response react primitives instrumentation code instrumentation memory fist example fist standalone tools target interfaces gather information control program 
shows possible way framework 
instrumentation planner translates instrumentation specification instrumentation plan 
plan includes map instrumentation specification mappings instrumentation planner event monitors program example framework instrumentation plan response handlers department computer science university pittsburgh technical report tr pings relate instruction level information source level 
event monitors response handlers pieces instrumentation code stitched program execution instrumentation primitives 
section application framework software structural testing java programs uses approach similar 
focus back portion fist basis rest framework built 
describe components back including mechanism gener ating events responding primitives integrating events responses tion memory code data handled 
event generation response fist events generated synchronously program execution defined points code 
condition generating event boolean expression evaluated context running program machine platform 
response general may number activities event changing instrumentation sampling rate saving state program machine platform optimizing method updating counter 
events static dynamic properties need monitored 
static property ver ified actual values state particular instrumentation point 
example instruction type property determined strictly looking instructions knowing dynamic execution 
dynamic property verified inspecting program values state instrumentation point 
example data value particular machine register memory location dynamic property 
instrumentation monitors properties inserted compile time dynamically inserted removed run time 
instrumentation inspect instructions state insert remove instrumentation 
implement events responses fist trigger action mechanism 
trigger code checks specific condition generates event action code reacts events 
property satisfied trigger generates event causes call back action 
code event generation call back actions trigger action pair 
department computer science university pittsburgh technical report tr software binary attachment attachment attachment attachment shows trigger action mechanism works 
instrumentation point attached binary program transfer control trigger checks code property gener ates event property holds 
trigger fired action taken event 
shows triggers shared instrumentation points actions shared different triggers 
instrumentation point invoke triggers corresponding actions shown 
monitor properties trigger static check dynamic check 
static check verifies static properties instructions machine dynamic translator 
done inserting new instrumentation program 
trigger dynamic check inspects values state run time invoked control flow reaches instrumentation point program 
static checks implemented part instrumentation system interface dynamic checks implemented tation primitives 
mechanisms integrate monitoring event generation responses intercept program control flow execute dynamic checks actions 
instrumentation primitives translate instrumentation specification event triggers actions 
trigger event model instrumentation trigger action pair fist primitives instrumentation inline hit hit hit 
primitives build complex operations differ way instrumentation inserted left application 
inline hit inserted directly basic block removed 
hit executed outside program control flow removed immediately hit 
simi hit executed outside regular control flow remains code explicitly removed 
hit hit intercept control flow change go line location 
primitives fast breakpoint replaces instruction branch takes flow instrumentation specification trigger trigger action action department computer science university pittsburgh technical report tr instruction instruction instruction instruction branch hit dynamic check fixed length instruction set control code dynamic check 
shows fast breakpoints dynamic check 
shows breakpoint code breakpoint handler saves context applica tion call function dynamic check restores context application executes original instruction executes instruction instrumented 
application context refers general purpose registers machine registers condi tion code 
context saved invoking dynamic check action free registers dynamic check action code 
context available inspected dynamic check modified action desired 
inline hit code save restore context inserted line code generation call dynamic check 
inline instrumentation eliminates branch instructions 
inline hit ability include simple instrumentation directly code transferring control dynamic check action 
advantage hit hit inserted removed dynamically 
fast breakpoint implement primitives easy insert primitive changing code layout 
insert hit hit usually instruction changed 
likewise removing instrumentation easy original instrumented instruction copied back tation point remove instrumentation 
primitive inserted line remain code 
avoids dynamically rewriting code line instrumentation removed inserted 
primitives implement primitives 
example hit implement hit primitive dynamically inserted removed 
instrumentation code data memory context save call context restore instruction branch instrumentation disturb program avoid introducing artificial effects 
practice dynamic check dyn check call action department computer science university pittsburgh technical report tr difficult completely avoid disturbing program 
minimize disturbance separate context instrumentation code data values 
keep instrumentation lightweight context kept application process space avoids expensive process switches inter process commu nication application instrumentation 
context management done tion depending particular target platform keep memory instrumentation code single memory block attached individual functions methods 
instrumentation typically gathers information needs store information place 
framework provides separate data mem ory hold persistent information variables needed instrumentation 
software dynamic translation instrumentation demonstrate flexibility fist incorporated sdt ultrasparc java jit vm 
section describe challenges associated implementation including special considerations target instruction set architectures isa sdt systems 
strata sparc solaris address difficulty building software dynamic translators university virginia developed highly configurable retargetable sdt infrastructure called strata 
implement policies operating system calls architectural simulators code profilers supports machine platforms 
integrated framework strata provide flexible inter face instrumenting programs different sdt applications 
describe incorporated fist strata describe unique challenges sparc instruction set 
strata sdt 
shows structure strata arranged vm sits pro gram cpu 
vm translates program instructions execute cpu mim ics standard hardware fetch decode translate execute steps 
fetch loads instructions memory decode cracks instructions individual fields translate modifications instructions written fragment trace cache 
translate step point code modified 
execute step occurs control returned binary fragment context capture new pc context switch department computer science university pittsburgh technical report tr sdt virtual machine cached 
finished 
new fragment fetch decode translate pc host cpu executing translated code cache strata software dynamic translator strata virtual machine cache 
include instrumentation framework strata address incorporate vm store instrumentation code data part vm 
vm interface 
strata vm set target independent common services set target dependent specific services interface communicate 
incorporated tion mechanisms common target specific services 
common services provide interface convey strata static dynamic checks actions 
interface passes function pointers strata call backs check static dynamic property invoke action 
static dynamic checks action functions written high level language 
interface allows dynamic insertion removal instrumentation exports program machine state strata internal structures 
target specific services define interface inserting removing hit hit primitives specific machine architecture ease retargetability infrastructure 
instrumentation code data memory 
code storage breakpoints allocated strata fragment cache 
space may located portion cache reserved instrumentation immediately fragment cache 
advantage code layout preserved instruction traces locality benefits instrumentation code executed frequently frag ment 
adding new dynamic checks fly existing fragments space allo cated reserved portion fragment cache 
instrumentation data memory allocated part application context management memory management strata virtual cpu cache management target interface target specific functions host cpu linker strata common target services strata virtual machine department computer science university pittsburgh technical report tr strata context 
interface exports access memory instrumentation 
sparc isa 
primitives handle sparc main challenges implement hit hit fixed length instruction set sparc branch architecture register windows 
inline hit similar challenges hit hit describe primitives 
hit primitive 
hit instruction instrumented replaced jump trans control breakpoint handler invoke dynamic check action 
breakpoint handler code saving restoring application context doing dynamic check 
just application context restored handler copies instrumented instruction back original location 
copy operation control transferred instruction breakpoint hit 
copying instruc tion back executing original location removes breakpoint immediately hit 
hit primitive 
primitive remains program removed 
replaces instrumented instruction jump inserts replaced instruction breakpoint handler 
case instrumented instruction executes part breakpoint handler original location program 
breakpoint jump remains explicitly removed 
remove hit original instruction breakpoint handlers copied original location overwriting breakpoint 
branch architecture 
sparc branch architecture challenge delay slot instructions dsi 
instrumenting dsi instruction replaced branch sparc allow branch put delay slot 
avoid problem instrument branch dsi 
way original branch copied back program control trans branch 
approach works values general purpose registers remain executing branch dsi 
case branches instrumented test condition code invoking dynamic check ensure check invoked branch going taken 
consideration occurs instrumentation placed branch 
care taken move dsi original source instruction breakpoint handler 
dsi executed delay slot branch inside breakpoint handler pre department computer science university pittsburgh technical report tr serve semantics branch 
offset pc relative branch modified copied breakpoint handler correct taken target address 
new taken target unconditional branch returns control fall taken path instrumented branch 
register windows 
sparc register windows relatively easy low cost imple ment context switch breakpoints 
save acquire new set general purpose regis ters restore recover original registers 
breakpoint may save restore registers including global floating point registers condition code register 
partial context switch may done save restore registers needed dynamic check action avoid cost saving restoring global floating point registers register 
experiments 
measured average memory performance overhead hit hit instrumentation strata sparc shown table 
memory cost number instruc tions needed primitive performance cost run time execute primitive 
results collected mhz ultrasparc iie sun blade mb ram solaris 
compute performance overhead program tight loop iterates times 
loop body instrumented iteration 
instrumentation primitive cost measured overhead dynamic check action included application dependent 
hit hit inline hit time ns number instructions table memory performance cost instrumentation primitives instrumentation expense due saving restoring context 
full context save restore takes instructions call dynamic check action takes instructions 
control transfers breakpoint handler take instructions cost emitting code run time hit instructions instruction additional instruction 
cases performance cost instrumentation compounded presence control transfers 
hit cache flush original instruction replaced perfor mance impact 
inline hit expensive branches hit department computer science university pittsburgh technical report tr hit 
hit performance dynamically inserted removed fly hit low cost temporary instrumentation removes cost 
jikes rvm linux fist jikes research virtual machine rvm instruments executing java program instruction level insert remove instrumentation point program execu tion 
map instruction level information bytecode source statements provided byte code line number mappings 
start discussion isa impacted implementation fist jikes 
isa 
variable length isa special challenges implementation hit hit primitives required new breakpoint called source sink breakpoint 
challenges involved basic blocks smaller byte basic blocks jump 
hit hit primitives 
implement primitives pair breakpoints called source sink breakpoints insert remove instrumentation instructions basic blocks 
case hit primitive source sink breakpoints insert breakpoint original instruction instrumented source 
hit source breakpoint copies instrumented instruction original location executed inserts breakpoint instruction sink pro gram 
executed sink breakpoint re inserts original source breakpoint ensuring instrumentation remains explicitly removed 
difficulty occurs instruction fall different paths 
insert sink breakpoints possible target blocks sink breakpoints hit removes sibling breakpoints 
alternatively handle branches extract ing branch target address instruction putting sink breakpoint target address register 
hit instrumentation implemented similarly sink breakpoint inserted 
way source breakpoint hit copy instrumented instruction original location source breakpoint re inserted 
department computer science university pittsburgh technical report tr variable length instruction set copying instrumented instruction back original loca tion works better executing instruction breakpoint handler 
instrumented instruction executed breakpoint handler instructions decoded find instruction boundaries entire instruction copied handler 
cases multiple instructions may copied executed handler breakpoint jump span multiple source instruc tions 
branch target addresses rewritten placing breakpoint branch 
source sink breakpoints know instructions breakpoint inserted sim reduced cost instrumentation 
short basic blocks 
challenge involves amount space needed block insert break point 
instrumentation system normally uses byte jumps breakpoints 
basic block shorter bytes breakpoint jump may need span successive basic blocks cause problem control go short block 
short block problem deter mined close breakpoint placed basic block 
breakpoint placed closer bytes short block problem occur 
handle problem putting breakpoint early block maximize distance block 
breakpoint moved early block block padded space breakpoint inserted 
alternatively int instruction raise software interrupt invoke breakpoint 
instruc tion takes byte fits block expensive general instrumentation 
reflexive basic blocks 
final challenge happens reflexive block block jump 
hit instrumentation source sink breakpoints break points handle reflexive block 
consider case source breakpoint hit reflexive block 
source breakpoint attempt insert sink breakpoint successors includ ing 
sink breakpoint inserted source breakpoint copies original instrumented instruction back reflexive block may overwrite remove sink breakpoint 
case happens reflexive block short sink breakpoint placed original location 
handle reflexive blocks insert dummy block reflexive block back edge hold sink department computer science university pittsburgh technical report tr breakpoint 
rewrite branch reflexive block avoid going dummy block reflexive block instrumented 
solution changes program code minimal performance cost minimally impacts application code storage layout 
jikes rvm 
integrate framework jikes address issues 
instrumentation system gets control instrument method second handle multi threading final interaction garbage collection gc instrumentation 
instrumentation injection 
get control method loaded compiled simple modi fication vm insert breakpoint method prologue generates event method entered 
response event gets control method entered 
structure instrumentation independent transparent vm interaction initial insertion static breakpoint 
approach ensures methods instrumented executed 
jit exports information instrumentation method control flow graph 
multi threading support 
fist supports multi threading java programs 
multi threading comes play trying track state method instrumentation code 
source sink breakpoints possible thread switch happen execution source sink breakpoint 
case source breakpoint needs pass state sink breakpoint state saved part thread context 
possibility modify thread switch code rvm save state 
state instrumentation application dependent tical modify rvm new instrumentation application developed 
yield points automatically identified special context saving instrumentation inserted record state needs persistent thread switches 
alternative save information persistent single method invocation part method activation frame 
thread switch occurs pro gram stack switched automatically saves persistent state 
current implementation uses combination techniques 
small amounts information local method stored activation frame large persistent data structures stored separate memory buffer 
putting infor department computer science university pittsburgh technical report tr mation activation frame pragmatic decision simplified implementation 
informa tion activation frame moved memory buffer desired 
garbage collection 
concern gc allocate data code space instrumentation 
possibility allocate storage part application context context rvm 
solution may interactions gc 
problem instrumentation machine code gc may able track involving instrumentation 
problem copy ing gc addresses change 
efficiency desirable emit address constants instrumentation doing table lookup find addresses 
solutions problems expensive rejected allocating instrumentation data code part application 
allocate memory buffer operating system visible run time system hold mentation code data 
avoids interactions gc 
experiments 
measured memory performance cost source sink breakpoints hit hit instrumentation 
memory cost includes code size breakpoint stor age space hold instrumented instructions 
performance cost source breakpoints varies number sink breakpoints inserted measured average time source breakpoint benchmark program compress specjvm 
experimental platform jikes mhz pentium iii dual processor machine mb memory redhat linux 
description cost source breakpoint execution time ns source breakpoint code size bytes average storage cost source breakpoint bytes table performance memory cost breakpoints jikes compress table shows average cost source breakpoint compress 
performance cost hit approximately twice value table breakpoints executed source sink breakpoints 
breakpoint code loop iterates list successor blocks inserts sink breakpoints successors 
average sink breakpoints inserted source breakpoint compress loop overhead minimal 
implementation hit uses department computer science university pittsburgh technical report tr mechanism hit zero successors loop inserts sink breakpoints executed 
cost hit approximately cost source breakpoint table actual cost marginally breakpoint insert sink breakpoints source breakpoint table inserts average half sink breakpoints 
table shows memory overhead breakpoint instructions takes bytes 
average bytes data storage needed hold original instruction store addresses sink breakpoints placed 
applications fist strata jikes purposes including code profiler fast architecture cache simulation program debugging 
section describe approach new applica tions prototyping dynamic optimization structural testing java programs demonstrate framework scalability different amounts types information gathering 
trace cache management flexibility scalability fist strata ideal tool exploring benefits new techniques dynamic code optimizers fist investigate approach forming instruc tion traces line dynamic optimization 
dynamic optimizers instruction traces composed basic blocks hot path granularity optimization typically traces collected online match program dynamic behavior 
opportunity cost associated identify ing traces past history collected identify candidate traces 
smith shows traces variability certain circumstances 
observation motivates idea forming traces line pre load seed dynamic trace formation 
forming line traces help reduce opportunity cost identifying traces online powerful expensive techniques find traces 
disadvantage line traces may match actual behavior particularly input data sets large influence program execution 
prototyped line trace formation technique preload fragment cache 
fist develop instrumentation planner profile application investigate benefits department computer science university pittsburgh technical report tr line trace formation technique 
instrumentation planner uses algorithm call heaviest edge determine traces preloaded 
forms traces starting seed edge profile heaviest weight blocks associated edge added new trace 
adds new blocks trace selecting successor predecessor edges heaviest weight trace condition encountered 
trace condition takes account sig successor predecessor blocks edge execution frequencies amount code duplication size trace 
useful captures characteristics trace formation algo rithms executing tail explore benefit different algorithms 
form traces line needed instrument code strata fragment cache different ways collect profile information run time statistics 
instrumentation primitives built different kinds profile operations including counter sampler operations 
counter records num ber times edge executed implemented hit instrumentation increments counter edge hit 
sampler implemented similarly control insertion removal instrumentation sample count 
counter sampler combined control overhead gathering edge profiles 
experiments 
determine benefit experiments strata sparc see sec tion evaluated spec 
benchmark runs 
run profiled benchmarks train input spec 
profiles com pute traces line 
second run traces pre loaded strata fragment cache input benchmark run determine benefit 
shows percent age performance improvement preloading traces strata preloading traces strata 
cost preloading fragment cache minimal comparison program run time 
forming traces improved performance case mcf negligible slowdown 
fist investigate mcf performance slowdown traces exited early time 
traces formed training data representative needed data shows limitation line trace formation 
sparc department computer science university pittsburgh technical report tr improvement performance improvement preloaded fragment cache strata performance counters mcf preloaded traces large number instruction cache misses branch mispredictions 
experiments believe benefit preloading traces con improving developing ways convey static hints dynamic optimizer 
fist quickly prototype idea took days implement debug run experiments 
application shows benefit flexible instrumentation 
branch coverage testing gzip bzip mcf twolf benchmarks gcc vpr vortex fist jikes developing new method structural testing profiling java programs 
approach uses novel scheme employ test profile plans describe instrumentation automatically inserted removed executing code carry testing profiling strategies 
test profile plan recipe describes instrumentation performed 
approach path specific uses actual execution paths application drive instrumentation 
instrumentation longer needed particular point dynamically removed avoid run time performance overhead test profile plan continues 
fist explore benefit path approach 
developed mentation planner see branch coverage analysis generates test plans primi tives 
branch coverage structural test determines edges program executed 
main function test planner determine insert instrumentation gener ate test plan consists test data instrumentation actions 
test data information department computer science university pittsburgh technical report tr branch coverage says insert remove instrumentation covering edge method 
action target machine code executed instrumentation point update table records edges covered 
action removes instrumentation edge covered inserts new instrumentation cover edges execute hit 
way action inserts removes instrumentation dynamically path execution 
experiments 
fist test planner built tool branch coverage testing jikes 
tool lets user graphically specify code regions apply branch coverage testing coverage criteria 
generates textual specification test planner determine test plan 
benchmark overhead benchmark overhead benchmark overhead compress mtrt mpegaudio db jess javac table run time overhead branch coverage done experiments determine overhead branch coverage tool built fist 
table shows run time performance overhead benchmarks relative running programs applying branch coverage 
benchmarks run experimental platform described section 
overhead includes time construct instrumentation plan execute instrumentation inserted code determine coverage 
table shows run time overhead minimal varying 
interestingly cases test planner overhead instrumentation overhead 
case occur method basic blocks short path taken method 
general methods test planner accounts small portion run time overhead majority spent instrumentation code 
overhead instrumentation quite small instrumentation immediately removed edge covered 
flexibility instrumentation approach possible build branch coverage tool low overhead 
related instrumentation techniques software dynamic translators number purposes including dynamic optimization program debuggers software security department computer science university pittsburgh technical report tr binary translation 
systems instrumentation hard coded system 
dynamo instrumentation happens interpreter dynamo rio instrumentation typi cally inserted back edges inside basic block 
concept fast breakpoints pioneered kessler technique call hit instrumentation 
kessler fast breakpoints applied flexible manner dif ferent sdt architectures dynamically instrument programs 
code modification instrumentation systems dyninst paradyn technique similar instrument program fast breakpoints 
framework dyninst intended general language specifying instrumentation 
dyninst paradyn built specific purposes best knowledge instrumentation techniques designed support different sdt infrastructures 
originally dyninst able instrument method level extended instrument programs instruction level 
general framework primitives implementation different software dynamic translators dyninst described 
dyninst build software testing tool similar testing tool 
dyninst tool dynamically inserts instrumentation method invocations node coverage take similar approach branch coverage stricter form coverage 
approach instrumentation inserted method invoked separate garbage collection process done remove instrumentation 
technique instruments executed paths removes tion demand soon possible keep run time overhead minimal 
dynamic instrumentation includes ephemeral instrumentation uses light weight instrumentation program profiling 
approach gathers branch biases constructs edge profile post processing sampled profile information 
provide gen eral infrastructure instrumentation instance run time dynamic optimizers persistent instrumentation architectural simulators shade 
fist easily con figured perform lightweight ephemeral instrumentation different sdts 
arnold ryder proposed scheme inserts counters program guard execution instrumented code 
inline hit primitive counter implement similar department computer science university pittsburgh technical report tr instrumentation code duplication 
avoid code duplication hit hit insert remove instrumentation dynamically counter 
approach avoids disturbing application inline instrumentation increase run time cost instrumentation 
summary described framework flexible scalable instrumentation called fist software dynamic translators strata jikes 
demonstrated fist capabilities different sdt infrastructures target architectures instrumentation applications 
described framework primitives incorporated strata sdt sparc java vm 
infrastructure strata prototype technique preload seed trace cache dynamic optimizer reduce cost dynamically discovering instruction traces 
showed fist structural testing java programs 
framework instances applications show approach flexible scalable 
arnold fink grove hind sweeney adaptive optimization jalape jvm conf 
object oriented programming systems languages applications oct 
arnold ryder framework reducing cost instrumented code acm sig plan conf 
programming language design implementation june 
bala duesterwald banerjia dynamo transparent dynamic optimization system acm sigplan conf 
programming language design implementation june 
amarasinghe infrastructure adaptive dynamic optimization int symp 
code generation optimization march 
cmelik keppel shade fast instruction set simulator execution profiling technical report computer science university washington june 
banning johnson kistler mattson transmeta code morphing software speculation recovery adaptive address real life challenges int symp 
code optimization generation march 
duesterwald fisher deli new runtime control point int symp 
microarchitecture micro november 
duesterwald bala software profiling hot path prediction int conf 
architectural support programming languages operating systems 
ebcioglu altman daisy dynamic compilation architectural compatibility th annual international symposium computer architecture isca june 
department computer science university pittsburgh technical report tr smith characterizing inter execution application optimization persistence workshop exploring trace space dynamic optimization techniques held conjunction th int conference supercomputing san francisco ca june 
hollingsworth miller goncalves mdl language compiler dynamic program instrumentation conf 
parallel architecture compilation techniques 
digital fx combining emulation binary translation digital technical journal vol 
august 
gupta soffa fulldoc full reporting debugger optimized code proc 
static analysis symposium 
kessler fast breakpoints design implementation acm sigplan conf 
programming language design implementation pp 

amarasinghe secure execution program shepherding usenix security symposium august :10.1.1.13.660
larus schnarr eel machine independent executable editing acm sigplan conf 
programming language design implementation june 
marathe mueller detecting memory performance bottlenecks binary rewriting workshop binary translation conf 
parallel architecture compilation techniques sept 
miller callaghan hollingsworth paradyn parallel performance measurement tools ieee computer vol 
november 
ramsey hanson retargetable debugger acm sigplan conf 
programming language design implementation june 
schnarr applying programming language implementation techniques processor simulation phd thesis university wisconsin madison 
scott kumar davidson soffa reconfigurable retargetable software dynamic translation int symp 
code generation optimization march 
scott davidson safe virtual execution software dynamic translation annual computer security applications conference dec 
srivastava eustace atom system building customized program analysis tools acm sigplan conf 
programming design implementation june 
srivastava edwards binary transformation distributed environment microsoft research technical report msr tr april 
stallman pesch gdb guide gnu source level debugger gdb version 
technical report free software foundation cambridge ma 
hollingsworth efficient instrumentation code coverage testing int symp 
software testing analysis issta june 
traub schechter smith ephemeral instrumentation lightweight program profiling technical report harvard university 
witchel rosenblum embra fast flexible machine simulation conf 
measurement modeling computer systems may 

