designer visual language specify sim toolkit applications carsten schmidt peter uwe kastens carsten fischer peter uwe uni paderborn de orga com university paderborn orga gmbh department mathematics am computer science paderborn paderborn germany germany sim application toolkit standardized interface provides mechanisms allowing applications existing sim interact operate mobile equipment supports specific mechanisms required application 
case java cards software implemented java 
simplify software development complex application domain developed visual domain specific language 
designer create programs language translate java 
generated vl eli system tool implementation visual languages 
gives short application area presents designer tool discusses vl eli system 
domain specific languages dsls developed specific application domains tend narrow 
language constructs usually chosen particular concepts domain notation adapts way domain experts express designs 
sense dsl closer solution application tasks general purpose programming languages allow designs higher level abstraction 
strategy dsls especially supported visual languages domain experts prefer graphical textual descriptions high level constructs complex relations usually better captured iconic representations graphic connections twodimensional layout visual notations easier learn textual ones 
describe development language design javacard sim toolkit applications stk applications additional software sim cards mobile phones 
domain qualified supported visual dsl narrow domain programs common structure composed small set high level constructs design paradigms menu selection event driven reaction 
large distance dsl constructs implementation target language java bridged translation dsl 
intended users dsl experts stk domain expected familiar programming textual languages java 
design implementation visual dsls requires wide range know designer understand application domain needs techniques drawing layout manipulation graphical objects addition analysis translation tasks needed textual languages 
market dsl usually small large design implementation task supported tools balance invested efforts 
vl eli system implement dsl stk applications 
vl eli result research development visual languages 
central paradigm incorporated set patterns encapsulate adaptable combinable solutions graphical language constructs 
language designer selects patterns set associates elements syntax 
vl eli conventional tasks language implementation supported huge set dedicated tools established eli system 
design implementation stk dsl performed part larger cooperation university paderborn orga gmbh 
elaborated version language developed 
structure editor prototype translator generated vl eli 
state reached investment person months 
step language system evaluated completed 
sections introduce domain stk applications 
section gives overview language presents selection constructs 
central aspects implementation vl eli section 
generated language environment application domain owner mobile device cell phone identified smart card called subscriber identity module sim 
enables access network store user specific data telephone numbers 
telephone companies handset manufacturers agreed extension mobile equipment functionality manufacturer provider independent fashion allowing add applications sim card 
defined sim application toolkit stk top standard sim technology 
stk specifies interface sim 
uses short message service sms transfer information handset service provider 
examples typical stk applications service user asked sign 
information sent service center 
service center returns appropriate text sms 
mail application asks user enter mail address message 
application sends data providers gateway mail generated sent 
example user may offered list restaurants immediate vicinity 
list received service provider restaurant application sim card transmitted users current position 
sim application toolkit great success standardized part gsm standard 
defines application program register menu elements listen events timer sms events 
event occurs procedure card executed 
procedure invoke functions example display message ask input dial telephone number 
years popular java cards sims 
java cards include virtual java machine execute byte code instructions subset java language 
java cards high level object oriented language java 
standardized java package implementing stk functionality 
java high level language convenient implement sim toolkit application java 
reasons implement java card applications allowed language constructs restricted certain part standard api available data types string supported 
byte arrays short values 
furthermore size available memory quite small java cards garbage collection supported java cards 
memory consumption programs strictly limited 
restrictions lead complex ugly difficult write read java programs 
reason java ideal sim toolkit applications user able jump back previous menu action point time 
example mail application user asked mail address message text 
point user may want jump back question 
general feature requires goto statements rollback functionality undo state changes supported directly java 
java approximation consisting labeled nested loops quite complex error prone implemented manually 
decided implement visual structure editor construction stk applications 
name designer underlying domain specific language dsl designed non programmers able construct simple sim toolkit programs 
implemented structure editor users new language need guidance construction process 
sim toolkit commands large set options parameters 
showing interactive dialog great help user 
designed visual language visual expressions intuitive improve perception specifications 
additionally users tend motivated learn visual language 
visual program translated java card stk application code generation phase designer design visual language main concepts sim toolkit applications 
relevant events menu structure registered application 
event triggers procedure characteristic control flow interactive sim toolkit commands backward move functionality 
separate procedures independent 
program obtained associating events 
language decomposed types views top level view specifies relevant events associates appropriate procedure object 
procedure view shows procedure full detail 
describe structure views separately 
top level view top level view top level view specifies events application interested 
time defines procedures application 
procedure view opened context individual objects top level view 
top level view consists parts enclosed blue boxes topmost box shows menu structure application 
structure registered application installed 
consists language elements menu item executable menu item 
user generated program selects menu item specified menu item construct corresponding sub menu shown 
selects menu item specified menu item executable corresponding procedure executed 
box middle specifies additional event handlers 
currently language elements timer events sms events available 
element type properties customize event conditions trigger procedure 
box bottom defines additional procedures 
bound external events called procedures 
kinds sub procedures contents visual sub procedures specified way procedures procedure views 
java sub procedures defined plain java 
way experienced users achieve functionality specified visually 
procedure view restaurant finder procedure procedure view shows control flow procedures 
nodes control flow graph sim toolkit function calls sub procedure calls 
created toolbar buttons left side window 
type nodes shown small icon left side 
editor prototype support common toolkit functions display text get input send sms select item 
set extended language fully evaluated 
contrast java don support general control flow structures specialized subset 
subset designed specification common sim toolkit applications easy possible 
example select item command switch function result combined single statement 
shows specification restaurant finder procedure 
user asked wants search name category 
selects category asked kind desired restaurant italian chinese greek 
result stored variable category 
sim toolkit command provide local information called stores current position derived active network cell variable location 
informations sent service provider returns address nearest restaurant selected category sms 
user selects branch name get input statement asks name restaurant forwarded service provider 
property dialog get input object properties get input statement configured dialog shown accessible context menu 
statement requests text string alternative number length characters 
input visible display hiding reasonable password 
final value stored variable name 
see representation get input statement gives overview configuration 
additionally contains query string enter name default string empty 
values defined dialog strings individual objects 
placed statements visually 
types string objects string constants gray background string variables blue background 
concatenated build complex values 
explanation missing catch option 
mentioned user initiates backward move execution jump back preceding interactive statement 
example backward move initiated left send sms statement program jump back enter name request 
cases application designer wants able influence target backward move possible disabling catch option 
backward move occurs program jumps executed statement enabled catch option 
development process design implementation mainly done single person previous domain knowledge 
step investigate application area 
requirements discussed domain experts 
language developer analyzed material stk application descriptions hand written implementations predecessor designer 
phase took month 
step language developer designed core language 
structure visual representation designed time discussed domain experts 
sides agreed core language language designer generated prototype editor language domain experts 
step took month 
step far language developer implemented simple code generation 
simple means focused code optimization issues 
new language constructs introduced result domain experts evaluate 
took months 
implementation vl eli system implement visual environment 
vl eli generates visual structure editors multiple window environment high level specifications 
visual language specified identifying certain patterns language structure selecting visual representation set solutions 
example statements procedures arranged list pattern ordered sequence elements placed certain axis dimensional region 
language developer selects specification module list representations parameterizes details representation variety options 
visual programs represented attributed trees 
phases processing generated state ofthe art tools language implementation 
visual patterns form set line 
vl generator generator visual language implementations program tree graphical representation layout editing analysis transformation language processing eli tcl tk graphical user interfaces constraint solver vl eli system main concepts vl eli described layers shown fig 
vl generator generates visual structure editors attribute grammar specifications 
built top tools graphics tcl tk layout constraint solver language implementation general eli 
topmost layer contains variants visual patterns encapsulates implementation visual language elements terms specifications vl generator 
visual patterns applied associating computational roles certain contexts attribute grammar 
describe implementation visual structure editor interesting aspects translation java detail 
specification structure editor visual representation mainly specified associating visual patterns language grammar 
visual pattern represents concept list visualization displays language elements side side row 
visual pattern concrete implementation variants defined terms composable specification modules 
pattern variant encapsulates operations needed visual structure editor implement certain graphical representation structural abstraction 
operations draw graphical components oval surrounding set layout components structure elements set oval provide facilities user interactions insert delete elements 
chosen provide automatic layout language constructs user select new language elements insert desired place 
layout new structure computed automatically 
visual languages suffer editors general layout concept small change user spend time achieve clear layout 
designer language typical example language rich list tree structure ideal automatic layout 
language completely implemented applying visual patterns automatic layout comes free 
course automatic layout may drawbacks user able modify layout introduce secondary notations optimize layout printing 
language mainly implemented list form pattern 
list pattern specify menu tree nested lists statement sequence branches select statement concatenation string values 
form compact visual object constant number sub elements fixed relative position 
form pattern root views specify representation sim toolkit function calls 
sub elements form parameters function call 
applied patterns support direct manipulation user drag new language elements toolbars left side drop appropriate 
elements selected moved deleted required 
editing assisted highlighting nearest location inserting moved language element 
code generation attribute grammars tools eli system specify code generation 
visual environment generates java source code compiled converted cap files standard format java card packages loaded sim card 
decided implement java source code java bytecode generation bytecode prevent serious problem lack goto statements java 
generation java source code easier result checked expense development 
application developers source code possible changes hand necessary 
serious problems lack goto statements backward move triggered execution proceed preceding interactive statement 
solved problem introducing state variable interactive statements 
frame procedure loop nested switch statement state variable 
jump interactive statement state variable changed new loop iteration initiated 
related lot tools support implementation visual languages 
approaches agree underlying structure 
ways implement relation visual expressions underlying structure systems support free generic visual editor parsing techniques derive structure 
systems structure editors modify underlying structure directly 
visual representation derived structure unparsing techniques 
approaches support free editing structure editing 
vl eli belongs systems generate structure editors focus area 
structure visual language specified different ways 
important methods graph grammars model specifications 
model specifications object types relations specified declarative way 
popular language specifications uml structure diagrams 
count tree grammar approach vl eli group tree grammars specify certain object types hierarchical relations 
main advantage tree grammars respect allow efficient attribute evaluator generators specify visual representation code generation 
ways specify graphical representation visual language 
tools provide high level fixed visual specification mechanism 
specification concept usually restricted graph visual languages support deep nesting language constructs 
approaches general specification concept 
graphical primitives layout constraints associated language structure 
layout computed constraint solver 
constraint solver specifications convenient certain kinds visual representations cases restricted efficiency problems 
systems vl eli attribute computations specify representation 
specifications complex allow wider range visual representations 
vl eli addresses additional specification level predefined set visual patterns 
way vl eli achieves wide application area high specification level 
tools sufficient support code generation 
tools specialized report generator languages 
metaedit object structure traversed object attributes sent output stream 
suitable documentation simple code generation suitable presence complicated dependencies 
vl eli tools attribute computations specify translation 
vl eli eli tool set translator construction offers tools solve wide range general language implementation tasks 
designer tool created assist design implementation sim application toolkit software 
software extends functionality mobile phone sims manufacturer provider independent fashion 
case java card sims stk software written java card subset java language 
stk software turns complex write manually due memory restrictions missing language features necessity provide back step function 
designer visual structure editor domain specific language generated specifications vl eli generator 
language tailored design sim toolkit software 
provides constructs specify top level menu structure language elements describe control flow individual functions 
try support mechanisms general programming languages 
example support arithmetic expressions string processing 
think reasonable transfer features visual level gain abstraction visual language complex 
provide mechanisms integrate java code aspects 
consider current state core language 
development finished 
evaluation surely disclose features missing language 
elaborate support events detail 
additionally develop concepts general control flow structure 
difficulty support backward move considered new control flow construct 
example obvious backward move behave case loop 
language designed non programmers developers orga evaluated language 
comments encouraging 
comply needs plan integrate flexible method extend visual specification pieces java code 
rd generation partnership project specification sim application toolkit subscriber identity module mobile sim interface 
ftp ftp gpp org specs archive series 

generation visual language oriented design environments 
visual lang 
comp 

genged generic graphical editor visual languages algebraic graph grammars 
ieee symp 
visual lang pages september 
chen 
java card technology smart cards architecture programmer guide 
java series 
addison wesley reading ma usa 
sit sen kim marriott 
automatic construction intelligent diagram editors 
proc 
th annual symp 
user interface software technology pages 
supporting hybrid hierarchical visual language definition 
ieee symp 
visual lang pages 
ieee comp 
soc 
press 
robert rn 
moses tool suite visual modeling systems 
symposia human centric computing pages 
ieee computer society september 
paul 
attribute specifications graphical interface generation 
ritter editor inform 
proc 
pages 
north holland 
green petre 
usability analysis visual programming environments cognitive dimensions framework 
visual lang 
comp 
honeywell dome guide 
www honeywell com dome pdf 
matthias jung uwe kastens christian schindler carsten schmidt 
pattern generator implementation visual languages 
proceedings ieee international symposium visual languages pages seattle washington september 
ieee computer society press 
matthias jung uwe kastens christian schindler carsten schmidt 
visual languages generating structure editors pattern specifications 
technischer bericht reihe informatik tr ri universit paderborn fachbereich mathematik informatik october 
www uni paderborn de fachbereich ag ps gz 
uwe kastens peter matthias jung 
eli system 
kai koskimies editor proceedings th international conference compiler construction cc number lecture notes computer science pages 
springer verlag march 
uwe kastens carsten schmidt 
vl eli generator visual languages 
mark van den brand ralf mmel editors electronic notes theoretical computer science volume 
elsevier science publishers 
th minas 
generating diagram editors providing free hand editing syntax directed editing 
joint workshop graph transformation systems 
consulting 
metaedit user guide 
www com fs asp 
html paa products html 
object management group 
omg unified modelling language specification 
www omg org cgi bin doc formal 
rekers sch rr 
graph framework implementation visual environments 
ieee symp 
visual lang pages 
ieee comp 
soc 
press 
shneiderman 
direct manipulation step programming languages 
ieee computer august 
