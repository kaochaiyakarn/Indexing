xml data integration graph restructuring lucas alexandra poulovassilis school computer science information systems college university london lucas ap dcs bbk ac uk technical report describes xml data integration framework built automed heterogeneous data integration system 
presents description framework overview comparison related solutions researchers 
contributions research development algorithms xml data integration schema integration second view materialization graph restructuring 
past years internet world wide web important part everyday life 
web receives limited amount help computers 
computers ective low level operations handling large amounts data search facilities transmitting displaying data lack functionality sophisticated tasks ones envisaged semantic web vision 
remedy data put web form machines understand convert form provide machines means process 
xml step 
markup language designed structure transmit data easy manipulate form total solution 
second step consists logic inference tools tools automate specific tasks manual 
tools involve combination xml rdf ontologies enable computers provide high level services communicating web services applications 
tools concerned automating tasks expensive time consuming require development new programs time 
tasks include importing exporting data xml files automatic schema matching migrating integrating xml data 
apart research issues concerning semantic web advent xml new data format rise new research issues 
cient storing xml data resulted evolution commercial relational databases support importing exporting xml data development native xml database products 
need cient querying xml data led development various query languages xml subsumed xpath xquery languages 
studied research issues concerning relational domain need redefined xml order find domain specific solutions 
lot research ort developing xml specific solutions schema matching data integration problems 
report describes framework xml data integration automed heterogeneous data integration system 
presents basis framework new schema definition language xml data technique assigning unique identifiers xml elements 
new algorithms developed perform schema integration view materialization respectively 
report discusses related compares researchers 
report outline section provides overview automed system automed approach data integration 
section presents schema definition language xml data specifies representation language terms automed common data model presents unique identifiers framework 
section presents schema transformation view materialization algorithms describes query engine wrapper architecture 
section reviews related compares 
section gives concluding remarks framework plans 
xml data integration framework overview automed automed heterogeneous data integration system supports schema transformation approach data integration 
shows general integration scenario 
data source described data source schema denoted ls ls transformed union compatible schema series reversible primitive transformations creating transformation pathway data source schema respective union compatible schema 
union schemas syntactically identical asserted series id transformations pair union schemas 
id special type primitive transformation matches syntactically identical constructs di erent union schemas signifying semantic equivalence 
transformation pathway containing id transformations automatically generated 
arbitrary union schemas designated global schema gs selected transformation new schema global schema 
automed integration approach transformation data source schema union schema accomplished applying series primitive transformations making delta change current schema adding deleting renaming schema construct 
add delete transformation accompanied query specifying extent newly added deleted construct terms schema constructs 
query expressed automed intermediate query language iql 
result sequence intermediate schemas connecting data source schema respective union schema 
query supplied primitive transformation defines new removed schema construct terms schema constructs provides necessary information primitive transformations automatically reversible 
means automed view data integration system 
subsumes lav gav approaches possible extract definition global schema view data source schemas possible extract definitions data source schemas views global schema 
may contain information derived corresponding ls constructs inserted add transformation extend transformation 
takes pair queries specify lower upper bound extent new construct 
lower bound may void upper bound may respectively indicate known information lower upper bound extent new construct 
may information data source schema ls corresponding removed contract transformation henceforth term union schema mean union compatible schema 
delete transformation 
extend contract takes pair queries specifying lower upper bound extent deleted construct 
shows automed integration approach xml setting 
xml data source described xml datasource schema simple schema definition language section transformed intermediate schema means series primitive transformations insert remove rename schema constructs 
union schemas automatically produced extend constructs rest intermediate schemas 
id transformation pathways pair union schemas automatically produced 
xml integration framework supports top bottom schema integration 
top approach described section global schema predefined data source schemas restructured match structure 
bottom approach described section global schema predefined automatically generated 
id id gs pc data pc data pc data pc data pc data pc data view view pc data pc data pc data gs gs gs gs gs gs pc data xml integration automed schema representing xml data sources xml files may may dtd xml schema associated 
complex grammars file conform 
data integration setting schema definition language complex necessary 
file structure crucial schema data integration optimizing query processing algorithms 
possible xml file referenced dtd xml schema 
reasons introduce xml datasource schema automatically derivable xml file abstracts structure 
obtain xml file datasource schema copy file dom representation see memory modify datasource schema specified algorithm 
get root child nodes get list children 
get node node tag copy attributes deep copy list children append list children deep means copy contains tree root copied node 
delete subtree 
get child process way child step 

new list children new apply step node new new automed common data model hypergraph data model hdm 
low level data model represent higher level modelling languages er relational object oriented xml 
hdm schemas consist nodes edges constraints 
constructs higher level schemas identified scheme see 
selection low level common data model automed intentional able better represent high level modelling languages semantic mismatches ambiguities 
higher level construct equivalent hdm representation construct element node xml class nodal scheme construct attribute node xml class nodal linking constraint edge xml xml links xml scheme cons xml xml construct nest list edge xml xml class linking constraint cons xml xml scheme construct pcdata node xml pcdata class nodal scheme pcdata table xml datasource schema representation terms hdm table shows representation xml datasource schema constructs terms hdm 
xml datasource schemas consist constructs 
element exist nodal construct 
represented scheme 

attribute belonging element nodal linking construct 
terms hdm means attribute represented node representing attribute scheme xml edge linking attribute node owner element scheme xml xml cardinality constraint states instance instance associated instance associated instances 
parent child relationship elements linking construct scheme order list children terms hdm represented edge cardinality constraint states instance associated instances instance associated precisely instance 
text xml represented pcdata construct 
nodal construct scheme pcdata 
schema pcdata construct 
link pcdata construct element treat element nest list construct 
note somewhat di erent xml schema language 
model specific ordering children elements common parent xml datasource schemas captured model 
assumed extents schema constructs sets extra constructs order nest set required respectively represent ordering children nodes parent nodes parent child relationships ordering significant 
fact iql inherently list nest list construct 
th child parent node specified means query specifying corresponding nest list requested node th item iql result list 
modelling language defined terms hdm api automed model definition repository set primitive transformations automatically available transformation schemas defined language 
xml datasource schema definition language consists di erent constructs element attribute nest list pcdata 
available transformations xml datasource schemas shown table 
lowerbound upperbound parameters extend contract transformations queries partially specify extent construct inserted removed 
insert primitive transformations schema query schema lowerbound upperbound schema query schema lowerbound upperbound schema query schema schema parent child position query schema parent child position lowerbound upperbound remove primitive transformations schema query schema lowerbound upperbound schema query schema lowerbound upperbound schema query schema schema parent child query schema parent child position lowerbound upperbound rename primitive transformations schema newname schema newname schema position table xml primitive transformations xml datasource schemas similar dataguides 
benefit having dataguide threefold define data structure help users understand structure database form queries help query processor devise cient query plans computing query results :10.1.1.41.3258
xml datasource schema fulfills aims 
main reason creating new schema definition language simplicity dataguides oem graphs xml datasource schemas trees 
means easy parse traverse manipulate 
detailed comparison xml datasource schemas dataguides section 
problem dealing xml datasource schema multiple xml elements name 
problem amplified dealing multiple files case 
resolve ambiguities new unique identifiers assignment technique implemented 
xml datasource schemas assignment technique count name datasource schema defined automed repository count counter incremented time encountered depth traversal schema 
attributes identified 
author root book lastname firstname publisher year title pendulum vintage eco author book lastname firstname publisher year title name rose vintage eco author root book lastname firstname publisher year title pendulum vintage eco book publisher year title name rose vintage author root book lastname firstname publisher year title pcdata di erent xml files conforming xml datasource schema 
order capture node identity xml data similar technique unique identifiers nodes form count instance instance counter incremented time new instance corresponding schema element encountered 
xml datasource schema vs dataguides concept xml datasource schema similar dataguides 
benefit having dataguide threefold define structure data enable users understand structure database form meaningful queries help query processor devise cient query plans computing query results :10.1.1.41.3258
looking aims see xml datasource schema fulfills 
main reason creating new schema definition language simplicity dataguides oem graphs xml datasource schemas xml trees 
means easy parse traverse manipulate 
di erence types schemas source dataguides xml datasource schema 
hand types schemas may correspond data sources 
example sources xml datasource schema shown upper right corner 
di erence xml datasource schemas dataguides way handle ordering child elements 
authors define problem suggest di erent approaches 
xml datasource schema techniques try solve ordering problem 
reason xml datasource schema single files contrary dataguides 
course single files issue element having child elements di erent ordering di erent instances 
consider case case need try find best ordering possible 
fact element specific policy children ordering means isn reason try enforce 
agrees xml schema specification enforces strict ordering policy 
thing probably added algorithm producing xml datasource schema ability preserve file ordering policy presence optional elements 
consider example shows possible scenario file ordering policy element optional 
algorithm changed create schema course easily detected file xml schema 
topic discussed section 
framework components main aim research develop semi automatic methods generating schema transformation pathways shown 
includes aspects matching individual elements known schema matching example data mining techniques semantic mappings ontologies :10.1.1.16.700
approaches automatically generate fragments automed transformation pathways see example 
graph restructuring applied restructure heterogeneous xml datasource schemas uniform structure 
semantic equivalences schema constructs identified schema matching framework integrates data source schemas transforming respective union schema see 
schema transformation process accomplished algorithm automatically creates transformation pathway data source schema corresponding union schema 
algorithm described section restructuring xml datasource schemas 
sources integrated virtual global schema querying data sources described section materializing data data sources 
view materialization algorithm described section 
schema transformation algorithm schema transformation algorithm applied ways top global schema schemas data sources transformed global schema regardless loss information bottom global schema data data sources preserved 
approaches create transformation pathways produce intermediate schemas identical structure 
schemas automatically transformed union schemas including id transformation pathways 
transformation pathway gs produced ways automatically append semantics semi automatically case queries supplied transformations specify integration policy need supplied user 
append semantics mean lists containing extents constructs gs created appending corresponding constructs 
turn 
xml data sources integrated di erent order extent construct gs contain instances ordering di erent 
top approach consider setting global schema gs data source schemas need conformed necessarily preserving information capacity 
algorithm works phases 
growing phase global schema gs traversed construct data source schema inserted 
shrinking phase schema traversed construct global schema removed 
phases represent fact source schemas augmented constructs global schema reduced removing redundant constructs 
removals occur phase 
order reduce cost traversal schemas necessary removal detected phase cheaper issue transformation stage detect second phase 
algorithm transform xml datasource schema structure xml datasource schema described follows 
algorithm considers element equivalent element element name 
specified algorithm assumes element names unique 
discuss shortly necessary extensions cater cases hold 
growing phase consider element depth order 

exist search attributes find name name attribute add extent add edge element equivalent owner insert attributes schema attributes newly inserted element add extend transformations depending possible describe extent attribute rest constructs delete situation illustrated case 
ii 
insert extend transformation 
find equivalent element parent add edge extend transformation 
insert attributes add extend transformations depending possible describe extent attribute rest constructs case 
linked pcdata construct contain pcdata construct insert extend transformation 
ii 
insert edge pcdata construct 
transformation add inserted add transformation pcdata construct application algorithm 
case transformation extend 

exists parent parent case attributes contain insert add extend transformations depending possible describe extents constructs 
linked pcdata construct pcdata construct application algorithm add edge pcdata construct extend edge 

exists parent parent insert edge ep ep equivalent element parent insertion add extend transformation depending path ep algorithm finds shortest path ep includes parent child edges transformation add extend 
explain suppose path contains point edge element parent element may case data source instances instances children 
means migrating data data source schema data lost specifically instances children 
remedy extend transformation issued lower bound upper bound query 
lower bound query retrieves actual data data source losing data problem just described 
upper bound query retrieves data lower bound query retrieves generates new instances unique ids needed order preserve instances lower bound query able 
behavior may desired user option telling algorithm just upper bound query cases 
case illustrates situation edge ep inserted add transformation cases inserted extend transformation 
case particular represents edge flip 
shrinking phase traverse remove constructs transformation delete contract depending possible describe extent construct remaining constructs schema respectively 
case case case case case case example cases schema transformation algorithm 
algorithm assumes element names unique 
general may case may multiple occurrences element name single occurrence multiple occurrences element name single occurrence multiple occurrences element name case suppose elements employees employees employees single element employees 
algorithm needs generate query constructs extent single element combining extents elements case suppose single element employees elements employees employees employees 
algorithm needs choice elements migrate extent employees 
heuristic applied favours paths fewest extend steps ii shortest paths 
case suppose elements employees employees employees elements employees employees employees 
combination solutions needs applied 
case oid upperbound upperbound case oid upperbound oid upperbound oid upperbound upperbound case oid upperbound case upperbound upperbound oid upperbound case upperbound case upperbound table transformations 
bottom approach approach global schema gs produced automatically source schemas loss information 
order integrate data sources slightly di erent version schema transformation algorithm applied data source schemas pairwise fashion order derive union compatible schema 
data source schemas ls transformed intermediate schemas structure 
union schemas produced id transformations 
start intermediate schema data source schema ls schema transformation algorithm employed ls see annotation algorithm augments constructs ls contain 
restructures ls match structure augmenting constructs contain 
result transformed ls transformed process performed ls resulting creation annotation 
algorithm applied resulting creation time constructs contain annotation 
remaining intermediate schemas generated manner produce schema schema transformation algorithm employed ls resulting creation intermediate schemas extended constructs ls contain 
automatically generate union schemas id transformations global schema applying append semantics 
bottom integration data sources ls ls ls ls 
id id id global schema xml datasource schema integration shown 
querying xml files generation transformation pathways top bottom integration queries posed global schema evaluated 
query sent automed query engine processed query processor responsible reformulating input query queries suitable data sources 
accomplished reverse transformation pathways global schema data source schemas 
time delete transformation encountered query processor replaces occurrences deleted scheme query supplied delete transformation 
result original query turned query multiple branches suitable data source see 
note moment querying xml files performed dom traversal 
plans include xpath xquery support 
automed query engine wrapper architecture displayed 
classes classes providing implementation classes implement remaining methods 
factories deal model specific aspects primary keys relational databases 
class contains validating switch 
parsing xml file object attached performed consulting dtd xml schema file 
number switches switch collapsing whitespace added 
suggests architecture extensible wrappers new data source models 
view materialization strategy creation transformation pathways data source schemas global schema exists direct connection data residing data sources gs transformation pathways queries contain 
framework provides algorithm materialize gs new xml file 
algorithm traverses gs depth fashion obtains necessary data evaluating individual schema constructs gs global queries 
issue arises process determine correct parent child relationships resulting xml file precisely reflects integration semantics 
algorithm uses edge constructs schema instance level unique ids purpose 
materializing schema element ep say algorithm retrieves edge schema constructs ep parent node 
retrieves ls ls ls pc data pc data pc data pc data pc data pc data id pc data pc data pc data pc data pc data pc data pc data pc data pc data pc data pc data pc data pc data pc data id extend constructs schemas extend constructs schemas extend constructs schemas gs gs gs gs gs gs pc data gs gs gs pc data bottom integration data sources xml file evaluator xml wrapper xml file xml wrapper xml wrapper factory fragment processor query processor query result query engine automed wrapper automed wrapper factory data source wrapper wrapper factory automed query engine wrapper architecture extent constructs turn inserts children instances appropriate parent instances ep indicated instance level unique ids 
related lot research ort concentrated solving issues concerning xml connectivity models mainly relational model 
framework aims creating complete solution integration xml data focusing finding xml specific solutions 
schema matching problem studied relational database setting 
seminal schema matching focusing relational databases outlining general principles problem 
survey focused xml setting :10.1.1.16.700
schema authors provide semantics schema elements providing mappings elements schemas global ontology 
mappings query reformulation produce data source specific queries 
ontology query reformulation avoiding need global schema 
similar approaches ones described :10.1.1.19.6308
major problem approaches approaches category source mapped elements user knowing schema know elements 
concerning schema integration transforms dtd specifications source documents inner conceptual representation heuristics capture semantics 
done semi automatically domain experts augment conceptual schema semantics 
global dtd expressed tree similar global ontology 
connection dtd dtds data sources path mappings path nodes source dtd mapped path dtd 
query rewriting employed query sources 
applies schema matching techniques input dtds order create integrated dtd sources dtds 
framework technical report approaches schema integration problem graph restructuring purely xml solution 
furthermore approach allows multiple types schema matching methods ontologies provision semantics form rdf data mining serve input schema integration algorithm 
context xml views xml specific tool active views advanced features active rules view updates semi automatic user program creation view high level language 
defines views programmatically ql 
xyleme ers automated view creation tag dtd path mappings system exploits mappings stored system create view user specifies dtd 
similar approach followed 
straightforward approach xml data integration xquery 
problem approach automation user programmatically define view just defining schema 
mix follow approach query language subset xquery language 
knowledge approach considers xml specific problem ordering policy materializing views multiple sources 
views created appending elements parent list children 
silkroute implements xml view materialization approach supports ordering input relational data ordered order sql clause results prior materialization 
applies provides pure xml middleware top object relational database 
term pure users need know xml technologies create query views 
concluding remarks report framework integration xml data automed heterogeneous data integration system 
assuming schema matching process occurred identified equivalent individual schema constructs schema transformation view materialization algorithms succeed integrating materializing xml data sources automatically 
algorithms simple schema definition language xml data technique assigning unique ids schema instance level elements developed specifically purpose xml data integration 
novelty algorithms lies xml specific graph restructuring techniques applied xml schemas 
extend schema transformation algorithm cater cases multiple occurrences element name xml datasource schema discussed section 
note schema transformation algorithm applied peer peer setting 
suppose peer needs query xml data stored peer consider peer xml datasource schema needs transformed xml datasource schema peer application schema transformation algorithm query data needs schema automed query evaluator treat schema global schema schema local schema 
evolution applications changing performance requirements may cause schema xml data source change 
automed project research focused schema evolution problem context virtual data integration materialized data integration 
investigate application general solutions specifically case xml data 
main advantage automed view approach context pathways reversible schema transformations 
enables development algorithms update transformation pathways global schema having regenerate data source schemas modified 
algorithms fully automatic information content data source schema contracts remains require domain knowledge human intervention information content expands 
materialization algorithm opens issues 
problem respecting data source schemas constraints creating integrated xml file 
exploit constraints supplied dtd xml schema 
xml file may dtd xml schema authors may exploit full capabilities languages 
constraints exist determine intra schema inter schema relationships 
cases ambiguity global schema constraints supplied 
issue supporting partial re materialization global schema data source schemas evolve 
schema definition language framework xml datasource schema extended capture semantics optional elements 
data source contain optional elements attributes pcdata sections optional data appear xml datasource schema describing data source valid problem appear schema evolution problem 
framework currently assumes data sources single xml files described xml datasource schema 
aim include native xml databases data sources 
setting single data source may consist multiple similar xml files 
algorithm producing xml datasource schema extended handle case 
abiteboul amann cluet eyal milo 
active views electronic commerce 
proc 
vldb pages 
baru gupta papakonstantinou chu 
xml information mediation mix 
proc 
sigmod pages 
berners lee hendler lassila 
semantic web 
scientific american may 
boyd tong 
automed schema integration repository 
proceedings th british national conference databases pages 
springer verlag 
carey florescu ives lu shanmugasundaram shekita subramanian 
publishing object relational data xml 
webdb informal proceedings pages 
cluet 
views large scale xml repository 
vldb journal pages 
fan poulovassilis 
automed metadata data warehousing environments 
proc int 
workshop data warehousing olap new orleans november 
fernandez suciu 
cient evaluation xml middle ware queries 
sigmod conference 
goldman widom :10.1.1.41.3258
dataguides enabling query formulation optimization semistructured databases 
vldb proceedings rd international conference large data bases pages 
goldman widom 
summarizing searching sequential semistructured sources 
technical report march 
halevy etzioni doan ives madhavan mcdowell tatarinov 
crossing structure chasm 
jasper poulovassilis 
processing iql queries migrating data automed toolkit 
technical report college june 
jeong hsu 
view inference heterogeneous xml information integration 
journal intelligent information systems january 
lakshmanan sadri 
xml interoperability 
acm sigmod workshop web databases webdb san diego ca pages june 
larson navathe elmasri 
theory attribute equivalence databases application schema integration 
ieee transactions software engineering april 
davidson 
view maintenance hierarchical semistructured data 
data warehousing knowledge discovery pages 
poulovassilis 
automatic migration wrapping database applications schema transformation approach 
proc 
er lncs pages 
poulovassilis 
uniform approach inter model transformations 
lncs volume pages 
springer verlag june 
poulovassilis 
semantic approach integrating xml structured data sources 
conference advanced information systems engineering pages 
poulovassilis 
schema evolution heterogeneous database architectures schema transformation approach 
caise pages 
poulovassilis 
data integration bi directional schema transformation rules 
th international conference data engineering 
icde march 
popa miller hernandez fagin :10.1.1.19.6308
translating web data 
proc 
vldb pages 
poulovassilis 
automed intermediate query langauge 
technical report college june 
poulovassilis 
general formal framework schema transformation 
data knowledge engineering volume pages 
rahm bernstein :10.1.1.16.700
survey approaches automatic schema matching 
vldb journal 

semantic integration xml heterogeneous data sources 
ideas pages 
ieee computer society july 

transformations relational schemas semantic relationships attributes 
technical report imperial college august 
rodriguez mylopoulos 
semantic approach xml data integration 
er volume lecture notes computer science pages 
springer november 
davidson 
building updatable xml views relational databases 
proceedings brazilian symposium databases 

guide xml specification dtd version 
www org xml report htm aen june 

xml path language xpath 
www org tr xpath november 

xml schema specification 
www org tr xmlschema www org tr xmlschema www org tr xmlschema may 

document object model dom 
www org dom june 

xquery xml query language 
www org tr xquery november 

