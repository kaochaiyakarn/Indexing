developing distributed systems step step uml rt argue case tools provide valuable support presentation analysis models support stepwise development process needed 
particular focus development steps behaviour models support provided case tools 
notions refinement help provide support 
discuss existing refinement calculi task additional high level refinements necessary support important practical development steps 
particular address important issues interface refinement time 

software systems development complex task particular technical applications real time requirements various physical influences considered 
number visual modeling languages developed cope complexity 
business software unified modeling language uml dominating standard field technical applications number specialized tool supported languages quite successive room statemate matlab sd 
currently uml profile scheduling performance time standardized object management group omg influenced concepts room 
profile commonly known name uml rt 
address stepwise development technical time critical software systems notations uml rt 
visual modeling languages especially uml supported numerous commercial case tools today 
due participation case tool vendors standardization process expected uml rt 
current case tools strengths research supported dfg project intime 
robert institut informatik technische universit nchen nchen germany email robert tum de presentation analysis models 
structured development process mainly provided definition views separation concerns 
sufficient structure stepwise development complex systems need guidance change model development step destroying earlier established desired properties may rely 
case tools provide mechanisms check result change syntactical consistency take care semantics models 
methodological support needed development steps achieved notions refinement precise semantics modeling techniques 
refinement approaches active research field academia 
poorly industrial practice far 
reason approaches designed popular modeling languages 
approaches focus fine grained isolated refinement steps removing adding single transition statechart 
refinement principles provide firm basis systematic system development need accompanied higher level refinement principles reflect important practical development tasks 
concentrate modeling refinement structure behaviour uml rt capsule diagrams statecharts 
discuss particular refinement principles behavioural interface refinement system broken manageable components connected defined interfaces usually interfaces perfect attempt 
reasons include flaws design organizational matters developing component larger systems deadlines project may impossible wait interfaces neighboring components absolutely definite 
allow interfaces developed step step easy refinement principle allows change interface component statechart specifying behaviour 
set easily checkable rules ensure change sensible refinement 

example application scenario behavioral interface refinement incorporating time real time critical issue technical applications dealing time detailed way development hardly allows refinement models 
suggest ignore execution times components long possible 
order simple approach helps introduce time aspects models necessary 
outline section sketch basic ideas development process motivate refinement principles 
section provides overview existing refinement calculi 
high level refinement rules close gap theory practice discussed section 
section contains concluding remarks 

refinement existing approaches notions refinement long tradition theory programming 
notions refinement programs 
number theories developed generalize notion refinement 
underlying theory approaches process algebras 
notions refinement developed include trace refinement failure preorder 
discussion interrelations see 
powerful framework definition refinement calculi stream processing functions focus framework 
allow understand refinement quite simple manner terms logical implication cf 
yield logical basis approach 
interpreting refinement logical implication applied timed specifications approach refining functional timed specifications programs 
different timing models interrelations closely discussed 
behaviour matter refinement structural refinement specifications considered 
investigated field refinement communication principles see 
refinements specifications written different languages discussed 
particular interest approaches apply notions refinement visual modeling techniques especially behaviour modeling 
refinement rules statecharts related formalisms 
refinement calculus mscs developed 
approaches common deal fine grained refinements adding transition statechart 
refinement interfaces allowed restricted manner 
refinement timed specifications considered 
conjunction visual modeling languages open field research 
setting refinement rules provided approaches discussed augmented principles discussed section 
development scenario concentrate structure behaviour modeling uml rt notations capsule diagrams statecharts strongly influenced room method 
noticed uml rt statecharts differ standard uml statecharts introduce syntactical extensions important semantics differs employ asynchronous execution model 
addressed detail section 
motivate refinement principles give sketch simplified development process uses message sequence charts mscs capsule diagrams statecharts 
course ideas fit full scale development process 
starting point development process components system identified capsule diagrams 
interactions explored example application scenarios capsule diagrams mscs 
scenarios serve requirements specifications design algorithm statecharts generated 
generation saves lot information gained mscs need reengineered design system components 
generated models usually complete may application specific 
need refined generalized 
reasons motivations concept interface refinement 
focus refinement generated models detailed design 
recommend steps refinement logical behaviour structure system take precedence 
refinements may carried 
performance analysis may carried earlier suggest incorporate time integral part model late stages development 
incorporating time dependency execution speed models completes design process 
way design process ends models immediately starting point implementation 

high level refinements important development tasks section discuss important refinement principles play crucial rule practical system development 
discussed section structural behavioural refinement need combined 
section principle refine syn 
mapping scenarios tactic interface behaviour component 
requires minimum theoretical background developer 
suggested section postpone treatment real time aspects long possible 
eases logical design system requires refinement principle introducing time models discussed section 
give outlook useful refinements section 

behavioural interface refinement behavioural interface refinement allows refine interface component statechart models behaviour 
applications refinement discussed interface refinements may necessary design flaws organizational reasons generalizations interfaces gained application scenarios 
application scenario simplified example taken mechatronics 
upper diagram shows component control provides services env hardware controls 
behaviours components specified statecharts 
details hardware known start development need refine hardware interface subsequent development steps shown lower diagram 
course refined component control preserve behaviour shown env sense 
depends meaning messages transmitted hardware interfaces messages correspond message hardware 
need simple way developer specify interrelation 
consider statecharts components left statechart models behaviour control right behaviour control 
establish refinement relation mapping interaction scenarios 
setting map concrete scenarios ones 
mapping goes opposite direction development process 
see simplifies definition constraints desirable methodological reasons 
mapping easily defined identifying execution paths statecharts start state illustrated 
example scenarios identified black arrows mapped black marked scenario control 
gray arrows show scenarios mapped define total mapping precise define mapping scenarios cases 
cases black paths shown 
matters space abbreviations hw conditions refinement course just define function scenarios necessarily lead sensible refinement 
mapping scenarios shown define refinement relation control 
control refinement control complete execution trace control relates properly execution trace 
coincides common notions refinement system run refined system possible system terms interface definition 
define refinement relation complete traces total mapping traces clarity showed error path system 
course real system mapping complex errors considered 
control traces control defined inductively cases shown map finite scenarios 
get proper inductive definition total mapping need impose conditions scenarios identified refined component scenario defining mapping may prefix 
mapping execution traces ambiguous 
condition known fano condition coding theory 
scenarios provide complete path coverage 
mapping finite scenarios total necessary inductive definition defines total mapping execution traces 
partial mapping leave parts behaviour unconstrained 
clearly coincide refinement 
methodological reasons standard notions refinement imply conditions cases need define function 
definition scenario mapped scenario statechart component 
function ensures behaviour distinguished level distinguished concrete level 
range mapping provides complete path coverage component 
way disallow throw away behaviours shown components subject interface refinement 
refinement omit nondeterministic behaviour component cases 
reduction non determinism performed standard refinement rules 
exclude completely avoid things unnecessarily complicated 
projection mapping unchanged interfaces identity 
ensures causality dependencies actions subject interface refinement preserved note causality dependencies refined interface subject scenarios 
fortunately order changed inductive definition 
image scenario starting initial state start initial state 
image scenario terminal state terminal state 
concrete scenarios need finite 
previous items condition ensures termination preserved component terminates refined component 
scenario non empty scenario scenario mapped 
term causal means events concrete model order counterparts 
applicability practice 
implicit time dependency due synchronous execution glimpse conditions introduced extensive 
skip methodological justifications relatively short need total function concrete scenarios ensure complete path coverage domain image identity unchanged parts model 
conditions understandable deep mathematical knowledge checked fully automatically tool support 
gained experience large industrial case studies approach confident scales real life applications 
noted literature simpler refinement rules interface refinement 
introduce mappings input output messages refined component 
convenient complex cases example message sensor mean ok nok depending state interaction 
approach different situations statechart verified refines shown 
components moderate size possible specify refined scenarios independently generate statechart model refined component algorithm 

untimed timed models introducing time aspects late eases development earlier phases 
developing appropriate logical design treating real time requirements complex issues tasks supported best suited modeling environments 
statecharts proved adequacy levels abstraction 
question addressed underlying semantics appropriate logical design time dependent models integrated 
consider time dependent models 
models discuss abstractions desirable course logical design 
semantics timed models time dependent models looking semantics easy especially allows easily analyze time aspects model 
crucial decision choice appropriate execution model 
analysis time dependent models need execution model allows predict execution time actions component 
quite useful widely approach synchronize execution components system global clock ticks time clock ticks component performs step transition execution 
synchronization mechanism refer approach synchronous execution model 
refined variant model components driven ticks local clocks clocks synchronized respect global clock 
allows model different execution speeds system 
synchronous execution models widely industrial practice example case tools matlab stateflow sd popular implementation platforms programmable logical controls visual programming language higraph uses synchronization model described 
criticized synchronous execution models inappropriate development distributed systems 
major reason express delays communication 
matters discussed agree opinion sense inadequate development steps early design system 
quite suited analysis implementation oriented models ease prediction execution times 
synchronous execution models typically combined unbuffered communication bounded buffering 
restriction interleaving clock ticks enables analysis models fully automatic techniques model checking successfully cus case tool 
absence expressing delay communication really disadvantage interested characteristics communication medium model component 
characteristics communication differ widely commonly expressed single semantics 
probably forced quite execution model 
synchronous execution models allow time independent specifications transition taken tick global clock relative execution time computations implicitly specified number transitions 
example twice fast refined 
consequence 
situation easily avoided hard avoid effects general 
especially effects prevent definition simple refinement rules components 
semantics logical design effects shown arising close coupling components synchronous execution avoided asynchronous execution models 
approach time instant component reacts received message left unspecified 
defined reaction happens receipt 
approach abstracts execution times actions successfully development real time systems room method provides timer facilities allow introduce timed behaviour delay timeouts 
concepts adopted standardization process uml profile scheduling performance time 
system development simulation facilities scheduling algorithm underlying room virtual machine explicitly defined order keep modeling language independent platform dependent implementations 
asynchronous execution models facilitate definition refinement calculi 
analysis real time properties requires assumptions scheduling actions asynchronous execution complicates automatic reasoning techniques model checking suggest synchronous asynchronous execution development process 
introducing time refinement provide appropriate semantics levels abstraction propose asynchronous model development switch synchronous model 
step quite easily understood sensible refinement step restriction timed nondeterminism sense time instant transition taken left unspecified refinement fixed 
easily formulated asynchronous execution formulated logical model time ticks trace asynchronous model corresponds set traces switching asynchronous synchronous execution complies classical notion refinement formalized simple mathematical basis 
complies practical development process room requires develop scheduler course implementing models 
reason surprising step treated literature 
refinements expect refinement principles discussed quite useful practice 
form step development refinement calculus development time critical distributed systems 
principles far complete gain experience real life applications need tried approaches 
intend formalize principle logical framework focus order give formal proof coincides common notions refinement 
principles need accompanied rules 
switch asynchronous synchronous execution model mainly incorporates time terms speed models 
necessary support development process refinement rules allow adaption timers models 
interesting issue treatment partial transition relations statecharts 
case tools provide default completion typically ignoring messages approaches define closure allowing arbitrary behaviour nicely combines refinement principles 
issue practical interest abstraction communication paths system stages development 

argued case tools industrial practice today provide valuable support presentation analysis models lot improvement needed support consistent development steps 
notions refinement suited cope challenge 
shown exist huge number refinement principles originating theoretical approaches provide firm basis need accompanied additional refinement principles support development steps important practice 
particular principles interface refinement time models 
principles simple mathematical concepts compatible industrial case synchronous asynchronous communication treated see section 
tools implementation platforms 
limited notations uml rt 
hope notions refinement taken case tools support methodologically founded development process 
acknowledgments author owes kr ger bernhard rumpe michael van der intensive discussions refinement rules 
heiko wolfgang read previous drafts text provided valuable comments 
software higraph 
siemens 
sd users guide 
engineering tools stuttgart 
guernic 
synchrony asynchrony 
baeten editors concur concurrency theory volume pages eindhoven netherlands aug 
springer verlag lncs 
braun sch tz 
consistent integration formal methods 
proc 
th intl 
conf tools algorithms construction analysis systems tacas volume 
springer verlag lncs 
broy 
compositional refinement interactive systems 
digital systems research center src 
broy 
inter action refinement easy way 
program design calculi series computer system sciences 
vol 

broy 
refinement time 
arts 
appear 
broy fuchs weber 
design distributed systems focus 
technical report sfb technische universit nchen 
broy st len 
focus system development 
book manuscript january 
cleaveland smolka 
process algebra 
encyclopedia electrical engineering 
fischer janssen 
synchronous development asynchronous systems 
montanari sassone editors concur concurrency theory volume pages amsterdam netherlands aug 
springer verlag lncs 
gro rhode 
compositional comparison specifications alternating bit protocol ccs unity algebra transformation systems 
araki taguchi editors st international workshop integrated formal methods ifm pages york uk jun 
springer verlag 
harel 
visual formalisms 
communications acm 
harel naamad sherman trakhtenbrot 
statemate working environment development complex reactive systems 
ieee transactions software engineering 
hennessy 
algebraic theory processes 
mit press cambridge mass 
hoare 
communicating sequential processes 
prentice hall 
huber sch tz 
traffic lights autofocus case study 
international conference application concurrency system design pages 
ieee computer society 
itu 
message sequence chart msc 
itu geneva 
klein 
durch und 
phd thesis technische universit nchen 
kr ger 
distributed system design message sequence charts 
phd thesis technische nchen 
kr ger grosu scholz broy 
mscs statecharts 
proceedings 
lyons 
uml real time overview 
april 
www 
ca technical html 
main 
trace failure testing equivalences communicating processes 
int 
journal programming 

behaviour specifications semantics equivalence refinement 
submitted publication 
omg 
response omg rfp scheduling performance time 
www omg org meetings schedule uml profile scheduling rfp html 
omg 
uml tm profile scheduling performance time request proposal 
www omg 
org meetings schedule uml profile scheduling rfp html 
rumpe 
refinement pipe architectures 
wing woodcock davies editors fm formal methods proceedings world congress formal methods development computing system 
lncs pages 
springer 
rational 
uml notation guide version 
www rational com uml resources documentation june 
rational 
uml semantics version 
www rational com uml resources documentation june 
rational 
uml summary version 
www rational com uml resources documentation june 
rumpe 
formale des systeme 
phd thesis technische nchen 
sch tz 
ein von zu systemen 
phd thesis technische nchen 
jifeng 
semantics refinement real time systems 
theoretical computer science 
scholz 
design reactive systems distributed implementation statecharts 
phd thesis technische nchen 
selic ward 
real time object oriented modeling 
john wiley sons 
selic rumbaugh 
uml modeling complex real time systems 
available www com uml april 
mathworks stateflow 
www 
mathworks com products stateflow 
mathworks matlab 
www 
mathworks com products matlab 
pretschner 
specification test sequence generation propositional logic 
software testing verification reliability special issue specification testing 
appear 
