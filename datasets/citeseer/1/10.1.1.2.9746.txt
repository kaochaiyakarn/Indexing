analysis diversity genetic programming steven matt gustafson thesis submitted university nottingham degree doctor philosophy february contents list figures list tables viii ix publications produced analysis diversity research perspective contributions overview search evolutionary algorithms genetic programming problem solving search evolutionary algorithms genetic programming application domains scalability fitness landscape metaphors search summary issues genetic programming diversity measures methods effects population diversity ii contents iii role population summary analysis diversity measures diversity measures empirical analysis diversity measures analysis results discussion diversity measures summary genetic lineages metaphor hill climbing genetic lineages experimental study lineage selection results lineage selection discussion metaphor hill climbing sampling unique structures behaviours analysis results discussion sampling summary effects population diversity code growth problem difficulty code growth problem difficulty regression problems increased difficulty experimental investigation binomial random polynomial results discussion causal model summary diversity survivability niche island models previous distributed evolution survivability diverse genetic outliers survivability ant parity regression domains contents iv niche island models genetic programming summary contributions remarks problem specific directions bibliography list figures fe trail artificial ant problem 
truth table parity problem 
quartic rastrigin functions 
example entropy distributions 
example population visualisations circular lattice 
examples ranked correlation scatter plots fitness diversity 
fitness vs generation ant parity quartic rastrigin experiments 
average number nodes vs generation ant parity quartic rastrigin experiments 
average depth vs generation ant parity quartic rastrigin experiments 
phenotype diversity vs generation ant parity quartic rastrigin experiments 
average entropy vs generation ant parity quartic rastrigin experiments 
edit distance diversity vs generation ant parity quartic rastrigin experiments 
edit distance diversity vs generation ant parity quartic rastrigin experiments 
genotype diversity vs generation ant parity quartic rastrigin experiments 
pseudo isomorph diversity vs generation ant parity quartic rastrigin experiments 
correlation coefficient vs generation ant parity quartic rastrigin experiments 
fitness vs entropy ant parity quartic rastrigin experiments 
fitness vs edit distance diversity ant parity quartic rastrigin experiments 
list figures vi fitness vs edit distance diversity vs generation ant parity quartic rastrigin experiments 
example genetic lineage loss recombination 
example lineage selection 
average mean average best fitness vs generation control lineage selection experiments 
average diversity measures size vs generation control lineage selection experiments 
edit distance successive best fit individuals control lineage selection experiments 
generation best fitness ant experiments 
average size individual generation best fitness parity experiments 
behaviour definition example regression domain standard fitness calculation mean squared error behaviour definition 
ant results cumulative sampling unique structures behaviours 
parity results cumulative sampling unique structures behaviours 
regression results cumulative sampling unique structures behaviours 
confidence bars average cumulative structure behaviour sampling distributions 
binomial random polynomial functions 
discretized final population results binomial random polynomial experiments 
size vs fitness generation best fitness vs fitness generation best fitness vs depth binomial experiments 
size vs fitness generation best fitness vs fitness generation best fitness vs depth random polynomial experiments 
generation vs 
fitness depth nodes diversity entropy binomial experiments 
generation vs 
fitness depth nodes diversity entropy random polynomial experiments 
spearman correlation size fitness edit distance entropy binomial experiments 
spearman correlation size fitness edit distance entropy random polynomial experiments 
hypothesis causal relationship code growth instance difficulty 
list figures vii model difficulty growth experiment results 
division phenotype genotype spaces define genetic outliers 
target binary tree structure tree string problem 
pareto front points visited tree string experiments 
average number population number times selected survivability outliers liers un fit tree string experiments 
outliers defined fitness similarity tuple better standard deviations 
average number population number times selected survivability outliers liers un fit tree string experiments better equivalent standard deviation definition outliers 
average number population number times selected survivability outliers liers un fit tree string experiments better standard deviation definition outliers 
average number population number times selected survivability outliers liers un fit tree string experiments better equivalent standard deviation definition outliers 
average number population number times selected survivability outliers liers un fit ant experiments 
average number population number times selected survivability outliers liers un fit parity experiments 
average number population number times selected survivability outliers liers un fit binomial experiments 
possible views outliers genotype space 
list tables experiment problem parameters ant parity quartic rastrigin diversity measure experiments 
spearman correlation coefficients ant quartic rastrigin parity experiments 
experiment problem parameters lineage selection experiments 
statistics lineage selection experiments 
experiment problem parameters binomial random polynomial experiments 
experiment problem parameters tree string experiments 
tree string outlier definition variations respective figures 
experiment problem parameters ant parity binomial outlier experiments 
viii genetic programming metaheuristic search method uses population variable length computer programs search strategy biological evolution 
idea automatic programming long goal artificial intelligence genetic programming presents intuitive method automatically evolving programs 
method potential drawbacks 
search procedural representations complex inefficient 
addition variable sized solutions unnecessarily large difficult interpret 
goal thesis understand dynamics genetic programming encourages efficient effective search 
goal research focuses important property genetic programming search population 
population related key aspects genetic programming algorithm 
programme research diversity describe analyse populations effect search 
series empirical investigations carried better understand genetic programming algorithm 
research begins studying relationship diversity search 
effect population diversity metaphor search examined 
followed investigation phenomenon increased solution size problem difficulty 
research concludes examining role diverse individuals particularly ability diverse individ affect search process ways improving genetic programming algorithm 
thesis contributions analysis shows complexity issues diversity relationship diversity fitness genetic programming search process characterised concept genetic lineages sampling structures behaviours causal model varied rates solution size increase new tunable problem demonstrates contribution different population members search island model proposed improve search dissimilar individuals better suited environments 
currently genetic programming applied wide range problems varied con texts 
artificial intelligence operations research results thesis benefit population search methods methods concepts evolution search methods variable length representations 
ix publications produced ph research programme produced publications represented ongoing research degree 
publications research conducted thesis gustafson burke kendall 
preparation 
diversity ability genetic programming 
ieee transactions evolutionary computation 
gustafson burke kendall 
appear 
problem difficulty code growth genetic programming 
genetic programming evolvable machines 
gustafson burke kendall 

sampling unique structures behaviours genetic programming 
proceedings european conference genetic programming 
pages april coimbra spain 
springer 
burke gustafson kendall 

diversity genetic programming analysis measures correlation fitness 
ieee transactions evolutionary computation 
pp 
ieee press 
burke gustafson kendall 

increasing diversity genetic programming beneficial 
analysis effects fitness 
proceedings congress evolutionary computation pages canberra australia 
ieee press 
burke gustafson kendall 

advanced population diversity measures genetic programming 
parallel problem solving nature 
volume lncs pages granada spain 
springer 
burke gustafson kendall 

survey analysis diversity measures genetic programming 
proceedings genetic evolutionary computation conference pages new york 
morgan kaufmann publishers 
acknowledgments academic supervisors edmund burke graham kendall giving opportunity study university nottingham 
am grateful guidance afforded nottingham 
particular research greatly benefited chance attend academic conferences 
people evolutionary algorithm genetic programming community provided invaluable discussions 
especially bill hart bill langdon sean luke maarten nic mcphee una may reilly lee spector 
research benefited collaborations ek rt leonardo 
particular having open door discuss listen help research 
greatly appreciate time dad gave reviewing drafts papers thesis 
acknowledge support family united states especially parents david karen 
moving abroad setting home new country enjoyable wife kristin 
constant support understanding 
xi kristin parents chapter analysis diversity thesis examines issue diversity genetic programming 
genetic programming evolutionary methodology fields machine learning artificial intelligence uses pop ulation solutions guide search 
population diversity important issue 
thesis describes series carefully planned designed experiments provide detailed understanding genetic programming diversity diversity related issues 
genetic programming followed contributions overview thesis 
genetic programming uses population variable length computer programs metaphor evolution guide search cramer koza 
search framework problem ing alternative solutions evaluated trial error fashion 
goal search find ordering alternative solutions leads solutions 
enumeration entire space alternative solutions possible heuristics genetic programming rules thumb guide search alternative solutions 
genetic programming belongs class algorithms metaphor natural selection darwin determine ordering alternative solutions search 
genetic programming simple powerful technique applied wide range problems combinatorial optimisation automatic programming model induction see banzhaf general genetic programming 
direct encoding solutions variable length computer programs allows genetic programming provide solu tions evaluated examined understand internal workings 
way genetic programming solution represent single value evaluation optimisation 
analysis diversity iteratively built algorithm automatic programming data driven model useful data mining knowledge discovery model induction 
genetic programming applied successfully cases merits scientific discipline focus thesis inner workings algorithm 
issues problem solving motivate genetic programming represent limits applicability 
increase computer power wide range applications ability collect enormous amounts scientific data require computational framework genetic programming capable automatically generating solutions representation powerful understandable 
genetic programming algorithm high computational cost run difficulty scaling larger harder problem instances uses complex representation limit 
heart issues population alternative solutions methods generate new alternatives 
candidate alternative solution evaluated means fitness function allows compared previously evaluated solutions 
stochastic selection method chooses better solutions population undergo stochastic variations produce new alternatives 
way population responsible guiding parallel search solution space 
evaluation population member increas ingly computationally expensive designing effective process variation direct complex encoding solutions intuitive 
amount data produced population search enormous space possible programs prediction analysis algorithm behaviour difficult 
research perspective focus thesis understanding genetic programming population ways measured role plays guiding search process 
specifically diversity population analysed uncover key features relationships search successful 
process developing better understanding genetic programming clearer description dynamics algorithm emerges facilitate motivate enhancements 
exist ing theoretical models evolutionary algorithms limited applicability due complexity 
majority theoretical derived experimentation 
approach taken thesis careful design collection analysis experimental results 
contributions thesis contributions 
analysis diversity 
survey analysis diversity genetic programming demonstrates complexity hind issues diversity measures methods relationship diversity fitness 

analysis genetic lineages shows search metaphor hill climbing explain improve genetic programming search 
sampling unique structures behaviours genetic programming demonstrates low sampling complex behaviours unique structures large size 

causal model developed links increased rates code growth non decreased se lection pressure increased similarity population 
decreased selection pres sure occurs fitness diversity lost increased similarity population result faster convergence non decreased selection pressure 

analysis tree string problem shows inability produce offspring dissimilar fit individuals similar equally fit individuals 

model proposed identifies dissimilar individuals moves new islands contribute search effectively 
overview chapter introduces search heuristics evolutionary algorithms genetic programming 
depth examination genetic programming follows 
algorithm representation operators described common benchmark problem domains 
im portant research issues metaphor genetic programming search discussed 
chapter discusses major issues evaluated thesis 
representation possible definitions diversity examined highlight complexity diversity mea sures methods 
secondly effects diversity aspects search process em demonstrate wide reaching issue population diversity 
chapter concludes discussing role population plays producing new solutions guide search discussed 
chapter begins chapters represent original contributions sis 
measures methods diversity surveyed literature 
common measures 
analysis diversity novel population diversity measures experimental study assess cor relation diversity fitness different stages evolution 
results emphasise contrasting behaviour common measures diversity 
important diver sity measures appear ones capture information relevant processes selection recombination 
chapter develops diversity method genetic lineages 
method lineage selection demonstrate increasing diversity populations may beneficial problems 
results suggest problems benefit suffer hill climbing type search 
hill climbing interrupted lineage selection performance improved worsened 
investigate type search genetic programming performs sampling unique behaviours structures analysed 
results provide clearer characterisation search problem domains 
chapter explores effects diversity aspects search process 
causal relation ship difficulty diversity code growth 
initially results reinforced examining related literature verified simplified model genetic programming 
results indicate increased difficulty leads non decreased selection pressure structurally diverse populations contribute increased rate code growth 
chapter explores role dissimilar individuals population effectiveness mi individuals distributed models 
definitions genetic difference probe relationships new constructed problem 
study looks ability different sub populations produce offspring high survivability 
survey previous methods encourage distributed evolution 
model proposed explicitly identifies dissimilar solutions places environment effective 
chapter states lists contributions summarises problem specific results obtained thesis 
recommendations research follow 
chapter search evolutionary algorithms genetic programming evolutionary algorithms heuristic search techniques broadly defined domain ar intelligence 
problem solving common application artificial intelligence search framework problem solving computers 
evolutionary algorithm im carry search 
chapter describes process search elements required carry search different search strategies 
traditional search described followed common heuristic methods 
evolutionary algorithm described showing ad dresses task problem solving means search 
introducing describing genetic programming chapter concludes discussing important research issues scalability representation 
problem solving search human activity defined form complex problem solving 
problem solving computer program considered instance artificial intelligence task con sists managing information searching solutions shapiro 
representation problem description ideal solution goal search find solution equal close ideal solution 
cases decision making problem solving formulated optimisation problems pardalos resende 
role search method find best solution possible alternatives optimising solution quality 
example problem solving artificial intelligence field automatic programming barr 
computers perform calculations means programs 
designing writing pro grams tedious difficult 
specification desired behaviour program 
search evolutionary algorithms genetic programming desirable program automatically generate solution met spec ification 
normally considered artifact artificial intelligence compilers early form automatic programming allowed programmers write algorithm high level language interpreted compiled level machine code computer processor 
investigating possibility learning machines friedberg designed algorithm able evaluate quality computer pro gram random changes re test improvements 
advances field artificial intelligence automatic programming 
discussion automatic programming see barr 
example problem solving computer programs seen field operational research 
real world problems routinely solved efficiently accurately means com puter programs pardalos resende 
operational research concerned studying methods applications 
methods developed cross disciplinary research operational research artificial intelligence typically considered state art applied algorithms produce solutions everyday decision making 
requirements search carry search means computer program elements problem search strategy defined 
search requires elements nilsson defined problem requiring intelligent complex behaviour solve model problem representation possible solutions goal state defines ideal solution heuristic methods evaluation function rank non goal state solutions transformation operators capable changing existing solution alternative solution strategy searching space possible solutions representation transfor mation operators 
application transformation operator solution creates neighbourhood solutions 
new solutions compared goal state 
knowledge problem available heuristic algorithms define evaluation function allows scoring ranking solutions 
ranking solutions determines solutions neighbourhood better 

search evolutionary algorithms genetic programming search requires items artificial intelligence search research focuses item finding search strategies 
algorithms perform search ability generate evaluate possible solution random search strategy de fined 
random search method repeatedly generates solutions evaluates generates 
random search uses knowledge previously generated solutions typically stops solution meets particular criterion equal goal state having quality threshold 
transformation operators allow solution transformed new solutions de pending number type operators 
way neighbourhood current solution generated 
neighbourhood represents solutions generated application operators current solution 
search strategies control operators size neighbourhood searched solutions selected continue search 
traditional search typically goal state defined operators define search tree 
node tree represents solution successors children defined operators 
strategies defined search tree 
blind search strategies depth breadth search 
breadth search generates successors root node search tree 
gen successors nodes continues solution 
depth search generates single successor root node 
generates successor node continues maximum depth reached 
point backtracks previous root node possible generates successor 
problems large search trees blind search methods inefficient impractical 
particularly true search problem cast decision problem solution exists quality threshold undecidable polynomial time size problem instance 
decision problem complexity class optimisation search problem hard papadimitriou steiglitz 
blind search methods typically knowledge problem domain readily available 
common problems intractably large approximate methods called heuristics typically 
heuristics define rules thumb problem structure way generate feasible solution combinatorial optimisation problem search strategy finds solutions reasonable amount time reeves 
heuristics 
search evolutionary algorithms genetic programming improve search efficiency considering subset possible solutions generating solutions better current solution 
simple heuristic search method hill climbing 
hill climbing steepest descent begins randomly generated solution continues produce neighbours better solution 
new solution current solution algorithm begins producing neighbours 
improving solutions current neighbourhood method 
current solution may may global optimum case 
stochastic hill climbing variant hill climbing proceeds way accept neighbours equivalent current solution 
multi start hill climbing method attempts improve performance performing trials runs hill climbing start different random initial solution 
operator heuristic techniques typically results small random change current solution 
type operator called mutation requires little domain knowledge 
neighbours current solution created selecting best method called neighbourhood search 
variable neighbourhood search adaptively increases size neighbourhood improving solution 
simple heuristic search method best 
method generates neighbours solution selects best generates neighbors better solution neighbourhood search returns previous neighbourhood selects second best continues improvements 
beam search similar best remember complete previous neighbourhood 
beam search remembers fraction best solutions previous neighbourhoods return improvements 
methods called local search methods accept improving solutions local neighbourhood current solution 
knowledge domain heuristic evaluation functions defined provide esti mation quality current solution likelihood search continue goal state 
heuristic evaluation functions called cost functions objective functions fit ness functions 
estimated solution quality reported functions called fitness solution 
measure solution quality search strategy additional informa tion guide search 
metaheuristic methods represent search strategies heuristic evaluation functions guide search 
metaheuristics iterative improvement algorithms repeatedly transform solutions selecting better worse new solutions order improve fitness final solution obtained 
metaheuristic methods assume heuristic eval uation function representation operators combine lead search path current solution better hopefully goal state global optimum 
operators induce small changes solution result small changes solution qual ity fitness landscape said smooth 
term strong causality describes property 
search evolutionary algorithms genetic programming small changes solution result small changes fitness 
property apply large changes solutions 
strong causality indicates correlation size solution transformation size change resulting solution quality 
weak causality describes case little correlation size changes solutions fitness values 
fitness landscapes suggested wright studied man family correlated landscapes 
landscape smooth local search methods get stuck sub optimal solutions 
order avoid sub optimal solutions metaheuristics variety techniques robust non smooth rough fitness landscapes 
metaheuristic search strategies allow non improving solutions selected search 
popular methods simulated annealing kirkpatrick tabu search glover glover laguna :10.1.1.26.7748
simulated similar hill climbing method begins random current solution 
simulated annealing parameter temperature defines likelihood worse scoring solu tion accepted 
time temperature reduced allowing acceptance worse solutions smaller probability 
tabu search generates neighbourhood current solution considers new solu tions list previously visited ones tabu list 
search temporarily banned re visiting solutions preventing cycling 
way improving solutions tabu list algorithm visit non improving solutions 
tabu search contain explicit method directing search similar dissimilar new solutions called intensification diversification 
simulated annealing tabu search applied wide range real world problems pardalos resende glover 
class metaheuristic search strategies theory natural selection darwin 
described section 
evolutionary algorithms darwinian evolution uses principles competition inheritance variation pop ulation 
concepts define class iterative improvement metaheuristic search methods 
methods evolutionary algorithms population solutions genetic oper carry search 
specifically evolutionary algorithm employs items population candidate solutions called individuals fitness function evaluates assigns individual score fitness value 
search evolutionary algorithms genetic programming transformation operators produce offspring individuals parent individuals imple concept inheritance stochastic variation stochastic selection method selecting individuals better fitness produce spring 
population time evolutionary algorithm applies variation operators population 
variations applied selection method individuals compete selected fitness 
population time transformation operators provide new solutions means variations existing ones 
evolutionary algorithms operators usually consist reproduction recombination mutation operators 
population variation operators competition provide strategy searching space solutions 
solutions reachable operators visited evolutionary process run 
additionally population search searching single solution hill climbing allows parallel search different areas search space representing alternative representations similar fitness 
evolutionary algorithms categorised main branches mainly distinguish able commonly representation operators genetic algorithms bit string parent crossover evolutionary strategies real valued vector gaussian mutation evo programming employs finite state machine mutation operators genetic program ming uses computer program executable structure parent crossover 
classifica tions represent common initial implementations 
implementations components different branches classifications accurate 
genetic algorithm originally represented bit strings fixed length genome 
term genome refers bit string 
early fraser reprinted fogel bremermann provided foundations genetic algorithms holland dejong 
bit string requires mapping representation evaluated assigned fitness heuristic evaluation function 
genetic algorithm traditionally relied various forms crossover main operator 
instance point crossover bit strings bit positions indexed point chosen bit strings exchange portions string delineated point crossover 

search evolutionary algorithms genetic programming evolutionary strategies traditionally uses direct encoding candidate solution typically vector real numbers rechenberg ck 
method began population consisting single individual 
offspring produced gaussian mutation operator new population better parent 
population evolutionary strategies uses main selection schemes comma plus strategy 
version offspring replace parents 
version parents offspring compete new set parents 
evolutionary programming originally iterative adaptation finite state machines fogel 
finite state machines evaluated assigned fitness 
mutation operator usually means variation 
sense population evolutionary programming ecosystem species individual different species 
evolutionary algorithm framework specialised methods mod els cohoon coevolutionary models potter de jong memetic models moscato exist blend evolutionary algorithms local search heuristic methods 
hybrid algorithms typically combine global search strategies local strategies representing state art optimisation davis pardalos resende glover 
hybrids allow general metaheuristic search strategy specialised specific applications 
davis points objectives generalisation specialisation conflicting increasing performance method specific domain method perform worse domains 
free lunch theorems wolpert macready emphasised performance trade explicitly stating average performance methods problems equal 
prevent algorithms better particular classes problems 
genetic programming evolutionary algorithm represents solutions programs 
remainder thesis focus specifically canonical form method represen tation 
genetic programming genetic programming evolutionary algorithm uses procedural functional representation 
section describes representation specific algorithm components canonical version algorithm 
foundations genetic programming ini tially followed discussion algorithm description common applications 
lastly important research issues metaphors genetic programming search described 
foundations 
search evolutionary algorithms genetic programming genetic programming popular search technique early due koza 
angeline traced historical foundations genetic programming back friedberg friedberg dunham north iterative random changes computer programs induced better programs 
learning machines proposed earlier tur ing automated process similar evolution combination human interaction thought possible way programs acquire intelligent behaviour 
form ge programming today closely related done cramer tree representation programs conjunction subtree crossover evolve tion function 
employed partial credit assignment function activity input dependence iterative constructs issues traditionally considered canonical genetic programming 
background foundational research genetic programming evolutionary algorithms banzhaf fogel ck koza 
modern approaches genetic programming evolutionary algorithms de scribed langdon poli ck koza 
approaches discussed chapters 
theoretical foundations genetic programming summarised langdon poli 
theories evolutionary algorithms representations solution space called ata describe various components behaviours algorithm 
holland notion schema genetic algorithms extended koza include syntax trees 
syntax trees common representation genetic programming schema intended rep resent trees common subtrees 
case subtrees represent functional code combined time create better programs altenberg rosca ballard 
reilly extended idea schema genetic programming trees allow subtrees contain wildcards giving flexible definition schema 
rosca defined similar schema rooted trees wildcards allow schema represent templates 
theories parse tree schemata complex 
mainly due ran dom decisions algorithm requiring modelling stochastic events 
clear schemata selected combined predictive way 
fit ness resulting combination schemata high fitness unpredictable 
lessen importance development theoretical models produced practical results 
rooted tree schema rosca provided improved understanding effects popular operators representation poli theo results justify method control growth solution size 
langdon poli poli mcphee describe developments exact schema theories ge programming complete exact description representation operators 

search evolutionary algorithms genetic programming noted langdon poli approach costly compute sense simu actual execution algorithm complexities degrees freedom 
know exact schemata generated compute enormous number probabilities events results execute algorithm 
genetic programming algorithm genetic programming adopts similar search strategy genetic algorithm uses program representation special operators 
representation genetic programming unique 
basic algorithm follows 
initialise population solutions 
assign fitness population member 
stopping criterion met 
produce new individuals operators existing population 
place new individuals population 
assign fitness population member test stopping criterion 
return best fitness rest section describes components algorithm detail representation 
representation solutions original formulations genetic programming considered lisp expressions candidate 
lisp programming language popular artificial intelligence research designed symbolic processing see shapiro discussion 
expressions symbolic expressions basic objects lisp naturally represented syntax trees leaves represent terminals variables constants nodes represent functions 
arity node number arguments expects receive 
genetic programming come typing issues related passing arguments function values functions standard strongly typed system montana variables functions type 
grammar genetic programming systems multiple types easily require defined grammar specialised operators 
ryan 

search evolutionary algorithms genetic programming evaluation syntax tree performed depth walk tree 
evaluating node arguments evaluated 
may think syntax tree evaluation algorithm recursive call root node tree turn evaluates children typically left right 
function terminal nodes return values tree parent terminals return value 
domain mathematical functions expression represented expression prefix represented syntax tree representation candidate solutions genetic programming limited single syntax trees 
auxiliary data structures memory arrays spector luke data structures containing syntax trees represent solution luke 
en functions accomplished automatically defined functions koza automatically defined macros spector 
advances seen architectural altering operators loops recursion koza 
additionally functional languages ml genetic programming framework iteration recursion natural olsson 
initialisation genetic programming algorithm requires initial population individuals syntax trees 
possible methods perform tree initialisation 
ramped half half method commonly 
introduced koza probabilistically selects recursive tree generating methods grow full 
grow method depth randomly picks functions terminals build tree deeper branch full method functions reached creating full trees depth methods create different distributions initial trees general consensus uniform random distribution better evolutionary process 
methods described luke luke 
full grow methods probably initially subsequently due simplicity 
search evolutionary algorithms genetic programming offer little control tree creation 
methods give better control 
iba clear methods better different situations complexity methods justified performance 
research thesis ramped half half method initialisation 
fitness selection genetic programming requires evaluation fitness function determine quality individual 
fitness value typically single scalar value allows selection methods dis various levels individual quality 
multiobjective methods vector represent fitness 
computation time particularly complex problem domains spent fitness evaluation 
instance robotic control problem individual represent algorithm move robot location 
individual run purpose fitness evaluation simulator actual robot tasks may take considerable time 
determine fitness value individual typically applied fitness case set fitness cases 
score fitness case represented final fitness function value 
exam ple robotic control problem example executing program controls robot simulator represent fitness case 
fitness value assigned robot fitness case represent distance predefined location final location robot 
process repeated times starting robot different initial locations values returned fitness cases averaged represent fitness value assigned 
problem domains described chapter fitness value result applying program fitness case result applying program set fitness cases 
design representation fitness function critical 
ideally representation fitness property strong causality small changes genotype represent small changes fitness rosca ballard 
weak causality opposite strong causality common genetic programming 
weak causality implies instability programs evolved genetic programming small changes solutions yield large changes fitness 
fitness functions designed distinguish individual quality code growth dynamics controlled components added fitness function luke 
dynamic fitness functions hierarchically defined fitness functions langdon poli examples ways guide search 

search evolutionary algorithms genetic programming create population individuals generational algorithm individuals selected current population fitness 
common method genetic programming tournament selection 
tournament selection chooses individuals current population returns best fitness 
typically tournament held individual participating crossover mutation reproduction 
forms selection consist truncation selection fitness proportionate selection ranked selection selection mul tiple criteria example selecting individuals fitness size 
see blickle thiele discussion selection methods 
recombination mutation reproduction recombination usually implemented subtree crossover parents 
mechanics subtree crossover method initially described cramer koza examined detail variety studies 
haeseleer luke spector langdon igel chellapilla ross :10.1.1.35.6772
algorithm described follows trees selected population subtree tree selected subtrees exchanged trees 
children considered new population 
example consider binary trees roots crossover points chosen subtrees exchanged produce trees subtree selection done assigning uniform probability internal nodes leaf nodes separately 
internal node selection probability usually set defines frequency leaves subtrees selected recombination 
note typically trees grow size probability selecting subtrees near leaves grows 
nodes locations giving higher cumulative probability selected 
canonical genetic programming functions terminals return expect type exchange subtrees trees valid 
possible variations re combination exist 
example homologous size fair crossover langdon attempt 
search evolutionary algorithms genetic programming preserve tree structures size exchanged subtrees 
operators described langdon 
subtree crossover tends dominant operator genetic programming mutation oper lower rates 
subtree mutation investigated comparison subtree crossover luke spector 
forms mutation include single node mutations various forms code editing remove unnecessary code trees 
reproduction operator copies individual population 
production selection new individuals carried generational steady state algo rithm 
generational algorithm new population created parents current lation 
steady state algorithm offspring created placed existing population randomly fitness 
comma plus methods offspring parent selection evolutionary strategies possible see section 
examples offspring pro duction force children compete brood selection altenberg tackett methods similarity bias similar dissimilar parents mating ryan 
stopping criterion generation consists production new population generational algorithm 
similar definition steady state algorithm 
maximum number generations usually defines stopping criterion genetic programming 
possible achieve ideal fitness serve stopping criterion 
thesis maximum generation number regardless ideal fitness achieved 
criteria possible measure diversity loss lack fitness improvement 
application domains understand genetic programming useful consider problem domains motivate field develop theoretical understanding 
problem domains employed test new representations operators 
standard problems genetic programming literature introduced koza researchers 
daida luke luke spector mcphee hopper soule heckendorn 
section surveys problems introduce domains research 

search evolutionary algorithms genetic programming fe trail artificial ant problem 
food pellets denoted circle grid 
artificial ant artificial ant problem koza originally developed field artificial life jefferson 

ant problem consists finding best strategy picking food pellets trail grid 
solution problem algorithm collecting food 
fe trail ant problem 
fe trail consists food elements dimensional toroidal grid shown 
ant starts north west corner facing east 
ant functions terminals functions terminals executed move ant grid evaluation 
typical functions include food ahead ant faces food pellet evaluate evaluate progn evaluate returning value progn evaluate returning value 
functions simple sequencing functions 
terminals provide ant locomotion change direction left turn ant left degrees right turn ant right degrees 
search evolutionary algorithms genetic programming move move ant forward square step 
ant fitness assessment fitness problem measured number pellets missed total trail 
ant typically total time steps collect food pellets terminal takes time step execute 
candidate program re evaluated re initialising ant food collected maximum number time steps reached 
ant related studies artificial ant problem investigated numerous studies 
langdon poli exam ined aspects search space ant problem 
authors measure search ef fort required genetic programming variations genetic programming random search techniques stochastic search methods 
genetic programming performed random search methods versions stochastic hill climbing includ ing population hill climbing performed equally better genetic programming 
langdon poli noted ant problem highly deceptive 
pos sible solutions symmetrical requirement particular path followed solutions equal fitness take different approaches solving problem 
langdon poli showed encouraging population follow similar paths problem considerably easier genetic programming 
parity machine learning typically concerned inducing model correctly classify input output pairs 
set boolean problems provides similar framework genetic programming 
langdon poli provide discussion boolean program spaces related field evolvable hardware circuit design koza 
class boolean problems parity problem requires correct classification bit strings length having number example shows truth table parity number classified true 
thesis case considered 
koza reported number langdon suggests number 

search evolutionary algorithms genetic programming parity functions terminals parity true false false true false true true false truth table parity problem 
logical functions determine parity binary bit strings 
typical functions include returns returns nand returns 
returns 
parity problem terminals representing bits denoted parity fitness assessment parity fitness function number wrong classifications possible bit strings length 
parity related studies parity problem investigated detail langdon poli 
char aspects problem test cases define fitness requirement terminals processed solution achieve ideal fitness 
additionally nature problem random guess fitness test cases lead score 
reilly oppacher performed comparison hill climbing methods similar 
search evolutionary algorithms genetic programming genetic programming operators show hill climbing generally performed better genetic programming multiplexer problem 
similar results obtained juels wattenberg 
problems multiplexer parity identical share similar features boolean functions terminals fitness function values 
symbolic regression scientific disciplines finding model explaining relationship large complex sets data required 
task difficult methods employed uncover models data 
domain symbolic regression method input output pairs infer functional model typically consisting function coefficients 
researched application genetic programming regression domain context scientific discovery demonstrating ways improve application 
regression problem attempts find program approximates target function 
target applied domain values pre determined range 
resulting values compared candidate program value values 
thesis uses function quartic polynomial rastrigin function cos binomial polynomial random polynomials described chapter 
instance rastrigin range quartic binomial random polynomial instances range number pairs quartic rastrigin instances binomial random polynomial instances 
shows quartic polynomial rastrigin function 
regression functions terminals regression problems mathematical functions approximate target function 
division logarithm function usually wrapped division returns denominator equal close logarithm returns argument equal close 
addition ally common especially functions coefficients rastrigin ephemeral 
search evolutionary algorithms genetic programming quartic function randomly generated points rastrigin function randomly generated points quartic rastrigin functions 
random constants 
constants keep value initialisation re run 
random polynomial instances chapter range varied binomial instances 
experiments rastrigin function chapter 
regression domain functions usually subset return addition subtraction multiplication arguments respec tively protected division returns denominator returns quotient sin cos returns sine cosine argument log returns logarithm argument exp returns terminals common regression domain 
pair regression fitness assessment fitness regression problem instances determined summing squared difference target value value 
chapter fitness reported adjusted fitness defined equation adjusted fitness fitness regression related studies 
search evolutionary algorithms genetic programming studies regression problem domain testbed 
problem char daida 
reilly unique contains conflicts context content representation 
improvements interval arithmetic simple fitting method improvements advanced models symbolic regression polynomials iba 
scalability fitness landscape complex issues genetic programming ability scale harder larger prob lem instances landscape induced representation operators fitness function 
thesis approaches issues focusing population genetic programming 
elements genetic programming limit scalability algorithm 
evaluating solution computationally expensive 
evaluating single solution problem large population solutions easily problem 
bias increase solution size compounds problem increasing evaluation time memory population 
clear genetic programming applied effectively combinatorial search space increased clear simple implementation decisions population size drastically change difficulty problem instance 
second major issue genetic programming basic choice representation operators fitness function 
elements define fitness landscape 
representation solutions com puter programs straightforward modelling variety problem domains 
trans forming program maintaining commonality behaviour property strong causality 
representation operators fit ness function property weak causality fitness landscape described rough 
operator genetic programming come scrutiny representation variations proposed improve algorithm grammar genetic program ming linear genetic programming keller banzhaf 
related issue strong weak causality genetic programming issue context content representation fitness function 
content syntax tree refers functions terminals 
context group functions terminals particular syntax tree way primitives contribute fitness typically determined elements tree 
moving content group functions terminals 
search evolutionary algorithms genetic programming syntax tree may change context 
selecting portion solution fitness placing solution fitness guaranteed preserve original context content 
issue content context genetic programming system effect causality system 
previous issues scalability fitness landscape strong links pop ulation dynamics 
instance size population reduced cost performance computation drastically reduced 
population strong effect guiding search solution space issues scalability landscape roughness addressed degree different population dynamics 
better understand genetic program ming related issues thesis address population dynamics studying specific issue population diversity 
diversity describes amount variation population shown chapters wide reaching effects aspects search process 
metaphors search genetic programming evolutionary algorithm 
assumed metaphor type search proceeds adaptation solutions adapt change meet predefined objectives 
metaphor adaptation applied standard genetic programming algorithm somewhat misleading general 
misleading canonical genetic programming due structure content convergence limited ability adapt evolutionary process 
point unable change solution quality 
metaphor general genetic programming usually applied search problems component optimisation specific objective 
concept adaptation imply solution equally adapt objectives typically case nature 
metaphor exists specific evolution accurate 
metaphor previously proposed beam search tackett 
beam search similar best heuristic allows limited capacity memory previ ously visited solutions 
portions search space may forgotten optimal solutions may missed 
genetic programming population selection methods provide basis metaphor 
elements provide kind memory previous search ability select promising aspects continue search 
possible metaphor hill climbing 
hill climbing memory version beam search 
comparisons genetic programming search quality hill climbing reilly oppacher random search methods langdon poli charac search behaviour different matter 
clearly case genetic programming 
search evolutionary algorithms genetic programming random search 
population selection variation better solutions produce search trial error new solutions metaphor random search suggest search proceeds direction previous solutions 
hill climbing hand may applicable metaphor captures sense population exist providing memory component beam search metaphor convergence operator behaviour prevent population returning previous state 
may case beam search hill climbing metaphors offer optimistic pessimistic metaphor genetic programming search respectively 
variation hill climbing stochastic hill climbing juels wattenberg particularly appropriate considers neutral moves fitness landscape 
research metaphor search sought explain results algorithm behaviour 
chapter metaphor hill climbing appears agree results previous literature 
light complexity genetic programming evolutionary algorithms metaphors search may lead new theoretical models 
summary chapter described search evolutionary algorithms genetic programming algo rithm representation 
common problem domains introduced 
lastly open research issues relationship population metaphors search relating genetic programming 
procedural representation evolutionary search strategy genetic programming intuitive algorithm automatic programming search 
issues scalability landscape roughness serious issues applicability 
issues received attention community 
proposing new solutions problems aim remainder thesis develop sound working knowledge population dynamics new solutions developed 
achieve goal research focus issue population diversity 
achieved new ties improving search genetic programming intuitive 
goal key questions outlined chapter addressed experimental studies 
chapter issues genetic programming genetic programming literature cites importance maintaining diversity avoid premature convergence local optima ek rt meth mckay mcphee hopper rosca ryan 
diversity mean population search algorithm 
certainly variation required principles biological evolution 
genetic programming process occurs nature different types possible levels diversity 
center thesis questions related diversity 
exploring issues clearer understanding genetic programming diversity achieved 
questions motivates research follows 
questions 
diversity measured controlled ideal levels diversity 
numerous loss diversity poor results suggested methods designed increase diversity discussed chapter sug prevention loss improve results 
shown diversity measured variety ways conflicting 

genetic programming population search method effect population diversity aspects search process 
challenging problem genetic programming increase solution size accompanied increase solution quality 
literature describes ics cause growth 
langdon poli luke soule heckendorn argued done thesis varied rate growth artifact population diversity 

issues genetic programming 
specific role diversity play evolutionary process dissimilar individuals con tribute offspring differently rest population 
population provides main reservoir genetic material produce new solutions 
population expected degree simultaneously occupy different parts search space 
provide solutions accepted population converges optimum 
possibly conflicting functions population important understand particularly context diversity 
purpose chapter examine issues detail 
diversity measures methods diversity goal evolutionary algorithms 
ideally nature diversity side effect representation operators right sufficient level achieved encourages performance 
population initialisation genetic programming usually allow duplicate individuals populations usually bounded con straint 
fact duplication individuals common explicitly promoted elitist methods reproduction operator 
natural cause run failure wrong level diversity specifically little diversity 
idea problematic reasons 
genetic programming typically implemented open ended evolutionary system 
algorithm said converge unable find new solutions improve solution quality 
explicit pressure genetic diversity ability variation improvement lost evo process 
knowing occur earlier stages difficult 
fitness function syntax tree representation loss different syntax trees causes loss different fitness values 
know right kind level diversity required produce quality solutions 
measuring diversity genetic programming typically employs syntax tree representation binary trees 
population trees exists generation 
function terminal sets consist terminals usually functions 
number different binary tree shapes internal nodes catalan number lucas 
series term describes number binary tree 
issues genetic programming configurations internal nodes trees size consists terms tree size total number unique trees function terminals sets creates enormous space including programs number functions number terminals 
space may equivalent trees functionally fitness function 
aspect tree shape content behaviour diversity measures capture 
critical elements 
measures concentrate node level number types function terminal nodes mcphee hopper problem specific measures describe detailed solution behaviour haeseleer 
term diversity definition 
implicit assumption refers solution representation 
useful consider aspects solution behaviour fitness 
research term genotype refers shape content solution phenotype refers fitness value 
term phenotype generally descriptive measure solution behaviour 
standard practice literature uses fitness value phenotype interchangeably 
complex definition solution behaviour describes solutions detail typical fitness functions 
type diversity measured measures diversity defined 
number unique genotypes traditional diversity measure koza langdon 
number unique fitness values considered diversity measure rosca 
obviously possible definitions 
definitions described chapter 
controlling diversity ideal level particular type diversity 
recognised phases evolution ary process exploration followed exploitation eiben question difficult answer 
knowing priori existence type ideal levels diversity blindly controlling diversity population problematic 
different diversity strategies may required diversification intensification strategy similar defined tabu search glover laguna :10.1.1.26.7748
related method defined genetic programming edit distance adaptive control fitness improvement ek rt meth 
exploration exploitation aspects search issues consider attempting control modify population diversity 
fuller discussion methods control diversity chapter 
effects population diversity 
issues genetic programming genetic programming works selecting individuals recombining genetic material produce new offspring 
common genetic programming subtree crossover operator 
mutation operators effects crossover low rates 
type individuals population obviously affect type individuals selected type offspring produced 
recombining similar dissimilar individ effect offspring size fitness 
diverse non diverse populations search difficult depending landscape defined representation operator fitness func tion 
possibility context content conflicts representation complicate effects population diversity 
population diversity effect selection pressure making search random focused 
code growth code growth documented phenomenon evolutionary systems variable length representation genetic programming 
increase solution size correspond fitness improvement computation time wasted readability solu tions decreased 
studies causes code growth exist 
luke theory depth modification points soule heckendorn assessed viability hypotheses protective drift removal bias 
major contributing factors code growth genetic programming emphasised studies 
smaller removed portion tree fitness resulting spring worse parent removal bias soule heckendorn igel chellapilla 

child survivability linked deeper nodes selected modification parents accord ing depth theory code growth luke 
gives bias larger parents tend produce larger children 
points overlapping somewhat consistent theories code growth specifically langdon poli fitness causes bloat theory langdon langdon poli langdon suggests space larger trees contains better fit programs 
fitness increases stays tree size growth selection crossover points nearer leaves increases size removed portion decreases modification points deeper 
trees grow modification points deeper removed 
issues genetic programming subtrees smaller children survivability higher 
clear bias constant rate growth evolution 
empirical evidence shows wide range code growth rates theories predict 
series random runs genetic programming may produce wide range solu tion sizes 
example chapter shows average size individual population random runs 
experiments wide range sizes produced 
understanding mechanics population allowed smaller solutions op mechanics caused larger solutions paramount controlling code growth maintaining fitness improvements 
solutions growth due recom bination tree types controlling population diversity allow better control code growth 
understanding effects causes different levels population diversity allow thorough description mechanisms cause growth 
problem difficulty issue genetic programming identify important properties problems prob lem instances 
specifically problem difficult respect genetic programming 
daida 
investigated tunable problem binomial function varying ephemeral random constant ranges show difficulty increased changing combina search space 
case genetic programming difficulty increases increased range erc values 
authors suggested conflict content context largely re increased difficulty 
reilly goldberg reilly goldberg reilly constructed problems highlight content context dependencies genetic pro gramming solutions 
authors investigated partial solutions contribute fitness solving problem difficult reilly goldberg 
research investigated possible structural mechanisms search difficult daida daida 
population diversity things way reduce problem difficulty filtering misleading deceptive solutions population search 
selection pressure deception selection methods select fitter individuals produce new individuals 
fitness function defines scalar value individual selection method uses compare individuals 
loss different fitness values population leads reduction selection pressure individuals fitness 
example population contains fitness value selection method fitness random 
fitness diversity 
issues genetic programming low particularly fitter individuals selection search random 
previous linked selection pressure code growth smith harries langdon poli tackett 
low phenotype diversity population represent property population deception 
goldberg provides discussion deception context genetic algorithms building blocks 
langdon poli describe deception terms artificial ant problem genetic programming 
deception general refers solutions lead search poor local optima 
deception occur different solutions exist fitness recombination leads poor fitness 
deception occur solutions relatively fitness amenable improvement 
selecting individuals lead better solutions 
cases selection method information problem population avoid deceptive solutions 
role population fitness evaluation typically responsible majority computation time genetic program ming 
bigger populations require computation 
understanding clearly role pop ulation search allow controlled reduction population size improved efficiency 
additionally understanding role allow populations evaluated potential providing search 
section examines issues related role population search 
local global search metaheuristic methods genetic programming typically considered global search methods 
locality operator subtree crossover led search char local search method poli langdon langdon poli 
research shown loss genetic diversity populations followed small fitness improvements search blind random search converged population ross mcphee hopper 
genetic programming described behave ing set parallel stochastic hill poli langdon limited ability search space possible solutions 
diversity population genetic programming capable sam pling close genetic neighbours 
behaviour repeated random runs runs appear stochastic hill 
loss diversity encourage improvement 
issues genetic programming performing local search best solution far early convergence population susceptible local optima mcphee hopper 
genetic programming compared hill climbing methods similar representations operators reilly oppacher reilly oppacher langdon poli langdon juels wattenberg 
different problems solved better worse ing genetic programming 
studies referred help explain experimental results show simple algorithms behave genetic programming provide better results 
instance juels wattenberg hill climbing strategy amended allow neutral moves called stochastic hill climbing appropriate genetic programming 
standard hill climbing typically accepts solutions improvements current solution 
high level convergence genetic programming suggests diminished exploration ability comparisons hill climbing methods suggest methods behave similarly 
genetic programming considered global local search method 
research luke treated algorithm similarly single solution hill climbing method optimal population sizes combined run length parameters search best arrangement computation multi run genetic programming algorithm 
papers suggest robust methods genetic programming behaviour local search method hill climber 
space genetic structures shown difficult reach canonical genetic programming daida daida langdon :10.1.1.35.6772
solutions spaces difficult discover 
previous research emphasized shape content convergence genetic programming mcphee hopper igel chellapilla tree shapes contents population increasingly fixed top early evolutionary process 
role population provide diversity hill climbing single solution directly modelling genetic programming hill climber allow smaller population sizes combination elitism diversity hill climb effectively 
role population carry global parallel search search space careful selection recombination diversity strategies required 
representation operator conflicts section described issues representation operator increase problem difficulty 
exchanging subtrees syntax trees representing computer programs 
issues genetic programming recombination regardless tree shape content preserve semantic meaning exchanged subtrees 
surprising subtree crossover shown perform similarly mutation variants angeline luke spector reilly oppacher 
population represents portion search space time population search robust landscape rough ness issues avoiding particular regions search space 
population encourage search regions search space minimise internal conflicts representa tion operator able smooth search landscape 
homology attempts address problems representation operator 
recombination modify similar content similar context parents preserving semantics exchanged genetic material 
way solutions may iteratively incrementally built 
homology achieved operators search semantically similar subtrees 

defined homologous crossover linear genetic program ming representation 
results showed homology reduced code growth produced far neutral events standard crossover operator 
method produced advantageous events number destructive events numerous standard crossover 
smaller solution sizes mixed improvement quality seen studies homologous operators haeseleer langdon poli langdon nordin :10.1.1.35.6772
concept homology implemented population consist similar trees 
case operators pick subtrees semantically similar areas probability selection apply similarly homogeneous population 
genetically diverse homologous populations may things improve chance preserving semantics recombination 
noted langdon potential drawback homologous crossover slow growth size population 
initial population wrong structure trees smaller optimal size homologous crossover approach rate slowly 
standard crossover better obtain ideal size ability improve solution quality maintain size debatable problem dependent 
additionally homologous operators introduce preserve similarities population counter possible benefits diversity preservation 
converged population possibly improving search limit ability avoid local optima 
summary 
issues genetic programming chapter stated questions guide research 
questions highlight difficulty measuring controlling diversity importance diversity aspects search need understand extent diversity guides search 
genetic programming appealing search heuristic provides intuitive way search complex space 
representation provides possible measures meth ods diversity 
clear type diversity relevant improving search level diversity best 
chapter looks diversity measures correlation fitness diversity 
chapter uses novel diversity measure explore ef increased diversity expected diversity loss type search genetic programming appears carrying 
issues code growth bloat problem difficulty homology primary focus thesis 
chapter examines population diversity understand role effects previous issues 
population connected issues search interesting relationships exist 
population operator responsible producing new individuals search 
diversity obviously beneficial sampling new individuals dissimilar individuals produce individuals 
search method focus explicitly dissimilar individuals simply provide variety converging population 
issues fundamental genetic programming searches developing new methods improve search 
chapter explores concept survivability dissimilar fit individuals better understand individuals guide search 
chapter analysis diversity measures previous investigations measures diversity community clearer view populations search process genetic programming mcphee hopper darwen yao ek rt meth rosca langdon poli 
different possible definitions diversity conflicting 
identifying measures correlate run performance enable design efficient operators genetic programming algorithms 
main issues addressed chapter 
ways measuring controlling diversity 
correlation best fitness diversity populations 
importance diversity different stages evolutionary process 
genetic programming stochastic algorithm clear applicable rules exact ideal levels diversity expected 
goal draw general conclu sions rules thumb expected diversity search performance 
survey diversity measures diversity preserving methods 
followed experimental study trends various measures correlation fitness diversity measures discussion effects diversity 
diversity measures biological diversity refers differences individuals population nature imply structure behaviour difference 
koza term variety indicate number 
analysis diversity measures different genotypes population 
standard genetic programming population number structurally unique individuals 
measure probably informa tive common due ease understanding 
langdon argued genotypic diversity sufficient upper bound population diversity 
due nature genetic programming systems problems identical genotypes produce fit ness 
decrease genotype diversity unique individuals necessarily cause decrease phenotype diversity unique fitness values 
treatment stack problem langdon investigated effects crossover operator variety 
author noted genetic programming loses ability improve fitness generations proba bly due selection crossover causing loss variety 
langdon noted stack problem runs better fitness crossover appeared produce larger number fitter non duplicate children parents 
author loss diversity caused decrease unique terminals due subtree crossover led diversity loss 
langdon poli noted measuring variety unique genotypes fails consider ancestral history individuals degree difference non unique individuals behavioural similarities 
standard representation genetic programming syntax trees lends fine grain structural measures consider nodes subtrees graph theoretic properties just entire trees 
measured subtree variety ratio unique subtrees total subtrees program variety ratio number unique individuals size population 
distance measure individuals number dis subtrees individuals share 
author noted distance measure distinct subtrees individuals predict subtree crossover fail provide im due loss distinct subtrees diversity 
tackett measured structural diversity subtrees schemata frequencies 
problem specific measures allow additional insight population diversity especially novel non traditional problems 
haeseleer defined behaviour fre quency signatures individual fitness gene specific nodes frequencies respectively 
average correlation respective signatures population repre sents phenotype genotype diversity population 
addition haeseleer tagged genetic code evaluated behaviour individuals stimulus response map gain knowledge structure behaviour populations robot tank prob lem 
measures authors witnessed emerging demes distinct subpopulations neighborhood selection mating 
degree graph isomorphism applied genetic programming trees measure diversity 
properties functions genetic programming associativity com 
analysis diversity measures require special possibly complex implementations isomorphism rosca 
determining graph isomorphism computationally expensive entire population 
measure possible isomorphic trees noting simple properties terminal functions depth determine individuals isomorphic computing isomorphism 
mcphee hopper investigated diversity genetic level assigning numerical tags node population 
tags track survival nodes initial population change context nodes recombination 
authors tracked genetic lineages initial population noting individuals selected recombination child produced parents provided root portion child tree 
populations final generation descended single initial individual genetic lineages reduced surviving lineage early evolutionary process 
measuring difference individuals string edit distances times genetic programming 
reilly edit distance string match ing uses single node insertions deletions substitutions transform trees equal structure content 
de jong 
similar edit distance method 
edit distance modification string edit distance levenshtein distance overlaps trees root node 
different nodes overlapping score distance 
equal nodes score distance 
edit distance sum different nodes normalised dividing size smaller tree 
measure represents number node changes need tree equal structure content 
note measure take consideration standard subtree crossover operator resemble single point mutation operator 
reilly noted importance structural distance measures genetic program ming populations understand underlying dynamics 
edit distance measure study effects crossover differences individuals better als 
clear results ability understand genetic programming populations edit distance measures suggested 
ek rt meth defined edit distance specific genetic programming syntax trees adapted cheng considered cost substituting different node types functions vs terminals classes 
difference trees defined children 
analysis diversity measures trees roots possible children total subtrees distance trees recursively finding distance nodes constant set adjusted weight depth tree differences differently 
trees brought tree structure adding null nodes tree 
note differences near root weight 
convenient description genetic programming noted programs converge quickly fixed root portion igel chellapilla mcphee hopper 
measure account subtree crossover operator represent dynamics closely giving higher cost upper portions trees difficult change subtree crossover 
additionally cost changing node specified pair nodes classes nodes case ek rt meth 
measures behaviour compare differences populations fitness values time 
rosca fitness values population define entropy free energy measure 
entropy represents amount disorder population increase en tropy represents increase diversity 
rosca populations appeared stuck local optima entropy change decreased monotonically successive generations 
entropy calculated population placing fitness values classes noting size class rosca 
discrete fitness space unique fitness value may define fitness class 
continuous spaces discretisation may necessary 
level convergence genotype space significantly reduces number unique fitness values continuous spaces 
fitness value unique fitness values current population fitness classes proportion population fitness equal entropy fitness class defined physical systems entropy represents amount chaos system 
genetic program log ming high entropy reveals presence unique fitness values population evenly distributed values 
low entropy describes population contains fewer unique fitness values individuals fitness shown 
entropy gives insights distribution fitness values population describe precise distribution fitness values 
additionally entropy describes number unique fitness values information distribution describes formation selection 
individuals population fitness value selection fitness random 
higher entropy evenly distributed population possible fitness values fine grain population appear selection 
entropy describe phenotype diversity broader sense dynamic change applied selection pressure 
size classes 
analysis diversity measures size classes fitness classes fitness classes fitness classes low entropy high entropy examples entropy distributions low entropy members population value high entropy individual represented different value assuming possible fitness values individuals 
frequency terminals functions population serve measure pop ulation diversity 
similarly diversity refer number type tree structures population represents 
visualisation genetic programming tree described circular lattice daida daida population visualisation colors represented sampled type shapes lattice 
lattice model population visualisation method developed dimensional graph gustafson gives rise measures describe tree shapes sampled lation 
shows full binary tree depth circular lattice upper left graph 
dimensional visualisation finding cumulative node count population absolute node positions represented lattice 
cumulative count denote height node shown bottom figures upper right graph shows visualisation 
promoting diversity canonical view evolution diversity diversity provide evolution 
typical evolutionary algorithms contain phase exploration followed exploitation eiben 
promoting kinds diversity entire search process counter productive exploitation phase 
type amount diversity required different times remains unclear 
measures methods promote diversity 
methods typically non standard selection mat ing replacement strategy increase control diversity 
common methods include cal distributions individuals limit interactions neighbourhoods collins islands martin 
methods consider behaviour structure similarities sharing goldberg richardson crowding dejong genotype sharing deb goldberg 
techniques initially applied genetic algorithms 
size classes 
analysis diversity measures example population visualisations circular lattice upper left 
sample tree shown upper right represents overhead view population trees node height number times population samples node structural location 
dimensional views population bottom graphs 
eshelman schaffer investigated advantage pair wise mating genetic algorithms 
authors hamming distances select individuals recombination replacement finding improvement hill climbing type selection strategies genetic algorithms 
ryan algorithm addressed premature convergence elitism small populations evolving minimal sorting networks 
facilitate selection reproduction algorithm builds lists fitness length 
ryan algorithm maintained higher di versity prevented premature convergence simple measures 
de jong 
multiobjective optimisation parity problem promote diversity concentrate non dominated individuals tuple fitness size diversity diversity average square distance members population specialised measure edit distance nodes 
multiobjective method promoted smaller diverse trees 
keller banzhaf described structural difference measure edit distance genotypes 
measure complicated standard edit distance intended explicitly controlling diversity populations 
banzhaf string edit distance effective portions linear genetic programming individuals measuring distance program code contributed fitness 
measure level tournament selecting fitness diversity 
mckay applied fitness sharing concept deb goldberg test ity genetic programming 
fitness sharing credited maintaining population diversity allowing performance improvement population size reduction multiplexer recur 
analysis diversity measures sive list membership problems 
diversity number fitness cases solved sharing concept assigned fitness individual performance divided number individuals performance 
mckay studied negative correlation liu root quartic negative correlation preserve diversity multiplexer problem mixed results :10.1.1.32.7984
similarly selection method uniform fitness values suggested alternative way preserve diversity hutter 
ek rt meth applied fitness sharing novel tree distance definition symbolic regression problem sug may efficient measure structural diversity 
results showed promise controlling size programs initially improving performance 
authors applied measure pair individuals weighted arithmetic mean develop population diversity measure ek rt meth 
measure adaptively control diversity explorative exploitative search phases noting conflict fitness improvement high diversity observed previous 
authors sym regression instances fitness sharing able improve accuracy maintain population diversity 
tracked number individuals solved specific fitness cases 
method promoted diversity discovery different popular solutions 
similar stepwise adaptation weights technique constraint satisfaction symbolic re instances eiben van van 
smith 
investigated diversity immune system algorithm classifier systems standard genetic algorithm 
task concerned traditional optimisation required diverse populations successful 
speciation tree euclidean distance ap plied 
study multimodal optimisation island models 
algorithm divided individuals species evolved genetic algorithm tributed new species 
wiles counted unique genotypes studying recombination diversity genetic algorithm solving royal staircase problem 
rosa looked varying population sizes non random mating main tain diversity royal road problem 
negative mating looks genotypes maximal hamming distances 
darwen yao studied cooperation iterated pris oner dilemma problem increasing behavioural diversity genetic diversity improve cooperation performance 
authors commented dogma surrounding diversity previous methods maintain diversity darwen yao 
cited importance high low diversity phases evolutionary strategy framework 
author distance average point diversity measure real value encoded als 
depending diversity predefined high low diversity phase different recombination operators allowing diversity fall promoting diversity 

analysis diversity measures table experiment problem parameters ant parity quartic rastrigin diversity measure experiments 
parameters settings represent commonly settings literature problems 
division log functions protected described chapter 
evolutionary algorithm generational population size stopping criterion maximum generation function sets ant food ahead progn progn parity nand quartic rastrigin sin cos exp log terminal sets ant left right move parity quartic rastrigin tree generation ramped half half initial depth maximum depth subtree crossover probability subtree crossover internal node selection prob 
mutation probability selection method size tournament selection size empirical analysis diversity measures artificial ant parity symbolic regression problems quartic polynomial rastrigin function introduced chapter 
problems explore di versity measures relationship diversity fitness 
table contains problem experiment parameters empirical investigation 
parameters se lected commonly literature similar empirical studies 
note function set typical rastrigin function quartic problem typi cally uses addition subtraction multiplication division 
function set consistent ephemeral random constants 
rastrigin problem difficult solve ephemeral random constants 
experiments thesis carried modified version framework luke mersenne twister random number generator matsumoto nishimura 
diversity measures measures collected population generation diver sity population compared populations 
genotype diversity 
analysis diversity measures genotype diversity represents number unique trees langdon 
genotype diversity consider fitness behaviour trees 
trees equal contain exact structure content 
phenotype diversity phenotype diversity represents number unique fitness values population 
number possible fitness values determined fitness function varies problem mains 
example parity problem finite number possible fitness values individual 
fitness space continuous regression problems due precision numbers wrappers operators protected division instance presence non functional code possible different trees fitness 
entropy entropy calculated described section rosca 
fitness class represents unique fitness value current population 
pseudo isomorphic tree diversity attempt approximate degree isomorphism count number pseudo isomorphic trees population 
pseudo isomorphic trees represented number similar tuples population tuple defined terminals nonterminals depth individual 
identical tuples represent trees isomorphic non identical tuples represent trees certainly isomorphic 
edit distance non weighted edit distance diversity standard edit distance described section de jong reilly referred ed figures 
trees brought structure overlapped 
number non identical overlapping nodes trees counted 
normalised tree size 
edit distance weighted 
analysis diversity measures edit distance diversity depth weighted edit distance individuals ek rt meth 
measure denoted ed adapted back original formula tion cheng difference non equal nodes 
value gives differences near root weight 
oppacher inter population diversity method developed pair wise distance counting frequencies symbols position genome 
similar method genetic programming syntax trees variable length size symbol sets calculation complex 
reduce computation time approximate population diversity measure comparing population member single tree 
individual population compared best fit individual far run 
measure divided population size 
edit distance vulnerable outliers especially best fit individual outlier 
previous experimental results display key properties measures appropriate representative 
best fitness initial population individual current generation considered best run current best run individual 
secondly probabilistic selection fitness best individual contribute offspring generation remain outlier long 
chapters consider best individual current generation measures 
reason best run individual chapter common researchers consider individual analysis best current generation 
correlation measures objective study quantify importance ideal levels diversity recorded different measures common problems 
primary test relationship diversity fitness spearman correlation measure siegel 
spearman measure ranks sets variables tests linear relationship variables ranks 
correlation examined determine runs distinguished diversity terms run better 
interesting relationships easily exist may necessarily linear range scatter plots diversity measures fitness evaluated 
spearman correlation coefficient computed follows diversity low high positive correlation best low fitness worst high 
analysis diversity measures diversity low high correlation best low fitness worst high diversity low high negative correlation best low fitness worst high examples ranked correlation scatter plots fitness diversity low fitness ideal ranked runs total diversity ranked high low 
middle graph shows case correlation points aligned vertically horizontally 
number runs distance population fitness rank diversity rank 
value represents negative correlation denotes correlation demonstrates positive correlation 
measures low best generation fitness values ranked ascending order best worst occur high diversity ranked ascending order lowest diversity highest diversity correlation coefficient strongly negative 
alternatively positive correlation indicates bad fitness accompanies high diversity fitness accompanies low diversity 
shows rela fitness axis diversity axis type correlation scatter plot circumstances indicate 
analysis results independently random runs graph problem diversity measure shown figures 
shows best fitness generation evo process shows evolution size depth shown 
runs improving generations exception parity problem continues improvements 
previous research luke showed better carry short runs critical point fewer long runs ant quartic problem 
luke parity problem long run better 
due difficulty problem ability genetic programming consistently improvements 
critical point generation quartic problem slightly higher ant problem 
early period higher activity runs exists respect diversity measures 
typically lot activity early generations generation 
quartic rastrigin experiments phenotype diversity figures shows ini best fitness best fitness ant generation quartic generation 
analysis diversity measures best fitness best fitness parity generation rastrigin generation ant parity quartic rastrigin best fitness population plotted generation number 
independently random runs problem shown 
tial decrease followed sharp increase 
behaviour seen genotype diversity entropy initial sharp decrease followed increase quartic ras experiments experiments genotype diversity 
intuitively cause initial fluctuation due ease improvements initial solutions 
initial phase highlights differences experiments 
note phenotype diversity parity experiments continues increase final generation 
experiments edit distance generally decreases initial gener ation 
populations measured edit distance behave similarly mind edit distance measure places importance root higher portions trees conclude trees changing edit distance best fit tree population differences plotting edit distance diversity shows initial increase followed decrease experiments 
decrease comes stage seen edit distance 
imply increase diversity respect root portions trees occurs longer amount time issues need considered 
value meaning depth level tree binary trees capable contributing distance measure 
secondly ant problem uses arity function regression problems contain unary functions 
issues explain dramatic increase edit distance diversity seen ant problem due arity function regression problems due unary function decrease problems due trees growing maximum depths combination value seen 
performance measures edit distance seen problem domains chapter 
case clear increased diversity edit distance measure looks 
average number nodes average number nodes ant generation quartic generation 
analysis diversity measures average number nodes average number nodes parity generation rastrigin generation average number nodes vs generation ant parity quartic rastrigin experiments 
average depth average depth ant generation quartic generation average depth average depth parity generation rastrigin generation average depth vs generation ant parity quartic rastrigin experiments 
phenotype diversity phenotype diversity ant generation quartic generation 
analysis diversity measures phenotype diversity phenotype diversity parity generation rastrigin generation ant parity quartic rastrigin phenotype diversity plotted generation number 
entropy entropy ant generation quartic generation entropy entropy parity generation rastrigin generation average entropy vs generation ant parity quartic rastrigin experiments 
edit distance diversity edit distance diversity ant generation quartic generation 
analysis diversity measures edit distance diversity edit distance diversity parity generation rastrigin generation ant parity quartic rastrigin edit distance diversity plotted generation number 
edit distance diversity edit distance diversity ant generation quartic generation edit distance diversity edit distance diversity parity generation rastrigin generation edit distance diversity vs generation ant parity quartic rastrigin experiments 
genotype diversity genotype diversity ant generation quartic generation 
analysis diversity measures genotype diversity genotype diversity parity generation rastrigin generation genotype diversity vs generation ant parity quartic rastrigin experiments 
pseudo isomorph diversity pseudo isomorph diversity ant generation quartic generation pseudo isomorph diversity pseudo isomorph diversity parity generation rastrigin generation pseudo isomorph diversity vs generation ant parity quartic rastrigin experiments 

analysis diversity measures roots top portions tree similar edit distance measure 
supports previous igel chellapilla mcphee hopper soule foster roots fixed early evolutionary process 
struc tural convergence important considering method control diversity 
structural convergence beneficial genetic programming search encouraging forcing structural diversity edit distance case negative consequences 
loss edit distance diversity necessarily mean loss phenotype diversity worsening fitness seen 
lastly figures show behaviour runs fitness continues increase final generation 
identifying dynamics properties allowed continued increase critical genetic programming practitioners 
goal research understanding populations amenable improvement 
wide range fitness diversity know measures correlate fitness way 
addressing question key understanding controlling diversity effective applied different problem domains 
correlations final populations table summarises spearman correlation coefficients best fitnesses runs diversity final populations 
correlation diversity measures re ported 
ant experiments negative correlation seen phenotypes fitness tween entropy fitness 
low fitness seen high phenotype diversity entropy 
positive correlation edit distance fitness pseudo fitness 
weak correlation seen genotypes fitness ant experiments trend experiments 
case positive correlation fitness edit distance fitness pseudo suggests low fitness seen low diversity 
figures edit distance generally decreases run 
runs tend structurally converge ant experiments respect edit distance measure parity experiments converge better fit ness 
may result fitness early run may result convergence leading better fitness 
table correlation coefficients table gives rastrigin experiment results 
table shows lack strong correlations diversity fitness effect partially seen quartic experiments 
may case correlation exist fitness diversity relationship linear final populations lost correlation 
analysis diversity measures table spearman correlation coefficients ant quartic rastrigin parity experiments 
ant problem fitness genes isom entropy ed genes isom entropy ed ed quartic problem fitness genes isom entropy ed genes isom entropy ed ed rastrigin problem fitness genes isom entropy ed genes isom entropy ed ed parity problem fitness genes isom entropy ed genes isom entropy ed ed due repeated application selection recombination change fitness 
importance phenotype diversity seen parity experiments table strong negative correlation exists fitness phenotype diversity 
shows phenotype diversity tends increase parity experiments 
possible fitness values problem population begins random guesses near fitness 
tions undergo selection recombination number unique fitness values increases 
increase phenotype diversity genetic programming distinguish individuals bad ones 

analysis diversity measures tournament selection uses fitness values individual decide tournaments fewer unique phenotypes population lower entropy selection random 
selection faced individuals fitness 
high phenotype diversity entropy maintained selection pressure remains pre set level 
lowering phenotype diversity entropy benefit problems selection pressure suitable negatively affect higher selection pressure better 
table gives correlation measures diversity 
ant experiments note phenotype diversity negatively correlates structural measures genotypes pseudo edit distances 
increase decrease unique fitness values pop ulation corresponds decrease increase structural diversity 
counter intuitive unique genotypes correspond unique fitness cases 
behaviour expected edit distance measures measures generally decrease evolution phenotype diversity increases 
problem discovery different fitness values ap pears aided structural diversity 
population structurally similar easier find unique fitness values 
possible behaviour include better environment crossover deception search space focused local search phase 
evolving populations correlation diversity important different stages evolutionary process 
fact methods previously adaptively control level diversity suggest 
shows correlation diversity best fitness generation 
note point represents correlation populations sampled runs dependency generations preceding ones 
ant parity experiments contain varying levels correlation edit distance fitness phenotype diversity fitness 
quartic experiments contains period early fluctuation followed increase positive correlation entropy phenotype diversity fitness 
runs typically achieve best fitness early effect may due copies best fit individual accumulating population 
populations achieve local optima lower entropy 
rastrigin experiments contain early period varying correlation diversity fitness measures lost correlation fitness 
problem representation relationship fitness diversity important probably due critical relationships node node dependencies daida 
positive correlation fitness edit distance occurs negative correlation fitness spearman correlation spearman correlation ant problem correlating population fitness diversity genes isom entropy generation 
analysis diversity measures ed ed genes quartic problem correlating population fitness diversity isom entropy generation ed ed spearman correlation spearman correlation parity problem correlating population fitness diversity genes isom entropy generation ed ed rastrigin problem correlating population fitness diversity genes isom entropy generation evolving populations correlation best fitness population different diversity measures 
point represents correlation populations runs generations represented 
phenotype diversity seen ant parity experiments 
results suggest fitness landscape induced representation operator fitness function uncorrelated 
small dif ferences individuals capable expressing wide range behaviours 
statement considered light operator define distance actual difference behaviours considered 
measures give approximate descriptions fitness landscape 
scatter plots diversity fitness spearman correlation coefficient describes linear relationships 
series scatter plots examined assess data nonlinear relationships 
plot population performance best fitness population plotted axis values left better versus population diversity axis 
point represents population sampled different run run twice populations ed ed entropy entropy ant best fitness population generation quartic best fitness population generation 
analysis diversity measures entropy entropy parity best fitness population generation rastrigin best fitness population generation ant parity quartic rastrigin best fitness population plotted population entropy 
note point represents population run 
sample different runs population generation requiring runs generations 
sampled generation requiring runs 
note points parity experiments fitness values randomly offset range allow better visualisation points fitness value 
general comments scatter plots figures 
clear trends best fitness occurring lower edit distance higher entropy 
populations low fitness wide range entropy rastrigin quartic ex periments edit distance quartic experiments 
ant experiments particular show transition high low fitness populations middle containing wide range en tropy edit distance values 
populations achieve lower fitness lower entropy edit distance 
problem suffers local optima populations get stuck sub optimal individuals sub optimal diversity 
high edit distance diversity low high entropy appear sub optimal ant problem 
edit distance edit distance ant best fitness population generation quartic best fitness population generation 
analysis diversity measures edit distance edit distance parity best fitness population generation rastrigin best fitness population generation best fitness vs edit distance diversity ant parity quartic rastrigin experiments 
note point represents population run 
sample different runs population generation requiring runs generations 
important observation better populations tend occur near evolution resulting populations diverse simply search selection mechanisms 
populations large edit distances better fitness values 
reason large edit distances occur runs 
question populations occur late evolutionary process analysed 
populations axis shows vertical line representing generation population occurred 
common trend worse fit populations occur early generations expected fig 
showed fitness improve decrease value initially 
general moving right left fitness values worse better lines get taller axis 
case best populations runs problems 
populations achieve fitness early middle runs 
furthermore fig 
emphasises populations different diversity similar times evolutionary process 
evolutionary periods imply high low values diversity fitness 
generation ant fitness generation quartic fitness 
analysis diversity measures edit dist edit dist generation parity fitness generation rastrigin fitness edit dist edit dist ant parity quartic rastrigin best fitness population axis plotted population edit distance diversity axis generation population occurred axis 
note point represents population run 
discussion diversity measures measures studied sense related hierarchically respect amount formation contain population 
edit distance measures provide fine grain description population structure content differences pseudo give aggregated view population genotype diversity measure simply describes number unique genotypes 
entropy phenotype diversity similarly related 
entropy describes number unique phenotypes population distributed existing types 
experimental study shows consistent correlation edit distance fitness entropy fitness suggesting measures capture important element genetic programming search process 
pseudo isomorph diversity measure capture level information specific genotype diversity sive edit distance 
pseudo isomorph diversity expressed stronger correlations genotype diversity generally correlated edit distance measures 

analysis diversity measures experiments different measures diversity enabled analysis measures correlate fitness behaviour standard genetic pro gramming commonly problems 
results showed additional evidence roots trees fixed early genetic programming evolutionary process change 
demonstrated previous research igel chellapilla mcphee hopper soule foster supported edit distance diversity measures 
phenotypic diversity entropy important due ability selection distinguish tween individuals better maintain constant pressure 
depending problem current run increase decrease phenotype entropy diversity crucial different stages evolution 
change selection pressure beneficial helping avoid local optima problems 
constantly fluctuating values phenotype diversity fig 
demonstrating behaviour 
experiments analysis clear necessarily case 
spearman correlation coefficient showed positive correlation fitness diversity fitness negative correlation edit distance diversity fitness 
sis explain behaviour structurally similar populations create neighbourhood crossover find better neighbours 
crossover initially works structures significantly 
combined selection pressure population begins resemble individual crossover repeatedly combines similar individuals 
success point suggests crossover able population structure find better solutions 
results shown quickly edit distance diversity lost 
appears crossover friendly neighborhood occurs early evolution ary process responsible leading search inescapable local optima quickly 
point argue crossover sufficient operator search tree genetic programming show cases genetic programming solving problems populations recombination operators may working 
just correlation coefficient suggests associations diversity perfor mance infer causation variants higher diversity necessarily cause better performance better performance seen higher diversity type diversity 
caution taken considering search mechanism re combination selection methods play extremely important role shaping individuals populations 
simple implementation differences drastically increase decrease diversity measures 
models causation diversity results defined carefully 
chapter lengths taken validate causal relationship relying experimental evidence previous literature experimental evidence specially constructed model genetic programming behaviour 

analysis diversity measures standard genetic programming compared random search hill climber due loss diversity attraction local optima ross mcphee hopper poli langdon 
results diversity support sis uneven exploration exploitation phases 
initial period adjustment different problem representations selection populations appeared converge edit dis tance diversity 
initial generations run appear represent exploration phase part run exploited better individuals 
adaptive controls diversity se lection pressure mutations extend exploration phase allow global search 
consider initial settling behaviour observed due ease initial solutions 
results hypothesised strong convergence exploitation common structure occurs runs runs exploit structure 
genetic programming may converging structures amenable improvements respect existing population 
algorithm backtracked finding bad structure concentrated effort find structure argued exploit better structures 
essence increasing length exploration adaptively exploring phases local optima may avoided effectively 
increased population sizes higher levels mutation weaker selection pressure models prevent convergence populations islands demes distributed models achieve effect 
summary chapter provided survey measures capture diversity methods employed control diversity genetic programming 
experimental study enabled analysis cor relation selected measures diversity fitness 
results showed important behaviours 
generation generation behaviour specific diversity measures problem specific 
fact representation changes problem different diversity 
pursuit single measure control diversity order improve fitness difficult 

entropy edit distance diversity showed correlation fitness 
re lated change selection pressure level structural convergence allows form hill climbing search 

regression problems weakest correlation measure diversity fit ness suggesting things populations achieve fitness may 
analysis diversity measures captured measures 
different recombination operators large changes parameter values ap plications different problem domains effect results interpretations 
methodology informative complimentary measures di versity allow gain deeper understanding search space algorithm 
search spaces larger complex fine grain measures inefficient 
measures capture right level information efficient critical 
results recommendations applying new methods control diversity order improve fitness correlation fitness diversity investigated 
knowledge correlation fitness measure diversity help enhance diversity measure diversity control method give insight results 
care taken distinguish correlation causation 
lastly relationship exists genotype phenotype ing measures genotype uniqueness probably useful capture phenotype uniqueness 
measure diversity genetic lineages increase population diversity edit distance entropy 
effects change population dynamics examined better understand relationship diversity fitness type search genetic pro gramming carries evolutionary process 
chapter genetic lineages metaphor hill climbing effect increased diversity search 
chapter showed diversity mea conflicting ways 
relationship levels diversity fitness improvement clearly simple hope 
chapter genetic diversity population perturbed increase population edit distance diversity measures chapter entropy 
simple powerful method employed lineage selection 
examining results method metaphor hill climbing support results previous results literature 
lastly sampling analysis performed understand type solutions genetic programming visits course evolutionary process 
genetic lineages system darwinian evolution inheritance provides motivation trans formation operators simple form diversity measurement genetic lineage 
mcphee hopper observed dominant operator subtree crossover preserves root parent genetic material noted poli langdon defined genetic lineages root parent offspring 
authors tracked lineages counted appearance eve individual latest common ancestor population 
eve indi vidual traced back single individual initial population entire final population descended 
latest common ancestor exists trace root parents individuals final population back individual 
definition eve individual root descendant exactly individual initial population 
remember key 
genetic lineages metaphor hill climbing applications crossover root parent non root parent lineage lineage lineage lineage example individuals undergoing recombination second application crossover descendants individual represent genetic lineage 
lineage definition considers root parent offspring relationship 
mcphee hopper showed entire populations quickly lose genetic lineages soon descend individual 
genetic lineages tend share common root shapes contents loss lineages population signifies convergence common tree shape contents rosca ballard langdon poli poli langdon 
tracking progression genetic lineages evolutionary process provides sense loss genetic diversity population little computational cost 
example genetic lineages 
individuals produce offspring crossover 
root parent denoted solid arrow 
generation new individuals belong genetic lineage chapter mcphee hopper genetic lineage defined path root parent child parent recombination 
caricature tournament selection illustrate loss genetic lineages modified version tournament selection 
version represents caricature standard tournament selection placing emphasis selection fitter individuals 
individuals population size sorted ascending fitness order worst best 
tournament size defines number equal sized partitions divide sorted population partition contains individuals 
partitions serve separate worst fit best fit individuals 
assumes unique fitness value individual 
generational algorithm produce child gen eration tournament held find root parent 
population size hold tournaments produce children 
typically tournaments held select 
genetic lineages metaphor hill climbing parents crossover root parent child define lineages tournament select root parent considered 
individual expectation selected tournament times 
simplify model tournament selection pick individual partition partitions 
tournament held winner tournament come child generation genetic lineage came practice individuals randomly selected population tournament 
simulate random nature tournament selection assumed number offspring individual produces generation equal 
variation loss lineages possible increase number genetic lineages evolutionary process explicitly introducing new lineages 
genetic lineages lost different rates 
model selection fitness root parent passed child 
initial individual represents unique lineage generation contain distinct lineages 
individuals unique fitness values passed unchanged children ordering fitness children parents ordering previous generation 
generation maximum number distinct lineages minimum fitness children transfered root parent possible think upper lower bounds loss lineages 
consider upper lower bounds genetic lineage loss remember members partition sorted unique fitness values 
lower bound number lineages preserved generation occur children individuals fitness ordering consistent root parent ordering 
interestingly holds true fitness ordering complete opposite root parent ordering 
case offspring produced application operator root parent undergo small fitness value change parent 
upper bound number genetic lineages preserved generation children ordered randomly compared root parent ordering previous generation 
admittedly caricature tournament selection elitist better individuals partition behaviour emphasised illustrate loss lineages set runs runs genetic lineages probably performing parallel type search 

genetic lineages metaphor hill climbing relevance fitness landscape fitness landscape smooth representation operator fitness function application operator cause relatively small change fitness 
landscape rough small changes individual operator may cause large small changes fitness 
smooth landscape genetic lineages lost quicker 
random changes fitness root parents offspring occurring rough landscape preserve lineages 
generally preferable correlated smooth landscape quicker loss lineages sign search 
loss lineages implies genetic convergence inability escape local optima 
canonical genetic programming subtree crossover genetic lineages share genetic material root downward successive generations 
individuals larger size subtrees inserted root parent relatively smaller lower points respectively luke 
quicker genetic lineage loss leads quicker genetic diversity loss 
evolutionary process sort local search con population tree shape contents 
operator representation fitness function create rough landscape genetic lineages lost slowly genetic diversity preserved longer varied tree shapes tree contents remain population longer 
convergence time increased diversity consequence uncorrelated landscape generally un desirable 
paradox exists respect loss lineages ability improvement 
operator works genetic lineages diversity lost quickly getting algorithm stuck local optima 
operator representation induce rough landscape genetic diversity maintained longer global search may performed 
loss genetic lineages desirable property signifies correlated landscape representation operator signifies loss diversity eventually prevent runs improving 
results chapter showed lower genetic diversity correlated better fitness supporting idea better fitness achieved lineages lost quickly due correlated landscape 
experimental study serves highlight diversity provide analysis effects increased diversity 

genetic lineages metaphor hill climbing experimental study lineage selection better understand effects diversity search simple method ge lineages increase genetic diversity populations 
elitism size shape content bias added 
problem domains investigated compared previous research understand increasing diversity beneficial domains 
definition genetic lineages described previous section combined tournament selection redirect selection pressure fit fit diverse 
lineages provide approximation diversity canonical genetic programming technique require measure diversity significantly changes populations evolutionary process 
goal study technique demonstrate increasing diversity lead dramatic changes search ability genetic programming 
population convergence increased se lection pressure similar individuals creates hill climbing atmosphere disturbed improve worsen fitness depending problem 
method genetic programming hill climbing proposed better 
similarities differences methods explain effects changing diversity 
main challenges search general preventing system getting stuck local optima 
highlighted earlier chapters convergence associated inability run improve related exploitation phase evolutionary process 
problem representation specific methods improve diversity 
methods diversity show improvement fitness typically add elitism suffer additional computation address problem clearly defined understood 
know type diversity needed necessary different problems 
stated ryan needed method attempt explicitly measure genetic differences leads difficulty defining exactly constitutes difference 
difficult understand problem benefit different types levels diversity 
lineage selection lineage selection implemented additional step bias selection different lineages initial population 
perform selection individuals placed groups common genetic lineages 
tournament selection picks individuals picking random genetic lineage random individual lineage 
tournament held random individuals 
genetic lineage equal change contributing individual tournament 
method introduces elitism direct measure size shape content population 
genetic lineages metaphor hill climbing lineage 
lineage lineage lineage pick random lineage 
ind ind pick random individual ind repeat times tournament size tournament example lineage selection 
individual ind randomly chosen randomly selected lineage compete tournament 
fitness 
aim lineage selection maintain diversity population contains individuals just diverse 
shows example lineage selection described follows 
select random lineage current population 
select lineage total number unique lineages consists individuals random individual 
repeat steps produce individuals tournament size tournament consists random individuals random lineages 
forms lineage selection implementations lineage selection allow control genetic diversity ge lineages 
selection schemes described genetic lineages accomplish different objectives 

genetic lineages metaphor hill climbing table experiment problem parameters lineage selection experiments 
functions ant food ahead progn parity nand binomial terminals ant left right move parity binomial erc range maximum generations select random individuals random lineage tournament 
selection gives lineage equal chance participating recombination 
form selection promotes combining individuals different lineages 
potential drawback selection poor quality lineages individuals high fitness 
necessary add bias selecting highly fit lineages high average fitness 
select random individuals random lineage tournaments parent recombination 
form selection promotes recombination genetically similar individuals likened form hill climbing lineage 
assigning bias fit lineages ensuring lineages sufficient number individuals perform tournaments closely observing convergence lineages areas may need addressed form selection 
methods modify standard tournament selec tion scheme force competition breeding lineages force competition lineages breeding lineages force competition breeding lineage 
restrictive method algorithm need consider potential drawbacks 
particularly method forms selection considered efficient implementations familiar models similar dissimilar mate selection distributed models 
results lineage selection lineage selection applied ant parity regression problem domains experi ments control experiment tournament selection experiment employs lineage selection 
table describes parameters experiments 
binomial problem chapter described greater detail 
problems pa 
genetic lineages metaphor hill climbing table ant parity binomial statistics lineage selection control experiments 
significant difference denoted mean values lineage selection 
significance testing done student test confidence level 
ant problem min max mean stdev fitness control lineages nodes control lineages entropy control lineages edit control lineages edit control lineages parity problem min max mean stdev fitness control lineages nodes control lineages entropy control lineages edit control lineages edit control lineages binomial problem min max mean stdev fitness control lineages nodes control lineages entropy control lineages edit control lineages edit control lineages rameters chapter 
main difference parameters chapter binary functions 
syntax trees created experiments remainder thesis restricted binary trees 
figures show behaviour system control lineage experiments 
average fitness 
genetic lineages metaphor hill climbing generation average fitness ant control mean ant control best ant lineage mean ant lineage best average fitness parity control mean parity control best parity lineage mean parity lineage best binomial control mean binomial control best binomial lineage mean binomial lineage best generation generation average mean average best fitness vs generation shown problem experiment type control lineage 
average best average mean fitness plotted generation experiments 
mean run values plotted measures diversity size final generation statistics reported table 
note ant experiments improvement fitness lineage selection experiments significant decrease size increase edit distances lineage selection 
control experiment measures edit distance diversity decreased early runs remained low 
initial increases entropy control experiments followed decreases stagnation 
signifies inability improve spread fitness values uniformity distribution 
hand lineage selection significantly higher levels edit distance diversity 
initial period greater decrease entropy lineage selection increased entropy longer higher values 
shows lineage selection produced significantly smaller individuals 
shows lineage selection distance successive best fit individuals common wrapped functions log division solutions regression experiments obtain extremely high fitness value 
calculating average mean fitness population generation necessary remove individuals calculation avoid skewed results 
performed binomial graphs resulted approximately population ignored calculation 
edit distance diversity non weighted average nodes 
genetic lineages metaphor hill climbing generation ant control parity control binomial control ant lineage parity lineage binomial lineage generation edit distance diversity top tree weighted phenotypic entropy generation generation average measures vs generation shown problem experiment type control lineage 
population higher 
note weighted edit distance measure normalised individual size 
lineage selection produced smaller individuals measure divided average individual size produce graph similar non weighted measure lineage selection experiments remained significantly higher 
ant problem benefit terms fitness improvement lineage selec tion 
fitness parity binomial lineage selection experiments statistically worse high level fitness achieved diverse populations 
behaviour re phenotypic entropy 
difference entropy values control lineage selection experiments appears somewhat correlated fitness improvement 
ant problem entropy stay higher levels similar initial behaviours 
problems entropy lower initial generations see 
indicates ability achieve high entropy hindered lineage selection parity binomial problems resulting worse fitness 
ant problem lineage selection helps achieve higher levels entropy slightly better fitness 
ant experiments shows generation fitness improved versus best fitness run 
lineage selection ant problem finds better fitness average edit distance diversity non weighted 
genetic lineages metaphor hill climbing generation ant control parity control binomial control ant lineage parity lineage binomial lineage edit distance diversity top tree weighted generation edit distance successive best fit individuals control lineage selection experiments 
generations control experiment 
indicator premature conver gence avoided 
parity lineage selection experiments similar change best fitness generations slightly worse fitness 
binomial results significant respect fitness generation improve ments 
discussion metaphor hill climbing lineage selection changes evolutionary dynamics diversity edit distance phenotypic entropy 
measures diversity increased expected decrease chance genetic programming stuck local optima 
ant problem fitness improve 
lineage selection increases diversity shifting focus selection away best fit individuals fit individuals different lineages 
note normal selec tion pressure returned lineages lost 
ant problem benefit reduced selection pressure added diversity improving diversity reducing selection negatively affect fitness binomial parity problems 
metaphor genetic program ming performing type hill climbing search examined help understand results 
standard genetic programming convergence population similar programs leads re combination characterised type hill climber 
may think genetic programming run short parallel search period convergence occurs 
point recombination coupled selection pressure elitism converged population behaves hill climber single program 
considered metaphor standard genetic pro gramming search changes algorithm weaken strengthen performance 

genetic lineages metaphor hill climbing best fitness run control control mean generation best fitness run lineages lineages mean generation ant problem best fitness run plotted best fitness run 
single standard deviation bars plotted means directions 
artificial ant langdon poli described ant problem highly deceptive genetic program ming 
problem contains numerous solutions lot symmetry guiding force encourage ant travel particular path 
authors showed ant problem solved better genetic programming simulated annealing hill climbing techniques 
population mutation search performed considerably better variant strict hill climbing allowed trees smaller larger typically produced subtree crossover 
population search uses mutation maintain high amount diversity similar performing hill climbing searches parallel 
search method deal deception better get stuck local optima frequently explains better performance 
lineage selection adds similar component parallel search ant problem 
high edit distance diversity maintained selection pressure reduced creating parallel hill climbing effect escapes local optima better 
individual stuck local optima deception diverse population contain individual significantly different allows run continue 
lineage selection increases maintains higher entropy longer fitness values uniform distributions 
control experiments entropy quickly rises declines suggesting short period exploration higher likelihood stuck local optima 
note weighted edit distance best generation individuals considerably higher lineage selection generations generations entropy values experiments diverge 
difference 
genetic lineages metaphor hill climbing best individuals phase closer root lineage selection 
explorative search phase appears place lineage selection 
parity reilly oppacher juels studied multiplexer problem genetic programming similar hill climbing type methods parity multiplexer problems similar functions terminals objectives identical 
hill climbing techniques appeared superior type problem 
genetic programming improve performance hill climber 
de jong 
multi objective method kept non dominated individuals individual fitness size diversity produce superior performance genetic programming parity problem 
diversity edit distance trees 
small populations kept non dominated individuals 
authors noted diversity required prevent convergence resulting run failure uncommon degree greediness elitism 
hill climbing appears perform problem multi objective method simulates hill climbing 
best fitness run average size generation best fitness run control lineages average size individual generation best fitness parity experiments 
lineage selection problem decreases selection pressure prevents loss diversity convergence 
lineage selection appears remove attributes genetic programming allow behave hill climber 
additionally size individuals significantly reduced lineage selection seen 
graph shows best fitness run plotted average size individual generation 
parity problem distinctive increase size associated improvement fitness 
hypothesised additional factor responsible poorer fitness lineage 
genetic lineages metaphor hill climbing selection 
code growth reducing methods luke showed reducing size solutions parity multiplexer problems size restricted unrestricted spaces effect worsening fitness compared standard runs prob lems solving fitness cases requires terminal values 
example parity domain absence boolean variables program result half test cases potentially solved 
benefit programs contain copies terminal increase chance properly 
adding additional elitism computation time lineage selection improve fitness results 
problems known solutions need particular terminals functions sense encourage inclusion 
binomial daida 
provided thorough investigation increasing ephemeral constant range binomial problem harder 
authors draw attention inter play tween content context functions terminals representation 
different solu tions exist binomial problem combining parts different solutions sense 
level deception exists similar ant problem due differ ent solutions 
ant problem functions terminals preserve degree semantic meaning different contexts 
moving constants arithmetic functions pro grams regression problems ensure meaning new contexts 
dag directed acyclic graph representation genetic programming regression problem mon author introduced diversity method highly elitist 
performance showed best fitness achieved faster smaller population sizes elitist diversity measure 
regression problems appear pose fold problem finding approximation fit data points attempting reduce semantic changes nodes crossover 
case increasing genetic diversity increase chance crossover problems nodes changing context 
converged population may contain fewer nodes similar contexts improve search performance 
little selection diversity cause problems making complex problem domain 
remarks increasing diversity beneficial genetic programming 
results shown increasing genetic differences populations allows global search local optima avoidance 

genetic lineages metaphor hill climbing results shown higher genetic diversity leads code growth genetic diversity adds longer periods entropy increase 
higher entropy indicates explorative search lower entropy results selection pressure individuals fitness value 
slower increase entropy higher genetic diversity appears decrease hill climbing behaviour previous research shown effective solving problems 
methods increase diversity improve fitness clearly state motivation increase type diversity beneficial 
diversity methods may justified right elitist strategies supplier programs local search method 
genetic programming searches solutions objective program representa tions 
task evolving structure content solution complex difficult understand daida reilly hu 
research chapter earlier chapter focused understanding relationship diversity search particularly kind level diversity encourages perfor mance 
far chapter showed increased diversity negatively positively effects performance problems 
metaphor hill climbing search helped explain results deception appeared cause poor performance 
understand diversity search particularly respect solutions population contains search type structures tree shapes behaviours genetic programming samples evolutionary process examined 
sampling unique structures behaviours research code growth operator biases help understand type tree shapes sampled genetic programming 
subtree crossover representation solutions code growth bloat soule foster langdon langdon banzhaf langdon langdon soule heckendorn luke :10.1.1.35.6772
programs continue grow tend grow deeper trees 
space tree shapes visited genetic programming search studied soule foster langdon langdon daida showing types shapes easily sampled :10.1.1.35.6772
problem solution easily sampled structures problem difficult genetic programming daida 
respect growth solutions subtree crossover operator shown local operator upper portion trees fixed variations mainly occur near leaves rosca ballard igel chellapilla poli langdon haeseleer 
diversity research demonstrates effects convergence structures 
genetic lineages metaphor hill climbing mcphee hopper chapter 
content trees functions terminals provide solution problem 
stochastic sampling techniques proportion solutions increasing size shown increase certain threshold langdon langdon poli 
space increasingly larger solutions yield higher proportion solutions 
fitness function typically coarse description behaviour difficult understand type solutions sampled genetic programming 
comparisons tween genetic programming hill climbing methods similar representations opera tors helpful langdon poli reilly oppacher reilly oppacher juels wattenberg 
genetic programming performed better worse various problem domains comparisons emphasised domains hill climbing explorative search beneficial 
results particularly useful explaining effects genetic diversity seen earlier chapter 
case solutions behaviour remains hidden fitness function value 
better understand sampling tree shapes behaviours search section exam ines number unique tree shapes behaviours enriched definition fitness sampled 
structure aspect study provides additional views search process coarseness fitness function values addressed problem specific behaviour descriptions reflect fitness elucidate behaviour solutions better 
problems measures problems earlier chapter control experiments empirical study 
study problem specific measures solution behaviour 
evolutionary algorithm scalar value typically define solution behaviour multiobjective methods may vector 
value defined fitness function able distinguish different degrees solution quality 
coarseness leads deception artificial ant problem langdon poli fails identify solutions rela tively current population extremely poor continue search case small solutions regression problems 
measuring sampling behaviours run fitness value may informative problem specific definitions behaviour defined follows ant food item uniquely labeled create vector representing order food collected 
genetic lineages metaphor hill climbing error candidate solution target vector angles behaviour definition example regression domain standard fitness calculation mean squared error behaviour definition 
parity vector integer values size total classified correctly con tents indicate test cases correctly classified regression vector integer values represents angles test points hor taken solution 
definitions capture information typical scalar value fitness reduction complete behaviour solution 
ant behaviour represents unique sequence food collection largest sequence smallest 
parity behaviour describes specific instances correctly classified 
definition behaviour regression domain describes change angle horizontal function point candidate solution 
casting angles integers successive angles vector identical kept 
size vector complexity solution number bends graph function directly fitness value target function considered 
highlights differences standard fitness function definition behaviour proposed 
section tracking sampled structures performed considering binary tree shapes regardless tree content 
number unique tree shapes size sampled run algorithm counted 
canonical genetic programming system run generations generational algorithm population size 
initial tree creation carried ramped half half tree sizes depths 
subtree crossover internal node selection set probability maximum depth recombination mutation duplication 
random runs collected problem domain 
results problem domain depicted graphs showing average number unique tree shapes sampled unique behaviours sampled size 
line represents cumulative total unique tree shapes behaviours generation run 
number unique structures number unique behaviours 
genetic lineages metaphor hill climbing size structure generation generation generation generation generation generation size behaviour generation generation generation generation generation generation ant results cumulative sampling unique structures behaviours 
successive generations highlighted symbols 
space lines repre sents number new unique tree shapes behaviours size sampled generation 
larger space effort genetic programming spends searching unique tree shapes behaviours size 
analysis results shows structure behavioural sampling ant problem 
distinct trend highest number unique structures sampled sizes 
bottom graph shows sampled behaviours size ant problem 
note number number unique structures number unique behaviours 
genetic lineages metaphor hill climbing size structure generation generation generation generation generation generation size behaviour generation generation generation generation generation generation parity results cumulative sampling unique structures behaviours 
unique behaviours sampled sizes generation greatly reduced approximately generations 
unusual peaks behaviours size number unique sampled behaviours greatly decreases behaviours large size represent fit solutions 
sampling structures parity problem shown top graph 
problem samples fewer unique structures larger sizes 
number unique behaviours sampled parity problem shown bottom graph 
behaviour maximum length represents correct classifications 
pos sible unique behaviours length expected random strategy classification size nearly unique behaviours sampled course run 
genetic programming spends number unique structures number unique behaviours 
genetic lineages metaphor hill climbing size structure generation generation generation generation generation generation size behaviour generation generation generation generation generation generation regression results cumulative sampling unique structures behaviours 
large amount effort searching neutral behaviours equivalent random strategy slight peaks fitness 
symmetry parity bit string instances probably rewards solving additional instance symmetrical instance solved correctly explaining fitness concentrated random strategy initially followed instance additionally solved 
regression problem sampling structures shown top graph 
distinct trend seen sampling unique structures sizes near 
fewer unique structures larger sizes sampled 
number unique behaviours sampled regression problem depicted bottom graph shows strong attraction behaviours size 
generations run sample unique behaviours size 
behaviour directly 
genetic lineages metaphor hill climbing reflect fitness behaviours may may neutral fitness 
binomial fitness function contains equidistant values generate target values testing individual 
angle gradient successive values nearly greater 
behaviour measure behaviour represent function ideally need close angle changes points 
confidence bars average distributions figures shown 
left right ant parity regression structures shown top row behaviours bottom row 
sampling runs fairly uniform greatest variations occurring near peaks regression problem 
discussion sampling search computer programs know program better 
intuitive broad sampling complex solution space population genetic programming reason algorithm may considered useful 
early cramer koza laid foundations procedural representation single value scalars fitness combined complex representations evolutionary algorithm domains 
may straightforward apply methods program evolution genetic programming conflicts arising representation documented daida reilly daida reilly goldberg 
results sampling unique tree shapes unique behaviours describe genetic programming ability sample complex solution space 
behaviour definition enriched description sampling solutions genetic pro gramming 
ant problem geographic distribution food pellets ant trail may allow ant behaviours able collect pellets unable easily collect 
problem standard definition fitness creates deception langdon poli shown negatively impair fitness improvement 
grad ual decrease ability sample different behaviours higher fitness explains genetic programming outperforms hill climbing methods search poor solutions 
peaks behaviours sampled size may represent local optima trap search 
behaviour distribution parity problem particularly interesting shows ability genetic pro gramming sample different near random type behaviours 
sampling high numbers different behaviours promising cause deception negative contextual shifts subtrees explaining hill climbing elitist strategies effective problem reilly oppacher juels wattenberg 

genetic lineages metaphor hill climbing regression problem behaviour directly reflect fitness value behaviour reflect complexity solutions 
preference sampling behaviours small size complexity caused neutrality fitness values result biased structure sampling 
case inability increase structure size hypothesized positively correlated inability increase complexity solutions 
hypothesis plausible regression domain considering subtree crossover typically functions near leaves terminals 
respect sampling unique structures various sizes problems showed genetic programming code growth bloat unique tree shapes large sizes sampled 
fewer number big tree shapes sampled 
remember number different programs tree shape increases exponentially increase size 
fewer large unique tree shapes sampled algorithm sampling different programs shapes 
different structures size sampled frequently appear attractive genetic programming reason 
depth limit imposed mechanics subtree crossover possible causes 
poli mcphee examined distributions variable length linear genomes stan dard crossover flat landscape 
authors distribution genome lengths sampled search resembled gamma distribution shorter genomes sampled longer ones 
respect results non cumulative version figures examined distribution unique tree shapes sampled ant regression experiments resembles gamma distribution 
clear parity experiments additional analysis distributions provide support number unique structures number unique behaviours size structure size behaviour number unique structures number unique behaviours size structure size behaviour number unique structures number unique behaviours size structure size behaviour confidence bars average cumulative structure behaviour sampling distributions 
left right ant parity regression problems structure top behaviour 

genetic lineages metaphor hill climbing results poli mcphee 
results suggest possibilities improve performance 
sizes behaviours sampled high numbers may represent areas deception fitness space 
deception may reduced search away areas neutral fitness 
previ ous research showing positive correlation high fitness diversity fitness result avoided deception leading better fitness 
population contains different equal fitness behaviours may wish move search de region search space 
leading ant follow specific food trail reduced deception improved fitness langdon poli 
regression domain component complexity fitness function may improve performance genetic programming 
similarly parity fitness function amended reflect instances solution solves correctly reduce deception 
course exploration global search exploitation local search ability affected methods employed reduce deception 
summary chapter described genetic lineages serve simple measure diversity representation natural selection 
possible uses exist genetic programming lineages variant selection describe search process 
relation ship genetic lineage loss diversity fitness landscape described 
correlated landscape application operator causes small changes fitness encourage quicker loss genetic lineages diversity 
uncorrelated landscape lose genetic lineages diversity slower rate 
lineage selection increase diversity reducing selection pressure fit fit diverse 
caused performance variance problem domains 
results analysed light previous research conclude genetic programming viewed performing type hill climbing search adding diversity worsen fitness problems clearly benefit elitism hill climbing environment 
deception embedded problem improving diversity may help avoid local optima ant problem may compound deception maintaining presence binomial problem 
section chapter examined sampling unique tree shapes unique behaviours genetic programming 
enriched definition behaviour provided information typical fitness functions 
genetic programming algorithm requires search structure content important understand issues deception effort 
genetic lineages metaphor hill climbing algorithm spends searching different types behaviours structures 
behaviour sam pling results showed sampling trends help explain previous diversity research suggests new ways improve search 
sampling results showed different behaviours fitness val ues problems genetic programming samples higher rates 
low phenotype diversity entropy indicators deceptive regions search space consider ing results chapter showing correlation high values measures better fitness better search achieved deceptive regions avoided 
adaptive measures recognize signs deception possibly help improve search 
lastly structure sampling results showed bloat code growth occur fewer different unique tree shapes large sizes sampled 
problems require specific structures large sizes difficult genetic programming 
chapter relationship diversity aspects search processed examined 
particular effects population diversity examined respect code growth problem difficulty 
chapter effects population diversity code growth problem difficulty issues code growth problem difficulty introduced chapter 
chapter various forms diversity shown complex relationship fitness improvement edit distance fitness measures represent important properties 
chapter analysis diversity illustrating expected diversity loss concept genetic lineages caricature tournament selection 
chapter highlighted poten tial metaphor genetic programming search signs consequences deception search space 
results apply important issues code growth problem difficulty 
chapter diversity closely examined respect problem instances tun ably difficult exhibit varying rates code growth 
results strongly support causal hypothesis relating code growth diversity 
hypothesis supported previous lit experiments constructed model code growth problem difficulty 
furthering understanding diversity problem difficulty chapter provides important insights suggest new ways addressing issue bloat 
code growth problem difficulty challenging problems genetic programming application genetic programming increasingly difficult problem instances increase solution size correlated improvement 
daida 
demonstrated genetic programming difficulty solving harder problem instances solutions generally larger size take longer find numerous population 
traits increase size corre 
effects population diversity code growth problem difficulty sponding fitness improvement worrying genetic programming practitioners 
continued growth solutions difficult problems limiting factor ity algorithm computational resources exhausted algorithm halt reaching solution 
existing theories code growth langdon poli luke soule heckendorn provide mechanical basis understanding programs variable length representation tend grow size predict rate growth explain optimal solutions vary size large degree 
additionally methods limit code growth remove non functional code solutions may lead worse performance ek rt luke soule foster zhang hlenbein 
symbolic regression problems differently scaled difficulty observe behaviour fitness code growth diversity 
growth related instance difficulty dynamics population viewed measures diversity aid standing phenomenon 
symbolic regression problems main reasons 
firstly large body existing theoretical studies regression problems understand genetic programming 
secondly easier reason increasing difficulty fitting mathematical functions increasing difficulty types problems 
regression problems increased difficulty building study daida 
binomial problem varying erc ranges increase difficulty 
chapter binomial problem consists approximating functions function terminals ranges referred lated unity larger ranges create increasing difficulty 
binomial function shown graphically interval top left 
solutions function represented easily different combinations functions terminals 
easiest version problem expected allow close optimal initial solutions new optimal solutions acquired generation 
harder instances cause difficulty finding solutions early 
complement problem method generate random polynomial instances ek rt meth 
random polynomials generated degree non zero coefficients real roots range higher degree polynomials larger number roots close zero values take interval close zero 
genetic programming easy find relatively close fit solutions form straight lines close axis 
difficult improve solutions find really approxima 
effects population diversity code growth problem difficulty tion especially relatively fit simple individuals spread genetic programming population generations 
polynomials increasing degree non zero coefficients real roots interval constitute class increasing difficulty problem instances suitable studying behaviour genetic programming properties minimum required depth 
higher degree polynomials approximated easily function set 
term degree formed sequence general require larger solutions approximation higher degree polynomial 
polynomial real roots non zero coefficients expressed tree functions multiplications subtractions terminals 
minimum depth complete tree representing polynomial depth maximum allowed depth 
follows requirement polynomials higher degree harder genetic programming approximate allowing lim depth trees space genetic programming grow introns 
introns refer non functional code program 
cases trees efficient nodes express solution 
approximation ability 
lastly matlab routine assign degree approx imation ability polynomials 
finds best polynomial degree fit set points 
polynomials degrees shown best fitted polynomials degrees respectively errors order approximation error highest degree polynomial 
close approximate polynomials degree generated polynomials degree furthermore generated polynomials best fit polynomials similar degree successful application genetic programming problem find polynomials similar degree 
type increased difficulty posed random polynomials binomial function similar 
binomial problem cope erc values spanning increasing range 
likewise random polynomials degree increases fixed erc range appropriate polynomials contain variations smaller magnitude 
assessing differences behaviour easy difficult instances measures diversity 
entropy measure indicating distribution individuals fitness values subsequently level selection pressure edit distance measure indicating structural diversity population 
measures described 

effects population diversity code growth problem difficulty binomial problem values degree polynomial degree polynomial degree polynomial binomial problem generated polynomial functions degree upper right bottom left bottom right 
inset degree shows range smaller range relatively easy genetic programming find close fit difficult fine tune approximation 
population measures entropy edit distance diversity better understand distribution fitness values selection method ability population represent solutions problem instance mea sure entropy fitness described detail chapter 
entropy measure represents chaos system respect distribution fitness values population rosca 
increase entropy reflects system population fitness values moving state chaos different fitness values 
measure gives sense fitness values distributed fitness classes uniform distribution fitness classes extreme entire population belonging fitness class 
measuring genetic diversity populations difficult aspects tree shapes contents measured 
study measure edit distance trees introduced chapter edit distance chapter non weighted edit distance 
measure understand structurally similar tions give insight search process 

effects population diversity code growth problem difficulty table experiment problem parameters binomial random polynomial experiments 
population size functions terminals polynomial erc range binomial erc range unity experimental investigation tournament selection size control maximum tree depth ramped half half tree creation minimum depth maximum depth maximum generations parameters chapter independent random runs performed problem instance 
experiment problem parameters described table 
fitness problems calculated summing squared difference point problem instance function function produced individual 
problems minimisation problems ideal fitness zero 
report adjusted fitness raw fitness ideal value 
ran dom polynomial experiments random seed selected generate polynomials degree 
polynomials polynomials graphically 
binomial random polynomial results results evaluated validate increase difficulty instances 
measures entropy edit distance diversity size examined general hypothesis developed 
effects population diversity code growth problem difficulty binomial fitness values placed bins bin size max min control unity polynomial fitness values placed bins bin size max min degree degree degree problem instance final population performance values discretised placed binomial polynomials bins show distribution 
bins left instance represent better fitness 
explain induces faster rates code growth 
section looks closely correlation growth measures 
establishing difficulty daida 
established tunable nature binomial problem demonstrating increased difficulty reduced frequency solutions longer took solutions increased size solutions 
best fitness runs experiment placed bins plotted histogram 
left bins experiment corresponding number best solutions larger easier instances 
binomial results show clear trend solutions increasing erc ranges 
case polynomial results trend clear degree degree 
note large number poor fit runs degree polynomial right bins 
failed runs tend regression problems lack initial fitness improvements causes run stuck poor local optima 
nature degree polynomial amplifies effect expect 
shown degree polynomial produces mixture results generally shows expected behaviour 
results daida 
reproduced experiments carried 
shows similar results generated polynomials 
trends apply binomial instances random polynomials 
increasing erc range worsens best fitness increases size depth solutions best fitness 
difficulty increased best run solutions generations 
note fitness function remains binomial problems polynomial nodes nodes nodes nodes 
effects population diversity code growth problem difficulty control fitness unity fitness fitness nodes fitness control generation unity generation generation generation control depth unity depth depth depth results binomial experiments 
average size population containing best run individual plotted best run fitness left column generation best run individual occurred middle column average depth population right column 
circle corresponds run 
fitness function change 
polynomial experiments distinguishing feature run performance amount improvement genetic programming find 
difference behaviour seen 
higher degree polynomials contain smaller variations fitness functions stances 
higher degree polynomials start lower initial fitness improvement rate initial generations ones observed sign performance 
higher degree improvement evolutionary process bigger deeper solutions 
depth analysis behaviour runs respect size entropy edit distance follows 
nodes nodes nodes 
effects population diversity code growth problem difficulty fitness fitness fitness generation generation generation depth depth depth results random polynomial experiments 
average size population containing best run individual plotted best run fitness left column generation best run individual occurred middle column average depth population right column 
circle corresponds run 
binomial results increasing range instances control unity increasingly difficult genetic programming solve 
shown fitness adjusted fitness con quickly fewer fitness values individuals larger deeper larger erc ranges 
additionally edit distance diversity slightly higher easier instances 
counterintuitive expect earlier convergence sim ilar programs easier instances 
bottom graph entropy quickly falls rises continues decrease 
confirms solutions population loses unique fitness values 
solutions fitness value entropy de creases 
easier instances contrast difficult instances solved different programs 
explains diversity higher case 
populations converge lose diversity easier instances converge varied selection fit individuals 
note time entropy begins slowly decrease marks time code growth begins slow 
easier instances occurs just generation instance generation 
adjusted fitness nodes 
effects population diversity code growth problem difficulty control unity generation generation entropy control unity depth edit distance control unity generation generation control unity generation control unity binomial problem adjusted fitness depth nodes edit distance entropy versus generation control unity experiments 
points represent average runs 
random polynomials seen increasing degree random polynomials results characteristic increased difficulty 
looks rate improvement decreasing degree increases 
higher degree instances cause higher rate code growth populations deeper trees 
easier instance degree higher edit distance diversity harder instance degree 
noted degree polynomial tends perform uniformity binomial instances 
higher rate code growth lower edit distance diversity seen degree polynomial results 
adjusted fitness nodes 
effects population diversity code growth problem difficulty degree degree degree generation generation entropy degree degree degree depth edit distance degree degree degree degree degree degree generation generation degree degree degree generation random polynomial experiments adjusted fitness depth nodes edit distance entropy versus generation degree polynomials 
points represent average runs 
major difference results binomial polynomial experi ments initial decrease entropy easier harder instances 
initial tion entropy important final analysis demonstrates interesting difference problems 
increase instance difficulty results initial decrease entropy 
smaller decrease initial entropy observed lower degree polynomial 
erc range increased binomial problem initial populations able represent unique fitness values smaller erc ranges 
erc range contain number usable constants values functionally identical especially small numbers may cause division zero similar precision representation 
polynomial experiments initial size fitness correlation 
effects population diversity code growth problem difficulty control unity generation size entropy correlation size edit distance correlation control unity control unity generation generation spearman correlation size fitness edit distance entropy binomial experiments 
greater loss entropy degree polynomial shows initial difficulty genetic program ming representing different initial solutions function closely represents straight line 
observations refer populations undergo initial rounds selection higher lower decrease entropy 
discussion causal model increase size depth time needed best run solutions increased difficulty clear binomial polynomial problems 
problems small solutions early late generations 
increased size expected generations runs appear different rates growth 
cause varied rates code growth 
observing behaviour entropy figures seen harder instances contain longer periods higher binomial increasing polynomials entropy 
entropy describes number different fitness values distribution population lower entropy cause selection random 
selection faced population identical fitness values extreme low entropy selection purely random 
size fitness correlation 
effects population diversity code growth problem difficulty generation size entropy correlation size edit distance correlation generation generation spearman correlation size fitness edit distance entropy random polynomial experiments 
lower decreasing entropy easier instances induce lower selection pressure 
figures show evolution spearman correlation coefficient average size population best fitness raw fitness lower better entropy diversity respectively 
correlation calculated th generation generation th afterward 
generally size negatively correlated fitness low fitness large size negatively correlated edit distance diversity low edit distance large size positively correlated entropy high entropy large size 
clear trend bigger individuals populations higher entropy lower edit distance 
degree polynomial exception erratic correlation edit distance size appears contain aspects degree polynomial degree polynomial 
degree polynomial individuals initially subsequently selected similarly degree 
initial period code growth optimal solutions represented easily different programs leading reduced entropy code growth degree lower diversity initial selection 
hypothesis 
effects population diversity code growth problem difficulty increase instance difficulty difficult find programs population converges find similarly optimal sub optimal programs 
case easier instances entropy decreases population converges individuals optimal sub optimal fitness 
harder instances lack behaviour causes higher entropy decrease quickly maintaining higher selection pressure 
non decreased selection pressure hypothesised cause code growth diversity causes code growth 
hypothesis causal relationship difficulty entropy diversity growth shown 
experiments show evidence higher entropy genetic diversity higher rate code growth harder stances 
supporting evidence conjectures higher selection pressure lower diversity cause increased rate code growth 
high selection pressure cause growth 
tackett suggested rate growth proportionate amount selection pressure tackett langdon poli showed removing selection pressure stops code growth 
see effect varied selection pressure code growth look different selec tion schemes objective functions literature 
smith harries investigated selection schemes variable tournament sizes show trend selection pressure generally leads reduced code growth 
poli studied method reducing code growth periodically worsening fitness average sized individuals 
control experiment code growth control results fig 
page show trends smaller tournament sizes producing growth 
considering theories code growth particularly individuals similar size shape produce children worse fitness dissimilar individuals increased rate growth expected higher selection pressure 
case higher selection pressure pick individual repeatedly 
algorithm contains bias producing bigger individuals bigger children higher chance survival repeated selection individuals consistently produce offspring turn better chance survival 
low diversity cause growth 
population similar shape content selection mate similar individuals 
argument individuals happen fit 
effects population diversity code growth problem difficulty difficult fewer solutions high entropy higher selection pressure low diversity easy low entropy high diversity lower selection solutions pressure higher rate code growth key observed conjectured lower rate code growth symmetrical hypothesis difficulty effects rate code growth maintaining higher levels entropy causes diversity selection better individuals cause similar individuals big create bigger offspring 
higher rate growth generally occur individuals size shape 
individuals similar size shape exchange similar size subtrees produce offspring 
theories code growth offspring slightly larger biased higher chance survival 
offspring tend similar size parents slightly bigger slightly smaller producing similar size individuals generation higher rate growth 
contrast population high shape content diversity 
diverse population terms size shape contents offspring varied size smaller larger parents 
growth slower case 
dissimilar individuals may produce larger offspring similar offspring lower chance survival offspring similar individuals 
diverse population produce code growth consistently low diversity pop ulation 
higher selection pressure reverse effect low diversity selecting best individuals similar 
assuming code growth generally occurs fitness improvement difference difficulty sufficiently explain difference entropy diversity rate growth 
regression problems contain possible conflicts content context noise introduced protected division operator wide range intron neutral code effects lead varied rates growth 
causal hypothesis described capture important aspects lead increased rate code growth influenced factors 

effects population diversity code growth problem difficulty model difficulty assess results model biases introduced specific problem domain fitness function model created 
trees contain dummy functions terminals calculate fitness 

fitness assigned arbitrarily tree shape content 
individuals initial fitness best fitness 

offspring size larger parent awarded small fitness im provement offspring smaller parent penalised small amount 
incorporates theories corresponding empirical evidence code growth 
model consists binary trees initially full nodes 
algorithm population size tournament selection size subtree crossover recombination generate initial population assign uniform fitness generation individual assign best fitness size populations tournament selection find parents create single offspring assign offspring fitness root parent offspring smaller root parent add fitness fitness minimum subtract indicates hardness problem 
smaller value denotes event solutions individuals difficult problem 
higher probabil ity corresponds situation early individuals easily represent solutions generation new individuals fitness easy problem 
fact size larger individuals rewarded represents general sus community growth seen improved performance canonical algorithm 
note rate growth investigated assignment ideal fitness independent size 
average fitness entropy 
effects population diversity code growth problem difficulty generation generation nodes edit distance generation generation model difficulty growth experiment results values probability 
range show marked difference easier harder instances 
easier instances values induce lower entropy diversity contribute slower rate code growth 
effect similar results symbolic regression instances earlier 
difficult instances induce higher entropy lower diversity dually contribute faster code growth 
results support previous conjecture reducing difficulty instances way leads lower selection pressure entropy diversity due selection pressure 
factors cause different programs recombined produce code growth 
recommendations relationship size fitness complex 
previous research investigated nal dependencies nodes node node interactions regression problems 
shifting nodes programs result semantic changes crossover 
increase program size may help buffer detrimental semantic changes 
size necessary part fitness function increase size results computational cost increasing burden simulation time 
additionally attempts reduce size result weaker fitness illustrate negative consequences directly size 

effects population diversity code growth problem difficulty genetic programming favour larger trees methods attempt limit code growth 
standard method deal code growth place limit size individuals koza luke poli 
measure shown difficult beat respect algorithm performance 
ideal sizes particular problems generally unknown placing limit size unforeseen consequences trees find harder replicate size limits 
genetic programming applied complex problems clear scale limits size appropriately 
parsimony pressure common method control size burke iba luke luke rosca 
method favours fitter smaller individuals 
degradation performance due parsimony pressure studied soule foster soule foster 
noted pressure reduce size increases failure runs populations converge small poorly fit individuals 
variations methods exist vary relative importance size fitness 
drawback require large parameter search optimality luke 
zhang hlenbein adaptive pressure allowed initial increase size increasing parsimony pressure 
allowed method find better fitness required problem specific tuning parameters 
methods add size objective fitness objective creating multiobjective problem de jong ek rt meth 
smaller size similar fitness smaller population sizes reported benefits methods 
specific recombination operators methods combine sized individuals lang don requiring improvement fitness children reilly oppacher approaches reducing code growth 
methods attempt reduce amount code 
generally large parameter search problem specific modifications methods reduce code growth worsen fitness 
high rates growth necessary solving difficult instances small solutions 
increased rate growth appears effect higher selection pressure lower genetic diversity 
methods remove large indi pressure population away increased growth directly negative effects 
cases fitness occurring neighbourhood large individuals biasing search away performance worsened 
recommended method reduce rate growth size solutions 
methods reduce rate code growth gradually indirectly adaptive control selection pressure population diversity recombination may effective strategy code growth 

effects population diversity code growth problem difficulty decrease entropy poor ability finding initial dissimilar solutions low dissimilarity parents recombination possible signs higher rate code growth follow 
events occur decreasing selection pressure encouraging recombination dissimilar individuals possible ways lower rate growth maintaining search 
summary chapter investigated effects population diversity examining relationship problem difficulty varied rates code growth 
problems different types difficulty simplified model genetic programming understand relationship 
causal hypothesis formed links difficulty higher entropy turn causes se lection pressure loss diversity 
increased selection pressure lower diversity re higher rate code growth 
hypothesis consistent previous research 
recommendation controlling genetic diversity entropy selection pressure grad effect rate code growth response direct methods negative effects 
results chapter experiments regression domain variety problem instances 
earlier chapters displayed varying levels results problem domains diversity fitness trends generally consistent 
tions chapter relevant domains 
correlation fitness diversity investigated chapter complemented chapter relationship size fitness size edit distance diversity size entropy 
lastly causal hypothesis code growth appears consistent results pre sented earlier chapters literature additional research beneficial confirm specific aspects hypothesis validity problem domains 
understand role population diversity genetic programming chapter examines ability dissimilar individuals produce offspring 
chapter diversity survivability niche island models population diversity effects aspects evolutionary process 
example number unique fitness values current population effects selection pressure 
high amount genetic differences indicated previous chapters high edit distance diversity produce slower code growth 
low amounts genetic differences low edit distance diversity describes convergence lead lower selection pressure 
diversity obviously impor tant topic genetic programming 
adequate diversity population may unable produce variations improve solution quality 
increasing diversity prevent cient exploitation convergence 
respect search diverse individuals contribute evolutionary process 
successful members population account genetic dissimilarity producing new solutions search 
survivability dissimilar fit individuals examined chapter establish role search process 
tree string problem introduced empirical study 
problem similar attributes domains constructed problems 
results study compared survey distributed related methods diverse fit individuals differently 
chapter surveyed previous measures methods diversity 
chapter survey complemented survey distributed models related methods 
analysis study detailed proposal improve genetic pro gramming search encouraging recombination genetically similar individuals means speciation island model 

diversity survivability niche island models previous distributed evolution methods proposed evolutionary computation control diversity prevent convergence distribute individuals different areas search space 
include niching methods diversity methods mate selection techniques distributed population models 
island model cohoon example distributed population model sub populations isolated selection breeding evaluation 
islands focus evolutionary process subpopulations migrating individuals islands 
vari ations distributed models islands demes niching methods 
tuning parameter settings model functionality different models similar 
different parameter algorithm settings largely define objectives models respect similarity dissimilarity mating elitism selection pressure 
methods simulate distributed evolution specific forms selection nation 
example method lineage selection chapter implemented allow recombination individuals lineage similar shape content 
effect lineage selection encourage kind similarity mate selection 
previous methods focus selection recombination particular individuals particular features individuals included section 
initially methods evo algorithms examined followed applications specific genetic programming tree representation 
evolutionary genetic algorithm models common form island model uses fitness probabilistic selection migration selection replacement 
breeding evaluation typically carried isolation island 
designed distributed model polytypic concept species represented types capable mating producing viable offspring 
generation migration sent best individuals population neighbour replacing worst individuals 
tanese parallel genetic algorithm implemented hypercube structure 
migration occurred periodically selected fitness replaced individuals selected fitness receiving population 
belding extended tanese selected choosing individuals local population predefined ordering effectively simulating random migrant selection strategy 
whitley 
investigated island model natural advantage finding 
diversity survivability niche island models linearly separable problems 
authors concluded problems increase population size yield better results island models may better search solution space 
whitley noted migration additional selective pressure island model ideal adding pressure beneficial problem 
cant paz building block schema theory develop equations predict deme sizes topologies parallel island model genetic algorithms 
author concluded specific communication topology probably irrelevant degree connectivity topology 
concept random migrant selection replacement introduced island model evolutionary algorithms cohoon 

island model isolated pop different geographical locations 
populations different environments defining fitness relative population individuals migrated mesh hyper cube topology 
consistent biological motivations noted migration occur period stasis 
due difficulty defining stasis equilibrium mi occurred generations epoch 
unique model migrant selection done probabilistically randomly simulate catastrophe random environmental change 
martin cohoon described results island model vlsi design problem 
showed variable length epoch slightly better fixed length 
implement variable epoch length authors defined current epoch point improvement fit individual occurred generations 
results showed random migration selection effective aggressive selection strategy caused population get stuck local optima 
idea islands consist different environments seen coevolution 
potter de jong introduced method isolated populations species genetic algorithm cooperation species user defined 
au concluded algorithm works problems independent variables 
potter de jong architecture adaptively evolve components speci ation model 
subpopulations represented separate species required contribute fitness survive 
periods stagnation suggested insufficient number species resulting addition new subpopulations 
species tested cooperative problem domain removed failed contribute sufficiently 
lin punch goodman hybrid island model called injection island genetic algorithm 
injection architecture divided search space hierarchical levels 
lations trained general tasks injected populations specific tasks 
hu goodman described hierarchical fair competition model defined hi 
diversity survivability niche island models levels fitness value boundaries 
individuals undergo selection recombination levels move fitness 
higher fitness levels undergo higher selection pressure simulate added exploitation 
pei goodman cohort algorithm holland compared island genetic algorithms 
cohort genetic algorithm designed combat premature convergence form allowing higher fit individuals reproduce 
offspring assigned cohorts fitness 
petridis island model configuration recurrent neural network training varied control parameters sub population 
form island models uses concept demes 
models implemented grid topologies stepping stone hypercubes instance deme defined size neighborhood 
collins form local breeding stepping stone model individuals placed grid node interact neighbors range 
metrics measured difference breeding allele diversity genotype diver sity panmictic index speed robustness 
results indicated partition problem local mating superior panmictic breeding finding optimal solutions maintaining allele genotype diversity faster optimisation robustness proportion runs produced optimal solution 
models proposed various types problems multiobjective optimisation zhu leung multimodal optimisation agent evolutionary algorithms smith 
seen previous examples island distributed models typically goal preserving diversity prevent premature convergence allow isolated evolution different structures behaviours 
effects various forms migration selection replacement clear 
genetic programming distributed models effort distributed models genetic programming focus increasing efficiency adding computational resources means parallelisation 
andre koza trans puter architecture parity problem processor responsible fit ness evaluation breeding subpopulation 
representative author large scale parallel implementations 
koza 
compared parallel implementation coarse grain island model robot control problem comparing synchronous asynchronous versions 
authors previously showed stan dard island model gave near linear speedup increase processors degradation arising communication synchronous issues 
fernandez 
studied various control parameters models 

diversity survivability niche island models populations homogeneous migration selection replacement fitness copies increasing selection pressure 
results highlighted need sub populations individuals perform effective search 
punch looked conflicting reports effectiveness multiple populations genetic programming extending earlier punch 
multiple population ant royal tree problems showed little improvement 
andre koza previously showed super linear speedup parity problem 
problems multiple solutions parity problem thought multiple population models 
deceptive problems thought harder multiple population models evenly divide total pop ulation processors 
punch tested hypothesis sequencing problem showed negative effects deception cause models 
spector showed improved results regression problem stack representation tion evenly distributed processors 
lastly iba proposed island model types crossover depth dependent standard simulate local global search 
new individuals island undergo depth dependent crossover prevent destructive effects standard crossover 
juill pollack parallel deme model genetic programming 
island model consisted wrap mesh 
parents selected locally offspring replaced fit individual 
chosen subpopulation randomly 
poli page demes solve high order boolean parity problems 
maintain diversity increasing efficiency model kept individuals different fitnesses 
elitist approach distributed individuals high fitness quickly different demes 
langdon demes similar collins stepping stone model 
author reported deme implementation provided better results panmictic genetic programming evolving queue list balanced bracket problem 
tackett studied different forms breeding population configurations classification donut problem 
demes formed ing population grid 
model shown improve generalization solutions 
haeseleer genetic programming alife scenario study tion dynamics 
tank problem tanks compete survival breeding selection allowed authors track genotypes witness emergence demes 
authors pointed concepts natural selection survival fittest commonly referred evolutionary programming literature role sub population isolation species differentiation cited frequently 
identifying environment individual including members local population primary influence continued development local sub population species important step realistic modelling evolutionary mechanics 
diversity survivability niche island models individual produced behavior signature phenotype diversity described formance competing thirteen seed tanks 
genotypic diversity measured comparing frequency terminals functions individuals 
tank individuals com neighbors showed emergence demes deme local population means correlation measure phenotypes genotypes 
parents offspring selected inserted locally 
speciation niching methods previous models concept demes rely heavily notion niches migration 
kishore 
applied genetic program ming class classification problem niching technique parallel implementation 
niching allowed populations evolve independently different problems parallel 
bongard studied effects evolving populations attempt solve regression problem different fourier functions 
improved solutions populations sent individuals run server 
new runs seeded random individuals individuals previous solutions problem 
methods allow populations occupy separate areas search space promote diversity 
methods discussed briefly chapter 
crowd ing dejong genetic algorithms requires new offspring replace similar indi vidual pool drawn population 
sharing phenotype genotype goldberg richardson deb goldberg require individuals genetic algorithm receive lower fitness determined size population fitness genetically similar 
mating restriction scheme investigated deb goldberg prevent dis similar individuals destructive crossover operation genetic algorithms 
mckay applied fitness sharing method genetic programming increased diversity error rate reductions similar performance smaller populations benefits 
sharing applied genetic programming edit distance trees ek rt meth 
solution quality improved sharing find similar solutions smaller size 
structure fitness sharing hu applied genetic programming encourage parameter search functions terminals similar structures trees requiring expensive edit distance measures 
method adjusts individual fitness individuals tree structure 
method simulate niching speciation negative correlation liu :10.1.1.32.7984
context learning ensembles neural networks negative correlation learning provides novel way decompose learning task ensemble number subtasks different individual networks 
resulting 
diversity survivability niche island models populations divided species representative species included ensemble 
mckay investigated negative correlation genetic programming multiplexer problem way improve diversity prevent premature convergence 
edmonds applied genetic programming sun spot prediction problem allowing find problem niche 
creating number models model specify area problem solve niche selecting individuals fitness evaluation neighborhood proximity niche edmonds hoped allow individuals orient near niches effective 
li 
implemented species con serving genetic algorithm tested multimodal deceptive problems 
species panmictic population distance metric 
species seeds individuals fit fit rest species 
individuals conserved copied generation 
lastly range operators proposed preserve context similarity exchanged genetic material haeseleer poli langdon langdon poli page poli langdon 
distributed models methods attempt improve ability genetic programming sample regions search space effec tively 
distributed models hope allow semi isolated subpopulations better sample search space prior convergence context preserving homologous recombination operators attempt sample search space effectively better designed operator 
similar dissimilar mating shown improve search producing smaller size solutions similar fitness ek rt meth ryan 
chapter results produced lin selection showed mating dissimilar individuals lead smaller solutions loss solution quality 
specialised operators may intuitively better computationally expensive results unclear 
biological foundations distributed models distributed models previous survey motivated theory ated equilibria gould adaptive landscape shifting balance theory wright wright 
examined provide thorough understand ing models 
punctuated equilibria 
diversity survivability niche island models punctuated equilibria alternative gould described new perspective evolution 
hypothesis proposing evo lution proceeds constant rate new species evolve gradually ancestral species common world view evolution authors contended insufficient explain fossil record 
model speciation considered seriously cause evolution 
speciation new species evolve geographical isolation ancestral species 
authors suggested model clearly explains fossil record incomplete 
theory punctuated equilibria says individuals species resistant change innate property prevents easy change 
previous belief gene flow sufficient keep group subpopulations similar remain species contrasted fact species individuals probably kept coherent gene flow strong resistance change 
peripheral isolates populations edge species range small population sizes considerably different environments provide distance allow hard uncommon event speciation 
sees long periods stasis equilibria species change small bursts success peripheral isolates different environments 
wright evolution populations wright analysed gene frequencies dif ferent types populations environmental genetic pressures recombination mutation drift 
noted mean gene frequency large population reach stable equilibrium 
population sub divided partly isolated groups group similar mean values similar conditions 
groups similar means successful grow size decline causing mean gene frequencies entire population change 
wright concludes large population divided subdivided partially isolated local races small size continually shifting differentiation local differences selection occurring uniform static conditions inevitably brings indefinitely continuing irreversible adaptive rapid evolution species wright follows roles mutation selection evolution calls wright seminal early papers 
diversity survivability niche island models evolutionary theory 
adaptive landscape introduced possible gene combinations peaks represent high adaptiveness 
main obstacle species effectively explore different peaks adaptive landscape constantly moving response environment changes 
solve dilemma wright stated order may occur trial error mechanism grand scale species may explore region surrounding small portion field occupies 
evolve species strict control natural selection 
trail error mechanism showing different ways species may move adaptive landscape wright described large species divided small local races able spread adaptive landscape 
local races rapidly explore area landscape finds higher peak currently known move entire species peak 
wright concluded subdivision species local races provides effective mechanism trail error field gene combinations comments previous distributed models goals distributed models techniques niching maintain population occupies different areas search space 
guarantee methods perform expected 
methods may fail apply right amount kind pressure keep population distributed allow fitness improvement 
previous described section highlighted variations models genetic algorithms specific focus efficiency genetic programming models 
distributed models commonly panmictic subpopulations perform standard evo algorithm island migrating fit individuals islands replace worse fit 
fitness migrant selection insertion considered added selection pres sure especially copied 
deme models reduce selection pressure conducting selection demes 
previous studies highlighted importance connectedness topology topology cant paz 
diversity con methods sense largely countering effects selection type selection pressure model defines extremely important determining effectiveness 
lastly distributed populations initially genetically different new subpopulation 
particularly true islands converge different regions search space 
previous typically address actual role 

diversity survivability niche island models questionable effectively add new genetic material takeover new tion selected new subpopulation 
study examines role dissimilar individuals relevant standard populations distributed models 
survivability diverse context search recombination population members hopefully lead im proved solutions 
genetic programming arguments preventing encouraging recombination dissimilar solutions 
ability recombination improve solutions studied measuring change fitness parent offspring 
root parent tends contribute genetic material root parent offspring relation ship initially considered 
measuring absolute value fitness change parent offspring relative rank parent offspring respective population indicate individuals guiding search effectively luke 
offspring population fitness worse desirable know individuals contributed search 
empirical study survivability diverse individuals studied understand guiding forces search 
phrase diverse individuals refers individuals pop ulation account majority dissimilarity 
individuals comparing average dissimilarity population average dissimilarity 
study adjustments may possible improve efficiency performance 
additionally important motivation studying survivability diverse individuals standard genetic pro gramming populations role migrant distributed models 
generalising results describe expected behaviour distributed model stretch applica bility 
distributed models commonly defined way mimic single population runs periodic exchange individuals 
study considers dis similar individuals probably conservative dissimilar real distributed models 
genetic outlier definition measure survivability described 
genetic outliers survivability genetic outliers defined genetic programming population dividing population fit un fit 
fit selected divided similar dissimilar pair wise distance metric 
shows divisions 
individuals dissimilar rest population 
diversity survivability niche island models un fit fit population phenotype space outliers fit population genotype space liers phenotype space divided fit un fit 
fit genotype space divided outliers filled region liers shaded region 
course example represent true relationship phenotype genotype spaces example defining outlier individuals 
role evolutionary process low fitness selected 
definition genetic outliers considers fitness genetic differences 
survivability measured subpopulations counting number times members selected recombination number times spring selected generation 
denotes offspring relative rank population original individual survivability 
previous chapters shown trends diversity convergence similar problem domains 
time chapter highlighted type search genetic program ming carries domain vary 
specifically domains sample structures behaviours differently indicating varied response different levels diversity 
seen chap ter showed varied correlations diversity fitness different problems 
constructed problems focus search structure content initially investigate role genetic diversity evolutionary process tree string problem developed 
tree string problem objectives match target tree structure match target string symbols realised structure 
problem explicit goals searching struc tures contents conflicting representative general class problems genetic programming applied 
smaller study performed problem domains previous chapters 
study carried provide additional confirmation applicability analysis continue improve understanding domains 
tree string problem tree string problem consists components 
diversity survivability niche island models target tree defined nodes labeled leaf non leaf 
study structures binary produced random tree growing method shown consistent standard genetic programming daida 
method similar designing tree hill climbing methods 
juels wattenberg 
pairs nodes representing child nodes repeatedly added tree root node predefined size reached 
point attachment child nodes selected assigning leaf node equal probability prior growth phase 
target string defined consisting symbols alphabet length equal number nodes target tree 
target string generated iteratively selecting random symbols objective functions defined target tree target string breadth traversal target candidate trees nodes longest common subsequence resulting strings 
target tree size minus value returned tree objective 
depth traversal target candidate trees nodes longest common subsequence resulting strings 
target string size minus value returned string objective 
pareto criterion objective functions better equivalent relationship selection refer string objective tree objec tive respectively equivalent better evolutionary algorithm attempts minimise objective function subtree crossover tournament selection standard genetic programming parameters 
study longest common subsequence measure similarity didate target trees strings pevzner 
measures similarity trees strings possible edit distance sequence alignment measures com putational biology 
possible ways specialise problem particular research agendas decisions designed consistent common problem domains 
tunable nature tree string problem easily realised set method tree growing 
case research demonstrated trees diffi cult genetic programming reach search daida langdon poli 
additionally increasing size set increase difficulty minimising string objective 

diversity survivability niche island models example target string nodes string realised tree nodes 
examples binary tree structures traversed breadth nodes represents tree example tree structure represents tree relevance domains tree string problem similar royal tree problem punch objective predefined structure 
royal tree problem gives maximum credit full trees specific functions terminals specific depths hierarchical fitness function 
extension royal tree related objective matching contiguous symbols string context linear representation 
structural aspect tree string problem similar lid problem daida structure pre defined depth size objective 
lid problem concerned structure consider effects content context problem domains 
respect problem domains characteristics relevant string objective contain high level deception similar ant problem described earlier langdon poli 
example string objective function assign fitness different strings share length matching subsequence target string 
trees contain 
diversity survivability niche island models binary tree depth realised circular lattice left target tree tree string problem nodes right 
root nodes lies center lattice 
note scale increased right 
string abc depth traversal complete target string trees fitness matching subsequence abcd 
trees achieve fitness different ways 
tree objective function deception amenable hill climbing search 
genetic programming approach mimics target tree construction method effective 
hill climbing method encouraged slow growth tree minimising tree objective 
reasons similar parity problem amenable hill climbing type methods performs genetic programming described chapter reilly oppacher juels wattenberg 
lastly combined objectives string structure probably create content context conflict similar regression domain daida 
moving mathematical functions expressed subtrees change way content applies fitness new context 
similarly subtree contribute differently context preserved similar shaped offspring similar content 
example tree string problem inserting subtree existing tree effect sequence matching target string 
due fact string obtained depth traversal 

diversity survivability niche island models table experiment problem parameters tree string experiments 
population size tree initialisation ramped half half maximum generation functions binary terminals parameters chapter parameters properties tree string problem similarities common domains problem appears representative general class problems genetic pro gramming typically applied 
course additional analysis required verify speculated properties behaviours tree string problem 
experimental details target string length generated target tree structure constructed nodes 
tree initialisation bounded minimum depth maximum size subtree crossover bounded trees maximum depth 
experimental parameters table 
target tree shown graphically lattice deepest node depth 
target tree structure defines string resulting breadth traversal nodes leaves randomly generated target string symbols realised leaves functions genetic outlier definition shows divisions phenotype genotype space define genetic outliers 
investigate populations come definition genetic outlier properties selection similarity 
selection fitness population divided individuals better half population 
better relationship describes case selection pick individual 
subpopulation called fit subpopulation 
subpopulation left called un fit 

diversity survivability niche island models longest common substring longest common substructure pareto front points visited tree string experiments 
fit subpopulation divided similar dissimilar 
levenshtein distance strings string edit distance define distance structures 
structure represented breadth traversal trees node labels 
distance measure previous chapters called edit distance trees consist symbols 
individual pair wise distance average edit distance rest population distance normalised dividing larger size pair trees 
mean pair wise distance population dividing summation individual pair wise distance population size 
subpopulation better half population fit subpopulation divided pair wise distance population equal standard deviations population mean pair wise distance 
subpopulation called liers 
subpopulation left called outliers genetically different rest better half population 
genetic properties contributing evolutionary process shows fitness points visited runs tree string problem 
tree objective axis string objective axis 
randomly chosen run highlighted connecting successive points run visits 
points randomly offset small amount better illustrate distribution 
tree string problem creates complex fitness landscape improving objective conflicts vice versa 
shows average runs number outliers liers un fit individuals left right generation increasing left right left plot 
number selected individuals number produced offspring selected number selected survived 
diversity survivability niche island models outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit tree string experiments 
outliers defined fitness similarity tuple better standard deviations 
generation survivability shown heavier lines 
confidence bars plotted generations outlier individuals 
un fit population total population size minus outlier populations 
measure survivability similar luke selection individual represents relative rank individual population 
measure considers selection method better indicator individual contribution search process change fitness parent offspring 
generation number outliers rarely selected due low numbers subsequently low probability selection 
outliers survivability 
right plot ratios selected total number survived selected emphasise effects 
liers generally higher ratio selection expected higher survivability un fit 
un fit tend worse survivability emphasizes liers produce offspring able survive contribute offspring generation 
survivability liers tends lower run due convergence liers unable produce useful variations 
initial experiment outlier individuals average pair wise edit distance greater standard deviations population mean better half population fitness 
number outliers highlights fact population contains individuals structurally rest population selected due numbers experimental results intuitively lower chance producing offspring 
definition outliers addresses concepts fitness genetic diversity number selected survived 
diversity survivability niche island models outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit tree string experiments better equivalent standard deviation definition outliers 
possibility 
example fitness component outlier definition requires outlier better half current population 
may beneficial consider indi equivalent fitness values definition 
investigate role genetic diversity survivability additional experiments performed summarised table adjusting fitness dissimilarity components define outliers 
alterna tive definitions provide alternative views survivability different regions population 
evolutionary process definitions outliers alternative considered averages random runs 
alternative definitions shows average confidence bars random runs fitness component define outliers liers better equivalent 
change number outliers liers increased significantly 
increase highlights equivalence fitness population 
ratios right plot show dramatically different selection survival ratios 
outlier survival rates highly sporadic increase evolutionary process 
presence equivalent fitness table tree string outlier definition variations respective figures 
fitness component difference component fig 
better standard deviations fig 
better standard deviations fig 
better equivalent standard deviations fig 
better equivalent standard deviations number selected survived 
diversity survivability niche island models outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit tree string experiments better standard deviation definition outliers 
relationships diverse solutions appear play important role creating offspring survive create offspring 
ratios survival higher un fit liers 
suggests numbers lower individuals similarly fit genetically similar unable produce viable offspring 
changing view outliers liers include equivalent fitness values definition class increased numbers decreased survivability 
depending problem representation operator may wish consider alternative definition genetic dissimilarity distance mean standard tion 
original fitness definition outliers genetic difference standard deviation 
change allow individuals considered dissimilar 
shows plots number outliers ratios selection survivability standard deviation criterion 
see slight increase number outliers causes selection survival rates increase 
right plot emphasises large spikes survival ratio outliers 
contrast survivability outliers unstable tends decrease evo process 
survivability frequently intersects selected ratio un fit individuals tend lower survived ratios compared selected ratio 
results show population loses diversity genetically converged outlier survivability unstable 
number outliers high selected produce children high survivability increasingly varied rate course run 
view outliers compared shows outliers dissimilarity tween standard deviations population mean play important role initially number selected survived 
diversity survivability niche island models outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit tree string experiments better equivalent standard deviation definition outliers 
search 
shows outliers dissimilarity greater standard deviations confirms addition outliers dissimilarity greater standard deviations account increased dissimilarity 
stages evolutionary process outliers lower survivability 
methods combined define outlier standard tion mean average pair wise edit distance better equivalent half population fitness 
shows outlier class larger including equivalent fitness standard deviation pair wise distance mean survivability rate outliers consistently higher selection rate unstable 
view outliers combined figures shows clearly population converges equivalent genetically similar 
shows outliers viewed equivalent fitness criterion survivability higher longer periods 
discussion experimental results previous experiments provided initial exploration role diverse individuals population constructed problem 
results showed existence varying types structurally diverse fit individuals ability produce successful offspring 
varying definitions described table shows different perspective role diversity 
view population equivalent definition fitness showed survivability liers goes selection rates 
combined previous views better relationship shows increase number equally fit individuals correlated 
diversity survivability niche island models poorer search ability 
decrease phenotype diversity correlated poorer search ability 
seen chapter high fitness entropy phenotype diversity positively correlated fitness improvements 
considering outlier dissimilarity standard deviation population mean pair wise distance low selection individuals produced high rates survival coming lower sporadic time 
consistent experiments examine diversity similar algorithms mcphee hopper population similar structure time 
number outlier individ experiments tends decrease population homogeneous 
occurs seen survivability outliers sporadic 
equivalent fitness definition outliers sporadic survivability outliers increases population converges 
view outliers important contain diverse genetic material population needs produce useful variations 
possible interpretations results initially highlighted 
ilar individuals unstable ability producing offspring high survivability 
secondly population converges light equivalent fitness values role dissimilar indi important 
considering equivalence dissimilar individuals effective population converges 
equivalence relationship dissimilar indi provide key variation necessary variation improvement 
space fit individuals contain equally fit individuals dissimilar individuals fitness play increasingly important role albeit unstable 
lastly study grouped similar dissimilar individuals low fitness un fit class 
interesting note change survivability rates varying views population 
noticeably change stricter better definition figures better equivalent definition 
cases un fit consistently produces higher survivability ratios outliers liers 
ratio typically higher selection ratio 
loss genetic phenotype diversity probably increases deception lowers selection pressure causing search rely new solutions produced un fit subpopulation 
effort thesis consistently analyse genetic programming similar set problem domains 
order add growing body analysis domains provide additional validation analysis tree string problem initial study survivability carried ant parity regression problems 

diversity survivability niche island models table experiment problem parameters ant parity binomial outlier experiments 
functions ant food ahead progn parity nand binomial terminals ant left right move parity binomial erc range parameters tree string experiments ant parity regression domains ant parity binomial regression problem instances definitions parameters chapter 
problems minimisation errors number missed food pellets ant problem mean squared error regression binomial problem number misclassified bit strings parity problem 
genetic measure diversity levenshtein distance tree structures denoted 
experi mental parameters tree string experiments 
better relationship standard deviations fitness difference components define outliers 
outliers liers un fit distributions shown figures 
graphs show averages runs problem left plot represents numbers category 
survival numbers number selected individuals produced offspring selected generation 
confidence bars shown left plots right plots figures show ratios selection survivability 
ant experiments rate survival outliers initially high compared number rate selection especially early generations 
discussed earlier thesis ant problem contains deception benefits exploration early generations 
decrease liers generations due increasing number individuals equivalent fitness 
number rate selection liers dramatically reduces offspring considerably higher increasing rate survival compared selection 
similar results seen parity experiments 
number outliers high survival rates sporadic 
problem role liers un fit change similarly ant problem 
early stages evolutionary process rely un fit outliers produce surviving offspring relative rate selection 
role shifts liers having higher survival rates generations 
parity problem number selected survived 
diversity survivability niche island models outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit ant experiments 
number selected survived outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit parity experiments 
number selected survived outliers liers un fit generations individual category selected number survived selected outliers liers un fit generations individual category average number population number times selected survivability outliers liers un fit binomial experiments 

diversity survivability niche island models differs problems including tree string problem un fit subpopulation increases numbers considerably 
previous chapters particularly chapter showed large effort genetic programming spends sampling different solutions equally poor fitness 
stages evolutionary process un fit subpopulation increases numbers effective producing offspring 
ant problem similar behaviour starts run high number un fit 
binomial experiments somewhat different results shown 
exper iments contain relatively higher numbers outliers compared problems 
outliers selected achieve higher rates survival 
liers un fit maintain fairly constant similar rates selection survival 
outliers achieve higher rates survival compared numbers selection rates decreases run 
im portant remember definition outliers particularly difference component problem dependent 
performing extensive study different definitions outliers yield informative results done earlier tree string problem 
empirical study survey related niche islands models proposed 
niche island models genetic programming previous methods encourage distributed evolution commonly lack explicit adaptive methods ensure consider type genetic fitness value distribution population 
aspects models methods may diversity increasing selection quickly migrating fit individuals 
models stepping stone model may reduce global selection pressure focusing tournaments geographic location time 
previous methods explicitly intend populations distributed search space niches islands demes measures define distribution ensure effectiveness 
previous experimental results thesis distributed models explicitly leverage outliers improve search 
wright early shifting balance theory stasis speciation gould rely semi isolated populations populations peripheral isolates mechanism rapid evolutionary change 
wright proposed semi isolated populations exist separate ecosystems undergo evolutionary history random evolution genetic drift allow rapid evolution 
el points behaviors habitat tracking keep species stasis 
says species adapt go extinct ecosystems change try move familiar ecosystem 
failure extinction adaptation follow peripheral isolates candidates rapid evolutionary change 

diversity survivability niche island models evolutionary computation distributed populations stasis considered stability fitness convergence genotypes 
cohoon 
mentioned idea stasis original genetic algorithms punctuated equilibrium simply say ideal model local population reach kind equilibrium migration occurs 
potter dejong stasis periods fitness improvement trigger addi tion new subpopulations 
incorporating changes ecosystem catastrophes stasis occurs may help avoid convergence stagnation local optima 
stasis may possible way allow distributed populations emphasise impor tance outliers dissimilar individuals 
convergence increases search may benefit change focus converged population diverse elements 
results showing sporadic survival rates outliers beneficial consider outliers different environment special operators increase survivability 
tion converges contains equivalently fit individuals biasing selection genetically behaviourally dissimilar individuals may way improving search 
light sporadic rates survivability existing migration evalu ated 
migration necessary beneficial 
previous methods preserve niches objectives components prevented migration events 
effects migration de degree difference subpopulation migrant relative fitness new subpopulation 
worst case migrant selected repeatedly selected quickly subpopulation copies 
convergence local optima inability escape optima important issue ge programming island model cited solution 
cohoon 
stated migrant selection done randomly simulate random catastrophe environ mental change 
typically uses probabilistic migrant selection insertion 
migration moving fit individuals new subpopulations consider diverse individuals new environment exploited 
lastly research homologous individuals operators genetic programming shown improved performance attempting preserve context exchanged genetic material similar shaped placed material haeseleer langdon :10.1.1.35.6772
solution migrated new subpopulation pressure native individuals may prevent evolving due differences genotypes phenotypes 
smaller population competition may allow individual survive 
ideas raised iba new protected destructive subtree crossover depth dependent crossover individuals 
proposed niche solution 
diversity survivability niche island models due previous uses islands niches species described previously chapter island model proposed 
model results section survey section aims accomplish tasks 
improve survivability selected individuals 
giving operator higher chance success producing better solutions entire search process efficient successful 
section showed low sporadic survivability rates fit individuals 
ideally individuals responsible guiding search process 

improve genetic programming search ability giving dissimilar individuals higher rate survivability 
individuals represent new regions search space algo rithm benefit exploring 
proposed model consists measure genetic dissimilarity identify dissimilar fit individuals arise evolutionary process 
speciation event creates new islands dissimilar individuals 
process simulate speciation event dissimilar individual leaves existing population create new species 
new islands introduces form branching 
current population momentum move away local optima different better individuals exist search paths lost 
individuals earlier called genetic outliers defined structurally genetically dissimilar highly fit 
addition dissimilar outliers highly fit giving indication promising solutions 
specific representation operator measures dissimilarity may consider node content structure 
benefit model role diversity easier understand con trol 
subpopulation similar structure content role diversity population clearer 
subpopulation converged single structure lost diversity level operators near leaves instance search continue adding diversity areas halt 
adding diversity root level may provide large behavioural changes operators nodes typi cally seen subtree crossover lost selection 
adding diversity operators better way continue search 
issues diversity 
diversity survivability niche island models outliers outliers population population possible views outliers genotype space shaded regions represent population outliers represented outside filled region 
canonical genetic programming search process complex problem dependent 
highlighted previous chapters 
considering diversity issues genetically homologous subpopulations particular operator tractable space issue 
summary proposed niche island models allow subpopulation converge ward local optima isolation 
migration events replaced form speciation forks new search sufficiently different individuals structures exploits structure new island 
manner island model different performing random restarts single population model 
model encourage higher rates ability search efficient possibly allowing population sizes reduced 
furthermore model promote broader exploration search space 
similar models similar model proposed 
multimodal optimisation genetic algorithms 
model algorithm performed migration 
subpopulations merged individuals redistributed new sub populations speciation tree method places genetically similar individuals 
local genetic algorithm run island number generations serve intensification phase 
proposed model consider migration concept merging subpopulations redistributing species 
genetic algorithm species conserving model li identified diverse individuals assigned fitter seeds propagated generation 
recombining diverse individuals seen section may ideal genetic programming 
fitness sharing structures balance search structure contents hu 
fitness sharing methods genetic programming genetic dissimilarity approach ignores possible benefits homology possible negative effects recombination diverse parents 
lastly method potter dejong coevolution components requires species contribute fitness survive new 
diversity survivability niche island models species added improvements 
similar way research proposed model investigate different ways remove islands allowing possibility variation arise stasis 
island post speciation event comments investigation proposal address speciation event subsequent search new species reasons 
firstly method initialise new subpopulation species problem dependent size search space species 
example depending size individuals size function terminal sets current distribution individuals different methods appropriate 
large function terminal set considering species sharing exact tree structure may infeasible similar tree structures 
case species may define exact tree structure plus commonality node labels 
adapting subpopulation size possible consid eration case 
secondly method initialisation dependent operator currently 
operator standard subtree crossover little sense expect search take place near root trees operator biased leaves 
initialising new species seed focus changes near leaves root sufficient level diversity 
homologous operators may able looser definition species due lack bias particular area tree 
cases may just perform phase local search diverse individuals normally define new species 
fact way initially validate model 
local optimisation technique probably need defined problem instance 
results thesis canonical genetic programming system routinely produces outlier individuals ideal candidates examination 
previous methods may leveraged individuals indirect ways proposed model intends leverage individuals directly 
addressed study composition space 
previous re search shown strong convergence characteristic population respect structure content space may composed distinct clusters genetically similar individuals 
demonstrates liers composed distinct genetically similar clusters single cluster shown 
actual identification spaces distinct clusters complex issue requiring specific measures methods 
proposed model largely motivated momentum literature impor 
diversity survivability niche island models tance structure 
daida diversity seen earlier chapters 
model proposed general explicitly considering outliers generally improve results exact performance tuning model parameters problem specific 
summary research chapter examined role diversity guiding search 
empirical analysis examined role dissimilar fit individuals population 
accomplished studying survivability individuals 
due distributed models methods proposed improve search means increased diversity research considered role migrant 
expect higher amounts diversity generally leads better search genetic pro gramming 
diversity dissimilar individuals provide key variations allow new solu tions discovered improved passing genetic material offspring 
results chapter showed dissimilar individuals play important role pro offspring population genetically similar role usually unstable 
dissimilar individuals particularly important fit individuals fitness 
fit subpopulation contains low phenotype diversity dissimilar individuals successful producing offspring contribute search 
phenotype diversity lost fit individuals worse fit individuals successful contributing new solutions generations 
results raise questions motivation methods dissimilarity mating blindly promoting high diversity 
dissimilar individuals low chance success produc ing offspring high relative fitness concentrate effort producing additional diversity 
lastly results highlighted possible ineffectiveness distributed models contribute positively search 
directly investigated results certainly suggest carried validating effectiveness 
niche island models proposed leverages results chapter 
niche consists identifying structurally different individuals mate effectively rest population new island 
new island provides chance search effectively individual region search space individual represents 
thesis chapter 
chapter genetic programming search heuristic represents candidate solutions computer pro grams 
genetic programming technique optimisation automatic program ming model induction 
metaheuristic methods combines search strategy operators objective function 
genetic programming uses complex variable length representation population solutions search strategy natural evolution 
elements combine analysis difficult 
genetic programming produce desirable results premature convergence loss diversity population blamed 
diversity algorithm pro duce variation move local optima due convergence 
population rarely loses diversity 
misleading attribute run failure convergence 
fact genetic programming runs usually pre determined converge due representation operators 
run failure due type rate convergence convergence 
research thesis contributed improved understanding genetic programming focusing issue diversity 
diversity loss describe convergence inability escape local optima diversity influences decisions evolutionary process 
evolutionary algorithms population search method rely population provide search direction 
results research demonstrate ways improve search efficiency effective ness genetic programming 
improving population search method wide reaching benefits demonstrated applications genetic programming artificial intelli gence mobile robotics automatic programming machine learning operations research applied optimisation 
contributions thesis contributions 

survey analysis diversity genetic programming demonstrated complexity issue diversity measures methods relationship diversity fitness 
measures diversity frequently literature surveyed analysed chapter 
specifically typical measures literature referring genotype phenotype traits experimental study 
general behaviour measures showed initial difficulty assessing attributing run failure diversity loss mea sures behaved unexpectedly 
example measure unique genotypes typically remained high levels generations increased decreased significantly 
individ larger size maintaining distinct individuals generally difficult 
chapter measure edit distance populations seen generally lose diversity early run remain low levels 
distinct phase transition diversity loss attributed expected time run stuck local optima 
low edit distance diversity result selection representation operator 
cases increased loss diversity linked improved search performance demonstrated correlation fitness low diversity 
measures particular importance fitness values 
high number unique phenotypes high entropy correlated best fitness evolu tionary process 
problems discrete fitness spaces particular ant parity problems cause selection methods random population loses unique fit ness values 
loss unique fitness values increase chance selection pick deceptive conflicting individuals search 
explains high fitness diversity measures correlated fitness 
previous methods control diversity control code growth heavy handed 
methods effect run unexpected ways 
chapter measure diversity incorporated ancestry information inheritance 

analysis genetic lineages showed search metaphor hill climbing explain improve genetic programming search 
sampling unique structures behaviours demonstrated low sampling complex behaviours unique structures large size 
genetic lineages bias selection method fit individuals randomly cho sen lineages 
results showed genetic diversity increased producing smaller worse fitness problem domains 
literature review similar related problem domains revealed results lineage selection clearly demon similarities genetic programming hill climbing 
genetic program ming benefits hill climbing type search increasing diversity worsened fitness preventing hill climbing search carried effectively 
genetic programming suffer deception increased diversity lineage selection improved fitness 
idea genetic programming may carry similar search hill climbing moti analysis sampling structures behaviours 
case structure refers tree node contents 
behaviour defined problem reflected fitness complexity solutions 
results demonstrated genetic programming samples fewer unique structures large sizes 
large structures produced search effort spent sampling different structures intermediate size 
problem specific results highlighted areas methods improve search performance 
issue code growth bloat received attention genetic programming com 
mechanics subtree crossover representation thought responsible code growth genetic programming 
little effort explain varied rates growth occur experiments 
causal model developed linked increased rates code growth non decreased selection pressure increased similarity population 
decreased selection pressure occurs fitness diversity lost increased similarity tion result faster convergence non decreased selection pressure 
address topic varied rates code growth chapter investigated change population dynamics occurring increasingly difficult problem instances 
previously researched problem instances randomly generated instances chapter showed problem dif induces different kinds population dynamics 
dynamics affect selection pres sure diversity subsequently rate code growth 
causal model supported constructed problem related literature 
results suggested controlling rate code 
growth achieved considering variability selection pressure presence diversity 
previous methods heavy handed penalising large individuals chapter outlined alternative ways code growth controlled tively effecting fitness improvements 
chapter highlighted different types behaviours increasingly difficult problem instances 
diversity results chapter results controlling diversity chapter effects diversity code growth selection chapter line research carried analyse contribution dissimilar individuals search 
distributed models frequently suggested remedy convergence 
models typically move subpopulations study allowed role examined 
analysis tree string problem showed inability produce offspring dissimilar fit individuals similar equally fit individuals 
definition genetic outlier individuals genetically dissimilar highly fit demon dissimilar fit individuals sporadic variable survivability 
study showed genetic programming populations consistently contain highly fit dissimilar considered search due small numbers inability produce fit offspring 
analyses population showed liers contribute consistently populations genetically similar equal fitness values 
liers dissimilarity un fit population genetic outliers con tributed search 
lastly tree string problem introduced 
problem thought difficult features related domains 
model proposed identifies dissimilar individuals moves new islands contribute search effectively 
survey distributed models showed rarely assign explicit role dissimilar indi frequently exchanged subpopulations 
analysis genetic outliers suggested individuals low survivability 
model proposed detect genetic outliers give suitable environment evolve 
way genetic outliers considered species 
results previous liter type model appear high chance success 
summary 
research thesis provides analysis key issues genetic program ming 
selection pressure subtree crossover success depend type fitness genetic diversity population 
secondly rates code growth controlled adaptively controlling fitness genetic diversity 
thirdly type search genetic programming carries described metaphor hill climbing knowledge problem domain 
inability dissimilar fit individuals similar equally fit individuals produce offspring shown 
remarks problem specific chapter questions proposed thesis address 
response questions contributions thesis restated terms 
problem specific results appear thesis highlighted 
question diversity measured controlled ideal levels diversity 
chapter surveyed measures methods diversity 
experimental study demon behaviour measures 
search process genetic programming find suitable structures represent content 
measures diversity provide accurate depiction structure content population edit distance diversity capture important dynamics 
main driving force gorithm selection recombination 
diversity measures capture property fitness distributions indicate population effect selection pressure 
methods control diversity 
chapter demonstrated lineage selection bad effects performance 
concept genetic lineages accurate indication diversity loss canonical genetic programming system 
methods encourage high genetic diversity fitness diversity adaptive 
seen chapter changing population diversity change dynamics algorithm 
lack clear correlation diversity fitness chapter emphasises danger assuming high diversity type leads better fitness 

question genetic programming population search method effect population diversity aspects search process 
effects population diversity seen chapter studying code growth 
results showed low fitness diversity reduces selection pressure high genetic diversity re duce code growth 
chapter showed search populations high number equally fit similar individuals guided dissimilar poorly fit individuals 
chapter demonstrated increased exploration ability genetically dissimilar populations cost fitness 
chapter suggested population convergence promote hill climbing beneficial improving fitness problems 
question specific role diversity play evolutionary process dissimilar individuals contribute offspring differently rest population 
general sense dissimilar individuals allow exploration take place 
seen chapter dissimilar individuals consistently effective populations breed different individuals 
population equivalent fitness dissimilar individuals provide chance escaping local optima 
previous literature suggests diverse individuals effective breeding separate populations compete recombine individuals 
important areas improvement genetic programming population search method precise characterisation population components allow new methods improve dynamics efficiency rate success 
research contribution effort 
majority experiments thesis involved problem domains commonly genetic programming literature 
reason twofold 
firstly necessary problem domains algorithm parameters build sound explanations different chapters experiments 
secondly problems frequently community develop new methods theoretical arguments useful apply full range diversity experiments analysis 
ant remarks results chapter showed additional example avoiding deception increased diversity improved performance 
results sampling study chapter demonstrated ant problem samples different structures small size fewer different behaviours increasing fitness 

correlation fitness high fitness diversity chapter ant exper iments showed benefit maintaining different fitness values fewer different behaviours fitness 
correlation fitness low edit dis tance diversity stages ant experiments showed better runs converged 
survivability study chapter showed phase change ant exper iments liers began producing majority surviving offspring 
change generation occurred individuals part un fit population 
better runs converge liers higher survivability clear rest population contributes 
hill climbing local optimisation strategy point may effective efficient way continue search 
parity remarks chapter lineage selection prevented hill climbing behaviour increased genetic di versity led worse fitness 
previous research showed elitist strategies incorporated element diversity control successfully improved search 
deception parity prob lem due different solutions fitness 
contrast ant problem deception due fact solutions easily improved genetic programming 
sampling study chapter showed ease genetic pro gramming sample solutions near random strategy difficulty sampling better worse ones 
benefit elitism focus search consistently particular strategy create hill climbing behaviour search 
chapter showed phase change near generation parity experiments populations came population 
similar ant experiments 
variable sporadic survival rates genetic outlier population suggests importance variation population loses diversity shows inability genetic outliers produce viable offspring consistently 
ability distinguish near ran dom behaviours help reduce effects deception problem allow predictable selection pressure 
regression remarks range symbolic regression instances thesis provided set differ ent behaviours 
difficult rastrigin function easier ones quartic binomial functions diversity measures capture similar dynamic previous problems important search 
reason continuous fitness space regression 
experiments allows genetic programming easily maintain high fitness diversity 
easily seen phenotype entropy measures chapter remained higher levels domains 
tree string problem chapter appear closely related regression problems dual conflicting objectives structure content 
applying results tree string experiments regression problem suggests fu ture populations come diverse individuals may necessarily fit population 
tree string experiments considering definition outliers better equivalent half population outliers contributed considerably higher rates survivability selection 
results binomial instance chapter show outliers play important part search process 
directions empirical investigations thesis suggest possible directions research 
diversity measures methods developing measures operators give improved understanding diversity fitness landscape 
complexity representation measures computationally expensive 
approximate measures operators re quire careful consideration accuracy 
intermediate data structures improve efficiency complex measures 
chapter new diversity method genetic lineages 
additional research method yield efficient ways control diversity search easily simulate mating niching island models 
chapter suggested controlling diversity adapting selection pres sure lead slower controlled code growth fewer negative effects fitness 
characterise effective selection pressure populations varying diversity induce 
code growth problem difficulty results chapter demonstrated possible areas controlling code growth indirectly 
recombination genetically similar individuals cause consistent amount code growth populations recombination dissimilar individuals producing 
code growth produce fewer offspring 
investi gating adaptive recombination methods aware similarity individuals solution minimising unjustified code growth achieving fitness 
chapter showed effects problem difficulty 
may possible control population diversity better deal harder instances 
example difficult instance causes population contain really individual methods dynamically prevent selection individual improve performance algorithm 
parts causal model chapter remain fully evaluated 
area research measuring dissimilarity solutions hard easy instances 
hypothesis stated easy instances allow optimal different solutions acquired quickly 
notion easy instances solved equally different solutions different ways 
hard instances thought solved fewer solutions similar 
investigate actual dissimilarities solutions easy hard instances 
defining role populations thesis provided better understanding role genetic programming population 
areas research chapter examined 
example exact dissimilarity mating parents structure dissimilarity un fit population depth analysis survivability genetic outliers domains potential areas research 
genetic programming considered stochastic hill climber procedural representation role population provide genetic material elitist algorithm 
genetic programming population sufficiently explore landscape parallel needs explicitly maintain portions population beneficial areas dispense sufficient search effort appropriately 
proposed niche island models obvious extension research gives population clearer role search 
empirical studies described detail chapter need carried validate proposed island model 
chapter introduced tree string problem 
investigating tunable nature problem validate testbed understanding complex domains 
modifying size string symbol set method grow target tree structures 
extended metaphors search 
metaphor hill climbing chapter characterise genetic programming search 
developing accurate models metaphors genetic programming allow intuitive im provement analysis results 
metaphor helped understand results previous results 
development research lines may yield surprising extremely useful models community 
specifically build intermediate mod els stochastic hill reilly oppacher juels wattenberg canonical genetic programming 
intermediate models contain various properties methods help show clearly methods carry search differently 
bibliography petridis 

operating populations different evolution behavior 
proceedings ieee international conference evolutionary computation pages nagoya japan 
altenberg 

emergent phenomena genetic programming 
fogel editors proceedings third annual conference evolutionary programming pages 
world scientific 
andre koza 

parallel genetic programming scalable implementation transputer network architecture 
angeline kinnear jr editors advances genetic programing chapter 
mit press cambridge ma usa 
angeline 

subtree crossover building block engine 
koza editors proceedings second annual genetic programming conference pages stanford university usa 
morgan kaufmann 
angeline 

historical perspective evolution executable structures 
informaticae 
ck fogel michalewicz editors 
evolutionary computation basic algo rithms operators 
institute physics publishing bristol uk 
ck fogel michalewicz editors 
evolutionary computation advanced algorithms operators 
institute physics publishing bristol uk 
banzhaf langdon 

considerations reason bloat 
genetic programming evolvable machines 
banzhaf nordin keller 

genetic programming tion 
morgan kaufmann san francisco usa 
barr cohen feigenbaum editors 
handbook artificial intelligence vol ume 
addison wesley reading ma 
bibliography belding 

distributed genetic algorithm revisited 
eshelman editor proceedings sixth international conference genetic algorithms pages san francisco ca 
morgan kaufmann 


controlling exploration diversity escaping local optima gp 
koza editor late breaking papers genetic programming conference pages stanford university ca 


island model cooperating speciation multimodal optimization 
schoenauer editors parallel problem solving nature pages paris france 
springer verlag 
blickle thiele 

comparison selection schemes genetic algorithms 
tik report tik institut fur technische informatik und computer engineering networks laboratory eth swiss federal institute technology zurich switzerland 
bongard 

coevolutionary dynamics multi population genetic programming sys tem 
floreano nicoud mondada editors proceedings th european conference advances artificial life volume lnai pages berlin 
springer 
banzhaf 

explicit control diversity effective variation distance linear genetic programming 
editors genetic programming proceedings th european conference volume lncs pages ireland 
springer verlag 
bremermann 

optimization evolution recombination 
ja editors self organizing systems pages 
spartan books washington dc 
burke jong grefenstette ramsey wu 

putting genetics genetic algorithms 
evolutionary computation 
burke gustafson kendall 

survey analysis diversity measures ge programming 
langdon editors proceedings genetic evolutionary computation conference pages new york 
morgan kaufmann publishers 
burke gustafson kendall 

diversity genetic programming analysis measures correlation fitness 
ieee transactions evolutionary computation 
burke gustafson kendall 

advanced population diversity measures genetic programming 
editors parallel problem solving nature volume lncs pages granada spain 
springer 
bibliography burke gustafson kendall 

increasing diversity genetic programming beneficial 
analysis effects fitness 
mckay editors congress evolutionary computation pages canberra australia 
ieee press 
cant paz 

topologies migration rates multi population parallel genetic algorithms 
banzhaf editors proceedings genetic evolutionary computation conference pages san francisco ca 
morgan kaufmann 
cohoon hegde martin richards 

punctuated equilibria parallel genetic algorithm 
grefenstette editor proceedings second international conference genetic algorithms pages hillsdale nj usa 
lawrence erlbaum associates 
collins 

studies artificial evolution 
ph dissertation department computer sci ence university california los angeles 
cramer 

representation adaptive generation simple sequential programs 
grefenstette editor proceedings international conference genetic algorithms applications pages carnegie mellon university pittsburgh pa usa 
daida 

limits expression genetic programming lattice aggregate modeling 
fogel editors congress evolutionary computation pages honolulu usa 
ieee press 
daida bertram khoo chaudhri ii 

problem gp hard 
analysis difficult problem genetic program ming 
genetic programming evolvable machines 
daida ward long 

visualizing tree structures genetic program ming 
cant paz editors proceedings genetic evolutionary computation conference volume lncs pages chicago il usa 
springer verlag 
daida li tang 

problem gp hard 
validating hypothesis structural causes 
cant paz editors proceedings genetic evolutionary computation volume lncs pages chicago il usa 
springer verlag 
darwen yao 

extra genetic diversity maintain escalation evolutionary arms race 
international journal knowledge intelligent engineering systems 
darwen yao 

choices cause cooperation iterated prisoner dilemma 
proceedings congress evolutionary computation pages seoul korea 
ieee press 
darwin 

origin species means natural selection 
mentor reprint ny 
bibliography davis editor 
handbook genetic algorithms 
international thomson press boston ma 
de jong watson pollack 

reducing bloat promoting diversity multi objective methods 
spector editors proceedings genetic evolutionary com putation conference pages san francisco ca 
morgan kaufmann 
deb goldberg 

investigation niche species formation genetic function optimization 
schaffer editor proceedings third international conference genetic algorithms pages san mateo ca usa 
morgan kaufmann 
dejong 

analysis behavior class genetic adaptive systems 
ph thesis department communication sciences university michigan 
haeseleer 

context preserving crossover genetic programming 
proceedings ieee world congress computational intelligence volume pages orlando fl usa 
ieee press 
haeseleer 

effects locality individual population evolution 
kinnear jr editor advances genetic programming chapter pages 
mit press 
edmonds 

learning appropriate contexts 
akman editors modelling context volume lnai pages 
springer verlag 
van 

adaptive genetic programming applied new ex simple regression problems 
miller editors genetic programming proceedings th european conference volume lncs pages lake como italy 
springer verlag 
eiben 

evolutionary exploration exploitation 
fundamenta informaticae 
eiben van 

saw ing eas adapting fitness function solving constrained problems 
corne editors new ideas optimization pages 
mcgraw hill london 
ek rt 

shorter fitness preserving genetic programs 
editors ar evolution 
th european conference selected papers volume lncs pages france 
ek rt meth 

metric genetic programs fitness sharing 
poli editors genetic programming proceedings rd european conference volume lncs pages edinburgh 
springer verlag 
bibliography ek rt meth 

selection pareto criterion con code growth genetic programming 
genetic programming evolvable machines 
ek rt meth 

maintaining diversity genetic programs 
foster editors genetic programming proceedings th european conference volume lncs pages ireland 
springer verlag 
gould 

punctuated equilibria alternative chap ter pages 
freeman cooper eshelman schaffer 

crossover niche 
forrest editor proceedings fifth international conference genetic algorithms pages san mateo ca 
morgan kaufman 
rosa 

study non random mating varying population size genetic algorithms royal road function 
proceedings congress evolutionary computation pages 
ieee press 
fernandez punch sanchez 

experimental study isolated genetic programming 
whitley editors proceedings genetic evolutionary computation conference page las vegas nv usa 
morgan kaufmann 
fernandez 

studying influence communication topology migration distributed genetic programming 
miller editors genetic programming proceedings th european conference volume lncs pages lake como italy 
springer verlag 
fernandez 

empirical study genetic programming 
genetic programming evolvable machines 
fogel 

evolutionary computation fossil record 
ieee press piscataway nj 
fogel owens walsh 

intelligence simulated evolution 
john wiley sons new york 
fraser 

simulation genetic systems automatic digital computers 
aust 
biol 
sci 
friedberg 

learning machine part ibm journal research development 
friedberg dunham north 

learning machine part ii 
ibm journal research development 
bibliography ross 

adverse interaction crossover restricted tree depth genetic programming 
koza editors genetic programming proceedings annual conference pages stanford university ca usa 
mit press 
wiles 

diversity maintenance neutral landscapes argument re combination 
fogel editors proceedings congress evolutionary computation pages honolulu usa 
ieee press 
glover 

paths integer programming links artificial intelligence 
comput ers operations research 
glover editors 
handbook metaheuristics 
kluwer boston ma 
glover laguna 

tabu search 
kluwer academic publishers boston usa 
goldberg 

design innovation lessons competent genetic algorithms 
kluwer academic publishers boston ma 
goldberg reilly 

stuff go 
contextual semantics influence program structure simple genetic programming 
banzhaf editors genetic programming proceedings european workshop volume lncs pages paris 
springer verlag 
goldberg richardson 

genetic algorithms sharing optimization 
grefenstette editor proceedings nd international conference genetic algorithms applications pages cambridge ma 
lawrence erlbaum associates 
gustafson burke kendall 

sampling unique structures behaviours genetic programming 
editors genetic programming proceedings th european conference coimbra portugal 
springer verlag 
gustafson ek rt burke kendall 
expected appear 
problem difficulty code growth genetic programming 
genetic programming evolvable hardware 
gustafson 

visualising populations rooted labeled trees lattice 
unpublished 
www cs nott ac uk smg 
holland 

adaptation natural artificial systems 
university michigan press 
holland 

building blocks cohort genetic algorithms hyperplane defined functions 
evolutionary computation 
hu goodman 

hierarchical fair competition model parallel evo algorithms 
fogel editors proceedings congress evolutionary computation pages honolulu usa 
ieee press 
bibliography hu seo li fan rosenberg goodman 

structure fitness sharing sfs evolutionary design genetic programming 
langdon editors proceed ings genetic evolutionary computation conference pages new york 
morgan kaufmann publishers 
hutter 

fitness uniform selection preserve genetic diversity 
fogel editors proceedings congress evolutionary computation pages honolulu usa 
ieee press 
iba 

random tree generation genetic programming 
voigt 
editors parallel problem solving nature volume lncs pages berlin germany 
springer verlag 
iba de garis sato 

genetic programming minimum description length principle 
kinnear jr editor advances genetic programming chapter pages 
mit press 
igel chellapilla 

investigating influence depth degree genotypic change fitness genetic programming 
banzhaf editors proceedings genetic evolutionary computation conference pages orlando fl usa 
morgan kaufmann 
iba 

island model gp aging depth dependent crossover 
fogel editors proceedings congress evolutionary computation pages honolulu usa 
ieee press 
jefferson collins cooper dyer korf taylor wang 

evolution theme artificial life tracker system 
langton editors proceedings artificial life ii santa fe institute studies sciences complexity volume addison wesley 
juels wattenberg 

stochastic hillclimbing baseline method evaluating genetic algorithms 
technical report technical report csd 
computers science de university california berkeley usa 
juill pollack 

massively parallel genetic programming 
angeline kinnear jr editors advances genetic programming pages 
mit press cambridge ma usa 
kauffman 

origins order self selection evolution 
oxford university press new york ny 
bibliography 

efficiently representing populations genetic programming 
angeline kinnear jr editors advances genetic programming chapter pages 
mit press cambridge ma usa 


scientific discovery genetic programming 
phd thesis danish technical university lyngby denmark 


improving symbolic regression interval arithmetic linear scaling 
ryan editors genetic programming proceedings th european conference volume lncs pages essex uk 
springer verlag 
keller banzhaf 

explicit maintenance genetic diversity 
internal report university dortmund 
keller banzhaf 

genetic programming genotype phenotype mapping linear genomes linear phenotypes 
koza editors proceedings annual conference genetic programming pages stanford university ca usa 
mit press 
kirkpatrick gelatt vecchi 

optimization simulated annealing 
science number may 
kishore mani agrawal 

genetic programming pattern classification feature space partitioning 
information sciences 
koza 

genetic programming programming computers means natural selection 
mit press cambridge ma usa 
koza 

genetic programming ii automatic discovery reusable programs 
mit press cam bridge ma usa 
koza andre bennett iii keane 

genetic programming darwinian invention problem solving 
morgan kaufman 
koza keane streeter yu lanza 

genetic programming iv routine human competitive machine intelligence 
kluwer academic publishers 


studies theory design space memetic algorithms 
phd thesis university west england bristol uk 
langdon 

data structures genetic programming genetic programming data struc tures automatic programming volume genetic programming 
kluwer boston 
langdon 

evolution size variable length representations 
proceedings ieee international conference evolutionary computation pages anchorage usa 
ieee press 
bibliography langdon 

scaling program fitness spaces 
evolutionary computation 
langdon 

quadratic bloat genetic programming 
whitley editors pro ceedings genetic evolutionary computation conference pages las vegas nv usa 
morgan kaufmann 
langdon 

size fair homologous tree genetic programming crossovers 
genetic programming evolvable machines 
langdon poli 

fitness causes bloat mutation 
banzhaf editors genetic programming proceedings st european workshop volume lncs pages paris 
springer verlag 
langdon poli 

ants hard 
koza editors proceedings third annual conference genetic programming pages madison wi usa 
morgan kaufmann 
langdon poli 

foundations genetic programming 
springer verlag berlin 
langdon soule poli foster 

evolution size shape 
spec tor editors advances genetic programming chapter pages 
mit press cambridge ma usa 
li parks clarkson 

species conserving genetic algorithm multimodal function optimization 
evolutionary computation 
lin punch goodman 

coarse grain genetic algorithms categorization new approaches 
sixth ieee symposium parallel distributed processing pages dallas tx usa 
ieee computer society press 
liu yao higuchi 

evolutionary ensembles negative correlation learning 
ieee transactions evolutionary computation 


genetic programming meta search searching successful population classification domain 
ryan editors genetic programming proceedings th european conference volume lncs pages essex uk 
springer verlag 
lucas van ruskey 

rotations generation binary trees 
algorithms 
luke 

genetic programming produced competitive soccer softbot teams robocup 
koza editors proceedings third annual conference genetic programming pages madison wi usa 
morgan kaufmann 
bibliography luke 

fast tree creation algorithms genetic programming 
ieee transactions evolutionary computation 
luke 

short runs beat long runs 
spector editors proceedings genetic evolutionary computation conference pages san francisco ca usa 
morgan kaufmann 
luke 

modification point depth genome growth genetic programming 
evolution ary computation 
luke 

java evolutionary computation genetic programming system 
www cs umd edu projects plus ec 
luke 

survey comparison tree generation algorithms 
spector editors proceedings genetic evolutionary computation conference pages san francisco usa 
morgan kaufmann 
luke 

fighting bloat nonparametric parsimony pressure 
editors parallel problem solving nature number lecture notes com puter science lncs pages granada spain 
springer verlag 
luke 

lexicographic parsimony pressure 
langdon editors proceedings genetic evolutionary computation conference pages new york 
morgan kaufmann publishers 
luke spector 

revised comparison crossover mutation genetic pro gramming 
koza editors proceedings third annual genetic programming con ference pages san francisco ca 
morgan kaufmann 
martin cohoon 

island migration models evolutionary algo rithms punctuated equilibria 
ck editors evolutionary computation chapter 
institute physics publishing bristol uk 
matsumoto nishimura 

mersenne twister dimensionally uniform pseudorandom number generator 
acm transactions modeling computer simu lation 
mckay 

fitness sharing genetic programming 
whitley editors proceedings genetic evolutionary computation conference pages las vegas nv usa 
morgan kaufmann 
mckay 

anti correlation diversity promoting mechanisms ble learning 
australian journal intelligent information processing systems 
bibliography mckay 

measures genetic programming 
editors japan workshop intelligent evolutionary systems pages new zealand 
mcphee hopper 

analysis genetic diversity population history 
banzhaf editors proceedings genetic evolutionary computation conference pages fl usa 
morgan kaufmann 


reducing population size maintaining diversity 
ryan editors genetic programming proceedings th european conference volume lncs pages essex uk 
springer verlag 
montana 

strongly typed genetic programming 
evolutionary computation 
moscato 

evolution search optimization genetic algorithms martial arts wards memetic algorithms 
caltech concurrent computation program report california institute technology pasadena ca cheng 

distance herbrand interpretations measure approx target concept 
lavra zeroski editors proceedings th international workshop inductive logic programming volume lnai pages prague czech republic 
springer verlag 
iba 

accelerated genetic programming polynomials 
genetic pro gramming evolvable machines 
nilsson 

problem solving methods artificial intelligence 
mcgraw hill new york 
nordin banzhaf 

efficient evolution machine code cisc architectures instruction blocks homologous crossover 
spector editors advances genetic programming chapter pages 
mit press cambridge ma usa 
olsson 

inductive functional programming incremental program transformation 
artificial intelligence 
reilly 

analysis genetic programming 
phd thesis university ottawa ontario canada 
reilly 

distance metric genetic programs understand genetic opera tors 
ieee international conference systems man cybernetics computational cybernetics simulation volume pages fl usa 
bibliography reilly 

impact external dependency genetic programming primitives 
proceedings ieee world congress computational intelligence pages anchorage usa 
ieee press 
reilly 
goldberg 

fitness structure affects acquisition genetic programming 
koza editors proceedings third annual genetic program ming conference pages madison wi usa 
morgan kaufmann 
reilly 
oppacher 

program search hierarchical variable length repre sentation genetic programming simulated annealing hill climbing 
davidor editors parallel problem solving nature number lncs pages jerusalem 
springer verlag 
reilly 
oppacher 

hybridized crossover search techniques program discovery 
proceedings world conference evolutionary computation volume pages perth australia 
ieee press 
reilly 
oppacher 

comparative analysis gp 
angeline kin near jr editors advances genetic programming chapter pages 
mit press cambridge ma usa 
page poli langdon 

smooth uniform crossover smooth point mutation genetic programming preliminary study 
poli editors genetic programming proceedings rd european conference volume lncs pages goteborg swe den 
springer verlag 
papadimitriou steiglitz 

combinatorial optimization algorithms complexity 
prentice hall englewood cliffs nj 
pardalos resende editors 
handbook applied optimization 
oxford university press new york ny 
pei goodman 

comparison cohort genetic algorithms canonical serial island model distributed ga spector editors proceedings genetic evolutionary computation conference pages san francisco ca usa 
morgan mann 
grefenstette 

parallel genetic algorithm 
grefenstette ed proceedings second international conference genetic algorithms applications hillsdale nj usa 
lawrence erlbaum associates 
pevzner 

computational molecular biology algorithmic approach 
mit press cambridge ma usa 
bibliography 

maximum homologous crossover linear genetic programming 
ryan editors genetic programming proceedings th european conference volume lncs pages essex uk 
springer verlag 
poli 

simple theoretically motivated method control bloat genetic program ming 
ryan editors genetic programming proceedings th european conference volume lncs pages essex uk 
springer verlag 
poli langdon 

search properties different crossover operators genetic programming 
koza editors proceedings third annual genetic program ming conference pages madison wi usa 
morgan kaufmann 
poli langdon 

schema theory genetic programming point crossover point mutation 
evolutionary computation 
poli mcphee 

exact schema theorems gp point standard crossover operating linear structures application study evolution size 
miller editors genetic programming proceedings th european conference volume lncs pages lake como italy 
springer verlag 
poli mcphee 

general schema theory genetic programming subtree swapping crossover part evolutionary computation 
poli mcphee 

general schema theory genetic programming subtree swapping crossover part ii 
evolutionary computation 
poli page 

solving high order boolean parity problems smooth uniform crossover sub machine code gp demes 
genetic programming evolvable machines 
potter de jong 

cooperative coevolutionary approach function optimization 
davidor editors parallel problem solving nature volume lncs pages berlin 
springer verlag 
potter de jong 

cooperative coevolution architecture evolving subcomponents 
evolutionary computation 


wright evolution selected papers 
university chicago press chicago il usa 
punch 

effective multiple populations genetic programming 
koza editors proceedings third annual conference genetic programming pages madison wi usa 
morgan kaufmann 
bibliography punch zongker goodman 

royal tree problem benchmark single multi population genetic programming 
angeline kinnear jr editors ad genetic programming chapter pages 
mit press cambridge ma usa 
rechenberg 

cybernetic solution path experimental problem 
library translation royal aircraft establishment uk 
reeves editor 
modern heuristic techniques combinatorial problems 
mcgraw hill lon don 
rosca 

entropy driven adaptive representation 
rosca editor proceedings workshop genetic programming theory real world applications pages tahoe city ca usa 
rosca 

genetic programming exploratory power discovery functions 
mcdonnell editors proceedings fourth conference evolutionary programming pages san diego ca 
mit press 
rosca 

analysis complexity drift genetic programming 
koza editors proceedings second annual genetic programming conference pages stanford uni versity ca 
morgan kaufmann 
rosca 

hierarchical learning procedural abstraction mechanisms 
phd thesis de computer science college arts sciences university rochester rochester ny usa 
rosca ballard 

causality genetic programming 
eshelman editor proceed ings sixth international conference genetic algorithms pages pittsburgh pa usa 
morgan kaufmann 
rosca ballard 

discovery subroutines genetic programming 
angeline kinnear jr editors advances genetic programming chapter pages 
mit press cambridge ma usa 
rosca ballard 

rooted tree schemata genetic programming 
spector editors advances genetic programming chapter pages 
mit press cambridge ma usa 
ryan 

civil servants 
kinnear jr editor advances genetic program ming chapter pages 
mit press cambridge ma 
bibliography ryan collins neill 

grammatical evolution evolving programs arbitrary language 
banzhaf editors proceedings european workshop genetic programming volume lncs pages paris 
springer verlag 
shapiro editor 
encyclopedia artificial intelligence 
wiley new york ny 
siegel 

nonparametric statistics behavioral sciences 
mcgraw hill book new york 
smith harries 

code growth explicitly defined introns alternative selection schemes 
evolutionary computation 
smith 

mating restriction niching pressure results agents implications general ec 
cant paz editors proceedings genetic evolutionary computation conference volume lncs pages chicago il usa 
springer verlag 
smith forrest perelson 

searching diverse cooperative subpopulations genetic algorithms 
evolutionary computation 
soule foster 

code size depth flows genetic programming 
koza editors genetic programming proceedings second annual conference pages stanford university ca usa 
morgan kaufmann 
soule foster 

effects code growth parsimony pressure populations genetic programming 
evolutionary computation 
soule heckendorn 

analysis causes code growth genetic program ming 
genetic programming evolvable machines 
spector 

simultaneous evolution programs control structures 
angeline kinnear jr editors advances genetic programming chapter pages 
mit press cambridge ma usa 
spector luke 

cultural information genetic programming 
koza editors proceedings annual conference genetic programming pages stanford university ca usa 
mit press 
spector 

high performance parallel stack genetic programming 
koza editors proceedings annual conference genetic programming pages stanford university ca usa 
mit press 
tackett 

recombination selection genetic construction computer programs 
phd thesis university southern california department electrical engineering systems usa 
bibliography tackett 

donut problem scalability generalization genetic programming 
kinnear jr editor advances genetic programming chapter pages 
mit press cambridge ma usa 
tanese 

parallel genetic algorithms hypercube 
grefenstette editor proceedings second international conference genetic algorithms applications pages hillsdale nj usa 
lawrence erlbaum associates 
tanese 

distributed genetic algorithms 
schaffer editor proceedings third international conference genetic algorithms pages san mateo ca usa 
morgan kaufmann 


speedup improvement automatic robot program ming parallel genetic programming 
proceedings ieee international symposium signal processing communication systems pages thailand 
ieee press 


comparison synchronous asynchronous implementation parallel genetic programming 
proceedings th international confer ence artificial life robotics pages japan 
turing 

computing machinery intelligence 
mind 


diversity guided evolutionary algorithms 
editors parallel problem solving nature volume lncs pages granada spain 
springer 


grammatically genetic programming 
rosca editor proceedings workshop genetic programming theory real world applications pages tahoe city ca usa 
whitley rana heckendorn 

island model genetic algorithms linearly separable problems 
corne shapiro editors proceedings aisb workshop evolutionary computation volume lncs pages manchester uk 
springer 
oppacher 

distance populations 
cant paz ed proceedings genetic evolutionary computation conference volume lncs pages chicago il usa 
springer verlag 
wolpert macready 

free lunch theorems optimization 
ieee transactions evolutionary computation 
wright 

evolution populations 
genetics 
wright 

roles mutation selection evolution 
jones editor proceedings sixth international congress genetics pages 
bibliography zhang 
hlenbein 

balancing accuracy parsimony genetic program ming 
evolutionary computation 
zhu 
leung 

asynchronous self adjustable island genetic algorithm multi objective optimization problems 
fogel editors proceedings congress evo computation pages honolulu usa 
ieee press 
