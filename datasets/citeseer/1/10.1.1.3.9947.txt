static checking dynamically generated queries database applications data intensive applications dynamically construct queries response client requests execute 
java servlets create string representations sql queries send queries jdbc database server execution 
servlet programmer enjoys static checking java strong type system 
java type system little check possible errors dynamically generated sql query strings 
type error generated selection query comparing string attribute integer result sql runtime exception 
currently defects rooted careful testing worse customers runtime 
sound static program analysis technique verify correctness dynamically generated query strings 
describe analysis technique provide soundness results static analysis algorithm 
describe details prototype tool algorithm illustrative defects senior software engineering student team projects online tutorial examples realworld purchase order system written authors 

data intensive applications dynamically construct database query strings execute 
example typical java servlet web service constructs sql query strings dispatches jdbc connector sql compliant database 
example scenario java servlet program generates manipulates sql queries string data 
refer java meta language manipulate object language programs sql 
concrete example see explain analysis technique 
consider frontend java servlet grocery store sql driven second authors supported startup fund university california davis second author 
author supported nsf cise itr programs 
carl gould su devanbu department computer science university california davis gould su devanbu cs ucdavis edu database back 
database table inventory containing list items store 
table columns retail wholesale type 
retail wholesale columns type integer indicating respective costs cents 
type column integer representing product type codes items table 
grocery store database look type codes 
table contains types integer varchar string varchar respectively 
example code fragment illustrates common errors programmers programming java servlet applications string lowerbound string query select retail inventory lowerbound null query wholesale lowerbound query type return statement query string return select typecode types name fish name meat constructs string query hold sql select statement return prices items executes query 
uses string returned typecode sub query 
code concatenation operator clause type 
checks type matches type codes items 
lowerbound query executed select retail inventory wholesale type select typecode types name fish name meat different runtime errors arise example 
list note caught java type system error 
expression retail concatenates character result numeric expression retail 
database systems implicitly type cast numeric result string issue runtime error 
error 
consider expression wholesale lowerbound 
variable lowerbound declared string wholesale column type integer 
long lowerbound string representing number type errors 
risky certainly java type system keeps string variable lowerbound containing non numeric characters 
error 
string returned method get constitutes sub query selects columns table types 
clause sql supports sub queries returning single column context runtime error arise 
happen method code return single column inadvertently changed return columns 
specific combination java meta language sql object language widely today 
databases receiving constructed sql queries certainly perform syntax semantic checking queries 
queries dynamically generated errors discovered runtime 
desirable catch errors statically source code 
static analysis flag potential errors guarantee absence dynamically generated sql queries 
approach combination automata theoretic techniques variant context free language cfl reachability problem 
step analysis builds static string analysis build conservative representation generated query strings finite state automaton 
statically check finite state automaton modified version context free language reachability algorithm 
analysis sound sense find errors errors occur runtime 
implemented analysis tested tool realistic programs jdbc including senior software engineering student team projects online tutorial examples realworld purchase order system written authors 
tool able detect known unknown errors programs 
tuned performance analysis finishes minutes test programs 
furthermore analysis empirically appears quite precise low false positive error rate 
rest structured follows 
background string analysis context free language reachability brief overview analysis section 
analysis detail section discuss experimental setup results section 
survey related section conclude discussion possible section 

background analysis overview describe technical context 

static string analysis java programs mentioned earlier analysis string analysis java programs reported 
essentially interprocedural data flow analysis approximate semantics string manipulation expressions program 
analysis similar pointer analysis imperative languages control flow analysis cfa functional languages :10.1.1.109.6502
approximates set possible strings program may generate particular string variable particular program location interest locations called hotspots 
string analysis produces finite state automaton fsa conservatively approximates set possible strings hotspot specified automaton accepts larger set strings produced program hotspot 
earlier example statement return statement query hotspot program 
string analysis works java bytecode 
starts finding hotspots java program 
simply mark program location call method return statement execute query query example hotspot 
analysis abstracts away control flow program creates flow graph representing possible string expressions 
flow graph captures flow strings string operations program abstracted away 
nodes flow graph correspond variables expressions program edges represent directed def relationships possible data flow 
example statement query str str graph nodes edges created graph node labeled concat represents concatenation expression str str edges labeled corresponding second arguments 
java class files type errors 
correct static string analysis section type checking section edge nodes labeled concat query indicates assignment 
expressions operators treated similarly full details 
flow graph reduced extended context free grammar treating nodes flow graph terminals nonterminals grammar 
example flow graph earlier section yields grammar rules correspond respective nodes str str concat query 
general grammar generated flow graph regular context free mentioned earlier 
analysis computationally tractable widen grammar regular language 
widening step allows syntax checking generated strings grammar 
fairly technical details step main focus omit refer interested readers 

context free language reachability step fsa processed contextfree language cfl reachability algorithm forms foundation analysis 
give brief description problem algorithm cf 
details 
cfl reachability problem takes inputs contextfree grammar terminals nonterminals directed graph edges labeled symbols extension handles operators functions 
contrast grammar narrowed finite state automaton syntax checking 
done general checking containment regular language context free language undecidable 
possible directly grammar flow graph widened context free grammar intersection context free grammar regular expression context free furthermore easy check emptiness context free grammar 
finite state automaton automaton syntax type labels type environment reconstruction section 
overview analysis 
errors 
sql grammar database schema path graph called start symbol path word derived start symbol cfl reachability problem find pairs vertices path algorithm solve cfl reachability problem uses dynamic programming relates dynamic transitive closure underlies standard program analysis algorithms type systems subtyping alias analysis control flow analysis 
algorithm normalizes grammar production right hand side contains symbols 
easily done introducing new nonterminal symbols 
new derived edges added productions example suppose production contains edges algorithm adds dotted edge algorithm repeatedly applies transformation graph new edges added 
pair nodes edge labeled final graph path original graph running time algorithm cubic size alphabet size graph cfl reachability distinct phases analysis explain 

overview analysis gives overview analysis 
main steps 
step detailed section generate finite state automaton conservatively approximate set object programs 
second step problem maintain transitive closure graph new basic graph edges added graph closure 
process automaton sub stages 
apply cfl reachability sql grammar find scoping information typing contexts section 
second apply cfl reachability database schema perform type checking section 
semantic errors reported phases 
note analysis differs standard sql type checker analyzes single query execution time 
statically analyze potentially infinite set queries 

main steps analysis section major components steps analysis illustrate working example section 

automaton generation transformation step apply string analysis generate hotspot program fsa representing possible set query strings hotspot 
transitions automaton single letters alphabet source language 
convenience perform simple compaction automaton transitions keywords delimiters literals object language 
consider example section 
shows fragment automaton string analysis produces 
transformation automaton fsa shown 
achieve depth traversal original automaton groups letters tokens sense lexical analysis phase compiler 
tokens create equivalent fsa transitions keywords literals delimiters object language 
addition white spaces removed automaton step 

reconstruction type environments sql query declared types various columns database schema 
similar notion type environment standard type systems language java ml look types variables 
illustrate consider sample sql query denotes unknown string 

automaton transformation illustrated 

fsa table contexts 
select name employee salary 
information type integer explicit query expression stored separately table employee schema 
reason generated fsa information 
need reconstruct database schemas 
describe cfl reachability analysis obtain column name type mapping schema 
step assume generated fsa syntactically correct query strings produced fsa valid sql syntax 
assumption enforced string analysis performs syntax checking generated automaton 
type environment reconstruction fsa nontrivial type column depends context occurs 
depending structure fsa column may appear contexts 
example suppose automaton shown 
type column name different depending paths automaton taken 
path type determined schema definition determined 
solution problem variant cfl reachability algorithm 
apply algorithm context free grammar sql queries transformed automaton inputs 
essence algorithm parse automaton 
similar general context free parsing cubic time complexity 
parsing particular query automaton produces potentially infinite number query strings 
table show excerpt grammar sql select statement 
nonterminals italic terminals font 
grammar complete easily adding rules 
cfl reachability algorithm described requires normalized grammar right hand side production symbols 
nonterminal productions select stmt select select select part select part select part select column list select part table list table list clause clause condition condition logical term logical term logical term exp subquery 
additional rules elided table 
sql select statement grammar 
implementation cfl reachability extended works productions symbols right hand sides 
extension allows naturally written grammars 
modified cfl reachability algorithm enables find type context type environment path automaton 
information match column possible types 
type contexts discovered annotating automaton derivation running cfl reachability algorithm 
particular cfl reachability process adds nonterminal edge automaton store edge edges making derivation 
similar actions syntax directed translation build collection parse trees automaton 
fact complete type environment reconstruction step similar attribute grammars syntax directed translation 
illustrate process run steps example 
return simple example 
steps shown running algorithm discovering type environments 
keyword identifier edge labeled id added nodes 

goes edges nodes 
id edge node distinct derivations 
different standard cfl reachability algorithm 
standard algorithm edge added needs done edge 
example suppose id edge added edge 
edge processed id edge added 
edge automaton 

sample steps discovering type environments 
stead simply stopping done standard algorithm algorithm adds second derivation id edge 
allows context discovered searching derivation edges 
notice handle loops automaton exploiting simple looping structure 
due space limitations omit details 

id edges added edge labeled table name added node node single derivation id edge node node 

edge labeled table list added node node 
edge labeled select part added node node 
process continues eventually edge labeled select stmt added node node final graph shown due space limitations 
go back example section 
running type environment reconstruction algorithm example edge start state automaton final state labeled select stmt 
edge single derivation parts select edge edge labeled delimiter 
select edge single derivation link select part edge link select part edge 
links form different parse trees automaton 
top traversal parse trees determine tables apply column lists schema tables determine possible types column 
add type edges graph replacing column names corresponding types 
notice possibility multiple contexts column may type 
example know column ta nonterminal productions integer integer integer integer integer integer integer integer abs integer decimal decimal integer integer varchar varchar upper varchar varchar varchar boolean integer compare op integer integer table 
sql select statement type system grammar add edge graph 
come primitive edge labeled determine column name literal 
point determine literal type add graph edge 
type environment reconstruction errors discovered 
instance determine invalid column exist applicable tables column 
happens error reported improperly quoted literal nonexistent column 
errors detected step including duplicate table table appears clause duplicate uses table alias tables assigned alias non existent tables schema table referenced clause 

type checking final step analysis perform typechecking automaton produced previous step described previous section 
stage automaton annotated show types column names literals 
sql simple type system lets treat type system context free grammar 
example type rule additions integers looks rule viewed equivalent grammar rule states integer plus integer integer 
rules type checking sql expressions handled similar manner 
possible due sql simple type language collection atomic types 
contrast general purpose programming languages 
sample steps running type grammar 
complicated type structures 
table shows small subset context free grammar type checking rules sql statement 
rules straightforward merits explanation 
rule says conditional expression typed sub query inside parentheses required type integer reduces single column type integer outer expression integer 
rule requires sub query correct type 
similar rule shown exists type 
notice specify rules example rules statement 
rules obvious omit due space limitations 
standard type system rules apply language construct type error discovered 
apply cfl reachability algorithm grammar table propagate type information 
process expression match right hand sides rules error discovered 
sense implicit error rules grammar illustrate type checking example 
consider small snippet shown taken working example section 
type checking begins automaton annotated type information column names literals shown 
figures cd show steps type propagation grammar rules 
type checking step produce edges labeled object programs specified automaton type correct 
hand typechecking produce edge analysis reports potential errors displays sample derivation causes type error 
note reported error 

discovering type error 
may actual error original java program due imprecision automaton characterization object programs 
case sql analysis precise assumption object programs specified automaton feasible original java source program 
shows edge added snippet example program corresponding concatenation error character numeric result division 
note irrelevant edges omitted 
errors example discovered similar manner 

correctness analysis state briefly argue soundness analysis 
due conservative approximations analysis may report spurious infeasible error 
section experimental data support claim analysis precise low false positive rates 
theorem soundness analysis sound 
words analysis report errors generated object programs type safe 
proof 
sketch give brief justification soundness theorem 
assume automaton operate conservative approximation set possible sql query strings particular hotspot 
guaranteed correctness string analysis 
assumption query strings produced automaton syntactically correct crucial soundness analysis 
show considers possible derivations query strings query strings correct syntax 
type environment reconstruction step correct meaning column name considered possible tables 
example annotate edge labeled column type integer path automaton containing edge particular column type integer 
step columns labeled superset actual types 
resulting automaton contains path type error detected cfl reachability considers possible edge combinations 
enforced string analysis 

experimental evaluation built prototype tool embodying approach tested ability detect programming errors java jdbc applications 
sql developer attest database vendor implements different version sql checkers require porting effort different database 
implemented analysis select statement specified grammar oracle version 
grammar subset specified sql standard 
adding support statements different vendors difficult separated type environment reconstruction type checking steps 
cases simply need modify syntax grammar type system rules specified input files analysis recursive descent code traverse parse trees map column names possible types 
goal having sound analysis built strict semantics tool program deemed type safe analysis type safe database system 
semantics database systems strict enforced tool tool may report error database systems consider legitimate 
tool implemented java uses string analysis computing fsa turn uses soot framework parse class files compute interprocedural control flow graphs 
tested tool various test programs including student team projects undergraduate software engineering class sample code online tutorials web code projects available 
table lists test programs summarizes results 
test program list java source code size number lines source code number hotspots program number columns database schema generated automaton size number edges nodes analysis time split automaton generation semantic analysis numbers various warnings errors cf 
table 
note test programs sorted automaton size measure complexity programs analysis 
experiments done machine ghz intel xeon processor gb ram running linux kernel 
results indicate analysis precise low false positive rates 
analysis sound tool report error program verified program type correct 
addition tuned performance implementation analysis quite efficient able analyze test programs matter minutes 
expect analysis scale large systems analyses underlying algorithms shown scale millions source lines 
experiments needed verify test programs size analysis time sec errors student java total web download program schema automaton automaton semantic total confirmed false industrial lines hotspots columns edges nodes generation analysis warnings errors errors errors smi tictactoe checkers reservations error kind description test programs type concatenation fields mismatch wrong types 
type possibly string mismatch compared varchar column 
type quoting numerical value checkers office mismatch treating numerical 
talk tictactoe semantic ambiguous column selection 
error semantic column 
checkers error spurious column error due imprecision string analysis 
comparing numerical value warning possibly non numerical tictactoe value 
table 
breakdown errors warnings 
claim 
table shows breakdown kinds errors test programs 
explain errors detail concatenation fields wrong types 
error concatenation retail section 
discovering error porting program different strict database tool find instances error program 
possibly string 
assume comparison name represents unknown string 
quotes string possibly represents error occurs 
quoting numerical value 
happens numerical value quoted treated numerical literal 
common error student projects 
mysql permits numerical literals quoted 
database systems consider error quoted numerical literals 
ambiguous column selection 
tool detected error sample code tutorial web table 
experimental results 
site web bureau com modules sql php 
error quite subtle appears unknown 
particular statement select customer id customers orders customer id customer id error database know table customer id choose 
certainly matter customer id select particular statement general semantics column list depend outcome clause 
column 
error happens column name exist tables clause 
distinct causes error real error spurious error real error schema database include column 
caused selecting nonexistent column missing quotes literal treated column 
spurious error due imprecision string analysis 
consider example public method string construct clause public string string tables return select name tables string analysis adds edge table list clause meaning table possible addition concrete table list finds analyzing input classes 
reason method public string analysis expects calls method possible views input classes incomplete 
presence edge causes analysis search column empty table list certainly fails 
kind spurious errors test programs 
errors easily filtered modifying string analysis consider input complete set classes warning 
type warning test programs 
illustrated running ex ample section compare numerical column possibly non numerical value runtime 
shown tool detect errors nontrivial programs 
evaluate tool provide programming aid students plan experiment tool undergraduate software engineering class 

related section survey closely related 
closely related string analysis christensen ller schwartzbach forms basis analysis 
string analysis ensures generated object programs syntactically correct 
provide semantic correctness guarantee object programs 
domain specific languages proposed ensuring correctness dynamically generated web documents 
language extensions enhanced tree manipulation capabilities string manipulations deal 
addition usually provide guarantee correct syntax semantic correctness guaranteed 
mention research efforts static validation dynamically generated web documents html 
authors propose typed higher order template language provides safety dynamically generated web documents bigwig project extension java high level web service development 
type system standard data flow analysis techniques 
lines statically validate dynamically generated html documents official dtd xhtml 
data flow analysis computes summary possible documents particular point program 
summary graph validated official dtd xhtml 
done context bigwig language 
test adequacy criterion data intensive applications 
approach complementary static analysis save testing time testing discover logical defects related sql query construction 
put broader context research viewed instance providing static safety guarantee meta programming 
macros earliest metaprogramming technique issue correctness generated code arose 
macro programmers powerful macro programming languages clearly need worry correctness generated code 
macro meta programs statically checked correctness 
widely macro pre processor little checking allows write arbitrary macros regard correctness 
programmable syntax macros weise crew level correct tree ast fragments guarantee generated code syntactically correct respect specifically language 
static type checking guarantee ast fragments expressions statements assembled correctly macro meta programs 
issue scoping generated names macro expansion capture variable names unexpected manner 
hygienic macro expansion algorithms kohlbecker provide guarantees 
seeks extend syntactic scoping guarantees semantic guarantees generated code 
taha sheard concerned functional programming setting guaranteeing generated code type safe 
introduce new macro language uniform functional setting functional languages meta target levels 
goal simply ensure strings passed database arbitrary java program type safe sql queries perspective database schema 
expect general technique outlined extended apply settings 

sound static analysis technique verifying correctness dynamically generated sql query strings database applications 
technique applications string analysis java programs variant context free language reachability algorithm 
implemented technique performed extensive testing tool realistic programs 
tool detected known unknown errors programs precise low false positive rates test programs 
interesting directions 
increase usability tool debugging interesting map error path find automaton original java source 
possible approach carry line numbers flow graph nodes source code automaton path automaton associated set source lines original java program 
related problem check correct uses query results source program 
consider example query select name salary employee statement query salary name result set table pairs type string name column int salary column 
statement salary attempts read field pair string treat integer 
statement similar error 
mapping analysis results back original program detect class errors 
class embedded sql command injection problems web database applications interesting look 
problem proper input validation attacker supply arbitrary code executed web database server extremely dangerous 
plan extend approach deal class errors 
considered sql far 
believe technique general plan investigate extend analyze dynamically generated programs languages 
acknowledgments anders ller simon christensen useful discussions research students ecs uc davis providing source code projects evaluation tool 
anonymous reviewers icse valuable comments 
aho sethi ullman 
compilers principles techniques tools 
addison wesley 
amadio cardelli 
subtyping recursive types 
proceedings th annual acm sigplan sigact symposium principles programming languages pages 
andersen :10.1.1.109.6502
program analysis specialization programming language 
phd thesis diku university copenhagen may 
diku report 
ller schwartzbach 
static validation dynamically generated html 
acm sigplan sigsoft workshop program analysis software tools engineering pages june 
brabrand ller schwartzbach 
bigwig project 
acm transactions internet technology 
christensen ller schwartzbach 
precise analysis string expressions 
proceedings th international static analysis symposium pages 

bnf index sql oracle 
available cui unige ch db research sql 
heintze 
ultra fast aliasing analysis cla lines code second 
proceedings acm sigplan conference programming language design implementation pages 
hopcroft ullman 
automata theory language computation 
addison wesley reading ma 
kam ullman 
global data flow analysis iterative algorithms 
journal acm jan 
soffa 
family test adequacy criteria database driven applications 
proceedings th european software engineering conference th acm sigsoft symposium foundations software engineering pages 
kildall 
unified approach global program optimization 
conference record acm symposium principles programming languages pages 
acm sigact sigplan 
kohlbecker friedman felleisen duba 
macro expansion 
proceedings acm conference lisp functional programming pages 
reps set constraints context free language reachability 
proceedings acm symposium partial evaluation semantics program manipulation pepm pages 
reps horwitz sagiv 
precise interprocedural dataflow analysis graph reachability 
proceedings nd annual acm sigplan sigact symposium principles programming languages pages 
sandholm schwartzbach 
type system dynamic web documents 
proceedings th annual acm sigplan sigact symposium principles programming languages pages 
shivers 
control flow analysis scheme 
proceedings acm sigplan conference programming language design implementation pages june 
su hndrich aiken 
projection merging reducing redundancies inclusion constraint graphs 
proceedings th annual acm sigplan sigact symposium principles programming languages pages 
taha sheard 
multi stage programming explicit annotations 
proceedings acm sigplan symposium partial evaluation semantic program manipulations pages 
rai hendren sundaresan lam gagnon soot java optimization framework 
proc 
ibm centre advanced studies conference cas con 
ibm nov 
mcgraw 
building secure software avoid security problems right way 
addison wesley 
weise crew 
programmable syntax macros 
sigplan conference programming language design implementation pages 
yellin 
speeding dynamic transitive closure bounded degree graphs 
acta informatica july 
