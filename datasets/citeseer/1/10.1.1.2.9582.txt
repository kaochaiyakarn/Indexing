temporal ocl extensions specification real time constraints stephan flake lab paderborn university paderborn germany unified modeling language uml receives increasing attention designers real time systems 
approaches extend uml notation modeling real time applications 
context essential able specify time bounded temporal constraints prerequisite validate model correct system behavior 
currently uml corresponding extensions provide limited means express temporal constraints dynamic behavior objects 
furthermore object constraint language ocl developed express restrictions parts uml models currently lacks means specify temporal constraints 
think appropriate notation specify temporal constraints dynamic behavior objects preferably base existing uml concepts 
propose extension ocl complies existing concepts suitable express temporal time bounded constraints 

domain specific approaches frequently uml profiles extension mechanisms stereotypes introduce new model elements particular needs sections 
popular approaches apply uml domain real time systems uml rt profile room methodology 
real time extensions uml exist enable designers adequately model structure architecture real time systems 
approaches partially influenced uml infrastructure superstructure proposals adopted omg 
uml superstructure proposal new kinds diagrams component diagrams composite structure diagrams timing diagrams new model elements protocol state machines ports interfaces introduced 
modeling system important aspects system development analysis validation test especially safety critical application domains formal verification 
context additional specification desired properties system consideration satisfy employed 
properties need closer attention primarily concern dynamic behavior temporal constraints specific time bounds 
model investigated analyzed validated tested verified time bounded temporal constraints 
article review uml model elements express temporal constraints focus time bounded constraints 
consider existing uml documents uml uml specifications uml profile schedulability performance time latest ocl proposal section 
section outline extensions uml ocl introduce means temporal constraints 
section concludes expectations uml ocl extensions specification temporal constraints 

time related concepts uml current uml standard provides ways specify behavioral time related properties timing expressions sequence diagrams indicate times sending receiving messages formulate constraints reply sec section elapsed time events statecharts trigger state transitions specific time passed state change sec section 
advanced modeling real time behavior extensions behavioral uml diagrams applied 
example time bounds state durations modeled stereotype metaclass state semantically harel definition statecharts 
generally uml standard notion time 
different extensions uml developed means uml profiles popular rt uml uml rt room methodology 
uml profile schedulability performance time adopted omg september 
profile provides common framework time related concepts clocks timers timed actions timed events limited means concerning specification temporal object behavior 
uml superstructure proposal sequence diagrams equipped improved modeling elements time bounds 
arcs represent messages sent objects annotated expressions refer duration observations code duration duration constraints time observations time constraints 
timing diagrams new kinds diagrams uml section 
timing diagrams model changes object states time linear time axis 
basically modelers specify conditions imply object state changes part object lifelines 
behavior objects interactions objects restricted 
examples provided guideline basic graphical notation uml superstructure proposal semantics description timing diagram incomplete semantics tick mark values timing rulers unclear 
object constraint language ocl integral part uml chapter 
declarative expression language enables modelers formulate constraints context uml model 
ocl specify invariants attached classes pre postconditions operations conditions state transitions 
far ocl means formulate temporal constraints 
latest ocl proposal introduces language concept enables modelers reason messages sent called ocl messages 
broad sense ocl messages establish temporal notion ocl set messages sent operation execution regarded 
apart ocl messages concept ocl specify temporal constraints 
different approaches taken ocl basis developed temporal extensions enable modelers specify temporal constraints 
overview section 

temporal extensions ocl years number ocl extensions independently proposed enable modelers specify temporal constraints 
review temporal ocl extensions authors outline approach provide comparison approaches syntax semantics support explicit timing specification 

related ramakrishnan extend ocl additional rules unary binary temporal operators specify safety liveness properties 
similar approach area business modeling considers past temporal operators published conrad 
resulting syntax works combine standard ocl temporal expressions appear similar temporal logics formulae 
kleppe warmer introduced called action clause ocl 
basically action clauses enable modelers specify required synchronous asynchronous executions operations dispatching events 
influenced previously mentioned message concept ocl proposal 
define object temporal logic order facilitate specification static dynamic properties 
directly extension ocl maps subset ocl object oriented computation tree logic ctl 
syntactically looks similar temporal logics formulae common ctl 
extend ocl useful causality templates dynamic constraints 
basically template consists clauses cause consequence 
cause clause starts keyword followed boolean expression consequence eventually immediately infinitely followed ocl expression 
templates formally defined mapping observational calculus level temporal logic ocl lower level logic 
gogolla ocl extension oriented temporal development attribute values existence objects links restricted 
similar approaches temporal operators introduced 
defining formal semantics build set theoretic ocl semantics developed richters define traces sequences system states 
trace employs high level notion development running system information necessary evaluate ocl expressions 
note approaches mentioned far considers real time constraints 
rudimentary table 
temporal ocl extensions real time specification approach syntax formal semantics real time ramakrishnan ocl temporal operators conrad ocl temporal operators kleppe warmer ocl action clause ctl ocl subset ocl template clauses observational calculus gogolla ocl temporal operators trace semantics stereotyped classes tctl ocl consistent knapp ocl temporal operators trace semantics flake mueller ocl consistent clocked ctl informal uml modeling elements described section know approaches 
defines uml profile stereotyped classes dense time parameterized specification templates deadlines counters state sequences 
templates structural equivalent dense time temporal logics formula tctl timed computation tree logic 
introduce timing constraints state transitions context restricted form uml protocol state machines called sip system interface protocol 
sip defines temporal ordering operations 
time attributes state transitions proposed absolute completion time duration time frequency state transitions 
attributes relate actions timing constraint failures extended form transition condition uml terms transition guard 
knapp ocl rt temporal extension ocl modal operators event occurrences 
specifying deadlines timeouts operations reactions received signals 
metamodel level events equipped time stamps introducing metaclass time attribute refer time unit event occurs 
turn instance access set current associated events point time system state 

state oriented temporal ocl extension current ocl possible check activated state object operation state statename 
extensive reasoning states temporal ocl extension called rt ocl notion state sequences mal definition active state configurations 
syntax ocl extension consistent common ocl syntax builds metamodel ocl proposal 
basically provide means specify temporal constraints statechart states safety liveness properties 
shown ocl extension expressive power specify properties regarded relevant practice property specification pattern system dwyer 
formal semantics trace semantics similar approach gogolla 
additionally map state temporal ocl expressions time annotated temporal tree logic formulae clocked ctl application model checking tools 

comparison think successful approach formulate temporal time bounded constraints uml ocl characteristics syntax temporal constraints notated conforming existing concepts uml 
important quite extensive notation uml adopted accepted uml users 
semantics temporal constraints provided formal semantics 
formal semantics unique notational meaning guaranteed formal verification techniques employed 
note current notion active state configurations informally defined deficiencies consider final states active state configurations 
note mapping referred uml model appropriate model checking input additionally defined 
real time notation temporal constraints support specification time bounds timing intervals 
especially important modeling safety critical systems 
table lists mentioned approaches compares desired characteristics 
approaches formal semantics formal verification model checking mind 
formal verification theorem proving ocl investigated key project 
approach aims facilitate formal verification software specifications 
ocl applied modifications specify constraints design patterns 
standard ocl currently formal semantics approach translates ocl specifications dynamic logic dl extension hoare logic 
dl input formal verification theorem proving 

ocl years complaints concrete ocl syntax observed section 
uml metamodel approach ocl proposal enable tool developers overcome problem 
basically tools employ constraint language uml provide mapping ocl metamodel 
tool stick concrete ocl syntax provided ocl proposal 
example available graphical ocl variant 
semantics ocl deficiencies 
ocl proposal semantic descriptions provided 
hand metamodel semantics associates syntax metamodel values actual level 
hand formal semantics means naive settheoretic approach object models provided mark richters 
unfortunately semantics currently consistent complete formal semantics consider newly introduced concept ocl messages semantics lack integration statecharts semantic definition state related operations 
problems fixed finalization process ocl remains general problem level abstraction define semantics ocl 
context hussmann argues naive set theory metamodel approach fully adequate building conceptual bridge programming artifacts produced uml ocl formal semantics currently defined ocl 
basically due direct mapping attributes values particular semantic domain 
research necessary overcome issue 
evolution application extension ocl comparable evolution uml general modelers academia industry identify deficiencies apply language specific domain consequently extend language needs 
examples area business processes databases real time systems cf 
overview research efforts ocl 
expect extensions ocl developed different application domains year uml conference ocl extension concerning preserving contracts 
similarly ocl extensions domain modeling real time systems 
semantical issues play important role context interdependencies uml extensions uml profile schedulability performance time studied extensively 
imaginable ocl extensions profile extend appropriate means resulting notation enables uml users specify time bounded temporal constraints 
receives funding deutsche forschungsgemeinschaft course special research initiative self optimizing concepts structures mechanical engineering 
baar beckert menzel schmitt 
key approach integrating object oriented design formal verification 
editors th european workshop logics ai jelia malaga spain volume lncs pages 
springer october 
stevens 
enriching ocl observational mu calculus 

weber editors fundamental approaches software engineering fase grenoble france volume lncs pages 
springer april 
knapp 
ocl rt 

eriksson lindsay editors formal methods getting right international symposium formal methods europe copenhagen denmark volume lncs pages 
springer july 
clark warmer editors 
object modeling ocl volume lncs 
springer heidelberg germany february 
conrad 
temporal ocl meeting specifications demands business components 
halpin editors unified modeling language systems analysis design development issues pages 
idea group publishing 

katoen rensink 
temporal logic object systems 
smith talcott editors formal methods open object distributed systems iv stanford ca usa pages 
kluwer academic publishers september 
douglass 
doing hard time developing real time systems uml objects frameworks patterns 
addison wesley 
dwyer avrunin corbett 
system specification patterns september 
www cis ksu edu santos spec patterns 
flake mueller 
uml profile real time constraints ocl 

quel hussmann cook editors uml unified modeling language 
model engineering languages concepts tools dresden germany september october volume lncs pages 
springer 
flake mueller 
expressing property specification patterns ocl 
international conference software engineering research practice las vegas nevada usa june pages 
csrea press 
flake mueller 
formal semantics static temporal state oriented ocl constraints 
journal software system modeling october 
harel 
statecharts visual formalism complex systems 
science computer programming june 
hussmann 
loose semantics uml ocl 
ehrig kraemer editor th world conference integrated design process technology pasadena ca usa june 
johnston 
response uml ocl rfp version submitters rational iona adaptive 
omg document ad january 
taentzer 
visual notation object constraint language 
technical report computer science department technical university berlin germany 
kleppe warmer 
extending ocl include actions 
evans kent selic editors uml unified modeling language 
advancing standard 
rd international conference york uk october volume lncs pages 
springer 
nunes 
ocl extension low coupling preserving contracts 
booch stevens whittle editors uml unified modeling language 
modeling languages applications san francisco ca usa october lncs 
springer october 
object management group 
uml profile schedulability performance time specification 
omg document ptc april 
object management group 
unified modeling language specification 
omg document formal march 
www omg org technology documents formal uml htm 
object management group 
unified modeling language infrastructure version 
adopted specification omg document ad july 
object management group 
unified modeling language superstructure version 
final adopted specification omg document ptc august 

swinging uml class diagrams state machines amenable constraint solving proving 
evans kent selic editors uml unified modeling language 
advancing standard 
rd international conference york uk october volume lncs pages 
springer 
ramakrishnan mcgregor 
extending ocl support temporal operators 
st international conference software engineering icse workshop testing distributed component systems los angeles ca usa may 
richters 
precise approach validating uml models ocl constraints 
phd thesis universit bremen bremen germany 

specification real time properties uml 
nd ieee real time systems symposium rtss progress section london uk december 
van de 
real time systems specification properties uml 
proceedings th annual conference advanced school computing imaging asci pages het netherlands may 
selic rumbaugh 
uml modeling complex real time systems 
white 
www rational com media whitepapers pdf 

specifying concurrent system behavior timing constraints ocl uml 
gogolla editors uml unified modeling language 
modeling languages concepts tools 
th international conference toronto canada october volume lncs pages 
springer 
gogolla 
extension ocl temporal logic 
fernandez rumpe editors critical systems development uml pages 
technische universit nchen institut informatik 
