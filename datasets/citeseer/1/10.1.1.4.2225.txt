exploration complex objects structure knowledge discovery valtchev missaoui epartement informatique succ 
centre ville montr eal qu ebec canada mail valtchev info ca missaoui ca evolution database management systems dbms increasing structuration data models 
standards sql oql go relational world integrating features object oriented paradigm 
urges data mining community shift research focus tools techniques fit complex structure data 
major results subject missing 
try summarize features structured data challenge existing mining techniques 
suggest possible solutions inspired mining complex object datasets 
key element approach object metrics enables clustering complex objects class design purposes 
definition recursive decomposition objects simple values metric fits objects arbitrary complex structure 
believe approach generalized mining techniques broader range structured data models 
complex object assembly semantically related objects hierarchically structured 
objects may turn complex simple ones aggregations attribute values known data types 
comparing set structured complex objects challenging quite relevant research issue fields machine learning data mining 
challenge comes nested structure complex objects presence various constructs bags sets lists semantic relationships hold components possible existence recursive links dependents person persons 
studies knowledge discovery machine learning focused mining flat tables care underlying semantic relationships may exist objects 
ignoring semantic structure data means losing valuable assets discarding important source potentially useful patterns concepts rules 
manipulation objects arbitrary complex structure major concern object oriented database paradigm object relational rapidly gaining popularity 
contrast mining object oriented complex datasets hardly addressed literature 
advances dbms believe urgent need investigate topic 
provide discussion main challenges object mining techniques face grounded experience integrating data mining tool object oriented knowledge base management system 
focuses design mining tools thoroughly cover possible variations object structure 
core result distance measure complex objects definition follows knowledge base kb schema 
starts presentation object oriented environment allows definition highly structured objects section 
example object dataset provided illustrate main difficulties object comparison 
problems help formulation concrete requirements mining techniques meet section 
definition object dissimilarity measure satisfy theses requirements section 
example dissimilarity computation subsequent clustering class hierarchy design provided section 
object formalism section object kb management system supports adts complex objects collection types multiple class taxonomies objects 
presentation limited features model relevant subject leaving uncovered large part system functionalities 
addition non standard aspects model described reader assumed familiar conventional object concepts met programming languages java 
sake clarity start concrete kb rest 
example knowledge base choose kb representing real estate domain kinds entities apartments flats apartment rooms human beings 
humans described features name age salary sex profession apartments address surface rent rooms surface exposure 
furthermore rooms constitutive parts apartments humans may owners inhabitants apartment 
parent child spouse considered 
uml see schema kb fig 

human salary float age integer name string children spouse owner dwelling ordered rent float flat address string surface integer rooms surface integer exposure string room example kb kinds entities flats rooms humans 
informal description object model built object kb particular domain molecular biology medicine calculi domain entities represented structured objects 
object model includes basic elements object identifiers oid attributes types classes inheritance class taxonomies roles quite similar oo programming paradigm 
entire model briefly focus specific elements frame languages relational database inspiration 
syntax examples quasi identical textual format syntax higher abstraction level corresponding denotational semantics description language may 
objects concepts adts objects kb divided disjoint families called concepts flat human room 
concept defines identity structure belonging objects called instances providing namespace oids set object attributes defined names types instance object representing apartment instance flat concept attributes specified concept rent surface price 
example concept instances fig 

attribute type may high standing flat flat interval kind flat rooms rent rooms rent room room room domain basic service owner rent human owner rooms nature property cons cons set type room nature component cons nature link type real type human example concept flat class high standing instance flat 
entities provide lists attributes concept attributes specify data types nature constructor necessary interpreting values instance attributes class attributes provide value restrictions instance attributes instance attributes contain values 
simple data type object set 
case attribute expresses proper feature modeled entities said property nature 
second case attribute represents relationship entities may part association component nature general kind associations link nature spatial relations simple data types external object model 
introduced outside world application environment means data types adts 
adt similar concept embodies description particular sort entities 
values adt instances concept interpreted fundamentally different ways concept objects may mapped domain elements values adt map value domain numbers symbols 
case flat concept attributes rent area surface properties owner rooms relational attributes 
may seen fig 
value rooms attribute flat set instances room concept 
admits multi valued attributes object descriptions uniform attribute definition scheme 
attributes seen constructed top basic type means constructors single valued attributes set list multi valued ones 
similar relational table 
adt provides set manipulation primitives hide particular implementation typically allows membership tests visualization primitives equality possibly order predicate see 
classes types classes complementary concepts characterize extensionally intensionally see paragraph subsets concept instances 
class attributes introduce restrictions attribute values member objects 
restriction specifies set admissible values domain attribute basic types restrictions called types expressed means type description language elements constants operators descriptors similar descriptive facets frame languages 
set descriptors includes domain interval straightforward interpretation 
instance type rent class high standing see fig 
means values fit 
descriptors cardinality multi valued attributes class relational ones 
instance class value rooms attribute restricted sets members classes basic service summary objects data model object kb set concepts provided set instances organized class taxonomies 
concepts define structure instances classes describe variations structure member objects 
type theory founded view object structure applied object seen product attribute values simple values objects collections 
concept regularity attribute sets instances allows see concept multi dimensional description space 
space concept attributes seen dimensions relational attributes defining complex dimensions 
furthermore instances points space classes regions 
class region projected dimension resulting subset values exactly type underlying attribute class 
view mind reasonable see classes regions highly populated object points opposed empty parts space 
pushing idea may imagine class design strategy concept set instances discovers plausible classes regions higher density object points separated empty regions 
section discuss utility data mining techniques process kb design type oriented approach complex object processing mining 
process object structure analysis issues able extract patterns large sets complex objects may prove useful various purposes kb design framework 
concern discovery plausible hierarchical classifications kb objects drafts class taxonomies 
task requires powerful tools explore fine grain object structure 
show carefully chosen distance measure right solution 
main challenges mining set objects amounts great extend examining attribute values attribute attribute manner 
complexity task tightly related richness attribute basic types concept description 
classes assumed exist semantics basic rooms include bedrooms living rooms wc bathroom kitchen considered service 
attributes undefined 
course points may represent valid objects generally small part attribute value combinations occur 
semantic constructs find object attributes 
instance objects attributes values atomic stem commonly known data types able compare values admissible data type 
underlying mining paradigm similarity required tools type oriented distance measures say ffi 
function needed yield global result object couple typically manhattan euclidean 
usually ffi readily available function associated particular data type set subtraction numerical types 
values types compared functions fit 
comparison rely user provided ad hoc similarity primitive part specific adt generic comparison principle defined top available primitives adt 
collections multi valued attributes may vary content set collection members size 
invalidates straightforward comparison strategies effective comparison mechanism take account content size 
computationally inexpensive solution draws summaries collections compares summaries 
sophisticated fine grain mechanism requires suitable trade size content 
relational attributes require nested object comparisons 
task addressed entire model appears subtask apparently increase model complexity 
nesting object structure may vary depth cyclic nature instance spouse attribute human 
cyclic dependence object structure handled conventional twolevel dissimilarity models 
kb schema product view concepts suggested previous section may extended include entire set constructs object model 
fact object complex value may seen application tuple constructor set attribute values may turn result constructor applications 
formal framework gradual decomposition complex object simple values provided complex value model database theory 
model basic elements set data types ii set type constructors tuples sets lists bags 
type constructors gradual assembly complex value types simple values complex types 
context complex value model applied concept level concepts define basic object structure 
possible logical schema real estate kb expressed model fig 

instance flat kb product tuple integer surface float rent set rooms human 
values atomic ones decomposed set rooms result applying set constructor group rooms human product tuple 
principle formulated allows compose dissimilarity values way 
solution principle key idea apply systematic decomposition object structure computation object dissimilarities 
dissimilarity model distinguish basic blocks set dissimilarities ffi construct functions associated type constructors 
ffi maps couples simple values type real numbers construct function defined top functions basic construct basically maps set real numbers real number 
ground condition complete effective dissimilarity model may require simple type provided suitable ffi 
adt admitted object attributes generic ffi necessary object tuple type set constructor list constructor simple data type human flat salary age children spouse surface owner dwelling rooms 
room int int int float rent example kb logical schema complex value model 
graphical formalism largely inspired 
sure type covered model 
generic function defined top available primitives adt 
just type constructors aggregate sets values complex value constructs combine dissimilarities single values global dissimilarity 
aspect tuples differ collections attributes different types collections remain type homogeneous 
tuple dissimilarity sensible combination attribute dissimilarities possible differentiation 
contrast collection construct embeds dissimilarity collections basic type 
requires additional mechanism able couple collections select representative subset member couples dissimilarities considered 
particular constraints order repetition collection constructor act selection level leaving core computation generic 
entire model extensible new constructors bags arrays provided suitable selection formulated 
furthermore object structure may embed arbitrary sequence constructors construct functions compose freely construct admits construct argument 
entails compatibility basic type range results possibility nested computations 
ensure chose model functions elementary constructs normalized take values 
value readily interpreted percentage complex values 
global process computing dissimilarity couple objects may seen gradual simultaneous decomposition logical schema kb reverse composition final dissimilarity value 
cyclic appear object structure dissimilarity values different object couples may fall deadlock mutual dependence circuit 
case computed solutions equation system section describe implementation principles 
dissimilarity objects dissimilarity measure designed comparing objects particular concept 
level function lower level attribute dissimilarities ffi field upper level object dissimilarity description model component functions follows section example dissimilarity computation section 
see object level function object level component model construct function works tuple complex values 
assume concept attribute set fa instance set fo object dissimilarity function map object couples real numbers 
aimed assessing resemblance objects attribute wise differences 
computed combination ffi values 
computational reasons normalized linear combination chosen function minkowski distance family fit 
possibility feeding attribute weights computation granted 
couple objects dissimilarity computed ffi user provided attribute weights 
generic attribute dissimilarity ffi instantiated particular attribute respect attribute nature property relation constructor described 
attribute level functions assume attribute concept basic type domain set values fv attribute constructor ffi substituted formula collection dissimilarity ffi single valued function chosen respect property dissimilarity ffi adt relational dissimilarity ffi concept property dissimilarity cases adt represents known data type dissimilarity function ffi may computed little additional effort numerical types integer float 
common types ffi may simply provided primitive adt adt dna sequences may include matrix distance function 
case dissimilarity suggest computational principle avoids trivial comparison procedures equality values different specific common type large 
type defined expression mixing type descriptors adt primitives corresponds set adt values 
definition generic dissimilarity assume primitives parts type management interface 
generalization operator maps set values specific types described gen 
set types may expressed extend function maps types relative size value sets respect entire domain 
compute dissimilarity values type domain find specific common type gen fv compute extend ffi kgen fv gamma kgen fvg kgen fv subtraction average value extends twofold role hand ensures extensibility formula value sets types hand generic formula compatible dissimilarity functions conventional data types integer float nominal 
function superscripts stand multi valued property relational respectively function result couple interpreted relative size value set necessary add obtain gen fv 
relational attributes couple objects compared straightforward manner complex values tuple structure 
case ffi substituted object level function type applying means going step deeper object nested structure may require additional external knowledge computation weights attributes 
intuitive comparison principle sees objects members classes tuples explores mutual position class taxonomy 
illustrates tight analogy exists objects classes concepts hand values types adt hand 
class relational dissimilarity defined way quite similar generic property function 
primitives remain identical gen computes specific class non singleton object set generalization single objects objects computes relative size object set respect entire set instances ffi kgen fo gamma kgen fog kgen fo course second function sense provided class taxonomy 
condition ensured set concepts circularity exists object descriptions 
multi valued attributes collection comparison rely collection members content proximity collection sizes 
multi valued dissimilarity reasonably combine content size factors 
collection function ffi achieves required trade means matching definition 
pair wise matching collection members prior ffi computation carried 
matching procedure dissimilarity ffi basic type domain parameter collection comparison strategy ffi appropriate function model 
couple values members 
matching ffi opt ffi maximal size ii exclusive iii minimal total dissimilarity computed matched couples 
suppose non empty opt ffi matching satisfying conditions 
dissimilarity follows sum pair wise dissimilarities opt ffi 
exact value shifted number unmatched elements bigger collection normalized size collection ffi ffi ffi jl gamma qj max case collections empty dissimilarity set zero ffi ffi may notice formula says way opt ffi computed 
separate problem may happen computationally hard 
constructors considered search optimal matching reduces known problems graph information theory exact polynomial time algorithms exist 
noteworthy different constructors matching component may vary rest formula remains unchanged 
order perform comparison particular constructor formulate matching procedure satisfies specific constraints order 
properties measure order useful proximity measure meet certain requirements quite practical flavor lay formal basis 
hand measure basis software tool admit terminating computationally inexpensive procedure 
point proven new measure founded values exist computed algorithm polynomial number objects compare 
hand useful analysis tasks proximity measures mathematical functions properties symmetry example 
function proven represent valid dissimilarity measure property functions ffi valid dissimilarities 
furthermore sufficient necessary condition satisfy triangular inequality distance function ffi distances values multi valued attribute collections size room flats 
application measure class design objects exist independently classes describe contextual groupings objects 
happens naturally large object set admits established class organization 
situation may occur example kb domain scientific technical commercial currently investigation 
generic object oriented database objects attached classes 
may happen classes general need split specific sub classes 
process may seen basically schema refinement requires partition class extension attribute value criteria shared attributes detection regularities object suggest location plausible classes tracks kb designer may explore 
objects highly nested structure complexity task may go human capacity automatic aid necessary 
providing assistance discovery potential classes original motivation design measure may broader range knowledge manipulations including case reasoning flexible querying basics provide example measure assist design classes 
class building process stages dissimilarity computation clustering characterization object clusters 
due space restrictions left uncovered important aspects related multi concept multi viewpoint environment kb 
example provide consists single object set human instances 
reasons object features restricted single valued attributes 
despite simplifications set remains difficult analyze conventional tools objects described circular way 
classes discovered quite particular descriptions necessarily circular 
terms classes taxonomy looked point classes taxonomy 
non negative symmetric vanishes diagonal creating atkinson called constraint inheritance link initial class subclasses dataset objects set see table taken attributes age salary spouse 
spouse attribute link nature type human concept 
establishes tiny cycles instances human concept 
salary attribute indicates month income person thousands euros float type ranges age attribute integer type ranges 
furthermore took attribute weights table sample dataset human instances attribute age salary spouse follows spouse salary age 
dissimilarity computation illustrate computation take objects say 
formula dissimilarity human ffi age ffi sal ffi sps appropriate substitution total property dissimilarity amounts 
contrast value ffi sps computed similar expression human ffi age ffi sal ffi sps obvious tie created human human due spouse circuit 
resolved simultaneous fixed point calculation 
reason system equations composed variable substitutes quantity sought 
dissimilarity values obtained solution equation system 
example dissimilarities human human respectively 
linear equation system obtained solutions 
values human dataset table 
hierarchical clustering step dissimilarity matrix computed input clustering algorithm discovers groups highly similar objects possibly organizes groups hierarchically 
sample taxonomy available table dissimilarity values human hierarchical clusterings dendrograms obtained application classical link algorithms fig 

noteworthy dendrograms right suggest set classes opposed left 
fact dendrograms obtained different clustering techniques matrix tab 
contrast dendrogram result clustering kind dissimilarity values computed classical way discarding relational attribute spouse 
measures remain compatible results hierarchical clustering example dataset single linkage clustering pure property dissimilarity input single linkage clustering human input complete linkage clustering human input 
scale dendrograms left scale right 
assign equal weights object properties 
complete human embeds similarities relations circularity 
advantage measure supported final classes obtained characterization step 
characterization step stage object clusters turned object classes provided intensional description 
description consists set value restrictions object attributes obtained generalization attribute values object descriptions 
point circularity obstacle classes exist value restrictions 
example discovered classes human freely point discovered class 
part final class taxonomy example fig 

classes corresponding object clusters fo fo fo attribute wise descriptions 
typical feature taxonomies built measure may observed cross classes circular attributes occur lowest level taxonomy 
circuit classes human cl human cl established spouse attribute 
restrictions relational attributes may extracted cases attributes discarded dissimilarity human cl human cl human cl human root kind interval age salary spouse interval kind interval age human cl spouse class human cl interval class human cl salary human cl kind interval age salary spouse class human cl interval part class hierarchy obtained characterization 
classes hierarchical clustering 
clustering computations 
cases cross tend occur upper part taxonomy general classes 
phenomenon speaks increased power new measure detect similarity patterns complex circular descriptions 
space limitations prevent presenting complete example clustering class design 
interested reader may assess system automatic class construction environment url inrialpes fr 
discussion mining complex objects challenging task requires powerful mechanisms capable extracting patterns level object structure 
complex object comparison may reduced specific cases comparison flat structures flattening entails potential information loss 
approached viewpoint sees objects graphs parts linked relations 
comparison basically relies heuristic graph matching yields results entire graphs single nodes representing objects 
sketched approach mining complex objects described means properties relations 
consists defining mining mechanisms constructs object description language 
approach illustrated definition generic dissimilarity framework instantiation shown successfully deal circularity inter object relations 
concrete object model believe approach easily generalized object object relational formalisms definition mining mechanisms 
important aspects process omitted 
instance mining objects related concepts may require taxonomy construction carried simultaneously 
rises question scheduling conceptual clustering tasks set concepts 
available class taxonomies design new taxonomies interesting aspect warns fundamental complementarity metric taxonomy dataset 
abiteboul hull vianu 
foundations databases 
addison wesley 
atkinson bancilhon de witt dittrich maier zdonik 
object oriented database system manifesto 
proceedings international conference deductive object oriented databases kyoto japan pages 
bisson 
conceptual clustering order logic representation 
proceedings th european conference artificial intelligence vienna austria pages 
bisson 
define similarity measure object representation systems 
mars editor large knowledge bases pages amsterdam 
ios press 
booch rumbaugh jacobson 
unified modeling language user guide 
addison wesley 
euzenat 
object knowledge base revision 
proceedings th ecai pages brighton uk august 
emde wettschereck 
relational instance learning 
saitta editor machine learning proceedings th international conference machine learning pages 
morgan kaufmann publishers 
missaoui godin 
knowledge discovery complex objects 
computational intelligence 
guttag 
data types development data st 
communications acm june 
han nishio 
knowledge discovery object oriented active databases 
editors knowledge building knowledge sharing pages 
ohmsha ios press 
han nishio wang 
generalization data mining object oriented databases object cube model 
data knowledge engineering 
minsky 
framework representing knowledge 
winston editor psychology computer vision 
mcgraw hill 
ng han 
efficient effective clustering method spatial data mining 
proceedings international conference large databases pages santiago chile september 
projet 
tropes manual 
inria alpes grenoble fr 
stonebraker moore 
object relational dbmss great wave 
morgan kaufmann 
valtchev 
construction automatique de taxonomies pour aide la repr esentation de par objets 
th ese de doctorat universit joseph fourier grenoble 
