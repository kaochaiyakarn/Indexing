interactive process models rgensen sintef department computer information science faculty information technology mathematics electrical engineering norwegian university science technology trondheim norway january til ii contemporary business process systems built automate routine procedures 
automation demands understood domains repetitive processes clear organisational roles established terminology predefined plans 
knowledge 
plans knowledge intensive processes elaborated reinterpreted progresses 
interactive process models created updated project participants reflect evolving plans 
execution models controlled users partially automated 
interactive process system enable modelling users integrate support ad hoc routine dynamically customise functionality interfaces integrate learning knowledge management everyday 
thesis reports engineering project interactive process environment called workware developed 
workware combines workflow groupware 
incremental development method multiple versions systems designed implemented 
iteration usage experience validation data organisational science literature generated requirements version 
design ideas workware main contributions thesis 
semantic holism meaning model element depends rest model language simpler flexible user oriented 
processes modelled instance level capture unique structure project 
local models harvested templates reused similar projects 
multi dimensional classification structures built incrementally helping users identify suitable models 
modelling harvesting reuse form organisational learning cycle anchored practice 
interactive process models evolving incomplete 
define interactive enactment semantics automates defined parts model asks users handle ambiguous parts 
users may override default interpretation 
language explicitly models decisions control flow structured ad hoc processes 
structure may added removed process enabling users plan level detail find useful 
workware prototype number projects integrated tools modelling simulation real time collaboration 
data interviews questionnaires show system useful 
models developed users illustrate practical application 
comparison existing systems shows interaction approach novel workware simpler flexible existing tools 
analysis demonstrates designs useful interactive models domains 
addition extending concept workflow include emergent processes resulted general techniques interactive models change executed 
iii iv preface thesis submitted norwegian university science technology degree 
carried supervision professor arne lvberg information systems group department computer information sciences 
drawn preceding concurrent research projects sintef notably ais advanced intranet cooperation sponsored norwegian research council nfr ex extended enterprise resources network architectures learning eu ist 
studies funded nfr project living knowledge 
thesis number talented colleagues customers supervisors 
wish arne lvberg providing efficient advice especially concerning research methodologies approach 
pointed right directions excessively detailed follow 
carlsen served supervisor year 
instrumental turning interest workflow process modelling knowledge management cscw 
seeds ideas collaboration ware prototype ais project 
addition modelling language apm ideas user involvement workflow enactment came term emergent workflow joint publication 
left sintef john krogstie replaced supervisor 
john brought unique expertise conceptual modelling discussions turned modelling general human social organisational issues intertwined modelling process 
john comments careful reading helped structure shape thesis 
colleagues sintef contributed workware system 
rolf kenneth originally proposed integration awareness workflow implemented parts component 
ole involved design document manager responsible interface external modelling language repository 
nal infrastructure required efforts imagination dag karlsen stefano jessica wang thue lie 
rg haake kristin str kirsten manolis kostas guido hildrum aforementioned applied evaluated technologies cases 
am grateful frank notion active knowledge models guided 
just important continuous regeneration creative chaos projects 
vi table contents chapter problem knowledge intensive cooperation 
flexible support projects virtual enterprises 
integrating support routine ad hoc 
integrating knowledge management everyday 
approach interactive process models 
potential interactive process models 
research objectives 
research method 
research approach 
research context 
cooperation interdisciplinary projects 
validation 
scope 
contribution 
articulation 
activation 
reuse 
workflow concept 
interactive modelling design principles 
structure thesis 
chapter problem setting basic concepts 
interactive models workflow management systems 
background 
interactive models socially constructed 
articulation 
articulation 
user participation systems development 
innovation users information systems operation 
requirements articulation support 
activation 
automating 
degrees formality 
open closed systems 
change evolution 
increasing functionality avoiding 
emergent interoperability 
requirements activation support 
reuse organisational learning 
practice describe 
communities practice 
vii models tacit knowledge 
trust power participation 
process models 
importance processes 
user participation workflow articulation 
representations 
processes plans situated actions 
process models practice 
process diversity 
interactive process model reuse 
summary 
chapter state art workflow process modelling languages 
transformational process modelling languages 
conversational process modelling 
decision making processes 
declarative constraint process modelling 
roles interaction 
system dynamics 
object oriented process modelling 
explicit process representations 
conceptual modelling 
instance modelling tyranny classes 
property modelling tyranny dominant decomposition 
encapsulation semantic holism 
articulating vagueness incompleteness uncertainty 
modelling languages summary challenges 
activation workflow enactment 
static workflow management systems 
adaptive workflow management systems 
case management systems 
interactive workflow management 
workflow management systems summary 
mechanisms harvesting reuse 
generalisation process models 
classification 
inheritance 
process model composition 
projection multidimensional process models 
process model parameterisation 
process patterns 
summary reuse techniques 
active interactive process models research challenges 
articulation support major challenges 
activation support major challenges 
process model reuse major challenges 
chapter interactive emergent workflow action port modelling language apm 
interactive modelling emergent processes 
viii items 
flows 
decisions 
expressiveness 
resources 
customer responsible participant actors 
workflow enactment interactive activation 
user involvement enactment 
activating flows 
decision making 
conceptual design interactive wms 
groupware coordination complements workflow enactment 
user interfaces integrated management performance 
detailed activation semantics 
workware language metamodel 
activation management tool 
activation interactive workflow enactment 
combined enactment semantics 
metamodelling interactive languages uml 
extended activation semantics 
decomposed decisions 
parameterised decisions 
timers 
workitem automation 
reflection user defined activation rules 
inconsistencies deviations rule violations 
activation awareness engine 
awareness semantics 
awareness semantics flows 
model driven access control 
access control policies 
usage examples 
concluding remarks 
chapter reuse motivation 
instances templates classes 
emergent classification 
adaptive emergent workflow mutation 
inheritance 
language extensions reuse 
dynamic change propagation 
reusable aspects 
reuse policies 
classification specialisation reuse 
decomposition structures reuse 
resource assignment reuse 
reuse flow 
property controlled policies 
mapping parameterised reuse 
delegation copy 
ix combination problem multi dimensional inheritance 
process knowledge management interactor 
user interaction reuse 
organisational policies process knowledge management 
processes reuse 
harvesting reuse 
interactive model transformation 
utilising enactment engine support reuse 
making reuse decisions 
summary 
chapter interactive modelling techniques instance modelling local modifications 
exception handling 
explicit representation decisions 
reuse decisions 
resource allocation decisions 
product design decisions 
decisions classification concept ontologies 
user interface adaptation tailoring decisions 
decision making processes 
semantic holism 
semantic holism philosophy linguistics informatics 
semantic holism processes 
semantic holism simplifies model articulation 
limited classification 
instances referential terms 
properties aspects meaning 
derived properties enable contextual semantics 
constellations 
constructive composition vs holistic interdependencies 
summary 
semantic holism activation models 
interactive holistic workflow architecture 
holistic interaction users 
holistic interaction model elements 
holistic interaction model interactors 
semantic holism model reuse 
summary contributions 
chapter implementation workware principles 
requirements 
design principles 
user interface 
architecture 
implementation language metametamodel 
reflection 
metamodelling 
assessment 
implementation interactive activation 
management 
interactive enactment 
awareness 
document management 
access control 
summary assessment 
external infrastructure 
model data integration 
user interface integration 
integrating workflow real time groupware 
simulation ongoing projects 
summary assessment 
external modelling language 
basic modelling functionality metis 
multiple views 
methods deriving computing properties 
macros dynamic visualisation 
semantic holism eeml 
reuse 
templates 
classification reuse 
utilising breakdown structure reuse 
reuse flow 
resource allocation personalisation 
parameterisation properties 
project model lifecycle support 
summary 
chapter usage experience extended enterprise requirements 
planning 
management coordination 
collaboration 
knowledge management learning 
infrastructure management 
case external project 
periodic progress reporting 
joint project planning 
evaluation results 
action lists emergent project planning 
ad hoc applications external project 
case business consulting project cycle 
reuse project templates 
security access control 
experiences evaluation results 
case consulting sme network 
process diversity model diversity 
final evaluation results 
experiences 
summary 
xi chapter related process modelling 
process modelling principles sociotechnical job design 
workflow process modelling standards 
transformational modelling languages 
modelling varying degrees specificity 
language action conversational process models 
decision oriented process modelling 
process modelling languages 
interactive modelling languages 
semantic holism enterprise modelling 
simplifying uml semantic holism 
interactive conceptual modelling 
summary 
interactive activation 
interactive workflow enactment 
adaptive workflow enactment 
extending activation enactment 
interactive workflow architectures 
activation approaches 
summary assessment 
reuse process knowledge management 
workflow modelling domains 
process knowledge management 
multiple models levels views 
composition process model fragments 
process model reuse techniques 
evaluation summary 
chapter contributions 
general approach interactive models 
articulation 
activation 
interactive emergent workflow 
reuse process knowledge management 
limitations directions research 
validation 
methodologies 
design 
implementation 
generalisation 
appendix research methodology scientific research 
concepts 
holistic reality formal theories 
interdisciplinary multidisciplinary concepts 
information systems engineering 
engineering research 
organisational science 
xii computer science software engineering 
information systems research 
cscw computer supported cooperative 

appendix implementation details architecture 
implementation architecture 
deployment architecture 
implementation language metametamodel 
metamodelling experience 
persistent data storage 
design patterns flexible data management 
classes default workware installation 
data management 
process modelling 
service 
service management 
user interface preferences 
awareness 
implementation interactive activation 
dynamic generation user interfaces 
technological evolution 
management 
interactive enactment 
document management 
access control 
list figures list tables xiii xiv chapter original objective research design flexible information system planning coordinating managing performing knowledge intensive 
system visual models processes 
wanted utilise models better organisational learning knowledge management 
requirements gathered workshops prospective users literature information systems computer supported cooperative cscw organisational social human sciences 
case studies showed view process support systems useful tools users complain rigidity software controlled processes 
exceptions modelled rules occur frequently seemingly routine processes offices factories 
knowledge intensive engineering consulting changes plans expected projects 
faced evolving incompletely understood process support systems closed world assumption model execution completely controlled software 
models formal consistent complete 
exceptions model evolution violate closed world assumption complex algorithms triggered order restore consistent state 
decided take opposite approach design open system 
seeing people dealt exceptions change everyday aimed augmenting capabilities tool support 
closed systems need detailed precise process models users willing capable provide 
users resolve model ambiguities time execution need model detail advance 
called approach interactive models follows notion interaction extension algorithmic computing :10.1.1.57.9269
approach process modelling moved domain process experts environment managers performers 
knowledge management process improvement foundation models individual cases better reflect way performed 
role process experts define templates users apply needed local models 
order demonstrate approach feasible useful engineering challenges met 
support users modelling 

utilise evolving models provide contextual support 

models reused adapted combined new settings 
refer interdependent problems model articulation activation reuse 
problem knowledge intensive cooperation seeks justify assumptions thesis 
knowledge workers require flexible currently available 

process models applied runtime achieve increased flexibility 
term knowledge intensive result classification dominant resource distinguishing labour capital intensive 
knowledge intensive requires innovation workers successful 
examples include consulting engineering forms professional 
knowledge intangible evolving resource possessed individuals 
highly context dependent 
develop knowledge interplay people objects environment 
knowledge individual unique result experiences 
differences individual experience education personality social background enable teams attack problems multitude viewpoints 
uniqueness individual knowledge raison tre main barrier cooperation 
duality evident information systems development 
managers user representatives business consultants system analysts designers programmers bring unique knowledge joint project 
knowledge vital reaching objectives 
communication cooperation problem solving disciplinary boundaries require mutual learning openness perspectives 
users develop understanding technical opportunities limitations developers grasp local reality environment 
open dialogue joint experience project group constructs shared understanding frames 
conflicting goals people working part time project different locations organisations disrupt process establishing effective team 
rigidity lack interoperability software tools constitute barrier 
flexible support projects virtual enterprises knowledge intensive frequently organised projects 
project temporary organisation established handle unique problem 
projects exist outside conventional organisational units bringing people different functions 
survey companies norway reported commonly organise projects 
knowledge intensive industries consulting oil gas companies involved projects 
analysis concludes knowledge intensive 
global competition increased diverse information needs shortcomings skill specialisation larger knowledge components products services main reasons trend 
economic growth expected occur service sector 
inter organisational projects common internal projects 
small medium sized companies particular frequently involved inter organisational projects 
term virtual enterprise designate arrangements 
white process management tools currently obtuse inaccessible vast majority knowledge workers 
internet information systems increasingly enable outsourcing business 
commerce frameworks internet portals workflow management systems groupware supply chain management enterprise resource planning sys tems erp contribute trend 
systems automate routine transactions knowledge cooperation remains challenge 
flexibility important research topic areas alongside alignment local procedures important criteria selection 
paradoxically studies conclude simple adaptable technologies enable complex virtual collaboration 
low level tools email far frequently sophisticated coordination systems 
survey reports companies email purposes third project management system 
uncovers knowledge intensive industries far information technology knowledge driven 
suggests readiness need new technologies 
integrating support routine ad hoc shows scope current coordination systems respect different organisational forms relationships collaborating partners 
high uncertainty actual content typical knowledge intensive processes projects dominating organisational form groupware primary coordination technology 
stable rule hierarchies workflow management systems dominate 
electronic commerce deals exchange defined goods services typically low goal congruence cooperating partners 
consequently requirements security transaction support strong 
socioeconomic relationship coordination technologies low uncertainty low goal congruency market ecommerce workflow groupware hierarchy high uncertainty high goal congruency project team 
coordination technologies different forms collaboration 
processes reside completely categories 
aspects inter organisational collaboration goods services exchanged routine aspects administration reporting accounting knowledge intensive processes definition creative non routine aspects 
process support systems proven useful automating routine procedures support increasingly important knowledge intensive processes remaining remains challenge 
workflow industry benchmarking initiative concludes integrated coordination support process types important challenge 
realising size fit dynamic process diversity advocated planning spectrum 
users supported selecting suitable degree plan specificity current state project balancing plan complexity need coordination guidance control 
integrating knowledge management everyday knowledge management km collection processes govern creation dissemination utilisation knowledge fulfil organisational objectives 
term popular misused 
may part caused apparent contradiction term 
intangible resource managed 
companies recognise value knowledge gone result process automation 
failure rates reported large corporations km projects 
knowledge defined justified true belief precisely relatively stable sufficiently consistent set conceptions possessed single human actors 
dynamic view defines knowing active process mediated situated provisional pragmatic contested 
knowledge represented artefacts data stored computer systems potential creating knowledge continuing dialogue people artefacts representations actively communication learning 
knowledge management tools enhance enable knowledge generation codification transfer 
approaches emphasise codification seeking document experience 
post mortem analysis definition comes late help project 
approaches emphasise manageable aspects knowledge separate knowledge management activities roles core 
increased focus social processes learning knowledge management intertwined practice required 
knowledge resource increases 
need driven just time knowledge transfer advocated 
area process knowledge approaches currently lack tool support 
approach interactive process models models defined explicit representations portions reality perceived actor 
model active influences reality reflects changes representation change way actors perceive reality 
model activation process model affects reality 
activation involves actors interpreting model adjusting behaviour 
process automated software component executes model manual model guides actions human actors interactive prescribed aspects model automatically interpreted ambiguous parts left users resolve tool support 
fully automated activation implies model formal complete manual interactive activation handle informal evolving models 
define model interactive interactively activated 
process defining updating interactive model called articulation 
thesis primarily concerned interactive models processes 
altering models users control customise behaviour interactive system 
interplay articulation activation keeps models alive date resources learning coordination support 
engineering challenges articulation activation reuse contribute increasing benefits interactive models decreasing efforts learning required system 
articulation domain interactive model activation 
interplay articulation activation 
potential interactive process models constantly changing nature competitive environment global network economy creates emergent organisations feature social organisation culture meaning social relationships decision processes continually emergent predefined pattern 
environment requires evolving information systems adapting behaviour updated models usage environment 
articulation simple user oriented process modelling approach relies assumption users actively involved creating updating interpreting models part 
local participants ones sufficient knowledge process 
modelling users met scepticism workflow research community 
hand studies user participation development tailoring knowledge management process improvement indicate approach viable 
workflow management users deal creatively change exceptions process system handling manually 
systems designed user involvement barrier local innovation unable capture contributions assessment knowledge management 
user participation remains primarily organisational problem involving trust power community building simple user oriented adaptable modelling languages remove barriers 
activation customised integrated software support simple useful tools motivate 
information systems offer wide range functionality overwhelmingly complex incomprehensible 
consequently small portion available functionality utilised 
condition known 
need role task specific user interfaces containing just needed current context 
interfaces semantics adapt local needs project 
process models articulating performs tasks powerful resource customisation 
systems processes adapt skills preferences individual 
personalisation fosters sense ownership motivating active participation 
virtual enterprises unique nature project changing set partners seldom economically viable integrate information systems conventional development methods 
standardisation requires domain static understood seldom appropriate knowledge 
conse quently need flexible infrastructure allows shared understanding semantic interoperability emerge project prerequisite cooperation 
interactive models provide simple visual approach capture shared understanding unfolds 
reuse process knowledge management gap people say difficult plans official descriptions input km 
local articulation process models straightforward knowledge modelled remain tacit 
process models incomplete subject ongoing elaboration interpretation 
models completed longer 
interactive modelling allows system handle incomplete evolving descriptions involving users resolving incompleteness inconsistencies activation 
openness approach allows local process innovation captured assessed packaged reuse similar projects 
research objectives interactive process models combine model driven groupware workflow support cf 
page order support knowledge intensive 
model driven functionality established handling routine procedures remaining challenge apply models customise support projects virtual enterprises 
addition engineering challenges outlined seeks extend concept workflow include ad hoc unstructured processes 
research conceptual modelling focused system development business engineering 
studies explore models immersed organisational setting seldom apply insights design new systems 
aim develop generic design principles models evolve executed 
objectives guide lasting contributions turning just development project research 
research method engineering thesis 
main objective engineering improve methods practice development 
empirically oriented scientists currently challenge position engineering research area 
appendix provides depth discussion methodological basis thesis arguing need interpretive engineering research measurable repeatable experiments defined hypotheses insufficient solving current problems 
development information system wicked problem generally agreed formulation stated defined hypotheses 
wicked problems unique novel require complex judgement objective measure success completion right wrong solutions alternatives 
attack wicked problems problem setting understanding problem solving intertwined process described reflective practice 
repertoires action engineers learned practice education crucial problem setting problem solving 
repertoires contain exemplary solu tions design patterns approaches perspectives 
reflective engineering research creates new knowledge giving rise general principles adding practitioners repertoire 
research approach illustrates research method thesis 
incremental development cycle requirements guide design implementation prototype generates new requirements 
general approach interactive models helps frame problem acts metaphor generates design ideas integrates components implementation enables users customise system operation 
approach validated phases system development 
engineering cycle integrates validation implementation shows designs feasible usage shows system fulfils needs experience phases continuously utilised improve release system 
surveys interviews organisational science requirements interactive models implementation problem frame integrator design metaphor 
overview research approach 
design related technologies approach follows principles reflective practice appendix 
addition core cycle reflection action number validation activities turn development project research reflection action 
generality requirements validated theoretical grounding organisational social sciences comparisons previous technological research justify designs innovative relevant 
surveys interviews indicate approach design implementation meet user needs expectations 
research context enable rich understanding research project environment background described 
thesis continues previous carlsen flexible workflow modelling organisational requirements gathered existing systems evaluated 
led definition apm modelling language 
started attempt build runtime system apm 
research projects served main arenas user participation conceptualisation design experimentation ais advanced intranet cooperation explored internet technologies information sharing cooperation support 
involved large user organisations oil saga maritime classification certification consulting enterprise modelling tool vendor metis technological sintef social science research institute 
developed workware prototypes help customers assess usefulness intranet process support systems 
users contributed requirements number workshops 
ideas strategies metis particular active knowledge model metaphor guided 
living knowledge multi disciplinary project investigating organisational learning 
common perspective project emphasised knowledge particular context 
living knowledge cultural roots tacit distributed 
primarily represented computer systems 
perspective investigated knowledge management strategies tools nature knowledge 
external extended enterprise resources networks learning european project 
aimed support lifecycle virtual enterprise inception planning working management coordination 
addition ais partners metis sintef project involved technological research institute fraunhofer ipsi germany network small medium sized companies zeus greece 
external interactive process models applied cases business consulting software development research 
wide range perspectives industry research influenced ideas thesis 
previous education information systems engineering experience developing software products probably oriented practical aspects systems development 
cooperation interdisciplinary projects research system development cooperative activities 
involving people requirements collection design implementation evaluation likelihood successful products balanced validation increases 
cooperation brings strength validation individual contributions harder discern thesis draws heavily joint validation contribution centres design ideas approaches proposed author 
external cases studied sociologists political scientist 
people contributions thesis preface 
rest text joint contributions explicitly stated referenced 
thesis part larger body interdisciplinary research anchored real world settings 
role studies provide customisation technical support model perform evaluate 
addition data gathered discussion thesis reflects interpretation findings exploration process models customisation requests articulated users 
validation human tool relies reifies underlying conception activity designed support 
consequence way view artefact test limits underlying conception 
different contributions call different validation techniques 
contributions modelling languages concepts prototype implementation subsequent experimentation adequate 
section shows contributions thesis wide scope 
thorough data collection relevant attributes technique overwhelming task thesis 
central characteristics identified 
topic remainder section 
comparative evaluation related helps identify innovative aspects different contributions verify novel 
shows relevance innovations studied problems 
criteria applied simplicity measured number constructs modelling language number metametamodel concepts operations number elements typical models 
flexibility changes system handle number operations involved typical evolution patterns range exceptional scenarios tolerated changing model 
sociotechnical systems relevant overarching theory information systems 
sociotechnical process support systems influence job design sociotechnical job design principles suitable assessment technologies 
gathering usage experience cases external project validate features workware prototype interactive modelling approach 
interviews questionnaires complement detailed comparative evaluation described 
cases selected contributions completed little risk specialisation solution specifically case performs case 
differences cases increase confidence validation 
empirical studies reusability adaptability inherently difficult timeconsuming 
generic problems field studies monitoring multiple persons different locations time additional complexities stemming fact context content expected change organisations apply tools 
long lasting field studies doctoral projects right 
positivist quantitative controlled experiments offering scientific rigour accurately reflect prolonged social processes learning cooperation 
complexity uncertainty dynamics domain require interpretive methods 
real istic objective capture process models cases look occasions reuse adaptation change histories 
scope clearly solution includes organisational social human aspects usage context 
engineering research thorough understanding usage environment provides new theories experience primarily related design computerised information systems 
key objective provide integrated support interactive process model articulation activation reuse 
complete solution scope single thesis 
focuses core aspects interactive process models modelling language articulation semantics activation underlying framework reuse 
focused direction wider picture holds important requirements complete solution design numerous extensions mind 
instance interactive architecture integrate additional model driven software components modelling framework limits complexity multipurpose models 
aspect solution designed premise developer incomplete view users need 
consequently component assumes complete control customisation extension mechanisms essential 
system designed open 
contribution contributions thesis fall different categories including general approach new explanations perspectives new functionality new implementation techniques 
bring closer meeting engineering challenges research objectives 
articulation feasibility users modelling contested 
researchers claim users trusted change workflow models correctly 
survey case studies innovations occur usage experience adds evidence 
workware process modelling language illustrates simple flexible user oriented modelling languages semantic holism 
holism implies meaning model element depends rest model 
identify holistic modelling techniques properties constellations context sensitive semantics 
activation customisable contextual support ad hoc routine processes enabled interactive activation involving users interpretation execution incomplete evolving models 
achieved representing model elements decisions involved interpretation 
holistic activation interpretation model element depends current states surrounding elements enabling richer situated execution 
visual domain oriented tailoring 
interactive model domain user oriented concepts applied tailoring system just system oriented terminology 
reuse need driven approach process knowledge management anchored models developed locally project 
local models harvested packaged reuse 
enabled modelling framework supports incremental classification instances primary objects instances locally define structure behaviour 
classification structures part object definition built dynamically reflect multiple perspectives 
generalised inheritance 
guided requirements allow inheritance relationship model just specialisation 
reuse policies control propagation reusable aspects modelled relationships allowing users customise inheritance mechanism 
workflow concept contemporary workflow management systems provide automatic activation process models interactive approach involves users interpreting model means current context 
bottom articulation complements top control integrating ad hoc routine processes 
difference adaptive interactive emergent workflow described clearing confusion prevailed area 
interactive multi aspect workflow architecture integrates multiple model driven software components offering complementary interpretations model 
components called interactors integrate articulation activation separating contemporary architectures 
range model driven functionality extended workflow enactment 
interactive modelling design principles interaction introduced wegner theoretical framework understanding computing 
interactive models proposed design metaphor flexible information systems 
elucidate concept interactive models uncover requirements identify suitable modelling techniques semantic holism instance modelling explicit representation decisions 
structure thesis thesis consists chapters 
structure engineering research method cycle 
outlined central objectives problem definition approach contributions 
chapters provide background contain contributions thesis 
validation proposed designs chapters 
chapter problem setting elucidates basic concepts differences interactive models models systems development 
explore social context models 
survey leads list requirements 
chapter state art 
existing workflow modelling approaches analysed list requirements 
points number limitations especially respect simplicity flexibility comprehensibility 
chapter interactive emergent workflow defines simple user oriented modelling language interactive activation semantics 
open interactive architecture combines workflow groupware services 
chapter reuse specifies modelling constructs mechanisms enable model reuse 
instance metametamodel allows local modifications user defined policies control inheritance modelled relationships 
chapter interactive modelling techniques generalises designs earlier chapters identifying techniques relevant interactive modelling outside particular area process models 
chapter implementation describes workware prototype implements interactive architecture language formalisms 
external project workware integrated modelling simulation real time collaboration tools 
chapter usage experience 
infrastructure chapter applied virtual enterprises doing research business consulting software development 
experience studies demonstrates usability workware 
chapter related compares workware existing modelling frameworks activation schemes reuse mechanisms 
analysis shows originality relevance different research areas 
chapter summary gives overview contributions point interesting directions research interactive models emergent workflow process knowledge management 
chapter problem setting interactive models constitute main problem frame thesis 
models available users runtime 
control behaviour system allow users adapt local needs changing environments 
interactive models immersed day day 
development technologies requires depth understanding social organisations cooperation learning 
chapter surveys organisational social science literature order understand business user needs derive system requirements address needs 
establish basic terminology 
engineering challenges model articulation activation reuse discussed turn 
discussion aims justify propositions sense 
interactive models constitute suitable problem frame flexible section 

knowledge workers capable articulating coordinating reflecting 
perform involved modelling 

planning performance knowledge intertwined plans evolve routine ad hoc parts section 

evolving incomplete semi formal models needed order mediate workers knowledge sections 

knowledge management needs closer integration practice section 

social learning theories help understand process modelling section 

motivating user participation modelling core challenge section 

processes central organisation section 

process knowledge management primarily learning follow rules interpreting guidelines creatively situations arise section 
basic concepts section basic concepts thesis introduced 
model active influences reality reflects 
model activation automatic manual interactive 
model interactive interactively activated entails evolution model domain 
model change reflect aspects reality change reflect evolution actor understanding 
consequently interactive model evolve deteriorate 
fully automated activation closed system theory avoid problem cooperative open systems 
interactive activation involves autonomous human actors models need evolve 
process updating interactive model called articulation 
interplay articulation activation reflects mutual constitution interactive models social reality reflect page 
reuse refers applying model model fragment situation originally defined 
templates model fragments especially adapted reuse 
harvesting refers models experience local processes generate new template variant revision existing template 
interactive models workflow management systems illustrate concepts example 
workflow management systems support coordination explicit process models 
models reflect tasks part process interdependencies resources applied perform 
resources include personnel information tools 
workflow systems include enactment service activates model 
systems include process definition tool lets users articulate models 
static workflow process models built experts allowed change process instances enacted 
supporting fully automatic activation static workflow applies understood stable routine processes 
adaptive dynamic workflow important research area 
models allowed change change affect ongoing processes 
emergent workflow chapter modelling viewed integral part performed process participants 
domain consists unique projects 
emergent workflow views enactment interactive process involving users situated interpretation workflow models 
shift automation interactive activation enables system support incomplete evolving models better matching contingencies 
background conceptual modelling research concentrated system development activities 
models environments applied analyse problem domain capture structure user requirements 
approaches focus referential aspects relationship model elements real world objects represent 
individual social situational aspects model usage relational theories meaning influence mainstream information systems engineering 
notable exceptions 
hewitt pointed offices best described open systems people cope conflicting inconsistent partial information 
showed shortcomings turing notions computing analysing systems forecasted information systems acquire characteristics human organisations concurrency decentralised control indeterminacy interconnectivity contextuality 
goguen point situated local emergent contingent vague open nature model domains outline ramifications insight requirements engineering :10.1.1.19.5902
wicked problems attacked reflective practice cf 
appendix concludes requirements clear system successfully operating :10.1.1.19.5902
discusses extension enterprise modelling articulation manual activation active knowledge models automated support 
develop execution support conceptual models information systems development including users actors contributing interpretation models 
chen points active models major direction research conceptual modelling 
model execution user participation interaction highlighted main challenges 
greenwood argue active models enable systems meet business needs current technologies fail solve 
notion active models similar emphasis active relationship domain model articulation 
directed devising methodologies active software process support 
comprehensive approach field interaction framework proposed wegner 
framework motivated number current trends computer science shift standalone pcs network computing procedural object oriented programming closed open systems development triggered realisation machines involving users problem solving solve larger class problems algorithmic systems computing isolation 
primary characteristic differentiates interaction machine conventional turing machine pose questions users computation 
shown computation conventionally portrayed user providing input machine processes request provides answer output 
stimulus response model excludes interactions establish shared meaning :10.1.1.19.5902
moving turing machine interaction machine computation multi step conversation user machine able take initiative 
research solely concerned development powerful algorithms look new ways computerised human parts system cooperate order solve problems 
question answer conversation 
turing machines interaction machines 
researchers pointed aspects interactive models put forward theoretical framework interactive computing lack engineering research developing validating interactive models design approach 
consequently little investigation new challenges interactive models modelling techniques useful 
model quality framework krogstie allows illuminate differences requirements interactive models requirements met systems development models 
understanding important assessing application conventional modelling techniques interactive models 
framework closely linked linguistic semiotic theory social constructivist view articulated 
main concepts framework shown including sets statements turing machine interaction machine language extension statements articulated language 
domain possible statements situation hand 
externalised model statements explicit representation 
relevant explicit knowledge modeller 
social actor interpretation audience perceives model say 
technical actor interpretation software components interpret model 
modeling domain participant knowledge physical quality semantic quality perceived semantic quality empirical quality model externalization pragmatic quality technical actor interpretation social quality social actor interpretation pragmatic quality syntactic quality 
framework analysing quality models 
language extension model quality types determined relationships statement sets physical quality involving articulation relevant explicit knowledge participants reflected model 
persons involved sense model 
empirical quality deals error frequencies model read written different users coding ergonomics human computer interaction 
syntactic quality match model language 
semantic quality correspondence model domain 
framework contains semantic goals validity statements model correct relevant problem completeness model contains relevant statements domain 
perceived semantic quality match participants interpretation model current explicit knowledge 
pragmatic quality correspondence model audience interpretation 
social quality goal social quality agreement different participants interpretations 
social quality affects communication participants contents model 
domain completely known semantic quality tested indirectly participants knowledge 
interactive passive models conventional model early phases systems development passive system operation 
interactive models faced different set requirements development models 
wider range people involved modelling amplifying social psychological organisational aspects 
differences received little attention active modelling research 
solutions developed systems development simply transferred active modelling 
uml unified modelling language programming languages enterprise modelling workflow exemplifies 
quality framework captures perspectives relevant interactive models adjustments needed interactive model immersed usage context 
model articulation activation take place concurrently mutually dependent 
agreement actors vital development costly fix errors late project 
interactive model costs fixing errors diminished 
goal social quality interactive models support social learning construction shared understanding 
similarly semantic syntactic correctness important users put charge resolving inconsistencies interactive activation 
learning ability represent inconsistent points view crucial 
system deny articulation syntactically incorrect model fragments capture inconsistent views negotiated 
interactive activation implies goal semantic completeness replaced goal letting users articulate reality level detail specificity find useful 
incompleteness resolved time activation 
fundamentally existing model quality framework embodies static structural perspective 
discusses relationships sets statements world 
interactive modelling quality demands dynamic approach focusing sets statements interact influence interdependent processes articulation activation reuse 
perspective defining core processes sequences activities transform statement sets quality framework model 
focus core processes static quality parameters emphasise interdependencies trade offs designers interactive systems resolve 
summarises perspective 
rest section elucidates basic concepts framework 
capital letters refer 
change modeling domain articulation participant knowledge automatic articulation manual articulation articulation activation automatic articulation manual activation model externalization technical actor interpretation metamodelling social actor interpretation reflection model evolution 
interactive processes model quality framework 
language extension articulation process domain features represented model means modelling language 
increase semantic quality model 
manual articulation articulation manual involving externalisation participant knowledge domain model language 
addition empirical physical semantic quality depends quality participant knowledge domain appropriateness language respect domain participants knowledge comprehensibility articulation appropriateness 
automatic articulation sensors computerised components capture information model domain interfaces external information systems hardware devices 
change changes domain may known participants project 
known changes may articulated model model evolution model evolution may triggered change reflected articulation motivated need cause domain change activation 
activation model activation involves model guided actions transform domain 
automatic activation automatic activation implies model interpreted acted computerised component terminology model interactor 
executability appropriateness modelling language reflects automatic activation potential 
manual activation human actions interpretation model constitute manual activation process 
involved actors may created model participants modelling 
actions involve changing domain reflected model automatic activation deducible model captured manual actions include elements human model interpretation captured model 
interactive activation interactive activation exists different forms 
workflow systems technical component tells users putting tasks 
words modelled sequence tasks automatically interpreted tasks performed manually 
graphical user interfaces opposite sequence common 
user select operation system perform 
action result interactive automatic model activation effects automatically captured model 
scheme increases semantic quality extra users completing cycle reuse reuse involves application model setting different originally developed 
reuse involves audience interpret adapt previously developed model fit local needs 
audience participants adaptation reused model new domain 
social pragmatic quality crucial reuse especially people involved participate articulation original model 
users choose copy plans previous projects difficult comprehend model developed 
primary activation people reuse model may access domain originally reflected 
developing maintaining library reusable model templates way approaching problem 
metamodelling metamodelling involves changing modelling language 
typically carried order improve comprehensibility language human actors suitable local domain 
metamodelling faces similar problems reuse may benefit immediate domain availability characterises interactive models 
local language adaptations increase pragmatic semantic qualities resulting models 
reflection knowledge systems operational logic stored data programmed software reflective systems expose representations logic users allow modification logic 
interactive models combine behavioural reflection user interaction visual models 
modelling framework reflective language build models available adapted model 
reflection enables view metamodelling articulation reuse transfer model language 
interactive models socially constructed organisations models viewed socially constructed realities artefacts help shape people perception reality world live 
mentioned earlier models defined representations part reality perceived actor 
berger define reality quality phenomena real independent 
sociology knowledge knowledge defined certainty phenomena real possess specific characteristics 
social construction reality refers processes real accepted knowledge 
classic definition term model creates dichotomy represented reality representation model 
social constructivist perspective sees model reality accepted community 
acceptance reality crucial interactive models 
instance process model serve function accepted real depiction past planned activities 
representations dead subjective reality brought life actual human conduct 
interplay model articulation activation process social construction 
language berger describe role language social processes 
sign system language quality objectivity 
encounter language external coercive effect language forces patterns 
coercive effects language increase formality specificity 
languages limit interpretive freedom range expression experienced constraining 
case information systems especially regard structured understood 
offers explanation systems structure conversations met resistance users 
systems require part interactive model formalised interpreted computer 
allow humans communicate freely models perform parts interpretation 
subjective objective reality approaches information systems engineering conceptual modelling categorised ontological epistemological stance 
ontological realism assumes reality exists independent ontological denies position 
epistemological dimension common distinguish position objective knowledge possible 
seeing reality socially constructed allows connect perspectives ways especially relevant interactive models 
berger integrates objectivity subjectivity ongoing dialectical process articulation 
subjective reality affects objective reality articulation affected objective reality 
interplay related domain subjective realities interactive model objective reality depicted 
hand models reflect users subjective realities order support storytelling negotiation meaning social processes knowledge shared objective 
ambiguity prerequisite meaning community practice social learning takes place negotiation meaning 
negotiation requires people actively legitimately participate working practices community perspectives tangible reification 
reification involves elucidation concepts construction artefacts embodying perspectives 
complements conceptual focus articulation physical perspective 
interactive models primarily conceptual tangible user interface information system 
participation reification intertwined supporting complementing 
reification sense participation medium communication participation 
models analysed negotiating meaning distributed reification participation 
poem requires participation understood software program require human participation meaning 
aim conventional models reify programs interactive models aim foster participation ongoing process social learning reality construction 
duality reification participation bearings suitable level specificity model combined history ambiguity absence lack meaning 
condition condition possibility meaning 
ambiguity catalyst participation allow interpretation open negotiation 
interactive models allow ambiguity formalise correct interpretation 
articulation interactive models interactive modelling assumption users capable creating adapting models 
researchers doubt feasibility approaches 
section explores case studies modelling articulation demonstrating need interaction uncovering number requirements remaining challenges 
articulation interactive models term articulation preferred modelling representation externalisation articulation established concept cscw applied coordination theories 
articulation generally discussed integral part separate activity articulation regarded activity requires time effort 
matches concept interactive models created maintained users part day day planning coordination 
modelling term carry implicit connotations graphical formalisation abstraction generalisation 
interactive models refer concrete objects ideas 
user participation systems development interactive models system development models differ respect modelling 
interactive models constructed ordinary users 
generation representations done successfully participation people live situations represented 
systems analysis users seen sources information model builders participatory design involves limited number user representatives community immersed day day activities 
interactive models face stronger requirements language comprehensibility users initially lack experience modelling evolution learning cause frequent updates models 
opportunity rapidly update main advantages interactive models 
systems engineering agile iterative incremental development attempt shorten learning cycles hampered long time span learning system change 
users depth knowledge domain software developers 
consequently potential high semantic quality greater provided language simple adaptable user oriented 
basic concepts information system normally defined development 
users encounter terminology constructed participation 
engineering methodologies generally highlight importance user involvement infeasible involve users 
experience user representatives gain participation social construction system shared representatives help training user support 
users active participants core principle participatory design pd view users contributing actors just sources information 
importance mutual learning developers users stressed 
framework number projects carried illustrate feasibility active user participation 
dker surveyed structured analysis data flow diagrams 
techniques applied pragmatically prescribed methods followed 
subjects reported diagramming useful apply projects 
criticism categorisation participatory design put emphasis tangible directly comprehensible users prototypes scenarios mock ups despite tendency representations create focus superficial user interface concerns 
particular predefined modelling types widely criticised 
suchman argues encoding intentions explicit categories carries agenda control workers actions 
categorisation actions manageable communicable creating danger reducing actions category hiding aspects captured categorisations 
textual scenarios created story telling workshops preferred models 
researchers noted integration diagramming techniques additional media facilitates understanding provokes discussions organisational technical issues 
research indicates easier users understand details looking screenshot prototypes users relate input graphical models 
interactive model media linked complementing direct way 
intuitive visual languages studies user participation enterprise modelling counters somewhat negative views 
latour shows tremendous importance graphical representations maps blueprints geometrical models advance science technology 
intuitive power iconic representations pure symbols similarity represent elaborated 
pointed stands sharp contrast formal computer science new symbols introduced community practitioners purely symbolic 
modelling language complexity modelling conference method participatory development simple enterprise models 
consulting firm method applied get users involved development corporate intranet portal 
tangible modelling interface yellow whiteboard groups users able build quite elaborate models 
broad participation modelling workshops increase quality resulting models 
related study observed idef complex kind modelling consequently simpler symbols selected 
flowcharts useful workers pinpoint important issues need complementary visualisations perspectives identified 
enterprise model operational functionality added online model ensure 
modelling ongoing process modelling language developed support requirements negotiation just requirements capture 
allows users explicitly represent vagueness incompleteness contradictions models 
case studies researchers surprised naturally users adopted concepts 
models originally built analysts users limited understanding diagrams able add wide variety elements correct er models 
far reaching discussions concerning sequencing process models triggered 
situation original view professionals match users 
domain oriented modelling formal languages applied development described foreign opaque users 
new designs evolve isolation adopting extending languages users familiar 
bringing user representatives development projects participatory design workplace place developers usage context 
solves problems user participation infeasible place developers workplace 
methodologies needed empower users control system modelling expert mediator 
reflective tools enable construction domain oriented languages experienced success area 
industry reports claim order magnitude productivity gains shortened development cycles improved learning curves newcomers 
innovation users information systems operation objective satisfy formalised user requirements user needs users understanding needs evolve 
consequently key criterion system usability extent supports potential people understand learn changes 
facing exceptions users abandon system able change configuration 
number case studies report users apply ways intended designers capable ad hoc modification integration tools meet particular needs 
subsections survey relevant area 
sub optimisation process orientation industrial manufacturing typically thought knowledge intensive automation changing nature workers responsibilities planning monitoring exception handling 
study reported workers usually optimise activities tools knowledge goes earlier process 
increased visibility process orientation needed avoid sub optimisation 
experiences user led development operation system shows feasible 
various exceptions caused workers increase horizon visibility include parts business processes 
workers maintained local complaint book issues regarding plant information systems collected 
rapid pace product innovation caused factories de automate replacing robots human workers intelligence flexibility needed mobile phones production integrated car manufacturing 
user involvement manufacturing process improvement feasible provided appropriate tools available 
case processing knowledge intensive case processing portrayed new factory 
case processing industries key customers workflow management 
perspectives routine require specialised skills 
researchers look scenes discover rich variety knowledge intensive 
wenger shows importance informal social networks dissemination knowledge insurance claims processing 
systems support allowing informal notes added cases 
local jargon sophisticated domain terminology workplace 
newcomers initially trained processing claims right way informally understood need learn shortcuts get job done 
orr study copier repair wenger shows seemingly unskilled people reflect processes 
social features learning mediated storytelling problem oriented inquiry common studies 
study seemingly routine observed people knowingly input false data obtain correct results manual systems constructed workarounds inflexible computerised technologies outlines history clerical highlighting principles scientific management created focus simplifying routines automating coordination removing need communication 
theories influenced workflow management 
case study reported felt increasingly 
impossible put personal stamp interaction customer wondered material computer screens came went 
study wenger discussed shows user friendly flexible users share knowledge innovate practices 
systems designed innovation empowerment 
multiple points view notions office emphasise routine canonical activities rich meaning social action office 
representing rational deterministic overt important political cultural cognitive problems overlooked 
perspective star propose emphasis put local tacit knowledge transferability 
problems globally correct answers multiple competing proposals develop 
articulation social activity directed reconciling assumptions procedures 
case study star identify groups different viewpoints describe interact changing procedure definitions insurance payments fees coverage rules 
viewpoints contribute continuous evolution practice single case involves new interpretation 
formal description practice complete real world system requires articulation deal unanticipated contingencies 
pointed piece real information simple categories complex context history 
tailoring information systems changing organisational practices flexibility aspects 
involves personalisation local modifications far reaching evolution information systems 
flexibility requirement components shallow adaptability user interfaces deeper reconfiguration extension functionality 
available hardware software infrastructures change time constituting evolution challenge 
tailoring defined adaptation performed users part normal system 
interactive models visual domain representations tailoring 
studies human computer interaction established people capable utilising wide range customisation services offer 
informal collaboration spread user user organisations adding knowledge management perspective tailoring 
trigg dker notice users tend modify extend practices alongside tailoring information systems 
study shows word processor users frequently start copying existing document reusing structure formatting 
forms macros developed spread informally value activities evident structured process defined roles put place 
studies general purpose hypermedia systems observed users building form templates 
noticing difficulties users predefined formalisations approaches user definable incremental formalisations developed 
experiments case studies show examples incremental formalisation 
user participation knowledge management important motivation interactive models particular model reuse need support organisational learning knowledge management 
number different tools utilised knowledge management 
studies user participation systems highly relevant assessing feasibility interactive model articulation users 
study shows importance knowledge connectivity models relationships user connectivity contextual dependence user idiosyncrasies knowledge capture retrieval discovery 
noted computerised information systems lack idea generation capability serendipity personal face face conversations 
hand clarke cooper show intranets knowledge distribution accompanied emergence new collaborative organisational structures called networks teams communities 
technology creates opportunity increased interaction users seize opportunity 
usefulness relevance perceived users identified important success factor organisational memory systems 
case study adoption adaptation groupware support virtual team shows potentials limitations information systems transform organisational practice 
technology case asynchronous groupware tool provided shared repository event notification conversation support search navigation services 
spite commitment parties involved barriers changing practice 
initially group tried adjust working practices meet vision technology focus shifted adapting system support workable practice 
interestingly aspect really change group structures communication decision making 
interdisciplinary culture developed project members discussed aspects tasks 
led group question original requirements resulted breakthrough innovations 
complexity reliability price result represented orders magnitude improvement 
summary case studies surveyed section show seemingly unskilled workers reflect 
reflection integrated part practice 
evidence prompts view knowledge intensive perspective category 
evident user communities discuss share reflections informally disseminating knowledge 
studies show examples information systems enable user innovations spread organisation opportunistic manner 
studies show systems prevent local innovations informal communication 
response systems social networks arise workplace maintain smooth flow 
scepticism engineers feasibility user control self fulfilling 
systems designed support tailoring create barriers innovation learning 
usability visual models disputed 
studies show barriers user participation model articulation observe sophisticated structures created ad hoc serve local purposes 
large body research identifies weaknesses limitations formal modelling techniques severe consequences building overly simplistic assumptions nature systems 
requirements articulation support articulation depends subjective comprehensibility perceived utility models modelling language 
requirement languages formal balanced pragmatic view 
ambiguity uncertainty vehicles professional learning triggering open discussion models mean 
view models socially constructed communities practice generates number particular requirements modelling languages language simple basic concepts 
avoid overly detailed categorisations 
straight forward determine model element represents 
concrete examples provide common ground negotiation meaning 
real world object model element representing 
language allow visual graphical depiction model giving overview process details parts 
multiple dynamic views extract aspects model interesting particular purpose role available 
language constructs map conceptual world performing 
domain specific concepts utilised 
meaning model element fixed 
able evolve negotiation meaning unfolds 
participants invited reflect language process negotiating meaning 
articulation need entail visual modelling 
interface allows users alter data articulation tool 
example spreadsheet lists task hierarchy responsible persons deadlines resource consumption 
spreadsheet process model 
cases textual interfaces correspond directly way people currently plan projects 
activation activation depends richness detail precision articulated representations motivates articulation increasing users benefits keeping models date 
compared rich literature modelling languages representation research activation limited 
directing focus activation major contribution interactive modelling 
specialised areas ontologies workflow product data management model activation mechanisms developed deduction enactment cooperation support 
conceptual modelling languages executable order support verification validation systems development 
virtual machines activation unified modelling language uml models emerged research area 
previous focuses formal execution semantics closed systems 
usual computational design methodologies adopt naively realist stance ontological analysis human activities resulting formal structures read straight structures human action mediation human action interpretation 
automating shows information systems increase learning capabilities workers automate local processes decision making 
duality reflected separation automatic manual model activation 
manual activation requires comprehensible flexible user oriented models 
automation demands formally defined operational semantics complete model 
interactive activation balance conflicting requirements allowing users switch automation manual control depending best fits situation hand 
degrees formality essence design reconciliation social technical aspects :10.1.1.19.5902
gap system executable formalisms domain languages easily bridged 
different sub languages automated manual parts difficult users grasp combined behaviour difficult move ambiguity formality 
interactive modelling languages integrate different degrees formality 
goguen apply metaphor humidity discuss formality language ranging formal dry informal wet :10.1.1.19.5902
points information fully context sensitive wet understood produced 
fully context insensitive dry formal understood time 
framework formalisation defined process making information situated 
limitations formalisation include cognitive costs learning language effort required model complete conceptual gap users knowledge system enforcing premature structure group process reached far poor support situated social activities 
experience indicates features requiring greater degrees formality frequently 
open closed systems closed systems need modelling languages formal semantics 
model elaborated execution predefined formally complete manner encoding relevant details start 
perspective treats process models programs systems mechanisms 
open systems support sharing model information users need require formal language 
models treated data systems media communication collaboration 
incompleteness complexity interactive activation allows input model data delayed right time part model executed 
model tell system happen users asked decide 
consequently model may remain incomplete lifecycle alternative paths taken need defined 
simplifies model 
research formalising dynamic workflow models show ambiguity flexibility lead exponential growth model size alternatives represented 
exponential growth models hard comprehend 
models closed systems define potential patterns interactive models need include occurring patterns 
uncertainty inevitable degree uncertainty fundamental social activities making sense 
recommended turn focus explaining away uncertainty interpretation action identifying resources inevitable uncertainty managed 
interpreting significance action essentially collaborative activity 
variation evolution reuse formal semantics simplify reuse 
complete model exists instantiated 
large volumes high costs may initial effort detailed formal analysis viable routine repetitive process 
details put models information required input individual case 
rate change frequency exceptions may model date requiring evolution 
need personalisation customisation motivation local ownership opposed alienation due incomprehensible systems indicate open systems approach better suited wide range processes 
organic growth open system interactive models allows grown 
starting rudimentary model main steps process repeated executions similar processes capture different ad hoc extensions decisions users 
combining incrementally constructed process instances general complete model emerges 
scheme entails immediate benefits large initial investment matches incremental need risk driven software lifecycle 
change evolution ability change important competitive factor industries 
customers requirements change frequently vary case case creating need solutions tailored client 
consequently competitors partners change 
need systems treat change rule game exceptional 
management change main challenge information systems 
terminology defined section changes follow dynamics model require model evolve 
models evolve levels :10.1.1.33.2525
local modifications running model leaving generic definition unchanged 

general long lasting modifications generic definition ongoing instances affected 
degree evolution required commonly distinguish classes exceptions 
distinguish noise articulated models idiosyncratic instance level evolutionary class level exceptions 
course systems allow modifications 
workflow management systems seldom allow local modifications hardwiring process definition class level 
interactive models hand creates research issues determining updates running instance migrated generic level 
challenge model harvesting 
activation handle local modifications dynamic change updates local models caused evolution general models 
exception handling closed systems change regarded exceptions predefined rules 
expected exception represented predefined model captures deviation normal desired course events 
building excessive details exception handling model complicated hard comprehend hard change 
unexpected exception caused change system domain anticipated modelling time 
exceptions require closed system opened allow exception handling users model evolution case taken system handled manually 
strong miller analyse different perspectives exceptions handled 
underlying assumptions include exceptions unpredictable random events exceptions errors indicators underlying problems exceptions normal part necessary process flexibility 
case study indicates need move manual intervention strategy exception handling automated process interactive process supervised humans 
advocate designing evolution 
interactive models enable exceptions built right time model fragment activated 
greater number exceptions moved unexpected expected category due learning participants 
requiring formally complete consistent representations wider range exceptions tolerated 
system need break face exceptions just offer best effort interpret ing model new situation rely human actors adjust interpretation needed 
allows user organisations decide degree exception handling detail articulated process 
personalisation customisation ownership cooperative knowledge relies heavily intangible skills individuals 
organisational theories advocate decentralised decision making empowerment 
empowerment requires user customisation system features enabling create personalised workspaces 
personalisation fosters sense ownership 
ownership autonomy responsibility motivate people 
appropriation process general template adapted adopted particular setting converted locally owned object key challenge model reuse 
addition personal preferences cooperative knowledge requires solutions adapted situated needs project community 
interactive models capture important aspects local setting vital resource customisation 
refer model driven customisation contextualisation 
contextualisation depends semantic quality model accurately represents domain 
local model evolution critical achieve improving contextualisation capabilities modelling languages important research challenge 
increasing functionality avoiding functional features sell systems motivate complexity choice wide range specialised functionality severe usability problem 
similarly formal scientific research process modelling emphasises expressiveness expense simplicity 
efficiency language defined expressiveness divided size number primitive constructs 
language efficiency increased language elements mean different things different contexts 
approaches model activation process support systems apply language element specific purpose 
attempts increasing usefulness systems added conversation support awareness information management groupware services 
integration additional functionality accomplished introducing new modelling constructs service 
complicates system 
order improve language efficiency simplicity usability different perspectives combined single language 
emergent interoperability cooperation moves buying selling welldefined goods services need flexible infrastructure supports information exchange knowledge dissemination 
able form effective teams organisational boundaries local cultures 
ability organisation learn experiences joint enterprise crucial long term success 
transient situated nature project large shifting set partners seldom economically viable integrate information systems normal development practices 
standardisation proposed require domain static understood 
seldom case knowledge intensive 
consequently need flexible infrastructure allows shared understanding process integration semantic technical interoperability emerge project prerequisite cooperation 
requirements activation support value interactive model lies way affects practice 
performance models utilised automation guidance :10.1.1.45.3321
interactive activation combines 
viewing learning social process intertwined practice focus includes evolution models activation users adapt handle exceptions changes incorporate new experience 
language enable local change particular model match local circumstances preferences knowledge users 
history events model changes accurately captured including exceptions violations standard definitions :10.1.1.45.3321
history important learning activation mechanisms 
information system offers flexible support current state process model users benefit immediately keeping model date 
benefits immediate input separate knowledge management activity performed user motivation may suffer 
participants tacit skills knowledge externalised models 
knowledge intensive completely prescribed system able interpret activate incomplete models 
allow ambiguity enforce premature formalisation 
require models predefined possible articulate models scratch part 
information systems contextual 
models utilised provide contextual support users supported overriding predefined rules situation requires 
reuse organisational learning interactive models aim facilitate productive innovative behaviour organisation 
requires learning 
past models quality control manuals operating procedures 
documents binders seldom activated 
models useful learning tool relate natural learning processes organisation integrated everyday 
people need partial rigid models sort directive documentation provides help build ad hoc collaboratively robust models justice particular difficulties find 
practice describe studies indicate ways people differ fundamentally ways organisations describe 
concepts theories theories espoused talk action refer fact people say differs really 
case studies shown gap major barrier organisational learning 
methods create models input design criticised biasing organisational explicit views obscuring communicative practices skills knowledge crucial efficient working 
suchman claims current wisdom system design holds user behaviour system encodes functionality provide 
interactive models offer different perspective enabling users communicate practice encoding canonical models official accounts software 
approach offers great opportunity knowledge management anchored practice 
interactive models enhances social pragmatic quality 
real world model reflects available adaptable connections easier understand 
simulation training methods developed utilise connection 
study industrial control rooms shows great benefits users able conceptual tools physical environment factory 
hand study highlights pitfalls systems isolate users inside modelled world control rooms understanding really goes plant 
user discovers anomaly interactive model easy correct 
implies software components integrate articulation support 
reflective practice sch describes professional reflection action cf 
appendix integrating problem setting problem solving ongoing conversation current situation 
new situation treated unique 
problem subsumed categories features elements situation categorised 
important understanding knowledge developed situation different setting 
similarly brown duguid note learning theories rejected transfer models isolate knowledge practice developed view learning social construction putting knowledge back contexts meaning 
sch proposes practitioners build repertoires examples images understandings actions 
practitioner sense new situation seeing similarities patterns repertoire familiar situations precedents metaphors new unique problem 
addition personal experience repertoire include stories examples read heard 
language practice communication reflective practice employs language design reflection inaction language designing reflection action 
interactive models useful reflective practice reflective facilitate conversation language process problem setting 
pointed berger language experiences allowing subsume broad categories terms meaning 
language large aggregate collective acquired cohesive wholes reconstructing original process formation 

language helps categorise attribute meaning experience short reflect actions 
property crucial learning experience creates capability transcend 
social processes language construction supported local language variants treated important sources knowledge 
models practice sch model reflective action offers fundamental insights processes models constructed 
models represent problem setting descriptions fragments aspects solutions 
model articulation viewed conversation situation 
conversation step experimental move bring practitioners closer understanding framing problem possibly contribute acceptable solution 
knowledge available process includes repertoires actions possessed participants 
harvesting reuse interactive models part explicit repertoire action organisation 
model reuse essential decreases effort modelling increases potential value model 
anomalies creative tension comes old model metaphor current situation foster learning innovation 
communities practice reflective practice describes individual professionals learn solve problems 
community practice social theory learning learning regarded inherent part everyday interaction 
wenger outlines theory interrelated perspectives meaning changing ability sense life world 
practice shared historical social resources frameworks perspectives sustain mutual engagement action 
community social configurations enterprises defined worth pursuing participation recognisable competence 
identity learning changes creates personal histories context communities 
perspectives learning viewed experience doing belonging 
shared understanding socially constructed inside community perspective making 
communities peripheral participants multi community membership boundary objects cf 
appendix enable learning perspective 
boundary objects ambiguous foster participation negotiation meaning inside community maintain clear identity transferred communities 
structured assigned different overlapping meanings different communities 
systems development software engineers commonly lack history participation environments system intended function 
requirement specifications boundary objects emphasise formal reification ambiguity participation cf 
section 
participatory design pd trains developers systems support 
pd completely successful 
attributed political resistance interest groups weaknesses ignored 
large initial costs difficulty participating culture semantic field role software professional reflective practitioner 
viewing learning practitioner learning practice user participation software development developers participation users practice fully enable understand reality 
contrast interactive models delay decisions design time runtime aim foster participation user communities adapting system fit local practice 
experience users effectively mediated representation representatives users systems analysts 
mediation experience supported frozen level explicit understandings existing time representation user proxy finishes analysis 
argued interactive models greater potential producing user friendly systems design usage systems challenging closed systems 
barriers participation discussed section 
models tacit knowledge theories knowledge creation dissemination highly relevant application interactive models support learning innovation 
models structured kind explicit knowledge created externalisation maintained rich background tacit knowledge 
tacit knowledge encompasses informal skills cognitive mental models beliefs perceptions explicit language 
section look interactive models facilitate spirals knowledge creation shown 
tacit knowledge socialization externalization internalization interactive models combination 
knowledge creation spiral 
explicit knowledge articulation tacit knowledge interactive models discussed 
key questions include aspects sense put model degree specificity 
answers depend largely context 
knowing refers socially defined reality extra social criteria cognitive validity 
externalisation negative consequences 
danger misuse power discussed 
problem 
explicit accepted part objective reality longer focus discussion negotiation 
reported disastrous effects important problems accepted properly dealt 
opposite ambiguity fluctuation creative chaos supports learning innovation communities practice 
research needed explore kind externalisation beneficial learning contexts 
combining interactive models combination refers manipulation composition comparison categorisation explicit knowledge 
domain information systems target probably greatest potential 
technology model knowledge management satisfy requirements generalisation models facilitate comparative analysis costeffective metrics 
languages enable intuitive structuring large model repositories 
structures evolving adjusting improved understanding users capable handling multiple viewpoints dimensions models 
modelling languages facilitate composition models parts 
nonaka takeuchi caution designers narrowly focusing mode knowledge conversion 
interactive models internalisation refers conversion explicit representations tacit skills capabilities groups individuals 
models internalised secondary realities vivid relevant interesting 
relevance achieved actively interprets model provide information needed current context 
interactive model vivid users see changes model affect behaviour capability customise system preferences local reality 
interest created system answers real needs users everyday ones benefit system 
interactive models social learning facilitated access membership target community 
people experts experience exercising skills needs acquire important knowledge dissemination explicit models 
mean models role facilitating 
user created representations interactive models help identify people give richer description particular problem 
interactive models trigger storytelling 
models identify users constructed 
extent personal touch models local language constructs mediate shared knowledge community 
shared action context modelling contribute models 
context easily established modellers room manipulate models 
distributed action contexts exist partially shared enabled synchronous conversation support integrated modelling tools 
order facilitate rich knowledge dissemination action context model degree recreated new setting model capture context situation suitable objectives assumptions resource requirements 
system maintain link template instance generalised order facilitate learning examples 
trust power participation trust openness crucial organisational learning 
sch inhibitory loops cause organisational learning systems related unilateral withholding information 
describes reflective openness core features learning organisation 
openness refers willingness speak mind reflective openness concerns willingness challenge interpretations 
information systems increase transparency organisation 
assume information circulates freely just technology support circulation available 
section explores barriers participation interactive modelling 
motivation activity legitimate accepted organisation crucial social learning 
management support commonly cited success factor information systems 
explicit management support sufficient 
attempts open door management failed employees came realise door open cross threshold 
necessary develop richer view 
berger means integration meaning attached institutional processes objectively available subjectively plausible 
communities practice theories demand availability legitimate peripheral participation 
withdrawal strategies problems occur information systems increased transparency applied control 
increased outside control workers take protective measures withholding effort forming informal collectives norms behaviour limit productivity 
actions devastating effects rely people willingness model share insights 
indications difficulties diminishing 
increased education job security self self esteem social needs replace safety security main motivational forces hierarchy 
representing thoughts ideas models seeing people input way fulfilling needs 
case studies offer multitude examples kind motivation 
education job security sense autonomy personal mastery important success factors interactive models 
accountability motivation model avoid unrealistic workloads 
example accountability reason adopting workflow management systems healthcare 
system keeps track activities documenting performed rules reflecting current workload 
pointing long list scheduled individuals demonstrate unable handle cases 
social integration degree social integration different occupational groups important part societal context information system 
studies point equality central condition identification group formation communities 
community membership essential social learning 
discussion copy machine communities noted relationships surprisingly 
reports insurance claims processing new gulf opened clerks supervisors result information technology replaced mutual problem solving information sharing automated coordination simple steps 
long term effects technology induced social devastating community engagement production efficiency studies coal mining show 
information technology influencing influenced degree social integration organisation 
factor systems designers pay attention 
trust models facilitated experimentation redundancy discusses problem trusting symbolic representations 
studies symbols actual experience profound time linkage physical symbolic worlds tightly 
problem temporary system crucially damaging cooperative system prevents reaching critical mass users 
reaching critical mass core challenge benefits cooperative system increase number users 
trusting symbols reflect functions systemic relationships difficult 
informants people trust machine really know works 
interactive models enable transparency information system understanding requires just availability 
establishment training arenas users experiment system interfering actual operation critical measure 
design redundancy useful technique 
redundancy allows users double check system telling 
important electronic texts overcome letting users add informal comments model elements personal stamp way communicating knowledge unable articulate structured modelling language 
mobility physical barriers participation analysis shows information technology lead replacement bodily skills intellectual ones 
experienced plant workers overwhelmed feeling see touch inside computerised control rooms 
mobility reported limiting factor knowledge sharing consulting firms 
interactive models mobile devices integrate concrete world data 
model spatial dimension elements mapped locations system highlight elements close user current position 
sensors positioning systems automated articulation support notify handheld devices user position 
users combine rich bodily knowledge get sense sounds smells contextual model information available field 
sensors send input models create highly interactive system users manipulate physical artefacts immediately see hidden distant effects model changes 
power knowledge issues power knowledge underlie discussion 
preservation managerial authority implicit goal key force automation strategies 
informants manager put build intelligence controls dependent special knowledge crew leaders 
employees choose withdrawal strategies faced increased managerial control 
mean designers assume responsibility interests serve subtle forms power turn systems instruments domination 
suchman views representations interpretations service particular interests purposes created actors specifically positioned respect represented 
researchers pay attention nd rd dimensions power framework forces restrict people representing interests forces influence interpretation situations thoughts desires 
possibilities interactive models create strategic action control behaviour key question 
language definition power pluralism innovation definition modelling language arena actions 
language influences people organisation talk think phenomena 
conflicting interests surface seeking define small set keywords internet site 
hierarchy terms everybody wants keyword top level 
language contribute turning certain points view implicit objective facts render aspects 
language part ideology particular definition reality attached concrete power interest 
people may necessary skills define languages language evolution supported pluralism encourages scepticism innovation inherently taken granted status quo 
system developers social actor organisation completely free questions interests serve modelling languages extensible community construct local dialect part ongoing collaborative learning 
modelling languages allow multiple perspectives conflicting interpretations coexist evolve process reconciling perspectives common understanding supported captured 
different viewpoints concept represented model elements 
called perspective integration 
process models far investigated challenges requirements interactive models general 
turn focus models reflecting processes 
research surveyed highlights importance process models process knowledge 
general definition process just describes forward motion course events time 
specifically process designates method operation production 
davenport expands perspective defining process structured measured set activities designed produce specified output particular customer market 
emphasises process deals done produced 
perspectives discussed challenge definition 
social activities influenced multiple goals 
different actors different objectives partially understood partially explicit partially aligned partially conflict 
seen structure activities evolving locally constructed predefined 
adjustments process remains goal directed operational integrating view activities 
importance processes organisational routines ways working described identifying characteristic organisation 
similarly theories social reality construction hold institution body transmitted recipe knowledge 
connected routines roles represent institutional order 
routines created changed social processes central organisational development learning 
nelson winter distinguish implicit tacit informal explicit routines 
process models explicit routines 
user participation workflow articulation workflow management systems wms provide active coordination support explicit process models 
trade press full workflow management success stories claiming tremendous improvements quality costs service times 
overview studies shows organisations experienced shorter case processing times improved efficiency 
case resulted staff reductions improved job satisfaction 
rigid workflow management systems severe limitations wms commonly pointed 
study printing shows number opportunistic ad hoc behaviours allow workers maintain smooth flow 
include flexible prioritisation jobs utilising time job printed prepare processing urgent jobs confirmed order received emergent support enabled state jobs allocating interruptible jobs people working customer counter 
workflow management system introduced setting explicit goals included recording worker activity supporting process management centralised monitoring enforcing quality standards 
system caused serialisation disrupting ad hoc activities previously enabled smooth flow 
entering data system created overhead especially troublesome short urgent jobs 
remedy problems shops started manual records wms record data day 
bowers propose terms workflow workflow distinguish naturally occurring ad hoc coordination coordination automated wms 
study observes similar workarounds industry 
process study distributed multi disciplinary printing shops 
initially checklists successfully 
computerised tool built lot data filled order passed 
receivers information complained got incomplete unreliable 
serialisation overly strict enforcement constraints major factors contributing problems 
situation tolerable social networks developed facilitated informal coordination conflict resolution 
hayes concludes designers workflow processes need accept uncertainty automation procedures 
flexible coordination enables process improvement successful application automated coordination described grinter 
software development organisations structured coordination tools perceived helpful 
benefits included automation dull tasks increased awareness 
system led unplanned empowerment software developers 
originally special committee controlled allocation bug fixing tasks developers 
committee bottleneck process developers authorised assign tasks 
soon developers started system organise attaching priorities estimates notes links related problems improving knowledge management 
study software development observed local innovations compile build scripts spread informally organisation 
adoption case computer aided software engineering tools time observed cause changes policies practices organisation 
instance developers began spend time users began see potential systems spanning boundaries functional units 
articulating processes exception handling twidale marty developed support packing museum artefacts 
discovered majority data recorded artefacts placed box 
times information recorded process packing detailing packed re opened moved boxes different times 
process data instrumental diagnosing errors 
priori organisational procedures museum professionals making process went artefact unique situation possible exception 
continuous process improvement focus detecting fixing errors preventing errors standardised procedures 
attempts designing error prevention mechanisms 
mechanisms evolved practice error recovery 
representations problematic nature process models fundamental 
actions fully predefined accounted post hoc intended effects 
software designers cautious trying anticipate situation 
scope representations major issue cscw community 
topic suchman winograd debate special issue communications acm 
problem simply richer modelling notations fundamentally appropriately captured model process 
view focus interactive models 
models may useful actor particular context true false 
relationship model reality represents dialectic models just describe reality shape way see world 
meaning representations fully determined may investigated elaborated revised continued interaction actual setting 
sachs summarises differences organisational views practice oriented views process design table 
surprising information systems led dual reorganisation low level decision making power control 
organisational view practice view people produce human error people discover problems solve desirable skill development desirable routine thinking desirable development knowledge understanding deciphering central skills flexibility interchangeable jobs flexibility skilled people standard operating environments collaboration collaborative learning necessary business take place communities social interaction non productive communities funds knowledge automation produces reliability skills learning produce reliability table 
design implications underlying assumptions 
processes plans situated actions project planning major part process articulation 
cognitive sciences plan defined sequence actions designed accomplish preconceived goal 
paraphrases definition process discussed reflecting process management deals planned 
suchman notes human actions inherently situated ad hoc plans confused action 
post hoc plans account actions rational way 
pre hoc articulation plans supports coordination shared understanding 
plans resources situated action strong sense determine course 
organisation situated action emergent property moment moment interactions actors actors environments action 
emergent property action means predetermined random 

process models practice gap models reality reflect observed 
give overview software process improvement studies 
main process agents experience discrepancy quality manual actual process 
contributes organisational learning systems actual practice hidden discourse 
words descriptive models existing practice crucial process improvement 
software process community identified need harvesting local process models general format suitable assessment comparison 
feedback practice process improvement needs extended de contextual metrics rich descriptive models process history 
process diversity studies software development processes lead researchers conclude different methods needed different projects 
williams note simple understood tasks programming distributed individuals complex uncertain tasks analysis design require close collaboration 
cockburn highlights criticality size important characteristics processes defining matrix methodologies 
notes projects unique characteristics important insisting proposed methodologies just starting points local adaptation 
trade number dimensions process classification scheme amount local adaptation needed 
cockburn refers classifications dimensions process types 
clearly infeasible predefine methods types 
infrastructure local models existing projects harvested reuse similar cases needed approach complexity problem 
combination elements aspects different methodologies required large number different types adequately supported requirements 
complexity classification schemes points need flexibly combining different criteria searching browsing relevant templates process library 
interactive process model reuse actual practice differs fundamentally explicit descriptions organisations rely descriptions understand improve 
interactive models detached practice purpose help people plan coordinate perform reflect 
interactive models danger distorting obscuring intricacies practice 
reuse interactive process models support knowledge creation dissemination anchored everyday 
key challenge models developed situation applied setting 
technically done directly copying previous model generalise models templates 
template defines starting point model modelling language adapted particular 
current applications process modelling span layers abstraction theoretical lifecycle models organisational models best practice plans actual projects 
layered models proposed software pro process workflow literature 
aiming support learning main concern understand mechanisms enable integration models different levels abstraction 
objective process model lifecycle shown 
framework process models divided categories particular models aim support performance project 
general models common properties number actual processes represent normative standards organisation templates reuse adaptation particular models 
metamodelling identification reuse understanding selection appropriation general models improvement template management articulation adaptation activation performance particular models analysis classification harvesting generalisation evaluation 
lifecycle process model evolution 
applying general process model particular situation case reuse 
reuse may refer copy paste previously developed particular model new process reuse occur general model 
process generalising particular models called harvesting 
goal harvesting provide templates reused utilise practical experience input assessment improvement general models 
conventional terminology activity people assess update general models called process improvement 
process improvement re engineering particular models rarely 
initiatives cost effective target general models applied repetitively 
activities process performance harvesting improvement reuse form learning cycle 
activity performed suffer 
imply activities need explicit encoded software 
user may instance manually improve template lessons learned project software support generalising particular project model 
similarly project model may passive plan influencing practice automated enactment support available 
subsections discuss activities turn 
process improvement process improvement outside scope thesis requirements area influence design integrated process support system 
process improvement re engineering gained considerable interest methodology organisational change creating mature software engineering practices 
summary reports directions software process improvement standard processes best practice iso assessment methods evaluate maturity organisational processes capability maturity model cmm methods utilise quantitative measurement quality improvement paradigm 
standard processes highly generalised 
assessment usually performed questionnaires metrics concerning efficiency quality project 
particular models rarely available process improvement methodologies focussed organisational level 
need local models identified 
instance reach level capability maturity model standard processes tailored project 
notion best practice defined general applied universally caused wide range local cultures 
process metrics organisational learning theories illuminate role process metrics 
sch distinguish single double loop learning 
single loop learning strategies action assessed performance satisfactory 
double loop learning needed long term improvement requires underlying assumptions norms goals assessed 
metrics focus efficiency conformance standards directing attention single loop improvements 
underlying causes obscured inhibiting double loop learning 
intangible differences particular process implies metrics treated pragmatically 
metrics role learning improvement vehicle 
metrics quantify benefits enable management buy 
discussed section important social learning practice legitimate acknowledged organisation 
process reuse reuse involves identification selection suitable model fragments reuse understanding learning effective components appropriation component user community new context 
task identifying template suitable process cumbersome building new model scratch template processes 
identification templates requires general software support searching navigation structured template repositories description suitable usage context 
candidate templates identified select suitable particular project 
selection supported qualitative quantitative analysis 
match current project suitable situation candidate template particularly important :10.1.1.45.3321
process models boundary objects reuse learning process 
vehicle establishment successful teams individual competence building 
reuse may occur communities practice cf 
sections interactive process models serve boundary objects organisation 
need really understand model assumptions strengths weaknesses order knowledge reuse just model copy take place 
techniques included tool understanding appropriation conversation negotiation rich process visualisations scenarios model walkthrough role play analysis simulation 
simple user oriented modelling languages facilitate comprehension 
appropriation local ownership template selected starting point plan process 
project group appropriate model adapt local reality project transform general guideline locally object 
local ownership models essential utilisation adaptation articulation process knowledge take place 
appropriation analysed perspective making process building strengthening common understanding meaning practice identity team 
common understanding essential coordination communication 
language support perspective making extensible allows representation conflicting points view 
reuse process performance performance users need add new details remove irrelevant parts model possibly applying templates components main model cf 

performance phase intensive interplay articulation activation goes context local models owned manipulated utilised process participants 
tools languages support composition models parts specialisation models inheritance integration data sources facilitate adaptation 
process model harvesting local innovations readily available reuse generalised templates 
cases may exist particular model automatically converted template creation refinement templates process reengineering 
involves manual adaptation local models suitable different contexts 
typically km methodology experts perform knowledge capture 
template may deep structure including specific language constructs initial model 
system include operations generalisation resetting attribute values initial state removing details replacing instances classes 
able contrast compare different particular models highlighting common patterns differences enabling combination different particular models template 
extending requirement personalisation system allow people put personal touch models 
identify persons contributed templates experience order facilitate social interaction discussed section 
requirement capture process history versioning configuration management supported 
historical development process model progresses helps gain understanding model function setting 
history enables humans ambiguity resource learning 
original model template additions reuse template original template summary process instance lifecycle performance planning revised model reuse template component 
component adapted 
template process template 

reuse process templates 
final model finished harvesting new revised template table summarises requirements interactive process articulation activation reuse 
list obviously capture aspect individual social organisational situated needs discussed chapter 
pinpoints major challenges level detail suitable assessing state art evaluating proposals thesis 
cautioned list categorisation schemes applied complex topic reduce wicked holistic problems conceptualisation 
practical perspective dictates focus mutual interdependencies requirements reflected learning cycle process model evolution 
requirement simple language visual graphical language user domain oriented language evolving model semantics local change process history versioning incomplete models personalisation contextualisation generalisation analysis metrics structured template repository composition template fragments description suitable context extensible language multiple perspectives interpretations views table 
summary requirements 
requirements chapter focus language system features interactive process models 
include requirements process improvement reengineering detached practice considered complete analysis framework process modelling 
number frameworks exist 
conradi derive requirements software process modelling languages 
framework meta process phases elicitation analysis design implementation enaction assessment 
chapter complements list requirements looking greater detail problem integrating evolving models different levels abstraction 
rombach require process models natural measurable tailorable formal understandable executable flexible traceable 
absence input organisational learning theories common papers 
previous quality process models integrates theories knowledge creation social reality construction 
interplay guiding general prescriptive tracing particular descriptive process models generated underlying model similar :10.1.1.45.3321
chapter state art chapter existing process support systems evaluated requirements chapter 
analysis aims justify 
new framework flexible process support needed 

current process notations rigid complex users section 

conceptual modelling techniques remedy problems section 

current process support rigid knowledge section 

new combination inheritance composition parameterisation patterns techniques needed process knowledge management section 
interactive models suitable integrating scheme currently fragmented research ad hoc evolving human centred workflow management 
existing problems workflow automation re framed interaction problems new challenges identified 
section discusses differences interactive adaptive workflow lists challenges interactive workflow research 
workflow process modelling languages models processes long utilised learn guide support practice 
software process improvement enterprise modelling quality management process models describe methods standard working procedures 
simulation quantitative analyses performed improve efficiency 
process centric software engineering environments workflow systems model execution automated 
wide range applications reflected current notations emphasise different aspects 
carlsen identifies categories process modelling languages transformational conversational constraint systemic 
increased interest modelling processes uml requires object oriented process modelling discussed 
transformational process modelling languages take transformational input process output approach 
processes divided activities may divided sub activities 
activity takes inputs transforms outputs 
input output relations define sequence 
perspective chosen standards workflow management coalition wfmc internet engineering task force ietf object management group omg commercial systems 
idef data flow diagrams activity diagrams eventdriven process chains petri nets known transformational languages 
section explore languages paradigm assess suitability interactive systems 
workflow management coalition object management group wfmc defines standards process definition interchange systems 
processes modelled hierarchical decomposition control flow structures sequences iteration parallel alternative xor branching 
organisational roles actors tools applications associated activities 
omg defines workflow management common facility object management architecture 
aim architecture support runtime interoperability business objects components legacy software 
main focus exchange data ongoing process instances modelling processes 
omg workflow terminology wfmc 
sub processes defined process definition representation intended happen may manual activities managed part workflow system activities business process 
intended happen composed create manage managed workflow management system controls automated aspects business process process instances representation happening automated activities activity instances execution represented include items tasks allocated workflow participant 
wfmc core terminology 
bpml business process modelling language include invoked applications computer tools applications support activity bpml defines formal web service choreography interface description language 
emphasising low level execution contains control flow primitives loops foreach branching manual choice rule switch join decomposition sequential choice instantiation call spawn properties assign tools action exceptions fault transactions compensate 
constructs closely resemble block structured programming 
strong point language allows manually controlled choice rule driven branching 
different primitives cases automation border defined process design 
bpml weak support local change unforeseen exceptions 
activities instantiated start execute 
available process overview local planning 
process interchange format pif pif designed standardise process definition number research projects including process handbook virtual design teams tove enterprise modelling 
projects primarily emphasised enactment bernstein proposed pif flexible workflow management 
pif transformational language constructs modelling resources 
coordination theory defines rich vocabulary relationships activities resources uses creates modifies interactivity relations successor prerequisite concurrent 
pif models contain decision objects select alternative paths 
language separate processes activities items 
simpler wfmc standards 
petri nets petri nets formal language specifying dynamic behaviour 
petri nets widely academic research workflow management software process environments 
petri nets small set basic constructs places circles transitions rectangles arcs 
execution tokens occupy places model representing current state 
shows example petri net model 
demonstrates basic expressiveness control flow patterns waterfall sequence concurrency specification synchronisation design choice java 
start analyse problem specify funct 
req 
specify techn 
req 
design 
petri net model fragment 
implement java implement finish transformational pml category subdivided task state oriented approaches depending kind element represented nodes flow graphs 
approaches utilise petri nets 
systems apply state oriented approach tasks transitions uml activity diagrams task oriented tasks places 
mapping user level tasks dependencies formal constructs straightforward 
may intuitive tasks active concept represented transitions tokens spend time places performance tasks 
main strengths petri nets simplicity formality large number execution simulation analysis techniques research community devel oped 
important limitations include theoretical user oriented constructs scope limited process aspects 
lack flexibility abstraction decomposition compositionality highlighted 
user oriented visualisations complementary modelling perspectives resources time proposed 
event driven process chains epc epc typical transformational process language applied industrial systems 
aris modelling tool sap erp system 
extensions variations epc subject research handle domains products resources flexible enactment 
epc units modelled functions 
functions enabled pre events cause post events 
relationships events functions modelled arcs xor connectors 
shown van der aalst epc models transformed petri nets 
connectors representing degree uncertainty routing supported petri net notation 
uncertainty gives rise exponential growth complexity formal operational models combinations alternatives explicitly represented 
transformational languages evaluation extensive transformational languages pml analyses focus category 
expressiveness languages typically includes decomposition control data flow organisational modelling roles integrated 
aspects timing quantification products communication commitments better supported paradigms 
major advantage transformational languages 
partitioning process steps match descriptions people 
graphical output models comprehensible training build models simply listing tasks plain text hierarchical breakdown structure 
models quite simple provided incomplete ordering steps allowed 
conversational process modelling language action perspective brought workflow arena coordinator prototype succeeded action workflow system 
perspective informed speech act theory extends notion people language describe world focus people language coordinating action negotiating commitments 
main strength approach facilitates analysis communicative aspects process 
highlights process interaction customer performer represented cycle phases preparation negotiation performance acceptance 
dual role constellation basis breakdown performer delegate parts people 
process models may spread depicted 
explicit representation communication negotiation especially structuring conversation predefined speech act steps criticised 
minimal support situated conversations danger explication leads increased external control simplistic mapping utterances actions weaknesses 
hand reported action approach useful people act pragmatically don follow encoded rules behaviour communication models interactively activated 
customer 
action workflow model example 
business orchestration ebxml language action approach new electronic business transactions web services 
rise range standards dealing process integration web services companies 
ebxml aims create global electronic marketplace enterprises size meet conduct business exchange xml messages 
ebxml defines standard business process definition includes transactions collaboration protocols simple negotiation patterns 
focusing defined business domains processes standardised available public libraries facilitate service discovery 
process evolution scope ebxml interactive models standard mainly relevant defining simple pluggable steps 
decision making processes preparation negotiation acceptance performance loucopoulos defined modelling language representing argumentation rationale decision making process 
extending vocabulary issue information systems ibis break decision making process goal issue resolved hypotheses positions solution alternatives justifications arguments pro contra hypotheses decision completes loop 
depicted 
decision making loops decomposed spreading new loops just action loops 
strength approach combines intuitive language representing argumentation ibis process loop 
deci performer sions rationale captured learning 
hand notation fully cover need process modelling combined approaches 
prototype extends design rationale product models negotiation potentially conflicting goals 
rationale constructs integrated process models 
plan context represents strategy fulfil certain intention situation 
plan contexts decomposed executive contexts choice contexts plan contexts 
executive context defines process automated system 
choice context requires human involvement selecting alternatives 
problems associated explicating decision making rationale social barriers participation discussed chapter common approaches 
languages reflect people discuss rationally experience indicates users feel comfortable applying notation 
goal hypotheses problem analysis evaluation problem setting decision action resolution justifications 
decision making rationale process loop 
declarative constraint process modelling declarative workflow approaches promoted 
constraint languages prescribe course events capture boundaries process performed leaving actors control internal details 
telling people systems warn rule violations enforce constraints 
common problems serialisation avoided 
hand resulting models comprehensible 
graphic depiction difficult correspond visualisation possible solutions set constraint equations constituting model 
support articulation planned ongoing tasks limited 
consequently constraints combined transformational models 
constraints mainly capture outside control workflow articulation inside process group 
goal oriented process modelling agent process support environments goal oriented declarative process models 
agents assigned goals constraint rules left details reach goals 
alliance provides adaptivity distribution decentralised enactment software intensive processes 
alliance represents breakdown structure reflecting goals sub goals uml class diagrams define ordering tasks 
scheduling tasks done dynamically process enactment influenced modelled pre conditions inputs outputs reflect causal dependencies tasks 
alliance reflects vagueness explicit process models capturing knowledge current state fuzzy statements 
fuzzy statements assigned probability going binary logic 
opens richer set alternatives agents interpret activate model 
roles interaction role centric process modelling languages applied workflow analysis implementation 
role interaction nets rin role activity diagrams rad roles main structuring concept 
activities performed role grouped diagram swim lanes rin inside boxes rad 
roles structuring concept clear responsible 
rad merged speech acts interaction roles 
role approach limitations making difficult change organisational distribution 
primarily targets analysis administrative procedures formal roles important 
system dynamics holistic systems thinking regards causal relations mutual circular nonlinear cf 
appendix straightforward sequences transformational process models seen hides important facts 
perspective reflected mathematical models interaction 
system dynamics utilised analysis complex relationships cooperative arrangements 
simple example depicted 
shows aspect interdependencies design implementation system development project 
time spend designing time coding testing better get design right time 
creates positive feedback loop similar analysis balanced means example iterative development 
system dynamic process models analysis simulation enactment 
importantly system dynamics shows complex interdependencies ignored conventional notations illustrating need articulating relations tasks simple sequencing 
resources implementation resources spent design need get design right time risk assessment design specificity iterative development 
system dynamic process model 
object oriented process modelling uml official de facto standard object oriented analysis design 
consequently people apply uml model business processes 
object orientation offers number useful modelling techniques encapsulation polymorphism subtyping inheritance 
uml integrates capabilities requirements capture case descriptions behaviour modelling state activity sequence diagrams 
hand uml designed software developers users 
core challenge remains mapping system oriented uml constructs user process oriented concepts 
problem general solution exists 
uml process languages utilise associations classes operations cases interaction sequence activity diagrams 
lack standardised approach reflects wide range process modelling approaches business software engineering 
modelling processes class diagrams class diagrams core language uml framework 
diagrams represent object classes relationships associations aggregation composition inheritance form static structure software system application domain 
representing tasks processes classes enables modelling process structures breakdown decomposition control flow dependencies associations 
classes associations stereotyped process model primitives 
stereotype additional classification uml primitive may add specialised attributes constraints symbols 
classes associations realising core knowledge represented process class diagram captured associations classes classes focus associations process modelling language 
associations class primitives defined specialised just classes 
classes operations aim support highly automated processes 
follow programming approach process modelling behaviour articulated operations process classes 
operation may include manual actions partial specification methods allowed 
scheme extends conventional semantics uml include human involvement execution removing rigidity fully uml compliant process class diagram entails 
cases case models step uml project 
cases capture requirements system perspectives various actors 
cases represent activities process limited expressiveness associations cases problem 
specialisation extends composition uses represented way articulating logical precedence relations control flow 
cases suited initial models elaborated languages 
activity diagrams uml activity diagrams specialised state transition diagrams 
activities distributed different objects similar role oriented 
models expressiveness syntax similar petri nets 
researchers fixed semantics activity diagrams rigid 
software process engineering environment aimed supporting human control flexible scheduling exception handling incremental model definition 
high level uses extended case diagrams capture loose collections related activities 
low level specialised extended activity diagrams capture resource needs conditions exceptions inputs outputs products 
integrating approaches uml process modelling number proposals different uml diagrams combined model multiple process perspectives 
dynamite follows 
case diagrams capture knowledge current practice 

structure tasks resources modelled class diagrams class case task 
associations capture control flow data flow resource needs 

concrete process specification class diagrams elaborated 
task interfaces input output parameters separated internal task realisation 

generic set methods changing state transferring data parameters defined tasks 
state diagrams define behaviour task classes 

event handlers implement user level model manipulation methods assigned task classes 

models executable system automatically generated 
integrating scheme proposed 
uses class diagrams represent structural aspects organisations business objects cases dynamic aspects processes workflows interaction diagrams detailed dynamics state activity diagrams model process lifecycle textual descriptions 
models structure interaction lifecycle description processes objects different levels organisation system architecture object code 
level refines realises specification level 
total methodology requires different model views 
methodology organised repeating patterns uses techniques different levels size overwhelming 
researchers criticised uml separating integrating different aspects structure process 
process modelling uml summary shift omg focus modelling uml model driven architectures meta objects business object frameworks workflow management indicate interest model driven process support technical side 
software oriented approaches transferable interactive modelling remains investigated thoroughly 
potential problems include uml complexity rigidity system oriented concepts 
system orientation brings benefits conceptual gap process modelling software implementation decreased 
especially useful workflow applications specialised solutions built standard components complemented customised forms business objects 
applications changes process model require tion application software 
software development processes users know uml especially suited oo process modelling 
section shown numerous mappings process concepts uml proposed 
integrating schemes combine uml languages complex interactive process modelling users 
lack class process modelling primitives major limitation uml 
explicit process representations numerous textual informal semi formal process descriptions exist 
project management temporal considerations important 
evident frequent milestones visualisations gantt diagrams 
ad hoc inscriptions artefacts carry process information coordination error recovery 
research utilising programming languages process representation 
process support systems area evolving incomplete operational models needed 
tailorable systems user interfaces groupware protocols method engineering domain specific modelling agent infrastructures dynamic ontologies multi perspective reflective systems similar challenges faced 
important insights areas discussed 
conceptual modelling suitable articulating aspects users commonly want share existing process languages number shortcomings respect requirements uncovered chapter 
notably languages models simpler domain oriented easier change 
section investigates general modelling techniques solving problems 
instance modelling tyranny classes local modification models poorly supported languages 
instance modelling better represents particular situations requirement 
complexity having take account occurrences prevented dynamic change class level 
pragmatic changes task instances frequent type evolution 
easy determine model element refers concrete individual 
property modelling tyranny dominant decomposition dynamic assignment properties object instances inherent feature instance oriented modelling languages 
unique instantiation class condition limits flexibility frameworks 
instances allowed change class life span 
state dependent behaviour demands large classes contain features potentially needed instance lifecycle 
dynamic objects framework permits evolution object structure behaviour 
possible refer past states system express semantic relations time intervals 
allow capture dimensional evolution modelled world users understanding 
order accommodate multiple perspectives increasing complexity models advocated stronger focus properties core modelling construct 
framework developed 
argue modelling methods emphasise orientations expense transformation information objects actors 
problems approaches include limited freedom users choose represent violating prescribed bias methodology reduced possibility representing integrating multiple perspectives violating poor language extension capabilities violating 
remedy problems objects described number facets 
facets represent particular perspective connected facet model 
language particular perspective coherent reusable 
aspect oriented programming cross cutting allows block code aspect control behaviour wide range objects 
modelling perspective corresponds declaring behaviour objects possess certain property 
interesting approach integrating different viewpoints software components model 
encapsulation semantic holism 
proposes systems thinking foundation learning organisations 
paradigm replaces linear causal relations mechanistic thinking nonlinear circular dependencies 
replaces reductionism holism part system related form coherent 
researchers experimented system dynamics process modelling languages follow reductionist approach 
main building blocks objects binary relationships 
black box closed system approaches seek capture dependencies objects interface hiding internal details 
approach sensible constructive design computerised parts information system self evident reductionism works equally requirements specification interactive models 
systemic models instance better analyse expected effects interdependencies alternative solutions 
conventional models manageable holistic perspective warns approaches assume interface subsystems completely specified 
models constructed conventional languages dominated systems thinking perspectives tend complex messy illustrated 
models practical need multiple views extract features relevant particular task role situation 
views interactive models edited 
views customisable 
model approach possible interactive models control include view 
people experimented integrating storytelling rich models writing story model represents linking model parts relevant 
holistic perspectives influenced information systems research 
distinguishes holistic molecular atomic languages 
atomic semantics meaning model element completely specified element semantic holism lets meaning depend elements model 
molecular semantics offers compromise meaning parts model 
relates discussion design simple languages 
language atomic semantics requires lot specific constructs holism allows meaning constructed combining multiple elements words sentence 
property models similarly define model element means conjunction properties 
holistic techniques poorly utilised modelling languages emphasise formal defined static atomic semantics 
snapshot reductionist enterprise model complex reality 
articulating vagueness incompleteness uncertainty modelling language contains elements articulating current state specificity model 
contains symbols denoting additional knowledge available modelled articulated diagram elements hidden model known incomplete complete correct appropriate 
symbols attached object relationship diagrams enabling integration visual languages 
optional need complicate models 
interactive model incompleteness vagueness uncertainty assumed characteristics 
default interpretation workflow model fragment completely partially specified depends context 
case studies needed investigate extent properties uncertainty vagueness explicated requirements indicate need mechanisms articulation negotiation meaning 
modelling languages summary challenges sections provided overview languages active process modelling 
faced requirements interactive process modelling current approaches share number weaknesses languages complex containing numerous types views integrated systematic manner 
especially case uml 
cases mathematical logical technical concepts applied user domain oriented 
petri nets constraint languages exemplify 
languages precise formal automatic execution offer opportunities human contributions interactive activation 
languages handle process models varying degrees specificity 
semantics language elements generally static easily adapted local contexts multiple perspectives 
generic modelling techniques help meet challenges 
instance property modelling enable flexible languages local modification multiple views concept evolution 
semantic holism promising poorly developed framework designing simple flexible languages 
activation workflow enactment workflow defined automation business process part documents information tasks passed participant action set procedural rules 
definition research focus automatic activation 
categorise organisations workflow technologies degree empowerment autonomy dominant coordination mechanism depth relationships groups 
empowerment position trusting controlling simple structure supervision machine bureaucracy standard standard processes outputs form standard skills coordination mechanisms 
workware evaluation framework 
top right corner identified main challenge technology innovation 
interaction perspective attacks challenge viewing workflow active support planning performance coordination evolving complete explicit process model 
definition broadens scope including groupware support forms coordination mutual adjustment just standardised processes automated sequencing tasks professional bureaucracy mutual adjustment data transactions bounded unbounded knowledge sharing dynamic process linkage linked sub processes adjoined functions depth relationship allowing incomplete evolving process models managed empowered users integrating process articulation planning part process facilitating knowledge sharing dynamic linking process parts 
static workflow management systems static wms separate process definition articulation process enactment activation handle changes definition enactment 
activities supported different tool components performed different roles 
process definition process experts process participants perform workflow clients invoked applications 
managers administer monitor 
resembles separation conception execution scientific management 
production workflow follows mechanistic principles indicated fact enactment service called workflow engine 
static wms aims increase efficiency concentrating routine aspects activities 
core research challenges include transaction processing interoperability reliability performance scalability monitoring management large numbers routine defined processes 
challenges clearly different ones uncovered flexible interactive workflow detailed investigation static wms little relevance thesis 
administration monitoring tools interface interface interface process definition tools workflow api interchange formats workflow enactment service workflow client applications workflow engine invoked applications interface interface 
workflow architecture 
adaptive workflow management systems workflow enactment service workflow engine flexible workflow hot research topic 
area looks conventional systems extended static workflow systems adaptive dynamic 
research challenges adaptive workflow include controlled handling exceptions dynamic change migration instances old class schema new 
research area recognises change way life organisations regards repetitive 
community understanding emerged change requires process definition process enactment intertwined 
systems premise enactment engine solely responsible interpreting workflow model 
words users contribute making alterations model interpreting part 
model formally complete prevent ambiguity deadlock process 
view engine turing machine complicates models process variants included 
exception handling controllable cumbersome 
researchers challenge feasibility articulation users arguing expected change models correctly 
research targets closed system automation open interaction algorithms design principles relevant interactive workflow 
overview adaptive wms helps get clearer picture innovative capabilities interactive workflow situations capabilities needed 
workflow enactment petri nets approaches adaptive workflow manipulation petri nets 
execution petri nets tokens moving arcs flows model 
tokens reside places model token population marking represents current state process 
transitions enabled input places contain tokens 
enabled transition may fire causing token removed input place token added output places 
way token viewed thread process 
threads may split merge transitions 
adaptive enactment petri nets exception handling area closed system assumption adaptive workflow temporarily relaxed human actors influence interpretation model 
lot research adaptive wms focussed ways token population petri net altered order handle typical exceptions 
system includes operators splitting threads conflicts threads resolved interactively merge operation 
exceptions handled jumping activity 
milano allow user controlled token jumps 
organisational policies determine users authorised kinds jumps 
technique handle redo loops skipping activity parallelisation 
milano applies integrated conversation tool support negotiation exception handling process 
approaches handle simple changes execution order tasks partially meeting requirement local modification 
far reaching changes re definition process model poorly supported 
situated interpretation interactive manual activation incomplete models allowed models formally complete consistent 
users supposed react arrival tokens tasks responsible proactive decisions regarding flow 
dynamic change problem adaptive wms implicit assumption workflows modelled class level called schema instances enacted rules specified class 
context changes dynamically propagated class schema ongoing instances 
large number instances follow model manual transfer expensive 
dynamic change may introduce deadlocks halt instances 
automated semi automated change management needed 
petri net models dynamic change problem formalised search mapping token markings model version 
ellis propose combination immediate delayed transfer instances new model 
model partitioned change regions 
region changed new version changes applied region represent new version old immediate transfer possible instances currently region 
instances reside sized changed region transferred leave region delayed transfer 
approach called synthetic cut change implemented milano 
ensures correctness deadlocks introduced migration process method complex handles change scenarios 
support workflow evolution ellis keddara claims workflow change workflow arguing support workflow change needed 
similar proposition discussing extent manage unforeseen anticipated changes 
ml modelling language support dynamic evolution workflow systems change modelled enacted analysed monitored just primary process 
ml integrates handling instance schema changes provide predefined change process schemes typical approaches abort defer edit continue synthetic cut 
instance changes handled temporary schema changes 
ml uml workflow constructs represented classes 
default change processes include ad hoc scheme clear extent case facilitated implementation 
modelling language complex rigid system oriented 
casati propose language specifying change management 
separate language selected needs flexible basic process definition language performance scalability requirements change processes strict core production processes 
casati event condition action eca rules change management 
eca rule declares action performed event occurs condition statement fulfilled 
control transitions state diagrams 
nets nets prototype allows dynamic model interpretation reconfiguration enactment rules runtime 
enactment rules represented petri net metamodel 
words modelling process modelling done language 
exception handling advanced object modelling environment wms built top active object oriented database system 
approaches built exception handling top transaction mechanisms databases 
designed minimise need human intervention resolving exceptions 
consequently trivial exceptions handled system component arise 
component incapable handling exception may forwarded automatic exception handling 
exception handlers defined declaratively eca rules operationally 
automatic handler exists users involved interactively full manual control 
works exception regarded failure 
advocate ongoing harvesting user defined exception strategies repository reuse 
defeasible workflow similar approach 
workflows modelled justified event condition action rules 
justification part describes context rule applied 
perspective exceptions source learning shared klein dellarocas define exception departure process achieves process goals completely maximum efficiency 
taxonomy coordination mechanisms process handbook classify diagnose failure situations 
cugola argues inconsistencies process models tolerated 
partly implemented sentinel prototypes mainly temporal deviations complete model 
designers adaptive wms suggest designing exception handling interactive process works better full automation 
human involvement triggered acceptable procedure 
approach applies interaction exception handling normal activation 
consequently incomplete evolving models adequately supported 
human involvement reactive proactive 
mobile assumption workflow model defined class level underlies design mobile workflow prototype 
distinguishes flexibility selection anticipated modelled enactment flexibility adaptation modifying workflow class definition 
flexibility adaptation implemented dynamic change propagation ongoing instances 
selection flexibility achieved advance modelling alternative paths modelled execution starts late modelling parts workflow class left black box specified execution 
interestingly evolution scenarios discuss appropriately addressed solution late modelling error case modellers mistake 
indicates interactive late modelling useful conventional dynamic change exception handling 
authors claim ad hoc changes occur ordinary users trusted update models uncontrolled way 
claim view workflow modelling difficult time consuming requires expert knowledge 
empirical evidence discussed chapter perceived impossibility workflow articulation users result class approach inherent feature workflow solutions 
instance modelling removes great complexity having deal instances class model 
inconcert inconcert commercial wms incorporates flexible collaboration features 
original design goals included mutable process models allowing human judgement provision shared workspace task performance 
system works workflow instances classes 
templates varying degree structure offered starting points local articulation process participants 
instance orientation simplifies modelling language 
instance repetitive tasks generate new instances repetition loops linearised 
inconcert meets requirements limitations 
system allow collaborative tasks actor 
include groupware features shared workspaces documents extensive support negotiations project management 
endeavors flow includes user oriented process models design goal 
collaborative planning approached divide conquer individuals responsibility parts process 
focus complete workflow models models consisting articulated fragments 
instance level modifications supported long compliance class schema 
endeavors successor flow 
combines number techniques exception detection avoidance tolerance handling runtime dynamism late binding resources data process structure behaviour 
configurable partial execution 
engine reconfigured enforce different rules instance 
users define new rules 
typed modelling extensible typing generalisation specialisation model elements 
reflexivity changes model allowed enactment 
instances promoted templates capturing local process improvement 
library reusable composable model fragments 
alongside inconcert endeavors wms offers support requirements uncovered 
combines conventional adaptive workflow techniques interactive features support local modification incomplete models limited 
adaptive workflow summary adaptive wms offers important flexibility compared static systems 
changes workflow models affect running instances exception handling supported 
adaptive workflow shares basic assumption static wms process completely predefined class level 
seen situated contingent nature project demands local articulation project 
new enactment concepts investigated 
case management systems case management systems flower recognise unique characteristics case 
facilitate manual handling exceptions manual selection scheduling tasks subject predefined constraints cases complex knowledge intensive projects require fewer participants 
objective enable persons possible deal case minimising hand overhead speeding process removing extra answering customer enquiries 
interactive workflow management workflow systems prescriptive models proposed alternative mainstream adaptive workflow research 
concepts human centred mixed initiative evolving emergent free workflow elucidated 
approaches typically include features soft constraint enforcement supporting proactive users controlling allowing incomplete ambiguous models enacted flexible combination reusable model fragments 
area research currently fragmented lacking common terminology defined set problems 
interaction framework workflow management interaction framework views computerised information systems open 
directs research new ways computerised human actors cooperate order solve problems 
notion interaction machines page extended multi stream distributed interaction machines enable multiple users software components interact 
wegner goldin looked interaction means expressiveness models establishing domain language independent notion interactive expressiveness computability 
workflow systems benefit approach enables powerful exception change handling flexibly combining capabilities users algorithms multi user distributed groupware systems better described open interaction machines closed turing machines provides framework reasoning models different areas expressiveness interactively interpreted models better matches contingencies real processes 
information system act knowledge mediator users able represent knowledge accurately 
interactive systems needed order mediate non determinism vagueness uncertainty organisational realities 
multi stream interaction machine appear nondeterministic users due limited observability 
user know occurs interfaces system 
appears non deterministic 
correctness open systems proven general specific situations 
interactive workflow enactment workflow engine activates process model order support coordination 
systems activation manifests automated sequencing tasks provide guidance modelled constraints 
difference auto mated interactive enactment parallels turing machines interaction machines illustrated 
static adaptive approaches enactment completely controlled input workflow model 
change occurs model altered reloaded 
interactive enactment accommodates change intertwined user controlled activation re interpretation model updates 
user interaction allowed model need complete consistent 
may match degree specification currently user defined process models project plans 
semantics models process expert performer knowledge workers workflow model enactment articulation activation algorithmic engine interactive engine 
algorithmic interactive enactment 
interaction framework includes new look models interpreted turing paradigm interprets models induction allowed behaviour modelled algorithmically deducible model 
interaction machine interprets models induction allowed prohibited model 
declarative languages follow interaction paradigm respect operational approaches 
discussion relevant ability system support processes varying degrees specificity 
classic model interpretation assumes fully specified processes dynamic change problem 
interactive systems assume models evolve reflect improved understanding 
user involvement activation viewed situated articulation complementing overriding predefined rules 
allows models structure just unordered list tasks removes common problem system required completeness leads serialisation flow 
reconsidering formality rigidity current wms architectures attributed formal nature modelling languages tight coupling modelling enactment 
agostini argue conception accurate simple models easy change process participants remain formal tightly coupled enactment causing rigidity 
real problem formality lack interaction 
perspective complements view need interaction model interpretation enactment 
provides guidelines avoiding problems formalisation preserving benefits 
enable automatic error checking verification deduction simulation modelling language formal definition syntactic semantic rules 
definition prevent users re interpreting model situations arise 
models required completely schedule tasks know task performed 
formal interpretation model just alternatives enacted changes context insensitive interpretation 
needed language complete models formalised incomplete models allowed 
interaction framework advocates holistic enactment semantics 
views model system autonomous components 
component formalised interaction controlled users 
system exhibits emergent behaviour 
behaviour non deterministic irreducible algorithms shown wegner 
formality components need system mediating situated local emergent contingent vague open nature environment 
just requires interactive components semantic holism 
today apply atomic limited molecular semantics holistic 
petri nets firing transition depends presence tokens input places 
molecular non determinism arise overlapping token sets enables multiple transitions 
automatically resolved prohibited free choice petri nets 
systems users decide 
user involvement enactment key question interaction paradigm puts workflow designers users involved enactment process 
interactive systems user involvement reactive proactive 
reactive involvement means system asks user resolve ambiguity model 
follow questions scenario user 
asked support offered solve problem 
proactively users involve complementing overriding modelled scheduling 
example workflow literature opportunistic involvement starts task inputs ready 
proactive actions facilitated awareness notifications visualisations current state process 
shared task management demanding flow dependencies included models interactive workflow approach extreme corresponds shared task management 
system task interdependencies articulated 
information tasks available scheduling left users 
experience demonstrated task management useful 
linked abstraction workflows linked abstraction workflows law implements enactment framework combines enforced scheduling tasks freedom users 
law explicitly modelling participants authority change model 
authorisation scheme follows breakdown structure 
task decomposition modification rights associated 
process recommendation actors may method 
strict 
specification mandatory changes allowed 

specified steps performed new subtasks may added 
contribution highly relevant answering question user involve interactive enactment 
provides clear rules human intervention local centralised pushed breakdown structure 
guiding enforcing constraints discussed section constraint reasoning applied design flexible wms 
constraint rule fulfilled existence transformational task active short time executed 
components subscribe notifications events occur components due task dependency 
constraint rules control flow determining task completed performed 
gpsg generalised process structure grammar process definition open new constraint rules added dynamically execution process 
document task rules supported 
task document structures enhance expressiveness language richness coordination functionality 
designing different degrees specificity bernstein articulates need handle varying degrees specificity process models unstructured fully pre specified 
shows current tools support loose ad hoc collaboration automate fixed processes cf 

case study highlights need integrating ad hoc predefined process fragments system 
proposes combine coordination theory soft constraints enabling flexible distribution control system users 
design focuses model activation facilitate process articulation users 
system prototype implemented 
handling vagueness uncertainty workflow modelling language discussed section 
allows users explicitly state uncertain parts model chosen explicate details 
language proposed starting point evolving workflows user driven coordination 
approach recognises user involvement needed learning organisations processes completely predefined 
workflow prototype built language applied number process modelling case studies 
cases researchers learned incomplete models simpler easier understand process participants 
instance discovered sequencing activities minimised represent unavoidable causal relations 
hermann concludes incremental structuration process participants hardly supported current groupware workflow concepts 

different degrees specificity process models 
extending scope model driven behaviour wms prototypes extend scope contextualised support workflow enactment 
researchers proposed integrate groupware workflow 
milano includes multimedia conversation handler negotiation communication 
integrates hypermedia collaboration support infrastructure synchronously shared workspaces 
endeavors includes prototype integration communication tool 
awareness servers notify users shared workspace relevant events occurred 
keeping users date current state workspace component supports coordination mutual adjustment 
integration awareness workflow proposed number researchers 
proposals resulted implementations detailed investigation interplay workflow awareness engines 
inconcert see intermezzo specialised systems combined workflow access control 
flexible configuration reuse access control policies poorly supported 
project management functionality prototyped law inconcert integrated microsoft project 
design proposed bernstein goes farthest combining model activating components workflow architecture 
architecture implemented complexities arise integrating components requiring specialised terminology dealt 
workflow management systems summary discussion identified main wms categories static adaptive interactive case oriented 
static adaptive systems view repetitive model processes class level 
differ support exception handling changes class affect ongoing instances 
interactive case oriented systems view process unique facilitate articulation instance level 
case management systems deal complex processes individual steps case consists prescribed 
interactive wms target project harder structure advance 
process learning integral part 
seen interactive workflow management research area early phases innovative proposals implemented 
interaction framework illuminates key discussions concerning user involvement formality varying degrees specificity 
related number different classifications workflow management systems proposed literature 
georgakopoulos offer comprehensive overview refering alternative classifications ad hoc administrative production distinguished different degrees human control predictability supported processes :10.1.1.101.5199
production ad hoc roughly correspond static interactive framework administrative wms resembles case processing 
mail document process centric distinguished different coordinative artefacts primary elements workflow models 
abbot sarin similarly distinguish mail database driven architectures 
tightly loosely coupled 
tightly coupled system model directly input workflow engine loosely coupled workflow application developed conventional software engineering project 
models created design programmed application 
similar classifications surveyed carlsen 
outline approaches execution conceptual models case tools software development 
purpose approach validate dynamic behaviour modelled system enhance communication users live representations animation explanation execution traces 
includes user actor deciding happen pointing interactive models 
mechanisms harvesting reuse section provides overview language constructs operations support process model harvesting reuse 
preceding sections emphasis evolving incomplete ambiguous models distinguishes analysis previous :10.1.1.33.2525
analysis organisational perspectives surveyed chapter 
tacit knowledge gaps models practice integration knowledge management everyday relations trust power participation provide core perspectives 
generalisation process models pkm model page sees interaction local global process models foundation knowledge management 
interplay requires understand generalisation means respect process models 
model generalisation represents larger number cases 
objectoriented software meaning superclass subclass relationships formally defined 
process model generalisation straightforward 
main challenge generalise dynamic behavioural aspects 
process handbook contemporary workflow systems generalisation may seen adding details models increasing number possible paths 
approach assumes model contains allowed behaviour 
called common multiplier generalisation :10.1.1.33.2525
models treated prescription action resources situated adaptation 
taken literally means root node specialisation hierarchy include details nodes tree 
approach general models hard comprehend difficult maintain 
problems remedied treating decomposition specialisation operation 
models viewed socially constructed artefacts reflecting partially shared understanding created rich background tacit knowledge 
perspective adding details model means saying reflects means narrowing scope behaviour specialisation 
empty model viewed clean sheet full freedom 
greatest common divisor approaches local change incomplete models foundation enable structured repositories simpler models easier compare manage configurations :10.1.1.33.2525
interaction framework advocate inductive model semantics line approach cf 
section 
classification section instance modelling dynamic properties identified promising technique simple flexible comprehensible models 
classification useful helping actors identify suitable templates structured repositories allowing incremental model definition inheritance facilitating process analysis 
classes improve cognitive economy convenient articulation 
simpler declare object person say object properties name address phone number social security number 
inherent classification requirement instances defined class problematic 
classes socially constructed essential structures real world 
parsons shows major problems information management including schema integration evolution interoperability direct result class orientation solution problems greatly simplified instance order primitive 
multiple dynamic classification allows different perspectives coexist negotiated represented model 
disagreements classifications frequent disagreements identity individual objects 
intensional classification parsons draw insights define dynamic classification model objects belong classes posses defining properties class 
conceptual framework bunge classification method called intensional 
concept language similarly utilise intensional containment relations define new concepts generalisation specialisation aggregation value transformation 
extensional classification extensional perspective classification views class set objects extension common 
conventional subtyping extensional object extension subtype extension supertype 
extension class includes actual potential objects class concept applies 
extensional classification sense deal instances class membership relation class instance explicit straightforward 
prototype instance frameworks modelling languages apply class concept just instances 
taivalsaari discuss object prototype inheritance alternative class inheritance 
types initially defined exemplars prototype objects special instances class level constructs 
new objects created cloning prototype instantiating class individual instances modified 
amulet garnet user interface systems tailorable architectures prototype instance inheritance 
systems instance serve prototype instances model element reused ad hoc 
constraints define rules inheritance features prototype instance 
experience indicates single layer models easier learn intuitive flexible error prone layer class instance models 
inheritance inheritance core feature object orientation combining reuse specialisation 
specialised descendants inherit structure interface behaviour general ancestors 
inheritance simplifies models incrementally defined specialisation hierarchy 
detailed semantics inheritance vary languages 
taivalsaari provides overview differences single multiple descendant parent 
implementation reuse interface subtyping sharing behaviour code expressing specialisation 
subtyping assures automatic substitutability 
class instance primary object discussed 
dynamic static descendant able change ancestors lifetime 
selective full may descendants select features inherited 
acyclic inheritance graph cycles allowed 
lookup scheme inheritance graph traversed top bottom order find feature 
just definition composed 
creation copy lifetime sharing descendants just copy features ancestors created way sharing dynamic changes 
deep shallow copy objects just copied 
level compatibility class subclass strict semantic behaviour non strict levels signature full syntactic interface compatibility name operation signatures redefined cancellation elements added removed freely 
behaviour compatibility straightforward inheritance scheme processes behavioural elements strict inheritance limited utility evolving complex systems 
inheritance process models complicated inheritance object oriented programming languages main reasons models consist numerous objects inherited 
semantics process behaviour just syntax blocks code inherited 
models articulate human actions possibly incompletely incorrectly 
process models evolve execution 
numerous systems applied inheritance workflow process models trying meet challenges 
inheritance operations conventional inheritance applied process modelling 
cf 
section represent dynamic behaviour operations inherited class subclass 
operation types define event types part operation name compatibility operation templates define exact number types events signature compatibility operation defaults assign values attributes behaviour compatibility 
object class specialisation hierarchy operation may defined type template default 
inheritance associations includes associations order primitives defined specialised just object classes 
associations inherited class subclasses 
models structured levels 
language defined hierarchy classes associations creation level 
level includes kernel user defined classes language extensible 
definition level general process models defined subclasses creation level classes 
instance level particular model generated constraints template inherent classification 
layered policies obligations overhead transparency metaphor utilised combine multiple layers process models 
layer holds portion model layers put top transparencies get total model 
similar obligations layers general specification local modifications instance data 
layers modified 
layer may delete create replace modify objects general layers cancellation inheritance 
layer may include multiple templates multiple inheritance method model composition 
binding instances templates may go surrogate 
surrogates contain rules version template object select enabling late binding 
petri net inheritance van der aalst investigate different forms inheritance petri net process models list number transformations generate subclasses adding new alternative path adding new parallel path adding new tasks long don alter order old tasks :10.1.1.33.2525
strict behaviour compatibility allowed execution traces model subtyping criteria 
distinct forms inheritance proposed 
protocol inheritance subclass behaviour superclass added tasks blocked 
projection inheritance hiding new tasks execution trace subclass results trace superclass 
lifecycle inheritance achieved combination hiding blocking produce behaviour superclass 
lifecycle inheritance suitable aggregating comparing structuring process variants approach targets management dynamic change organisational learning :10.1.1.33.2525
requirements met inheritance approaches process model inheritance described 
started classic oo mechanisms took transformational languages starting point derived inheritance mechanisms dynamic behaviour models 
approaches enable generalisation merging local variants common schema comparison metrics 
structured template databases utilise specialisation hierarchies 
dimensional navigation structure process handbook defined 
see vertical decomposition horizontal specialisation combined 
positioned process element move directions explore related templates 

process compass navigating template repository 
languages systems vary user oriented simple graphical extensible obligations programming oriented 
petri nets advantage formal analysis methods exist 
respect local change incomplete models obligations provides flexible solution 
oo approaches allow local change predefined boundaries 
strict inheritance scheme proposed petri nets rigid directed topdown control 
obligations support multiple views separate instance data local modifications making easy reuse specification part model ongoing processes 
inheritance help meet requirements critical social learning 
construction shared understanding process participants better supported allowing representation reasoning reconciliation different interpretations 
weaknesses include limited support incomplete instance models composition description suitable contexts 
sections explore approaches challenges 
process model composition composition models smaller building blocks essential reuse technique 
projects templates combined plan 
implies harvesting produce template fragments easily put number ways 
alternative solutions similar problems combined template encapsulating differences specific parts model 
model building involves vertical horizontal composition fragments 
vertical hierarchical composition involves connecting process model decomposition step model 
horizontal composition involves connecting fragments level detail 
problems black box components encapsulation hides complex models inside component clearly defined interface replaced model interface 
encapsulation reductionist approach 
holistic non linear causal relations activities imply dependencies captured simple interface 
pitfalls encapsulation dependencies captured interface overlooked remain tacit lost subsequent situations components reused 
process component interfaces question kinds interface definitions suitable process models 
transformational models interface activity consists input output flows 
richer notations add resource roles 
define triggering events pre post conditions 
knowledge perspective speech acts form interface component environment suitable encapsulation mechanism 
just simple commands interface allows negotiation boundary 
pluggable actions vertical composition action port model apm includes novel approach vertical composition called pluggable actions 
apm units modelled actions 
addition input output flows interface action includes resource signature describing personnel tools information needed perform action 
recurrent model patterns specified action clich clich undefined steps represented resource signature 
particular process local action definition plugged clich take place undefined steps 
enables local adaptation changing clich 
similar mechanism included mobile variants hide alternative sub models main template clich black boxes represent parts model specified 
runtime components reuse brokering open process components opc manage organisational personal model fragments 
process component start suspend abort execution tell components capabilities current state 
enables distributed coordination support 
relationships components established dynamically resource broker matches needs project capabilities reflected personal process fragments 
opc allows components differing local semantics 
local change facilitated having components delegate interpretation representation objects inherit 
internet workflow standard swap support runtime components 
projection multidimensional process models projection refers multi dimensional model removing dimensions removing resources information flow process model 
main principle reuse mobile environment workflows modelled different perspectives functional done tasks 
behavioural task performed 
informational data flow 
operational done tools 
organisational performs 
causal process performed objectives 
historical happened performance 
perspective modelled independently 
means combine fragments different perspectives suit particular process 
multidimensional approach enables simple models perspective guides composition structures template database 
different models compared perspective 
principle applied process handbook related specialisations grouped bundles 
variants bundle typically differ respect dimension 
instance sales process may bundle operational specialisations sell causal specialisations sell 
bundle trade table captures strengths weaknesses variant 
reductionist view process models may idealised perspective oriented approach points important aspects processes isolate represent template fragment 
removing dimension model simple way generalising 
process model parameterisation introduce concept process variables bound values enactment enabling tailoring templates particular models 
variables represent products roles constraints tools goals model fragments 
parameterisation resembles resource management apm aspects part resource signature interface action resources allocated dynamically 
apm pluggable actions described similar variable process fragments 
perspective specialisation involves constraining range values bound variable generalisation eases constraints 
binding values predefined rule performed interactively users enabling local change 
major strength approach open nature easily combined techniques 
process patterns patterns behaviour may reflected process models evident comparing instances similar processes 
software engineering architecture pattern languages developed representing general solutions recurring problems 
workflow patterns capture routing schema show implemented different languages 
great number business process patterns specified 
management anti patterns describe troubling situations avoid 
process pattern languages add descriptions motivation usage range application underlying assumptions pattern 
requirement poorly met current 
nature project uses process modelling describe methods trace actions early phases software development 
process models focus decisions process context situation reach specified goals 
arguments support object decision captured 
nature guidance mechanism pattern matching engine compares current product parts situation descriptions reusable process fragments repository 
analyse large number business processes government banking industry 
focusing communication apply common approximation patterns assess reusability workflow applications domains 
technique enables assessment reusability different communities practice bridging local dialects frameworks 
summary reuse techniques section shown system currently meets requirements integrated process knowledge management 
inheritance mechanisms generalisation structure reuse complemented components knowledge combination patterns describe environment model useful 
addition reusing model templates needs knowledge intensive processes demand dynamic modelling languages adaptable current vocabulary community 
metamodelling important feature 
demands suitable underlying language model metametamodel capable handling inconsistent vocabularies deep concept structures evolving process modelling language lifecycle 
active interactive process models research challenges chapter analysed flexible workflow management 
shows number challenges remain interaction key perspective framing problems 
interactive open systems perspective define workflow active support planning performing managing coordinating explicit process model evolving possibly incomplete 
conventional approaches separate process definition articulation enactment activation regarded active systems interactive :10.1.1.101.5199
separation dynamic adaptive static production workflow refers changes definition workflow type affect running instances 
adaptive workflow emphasises automation top control classes instances 
interactive workflow demands bottom approach focus planning performing local process instances 
process definition planning articulation viewed activity part process defines 
process templates resources adaptation prescriptions action 
clarification differences complementary approaches needed 
table presents summary differences 
subsection lists main challenges interactive workflow management systems 
static workflow adaptive workflow interactive workflow processes supported capital capital knowledge intensive creative process model complete specified advance complete possibly special constructs late modelling parts incomplete partially ordered partially decomposed process instances instances follow class schema instances follow class schema instances unique wms architecture separated definition moni separated enactment monitoring ponents enactment integrated planning performance management coordination support modellers systems analysts proc systems analysts ess experts process experts users managers workers 
experts facilitate knowledge management local changes enactment supported exception handling changes normal handled changes delegation instance level rescheduling general changes supported dynamic change prob interactive dynamic change lem algo algorithms simpler rely enactment rithms exists human control activation automated enactment automated 
interactive 
interaction interaction model level altering model model enactment level manual re interpretation coordination automated sequencing tasks automated sequencing tasks automated sequencing groupware services mutual adjustment reuse instantiation fully instantiation 
combinable templates avail automatic copy paste 
able resources situated initial parameterisation allow ad hoc addition predefined tasks planning 
harvesting local models new templates research challenges transaction management scalability security distri dynamic change exception handling articulation users model reuse enactment bution systems integration incomplete models extension model driven functionality table 
differences static adaptive interactive wms 
articulation support major challenges limitations current concern flexibility simplicity user orientedness crucial social learning negotiation meaning 
research interactive process modelling languages investigate 
basic premise models incomplete partial representations understanding time better handled 

language efficiency improved 
simple representations meaning adapts current context usefulness transcends specific situations enforcing idealised view 

language facilitate flexible ongoing articulation users 
local modifications straightforward 

domain user oriented concepts utilised 
kind reflection extensibility viewing mechanisms enhance comprehensibility models utilising ongoing interaction domain model 
activation support major challenges interactive activation extends capabilities adaptability fully automated activation dominated process support systems far 
number commercial systems research prototypes involve users exception handling fully interactive activation semantics implemented 
issues subjects research direction 
involve users model interpretation 
users asked resolve ambiguities models support offered 

automated interpretation process models contextual 

model driven functionality usefully integrate complicating models 
services useful different processes 

customisation process support infrastructures simple straightforward user friendly 
move user programming enduser modelling 
process model reuse major challenges section gave overview rich variety mechanisms process model reuse 
inheritance composition dominates patterns parameterisation projection significant contributions 
approaches exception pattern languages focus automating reuse 
interactive reuse framework increase flexibility usability meeting challenges 
interaction utilised simplify model reuse making comprehensible users 

inherent classification replaced incremental need driven classification mechanisms templates past models classified features current situation long term management template library 

customise reuse mechanisms fit organisational user preferences situated project needs 

role play reuse framework 
possible offer active process support reuse adaptation harvesting improvement 
chapter interactive emergent workflow chapter introduces emergent workflow management 
approach utilises interactive modelling meet requirements outlined chapter 
term emergent signifies process structure emerges prescribed outsiders 
core idea replace closed system automation open system interaction fundamental design principle 
prototype called workware integrates workflow groupware functionality 
introductory section briefly describes action port modelling language apm starting point 
section outlines apm refined meet requirements process articulation users 
refined language simpler narrows conceptual gap planning performance 
models evolving incomplete support environment interactive workflow enactment 
section introduces enactment semantics workware models design interactive workflow architecture outlined section 
overview second half chapter provides formalisation design 
uml class diagrams state diagrams interaction sequence diagrams define detailed activation semantics 
chapter describes workware addresses articulation activation chapter describes solution process model reuse 
chapter show approach techniques developed generalisable kinds interactive models 
implementation workware prototype described chapter 
action port modelling language apm state art survey showed multitude languages process modelling 
main problems addressed thesis require modelling language 
continuity existing approaches sought 
apm language conceptual modelling framework information systems development called ppp process phenomena ports 
formal modelling framework ppp includes execution simulation automatic generation textual explanation models specification simplified model views 
ppp extended methods performance analysis information systems organisations versioning configuration management model repositories 
basing foundation integrate rich set useful techniques 
ppp process models extended data flow diagrams adding rigorous control flow semantics 
apm simplifies ppp flow interfaces called ports see offers large set constructs modelling performs actors filling roles resources tools materials information apply 
basic components apm port ax flow splitters combiners xor timer name resource signature action port store properties ports flows resource modeling role concrete organizational actor 
apm notation overview 
apm resource actor tool object agent software agent detailed resource properties invoked vs available external actor manual tool software resource flow software tool invoked software tool composite resource condition singular flow triggering termination xor mutual exclusivity ports input xor output conditional flow repeating flow material object information object active information object pluggable action definition apm includes innovative features compositional reuse interaction patterns language action approach cf 
section 
transformational language features paradigms roles objects conversations 
apm processes connected series actions 
actions may decomposed 
control flow signals arrive input port trigger execution action flows attached output ports may triggered action completed 
port may attached number flows 
flows port triggered 
action multiple input output ports 
multiple ports signify alternative flow paths instance input output ports 
apm primarily models control flow data flow 
data items information objects represented resources removing spaghetti data flows models hard comprehend 
expressiveness apm respect control flow patterns sequence choice concurrency synchronisation similar petri nets 
transformational languages breakdown primary structure 
decomposition fundamental process modelling languages categories different primary structures roles conversations 
role structures important breakdown fundamental project groups articulate prior deciding 
distribution roles frequently changes corresponding change breakdown delegation re assignment 
changes breakdown hand entails changes performed role actor 
breakdown structure fundamental role structure 
discussed section aspects processes conversational languages emphasise depend heavily political cultural usage context articulation aspects meet resistance increasing gap models reality 
languages best starting point facilitating user articulation 
constraints goal languages employ formal textual notations users 
better suited defining constraints environment put process supporting process group planning 
object oriented schemes various uml notations offer integration different modelling perspectives 
core concepts uml 
demands extra effort mapping user concepts software domain evident different representation process class case activity operation package 
continuity methods techniques important lower thresholds adoption transformational languages commonplace process modelling paradigm 
consequently apm suitable starting point emergent workflow modelling 
interactive modelling emergent processes languages workflow management business process engineering designed analysts experts receive extensive training modelling 
ordinary users simplify language 
bridge semantic gap process articulation enactment mapping modelling concepts users environment including user interface entities straightforward 
apm highly expressive language business process modelling lacks interactive activation semantics overly complex areas 
consequently decided take fresh perspective adapting emergent workflow 
main contribution thesis changes modelling language activation semantics reuse framework 
items avoiding unnecessary classification basic concept workware workitem correspond actions apm 
workitem represents unit level granularity specificity 
may decomposed process 
life cycle workitem breakdown structure added actors planning modified capturing re planning replaced process model removed reported performed ignoring advisory decomposition 
means workitem atomic reflects current state may change lifecycle 
system include separate classes atomic composite workitems easily accommodate evolution 
need change class item alongside instrumental change adding removing sub items 
lack predefined system enforced classification workitems processes tasks activities actions language simpler efficient 
users express statements need know different language constructs 
flows composite workitems collections unordered list sub items workflows sub items interconnected 
collections workflows refer models different degree structure 
interconnection network workflow types objects flows representing dependencies workitems sequence 
decision connectors joining splitting set flows 
types connectors unspecified empty circle xor 
type refers logical relation multiple input output flows 
concepts workitem flow decision constitute needed enactment workflows subject section 
graphical notation workflow language 
workitem input output decision connector corresponding starting completing item 
workitem flow workitems resource signature input output decisions xor decision connectors 
join fork variants exist types 

workware process modelling language 
decisions workware modelling language follows apm aspects 
decision connectors represent exception 
generalisation apm constructs port timer condition flow combiner flow splitter 
generalising constructs single class simplify language compromising expressiveness 
rationale unifying constructs represent decisions regarding flow 
fill similar roles model activation need similar semantics 
unifying common construct simplify semantics 
discuss differences apm constructs derived relationships properties individual decisions process models 
instance decision connectors inputs outputs workitem correspond apm ports 
expressiveness example workware model depicted 
demonstrates partly expressiveness language sequence precedence 
articulated flows 
choice decide go xor fork connector 
parallelism parallel may start fork 
synchronisation finish starts join 
complex routing patterns modelled combinations elements specialised decision connectors introduced section 
resources handle change request improve delegation support evaluate request xor reject request prepare changes implement client changes implement server changes example workware model 
test new version xor workitems performed actors utilising resources typically tools information objects 
workware uses apm resource taxonomy 
actors xor tools objects required workitem constitute resource signature 
interface workitem consists input output decision connectors resource signature 
properties distinguish different kinds resources 
objects resource signature workitem initially resource roles 
roles filled concrete resources item performed 
concrete resources may allocated roles dynamically integrated resource broker applications 
instance treat information shared resource 
flows may include information objects primarily reflect flow 
coordinating access information duty information resource broker working cooperation enactment engine 
solution helps simplify process models limiting superfluous data flows 
shown properties distinguishing composite atomic resources mandatory invoked optional software material 
contain complete hierarchy apm resources 
framework modelling actual resources existing independently workitems roles attached workitems 
carlsen shows actor constructs model organisational structures 
integrated enterprise modelling framework actual resources typically modelled outside process domain employee databases corporate directories 
ware added relationship called filled roles concrete resources 
concrete resources case refer object represents actual resource 
resource role filled concrete 
means resource symbol tells users role filled vacant 
filled relation resource roles facilitating indirect allocation 
example shown project manager main workitem fills roles sub items 

simple model example indirect personnel allocation roles 
filled relation facilitates easy re allocation project manager replaced person 
supports integrated modelling breakdown structures role responsibility structures reusable process templates 
apm filled relation implicit 
roles action subaction name identical 
addition explicit filled relation workware caused shift focus process engineering interactive support 
usage experience indicates people want name roles differently meaningful context workitem 
requirement workware support incomplete evolving models implies system allows generic resource classes resource actor tool object 
useful modellers uncertain specific characteristics resource meeting place real virtual 
detailed characteristics resource specified time resource allocation concrete resources fill role 
customer responsible participant actors workware extension apm allows better organised collaborative workitems 
collaborative workitem actor resource signature 
recognising power action customer performer loop supporting negotiation incompletely specified cf 
section workware differentiates actor resource role types responsible main performer project manager project 
customer actors ordering paying result agent representing 
participant actors involved team performing 
concepts allows mimic typical breakdown structure action workflow responsible performer main item automatically customer sub items 
see role types utilised components workware architecture 

symbols actor roles different role types 
apm primarily concerned model activation leave concepts role type implicit allowing users specify naming conventions extra modelling constructs 
interaction pattern clich apm customer performer roles defined naming 
workflow enactment interactive activation seen viewing workflow engine interaction machine generates new research challenges 
need design engine involves users interpreting model bringing workflow forward situations arise 
workware engine state transition models workitems decisions flow elements 
transitions triggered automatically result events caused users 
detailed activation semantics section 
workware models represent planned ongoing partially connected workitem instances 
time users may alter model changing interpretation events enactment software 
user involvement enactment key question interaction paradigm puts workflow system designers users involved enactment process reactively proactively 
situated interactive interpretation evolving incomplete model requires challenges solved responsibility interpretation action distributed system user different scenarios 
users allowed responsible handling situations 
separate mandatory optional advisory model fragments 
users asked contribute monitor process delayed unnecessarily 
support users offered resolve enactment issues 
conflicts different users interpretation activation decisions discovered handled 
questions addressed complicating modelling language making harder comprehend 
activating flows workware enactment semantics progressed activating flows decision connectors 
activation may triggered users enactment engine interpreting effects events 
flow represents instance past anticipated signal 
view simplifies handling loops repetition language 
repetition involves unique set workitem flow connector instances loops 
simple enactment model easy graphically depict current status workflow marking elements activated 
applied visualisation scheme workitems different colour states red ready start yellow ready green ongoing grey finished decision making decision connectors play important role interactive enactment framework 
decision connector represents issue resolve regarding flow 
decisions may straightforward prescribe early planning process human actors performance 
connectors easily interpreted enactment software split xor join decisions may identified emerge critical issues 
default connector type unspecified doesn say relationship multiple inputs outputs 
altering type xor adds constraints workflow needn interpretation straightforward 
engine know act connector ready activated 
able determine output activate ask user 
call fallback mechanism 
position decision connector influences interpretation model 
manual decision making required engine asks actor responsible workitem surrounds decision 
input output decisions left person responsible local workitem decisions responsible parent workitem 
model decision prepare reject changes locally decision part parent process 
evaluate request xor reject request prepare changes local decision 
higher level decision 

modelling decision making authority responsibility 
constitutes simple powerful mechanism assigning responsibility authority decision making integrated planning performance process 
term decision signifies objects capture decisions regarding flow scheduling 
workitem input connector captures decision start output reflects completion decision 
unifying mechanism interactive enactment automated manual decision making supported 
addition reactive fallback proactive users unscheduled decisions having resort modelling faced exceptions 
range activation modes need take process system known problem cases surveyed chapter 
decision captured workflow trace 
activation mode apply handled situations arise 
consequently workware handle degree specificity model unstructured flows decisions left completely users completely predefined decisions automated 
usefulness automated enactment increases degree specificity models 
flows connect workitems engine reasons workitem state changes automatically activating flows enabling items 
model contains flows just workitem collection engine offers little active support 
case users full control process updating workitem states 
model elements instances conceptual gap process definition enactment 
conventional systems page model editor performance tools provide complementary interfaces integrated model concrete 
evaluate request xor reject request prepare changes conceptual design interactive wms far seen interactive models guide design workflow languages enactment semantics 
look interaction gives fresh perspective system architectures bridging gap articulation activation 
interactive wms architecture depicted 
layers repository containing workflow models articulated activated system 
number model interactors utilise models provide contextual functionality 
typical interactor integrates activation articulation services 
integrated user interface enables personalisation addition contextualisation provided workflow models 
manager interactive enactment engine user interface model interactors modelling visualisation model repository awareness engine access control 
logical architecture interactive wms 
shows model interactors set extensible 
software uses models thought model interpreting component interpretation performed automatically interactively manually 
research investigate utility workflow models supporting different functions system interactors usefully include architecture 
examples include personal organisation worklists workspaces workitem coordination interactive enactment articulation integrated rich visualisations model editor coordination awareness notifying users actions access control user assignment tasks influence information accessible need know need hide basis subject local policies communication support collaborative tasks negotiations informal handling unforeseen situations warnings modelled rules violated guidance novice users step step unfamiliar procedures information management workspaces document centric collaboration enterprise resource management integrated workflow personnel allocation project management functionality monitoring progress time money resources 
components distribution system users needs studied 
solution fits processes need develop customisable policies 
adding details access control communication resource management model complicated difficulties helped visualisations filter dimensions model 
template policies offered different process classes cases reused little modifications 
anyway utilisation workflow models provide wider range context sensitive functionality removes overhead having multiple representations increases users benefits keeping models date 
interactive architecture separation build time run time 
follows shift input output strings turing interactively generated streams 
component seen contributing integrated stream model articulation activation events input output device 
model editor enactment engine separate components position system updating model 
modelling editor visualisation capabilities powerful activation tool supporting manual coordination giving users overview current state process 
words component conventionally thought process definition tool plays role model activation 
conversely users articulate process structure textual worklist conventional activation tools suitable process definition 
model interactors integrate articulation activation 
shows core concepts interactive models articulation activation extend workflow management bridging gap modelling definition enactment articulation activation modelling enactment 
core concepts workflow management interactive models 
groupware coordination complements workflow enactment workflow loosely specified enactment engine provides little support 
cases interactors take 
shared worklists allow users communicate information context particular projects 
repository ensures user declares workitem finished updated status immediately available 
awareness engine conventional groupware component 
provides information actions user context workitems 
flows represent dependencies coordinated important channels event notifications 
awareness engine utilises models provide environmental feedback propagating event notifications workflow structure 
events relevant workitems user works forwarded 
presenting awareness information context workitem decreases cognitive burden interpreting information 
reduces shows extension phenomena referred concepts 
formation overload problem associated asynchronous awareness mechanisms 
detailed semantics awareness engine section 
awareness shared worklists process visualisations may trigger opportunistic involvement users override prescribed flow speed process handle exceptions 
instance user may decide start workitem required inputs ready 
provided information progress better equipped decisions 
actions violate prescribed process rules may cases tolerated system 
groupware components support manual coordination mutual adjustment pointed main challenge workflow research cf 
page 
enactment awareness engines utilise model support coordination automated scheduling standard procedures forwarding presenting event notifications contexts useful 
interactors complement handling different scenarios sequential vs concurrent 
user interfaces integrated management performance workware workitems available management tool 
worklist may items belonging project ones allocated current user 
meeting requirements customisation query language lets users define worklists 
typically workitem status new ongoing finished personal responsibilities tasks peoples tasks tasks participate project connection time considerations overdue deadline week utilised queries 
workitem accessed contains attributes describe item links relevant resources tools people information 
configured particular workitem preferences user 
interface users access customisable selection workitem services planning articulation modelling define new items coordination decisions change status communication email real time collaboration performance document management desktop tools 
services correspond commands user invoke workitem 
includes controlled interactive process model number ways communication channels included people participating workitem individuals groups mailing lists 
users discover people need involved add new roles process models communications channels automatically updated 
information modelled resources workitem immediately available 
user adds new document updated version automatically reflected model available people 
description workitem shows properties currently defined 
workitem local user defined properties 
navigation structures generated structures process models show sub items browse flow 
detailed activation semantics look detailed definition modelling language semantics different interactors apply models 
management tool provides basic means users articulate share process models automatic support interactor offers minimal 
interactive enactment engine provides automation enactment rules fill major portion section 
formalise syntax modelling language 
workware language metamodel shows modelling concepts workware uml class diagram 
attributes operations relations influence enactment semantics included 
attributes relations left improve readability 
interaction framework manifests users roles user interface components language meta model 
concepts needed formalise interactive operational semantics models 
addition modelling concepts workitem decision flow included person users fill roles customer responsible participant workitem worklist user interface component 
worklist workitem attributes state operations ready start suspend terminate finish child parent owner owner owner ongoing new customer output input decision connector attributes relation activated operation activate person participant responsible 
workware metamodel 
flow attributes activated operations activate person access number worklists different selection criteria 
included standard lists new ongoing 
operations metamodel triggered objects users invoking services 
shows workitem input output decision connector described 
decisions access surrounding workitem owner role 
flow relates exactly source destination 
decisions 
flows workitems connected input output decisions 
relationships responsible customer participant refer types roles persons play workitem section 
graphical modelling editor role assignments done actor resources page workware relationships traversed short circuited resulting relations person fills role represented 
simplification better matches immediate nature performance indirect relationships model editor provide better support planning reuse resource management 
workitem responsible customer number participants activation management tool management tool provides worklist user interfaces giving access services provided system integrated tools 
section describes semantics workitem lifecycle controlled interfaces 
component function independently enactment engine 
offers automatic support users trigger state transitions coordination services 
metamodel services manifest operations workitem class 
shows interpretation involving states new started 
items put new worklist responsible user defined invariant rule state 
ongoing done item 
items put ongoing worklist responsible user 
suspended signalling pending input order resumed 
time participants may resume 
finished signifying normal completion 
terminated representing abnormal termination deletion workitem 
workitem finished terminated 
items interpreted management interactor 
item gives users access different set coordination services state 
coordination services invoke state changing methods workitem outgoing transitions state define coordination services available 
instance workitem ongoing users may suspend finish terminate 
shows scope interactive model activation fully automated manual schemes 
interactive schemes occupy middle ground extremes 
discussed user involvement reactive triggered software proactive triggered users 
past research shows management tool enables personal organisation sharing information useful enactment support 
scheme demonstrates utility manual model activation 
disadvantage requiring users scheduling status reporting manually included automated coordination support interactive enactment 
full automation reactive user proactive user full manual control involvement involvement management tool 
management tool interactive activation spectrum 
activation interactive workflow enactment workware flow propagated updating status workitems activating flows decision connectors 
management tool left tasks users engine automates number enactment rules 
model shows enactment state transitions workitems states transitions defined management tool shown normal font rules introduced enactment engine printed bold 
comparing diagram see state new split waiting means ready start due pending input flows 
users override rule explicitly declaring item ready started 
items state shown responsible user new list 
ready start 
users explicitly start manually 
items state shown responsible user new list 
rationale requiring manual start workitems 
scheme allows separate tasks really ongoing ones system says ready start 
information important number reasons 
ready task may easily re allocated person started 
items remain ready long time started may point conditions placed parentheses 
triggered actions follow 
syntax follows standard uml object constraint language ocl 
complete uml model include mappings messages operations methods hidden readability 
operation names events triggering transitions refer effect operation 
operation name action triggered transition refers invocation operation 
large backlog person responsible inform allocation decisions 
uml action semantics model distributed concurrent execution behaviour 
noting traditional programming languages specify sequence complicating flexible assignment actions components distributed execution environment uml action lifecycle includes waiting ready states 
addition new states enactment rules connect behaviour workitem inputs outputs input decision activated item goes waiting ready 
suspended item receives flow input restarted 
output decision item receives flows waiting item finishes automatically 
waiting input parent state ongoing ready input parent state ongoing input 
activate ready responsible 
new includes self workitem decomposition child ready start child forall input ready endif child start child start start child forall input ready endif terminate child forall terminate ongoing responsible 
ongoing includes self suspend resume suspended input 
activate terminate child forall terminate output activate output finish terminate child forall terminate finished terminate child forall terminate workitems interpreted enactment engine 
terminated number rules follow breakdown structure 
define children affect parents vice versa 
operational rules generally implemented order ensure children performed parts parents 
basic assumption engine interpretation models users may invoke coordination services violate constraint causing exception 
child item ready parent ready 
child started parent automatically started 
parent started children waiting input flows ready 
child finishes activates flow output parent output received necessary flows parent automatically finishes 
parent terminated withdrawn children terminated 
rules enable users articulate different scenarios breakdown structure want parent finish automatically children finished add flows sub items output decision parent item project 
articulated person responsible wants control scheduling output left input flows project 
note project enactment engine trigger sub items waterfall sequence project gives engine little sequencing left users utilising management interfaces 
workitem lifecycle 
process models different degrees structure 
initial state transition diagram referred enactment phase lifecycle workitem 
planning articulation definition item model represented 
emergent workflows definition enactment intertwined 
plan changes simple state transition rule new workitem added default state waiting parent ongoing input new item enabled defined case new item set ready 
rules mechanisms extending enactment scheme discussed section 
decisions decision connector represents issue resolve regarding flow 
decisions automated resolved users 
position owner decision connector defines user responsible making decision 
detailed model dynamic behaviour decision 
main states activated activated 
reflected boolean attribute activated 
addition states arise interactive nature enactment scheme 
represent situations decision automated human involvement needed 
fallback mechanism decisions added worklist user responsible owner item 
mechanism implements user involvement scheme join decisions problem proceed activate decision 
fork decisions problem alternative choose 
inputs activated activated activate relation uncertain decision pending inputs owner responsible 
ongoing includes self owner finish owner output self activate activate forall activate owner finish owner output self forall activate activate forall activate endif decision pending output selection owner responsible 
ongoing includes self activate activated invariant rules decision derived attributes fork size join size forall activated relation xor exists activated relation fork forall activated relation xor exists activated 
decisions interpreted enactment engine 
activate special decision making form facilitates user interaction individual decisions 
decisions forks xor joins automated 
order model readable defined number derived attributes fork connector multiple output flows join connector multiple input flows required input flows activated engine able automatically decide outputs selected maximum number allowed outputs selected alternative selections concurrent branching 
properties derived structure states surrounding model elements 
enables users easily add remove input output flows concerning connector originally defined join fork 
enable simplification language need separate constructs joins forks increases fluidity process articulation 
addition flow activation actions triggered defines effects decision connector owner workitem 
flow state transition diagram flows depicted 
similar decisions flows go activated activated 
simple case flow activated explicitly user 
addition human intervention enactment engine automates state transition rules defined diagram decisions decision output flow activated output flow activated 
decision activated output flows activated 
target decision activated flow flow violation may occur 
exception model match happening 
just capture exception look flow dependency coordinated awareness engine situation 
flow violation may final state flow exception resolved activation flow origin 
flow may activated flow triggers destination connectors making flow superfluous 
case source decision alternative selected flow activated 
activated activated activate activate activate owner start owner input flow violation activate activate activate activate owner finish 
flows interpreted enactment engine 
shows scope interactive workflow enactment engine activation spectrum 
illustrates different distributions decision making engine users supported depending current state workflow model actions users 
combined enactment semantics explored basic enactment rules associated workitems flows decision connectors look rules interoperate support typical workflow scenarios 
scenarios represented uml interaction sequence diagrams involving users playing roles workitems modelled ob jects 
scenarios illustrate workware activation mechanisms capable handling models varying degrees structure 
automatic decision making fallback decision making full automation reactive user proactive user full manual control involvement involvement opportunistic manual decision making management tool 
workflow enactment tool interactive activation spectrum 
workitem creation start suspend shows fragment interaction user workitem input decision connector input flows 
user creates workitem ready activation input flow 
user suspends item activation input flow causes restart 
diagram simplified number ways 
show user interface components user interacts modelled objects reflects aspects short segment lifecycle typical workitem 
sequence involves just user 
enactment complete model involving multiple users user interfaces worklists modelled objects workitems flows decisions large arrangement way 

interaction user model starting suspending workitem 
workitem completion shows interaction involved starting carrying finishing typical workitem input output flow 
alternative completion scenarios included user decides activate output flow workitem finished output flow automatically invoked task declared finished user 
details regarding happens actual performance represented single example message model 

interaction typical workitem activation cycles 
unstructured workitem collections process enacted scenario software development project 
model parent workitem sub items flows determine sequence 
means users control sequence sub items 
depicted scenario requirements completed design implementation starts performed partially parallel 
order diagram readable decision connectors hidden 
structured workflows 
enactment unstructured workitem collection 
process enacted scenario software development project 
diagram looks sequence signals bit different automated support increased sequence specify design implement triggered enactment engine project automatically finished sub item finished 
flows connectors automatic actions happen left diagram readable follow state diagrams shown earlier chapter detailed interaction scenarios 
dynamic replanning shows variation structured software development scenario 
requirement specification participants decide add separate test workitem implementation 
implementation users discover sufficient testing done part implementation test item terminated 
termination abnormal action result activating flow 
consequently project auto finish situation require responsible user manually verify declare project finished 

enactment structured workflow 

dynamic replanning structured workflow 
metamodelling interactive languages uml conceptual modelling languages specified formal symbolic manner logic notation backus naur form 
past couple years flexibility requirements led development systems allow languages metamodels change 
reflective systems apply graphical notation metamodelling order increase user friendliness 
trend spread uml workflow management languages specified uml class diagram metamodels 
approaches language definition primarily deal syntax articulation 
interactive models interested activation semantics 
added state transition interaction diagrams metamodels 
workflow standardisation efforts state diagrams detail 
approach petri nets integrating metamodelling process modelling 
innovative features workware lead different uml metamodelling interactive enactment users user interface concepts included language models interaction sequences 
partially structured models addition new objects illustrate open evolving nature interactive models 
multiple model interactors need multiple incomplete diagrams reflecting semantics imposed components mechanisms integrating views 
uml tools currently weak area 
presentation incremental enactment engine semantics completeness alongside management semantics 
effort revealed close interdependencies interactors 
instance saw enactment engine increased usability management tool separating new workitems ready waiting 
holistic enactment semantics implies interpretation model element depends elements model 
navigation constructs ocl proved valuable 
browsing relations complex interdependencies easily defined owner responsible ongoing includes self declare item part worklist person responsible 
interaction sequence diagrams illustrate interdependencies model elements typical activation scenarios 
diagrams quickly large simple examples 
consequently aspects models left 
enable kind metamodelling constructive composition complexity reduction simplified view definition interaction sequence diagrams better supported uml modelling tools 
open holistic character semantics difficult define model completely 
instance interdependencies breakdown structure just refer children parents 
influence parent modelled parent state transition diagram diagram object instance 
complete model workitem state transitions model transitions twice actions triggered transition transitions right 
duplication model cumbersome maintain decided model children parents 
uml class state transition diagrams ocl rules worked reasonably metamodelling basic specification 
move instance specific property controlled behaviour class oriented foundation uml problematic 
extended activation semantics enactment semantics workware language enriched number ways 
thesis focuses process aspects models aspects resources products information organisational structures activated 
process domain increase automated support enlarging vocabulary decisions 
decomposed decisions ports apm generalised decision concept workware lost ability model multiple entry points workitem 
action apm multiple input output ports simplified workitems 
special case multiple entry points easily handled decision decomposition shown 

decomposed decision 
decomposition caters complex triggering rules instance regarding logical relations represented decision connectors 
example shown representing rule activated activated trigger trigger 

complex rules automated decision making 
decomposed decision connector introduced facilitate rules 
output flow decision active input activated time inactive 
connector handles escalation pattern invoking process case constraint met 
expect users articulate detailed enactment rules 
cases simpler just decision manually 
aim mechanisms provide powerful constructs allow process experts create reusable process templates higher degrees automation 
parameterised decisions data driven enactment rules allow different paths chosen depending input data 
requires flows carry data values 
workware metametamodel chapter allows flows objects carry user defined properties 
example scheme 
timers age xor 
parameterised decision connector 
timing scheduling workitems important aspects project management 
default properties workitem include due date expected start date 
properties management tool identify delayed tasks separate worklists special symbols 
workware offers constructs allow users model time dependent processes 
timers decisions trigger output flow point time 
timer included class primitive apm 
shows timers absolute relative 
sept absolute timer set calendar time 
days relative timer delayed output 
absolute relative timers 
timers serve multitude purposes including scheduled tasks input decisions timers 
typical examples meetings reporting workitems 
milestones signifying set workitems contributing joint deliverable finished date 
milestones typically major assessment points progress resource consumption project 
template milestone decisions shown 
gathers inputs produces output inputs finished potentially output trigger exception handling milestone delayed 
exception handling corrective actions triggered absence flows connector time 
degree detail put modelling exception handling left user organisations decide 
seen workware offers number standard mechanisms keeping users informed progress workitems detailed exception handling left users discretion 
flows tasks produce deliverable flows items flows delay handling items 
milestone timer exception handling 
case studies surveyed chapter show examples explicit representation processes processes managing seldom articulated 
noted workflow systems serve instruments domination enabling actors control 
part explanation managers reluctant articulate processes eager articulate processes subordinates 
knowledge intensive industries management direct supervision standardisation processes replaced coordination mutual adjustment management coordination integral part performance 
case studies external project chapter discovered management exception handling processes easier articulate generic templates core knowledge intensive tasks 
workitem automation addition coordination management support workflow systems provide means full partial automation atomic workitems instance web services integrated process manner 
apm invoked software tool software agent resources signify action performed entirely external software component 
workware utilises presence resources simplify enactment semantics item start triggers invocation tool sets status ongoing 
fully automated items require human interaction performance automatically started ready finish automatically completion invoked tool service 
articulated adding property workitem question adding flow input connector output connector automatically finishes 
state diagram enactment semantics workitems page cause addition transition ready ongoing conditioned 

partially fully automated items 
reflection user defined activation rules model activation semantics chapter handles multitude different scenarios ranging loosely defined evolving processes completely structured automated ones case studies chapter warns assuming mechanism process enactment complete 
consequently requirements state modelling language semantics able evolve support different interpretations 
subsection looks various ways enabling users primarily process experts extend alter complement activation rules 
extensible state sets step user defined activation semantics allow state sets basic constructs altered 
supported workware metametamodel chapter 
allowing users define new states sufficient manual activation automated support 
rules states reached left defined 
enactment state diagrams document implementation workware components actively execution 
uml virtual machines remedy situation left simpler means 
event condition action eca rules transitions states activation state diagrams directly represented event condition action rules 
adding guard condition state action state rules capture semantics transition 
previous research shown eca rules yields inadequate performance high volume production workflow 
consequently rules utilised control exception handling normal enactment adaptive wms 
emergent knowledge intensive processes scalability problem severe eca rules feasible normal enactment 
emergent workflow treating exceptions evolution rule game infrequent accidents 
enactment policies order utilise eca rules workware need rule editing interface process experts organisation 
users may utilise simple customisation functionality selecting set possible behaviours policies entire processes single elements 
enactment policies provide users simple way configuring semantics model elements 
described policy 
policies attached workitems objects properties 
table shows sample enactment policies representation eca rules ocl syntax 
enactment policy eca rule state ready start children state ongoing child forall input start endif repetitive restart state finished services includes start repetitive new instance state finished services includes clone loop cloning workitem rule input connector activate state activated owner state finished owner clone loop restart existing activate state activated workitem owner setstate ongoing automated items state ongoing finish deontic rules table 
enactment policies 
rule modelling apm supported deontic rule modelling language 
rules syntax trigger condition deontic role actor consequence consequence trigger condition consequence parts rules correspond event condition action eca rules 
deontic operator determines strength rule 
obligatory forbidden recommended discouraged permitted 
deontic operators allow human judgement model interpretation 
deontic operators role rules model elements 
instance sense denote flow dependency obligatory recommended 
flow violation state allowed obligatory flows 
model interpretation deontic operators useful general templates organisational procedures may articulate local commitments process participants 
order support models varying degree structure framework needs reuse deontic operators 
instance default deontic operator specified process applied components 
designation role actor rule applies derived process model 
rule applied workitem default applies responsible person item 
operationally deontic rules activated services refer set services available user interface object 
arrival flow input finished workitem generates new copy iteration item 
alternative way articulating shown 
guiding warning engine cooperation enactment service 
engine guide users working task issue warnings various actors rules violated 
forbidden obligatory rules may cause access privileges revoked 
inconsistencies deviations rule violations general concern applying rules rule violations result violations prevented 
relates nature rules 
formal framework analysing inconsistencies human centred systems consisting real world process model mirroring types inconsistencies domain level inconsistencies domain rule checks drawn registered check notebook violated environment level inconsistencies model longer mirrors real process adequately 
conventional workflow systems avoid domain level inconsistencies 
achieved forcing user follow correct process ensures explicit rules satisfied 
domain level inconsistencies avoided hand hard capture handle lead environment level inconsistency domain inconsistent behaviour modelled workflow 
extra degree freedom emergent workflow offers users may cause new domain level inconsistencies 
hand flexible workflow system increases likelihood capturing human behaviour caused rule violation 
needn done outside box system conventional workflow setting 
inconsistencies avoided enforcement captured system resolved users automatically system 
emergent workflow combined business rule system serve quality control better rigid workflow solutions relying skills workers process standardisation cf 
table page 
human involvement resolution domain inconsistencies means advisory rules applied enforcement paradigm static workflow handles absolute rules 
activation awareness engine order coordinate cooperative need comprehend actions 
comprehension requires information happened available 
cscw community workspace awareness topic research early nineties 
awareness defined having perception knowledge realisation 
dourish bellotti distinguish awareness product process process continuous cycle extracting information environment product state understanding interaction workspace 
awareness lowers overhead working creates new opportunities serendipitous collaboration provides people larger context actions 
awareness information supports collaborative assembly achieve intersubjective comprehension purpose conditions collaboration 
main objectives awareness services help participants comprehend collaboration knowledge level coordinate activities relationship level 
levels closely interrelated 
awareness relates articulation 
articulation overhead extra associated notifying doing information overload emphasised critical factors awareness coordination 
need balance information overload participants needs continuously interpreting meaning context 
mediation contextual meaning awareness information especially challenging 
interactive models useful attacking challenges 
models provide context awareness information making easier filter interpret 
workitems provide context awareness information worklists workware items belonging project group individual 
individual workitems gather information needed performing 
management tool natural candidate integration awareness service awareness information alongside information workitem 
remedies problems associated awareness mechanisms information overload lack context notification messages 
collaborative workitems multiple people assigned atomic workitem worthwhile articulate detailed plan separate responsibilities need cooperate closely 
workflow engine support coordination 
awareness engine hand keeps participants informed shared information facilitating coordination mutual adjustment 
support enhanced awareness mechanism monitors events related documents shared artefacts referenced workitems 
partially structured processes enactment engine handle coordination fully connected workflows 
collections partially structured workflows awareness services help users control 
notified progress status items users informed decisions 
flexible resource allocation wide range techniques proposed flexible allocation organisational resources workitems 
organisations job queues contain workitems need specific personnel resources 
queues may split role queues skill requirements 
solution allows people pick ready tasks requires maintenance organisational role models 
approach shares inflexibility role restrictive systems rigidity vague role definitions inability utilise existing skills due normative organisational roles 
contextual awareness mechanism may better solution personnel allocation problem 
context process definition coupled possibility user customise kind interested competent filtering incoming items user informed 
coordinating interdependent workitems workware process model perceived plan adapted situation hand 
typical exception planned sequence involves early start workitems process model ready opportunistic involvement departs model order speed process 
consider situation 
started item item signalled ready activated flow 
flow enter state flow violation 
case multiple workitems modelled sequential active parallel need coordinated 
users choose remove flow consistency restored 
flow removed new situation arises reinterpreted 
regarded dependency coordinated coordination supported awareness engine enactment engine 
flow activated awareness engine inform actors happens inside vice versa 
means flow channel event notifications 

different interpretations flow depending context 
collaborative planning ongoing ongoing emergent workflow partial evolving model articulates knowledge performed 
project planning awareness engine disseminates articulation events helpful maintaining shared understanding 
coupling workflow awareness services vision collaborative planning extended cover collaboration planning just divide conquer participant takes responsibility part process 
workflow participants notification changes plan sub plans related vital maintaining shared understanding 
awareness semantics enactment flow finishes set ready awareness flow channel event notifications generic awareness model applied facilitate services ware 
model developed 
sees workspace consisting artefacts inhabited actors 
may dependency relationships artefacts actors may participate processing artefacts 
events generated actors artefact 
events relevant artefact alongside artefact 
workware workitems treated artefacts 
added cus waiting ongoing event propagation service artefact dependencies channels events flow 
workware relationships dependencies flow filled document events decomposition 
participation relationships actors artefacts follow responsible participant customer relationships process model 
awareness workspace model just view existing process model extra articulation needed 
awareness service personalised customised adding lenses dependencies 
lens filters events allowing pass 
order reach user event notification travel process structure filtered lenses encounters 
lenses currently defined workware prototype include event type lens filters events certain type read events write events create events document events 
relative time lens filters events older number days 
absolute time lens stops events occurred fixed time 
kind lens created user triggers catch service 
user lens filtering events caused user event list lens removing events listed 
sibling workitems related indirectly parent 
may strongly related flow filter configurations stronger relation increases notification flow 
scheme holistic 
object relationship may part path pair objects influence flow awareness 
consequently addition removal element may potentially influence elements model 
awareness propagation general graph structure easily adapted interactive models similar awareness engine 
awareness semantics flows workware awareness engine utilises process structure inform people contextual manner actions 
doing provides interpretation activation flow concept complements enactment engine 
coordinates flow dependency automated sequencing tasks awareness engine helps users mutually adjust concurrent tasks 
shows interpretation flow awareness enactment engines 
awareness engine handles typical exception basic flow interpretation opportunistic involvement starts receiving flows supposed wait activated 
flow violation state replaced new state flow channel awareness notifications 
activation performed tasks connected flow active simultaneously people working task informed people tasks doing 
real flow violation happens case receiving task flow owner finishes received input origin task 
activated activated activate enabled owner start activate activate join awareness channel owner finish flow violation activate enabled activate activate fork activate 
flow interpreted awareness engine 
model driven access control access control deciding enforcing access perform operations information 
emergent workflow system access control plays vital roles controlling flexibility limiting default full freedom users violate modelled flow change assignments controlling access resources information tools services 
access control policies operating systems repositories typically defined system oriented terms files directories users typical example standard distributed authoring versioning web webdav defines access control policies main components access subjects access objects operations access actions read write execute manage access rights access granted denied negative access privilege valid components object inherited 
component process support system access controller utilise information articulated process models 
information includes works workitems type role information tool resources different items depend decomposition flows 
utilising information access controller support access control policies user oriented model concepts changes model automatically reflected access privileges 
instance person assigned workitem access tools information needed performing 
access controller model interactor activating process models specific purpose complements functionality offered components 
previous research access control workflow environments focuses static systems limited degree adaptive systems 
conventional mechanisms insufficient dynamic workflow environments 
major objective enforce strict privilege policy users allowed role current workitem allows current state 
emergent wms policies need hide may applied 
existing approaches rely static organisational structures workware activates dynamic process structures 
access control policies workware access controller provides mapping modelled objects webdav access control policies 
addition modelled individuals groups subjects recognised system include participants workitem responsible workitem customer workitem corresponding different person role types defined section 
access rights assigned specific role name project manager reviewer 
order structure access control policies introduce concept project includes workitem part single breakdown structure 
project identified root task 
aggregate groups project participants project customers include person fills participant customer roles workitems project 
project responsible person responsible root task project manager 
system open standard user groups units organisational models may structure subjects 
objects users access include information objects documents workitems projects information persons process models 
workitems projects users specific access rights certain aspects objects including description person roles information resources 
detailed policies access level single properties allowing outsiders read name document content 
actions subjects may perform objects principle include tool service defined models 
convenience actions grouped levels add read execute write manage 
add means new objects added existing objects read execute allows read alteration state properties objects 
manage involves right access object 
exception read add access levels hierarchical execute implies read manage implies rights access policies control manage ment tool shows worklists 
secondary effects enactment engine restricted 
finishes workitem item ready user execute privileges item 
usage examples access controller utilised number different 
detailed examples 
controlled flexibility law prototype cf 
section supports varying degrees empowerment attaching access rights decompositions 
workware access controller supports configuration law manner workitem responsible participants write access 
strict workitem performers denied write access execute rights 
strict add allowed sub items person roles 
wide variety schemes supported customer controls workitem model write access responsible negotiate changes 
responsible full control item allowed delegate denied write access responsible role 
workitem person working responsible allowed see items allocated people deny access participant roles read execute access responsible task 
configuration mimics behaviour static workflow systems trying relieve users burden manual coordination 
access control scheme designed meet degrees empowerment full autonomy users centralised control limited user rights 
policies need know need hide defined high level rules inherited 
inheritance implemented reuse dealt detail chapter 
anonymous users cases identity plays specific role hidden participants 
anonymous review processes reviewers know authors vice versa 
virtual enterprises virtual enterprises span organisational boundaries 
involved cooperation partners want hide details regarding ways working 
defining access control policies organisation model support 
cooperation matures formalised mutual trust increases may find useful increase sharing information 
dynamic access control infrastructure general privileges inherited simplifies process 
dynamic access control state workitem changes access rights may need change 
organisation wants prevent early start workitems general particular items decide write execute access active item ready 
dynamic access policies declare finished workitems information objects locked 
rules couple state workitem access control policies enable functionality 
chapter describes dynamic classification scheme supports 
visual representation access rights apm adds lock symbol actions users allowed alter provide scheme visualising complex access rules 
clearly objects current user allowed read hidden visual process model contexts convenient view alter access policies model editor 
visual model provides overview process suitable interface locating unintended security holes users manage rights allowed view model appear users user groups 
different access rights visualised different colour top right icon red read yellow execute green write 
may attach icons actor roles articulate rights people filling roles 
concluding remarks 
visualisation access rights 
workware modelling language combines number different perspectives 
striving simplicity user orientedness taken transformational output starting point 
apm workware include rich set primitives modelling resources item 
organisational material information tool resources modelled 
aspects language action integrated interaction patterns customer performer roles constraints adding details means narrowing scope behaviour role modelling graphical containment represents areas authority responsibility 
system dynamic perspectives emergent behaviour mutual non linear causal relations reflected holistic situated enactment rules 
reuse tried tested techniques support claim interaction framework feasible relevant workflow management 
shown chapter interaction framework guide systems design 
workware prototype current attempts reinterpreting workflow concept include processes emerging structure 
main contributions allow ambiguities models resolve interactively situations arise having resort modelling facilitate dynamic interpretation model elements integrate multiple model interactors complementing enactment engine 
rudimentary aspects system shows number different perspectives integrated simple language 
mappings process models workspace models directory structures enable generic awareness notification access control functionality utilised complicating core language 
reuse interactor policies enactment user interfaces access control awareness core challenge chapter 
chapter reuse second part workware design deals reuse 
model reuse fundamental problem overlooked languages development 
objectoriented languages support syntax inheritance single object classes means inherit specialise compose models fragments objects relationships behaviour included straightforward 
thesis pragmatic approach user requirements chosen 
ad hoc nature reuse seen interactive task seldom fully automated 
role inheritance simplify articulation providing default values users may change 
emphasising uniqueness process workware metametamodel allows local language extensions dynamic classification structures 
models articulated instance level 
motivation chapter number requirements model reuse 
foundation approach outlined lifecycle process model evolution section 
approach user articulation facilitated motivated usefulness activation mechanisms 
impossible view reuse independent articulation activation 
requirements articulation activation kept mind reuse framework 
section number specific needs model reuse including structured template repositories facilitating incremental definition identification selection suitable templates mechanisms generalisation comparison qualitative quantitative analysis description suitable usage context previous experience model representing facilitating reconciliation conflicting perspectives composition templates part ongoing process articulation adaptation 
state art survey chapter showed numerous techniques proposed solve problems combination simple flexible effective users 
particular approaches focus automated reuse semantics making models available resources situated adaptation 
interactive reuse approach better matches contingency knowledge intensive 
pointed number studies knowledge management integrated everyday successful 
current research focus high overhead documentation approaches models especially purpose reuse pushed projects 
approach complemented need driven mechanisms pulled projects 
conventional wisdom regarding software reuse states reuse planned interaction allows need driven reuse models designed meet local problems 
tools commonly process participants today reuse copy paste frequent structured inheritance delegation composition 
aim chapter reuse framework integrates schemes combining strengths 
interactive models degree automation important question 
find single solution fit usage situations customisable framework degree software support adapted availability templates knowledge process participants 
instances templates classes order support local modifications fluent articulation flexible activation emergent workflow models represent instances 
prototype instance mechanism applied workware 
concept template essential 
template initial definition object instance 
template prototype instance mechanisms design template reuse applied ordinary models 
results simple general reuse approach 
fact class concept introduced workware metametamodel purely aim simplify reuse 
scheme basic class just template name 
template may especially designed adapted reuse ordinary model element promoted rank template 
basic constructs modelling language page workitem decision flow person defined basic classes 
specification structure behaviour features defined uniform way instance level 
class features defined template 
instance set properties represented attributes 
attribute name value pair 
attributes objects instances typed order enable flexible modelling typing advisory 
object may alter type time lifecycle 
type object refers class 
attributes types relational refer object simple data values numbers texts dates 
relational attributes encoding associations process modelling language owner source target customer responsible 
metametamodel may look quite complicated large number constructs 
users encounter constructs define language extensions metamodelling 
normal operation user care individual objects attributes 
types needed new attribute defined 
normally classes just selection criteria presenting alternative attribute values users attaching behaviour range objects 
self containment object instances core feature architecture 
multiple meta levels challenging modelling concepts grasp users simple interactive system apply levels possible 
workware object instance data grouped metadata attribute definitions 
infrastructures uml java smalltalk metadata stored higher level class object data describe instance object 
workware instance oriented framework users need worry differences classes instances modelling 
classification method managing templates repository 
determined models constructed 
simplifies local modifications removes conceptual complexity 
aim chapter show workware reuse mechanisms utilise simple framework making flexible powerful complex conventional infrastructures 
extension class generalises specialises emergent classification intension class class defined property expression properties object attribute defined template basic class type class 
workware metametamodel 
type type simple value type workware implementation instances keep pointer basic class type property 
type relation originally inherited template instance creation may altered 
addition basic classes generalisations specialisations defined incrementally intension 
specialisations property defined classes defined selecting class defining criteria property values members new subclass fulfil 
extension 
superclass defined listing classes generalises 
schemes originally part framework 
added evident meet practical requirements 
instance classification intension allows separate fork connectors join connectors discussed preceding chapter retaining basic class connectors 
separation join fork needed implementation interactive enactment semantics defined section 
generalisation extension added common properties behaviour user interface components defined range similar classes 
pure instance frameworks classes 
conceptually cleanest way expressing classes classes 
define classes listing properties required membership intension dynamically scan objects see fulfilled requirements 
extensional sets defined explicitly listing member objects 
conceptually correct scheme scalable pragmatic chosen 
scanning object system see meet intensional requirements computationally efficient 
aiming support users incrementally building classification structures offer mechanisms refine existing hierarchies adding specialisations generalisations 
design direct result viewing modelling language evolving incomplete semi formal 
extensional generalisation simple attach behaviour wide range different objects objects event logging enabled 
convenient level basic classes level instances 
basic classes represent essential features object seldom relevant change type object workitem person 
ability attach behaviour intensional subclasses classification structures rigid rendering benefits theoretical approach relevant customisation 
adaptive emergent workflow mutation discussed section approaches adaptive workflow assumption models define workflow classes schemas instances 
researchers claim interactive modelling process participants feasible ad hoc changes occur handled ordinary users updating models uncontrolled way 
claim view workflow class modelling difficult time consuming requires expert knowledge possessed average user 
workware approach circumvents problems hardwiring process definition class level 
basic objective support planning articulation coordination performance unique workitem instances 
enable modelling instances classes 
doing remove great complexity having look past instances class modify model 
claimed impossibility ad hoc modelling stem paradigm separate modelling class definition 
fundamental problem process support technologies 
case studies chapter chapter support claim process modelling users feasible 
workware class template changes automatically update running instances 
logical consequence treating instance unique 
sections describe propagation services update instances generic changes 
dynamic changes interactively controlled mandatory step 
key feature workware require consistency instance template 
assumed different template resource adaptation starting point creating new instances summarises difference workware metametamodel class oriented approaches dominate static adaptive workflow management systems 
shows conventional approaches linear relationship class instance interactive approaches supports interplay general local facilitating learning improvement anchored practice 
access control may course prevent users making local changes enforcing conventional class instance relationships cf 
section 
class instantiation instance instantiation class dynamic change class affects instance instance class template instance static workflow adaptive workflow emergent workflow inheritance instantiation template copy change propagation reuse policies reuse copy 
relationships classes instances 
harvesting instance template section describes dynamic changes reused workware models enabling incremental model definition 
inheritance conventionally defined reuse coupled specialisation 
enactment specialisation relationships played part reuse crucial 
instance process handbook uses specialisation model repository navigation selection incremental definition templates 
imply specialisation kind relationship relevant reuse 
handbook utilises de re composition 
similarly software engineers discovered reuse mechanisms involving delegation complement inheritance 
access control mechanisms support inheritance decomposition hierarchies 
roles powerful reuse structures history reflected persons assignments tasks 
personal preferences reusable trace 
reuse strategies rely solely conventional inheritance allows reuse model structure useful 
represents holistic approach elements may recursively contribute definition 
language extensions reuse extensions modelling language order support reuse mechanisms workware 
changes defined 
vocabulary enables define control semantics instance creation dynamic change propagation templates instances 
instance attributes id type name operations clone template 
language extensions reuse 
generic attributes objects include unique identifier user oriented name type object 
object connection template object originally cloned 
template ordinary object 
template role object potentially assigned 
shows new methods clone 
returns true item declared template type 
method clone generates copy object objects existence depends input output decision connectors workitem 
workitems flows decisions resources roles process model elements inherit attributes associations defined 
dynamic change propagation far seen workware implements classification instance creation 
final component foundation interactive reuse manages dynamic change 
problem deal change general class affect objects exist change occurs 
delegation lookup schemes common solutions problem 
runtime requests inherited features delegated element defines inheritance hierarchy 
schemes allow incremental definition feature defined place 
multiple inheritance requires defined lookup methods case conflicting definitions features 
interactive instance models face different usage environment conventional oo frameworks 
general dynamic change occurs far frequently local modifications 
order ensure flexibility cancellation inheritance instances subclasses may remove inherited features required 
discussed dimensions process models may utilised reuse resulting massively multiple inheritance 
interactive interpretation incomplete semi formal models requires human involvement lookup process 
environments delegation lookup approaches suitable 
emphasising simplicity situatedness approach self contained instances feature definitions stored locally 
general changes propagated instances apply 
model may incomplete human decision making may required determining scope dynamic change 
human involvement easier time change time access 
change propagation pre computation lookup results 
pre computation efficient update rate lower access rate 
expect case general changes interactive models 
replication complicates general change 
section discuss delegation reuse copy object copy help decrease replication 
change propagation managed observer pattern implemented java standard interface 
object subscribes notifications change events objects inherits 
scheme works recursively inheritance hierarchy template copies changes superclass change notifications triggered sent subclass observers 
changes propagated old value corresponds value currently observer item property redefined locally 
scheme supports multiple inheritance latest change wins conflicts priority policies defined 
design easily generalised relationship objects reason establishing change propagation inheritance 
look reuse policies control propagation reusable aspects different relations utilising design 
reusable aspects reuse approach modular modules reused called aspects 
aspect group related features 
workware models features linked objects attribute values 
terms fit previous aspect oriented systems multi dimensional workflow models 
workware modelling language contains aspects related workitems properties attribute values describe workitem object 
workflow interface input output decision connectors input output flows 
decomposition breakdown structure sub items interconnection network flows decision connectors 
resource roles various objects tools persons needed order perform workitem represents 
policies mechanism generic capability software component policy defines capability 
connection interactive model policies sets rules preferences control activation model fragments 
policies model elements reusable 
enactment awareness access control user interface reuse policies typical examples 
basic aspects defined current language users may add new aspects included general list metamodelling 
reusable framework 
new aspects automatically defined relational attribute children gives decomposition type relational attributes persons associated workitem type policies access control policies 
aspects access control cf 
section 
scheme hierarchy aspects object way sets related features individual attributes 
reuse policies vocabulary needed defining flexible reuse strategies defined 
addition aspect policy primary concept 
policy customisation specification model interactor 
reuse policy reuse tool 
defines aspects propagated model structure 
policy applies object policies reusable propagated items reuse policies reuse policies 
aspect reuse policy model element object relation applies reuse reuse policy classification specialisation attribute 
constructs flexible model reuse 
reuse policy specifies object applies relation propagates aspect reused link 
policy attributes control priority policy compared aspect cloned just deep shallow copy 
framework allows instances classes object reuse policies 
reuse policies basic classes attached template extensional intensional classes defined metaobjects 
specialisation relation classes 
automatically computed class definitions 
workware models reuse workitem objects classes important 
workitems classification specialisation decomposition attribute children flows attributes resource roles attributes type person tool document important relations reuse occurs 
addition workitem attributes decomposition interfaces policies enactment access control user interface customisation awareness propagation reused 
subsections look aspect reused relations 
discussion guided reuse rules existing process support environments requirements uncovered workware modelling language 
set workitem relations relevant reuse summarised 
class membership specialisation parent input flows item output flows resources roles children decomposition user defined attributes 
inheritance relations single workitem 
classification specialisation reuse described section specialisation inheritance process models established reuse method 
different specialisation schemes proposed utilising object oriented constructs represent dynamic behaviour 
transformational models generalisations unions intersections sets behaviour subclasses 
examples specialisation typically utilised reuse process models decompositions hierarchy clearly role play reuse aspects 
workitems particular class write presentation allocated specific user interface configuration emphasise particular needs tasks 
default access rights presentation file defined class level 
enactment policies components model workitem item invoked software tool typically shared items class write specialised write presentation items 
higher level different types projects require different access enactment policies may special rules apply projects specific customers 
order facilitate recursive inheritance classes configured reuse reuse policies specialisation relations 
due reflection users specify top node inheritance tree automatically reused subclasses 
multiple inheritance allowed managed reuse policies allow users define aspects inherited specialisation relation 
write presentation item top secret item inherit user interface enactment policies access control policies 
priority attributes order reuse policies case multiple inheritance conflicts 
decomposition structures reuse discussed standard access control mechanisms utilise inheritance decomposition structures 
user access directory file system default access files inside directory 
similarly utilise decomposition inheritance define enactment policies project reuse recursive children links apply workitems project overridden local policies 
addition enabling general policies projects packages decomposition inheritance role resource management 
resource decompositions organisations departments information objects parts suitable structures reusing access control policies 
reuse decomposition hierarchies important cases reuse features added part 
relevant policy resource signature parent workitem include roles sub items 
supported bottom reuse parent links 
resource assignment reuse workware reuse policies allow user communities deal trade offs integration personal preferences group organisational process specific configurations 
customised policies reused adapted distributed users framework support social processes tailoring spreading local innovations formal informal networks 
utilising filled links reuse attached person objects model applied workitems individual participates 
multiple people conflicting preferences cooperate larger tasks reuse policies allow users articulate result negotiations regarding preferences policies applied joint 
users may articulate preferred ways working personal process templates enactment policies normally treat deadlines requires response met system notify workitems delayed 
primary motivation articulating policies get useful support system fact assumptions explicit enable users understand expectations collaboration 
skill dependent procedures allow organisations benefit personalisation 
recognising experts novices different needs different process models selected allocated workitem 
novices may need detailed description experts freedom subjected monitoring 
harder problems novices may required consult expert start 
reuse flow flows control sequence enactment represent dependencies coordinated awareness may carry information resources shared workspaces resource brokers 
interesting potential reuse flows context preserving sequence 
modelling separate resource signatures workitem roles propagated flows steps apply resources 
changes signature performance workitem immediately propagated including added documents policy simplifies articulation cases tight collaboration needed structured process wants familiar context process 
case studies encountered need administrative procedures associated project proposals 
property controlled policies property assigned object workware model utilised control reuse 
classification intension defines classes members objects possess set properties 
enables attach enactment policies properties 
properties denoting vagueness uncertainty am quite sure add enactment engine apply human involvement items property saying fully specified 
likewise workitem labelled urgent apply different rules items 
section contains number examples enactment policies associated workitems properties repetitive 
mapping parameterised reuse reuse framework defined say way reused aspects applied descendant 
default direct mapping assumed aspects appear way target source reuse link 
circumstances rule meet requirements 
order workware behave action workflow comes person roles decompositions define reuse policy person responsible parent workitem customer sub item self customer parent responsible kind reuse policy requires mapping definition connects reused feature source feature target 
parameterisation especially relevant reuse property values 
instance generic project model contains workitem writing report project name specified self name write experience report parent name saw previous chapter uml object constraint language suitable expressing interdependencies 
delegation copy workware represents relationships attributes pointing objects 
inheriting relationships faced choice object copy 
dependent objects resource roles input output decisions workitem copied alongside workitem contains 
independent objects interactor policies actual resources filling roles replicated 
framework supports solutions lets users decide context 
general rules defined reused cases local context influences method applied 
instance cases require recursive deep copy process model just need shallow copy top level process 
interactor policies customise behaviour model elements modifying elements 
architecture separates syntax semantics 
delegating control semantics policy objects dynamically explicitly articulating binding model data behaviour flexibility ensured 
copying interactor policies replicating policy objects workware increases manageability system configurations 
reuse policies model objects attribute values may inherited 
instance default rule defined reuse policies policies intensional subclass reuse policies shallow copy 
combination problem multi dimensional inheritance multiple inheritance problematic inheritance structure complex unmanageable 
called spaghetti inheritance 
software engineering aspect oriented programming aop aims manage code complexity reuse evolution structuring code separation concerns 
concern implemented orthogonal aspect crosscut class hierarchies implementing similar functionality number classes 
aspects constitute structure reuse independent specialisation hierarchies dominant decomposition structures code 
programming typical aspects deal security memory management resource sharing dynamic business rules error exception handling 
workware interactor implements aspect 
aspect orientation reflects fact software problems multidimensional holistic 
principle requisite variety solutions model structures multi dimensional 
attempting bring order structure software program social organisations design systems models reflect complexity environment 
approach demands interaction articulation activation models 
closed system problem automatically ensuring inheritance works correctly completely important users involved model interpretation correct false assumptions software 
develop tools facilitate user understanding control process model inheritance core problem topic rest chapter 
process knowledge management interactor workware reuse scheme addresses challenges wide variety processes roles users different knowledge experience 
ordinary users concerned getting done probably prefer reuse copying template model fragment typically workitem decomposition 
additional benefits propagation instantiation complicate helps 
project managers opportunity define local standards repetitive tasks administration reporting 
may utilise reuse features simplify modelling project tasks sharing resource signatures workitems 
process experts analysts model standard procedures best practices utilise propagation features sure instances follow updated procedure 
width usage spectrum depicted 
full propagation class instance full automation centralised control partial propagation various relations organisational standards best practices copy project templates project level reuse copy existing model template full manual control users 
model reuse tool supporting varying degrees 
user interaction reuse reuse framework primarily intended novice users project participants may encounter situations defining new workitem users select set available templates 
may choose simply copy existing object 
users may harvest personal templates save template service 
default values provided new workitems defined reuse policies context item placed 
instance default responsible new items create responsible parent item default customer new item 
project policies enactment access control user interfaces automatically applied new items 
reuse service ask users change propagation occur add policies user selects don ask option 
knowledge managers process experts designated super users customise reuse 
provision template reuse policies typical scenarios simplify job especially early phases 
subsections explore different means making reuse customisation straightforward 
reuse followed appropriation template new environment adaptation extension 
interactive model aim reuse provide complete solution simplify articulation providing useful starting points 
organisational policies process knowledge management organisational control knowledge management central reasons process model reuse 
combining reuse class instance restrictive access control organisations customise workware function conventional wms 
core benefits workware lie ability support organic decentralised organisational structures 
allows organisations assign different enactment access control user interface policies different types tasks projects classification specialisation properties 
assign different rules different employees allowing experienced workers lot leeway requiring personnel training follow elaborate procedures 
reuse reuse policies key mechanism support organisational policies 
allows organisation define global defaults 
processes reuse way attacking multitude challenges involved process model reuse look involved 
process model lifecycle section provides framework investigation reuse processes 
steps workitems involved reuse creation new model element existing object possibly including identification candidate templates selection change propagation reuse policies template management metamodelling defining vocabulary articulation harvesting local innovations topic subsection 
model element creation model element workitem created copies default properties components policies template 
member classes template 
adaptation alteration properties policies new object customised 
adaptation new reuse policies may activated workitem placed breakdown structure may inherit features new parent 
default reuse links may broken alteration property remove object intensionally defined classes 
implies users great deal customisation simply articulating properties new object caring implementation details follows 
change propagation principle objects unique self contained default interpretation reuse policies aspects copied creation shared lifetime objects 
reuse policy defined aspects propagated link policy applies long aspect changed dependent object 
users may explicitly declare particular change propagated relation 
instance user adds property object choose number different scopes change object default objects class object template objects classes object member components object decomposition objects part objects current user role workitems object follows precedes flow 
user involvement able customise change propagation individual case 
template management reuse framework provides number means maintaining structuring large template repositories 
reuse links classification specialisation de composition resource allocation flow act structuring mechanisms set templates 
personal templates separated group project organisational ones 
expect extensive change propagation template repositories local models 
metamodelling metamodelling implies addition removal changes set available language primitives 
classes constitute vocabulary process model articulation 
framework facilitates incremental metamodelling users define new classes existing ones simply copying template making necessary changes 
templates instances corresponds metamodelling example metamodelling uses means ordinary modelling 
users want attach behaviour groups objects defined class may utilise mechanisms specialisation intension properties generalisation extension explicitly selecting subclasses set available classes 
constructs relate classes specialisation hierarchy changes aspect class cases automatically propagated subclasses 
metamodelling may take place locally instance model meet situated requirements 
changes general lasting nature harvested included template repository 
harvesting reuse processes involved harvesting include cf 
page generalise instance model template reset dynamic properties state analyse evaluate classify templates relation trace utilise model evolution histories gain deeper understanding 
reuse processes discussed steps harvesting carried interactively 
instant generalisation transformation instance template partially automated 
enactment metamodels section shows initial states different model elements straightforward reset state model fragment resetting components 
aspects difficult manage resources cases allocation removed cases preserved template 
depends scope template 
personal user may want keep default responsible remove participants 
project level templates allocation workitem roles project roles may kept allocation individual performers removed 
organisational templates basic assumption may roles vacant 
similarly information resources input cases kept part template information objects produced item replaced vacant role 
granularity template shallow deep copy 
talking single workitem template decomposition 
decomposition hierarchy structures large process models fragments suitable reuse 
parameterisation actual values object instance replaced parameterisation rules 
utilise natural language processing deduce connections property values 
examples see full automation instance generalisation seldom feasible 
services mentioned offered user interface harvesting 
note instant generalisation needed reuse 
reuse default solution simple ordinary users 
evolution traces history instance model contains wealth input harvesting template model components originally 
input classification process model default regarded specialisation 
additions removals changes part local articulation 
information useful describing specific aspects unique new template 
interactive model transformation fundamentally harvesting reuse seen model transformations 
acknowledged model transformations seldom fully automated 
interaction perspective suitable framework integrating transformation tech niques 
interaction bridges gap fully automated fully manual transformation 
perspective applies problem model transformation illustrated 
model input model output automatic transformation complete mapping rules model input model output flexible automation model input model output interaction automated manual mapping steps model input model output explicit mapping instance level model input model output manual transformation implicit mapping 
spectrum fully automated fully manual transformation 
shows varying degrees transformation automation full 
find various forms interactive transformation support offered software tools user influences mapping decisions 
reuse input model template output model instance model contextualised fit local environment 
harvesting input original instance model output new updated template 
fully manual transformation means tool offers support capturing mappings model elements different views 
simple automated support add explicit capture relationships enabling reuse input altered 
simplest form interactive transformation define rules typical mappings class level case modelled number interaction sequence diagrams 
degree automation add services automatically perform mappings diagram rely manual transformations model fragments 
users may override default mappings provided tool 
final form interaction involves tool controls transformation resolving incompleteness asking users 
flexible automation means transformation fully automated users offered rich set modelling constructs properties parameters stereotypes control mappings 
inspecting outcome users adjust input model get want 
practical utility framework includes integration variety perspectives model transformation illustrating complement 
ability handle transformations incomplete models incomplete mapping rules human involvement transformation process 
discussing different requirements different applications model transformation ranging formal specification full automation simple informal flexibility manual transformation 
trade offs simplicity automation central 
discussing different transformation techniques scope interaction spectrum pointing directions development adaptation existing techniques increase scope 
utilising enactment engine support reuse look processes reuse integrated 
reuse harvesting involves number interactively controlled steps articulated process templates reused adapted activated 

process model reuse 
models depict workitems information resource roles templates instances template repository 
instantiated models populated persons 
provide overview steps involved typical reuse harvesting processes detailed decomposition specialised tool support services step needed 
approach yield number benefits models guide novice users necessary steps reuse harvesting modelled just ordinary workitems conceptual gap primary processes enacted flexibility normal processes customised problem hand 
process model harvesting 
making reuse decisions see specialisation hierarchy different kinds research project templates 
specialisation relations articulated xor decisions 
implies step hierarchy users select alternatives 
leaf node reached user find available specialisations useful template selected project hand 
depending template users may step select templates sub items template 
way model template browsing process handbook series selection decisions 
specific tools discussions available support selection process 
decisions captured trace reuse process starting point classifying resulting model instance users want add template repository 
way workware able support growing repository minimising extra effort required users classification 
template specialisation hierarchy reuse selection decisions 
summary chapter described design interactive tool process model reuse aimed integrating simple services novices sophisticated support designated pkm groups experts 
main features simple instance oriented metametamodel mechanisms incremental classification intension extension customisable inheritance framework modelled link reuse harvesting supported just ordinary 
details techniques chapters 
chapter interactive modelling techniques chapter generalises designs earlier 
identifies techniques interactive modelling relevant outside particular area process models 
instance modelling interactive activation semantic holism explicit representation decisions highlighted 
discussed chapter active interactive models identified major direction research 
addition process support wide variety interactive models appearing research literature product models cooperation support 
conceptual models database document management retrieval 
enterprise process models document management 
dynamic ontologies deduction inference 
multimedia classification retrieval image video speech 
social network models making managing contacts 
organisational structure models access control 
conversations visualised order gain overview understanding 
examples represent separate areas research approach interaction evolving incomplete models creates common concerns 
main objective thesis show interactive process models support knowledge intensive project conceptualisation requirements chapter apply types interactive models 
instance modelling local modifications workware supports local modifications instance modelling 
scheme limits scope change place local situation removing complexity prevented modelling users class level 
instance modelling prerequisite establishing immediate connection interactive model domain represents 
shown parsons modelling framework instances removes problems schema evolution integration interoperability 
framework chapter complements parsons incremental classification dynamic change propagation preserving benefits class oriented approaches 
design specific process models 
reuse policies control sharing aspects modelled associations applied structured model 
pointed scheme generalisation conventional inheritance mechanisms applied wide range modelling languages 
examples situations extended functionality reuse framework useful organisational model rules manager access subordinates access reuse reporting hierarchy 
product model relationship replaced different components transitive symmetric 
transitive relations reused replaced replaced relationship reused replaced 
relations contextual replaced product relation may hold products 
semantic holism priority attributes reuse policies allow problems captured 
concept model ontology synonyms homonyms typical relationships reuse 
document contains term user searching synonym term document may included search result reuse synonym relation enabled 
opposite true documents contain search term meaning term different homonyms 
argued mass production products services require level local flexibility offered instance modelling 
hand large number cases flexibility needed product design 
manufacturing industries mass customisation involves assembly different components product instance 
possible represent wide variety customisation options class hierarchy multiple inheritance size model difficult maintain 
number leaf classes equal product number options customisable feature 
instance modelling predefined set available properties components require sum customisation options represented property primitives 
framework object instances properties simplifies languages 
exception handling interactive instance models enable exceptions built right time models activated 
compared completely prescribed models greater number exceptions captured managed due learning participants 
capturing exceptions important knowledge management increases accuracy model 
instance modelling facilitate exception handling perspectives outlined strong miller general overview section 
exceptions unpredictable random events create need human interpretation models situation arise 
unpredictable events occur time activation close integration articulation activation needed 
overriding expected behaviour models users contribute articulation unpredicted events 
example decides start workitem early faced delays preceding items 
bernstein shows examples reuse mechanisms utilised find alternative solutions face exceptions strike airport workers forces project participants look means transportation 
exceptions normal parts process flexibility degree anticipated predefined model templates 
example new items process product components added dynamically changing user requirements software engineering project 
examples illustrate different degrees exception handling facilitated interactive models simple exceptions rescheduling handled manual activation exceptions far reaching effects may lead ad hoc articulation templates provide alternative solutions 
allowing model reused set alternatives includes previously developed solutions just recognised promoted organisational knowledge management 
final perspective exceptions errors represents situations template modified experiences captured instance model 
handled harvesting process outlined section 
unpredictable events normal variation errors different perspectives exceptions constitute taxonomy classify events 
difficult separate errors local unpredictable events variation just refers events established exception handling mechanisms 
perspective interactive models separate exceptions categories 
exceptions articulated prior occurrence tolerated activation mechanisms model interactors changes local model 
exceptions articulated local model alternative solutions alternative workflow paths product configurations 
exceptions included local model templates exists handling 
exceptions articulated prior occurrence require changes local model 
errors cause changes templates 
categories ordered expected frequency occurrence 
depicts exception levels left 
cases item followed xor model selection modelled directly part local process model selection modelled alternative templates item similar specialisation hierarchy 

equivalent models exception levels 
models strengths weaknesses 
model shows alternatives straightforward decision model appears simpler especially selection automated 
main point language allows users handle exceptions uniform way making decisions 
reuse template selection activation workflow routing integrated 
decision making elaborated section 
discussion description exception handling information systems general 
exceptions may occur frequently process product models concept social network organisation models discussion chapter argue models immersed day day practice faced exceptions 
explicit representation decisions explicit representation decisions regarding flow adjustments apm language order suitable interactive enactment 
previous chapter saw specialisation hierarchies process templates reflect reuse decisions 
section explore cases technique facilitates interactive activation 
propose decision modelling general technique converting conventional languages interactive ones 
reuse decisions shows reuse decisions alternative templates specialisation hierarchy 
relation decisions templates hierarchy called candidate various templates candidates filling role local instance model 
specialisation hierarchy decisions modelled xor decisions users select candidates 
decomposition relations breakdown structure hand find decisions select template select workitem decomposition including components 
level sub item alternative candidate templates may exist 
process handbook supports selection process 
workware dimensions reuse integrated decision construct simplifying framework increasing flexibility allowing relations xor 
workware adds process perspective 
process template model local process unfolding sequence reuse decisions selection template models finer levels detail adaptation adding removing model elements 
elements may template specialisation hierarchies 
representing process capture current state reuse decision making 
decisions need start project selection candidate templates postponed right time items activated 
framework far flexible full template copy approaches 
design special process models 
reuse product structures organisational models conceptualisations handled way 
especially useful structures evolve operational product models design organisation structure models reorganisation dynamic domain ontologies 
explicitly modelled reuse decisions create opportunities automated selection templates properties current model 
instance selection detailed procedures automatically depending skill levels persons allocated perform 
product models dependencies components environment utilised automatic component selection 
instance product placed outdoors non ma chosen 
complex multi dimensional selection tasks design simple hierarchies alternatives suffice 
interplay aspects demands multiple overlapping evolving structures 
resource allocation decisions decision tree involved template selection parallel resource allocation 
tools personnel information material objects selected number candidate role fillers 
cases allocation decisions initial process modelling 
decisions personnel allocation contextual resolved runtime 
shows fragments organisation model 
sintef number institutes shown 
institute departments departments telecom informatics institute shown departments may groups systems technology cscw hci shown 
employees role group 
shows default resource allocation sintef personnel external project 
cscw group participating project people group play roles project 
model activated candidate relations visualised thicker lines selected 
inter organisational projects yields number benefits common organisational model reused 
placed decision making context organisational units decisions 
partners see people collaborate located get overview rest organisation capabilities 
workitem assigned sintef context model default interpreted people sintef allocated external 
achieved reuse model items inside project 
final assignment workitem represented selecting activated candidates 
selection deactivates candidates chosen leaving allocated personnel 
case exceptions project needs expertise possessed allocated people time required model provides overview alternative resources 
instance hci group involved requirement specification systems technology group called solve technical problems 
exceptions handled activating candidate relationships 
policies personnel allocation rely organisational hierarchies manager responsible allocation employees reporting 
organisational model reflects making local colleagues alternatives nearest level 
exceptions resource allocation treated backtracking decision steps organisation hierarchy 
structure useful defining resource allocation policies rights assign persons kind 
types resources may allocated decision trees 
software tools personal preferences important 
objective workitem produce web page html editor tool apply selected preferences person responsible 
implies predefined decision tree regarding software tools preferences individual reused personnel resource allocation relationships 
user interface defining preferences dynamically generated available alternatives 
similar solutions may applied managing selecting information resources document templates 

organisational model allocation decisions particular project 
composite decisions rooted multi layered models candidates easy limit user interface decision making current level 
instance new task allocated sintef user interface list candidate individuals users select 
addition button widening scope candidates moving layer time backtracking latest decision included 
allocation decision result just attribute responsible rgensen workitem question 
rich models need result overly complex user interfaces 
product design decisions far seen process organisation tool information structures activated decision constructs 
products different 
design production maintenance selections alternative components various exceptions arise requires current selection re assessed 
explicit representation decisions role product modelling 
exemplified existence tools capturing design rationale decision processes information systems engineering cf 
section 
decisions classification concept ontologies gulla utilise concept models document classification retrieval 
document classification involves tagging documents metadata keywords easily retrieved 
classification semi automatic natural language processing component selects candidate keywords text 
users add new keywords remove fit add specialised terms 
classification seen decision process utilises concept model 
specialisation relations treated decisions represents synonyms antonyms homonyms modelled xor decisions 
user interface adaptation tailoring decisions alternative configurations user interfaces constitute domain decision modelling play part 
user interface consists number components 
containers include components 
may support user interface customisation combination container content xor alternative components decisions tree 
workware presents model content customisable user interfaces 
list interface may include container object containing component attribute 
user interface customisation process selection components attribute 
example implemented chapter 
decision making processes underlying examples discussed section common model decision making process captured 
model simple capture human social complexities arriving decision 
model results structures similar decision trees long history management computer science 
briefly summarised decision making process captured elements modular decision object include states 
decision output candidate relations active 

candidates identified output candidates active decision final decision object activated 
states compatible state transition diagram workflow decisions page 

decision decision object selected output candidate activated 
step causes state selected candidates set activated 
decision previous decisions path leading may marked activated 

backtracking may occur 
corresponds increasing scope alternatives undoing previous decision 
backtracking needed exception handling 
resource allocation template selection decisions active candidate relationship comes activated decision connector treated filled relationship resource role 
discussion section rules decomposition timers metamodelling decision automation generalised workflow decisions kinds decisions 
possible go step model decision making processes workware pml 
captured decomposing decision process workitems simply including workitems part decision graph tree 
typical examples include resource allocation workitems product design workitems 
semantic holism gap real virtual phenomena representations fundamental problem computer science :10.1.1.19.5902
situated contingent uncertain open complex social reality hard capture formal computerised models 
discussion research methodologies appendix points similar gap reflective practice linear formal models science 
observe goes system causal relations appears uncertain circular non linear 
chapter saw problems means limited scientific models 
outsiders articulation processes capture complexities actual performance 
section shows limitations stem conventional notion atomic semantics model element defined 
semantic holism proposed making computerised representations user oriented 
semantic holism meaning model element may depend elements model 
concept underlies modelling techniques proposed thesis 
semantic holism quite new computer science start exploration roots 
semantic holism philosophy linguistics informatics analytic philosophy challenges understanding real world talk spurred development semantic holism 
routledge encyclopedia philosophy defines semantic mental holism doctrine identity belief content meaning sentence expresses determined place web beliefs sentences comprising theory group theories 
determines meaning content terms small parts web defines elements independently rest web 
claims sentences meaning independently relations sentences beliefs 
argued holism number weaknesses generalisation difficult sentences fully understood outside context 
difficult multiple theories share sentences beliefs meaning beliefs contextualised theory logical reasoning agreement translation difficult semantics unstable change attitude sentence change meaning terms contained 
called instability thesis 
arguments met replacing dichotomy agreement disagreement gradient similarity meaning 
holistic perspective degree similarity meaning multiple dimensions 
factor theory interesting approach 
meaning sentence consists internal holistic factor external referential factor relates terms real world entities 
proposes moderate version holism avoid instability 
framework mapping beliefs meaning sentence 
implies change beliefs potentially alter meaning sentence belief change need affect meaning 
semantic holism evident number areas 
social construction meaning communities practice emphasise local meaning terms inside community role boundary objects cross community relations 
boundary objects common identity communities specific local meaning inside community 
boundary objects reflect factor theory 
psychology teaches conceptualisations arise individual sensory perceptions emerges history individual experiences 
biology ecosystems genomes described holistic terms 
modelling languages formal semi formal atomic semantics dominate 
typically tries identify model elements clearly defined interface captures element relations environment 
constructive approach results division problem smaller sub problems parts solved 
holism challenges feasibility constructive approach faced messy complex realities 
interactive models immersed practice especially vulnerable critique 
aspects holism conventional languages 
inheritance causes meaning element subclass depend elements superclasses 
reuse framework chapter goes step direction semantic holism enabling inheritance links 
semantic holism processes illustrate semantic holism simple process example 
shows model process step write project application carried research scientist 
order improve quality proposals limit legal liabilities organisation question decided manager review applications 
new procedure depicted 
interpreting models atomic semantics claim task writing application changed definition interface remains 
hand interpret models holistic perspective semantics writing workitem altered put new context 

simple process writing project application 

revised process involving additional review 
holistic interpretation better match view human actors 
application write go directly research council internal review influences way application written 
instance complete application days deadline council order allow time review 
may choose discuss application manager sure understands accept sure include details manager expects 
tacit dependencies extend direct neighbour elements 
model revised decomposing review sub items assess budget performed finance director assess risks performed head department 
sub items internal review application due encapsulation affect write project application semantic holism allows 
reflects accurately interpretation procedure people involved 
know nowadays discuss application finance director submitting 
conventional automated interpretation model workflow system follow atomic semantics 
focused relieving users burden coordination systems discriminate identical workitems put different contexts 
automation perspective beneficial divide process steps defined interfaces capturing interdependencies 
human perspective information context crucial sense making motivation coor 
model capture may relevant semantic holism gives richer accurate interpretation model represents 

revised model project proposal review 
semantic holism simplifies model articulation semantic holism closely reflect meaning natural language formal atomic approaches 
reflected functional grammar fg captures meaning natural language statements structured way 
fg sentence number elements contributing different aspects meaning sentence predicates denote entities properties relationships 
predicates semantic functions sentences agent force processed state possessor goal argument 
predications instantiate predicates spatiotemporal location location time duration frequency 
may describe participants means manner consequence purpose motivation cause explanation polarity negative positive tense past epistemic certain possible impossible deontic modality obligatory permissible forbidden 
propositional content adds modalities subjective evidential objective attitudes personal evaluations statement 
clauses denoting illocutionary speech acts implied statement declarative interrogative imperative pragmatic functions relating process communication 
meaning sentence expressed combination elements meaning element depends sentence holism 
fg deals inter sentence relationships discourse analysis rhetorical structures 
referents predicates rely sentences resolved 
research klein note translation language requires holistic understanding sentences texts cultural context 
ric ur describes literature creating imaginary world expresses meaning connotation denotation 
communication establish relations worlds sender receiver 
small groups interactive way communication establishes relations 
way broadcasting relies established conventions shared reality common culture 
reality observe natural language communication clear holistic features 
semantic holism promising strategy human oriented modelling languages 
combining meaning different terms clauses users articulate nuance knowledge atomic formalisms 
adding removing parts sentence flexibility ambiguity uncertainty captured 
natural language just tens letters symbols express far knowledge uml constructs 
degree structure formalism needed automation support learn lot natural language comes increasing efficiency modelling languages 
section investigate techniques languages holistic 
limited classification simplify modelling language limiting classification primitives design principle workware inherited apm 
languages construct represents unit workitem action 
workflow management systems exist wide variety concepts units 
instance wfmc standard includes variants page process non atomic class concept activity atomic class concept specialised manual activities automated activities process instance activity instance item instances manual activities invoked application instances automated activities 
large vocabulary useful order create precise standard process definition interchange 
modelling language business users unnecessarily complex 
workware concepts represented workitems meaning expressed specific constructs wfmc derived context item placed processes workitems decomposed activities workitems part template class models items placed local model instances automated manual items separated resource signature includes invoked software tool 
specialisation workitems expressed adding new properties controlling enactment rules 
addition greatly simplifying modelling language workware scheme flexible 
typical lifecycle workitem decompositions may added removed 
separate processes activities typical evolution patterns require objects change class 
migration difficult class oriented systems classification inherent part definition object 
conversely lack inherent separation templates instances enables workware mechanism reuse copy reuse instantiation 
conceptual simplicity crucial usability reuse 
trained software engineers problems sorting multiple meta levels users difficult 
basic language require detailed vocabulary wfmc explicit may convenient articulation templates offered different kinds workitems 
templates defined constellation objects automated activity template includes workitem invoked software tool resource role 
user changes mind decides manually just remove tool resource need redefine workitem 
decisions area principle limited classification applied design workware 
apm ports conditions timers combiners splitters grouped construct realisation represent decisions regarding flow 
context input output properties deadline timers relations number flows allow separate different subtypes 
concrete workware model translated larger languages wfmc standard 
instances referential terms factor theory semantic holism points interesting feature instance modelling instances referential terms aim directly identify real world entities phenomena 
case workitems flows resources decisions talking physical entities concrete users involved hopefully assign meaning 
meaningless workitem context process negotiating meaning performed 
instance model identifies stakeholders contacted order discuss involves 
instance modelling facilitates human social interpretation meaning model 
modelled instances direct representation user interface software tools model element online workspace straightforward grasp users 
properties aspects meaning similar way predications propositional content clauses added predicates functional grammar dynamic addition properties modelled objects allows users articulate facts meanings flexible manner ranging detailed precise long sentences ambiguous contextual short statements 
variations degree model specificity simpler articulate adding removing properties instances new understanding represent 
properties simplify model evolution compared approaches 
example utilised modelling resources 
resource roles long filled long role filler property set 
property set resource role concrete assignment 
properties utilised separate different kinds objects 
instance section saw different enactment policies applied workitems depending properties 
example properties denoting uncertainty vagueness incompleteness cf 
section affect way workitems decisions managed 
derived properties enable contextual semantics derived properties constitute simple mechanism contextual semantics 
derived property automatically computed values model object environment 
various types workitems discussed section separated properties composite atomic generic specific automatic manual derived context individual item 
roles possibly recursively filled resource represent link derived property 
means role responsible item design filled role chief designer workitem software development project role chief designer filled tom roles derived property called filled pointing person tom 
derived properties utilised user interface users enactment normally just cares fills role achieved model 
mixing derived articulated properties allow users say directly fills role assigning value filled property alternative modelling resource allocation process 
elaborate schemes exist simple direct mechanisms 
derived properties model element principle influence element 
constitutes true semantic holism 
reuse framework chapter implement derived properties 
constellations sentences articulated grouping objects constellation assemblage 
workitem constellation resources input output flows possibly sub items modelled workflow 
workitem corresponds predicate part sentence resources subjects objects involved 
flows denote temporal order possibly goals reasons 
objects adds constellation precise meaning 
generalising principle view object constellation properties treating properties class primitives 
property modelling particular kind constellation modelling 
individual objects constellation derive meaning 
shows person objects placed number different constellations 
upper line shows generic roles filled property 
placed person object denotes generic individual 
placed inside workitem object denotes role item 
inside organisation generic person object represents position multiple persons put denote group 
may place person role flow denoting source allocate resources target 
different constellations generic roles filled concrete individuals shown lower line 
modelling constellation facilitates systematic approach personnel management domains 

different uses person objects 
modelling languages employ separate concepts uses person objects 
sense different features needed contexts modelling language larger flexible 
resource modelling framework apm page contains multitude variants actor organisational external agent software agent tool manual software object material information active information object pluggable action resources 
resources role concrete invoked mandatory available composite atomic depending properties 
total number resource variants include basic generic types times property variations total 
clearly represented primitive classes 
number primitive properties required articulate amount information contrast 
number primitives decreased product number property values classification sum different values properties constellations 
different person object may require specific features needed cases 
instance positions may salary codes roles hourly rates 
number common aspects instance concerned allocation shown lines related person fills role 
semantic holism dictates object definition case person object set properties may depend context object placed 
reuse framework chapter allows users define policies inherit properties context workitem organisation group person objects implementing form semantic holism 
dynamics model evolution dictates object definition depend states elements model instance generic person objects may skill requirements individuals skills 
shows example semantics person role depends indirectly associated elements processes organisations respectively 
parallels differences model fragments discussed 
allocate people human resource department 
personnel allocation organisations processes 
discuss concepts organisations management science 
notices concepts interrelate practice unstable ambiguous ways emphasises concepts multiplicities conjunctive synthesis singularities combinations instances 
concepts get meaning relationships elements 
shows concepts human resources total quality management understood terms wide range singularities flexibility skill process different disciplines 
process enterprise modelling languages similarly emphasised relationships central modelling construct 
constructive composition vs holistic interdependencies software development constructive decomposition systems subsystems fundamental technique 
constructive structure system properties computed subsystem properties known 
constructive structures validated 
development proceeds recursive divide conquer subsystem set implementable basic components defined 
constructive approaches emphasise separation concerns decomposition structures maximising internal cohesion minimising external couplings part 
available systems components reused bottom synthesis 
open interactive systems different 
wegner points correctness open system validated general respect defined set inputs 
interactive models reflect wicked incompletely understood problems framed solved 
support problem solving process just documentation outcome 
constructive composition yields control complex changing social environments impossible predefine connections subsystems 
researchers find maximum adaptability achieved edge chaos 
black box closed constructive structures replaced open reflective implementations semantic holism 
hand social conventions laws contracts standards technological decisions close subsystems respect features clients rely allowing simpler systems 
degree subsystem openness involves trade simplicity flexibility 
list different types open interfaces main project main organisation environment may declaratively describe intended component select matching implementation strategy 
semantic holism domain properties derived surrounding model 
call contextualisation 
environment may explicitly decide set implementation strategies offered component workware interactor policies 
called parameterisation customisation 
extension environment may define parts subsystem implementation strategy user defined enactment rules 
adaptation specialisation strategies may incrementally redefined 
workware property constellation modelling support incremental articulation cancellation inheritance allows existing strategies replaced 
core challenge open implementations manage complexity 
case complexity managed interactively allowing different roles users process experts software engineers adapt system interfaces listed 
scope control natural sufficiently fine grained instance modelling explicit inheritance policies facilitate 
meta interfaces orthogonal primary interfaces default policies tailoring optional 
aspectoriented workware architecture consists orthogonal interactors default activation policies implemented 
interactive model separation domain implementation strategies fuzzy 
semantic holism violates orthogonality requirement 
process models especially ill suited constructive approaches 
experience changes affect process steps parnas concludes incorrect decomposition system modules basis flowchart 
architecture multiple model interactors decomposes code concerns processes 
summary section shown number aspects semantic holism interactive modelling languages practical examples workware 
semantic holism gives rise principles modelling language design 
limit classification encode information 

instances establish direct links model elements represent 

allow properties dynamically assigned objects 

allow constellations objects manipulated entity 

allow inheritance derivation properties link 

explicitly state facts deduced parts model 
combined techniques generates modelling languages simpler fewer primitives flexible accommodating typical model evolution scenarios richer allowing larger extensible set nuances meaning 
seen semantic holism better matches natural language way human actors perceive world 
semantic holism suitable model articulation users 
table summarises gaps way users perceive world normally represented information systems 
reality observed users objectives models partially understood complete holistic causality linear causality non deterministic deterministic contextual holistic meaning constructive composition defined interfaces open system closed system emergent decentralised order designed central control satisficing adequate solutions optimisation best practice table 
gaps real world semantic holism modelling reductionism 
semantic holism activation models holistic activation semantics view model system autonomous components 
component formalised interaction controlled users 
system exhibits emergent behaviour non deterministic decentralised incompletely predefined 
order stable patterns emerge interaction autonomous components open self organising systems 
individual component simple formal definition interaction openness yields rich system behaviour 
semantic holism employing contextual interpretation rules combining states elements decide situated meaning model amplifies balances emergent behaviour 
interactive holistic workflow architecture enactment semantics workware interconnects state transition behaviour multiple model elements 
element offers interaction capabilities users trigger state transitions complement override rule interpretations 
users may add remove elements enactment progresses 
workware model open system interacting semi autonomous elements 
semantic holism evident number features state transition rules refer objects multi step navigation interpretation current object depends related objects 
triggering actions state changes elements indirect consequences transition potentially reach process structure 
interaction sequence diagrams cf 
section reflect semantics model emerges interaction simple independent rules element 
page logical architecture interactive workflow system consisting shared workflow model number model interactors integrated user interface 
architecture revisited 
shows multiple users interacting multiple model elements 
similarly system contains cooperating model interactors offering partial interpretation model 
holistic interaction metaphor applies levels 
enactment awareness holistic interaction users management multiple users 
holistic activation semantics 
multiple model elements multiple model interactors complementary interpretations information system viewed medium human interaction communication knowledge dissemination 
systems support cooperation offer basic support human interaction sophisticated automation email chat shared workspaces widely 
user looking solution problem important answer comes computerised component database asynchronous communication medium directly user 
turing test user able distinguish answers computer answers human little practical relevance 
need system supports social processes knowledge creation dissemination codification learning 
joint sense making articulation frames contexts important aspects processes 
requires interpretative flexibility knowledge representations 
formal languages contextual meaning appropriate 
holistic interaction model elements interactive model consists elements directly indirectly connected 
users interact model elements manners narrowly rule restricted element partially autonomous respect rest model 
users add remove objects relationships population model elements evolving 
utilising possible knowledge articulated model holistic activation mechanisms better provide contextualised support 
different interaction scenarios generated state transition models section illustrate potential system simple components exhibit mediate complex behaviour 
comparing workware enactment semantics petri nets see clear differences 
petri nets transitions currently tokens input places candidates activation 
rest model utilised way interpretation 
example section illustrates need contextualisation case studies surveyed chapter 
petri net semantics works formally correct complete static models handle incompleteness openness 
petri net model evolution requires complex mechanisms hard understand users 
table table illustrate differences 
simple model workitems planned occur sequence 
rows show states columns show states neighbouring cells show possible state transitions 
petri net example way model 
empty cells illegal 
basic petri nets separate ready ongoing 
state state waiting ready ongoing finished waiting input place receives token ready ongoing input places finished transition fires user finished input place receives token transition fires table 
petri net enactment model workitems sequence 
state state waiting ready ongoing finished waiting input flow declared user starts finishes activated ready early vio ready input exception start exception lation mod flows 
strong ongoing user declares flow warnings started ally activated cally increased ready finishes concurrency finished user declares flow user declares user declares finished activated started finished table 
workware enactment model workitems sequence 
workware cells filled 
planned perform exceptions may reschedule 
exceptions tolerated captured inside system subject reasoning learning experience 
system supports users managing exceptions awareness engine helps performers maintain overview goes task 
normal case operation workware allows situations occur petri nets 
users may instance trigger outgoing flow item finished needed start produced languages attempt handle scenarios closed system atomic semantics need lot different flow relationships 
separate finish start finishes interaction semantic holism hand allows handle cases simple language lets users delay decision detailed flow semantics situation arises 
users want predefine detailed flow semantics may add specialised enactment access control policies flows 
notion model activation holistic interaction model elements applies kinds interactive models 
product components concepts corporate ontology relationships probably incompletely articulated 
gossip awareness engine software product models example implemented holistic interaction model interactors third level activation described system interacting components consists interactors mediate user interaction model elements activates rules concern 
chapter saw interactors ware provide complementary coordination support controlled process models 
different interactors support different scenarios 
saw changes model component affected 
flexibility achieved interactor assumes full control model 
design extended external infrastructure chapter workware integrated model editor real time cooperation tool process simulator 
environment components useful isolation 
model editor static models typical processes show overviews current state actual processes 
similarly simulation tool data ongoing projects adjust parameters provide accurate forecasts 
integration model interactors offering richer set functionality customised current state important direction research 
integration increases utility interactive models medium knowledge transfer users 
integrating different tools common model create arena different practices meet management knowledge workers accounting quality control 
time integration problematic different communities practice assign different meaning terms boundary objects discussed chapter 
precisely different communities tools assign different partially overlapping meaning elements shared model need open contextual semantic holism 
semantic holism allows shared model fragments change meaning depending context local practice specific views placed accommodate different uses different communities 
allowing complementary interpretations exist interact semantic holism allows models fill role boundary objects facilitating communication learning communities practice 
instance modelling creates global identity element maintained communities 
property modelling incremental classification allow different communities articulate local aspects objects integrated manner 
additional objects local meaning may influence interpretation shared elements derived properties reuse policies 
implies human resources hr department far elaborate model personnel recruitment process main organisation effects hr activities shared model available 
semantic holism model reuse model reuse component chapter regarded just model interactor 
handling inheritance modelled relationship extends degree semantic holism offered conventional systems 
assuming models evolving incomplete framework follows open systems perspectives 
supporting single centrally controlled inheritance hierarchy workware recognises decentralised emergence better matches needs users illustrated examples chapter 
lifecycle model evolution section points number roles semantic holism adaptation appropriation template fragment local model partially automated meaning template influenced new context local model placed 
derived properties reuse policies template fragment automatically adapt new situation increasing potential reuse need tedious adaptation users 
instance add review template workitem local process automatically inherit document resources local process basis review 
generalisation similarly benefits semantic holism 
derived properties automatically reset model fragment moved local context template repository 
inheriting features template context states set initial values resources roles filled generalisation gets head start 
different contexts organisational group project personal templates allow different generalisation rules applied 
classification templates involves mix predefined hierarchies need driven structures emerge properties local models 
classification structures help users see similarities differences candidates 
mere experience seeing structures may influence users understanding template 
context classification provides enhance process highlighting differences current set candidate templates pointing common features user partial selection features template features fit project functionality especially useful 
context utilised semantic holism case selection process represented pages 
analysis evaluation reusability model similarly supported specialised tools reusing quantitative properties associated model elements time resource consumption costs perceived quality ratings summary contributions chapters described contributions thesis encompassing general approach flexible design interactive models specific ideas process support environments interactive model driven solutions 
table maps contributions core challenges uncovered chapters 
shows new design ideas address challenges 
validation chapters indicates design ideas feasible useful innovative 
research challenge contributions meet challenge incomplete models interactive activation explicit decisions language efficiency simplicity semantic holism instance modelling flexible articulation semantic holism property modelling user oriented language metamodelling instance modelling holism user involvement interactive activation location decisions contextual model interpretation holistic activation semantics rich functionality multi interactor architecture semantic holism customisation policy models contextualisation reuse interactive process reuse processes decisions interactively enacted need driven reuse emergent classification intension extension metametamodel customisable reuse reuse framework policies aspects generalised inheritance support reuse reuse processes decisions integrated practice removing meta character table 
research challenges contributions meet 
chapter implementation workware prototype developed experimented number research projects 
implements designs chapters serving proof concepts 
original objective workware support planning performing coordinating managing ad hoc learning practice 
progressed recognised ad hoc processes substantial routine parts structure emerges progresses 
discussions users previous research surveyed chapter showed seemingly routine strong ad hoc knowledge intensive characteristics 
consequently important integrate support routine emergent workflows framework 
workware principles addition research oriented requirements chapter workware satisfy number detailed user needs technical functional requirements 
additional requirements section 
outline core design principles user interface system architecture provide overview system functionality services 
requirements chapter describes usage experience workware integrated infrastructure external project 
important requirements put forward cases system help user organise 
organisations install groupware tools early adopters discover real benefits people tool 
providing services users need individually overcome critical mass problem 
different aspects integrated separated 
planning coordination management reporting integrated external knowledge 
system support visual modelling require 
users able articulate inside environment textual forms 
simplicity ease primary concern especially novice users 
migration novice expert facilitated 
customisation needed allow individual user preferences variation organisational routines evolution handled facilitated practices technological support 
system easily adapt new platforms 
different client access devices software network bandwidths supported 
easy start tools 
client installation straightforward system useful detailed process model 
information shared users groupware manner distributed hidden personal mailboxes 
standards integrate external services tools 
cooperation partners system supported 
information stored transferred secure manner preventing unwanted disclosure external internal actors 
performance satisfactory matching user expectations similar technologies 
addition number requirements important stable software product scalability locking versioning 
workware designed experimental prototype requirements prioritised 
design principles requirements principles early articulated software architecture development process system web 
client run web browser require installation extra software 
system proprietary features 
user interface dynamically generated order facilitate personalisation model driven customisation 
system component 
strong separation concerns exist components 
available standard open source components utilised 
built browser capabilities utilised desktop application integration 
implementation process incremental provide early benefits users 
basic services information sharing task management objectives powerful features follow 
principles java servlets selected main implementation technology 
time offered comprehensive framework dynamic web applications 
user interface consists dynamically generated html forms documents available web server runs servlets 
user interface chapter user interface components workware briefly introduced 
main forms interacting models worklists 
worklists presents overview workitems selection criteria specified user organisation including fills roles responsible participants customer item 
criteria separate personal group worklists 
project package parent workitem item belong derived breakdown structure 
state item separating new items ongoing ones 
item delayed 
time 
planned actual start finish date item 
scheduled week far 
additional property defined user organisations 
addition criteria searching database workitems user may explicitly add remove items list overriding search selection 
worklist displays customisable selection properties item 
shows example 

workware worklist 
clicking name workitem list user opens item 
shows example 
includes description item communication links people fill roles links document resources worklist containing sub items 
users access types services planning services articulation including process modelling performance services providing access tools information coordination services reporting progression changing state workitem selecting output flows 
services correspond commands user invoke workitem 
steps fine grained represent workitems 
classification planning performing coordination services refers service particular context service may planning performing coordination different items 
planning service process modelling instance perform workitem adjust project plan 
addition components interacting workitems system includes general forms services manipulation types objects specific interfaces types decision making forms user involvement activation decision connectors 
forms components services contain customised organisational policies user preferences 
workware explorer fills separate frame left main forms 
menu structure organises services hierarchically preferences access rights individual users 
menu configurations shared reused users 
details services selected customised meet local needs provided section 
architecture 
workware 
architecture workware described levels 
logical architecture section shows main components implementation architecture appendix defines packages code runtime deployment architecture appendix contains servers clients related software systems 
logical level prototype currently integrates model interactors management tool workflow enactment engine awareness engine document manager access controller 
workware integrated tools visual modelling simulation real time collaboration external infrastructure section 
implementation divided layers java code user interface interaction control data management persistent data storage 
runtime workware java servlets connected web server 
servlets build html forms documents dynamically 
interfaces returned web client web server 
set user interface forms components evolved lifetime system 
appendix shows generations workware user interfaces starting rudimentary html forms multi frame iconic interface controlled style sheets 
applied different server operating systems web servers 
architecture handled technological evolution 
implementation language metametamodel data management layer workware server gives access modelled objects 
layer implements metametamodel defined chapter classes 
class clients get list members 
classes identi fied unique name 
templates 
class 
new objects created clones templates 
objects 
object instances identified unique id addition main implementation class workware data management layer 
contains operations access name type implementation java class help text attributes model object 
relationships objects encoded attributes class type 
list allow multi valued attributes 
list default element type 
reflection workware data management scheme applies reflection simplify user interaction increase flexibility 
classes treated objects 
class type classes members serves metaclass 
type fill roles ordinary classes 
implies attributes classes values 
feature useful customisation wants define policies objects certain class 
object defines policy typically attribute denoting scope value may refer class 
attribute metaclass 
useful defining user interface policies individual attributes displayed 
table shows policy defines description attribute workitems displayed particular user 
attribute name attribute type example value profile type type workitem profile attribute attribute description profile user person user interface component component text input field lines table 
user interface policy utilises workware reflection mechanisms 
mechanisms highly useful configuring general functionality system 
instance general form editing objects attributes current object contains types values 
information select customised user interface components attribute 
metamodelling workware reflection capabilities metamodelling 
classes treated objects defining new class just specialised way defining new object 
workware currently support kinds classes basic classes defined existing object template 
template edited manipulated just objects 
extensional classes defined normal objects 
extension template list type element type 
users add subclasses just add elements lists 
intensional specialisations defined ordinary objects 
template attributes contain selection criteria applied 
enumerations defined template 
class metamodelling useful group organisation levels 
users metamodelling instance level appropriate 
set attributes names value types defined locally object instance users may add remove properties see fit subject access control policies 
case studies chapter include examples utilised 
assessment shown appendix implementation utilises design patterns flexible data management 
detailed design aligned state art 
metametamodel operation proved capable handling number scenarios originally defined 
examples provided 
implementation interactive activation model interactors components activate process models workware architecture 
typically component includes parts user interface components allow users participate model interpretation model access interactor uses updates 
event subscription interface interactor registers objects works 
object created deleted changed interactors notified react interpretation current state affairs 
policy models ordinary control behaviour interactor 
integrated model driven user interface html management core user interface policies management enactment engine enactment policies awareness engine awareness policies process models data management layer document manager document metadata access controller access control policies 
workware interactor architecture 
core component workware implements generic mechanisms sharing model data distributed users providing simple customisable forms viewing editing listing searching modelled data 
core supports generic articulation manual activation models kind 
specialised interfaces worklists decisions making forms implemented process models 
management tool controls user interface system integrating components services interactors appropriate 
multi level configuration services workware models units functionality service objects 
addition system services external web services desktop tools integrated 
set services included user interface determined dynamically combining service configurations aspects describe current situation classes current object operation mode edit view list single object current user enabling personalisation current object instance 
may exist aspects combinations 
configurations applied sequence starting general superclass specialised instance user 
configuration include exclude services implementing cancellation inheritance 
multilevel customisation proven flexible enabling general evolution local preferences 
illustrates application scheme 
different projects customised explorer menu include services need 

workware explorer menus different usage contexts 
configuration left default second tailored support management coordination action items project 
actions ordinary workitems different name fit local vocabulary users 
organisation project packages wp cross functional teams mirrored menu structure 
chosen highlight delayed actions customer role denote follow responsibility 
lack follow reported problem current practice 
third example language changed norwegian renaming service objects 
meetings added special subclass workitem defined intension different categories documents distinguished local user defined property 
examples show metamodelling modelling service configuration aspects customisation 
cases chapter 
interactive enactment interactive enactment engine subscribes change events workitems decision connectors flows 
state attributes objects change engine updates related objects rules defined chapter 
engine mainly automation tool includes specialised user interface components 
lets users update state property workitems 
includes services triggering state changes allowed current state determined outgoing transitions state transition diagrams 
page shows workitem heading status 
enactment component included management interface default view style attributes type workitem status modelled user interface policies 
awareness rolf kenneth originally developed awareness interface infrastructure allows organisations share lifecycle information ships structured product models 
workware mapped process structures generic awareness model 
added filtering lenses customise holistic awareness mediation relations process model cf 
section 
awareness engine built standardised interfaces event capture propagation limited process models 
objects event logging enabled members extension class objects event log 
policies define awareness related services included members class displayed 
document management principle interactor utilise process models classify documents order simplify retrieval management contextual interpretation information 
component originally designed example ontology driven information workspaces 
extensible kinds interactive models 
simplified version implemented workware utilising open source software 
example menu right shows metametamodel workware support utilise forms metadata documents 
case document category attribute separating documents menu 
workware full fledged document management system 
lack versioning cumbersome user interface limitations current implementation 
access control concept services model driven access control component section 
access controller remedies information management problems mentioned integrating open source content management system called jakarta slide 
system supports distributed authoring versioning webdav standard 
addition storage retrieval access control locking versioning supported slide 
services integrated workware component listens changes model objects sure changes reflected access control structures 
provide interface defining access control policies concepts modelled projects workitems users groups documents 
slide supports inheritance access rights directory hierarchy 
details feature utilised reuse 
summary assessment object oriented frameworks workware architecture separates behaviour data 
features commonly thought inherent data structures inheritance managed model interactors data management layer 
motivation design allow user interaction customisation 
design groups related behaviour rules manner similar aspect oriented programming cf 
section 
interactive process models aspects include enactment awareness access control resource management data management visualisation user interaction 
mismatch aspect object oriented perspectives evident uml models activation semantics chapter 
behaviour rules managed interactor spread large number modelled objects simple scenarios 
aspect oriented modelling frameworks support behavioural structural modelling solve problems 
join points integrate code different aspects running system model objects event notification interface integrates different interactors workware 
communication data structures creates loosely coupled system interactors isolation 
interactors directly invoke operations orthogonal 
utilised support different system configurations external infrastructure tools 
user benefits arise integration previously independent services common model technical flexibility emphasised 
integration different aspects model complex unmanageable 
workware includes number remedies problem 
interactor need care objects classes attributes uses 
features ignored hidden function specific user interfaces 
interactor typically defines specific object classes policies customisation 
interactors need bother 
classes installed standard workware server deal exclusively service customisation user interface configuration controls awareness mediation support reflection data management 
remaining interactors typically apply policy classes core classes shared interactors 
workware interactive system aspects include user interface components 
user interface integration key problem 
generic user interface layer workware solve problems integrating different technologies 
section shows integration difficult tools external infrastructure 
thesis address problems technical interoperability shows potential model driven user interfaces integrate functionality different interactors contextual customisable manner provided technical interoperability place 
external infrastructure external project aims facilitate inter organisational cooperation knowledge intensive industries 
hypotheses project interactive process models form suitable framework tools methodologies dynamically networked organisations 
external infrastructure integrates number tools articulating activating process models metis open general purpose enterprise modelling visualisation tool hypermedia tool process real time collaboration support simulates processes resource allocation workware user environment portal server general environment internet intranet portals framework automated workflow applications 
metis remote client user environment portal server sim vision repository server frame solution workware 
external infrastructure 
metis commercial tools workware research prototypes developed years 
interactive process models core means integration 
stored webdav repository residing web server 
representation interchange models xml dtd defined 
metis building visualising rich date mod els joint project fostering common understanding enabling participants plan joint 
weaker visualisation capabilities allow realtime collaborative modelling focused collaboration context particular workitems 
provides contextual support synchronous collaboration workware asynchronous collaboration 
automates standard procedures 
open service model workware proved valuable facilitating control integration 
tools invoked webpage easily modelled workware services 
services may parameterised values defining file open metis process execute 
shows workware glue allowed tools web pages portal invoke external functionality 
current version workware runs separate server re implementation workware part commercial release initiated 
model data integration infrastructure tools activate process models 
tool language metalanguage adapted specific purpose 
common metamodel called eeml extended enterprise modelling language designed enable syntactic semantic interoperability 
eeml follows workware areas workitems called tasks decision connectors flows resources resource roles candidate relationships form core eeml 
eeml objects relationships instances 
generic scheme defining new classes properties included 
eeml commitments specific metametamodel features tools different hardcoded 
workware extensional intensional classification mechanisms supported eeml 
classification left individual tool 
metamodel lays rules repository actively enforce 
implemented system 
discussion shows tools implement eeml quite differently 
metis metis open enterprise modelling tool 
allows user organisations define local languages comes set predefined templates 
metis mainly tool articulation visualisation automated activation 
metametamodel metis posed constraints eeml 
basic constructs object property relationship 
relations binary connect objects 
properties take simple data values user defined enumeration types may refer objects 
built top generic infrastructure cooperative hypermedia 
hypermedia systems basic constructs nodes objects links relationships 
links class constructs nodes links typed possess properties 
workware metis allows addition properties local instances 
system supports metamodelling examples new classes defined prototype instances 
metis users typically view edit model users small portion time 
breakdown structure dividing model manageable chunks 
design chosen real time collaboration internet requires limited data sets yield acceptable performance 
simulates expected course events process model 
wide range quantitative parameters tunes different contexts 
articulate amount involved task percentage person time allocated project skills participant includes additional constructs meetings coordination relationships concurrent tasks reporting hierarchies persons 
included eeml 
limits depth decomposition 
levels simulated 
implies typical eeml models breakdown structure collapsed prior simulation 
workware metametamodel workware differs rest tools primarily designed graph visualisation textual viewing editing 
consequently contain relationship construct 
attribute values refer objects 
conversion representations straightforward due tools different purposes 
instance reusability need reassigning roles requires indirect resource allocation resource role filled recursively 
workware performance mode concerned filling role details resource management 
consequently resource allocation represented workware attributes role name name actual resource recursive filled relations value metamodel page 
user interface integration external tools originally implemented different technologies feasible constraints project provide fully integrated user interface 
tools implemented means started web page workware conducted service invocations 
integrating workflow real time groupware provides wide range real time collaboration services 
services included context particular items workware chat synchronous communication complementing asynchronous email integration workware 
collaborative modelling participants jointly manipulate eeml model 
distributed meetings synchronous collaborative editing modelling drawing gesturing services may utilised 
resulting artefacts automatically included document resources attached meeting workitem 
various education assisting features allow people experiment learn teach collaborative model browsing test runs processes 
resource management visualisation interface tasks grouped performs filtered wide range criteria 
total services facilitate close collaboration cooperative management learning process support environment 
simulation ongoing projects core benefit infrastructure brings potential realistic models 
gap real modelled processes decreased models enacted 
flexibility ease modelling enables process participants change models reflect improved understanding capture unforeseen events 
currently weak support dealing ongoing processes system simulate wide range scenarios model different parameters 
features utilised manually tune simulation model progresses building configurations forecasted accurately far 
fosters quality trust estimates project 
summary assessment external serves proof concept implementation loosely coupled interactive process model architectures 
shows systems different purposes underlying interoperate level process models 
simplicity eeml instance achieved limited classification constructs facilitates integration requiring tools deal specialised constructs needed purpose 
eeml influenced unified enterprise modelling standardisation project 
purpose tool influences language meta language implementation 
integrated framework interactive models provide multiple access mechanisms 
eeml pragmatic design subject resource constraints 
metametamodel plurality may required due practical limitations caused problems 
workware metametamodel designed meet challenges interactive models general 
demonstration suitability section shows metametamodel enterprise modelling metis simpler flexible 
current infrastructure supports data control user interface integration issues remain solved locking versioning models 
shared model repository change notification service workware implemented protocol change notifications enactment granularity model access fixed file level files managed 
scheme satisfactory modelling enactment 
modelling constructs shared tools metamodelling supported integrated manner 
user interfaces integrated combining components different tools 
services better integrated tools standardised interface web services 
limitations mainly reflect current state implementation invalidate quality proposed designs 
extending infrastructure meet remaining challenges provide stable commercial product faced practical difficulties require rethinking basic designs 
implementation backs claim feasibility incomplete 
external modelling language workware provide visual modelling interface models thesis built metis metis eeml template implements proposals thesis utilising number features tool 
section discusses strengths weaknesses potentials improving eeml template 
basic modelling functionality metis metis open modelling tool 
metamodelling users define new object relationship types 
order large set available modelling constructs manageable related types grouped domains 
eeml includes domains process resource goal modelling 
domains specific purpose grouped metamodel 
template starting point new models 
templates include metamodel domains possibly initial content model objects relationships 
eeml defined template metamodel 
context particular model users may dynamically include new domains originally part template metamodel 
multiple views metis separates modelled data visualisation 
implies different selections model objects visualised different layouts model element may shown number different views 
different symbols object different views 
allows users performing different roles customised perspective model 
models may edited view metis offers wide range services generating new views user defined selection criteria 
rich complex models accessed simplified personalised contextualised views 
methods deriving computing properties metis allows property values computed values model 
achieved method construct 
methods implemented programming language packaged dynamically linked libraries access model data metis api 
standard methods exist extracting values related objects recursive navigation modelled relationships basic computation string manipulation 
scheme allows derived computed properties increasing degree explicit semantic holism models 
instance eeml resource role derived property points object fills role traversing relations recursively indirect allocations similar way workware collapses structures 
implementation eeml author metis version external implemented dag karlsen metis 
macros dynamic visualisation users may draw symbols viewing objects relationships metis 
graphical building blocks symbols named properties colour size visibility controlled dynamically macros 
enables objects different properties visualised differently 
macros utilised number ways workitem colours depend states connectors flows change colour activated resource properties utilised macros visualise apm resource modelling vocabulary 

resource properties visualised macros 
semantic holism eeml ways eeml violates principles semantic holism proposed chapter 
reason limitations tools 
cases eeml simply reflects state art modelling approaches 
proposals chapter triggered discussions concerning design eeml 
versions eeml second fixes problems 
instance different kinds decisions originally separated different classes version properties greater extent simplifying language 
versions resource modelling defined atomic manner 
eeml separate class hierarchies roles concrete resources 
reflects need clearly defined vocabulary 
interactive models hand section argues difference roles concrete resources state substance encoded property 
eeml doubles number primitives needed resource modelling 
dimensions resources classified cf 
weakness ignored 
addition simplifying language semantic holism resource modelling flexible 
concrete resources class instance model resource allocation simply placing concrete resources resource signature workitem 
eeml today define name resource role concrete resource draw filled relationship accomplish 
illustrated 
feature semantic holism allows objects different contexts adapt meaning context 
chapter exemplified feature person objects standalone mode workitem organisation group flow contexts 
eeml version roles allowed appear workitems 
initial recognised standalone roles helped models reusable representing standard project roles independent workitems constraint relaxed 
reuse 
resource allocation simplified semantic holism 
incremental development workware started basic services information sharing management 
coordination enactment modelling added 
process knowledge management third step time allow parts reuse framework implemented 
implementation metametamodel described 
policy controlled inheritance dynamic changes fully implemented 
represents generalisation specific reuse mechanisms implemented order meet requirements external users 
section describes functions 
templates metis workware support creation new models templates copy paste reuse 
metis creates new models templates ware creates new objects 
combined tools support initial reuse early planning new project ongoing plug templates specific tasks project 
currently template management component external infrastructure users manually organise template repositories 
cases performed set available templates increase users require extended support area 
despite limitations case studies chapter show manual model reuse take place 
classification reuse classification structures reuse number ways current implementation workware 
described section user interface policies service configurations defined class level inherited specialisation relationships 
deciding user interface component property object system looks policies particular property inside object class 
special policy defined property policies type property applied 
cases conventional inheritance superclass policies apply subclasses 
metamodelling users redefine class hierarchies add remove classes extensional superclasses defined basic installation workware motivated need defining common policies various interactors 
general classes process modelling data management user interface preferences service management objects event log exemplify 
classification structures utilised local metamodelling 
instance user adds removes attribute chooses object instance classes scope change 
utilising breakdown structure reuse currently workware little breakdown decomposition structures reuse 
management interfaces provides links parent child resources workitem users easily browse parent documents document folder child workitem 
access controller utilises inheritance decomposition structures 
implies users define general access rights project applies tasks documents similarly access rights objects inherited properties object 
project user groups participants customer responsible inherited workitems part project hierarchy 
reuse flow flow relations decision connectors indirectly workitems activated navigation links user interfaces workware 
document folder users may navigate workitems current item receives flows sends flows 
navigation mechanisms automate reuse help participants identify resources may interest current fostering manual reuse 
resource allocation personalisation workware current user preferences control user interfaces user responsible item 
awareness engine person role relations utilised reusing event notification filters 
user invokes catch service time filter stops old events added global set filters user 
time user asks see event notifications global profile reused relations user workitems 
example access control policies reused relations workitems information resources 
links workitem directory documents stored workitem access rights inherited 
parameterisation properties section saw methods relationship traversal schemes applied support derived properties metis 
workware implements parameterised reuse rules 
users model processes visually seldom bother name objects decision connectors flows 
models accessed textual interface workware names needed 
currently unnamed decision connectors named owner workitem input workitem name output workitem name 
flows named target connector 
similarly user interface policies service configuration objects automatically named situation apply services workitem name attribute edit style class name 
cases values extracted context request user defines new workitem default responsible 
project model lifecycle support currently specialised support model driven processes reuse harvesting external infrastructure 
order enact meta processes ones defined section general mechanisms utilised 
quite static system oriented automated solution preferable guiding users steps defining new project 
specialised interfaces project definition built 
solutions utilise parameterised services workware tools perform tasks define new project model project start performing project import workware summary chapter documented implementation proposed designs workware prototype external infrastructure 
implementation involved number people software companies research institutes user organisations 
implementation effort requires pragmatic trade offs ideal research objectives feasible practical solutions 
external particular emphasis put providing industrial cases chapter tools willing put operation tools build customised solutions processes 
designs chapters implemented enactment policies extended decision semantics user defined enactment rules reuse policy framework 
detailed designs usage experience sufficient show proposals implementable 
survey related chapter pays particular attention feasibility remaining implementation 
chapter usage experience external infrastructure applied number projects 
cases constitute representative selection knowledge intensive virtual enterprises 
business consulting firm interacting customers 
second network small software companies 
third international research project external 
interaction users developers ensured ongoing practical validation 
process started development workware ais project 
addition external case studies chapter discusses ongoing workware settings 
depth model examples complemented formal evaluations interviews questionnaires 
extended enterprise requirements virtual enterprise consists number organisations collaborating networked infrastructure 
external term extended enterprise ee refers virtual enterprises integrated active model driven infrastructures 
introductory section outlines interactive modelling meet challenges ee planning operation management 
extended enterprise typically established ad hoc reach certain goals uniting forces organisations 
process models depicting reach goals natural ee integrators 
collection requirements extracted cases pointing number core challenges knowledge sharing create maintain shared understanding scope purpose enterprise viewpoints fulfil purpose 
language barriers cultural differences obstacles 
sufficient support communication technical infrastructure need support communication semantic level common terminology agreed descriptions practice dynamically networked organisations dynamic nature extended enterprise represents technical social challenges 
ee replacements removals additions network occur 
body operate effectively vital knowledge ways working readily available 
heterogeneous infrastructures different organisations different infrastructures connected email publish oriented seldom support environments 
infrastructures knowledge sharing reduced information dissemination 
common practice locations poorly facilitated 
process knowledge management business processes may described levels abstraction models defining core process logic executable models necessary details 
advanced process model management required integrate levels abstraction 
interactive ee models centred process perspectives help organisations meet challenges 
models capture rich set relationships organisations people processes resources virtual enterprise 
analysis activation models applied sources knowledge providing basis learning 
communication supported infrastructure tools terminology modelling language 
joint modelling enterprise facilitates common understanding extensibility modelling language allows local perspectives expressed utilised 
detailed requirements external users deal project planning management coordination execution knowledge management infrastructure management 
practical input helps validate general requirements literature survey chapter 
planning project planning support required simple visual articulation parts project different perspectives including scheduling resource planning budget organisation roles quality assurance tasks descriptions cf 
requirements chapter 
template models generic processes domain specific building blocks 
negotiation merging heterogeneous corporate procedures 
simulation ongoing planned processes 
easy navigation breakdown structure 
scalable methodology tools languages suitable small simple projects large complex 
easy retrieval past project plans performance change histories 
resource management multiple projects 
adding replacing removing partner companies project 
management coordination management services prioritised easy time consuming project monitoring progress follow 
deviation detection notification subscription specific event types 
risk management identifying assessing managing uncertainties 
role management role descriptions skill requirements competence role assignment history re assignments 
definition management shared resources 
collaboration infrastructure provide easiest rewarding way performing tools chosen 
execution requires highlighting urgent high priority 
cooperation support communication shared workspaces collaborative modelling problem solving decision support distributed brainstorming performance support task automation 
automated information flow tasks ad hoc information originally included model 
implementation standard problem solving procedures 
knowledge management learning knowledge management learning services requested management continuously accumulated knowledge 
access experts modelling experts 
metamodelling 
cooperative model browsing enabling teaching mentoring 
separate repository areas different teams 
automatic generation role dependent views visual models 
models provided learning resources background explanations 
animation role play guided tours enactment scenarios history 
methodologies actual project experiences 
infrastructure management infrastructure management deals system integration configuration customisation requires simple user interface intuitive accepted standards 
intuitive self instructed installation start 
quick easy establishment configuration starting point infrastructure new project project completely defined partners known 
different levels interoperability email web portal rich process integration allowing increased interoperability collaboration matures 
different technical infrastructures regarding software hardware 
instance consulting case set low bandwidth environment 
integration current infrastructures user organisations compatibility industry standards 
differentiated access control project roles 
high security information 
single logon tools infrastructure 
integrated user environment portal tools integrated help system 
case external project external took medicine early experimentation arena ee methodology tools infrastructure 
experiences arena fed development process benefit industrial cases 
project plan articulated early prototype versions eeml imported execution environments workware 
due resource limitations instability evolving infrastructure decided put particular emphasis supporting typical process examples project periodic progress reporting mandatory routine administrative procedure reports written package quarter collected sent customer twice year 
joint project planning ongoing knowledge intensive activity package plans elaborated 
planning takes place reporting order accommodate deviations provide detailed plans period 
addition planned case studies carefully evaluated ad hoc utilisation external tools took place groups project 
subsections summarise lessons learned cases focusing aspects relevant evaluating interactive modelling approach language tool support workware 
details available 
periodic progress reporting main activity case quarterly progress reporting 
excerpt model process 
packages wp wp manager writes separate report 
report template actual report modelled information resources workitems 
project manager responsible coordinating reporting process 
model optional meeting included coordination purposes 

model quarterly progress reporting 
relationships resource roles hidden readability 
process quite simple shows interaction perspective helps limit complexity model 
instance need flows start main process concurrent sub items 
lack input flows means constraints prevent items starting 
simplification evident location workitem evaluate need meeting 
wp managers 
systems allow person workitem need items 
wp managers allocated collaborative item 
allocation indirectly actor roles write wp progress report items managers delegates task person automatically involved meeting 
example indirect resource allocation follow breakdown structure 
examples resource allocation captures dependencies needn duplicated process di 
information resources represent report document parts produced wp manager 
put workitem shown parts modelled information resources needn model information flow 
architecture multiple model interactors document manager addition workflow engine simplifies models 
interactive feature utilised decision meeting locally modelled output evaluation workitem 
project manager wanted control responsible process moved decision sub item 
participant decision meeting required completing evaluation item triggering set meeting 
tasks project manager pm supported services infrastructure need articulated detail 
workware worklists provide overviews current state process helping pm see wp managers written report 
mail service project manager sends reminders wp managers time write new report deadline approaches 
pm role reassigned times project need explicit coordination routines new manager reuse 
modelled process core depicted 

management procedures quarterly progress reporting 
progress reporting routine administrative procedure recurs project regular time intervals 
model reused number times 
process articulated support reuse limited copy paste metis 
infrastructure ready reporting period 
lot initial learning alignment reporting practices organisations countries captured version 
updated procedure implemented year account experiences working increased understanding capabilities model driven infrastructure 
new version changed breakdown structure individual responsibilities clearer resource allocation explicit order handle re assignment better added output flows write automatically finishes completed added previous reports wp resources write wp progress report items 
occasion user innovation reporting case involved metamodelling 
process general management particular time driven 
shown participants decided model timers decision connector subclass part eeml time needed order handle exceptions delays coordination 
workware support timers project manager remember things reminded presence objects model 
timers manually activated 
process knowledge management evolution information highly relevant pointed requirements expressed specification documents emerged 
reuse framework thesis improve process knowledge management number ways including local modifications metamodelling adding trigger time property decisions supported instance oriented metametamodel 
propagation dynamic change updated definitions instances 
parameterisation model properties 
workitems names refer wps current time period easily generated parameterisation rules 
specialised semi automated reuse called create new periodic progress report included service workware 
property values user name deadline current period current project plan showing packages exists manager reporting process model automatically generated 
users evaluations reporting application discussed 
joint project planning project planning selected second case external project characteristics complemented reporting case 
planning ad hoc activity utilises modelling tools performance 
emphasis reporting activation reuse planning primarily concerns model articulation 
expected need coordination different packages require collaborative modelling services 
implementation included plan process model planning process operation plans 
workware 

model joint project planning 
planning process modelled eeml enacted 
excerpt model shown 
supports closer collaboration workware 
people item immediately see effects actions 
interface provides real time awareness currently working dk haake shows current status tasks colour coding metis workware 
case report contains example features utilised defining template joint planning jpl process model finished designer created package model template metis modelling environment template available shared repository 
subsequently put link template jpl process model 
designer template create sample package model wp modelling services 
model reviewed designer improved number iterations 
final example model available shared repository linked jpl process model 
mixture largely asynchronous synchronous discussions greatly facilitated shared repository collaboration modelling 
template produced typical 
includes basic structure objects separate folders tasks inputs outputs organisations people project document archive 
elements parts archive organisational structure shared packages 
inputs wp cases outputs 
example shows meta process support facilitate knowledge management 
enacting process defining new projects version infrastructure invoking metis users define plan project forwarding workware 
real time collaboration met technical difficulties firewalls limited bandwidth internet project partner greece 
full collaboration infrastructure easy start workware 
consequently version infrastructure web solution replaced project definition 
evaluation results jpl cases subject formal evaluation people answered questionnaire 
author thesis involved evaluation 
partially independent 
questions asked period external tools second period infrastructure installed 
reporting case time spent perceived quality results need outside help documents showed great improvement 
part improvement due learning occur anyway second cycle 
baseline survey similar process summary cost statements showed improvement 
participants proposed workware cost statements 
planning case opinions mixed 
respondents felt quality effectiveness improved claimed opposite 
clear majority thought plans accurate 
asked important problem planning half respondents originally said lack collaboration 
having tried tools chose identify dangerous delays 
reported initial experience shows current ee infrastructure tools rigid 
numbers survey clearly small draw scientific relative results cases different criteria interesting 
opinions participants clearly articulated positive negative tools applied 
apparently real time cooperation important thought simple enactment support useful 
experimentation decided add performance orientation planning case 
experiences endeavour reported 
addition detailed evaluation case processes larger study project involved questionnaire complemented interviews key participants 
study carried hildrum 
questionnaires sent infrastructure 
literature survey highlighted technical viability cost effectiveness functionality impact business processes key dimensions evaluation 
ease easy access tools effective communication learning trust regarded critical enablers objectives 
number statements indicators issue handled users asked rate degree agreed statements 
table summarises results questionnaires 
number people agree number people disagree criteria access communication learning trust table 
summary evaluation results average scores 
number limitations related results including potential bias respondents participants external lack control group 
number lessons learned rating statements interviews 
instance customisation area usability lowest score respondents issue 
people said agree little tailoring easy strongly disagree 
may reflect fact customisation services available participants specialised customisation user interface exists general editing policy data objects 
feelings mixed regarding simplicity ease interviews uncovered web tools workware rated high tools 
communication coordination workware related statements concerning overview tasks feedback information showed greatest improvements real time communication meet expectations 
early assessment external learning history written social interviews project participants 
objective learning history capture wider multitude perspectives subjective views formal evaluations 
story clearly demonstrates different people held widely different views regarding key aspects project driving forces initiation key concepts meaning key terms 
experiences researcher outsider project group valuable uncovering local language developed project 
sharing language important team spirit 
story indicates modelling language extensibility metamodelling key role interactive models facilitate formation effective communities practice virtual enterprises 
general criteria investigated study match concerns chapter thesis learning communication trust statements seldom detailed assess individual design ideas 
detailed discussions actual usage needed complete usability evaluation 
examples provided follow rest chapter 
action lists emergent project planning implementation joint planning process took top perspective managers responsible planning inside package 
plans seldom detailed cover tasks performed 
consequently external project web action list located project web server 
solution number limitations typical publish oriented web environments project manager change list update status add new actions actions lacked context hard comprehend actions explicitly connected project plans actions linked environment documents tools list sorted different attributes filtered certain criteria list person possibly add new criteria 
action lists consequently actively project participants 
spring decided replace external infrastructure 
workware central role application managing actions workitems 
took just hours customise workware installation action lists 
workware explorer menu case shown page 
organises actions criteria status lists contain ready ongoing actions delay packages teams responsible coordinating interrelated tasks packages persons roles separating actions current user responsible ones just participant follow lists containing tasks current user customer 
lack follow reported major problem previous system 
increased access edit actions list date 
structure actions connected full project plan teams packages provided increased context 
explicit assignment follow responsibility ability look event log see created action item easier understand 
old static action lists contained actions half years operation workware contained just months installed summer holidays 
safe claim second application experienced improvement users 
action lists available workware usage frequency dropped significantly 
happened general consensus articulated application useful utilised 
number factors may contributed decline lack management commitment contractual obligations system 
workware allows define new tasks mark actions finished project manager longer put updates system 
relieved duties gave responsibility actions 
instance project meetings assigned responsibility recording new actions 
number major deliverables completed final versions tools infrastructure methodology 
eager users longer par actively project 
technological limitations cumbersome document upload 
user interfaces enactment policies tasks general complicated simple actions 
instability poor performance servers may discouraged users 
performance suffered action model grew large 
number situations email remained simplest communication coordination tool 
spite web email integration may see workware tool adding complex user environment 
main period noted number occasions people sent emails referring tasks pointing documents uploaded workware 
occur previous application 
fact project participants chose system project writing proposal suggest solved real problems 
users demonstrators videos online applications project workware played role demos tools cases 
case shows quickly easily workware customised particular usage need defining process model case wp structure menu structure specialised worklists services 
people started application customisation experience 
case shows bottom emergent process articulation complement top project planning give organisation picture really going project 
ad hoc applications external project addition reporting action lists workware opportunistically activities external 
dissemination activities especially related publication conference participation planned coordinated 
full installation infrastructure workware documenting installation process 
installation tasks planned advance emerged response unforeseen difficulties 
short comments problems fixed captured properties tasks installation guides readme files uploaded documents 
installation consisted number different tools order concurrent discussions carried mainly email 
outlook web access mail client integrated service workware store email messages html files include documents resources tasks referred 
installation complete workware server contained knowledge base highly relevant refining installation processes guidelines diagnosing fixing errors different client server platforms 
case demonstrates knowledge management system may important role person articulate 
workware projects 
document archive email links includes initial motivation system 
noticed people hierarchical ordering workitems basic functionality serve door opener workflow functionality 
results case support expectation 
feedback users indicates people especially initial phases process models cated 
important system graphical models just defining items web management forms 
textual interaction enables represent hierarchical structure people milestones documents assigned reasonable model flow relationships way 
establishing initial lo fi collaboration infrastructure sufficient 
mentioned key requirement external users 
case business consulting project cycle business consulting case involved primary users outside external project 
question supported process modelling experts external partners 
defined procedure projects executed 
procedure available corporate intranet form textual descriptions informal visualisations 
tasks external consultants model procedure known project cycle eeml language 
local requirements collected customised version external infrastructure installed 
users case novices respect process modelling groupware systems selected workware primary tool 
reuse project templates top level process project cycle template shown 
addition process model template includes organisational model typical project roles firm tools information repositories document templates 
template contains optional items needed certain types projects budget larger certain amount 
options currently modelled normal decisions 
decisions project startup modelling reuse decisions simplify local models cf 
page 
decisions controlled properties project potential automated reuse decisions substantial 

top level project cycle template process 
interesting note project cycle mainly defines administrative 
actual performance project included inside item project sub item project execution level breakdown structure 
pattern expected model represent management perspectives perspectives typical bias process modelling 
reflects fact administrative procedures easy define reuse change projects core situated 
knowledge management process improvement really create competitive advantage core targeted 
security access control improved security multi level access control absolute requirement business consulting 
main reason access control prioritised implementation workware 
typical project requires default access rights internal participants allowed read update documents employees working project may access project information project manager allowed access rights participants customers organisations allowed read change documents plans part project 
cases different customers project know 
different customers may partially conflicting agendas leading lessthan full disclosure information 
access control interactor workware allowed policies articulated general level reused projects 
experiences evaluation results previous experience internet tools pilot user case regarded workware primarily document repository 
concepts enactment management status reporting useful project participant 
consequently system regarded complex cumbersome 
initial reaction indicates simpler user interface components enactment policies default novice users 
simplifications part customisation process case insufficient 
external process modellers able reconstruct project cycle template available constructs eeml 
cases limitations tools errors documentation prevented achieving wanted 
example modelling template actor roles 
documentation atomic semantics said resource roles modelled inside workitems wanted model roles independently 
confusion cleared semantic holism modelling language described template adjusted 
case consulting sme network final case study external aimed support network small companies located different countries mainly eastern southern europe 
companies owned group cooperated number projects 
cases different characteristics selected 
proposal submission government funding simple defined procedure 

software development case medium complexity 

management project complex unstructured activity 
overview characteristics scenarios table 
property proposal submission software sub contracting project management main objective flexibility maintainability reliability reliability adaptability duration single unit long term alliance temporal topology fixed structure dynamic mixed participation single alliance multiple alliances multiple alliances coordination tree structure tree structure star structure visibility single level multiple levels multiple levels collaboration activity distributed process joint resource man coordination management agement table 
characteristics different sme network scenarios 
process diversity model diversity interesting see differences manifest process models 
table shows number primary objects category models cases study 
cases clearly see increased complexity cases reflected size models 
project management case simple model 
reason partly devoted studying simpler cases may reflect project management harder articulate administrative 
case just management activities articulated core 
history cases interesting note software elaborate case originally modelled copy project cycle business consulting case 
template generic transported country application domain 
fact participants sme networks limited previous experience process modelling helps explain start template scratch 
couple months software model evolved new items added levels breakdown structure existing items renamed fit local terminology 
saw process template appropriation action 
project management case modelled separate processes project started management activities carried project 
modularization easier reuse process management ongoing activity recurs times lifecycle project 
property funding pro software sub project number workitems depth breakdown number actor roles number object tool roles table 
statistics models different sme network scenarios 
final evaluation results year survey discussed section external cases subjected joint evaluation 
questionnaire sent email users including managers project participants 
asked rate agreed statements positive negative point likert scale 
hildrum carried depth interviews participants 
frequency user friendliness usefulness provided functionality assessed 
general inexperienced users responded neutrally categories questions 
people tools typically slight positive giving average ratings neutral maximum 
suggested user threshold external prohibitively high 
interesting differences responses 
shows workware far widely tool 
evaluation report states paradoxical tool widely prototype tool extent globally available commercial tool 
asked tools people responded tools relevant learned tool prefer tools familiar 
poor integration tools especially user interface reported important shortcoming 
respondent said aspect tool integration experienced accessing workware internet 
problem reaching critical mass people collaborate tools highlighted particular need repository useful templates 
emphasis motivating input repository users justified 
user friendliness issues highest score awarded ease tools updated changes take place project 
informants agreed security infrastructure satisfactory indicating access control interactor fulfils requirements 
negative remarks 
manager case study companies reported tried convince group employees workware support collaboration distributed project attempt failed employees simply time learn tool 
section shows opportunistic workware occurred settings clearly just technical problem 
number refers roles modelled separate objects 
addition cases included roles task 
metis sim vision diagram degree participants times times times week 
frequency external tools 
inexperienced user business consulting case reported problems logic workware time log spend time trying remember system 
keep asking logic self explanatory 
main purpose tools guiding people project difficult graphical interface symbols intuitively easy understand 
probably helped incurring high costs 

system appropriation involving users terminology structures visual interfaces processes paid attention 
user grasped workware capabilities customisation configuration extension potential bridging gap local domains system logic 
communication support learning support support project execution diagram perceived degree service provision weak average score strong 
perceived degree service provision 
experienced users experienced users assessing functionality offered system users prior experience appreciated workware execution environment cf 

respondent noted workware tool mapping project complemented functionality notifies users people working document 
noted tool closely integrated email participant required support financial aspects project management 
having experimented tool users contribute clear requirements addition interactors 
general hypotheses task management simple interactive enactment services useful backed evaluation results 
comparatively favourable results achieved spite technical problems firewalls prevented access poor performance cumbersome integration 
cases organisational management commitment infrastructure limited 
clear long term field studies stable infrastructure needed 
experiences addition case studies external projects workware 
usage largely opportunistic experimental supported organisation 
advanced intranet cooperation ais project workware originally designed implemented 
users participated ongoing requirement specification experimented tool simple tasks 
learning workplace lap norwegian research project involves number research institutions software companies service providers users 
customised version workware project 
menu application shown page 
project limited funding year done meetings 
consequently meetings added new class specialisation workitem case 
project proposal builds external 
workware coordinate discussions marketing exploration related projects 
norwegian research project partners ais external sintef continue collaboration 
international quality certification department norwegian defence supported interactive process models 
students norwegian university science technology ntnu trondheim supervisors located oslo system articulate plans projects share drafts reports supervisors 
implementation eeml metis student exercises courses ntnu 
students participated exercises modelling different processes 
cases demonstrate interest concepts interactive process modelling different domains 
continued active participation industrial partners testify practical relevance approach 
projects stopped workware actively 
part due technical difficulties minimum degree collaboration needed sustain system usage 
summary chapter summarised experiences evaluation related application workware external infrastructure 
attempts completely successful cases indicate requirements social organisational issues discussed chapter important recognised real world cases 
general usability interactive process modelling 
evaluation workware performed better tools 
usability process modelling language 
users capable articulating large complex models examples illustrated practical usefulness semantic holism instance modelling 
enactment support model interactors management awareness access control meet requirements appreciated users 
model templates created reused appropriated adapted 
metamodelling utilised enable specialised support customisation services applied construct tailored applications just hours 
combined cases shown practical contributions chapters 
process knowledge management demonstrated cases automated support limited current infrastructure 
full potential organisational learning anchored practice realised significant number processes articulated performed reusable local innovations harvested 
long term field studies needed 
cases uncovered number limitations current implementation 
people agree workware simple simpler enactment policies user interfaces defined 
evident cases social organisational factors heavily influence success collaboration knowledge management tools 
lessons motivate emphasis put factors thesis particularly reflected chapter 
chapter related addition practical validation preceding chapters comparisons existing technologies 
analysis shows originality relevance research areas workflow management tailorable groupware knowledge management conceptual modelling 
main hypothesis techniques instance modelling semantic holism explicit decisions multiple model interactors yield significant benefits compared state art 
analysis limitations identified demand research development 
section compares workware modelling language existing process modelling frameworks 
analyse application interactive modelling principles uml enterprise modelling 
analyses show modelling principles general enable simpler flexible articulation 
section compares workware activation mechanisms relevant commercial process support systems research prototypes 
section provides similar analysis reuse framework 
evaluation summarised showing various analyses complement cover scope contributions 
process modelling workware combines ideas process modelling paradigms surveyed section 
section compares language innovative representative widely notations process modelling 
requirements simple flexible user domain oriented models guide analysis 
process modelling principles sociotechnical job design computerised information system community users constitute dynamic sociotechnical system 
models processes form job design 
sense investigate principles sociotechnical job design 
system basic unit analysis individual jobs need focus processes individual steps 
workware gives participants overview process interprets model holistically 
static adaptive wms violate guideline emphasising separation process steps clearly defined interfaces 
leaves coordination automated engine users focus just tasks 

workgroup individual central unit emphasising automated coordination wms allocate person task 
workware allows people filling different roles workitem support teams limited current implementation 

internal regulation external control conventional wms automate sequencing tasks externally defined models 
interactive systems facilitate coordination mutual adjustment letting users share plans status information 
external infrastructure includes awareness communication tools 
services included wms prototypes 

redundancy functions parts requires wms utilises process models learning competence development 
need allocating personnel tasks competence development plans just current competence profiles recognised 
enables development new skills just specialisation roles 

value discretionary prescribed part roles discussed chapter prescribed process models biasing official theories actual practice 
emergent workflow leaves detailed planning coordination perform user controlled degrees plan specificity 
core principle interactive models syntactic semantic rule prevent users articulating accurate reflection practice able willing provide 
prescribed process models minimum critical specifications 
perspective dominates model harvesting abstracting practical models reusable templates 
conversely adaptive workflow propagates change generic prescribed models process occurrence 
conventional wms enforce strategic change top process workware supports bottom learning experience 

individual complementary machine extension static adaptive workflow see automated engine force driving process forward users agents performing predefined steps 
interactive enactment allows users complement control enactment 
users may proactively override system rules 
rules explicit redefined locally informed users 
way users system cooperate interpreting model situations arise 
technical point view interactive enactment needed assume model complete 
governing principle automated reasoning enactment engine open possibility happening part model 
anomalies captured system resulting model richer source learning system impossible cumbersome represent exceptions situated process innovation 
emphasis modelling languages simple user oriented concepts tailored local contexts illustrates focus users active knowledgeable agents 

variety increasing organisation individual production workflow aims build standardised variety decreasing solutions repetitive processes thesis targets knowledge process unique 
rationale interactive process modelling reflects job design principles 
shows approach thesis aligned sociological theories creates working environment 
discussion pinpoints important flaws conventional workflow thinking 
workflow process modelling standards section saw standards workflow management coalition employ large number constructs modelling items providing increased expressiveness workware apm 
saw workware models transformed wfmc standard holistic mapping rules 
areas constructs workware translation wfmc 
particular user involvement incompleteness uncertainty handled coalition 
meaning xor splits joins represent uncertainty need user involvement unspecified decision 
workware decision connectors represent number different wfmc constructs including split joins pre post conditions workitems transition conditions flows 
areas wfmc standard criticised lacking precision semantics split followed join 
cases typically deal scenarios model just individual objects relationships interpreted 
need semantic holism standardisation efforts 
problems related semantic correctness avoiding deadlocks ensuring termination important fully automated systems handled user involvement interactive systems 
pointed jablonski research semantic correctness deals control flow aspects resource availability important practice 
advocates pragmatic approaches problems 
omg uml process modelling profiles omg workflow management facility targets automation mainly relevant integration external infrastructure partially follows standards 
integration far implemented rudimentary level 
extension feasible standards fit language 
far detailed complex extend expressiveness area automation business object integration omg basic constructs transformational state transition semantics match 
differences omg wfmc differentiate waiting ready tasks 
omg wfmc state called aborted called terminated 
states involve different rules subtasks 
omg wfmc allows tasks active ongoing finish 
omg standardised uml number profiles process modelling proposed business modelling profile uml software process engineering metamodel enterprise distributed object computing edoc process profile 
focusing documenting methodologies useable manner targets simplicity power expression produce executable process definitions 
articulate resources model management include rich vocabulary modelling units 
decomposed phases may iterations decomposed levels activities steps denote atomic workitems 
concepts declared 
packaging classification workitems processes disciplines possible 
semantic holism classification language flexible extensible 
bpml business process modelling language bpml defines formal model low level executable processes web services 
bpml control flow structures easily modelled eeml workware currently support constructs 
reason low level automation left external 
particular bpml transactions exceptions direct equivalents eeml 
decision connectors representing transaction semantics workitem templates extensibility language enables separation exception handling items main items adding property exceptional items 
bpml supports reuse contexts holding property values 
context decomposition follows breakdown structure 
contexts inherit properties surrounding context similar namespaces structured programming 
bpml exemplifies reuse decomposition relations 
workware reuse framework supports kind reuse flexible powerful 
standardisation standards classification primary means encoding information 
generates larger rigid languages compared semantic holism 
emphasis classification extent justified need precisely define core concepts direct manner 
listing classes standard required expressiveness immediately available 
expressiveness achieved combining classes properties constellations contexts requires additional description different combinations handled 
external experienced situation defining eeml 
early agreement defined modelling constructs object relationship classes conflicting implicit assumptions regarding constellations allowed surfaced long period time 
flexibility evolution poorly handled standards interchange models primary objective 
propagating changes ongoing transferred model outside scope 
pif exceptional process modelling standard 
aimed supporting evolution models languages pif utilises partially shared views interoperability 
partially shared views element target language translated nearest ancestor superclass corresponding class target language 
unknown attributes converted generic formats textual comments 
enables local language extension specialisation destroying interoperability 
pif simpler measured number primitives standards 
eeml similarly defined generic extension mechanisms metametamodel level 
instance objects may locally defined properties generic classes may specialised intensionally 
transformational modelling languages workware modelling language integrates multiple perspectives 
striving simplicity user orientedness take transformational input process output starting point discussed section 
addition various standards discussed number transformational languages enjoyed widespread adoption industry scientific communities 
carlsen compares inconcert action obligations apm included analysis 
petri net process modelling petri net widely formal process modelling language 
discussed chapters formality enables automatic activation syntactic semantic analysis relies closed system semantics resulting complex models 
van der aalst provides formalisation event driven process chains mapping constructs petri nets 
workware language formalised similar manner 
van der aalst shows connectors generalised thesis unspecified decisions result exponential growth model complexity 
example illustrates uncertainty represented formal languages modelling alternative combinations 
consequently incomplete model quickly complex unmanageable 
open system semantics hand require complete prescription alternatives may articulate uncertainty vagueness simple constructs workware unspecified decision connector 
examples incompleteness partially connected workitem collections allowed petri nets 
finite automaton petri net analyze change state state reachability deadlock mechanisms analyze addition new states alteration state structure 
consequently flexibility generally achieved means process articulation manipulations token configurations 
milano allows users model partially connected workitem collections sequencing items completely predefined 
compared modelling language workware low level petri nets generate larger models state enactment semantics part process model 
standard petri nets support modularisation abstraction decomposition 
event driven process chains function event constructs event driven process chains epc similar workitems decisions workware 
epc include states functions events require detailed modelling 
event conditions modelled decision connectors workware 
epc models tend slightly larger directly map enactment semantics workware 
modelling varying degrees specificity number languages seek articulate completely predefined semistructured evolving processes 
ability represent vagueness uncertainty availability information models needed creative processes articulation negotiation social reality construction 
solution attach secondary symbols denoting vagueness primary model elements enables integration graphical language including workware 
optional feature need complicate models 
workware incompleteness vagueness uncertainty assumed characteristics models 
means currently differentiate fixed changing parts model interpreted way 
linking enactment policies vagueness uncertainty properties enactment predefined procedures straightforward 
case studies needed investigate extent properties explicated 
experience shows making explicit information articulated increases interest hidden contrary objectives modellers 
evident default interpretation workflow fragment completely partially specified 
property reused surrounding process 
herrmann concepts evolving workflows utilise user driven coordination incompletely prescribed non business processes stating support successful employees perform tasks processes regularly contributions 
concept closely resembles interactive emergent workflow resulted detailed designs implementations 
hand numerous case studies utilise modelling environment support claims thesis 
instance discovered people able articulate process models provided initial training starting point models 
sequencing activities cornerstone conventional workflow management studied 
process experts artificially construct sequences projecting sequence interview real situations assuming logical dependencies correspond reality 
research complements independent case studies leading similar requirements 
constraint process modelling outlined section constraint proposed increase flexibility process articulation 
constraint specifications define space allowed behaviour collapses chosen solution time action arrives 
gpsg constraints expressing soft dependencies tasks 
gpsg aims supporting spectrum unstructured facilitated groupware semi structured fully structured processes 
open process definitions allow rules added removed 
defining declarative operational rules gpsg able express organisational context process situated 
variety rules handle task interdependencies flow means starts finishes finish starts starts way flow may influence tang hwang extends set task dependencies include transaction support abort commit 
declarative constraints offer little support process participants jointly articulate going perform project plan 
consequently gpsg supports decomposition conditional parallel branching operational triggering activities 
gpsg models separate design step provides input automatic generation executable plan constraint solvers 
users may alter executable models 
compared gpsg workware offers simpler visual articulation support user involvement enactment 
aware operational pml provides level flexibility 
users find easier articulate intend contextual rationale 
evident current prac tice project planning 
constraint languages suited modelling external influences project 
approaches emphasise process modelling outsiders 
cost benefit trade offs involved process articulation may result constrained models conflicting interests stakeholders result constrained models constraint approaches complemented negotiation tools interactive process support 
gpsg function model interactor workware reminding users constraints organisational context approaching deadlines supporting resolving constraints 
system states user states applies constraints 
task enactment metamodel allows user control enactment separation system user state 
system state disabled enabled pending result causal dependencies tasks user state inactive active done defines temporal states caused user actions 
workware system states represented input output connectors workitems 
user states reflected states workitem 
workware supports state set adding abnormal termination 
allows handle early start opportunistic involvement user state active system state disabled 
goal oriented process modelling goal oriented declarative process models assign goals constraints agents leave details reach goals 
workware decisions represent conditions current prototype implemented full rule language section shows rules modelled 
workware operational syntax defines happen rules violated 
rules transparent users see consequences rules conditions 
transparency important interactive system 
reflects vagueness explicit process models capturing knowledge current state fuzzy statements truth probabilities 
fuzzy logic opens richer set alternatives agents interpret activate model 
workware currently lacks feature uncertainties handled manually 
language action conversational process models coordinator successor action workflow system focuses articulating supporting communication negotiation actors process cf 
section 
breakdown structure influenced ware templates reuse policies include customer performer roles 
carlsen show conversations modelled apm pluggable actions 
workware allows simplify modelling conversation steps representing decisions typical conversation patterns workware standard enactment semantics 
modelling decision making responsibility roles customer performer clear similar role oriented modelling 
interactive enactment holistic enactment rules avoids criticism language action approach cf 
section 
workware adopts information sharing opposed message oriented approach control constrain communication users 
decision oriented process modelling explicit representation decisions key enabler interactive activation mechanisms described thesis 
decision oriented process modelling proposed research prototypes 
section saw issues positions arguments capturing rationale decisions captured loops 
approaches complement workware capture argumentation reasoning key decisions instance selecting template reuse 
modelling decision making loops decomposition workware decision connectors context issue alternatives outputs related resources available starting point argumentation articulation 
models form generic breakdown structure executive automatic xor manual choice contexts similar reuse decisions section 
supports manual automated enactment workware flexible allowing situated automation boundaries letting users override executive plans partially automate choices 
unspecified decisions allow partial articulation uncertain process fragments 
process modelling languages role oriented workware adopted technique graphical containment denote responsibility 
main difference rad workware primary structure organising models roles breakdown 
workware models visualised role oriented manner 
processes communication negotiation administrative routines breakdown role structures aligned 
flexible knowledge intensive find structures basic stable roles 
object oriented process modelling cf 
section utilise large number different diagrams reflecting need provide suitable dialects different modelling perspectives 
external facilitates different views interfaces integrated model substantially simplifying conceptual framework 
solution obeys principles semantic holism perspective integration 
interactive modelling languages section turn process modelling application interactive modelling principles software enterprise modelling 
aim show proposed principles enable simpler flexible articulation domains 
semantic holism enterprise modelling metis generic enterprise modelling gem template reflects years experience utilising open enterprise modelling tool 
metis allows user organisations add constructs generic ones template elements gem harvested number different industries 
openness metis tool facilitates depth studies 
gem consists modelling domains reflecting different aspects enterprise 
domains contain total object types 
investigate extent semantic holism help reduce number 
object types decomposed 
gem utilises semantic holism limit classification decomposition relations separate types composite atomic objects 
exceptions product competence information domains 
objects relationships metis models instances 
means separate modelling constructs classes included cutting number constructs half 
exceptions rule 
far gem template utilise semantic holism quite 
examine set constructs closely different picture emerges 
process modelling different schemes available flow logic language idef workflow language operational models ipm domain integrates concepts 
integrating dialects remove types 
document types properties replace classification encoding scheme making language flexible 
cases separation types derived context 
online offline documents stored differently catalogue parts external product items machines tools just systems different context organisational positions reflect similar relations process roles goals intensions requirements combined difference expressed relationships objects 
generalisations exist purpose articulating common roles number different types unit 
generalised types may useful expressing uncertainty achieved means 
reflection allow concept property information element label represented metametamodel constructs 
analysis shows semantic holism allows remove types gem loosing expressiveness 
principles chapter applied 
may course pragmatic reasons including different types gem simple users understand express language 
templates different default properties achieve flexible manner 
simplifying uml semantic holism uml standard visualising specifying constructing documenting software systems applications 
analysis uml suitable means evaluating generality modelling approaches proposed thesis 
discussed chapter uml applied enterprise process modelling 
current version uml suffers number weaknesses especially important interactive modelling including size complexity 
uml core version defines different primitives diagram types 
rigidity 
uml class making local instance modifications conceptual evolution cumbersome 
object may instance class behavioural structural features defined class level 
system oriented 
uml predecessors primarily developed easy programmers document code designs 
consequently primitives mimics object oriented programming 
primary aim section show semantic holism utilised fix problems 
simplicity context model element placed influence semantics 
uml number contexts defined structural modelling including class diagrams instance diagrams role collaboration diagrams stereotypes templates implementation diagrams 
contexts find alternative ways denoting objects class instance stereotype component relationships association link binding deployment relationship endpoints properties attribute values value 
lack holistic contextual semantics requires large set primitives duplicate encoding 
interesting note constructs extensibility evolution incomplete models utilise semantic holism greater extent rest uml 
instance templates defined atomically class constructs element includes template 
stereotypes attached modelelement classes associations roles instances 
proposal extensibility uml lets different packages describe separate perspectives elements different attributes 
order define domain specific profiles modellers extend standard packages individual element 
holistic contextual technique produces simpler models conventional subclassing 
clear clean concise proposal uml version takes holistic approach 
primitives support full richness uml improved extensibility 
proposal views model elements representations individual observable phenomena specifications general system components 
consequently basic model elements object association action defined instances 
generic type definition applies basic elements classification inherent 
attribute defined special kind association class special kind template 
separates inheritance implementation classes specialisation classification types 
aims defining precise formal notation perspective far better aligned interactive models existing standard 
shows semantic holism role play conventional modelling frameworks 
comprehensibility uml version semantics relationships class instance context dispersed definitions instance link inter context relationships defined place holistically context separately construct 
principled definition enhance readability specification easier novices grasp basics 
separation creates need lot specialised formedness rules ensure consistency general principles suffice 
flexibility inherent classification class defines features instances may possess typical lifecycle development difficult 
initial modelling may easy determine represented class template stereotype role 
migration metaclasses supported 
currently semantic holism evident contextual dynamic definition template allows migration class template transitions require 
increased holism automatic transformation model fragments contexts class diagram role diagram achieved simply moving context 
similarly scenario model instance context automatically generalised class diagram 
expressiveness removing differences instance class new capabilities automatically included making language complex 
instance features attributes methods declared locally individual instances 
summary brief investigation structural modelling uml shows semantic language complex poorly structured 
standardisation efforts direct expressiveness highlighted flexibility simplicity influenced uml design extent 
interactive conceptual modelling modelling framework proposed thesis combines number techniques previous research including instances dynamic property sets semantic holism interaction 
frameworks compared workware metametamodel section 
discussion shows techniques widespread process modelling 
original perspective incomplete evolving operational models extended theoretical frameworks 
instances combined incremental classification meet practical requirements customisation reuse property modelling coupled semantic holism contextually derived properties 
identifying practical techniques semantic holism contribution thesis 
summary sections shown workware provides extended flexibility simple language compared process support environments 
approach goes current systems facilitating partial evolving articulation processes 
language includes interactive features variety process modelling paradigms 
shows transformations language action roles rules objects integrated making language overly complex 
integration enabled interactive holistic semantics 
foundation tried tested modelling techniques argument favour feasibility approach 
shown instance modelling flexible assignment properties relatively new process support 
technique solves requirements previous approaches meet notably simplicity local modification conceptual evolution 
languages support incomplete workflow specifications rare operational language integrates spectrum unspecified fully predefined 
implications allowing incomplete models substantial removing problems serialisation external control lack discretion reported literature 
weaknesses workware language include heavy reliance user participation general language may complex early phases modelling 
reuse alternative visual representations models needed remedy problems 
exploring application holistic techniques uml enterprise modelling general applicability assessed 
approach reflects fundamental trend conceptual modelling focus pragmatic utilisation models linguistic referential aspects 
compare process modelling languages look expressiveness 
aspects flexibility simplicity user orientation seldom considered 
large complex languages benefit comparisons generally considered correct separate classes concept articulate 
general approach assessing process support systems proposed carlsen 
extend model quality framework discussed chapter including pragmatic social aspects addition expressiveness 
thesis focus integrated articulation activation interactive models requirements directly conflict conventional assessment method 
case case comparison workware languages performed 
similar shift formal studies expressiveness pragmatic engineering simplification experienced programming language research 
interactive activation workflow literature process model activation mainly deals fully automated enactment 
thesis proposes interactive enactment incomplete evolving models alternative perspective 
addition increased flexibility workware aimed integrating larger set model driven functionality 
interactive workflow enactment bernstein combines coordination theory soft constraints enabling flexible distribution control system users handle varying degrees model specificity cf 
section 
focus user articulation model interactors bernstein relies model reuse constraint advice 
targeting problems assumes users capable selecting alternative predefined processes expected model 
bernstein architecture complements workware different set model interactors 
goes implementation designed modelling language degrees specificity 
computational coordination mechanisms ariadne incompletely defined 
information lacking users asked provide runtime similar workware fallback mechanism 
simone claims significant user contributions runtime general reasonable 
conse quently modelling case studies performed researchers language concessions user participation 
construct similar workware decision facilitates focuses fallback questions 
hand designers process support systems stress potential visual models enable user involvement 
echoes utilise instance modelling support local modifications 
users participate model articulation unfolding activation models 
hand echoes offer better means process automation service modelling user interface content layout definition 
external infrastructure needs extensions direction filling gap workware flexibility hard coded automation 
argue separation workflow support formal procedures groupware support informal processes artificial 
orchestra engine identifies situations formalised solutions exist 
exception occurs orchestra matcher selects appropriate group interaction technique tools actors solve problem 
system includes interaction model activation portfolio 
group interaction support brainstorming cognitive maps deal making negotiation useful interactor external infrastructure 
orchestra relies models built external experts support articulation ad hoc tasks 
linked abstraction workflows law allow explicit modelling process participants authority change model enactment 
graphical location connectors denote decision making authority simplistic comparison law sophisticated mechanisms 
simplicity strength approach 
achieve rudimentary support complicating modelling language 
sophisticated support access control interactor 
case studies needed investigate level detail put explicit representations authority highly political issue 
obligations supports ad hoc evolving webs interdependencies tasks 
state transition task related transition task 
new obligations person group commits performing requested dynamically added time assigned performer longer modified 
contains richer vocabulary coordination workware system quite flexible 
opposite workflow research started ad hoc processes added support routine procedures 
lead different design simpler modelling language manual control 
inconcert stands commercial workflow management systems comes supporting ad hoc processes 
inconcert models process instances enabling process design discovery starting rudimentary template elaborating progresses 
modelling language may extended user defined subclasses attributes 
inconcert provides generic customised task user interfaces similar workware 
exceptions occur execution automated tasks reactive user involvement applied 
proactive decision making appears facilitated 
abbot sarin outlined number challenges generation workflow systems early experiences inconcert 
workware brings contributions integrating procedural non procedural utilising general mechanisms customised policies access control integrated process models evolutionary process development library reusable templates experience 
external infrastructure supports external activities meetings 
change management configuration version control challenge met 
formalism model driven state dependent object behaviour uses statecharts actively runtime alternative actions user 
language refined non atomic transitions interact users activation enabling users transition select alternative targets 
workflow prototype built top order support mix structured unstructured activities clearly interactive perspective 
support range explicit process process model guide partially fully automated processes 
order state charts interactive adds constructs exception handling allows partially structured models 
processes modelled instance level 
workware goes providing full scale support system just prototype dealing exclusively process dimension tasks flows 
consequently developed richer modelling languages dealt problems user articulation 
enactment semantics workware involves users decisions directly having change model just relies user involvement modelling 
workware enactment engine active state transition model hard coded system 
open rule enactment engine primary objective development efforts 
hier provide flexible reuse mechanisms discussed section 
adaptive workflow enactment adaptive workflow systems applied interactive techniques 
milano exceptions handled user controlled jumps policies control users access jumps negotiation support integrated exception handling process 
differences adaptive interactive workflow evident models interpreted 
milano requires allowed paths computed workflow model 
workware recognises set paths predetermined open system 
chosen path unfolds step step situated activation 
users may override current model explicitly making decision activating flow starting item 
reflection adaptive workflow enactment endeavors nets nets examples reflective workflow systems enable dynamic model interpretation 
allow engine configured runtime selecting set enactment rules enforced 
workware complements implicit 
integrates enactment rules basic enactment policy allow different rules applied different situations 
situation patterns recognised holistic view model 
users need explicitly switch execution policy 
just change model elements states reflect current situation 
instance user clicking start button ready workitem causes opportunistic involvement re interpretation violated flows 
experience indicates domain oriented approach simpler explicitly changing execution strategies 
reconfigurable nets class petri nets dynamically modify behaviour rewriting components 
nets boundedness soundness determined primary objective guarantee model enacted closed system 
flow relations model depend marking set tokens model form dynamic semantic holism achieved 
enables routing decisions process instances depending amount currently queuing different parts process 
framework utilises reflection metaobject protocol support programmers adapting workflow definitions changing business needs 
design extending flexibility baan workflow engine shoot tip activities trigger meta activities defining steps process 
shoot tips growing points process model allowing ad hoc modelling predefined places 
external project similarly modelled meta process project planning changes allowed place model 
allow task shoot tip supporting concurrent modelling execution 
similarly planning tasks modelled just ordinary tasks 
baan jumps meta level exceptions arise providing transaction support implemented external infrastructure 
exception handling adaptive wms exception handling cf 
section area adaptive commonly utilise interaction users 
emergent processes cause frequent exceptions systems 
cugola argues deviations inconsistencies tolerated supported process models systems handle temporal deviations complete model 
workware treats exceptions rule game lacks sophisticated mechanisms controlling handling rule violations 
exception handling interactor useful extension external infrastructure 
borgida murata relevant respect 
define dynamic classes states task may define rules primitives 
similar dynamic classification scheme intensions available workware 
state transition model matches integration straightforward conceptual level 
workware framework handles reuse exception handling rules procedures 
user customisation workflow interfaces highlights importance accommodating personal preferences domain nuances workflow systems 
develop multi level preference model customised instances system components selected different workflow states 
workware customisation features utilise dimensions current state reuse framework general 
hand put user interfaces user tailoring 
workware just provides raw data object editing facilities policies specialised process driven interface needed 
extending activation enactment tools provide complete collaboration support workware prototype 
instance orchestra obligations milano provide richer integration conversation tools shared workspaces 
strength workware lies alignment email internet technology simplicity service concept allows uniform configuration access internal external functionality 
integration external infrastructure provided sophisticated communication support context workitems processes 
integration workflow awareness notification proposed number researchers 
goes elaborating detailed usage scenarios component plays role articulating interplay awareness enactment 
workware awareness customisation approach inspired utilises holistic event propagation complex structures greater extent 
inconcert intermezzo specialised approaches combined workflow access control flexibility reusability implementation 
project management prototyped law inconcert integrated ms project 
time resource project management designed implemented workware 
interactive workflow architectures layered workflow architectures previous section shows workware system extend active support enactment 
novelty workware architecture lies interactor concept 
captures integration process articulation activation 
key feature interactor assumes complete control model 
different interactors complement context dependent manner 
architecture separates functionality model objects strategy design pattern 
assignment functional features model objects determined policies 
flexible binding enables personalisation contextualisation 
endeavors similarly decouples object data handlers control behaviour 
flexible environments directly map model elements software components 
software agents distribute functional support semi autonomous components 
agent degree autonomy adaptability interacts environment 
number research prototypes applied agents flexible process support 
coordination language facility clf multiple agents interact facilitate distributed enactment virtual enterprises 
alliance provides similar malleability distribution software intensive processes utilising fuzzy logic reason uncertain incomplete models 
alliance architecture includes agents user interaction tool integration enactment timing monitoring process change decision making 
agents dynamically assigned tasks process model activation separated articulation agents designed model interactors 
current workware implementation number limitations 
lacks rich model driven integration external systems standards object man agement web services 
utilisation interfaces major problem conceptual alignment standards modelling language 
scalability key problem 
flexibility instance metametamodel may cause performance problems 
external case studies experienced poor performance large models stored files web repository 
file storage fits access patterns modelling tools performance demands finegrained access 
straightforward define relational database schema workware metametamodel experimentation needed verify model objects typical server configuration support 
shortcoming current external infrastructure poor support distribution functionality multiple servers 
especially important inter organisational cooperation ownership sub processes distributed partners 
number commercial systems research prototypes distributed workflow enactment developed 
concentrated logical architecture system physical level 
evident interdependent local autonomy may demand physical logical distribution 
alignment infrastructure research area major challenge 
activation approaches workflow management area investigating model data driven flexibility 
section gives brief overview flexible groupware information systems 
reflection knowledge systems operational logic stored data programmed software 
reflective systems expose representations logic users allow modification logic 
reflection applied implementation level groupware toolkits increasing application programmers control 
approach reflection applied modelling level 
metaobject metamodel interfaces users add remove properties instances classes update classes modelling language interactive models bring flexibility users metaobject protocols bring flexibility programmers 
reflection implementation level useful extension increasing level automation infrastructure 
customisation number tailorable information systems apply techniques described thesis 
amulet garnet instances primary objects shows utility feature composition customisation configuration extension 
feature composition allows properties behaviour features added dynamically objects 
systems apply software oriented terms customisation interactive modelling utilises domain oriented language 
defines framework domain specific visual languages operational semantics 
hypertext metametamodel consists objects relationships 
object type users define model view controller aspects 
hy substrate hos flexible hypertext system 
facilitates incremental formalisation users 
starting unstructured model users may add visual textual features see fit 
progresses text converted lists objects attributes relationships inheritance 
hos uses prototype inheritance facilitate 
external support incremental formalisation modelling level sophistication workware metametamodel capabilities hos 
techniques thoroughly validated 
oval framework cooperative applications 
basic constructs objects views agents links 
usage experience oval shows nearly time user wants perform schema operation adding attribute setting default values context specific instance 
caused oval include reflection operations instances remaining separate class schemas instance data 
workware supports objects links attributes user interface policies control dynamic composition views 
pure instance metametamodel simplifies customisation compared oval 
policies media mechanisms groupware design mechanisms directly support existing practices cases inflexible 
media tailored suit participant needs making cooperation policies protocols adaptable runtime proposed alternative metaphor 
scheme model interactor workware controlled set policies 
policies model objects scopes determined reuse policies 
conventionally policies system oriented primary model elements 
language problem recognised general limitation deep user interface 
number organisational social issues interplay overcoming barriers user customisation designs integrate customisation performance important 
dynamic object models dynamically interpreted active object models utilised adaptive workflow systems 
experience indicate designs better intellectual processes manufacturing 
workware dynamic object models dom property strategy metadata visual builder design patterns 
allocating strategies types instances dom complex rigid 
workware reuse access control mechanisms configured mimic dom support flexible schemes 
summary assessment workware extends conventional techniques customisation integration extension model driven contextualisation 
visual model domain knowledge articulated influences operation system 
powerful reuse mechanisms semantic holism contributions design evolving tailorable information systems 
number systems provide better support automation current workware prototype 
interactive enactment concept improves support emergent ad hoc processes 
support seldom prioritised existing designs mentioned requirement 
complexity rigidity modelling infrastructures effectively hinders user participation articulation activation 
research projects adaptive wms proposed human intervention handling exceptions commonly resort fails 
utilising user involvement simplify languages mechanisms wms integrating support manual interpretation new research topic workflow community 
widening scope model driven support thesis contributes 
reuse process knowledge management section explores workware generalises current model reuse mechanisms points increased applicability entails 
pkm methods focus documenting experience articulation 
reuse activation methods exist lack flexibility 
workware integrated pkm solution need driven anchored practice 
emphasising accurate capture processes situated search selection appropriation templates project solution better matching nature knowledge intensive emerges 
workflow modelling domains features qualities different meta languages process support surfaced preceding discussions 
focus harvesting reuse 
workflow researchers emphasise publishing designs 
part conventional languages petri nets uml semantics defined 
rigidity system orientation complexity techniques motivate fresh look underlying 
endeavors adaptive workflow systems market 
metametamodel includes multiple inheritance dynamic definition properties behaviour enabling better support reuse traditional class instance model 
endeavors workware separate object data behaviour facilitating reuse aspect time 
harvesting accomplished category promotion instance model elevated process specification level new template 
attributes methods defined instance level endeavors 
workware simpler metametamodel allows local modifications general inheritance 
systems change propagation delegation dynamic change 
defines behaviour class level instances dynamically added removed classes 
property defined class multiple inheritance needed combine features object 
properties classes modelled aspect utilised inheritance similar workware 
separation classes instances comprehensible 
lack mechanisms lifetime sharing propagation classes instances limitation 
method engineering metamodelling means adapting general methodologies particular projects 
metaedit commercial case computer aided software engineering shell performed successfully adapting modelling number domains 
metaedit uses object prop erty role relationship metametamodel 
conceptually level instance oriented metametamodel workware 
suitable defining modelling languages set classes offer limited support modifications extensions 
instance modelling conceptual modelling parsons wand instance models classification theory important source ideas thesis 
criteria classifications assumption complete object population specified 
complete models criteria theoretically sound classification structures defined 
open evolving model allow specified classes represent properties known users articulated model 
discussed section need incremental evolving classification structures motivates intensional extensional classes workware 
opj operational objects instance modelling approach 
models operational workflow modelling 
opj targets software development runtime flexibility interactive operation 
instance models system level class level domain models 
reuse parameterised building blocks facilitated levels 
workware facilitates local modifications domain level 
semantic holism introduced semantic holism conceptual modelling order capture problems global understanding concept creation processes subjective points view conceptually closed information systems 
concept language defines new concepts incrementally primitives existing concepts intensional containment relations 
relations express specialisation composition properties associations 
concepts classified objects properties relationships making metametamodel extremely simple 
ki distinguishes extensional members intensional properties hybrid modelling languages 
concept purely intensional workware hybrid 
ki concludes intensional languages map semantics databases hybrid languages suited real world dynamic semantics 
workware allow cycles classification hierarchy cancellation inheritance meaningful 
intensional containment ic concept said asymmetric acyclic 
ki notes may case due kinds relations ic represents 
containment structures concept properties relations composition provide theoretical foundation generalised inheritance scheme reuse relations proposed thesis 
allowing reuse property part relations semantic holism achieved frameworks 
summary section shown workware metametamodel compares favourably existing modelling frameworks 
evolving ambiguous incomplete nature interactive models motivates differences approach previous research 
survey shows individual techniques applied workware applied tested systems 
process knowledge management workware policy controlled framework lifetime sharing reused features compared previous research process model inheritance 
layered policies state art survey section identified obligations layered policies solution relevant interactive process models 
workware system implements multiple cancellation inheritance 
multiple layers metaobjects framework complex rigid objects layer inherit 
obligations bind templates instances dynamically surrogate rules 
rule semi automated reuse feasible workware approach reuse decisions require number features currently implemented mapping parameterisation rules reuse policy priorities defined rules 
hand interactive approach allows greater user control reuse require interactive surrogates obligations 
workware aspect oriented scheme reuse users reuse breakdown structure template 
process handbook process handbook ph project probably comprehensive approach process knowledge management date 
library process models organised dimensions specialisation decomposition support alternative ways working 
project developed rules specialisation composition exception handling flexible workflow 
ph coordination theory taxonomy different coordination mechanisms heavily utilised 
language pif cf 
section fit eeml 
integration ph tools repository external infrastructure feasible 
process add tool handbook provides interactive support generating new process variants 
lets users combine alternative specialisations sub activities process select different coordination mechanisms flow dependencies model 
approach existence rich repository process templates 
user articulation harvesting local modifications scope 
bootstrapping new organisation requires large initial effort build critical mass low fidelity early support provided external infrastructure 
workware dynamic multi dimensional classification structures situate navigation structures alternative generation handbook 
characteristics current situation ad hoc classification structures generated increasing number combinations important early phases meeting current needs accurately 
process model specialisation specialisation rules process handbook follow closed system semantics model represents happen 
specialisation defined subset relation range behaviours articulated model 
users specialise models removing alternatives large general template 
interactive open systems follow conventional object oriented semantics incremental definition specialised models add details inherited 
general models simpler easier understand capturing specialised templates common accumulating detail 
interestingly current handbook follow open approach original design utilising decomposition object specialisation object removal 
workware generalised inheritance define greatest common denominator gcd common multiplier lcm generalisations cf 
section inheritance specialisation hierarchy respectively 
similar transformation rules proposed petri net inheritance section 
rules allow addition new elements subclasses 
limitation workware cancellation inheritance automatic substitutability guaranteed 
evolving interactive models property important users expected control combination adaptation process models anyway 
automatic model assembly specialised parts attractive vision unrealistic knowledge intensive 
feasible users combine model fragments locally projects expect model general fragments strict specialisation hierarchy 
supported taivalsaari assessment strict inheritance limited utility complex evolving systems case studies show limitations strict inheritance process modelling 
automated processes formal subtyping rules play role 
software process semi automatically generates generalised models set particular models 
generalisations different degrees genericity defined threshold fraction individual processes subclasses contain elements general model 
strict process handbook scheme approaches range strict objectoriented inheritance deleted subclass 
gen opens degrees template specificity aligned framework 
usage experience software development indicates usefulness generalised models commonality illustrating potential situated interactive decision making global formal criteria 
object oriented process model reuse object oriented process framework favourably evaluated chapter 
class inherits attributes methods associations superclass 
straightforward define inheritance rule reuse policy ware 
places particular emphasis definition management associations associations organised inheritance hierarchy just object classes 
workware encodes links properties reified objects 
means links inherited alongside object just difference schemes stricter rules kind inheritance allowed arity may changed inheriting association classes related association compatible substitutable subtypes 
account discussion workware provide simpler flexible association inheritance scheme suited incomplete evolving models 
rule driven process configuration prove object oriented framework capturing disseminating engineering process know 
perspective engineering processes innovative individual dynamic interdisciplinary strongly interrelated strongly parallel iterative communication intensive anticipatory planning intensive uncertain risky approach articulation process performers external experts 
process models project specific instance models 
partially automated construction rules relate constraints application context process building blocks 
framework flexible process handbook aligned interactive modelling 
handbook requires detailed process models sufficient new domains 
workware support articulation process performers goes prove supporting project specific metamodels local definition object attributes types relations 
prove modelling language complex utilising semantic holism lesser extent 
construction rules capture process design rationale traces construction rules applied result constraints 
construction meta process extends reuse decision modelling proposed section constraint advice 
approaches conceptually technically aligned integrated 
inheriting identifying exception handling alternatives exception conditions handlers reused organisational decomposition resource roles classification structures 
design motivates workware multi dimensional inheritance framework 
ad hoc emergent processes require flexibility aspects process just exceptions framework generic 
nature process model guidance reuse nature supports situated guidance execution requirements engineering processes 
process improvement anchored practice process traces input template modelling 
guidance engine performs pattern matching current context set reusable process chunks repository suggesting alternatives users 
engine supports situated composition processes templates allows deviations intended process ad hoc decisions 
chunks accomplish common goal grouped clusters 
clusters represent relations templates bundles process hand book represent xor relations 
clusters may associated different modes determine sequence chunks depth breadth 
expressed reuse decisions workware 
workware separate descriptive traces prescriptive models integrated representation process history plans current state useful planning coordination learning 
na ture hand emphasises selection predefined alternatives capture underlying rationale 
workware captures histories events modelled objects currently utilise information reuse customisation 
process prove support nature offers extended support automated reuse compared workware meta process inter actively resolved reuse decisions 
hand poor support user articulation new ways working common weakness systems 
integrating process repository external infrastructure explore approaches 
multiple models levels views aris architecture integrated information systems framework event driven process chains epc cf 
section integrate process engineering knowledge management planning control workflow enactment item performance 
similar external infrastructure contrary workflow research aris uses modelling language levels bridging gap business process engineering workflow enactment 
proposals uml similarly advocate simple integrating core model current separation primitives diagram types claiming needed tool interoperability activation model editing visualisation 
weske advocate separation business process analysis workflow design models focus different aspects 
time case studies report lack integration organisational technical aspects important problem 
cases decided workflow management system due severe difficulties 
design testing phase severe delays sixth sap aris ready operation 
approach separate analysis design supported empirical data 
integrating scheme supports different views common process model analysis design combines specialised support integration organisational technical aspects 
fully automatic translation analysis design seldom feasible interactive translation steps automated performed manually useful 
manual mappings explicitly captured maintained process evolves cf 
section 
single modelling language multiple views fulfils requirements 
workware flexible metametamodel allows multiple levels views added needed new properties relations classification structures 
compared aris approach simpler instances defines structure properties behaviour levels abstraction 
composition process model fragments technically major contribution process knowledge management thesis inheritance framework metametamodel 
composition process models enabled interfaces connectors resource roles developed predecessor apm 
language preserved features 
workware extends apm semantic holism 
implies richer automatic adaptation model fragments take place put 
instance derived properties implemented reuse policies may cause fragment customised context placed 
open process components opc prototype allows locally encapsulated semantics component 
workware default takes open systems approach component see detail component 
access control policies may defined ensure encapsulation partial sharing process components performed different partners virtual enterprise 
compared opc workware strengths include simpler models language propagation reused features delegation discussed 
developed protocols interaction related tasks 
discovered coordination constituted important fraction typical process models sought isolate coordination connectors separate content 
recognising effective architecture needs deal connectors components connected approach enables reuse re composition tasks connectors 
coming software process community follow closed system assumption compile process code limiting runtime flexibility 
hand decision connectors workware benefit richer interaction protocols rule driven coordination concurrent tasks 
process model reuse techniques multi dimensional process models mobile prototype motivated separation reusable features aspects workware reuse framework 
mobile supports composition models aspect semantic holism workware captures inter aspect dependencies better 
instance organisational structure process may reused breakdown structure functional aspect operational aspect tools may derived informational aspect data manipulated 
interactive enactment workware allows execution processes aspects fully predefined 
relevant techniques process model reuse include case reasoning patterns 
configuration management version control model templates feature dealt thesis 
apm outlines approach problems applied workware 
evaluation summary part thesis reported different forms evaluation implementation modelling language metametamodel activation semantics workware prototype external infrastructure demonstrates proposed concepts designs feasible 
application prototypes case studies shows general usability examples process models developed users indicate specific techniques applicable 
experience cases demonstrates relevance requirements chapter 
detailed comparative analysis workware existing solutions workflow modelling enactment reuse demonstrate originality approach 
evaluation identified number limitations addressed research development 
elements design customisable enactment reuse policies fully implemented number areas studies needed examine relative merits competing approaches 
usage experience shows need non technical contributions modelling meth organisational measures establish sustain user participation articulating processes 
chapter root problem design model driven information system planning coordination cooperation management performance knowledge intensive project 
previous research workflow management conceptual modelling social organisational learning directed efforts designing open transparent system 
users actively participate articulating plans interpreting elaborating plans situations arise 
previous researchers tried improve communication coordination ambiguous uncertain situated contested social environments formal precise models 
taken opposite approach 
bringing language computers human interaction interactive modelling requires computerised models approximate human languages 
treating processes software treat software interactive processes 
leads research objectives articulation develop modelling languages simple flexible allow varying degrees specificity 
activation develop process support system activates user oriented evolving incomplete models providing useful contextual customisable functionality 
reuse develop framework enables interplay local modifications process improvement anchoring knowledge management practice experience 
seeking frame problem precisely set requirements literature study explored organisational contexts systems function 
theories concerning social construction reality reflective practice communities practice helped understand ambiguity necessary learning communication coordination construction shared understanding 
unavoidable gap complexities practice process representation highlighted 
case studies showed barriers articulation user participation workflow management process modelling knowledge management information systems development successfully achieved wide range industries 
approach feasible 
contributions sch agenda reflective research thesis contributes repertoire building 
interactive models exemplary problem frame solution received little attention information systems engineering 
looked differences conventional development participatory design interactive model construction contributing frame analysis designers attack problems 
contributions thesis fall different categories including general approaches new explanations perspectives new functionality new implementation techniques 
wide variety expected engineering projects span understanding user organisations requirements way technological challenges methods actual implementation 
drawback vertical studies course limited horizontal breadth 
realistic scope investigate relevant areas levels 
consequently aspects contributions proposed areas new areas interactive models workflow management application particular areas point new considerations combinations bringing clearer understanding benefits limitations 
general approach interactive models conventional built low maintenance long life span obstacles organisational change innovation 
rigid dynamic general meet unique local challenges 
consequently minor portion functionality powerful specialised features encode assumptions usage environment seldom fulfilled 
current techniques building flexible systems include prototyping user development open systems connectivity 
inadequate connected coherent framework focuses emergent character organisations 
thesis argues interactive models function framework 
facilitating user participation modelling allowing users contribute interpretation models flexible evolving system feasible 
behaviour supported system longer fixed prescribed program code 
open interactive architecture allows customisable software services added needed 
models provide context software services defined user domain oriented terms 
engineering relies heavily conceptual modelling 
thesis contributes elucidation concept interactive models 
interaction introduced wegner theoretical framework computing conceptual modelling :10.1.1.57.9269
thesis points interactive models design metaphor flexible user friendly information systems 
defines interactive models models available users control behaviour system point essential duality articulation activation 
project uncovered interactive modelling requirements challenges identified suitable modelling techniques 
knowledge practical exploration interactive models previously carried 
interaction framework highly contested scientists really say new theoretically provides new perspective different way framing describing analysing solving problems 
demonstrating practical utility design essential 
articulation order facilitate process modelling users simple user oriented flexible languages needed 
thesis identifies number techniques purpose 
semantic holism semantic holism expresses meaning combined interpretation elements model 
popular modelling languages today provide limited degrees holism rely atomic semantics meaning model element defined element 
concept introduced contributes identification holistic modelling techniques property modelling properties dynamically attached object instances constellation modelling meaning expressed constellations objects affecting interpretation context sensitive semantics model elements change meaning context placed 
modelling framework designed implemented workware demonstrates techniques result simpler flexible language meeting requirements multiple views domain specificity evolution models semantics modelling languages 
study related show techniques wide range application 
explicit decisions enable interactive activation decisions control interpretation model 
explicitly articulating decisions model elements manual automatic activation integrated 
elements existing languages implicitly capture decisions conventional modelling languages transformed interactive ones 
decisions simplified process modelling language apm 
workware location decision objects defines decisionmaking authority responsibility 
addition workflow scheduling reuse resource allocation decisions modelled 
case studies show constructs useful 
technique helps view modelling process meaning negotiated 
feasibility articulation users researchers claim users trusted change workflow models correctly 
thesis refutes claim identifying number case studies users change models 
explanation phenomenon offered complexity changing models class level take account past ongoing processes follow model prevents user modelling adaptive workflow 
consequently problem need apply emergent workflow users model unique project 
usage experience supports claim 
activation activation interactive models support knowledge generated new design perspectives 
contributions primarily deal behaviour semantics interactive models information systems architecture 
interactive activation interactive activation introduced order allow incomplete evolving models 
scheme users software components cooperate interpreting models situations arise 
software activate fully articulated model fragments human involvement needed ambiguous parts 
humans override prescribed behaviour faced unforeseen exceptions situ articulation 
exemplified interactive workflow enactment allows workflow instance models evolve past different degrees preciseness detail 
interactive enactment implemented case studies 
compared related offers simpler comprehensible model open system need predefine potential enactment pattern 
holistic activation realisation semantic holism core feature interactive activation contribution 
interpretation model elements depends current states surrounding elements richer situated functionality enabled 
activation emerges local interpretation individual elements better matching contingencies 
ability holistic activation handle complex scenarios conventional atomic solutions demonstrated 
tailoring user oriented concepts interactive model domain user oriented concepts applied tailoring system 
tailorable languages contain system oriented primitives allowing users assemble components combine features 
workware interactive models utilised system 
system oriented customisation policies introduced solution simple straightforward 
semantic holism enables implicit reconfiguration activation controlled current state model 
policies allow explicit reconfiguration interactive models facilitate implicit partial dynamic reconfiguration 
workware integrates techniques 
integrating multiple model interactors aspects model interactor software component interactively activates parts model 
thesis shows multiple interactors offering complementary interpretations model combined interactive architecture 
property modelling semantic holism facilitate integration multiple perspectives complicating language 
demonstrated workware architecture combines workflow groupware components provide richer coordination functionality 
semantic completeness correctness revisited interactive model activation notions model completeness correctness revisited 
dealing formal semantics emphasise real world semantics model says real objects refers 
interactive model complete longer represents performed 
longer subject interplay articulation activation 
exceptions planning need articulated 
similarly process history part model fixed 
formal semantic correctness longer prerequisite activation users handle ambiguities incompleteness inconsistencies 
interactive emergent workflow difference adaptive dynamic interactive emergent workflow described clearing conceptual confusion prevailed area 
adaptive systems aim making top workflow control powerful emergent workflow supports bottom articulation enabling em empowerment partial group autonomy 
conceptualisation points new directions research outlined 
reuse process knowledge management thesis reuse process models viewed interactive process 
aim provide complete generic models facilitate articulation composition template fragments process participants 
km strategies take post hoc documentation approach asking learned project 
goal components reusable time production 
argue need driven reuse asking past experience relevant situation better matches open situated nature cooperative knowledge incremental classification instances primary objects order allow local modifications workware defines structure behaviour features model elements instance level 
model element reused 
classification structures dynamically constructed meet local evolving requirements inherent part object definition 
main purpose help process participants identify relevant past experience model fragments suitable current situation 
experience shows meta levels difficult modelling concepts grasp important simplification 
generalising concept inheritance inheritance conventionally couples reuse specialisation 
framework reuse may take place de composition flows relations 
realisation model aspects propagate relations triggered specific user needs projects 
detailed design shows scheme implemented destroying domain model correspondence instance modelling facilitates 
reuse policies policies control dynamic binding behaviour rules model elements enactment user interfaces access control 
reuse policies define reusable aspects propagated modelled relations allowing user organisations customise semantics inheritance 
basic reuse policies defined requirements different case studies 
user interface customisation access control reuse policies implemented 
limitations directions research reflective practice engineering research generates new problems solutions 
implications research usage evaluation methodologies design implementation model driven process management 
validation thesis concentrates technical component sociotechnical information system 
organisational social human sciences surveyed order establish requirements long term studies interactive models real tions carried 
discussion appendix propose case studies controlled experiments capture complex incompletely understood realities new practice 
subjective storytelling interpretive fieldwork appropriate positivist studies formalised hypotheses 
point view designer questions investigated motivate initial sustained user participation articulating sharing interactive models 
barriers user participation overcome 
extent expect user innovation model articulation process improvement language evolution 
characteristics organisations able interactive models opposed 
interactive modelling influence cooperation communication culture different organisations 
cases openness increased people withdraw articulation sharing descriptions 
aspects suited articulation different organisational settings aspects better handled informally 
aspects gap models reality wide models useful 
level detail preciseness useful 
project plans process models useful kind interactive models aspects product information models suitable settings 
kinds model driven functionality useful different situations 
roles performed interactive models 
need system experts help users customise solutions process experts facilitate articulation 
software system best accommodate roles 
interactive models utilised organisational change processes 
methodologies methodologies interactive modelling depend closely social organisational settings models systems applied 
external project developed general methodology customised methods needed integrating project management monitoring resource control methods interactive models solution provision enabling consultants help organisations customise extend interactive modelling systems emphasising user participation 
business consulting introducing interactive models way transforming organisational structures processes cultures 
modelling novice users simplified tutorial 
methodologies go user guides designing learning material workshop formats 
modelling conference approach interesting starting point 
successfully applied process models needs extensions sustain participation articulation workshops closed 
interactive models offer unique opportunity methodologies processes 
utilising process knowledge management features may grow methodologies practical experiences project managers consultants users 
duality community building repository building needed 
design design ideas put forward main contributions thesis 
current development workware directed situating interpretation models adding complexity language 
includes extending automatic support decisions include constraints operational rules utilise temporal considerations milestones timers delays 
model elements currently manually activated 
approaches help situate interpretation include explicit representation vagueness uncertainty changeability model elements 
promising extensions refinements architecture modelling framework include open model editor fully utilises semantic holism instance modelling 
metis adequately support properties constellations contextual semantics 
improved process visualisations manage coordinate large projects 
supreme visualisation tool starting point 
textual model explanations textual articulation investigated 
text visual models integrated interactive hypermedia 
integration organisational resource planning systems utilising competence skill profiles training plans allocate suitable people project 
integration document information management systems utilising process structures information retrieval 
dynamic fine grained utilisation available software components alignment web services business object standards 
integration time project management functionality utilising date representations current state project 
capability refer past states system express relations model interpretation 
improved conversation negotiation support integrated standard email users needn install communication tool 
support process analysis metrics assessment methods including simulations take process history account system dynamic models capture holistic interdependencies tasks products resources 
improved support model driven task automation utilising detailed enactment rules 
current language provide expressiveness workflow management systems detailed automation adequately supported 
guiding warning systems monitor enactment process provide feedback users rule violations exceptions process models utilised decide needs know situations 
deontic rules integrated apm help approach objective 
interactive multi level multi user undo functionality intertwined model articulation activation 
transaction support added 
template management configuration versioning change control 
interactive meta process approaches problems promising 
utilising interactive enactment workware components existing infrastructures originally designed interactive models 
designs deal developing new model interactors 
principles semantic holism model interactor user levels guide designs order provide simple flexible solutions 
process knowledge management process model management reuse area current designs needs extensions 
particular workware needs model repository allows fine grained access model objects acceptable performance 
experience search tools classification systems library science utilised support identification selection suitable model templates 
process model patterns investigated approach capture suitable usage context different models defining general reusable structures contextualised inheritance local models 
application case reasoning semi automated template selection interactor looked 
storytelling key process informal knowledge dissemination organisations 
case studies show complement explicit organisational procedures 
knowledge management general benefit interactive models perspective organisational improvement explicit models integrated project group level models capture situated experience 
interaction currently replacing automation km tools 
implementation workware prototype survived years experimentation re implementation needed full commercial utilisation 
challenges involved implementing commercial product include improved performance model data management 
experiments needed verify workware metametamodel handled relational database system 
transaction support undo services needed 
distribution functionality processes different servers supported 
user interface better utilise xml stylesheets user interface defining new forms components developed 
integration external tools web services improved 
started attack challenges 
generalisation thesis concentrated interactive models processes briefly looked interactive product models organisation structures ontologies investigating applicability contributions thesis domains major challenge research 
application interactive modelling systems development explored 
interactive model execution translation promising validation techniques 
interactively executable prototypes easy generate fully automated ones 
seen interactive principles contribute simplify systems modelling uml 
core problems thesis quite general motivating user participation providing simple transparent systems users control supporting essential activities knowledge automating routine parts 
common approach bringing language computers human interaction replaced research aiming computer languages human 
appendix research methodology research aims produce knowledge original grounded tested theories practically useful 
objectives rise number different methods science developing theories give rise hypotheses tested 
engineering developing testing refining solutions problems 
empirical methods data collected verify hypotheses science hypotheses derived theory 
analytical methods formal science formal theory deduced axioms application laws logic 
engineering thesis 
empirically oriented scientists currently challenge position engineering research software engineering computer science cs 
appendix argues assumption reasonable need engineering research 
fundamental problems software development solved science 
core argument practitioner perspective emphasising management complexity key challenge 
scientific research method distinguishes science scientific knowledge ordinary practice knowledge 
scientific knowledge considered scientific method tests identifies shortcomings corrects 
coarse depiction scientific method 
shows generative characteristics process new knowledge new problems starting points outcomes 
core activities include hypothesis development testing evaluation 
research disciplines assign equal importance step process suitable framework discussion 
available knowledge problems hypotheses test techniques testable consequences evidence 
scientific method 
evaluation hypotheses new body available knowledge new problems concepts scientific knowledge takes form symbolic conceptual representations 
concepts units thought primary medium science 
scientific process deal formation elaboration manipulation concepts 
empirically concepts tools identifying grouping objects 
concepts linguistic representation terms language refer objects properties physical world summarised table 
level unit links linguistic term term designates concept conceptual concept concept thing physical thing property phenomenon table 
semiotic levels 
meaning concept determined set physical ideational objects refers intension 
intension specifies properties apply concept 
concepts synonyms set intension equal 
concepts categorised logical strength ability express facts precisely individual definite indefinite class relation comparative quantitative concepts 
holistic reality formal theories due limited capacity observe goes world reality holistic causal relations appear mutual circular non linear observable cause indefinite number effects 
illustrated 
example look apparently linear causality users participating modelling increases visibility 
organisational factors software tools access control mechanisms may prevent straightforward causality 
mere fact visible may bring counter measures users withdraw modelling fear increased explication lead increased organisational control micro management motivate participation sharing experience brings prestige self 
network effects peer pressure colleagues known influence user participation 
descriptions complex contingent organisational realities incomplete generalised 
issues regarding user participation visibility elaborated chapter 
model real world complete sense captures may relevant phenomenon 
reductionist scientific concepts precisely related definite mechanism holistic real world concepts related mutual non linear circular causal relations 
holistic scientific concepts 
science hand tries see world eyes omni noninterfering objective observer 
scientific hypotheses testable variables holistically related variables 
hypotheses generally formulated linear cause effect relations conventional logic 
implies scientific concepts fundamentally different ordinary concepts clarified 
scientific concepts linearly related time directly observable experiment assume position objective omnipotent observer 
real situations relevant variables seldom adequately known precisely controlled 
real situations complex effective action strongly urged permit detailed study 
controlled experiments laboratory observe phenomenon approximates scientific concepts observed directly 
thoroughly controlled experiments unknown factors limitations measuring devices cause non determinism 
implies scientific concepts theories capture real world objects refer subset characteristics 
practice oriented social scientists concepts duality classes dichotomies theory building 
tension holistic scientific evident areas relevant information systems engineering 
disciplines experimental research reflect different approaches issue empirical research deals observable concepts cases requires concepts defined way measured 
factual science builds systems reductionist theories tests laboratory limited extent real world 
scientists derive observable consequences theories shown 
formal science builds systems logical concepts interrelated linear way 
laws logic universal 
empirical data contradict logically proven facts formal models say real world 
engineering attacks holistic problem situation 
due limited scope theoretical principle personal skills intuition social dialogue folk wisdom rules thumb analogies valued techniques 
perspective engineering research find suitable balance attacking holistic problem hand time documenting validating solution manner approaches science 
investigate balance kept research disciplines relevant thesis 
briefly discuss potential interdisciplinary research scientific holistic concepts 
interdisciplinary multidisciplinary concepts interdisciplinary research practice require degree shared language concepts meaning disciplines 
science practice require different properties language illustrated 
scientific concepts interconnected systematic theories indirectly validated experiments 
experiments require operational concepts defined tested 
criticised confusing meaning testability operational concepts hypotheses scientific non scientific empirical research 
theoretical formal operational concepts aspire unambiguous objective act immutable mobiles incapable translated 
immutable mobiles aimed preserving paradigms reflect controlling aspects term discipline 
scientific concepts lead multidisciplinary research community local defined vocabulary common language 
practice oriented concepts different role 
facilitate communication participation ongoing negotiation meaning disciplines communities 
concepts act boundary objects 
maintain identity disciplines having potential differently structured inside community 
ambiguous concepts invite participation process negotiating meaning practical interdisciplinary concepts act mutable mobiles 
role metaphors innovation example conceptual boundary objects 
holistic concepts allow interdisciplinary research partially shared language 
concepts may specialised local meaning community reflecting particular problems theories methods 
scientific paradigms maintained immutable mobiles creative revolutionary science needs dynamic concepts 
bunge notes conventional rule concepts defined prior scientific study replaced requirement objects study identified boundary objects 
scientific knowledge conceptual scientific progress requires conceptual evolution 
information systems engineering main objective information systems engineering improve methods practice system development 
research field utilises mix methods mathematics computing social human sciences wide range technological design principles paradigms processes developed industrial practice 
gives overview research paradigms 
follows categorisation adds separation interpretive fieldwork controlled experiments 
key separation social sciences 
interpretive qualitative methods ethnography case studies accepted information systems research 
engineering combines interpretive understandings reality normative propositions professional development 
human social organisational focus technical solution focus empirical science interpretive fieldwork computer science engineering defined problems reductionist positivist wicked problems holistic 
overview research relevant information systems 
investigating role knowledge software development notes formal methods mainly applicable defined tame problems 
notion wicked problems attributed horst rittel 
problems exact solution exists satisficing compromise conflicting goals sought 
wicked problems definite generally agreed formulation understanding problem developed alongside solution 
wicked problem unique novel requires complex judgement suitable level abstraction objective measure success completion right wrong solutions alternatives requires iterative problem solving strong moral political professional dimensions 
engineering research canonical objective science generation new tested knowledge technology main objective design solutions technological artefacts problem 
questioning distinctly technological ideas different content questioning scientific ideas 
assumption technologists technological ideas true works give rise useful 
reflective practice observed gulf theory practice conceptual methodological differences outlined indicate engineers learn colleagues interacting problem situation science scientists 
philosopher science states practical man acts decisions taken light best technological knowledge scientific knowledge remote irrelevant practice 
research test way design design way 
calls engineering education rooted design mathematics science 
survey experienced software engineers identified methods design processes ethics important knowledge mathematics science hardware ranked lowest 
sch gives excellent account engineers think act 
describes professional reflective dialogue problem situation new designs solution hypotheses continually developed tested 
attack wicked problems problem setting framing analysis understanding problem solving intertwined 
new proposal may contribute solving current problems building understanding problem trigger new perspectives ideas solution 
social dialogue rules thumb tacit personal knowledge paramount testing assessment 
subjective valuations aesthetics harmony parts solution important 
technological process explicit formal scientific method problem evaluation cycles rapid 
creative phases science concerned hypothesis generation lot common reflective practice 
idea formation hypothesis creation overlooked aspects scientific process empirical disciplines speculation disregarded 
repertoires action crucial framing problem generating new designs repertoires action designers learned 
repertoires contain exemplary solutions approaches perspectives gained practice education interaction practitioners 
software engineering design patterns ex represent action repertoire elements 
reflective practice creates new knowledge giving rise general principles adding practitioners repertoire 
reflective research perspective sch identifies areas practice oriented reflective research frame analysis concerned ways framing problems paradigms reality construction dominate profession discussion alternative frames values approaches professional community 
repertoire building accumulating describing exemplary solutions ways useful reflection action 
case methods business medical education exemplify form 
fundamental methods inquiry theories practitioners apply sense new situations commonly fit theories objective way 
research process reflection action involves inquiry learning cognitive affective group dynamic aspects 
description sense view engineering research complementary interrelated factual sciences 
engineering research takes pragmatic approach 
main criteria utility usability results claims scientifically tested 
main objective contribute repertoire action profession deliver new scientific theories 
science engineering debates scientists engineers commonly stated mature professional discipline firmly science tacit skills intuition individual creativity 
stable rules replace ad hoc solutions 
scientists ask ready uncover eyes look software problem scientific standpoint pointing measures repeatable experiments software science 
knowledge scientifically disregarded 
view engineering applied science see scientific inquiry path establishing software development engineering discipline 
discussion challenges view 
studies design innovation invention show science offers little assistance managing complexity generating new ideas 
distinctly technological concepts developed rooted underlying sciences including machine efficiency information network theory 
development new technology important object diverse fields philosophy history economics sociology organisational science 
defined area analysis 
investigates philosophy technology 
deal ethics practice philosophy science associated logic epistemology 
roots technology ancient greek combining art craft skill logos words speech reason 
separated habits just experience explicitly reasoned 
plato systematic scientific knowledge closely related 
classical understanding fundamentally oriented particulars efficient production things 
origin technology concerned design problem solving mass production clearly separate concept science empiricism 
heart technical activity irreducible nonlogical component 
sociological study technology emphasises social construction innovative concepts artefacts moving away individual inventor genius central explanatory concept 
historical studies justify perspective 
current practice argued science engineering intermixed disciplines discover apply knowledge 
division science technology seen social construction 
interpretative flexibility empirical data emphasised important aspect revolutionary science 
normal science hand seeks minimise interpretative flexibility empirical data 
similar distinction technology revolutionary inventions cause construction new systems conservative inventions improve components existing systems 
economic studies emphasise interplay product process innovation technological evolution 
model early fluid phase product designs compete level product innovation high followed transitional phase product variety decreases dominant designs emerge possibly standardised 
innovation manufacturing processes speeds 
potential efficiency quality improvement exerted industries may enter specific mature phase cost volume capacity matters innovation small incremental steps 
empirical analysis product features feasible appropriate dominant design established 
clearly products software industry entered phase operating systems relational databases 
workflow systems automating routine procedures transition phase flexible workflow management currently dominated product innovation 
organisational science engineering research shares orientation practical problems organisation management science 
engineers traditionally applied knowledge mathematics natural sciences organisational theory human social sciences 
distinction blurring information computer science 
information systems organisational design interdependent especially cooperative process oriented systems 
root mathematics tendency relate computing natural sciences information systems relationship organisation science relevant 
case studies order capture holistic reality situation case studies real organisations groups prominent place organisation science education 
various theoretical perspectives development organisation particular described 
kind research qualitative theories social sciences quantitative 
major problem case studies extent findings generalised organisations theory 
finding right case representative sample paramount 
reasons multiple cases combined comparative field study great number cases needed verify low level empirical hypothesis 
practical point view studies important contribute discipline repertoire action 
attempts increasing scientific content lead empirical paradigms accept meaningful directly observable data attempts theory building 
leads applicable results 
action research interference problems important problem organisational science interference researchers domain study 
action research accepts interference unavoidable 
interpretive approaches sees interaction researchers subjects best way gain insights practice studied 
active participation allows researchers hypotheses tested 
overview action research approach information systems discusses attempts introduce scientific methods disconnected theory reality making research results largely irrelevant 
points lack generally agreed criteria evaluating action research major problem 
concerns apply engineering research shares intervention complex problem orientation action research 
people classify engineering projects action research 
core difference remains action research uses action seek understanding knowledge engineering applies develops knowledge action invention ultimate objective 
recognising situatedness complexities contingencies organised activity multi perspective approaches draw variety sciences frequently applied 
integrative schemes sociotechnical systems developed organisation theoretical concepts derived underlying factual sciences 
concepts imported computer science 
computer science software engineering denning gives structured overview computer science 
challenges view efficiently automated fundamental question discipline arguing overlooks full richness human social historical contexts computer science deals 
algorithmic thinking representation data knowledge programming design basic skills discipline 
design connects skills concerns users 
commonly held position cs engineering science 
field interdisciplinary 
addition mathematics engineering science woven discipline formed relationships library science management science economics medicine biology psychology linguistics philosophy human sciences 
software engineering years term coined nature software engineering subject debate practitioners deal complexities real world systems scientists find answers formal methods empirical re search 
groups established early second conference software engineering 
debates counter productive may lead improved understanding shared values better research 
positivist theoreticians emphasise software development rational systematic disciplined automatable easy technically deterministic empirically testable 
argue strictly mathematical terms forbidden especially human analogies 
practitioners see essential challenges software engineering wicked problems requiring reflective practice 
strategies taming wicked problems prematurely locking problem definition disallowing changes requirements specifying problem objective measurable parameters treating problem just previous ignoring contradictory evidence simply declaring problem solved giving looking solutions just follow orders pretending just alternative solutions cast problem selection process 
strategies appealing short run tend fail 
software processes involves intellectual historically difficult counter productive 
research software process improvement aimed increase precision speed repeating events reduce dependency experts generally improve control 
illustrates automatable easy people unaware significance complexity people said 
terms software factory empirical software engineering illustrate scientists relate wicked problems 
push empirical computer science empirical positivist perspective currently gaining ground shown studies published papers funding agencies strategies professional certification schemes 
risk computer science increasingly theoretical imminent 
tendency favour basic technology oriented research applied user oriented lead practically inclined researchers toe line leave academy 
people argue favour experimental research commonly poor quality testing contemporary publications 
compare contributions empirically oriented computer science engineering oriented wicked problem scientific study 
practical utility results interdisciplinary nature problems reasons adopting empirical approach 
wicked problems attacked thinking tools methods useful tame problems 
typical example measure conformance requirements criterion design 
striving provide precise evidence scientists reduce problems tested available resources 
disregard wicked articulated poorly understood aspects parts problem challenging practice 
practitioners response research project different really valid response 
concerned matters real world theoretically critiques simply sound basis rejecting contributions useful 
ethnography software practice similarly noticed little importance ascribed arguments empirical evi dence 
complexity people rarely automatable easy people referring 
engineering research deal problems researcher uniquely qualified attack scientific research aims gather data independent researcher subjective interpretation 
stewart claims excellent questions experienced practitioner duplicate text 
standard computer science 
calls improved empirical quality difficult publish new ideas attacking wicked problems 
new ideas thoroughly tested compared existing approaches challenging include new ways framing problem previous 
finite amount resources knowledge time money empirical study existing approach hypothesis firmly rooted previous research easily achieve higher scientific rigor project developed new ideas 
deciding funding new research programmes publications peer review applications amplifies trend 
motivates views cs replace publish perish demo die 
computer science history experience wegner summarised historical development computer science research 
showed empirical research nature computing replaced formal analysis computing concepts increased complexity software lead engineering research developing tools methodologies practical management complexity 
average software costs total system costs estimated indicating growth software importance size complexity 
speed development distinguishes computer science disciplines existence empirical research formal science engineering increased temperature meta scientific discussions 
summarises history software development practice 
mid mainly technical discipline applying automation improve productivity 
second era lasted late emphasised effectiveness integration support 
analysis design replaced programming management core skills 
third era global networks collaboration process orientation knowledge management key enablers domain knowledge increasingly important 
variety complexity social dependence multiplicity skills increased need practice oriented research 
tichy point fact object oriented programming experimentally proven improve productivity quality software case studies disregard 
ask approaches popular practitioners despite lack conclusive evidence favour 
wegner postulated programming languages critical software development may non critical improvements marginal importance software lifecycle 
development supported hypothesis 
programming techniques regarded important research area empirical software engineering programming easily subjected controlled experiments problem framing design 
empirical studies able establish best paradigm programming premature award monopoly software engineering research general 
may possible separate software design implementation analysis design require engineering approach 
voas provides interesting account happen empirical scientific approaches take research area 
describes software quality community moved enthusiastic arena discussing ideas state practice major challenges conquered 
current conferences new ideas voas blames number proposed silver bullets state 
process improvement formal methods new languages object orientation metrics measurement software standards especially process standards testing computer aided software engineering total quality management 
advocates selling increased participation practitioners research validation real systems toy laboratory examples remedy problems 
theoreticians practitioners blame camp promoting breakthrough silver bullets 
scientists point proposed silver bullets empirically validated silver bullets 
practitioners think silver bullets exist rational deterministic empirically testable scientists claim 
study software quality management concluded people spoke appeared acquainted quality management literature accepted principles theory analysis data indicates principles taken practice 
possible theory reflect practice software quality literature adequately attend practical issues people face 
assessment usability research human computer interaction hci similar observations 
noting amount bad irrelevant research olsen requests practical case studies laboratory research 
blames lack holistic thinking ignoring change affects efficiency unwilling consider competing factors don want listen closely customers confuse symptoms underlying needs 
refers analysis usable web sites produced experienced designers formal usability training user centred techniques recognised hci research community 
hand companies chose employ separate usability specialist involved analysis testing design produce usable sites 
olsen usability researchers look boundaries community recognise requirement specification techniques user centred terms usability specialists 
ethnography software practice note frequent term paradigm indication rapid pace apparent revolutionary change 
observation points fundamental differences evolutionary science engineering frequent revolutionary paradigm shifts 
sch problem frames appropriate term engineering context paradigm misused reflects lack established scientific frameworks software development 
framework evolutionary science premature 
software engineering reflective practice various new software development methodologies coordinated umbrella agile methods 
approach reflective practice methods highlight interaction analysis design establishment stable requirements prior design emphasising individuals interaction processes tools working software comprehensive documentation customer collaboration contract negotiation responding change plan 
reflective systems development rsd explicitly acknowledges foundation sch 
approach shares roots participatory design pd emphasising role users active participants software development 
pd rsd deals practice software engineers 
software different 
number features software suited scientific enquiry branches engineering human users influence information systems engineering products 
technical terms humans variable highly non linear components 
positivist scientific methods test information systems purely technical artefacts verifying system conforms specification 
interpretive approaches needed understand complex evolving sociotechnical systems validating extent meets real user needs 
software controlled laws nature deriving principles determine boundary safely possible 
software tangible mathematics uniquely suited rapid incremental build approaches 
explains mathematics unimportant practitioner engineering approach works 
software manufacturing 
new units software negligible cost software pure design 
portraits engineering rational formal fit software development 
industrial engineers production processes software engineers shape processes 
outsider perspective articulated dichotomy craft engineering engineering design shared software engineering professionals 
experience shown methodologies precisely defined processes quantitative tools far effective design manufacturing 
software enjoys rapid pace innovation industries time market greater concern 
information systems scientific theories language action issue argumentation failed practice 
reality complex theories derived empirical analysis account 
step scientific analysis practical design problematic 
portray software complex artefacts designed 
complex problem analysis readily fall trap focusing narrowly results analysis forget fundamental assumptions analysis 
formal science proofs just logical consequences assumptions 
glass study videotapes system analysts rare scientific attempt understand nature software engineering 
triggered chance encounter observed time analysts just sitting doing 
long periods interrupted short moments subjects wrote thinking 
creative activities take time 
impossible agree measurable definition creativity depth scientific studies pursued 
important aspects software development empirical testable 
information systems research research deals development engineering 
see social science engineering discipline 
perspective gives rise research similar organisational science 
positivist interpretive approaches applied study information systems 
interpretive perspectives assume knowledge reality gained social constructions language shared meanings documents tools artefacts 
focus complexity human sense making attempt understand phenomena meanings people assign aim understand context processes system influences influenced context 
engineering design systems information processing organisational context 
grounding requirements organisational social human sciences paramount 
fekete discusses kind contributions research 
categories contributions include new better ways provide known functionality new better functionality explanation phenomenon theorems general techniques reflective historical accounts project 
categories examples repertoire building historical accounts may help research process reflection 
explanations general techniques include new paradigms framing problems 
cscw computer supported cooperative cscw inter disciplinary study people information technology communicate coordinate collaborate groups 
cscw occupies middle ground single user computer interaction hci organisational cscw influenced sides number specialised concepts research themes emerged cscw 
ethnographic workplace studies enjoyed special standing social science approaches cscw 
portrayed naturalistic inquiry refusing ontological commitments ethnomethodology takes anti theoretical starting point arguing scientists avoid theories lenses perception come study 
laboratory experiments capture prolonged situated contingent nature social activity 
theoretically guided workplace studies ignore important aspects pertaining hypotheses tested easily inform design 
views met criticism competing disciplines claiming openness impressions due lack hypotheses claim void strategic opportunity 
hybrid approaches combine ethnomethodology theoretically oriented methods advocated basis relationship practice theory change science progresses 
status experimental methods cscw assessed 
wicked aspects identified cultural organisational issues affect ability evaluate cause effect 
cscw need interdisciplinary design oriented research 
dewan provides promising approach combining design evaluation collaborative systems 
research plan proposes scientific methods engineering combining applications infrastructure research 
dewan shows infrastructure research derive problems preceding engineering indicating role engineering providing new practical problems science 
engineering project main objective solve wicked real world problems 
engineering research provides new design patterns discipline repertoire action new understanding reflective design dialogue problem situations 
performing system development gain different insights observing development practices 
study integrates organisational requirements design implementation usage surveys may reach level scientific rigour narrowly focused potential practical utility increase 
wide scope means may parts thesis appear na experts particular domains parts explored scientifically full 
engineering research open ended science directed incremental contributions specific sub discipline 
ideas may useful proven fully empirically validated 
research methodology problem framing solution proposals thesis view knowledge intensive reflective practice communities practitioners shared understanding identity meaning repertoires action socially constructed 
core concepts thesis include models interaction openness process incompleteness evolution holism emergence reflection multiplicity learning social construction 
concepts help select research methodologies frame organisational needs design information systems 
levels consistent coherent form harmonious 
exemplifies notion problem framing problem solving intertwined 
course danger harmonious self guarding self fulfilling system beliefs 
problem met ongoing interaction real world situations application solution problems ones originally designed 
generalisation design principles recognition similar approaches domains help avoid closure 
appendix implementation details architecture architecture workware described levels logical architecture main components chapter implementation architecture packages code runtime architecture servers clients related software 
described 
implementation architecture workware implementation divided layers java code pictured left 

workware implementation architecture 
layer java package 
presentation layer defines elements user interface 
presentation package contains general classes user interfaces customisation 
interaction layer interprets requests user decides answer 
data management handles model data runtime 
generic package contains implementations data objects attribute properties generic structures lists enumerations extensional intensional classes 
data store contains classes persistent model storage 
shows extension packages commit general techniques particular technological decisions html user interface objects client server interaction specific types workware pml different persistent storage schemes 
deployment architecture runtime workware code running inside java servlet container connected web server 
java code builds complete html user interfaces dynamically general organisational user preference policies 
interfaces returned web client web server html document 
runtime architecture depicted shows open nature system 
web pages applications corporate portals link directly specific interfaces workware workware include links pages services information objects process models 
manner workware may form basis simple process oriented portal environment 

workware deployment architecture 
web server may contain independent workware instances different projects departments 
servers different sets objects may different services configurations language constructs 
lifetime prototype different operating systems server windows nt wide range web servers java microsoft internet information server apache tomcat 
basic architecture handled evolution migration problems occurred mainly encoding urls parameters 
open source tomcat web server currently offers standard webdav functionality lightweight model repository external infrastructure 
installed wiki servlet allows users dynamically edit web pages add remove pages 
wiki functionality included services workware 
systems provide rich set functionality project portals 
implementation language metametamodel access point modelled objects workware system 
workware server instance 
addition data catalogue main implementation class workware data management layer 
object implements interfaces access features object identifier name type referring basic class java class implements object runtime system attributes extensible set relationships objects implemented attributes values point object help text describes object users 
objects basic class represents primary classification 
basic class refers property object expected change 
modelling language constructs proposed thesis implemented basic classes 
underlying data model separates basic classes extensions intensions enumerations visible ordinary user interface shown manipulated way classes 
class membership set objects template creating new objects 
attributes defined locally object instance stored hashtable 
attributes definition contains name unique object expected value type name class 
multi valued attributes 
list default element type explicit set elements 
lists may additional attributes 
details lists 
metamodelling experience implementation architecture workware includes package specific data types 
originally expected primitives modelling language require specific functionality implemented separate java classes 
experience showed implementations needed concepts workitem decision flow mainly managing consistency workflow models strict performance constraints 
originally designed types evident generic implementation classes sufficient 
functionality anyway implemented model interactors separate data management layer 
current basic installation workware includes modelling classes implemented generic specific java classes 
mechanisms reflection metamodelling greatly simplified implementation 
persistent data storage data store layer implements persistent storage data objects classes 
default object stored separate xml file workware server 
server started objects read file system works memory operation 
changes objects updated files written disk 
scheme chosen simplest implement prototype 
interfaces generic enables storage mechanisms databases utilised scalable version 
external infrastructure stored model file different xml format 
model files stored locally repository web server 
design patterns flexible data management design patterns provide framework assessing quality workware design 
particular respect flexible data management number design patterns proposed 
patterns workware conforms state art software design 
object creation gamma defines patterns prototype creates new objects copying prototype instances instantiating class 
pattern implemented templates workware 
works prototype manager 
prototypes allow classes specified runtime simplify class hierarchy 
factory interface creating families related dependent objects specifying concrete classes 
workware interface datastore implemented concrete classes create objects system start different persistent storage formats 
factory methods interfaces creating objects allow subclasses decide class instantiate 
implements parameterised factory method creating new objects parameterised class name 
method datastore creating new instances start step template cloning method 
builders separate construction composite object representation construction process create different representations 
scheme utilised workware creating structure properties including lists multi valued attributes new object 
object may unique property structure construction process hard coded 
singleton provides global point access conventionally implemented class instance 
multiple workware server instances run inside namespace context object provides singletons server question 
composites implement tree structures letting clients treat individual objects compositions uniformly 
workware exemplified extensional superclasses classes 
bridges de couple abstraction implementation vary independently 
parsons wand argued object classes analysis domain modelling representational implementational 
workware achieved bridges user level java implementation classes 
iterators implemented workware 
lists access set components needed components relationships attributes objects classes 
addition patterns data management workware utilises patterns layers architecture 
classes default workware installation section describes full metamodel installed alongside program code 
classes mandatory system properly 
briefly describe class implemented important relationships 
general graphical notation defined metamodelling workware uml poorly suited just provide textual description 
class names printed bold heading introduced italic referred 
data management classes members data management extension 
may regarded metaclasses 
object objects members system defined class 
objects identified unique id contain name type implementation name java class help text attributes 
class classes members class 
identified name individual objects value attribute type class just text 
attribute attributes identified name just classes 
metaclass typically context specific object class identified attributes 
allows customisation attribute level 
attribute instance defines value type 
list list contains number elements 
element type attribute points class 
extension extension list elements classes 
element type attribute value equals class 
identifies default subclass instantiation 
extension template creating new extension classes 
new subclasses may added time just new elements added list 
intension intension identifies list classes specialises 
attribute called query defines criteria members fulfil 
criteria compare tributes values defined statically part intension object 
template creating new intension classes 
simple data extension groups classes values objects values character number integer number real date text url boolean attributes types data values stored directly attribute definitions 
enumeration enumerations lists simple data subclass element type 
enumeration template creating new enumeration classes 
element set may altered time just new elements added ordinary list 
extensions separate classes solution providers users part normal operation 
process modelling classes process modelling part extension 
workitem workitem template contains range attributes status description due date parent responsible customer services documents project project name model filename root workitem 
flow flow connects connectors 
enactment boolean activated attribute defines state 
decision connector decision connector list input flows list output flows owner workitem logical operation relates numerous inputs outputs 
connector type attribute defines relation applies multiple inputs outputs 
flows connector states defined activated attribute 
enumeration values xor unspecified 
enumeration values join fork 
connector join intension contains connectors connector type equals join 
connector fork intension contains connectors connector type equals fork 
resource extension groups objects may appear resources workitem person document service tools 
person person potential role filler workitems potential user system 
number attributes associated username full name password email address phone number web page document documents contain logical name exists url real document 
status enumeration contains statuses workitem may planned waiting ready ongoing suspended finished terminated 
document status enumeration may classify documents status 
service extension contains objects represent pieces functionality system 
subclass resource indirectly process modelling 
basic subclasses 
piece workware internal functionality 
typically invokes system defined operations parameterised manner 
parameter values may extracted request data contained current user interface 
piece external functionality performed opening url 
desktop tools modelled 
opened returning empty document appropriate mime type 
menu menu object internal node workware explorer menu structure 
contains list services 
menu may contain objects projects workitems 
service management number classes controlling services available user interface 
extensions global service management user service management group concrete classes 
contains list included services list excluded services 
may contain attributes define scope configuration 
configuration may overridden local configurations cancellation inheritance 
objects define services apply objects specific class 
objects add remove services particular persons 
instance novice users see services add attribute remove attribute workitems 
objects define services apply specific object tools needed perform workitem 
objects define services available different modes operation 
service save instance available mode 
persons may access extra services system administration 
user interface preferences user interfaces controlled policy objects 
grouped subclasses extensions user interface components global preferences user preferences 
user interface components members basic class 
experience shown class specialised separate forms images fields 
objects contain java class implements user interface component container typically html element possibly parameters customisation size font colour stored ordinary attributes 
global preferences policies define default look feel content user interface 
different subclasses extensions group policies different levels form object attribute 
form preferences policies define container displaying objects certain class operation mode 
concrete subclasses exist list preferences list preferences control default content appearance list interfaces 
style define containers displaying list objects contains attributes columns display object 
appearance attribute controlled see 
set objects show may result search operation may defined 
objects define dynamic grouping objects 
type attribute defines class objects search query defines criteria objects fulfil 
addition objects may explicitly added removed list placing included items excluded items lists 
define worklist users may add remove workitems 
lists may extra attributes owner person defines scope 
attribute preferences attribute preferences define user interface component displaying value attribute 
define general policies values class define local policies individual attributes class workitem status 
user preferences personal preferences may defined mentioned general user interface policies user form preferences extension user list preferences extension user attribute preferences extension additional class allows user select alternative components main interface multi frame single frame containers 
awareness awareness notification event logging services customised number classes grouped common extension awareness 
simple value class event defines persons caused operation read write update parts attributes object time 
classes log events workitem members extension 
awareness profiles basic contains lists event filtering lenses included lenses excluded lenses 
lens belongs classes removing events explicitly listed removing events type read events removing events caused user removing events happened point time removing event older duration 
user may personalised applied objects local user apply single object workitem 
implementation interactive activation model interactors components activate process models workware architecture 
core components workware implement generic mechanisms sharing model data distributed users 
includes simple customisable mechanisms viewing editing listing searching modelled data 
core supports generic articulation manual activation models kind 
section gives brief overview core functionality system interactors reuse design generic interfaces data access event notification user interfaces customisation 
dynamic generation user interfaces shows core components involved generating controlling user interface workware 
parameterised request received client web browser server shown parameters inspected order identify operation user wants performed 
operation performed changes supplied user sent data management layer workware core servlet asks user interface container reply request 
container typically html form table 
container selects depends user interface profile current user 
user interface profiles ordinary model objects 
ui components workware core servlet services presentation catalogue user interface html container component model ui configuration request parameters data catalogue data objects 
core workware components user interaction 
step core servlet notify container object detailed parameters model data request 
done set standard interfaces different component classes may implement adjusting presentation current user depending access rights adjusting current operation 
instance container may viewing editing piece information 
depending operation current request different user interface components view edit selected various data 
displaying list objects takes list objects display attribute sort input 
working single object object question input parameter 
adjusting type class involved 
type derived object involved cases object belongs number classes different behaviour may needed different contexts depending class object currently 
selector able group content show parts currently selected group time 
example 
generates model service catalogue model service configuration capable including customisable set services user may invoke 
generic interface allows extensive customisation user defined parameters 
takes ordinary model object profile input customised property object 
container parameterised interfaces capable returning resulting html code 
typically contains number components different parts data involved component attribute object 
container ensures components customised interfaces listed 
components may containers object table acting 
containers able integrate components 
case html interface integration achieved concatenating html code components adding element separator tags separating table rows needed 
addition components viewing editing data interactive models user interface workware includes components invoking services 
services included request dynamically controlled subject user defined models 
technological evolution available set html containers components increased lifetime workware 
general scheme dynamic user interface generation customisation proven capable handling evolution 
specific interfaces selector added core customisation interfaces modelled policy objects controls user interface relatively stable period 
shows evolution ware user interface 

workware user interface version 
version included basic html elements form anchor button text various input fields 
version added images anchors greatly improving look feel system interfering underlying container layouts 

workware user interface version 
version added interface implemented table differently coloured cells core objects workitems menu structures getting complex shown 

workware user interface version 
menu structure consisting hierarchically grouped services getting increasingly larger version decided move away interface add separate frame menu structure called workware explorer 
change highly appreciated users complicated interface portable 
old components available mobile devices able configure system older interface 

workware user interface version 
version introduced stylesheets making interface look date enabling user organisations user colours fonts sizes shows key feature workware user interface capability integrate web applications html pages 
functionality system invoked urls user interface html simple integrate corporate portal 
header frame workware replaced portal 
menu included minimised frame left workware explorer users easily switch 
management management tool tightly integrated core components model interactors 
reflects nature services provides allows users share updated descriptions report progress updating state property items 
component provide automated services consequently specialised user interface components constitute management tool 
described previously components editing viewing single workitems worklists providing overviews items satisfies user defined search criteria 
form customised described previous subsection 
users may instance select different html com ponents interacting various properties workitems include customised modelled set services item 
worklists users may decide properties shown items 
interactive enactment 
workware user interface version 
interactive enactment engine mainly automation tool involves users situating interpretation model specialised user interface components 
enactment engine contains components subscribes change events modelled workitems decision connectors flows 
state activated property objects changed enactment engine sees related objects updated rules state transition diagrams chapter 
engine may add decisions worklists responsible users case reactive manual decision making required 
responsible replying coordination services state change invoked users 
delegates interpretation activation secondary effects invokes main workware servlet return management interface done 
user interface component editing state properties workitems 
displays current state includes components invoking coordination services applies current item state buttons images 
coordination services may alter state item explicitly activate outgoing flow 
services included determined outgoing transitions state diagrams chap ter 
user interface component worklists users quickly report state changes having open full 
specialised interface resolving ambiguously modelled decisions multiple inputs outputs activated different times 
form includes field discussing issues involved components lets user activate output flows 

coordination services workitems different states 
shows different instances different workitems 
buttons state different colours depending state item changes service invoked tooltip help explains service 
items finished terminated terminate service 
ongoing suspended items include finish services moving ongoing suspended 
ready waiting items allows start case waiting items corresponds violating modelled sequence 
item invoked tool service attached tool service included icon lightning workitem symbol 
item output flow keeps item ready 
flow activated list 
sorting order name objects ordered sequence flows item placed modelled sequence item 
note user interface generated management components enactment interactor 
exemplifies user interface integration interactors system 
document management basic principle workware document management interactor utilise process structures classify group documents simplifying retrieval management contextual interpretation information 
component originally designed example ontology driven information management intranets 
example project enterprise models define intranet navigation structures 
design information workspace metamodel extensible kinds interactive models 
simplified version implemented workware open source software 
interface component rest system managed object utilising fa ade design pattern 
object sure changes document base reflected process models 
component includes servlets uploading documents defining links existing documents urls user interface components showing documents satisfy current selection criteria document resources assigned workitem selecting local documents uploading defining new document model objects existing documents world wide web 
shows components included management user interface workitem develop 
document list shows documents item external methodology doc services upload forms adding new documents task shown 
leftmost workware explorer example page shows flexible metametamodel workware support utilise forms metadata documents case specific document category separating documents 
document management component simplified proof concept prototype cases 
full fledged document management system system integrated framework 
lack versioning cumbersome user interface access control limitations current implementation 

document management interface workitem develop 
access control concept services model driven access control component section 
respect document management implementation access control remedies open source content management system jakarta slide integrated 
slide supports distributed authoring versioning webdav standard 
addition storage retrieval access control locking versioning supported slide 
services integrated workware classes component listens changes involved model objects workitems documents persons projects sure changes reflected access control structures 
controlling user interaction access control implementing mapping process structures access control structures 
user interface defining viewing current access control policies vocabulary consisting process model terms files directories possible 
shows example access control form 
encapsulating providing single point access workware various slide objects 

user interface access control project 
mapping process structures access control structures files directories central design 
instance reuse access rights inheritance supported directory hierarchy slide 
table shows mapping currently implemented 
model object slide object slide example person slide directory users users project project model url xml file projects model xml project content inside directory name project url extension projects model document full text document url projects model documents doc workitems unique id workitem inside project model file project content directory projects model oid persons assigned separate directories projects model oid project workitem role type directory project workitem responsible contains links persons projects model participants information resources documents directory projects model oid directory workitem contains links full text documents documents doc properties directory named attribute object directory projects model oid name table 
mapping model objects access control objects 
list figures 
coordination technologies different forms collaboration 

interplay articulation activation 

overview research approach 

turing machines interaction machines 

framework analysing quality models 

interactive processes model quality framework 

knowledge creation spiral 

lifecycle process model evolution 

reuse process templates 

wfmc core terminology 

petri net model fragment 

action workflow model example 

decision making rationale process loop 

system dynamic process model 
snapshot reductionist enterprise model complex reality 

workware evaluation framework 

workflow architecture 

algorithmic interactive enactment 

different degrees specificity process models 

process compass navigating template repository 

apm notation overview 

workware process modelling language 
example workware model 

simple model example indirect personnel allocation roles 

symbols actor roles different role types 

modelling decision making authority responsibility 

logical architecture interactive wms 

core concepts workflow management interactive models 

workware metamodel 
items interpreted management interactor 

management tool interactive activation spectrum 
workitems interpreted enactment engine 

process models different degrees structure 

decisions interpreted enactment engine 

flows interpreted enactment engine 

workflow enactment tool interactive activation spectrum 

interaction user model starting suspending workitem 

interaction typical workitem activation cycles 

enactment unstructured workitem collection 

enactment structured workflow 

dynamic replanning structured workflow 

decomposed decision 

complex rules automated decision making 

parameterised decision connector 

absolute relative timers 

milestone timer exception handling 

partially fully automated items 

different interpretations flow depending context 

flow interpreted awareness engine 

visualisation access rights 

workware metametamodel 

relationships classes instances 

language extensions reuse 

constructs flexible model reuse 

inheritance relations single workitem 

model reuse tool supporting varying degrees 

spectrum fully automated fully manual transformation 

process model reuse 

process model harvesting 

template specialisation hierarchy reuse selection decisions 

equivalent models exception levels 

organisational model allocation decisions particular project 

simple process writing project application 

revised process involving additional review 

revised model project proposal review 

different uses person objects 

personnel allocation organisations processes 

holistic activation semantics 

workware worklist 

workware 

workware interactor architecture 

workware explorer menus different usage contexts 

external infrastructure 

resource properties visualised macros 

resource allocation simplified semantic holism 

model quarterly progress reporting 

management procedures quarterly progress reporting 

model joint project planning 

top level project cycle template process 

frequency external tools 

perceived degree service provision 

scientific method 

holistic scientific concepts 

overview research relevant information systems 

workware implementation architecture 

workware deployment architecture 

core workware components user interaction 

workware user interface version 

workware user interface version 

workware user interface version 

workware user interface version 

workware user interface version 

coordination services workitems different states 

document management interface workitem develop 

user interface access control project 
list tables table 
design implications underlying assumptions 
table 
summary requirements 
table 
differences static adaptive interactive wms 
table 
enactment policies 
table 
gaps real world semantic holism modelling reductionism 
table 
petri net enactment model workitems sequence 
table 
workware enactment model workitems sequence 
table 
research challenges contributions meet 
table 
user interface policy utilises workware reflection mechanisms 
table 
summary evaluation results average scores 
table 
characteristics different sme network scenarios 
table 
statistics models different sme network scenarios 
table 
semiotic levels 
table 
mapping model objects access control objects 

abbot sarin experiences workflow management issues generation acm cscw conference 

abdel hamid madnick lessons learned modeling dynamics software development communications acm vol 


adam fitzgerald status information systems field historical perspective practical orientation information systems research vol 


adler winograd usability turning technologies tools 
oxford university press new york usa 

agarwal bruno instance modelling object oriented modelling rd international conference information technology india 

agostini de michelis grasso rethinking cscw systems architecture milano ecscw conference lancaster uk 

agostini light workflow management system simple process models computer supported cooperative vol 


agostini michelis undo workflow management systems business process management lncs springer berlin germany 

agre accountability discipline comment suchman winograd computer supported cooperative vol 


alexander origins pattern theory theory generation living world ieee software vol 


software framework software intensive process modelling enactment fuzzy control transactions society design process science vol 


alonso fiedler hagen schuldt weiler wise business business commerce international workshop research issues data engineering sydney australia 

althoff nick improving organizational memories user feedback workshop learning software organizations conference software engineering knowledge engineering kaiserslautern germany 

conradi fuggetta assessing process centered software engineering environments acm transactions software engineering methodology vol 


andersen configuration management approach supporting cooperative information system development phd thesis norwegian institute technology trondheim norway 

formal processes augmenting workflow group interaction techniques acm conference organizational computing systems milpitas california usa 

apache software foundation jakarta slide homepage jakarta apache org slide 

araujo borges extending software process culture approach groupware workflow conference lncs 
springer berlin germany 

sch organizational learning theory action perspective 
addison wesley reading ma usa 

sch organizational learning ii theory method practice 
addison wesley reading ma usa 

arkin business process modelling language bpml working draft bpmi org 

case new business model communications acm vol 


efficient content metadata retrieval image databases conference graz austria 

freeman benson dynamic objects acm conference organizational computing systems milpitas california usa 

lau myers nielsen action research communications acm vol 


badouel olivier reconfigurable nets class high level petri nets supporting dynamic changes workflow systems technical report inria rennes france 

implementing sap introduce large system large organisation 
manning 

fuggetta picco modeling improving industrial software process ieee transactions software engineering vol 


bannon editorial response suchman winograd debate computer supported cooperative vol 


bannon dker constructing common information spaces ecscw conference lancaster england 

bannon politics design representing communications acm vol 


bannon schmidt cscw characters search context ecscw conference 

dker structured analysis design organisational context acm transactions information systems vol 


plans situated action activity theory approach workflow systems ecscw conference lancaster england 

barlow exploring human centered perspective collaboration knowledge management systems conference rome italy 

barnard may duke duce systems interaction acm transactions computer human interaction vol 


barth eriksen embodiment time inventions time sensory instrumental semiotic technologies nd nordic baltic conference activity theory socio cultural research sweden 

investigating information systems action research communications association information systems vol 


tacit knowledge organizations 
sage london uk 

benson partridge mathematical structures reasoning emergent organization acm cscw workshop workflow management philadelphia usa 

bentley dourish medium versus mechanism supporting collaboration customisation ecscw conference stockholm sweden 

bentley sikkel trevor supporting collaborative information sharing world wide web bscw shared workspace system www conference boston 

berger social construction reality 
treatise sociology knowledge 
penguin books usa 

bergmans aksit composing crosscutting concerns composition filters communications acm vol 


bernstein cooperative tools support dynamic group processes 
bridging specificity frontier acm cscw conference philadelphia usa 

bernstein jablonski workshop workflow management supporting dynamic organisational processes acm cscw conference philadelphia usa 

bernstein klein malone process tool generating new business process ideas conference charlotte nc usa 


object oriented framework systems integration interoperability norwegian institute technology trondheim norway 

bertino ferrari specification enforcement authorization constraints workflow management systems acm transactions information system security vol 


bier stone pier buxton derose toolglass magic lenses see interface siggraph conference anaheim california 

hughes pinch social construction technological systems 
mit press cambridge mass 

birk yr st leave project ieee software vol 


knowledge knowledge organizations overview interpretation organization studies 

alienation freedom 
university chicago press chicago 

block holism mental semantic routledge encyclopedia philosophy 
routledge new york ny usa 

boehm get ready agile methods care ieee computer vol 


boehm basili gaining intellectual control software development ieee computer vol 


kaplan flexibility control dynamic workflows worlds environment acm conference organizational computing systems milpitas california 

kaplan supporting dynamic interdependencies collaborative activities acm conference organizational computing systems 

boland perspective making perspective communities knowing organization science vol 


kaiser swap leveraging web manage workflow ieee internet computing vol 


taylor endeavors process system integration infrastructure international conference software process brighton 

booch jacobson rumbaugh unified modeling language user guide 
addison wesley reading massachusetts 

editors information technology knowledge management 
springer verlag berlin 

bottoni pareschi reflective agents adaptive workflows practical aspects knowledge management pakm conference basel switzerland 

borgida murata workflows persistent objects persistent exceptions framework flexibility acm cscw workshop adaptive workflow systems seattle 

bose zhou abstraction decision coordination acm activities coordination collaboration conference wacc san francisco usa 

framework access control workflow systems information management computer security vol 


bowers button sharrock workflows ecscw conference stockholm sweden 

gulla conceptual modelling approach semantic document retrieval caise conference springer lncs toronto canada 


enterprise modelling technical report stf sintef trondheim norway 

integrating management human computer resources task processing organizations conceptual view phd thesis norwegian institute technology trondheim norway 

braverman labor monopoly capital 
university chicago press chicago usa 

method engineering web enabled methods information systems engineering state art research themes lvberg eds 
springer berlin germany 

brooks jr mythical man month th anniversary edition 
addison wesley 

brooks jr silver bullet essence accidents software engineering information processing conference 

brown duguid organizational learning communities practice unified view working learning innovation organization science vol 


brown mccormick jr thomas anti patterns project management 
john wiley sons usa 

bruno agarwal instance modeling object oriented modeling conference information technology cit india 

organization talk decisions actions organizations 
john sons new york 

bunge philosophy science vol problem theory revised edition transaction publishers new brunswick usa 

bunge philosophy science vol explanation justification revised edition transaction publishers new brunswick usa 

burg linguistic instruments requirements engineering phd thesis vrije universiteit amsterdam nl 

bussler process model inheritance caise conference springer lncs toronto canada 

button wrong act theory computer supported cooperative vol 


cameron configurable development processes communications acm vol 


object oriented approach production flow modeling workflow management conference germany 

carlsen emerging characteristics knowledge intensive report sri consulting business intelligence program menlo park ca usa 

carlsen comprehensible business process models process improvement process support caise doctoral consortium heraklion greece 

carlsen conceptual modeling composition flexible workflow models phd thesis norwegian university science technology trondheim norway 

carlsen action port model mixed paradigm conceptual workflow modeling language coopis conference new york 

carlsen organizational metaphors lenses analyzing workflow technology acm group conference phoenix arizona usa 

carlsen rgensen coll carlsen knowledge re activation mediated knowledge carriers conference copenhagen denmark 

carlsen rgensen emergent workflow ais workware demonstrator acm cscw workshop adaptive workflow systems seattle 

carlsen rgensen krogstie lvberg process models knowledge creation arena conference stockholm sweden 

carlsen krogstie lvberg evaluating flexible workflow systems hawaii international conference system sciences hicss maui hawaii 

casati discussion approaches handling exceptions workflows acm cscw workshop adaptive workflow systems seattle 

casati ceri pernici pozzi workflow evolution er conference cottbus germany 

casati shan dynamic adaptive composition services information systems journal vol 


theory theory wall communications acm vol 


chen thalheim conceptual modeling 
current issues directions 
springer lncs berlin germany 

chen thalheim wong directions conceptual modeling conceptual modelling chen thalheim eds 
springer lncs berlin germany 

chiu li logical framework exception handling workflow management system caise conference springer lncs bergman eds stockholm sweden 

chou 
modelling processes activity networks international journal software engineering knowledge engineering vol 


hildrum krogstie str case evaluation report deliverable external project 

clarke cooper knowledge management collaboration practical applications knowledge management pakm conference basel switzerland 

frameworks power 
sage london uk 

cockburn characterizing people non linear order components software development systemics cybernetics informatics sci conference orlando florida 

cockburn selecting project methodology ieee software vol 


cockburn people methodologies software development phd thesis university oslo 

ground bounce ieee computer vol 


conklin wicked problems fragmentation dialog mapping projects shared understanding 
org 

conklin hypertext tool exploratory policy discussion acm transactions office information systems vol 


conradi fuggetta improving software process improvement ieee software vol 


conradi process modelling languages software process principles methodology technology lecture notes computer science springer lncs 

corbett interface advanced manufacturing technology job design usability turning technologies tools adler winograd eds 
oxford university press new york usa 

cugola tolerating deviations process support systems flexible enactment process models ieee transactions software engineering vol 


cugola fuggetta ghezzi framework formalizing inconsistencies deviations human centered systems acm transactions software engineering methodology vol 


curtis kellner process modeling communications acm vol 


domain preferences user tailoring shared workflow interfaces workshop darmstadt germany 

davenport process innovation 
harvard business school press boston massachusetts 

davenport working knowledge 
harvard business school press boston massachusetts 

de michelis dubois jarke matthes mylopoulos pohl schmidt woo yu cooperative informations systems manifesto cooperative information systems trends directions papazoglou eds 
academic press 

de michelis grasso situating conversations language action perspective milan conversation model acm cscw conference chapel hill north carolina usa 

smith meyer metis learn leveraging enterprise architecture repository concurrent engineering ce conference madeira portugal 

delphi group bpm process 
changing role business process management today economy whitepaper 

boehm agile methods ieee computer vol 


denning computing profession computer science engineering education ed 
george mason university fairfax va 

denning computer science discipline encyclopedia computer science ralston eds 
george mason university fairfax va 

denning action centered design bringing design software winograd ed 
addison wesley new york 

denning medina mora completing loops acm interactions vol 


denning communications acm vol 


software process principles methodology technology 
springer lncs berlin germany 

dewan integrated approach designing evaluating collaborative applications infrastructures computer supported cooperative vol 


simone supporting different dimensions adaptability workflow modeling computer supported cooperative vol 


donath semantic approach visualizing online conversations communications acm vol 


significant uml change communications acm vol 


dourish developing reflective model collaborative systems acm transactions computer human interaction vol 


dourish utilising metalevel techniques flexible toolkit cscw applications acm transactions computer human interaction vol 


dourish process descriptions organizational accounting devices dual workflow technologies acm group conference boulder usa 

dourish bellotti awareness coordination shared workspaces acm cscw conference toronto canada 

dourish holmes maclean mediating representation action workflow systems acm cscw conference boston usa 

requirements enactment mechanisms rd european workshop software process technology 

souza sane class extensibility uml packaging profiles stereotypes patterns uml conference springer lncs fort collins usa 

uml enable family languages communications acm vol 


dustdar collaborative knowledge flow improving process awareness traceability activities pakm conference springer lncs 

eder panagos distributed workflow process management acm wacc workshop cross organisational workflow management ordination san fransisco usa 

edmonds ter hofstede achieving workflow adaptability means reflection acm cscw workshop adaptive workflow systems seattle 

edwards policies roles collaborative applications acm cscw conference boston mass 

scandinavian design participation skill usability turning technologies tools adler winograd eds 
oxford university press new york usa 

software development outsider view ieee computer vol 


ellis keddara ml modeling language support dynamic evolution workflow systems computer supported cooperative vol 


ellis keddara rozenberg dynamic change workflow systems acm conference organizational computing systems milpitas ca usa 

ellis nutt workflow process spectrum nsf workshop workflow process automation information systems athens georgia usa 

ellis keddara workflow change workflow business process management aalst desel oberweis eds 
springer lncs berlin germany 

ellis workflow system hawaii international conference system sciences hicss maui hawaii 

filman bader aspect oriented programming special issue communications acm vol 


emmerich finkelstein 
software process standards assessment improvement software process principles methodology technology lecture notes computer science springer lncs 


improving knowledge intensive processes enterprise knowledge medium acm conference new orleans usa 

waarts erp adoption european companies communications acm vol 


external external extended enterprise resources networks learning eu project ist new methods electronic commerce dynamic networked organisations 
partners gmd ipsi zeus metis sintef telecom informatics www external ist org 

hesse nilsson oei rolland stuart voss framework information system concepts report ifip wg 

integrating geographically distributed development teams increased product awareness information systems journal vol 


configuration adaptation human centered approach flexible workflow enactment computer supported cooperative vol 


exception handling petri net workflow management practical aspects knowledge management pakm conference basel switzerland 

fekete preparation research instruction interpreting evaluating research acm sigcse conference philadelphia usa 

fischer excellence practice iv innovation excellence workflow knowledge management 
workflow management coalition strategies florida usa 

fox gruninger enterprise modelling ai magazine 

uml modelling static part software process uml conference springer lncs fort collins usa 

frank tyson clear clean concise communications acm vol 


freeman effective computer science acm computing surveys vol 


fuggetta dynamic partitioning complex process models information software technology vol 


gamma helm johnson vlissides design patterns elements reusable object oriented software 
addison wesley reading ma 

structured systems analysis tools techniques 
prentice hall 

gary automated process support organizational personal processes acm group conference phoenix arizona usa 

gasser integration computing routine acm transactions office information systems vol 


georgakopoulos hornick sheth overview workflow management process modeling workflow automation infrastructure distributed parallel databases vol 


star analyzing due process workplace acm transactions office information systems vol 


contribution case reasoning software processes systemics cybernetics informatics sci conference orlando florida 

vassiliadis wp specification deliverable external project 

modelling conference participation visualization process oriented intranet technical report stf sintef trondheim norway 

models practice reflective communicative devices cases norwegian offshore industry participatory design conference 

glance pareschi generalized process structure grammars gpsg flexible representation acm cscw conference boston usa 

glass story involved software ieee software vol 


glass searching holy grail software engineering communications acm vol 


living software development process process patterns conference springer lncs 

gruber schwarzer list introducing workflow management systems insurance companies systemics cybernetics informatics sci conference orlando florida 

goguen notation university california san diego computer science engineering department www cse ucsd edu users goguen pubs usa 

goguen formality informality requirements engineering fourth international conference requirements engineering 

goguen social ethical theory information social science research technical systems cooperative great divide bowker gasser star turner eds 
erlbaum 

gosling joy steele java language specification 
addison wesley 

grasso meunier pareschi distributed coordination workflow world wide web computer supported cooperative vol 


gray handling crosscutting constraints domain specific modeling communications acm vol 


green theory 
grand challenges complexity informatics complexity international vol 


green integrated process modeling evaluation information systems vol 


greenberg johnson studying awareness contact facilitation acm chi workshop awareness collaborative systems atlanta georgia 

greenwood morrison reflection reification process systems evolution experience opportunity conference springer lncs 

greenwood robertson active models business conference business information technology 

grinter doing software development occasions automation formalisation ecscw conference lancaster uk 

grinter workflow systems occasions success failure computer supported cooperative vol 


grosz rolland si said modelling engineering requirements engineering process overview na ture approach requirements engineering vol 


grudin groupware social dynamics challenges developers communications acm vol 


grudin computer supported cooperative groupware advances computers zelkowitz ed 
academic press orlando 

grundy hosking mugridge inconsistency management multiple view software development environments ieee transactions software engineering vol 


gulla general explanation component conceptual modeling case environments acm transactions information systems vol 


gulla ppp integrated case environment caise conference trondheim norway 

gutwin greenberg roseman workspace awareness real time distributed groupware framework widgets evaluation hci conference 

hamilton logic mathematicians 
cambridge university press new york ny usa revised 

harel statecharts visual formalism complex systems science computer programming vol 


hartmanis computational complexity nature computer science communications acm vol 


hartmanis responses essays computational complexity nature computer science acm computing surveys vol 


hayes arounds boundary crossing high tech role operative workflow technologies computer supported cooperative vol 


horn jablonski stein comprehensive approach flexibility workflow management systems acm activities coordination collaboration conference wacc san francisco usa 

herrmann evolving workflows user driven coordination conference nchen germany 

herrmann hoffmann loser 
semistructured models surprisingly useful user centered design coop conference sophia antipolis france 

herrmann costs benefits structuration coop conference nchen germany 

herrmann loser 
vagueness models socio technical systems behaviour information technology vol 


hewitt offices open systems acm transactions office information systems vol 


cockburn agile software development business innovation ieee computer vol 


hirschheim understanding office social perspective acm transactions office information systems vol 


hirschheim klein paradigms information systems development communications acm vol 


lee endeavors component reuse web driven process workflow california software symposium 

hofmann development library reusable workflow objects bulletin vol 


holm karlgren theories meaning different perspectives information systems conference information system concepts isco marburg germany 

holt ramsey grimes coordination system technology basis programming environment itt technical journal vol 


hommes 
quality business process modelling techniques conference information systems concepts isco leiden 

hong role software process managing line products th international software process workshop france 

horn jablonski approach dynamic instance adaptation workflow management applications acm cscw workshop adaptive workflow systems seattle 

structuring specification business systems uml emphasis workflow systems oopsla business object workshop 

huhns singh workflow agents ieee internet computing vol 


hull llirbat simon su dong kumar zhou declarative workflows support easy modification dynamic browsing acm activities coordination collaboration wacc conference san francisco usa 

haake krogstie external wp 
prototype case external project deliverable external project 

haake wang flexible support business processes extending cooperative hypermedia process support acm group conference phoenix arizona usa 

idef process modeling language specification standard na rockwell international 

ietf webdav standard www webdav org 
jablonski mobile modular workflow model architecture conference dynamic modelling information systems netherlands 

jablonski workflow management formal theory pragmatic approaches business process management aalst desel oberweis eds 
springer lncs berlin germany 

reusing software process models university torino italy 

conradi techniques process model evolution epos ieee transactions software engineering vol 


conradi software process technology software organisations conference springer lncs austria 

picco eliciting software process models language acm transactions software engineering methodology vol 


holism relevance thought content proceedings ohio association 

moderate holism instability thesis american philosophical quarterly vol 


jacobson object oriented software engineering case driven approach 
addison wesley wokingham 

jacobson ericsson jacobson object advantage business process reengineering object technology 
addison wesley wokingham 

janssens techniques modelling workflows support reuse business process management aalst desel oberweis eds 
springer lncs berlin germany 

jarke pohl rolland schmitt 
experience method evaluation improvement process modeling approach ifip wg conference maastricht netherlands 

projects business business collaboration telenor research development oslo norway 

rgensen software process model reuse learning process support distributed team software development systemics cybernetics informatics sci conference orlando florida 

rgensen supporting knowledge emergent process models acm cscw workshop workflow management philadelphia usa 

rgensen interaction framework flexible workflow modelling acm group conference boulder usa 

rgensen interactive process models knowledge intensive project caise doctoral consortium toronto canada 

rgensen model driven management services concurrent engineering ce conference madeira portugal 

rgensen carlsen emergent workflow integrated planning performance process instances workflow management conference germany 

rgensen carlsen writings process knowledge management technical report stf sintef oslo norway 

rgensen krogstie active models cooperative information systems norwegian computer science conference nik norway 

rgensen krogstie interactive models tailorable evolving information systems accepted guest editors journal applied systems studies 

rgensen carlsen living knowledge knowledge tools technical report sintef oslo norway 

rch wulf special issue tailorable systems cooperative computer supported cooperative vol 


kahng mcleod dynamic ontologies mediation information sharing cooperative federated database systems cooperative information systems trends directions papazoglou eds 
academic press 

naylor bergman techniques supporting dynamic adaptive workflow computer supported cooperative vol 


conceptual description information modelling intensional containment relation knowledge representation meet databases krdb budapest hungary 

global understanding communication information management information systems possible conceptual modeling 
current issues directions chen thalheim eds 
springer lncs berlin germany 

karlsen ring av 
fra ais norwegian applied social science 

lerch beneath surface organizational process social representation framework business process redesign acm transactions information systems vol 


kelly new rules new economy wired september 

participatory design issues concerns computer supported cooperative vol 


kiczales black box open implementation ieee software vol 


kiczales lamping lopes maeda mendhekar murphy open implementation design guidelines international conference software engineering icse boston 

moore automated message processing electronic commerce support systems speech act theory expressive acm transactions information systems vol 


king computer supported cooperative vol 


kj madsen participatory analysis flexibility communications acm vol 


klein myers set principles conducting evaluating interpretive field studies information systems mis vol 


klein workshop adaptive workflow systems acm cscw conference seattle 

klein dellarocas knowledge approach handling exceptions workflow systems computer supported cooperative vol 


klein dellarocas bernstein special issue adaptive workflow systems computer supported cooperative vol 


stevens allen workshop evaluating collaborative enterprises wet ice gaithersburg maryland usa 

certification harm ieee computer vol 


sepp nen practical solution capturing knowledge software projects ieee software vol 


morin active business objects novel paradigm building 
business information systems internet objects tsichritzis ed 
centre universitaire informatique gen switzerland 

uml standardization odyssey communications acm vol 


kaiser agents enable collaborative ieee internet computing vol 


hinrichs sharing lists distributed task manager ecscw conference 

krogstie conceptual modeling computerized information systems support organizations phd thesis norwegian institute technology trondheim norway 

krogstie ee methodology deliverable external project oslo norway 

krogstie ee methodology version deliverable external project oslo norway 

krogstie hildrum enterprise methodology evaluation report deliverable external project 

krogstie rgensen flexible support processes balancing support organisations workers caise conference panel springer lncs switzerland 

krogstie rgensen quality interactive models er workshop conceptual modeling quality tampere finland 

krogstie rgensen active models digitally enabled creative networks ifip world computing conference montreal canada 

krogstie defining quality aspects conceptual models ifip conference information systems concepts isco marburg germany 

roth inventing organizations st century producing learning collaboration report ccs wp massachusetts institute technology cambridge usa 

kuhn structure scientific revolutions nd ed 
university chicago press usa 

kumar erp experiences evolution special issue communications acm vol 


kuntz christiansen cohen jin levitt virtual design team computational simulation model project organizations communications acm vol 


making representations communications acm vol 


coloured petri nets object petri nets conference application theory petri nets torino italy 

pragmatic inheritance issues object petri nets tools pacific conference melbourne australia 

protected variation importance closed ieee software vol 


latour science action 
open university press milton keynes 

lawton knowledge management ready prime time ieee computer vol 


emperor clothes communications acm vol 


lee goal process analysis method systematic process redesign acm conference organizational computing systems milpitas ca usa 

lee gruninger jin malone tate yost pif process interchange format framework version standard mit center coordination science 

lei singh comparison workflow metamodels er workshop behavioral modeling springer lncs 

lethbridge knowledge important software professional ieee computer vol 


levin technology transfer organizational development international journal technology management vol 


li demonstrational customisation shared whiteboard support user defined semantic relationships objects acm group conference boulder usa 

visual extended enterprise engineering embedding knowledge management systems engineering execution ifip international enterprise modelling conference norway 

foundations technology concurrent engineering ce conference madeira portugal 

krogstie rgensen active knowledge models basis infrastructure virtual enterprises ifip conference infrastructures virtual enterprises pro portugal 

krogstie rgensen hildrum active knowledge models supporting ebusiness international conference concurrent ice rome italy 

modelling inter organizational processes process model fragments enterprise wide cross enterprise workflow management workshop paderborn germany 

rus process diversity software development ieee software vol 


process orientation object orientation approach integrating uml event driven process chains epc university saarland germany 

loui computer science new engineering discipline acm computing surveys vol 


generic model reflective design acm transactions software engineering methodology vol 


ludwig shan bussler grefen cross organisational workflow management ordination wacc workshop report bulletin 

luo sheth defeasible workflow computation exception handling acm cscw workshop adaptive workflow systems seattle 

luo sheth kochut miller exception handling workflow systems applied intelligence vol 


norwegian 
oslo 

lyytinen zhang framework component reuse software development information systems engineering state art research themes lvberg eds 
springer berlin germany 

engineer don build ieee software vol 


rice malhotra king ba technology adaptation case computer supported inter organizational virtual team mis quarterly vol 


malhotra role information technology managing organizational change organizational interdependencies www com 

malone commentary suchman article winograd response computer supported cooperative vol 


malone crowston coordination theory help design cooperative systems acm cscw conference 

malone crowston interdisciplinary study coordination acm computing surveys vol 


malone crowston lee pentland tools inventing organizations handbook organizational processes ieee workshop enabling technologies infrastructure collaborative enterprises usa 

malone lai 
fry experiments oval radically tailorable tool cooperative acm transactions information systems vol 


man lightweight process centered project support environment motivation implementation experience process support distributed team software development sci conference orlando florida 

manola georgakopoulos mitchell supporting cooperation enterprise scale distributed object systems cooperative information systems trends directions papazoglou eds 
academic press 

manolescu johnson dynamic object model adaptive workflow oopsla workshop metadata active object models 

march simon organizations 
john wiley new york 

marshall enterprise modeling uml 
addison wesley 

massey huang 
weiss ramesh culture style aren clothes perceptions task technology fit global virtual teams acm group conference boulder usa 

reflective systems development dr techn 
thesis aalborg university denmark 

munk madsen formalization systems development behaviour information technology vol 


medina mora winograd flores flores action workflow approach workflow management technology acm cscw conference 

phillips user fast response changing office needs th annual hawaii international conference system sciences hicss 

le realising run time adaptable workflow means reflection baan workflow engine acm cscw workshop adaptive workflow systems seattle 

mellor models assets communications acm vol 


managing corporate knowledge comparative analysis experiences firms practical aspects knowledge management pakm conference basel switzerland 

kt don forget user report sri consulting business intelligence program menlo park usa 

metaedit revolutionized way nokia develops mobile phone software consulting jyv finland 

abc technology consulting jyv finland 

metis gem template guide version ed 
ncr metis norway 

version evaluation report oct uk 

hunt process product watch management technologies report evaluation framework process support systems uk 

hutton business case case handling uk 

miller aspect oriented programming takes aim software complexity ieee computer vol 


typology organizational structure readings groupware computer supported cooperative 
morgan kaufmann san mateo usa 

thinking technology 
university chicago press chicago 

moldt valk object oriented petri nets business process modeling business process management aalst desel oberweis eds 
springer lncs berlin germany 

kaba software process modelling technology software process principles methodology technology 
ed 
springer lncs berlin germany 

moody lvberg evaluating quality process models empirical testing quality framework er conference springer lncs 

morgan images organization 
sage beverly hills 

myers mcdaniel miller kyle amulet environment new models effective user interface software development ieee transactions software engineering vol 


myers qualitative research information misq discovery www org 

hlen resource modeling workflow applications workflow management conference germany 

hlen becker workflow management object orientation matter perspectives perspectives matter oopsla workshop object oriented workflow management denver usa 

rch tailoring collaboration mediating role multiple representations application units computer supported cooperative vol 


rch wulf tailorable groupware issues methods architectures workshop report bulletin vol 


nardi whittaker isaacs johnson hainsworth integrating communication information communications acm vol 


modelling shared information spaces sis acm group conference phoenix arizona usa 

supporting dynamic organisational processes administration workflows acm cscw workshop workflow management philadelphia usa 

nelson winter evolutionary theory economic change 
press harvard university press cambridge massachusetts london england 

nguyen wang conradi total software process model evolution epos acm icse conference boston usa 

ki intensional extensional languages conceptual modelling th european japanese conference information modelling knowledge bases finland 

nonaka takeuchi knowledge creating japanese companies create dynamics innovation 
oxford university press new york 

nuseibeh finkelstein kramer method engineering multi perspective software development information software technology 

nwana software agents overview knowledge engineering review vol 


rgensen krogstie process models framework knowledge sharing reuse extended enterprises conference graz austria 

project homepage sintef oslo norway www informatics sintef projects html 

ter framework model transformation code generation enterprise distributed object computing edoc conference 

olsen emperor lab coat acm interactions vol 


omg meta object facility mof specification omg object management group 

omg workflow management facility object management group 

omg enterprise distributed object computing edoc process profile object management group 

omg software process engineering metamodel object management group 

omg uml specification object management group 

omg uml specification object management group 

omg unified modeling language infrastructure proposal revised submission version object management group 

performance engineering information systems development phd thesis norwegian institute technology trondheim norway 

facet modelling approach flexible integrated conceptual modelling information systems vol 


orlikowski case tools organizational change investigating incremental radical changes systems development mis quarterly vol 


orr talking machines 
cornell university press ithaca new york 

ossher tarr multi dimensional separation concerns re shape evolving software communications acm vol 


osterweil software processes software icse conference 

ouksel watson need adaptive workflow currently available market acm cscw workshop adaptive workflow systems seattle 

business processes modeling analysis re engineering improvement 
john wiley sons beverly hills 

parnas criteria decomposing systems modules communications acm vol 


parsons information model classification theory management science vol 


parsons wand choosing classes conceptual modeling communications acm vol 


parsons wand objects systems analysis communications acm vol 


parsons wand instances tyranny classes information modeling acm transactions database systems vol 


perry davidson sentence holism wittgenstein builders proceedings addresses american philosophical association vol 


invention design 
harvard university press cambridge usa 

hoppe integration domain specific elements visual language collaborative environments workshop darmstadt germany 

project management book 
project management institute square pennsylvania 

pohl jarke decision oriented process modelling international software process workshop 

polanyi tacit dimension 
routledge kegan paul london 

pour glass lutz push software engineering respectable ieee computer vol 


paradoxes global virtual collaboration communications acm vol 


dix rodden exploring design space notification servers acm cscw conference seattle usa 

ramesh process knowledge management traceability ieee software vol 


randall rouncefield theory practice fieldwork systems development tutorial notes acm cscw conference seattle usa 

reichert bauer dadam enterprise wide cross enterprise workflow management challenges research issues adaptive workflows enterprise wide cross enterprise workflow management workshop paderborn germany 

building expressive flexible process models uml approach conference springer lncs 

ric ur la 
du norwegian edition og paris france 

riehle lassen architecture uml virtual machine acm oopsla conference tampa usa 

roberts pattern languages programming plop homepage jerry cs uiuc edu plop 

role knowledge software development communications acm vol 


robinson computer supported operative cases concepts groupware conference utrecht netherlands 

rodden populating application model awareness cooperative applications acm cscw conference boston usa 


distributed happening sc thesis department informatics university oslo norway 

rombach directions software process research advances computers vol 


rose visual assessment engineering processes virtual enterprises communications acm vol 


knowledge management tools 
butterworth heinemann boston usa 

rumbaugh jacobson booch unified modeling language manual 
addison wesley reading massachusetts 

st len model driven architecture research report department informatics university oslo norway 

rose capture dissemination experience construction engineering processes caise conference springer lncs stockholm sweden 

rose project specific process configuration virtual enterprises design information infrastructure systems manufacturing conference melbourne australia 

rus knowledge management software special issue ieee software vol 


schindler schwan concepts enterprise knowledge medium practical aspects knowledge management pakm conference basel switzerland 

external learning history external project trondheim norway 

sachs transforming collaboration learning design communications acm vol 


bogdan bowers awareness engine cscw ecscw conference lancaster uk 

sarin flexible workflow architectures new adaptive workflow workflow conference san jose usa 

sarin abbott mccarthy process model system supporting collaborative acm conference organizational computing systems 

evaluation external tools applied external case deliverable external project patras greece 

scheer 
haberman making erp success communications acm vol 


scheer 
hoffmann business process model application system developing information system house business engineering caise conference springer lncs 

scheer 
aris architecture models business process management business process management aalst desel oberweis eds 
springer lncs berlin germany 

westfechtel ger modeling dynamic software processes uml technical report aib rwth aachen germany 

koch rger workspace awareness distributed teams coordination technology collaborative applications workshop singapore 

schmidt maps scripts status formal constructs cooperative acm group conference phoenix arizona usa 

schmidt bannon cscw seriously supporting articulation computer supported cooperative vol 


schmidt simone coordination mechanisms conceptual foundation cscw systems design computer supported cooperative vol 


schmidt 
building workflow business objects business object workshop vancouver canada 

schneider expect software experience exploitation conference graz austria 

architecture evaluating quality information models meta object level comparison er conference paris france 

schuler schuldt alonso schek 
workflows workflows practical experience integration sap business workflows wise informatik workshop paderborn germany 

sch organizational learning method morgan ed 
sage beverly hills 

sch reflective practitioner 
publishing uk 

complexity reduction information systems modelling phd thesis norwegian institute technology trondheim norway 

fifth discipline art practice learning organization 
century business publishers london 

shapiro limits ethnography combining social sciences cscw acm cscw conference chapel hill nc usa 

sharp robinson software engineering community culture ieee software vol 


shim sundaram gao business business commerce frameworks ieee computer vol 


shipman hsieh moore shah visual spatial communication task organization visual knowledge builder acm group conference boulder usa 

shipman marshall formality considered harmful experiences emerging themes directions formal representations interactive systems computer supported cooperative vol 


shipman mccall supporting knowledge base evolution incremental formalization acm human factors computing systems conference boston ma 

shipman mccall incremental formalization hyper object substrate acm transactions information systems vol 


shum representing hard contextualised multidisciplinary organisational knowledge aaai spring symposium artificial intelligence knowledge management stanford university palo alto usa 

simone schmidt notation malleable interoperable coordination mechanisms cscw systems acm conference organizational computing systems milpitas ca usa 

singh rein role interaction nets process description formalism technical report ct mcc austin texas 

singh conceptual modeling multiagent systems applying interaction oriented programming conceptual modelling chen thalheim eds 
springer lncs berlin germany 

smith system integrator perspective business process management workflow eai agile business conference 

tay yap cultural fits erp universal solution communications acm vol 


sorenson tremblay supporting viewpoints acm sigsoft workshop san fransisco ca usa 

star institutional ecology translations boundary objects professionals berkeley museum vertebrate zoology social studies science vol 


stewart science computer science acm computing surveys vol 


strong miller exceptions exception handling computerized information processes acm transactions information systems vol 


str olsson haake ee requirements deliverable external project oslo norway 

thinking management concepts multiplicities organization vol 


st rle describing process patterns uml springer lncs 

suchman plans situated actions 
cambridge university press new york 

suchman categories politics computer supported cooperative vol 


suchman making visible communications acm vol 


suchman representation special issue communications acm vol 


suchman speech acts voices response winograd computer supported cooperative vol 


sullivan aspect oriented programming reflection metaobject protocols communications acm vol 


sun microsystems java servlets java sun com products servlet 

swap simple workflow access protocol ietf 

workflow information worker workflow handbook fischer ed 
workflow management coalition strategies lighthouse point florida usa 

irwin matsumoto collaborative planning empowering user process support environment interdisciplinary workshop informatics psychology austria 

maxwell matsumoto irwin business process environment supporting collaborative planning journal collaborative computing vol 


andersson framework comparing process modelling languages caise conference springer lncs toronto canada 

lvberg data refer conceptual modeling chen thalheim eds 
springer lncs berlin germany 

lvberg referent model language technical report norwegian university science technology department computer information science 

lvberg kung information systems engineering 
springer berlin germany 

taivalsaari notion inheritance acm computing surveys vol 


tang hwang 
handling uncertainties workflow applications acm cscw conference boston usa 

taylor principles scientific management 
dover publications 
edition new york usa 

flexible interaction objects report tum technische universit nchen 

supporting workflows include schematic ad hoc aspects practical aspects knowledge management pakm conference basel switzerland 

users composers parts features basis cscw systems computer supported cooperative vol 


analysis implementation ad hoc business processes common approximation patterns workflow management conference germany 

tichy computer scientists experiment ieee computer vol 


karlsen smith model driven operational solution concurrent engineering ce conference madeira portugal 


lyytinen flexible method adaptation case metamodelling approach scandinavian journal information systems vol 


trigg dker implementation design tailoring emergence cscw acm cscw conference chapel hill north carolina usa 

benefits certification ieee computer vol 


evolution socio technical systems issues quality working life 

social psychological consequences method coal getting human relations vol 


klein growing systems emergent organizations communications acm vol 


tr model user interface design phd thesis norwegian university science technology trondheim norway 

twidale marty coping errors importance process data robust sociotechnical systems acm cscw conference philadelphia usa 

un oasis ebxml business process business information analysis overview 

un oasis ebxml business process specification schema 

uschold gruninger ontologies principles methods applications knowledge engineering review vol 


mastering dynamics innovation 
harvard business school press boston usa 

bryant creating knowledge management architecture business process change acm conference new orleans usa 

measurement composite computational modelling software phd thesis norwegian institute technology trondheim norway 

voas software quality greatest myths ieee software vol 


compositional modelling verification workflow processes business process management aalst desel oberweis eds 
springer lncs berlin germany 

voss procter herrmann rgensen structure process interplay routine informed action ecscw workshop bonn germany 

voss procter williams innovation interleaving day day operation systems development participatory design conference new york usa 

corporate renewal knowledge network report sri consulting business intelligence program menlo park ca usa 

wactlar extracting visualizing knowledge film video archives conference graz austria 

wand weber deep structure information systems international conference information systems copenhagen denmark 

wang mobile agent environment support cooperative software processes phd thesis norwegian university science technology trondheim norway 

wang 
beware engineering metaphor communications acm vol 


greenwood kirby morrison munro instances connectors issues second generation process language conference springer lncs uk 

greenwood kirby morrison munro collaboration composition issues second generation process language european software engineering conference esec springer lncs toulouse france 

warmer kleppe object constraint language 
addison wesley 

bentley supporting cooperation customisation approach computer supported cooperative vol 


weber og norwegian edition oslo 

webster new international webster comprehensive dictionary english language 
trident press 

wegner research paradigms computer science icse conference san francisco ca usa 

wegner interaction basis empirical computer science acm computing surveys vol 


wegner interaction powerful algorithms communications acm vol 


wegner goldin interaction framework modeling conceptual modeling chen thalheim eds 
springer lncs berlin germany 

wegner goldin mathematical models interactive computing brown technical report cs computer science department brown university providence ri usa 

government funding computing research priorities acm computing surveys vol 


wenger communities practice 
learning meaning identity 
cambridge university press cambridge uk 

weske model workflow application development processes acm activities coordination collaboration conference wacc san francisco usa 

wfmc workflow model version standard tc workflow management coalition 

wfmc workflow management coalition interface process definition interchange 
draft issued february workflow management coalition 

wfmc terminology glossary standard tc issue workflow management coalition 

wfmc workflow handbook 
workflow management coalition strategies lighthouse point florida usa 

modular process nets technical report international computer science institute berkeley ca 

williams kessler cunningham jeffries strengthening case pair programming ieee software vol 


executable conceptual models information systems engineering phd thesis norwegian institute technology trondheim norway 

winograd language action perspective design cooperative human computer interaction vol 


winograd categories disciplines social coordination computer supported cooperative vol 


winograd flores understanding computers cognition 
addison wesley 

wulf scientists engineers acm computing surveys vol 


wyner lee applying specialization process models acm conference organizational computing systems ca usa 

yang library process programming business process management 
springer lncs berlin germany 

young customizable process specification enactment technical non technical users phd thesis university california irvine usa 

yu mylopoulos goals rules methods support reasoning business process reengineering hawaii international conference systems sciences maui hawaii 

su gulla modelling apm erp projects open enterprise solutions systems experiences organizations conference rome italy 

zelkowitz wallace experimental models validating technology ieee computer vol 


user oriented enterprise modelling comparison modelling languages concurrent engineering ce conference madeira portugal 

age smart machine 
basic books usa 

aalst application petri nets workflow management journal circuits systems computers vol 


aalst formalization verification event driven process chains information software technology vol 


aalst basten life cycle inheritance petri net approach application theory petri nets balbo eds 
springer lncs berlin germany 

aalst workflow management product driven case handling acm group conference boulder usa 

aalst hofstede kiepuszewski barros workflow patterns distributed parallel databases 

aalst desel oberweis business process management 
springer lncs berlin germany 

aalst moldt valk enacting interorganizational workflows nets nets workflow management conference germany 

