nonmonotonic inductive logic programming sakama department computer communication sciences wakayama university wakayama japan sakama sys wakayama ac jp www sys wakayama ac jp sakama 
nonmonotonic logic programming inductive logic programming ilp important extensions logic programming 
aims representing incomplete knowledge reasoning commonsense targets problem inductive construction general theory examples background knowledge 
ilp seemingly di erent motivations goals common background problems techniques developed field related 
presents techniques combining fields logic programming context nonmonotonic inductive logic programming 
review results problems realize 
representing knowledge computational logic gives formal foundations artificial intelligence ai provides computational methods solving problems 
logic programming supplies powerful tool representing declarative knowledge computing logical inference 
logic programming classical horn logic su ciently expressive representing incomplete human knowledge inadequate characterizing nonmonotonic commonsense reasoning 
nonmonotonic logic programming introduced overcome limitations horn logic programming extending representation language enhancing inference mechanism 
purpose represent incomplete knowledge reason commonsense program 
hand machine learning concerns problem building computer programs automatically construct new knowledge improve experience 
primary inference learning induction constructs general sentences input examples 
inductive logic programming ilp realizes inductive machine learning logic programming provides formal background inductive learning advantages computational tools developed logic programming 
goal ilp inductive construction order clausal theories examples background knowledge 
ilp seemingly di erent motivations goals common background problems techniques developed field related 
process discovering new knowledge humans iteration hypotheses generation revision inherently nonmonotonic 
induction nonmonotonic reasoning sense induced hypotheses changed new evidences 
second induction problems assume background knowledge incomplete need learn 
representing reasoning incomplete knowledge vital issues ilp 
third uses hypotheses process commonsense reasoning hypotheses generation particularly important abductive logic programming 
abduction generates hypotheses di erent manner induction inverse deduction extend theories account evidences 
abduction induction interact phases 
fourth updates general rules considered context intentional knowledge base update similar problem captured ilp concept learning 
argued researches handle problem formulated logical framework 
reasons clear ilp cope similar problems close links 
comparing ilp performs default reasoning derives plausible incomplete knowledge bases 
various types inferences semantics introduced extract intuitive program 
may change new information mechanism learning new knowledge input 
contrast ilp extends theory constructing new rules input examples background knowledge 
discovered rules reveal hidden laws examples background knowledge predicting unseen phenomena 
ilp considers horn logic programs classical clausal programs background knowledge limited applications nonmonotonic situations 
ilp limitations frameworks complement 
commonsense reasoning machine learning indispensable realizing intelligent information systems combining techniques fields context nonmonotonic inductive logic programming meaningful important 
combination extend representation language ilp side introduce learning mechanism programs side 
linking di erent extensions logic programming strengthen capability logic programming knowledge representation tool ai 
practical viewpoint combination beneficial ilp established techniques open new applications 
realizes nonmonotonic reasoning negation failure naf 
researches ilp argue negation failure inappropriate machine learning 
authors say concept learning negation failure underlying closed world assumption unacceptable acts known 
clearly learning case ought learned 
account plausible justify excluding naf ilp 
suppose background knowledge horn logic program cwa naf infers negative facts derived program 
new evidence initially assumed false cwa naf observed just means old assumption 
task inductive learning revise old theory explain new evidence 
hand excludes naf background program loses way representing default negation program 
significant drawback representing knowledge restricts application ilp 
fact naf enables write shorter simpler programs appears basic practical prolog programs computing set di erences finding union intersection lists 
horn ilp precludes program including rules naf 
naf important ilp naf invalidates need learning 
field ilp considered called nonmonotonic problem setting 
background horn logic program set positive examples computes hypothesis satisfied herbrand model called weak setting ilp 
setting fact derived assumed false closed world assumption cwa 
contrast strong setting ilp computes hypothesis implies imply negative examples 
strong setting usually employed ilp considered see section 
nonmonotonic setting called nonmonotonic sense performs kind default reasoning closed world assumption 
systems take similar approaches clark completion instance 
mentioned nonmonotonic setting clearly di erent problem setting 
considers induction problem clausal logic extend problem nonmonotonic logic programs 
presents techniques realizing inductive machine learning nonmonotonic logic programs 
intended provide comprehensive survey state art mainly consists research results author 
rest organized follows 
section reviews frameworks ilp 
section presents various techniques induction nonmonotonic logic programs 
section summarizes addresses open issues 
weak setting called descriptive confirmatory induction strong setting called explanatory predictive induction 
preliminaries nonmonotonic logic programming nonmonotonic logic programs considered normal logic programs logic programs negation failure 
normal logic program nlp set rules form 
bm bm 
bn atom presents negation failure naf 
left hand side head right hand side body rule 
conjunction body identified set 
bm bm 
bn 
rule head body denote head body respectively 
conjunction body written greek letter rule empty body called fact identified atom rule empty head called integrity constraint 
program means normal logic program stated 
program horn rule contains naf 
horn program definite contains integrity constraint 
herbrand base hb program set ground atoms language herbrand base hb define hb hb hb 
element hb called lp literal lp literal form called naf literal 
say lp literals sign hb hb hb hb 
lp literal pred denotes predicate const denotes set constants appearing program rule lp literal ground contains variable 
program rule containing variables semantically identified ground instantiation set ground rules obtained program rule substituting variables elements herbrand universe possible way 
interpretation subset hb 
interpretation satisfies ground rule form 
bm bm 
bn imply written 
particular satisfies ground integrity constraint 
bm bm 
bn 
bm bm 
bn 
rule contains variables means satisfies ground instance interpretation satisfies rule program model program 
model program minimal model horn logic program minimal model called model 
semantics consider stable model semantics 
program interpretation ground horn logic program defined follows rule 
bm ground rule form ground instantiation bm 
bn 
model identical called stable model program may multiple stable models general 
program having exactly stable model called categorical 
stable model coincides model horn logic program 
locally stratified program unique stable model called perfect model 
stable model define hb 
program consistent stable model semantics stable model program inconsistent 
program assumed consistent stated 
stable model program satisfies rule written stable model program satisfies rule written particular ground atom true stable model false stable model contrast model satisfies written note horn meaning coincides classical entailment 
inductive logic programming typical ilp problem stated follows 
logic program representing background knowledge set positive examples set negative examples find hypotheses satisfying 


consistent 
condition called completeness respect positive examples second condition called consistency respect negative examples 
implicitly assumed need introduce hypothesis covers resp 
uncovers example resp 

goal ilp develop algorithm ciently computes hypotheses satisfying conditions 
induction algorithms roughly classified categories direction searching hypotheses 
topdown algorithm firstly generates general hypothesis refines means specialization bottom algorithm searches hypotheses generalizing positive examples 
algorithm locally alternates search directions general specific vice versa correct hypotheses 
algorithms sections bottom ground 
induction algorithm correct hypothesis produced algorithm satisfies conditions 
contrast induction algorithm complete produces rule satisfying conditions 
note correctness generally requested algorithms completeness problematic practice 
instance consider background program positive example 
negative example just written rules explains 
generally exist possibly infinite solutions explaining example designing complete induction algorithm restriction little value practice 
order extract meaningful hypotheses additional conditions usually imposed possible hypotheses reduce search space 
condition called induction bias defined information syntactically semantically influences learning processes 
field ilp studies consider horn logic program background knowledge induce horn clauses hypotheses 
consider nlp background knowledge induce hypothetical rules possibly containing naf 
section give algorithms realize 
induction nonmonotonic logic programs generalization generalization basic operation perform induction 
seminal plotkin introduces generalization clausal theories subsumption 
clauses subsumes substitution 
general subsumption subsumes normal logic programs subsumption relation rules defined follows 
definition 
subsumption relations rules rules 
subsumes written head head body body hold substitution 
case said general subsumption 
subsumption defined comparison rules predicate heads 
definition employed taylor 
fogel discuss ect subsumption reduce search space normal logic programs 
generalization clausal theories generalizations clauses particularly important 
notion defined nonmonotonic rules follows 
definition 
generalization subsumption finite set rules rule predicate head 
rule generalization subsumption rule rule satisfying holds clausal language finite set clauses generalization 
particular finite set horn clauses generalization horn clause 
consider normal logic programs rules syntactically regarded horn clauses viewing naf literal atom new predicate result horn logic programs directly carried normal logic programs 
theorem 
existence generalization finite set rules rule predicate head 
nonempty set generalization subsumption 
generalization rules computed follows 
generalization terms 

new variable defined lg 
lg lg means generalization generalization lp literals 

undefined predicate sign defined lg lg 
lg 
generalization rules predicate obtained lg lg lg defined 
particular empty generalization integrity constraints generalization finite set rules computed repeatedly applying procedure 
ilp generalization usually considered relation background knowledge 
plotkin extends subsumption relative subsumption 
background knowledge clausal theory clause subsumes relative substitution 
apply relative subsumption normal logic programs 
rule atom conjunction 
suppose rule program substitution 
say rule obtained unfolding say obtained unfolding sequence 
rules obtained unfolding definition 
relative subsumption nlp rules 
subsumes relative written rule obtained unfolding subsumes case said general relative subsumption 
definition reduces definition empty 
definition relative subsumption defined rules having clauses predicate sign common empty clause generalization 
predicate heads 
clausal theories buntine introduces generalized subsumption defined definite clauses having predicate heads 
comparing definitions buntine definition model theoretic definition operational 
taylor introduces normal subsumption extends buntine subsumption normal logic programs defined model theoretic manner 
example 
suppose background program rules follows 
wing bird ab bird sparrow ab broken wing 
lies wing 
lies sparrow full grown ab 
rule lies sparrow ab obtained unfolding 
subsumes clausal theories generalization exist relative subsumption 
background knowledge finite set ground atoms generalization clauses constructed 
result extended nonmonotonic rules rephrased context follows 
finite set ground atoms rules 
generalization rules relative subsumption constructed generalization head head body body example 
suppose background program positive examples follows 
bird tweety bird polly lies tweety wing tweety ab tweety 
lies polly sparrow polly ab polly 
lies tweety bird tweety bird polly wing tweety ab tweety lies polly bird tweety bird polly sparrow polly ab polly 
generalization lies bird tweety bird polly bird ab 
removing redundant literals lies bird ab 
case holds 
inverse resolution inverse resolution idea inverting resolution step clauses 
operators carry inverse resolution absorption identification called operators 
operator builds parent clauses parent clause resolvent 
suppose rules rule produced unfolding absorption constructs identification constructs see 
normal logic program containing rules absorption produces program hand nlp containing rules identification produces program note multiple exist general choice input rules write mean 
horn logic program information implied implied regard operators generalize horn logic program 
presence negation failure program operators generalization operations general 
example 
program stable model 
absorbing third rule second rule produces stable model 

counter example identification constructed similar manner 
reason clear nonmonotonic logic programs newly proven facts may block derivation facts proven 
result operators may generalize original program 
example shows operators consistent program inconsistent 
example 
program stable model 
absorbing third rule second rule produces stable model 
example shows operators destructive ect meaning programs general 
known may destroy syntactic structure programs acyclicity local stratification 
observations give caution apply operators 
condition operators generalize nlp follows 
theorem 
conditions operators generalize programs nlp rules section 
naf literal depend head implies hb 
ii depend atom implies hb 
example 
suppose background program positive example follows 
lies sparrow ab bird sparrow sparrow tweety bird polly lies polly 
initially lies tweety lies polly 
absorbing second rule rule produces program rule replaced rule lies bird ab 
lies polly 
notice lies tweety holds 
taylor introduces di erent operator called normal absorption generalizes normal logic programs 
depends transitive relation defined depends ground rule appears head appears body rule 
inverse entailment suppose induction problem horn logic program single horn clauses 
inverse entailment idea possible hypothesis deductively constructed inverting entailment relation background theory nonmonotonic logic program technique 
deduction theorem order logic known deduction theorem hold nonmonotonic logics general 
solve problem sakama introduced entailment theorem normal logic programs 
nested rule defined atom rule form 
interpretation satisfies ground nested rule implies nlp satisfied stable model theorem 
entailment theorem nlp rule consistent 
ground atom implies converse imply entailment theorem corresponds deduction theorem inverting entailment normal logic programs 
theorem 
normal logic programs nlp rule consistent 
ground lp literal relation provides necessary condition computing rule satisfying atom resp 
naf literal represents positive resp 
negative example 
condition states example initially false stable model simplify problem program assumed function free categorical rest section 
ground lp literals relation defined pred pred predicate arity const const 
ground lp literal set ground lp literals 
relevant ii shares constant lp literal relevant program unique stable model ground atom representing positive example 
suppose relation hold 
theorem relation holds 
start find rule satisfying condition 
consider integrity constraint consists ground lp literals relevant positive example satisfy integrity constraint holds 
rule satisfies condition 
holds relevant integrity constraint contains body 
shifting atom head produces 
rule generalized constructing rule substitution 
verified rule satisfies condition theorem presents su cient condition correctness induce theorem 
correctness rule function free categorical nlp ground atom rule obtained 
consistent pred appear example 
program bird penguin bird tweety penguin polly example lies tweety holds lies tweety 
goal construct rule satisfying set lp literals bird tweety bird polly penguin polly penguin tweety lies tweety lies polly 
picking lp literals relevant integrity constraint bird tweety penguin tweety lies tweety function free consists finite lp literals 
constructed 
shifting lies tweety head produces lies tweety bird tweety penguin tweety replacing tweety variable rule lies bird penguin obtained holds 
inverse entailment algorithm learning programs negative examples 
techniques section reviews techniques learning nonmonotonic logic programs 
bain muggleton introduce algorithm called closed world specialization cws 
algorithm initial program intended interpretation learned program satisfy 
setting atom included interpretation considered false 
instance suppose program lies bird bird eagle bird emu intended interpretation lies eagle bird eagle bird emu lies emu interpreted false 
implies lies emu cws algorithm specializes produces lies bird ab bird eagle bird emu ab emu ab newly introduced atom 
algorithm naf specializing horn clauses cws produces normal logic programs 
inoue propose algorithm called learns extended logic programs elp answer set semantics 
algorithm close bain muggleton method di erent point uses open world specialization ows cws valued setting 
ows closed world assumption identify negative instances target concept 
positive negative examples firstly constructs monotonic rules cover positive examples ordinary ilp algorithm generates default rules uncover negative examples incorporating naf literals atom called invented 
ordinary ilp means top bottom ilp algorithm clausal logic 
bodies rules 
addition exceptions rules identified negative examples generalized default cancellation rules 
hierarchical defaults learned recursively calling exception identification algorithm 
instances possibly classified positive negative nondeterministic rules learned multiple answer sets resulting program 
lamma formalize problem founded semantics 
algorithms di erent levels generalization strategically combined order learn solutions positive negative concepts 
dimopoulos kakas construct default rules exceptions 
instance suppose background program bird penguin penguin super penguin bird bird penguin super penguin positive negative examples lies lies lies 
lies 
algorithm computes rule covers positive examples lies bird rule covers negative example algorithm computes rule explains negative example lies penguin order avoid drawing contradictory rule priority likewise algorithm computes rule lies super penguin priority unique feature algorithm learn rules ordinary ilp algorithm represent exceptions prioritized hierarchy naf 
sakama presents method computing inductive hypotheses answer sets extended logic programs 
elp ground literal suppose rule satisfying entailment relation answer set semantics 
shown relation implies provides necessary condition possible hypothesis explains candidate hypothesis obtained computing answer sets constructing rule unsatisfied answer set 
method provides result simpler table 
comparison algorithms learned programs algorithms nlp ordinary ilp specialization selection candidates top inverse resolution inverse entailment generalization section elp ordinary ilp ordinary ilp specialization computing answer sets manner 
function free stratified programs algorithm constructs inductive hypotheses polynomial time 
bergadano propose system called tracy learns derivation information examples 
system candidate hypotheses input system candidates system selects hypotheses cover uncover positive negative examples 
martin introduce algorithm learn valued semantics 
valued model background program constructs possibly recursive rules explain examples 
proposes system called 
consists deductive engine computes stable models founded model background nlp inductive engine induces hypotheses computed models positive negative examples 
learn programs 
fogel propose algorithm learning strict call consistent ectively searches hypotheses space subsumption iteratively constructed training examples 
algorithms summarized table 
related research learning abductive logic programs learning action theories important applications 
summary open issues overview techniques realizing induction nonmonotonic logic programs 
techniques ilp centered clausal logic far especially horn logic 
nonmonotonic logic programs di erent classical logic existing techniques directly applicable nonmonotonic situations 
contrast clausal ilp field nonmonotonic ilp explored issues remain open 
issues include generalization implication section introduced subsumption order rules provided algorithm computing generalization easy extension clausal logic 
hand clausal theories generalization implication order uses entailment relation clauses concerning generalizations implication result clausal logic directly applicable 
entailment relation considered commonsense semantics di erent classical entailment relation 
instance stable model semantics relation 
generality relations implication properties di erent subsumption order existence generalizations computability examined 
generalization operations nonmonotonic logic programs clausal theories operations inverting resolution generalize programs section generalize programs nonmonotonic situations general 
important develop program transformations generalize nonmonotonic logic programs particular semantics general 
transformations serve fundamental operations nonmonotonic ilp 
example kind transformations seen 
relations induction commonsense reasoning induction kind nonmonotonic inference theoretical relations induction nonmonotonic formalisms including nonmonotonic logic programming interest 
relations enable implement ilp terms open possibilities integrate induction commonsense reasoning 
researches direction 
years passed lpnmr conference held 
preface says growing interest relationship logic programming semantics non monotonic reasoning 
reasonably clear ample scope areas contribute 
concluding rephrase sentence ilp 
combining ilp framework nonmonotonic inductive logic programming important step better knowledge representation tool bring fruitful advance field 
author inoue comments earlier draft 

ade denecker 
abductive inductive logic programming 
proc 
th international joint conference artificial intelligence morgan kaufmann pp 


bain muggleton 
non monotonic learning 
muggleton ed inductive logic programming academic press pp 


baral gelfond 
logic programming knowledge representation 
journal logic programming 

bergadano nicosia ru learning logic programs negation failure 
de raedt ed advances inductive logic programming ios press pp 


brewka dix 
knowledge representation logic programs 
proc 
rd workshop logic programming knowledge representation lecture notes artificial intelligence springer verlag pp 


bry 
intensional updates abduction deduction 
proc 
th international conference logic programming mit press pp 


buntine 
generalized subsumption application induction redundancy 
artificial intelligence 

de raedt bruynooghe 
negation valued logic interactive concept learning 
proc 
th european conference artificial intelligence pp 


de raedt bruynooghe 
belief updating integrity constraints queries 
artificial intelligence 

de raedt bruynooghe 
theory clausal discovery 
proc 
th international joint conference artificial intelligence morgan kaufmann pp 


de raedt lavrac 
faces inductive logic programming 
proc 
th international symposium methodologies intelligent systems lecture notes artificial intelligence springer verlag pp 


dimopoulos kakas 
learning nonmonotonic logic programs learning exceptions 
proc 
th european conference machine learning lecture notes artificial intelligence springer verlag pp 


dimopoulos kakas 
abduction inductive learning 
de raedt ed advances inductive logic programming ios press ohmsha pp 


flach kakas eds 
abduction induction essays relation integration applied logic series kluwer academic 

flach 
logical characterisations inductive learning 
gabbay kruse eds handbook defeasible reasoning uncertainty management systems vol 
kluwer academic publishers pp 


fogel 
normal programs multiple predicate learning 
proc 
th international workshop inductive logic programming lecture notes artificial intelligence springer verlag pp 


gelfond lifschitz 
stable model semantics logic programming 
proc 
th international conference symposium logic programming mit press pp 



induction nonmonotonic inference 
proc 
st international conference principles knowledge representation reasoning morgan kaufmann pp 


inoue 
learning extended logic programs 
proc 
th international joint conference artificial intelligence morgan kaufmann pp 


inoue 
learning abductive nonmonotonic logic programs 
pp 


kakas 
learning abduction 
proc 
th international workshop inductive logic programming lecture notes artificial intelligence springer verlag pp 


lamma pereira 
strategies combined learning logic programs 
machine learning pp 


lamma mello esposito semeraro 
cooperation abduction induction logic programming 
pp 


lorenzo 
learning reason actions 
proc 
th european conference artificial intelligence ios press pp 


martin 
valued framework induction general logic programs 
de raedt ed advances inductive logic programming ios press pp 


michalski 
theory methodology inductive learning 
artificial intelligence 

mitchell 
machine learning mcgraw hill 

muggleton ed 
inductive logic programming academic press 

muggleton buntine 
machine invention order predicate inverting resolution 
pp 


muggleton de raedt 
inductive logic programming theory methods 
journal logic programming 

muggleton 
inverse entailment progol 
new generation computing 

nerode marek subrahmanian eds 
proc 
international workshop logic programming nonmonotonic reasoning mit press 


cheng de wolf 
foundations inductive logic programming 
lecture notes artificial intelligence springer verlag 

plotkin 
note inductive generalization 
meltzer michie eds machine intelligence edinburgh university press pp 


plotkin 
note inductive generalization 
meltzer michie eds machine intelligence edinburgh university press pp 


przymusinski 
declarative semantics deductive databases logic programs 
minker ed foundations deductive databases logic programming morgan kaufmann pp 


sakama 
properties inverse resolution normal logic programs 
proc 
th international workshop inductive logic programming lecture notes artificial intelligence springer verlag pp 


sakama 
inverse entailment nonmonotonic logic programs 
proc 
th international conference inductive logic programming lecture notes artificial intelligence springer verlag pp 


sakama 
learning answer sets 
proc 
aaai spring symposium answer set programming aaai press pp 



stable ilp exploring added expressivity negation background knowledge 
proceedings ijcai workshop frontiers ilp 

shoham 
nonmonotonic logics meaning utility 
proc 
th international joint conference artificial intelligence morgan kaufmann pp 


sterling shapiro 
art prolog nd edition mit press 

taylor 
inverse resolution normal clauses 
proc 
rd international workshop inductive logic programming stefan institute pp 

