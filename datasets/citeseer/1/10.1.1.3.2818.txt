inferring tcp connection characteristics passive measurements sharad iannaccone christophe diot jim kurose don towsley computer science department univ massachusetts amherst kurose cs umass edu intel research cambridge uk iannaccone christophe intel com propose passive measurement methodology infer keep track values important variables associated tcp connection sender congestion window cwnd connection round trip time rtt 
variables provide valuable diagnostic user perceived network performance 
methodology validated simulation concurrent active measurements shown able handle various flavors tcp 
passive approach measurement points tier network provider able analyze connections senders located autonomous systems today internet 
results indicate sender throughput frequently limited lack data send tcp congestion control flavor minimal impact throughput vast majority connections experience significant variations rtt lifetime 
index terms network measurements traffic analysis tcp tcp transmission control protocol dominant transport protocol currently deployed internet wide range applications web traffic grid applications newly emerging peerto peer applications relying tcp transport services 
reliance tcp currently great interest understanding tcp performance characterizing factors network congestion sender receiver buffer limits sender data starvation limit behavior practice 
passive measurement methodology observes sender receiver supported national science foundation eia itr ani gift sprint 
opinions findings recommendations expressed material authors necessarily reflect views national science foundation 
part carried iannaccone diot sprint atl ca 
receiver sender segments tcp connection infers tracks time evolution critical sender variables sender congestion window cwnd connection round trip time rtt 
see knowledge values important characteristics sender receiver network path connects determined 
example comparing cwnd amount data sent determine tcp connection starved application level data connection support higher transfer rate data available carefully observing manner cwnd changes response loss identify non conformant tcp senders particular conformant flavor tcp tahoe reno new reno monitoring rtts characterize rtt variability flows determine extent application level adaptivity needed cope variable network delays 
important contributions 
contribution methodological 
develop passive methodology infer sender congestion window observing tcp segments passing measurement point 
measurement point sender receiver 
require packets observed directions tcp connection requirement previous shown overly restrictive 
case connection experiences losses methodology estimate cwnd sensitive tcp congestion control flavor tahoe reno new reno best matches sender observed behavior 
propose simple rtt estimation technique estimated value cwnd second contribution terms measurements application methodology traces gathered sprint ip backbone 
results distributions congestion window sizes rtts observed tcp connections 
study unique examines remarkably large diverse number tcp connections 
passive methodology measurement points tier network provider able analyze connections senders located autonomous systems today internet 
find sender throughput frequently limited lack data send lack data network congestion limiting factor 
find majority tcp connections reach maximum congestion window order segments packets belong connections windows larger segments 
find connections generally experience large rtt variations lifetime 
example approximately connections ratio th percentile rtt value th percentile rtt value absolute terms rtt variation connection lifetime second connections 
find tcp congestion control flavors generally minimal impact sender throughput vast majority connections achieve throughput independently congestion control flavor implemented 
remainder organized follows 
section ii discusses related 
sections iii iv methodology keep track sender congestion window infer tcp sender flavor compute rtt 
section identify events introduce uncertainty estimates define bounds uncertainty 
section vi describes results evaluation methodology simulations real world experiments 
section vii presents observations derived analysis packet traces collected various points core sprint ip backbone 
section viii summarizes contributions provides directions extension 
ii 
related numerous measurement studies investigated characteristics tcp connections internet 
early studies actively measured endto properties loss delay throughput tcp connections passively characterized connection aggregate properties size duration throughput 
researchers focused attention specific details tcp implementations 
develops tool characterize tcp behavior remote web servers 
approach involves actively sending requests web servers dropping strategically chosen response packets order observe server response loss 
observe prevalence various tcp implementations presence tcp options sack ecn identify conformant congestion control behaviors 
approach contrast passive able easily characterize large numbers tcp connections 
author ability run tcpdump set hosts 
describes tool analyze traces reports differences behavior different tcp implementations 
methodologically alike sense involve passive observation behavior tcp connection heuristics decide flavor implementation tcp best matches connection observed 
scope focused highlighting differences various tcp implementation stacks 
measurement point located middle path possible distinguish particular sender behavior due events network endsystem tcp implementation issues 
track millions highly diverse tcp connections concern implementation level details senders 
main goal track sender congestion window 
seek detect cases estimate congestion window may different sender perform detailed case case analysis reasons difference 
analyzed traces involve bulk file transfers author take account effects sender application behavior 
aspect discussed detail 
location observation point introduces methodological challenges estimating connection rtt contrast measurements taken hosts propose technique address issue 
study larger scale diverse 
interest presents methodology classify sequence packets measurement environment current 
discussed section iv methodology identify packet retransmissions traces 
closely related 
authors passively monitor tcp connections develop heuristics classify connections factor limit throughput 
technique proposed estimate rtt selecting value set predetermined values closely matches observed packet flight dynamics 
differs important respects 
importantly goal study rate limiting factors tcp fundamentally develop methodology estimating cwnd rtt arguably important pieces tcp sender state 
see knowledge values allow study characteristics tcp connections 
values determine factors limit tcp throughput 
values detect tcp senders determine extent various flavors tcp practice 
values determine newer version tcp able exercise enhanced capabilities newreno fast recovery mechanism practice 
cases overlaps determining factors limit tcp connection throughput direct comparison currently possible tools released 
conjecture techniques quite complementary combined allow better classification tcp behaviors tool 
efforts considered problem estimating rtt connection passive measurements 
works compute rtt sample tcp connection slow start phase 
works extends efforts computes rtt estimates connection lifetime 
iii 
tracking congestion window section describe methodology keep track sender congestion window cwnd congestion window represents maximum amount data sender potentially transmit point time 
basic idea construct replica tcp sender state tcp connection observed measurement point 
replica takes form finite state machine fsm 
replica fsm updates current estimate sender cwnd observed receiver sender acks received sender cause sender change state 
transitions caused detecting timeout event sender 
timeouts manifested form outof sequence sender receiver retransmissions detected passive measurement techniques 
fsm implementation described detail :10.1.1.3.2818
estimating state distant sender poses challenges order process large amounts data hundreds gbytes replica perform limited processing maintain minimal state 
replica works streaming fashion backtrack reverse previous state transitions 
position middle path replica may observe sequence packets sender 
acks observed measurement point may reach sender 
additionally packets sent sender may reordered duplicated sender measurement point path 
techniques identify classify sequence packets 
manner cwnd modified packet loss dictated flavor sender congestion control algorithm 
consider major flavors tcp congestion control tahoe reno newreno instantiate different fsms flavor 
implementation details tcp sender tcp options invisible replica considerations introduce uncertainties cwnd estimation discuss detail section variables initialized replica fsm 
sender initial congestion window size maximum number bytes sender transmit completing triple handshake acks arrive 
typical value twice maximum segment size 
experimental tcp specification allows high twice value :10.1.1.13.3367
estimate keeping count number data packets observed seeing receiver ack 
initialize slow start threshold ssthresh extremely large value commonly done tcp stacks 
normal operations tcp sender slow start congestion avoidance 
arrival new ack increases cwnd cwnd respectively 
sender detects loss exist implementations tcp vegas tcp westwood aware widely os stacks implement algorithms drop study :10.1.1.41.8565:10.1.1.115.4540
sprint ipmon traces contain bytes packets :10.1.1.6.6672
tcp packets access bytes payload 
tcp implementations sender initializes value ssthresh route cache issue discuss section timeout sets cwnd ssthresh max min awnd cwnd awnd receiver advertised window 
interesting case packet loss detected receipt duplicate acks event brings differences flavors consideration tahoe 
tahoe sender reacts receipt duplicate acks called fast retransmit behaving exactly retransmission timeout expired 
reno 
reno tcp adds fast recovery tahoe fast retransmit algorithm 
fast recovery works assumption duplicate ack indication packet successfully reached receiver 
sender adjusts cwnd account fact ssthresh set max min awnd cwnd cwnd set ssthresh 
sender increments cwnd new duplicate ack received 
sender receives new ack resets value cwnd ssthresh exits fast recovery returning congestion avoidance 
newreno 
newreno introduces simple change reno fast recovery mechanism removing need detect loss timeout multiple losses occur single congestion window :10.1.1.47.6408
change occurs sender receives new ack recovery phase 
newreno sender checks partial new ack acknowledge packets sent fast retransmit 
ack partial sender immediately retransmits packet requested receiver remains fast recovery 
behavior ensures sender able retransmit lost packet rtt timeout mechanism 
newreno sender remains phase receives ack acknowledges outstanding packets recovery phase point returns congestion avoidance 
tcp flavor identification noted flavors tcp respond differently loss events 
order determine flavor tcp implemented sender exploit fact tcp sender outstanding unacknowledged flight packets usable window size 
sender usable window size smaller cwnd window advertised rfc instructs loss ssthresh set max number packets currently unacknowledged 
choose min awnd cwnd follow current implement tcp linux freebsd 
receiver 
forms basis test identify sender flavor 
data packet sent sender check packet allowed current fsm estimate cwnd particular flavor 
flavor packet allowed observed data packet represents violation event allowed 
maintain count number violations incurred candidate flavors 
sender flavor inferred flavor minimum number violations time life connection sender congestion window value cwnd estimated flavor 
violations observed tcp flavors say flavors indistinguishable 
section vii quantify extent various flavors tcp observed traces 
sack ecn tcp sender behavior depends options deployment reported growing fast selective acknowledgments sack explicit congestion notification ecn 
tcp sack option allows recovery multiple losses single congestion window timeout 
sack change congestion window dynamics sender helps deciding send send 
measurement points access sack blocks 
cases possible detect presence sack blocks infer sack information fast recovery 
detecting sack information part ongoing considered 
ecn capable sender explicitly notifies receiver reduction congestion window reason fast retransmit retransmission timeout flagged acknowledgment 
measurement point estimate congestion window sender just looking ecn bits tcp header 
unfortunately ecn widely deployed 
packet traces studied connections ecn aware 
iv 
round trip time estimation section describe technique compute rtt samples lifetime tcp connection leveraging cwnd estimation techniques previous section 
implementation method simple cases results rtt samples computed actual tcp sender 
provide brief overview technique reader referred detailed description 
sender receiver ack data packet data packet triggered ack inferred rtt sample sender rtt sample fig 

tcp running sample rtt estimation basic idea rtt estimation technique illustrated 
able directly measure sender rtt sample shown left measure round trip delay measurement point receiver back measurement point labeled ii round trip delay measurement point sender back measurement point labeled 
sum delays shown estimate rtt 
refer method running rtt estimation technique continuously rtt estimates measured values tcp connection lifetime 
case transmission time data packets exactly rtt estimate exact 
investigate magnitude rtt estimation error shortly 
conclude mentioning important aspects running rtt estimation technique 
important requirement running rtt estimation technique ability determine data packet transmissions triggered arrival particular ack 
requires accurate estimate cwnd techniques previous section come play 
technique able restart rtt estimation sender recovers loss order closely emulate behavior actual tcp sender compute rtt loss recovery 
order technique relies knowledge state tcp connection sender fast recovery 
sources estimation uncertainty idea replicating sender state tracking various tcp flavors complicated 
measurement point partial information tcp connections observes 
location middle path may observe events senders vice versa 
assumes complete knowledge tcp stack implementations may subtle malicious differences 
characteristics measurement methodology introduce uncertainties estimate sender state 
significant aspect understand issues impact approach passive measurement approach middle path 
order address issues start identifying events network result ambiguous erroneous state measurement point 
discuss methodology detect events provide quantitative upper bound occurrence 
estimation cwnd measurement point may underestimate cwnd observes duplicate acks reach sender 
methodology measurement point infer sender undergo fast retransmit reduce cwnd ssthresh accordingly 
sender eventually timeout retransmit packet 
point measurement point detect timeout reduce value ssthresh twice fast retransmit part timeout sender 
note measurement point detects timeout reverse decision 
measurement point observe sequence packets third duplicate ack lost ssthresh modified packet sent due fast retransmit lost ssthresh modified twice 
hand detection cases relatively simple 
sender greedy transmit packets estimated cwnd permit 
sender trigger violations tcp flavor fsms 
way measurement point identify connections congestion window uncertain 
order quantify frequency events counted number senders incur violations flavors packet traces study 
senders show behavior 
focus senders packets send percentage goes 
expected packets senders packets may experience fast retransmit 
fact sender initial window packets presence delayed acks send packets flights packets respectively 
sender transmits higher likelihood incur loss scenario described 
estimation cwnd events lead estimate congestion window size 
acknowledgments lost measurement point 
ack new data observed measurement point causes increment cwnd 
ack lost reaching sender corresponding increment sender resulting overestimation sender congestion window 
fast recovery extra duplicate acks observed measurement point cause cwnd increased 
acks lost reach sender measurement point estimate sender cwnd 
entire window data packets lost measurement point 
entire window packets transmitted sender dropped measurement point remain undetected 
order detect loss measurement point needs observe packets receiver related packet drops form duplicate acks earlier transmissions data packets 
case sender timeout update values ssthresh cwnd measurement point maintain old values 
loss initial syn packet special case event measurement point estimate ssthresh set sender incorrectly consider sender slow start longer needed 
detection overestimation events particularly difficult 
fact sender measurement point larger estimate cwnd just appear greedy sender rate limited application kernel sending buffer size 
senders uncommon zhang estimate application limited senders account senders 
traces tend confirm estimate senders greedy see section vii 
important remember numbers represent loose upper bounds magnitude type estimation uncertainty 
window scaling sender window minimum cwnd receiver advertised window awnd 
collect bytes packets track advertised window connections 
connections window scale option capturing bytes hides scale factor making impossible know exact value receiver window 
order estimate problem occurs count number connections window scale option count connections cwnd exceed awnd 
standard requires hosts negotiate window scaling option initial connection setup 
size syn syn ack packet infer packets accommodate window scale option consumes bytes 
connections window scale option scale window size lower bound size receiver window 
identify connections uncertain sender window cwnd reaches lower bound awnd 
packet traces study measurement point uncertain sender window connections 
note numbers refer case window size uncertain lifetime connection 
general methodology allows track correctly cwnd long lower bound awnd 
cwnd exceeds lower bound awnd may underestimate cwnd discussed earlier 
issues tcp implementations previous works uncovered bugs tcp implementations various os stacks 
example tool authors web servers probed version reno behave aggressively reno recovery phase web servers simply cut window loss 
issue mentioned section iii regarding initialization senders ssthresh value 
tcp implementations cache value sender cwnd just connection particular destination ip address terminates reuse value initialize ssthresh subsequent connections destination 
cases tcp sender start smaller value ssthresh result exiting slow start earlier predicted fsms 
implementation issues affect ability track congestion window rtt tcp sender 
impractical detect track possible tcp implementations 
hand techniques described identify inaccuracies cwnd estimate discover tcp senders congestion control differences implementation interrupt rtt cwnd estimation 
example sender react receipt duplicate acks violate tcp flavors discovered measurement point 
sender smaller initial value ssthresh exits slow start earlier predicted fsm appear non greedy source prompting computing rtt estimates 
impact rtt estimation rtt estimation directly affected estimation inaccuracies cwnd 
methodology needs know cwnd order identify data packet transmission sender triggered receipt ack estimation see section iv 
estimation cwnd result estimation rtt 
reason measurement point detects estimation uncertainty cwnd interrupts rtt estimation connection 
vi 
evaluation validated methodology simulations experiments internet 
simulations simulations ns simulator typical dumbbell topology single bottleneck link 
generated long lived flows analysis cross traffic consisting short lived flows packets arrival times uniformly distributed length simulation 
sets experiments bottleneck link located sender measurement node bottleneck measurement point 
ran simulations different parameters bottleneck link varying bandwidth buffer size propagation delay 
average loss rate various scenarios varied 
sender compare rtt samples measured methodology values computed ns sender 
estimated cwnd values compared maintained sender time sender window changes 
series estimated observed values compute average relative errors sender 
plots cumulative distribution mean relative errors rtt cwnd 
estimated error cwnd shown senders 
mean relative error cwnd rtt fig 

mean relative error cwnd rtt estimates simulations sender study incurred error larger 
absolute terms senders average cwnd packets error packet 
rtt estimate error senders exceeds actual value 
simulations give insight accurately methodology identifies tcp flavor 
senders tcp flavor senders identified correctly 
remaining senders zero violations flavors suffer specific loss scenario allows distinguish flavors equal number violations flavor including correct 
misclassified connections 
happen fsm corresponding tcp sender flavor sender congestion window example scenario described section 
fsm may experience violations estimate sender cwnd lead incorrect identification sender flavor 
observed increasing duration simulations able increase number connections correctly identified flavor 
expected packets sender transmits higher probability sender exhibit behavior peculiar flavor 
experiments network validated inference techniques experimental testbed 
setup consists pcs running freebsd operating systems modified kernel exports connection variables user space facility 
pcs located university massachusetts amherst ma sprint atl ca 
traffic sites passed oc access link ca passively monitored ipmon system 
carried experiments mean relative error cumulative fraction senders cwnd rtt fig 

mean relative error cwnd rtt estimates losses induced dummynet setting tcp connections divided reno newreno flavors 
ran set experiments different times day days bulk transfers lasting seconds minutes 
low loss rates rarely exceeding experienced connections estimate accurate 
error cwnd order rounding error converting cwnd bytes packets 
low error rates observed native amherst connection ran second set experiments dummynet bridge front tcp senders emulate bottleneck link loss rates range :10.1.1.57.2969
plots mean relative error cwnd rtt 
error cwnd estimate senders 
absolute terms senders exhibit error packets 
level error due rounding errors measurement point tcp stacks kernels study 
rtt errors small senders error 
note rtt errors expected 
average rtt umass sprint atl ms error order kernel clock tick testbed machines set ms 
summary simulations live internet experiments demonstrated accuracy methodology tracking cwnd rtt relative errors small order possibly due rounding errors clock tick precision 
vii 
backbone measurements ipmon infrastructure provides packet level traces oc links points presence pops sprint backbone details see ipmon sprint com show results data sets bidirectional oc gbps link east coast 
named east coast ii bidirectional oc links connecting san jose ca relay va iii bidirectional oc link inside new york pop intra pop 
table presents summary characteristics data sets 
data sets hour long contain total approximately tcp connections 
believe traces provide representative sample internet traffic 
example retrieved bgp table sprint backbone routers trace collection path information derive source destination ases observed tcp connections 
data sets contain tcp connections originating unique ases 
represents total number allocated ases time trace collection counted ases november st 
congestion window metric interest maximum window tcp sender reaches connection lifetime 
mentioned earlier maximum window size limited factors including receiver advertised window shows empirical cumulative distribution function maximum window size lifetime connections 
curves correspond different thresholds size flows 
curve minimum threshold data packets steepest slope includes small connections opportunity expand window sizes 
median value maximum window flows flows maximum window size 
observe flow size threshold increases distribution curves similar median maximum window size approximately packets 
connections larger higher probability incurring loss restricted window 
additionally distributions show set spikes values corresponding maximum window sizes packets 
values correspond connections restricted advertised window values kbytes mss bytes 
discussed section remove senders unsure receiver window analysis combined data traces analysis distributions window size similar traces 
please refer trace analysis :10.1.1.3.2818
east coast intra pop link speed oc gbps oc gbps oc gbps 
links unique source ases unique network prefixes tcp connections percentage tcp tcp data packets table summary traces maximum sender window packets senders pkts percentage senders intra pop east coast maximum sender window packets senders pkts percentage senders intra pop east coast fig 

cumulative fraction senders function maximum window senders relatively small maximum window size packets belong connections large window sizes 
plots cumulative distribution packets belong connection maximum window size 
looking curve flows data packets observe flows maximum window size data packets carry packets 
observe similar spikes distribution previous corresponding commonly values receiver advertised windows 
throughput connections limited receiver advertised window point lifetime 
connections account packets 
look connections data packets observe connections respectively limited receiver window 
tcp flavors described section iii congestion window evolution depend flavor tcp congestion control 
maximum sender window cumulative fraction senders pkts pkts pkts pkts pkts fig 

cumulative fraction senders function maximum window table ii gives number connections packets data sets conform specific flavor 
flavor particular tcp sender defined flavor estimated cwnd values resulted minimum number observed violations packets sent exceeded estimated available window 
senders window violations classified indistinguishable indicating specific flavor affect connection throughput 
case parity tcp reno newreno violations count sender reno sender 
table ii consider senders transmit data packets 
way consider connections opportunity experience fast retransmit 
senders account senders contribute data packets 
interestingly behavior senders allow distinguish particular flavor congestion control 
congestion control flavors manifest differences way respond receipt duplicate acknowledgments 
traces event maximum sender window cumulative fraction senders pkts pkts pkts pkts pkts fig 

cumulative fraction packets function sender maximum window tcp senders data packets senders pkts indistinguishable tahoe reno newreno table ii tcp flavors relatively rare senders experience triple duplicate ack 
fast retransmit flavors exhibit different behavior presence specific loss patterns 
senders opportunity flavor manifesting behavior lifetimes 
table ii shows number packets belong connections different flavors 
metric number packets belong indistinguishable category drops 
expected large connections higher probability experiencing losses allow classify flow specific flavor tcp 
newreno connections carry disproportionately large number packets compared reno senders 
expected difference reno newreno manifests presence multiple packet losses window data 
likelihood event happening higher long connections large windows 
order confirm conjectures plot percentage senders packets classified reno newreno function number data packets sent 
expected number senders fall threshold packets indistinguishable newreno reno threshold packets fig 

percentage reno newreno senders packets function data packets transmit indistinguishable category decreases number packets sent increases 
number data packets sent increases newreno appears tcp flavor terms senders packets 
greedy senders sender defined greedy times number unacknowledged packets network equals available window size 
normal conditions measurement point observe full window data sent set acknowledgments returned new larger full window data packets sent 
model sender behavior flight set packets sent separated subsequent flights acks receiver 
estimate window available sender notion flights packets propose simple heuristic identify greedy senders number unacknowledged packets defined flight size flight available window flight sender greedy 
measurement point identifies new flight current flight data packet observed ack acknowledged data packet current flight basic assumption heuristic set packets sent flight sender interleaved acknowledgments packets flight acknowledgments arrive middle flight cover data packets belonging previous flights 
validity assumption depends presence packet losses measurement point needs wait recovery phase 
ack time rtt percentage senders greedy flights greedy fig 

fraction greedy senders distance measurement point receiver position measurement point respect sender receiver 
measurement point close receiver data packet immediately acknowledged data packet presence delayed acknowledgments 
measurement point estimate flight size packets deem sender 
order identify connections measurement point close receiver define ack time time observation data packet observation acknowledgment covers data packet 
discussion ratio ack time rtt called ack time ratio indication proximity measurement point receiver 
summarize split lifetime connection flights test flight number packets sent equal sender window flight 
examine senders transmit flights send data packets 
nearly senders greedy 
order test impact proximity receivers classification group senders categories depending ack time ratio 
shows fraction greedy senders largest category ack time ratio measurement point far receivers 
category senders greedy flights nearly senders greedy flights transmitted 
consider greediness senders close approximation percentage actual greedy senders 
important know representative set senders 
order address question compare distribution size connections ack time ratio greater connections 
plots quantile quantile plot log connection sizes 
observe perfect linear fit flow sizes log size packets senders ack rtt log size packets senders fig 

qq plot flow size flows large ack times flows minimum rtt msecs east coast intra pop median rtt msecs east coast intra pop fig 

top cdf minimum rtt bottom cdf median rtt data packets corresponds little flows populations linear trend higher percentiles 
lends confidence assumption connections large ack time ratio representative total population connections traces 
round trip times plots minimum median values rtts connections data sets 
plot rtts connections rtt samples directions 
choose threshold discount effects single erroneous values samples examine variability round trip time lifetime flow 
observe examined senders minimum value rtt msecs 
note rtt range msecs high secs 
distribution median value rtt lifetime flow similar shape minimum rtt senders value msecs 
look rtt variability connection 
consider th rtt th percentile rtt th percentile rtt th percentile rtt th percentile msecs east coast intra pop east coast intra pop fig 

variability rtt 
top ratio th th percentile bottom difference th th percentiles 
percentile th percentile rtt samples 
top plot look ratio values 
quite consistently data sets connections th percentile rtt times nearly senders range times 
absolute terms connections exhibit rtt variability ms bottom plot 
similar observations variability tcp round trip times reported measurements taken university access link 
authors report senders ratio th percentile minimum rtt sample connection senders ratio ranges 
efficiency slow start tcp slow start mechanism intended quickly identify equilibrium point connection sender run stably full window data flight 
connection reaches equilibrium congestion avoidance keep connection operating point 
assumption approach loss event valid estimator available bandwidth 
order verify assumption compare maximum window reached sender window right exiting slow start called 
plots cdf ratio maximum window 
consider senders fact measurement point close sender authors compute rtt time difference data packet corresponding ack 
ratio maximum sender window slow start window cumulative fraction senders empirical cdf packets left packets left packets left fig 

ratio maximum sender window window size exiting slow start packets transmit divide categories packets sent exiting slow start sent packets 
observe senders reach maximum window times larger 
note tcp connection assumes data rate reached slow start twice available bandwidth 
shows large portion connections reach rates times estimated available bandwidth 
may indicate tcp connections overly conservative may operate rates far available bandwidth 
congestion avoidance tcp connection spend rtts move away slow start dictated operating point 
investigation needed understand impact slowstart application performance identify improve bandwidth estimation quickly reverse incorrect decision 
part 
viii 
passive measurement methodology observes segments tcp connection infers tracks time evolution critical sender variables sender congestion window cwnd connection round trip time rtt 
measurement point sender receiver 
allows apply methodology packet traces collected middle backbone providing significant advantage comparison traditional active measurements 
able monitor millions tcp connections originated destined large portion entire internet 
identified difficulties involved tracking state distant sender described network events may introduce uncertainty estimation location measurement point 
defined bounds uncertainties investigated frequently occur traces study 
results lead observations sender throughput limited lack data send network congestion 
cases tcp flavor distinguishable appears newreno dominant congestion control algorithm implemented 
connections generally experience large rtt variations lifetime 
ratio th th percentile rtt approximately connections 
part investigate efficiency tcp slow start specifically issue packet loss connection experiences particularly estimator available bandwidth path 
looking represents fundamental building block addressing wide range research questions internet traffic identifying root causes packet losses congestion routing network failures 
methodology proposed classify sequence packets represented building block 
complements technique accurately estimate sender state connection flavor 
step correlate behavior different tcp connections identify common patterns 
allow understand connections experience congestion multiple points network 
allow identify autonomous systems contribute significantly connection loss drive connection throughput 
acknowledgments authors richard gass sprint atl systems support help setting experiments anonymous reviewers detailed comments 
smith jeffay 
variability tco roundtrip times 
proceedings acm sigcomm internet measurement conference oct 
allman floyd partridge :10.1.1.13.3367
increasing tcp initial window 
rfc sept 
allman paxson stevens 
tcp congestion control 
rfc apr 
brakmo peterson :10.1.1.41.8565
tcp vegas congestion avoidance global internet 
ieee journal selected areas communications oct 
gerla mascolo wang :10.1.1.115.4540
tcp westwood bandwidth estimation enhanced transport wireless links 
proceedings acm mobicom pages july 
floyd henderson :10.1.1.47.6408
newreno modification tcp fast recovery algorithm 
rfc apr 
moon lyles cotton khan moll seely diot :10.1.1.6.6672
packet level traffic measurements sprint ip backbone 
ieee network 
jacobson 
congestion avoidance control 
proceedings acm sigcomm pages 
jacobson braden borman 
tcp extensions high performance 
rfc may 
iannaccone diot kurose towsley :10.1.1.3.2818
inferring tcp connection characteristics passive measurements extended version 
technical report rr atl sprint atl july 
iannaccone diot kurose towsley 
measurement classification sequence packets tier ip backbone 
proceedings ieee infocom mar 
jiang dovrolis 
passive estimation tcp round trip times 
technical report july 
martin mcgregor cleary 
analysis internet delay times 
proceedings passive active workshop pam 
mathis mahdavi floyd romanow 
tcp selective options 
rfc oct 
padhye floyd 
inferring tcp behavior 
proceedings acm sigcomm aug 
paxson 
automated packet trace analysis tcp implementations 
sept 
paxson 
internet packet dynamics 
ieee acm transactions networking june 
ramakrishnan floyd black 
addition explicit congestion notification ecn ip 
rfc sept 
rizzo :10.1.1.57.2969
dummynet simple approach evaluation network protocols 
acm computer communication review jan 
thompson miller wilder 
wide area internet traffic patterns characteristics 
ieee network magazine nov 
zhang breslau paxson shenker 
characteristics origins internet flow rates 
proceedings acm sigcomm aug 
appendix procedure inputs argument input type remarks rto data ack dup ack packet types cause procedure invoked num dupacks integer number duplicate acks ack seqno sequence number sequence number acked data packet seqno sequence number sequence number expected data packet ocwnd integer value cwnd procedure integer number packets cumulatively acked new ack newreno variables variable name type remarks cwnd integer sender congestion window estimate ssthresh integer sender slow start threshold estimate recover sequence number new reno sequence number data packet observed entering fast recovery state default tahoe states default fast recovery reno newreno states mss bytes global variable maximum segment size connection awnd integer global variable receiver advertised window outputs name remarks cwnd ssthresh ocwnd updated values cwnd ssthresh ocwnd input format tahoe reno num dupacks ack seqno seqno ocwnd input format newreno num dupacks ack seqno seqno ocwnd fig 

variables required keep track cwnd tcp flavors procedure incr cwnd inputs cwnd ssthresh outputs cwnd cwnd ssthresh cwnd cwnd cwnd fig 

function update cwnd slow start congestion avoidance state input action ocwnd incr cwnd cwnd ssthresh ack seqno seqno ocwnd ssthresh max min awnd cwnd min cwnd awnd ocwnd min cwnd awnd cwnd ocwnd ssthresh max min awnd cwnd cwnd ocwnd fig 

pseudocode track congestion window tahoe state input action ocwnd incr cwnd cwnd ssthresh cmp ocwnd cwnd ocwnd ack seqno seqno ocwnd ssthresh max min awnd cwnd min cwnd awnd ocwnd min cwnd awnd ocwnd cwnd cwnd state fast recovery ocwnd ssthresh max min awnd cwnd cwnd ocwnd recovery ack seqno seqno ocwnd min cwnd awnd ocwnd ocwnd min cwnd awnd ocwnd cwnd ssthresh num dupacks state default ocwnd cwnd cmp cwnd cwnd ocwnd ocwnd ssthresh max min awnd cwnd cwnd ocwnd num dupacks state default fig 

pseudocode track congestion window reno state input action ocwnd incr cwnd cwnd ssthresh cmp ocwnd cwnd ocwnd ack seqno seqno ocwnd ssthresh max min awnd cwnd min cwnd awnd ocwnd min cwnd awnd cwnd cwnd recover seqno state fast recovery ocwnd ssthresh max min awnd cwnd cwnd ocwnd recovery ack seqno seqno ocwnd min cwnd awnd ocwnd min cwnd awnd ocwnd num dupacks ack seqno recover state default recover cwnd ssthresh cwnd cwnd ocwnd cwnd cmp cwnd cwnd ocwnd ocwnd ssthresh max min awnd cwnd cwnd ocwnd recover num dupacks state default fig 

pseudocode track congestion window newreno procedure cmp ocwnd inputs cwnd ocwnd outputs ocwnd cwnd ocwnd ocwnd fig 

function reset ocwnd procedure inputs argument input type remarks tahoe reno newreno flavor tested cwnd integer estimate cwnd flavor ocwnd integer value cwnd num dupacks integer number duplicate acks ack seqno sequence number sequence number acked cur seqno sequence number sequence number current data packet integer number packets currently unacknowledged inf integer flag denotes state flavor fast recovery state variables name type remarks isf alse integer flag indicates packet allowed flavor mss bytes maximum segment size connection outputs isf alse input format ocwnd num dupacks ack seqno cur seqno isf alse max cwnd ocwnd cur seqno ack seqno isf alse cur seqno ack seqno newreno num dupacks isf alse elsif inf isf alse fig 

testing tcp flavors procedure inputs argument input type remarks new data data dup ack packet types cause procedure invoked num dupacks integer number duplicate acks cwnd integer current estimate congestion window sender time current time cur seqno sequence number sequence number new data packet variables name type remarks state default frozen rtt estimation currently frozen starttime time estimate rtt started sequence number sequence number data packet rtt sample taken mss bytes maximum segment size connection outputs name remarks rtt estimate current rtt sample input format seqno state input action time cur seqno cur seqno cwnd mss ime time state default cwnd time cur seqno cur seqno rtt time ime cur seqno cwnd mss ime time state frozen state frozen table iii pseudo code describing rtt estimation scheme 
