notes design internet adversary david rosenthal petros maniatis roussopoulos tj giuli mary baker stanford university libraries stanford ca intel research berkeley ca computer science harvard university cambridge ma computer science department stanford university stanford ca hp labs palo alto ca 
design defenses internet systems deploy attack especially adaptive resilient defenses start realistic model threat 
requires assessment capabilities adversary 
design typically evolves process simulating system adversary 
requires design implementation simulated adversary capability assessment 
consensus capabilities suitable adversary evident 
part redesign protocol peers lockss digital preservation system included conservative assessment adversary capabilities 
assessment implications drew step reusable adversary specification 
lockss lots copies keep stuff safe program developed deployed test versions system preserving access academic journals published web 
fundamental problem digital preservation system affordable long term 
reduce cost ownership lockss system uses generic pc hardware open source software peer peer technology 
packaged network appliance box connected internet configured left job minimal monitoring administration 
system test libraries worldwide 
internet hosts appliances continually subject attack 
measures taken render operating system platform resistant attack compromise anticipated 
appliances cooperate detect repair damage peer peer network 
version protocol turned vulnerable various attacks 
redesigned protocol resistant attack 
redesign needed input assessment capabilities strategies potential adversaries unable find information theshelf 
assessment implications drew contribution eventual reusable adversary specification 
lockss trademark stanford university 
adversary assessment military intelligence seeks develop called potential adversary capabilities adversary intentions adversary expected attempt capabilities basis planning 
similarly plans techniques defending distributed systems exposed internet need appreciation capabilities intentions adversary may encounter deployed 
assessment identified probable adversary capabilities unlimited power unlimited identities conspiracy eavesdropping spoofing exploiting common vulnerabilities uncovering secrets unlimited power techniques described worm compromise large proportion vulnerable internet hosts short time 
practice sophisticated techniques proven capable compromising large numbers hosts quickly despite widespread knowledge vulnerabilities months prior attack 
experience code red shows compromised hosts remain compromised month start attack 
years attack pool infected hosts available 
experience shows vulnerable hosts vulnerable months vulnerability announced month start attack 
experience bind vulnerability shows significant proportion professionally maintained systems vulnerable months vulnerability public 
advertisements appearing invite spam senders rent access network compromised hosts disguise origin mails 
far networks compromised hosts mount crude effective network level denial service attacks 
simple matter payload worm application level attack targeted particular victim system 
worm vulnerability widespread hosts ones code red blaster hosts exploited attacker expect order computation available attack victim system systems compromised month months 
example times effort win rsa des challenge iii 
practical difficulty adversary hoping pools compromised hosts resource attacking system 
adversaries targets competition resource infinite may large 
difficulty comfort designer system defenses worst case analysis assume available resources may single minded attack system 
unlimited identities relative ease adversary compromise control large number hosts internet assume adversary pose unlimited number identities ip addresses 
adversary directly compromised host ip address compromised host spoof ip addresses subnet 
ingress filtering turned routers internet cost host spoof ip address subnet negligible 
practical difficulty adversary steal identities subnets maintains presence legitimately compromise 
difficulty comfort designer system defenses assume adversary presence thousands subnets spread internet 
assessment unique ip addresses 
email addresses identity certificates dns domains just easy adversary hoard spoof 
techniques making difficult time consuming adversary include client puzzles reverse turing tests adversaries adapting 
example reverse turing tests forwarded service run porn sites exploit customers solve return responses 
conspiracy worm uses irc communicate central control site 
possible worm peer peer communication techniques avoiding difficulties worm suffered irc channel subverted enemies 
assumed adversary identities mask single distributed adversary instantaneous self awareness 
state messages sent received observed identity acting behalf adversary immediately available identities 
addition assumed apparently benign identities adversary 
known spies including supposed secrets session keys known adversary 
practically difficult adversary distribute information rapidly completely components distributed system nodes compromised hosts 
difficulty comfort designer system defenses assume adversary succeed getting critical information nodes need 
eavesdropping spoofing single compromised host subnet eavesdrop traffic hosts subnet 
send spoofed messages behalf located hosts send messages spoofed source addresses internet located hosts 
doing abuse trust relationships mediated ip addresses 
behavior difficult detect prevent compromised hosts regularly monitored maintained 
common vulnerabilities design system defenses perfect designer assume implementation perfect 
point exploitable implementation vulnerability discovered 
designed flash worm exploiting compromise vast majority vulnerable hosts short time 
different contexts including traditional byzantine fault tolerance distributed hash tables sampled voting shown systems faulty malign peers survive long 
fault tolerant systems peers need assigned random independent implementations system survive discovery implementation vulnerability 
rodrigues describe framework independent implementations accommodated fault tolerant system 
important note perfectly designed implemented system avoid vulnerabilities brought human operators coerced misbehave 
invulnerable computer system hard build certainly easier imagine human 
uncovering secrets systems rely secret encryption systems preserve system integrity 
assumption adversary know timely fashion obtain secrets 
robust assumption 
survey purported show vast majority london station reveal passwords offered ball point pen 
adversary may conspire insider may beneficiary lax security insiders poor password choice may steal authentication tokens resources assume may brute force techniques break encryption 
system designers treat encryption panacea 
individual analysis needed consequences compromise key system assess precautions appropriate protection 
intentions assessment putative adversary capabilities 
assess possible intentions 
adversary intending achieve exploiting capabilities 
initial attempt classifies possible adversary intentions classes stealth nuisance attrition thief spy 
stealth stealth adversary goal damage system affecting state 
necessary sub goal avoid detection damage complete example dodge intrusion detection system 
nuisance nuisance adversary goal system continually raising intrusion alarms 
intention cause actual damage system prevent functioning 
attack nuisance adversary example intended get victim system administrators disable ignore intrusion alarms prelude forms attack 
attrition attrition adversary goal prevent system functioning long inflict damage organization supports 
forms adversary referred denial service come mean technique goal 
blaster worm attrition attack attempting mount flooding attack microsoft website infected hosts 
virus attrition attack set anti spam services 
thief goal thief adversary steal services provided system possibly long time periods steal valuable information protected system 
thief different stealth adversary necessarily want alter state system want bring system subvert 
thief services wants unauthorized access resources long possible detected 
thief information hopes intrusion remains undetected long possible 
series viruses believed thief steals services victim machines spam sending network 
thought mount attrition attacks anti spam services 
spy spy adversary goal observe system possible participates users located transactions take place 
spy powerful wanting users 
spy government collecting information line activities citizens 
rules thumb summarize assessments conservative rules thumb assumptions underlying worm infecting times hosts code red bulk infection lasting days infected months 
adversary exert bursts computational effort lasting hours hosts sustain computational effort days hosts masquerade ip addresses eavesdrop spoof traffic hosts victim system days 
break chosen des keys 
implications adversary powerful posing number important implications 
economically infeasible test simulate attacks scale 
assurance system fail expected attacks available credible 
design focus graceful survivable failure 
assisting diagnosis bimodal behaviors raise alarms 
assisting recovery 
second adversary mount full scale attack warning 
techniques important slowing rate failure allow human intervention failure total 
third adversary appear huge numbers new peers clients 
limiting rate system accepts new peers clients techniques newcomer pays may help slow failure 
related researchers different fields tackled task characterizing malicious adversaries 
section outline approaches identified literature 
cryptography typically uses game theoretic analyses construct sets games resulting adversary behavior observed benign protocol participants investigate sets contain games malign participants 
protocol design typically uses exhaustive search transitive closure state space protocol explicitly modeling adversary capabilities intentions 
finite state analysis takes approach automated fashion notable successes see example automated analysis authentication protocols 
distributed systems theory typically works backwards bad state system state exploit damage system identify sequence events happened arrive state 
system specified suitable formalism lamport tla lynch tuttle input output automata cases possible conduct invariant analysis full system specification 
fault tolerance typically places broad limits adversary nodes malign case byzantine fault tolerance 
cases nodes similar failure modes grouped distinct equivalence classes respect failures malkhi reiter quorum systems 
loosely considered adversary model 
previous defending systems attack classifies adversaries computationally bounded unbounded considers time interval adversary collects modifies state 
pool vulnerable machines adversary draw fact limited large repair rates low adversary may considered effectively unbounded effort time 
rfc describes worm payload cryptanalysis identifies payload observed wild 
believe conservative assessment putative adversary designers defenses internet system take account 
adversary reasonable extrapolations observed behavior worms exploiting vulnerabilities applications systems widely deployed internet assumption payload worms targeted system consideration 
believe discussion alternative adversary assessments leading consensus basis designs valuable 
adversary powerful pose design implementation testing problems current technology solve 
appears designing systems survive attacks magnitude succeed 
design appeared succeed testing implementations assure success manifest practice affordable 
reasonable goal may slow delay process failure attack allow human intervention 
acknowledgments material supported national science foundation opinions findings recommendations expressed material authors necessarily reflect views national science foundation 
lockss program grateful support national science foundation andrew mellon foundation sun microsystems laboratories stanford libraries 
reich lockss program possible 

kenneth birman mark hayden zhen xiao mihai budiu yaron minsky 
bimodal multicast 
acm transactions computer systems 

miguel castro peter druschel ganesh antony rowstron dan wallach 
secure routing structured peer peer overlay networks 
proceedings th usenix symposium operating systems design implementation osdi pages boston ma usa december 

miguel castro barbara liskov 
practical byzantine fault tolerance 
proceedings rd symposium operating systems design implementation pages new orleans la usa february 
usenix association 

cnn 
men mice research bind security 
www cnn com tech internet lax dns idg index html 

department army 
ar operations security 
headquarters washington dc usa october 
available www fas org irp army ar htm 

roger dingledine 
free haven project design deployment anonymous secure data haven master thesis mit jun 

paul ferguson daniel 
network ingress filtering defeating denial service attacks employ ip source address spoofing rfc january 

task force 
press release may 
www irc unity org 

electronic frontier foundation 
rsa code breaking contest won distributed net electronic frontier foundation 
www eff org privacy crypto misc html html 

eric friedman paul resnick 
social costs cheap pseudonyms 
journal economics management strategy summer 



www com 

daniel klein 
cracker survey improvements password security 
proc 
usenix unix security workshop pages portland usa august 

brian krebs 
microsoft gets help flaw worm 
www 
com wp dyn articles aug html august 

leslie lamport 
specifying systems tla language tools hardware software engineers 
addison wesley july 

leslie lamport robert shostak marshall pease 
byzantine generals problem 
acm transactions programming languages systems july 

marcus leech 
rfc chinese lottery cryptanalysis revisited internet tool 
ftp ftp rfc editor org notes rfc txt september 

john 
linked ddos attacks anti spam sites 
www 
uk content html september 

steve 
press release 
www org news lasso article november 

david 
unauthenticated remote compromise ms sql server 
www com advisories udp txt july 

luis von ahn manuel blum john langford 
telling humans computers apart automatically 
communications acm 
appear 

nancy lynch mark tuttle 
input output automata 
cwi quarterly september 

nancy lynch 
distributed algorithms 
morgan kaufmann san francisco ca usa 

malkhi michael reiter 
byzantine quorum systems 
journal distributed computing october 

petros maniatis roussopoulos tj giuli david rosenthal mary baker 
preserving peer replicas rate limited sampled voting 
proceedings nineteenth acm symposium operating systems principles pages bolton landing ny usa october 

john mitchell mark mitchell ulrich stern 
automated analysis cryptographic protocols mur 
proceedings ieee symposium security privacy pages oakland ca usa 

david moore vern paxson stefan savage shannon stuart staniford nicholas weaver 
spread sapphire slammer worm 
www 
caida org outreach papers sapphire 

david moore shannon jeffery brown 
code red case study spread victims internet worm 
internet measurement workshop marseille france september 

eric 
security holes 
cares 
proceedings th usenix security symposium pages washington dc usa august 

tim richardson 
give password complete strangers 
problem www uk content archive html april 

rodrigo rodrigues miguel castro barbara liskov 
base abstraction improve fault tolerance 
proceedings eighteenth acm symposium operating systems principles pages chateau lake louise banff ab canada october 

david rosenthal 
digital preservation network appliance openbsd 
proceedings san mateo ca usa september 

david rosenthal reich 
permanent web publishing 
proceedings usenix annual technical conference freenix track pages san diego ca usa june 

david rosenthal mark 
alternative long term secrets 
workshop adaptive defense computer networks santa fe nm november 

anil somayaji stephanie forrest 
automated response system call delays 
proceedings th usenix security symposium august 

stuart staniford vern paxson nicholas weaver 
wn internet spare time 
proceedings th usenix security symposium pages san francisco ca usa august 

bob sullivan 
spam virus spreading 
www msnbc com news asp cp june 

matthew williamson 
throttling viruses restricting propagation defeat malicious mobile code 
proceedings th annual computer security applications conference las vegas nevada usa december 
