communicating java threads gerald jan andre el utwente nl cs utwente nl university twente dept ee control laboratory box ae enschede netherlands 
incorporation multithreading java may considered significant part java language provides rudimentary facilities concurrent programming 
belief channels fundamental concept concurrent programming 
channel approach described realization systematic design method concurrent programming java csp paradigm 
csp requires availability channel class addition composition constructs sequential parallel alternative processes 
channel class constructs implemented java compliance definitions csp 
result implementing communication processes facilitated enabling programmer avoid deadlock easily freeing programmer synchronization scheduling constructs 
channel class additional constructs illustrated simple application 
programming language java multithreading capabilities concurrent programming 
provide synchronization asynchronously running threads java language runtime system uses monitors described hoare 
clearly java concept communicating sequential processes csp hoare implemented 
csp channels composition constructs described provide behaved communication processes threads 
java provides general concepts implementing communication constructs flexible possible 
kind freedom allows various kinds communication facilities 
discuss various communication facilities available show channels may result robust structured approach communicating java threads 
developed channel class classes sequential parallel alternative communication constructs 
classes result better structured programs founded theoretical basis csp hoare 
speak channel lower case refer instance channel class capital describes definition 
modern computers highly integrated microprocessors typically von neumann model computation 
model characterized fact instructions executed successively 
advantage writing sequential programs code optimized full speed execution 
result programming languages inherit single flow control forces sequential programming 
developments software architectures structured design methods ward mellor yourdon object orientation rumbaugh shifted focus software architectures emphasize way human beings think software away manner software executed 
object oriented designs result system descriptions object task independent objects 
object oriented implementations customary isolate aspects task inside object 
thing process unnatural analysis design models taken consideration notion parallelism thrown away 
looked parallel solution flattened single flow control 
object oriented programming languages describe terms sequential dispatching messages objects 
hand real world place things happen concurrently 
principle real world modeling show resulting software 
activity flattening concurrent model sequential application far trivial major cause programming errors 
java sequential programming language features object orientation multithreading 
multiple threads run parallel processes created sequential fashion 
addresses danger deadlock caused sequentially ordered communication threads 
chapter aspects concurrent programming emphasized think important 
common communication facilities provided java briefly described compared channel facility chapter 
chapter channel composition constructs formal concept discussed 
chapter channel implementation composition constructs object oriented paradigm described 
simple benchmark program illustrates channels discussed chapter 
concurrent programming concurrent program single program consists processes running parallel 
process sequential program execution 
concurrent program control processes 
human cognitive aspect composing processes natural developing programs 
processes highly independent bounded task provide structure program 
field object orientation processes considered active objects life 
process active object communication channel represents geometric parallelism communication process interfaces logical partition processes generalization specialization nesting data flow diagram directed graph analysis phase software development determines things tasks carried program 
design phase tasks mapped graphical models data flow diagrams activity diagrams state transition diagrams flow charts data flow diagram important graphical model design phase 
data flow diagram directed graph see example defines processes degree parallelism structure program 
circle represents process flow control arrows denote data flow communication processes 
graphical representation data flow diagram powerful model design phase represents processes different levels nesting specialization generalization 
data flow model hard flatten sequential implementation result types models omitted design tools 
modern developments support multithreading programming languages concurrent programming easy 
concept multithreading data flow model useful provides parallelism code flattening superfluous 
multithreading versus processes concept multithreading sequential programming language java allows create processes running parallel 
processes threads conceptually related 
process actual program executed threads 
process maintains program structure state objects variables 
thread single flow control execute instructions independently 
thread gets scheduled cpu comprises contents registers program counter general registers stack pointer stack 
lewis berg example illustrates essential point threads consider human analogy bank 
bank person working traditional process lots bank stuff desks chairs vault teller stations process tables variables 
lots services bank provides checking accounts loans savings accounts 
functions 
person person know take bit extra time switch various tasks 
people threads share bank stuff specialize different functions 
came worked day lots customers get serviced quickly 
application traditional program single process run multiple threads 
bank stuff object shared employees synchronized prevent simultaneous bank stuff thread safe 
synchronization provided protocol decreases efficiency reason complexity causes intertwined code hard maintain 
bottleneck reduced supplying separate bank stuff employee creating processes 
employee uses bank stuff objects shared synchronization needed item 
communication employees synchronized frequent 
lewis berg threads traditional programs concurrent adding multithreading think programs constructed terms processes 
processes active objects having life may multiple threads run underlying encapsulated passive objects 
traditional programs multithreaded flattened sequential programs 
real concurrent programs consisting processes scaleable portable multiprocessor systems shared memory 
communicating processes authors assume multithreading lead higher performance better structured programs lewis berg 
learned multithreading doe guarantee behaved better structured programs 
contrary communication threads processes may lead complicated code programs complex error prone structured necessary 
think channels composition constructs channels contribute behaved easy structured programs comprehend verify formalize keeps data flow model upright 
approach conflict strategies object orientation general 
contrary channels objects pass objects objects 
active objects 
channel concept programmer reason structure behavior program observing data flow diagram 
possible means communication communication processes established means shared memory interprocess communication ipc facilities described silberschatz 
java provides communication shared memory message passing input output streams remote links 
channels unknown java discussed silberschatz age mentioned 
main reasons channels omitted channels sequential environments sequential languages non multitasking operating systems costs context switching cpu switching threads considered expensive 
channel concept carried field parallel computing 
section discusses communication facilities provided java discusses channel facility think best means communication processes 
communication facilities distributed programs parallel virtual machine pvm remote method invocation rmi common object request broker corba scope facilities fit channel paradigm 
shared memory single threaded programs data efficiently passed shared memory 
globally declared variables structures shared objects function asynchronous buffer pool communicating threads 
asynchronous behavior may lead incorrect results multiple threads trying update data uncontrolled manner data may overwritten writer read reader 
data inconsistency avoided data updates synchronized means semaphores atomic test set shared boolean variable provides protocol writers readers dijkstra 
programmer create critical region shared object ensures accessed thread control time 
critical region created monitor construct hoare high level synchronization construct powerful wait signal operations silberschatz 
java synchronized construct provides high level monitor construct arnold gosling 
message passing message programming languages need resort shared variables 
messages dispatched sender process receiver process processes message 
object orientation paradigm message consists destination method name arguments data 
objects communicate message passing invoking accessible methods objects 
shared methods update variables thread safe thread invoke method time 
java methods thread safe synchronized wait notify construct methods shared memory arnold gosling 
input output streams multithreading operating systems provide input output streams communication programs system resources file system standard input standard output standard error 
different streams data streams piped streams streams ordered sequences data source input stream destination output streams contain cyclic buffer memory 
streams asynchronous synchronized full empty condition reached sender process blocked buffer full receiver process blocked buffer empty 
streams system resources standardized ansi normalization implemented universal 
streams restricted array bytes polling needed catch conditions file errors 
java provides streams 
remote links remote links methods provided operating system set communication link distributed objects 
contrast streams remote links send messages programs seen extension message passing longer distance computer systems 
remote links called remote procedure calls rpc provide procedure call mechanism systems network connections 
contrast ipc facilities rpc communication facility provides layer build top operating system 
solutions form local wide area networks object linking embedding discuss 
java provides network supports remote method invocation rmi 
channels channel connects processes takes care data transfer 
channel way self synchronized 
communication ways needs channels 
initially channel unbuffered provides rendezvous synchronization mechanism words message sent writer reader ready 
processes ready gets blocked second ready 
words processes get scheduled communication 
object oriented paradigm channel intermediate object encapsulates synchronization scheduling data transfer 
result programmer freed synchronization scheduling physical data transfer 
implementation channel allows sharing multiple readers writers pass different data types objects 
furthermore channel different composition constructs sequential composition parallel composition alternative composition section 
review reasons channels included sequential programming languages 
early years operating systems designed build schedule sequential programs processes 
operating system shared resource 
scheduling days time consuming result buffering communication chosen rendezvous communication buffering reduces number context switching 
reasons find streams channels 
nowadays streams flexible standardized typical operating system resources purposes standard input standard output disk access pipes filters important reason rendezvous behavior sequential programs 
channel input output channel process sequential composition results immediately deadlock streams may 
performances modern processors high cost scheduling negligible 
technology object orientation multithreading brings concurrency program 
factors channels sequential programming languages possible 
shared memory message passing concepts need explicit synchronization implemented programmer 
streams remote links system resources restricted sending receiving bytes quasi synchronous manner streams remote links presence operating system supporting 
channel system resource operates close scheduler 
real time systems likes avoid operating system space performance 
channel optimized scheduling fast nonpreemptive fashion provides optimal cpu utilization liu layland 
channels scheduler build program program schedules non preemptive fashion 
non preemptive paradigm mixed preemptive scheduling dealing fair scheduling priority scheduling 
channel initially unbuffered program schedule frequently instance buffered stream 
channel created plug feature channel buffered optimization purposes reducing number context switching 
feature communication processes microprocessors systems plugging external links section 
channels composition constructs channels discussed chapter java implementation discussed chapter 
channels composition constructs channel formalism semantics rendezvous channel straightforwardly defined theoretical foundation csp 
theoretical foundation possible automated tools validating designs 
aside mathematically pleasing channel construct easy reason beneficial construct think designing software making object identify object oriented design phase 
channel input output method respectively written csp language channel name value message 
appendix basic notations csp language described 
process engages process engages communication performed value passed channel channel sender receiver channel thread channel thread way communication way communication channel provides way communication way communication needs channels 
responsibility left programmer avoid deadlock ensuring second thread ready 
deadlock state concurrent threads longer proceed due communication interdependency 
appendix communicating processes discussed detail 
shows way cyclic communication 
scheme prone deadlock performing input output channels sequential fashion 
composition construct formalism appendix describes compositions sequential ii parallel iii alternative composition 
thread sequential composition executes statements successive order 
statement provides alternative compositions choices expressions 
programmer careful choosing order channel input output sequential composition 
convenience take csp notation channel input 
channel output 
correct sequence reading writing thread sequential thread sequential channel channel channel channel thread writes value thread reads value channel 
step thread writes value thread reads value channel 
choose wrong sequence deadlock may occur 
consider example thread sequential thread sequential channel deadlock channel deadlock channel channel threads blocked write actions wait communication occur 
threads read write parallel deadlock order execution important thread sequential thread parallel channel channel channel channel parallel construct side example sufficient prevent deadlock 
order communication indefinite parallel construct sides obvious 
thread parallel thread parallel channel channel channel channel illustrated simple example communicating threads scaled complex networks channels threads 
network cycle parallel construct indispensable welch 
appendix formally illustrate example means csp proof appearance deadlock 
appendix describes behavior composition constructs illustrated section 
java channel composition constructs important strategy developing software separation concerns rch lopes 
separation concerns follows established principle software engineering hide complexity abstraction 
programming intertwined code hard complex concerns dealt time level 
intertwined code hard understand maintain modify concerns strongly coupled 
discipline separating concerns 
section discusses identity classes java channel build 
section discusses channel association composition constructs 
java channel interface channel defines channel input output operation visible user 
java channel consists class ensure simple interface build java channel synchronized adapter lea adapter composite proxy design patterns described gamma 
java channel defined conceptual level abstractions concerns channel 
channel encapsulates synchronization scheduling data transfer object 
channel input output delegated link driver part channel 
link driver 
actual data transfer processes performed internally shared memory externally shared communication lines 
concerns link driver perform physical data transfer localize encapsulate hardware dependent code hardware independent code 
words link drivers device drivers communication purpose plugged channel 
protocol object 
protocol objects encapsulate information sent channels 
objects knowledge protocol variable may may cloned copies contents specified object 
composition 
processes invoke read channel input write channel output methods channel sequential parallel alternative fashion 
behavior channel input output depends composition construct type synchronization provided link driver 
concerns reflected class relation diagram omt notation 
channel class related zero composition members zero protocol objects link driver part channel 
channel exist composition member protocol object contains link driver 
reading writing channel composition member protocol object specified side 
composition channel seq par alt rendezvous buffer timer class relation diagram tag object port custom seq par alt classes respectively sequential parallel alternative classes inherit composition class 
class extends standard protocol classes tag 
class sure channel clone object object accepted 
rendezvous buffer timer port classes standard link driver subclasses class 
class adds state variable updated link driver channel behavior depends 
super classes provide generic functionality extend functionality channel easily 
composition class reserved custom features completes diagram 
programmer build protocol object link drivers having knowledge implementation channel composition constructs 
channel basics java channel multiple readers writers object clone protocol object behavior defined link driver 
link driver specified rendezvous link driver default link driver 
multiple readers single thread ring constraint ring single reader ring single writer ring link driver channel object channel monitor multiple writers shows channel object inner critical region link driver guarded rings synchronization monitors 
single reader writer rings allow passing single reader single writer 
single thread ring allows passing single reader single writer 
constraint ring provides behavior de scheduling threads state state variable updated link driver 
state variable hold constants full empty read empty full represents actual state buffer inside link driver physically link driver buffered temporary variable array variables 
simple version channel class defining read write method 
channel class provides rings synchronization delegates actual data transfer read write methods link driver 
state variable part constraint ring provides desired behavior specified link driver rendezvous default 
class channel new rendezvous default link driver public boolean read object throws exception boolean result false synchronized reader monitor single reader ring synchronized single thread ring state empty wait constraint ring result read object delegate read link driver notify notify waiting writer return result public boolean write object throws exception boolean result false synchronized writer monitor single writer ring synchronized single thread ring result write object delegate write link driver notify notify waiting reader state full wait constraint ring return result variety link drivers distinguish channel types 
channel implemented single reader writer ring reader ring writer ring reader writer rings depend number readers writers sharing channel 
design pattern factory method applied creates channels conformance number readers writers gamma 
link driver simple class synchronization constructs 
listing show rendezvous link driver provides internal communication processes 
public class rendezvous extends private object public boolean read object object clone object state empty return true public boolean write object object object state full return true variable object temporary buffer variable 
state variable inherited class updated conform buffer condition 
clone 
method method invoked protocol object 
example class public class extends public int value public void clone object object value value complexity link driver depends media data passed 
link driver acts device driver communication purpose 
approach easy adjust channel external communication links rs usb pci vme corba rmi 
words technologies concerning communication link drivers 
channel functions structural approach concurrent programming 
java communication constructs previous section read write methods channel discussed 
mentioned behavior methods depends state link driver 
section discusses extension behavior methods different compositions execution discussed section 
implementations compositions respectively seq par alt constructs 
abbreviations borrowed occam inmos 
seq par alt classes shown provide methods constructing seq par alt compositions constructs java 
channel class provides pairs read write methods composition construct 
methods invoke read write described previous section different circumstances 
discussing entire implementation read write methods illustrate methods sections chapter 
methods provided channel class boolean channel read construct member object boolean channel write construct member object channel name channel object construct member composition object seq par alt object protocol object 
boolean return type methods 
example examples section illustrate composition constructs process 
process shared channels declared channel channel new channel channel channel new channel channel channel new channel channel channel channel channel objects 
protocol objects receive send object new object new object new sequential communication construct sequential construct seq provides sequential channel input output read write actions behave sequentially method 
seq seq new seq channel read seq object channel write seq object channel read seq object seq object provides knowledge doing sequential reading writing 
parallel communication construct parallel construct par provides parallel channel input output 
construct dijkstra dijkstra specifies concurrent execution constituent sequential commands processes 
par par new par channel read par object channel write par object channel read par object par join par object provides knowledge doing reading writing parallel 
read write methods par construct start hidden processes immediately continue 
par object provides join method block parallel read write methods done 
number par constructor specifies hidden processes carry read write methods parallel 
alternative communication construct alternative construct alt choices state channel input output 
read write methods alt construct return true communication succeeded return false 
read operation called input guard write operation called output guard alt construct 
alt alt new alt read alt object 
program part write alt object 
program part read alt object 
program part example typical priority alt construct 
alternative constructs fair alt select method basically ifthen principle 
careful output guards input guard meets output guard lead disagreement jones 
time may appear distant peer prepared communicate may committed doing 
channel may process may processes sharing 
application simple communication timer benchmark section describe simple concurrent program java illustrate channels constructs described 
program shown data flow diagram simple communication timer test program named counter starts zero 
java program benchmark measuring process thread context switch times 
channel prefix successor channel delta channel channel simple concurrent program named benchmark consists processes prefix delta successor connected channels 
process building block active object processed single thread control channel passive object life methods called part threads active objects 
building block thoroughly tested object influenced direct neighbors automatically scheduled inputs available outputs processed welch 
prefix process kicks outputting output channel going infinite input forward cycle 
delta process just cycles waiting input forwarding copies parallel output channels 
successor process cycles waiting input incrementing number arrives forwarding result output channel 
process simply consumes arriving numbers sequence natural numbers times fast arrive 
prefix successor processes synchronize threads twice cycle delta process times process cycle 
synchronizations context switches number consumed process 
dividing cycle time reported gives basic overhead thread synchronization 
time spent processes doing things negligible 
implementation benchmark shown listing sequential program declares channels variables building block objects 
building blocks defined threads started automatically constructor 
try catch body intercept possible exceptions 
java communication timer test program public class public static void main string args throws java io ioexception try test command line args length system println java inner loop count outer loop count system exit declarations channels channel channel new channel channel channel channel new channel channel channel channel new channel channel channel channel new channel channel declarations variables int integer args int integer args declarations processes threads start automatically prefix prefix new prefix channel channel delta delta new delta channel channel channel successor successor new successor channel channel new channel catch exception system println exception main listing programming terms processes building blocks major advantages illustrate means listing 
straightforward transition data flow model implementation listing 
structure defined model specifies structure implementation program visa versa 
easily draw data flow diagram declarations channel building block objects 
transition automated means generator generates java code data flow model 
main program kind network builds network building blocks channels 
network characterized contain nonterminating loops starts actual program 
network terminates successively 
prefix building block functions network starts identity building block connects network 
idea network advantages programmer browse easily program starting main program program partitioned multiprocessor platforms 
implementations network building blocks described orthogonal manner 
modification structure data flow model means adding removing building block channel declarations network influencing parts program 
structure program maintained extended concatenation network configures 
network building blocks reusable 
building blocks implementation building block classes subclasses thread class 
statement start constructor body automatically starts object process active object run body invoked newly launched thread control 
parameters constructors initially variables shared channels shared channel parameters provide channel interface object 
words building blocks method interface channel interface 
objects methods channel inputs outputs 
identity building block identity procedure input output parameter form channels 
object entering input channel passed unchanged output channel 
procedure identity identical active buffer length 
public class identity extends thread private private private seq seq new seq private object new public identity start public void run try true read seq object write seq object catch exception system println exception identity prefix building blocks new building blocks 
example building block called prefix starts building block identity section 
procedure sends specified number prefix behaves identity 
building block prefix example starts building block identity initializes output channel sending zero 
public class prefix extends thread private private private seq seq new seq private object new public prefix int object value start public void run try write seq object identity id new identity catch exception system println exception prefix delta useful building block delta 
delta input output channels 
incoming object passed unchanged output channels parallel 
case input object cloned output objects 
building block process send value parallel processes 
delta similar process required cases parallel processes may read channel answer broadcasting 
public class delta extends thread private private private seq seq new seq private par par new par private object new public delta start public void run try true read seq object write par object write par object par join catch exception system println exception delta successor building block successor largely building block identity 
difference value object enters input channel increased passed output channel 
public class successor extends thread private private private seq seq new seq private object new public successor start public void run try true read seq object object value write seq object catch exception system println exception successor building block reads burst objects input channel prints delay time screen 
system exit statement ends program finished 
public class extends thread private private int count count private object new private seq seq new seq public ci int cnt int cnt ci count cnt count cnt start public void run int long system println time analyser started system println try count system count read seq object system system println average cycle float float count count ms catch exception system println exception system exit csp classes form complete package contains necessary ingredients concurrent programming channels java 
channel compositions concepts derived csp developed object oriented paradigm 
clear pattern concerns means object oriented techniques inheritance delegation genericity polymorphism 
channel created adapter composite proxy design patterns described gamma 

important property channels composition constructs programmer freed synchronization scheduling constructs 
facilitates programming concurrent programs programmer 
applications channels get scheduled communication non preemptive fashion 
non preemptive scheduling efficient preemptive scheduling channel optimized better performances 
channel compositions concepts interfere clash language concepts java 
furthermore channel composition primitives integrated byte code level java see occam 
implementing software channels eliminates process flattening data flow model sequential program 
important large gap just transformation data flow model code 
result parallelism maintained code 
arnold gosling java programming language addison wesley massachusetts usa davies schneider real time csp uk dijkstra operating sequential processes programming languages academic press new york pp 
gamma design patterns elements reusable object oriented software addison massachusetts strategies real time system specification house new york usa hoare communicating sequential processes prentice hall london uk hoare monitors operating system structuring concept communication acm vol 
pp 
hoare communicating sequential processes communications acm vol 
pp 
lopes separation concerns new paradigm software engineering boston usa inmos occam manual prentice hall london uk jones guards parallel programming transputer machines ios lea concurrent programming java addison wesley massachusetts usa lewis bill berg daniel threads primer guide multithreaded programming sun microsystems press mountain view usa liu layland scheduling algorithms multiprogramming hard real time environment association computing machinery pp 
martin design construction deadlock free concurrent systems ph thesis university buckingham uk blaha premerlani eddy lorensen object oriented modeling design prentice hall nj usa silberschatz abraham peter operating systems concepts addison wesley publishing fourth edition ward mellor structured development techniques real time systems vols prentice hall nj usa welch emulating digital logic transputer networks lecture notes computer science vol 
springer verlag welch occam approach transputer engineering proceedings rd conference hypercube concurrent computers applications pasadena ca usa yourdon modern structured analysis prentice hall englewood cliffs uk appendix csp channels compositions process algebra communicating sequential processes csp hoare algebraic language behaviour communicating processes described verified means events operators 
appendix prove formal method csp profit parallel composition communicating sequential processes 
section describes important mathematical notations csp language 
rule prove process satisfies desired behaviour 
section processes described notations section process example deadlock second process eliminates deadlock 
rule prove occurrence deadlock examples 
section describes behaviour common composition 
sequential composition parallel composition alternative composition csp 
process algebra csp process describes behaviour pattern object terms events operators processes 
include events process description prefix operator event process process may engage behaving event communication event represented pair name channel event takes place value message passed 
input output respectively read action write action performed processes ready communication channel performed 
define input process process behaves process value read channel value type denoted 
define output process process behaves process value sent channel tightly defined communication protocol called rendezvous communication 
set messages communicable channel defined type alphabet set events process type value specified output process accepted input process type symbol denotes choices 
output process defines type input process accepts types 
processes observed various compositions sequential composition behaves component successfully terminated behaves 
parallel composition composition able engage event set able engage event set processes cooperate perform event common alphabets 
parallel composition described shared set events 
parallel composition interleaving processes en evolve independently cooperating occurrence event parallel composition equal set empty 
process engage action processes engaged action choice non deterministic 
alternative composition behaves action engage behaves action engage 
actions engage choice non deterministic environment control selected 
alternative composition non deterministic choice arbitrary selection knowledge control external environment 
process engages event 
describes behaviour broken object deadlocked object 
skip process terminates successfully 
important rule csp section px qy pz qz pz pz qz qz assuming rule general choice operator rule rule provides algorithm evaluate behavior parallel processes 
shorthand notation px series choices depending events set instance px equal pa pb pc 
set defined collection elements double elements 
notation set 
communicating processes processes communicate shared channels 
read write actions channel considered shared events performed ready 
channel provides way communication processes 
way communication channels 
channel output process called output channel process input called input channel 
way communicating processes channel passing message way communicating processes channels passing messages 
communicating processes process writes message channel process reads message communicating processes channels sending message 
shows way way communication processes 

shows parallel composition en share channel communication occur channel occasion outputs message inputs message simultaneously 
outputting process specifies unique value message inputting process prepared accept communicable value 
event occur communication value message specified outputting process 
process executes action process executes action shown variables hold message figures 

show way communication case way communication presence cycle avoid deadlock time 
section discuss appearance deadlock caused typical sequential order communication processes 
sequential composition deadlock sensitive thread sequential flow control 
processes considered threads control invoke read write actions channels sequential orders 
order correctly chosen programmer flow control deadlock may result 
processes wait communication infinitely 
processes shown 
convenience read ci write ci events abbreviated event ci channel name 
instance process engages process engages process engages ready communicate 
cyclic communicating processes system process described sequential csp language sequential system processes described processes suffix processes respectively composition 
simply see performed 
true processes mutual exclusive deadlocked 
derivation prove basis rule section order communication immediately leads deadlock 
theorem sequential communication erroneous order lead deadlock 
proof give system equal 
pc pc qc qc system rule px pc qy qc pz qz system process system engage event immediately deadlock 
proof extended communicating processes 
parallel compositions eliminate deadlock read write actions process read write actions process mutual independent 
read write action executed arbitrary order order undefined 
mentioned sequential composition sequential process order read write actions carefully chosen 
secure approach parallel composition eliminates deadlock 
consider example sequential parallel proof show system process performs actions 
proof extended communicating processes 
theorem parallel composition prevent erroneous order communication eliminates potential deadlock 
proof show parallel composition satisfies behaviour system 
pc pc qc qc qc qc system rule px pc qy qc qc pz qz pc qc behavior pz px pc qz qy pz qz pz qz system process system engage events process satisfies behavior system process 
case read write actions mutual independent actions enclosed parallel composition 
programmer worry order execution 
previous example written parallel parallel system process parallel compositions processes defined system applying rule 
communication compositions section common situations communicating processes discussed shown 
shown situations described description different compositions process arrows channels processes pass information 
information passed rendezvous principle 
channels way direction denoted arrows 
output input situations process input output consider process primary process secondary processes 
situations show communication network program degree parallelism structure geometric parallelism 
tell order time communication takes pace 
order communication process discussed different compositions 
time aspects discussed 
secondary processes communicate process mutual communication secondary processes 
system process described system 
process behaves definition constraint events alphabet events require simultaneous participation 
may process independently events solely alphabet processes process independently 
may write set simplify equations 
primary process communicate secondary processes sequential order parallel choice 
therefor consider respectively compositions communication sequential composition ii parallel composition iii alternative composition 
section discuss composition 
sequential composition sequential composition performs communication certain sequential order 
case process thread control sequential flow control process sequential nature 
programmer specify certain order defined processes suffix processes composition 
substituting behaviors system equation sequential composition described seq definition situations 
sequence entirely determined process direction communication relevant 
parallel composition parallel composition performs communication parallel 
order communication process undefined parallel composition avoid deadlock time 
behavior process wants communicate simultaneously defined entire equation par complexity par equation magnitude number parallel channels practice simulating approach statements enormous complex 
process simplified sub processes pi channel input output 
parallel composition situation sub processes provide communication parallel 
process execute read write actions arbitrary sequential order processed parallel sub processes 
suffix process may continue sub processes finished 
process defined similar seq process section 
events shared events indicate engaged process started sub processes pi 
additional joinp joinp joinp events indicate engaged respectively process finished processing task 
joinp joinp joinp joinp joinp joinp joinp joinp joinp joinp joinp joinp process triggers sub processes events subsequently sub processes trigger common join events joinp joinp joinp 
par joinp joinp joinp joinp joinp joinp joinp joinp joinp complexity par equation magnitude number parallel channels handy trick implementation csp reduce complexity join 
alternative composition simple alternative composition event described process alt alt behave engage behave behavior continues immediately analogous simple statement 
process statement described alt skip expression describes alternative composition 
process choices events described pa pb pc entire equation alt pa pb pc event true choice non deterministic 
choice fair priority mechanism 
events called guards alternative composition 
guard input output guarded 
complexity alt equation magnitude number parallel channels 
