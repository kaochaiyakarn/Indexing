mobile haskell andr rauber du bois phil trinder hans wolfgang loidl school mathematical computer sciences heriot watt university edinburgh eh macs hw ac uk ludwig maximilians universit unchen institut ur informatik unchen germany informatik uni muenchen de 
proposes set communication primitives haskell open distributed systems systems multiple executing programs interact prede ned protocol 
functions rst class citizens functional language natural transfer programs distributed system 
existing distributed haskell extensions limited closed systems restrict set expressions communicated 
ectively prohibits large scale distribution sacri ces key abstraction constructs 
functional language allows communication functions open system seen mobile computation language call extension mobile haskell 
demonstrate proposed communication primitives implement powerful abstractions remote evaluation common patterns communication encoded higher order functions mobile skeletons 
design validated constructing prototype glasgow distributed haskell compiled implementation construction 
decade seen exponential growth computer networks small large scale networks internet 
impacts growth programming languages libraries primitives distributed programming including functional languages erlang clean haskell ports eden gdh :10.1.1.29.4474
huge number machines connected world wide researchers start think possibility open global networks single computing platform sharing computational power resources :10.1.1.29.4474
applications exploiting new networks require languages capabilities building open distributed systems 
distributed system constructs exchanging arbitrary data structures required 
open system language provide ways programs connect communicate programs discover new resources network 
functional language functions rst class citizens element data structure passed argument function returned result 
natural expect communication library functional language allow programmer send functions network connection example 
functional language allows communication functions open system seen mobile computation language control placement code active computations network 
particular mobile program transport state code execution environment network resumes execution 
presents mobile haskell haskell extension allows implementation distributed mobile programs 
structured follows section describes haskell extensions compares concepts mobile computation 
section describe new primitives distributed communication 
sections show basic primitives allow implementation powerful abstractions remote evaluation useful patterns distributed communication packaged higher order functions mobile skeletons analogous algorithmic skeletons parallel computing 
validate ideas test programs prototype system implemented glasgow distributed haskell gdh described section 
section discuss issues considered real implementation system 
related works 
mobility haskell extensions section compares haskell related languages concepts mobile computation 
mobility functional languages discussed section 
gph glasgow parallel haskell conservative parallel extension haskell parallel combinator par specify parallel evaluation seq specify sequential evaluation 
higher level coordination provided evaluation strategies higher order polymorphic functions par seq combinators specify degree evaluation expressions 
eden parallel extension haskell allows de nition creation processes 
eden extends haskell process abstractions process instantiations analogous function abstraction function application 
process abstractions specify functional process schemes represents behaviour process purely functional way process instantiation actual creation process corresponding communication channels 
eden uses closed system model location independence 
values evaluated normal form sent port 
gph eden simple powerful extensions haskell language parallel computing 
allow remote execution computation placement threads implicit 
programmer uses par combinator gph process abstractions eden data shipped decided implementation language 
gdh glasgow distributed haskell distributed functional language combines features glasgow parallel haskell gph concurrent haskell :10.1.1.30.8705
gdh allows creation impure side ecting threads forkio command concurrent haskell command remote thread creation type io io threadid 
receives arguments identi er pe processing element thread created 
gdh provides facility creating threads machines network location explicit programmer exploit distributed resources 
location awareness introduced language primitives returns identi er machine running current thread gives list identi ers machines program 
threads communicate mvars mutable locations shared threads concurrent distributed system 
communication occurs reading writing values mutable locations 
type value read written mvars including functions mvars 
gdh closer concepts mobility 
communication implemented mvars remote execution computations provided remote evaluation primitives 
problem gdh mobile computation implemented run closed systems 
gdh program starts running pe join computation 
problem implementation relies virtual shared heap shared machines running computation 
algorithms implement kind structure scale large distributed systems internet 
haskell ports distributed haskell adds concurrent haskell monadic operations communication machines distributed system :10.1.1.29.4474
local threads communicate mvars remote threads communicate ports 
ports created merged commands newport io port port io port io port port io port port created newport 
port visible machines registered separate process called command 
registered pes operation 
ports allow communication rst order values including ports 
values evaluated normal form sent remote thread 
haskell ports interesting model implement distributed programs haskell designed open systems 
drawback current implementation language restricts values sent port basic types types instantiate show class 
furthermore types messages received instance read class 
reason restrictions values messages converted strings order sent network :10.1.1.29.4474
proposed communication primitives mvars communication concurrent threads concurrent haskell distributed communication gdh implementation relies closed system 
haskell ports hand extends concurrent haskell monadic operations communication machines distributed open system 
local threads communicate mvars remote threads communicate ports 
propose text set primitives distributed communication haskell 
primitives similar haskell ports restriction communicating just rst order values 
call primitives mobile channels gure avoid confusion concurrent haskell channels distributed haskell ports 
data type hostname string type string io io io io io hostname io fig 

mobile channels function create mobile channel functions write read data channel 
functions register unregister channels name server 
registered channel programs retrieves mobile channel name server 
name server running machine system channel registered local name server function 
value sent channel evaluated normal form communication occurs 
reason lazy evaluation imposes complications reasoning communication mobile programs 
consider example ch suppose tuple returned rst value boolean second integer third really large data structure big tree 
value choose want send integer remote host 
example value sent integer lazy evaluation happens 
point performed value represented heap function selects second value tuple applied tuple 
evaluate argument communication value communicated dicult see haskell code 
sharing properties modern non strict functional languages usually implementation graph reduction machine program represented graph evaluation program performed reducing graph 
programs represented graphs ensure shared expressions evaluated 
try maintain sharing nodes distributed system result large number extra messages call backs machines involved computation request structures evaluated update structures programmer system know 
typical mobile application client receive code channel machine disconnected network computation executed consider handheld notebook 
preserve sharing dicult tell machine disconnected computation executed anymore result needed application shared graph structure 
problem partially solved making primitives strict expressions evaluated result evaluation communicated 
discovering resources gure propose primitives resource discovery registration 
machines running mobile haskell programs run registration service resources 
scope primitives resource discovery type string io io io fig 

primitives resource discovery machine called return values registered local server 
function takes name resource type registers resource name 
resource associated name takes returns resource registered name 
avoid type clash programmer wants register resources di erent types de ne data type hold di erent values registered 
better way treat possible type clashes dynamic types clean dynamics moment complete implementation haskell compilers :10.1.1.29.4474
mobile examples remote evaluation remote evaluation paradigm computation sent host remote host order resources available straightforward implement remote evaluation mobile channels 
suppose machine running system runs remote evaluation server implemented ch ch loop ch loop ch io forkio io loop ch server takes argument name current machine creates channel name 
keeps reading values channel forking threads io actions received 
threads forked forkio function concurrent haskell notation example special syntax monadic computations 
machines system running server implement remote evaluation primitive follows io hostname io io host ch ch io fact remote evaluation usually returns value result computation 
di erence function primitive gdh 
behaviour easily added creating channel return result back 
simple code mobility figures simple example new primitives 
program starts machine called migrates machine called function 
thread spawned obtains load machine local function called previously registered resource server sends result back printed 
io int 
main fig 

code distributed information retrieval distributed information retrieval applications gather information matching speci ed criteria information sources dispersed network 
kind application considered killer application mobile languages 
mobile program visits machines network calculate total load network see 
extension previous program visiting machine network visits collection machines 
program visits machines list uses io action type io int locally machines 
function registered name server machines 
main mch hw ac uk mch load print load show load int mch func case func just gl load mch load 
fig 

code patterns mobile computation behaviour visiting collection machines perform action return result common pattern mobile computation 
facilities provided functional languages particular higher order functions implement skeleton abstracts behaviour 
io hostname io mch action op load mch load mch action op load xs code mch action op load xs code mch action op load list load mch action op op load load list function write previous program mch action action func case func just gl load return load want collect load machines compute total load just need change arguments skeleton brahms osiris value returned mch channel main 
brahms osiris brahms code osiris fig 

distributed information retrieval mch action prototype implementation validate design test examples text prototype implemented gdh 
gdh inter thread communication values shared threads mvar way establishing connection remote local threads creation 
prototype implementation mobile channels represented simple mvars simulate open system gdh implemented name server programs running di erent pes register 
example possible see gdh implementation system works 
created machine called registered name myc name server 
name server receives mvar created keeps table name 
registration process nished pe called osiris send message name server asking channel registered name myc command 
primitives nd name server 
threads gdh communicate value shared 
solved problem adding extra parameter remote communication primitives channel name server waits connections 
channel concurrent haskell channel implemented linked list mvars name server handle client sending requests time 
programming extra parameter cum main mch mch resp print total load show resp int int hostname io mch load mch load mch load xs code mch load xs code mch load list func case func just gl load mch load load list fig 

collecting load information machines osiris name server names mvars table mv myc 
mvar added table myc mv 
myc 
connection fig 

gdh implementation mobile channels cases serves purpose simulating open system gdh 
need registration service resources gdh shared heap simulate way name server 
fact name server accepts registration resources channels keep di erent tables 
strict primitives partially simulated gdh prototype evaluation strategies ch rnf seq ch strategy rnf evaluates argument normal form written channel ch 
works value communicated instantiated class haskell class describes evaluate values 
implementation design gdh prototype allows test concepts ideas new communication primitives suitable implementation real applications 
section discuss main issues considered real implementation mobile system proposed 
mobile systems heterogeneity large scale distributed systems allowing machines di erent architectures running di erent operating systems communicate 
abstraction usually achieved compiling programs architecture independent byte code 
platform build system chosen glasgow haskell compiler ghc state art implementation haskell 
main reason choosing ghc supports execution byte code combined machine code 
ghc optimising compiler interactive environment called 
designed fast compilation linking generates machine independent byte code linked fast native code available basic primitives language 
ghc share runtime system stg machine graph reduction machine :10.1.1.53.3729
implementation mobile system planning implement routines packing unpacking byte code objects ghc internal representation architecture independent byte code way heap objects communicated gph gdh eden 
packing mean objects form suitable communication 
basic modules ghc compiled machine code standard installation compiler packing routines pack machine independent part program link local de nitions machine dependent part code received unpacked 
gives advantage having faster code byte code 
packed communicated simple tcp ip socket connection 
machines running mobile programs version ghc system implementation primitives mobility binary libraries installed 
programs communicate functions standard libraries compiled byte code 
programs receive byte code need installed byte code interpreter part ghc rts 
fact functions standard libraries mobile programs need having ends communication 
may possible extend compiler mobility analyses non determinism analyses decide parts program compiled byte code parts compiled machine code 
related extensions functional languages allow communication higher order values 
scheme erlang examples strict untyped languages erlang dynamically typed allow communication functions :10.1.1.10.9759
haskell statically typed language communication nodes described data type mistakes caught compilation programs 
strict typed languages nomadic pict facile jocaml implement communication primitives side ects integrate io monad preserving referential transparency 
curry functional logic language provides communication ports similar way extension 
language closely related system 
implementation threads lazy functional language clean monads continuations extension distributed communication ports 
problem approach real implementation concurrency system provides interleaved execution atomic actions implemented continuations 
set primitives communication distributed extension haskell 
primitives di er previous approaches allow communication arbitrary expressions including functions open system 
demonstrated primitives haskell higher order functions allow implementation powerful abstractions remote evaluation useful patterns communication packaged higher order functions mobile skeletons 
validate design test programs prototype system implemented gdh 
currently working robust implementation system 
extend ghc compiler byte code interpreter routines packing communicating heap objects described section 
novelty system lies ability communicate byte code representation heap objects generated allowing programs running heterogeneous network communicate 

silvia rita yolanda ortega mall en ricardo pe na 
eden coordination model distributed memory systems 
high level parallel programming models supportive environments hips volume 
ieee press 

luca cardelli 
abstractions mobile computation 
secure internet programming pages 

luca cardelli 
mobility security 
proceedings nato advanced study institute foundations secure computation pages marktoberdorf germany august 

henry suresh jagannathan richard kelsey 
higher order distributed objects 
acm transactions programming languages systems toplas 

murray cole 
algorithmic skeletons structured management parallel computation 
mit press 

sylvain fabrice le 
jocaml mobile agents 
international symposium agent systems applications asa third international symposium mobile agents ma palm springs ca usa 

erlang 
www erlang org www page may 

ian foster kesselman tuecke 
anatomy grid enabling scalable virtual organizations 
international supercomputer applications 

fuggetta picco vigna 
understanding code mobility 
transactions software engineering may 

glasgow haskell compiler 
www haskell org ghc www page january 

hanus 
distributed programming multi paradigm declarative language 
proc 
international conference principles practice declarative programming ppdp volume pages 
springer lncs 

frank huch ulrich 
distributed programming haskell ports 
implementation functional languages volume pages 
springer lncs 

simon peyton jones 
implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming 

simon peyton jones 
tackling awkward squad monadic input output concurrency exceptions foreign language calls haskell 
tony hoare manfred broy ralf editors engineering theories software construction pages 
ios press 

simon peyton jones andrew gordon finne 
concurrent haskell 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg beach florida 


mobile computation functions 
phd thesis laboratory foundations computer science university edinburgh 

ulrike yolanda ortega ricardo pe na 
implementing eden dreams reality 
implementation functional languages volume pages 
springer lncs 

frederick 
language support mobile agents 
phd thesis school computer science carnegie mellon university 

danny lange oshima 
reasons mobile agents 
communications acm march 

eric smetsers marko van eekelen rinus plasmeijer 
concurrent clean 
leeuwen aarts rem editors proc 
parallel architectures languages europe parle volume pages 
springer lncs 

pe na 
polynomial cost non determinism analysis 
implementation functional languages volume pages 
springer lncs 

marco pil 
dynamic types type dependent functions 
implementation functional languages pages 
springer lncs 

trinder 
loidl 
design implementation glasgow distributed haskell 
implementation functional languages 
springer lncs 

philip trinder kevin hammond hans wolfgang loidl simon peyton jones 
algorithm strategy parallelism 
journal functional programming january 

trinder 
loidl 
parallel distributed 
journal functional programming 

van rinus plasmeijer 
strongly typed functional operating system 
implementation functional languages volume 
springer lncs 

dennis volpano 
provably secure programming languages remote evaluation 
acm computing surveys es 

tomasz 
nomadic pict language infrastructure design mobile computation 
phd thesis wolfson college university cambridge 
