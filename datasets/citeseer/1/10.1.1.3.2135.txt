high level polymetric views condensed run time information st phane ducasse software composition group university bern switzerland ducasse iam unibe ch understanding run time behavior object oriented legacy systems complex task due factors late binding polymorphism 
current approaches extract information complete execution trace system 
sheer size complexity traces handling storage analysis difficult 
current software systems run non permit full analysis 
lightweight approach extraction condensed amount information measurements require full trace 
condensed information propose visualization approach allows identify understand certain aspects objects lifetime role played creation objects communication architecture support 
keywords software visualization reverse engineering run time information object oriented programming program understanding 
reported maintenance professionals spend half time analyzing software understand 
sommerville davis estimate cost software maintenance accounts cost software system 
facts show understanding applications hardest tasks maintenance software systems 
approach support understanding objectoriented systems dynamic information 
extensive amount research dedicated research field extracting information generated execution software system 
people instrument source code various techniques method wrapping logging extended virtual machines run system 
instrumented source code generates exe michele lanza software composition group university bern switzerland lanza iam unibe ch roland laboratory sophia antipolis france fr cution trace contains information run time behavior system method calling methods objects created time objects problem event trace large complex long running systems voluminous 
experience shows collecting trace couple seconds generates tens thousands events 
lowlevel nature information contained trace hard software engineer infer higher level information software system 
example may want know objects certain object sending messages want analyse verify single method invocation contained trace 
approaches run time information primary goal reduction complexity trace order reveal certain aspects collaboration classes 
approach condensed set information keep analyze complete trace compute simple run time metrics counting certain events 
example count methods class invoked program execution 
visualize value representing number invoked methods class run time polymetric view 
polymetric views lanza ducasse visualisations enriched software metrics :10.1.1.4.6638
views allow support understanding run time behaviour large complex long running systems 
allows reduce amount information metrics obtaining visualising valuable information run time behaviour system 
article discuss problems challenges run time analysis object oriented applications poses section 
approach detail section presenting analyzing case study performed tool extension codecrawler different run time polymetric views section :10.1.1.12.3711
conclude discussion findings section look related section outlook section 

run time analysis problems wilde assessed understanding objectoriented applications difficult reasons polymorphism late binding traditional tool analyzers program inadequate 
data flow analysers complex build especially presence dynamically typed languages 
inheritance incremental class definitions dynamic semantics self applications difficult understand 
domain model applications spread classes residing different hierarchies subsystems difficult pinpoint location certain functionality 
dynamic information way support understanding process 
context essential questions need answered instantiated classes 
classes having objects 
architectural point view detecting singletons valuable information 
classes create objects 
detecting object factories important information 
classes communicate 
percentage methods defined class 
challenges constraints run time analysis object oriented systems challenging constraints amount density information 
execution traces generated run time analysis packed large amounts low level information 
analysed techniques reduce complexity filtering clustering slicing concept analysis visualization 
granularity information 
execution traces contain large amounts low level information methods invoke methods methods access attributes objects created time difficult small pieces information gain understanding higher level 

approach run time context numerous classes complex inheritance containment hierarchies diverse patterns dynamic interaction contribute difficulties understanding reusing debugging tuning large objectoriented systems 
difficulties due amount quality data gathered execution traces 
relevant information looking hidden huge amounts data filtered analysed 
approach uses condensed set information support understanding run time behavior application 
principle polymetric view baseline approach implemented tool codecrawler :10.1.1.12.3711:10.1.1.4.6638
implements polymetric views software visualizations enriched software metrics described lanza mainly support understanding software systems static analysis 
see dimensional nodes representing entities software artifacts edges representing relationships enrich simple visualizations metrics node characteristics position metrics width metric color metric height metric relationship entity 
principle polymetric view 
node size 
width height node render measurements 
follow convention wider higher node bigger measurements size reflecting 
node color 
color interval white black display measurement 
convention higher measurement darker node light gray represents smaller metric measurement dark gray 
node position 
coordinates position node reflect measurements 
requires presence absolute origin fixed coordinate system layouts exploit dimension particularly tree layouts 
previous static information software metrics gathered static analysis software system :10.1.1.4.6638
article thickness edges render measurements 
gives information weight edge entities thick invocation edge classes signifies invocations classes 
note run time information tends nonlinear huge differences scale example method invoked times times views logarithmic scale display measurements 

inheritance tree enriched run time measurements 
example 
shows example inheritance tree enhanced run time information 
nodes represent classes analyzed application edges illustrate inheritance relationships 
example width nodes reflects number created instances height represents number methods execution 
color tone represents number method calls 
example flat dark node bottom hierarchies represents class heavily instantiated node width remarkable compared nodes instantiated perform little behaviour node small height methods class invoked analysed run time 
run time information collection run time information collection rich domain goes wrapping methods control objects instrumentation virtual machines 
great body done run time information terms trace events 
trace represents valuable information space consuming complex requires additional abstractions manipulations extract wanted information 
approach focuses collecting reduced amount information measurements execution number invocations number object creations number classes methods number method calls class execution 
constrain relatively simple measurements 
class run time measurements name description number called methods rcm ratio called methods vs called methods nmi number method invocations class nimi number internal method invocations class number external method invocations class number called class static methods number class static method calls class nci number created instances class number created objects class instances method run time measurements name description ti total number calls iti number invocations caller receiver invocation eti number invocations caller different receiver table 
list measurements extract execution trace 
measurements currently extract execution trace listed table run time polymetric views section define run time polymetric views show result application analysis concrete case study 
experience run application scenario covering different aspects 
sight difference nmi delicate grasp 
represents number called methods class nmi represents number invocations methods class 
example class methods execution different methods invoked times equals nmi equals 
case study nutshell particular software system experiment moose reengineering environment developed group 
moose relatively small case study consisting classes methods smalltalk code 
serves foundation reverse engineering tools 
provides language independent representation manipulation source code written java cobol smalltalk 
achieve language independence famix meta model describes elementary source code elements attributes methods classes namespaces represented 
moose describes meta models instances meta meta model 
explicit description meta models supports creation generic model reader writers 
parse source code applications java moose interprets cdif xmi compliant files extracting smalltalk applications moose uses parser analyzes resulting syntax trees generate moose models 
run time scenario 
run moose system analysis smalltalk application meta model created smalltalk specific source code model application created application analyzed metrics computed extracted external representation formats cdif xmi model saved file reloaded multiple times 
instance usage overview instance usage overview description layout inheritance tree sort nodes classes edges inheritance scope full system metric scale logarithmic node width nci number created instances node height number called methods node color nmi number method invocations class view intention 
instance usage overview shows classes instantiated system execution 
shown view description node width represents number created instances height node represents number methods color represents total number method invocations program execution 
revealing symptoms 
note view considers instance method invocations take account class static method invocations 
view provides overview complete application offers detailed information small white square nodes represent classes instantiated 
narrow pale nodes represent classes methods invoked having instances 
case singletons classes instantiated methods means inheritance 
flat pale nodes represent classes heavily instantiated number invocation low denoted light color 
flat dark nodes represent classes heavily instantiated heavily invoked methods 
large dark nodes represent classes heavily instantiated behaviour greatly 
case study 
shows part instance usage overview applied case study 
dark large node annotated view cdif scanner parses files written cdif format old industrial exchange format 
instance scanner created time model loaded memory 
heavily invoked scanning dense process putting movement small specific methods 
dark large node annotated represents moose meta meta model class instantiated high number times 
model class instantiated represent current moose meta model 
moose dynamic environment meta models extended current meta model representation created time model loaded 
methods mainly accessors executed populate meta model entity meta meta model description 
explains high number created instances 
puzzled fact classes heavily instantiated calls instances 
inspections may yield chances optimizations 
famix meta model classes represented inheritance hierarchy root called model source code entities flat lightly colored nodes 
models loaded moose scenario simple models containing couple classes 
classes instantiated case loading large models 
inheritance hierarchy contains shapes 
flat nodes information extracted smalltalk code classes methods attributes inheritances occur leaves inheritance tree 
white classes model instance local variables instantiated compared classes modeling variable accesses method invocations 

small square leaf nodes represent classes defined language independent meta model relevant smalltalk classes modeling entities includes functions 
classes instantiated 

narrow nodes middle hierarchy represent classes instantiated methods invoked subclass instances 
small hierarchy class annotated represents visitors parse tree extracts famix meta model smalltalk source code 
class invoked time model created smalltalk source code visitors vw dedicated analysis performed demand 
small hierarchy covered execution 
fact classes represent part graphical user interface moose execution 
vw stands visualworks smalltalk development environment distribution 

instance usage overview 
discussion 
instance usage overview gives overview run time behavior application 
gives clues classes system context superclass code reuse 
view double advantage combining static inheritance shape system number classes run time information class number created instances number method calls number invoked methods 
helps identify instantiated classes instantiated classes heavily classes unused classes 
communication interaction view communication interaction description layout embedded spring layout nodes classes edges invocations scope full system metric scale linear node width number called methods node height number called methods node color nmi number method invocations class edge width number invocations classes view intention 
communication interaction view shows communication classes system execution 
described size node represents number methods color number method invocations 
communication interaction view takes advantage embedded spring layout weights springs edges classes heavily communicating aggregate 
addition width edges represents class communication 
revealing symptoms 
view considers instance level method invocations direct class instance creations classes 
view may contain unconnected tiny square nodes represent classes methods invoke methods get invoked methods 
connected tiny square nodes represent classes methods rarely invoked 
note classes methods heavily invoking methods represented dark class node 
large white square nodes represent classes having considerable number method rarely invoked execution 
dark square nodes represent heavily classes 
small dark square nodes addition represent classes methods heavily 
groups nodes loosely connected view core represent classes communicating funnel rest system :10.1.1.12.3711:10.1.1.4.6638
case study 
shows application communication interaction view case study 

communication interaction view 
group classes clearly disconnected rest core view joins biggest part view class annotated group classes implements xmi file production mof compliant interface disconnected rest xmi mof production independent package moose produce xmi model files 
big class xmi producer uses mof interface objects communicate bridge class meta model 
xmi producer rarely moose favors cdif exchange format 
explains class node pale 
big class central repository storing analyzed models 
acts main entry querying models 
class connected classes modelling smalltalk source code 
medium sized dark class node cdif scanner mainly invoked class loads models memory 
responsibility populate model transform textual representations cdif text file objects 
note moose developers learned class invoked shown 
big class represents class models classes moose 
class class representing meta meta model moose instantiated represent famix meta model 
class famix classes describe automatically input output tools provide meta model independent functionality 
discussion 
communication interaction view identifies heavily invoked classes scalable instance usage overview classes communicate heavily naive embedded spring layout difficulties create identifiable groups classes 
note approach took account invocations self sends classes subclasses underlying view denser 
way reduce high degree coupling group classes common hierarchy 
creation interaction view creation interaction description layout embedded spring layout nodes classes edges instantiation scope full system metric scale logarithmic node width number created objects class node height nci number created instances node color nci number created instances edge width number creation classes view intention 
creation interaction view shows instance creations classes system execution 
described width color class node represents number instances created class height represents number instances represented class 
creation interaction view takes advantage embedded spring layout weighting springs classes heavily instantiating classes aggregate 
addition width edges represents number class class instantiations 
revealing symptoms 
view considers instance level object creations may contain unconnected tiny square nodes representing classes instantiated system execution 
connected tiny white square nodes represent classes instances 
note classes instantiate classes 
flat lightly colored nodes represent classes heavily create instances instantiated 
objects classes create lot objects 
note class creates lot objects simply due fact methods instance subclasses 
narrow dark nodes represent classes instantiated times instances create instances 
wide dark nodes represent classes heavily instantiated number methods number invocations high 
case study 
shows application creation interaction view execution case study 
big groups classes identifiable 
group top view composed narrow dark node flat nodes interesting shape 
narrow class node represents class meta meta model entity instantiated initialization system famix meta model entities 
small flat nodes represent famix metamodel classes smalltalk specific creating instances class represent creation famix meta model 

extracting source code model done different phases different entities uses reflective api smalltalk query simple structural information classes methods attributes visitor extracting syntax tree ast detailed information 

group top left view represents extraction phase identify fact big class creates lot entities surrounding classes 
opposite group view describes second phase creates lot instances access invocation classes numerous entities meta model 

group bottom left reveals interesting aspect system 
big dark node represents class measurement 
measurements represents source code metrics numerous entities created model analysis 
represented memory stored file 
instances measurement created loading file entities second phase removes memory means garbage collection 
picture shows fact loading saving source code model instances measurement created 
classes surrounding various classes responsible loading saving 
discussion 
view creation interaction clearly scalable communication interaction view 
normal class higher probability invoke classes create instances classes 
view useful allows classify classes behaviour terms creation objects 
discussion approach condensed set run time information proven successful provide insights behaviour application run time 
views rich multiple facets revealing 
creation interaction view 
different kinds information 
approach reduction dynamic information applicable systems disturbed generating trace lead extremely huge amounts data 
approach incremental sense collected information cumulated 
views provide overviews cases fine grained information 
approach plugged dynamically system running 
note linked wrapping technology minimal set run time information requires 
tool uses method wrappers allows dynamically safely control method method recompilation byte code modification 
drawbacks approach provide fine grained run time information level sequence interactions sequence diagrams done de pauw requires viewer interact view gather relevant information 
current implementation embedded spring layout shows limits applied densely communicating systems 
related past great body research conducted support understanding object oriented applications 
various approaches support understanding software behavior proposed literature graphical representations software execution long accepted comprehension aids 
various tools provide quite different software execution visualizations 
murphy developed approach allows software engineers specify high level model system 
software execution visualized models 
visualization oriented liveness objects number 
directed static architectural models focused visualization different kinds interactions classes software system execution 
version introduces sampling events reduce information 
syst shimba mix static dynamic information support program understanding 
shimba uses traces java programs extracts automatically scenario diagrams state diagrams representing runtime system sced 
shimba provides string matching algorithms recognizing patterns event traces 
lange program explorer focused views classes objects 
authors developed system tracking function invocation object instantiation attribute access 
views show class instance relationships usually focused particular instance class short method invocation histories 
intended global understanding tool 
users know interested start approach covering complete system 
jerding created interaction diagrams visualize entire software execution 
purpose tool able visualize method calls classes 
extract recognize execution patterns drawback certain lack flexibility analysis scalability large numbers messages huge number classes 
case visualization useful 
de pauw different approaches 
tool focused interaction diagrams 
way messages objects visualized 
extraction execution patterns main purposes 
large execution trace difficult understand class roles execution 
earlier de pauw class call clusters class call matrix closer approach 
visualizations simple scalability facet object oriented application 
approach common visualize program executions applying sophisticated diagrams keep execution trace 
contrast extract execution trace information condense measurements enrich visualizations 
dynamic program slice executable part program behavior identical program input original program respect variable interest execution position 
dynamic slicing support understanding program 
similar way codesurfer supports understanding hypertext facilities full visualization support 
new way presenting runtime information trace system condensed compact set information measurements extracted execution 
measurements generate run time polymetric views simple visualizations enriched measurements :10.1.1.4.6638
views proposed simple principles condensed set run time information provide rich insights highlight multiple facets runtime behavior system 
advantages approach fact applied systems trace generation difficult extract big efficiently analyze applications running hours day 
plan extend current approach ways attribute dynamics 
understanding attributes lifetime object class usage frequency axis want explore 
object lifetime 
objects lifetime execution interesting identify different kind objects 
test coverage 
understanding assessing tests problem emergence test driven methodologies getting crucial 
plan apply approach understand estimate tests quality 
think verify coverage tests infer parts system covered tests 
large systems 
want assess approach scales deal traces large systems scalability problem trace number involved objects impact visualizations 
acknowledgments 
acknowledge financial support swiss national science foundation projects tools techniques decomposing composing software snf project recast evolution object oriented applications snf project 
anderson teitelbaum 
software inspection codesurfer 
proceedings wise international workshop inspection software engineering 
brant foote johnson roberts 
wrappers rescue 
proceedings ecoop lncs pp 
springer verlag 
chan holmes murphy ying 
scaling object oriented system execution visualizer sampling 
international workshop program comprehension 

program understanding challenge ibm systems journal 
davis 
principles software development 
mcgraw hill 
demeyer ducasse tichelaar 
unified universal 
uml shortcomings coping round trip engineering 
proceedings uml lncs oct 
springer verlag 
demeyer tichelaar ducasse 
famix information exchange model 
technical report university bern 
ducasse 
evaluating message passing control techniques smalltalk 
journal object oriented programming june 
ducasse lanza tichelaar 
moose extensible language independent environment reengineering object oriented systems 
proceedings second international symposium constructing software engineering tools coset june 
jerding rugaber 
visualization architectural localization extraction 
proceedings wcre pp 
ieee 
jerding stasko ball 
visualizing message patterns object oriented program executions 
technical report git gvu georgia institute technology may 

understanding object oriented systems concurrently animated views 
proceedings oopsla volume pp nov 
korel laski 
dynamic program slicing 
information processing letters 
korel 
dynamic program slicing understanding program execution 
th international workshop program comprehension wpc pp 
koskimies syst 
automated support modeling oo software 
ieee software jan 
lange nakamura 
program explorer program visualizer 
proceedings usenix conference object oriented technologies pp 
lange nakamura 
interactive visualization design patterns help framework understanding 
proceedings oopsla pp 
acm press 
lanza :10.1.1.12.3711
codecrawler lessons learned building software visualization tool 
proceedings pp 
ieee press 
lanza 
object oriented reverse engineering coarsegrained fine grained evolutionary software visualization 
phd thesis university berne may 
recipient software engineering prize 
lanza ducasse :10.1.1.4.6638
polymetric views lightweight visual approach reverse engineering 
ieee transactions software engineering sept 
mendelzon 
reverse engineering visualizing querying 
software concepts tools 
pauw helm vlissides 
visualizing behavior object oriented systems 
proceedings oopsla pp oct 
pauw vlissides 
modeling object oriented program execution 
proceedings ecoop lncs pp july 
springer verlag 
pauw lorenz vlissides wegman 
execution patterns object oriented visualization 
coots pp 
ducasse 
dynamic information iterative recovery collaborations roles 
proceedings icsm oct 
smith korel 
slicing event traces large software systems 
international workshop automated debugging 
demo 
sommerville 
software engineering 
addison wesley sixth edition 
syst 
static dynamic reverse engineering techniques java software systems 
phd thesis university tampere 
syst 
understanding behavior java programs 
proceedings th working conference reverse engineering wcre pp 
syst koskimies ller 
shimba environment reverse engineering java software systems 
software practice experience jan 
walker murphy freeman benson wright swanson 
visualizing dynamic software system information high level models 
proceedings oopsla pp 
acm oct 
wilde 
maintenance support objectoriented programs 
ieee transactions software engineering se dec 
