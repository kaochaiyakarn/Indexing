cumulative monadic metalanguage eugenio moggi january introduce monadic metalanguage combines previously proposed monadic metalanguages staging value recursion 
metalanguage includes extensible records basic name management facility 
introduce monadic metalanguage called fix combines features staging constructs borrowed monadic metalanguage mf refines staging annotations metaml cms 
main computational effects introduced staging due evaluation binder involves generation fresh names computation goes inside body binder re capturing names computation body completed 
monadic value recursion erk launchbury el erk elm formalized ms 
main computational effects introduced value recursion generation fresh names computation value recursive variable started substitution recursive variable value computed 
extensible records provide basic name management facility 
mml am extensible records form separate syntactic category name resolvers fix terms 
including extensible records terms complicates type system sub typing name resolvers class entities 
extensible records contribute computational effects adds construct generate fresh global name see section 
global name term variable types name component extensible record terms selection record component 
order exemplify interaction features standard computational effects fix includes 
considered computational effects see ms 
operational semantics fix general pattern proposed mf specify confluent simplification relation defined compatible closure set rewrite rules computation relation describing configurations closed system may evolve 
possible monadic metalanguage clear distinction term constructors building terms computational types term constructors computationally irrelevant effects 
sub typing fix motivated need extensible records class entities convenient introducing restrictive computational types 
pursue possibility follow marriage effects monads advocated wad 
sub typing difference general pattern monadic metalanguages outlined mf allow arbitrary binders setting combinatory reduction systems 
allow unary binders algebraic operations arbitrary arity 
restriction substantially simplifies presentation affecting expressivity binder decomposed algebraic operation unary binders 
supported eu project dart ist eu network ii ist summary 
section describe syntax type system operational semantics fix section establishes type safety section exemplifies possible uses staging value recursion 
extensions fix outlined section 
notation 
notations conventions 
range set natural numbers identified set predecessors 
ranges set finite sequences ei elements denotes length 
denotes concatenation 
term equivalence written conversion 
fv set variables free denotes substitution modulo 
fin means partial function finite domain written dom 
write ai bi partial function mapping ai bi ai different ai aj implies particular undefined partial function operations partial total functions denotes partial function defined follows iff denotes partial function denotes union partial functions disjoint domains 
means sets disjoint 
bnf 
pm write pm 
pm shorthand extended bnf 
pm write syntax reflexive transitive closure relation syntax abstracted basic types variables locations global names types fin signature xi terms op op operations unary binders op ret new get set compile op fix mfix bv bm bnf algebraic operations unary binders recursive 
equivalently define level annotations multi level languages binding time analysis gj op dol newl get setl compile annotation algebraic operation consists string unary alphabet replaced natural number length 
annotation unary binder consists string binary alphabet allow distinguish situations start generating code abstraction generated fresh name start generating code body ret code body abstraction ret code abstraction 
prefer define recursive bnf keep description monadic metalanguages uniform 
give informal semantics types terms assign type schema operations op unary binders 
functional type 
application abstraction 
computational type type computations returning values type ret 
computation ret returns value computes value computes 
type type locations containing terms type new get set 
computation new returns new location initialized get returns value contained location set stores location 
extensible record aka name resolver type type resolvers mapping dom term type dom requirements 
empty resolver name resolution term obtained resolving extension maps uses resolve names 
fix 
fix ordinary recursion unfolding fix mfix 
mfix value recursion computes value error occurs needed evaluating replaced fix ret 
code type types terms representing terms type 
cross stage persistence aka binary inclusion represents compile compilation compile returns term represented exists causes error variable op op op ei represents term form op 
bv bv represents term form 
bm bm computes value representing term 
syntactic categories instrumental operational semantics evaluation contexts ec mfix bm stores fin map locations contents configurations id conf ec consist set fresh names generated far current store program fragment consideration evaluation context fresh name may leak outside scope binder grows computation progresses 
definition free captured variables sets fv free defined induction structure ec 
evaluation context define set cv captured variables 
fv op ei ei fv ec fv cv fv fv cv cv mfix fv cv bm fv cv definition fv extends obvious way fv fv 
dom table sub typing dom dom op ei op ei op table type system evaluation context hole scope binder definition substitution complex capture avoiding substitution terms captured variables bound variables renamed 
definition substitution substitution defined induction type system ec mfix mfix bm bm cv type system derives judgments form fin type assignment fin signature assigning types sake generality insists assigns types 
way type system easily accommodate extensions fix continuation channel types type assigned tell location continuation 
extensible record types sub typing non trivial see table type system include sub typing rule 
table gives typing rules depend type schema operations op unary binders 
type system enjoys properties quite standard presence sub typing 
proposition properties rules admissible refl trans proposition ts properties rules admissible weaken dom weaken subsume dom subst bm mfix mfix bm table formed evaluation contexts proposition ts inversion derivable holds op ei op ei derivable derivable define formed configurations id evaluation contexts ordinary monadic metalanguage restrict empty 
presence staging value recursion include declarations form respectively 
sake generality allow arbitrary declarations restrictive assumptions needed see section 
definition write dom dom dom implies exists derivable see table 
type system extended evaluation contexts enjoy properties 
notice subsume replace subst remove declaration assigns types captured variables proposition ts properties rules admissible weaken dom weaken dom subsume subst simplification simplification compatible closure reduction rules beta resolve delegate enjoys properties confluence subject reduction strong normalization 
simplification typed terms strongly normalizing fix unfolding simplification rules included computation rules 
hand properties simplification confluence subject reduction hold independently fix unfolding simplification rule 
technical reason mainly step parallel reduction related inclusions definition step parallel reduction relation defined rules resolve refl op ei op ei op beta delegate relation extended syntactic categories follows mfix mfix mfix bm dom dom dom bx bx bm bm proposition properties rule admissible ec refl subst theorem cr exists implies theorem sr id id id id computation computation relation id id done err table describes small step operational semantics done denotes successful termination err denotes run time error prevented type system 
computation rule compilation uses auxiliary notions code value demotion 
definition demotion set vc code values defined follows vc vc op vci bv vc demotion partial function mapping code value represented term undefined base case administrative steps involve evaluation context ret done ret imperative steps involve store new ret dom get ret provided set ret provided dom code generation steps involve set evaluation context bm bm renamed avoid clashes ret bm ret bv compilation step may cause run time error compile vc ret err vc vc undefined attempt compile open code steps recursive monadic bindings fix fix mfix mfix renamed avoid clashes ret mfix ret stands fix ret err err attempt evaluate unresolved variable table computation relation op vci op ei provided ei vci bv vc provided vc lemma fv cv dom dom fv cv computation step enabled program fragment consideration computational redex 
definition computational redex set computational defined follows ret new get set fix mfix bm compile vc key property simplification computation rule enabled configuration enabled configuration simplified 
program fragment consideration computational redex simplification enable computational rules 
theorem id id id 
id implies id 
id implies id range conf done err 
type safety prove type safety evaluation typed program get stuck configuration id reachable initial configuration id simplification computation steps progress include possibility run time error err 
usual result follow subject reduction simplification established theorem progress 
sequel ranges type assignments mapping variables computational types code type hand configurations reachable initial typable 
hand progress hold configurations typable 
lemma vc vc 
theorem sr id id id exist id lemma normal form implies computational redex implies location implies code value implies abstraction implies form theorem progress holds 

paradigmatic examples partial evaluation staging 
partial evaluation technique making programs efficient 
general idea simplest form computation advance part input data available stage produce specialized program residual computation rest input available stage 
formally program requesting inputs type respectively want optimized program po computation produces specialized program ps receiving input 
may set correctness requirement computations pox ps equivalent 
requirement difficult meet usually achieve partial correctness limited repeating computation stage effect 
line partial evaluators produce optimized programs binding time analysis jss gj 
framework analysis results annotated program pa easily derive optimized program pox pax xc compile xc generate code xc specialized program compile 
simple cases derive optimized program directly general requires major restructuring original program difficult general method works compositionally 
consider classical example power function readability ml syntax haskell notation 
power function nat real real fun ret ret annotated program nat real real fun ret ret ret ret optimized program nat real real fun ret fn ret ret fn ret recursive unfolding done fix recast examples cms involve imperative programming 
generative components staging 
staging particularly useful component programming 
component formalized function requested services input parameters computes result 
words type component requesting service input type comp serv input output type serv convenient way pass services inputs bundle extensible record 
generative components provide extra degree flexibility distinguishing stages stage component generated linked services specialized parameters second stage corresponds component 
type generative component type input input output type type services refined similar way 
service provider split computation stages generative component programmer may decide exploit staging staged server computation val 
server computation serv fun serv code stage computation exec compile code compilation exec stage computation delayed server computation serv fun serv serv gives examples generative components context 
inheritance value recursion 
coo denotational semantics class amounts generator function object class obtained fix point inheritance explained terms wrappers 
parent class wrapper define class assumption presence computational effects cook semantics refined follows class amounts function new object class value returned computation mfix initializes parent class wrapper define class xp assumption words initialization object class consists steps initialization object parent class computation obtain object class 
simpler fix point semantics objects computation fix equivalent value recursion computational effects particularly simple nature 
repeating computation times equivalent executing 
alternative semantics class computation function new object class value returned fix initialization refer recursive variable setting fix point operator available computational types define derived fix points operators record types components methods functions type arbitrary record types 
extensions records extension adds record types elements extensible record types component specified type 
record types extensible record types orthogonal computational types 
reported am compositional translation calculus module systems cms az az extension 
types terms fin record xi ei op sum give informal semantics additional types terms xi record type type records xi ei ei type record component selection component deletion required dom sum dom dom record concatenation 
additional rules typing sub typing dom dom dom additional simplification rules select delete plus dom dom ei xi ei xi mixin type cms translated functional type point wise translation 
notice translation input output signatures asymmetric 
essential get compositional translation terms sound sub typing rule mixin types 
fresh names extension influenced np add term generating fresh global name 
outline major changes needed cope extension properties type safety worked 
fresh name fresh global name occur terms types 
addition fresh global names pervasive impact syntactic categories tn judgments parameterized finite set global names 
typing computation rules modified obvious way adding extra parameter typing rules premises computation rules configuration computation step typing computation rule differently fv binder rules bound renamed avoid clashes theoretical underpinning manipulating provided gp particular names unified permuted rule admissible perm permutation am ancona moggi 
calculus symbolic names management 
submitted 
az davide ancona elena zucca 
primitive calculus module systems 
proc 
int conf 
principles practice declarative programming volume lncs pages 
springer verlag 
az ancona zucca 
calculus module systems 
funct 
programming march 
extended version az 
cms moggi sheard 
closed types safe imperative metaml 
funct 
programming 
coo william cook 
denotational semantics inheritance 
phd thesis brown university 
el erk john launchbury 
recursive monadic bindings 
proceedings acm sigplan international conference functional programming icfp volume acm sigplan notices pages september 
acm press 
elm erk john launchbury andrew moran 
semantics value recursion monadic input output 
journal theoretical informatics applications 
erk erk value recursion monadic computations 
phd thesis ogi school science engineering portland oregon 
ferrari moggi pugliese 
type safe multi stage language global computing 
math 
structures comput 
sci appear 
gj robert gl ck jesper rgensen 
efficient multi level generating extensions program specialization 
swierstra hermenegildo editors programming languages implementations logics programs plilp volume lecture notes computer science pages 
springer verlag 
gj robert gl ck jesper rgensen 
fast binding time analysis multi level specialization 
bj rner manfred broy igor editors perspectives system informatics volume lecture notes computer science pages 
springer verlag 
gp murdoch gabbay andrew pitts 
new approach syntax involving binders 
proc 
th ann 
ieee symp 
logic comput 
sci pages july 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall 
jss neil jones peter sestoft harald 
experiment partial evaluation generation compiler generator 
jean pierre jouannaud editor rewriting techniques applications volume lecture notes computer science pages 
springer verlag 
jan willem klop vincent van van 
combinatory reduction systems survey 
theoret 
comput 
sci 
mf moggi 
monadic multi stage metalanguage 
proc 
fossacs volume lncs 
springer verlag 
ms moggi sabry 
monadic semantics value recursion 
extended version ms submitted 
ms moggi sabry 
monadic semantics value recursion 

np pfenning 
meta programming names necessity 
submitted 
ore oregon graduate institute technical reports 
box portland usa 
available online ftp cse ogi edu pub tech reports readme html 
viewed august 
taha 
multi stage programming theory applications 
phd thesis oregon graduate institute science technology 
available ore 
wad philip wadler 
marriage effects monads 
international conference functional programming icfp volume acm sigplan notices pages 
acm june 

