optimized spatial hashing collision detection deformable objects matthias teschner bruno heidelberger matthias ller markus gross propose new approach collision self collision detection dynamically deforming objects consist tetrahedrons 
tetrahedral meshes commonly represent volumetric deformable models algorithm integrated physically environment game engines surgical simulators 
proposed algorithm employs hash function compressing potentially infinite regular spatial grid 
hash function provide unique mapping grid cells generated efficiently require complex data structures octrees 
investigated optimized parameters collision detection algorithm hash function hash table size spatial cell size 
algorithm detect collisions self collisions environments tetrahedrons real time 
algorithm works tetrahedral meshes easily adapted object primitives triangles 
environment dynamically deforming objects consist tetrahedrons 
computer graphics laboratory eth zurich physically simulations animations deformable objects play important role various research areas cloth modeling games computational surgery 
order realistically process interaction deformable objects efficient collision detection algorithms required 
information provided collision detection approach allow efficient physically correct collision response 
describes new algorithm detection collisions self collisions deformable objects spatial hashing 
algorithm classifies object primitives vertices tetrahedrons respect small axis aligned bounding boxes aabb 
hash function maps boxes cells hash table index 
result hash table index contains small number object primitives checked intersection 
hash table index contain primitive object primitives different objects self collisions collisions different objects detected 
actual collision detection test computes barycentric coordinates vertex respect penetrated tetrahedron 
information employed estimate penetration depth pair colliding tetrahedrons 
penetration depth processing collision response 
hash function spatial subdivision efficient 
spatial subdivision usually requires pre processing pass object primitives estimate global bounding box cell size pass omitted approach 
hand hash mechanism provide unique mapping grid cells hash table entries 
different grid cells mapped index performance proposed algorithm decreases 
vmv munich germany november order reduce number index collisions optimized parameters collision detection algorithm impact problem characteristics hash function hash table size cell size 
investigates factors 
presents experimental results obtained physically environments deformable objects varying geometrical complexity see fig 

environments tetrahedrons tested collisions self collisions real time pc 
remainder organized follows 
sec 
discusses state art collision detection rigid deformable objects 
sec 
presents proposed algorithm 
sec 
focuses relevant parameters algorithm investigates influence performance 
sec 
results experiments described 
sec 
discusses limitations approach followed directions ongoing research 
related efficient collision detection essential component physically simulation animation including cloth modeling 
applications robotics computer animation medical simulations computational biology games 
collision detection algorithms bounding volume bv hierarchies proven efficient types bvs investigated 
acceleration structures find spheres axis aligned bounding boxes oriented bounding boxes discrete oriented polytopes 
various optimizations bv hierarchies 
initially bv approaches designed rigid objects 
context hierarchy computed pre processing step 
case deforming objects hierarchy updated run time 
effort spent optimize bv hierarchies deformable objects pose substantial computational burden storage overhead complex objects 
additional limitation physically applications bv approaches typically detect intersecting surfaces 
computation penetration depth collision response requires additional step 
alternative object partitioning approaches employ discretized distance fields volumetric object representation collision detection 
results suggest data structure suitable real time processing geometrically complex objects 
hybrid approach uses bvs distance fields 
various approaches introduced employ graphics hardware collision detection 
multi pass rendering method proposed collision detection 
algorithm restricted convex objects 
interaction cylindrical tool deformable tissue accelerated graphics hardware 
proposes multi pass rendering approach collision detection objects perform closest point queries bounding volume hierarchies multipass rendering approach 
aforementioned approaches decompose objects convex polytopes 
exist various approaches propose spatial subdivision collision detection 
algorithms employ uniform grids 
spatial hashing collision detection mentioned details 
presents hierarchical spatial hashing approach part robot motion planning algorithm restricted rigid bodies 
employ spatial hashing collision detection deformable tetrahedral meshes 
implicitly subdivided small grid cells 
information global bounding box environment required data structures grids avoided 
approach inherently detects collisions self collisions 
parameters algorithm investigated optimized 
collision detection algorithm collision detection algorithm implicitly subdivides small aabbs 
pass vertices objects classified respect small cells 
second pass tetrahedrons classified respect cells 
tetrahedron intersects cell vertices associated cell pass checked interference tetrahedron 
actual intersection test computes barycentric coordinates vertex respect tetrahedron order estimate vertex penetrates tetrahedron 
consistent processing object primitives enables detection collisions self collisions 
vertex penetrates tetrahedron collision detected 
vertex tetrahedron belong object self collision detected 
vertex part tetrahedron intersection test omitted 
spatial hashing vertices pass positions vertices discretized respect user defined cell size 
coordinates vertex position divided grid cell size rounded integer 
hash function hash maps discretized position index vertex object information stored hash table index hash 
refer sec 
details hash function 
sec 
sec 
describe find optimal hash table size cell size respectively 
addition generating hash value vertex pass computes aabbs tetrahedrons current deformed state 
spatial hashing tetrahedrons pass considered vertices build hash table update aabbs tetrahedrons second pass algorithm traverses tetrahedrons 
minimum maximum values describing aabb tetrahedron discretized 
values divided user defined cell size rounded integer 
second hash values computed cells affected aabb tetrahedron 
cells traversed discretized minimum discretized maximum aabb see fig 

vertices hash table index tested intersection 
intersection test vertex tetrahedron mapped hash index part penetration test performed 
actual intersection test consists steps 
checked aabb updated pass 
penetrates hash values computed grid cells covered aabb tetrahedron 
tetrahedron checked intersection vertices hash indices 
aabb second step tests inside test computes barycentric coordinates respect vertex details sec 

parameters section investigate parameters algorithm 
characteristics hash function size hash table size cell spatial subdivision actual intersection test influence performance algorithm 
optimized aspects algorithm 
hash function pass algorithm hash values computed discretized vertex positions 
hash values uniformly distributed guarantee adequate performance algorithm 
hash function vertices object close vertices different objects farther away 
tested hash functions implementation basically variants additive rotating hash functions 
systematically investigated characteristics hash functions 
gets values describing vertex position returns hash value hash xor yp xor mod large prime numbers case respectively 
value hash table size 
function evaluated efficiently produces comparatively small number hash collisions small hash tables 
described sec 
quality hash function important larger hash tables 
hash table size size hash table significantly influences performance collision detection algorithm 
experiments indicate larger hash tables reduce risk mapping different positions hash index 
algorithm generally works faster larger hash tables 
hand performance slightly decreases larger hash tables due memory management 
fig 
fig 
show performance algorithm test scenarios varying hash table size 
hash table significantly larger number object primitives risk hash collisions minimal 
known hash functions efficiently hash table size prime number fig 
fig 
show performance measurements hash table sizes 
collision detection ms hash table size performance collision detection algorithm deformable vessels see fig 
number vertices tetrahedrons varying hash table size 
grid cell size set average edge length tetrahedrons see sec 

implementation hash table require re initialization simulation step reduce efficiency case larger tables 
avoid problem simulation step labeled unique time stamp 
collision detection ms hash table size performance collision detection algorithm deformable objects see fig 
number vertices tetrahedrons varying hash table size 
grid cell size set average edge length tetrahedrons see sec 

pass stores vertices hash table cell outdated time stamp time stamp updated cell reset new vertices inserted 
time stamp date new vertices appended hash table cell 
second pass generates hash indices tetrahedrons current time stamp compared time stamp hash table entry 
time stamps differ information hash table outdated intersection tests performed 
re initialization hash table performed simulation comparatively costly larger hash tables 
grid cell size grid cell size spatial hashing influences number object primitives mapped hash index 
case larger cells number primitives hash index increases intersection test slows 
cell size significantly smaller tetrahedron tetrahedron covers larger number cells checked vertices larger number hash entries 
measurements fig 
indicate grid cell size average edge length tetrahedrons achieve optimal performance 
graphs illustrate grid cell size significant impact performance hash table size hash function 
collision detection ms cell size average edge length performance collision detection algorithm deformable vessels see fig 
number vertices tetrahedrons varying grid cell size 
hash table size 
intersection test compared tests detecting penetrates tetrahedron vertices positions 
test computes barycentric coordinates vertex respect vertex tetrahedron 
second test considers oriented faces tetrahedron checks vertex positive negative half space faces 
barycentric coordinate test slightly faster half space test performed experiments sec 
vertex test barycentric coordinates respect express new coordinates respect coordinate frame origin coincides axis coincide edges adjacent dimensional matrix 
coordinates new coordinate frame 
point lies inside tetrahedron 
time complexity number primitives vertices tetrahedrons 
find intersecting vertex tetrahedron pairs naive approach test vertices tetrahedrons resulting time collision detection ms cell size average edge length performance collision detection algorithm deformable objects see fig 
number vertices tetrahedrons varying grid cell size 
hash table size 
complexity order 
goal approach reduce complexity 
deformation algorithm needs process primitives time step linear time complexity collision detection decrease performance significantly 
pass vertices inserted hash table 
pass takes time 
hash table need initialized time independent hash table size 
second vertex hash function evaluated vertex added hash cell time 
second pass tetrahedrons vertices local neighborhood tested collision 
time complexity pass order average number cells intersected tetrahedron average number vertices cell 
cell size chosen proportional average tetrahedron size constant 
hash collisions average number tetrahedrons cell constant times vertices tetrahedra cell 
constant time complexity algorithm turns linearly dependent number primitives 
results performed experiments various setups deformable objects see tab 
tab 

setups illustrated fig 
respectively 
fig 
illustrates tetrahedral meshes patient individual models vessels setup setup deformable objects table setups dynamically deforming objects tested physically environment 
setup objects vertices table performance collision detection algorithm setups tab 

average collision detection time minimum maximum standard deviation simulation step 
setup ave ms min ms max ms dev ms experiments indicate detection collisions self collisions dynamically deforming objects performed hz tetrahedrons vertices pc intel pentium ghz 
performance independent number objects 
depends number object primitives 
performance varies slightly simulations due changing number hash collisions due varying distribution hash table elements 
discussion proposed algorithm detects vertex penetrates tetrahedron detect edge intersects tetrahedron 
test setup test setup due reasons 
performance algorithm decrease significantly relevance edge test unclear case densely sampled objects 
second collision detection intended component physically environments integrated collision response 
collision response easily realized penetrating vertices uncommon costly implement collision response case penetrating edges 
algorithm performs passes objects sufficient perform pass computes hash values tetrahedrons 
case hash table entry contains tetrahedrons intersect 
implemented approach efficient compared pass approach 
test setup tetrahedral mesh test setup vertex positions mapped hash table exactly tetrahedrons usually mapped hash indices leads larger number elements hash table decreasing performance algorithm 
comparison performance existing collision detection approaches difficult 
exist numerous public domain libraries rapid swift 
approaches optimized deformable objects 
data structures pre computed rigid bodies updated case deformable objects 
approach implemented tetrahedrons 
restricted tetrahedrons handle object primitives simply replacing intersection test 
ongoing efficient collision detection essential component real time simulation environments deformable objects 
realistic interaction dynamically deforming objects requires correct collision response 
algorithm provides exact position vertex inside penetrated tetrahedron employ information collision response 
assume face vertex penetrated tetrahedron part object surface easily derive penetration depth allows correct collision response 
accomplish modular framework real time simulation deformable objects game engines surgical simulators 
integrated efficient deformable models linear finite elements proposed collision detection approach 
completed mentioned collision response framework handle interacting deformable models tetrahedrons real time 
introduced method detecting collisions self collisions dynamically deforming objects 
computing global bounding box objects explicitly performing spatial subdivision propose hash function maps cells hash table realizing efficient implicit spatial subdivision 
actual vertex tetrahedron test barycentric coordinates 
provides information physically collision response 
investigated optimized parameters approach 
experiments performed various test scenarios show environment tetrahedrons processed real time independent number objects 
research supported swiss national science foundation 
project part swiss national center competence research computer aided image guided medical interventions 
wong sun recode image collision detection algorithm journal visualization computer animation vol 
pp 

baraff collision contact siggraph course notes 
van den bergen efficient collision detection complex deformable models aabb trees journal graphics tools vol 
pp 

fedkiw anderson robust treatment collisions contact friction cloth animation proceedings siggraph pp 

cormen leiserson rivest algorithms isbn mit press cambridge massachusetts 
desbrun 
cani barr dynamic real time deformations space time adaptive sampling proceedings siggraph pp 

lin swift accelerated proximity queries convex polyhedra multi level voronoi marching technical report tr univ north carolina chapel hill 
sullivan improving collision detection deformable objects proceedings spring conference computer graphics castle bratislava 
gottschalk lin manocha obb tree structure rapid interference detection proceedings siggraph pp 

kaufman collision detection volumetric objects proceedings ieee visualization pp 

fisher lin simulation non penetrating elastic bodies distance fields technical report tr university north carolina chapel hill 
hoff lin manocha fast simple geometric proximity queries graphics hardware proceedings symposium interactive graphics pp 

hubbard interactive collision detection proceedings ieee symposium research frontiers virtual reality pp 

hughes lin manocha efficient accurate interference detection polynomial deformation soft object animation proceedings computer animation pp 

kim lin manocha fast penetration depth computation physically animation proceedings acm siggraph symposium computer animation pp 

kim hoff lin manocha closest point query union convex polytopes rasterization hardware journal graphics tools appear 
klosowski held mitchell efficient collision detection bounding volume hierarchies dops proceedings siggraph pp 

larsen gottschalk lin manocha fast proximity queries swept sphere volumes technical report tr university north carolina chapel hill 
larsson moeller collision detection continuously deforming bodies proceedings eurographics pp 


cani real time collision detection virtual surgery proceedings computer animation pp 

dynamic plane shifting bsp traversal proceedings graphics interface pp 

mirtich efficient algorithms phase collision detection technical report tr mitsubishi electric research laboratory 
ller dorsey mcmillan cutler stable real time deformations proceedings acm siggraph symposium computer animation sca pp 

provot collision self collision handling cloth model dedicated design garment proceedings graphics interface pp 

quinlan efficient distance computation non convex objects proceedings ieee int 
conf 
robotics automation pp 

bradshaw sullivan sphere tree construction medial axis approximation proceedings acm siggraph symposium computer animation sca pp 

turk interactive collision detection molecular graphics technical report tr university north carolina chapel hill 
volino magnenat thalmann versatile efficient techniques simulating cloth deformable objects proceedings siggraph pp 

zachmann minimal hierarchical collision detection proceedings acm symposium virtual reality software technology vrst pp 

zhang yuen collision detection human animation proceedings pacific graphics pp 

