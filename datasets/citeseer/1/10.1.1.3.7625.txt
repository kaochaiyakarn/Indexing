partition approach constructing galois concept lattices valtchev missaoui pierre inria france epartement informatique succ 
centre ville montr eal qu ebec canada mail valtchev inrialpes fr info ca galois lattices formal concept analysis binary relations proved useful resolution problems theoretical practical interest 
studies practical applications data mining software engineering put emphasis need efficient flexible algorithms construct lattice 
presents novel approach lattice construction apposition binary relation fragments 
extend existing theory complete characterization global galois concept lattice substructure direct product lattices related fragments 
structural properties underlie procedure extracting global lattice direct product basis full scale lattice construction algorithm implementing divide conquer strategy 
provides complexity analysis algorithm results practical performance describes class binary relations algorithm outperforms efficient lattice constructing methods 
esum les treillis de galois analyse des concepts de relations ont leur dans la esolution de probl emes ordre th ou 
les applications les plus en de donn ees en ont mis en evidence le algorithmes pour la construction de treillis 
dans cet article nous pr une approche pour la construction de treillis qui sur apposition de fragments de relations 
nous compl la th eorie sous par la formulation une compl ete du treillis de galois concepts en tant que sous structure du direct des treillis aux fragments 
ce est utilis dans la une proc le treillis de galois global partir du direct qui le une strat compl ete de construction de treillis de type pour 
nous la complexit du algorithme des esultats ses performances 
article une de relations pour notre ethode se plus que le des algorithmes 
key words galois lattice formal concept analysis lattice constructing algorithms data fragments context apposition lattice products 
contents background formal concept analysis basics ordered structures 
fundamentals fca 
approaches construction galois concept lattices 
evolution requirements 
apposition contexts partial lattices apposition subposition contexts 
nested line diagrams 
linking apposition lattice partial lattices 
exploring apposition lattice computation 
characterizing global lattice structural properties 
constructing lattice main algorithm 
attribute lattice computation 
assembly partial lattices 
key operations 
auxiliary primitives 
complexity issues 
discussion research list figures sample context left corresponding galois concept lattice right 
borrowed 
partial lattices constructed vertical decomposition context 
nested line diagram lattice theta 
part product lattice theta left representing node product nodes denoted theta lower covers corresponding part global lattice right 
nodes linked images dashed lines 
lower covers ad correspond lower covers theta values maximal 
left cpu time diagrams algorithms bordat raynaud divide conquer 
right evolution object number 
list tables values selected subset theta see figures 
trace algorithm nodes product lattice 
trace algorithm generation global concepts example 
formal concept analysis fca branch lattice theory motivated need clear notions concept conceptual hierarchy 
main concern fca lattice structure induced binary relation pair sets called galois lattice concept lattice 
initially intended intuitive foundation lattice theory fca inspired number studies establishing links galois concept lattices known classes partially ordered structures 
strong theoretical foundations fca attracted interest practitioners various fields data mining knowledge acquisition software engineering 
today constantly growing number studies field theoretical practical issues 
concern development effective algorithms construction galois concept lattices realistic datasets large collections possibly volatile fragmented noisy data items 
analysis data requires design new generation lattice constructing algorithms combine computational efficiency robustness flexibility 
tackle problem assembling lattices corresponding fragments binary table problem arises various dataset updates 
purpose complete existing theory posteriori fragmentation binary tables due wille provide foundation efficient lattice assembly procedure 
procedure carries filtering direct product partial lattices retrieves concepts global lattice precedence links 
procedure extended full range lattice constructing algorithm implementing divide conquer strategy applied particular class binary relations proved efficient powerful lattice algorithms known date 
benefits assembly strategy lie far mere visualization cpu time gain 
aside better understanding semantics context lattice composition structural results constitute unified framework devising new lattice algorithms 
organized follows 
section gives background galois concept lattices nested line diagrams 
section recall definition apposition operation list important properties mappings concepts global lattice partial ones 
section presents basic structural results underlie algorithmic approach 
approach completely described section 
compare related previous studies section 
background formal concept analysis formal concept analysis fca discipline studies hierarchical structures induced binary relation pair sets 
structure closed subsets see ordered set theoretical inclusion satisfies properties complete lattice mentioned birkhoff see 
subject extensive study name galois lattice 
term concept lattice formal concept analysis due wille 
recall basic notions ordered structure theory widely presentation fca 
basics ordered structures hg partial order poset ground set binary relation reflexive antisymmetric transitive 
pair elements shall say succeeds greater inversely precedes excellent subject may 
said incomparable 
common successors predecessors called upper lower bounds 
precedence relation oe transitive reduction oe satisfy pair referred immediate predecessor immediate successor usually represented covering graph cov oe 
graph element connected set immediate predecessors immediate successors referred lower covers cov upper covers cov respectively 
shall visualize partial order hasse diagram line diagram covering graph element located successors 
subset chain anti chain elements mutually comparable incomparable subset order ideal order filter 
set set fc xj ag smallest order ideal containing dually fc xj cg denotes smallest order filter containing case singleton shall note fag fag 
order interval subset nodes obtained intersections order filter order ideal convex subset order subset includes pair members interval compose 
mapping oe posets oe said order preserving order relation elements entails order relation respective images oe oe oe furthermore oe said order embedding condition sufficient oe oe lattice hg partial order pair elements unique greatest lower bound glb unique upper bound lub 
glb lub define binary operators called respectively join meet 
complete lattice subsets ground set glb lub 
particular unique maximal top minimal bottom elements lattice 
elements single immediate predecessor successor called join irreducible meet irreducible set constitute denoted 
fundamentals fca fca considers binary relation incidence pair sets objects attributes 
attributes considered represent binary features possible values absent 
framework meaningful subsets objects attributes represent closed sets galois connection induced pair basic notions binary relation matrix incidence relation means object attribute 
called formal context simply context see example 
definition 
formal context triple sets objects attributes respectively incidence relation theta convenience reasons shall denote objects numbers attribute lower case letters 
furthermore simplify standard set notation dropping separators stand set objects set attributes fa fg 
set valued functions summarize links objects attributes established context 
sample context left corresponding galois concept lattice right 
borrowed 
definition 
function maps set objects set common attributes dual attribute sets ffl fa aj ffl fo oj example context acd 
follows brevity functions denoted furthermore combined pair composite operators ffi ffi map sets respectively denoted 
example image 
functions induce galois connection sets taken set inclusion partial order relation 
follows composite operators closure operators induces family closed subsets respective power set 
functions constitute bijective mappings families 
pair mutually corresponding subsets called formal concept 
definition 
formal concept pair example see pair acd concept objects share properties conversely attributes held objects 
fca framework referred concept extent concept intent 
follows concepts denoted letter auxiliary primitives intent extent refer intent extent respectively 
set concepts context ck partially ordered order induced intent extent set theoretic inclusion fact set inclusion induces complete lattice closed family lattices isomorphic dual isomorphisms 
lattices merged unique structure called galois lattice formal concept lattice context 
property 
partial order hc complete lattice lub glb follows ffl ffl 
shows concept lattice context 
example concepts abc join meet computed follows ffl abc ab ffl abc 
interest fca galois lattices theoretical viewpoint motivated remarkable property basically stating complete lattice isomorphic concept lattice formal context 
property 
lattice hg sets join irreducible meet irreducible elements respectively 
isomorphic concept lattice context kl theta 
known constructs partial order theory dedekind hull poset lattice maximal anti chains constructed concept lattices suitably chosen contexts 
approaches construction galois concept lattices variety algorithms may computing concept lattice binary table 
mainly divided groups procedures extract set concepts algorithms constructing entire lattice concepts lattice order 
detailed description algorithms scope focus efficient lattice algorithms known today 
efficient algorithm suggested bordat generates concept set hasse diagram lattice 
takes advantage structural properties precedence relation oe generate concepts increasing order 
concept algorithm generates upper covers concepts intents maximal closed subsets intent obvious drawback method concept generated times lower cover 
partial remedy problem concept lookup mechanism allows concept extent computed 
design flexible algorithms pioneered godin designed incremental method constructing concept lattices 
lattice constructed starting single object gradually incorporating new object arrival lattice context fo gamma time carrying necessary structural updates 
method avoids starting scratch time context extended new object attribute making maximal reuse available structure 
incremental paradigm known practical applications lattice theory introduced earlier algorithm norris basically incremental procedure stated 
raynaud suggested general approach computation closure structures showed construct galois concept lattices 
method proceeds steps concepts generated precedence links established 
concept generation incremental process similar described 
second step traversal concept set concept entire order filter computed 
concepts interested reader find comprehensive study partial scope help generated joins object extent 
upper cover detected considering number objects extent gamma extent 
property summarizes results property 
concept upper cover concept iff generated number times equal size set difference respective extents oe gamma extent intent intent noteworthy extensive studies practical performances cited algorithms provided somewhat dated 
studies high importance domain algorithms exponential worst case complexity due exponential number concepts just inefficient naive algorithm examines possible subsets attributes objects 
practical cases small number concepts occur sense study algorithm performs realistic datasets 
evolution requirements general observation current state fca algorithmics hand intended applications hand reveals big performance gap 
fact existing algorithms designed small binary tables objects attributes stored memory single computer 
current data software applications databases data warehouses typically give rise huge contexts require secondary storage may contain missing null invalid values distributed network 
databases constitute highly volatile contexts due frequent updates data 
increment adding single object time partial solution problem volatile data 
matter fact databases data warehouses updates object wise group wise meaning subset objects fo added time inserting may think extracting lattice corresponding construct 
challenging problem merging assembly lattices task generalizes conventional single object incrementation 
decomposition complex problems set smaller problems solving strategy area computer science 
fca field decomposition may carried various ways 
natural way doing consists splitting large context set smaller contexts share objects attributes 
example splits kind simulate batch wise updates data warehouse common attributes different objects integration viewpoints set individuals common objects different attributes distribution dataset network different objects different attributes 
sub contexts established respective lattices constructed merged unique global structure corresponding entire dataset 
partition context object attribute set formalized apposition subposition operations defined support visualization see section 
best knowledge detailed studies relevant algorithmic problems 
particular potential utility underlying framework lattice constructing purposes explored 
follows galois concept lattice assembly procedure contexts share set objects show way extend full scope lattice constructing method 
approach rooted fca theory related apposition subposition operators recall basics 
similar problems arise dataset process comes distributed database 
apposition contexts partial lattices classical order product operators lattices direct subdirect tensorial products fca provides set context oriented operators specific impact corresponding lattices 
focus apposition subposition operators initially intended support visualization large lattices 
apposition subposition contexts apposition horizontal concatenation contexts sharing set objects 
definition 
contexts set objects context called apposition jk usually intent set disjoint union denoted involved context intents constraint essential study 
example global context fa ig fa dg fe ig 
lattices corresponding referred partial lattices say 
intriguing properties relating lattice apposition context discussed paragraphs 
abcd abd acd abc ab ac ad ghi gh partial lattices constructed vertical decomposition context 
subposition vertical assembly contexts common attribute set dual apposition 
results dually valid subposition 
nested line diagrams nested line diagrams visualization aids allow lattice drawn substructure direct product pair partial lattices recall direct product pair lattices theta theta lattice theta hc theta theta ffl theta ck theta ck ffl theta nodes theta pairs concepts appears 
convenience reasons concrete concepts example identified index respective partial contexts definition generalizes easily arbitrary number lattices 
consider level nesting 
partial lattice unique number denoted ranging kck pair theta index partial lattice concept taken corresponds order 
pair denotes product concept concept acd concept 
nested line diagram basically represents product lattice theta combining respective line diagrams lattices unique complex structure 
nodes theta precedence links directly represented 
information spread various levels nesting 
presents product lattice theta theta seen line diagram lattice outer frame diagram embedded 
node product located finding node nested line diagram lattice theta outer diagram finding respective node local diagram 
example node see numbering product lattice located top inner lattice outer node labeled lattice represented isomorphic sub structure theta nodes belonging sub structure drawn distinguishable way diagram black opposed remaining void nodes drawn white 
reader may check isomorphism partial order induced black nodes referred full nodes lattice shown 
linking apposition lattice partial lattices concept projected concept lattice restricting intent set visible attributes 
combining functions mapping global lattice partial ones results order homomorphism direct product see 
definition 
function theta maps concept global lattice pair concepts partial lattices splitting intent partial context attribute sets example concept adf mapped concepts ad respectively 
mapping fundamental nesting framework set nodes representing theta exactly images concepts 
inverse mapping theta intersection concept extents 
homomorphism sends pair partial concepts product lattice global concept extent intersection extents 
definition 
function theta maps pair concepts partial contexts global concept intersection respective extents example image pair see concept 
set interesting properties mappings listed basic observation concept intent intersection concept intent attribute set see definition 
maps distinctive concepts distinctive product nodes 
property 
mapping injective 
proof 
sketch partial concept intents intersections global intents sets distinct concepts conditions holds ffl ffl images diverge product dimensions 
compatible order theta property 
mapping order embedding theta 
theta proof 
sketch preserves order concepts intersection intents monotonic respect mapping injective order embedding theta permutes join operator function preserves lattice joins 
property 
mapping join preserving theta proof 
sketch observe joins concept lattice involve intersection intents argument concepts just involves intersection partial attribute sets 
furthermore join product simply product point wise joins 
associative property intersection entails equality 
properties practical implications jointly enable easy recovery apposition lattice structure partial lattices 
example injection allows concepts apposition lattice identified pairs concepts partial lattices 
similarly properties state global lattice isomorphic image theta image proper sub lattice theta similar properties established mapping 
result preserves order product lattice 
property 
mapping order preserving theta theta proof 
sketch trivially follows definition lattice order inclusion extents definition mapping extent intersection 
sets gamma antecedents global concept convex subsets theta property 
classes kernel relation induced convex subsets theta gamma theta theta theta proof 
sketch fact extent intersection monotonic respect order theta see definition function section 
exploring apposition lattice computation apposition subposition operations intended ease visualization concept lattices straightforward computational interpretation 
related algorithmic problem detection full nodes images global concepts 
knowledge efficient algorithm designed solve problem 
claim apposition subposition oriented visualization may underlie constructing global lattice partial ones 
purpose nodes links global lattice may suitably recovered product lattice 
appropriate procedure necessary tasks ffl identification global concepts respective images ffl computation intent extent global concept ffl computation cover relation set lower covers concept 
new setting directly applied product lattice supposed known 
new structural results required enable computation looking theta global view data 
characterizing global lattice section provide theoretical results useful structural properties help obtain efficient algorithmic solutions listed problems 
structural properties group problems tackle concerns constructing components global lattice lattices equivalently lattice theta purpose identify subset ground concept set theta reflects structure recall function maps lattice isomorphic sub structure theta concern provide characteristic properties sub structure 
shall see elements compare theta order establish order localizing aim find necessary sufficient condition element theta image concept suppose case 
recall definition 
claim turn image 
fact applied structure function gives see definition section 
example ad respective partial concepts ad node node respectively 
product node 
observe extent concept objects simultaneously attributes see example 
basically means extent exactly set objects having consequently concept may simplified exactly inverse mapping retrieves extent image concept identifies initial concept summary concept image nodes mapped property 
gamma 
step find characterization gamma theta property set 
observe gamma intermediate structure help limit search particular element small portion global lattice theta characterization gamma characterization gamma follows trivial observation node theta mapped concept extent exactly intersection extents say concept pairs gamma distinguished intersection respective extents defines set valued function definition 
function theta values subset product elements listed table 
node value node value table values selected subset theta see figures 
characterization elements lattice theta may divided classes sharing value classes correspond equivalence classes induced theta ker provides locally computable characterization gamma 
example class including nodes share value investigated nodes theta minimal class 
formally image concept minimal respect product lattice order theta result expressed property 
property 
theta min fng 
proof 

prove property observe smallest concept incorporates extent concept concept 
example node minimal respect product order class minimal class nodes evaluated computing concept intent extent property identifies nodes minimum class theta extents concept computed intersection extents intent may computed locally looking data table union intents 
property 
pair partial concepts global concept proof 
observe minimal closure 
equals union characterizations lower covers node step lattice computation deals order nodes 
usually manipulated terms cover relation oe pairs computed 
observe oe strictly correspond cover relation theta oe theta broader order theta straightforward computation oe require exploration entire theta expensive task 
characterization oe uses information oe theta detects set lower covers concept denoted cov looking lower covers image theta recall embedding property theta 
consider node fng min 
looking nodes properties ng min oe 
consider fixed previous equal shall prove node lower cover image oe theta 
fact lower covers cov element value definition 
furthermore greater equal embedding property image greater equal 
similarly image image 
know preceded conclude equal 
words pairs oe pair oe theta example take node value 
image ab preceded 
mapped 
node predecessor product lattice lower cover example node 
lower cover value 
example node 
unfortunately set lower covers node necessarily limited nodes images predecessors may nodes cov images lower covers 
nodes look values maximal cov 
property 
lower covers cov oe max fr cov providing general proof show detailed example computation lower covers concept ad 
relevant parts lattices theta drawn 
concepts global lattice linked images 
concept image acd adf ad part product lattice theta left representing node product nodes denoted theta lower covers corresponding part global lattice right 
nodes linked images dashed lines 
lower covers ad correspond lower covers theta values maximal 
node lower covers 
respective values listed left part table 
maximal values set lower covers max fr cov 
values correspond extents concepts adf acd constitute exactly set lower covers concept cov global lattice 
theorem 
pair concept lattices contexts lattice context jk satisfies ffl min gamma ffl ffl cov max jn cov constructing lattice results previous section transformed algorithmic procedure physically constructs global lattice partial lattices 
turn extended lattice constructing algorithm integrating divide conquer procedure 
follows procedures results asymptotic complexity 
main algorithm main procedure construct lattice see algorithm constructs galois lattice starting initial context 
recursive base case single attribute context see paragraph description construct lattice 
larger contexts split parts selecting subset attributes function select 
main procedure recursively called subcontext retrieving pair partial lattices 
global lattice obtained assembly partial ones see section description assembly 
procedure construct lattice context hc lattice kak select theta theta construct lattice construct lattice assembly construct lattice return algorithm constructing galois lattice divide conquer strategy 
important note function select may implemented various ways ranging straightforward equal size splitting advanced calculation balanced sub contexts 
function may strong impact practical performance algorithm sizes partial lattices depend 
dwell point relates complex combinatorial problems subject separate going study 
attribute lattice computation base case lattice computation occurs single column context reached 
small attribute set say fag lattice may concepts 
possible intents fag corresponding respectively lattice infimum supremum 
addition case lattice single concept occurs shared objects case concept remains 
procedure construct lattice fag context hc lattice ig new concept fag fcg new concept new link cg return algorithm constructing galois lattice single attribute context 
step procedure construct lattice see algorithm separates extent lattice infimum objects having constructs concept 
creates distinct supremum needed proper subset share attribute 
assembly partial lattices fundamental operation lattice constructing algorithm assembly partial lattices drawn complementary fragments context 
principles algorithm main step algorithm traversal product lattice 
traversal bottom way linear extension lattice order 
linear extension result sorting task partial concept sets 
pair concepts intersection extents computed checked minimality 
pairs minimal values generate new concept intent extent computed results section 
concept lower covers detected global concepts generated bottom traversal 
main data structures auxiliary primitives concept lattices stored lists concepts concept record fields intent extent list lower covers accessible dedicated primitives extent intent 
auxiliary field indicates rank concept sorted list primitive rank 
mapping simulated embed dimensional array concepts indices concept ranks partial lattices 
embed simulates function extents stored concepts 
structure related primitives algorithm uses generate lower covers theta product node 
group primitives carry maintenance tasks physical representation lattices new concept new link 
procedure assembly hc hc lattices hc lattice local embed array max max concepts sort sort linear extension extent extent rank rank find psi null new concept intent intent update order fcg embed rank rank return algorithm assembling global galois lattice pair partial ones 
algorithm code convenience major tasks algorithm separated distinct procedures provided description 
pre processing step sorts sets concepts ck ck linear extension respective lattice orders see section code sort 
main step nested loop simulates traversal product lattice 
product node extent intersection compound concepts stored test minimality 
test requires set values lower covers current node retrieved 
computed extents respective images retrieved embed 
images stored passed parameter find psi function finds image current node exists non generator node 
case processing required 
null result find psi meaning value unknown new concept created lower covers singled candidates 
cases array embed updated 
example table provides illustration way construction global lattice proceeds 
contains trace examination nodes taken order nested loop algorithm 
node value 
generator nodes nodes generate concept generated concept indicated remaining nodes lower cover shares minimality test fail indicated 
example node value minimal 
generates global concept 
node mapped lower cover possesses value generates global concept 
node generated lower cover concept table trace algorithm nodes product lattice 
integration newly created concept update order function find psi described section 
key operations provide detailed description main operations concepts intents extents links algorithm 
essential effective implementation strategy assessment algorithmic complexity 
updating order integration new concept partially constructed lattice structure list concepts involves computation lower covers physical creation corresponding links 
step process described algorithm 
candidate concepts sorted recall images nodes product lattice immediately precede generator 
sort done increasing order intent sizes sort procedure update order concept candidates set concepts modifies cov local set attributes sort candidates linear extension inverse lg intent candidates intent intent new link intent algorithm update current part global lattice new concept 
primitive described 
concepts examined time testing maximality condition met 
condition inspired bordat algorithm ensures minimal number set theoretic operations 
cover relation lattice updated lower cover detection algorithm concept completely integrated lattice structure 
full nodes potential covers cover values actual covers nodes table trace algorithm generation global concepts example 
illustration way algorithm works provide trace execution product nodes generate global concepts 
related values function nodes lower covers theta table 
table provides global concepts actual lower covers generated concept respective values helped generate 
test new extents computation detection minima classes induced efficiently carried comparing set cardinalities comparing sets 
fact shown section mapping monotonic function monotonic 
means node value superset value arbitrary lower cover say 
node satisfies condition property superset condition strict ae lower cover equivalent condition holds set cardinalities size strictly greater size 
consequently property node minimal class checked comparing set cardinalities minimal kr different cardinality lower cover 
function find psi set objects candidates set concepts concept kek candidates return return null algorithm efficient lookup newly met extents 
test procedure described algorithm 
noteworthy second parameter set global concepts represent images lower covers current node 
parameter compared extents 
auxiliary primitives follows efficient algorithms auxiliary primitives previous procedures suggested 
concept sort traversal concept set necessarily equal entire ck respect lattice order achieved preliminary sorting sorting procedure typically produces linear extension extension easily somewhat inefficiently computed checking inclusions concept intents extents 
efficient version sorting just minimality check product nodes described compares intent cardinalities intents 
done linear time algorithm shows 
required operations split slices equal intent cardinalities subsequent enumeration groups descending order 
array indexed intent cardinality store slices slice sorting unnecessary 
procedure takes time linear number concepts 
lower covers node product lattice function computes lower covers node explicitly described 
fact adds limited computational overhead relies exclusively information stored concepts computation 
fact lower covers product lattice exactly nodes form arbitrary lower cover concept lattice arbitrary lower cover procedure sort fc local bunches array kak sets order list concepts order bunches bunches fc kak bunches order hci order fc head order algorithm linear time sorting concept set complexity issues number concepts partial lattices respectively number concepts total number attributes number objects 
complexity assessment shall parameter branching factor maximal number lower covers node lattice notations summarized table 
variable stands number concepts number concepts kak kok maximal number lower covers node step consider cost assembly operation assembly 
cost recursive calls global procedure provided section 
consider basic facts 
number lower covers concept lattice equal number attributes number lower covers theta theta bounded sum 
total order assumed object attribute sets collections may canonically represented sorted lists integers ranks respective order 
allows set theoretic operations executed time linear size manipulated sets 
auxiliary primitives sort procedure linear number arguments klk minimality check intent intersections find psi linear number lower covers product update precedence relation update order time complexity product number potential lower covers check cost check linear 
complexity basic operations table 
primitive asymptotic complexity sort find psi update order fact comparisons carried cardinalities integer numbers take constant time 
furthermore cardinalities concept intent extent need computed concept creation 
point assumed 
cost assembly algorithm heavily relies complexity dominant part nested loop 
divided major parts related fixed part loop second concerns statement 
part executed node product times 
dominant complexity comes extent intersection linear computation linear candidate lower cover number minimality test find psi extent intersection linear actual lower cover number 
exceed cost entire fixed part part loop body executes product nodes generating global concepts klk times 
core complexity comes update order procedure cost ml simplifies lm summary total complexity algorithm partial lattice constructing amounts lm bounded lm discussion generally admitted worst case complexity main lattice constructing algorithms exception algorithm complexity known lm 
comparing lattice constructing algorithms respect asymptotic complexity delicate task 
hand may exponentially concepts fact algorithm inefficient 
fortunately contexts contain time polynomial number concepts 
hand way correctly evaluating complexity algorithms respect input size lattice hard predict parameters binary table previous studies practical performance known algorithms shown clear best algorithm 
relative performance different methods vary nature data key factor density measuring relative number table kik kok kak example incremental algorithm godin known perform fast sparse contexts lag competing methods dense ones 
apparent explanation fact algorithm relies strongly number concepts usually grows fast additional difficulty practically comparing algorithms size output previous studies considered small size contexts objects 
summary situating algorithm family existing methods absolute way hard 
means particular transforming complexity formula canonic form getting rid question compares lm amounts estimating size lattice claim large contexts tractable produce lattices show linear growth concept set respect object number 
contexts lm regardless way attribute set split 
contexts global complexity divide conquer strategy may estimated lm log problem estimating number concepts context parameters proved hard 
nature dataset refer defined notion set data parameters influence understood 
course obvious cases orders magnitude greater lm 
log factor reflects depth binary tree results recursive splitting contexts 
deeper insight divide conquer strategy provided set simulation runs 
tests include classes contexts involving linear number concepts 
generated random procedure 
generation uses uniform probability distribution low density factor simulates contexts software engineering applications 
second simulates contexts derived tables relational databases typically contain numerical categorical data 
table set properties translated binary relation scaling property set boolean attributes resulting context particular form row database table property object models row context attributes initial extents scaled attributes pair wise disjoint ap fa 
tests carried db att 
cpu time sec 
raynaud bordat divide conquer attr db attr random attr db attr random attr db attr random left cpu time diagrams algorithms bordat raynaud divide conquer 
right evolution object number 
ibm pc platform pentium iii mb ram windows 
left shows time algorithms bordat raynaud algorithm dataset 
results obtained database contexts varying number objects increment 
point curve gives average different runs 
may seen left part divide conquer algorithm outperforms rest time growth close linear number objects 
jumping perfect algorithm contexts small number concepts exaggeration results randomly generated contexts included sake conciseness confirm 
possible intuition divide conquer approach works better database contexts include second diagram showing evolution ratio datasets see right 
random sparse data ratio grows slowly tends stabilize relatively high level database contexts show growth 
conclude plausible explanation results lie strong inner structure database contexts 
structure successfully splitting divide conquer approach perform algorithms simply fail take advantage 
respective entry table null object exactly attributes 
research approach lattice assembly theoretical foundations 
underlies divide conquer approach constructing galois concept lattices worst case complexity practical performances reported 
important result complete characterization global galois concept lattice substructure direct product lattices related partial contexts 
helps establish clear links partial global lattices enables efficient lattice assembly 
contribution lies novel way constructing lattices fragments may prove useful data comes different sources process constructing data warehouse mining knowledge set databases 
possibility combining partial results single global allows set new lattice constructing algorithms devised particular algorithms implementing hybrid batch incremental strategies 
large set intriguing questions answered goes 
short term potential improvements practical performance algorithm examined 
set open issues currently focusing effects optimal splits contexts splits keep size partial lattices minimal 
research avenue follows removal objects attributes lattice inverse incrementality goes challenging issue global lattice discover meaningful viewpoints splits corresponding context respective partial lattices 
general way progress split product operations expected provide basis better mastering complex constructs sub direct tensorial products concept lattices 
acknowledgments supported part inria post doctoral fellowship natural sciences engineering research council canada nserc 
authors anonymous referees valuable comments suggestions 
go robert godin guy tremblay fruitful discussions helped improve results timothy walsh valuable language assistance 

ordre classification alg 

birkhoff 
lattice theory volume 
american mathematical society colloquium publ providence revised edition 

bordat 
calcul du treillis de galois une correspondance 
math ematiques sciences 
chein 
algorithme de recherche des sous matrices eres une matrice 
bull 
math 
de la soc 
sci 
de la de 
davey priestley 
lattices order 
cambridge university press 
ganter 
basic algorithms concept analysis 
preprint technische hochschule darmstadt 
ganter wille 
formal concept analysis mathematical foundations 
springer verlag 
godin mili mineau missaoui chau 
design class hierarchies concept galois lattices 
theory application object systems 
godin missaoui 
incremental concept formation algorithms galois concept lattices 
computational intelligence 
gu 
construction du treillis de galois une relation 
math ematiques sciences 

jourdan 

computing line lattice maximal antichains posets 
order december 
kent 
automatic 
intel survey intel 

counting decision problems formal concept analysis 
preprint math technische universitat dresden september 

algorithms construction set concept line diagram 
preprint math technische universitat dresden june 
mineau godin 
automatic structuring knowledge bases conceptual clustering 
ieee transactions knowledge data engineering 
norris 
algorithm computing maximal rectangles binary relation 
revue de math ematiques appliqu ees 
raynaud 
fast algorithm building lattices 
information processing letters 
pasquier bastide taouil lakhal 
efficient mining association rules closed itemset lattices 
information systems 
snelting tip 
reengineering class hierarchies concept analysis 
proceedings acm sigplan sigsoft symposium foundations software engineering pages orlando fl 
valtchev 
algorithm minimal insertion type lattice 
computational intelligence 
wille 
restructuring lattice theory approach hierarchies concepts 
rival editor ordered sets pages dordrecht boston 
reidel 
wille 
decomposition concept lattices 
order 
wille 
subdirect product construction concept lattices 
discrete mathematics 
wille 
lattices data analysis draw computer 
pages 
kluwer 
zaki 
ho 
scalable algorithms association mining 
ieee transactions knowledge data engineering may june 

