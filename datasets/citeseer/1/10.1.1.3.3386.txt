compressed su trees full functionality department computer science communication engineering kyushu university ku fukuoka japan kyushu ac jp introduce new data structures compressed su trees size linear text size 
size measured bits occupy log bits text length alphabet remarkable improvement current su trees require log bits 
components su trees compressed linear size data structure su trees full functionality computing su links string depths lowest common ancestors 
data structure proposed linear size supports operations ciently 
algorithm running su tree executed compressed su trees slight slowdown factor polylog 
su trees basic data structures string algorithms 
pattern time proportional pattern length text constructing su tree text advance 
su tree complicated problems example finding longest repeated substring linear time 
cient string algorithms su trees increase asymptotic time complexity 
su tree string constructed linear time string length 
natural su tree 
concerning space complexity su tree worse string 
alphabet string length su tree represented number pointers string 
need lg bits encode pointer su tree occupies lg bits 
hand string occupies lg bits 
alphabet size usually smaller example genome sequence human giga 
space cient implementation su tree gigabytes size string megabytes 
lg denote log better represent su tree size proportional string size lg bits 
consider computation model 
assume word size lg bits standard arithmetic bitwise boolean operations word sized operands performed constant time 
memory cells lg bits read written constant time 
pointers lg bits su tree represented cells constructed time 
measure space complexity number cells number bits 
current su trees occupy lg bits 
practical computers memory size measured words bytes 
example bit computer handle words bytes 
bit computer word consists bytes 
assume byte consists constant number bits 
general lg bit computer bytes lg words 
construct su trees strings length lg 
hand store string length lg character occupies lg bits 
aim construct su trees size linear string lg bits 
important theoretically practically 
propose lg bit data structures su trees full functionality current su trees 
data structures su trees proposed missed su link internal node depth internal node lowest common ancestor lca nodes 
su link necessary su tree automaton recognizing substrings text compute longest common substring strings matching statistics node depth necessary implicitly enumerate maximal repeated substrings text linear time text data mining 
lca necessary compute longest common extension su xes constant time approximate string matching problems 
elements frequently solve problems 
propose linear size data structures 
data structures size csa bits csa denotes size compressed su array text linear 
time complexity data structures support cient operations su trees 
operation su tree supported slowdown factor polylog time complexity 
rest organized follows 
section reviews su trees section describes space cient data structures compressed su trees 
section proposes new compact data structures storing longest common prefix information range queries 
section states main results new data structures compressed su trees 
section shows concluding remarks 
su trees section review su trees 
text length alphabet assume unique terminator alphabetically precedes symbols 
th su defined 
expressed substring su tree balanced parentheses representation 
su links shown dotted line 
called prefix definitions su tree text compressed trie built su xes leaves corresponds su label labeled string called edge label 
concatenation labels path root node called path label node 
path label leaf coincides su internal node children sorted alphabetic order characters edge labels 
leaves sorted lexicographic order su xes 
store indices su xes order integer array sa 
called su array 
shows su tree text 
leaf nodes shown boxes numbers boxes represent elements su array 
internal nodes shown circles numbers represent inorder ranks defined 
string depth node length string represented node node depth node number nodes path root node node including excluding root node 
su links defined internal nodes root node su tree follows 
definition su link sl internal node path label denotes single character denotes possibly empty substring node path label 
su links necessary construct su tree linear time solve problems ciently example finding longest common substring strings linear time 
consider operations su trees denote nodes su tree denotes character definition su tree text supports operations 
root returns root node 

returns leaf 

child returns node child edge begins character returns child 

sibling returns sibling node 
parent returns parent node 
edge returns th character edge label edge pointing 
depth returns string depth node 
lca returns lowest common ancestor nodes 
sl returns node pointed su link data structures su tree decomposed components text tree topology node depths edge labels su links 
basic representation 
text string encoded lg bits 
tree topology represents parent child relationships nodes consists pointers occupies lg bits 
node depths store string depth internal node lg bits 
edge label internal nodes represented pointer text lg bits 
note length edge computed node depths endpoints edge 
edge label internal node leaf represented su array occupies lg bits 
su links pointers internal nodes represented lg bits 
succinct data structures section review succinct data structures compressed su trees 
compressed su arrays compressed su arrays proposed grossi vitter data structures reduce size su arrays lg bits lg bits cost increasing access time constant time lg time constant 
table size query time compressed su arrays 
size bits sa lg lg nh lg lg lg polylog nh lg lg lg lg lg lg lg theorem variations compressed su array proposed 
ferragina manzini proposed fm index kind compressed su array size nh lg lg lg lg bits order entropy text 
holds integer 
proposed algorithm search pattern length lg time text call self indexing data structure 
ferragina manzini proposed type compressed su array nh lg bits supports occ time enumerating query occ number occurrences pattern 
modified original compressed su array acts data structure 
reduced size lg bits lg bits 
grossi reduced size nh bits lg 
pattern lg polylog time 
compressed su trees compressed su arrays support operations definition compressed su array text data structure supporting operations lookup returns sa time sa inverse returns sa defined sa time sa returns sa sa time substring returns sa sa time 
function compressed su array defined follows definition sa sa sa sa table summarizes variations compressed su arrays 
include fm index 
character text extracted constant time substring lexicographic order su 
furthermore know lexicographic order compute inverse 
need store text explicitly 
function basically operations definition 
remove definition compressed su array 
compressed su trees compute su link constant time 
function computed lookup inverse definition done constant time 
balanced parentheses representations trees balanced parentheses encoding tree :10.1.1.37.6762
node rooted ordered tree encoded bits various constant time navigational operations 
tree encoded nested open close parentheses follows 
preorder traversal tree write open parenthesis node visited traverse subtrees node write close parenthesis 
example shown 
node tree represented pair open close parentheses 
compute position close parenthesis open parenthesis constant time see represent node position open parenthesis sequence 
nodes su tree text length exactly leaves internal nodes su tree text encoded bits 
navigational operations tree defined rank select enclose function rank returns number occurrences pattern position example 
function select returns position th occurrence pattern function returns position close parenthesis matches open parenthesis position sequence parentheses 
function enclose finds closest enclosing matching parenthesis pair parenthesis pair open parenthesis position corresponds compute parent node 
functions take constant time 
functions perform various operations tree 
important compressed su trees returns number leaves left node preorder leftmost returns leftmost leaf subtree rooted node rightmost returns rightmost leaf subtree rooted node computed constant time 
proposed compressed su tree su array parentheses encoding pat tree lg bits 
compressed su tree similar support depth lca sl 
simulating su tree traversal su array height array showed bottom traversal su tree simulated su array array storing set lengths longest common prefixes su xes called hgt array 
array hgt defined follows 
definition hgt lcp sa sa hgt array stores lengths longest common prefixes adjacent su xes su array bottom traversal su tree 
problems solved bottom traversal tree 
related space cient su trees proposed size linear constant size alphabet focused finding number occurrences positions pattern 
store su links node depths 
full functionality su trees 
node depths clark munro lg lg lg bits field store length edge storing depth corresponding node size linear 
method answer depth node quickly 
munro proposed algorithm searching patterns storing edge lengths 
algorithm calculates online needed 
algorithm time complexity find pattern algorithm requires edge lengths may suitable traversing nodes su tree 
case algorithm takes time sum edge lengths su tree 
new data structures lcp information section propose space cient data structures storing lcp longest common prefix information su xes 
show data structure represent hgt array encode string depths su tree 
show data structure range minimum query compute lowest common ancestors su tree 
propose succinct representations hgt array 
values hgt array text usually small may reach 
necessary array integers lg bits width fixed width integers 
ciently store values properties hgt array ciently extracted information su array theorem sa value hgt computed constant time data structure size bits 
proof see section 
theorem store data structures simulate order bottom traversal su tree sa bits sa size su array compressed su array 
time complexity traversal sa sa time compute element su array time su array lg time compressed su array 
result extended compute lcp arbitrary su xes theorem length longest common prefix su xes sa sa computed sa time data structure size sa bits 
proof see section 
data structures hgt array show data structure theorem 
achieve space complexity space cient data structure storing sorted integers select function compressed su array 
lemma integers sorted order containing bits store lg lg lg bits retrieving th integer takes constant time 
encode hgt array data structure directly numbers sorted 
convert sorted ones lemma 
lemma hgt hgt proof sa sa hgt lcp 
hgt inequality holds hgt 
consider su xes definition sa sa 
su lexicographically larger su definition lexicographic order 

integer exists 
su sa prefix length matches prefixes definition lexicographic order 
completes proof 
note lemma identical 
lemma relation sa hgt hgt hgt hgt equality comes fact sa hgt value su unique terminator 
sequence sorted numbers hgt 
range stored bits accessed constant time 
obtain hgt remaining task compute easily done follows 
definition sa sa sa sa sa sa 
shows example creating sorted sequence numbers 
row shows sa hgt 
summation second third rows 
sort numbers order sa values obtain sorted sequence 
encoded sequence length bits 
blanks sequence explanation 
uniquely decode numbers sequence 
algorithm calculate hgt follows hgt sa sa hgt create sorted sequence hgt 

extract th entry sorted numbers sa 
subtract problem encodings hgt array value hgt stored bit vector order sa 
access random retrieve su array lexicographically 
problem sa necessary compute hgt 
compressed su array retrieving sa takes sa time 
computing lcp arbitrary su xes describe data structure theorem 
consists components store hgt array theorem perform range minimum query hgt array 
occupies bits bits 
su xes lexicographically sorted su array computing lcp su xes sa sa equivalent computing minimum hgt hgt 
hgt 
hgt minimum value 
minimum values choose arbitrary 
compute minimum value algorithm computing lca nodes property proposition node lca leaf leaf su tree index defined 
lca leaf leaf string depth hgt 
proof construction su tree node lca leaf leaf string depth lcp sa sa hgt 
node string depth hgt 
sa locates lexicographically sa sa su xes common prefix length hgt nodes represent string 
means compute node secondly compute index compute hgt data structure section 
define range minimum query problem problem range minimum query indices array range minimum query returns index smallest element subarray 
tie breaking choose leftmost 
algorithm bender farach colton reduces problem computing lca range minimum query follows 
traverse nodes tree case su tree depth manner store node depths array node depth node number nodes path root node usually di erent string depth 
example shown 
store position node tree corresponds visit node depth traversal 
lca nodes represented minimum value subarray boundaries subarray correspond nodes 
original algorithm store integer array size node tree 
occupies lg bits 
store positions representing nodes integer array occupies lg bits 
hand store information bits follows 
di erence adjacent elements encode di erences sequence open close parentheses see 
parentheses sequence exactly encoding tree 
tree encoded nested open close parentheses follows 
pre order traversal tree write open parenthesis node visited traverse subtrees node write close parenthesis 
compute elements constant time explicitly store lg elements lg elements store di erence nearest explicitly stored element 
occupies lg lg bits occupies lg lg lg bits 
need compute position corresponding leaf tree 
lemma position pair parentheses represents leaf computed select 
proof occurrence corresponds leaf tree leaves appear lexicographic order su xes lemma holds 
data structure select function occupies bits addition parentheses sequence total size bits 
run algorithm range minimum query compute index result range minimum query computing lca leaf leaf 
lemma positions represent leaves sa sa respectively 
index hgt attains minimum value hgt hgt 
hgt computed rank 
proof returns position close parenthesis parentheses sequence corresponding node lca leaf leaf 
node equal lca leaf leaf 
represents depth traversal tree especially lexicographic order leaves leaves leaf 
appear left leaves appear right equal number leaves encoded left rank 
algorithm compute lcp sa sa 

compute select select 

compute rank 

compute hgt 
data structures range minimum query data structure bender farach colton range minimum query occupies words words lg bits 
propose modified data structure occupies bits 
original algorithm compute index minimum value subarray constant time precomputed tables size bits 
divide array blocks size lg define array 
lg stores minimum value th block 
compute compute indices blocks containing minimum value equal minimum 
minimum element block 
minimum 
minimum element block minimum value index third ones computed constant time tables size bits 
second construct dimensional table 

lg 
lg stores index minimum value 
index minimum value computed constant time min lg 
table size bits compute lg constant time 
data structure occupies words size lg lg algorithm divide array blocks size lg array occupies lg lg lg lg bits 
compute minimum element th block 
lg divide block subblocks size lg create dimensional table 
lg 
lg lg block 
tables occupy lg lg lg lg lg bits total 
table subblocks length lg occupies bits 
data structure position minimum value 
computed constant time 
new compressed su trees section show algorithms navigating compressed su trees small alphabets data structures proposed section 
notation follows 
nodes su trees represented integers pointers corresponding nodes denoted nodes represented ranks preorder inorder ranks denoted main result stated follows theorem compressed su tree text length supporting operations child min lg sa time depth edge sa time sl time operations constant time represented csa bits csa denotes size compressed su array 
proof time complexity please refer sections 
concerning space complexity compressed su array compressed representation hgt array bits parentheses encoding su tree bits 
table size query time compressed su trees size bits child depth edge sl csa min lg sa sa nh lg lg lg min lg lg lg lg lg lg lg lg lg lg lg represent node shown munro raman node tree represented pair parentheses 
nested parentheses sequence 
represent node su tree integer position open representing node parentheses sequence perform operations su tree need represent node preorder inorder 
show convert values 
parentheses sequence produced preorder traversal tree 
preorder node position easily converted constant time rank select 
need inorder internal node 
give definition 
definition inorder rank internal node defined number visited internal nodes including alphabetic depth traversal visited child child visited 
note internal nodes inorder ranks internal node may ranks children 
shows example inorder ranks 
number circle represents rank internal node 
root node inorder ranks 
lemma gives algorithm compute inorder internal node 
lemma internal node inorder node 
converted constant time rank parent select proof internal node represents position open parenthesis representing leftmost child position corresponding close parenthesis subtree rooted expressed balanced parentheses sequence 
internal node children inorder rank defined number leaves smaller preorder ranks calculated rank 
definition inorder inorder node number times preorder traversal root climb edge immediately go edge 
movement represented parentheses sequence 
compute position select 
open parenthesis position represents child node want know parenthesis corresponds compute parent returns position open parenthesis note node algorithm returns smallest parent operation described section 
balanced parentheses representations example su tree shown bottom 
internal node represented open parenthesis followed open parenthesis arranged order preorder rank 
inorder rank number position indicated arrow open parenthesis 
associate information nodes associate additional information nodes su tree 
necessary su tree tool solve problem 
assign consecutive numbers nodes 
number internal nodes su tree leaves 
want store information node store array preorder nodes indices array 
preorders values mapping preorders 
want store information internal nodes inorder nodes indices 
node smallest 
values 
method slightly redundant 
order internal nodes 
internal node 
index computed rank rank preorder assigned internal nodes 
want store information leaves lexicographic orders nodes indices 
obviously exists mapping leaf representing su lexicographic order su represent edge labels string depth internal node edge label nodes parent represented follows 
inorder inorder node su xes sa sa share prefix length hgt 
string depth equal hgt 
edge label nodes parent represented sa sa inorder hgt inorder parent hgt 
edge sa computed sa time 
recall label represented text extracted sa time 
navigating su tree finding root node root node easily preorder represented open parenthesis root 
node su tree leaf parentheses representation 
computed constant time 
finding child node sibling finding sibling node necessary traverse nodes 
cient query normally store node pointers child sibling represented parentheses sequence 
compute sibling constant time sibling 
finding child necessary pattern queries 
construction parentheses sequence child computed 
iteratively compute sibling 
step recover character edge label compare sa time 
time operation child sa 
binary search compressed su array find child 
find leftmost rightmost descendants constant time 
range su array corresponding calculated constant time 
string represented node find sub range corresponding pattern concatenation simple binary search lg sa time 
sub range find child constant time lca operation described 
sum child min lg sa time 
finding parent node su tree finding parent node just compute enclose 
takes constant time 
compute lca show algorithm compute lca nodes represented parentheses sequence constant time 
lemma lowest common ancestor nodes compressed su tree computed constant time auxiliary data structure size bits 
proof positions parentheses sequence representing nodes respectively 
easily check ancestor vice versa 
assume ancestor 
case return lca assume ancestor vice versa 
position open parenthesis representing node lca computed constant time parent sequence integers rank rank 
note need store explicitly 
element computed constant time bits indices 
range minimum query returns index minimum element 
hold minimality 
open parenthesis child lca 
position open parenthesis node lca computed parent 
compute su links lemma position parentheses sequence representing nonroot node position open parenthesis representing node sl computed time rank rank lca select select 
proof algorithm computes leftmost rightmost leaves descendants leftmost leaf descendant leaf appearing parentheses sequence lexicographic index leftmost leaf computed rank 
concerning index rightmost leaf leaves encoded parentheses sequence open close parentheses representing lexicographic order rightmost leaf computed rank 
leaves represent su xes sa sa definition leaf leaf represent su xes sa sa sa sa respectively 
lcp sa sa 
equal string depth node leaf leaf leftmost rightmost descendants obviously lcp sa sa holds 
node lca select select string depth means sl 
variations compressed su trees apply compressed su arrays compressed su trees 
show examples 
space cient 
corollary compressed su tree supporting operations child min lg lg lg lg time edge depth lg lg lg time sl lg time operations constant time represented nh lg lg lg bits lg 
proof follows theorem grossi theorem 
time cient 
corollary compressed su tree supporting operations child edge depth lg time operations constant time represented lg bits proof compressed su tree grossi vitter theorem 
uses patricia trie perfect hash functions find child node 
space complexity lg 
pattern length compute lexicographic order su prefix pattern lg lg lg time 
data structure operation child takes lg time 
space complexity change asymptotically 
concluding remarks proposed linear size data structures compressed su trees support cient string depth lowest common ancestor su link queries 
size data structure bits larger compressed su array 
unit operation ordinary su tree performed polylog time 
implement compressed su tree nh bits may smaller text consisting lg bits 
solved problem necessary space su trees 
important mention complexity working space construct compressed su tree 
algorithms constructing compressed su arrays trees linear working space 
compressed su trees constructed linear working space 
open question reduce linear term 
acknowledgments author roberto grossi jesper jansson wing kin sung valuable comments 
supported part aid ministry education science sports culture japan 
beame 
optimal bounds predecessor problem 
proc 
acm stoc pages 
bender farach colton 
lca problem revisited 
proceedings latin lncs pages 
clark munro 
cient su trees secondary storage 
proceedings th annual acm siam symposium discrete algorithms pages 
elias 
cient storage retrieval content address static files 
journal acm 
farach 
optimal su tree construction large alphabets 
th ieee symp 
foundations computer science pages 
ferragina manzini 
opportunistic data structures applications 
st ieee symp 
foundations computer science pages 
ferragina manzini 
experimental study opportunistic index 
proc 
acm siam soda pages 
ferragina manzini 
compressing indexing data 
technical report tr dipartimento di informatica universita di pisa 
gonnet baeza yates snider 
new indices text pat trees pat arrays 
frakes baeza yates editors information retrieval algorithms data structures chapter pages 
prenticehall 
grossi gupta vitter 
higher order entropy analysis compressed su arrays 
dimacs workshop data compression networks applications pages march 
grossi vitter 
compressed su arrays su trees applications text indexing string matching 
nd acm symposium theory computing pages 
grossi vitter 
compressed su arrays su trees applications text indexing string matching 
submitted publication 
gusfield 
algorithms strings trees sequences 
cambridge university press 
hagerup 
sorting searching word ram 
proc 
stacs pages 
hon lam sung 
constructing compressed su arrays large alphabets 
proc 
isaac 
appear 
hon sung 
breaking time space barrier constructing full text indices 
proc 
ieee focs 
appear 
lee arikawa park 
linear time prefix computation su arrays applications 
proc 
th annual symposium combinatorial pattern matching cpm lncs pages 
kurtz 
reducing space requirement su trees 
software practice experience 
lam sung 
space time cient algorithm constructing compressed su arrays 
proc 
cocoon pages 
lncs 
manber myers 
su arrays new method line string searches 
siam journal computing october 
mccreight 
space economical su tree construction algorithm 
journal acm 
munro 
tables 
proceedings th conference foundations software technology computer science lncs pages 
munro raman 
succinct representation balanced parentheses static trees 
siam journal computing 
munro raman rao 
space cient su trees 
journal algorithms may 

new text indexing functionalities compressed su arrays 
journal algorithms 
arikawa 
cient discovery optimal patterns large text databases 
new generation computing 
ukkonen 
line construction su trees 
algorithmica september 
weiner 
linear pattern matching 
proceedings th ieee symposium switching automata theory pages 

