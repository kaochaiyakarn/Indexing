equivalences observable processes department computing imperial college science technology medicine queens gate london sw bz 
mail iu doc ic ac uk aim nd nest observable implementable equivalence concurrent processes 
part larger programme develop theory observable processes semantics processes locally nitely observable process behaviour process constructs allowed provided operational meaning de ned realistically implementable transition rules 
process behaviour established called local testing global testing called locally nitely observable 
de ne copy refusal testing equivalence indistinguishability copy refusal tests consisting traces refusals copying local 
argued copy refusal tests sucient local testing adding local tests copy refusal tests increase testing power 
copy refusal equivalence nest observable equivalence 
examining structure transition rules propose conditions realistically implementable rules satisfy 
conditions de ne isos format rules 
show isos contexts capture exactly observable behaviour processes isos trace congruence proved coincide copy refusal equivalence 
copy refusal equivalence nest implementable equivalence 
essential element theory concurrent processes notion process equivalence purpose identify processes essentially behaviour 
behaviour mean 
consider fundamental equivalences concurrent processes observation equivalence 
trace equivalence 
contend observation equivalence considered nest extensional equivalence distinguishes processes examine process behaviour nitely locally observed 
hand trace equivalence sequences visible actions called traces discriminating 
take account observable aspects process behaviour action refusals ask nest process equivalence identi es processes exactly locally nitely observable behaviour 
take view reasonable method establish behaviour processes experimenting recording interpreting responses 
di erent experiments proposed concurrency literature divided groups 
rst consists socalled local experiments 
attempt communicate channel pressing button 
attempt may produce nite time kinds responses acceptance refusal consider basic observable process behaviour 
rst group empty experiment meaning success failure delay experiment pause time performing experiment 
experiment group copying 
nite number copies process experiment separately put results 
copying clearly local nite character 
contrast experiment second group distinctive global character involves combining time results possible runs experiment process 
called global experiment 
experiment milner calls controlling weather conditions 
proved 
combined local global experiments powerful test processes observation equivalent 
agree global experiments powerful unobservable behaviour observable 
hand local experiments depict locally nitely observable fragments process behaviour 
reject global experiments may ask nest process equivalence testable local experiments 
experiment interpretation process responses produces number tests obvious candidate required equivalence called copy refusal testing equivalence 
represents indistinguishability set copy refusal tests cr 
spirit operator completeness result abramsky 
prove adding monotone linear testing operators cr give testing power 
argue identify computability locality experiments monotonicity linearity induced tests copy refusal equivalence nest equivalence testable local experiments 
order gain intuition copy refusal equivalence look di erent angles 
compare copy refusal equivalence bisimulation equivalences trace congruences induced number formats structured transition rules 
start de ning observational transition system 
form derived transition system divergence transition relation labelled acceptances refusals communications actions basic observable process behaviour 
known observation equivalence nested simulation equivalence 
strictly ner copy refusal equivalence 
means terms testing need local form global tests characterise 
de ne observational transition system new simulation process relation called refusal simulation 
equivalence associated strictly coarser observation nested simulation equivalences 
prove sort nite processes refusal simulation equivalence corresponds exactly copy refusal equivalence 
turn attention trace congruences 
de ne processes refusal simulation equivalent responses copy refusal testing 
responses viewed form generalised traces divergence expressed 
processes copy refusal equivalent trace congruent respect class process contexts powerful mimic copy refusal testing 
contexts built process constructs operators represent class contexts class process constructs 
group constructs format transition rules de ning operational semantics 
suggests alternative way looking process equivalences able divide classes characterised trace congruence induced particular format transition rules 
shown strong bisimulation characterised trace congruence generated pure format nested simulation trace congruence simpler pure format 
feel rules formats process constructs operational meaning de ne realistically implementable 
introduce level abstraction physical details notion implementability says processes constructed 
notion analyse structure transition rules order set number conditions realistically implementable rules satisfy 
conditions restrict general format rules negative premises example format new format called implementable structured operational semantics isos short 
ask process equivalence coincides trace congruence induced isos format rules 
show isos trace congruence corresponds copy refusal testing equivalence proving copy refusal equivalence nest observable implementable equivalence 

processes discussing may diverge shall consider general preorders processes equivalences interested 
equivalences obtained preorders standard way 
organised follows 
section review basic concepts testing local global tests semantics tests testing preorders 
particular de ne copy refusal tests cr copy refusal testing preorder 
section introduce local tests prove adding cr increase power copy refusal testing 
section give characterisation copy refusal preorder simulation preorder called refusal simulation 
second part begins section notion implementability 
notion identify isos format transition rules 
section de ne isos trace precongruence show coincides copy refusal preorder 
section contains suggestions research 
copy refusal testing section notion testing reliable tool examine behaviour processes 
argue nite local testing done copy refusal testing 
start de ning new kind derived transition system divergence 
abstracts silent behaviour refusals actions 
represents acceptances refusals actions basic observable aspects process behaviour treating equally important 
reason call observational transition system 
usual abbreviations proc proc ab proc similarly 
de nition proc transition system divergence 
observational transition system divergence structure proc ag proc proc derived transition relation de ned follows notice clearly di erent brie discussed types experiments empty experiment attempt communicate delay copying global experiment 
experiments interpretation process responses produce groups tests experiments tests induced experimenting success failure attempt communicate nite time things happen communication accepted continue experiment refused stable state silent actions possible divergence green light 
continue general form test showed 
simpler tests losing expressiveness 
tests abbreviations af abbreviated abbreviated af abbreviated abbreviated act think tests hml formulae satisfaction relation de ned observational transition system translation function ait act abramsky 
uses tests 
delay wait continue experimenting gives test copying copies process perform rst copy second copy combine responses 
informally require experiments succeed induced test need success obtain global experiment enumerate possible runs experiment process 
tests notation suggests interpret respectively runs experiment succeed 
call tests traces act refusals language tests tests fo 

fo 

fo 
act fo 
fo 
de ned act de ne meaning tests outcome function tests proc 
set domain outcomes 
represents success failure divergence particular run test process 
processes nondeterministic need subsets denote outcomes possible runs test 

abuse notation write testing operator binary operator just pointwise extension similarly denote testing operator unary operator de ned 
require orderings compare subsets compare processes tested 
commonly ordering convex plotkin ordering vc lower hoare ordering upper smyth ordering fact vc partial order vl preorders 
vc vl de ne testing relation processes parametrised subset tests superscript subscript type ordering 
de nition tests fc ug 
binary relation proc de ned follows proc vx abramsky showed set tests generated testing constructs ac preorder coincides observation preorder sort nite transition systems 
clearly coincides phillips investigated 
properties language copy refusal tests cr generated act clearly cr preorder cr example 
consider processes represented derivation trees 
label node denotes divergence nite unary tree consider bcs bds 
clearly due nondeterministic nature may bc bd may 
copy refusal equivalent 
refusal copying equivalent 
lastly consider processes clearly lower copy refusal equivalent upper copy refusal equivalent 
due possibility divergence test distinguishes cr cr cr nd intuitive easier lower may upper parts copy refusal preorder cr cr cr easy prove lcr subset cr formed required lower copy refusal testing 
upper testing need consider ucr subset cr generated act cr lcr cr ucr operator completeness cr section cr set tests induced local experiments 
may ask interesting experiments local nite character 
adding tests induced experiments cr increase distinguishing power 
argue somewhat informally nite local experiments devised gain distinguishing power adding induced tests cr 
line inquiry section motivated operator completeness result tests due abramsky 
consider experiment 
attempt communicate simultaneously nitely channels black box terminology simultaneously press nite number buttons 
succeed continue experiment communication refused continue experiment clearly experiment nite local 
proved 
expressed combination attempt communicate single channel copying 
experiment discuss involves copying 
copies process run experiment ith copy obtaining set responses 
combine means operator op 
experiment denoted op induced test op 
notice testing operators binary respectively unary versions op 
adding op cr increases testing power clearly depends properties operator op 
properties determine character experiment op 
consider lcr ucr may parts copy refusal tests 
formalise idea adding class testing operators op set tests notion operator completion see 
de nition lcr ucr operator completion lcr ucr obtained extending syntax tests lcr ucr construct op monotone lower upper ordering function op 
outcome function augmented op op tn lemma adding monotone lower upper ordering testing operators lcr ucr increase power testing proc lcr lcr ucr ucr proof 
see section 
lemma shows lcr sucient necessary set tests may copy refusal testing similarly ucr copy refusal testing 
lower monotone lemma adding lcr increase distinguishing power 
added ucr increase power testing upper monotone 
return cr 
question remains class testing operators added cr increasing testing power 
lemma suggests answer 
cr operator completion cr constructs op lower upper monotone function op 
deduce cr cr distinguishing power theorem proc cr cr shed light type operators op added cr increasing testing power propose alternative characterisation operator completion cr 
wrong characterise cr completion cr op convex monotone function op convex monotone adding cr give abramsky tests imposing condition op de ned follows op op op sucient 
condition called linearity means op preserves union argument separately 
tells outcome experiment op rn computed 
linearity op rn equals fop fr fr ng expression says run repeatedly experiments copies process obtain partial results op fr fr 
put independent results obtain op rn 
theorem summarises main result section theorem testing power cr operator completion cr constructs op convex monotone linear function op cr proc cr cr complete section notice inspecting outcome function local testing done delay operator see 
suggests criterion local equivalence identi ed local equivalences testing characterisations depend delay test 
leaving delay language decreases testing power 
observation equivalence local equivalence criterion 
refusal simulation far shown copy refusal equivalence nest locally nitely observable testing equivalence 
section argue natural interesting equivalence away testing background 
show characterised simulation equivalence called refusal simulation de ned observational transition system 
de ne refusal simulation terms auxiliary relations simulation simulation 
auxiliary relations represent lower may liveness upper safety parts refusal simulation 
intention sort nite processes simulation coincides cr coincides cr notice refusal simulation generalisation ready simulation 
bisimulation 
similar rework simulations bloom 
de ne sort niteness 
observational transition system proc proc nite de nition observational transition system de ne families binary relations binary relations proc follows proc proc implies implies implies call simulation simulation relations 
preorders example 
consider processes 
easy see hand 

clear simulation equivalent 
easy show induction tests theorem sort nite observational transition systems lcr ucr de ne refusal simulation de nition refusal simulation rs binary relation proc de ned follows rs simple consequence theorem corollary sort nite observational transition systems rs cr return proof lemma 
shall lemma states monotone operators added lcr ucr shall go simulation simulation preorders 
lemma proc implies lcr implies ucr proof 
induction depth tests lcr respectively ucr proof 
lemma theorem 
isos format rst part discussion concurrent processes conducted syntax free manner processes states observational transition system 
established aspects process behaviour observable copy refusal preorder nest preorder relating processes observational behaviour 
second part change point view consider concurrent processes constructed 
propose general notion implementability says complex processes built simpler processes means process constructs 
order decide constructs realistically implementable analyse structure transition rules de ning meaning 
guided notion implementability de ne isos format rules 
implementable process constructs operational semantics terms isos rules 
start informally de ning notion implementability 
concurrent processes thought black boxes labelled channels green light indicate presence absence internal behaviour 
internal structure processes known 
new process constructed connecting way channels simpler processes 
connection behaviour new process solely depends observable behaviour subprocesses internal structure working 
remain intentionally vague connection channels concentrate behaviour subprocesses connection uses order produce behaviour new process 
process built gains status black box construct complex processes 
example 
process constructs required connection channels quite simple 
consider parallel interleaving construct black boxes construct pjq putting side side 
channels pjq consider csp parallel composition operator 
de nition accepts communication channel communicate construct join channels label gate pairs disabling channels 
analyse structure transition rules framework transition system speci cations tss short 
tss tuple denotes signature process constructs terms called process terms set channel names actions 
set structured transition rules 
notion implementability suggests premises implementable rules describe behaviour subprocesses xn behaviour implemented process xn construct 
means physical complexity implemented process strictly larger subprocesses 
rules implementable example rules expressing certain global closure properties ok ok consequences black box character subprocesses forced treat distinct processes 
constructing new process may copies subprocess due internal method tell copies represent subprocess time 
require process variables xn premises implementable rules distinct 
example shows goes wrong rules satisfying condition 
example 
consider unary operator intended show argument communicate operational meaning rule ok notice powerful distinguish observationally equivalent processes shown 
happens premises rule say behaviour observationally justi able state just 
example shows safe matching subprocess names premises implementable rules 
example 
consider unary construct tells argument notice quite vague precise intended meaning possible rule de ning ok previous example operator intended says argument communicates immediately communication observable happens immediately state silent communications observable 
result extra distinguishing power distinguishes observationally equivalent ccs processes ab 
consequence examples process variables premises implementable rules distinct 
ready rst approximation format implementable rules function name arity distinct variables set variables rg unspeci ed term 
format rules similar called gsos structured operational semantics guarded recursion format introduced bloom meyer 
inspecting premises format notice represent observable behaviour subprocesses 
decided represent behaviour processes embodied relation terms relation 
example 
generality format allows de ne unwanted perverse operators 
consider unary operators see initial de ned rules see see initial ok see distinguish observationally equivalent processes see take observationally equivalent initial take 
happens de ned observable behaviour see initial terms unobservable behaviour conclude implementable rules satisfy behaviour represented depend observable behaviour represented premises unobservable behaviour sequences inherited 
earlier sections decided basic notions observable process behaviour performing visible action communicating channel refusing stable state perform visible action communicate premises implementable rule look fx distinct process variables rg arity clearly premises rules de ning see initial form 
condition refers behaviour stands situation subprocesses evolve spontaneously performing actions 
externally observable notion implementability cause observable behaviour structural change 
inherited 
idea embodied rule de ned introduced 
vector rule operators arguments behaviour depends include appropriate rule set rules called rules associated solved problem representing process behaviour ordinary 
rules associated rules 
establish structure term evolves 
referring notion implementability see process term built processes behaviour depends performing visible action performing ceases exist evolves behaviour depends refusing reason represents stable state 
observing refusal change reuse behaviour depend implementable rules fy de ned follows de simone format architectural rules 
process term de ned similar way 
reader may ask allow form copying rules 
operating systems simulated simple dumping routine 
system components geographically scattered combination dump routine protocols 
choose form copying 
conform requirement realistic implementability allow explicit form copying 
means identical copies process required created 
copying operators separate rules de ning 
condition put structure isos rules says explicit form copying allowed multiple identical process variables structure isos rule permitted term 
contrasts forms copying copies call implicit copying 
branching premises represented rule term variables 
second form implicit copying consequences shown example 
example 
consider unary process construct intended meaning described 
represent meaning rules rules shown ok rule uses implicit copying 
right hand side uses evolved order produce behaviour available 
hidden copying capacity allows distinguish observationally equivalent processes 
ready main isos format isos format 
call cr rule expresses information refusals copying cr rule distinct process variables rg arity fy de ned 
de nition tss isos format consists cr rules operator associated rules rules 
may extend de nition talk set rules isos format 
clear operational semantics ccs choice operator de nable rules isos format 
isos rules notice unobservable behaviour subprocess causes structural change wished construct process built connection channels way required react behaviour choice 
allowed notion implementability observable behaviour subprocesses cause observable behaviour structural change constructed process 
hand csp internal external choice constructs isos de nable ccs csp operators 
conclude section unary process constructs plus auxiliary constructs isos rules de ning operational semantics 
intended meaning respectively discussed 
due lack space cr rules shown associated rules ok rule 
notice explicit copying rules 
general meaning possible due inclusion rules 
rst says check physically second says check happens necessarily mimicking copy refusal testing isos contexts aim section prove theorem says trace precongruence induced isos contexts exactly corresponds copy refusal preorder cr de ning transition system divergence tss isos format 
states processes members labels divergence predicate set empty 
transition relation unique transition relation generated existence uniqueness guaranteed result general format 

de ne observational transition system theorem proved follows 
show lemma rs precongruence isos contexts proof 
introduce notion generalised traces allowing represent possible divergence 
de ne lower upper convex trace preorders 
definitions conservative extensions introduce corresponding trace 
rs isos precongruence clearly re nes convex trace preorder deduce lemma rs re nes isos convex trace preorder 
result corollary shows cr re nes isos trace preorder 
obtain half theorem mimic copy refusal testing isos contexts 
done lemma 
lemma tss isos format 
rs precongruence derived transition system contexts rs implies rs de nition traces ft qg ft 
traces de ne trace preorders require ordering generalised traces 


hold traces possibly pre de nition de nition format tss rules tss format 
relations lower upper respectively convex trace de ned follows tss format added conservatively lemma rs isos lemma tss isos format 
tss isos format added conservatively way isos cr proof 
tss de ned follows 
signature consists constant unary pre operators binary operators set action labels bac ac encode testing operators denote left right operands 
csp external choice operator denotes success denotes nite failure 
translate copy refusal tests processes means function act act lt rt lt rt set rules contains usual rules pre xing rules appropriate rules 
success failure rules refusal rules jt bac jt bac ac ac copying rules pj pj pj pj pj pj clear conservative extension prove lemma showing proc lcr ucr implies vl implies 
rules similar rules 
de ning operational semantics tests changes copying rules isos format 
rules de ning global testing operators isos format 
main result section theorem sort nite observational transition systems cr isos argued locally nitely observable process behaviour consists observable sequential behaviour sequences action acceptances refusals local part branching behaviour 
information structure implementable rules behaviour terms depends observable behaviour subterms premises explicit copying allowed 
de ned copy refusal equivalence proved nest locally nitely observable process equivalence 
section introduced natural simulation equivalence called refusal simulation equivalence 
characterises copy refusal equivalence sort nite processes 
support claims copy refusal equivalence established isos format implementable rules isos trace congruence coincides copy refusal equivalence 
results processes copy refusal equivalent refusal simulation equivalent isos trace congruent 
interesting nd isos process language adequate isos trace congruence 
think contain form refusal check operator pre xing sequential composition form choice parallel operators explicit copying operator 
finding complete proof system language task 
iain phillips stimulating discussions 
mark ryan mark dawson sarah helped preparing text 
paul taylor macros produce transition rules 
referees comments suggestions 
abramsky 
observation equivalence testing equivalence 
theoretical computer science vol 

bloom 
strong process equivalence presence hidden moves 
preliminary report mit 
bloom meyer 
bisimulation traced preliminary report 
conference record th acm symposium principles programming languages san diego california 
bloom meyer 
experimenting process equivalence 
kwiatkowska shields thomas editors semantics concurrency leicester pp 
berlin 
springer verlag 
brookes hoare roscoe 
theory communicating sequential processes 
journal acm vol 

de simone 
higher level synchronising devices meije sccs 
theoretical computer science vol 

groote 
transition system speci cations negative premises 
baeten klop editors proceedings concur berlin 
springer verlag 
lncs 
groote vaandrager 
structured operational semantics bisimulation congruence 
information computation vol 
pp 

lamport 
time clocks ordering events distributed system 
cacm vol 

larsen skou 
bisimulation probabilistic testing 
technical report aalborg 
appeared proceedings th symposium principles programming languages austin texas acm press new york 
milner 
calculus communicating systems 
springer verlag berlin 
lncs 
milner 
modal characterisation observable machine behaviours 
astesiano ohm editors caap pp 
berlin 
springer verlag 
lncs 
de nicola hennessy 
testing equivalences processes 
theoretical computer science vol 

de nicola hennessy 
ccs 
ehrig kowalski levi montanari editors tapsoft berlin 
springer verlag 
lncs 
phillips 
copy testing 
unpublished manuscript 
phillips 
refusal testing 
theoretical computer science vol 

skou 
validation concurrent processes 
phd thesis university aalborg 

