pi calculus versus petri nets eat humble pie inflate pi hype van der aalst department technology management eindhoven university technology box nl mb eindhoven netherlands 
aalst tm tue nl 
context web service composition languages ws cls ongoing debate best foundation process aware information systems petri nets pi calculus 
example workflow management wfm business process management bpm business business customer relationship management crm enterprise resource planning erp systems 
clearly web service paradigm change architecture systems dramatically 
triggered industry standards soap wsdl uddi standards proposed orchestrating web services 
examples bpel ws bpml wsfl wsci xlang 
debate petri nets versus pi calculus players wscl marketplace arguments concrete facts 
short note attempt get mature discussion pro con petri nets pi calculus 
simple example illustrate fundamental differences petri nets pi calculus 
states challenges inparticular advocating pi calculus 
hopefully note contribute exposing people try hype things pi calculus marketing purposes 
note big discrepancy pi hype reality limit applicability beautiful scientific framework pi calculus 
key words web service composition languages petri nets pi calculus bpel ws bpml wsfl xlang wsci 
released bpel ws business process execution language web services specification builds ibm wsfl web services flow language microsoft xlang web services business process design 
xlang block structured language basic control flow structures sequence switch conditional routing looping parallel routing pick race conditions timing external triggers 
contrast xlang wsfl limited block structures allows directed graphs 
graphs nested need acyclic 
iteration supported exit conditions activity subprocess iterated exit condition met 
control flow part wsfl identical workflow language ibm mq series workflow 
bpml business process modeling language standard developed promoted bpmi org business process management initiative 
bpmi org supported organizations including sap sun 
web service choreography interface wsci submitted june bea systems bpmi org commerce fujitsu limited iona oracle sap ag technology sun microsystems 
substantial overlap bpml wsci 
languages bpel ws bpml developed web services mind traditional workflow languages tools similar attempts necessarily standards soap wsdl uddi example xml process definition language xpdl language proposed workflow management coalition wfmc interchange process definitions different workflow products 
goal xpdl provide lingua franca workflow domain allowing import export process definitions variety tools ranging workflow management systems modeling simulation tools 
competition languages triggered discussion best foundation web service composition languages 
articulate need formal basis clearly general opinion formal model base complex languages 
clearly formal models petri nets pi calculus offer advantages comes providing solid semantics analysis methods 
unfortunately cases foundation really provide solid semantics analysis methods 
point time formal models advertise languages improve quality applicability 
examples woflan project yawl project demonstrate real life situations added value formal methods 
brings challenges 
challenge people advocate bpel ws bpml wsfl xlang xpdl wsci show precise relation language formal foundation 
people claim strong relationships language pi calculus cause confusion 
challenge people advocate particular formal model context languages bpel ws bpml wsfl xlang xpdl wsci demonstrate analysis methods tools formal model real life setting 
indicated debate petri nets versus pi calculus context 
reflection history concurrency order 
history concurrency focus history 
interesting starting point scientific perspective early office information systems 
seventies skip ellis holt michael worked called office information systems driven explicit process models 
interesting see pioneers area independently petri net variants model office procedures 
seventies eighties great optimism applicability office information systems 
unfortunately applications succeeded 
result experiences application technology related research stopped decade 
hardly advances eighties 
nineties renewed interest systems 
number workflow management systems developed past decade papers workflow technology illustrate revival process aware office information systems 
today workflow management systems readily available 
application limited specific industries banking insurance 
indicated skip ellis important learn ups downs 
failures eighties explained technical conceptual problems 
eighties networks slow suitable graphical interfaces proper development software missing 
conceptual problems unified way modeling processes systems rigid people workplace 
technical problems resolved 
conceptual problems remain 
standards business process modeling missing today workflow management systems enforce unnecessary constraints process logic processes sequential need 
interesting historic overview office automation workflow prototypes 
history clearly shows workflow management started nineties seventies ellis ii number commercial systems considerably grown years 
considering important take account experience knowledge workflow domain re invent wheel 
research concurrency theory started phd thesis carl adam petri 
petri person develop models interacting sequential processes 
phd thesis researchers considered sequential processes represented terms transition systems automata 
decade robin milner started working concurrency theory 
win turing award achievements lcf mechanization scott logic computable functions probably theoretically practical tool machine assisted proof construction ml language include polymorphic type inference type safe exception handling mechanism ccs general theory concurrency 
third achievement development ccs main ingredient pi calculus 
robin milner published book calculus communicating systems describing ccs language 
ccs member large family called process algebra established process algebra include csp acp 
pi calculus addition impressive collection process algebra variants 
extends ccs notions mobility 
new process algebra emerged petri nets extended data color time hierarchy 
see www daimi au dk information various petri net models 
main difference petri nets process algebra petri nets bipartite graphs process algebra textual linear description 
areas impressive accumulation knowledge 
notions developed petri nets translated process algebra vice versa 
fundamental differences remain 
example notion invariants developed petri nets exist process algebra 
see detailed comparison petri nets process algebra 
challenge people advocate particular formal model context study literature making statements 
big misconceptions petri nets versus process algebra process algebra compositional petri nets 
complete nonsense 
petri nets extended hierarchy 
petri nets compositional way 
petri nets allow model non compositional way 
example restriction subprocesses wf nets similar compositionality results obtained 
example start mature discussion petri nets versus process algebra propose concrete examples 
start discussion model shown 
model shows simple classical petri net transitions 
executed followed parallel 
followed wait completion executed transitions executed exactly 
petri net simple model choices parallelism 
process algebra pi calculus problems modeling simple example 
understand problem consider petri net shown connection case sequences executed parallel terms pi calculus denoted notation denote sequence denotes parallelism 
notation elegant allows computer manipulation 
unfortunately simple notation possible connection restored 
linear language allow fig 

model terms pi calculus 
graph language petri nets problem 
note claim pi calculus model process shown 
illustrates pi calculus language experts simple things suddenly complicated 
example triggers additional challenges 
challenge people advocate pi calculus show petri net shown modeled easily 
challenge people advocating pi calculus propose modeling challenges people advocating petri nets fundamental language 
interesting see useful patterns benefit notion mobility pi calculus 
outcome th challenge nice try map patterns involving mobility petri nets 
needed interesting apply nets nets paradigm developed valk supported tools renew www renew de 
mature discussion clearly toy example 
propose set relevant patterns compare languages 
working collecting comprehensive set workflow patterns 
results available www com workflow patterns www site 
patterns range simple patterns sequential routing pattern complex patterns involving complex synchronizations discriminator pattern pattern 
restrict relevant patterns 
patterns classified categories 
basic control flow patterns 
basic constructs workflow languages model sequential parallel conditional routing 
basic control flow patterns pattern sequence pattern parallel split pattern synchronization pattern exclusive choice pattern simple merge structural patterns pattern arbitrary cycles pattern implicit termination state patterns pattern deferred choice pattern interleaved parallel routing pattern milestone advanced branching synchronization patterns pattern multi choice pattern synchronizing merge pattern multi merge pattern discriminator cancellation patterns pattern cancel activity pattern cancel case patterns involving multiple instances pattern multiple instances synchronization pattern multiple instances priori design time knowledge pattern multiple instances priori runtime knowledge pattern multiple instances priori runtime knowledge fig 

overview workflow patterns described 

advanced branching synchronization patterns 
patterns transcend basic patterns allow advanced types splitting joining behavior 
example synchronizing merge pattern behaves join xor join depending context 

structural patterns 
programming languages block structure clearly identifies entry exit points quite natural 
graphical languages allowing parallelism requirement considered restrictive 
identified patterns allow rigid structure 

patterns involving multiple instances 
context single case workflow instance parts process need instantiated multiple times context insurance claim multiple witness statements need processed 

state patterns 
typical workflow systems focus activities events states 
limits expressiveness workflow language possible state dependent patterns milestone pattern pattern 

cancellation patterns 
occurrence event customer canceling order may lead cancellation activities 
scenarios events cause withdrawal case 
shows overview patterns grouped categories 
detailed discussion patterns outside scope 
interested reader referred www com 
patterns compare functionality numerous wfm systems 
result evaluation reveals expressive power contemporary systems languages leaves desired systems support different patterns 
note term expressiveness traditional formal sense 
abstracts capacity constraints workflow language turing complete 
sense compare languages formal notions expressiveness 
intuitive notion expressiveness takes modeling effort account 
intuitive notion referred suitability 
see discussion distinction formal expressiveness suitability 
evaluated leading standards 
see information evaluation bpel ws xlang wsfl patterns 
see information evaluation bpml wsci patterns 
overview evaluations refer 
observation expressive power available languages systems leaves desired triggered question pi calculus 
challenge people advocate pi calculus exactly show existing patterns modeled terms pi calculus 
challenge people advocating pi calculus propose new patterns especially patterns involving mobility 
short note attempt trigger mature discussion foundations 
petri nets pi calculus solid respectable languages 
clearly robin milner developed beautiful language applied application domains 
pi hype solid arguments 
people familiar formal methods fighting religious wars driven commercial arguments desire build solid foundation 
kind pi hype proposed challenges 
conclude discuss pro con petri nets alternative pi calculus 
reasons petri nets basis wscl 
formal semantics despite graphical nature hand petri nets graphical language allows modeling workflow primitives identified wfmc 
note focus workflow functionality wscl 
clearly aspects important 
dominant perspective wscl workflow process perspective 
superficial scan existing bpel ws bpml reveal 
hand semantics petri nets including extensions defined formally 
today available wfm systems provide adhoc constructs model workflow procedures 
wfm systems impose restrictions workflow patterns discussed 
wfm systems provide exotic constructs semantics clear cf 
join construct xpdl languages 
problems better established design language formal semantics solid basis 

state event contrast process modeling techniques state case modeled explicitly petri net 
process modeling techniques ranging informal techniques dataflow diagrams formal techniques process algebra event transitions modeled explicitly states subsequent transitions modeled implicitly 
today wfm systems typically event tasks modeled explicitly states subsequent tasks suppressed 
distinction event state description may appear subtle patterns deferred choice wp milestone wp show utmost importance workflow modeling 

abundance analysis techniques petri nets marked availability analysis techniques 
clearly great asset favor petri nets 
petri net analysis techniques determine correctness process designs 
availability techniques illustrates petri net theory add powerful analysis capabilities generation 
indicated problems modeling workflows terms petri nets 
advanced routing constructs necessary resort high level nets 
straightforward application high level petri nets yield desired result 
problems relevant 
high level petri nets support colored tokens token value 
possible identify multiple instances subprocess specific support patterns involving multiple instances burden keeping track splitting joining instances carried designer 

flows need joined clear synchronization needed flows active join needed xor join 
advanced synchronization patterns difficult model terms high level petri net firing rule supports types joins join transition xor join place 

firing transition local enabling tokens input places firing affecting input output places 
events workflow may effect local error tokens need removed various places knowing tokens reside 
modeled cancellation pattern global timeout mechanism terms petri nets knows cumbersome model called vacuum cleaner removing tokens selected parts net 
compared existing wfm languages high level petri nets quite expressive comes supporting workflow patterns 
recall term expressiveness formal sense 
high level petri nets turing complete define terms algorithm 
imply modeling effort acceptable 
high level nets contrast workflow languages problems dealing state patterns 
direct consequence fact petri nets places represent states explicitly 
high level petri nets outperform existing languages comes modeling control flow result completely satisfactory problems indicated hamper application wfm bpm domain 
triggered development yawl workflow language 
yawl petri nets extended additional features facilitate modeling complex workflows 
see www citi qut edu au yawl information download yawl system 

van der aalst 
application petri nets workflow management 
journal circuits systems 

van der aalst 
workflow verification finding control flow errors petri net techniques 
van der aalst desel oberweis editors business process management models techniques empirical studies volume lecture notes computer science pages 
springer verlag berlin 

van der aalst 
don go flow web services composition standards exposed 
ieee intelligent systems 

van der aalst dumas ter hofstede 
pattern analysis bpml wsci 
qut technical report fit tr queensland university technology brisbane 

van der aalst ter hofstede 
workflow patterns expressive power petri net workflow languages 
jensen editor proceedings fourth workshop practical coloured petri nets tools cpn volume daimi pages aarhus denmark august 
university aarhus 

van der aalst ter hofstede 
yawl workflow language 
accepted publication information systems available qut technical report fit tr queensland university technology brisbane 

van der aalst ter hofstede kiepuszewski barros 
workflow patterns 
databases 

van der aalst moldt 
enacting interorganizational workflows nets nets 
becker zur hlen editors proceedings workflow management conference volume working series department information systems pages germany november 
university 

van der aalst van hee van der 
component software architectures framework inheritance behavior 
science computer programming 

arkin web service choreography interface wsci 
standards proposal bea systems sap sun microsystems 

arkin business process modeling language bpml version 

baeten 
een voor 
kluwer 

basten 
terms nets system design petri nets algebra 
phd thesis eindhoven university technology eindhoven netherlands december 

curbera goland klein leymann roller thatte weerawarana 
business process execution language web services version 
standards proposal bea systems international business machines microsoft 

ellis 
information control nets mathematical model office information flow 
proceedings conference simulation measurement computer systems pages boulder colorado 
acm press 

ellis nutt 
workflow process spectrum 
sheth editor proceedings nsf workshop workflow process automation information systems pages athens georgia may 

van hee 
soundness separability workflow nets stepwise refinement approach 
van der aalst best editors application petri nets volume lecture notes computer science pages 
springer verlag berlin 

hoare 
communicating sequential processes 
prentice hall englewood cliffs 

holt 
coordination technology petri nets 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer verlag berlin 

jensen 
coloured petri nets high level language system design analysis 
rozenberg editor advances petri nets volume lecture notes computer science pages 
springer verlag berlin 

jensen 
nets 
basic concepts analysis methods 
volume 
eatcs monographs theoretical computer science 
springer verlag berlin 

kiepuszewski 
expressiveness languages control flow modelling workflows 
phd thesis queensland university technology brisbane australia 
available www com 

kiepuszewski ter hofstede van der aalst 
fundamentals control flow workflows 
acta informatica 

leymann 
web services flow language version 

milner 
calculus communicating systems volume notes computer science 
springer verlag berlin 

milner 
communicating systems pi calculus 
cambridge university press cambridge uk 

zur 
workflow controlling foundation design application workflow driven process information systems 
logos berlin 

petri 
kommunikation mit 
phd thesis fakult mathematik und physik technische hochschule darmstadt darmstadt germany 

reisig rozenberg editors 
lectures petri nets basic models volume lecture notes computer science 
springer verlag berlin 

thatte 
xlang web services business process design 

valk 
petri nets token objects elementary object nets 
desel silva editors application petri nets volume lecture notes computer science pages 
springer verlag berlin 

verbeek basten van der aalst 
diagnosing workflow processes woflan 
computer journal 

van der aalst dumas ter hofstede 
pattern analysis bpel ws 
qut technical report fit tr queensland university technology brisbane 

van der aalst dumas ter hofstede 
analysis web services composition languages case bpel ws 
song liddle ling scheuermann editors conference conceptual modeling er volume lecture notes computer science pages 
springer verlag berlin 


representation specification office procedures 
phd thesis university pennsylvania school business 
