idioms ovm hosking vitek lab department computer sciences purdue university hosking cs purdue edu csd tr need express important non java behaviors confronts ovm virtual machine framework vm java project jikesrvm 
project needs mechanisms purpose di erent choices vm design ect shape mechanisms take 
exploring component nontrivial mechanisms memory management toolkit interoperate ovm jikesrvm ovm mechanisms contributed borrowed jikesrvm remain distinct 
describe mechanisms nd useful ovm design di erences jikesrvm 
developed idioms familiar java syntax source level familiar recognizable design patterns problems vm con involve ad hoc techniques prior transform idioms code indirection ineciency weigh familiar patterns 

mechanisms ovm clear similarities counterparts jikesrvm 
similarities attest ongoing developers jikesrvm memory management toolkit toolkit platforms 
interest collaboration highlights di erences 
exploring di erences help delineate aspects problems common project di ering vm design choices facilitate approach optional design goals java trademark sun microsystems jikesrvm refers jikes research virtual machine trademark held ibm distinct project ovm 
jikesrvm illustrate projects similar objectives take di erent approaches 
motivate mechanism vm may omit 
mechanisms useful ovm consider choices ovm design motivated mechanisms helped implementation 
design choices question relate ovm intermediate representation thorough may essential material 
aims ovm framework provide open source testbed experimenting language implementation techniques 
speci goal project support multiple virtual machine con gurations 
possible framework construct virtual machines problem domains di erent real time embedded systems cluster computing 
organized follows 
remainder introduce classes idiom recognition nd useful 
section describe idioms implemented ovm including idioms vm con object models believe improvements prior 
section concludes 
idiom recognition granting vm need execute operations run time java semantics express native interface suited heavily small operations question entails execution engines interpreters compilers accept richer language input jvm bytecode 
problem compiling source programs form approached ways devise richer extended java source language new compiler produce richer compiled language 
syntactically standard java source language compile existing tools adopt certain idioms recognized resulting bytecode transformed instruction sequences extended language 
choose second approach compatibly term idiom recognition describe 
classifying idiom recognition place techniques ovm space related approaches propose dimensions comparing idiom recognition designs 
unguarded guarded pottenger eigenmann developed parallelizing fortran compiler attempt recognize certain uses variables source code automatically apply transformations recognition dictated 
attempt recognize sequences fetch compare store operations implemented atomic instruction compare swap 
avoid doing transformation wanted introduce way programmer explicitly mark regions code idiom recognition attempted 
propose term guarded idiom recognition regions programmer marks 
heuristic tag source language provides explicit way delimit region idiom recognition wanted guarded recognition involve regress language feature recognized mark guarded region 
synchronized block reserved type idiom recognition guard idiom recognition 
bright side new idiom property rst 
heuristic matching fetch compare store sequences match sequences programmer want transformed test synchronized expression reserved type unequivocal 
tag describe idiom property 
language may constructs pressed service tag idioms may look contrived may simply inadequate express range operations needed 
contrast heuristic idioms appropriate patterns program text best uncluttered mnemonic ones expressive needed 
risk surprising programmer idiom matched incorrectly programmer forgot meaning carrying idiom 
heuristic idioms guarded tags help directing recognizer programmer attention interesting code regions 
risk heuristic idioms may fail match intended matching code ciently general source compiler optimized reordered code source form looks perfect match 
guarded idioms helpful guard region implies programmer intends idiom match 
matched warning issued silently failing realize programmer intent 
explicit tag syntax proposal jsr java community process introduce explicit syntax metadata associated chosen regions entities java program 
er form tag explicit contrived tag idioms devised expressive convey meaning need replace tag idioms purpose guarding idioms 
important uses idiom recognition ovm described section 
background section brie describes aspects ovm focus referred sections 
address word types abstraction manipulate dereference arbitrary memory addresses introduced jikesrvm adapted ovm 
projects aim share common memory management toolkit uniformity interface subject inter project vm address di ers little jikesrvm counterpart 
describe brie 
vm address type variable method holds returns address memory may may object 
declared instance methods arithmetic comparison dereferencing unsafe narrowing cast type object programmer certain vm address address object 
static method serves cast object vm address succeeds 
ect instance methods achieved tag idioms methods replace call sites inlined instructions involve dynamic dispatch 
method casts vm address type trivially implemented transforming call sites 
important type vm address collected space live point thread suspended interrupted collector 
methods manipulate addresses may require special techniques idiom suppressing yield points ensure safety 
vm address somewhat implemented behave intuitively analogy runtime semantics code runs boot image build time ordinary java class dereference methods access memory image built 
vm address java primitive type size xed speci cation natural width pointer underlying platform 
reason arithmetic methods casting int jikesrvm places dereference methods class jikesrvm recognizes methods special case code compiler 
long sure appropriate 
type vm word similar platform width quantities addresses dereference operations larger complement arithmetic logical ones 
casts vm address vm word free direction 

idioms ovm important ovm idioms types 
primitive idioms implemented early adding dedicated special code ovm class loading transformation machinery 
primitive idioms tags 
access new ovm functionality new idioms built existing ones implementing code localized modules added 
compound idioms best seen guarded idioms primitive idiom serving guard tag 
primitive ovm idioms marker interfaces marker interfaces common idiom tag entire class interface special 
ovm example ephemeral interface tag classes boot image building need excluded image converse idiom tag class live na reachability declares dead 
pragmas pragma exception mechanism ovm contributed jikesrvm developed di erently platforms 
subclass parent various concrete pragmas tag methods mentioned throws clauses 
re ection throws clauses records presence pragmas special treatment interpreter compiler 
jikesrvm developed subclasses handled directly jikesrvm compilers ags inlining optimization 
system pragma implies special code compiler tests acts appropriately 
design choices ovm pragma especially useful primitive idiom 

ovm pragma mechanism allows class hierarchy delimit families related pragmas detected testing common ancestor 
new pragmas added family new compiler interpreter modi cations 
essence roundabout way getting tags parameters jsr tagging available may allow doing explicitly simpler mechanism 

ovm transforms incoming bytecode ir common input execution modes interpret compile 
pragma ect stated transformation ir added touching interpreter compiler de ned semantics independent execution mode 
class accessed re ectively require treatment 
reserved exception types throws clauses appear tag idioms 

ovm transformations ir include ects pragmas replacement highlevel java operations lower level sequences performed iteratively xed point reached 
allows ect pragma expressed high level ir constructs may include idioms long cycles avoided 
choices ovm ectively decoupled certain pragma families interpreter compiler internals new useful pragmas added small self contained modules de ned near code tag 
pragma facilities compared notion pragma hierarchies simple extension pragma mechanism easily jikesrvm 
chief bene pragmas de ning new behavior added compiler modi cations limited jikesrvm single ir execution modes new behavior de ned compiler speci cs 
jikesrvm pragma semantics may vary compiler compile method may change adaptive recompilation proposals new behavior consider jikesrvm compiler able recognize idiom 
useful ir transforming pragma name implies tags method bring simplest case ect input java bytecode converted ovm ir call sites tagged method replaced instruction sequence bound pragma leaving original method body dead 
applications methods behavior host jvm image building run time 
host jvm unaware pragma idiom runs original method body substitute code run time 
technique useful give method behavior contexts implementation possible 
code call method build time run time 
methods behavior java 
cast int trivial replacement callsite achieve desired non java behavior operations corresponding standard java bytecodes unusual sequence new ir operations java equivalents combination behavior achieved multiple ways representing points design space balancing size typability ovm ir simplicity pragma de nition complexity components consume ir 
permit source idiom instance method call types vm word vm address oop object transforming callsite inline code dynamic dispatch 
limited inlining xed sequence instructions place call site 
pragma family bound rewrite method receives control ovm ir editing framework positioned callsite tagged method 
method behavior de ned peephole transformation ir method call site variable context ovm con guration selections 
compound idioms unchecked cast bit eld idioms ovm compound idioms pragmas involve simple ir transformations single invoke instruction carrying tag 
de ning requires subclassing create new tag binding rewriter recognize new idiom transform callsite ir 
vm configurability ovm framework building virtual machines assembling components thread implementations memory management algorithms schedulers language support specialized selected problem domain 
job selecting components implementations include vm ovm shares jikesrvm uses preprocessor conditional compilation combined shell scripts select source les containing implementations class 
ovm approaches problem combination aspectj factory pattern called 
classic factory interface class describes component factory methods implementation selected vm con guration 
pattern address performance objection indirection factory eliminate editing java sources specify concrete implementing class 
illustrates mechanism 
public static throws return ovm core domain stitched factory method 
returns singleton implementing class 
code transformation call sites replaced constant loads singleton 
call sites method may execute boot image building ovm run time semantics obtain singleton instance concrete factory instantiated re ectively looking class name user con guration le 
host vm method fact called obtain result 
run time call site remains 
ect pragma call sites transformed ldc correct singleton constant pool 
pragma nested class completely de ned lines source le 
de ned modi cation ovm interpreter compiler 
transformation method ir instruction invokes method tagged pragma pragma rewriter rewriting 
method descriptor retrieved instruction return type identi es factory su cient information look con gured implementation replace invoke instruction ldc 
repeated application technique applied level 
example eliminates indirection obtaining concrete factory 
factory interface de nes methods return objects 
methods carry pragmas 
factory initialized rst add mappings concrete classes returned methods 
call sites methods transformed ldc singleton direct new concrete class touching factory 
achieve source code classic factory style con guration source editing correct execution host jvm runtime performance direct ldc new 
object models follow bacon term object model collection data associated object support language runtime operations 
abstractly object model de nes data interface getting setting 
concrete model determines association managed words object header commonly involved 
con places demands object model levels 
di erent components con gured vm different styles garbage collector synchronization manager call di erent object models accessors speci data components need 
set components xing model concrete models pack data cleverness compared 
support memory management strategies goals common ovm jikesrvm vms provide con gurable object models 
describe rst mechanism suggest comparative strengths 
object models ovm transformation ovm ir arbitrary types may exist constant pool loaded ldc 
shows oop interface describing minimal interface vm requires object model 
name suggests object oriented pointer address known object vm view wanted programmer 
public interface oop blueprint throws int throws vm address throws oop throws oop interface minimal vm view object 
objects course implement oop value static type oop obtained unchecked cast idiom methods oop invoked natural java syntax obtain blueprint ovm type dispatch structure default identity hash address object rst eld component 
pragmas ect rewriting call sites non dispatching inlined code 
rewriter method obtains correct code inline asking object model concrete class extending con gured 
despite con familiar factory pattern remains ir call site model operation bare instruction sequence retrieve store data 
public interface extends oop monitor throws void throws synchronization component view object 
public interface extends oop void vm address throws boolean throws vm address throws memory management component view object 
figures show interfaces added object model synchronization component simple copying allocator collector respectively 
interface describes corresponding component needs object model 
component manipulates objects simply casting unchecked model interface interface methods familiar java syntax 
oop idiom recognized rewritten away unchecked cast 
con level component selection object model comes free design 
pluggable vm components model interfaces independent unaware included con guration excluded 
components included ovm con guration selected xing object model concrete object model provided implements chosen interfaces 
new concrete object model subclassing implement necessary interfaces register instruction sequences inlined supported methods 
concrete class created hand 
contains place implementations independent model interfaces place consider known relationships redundancies data devise compact ecient concrete format 
example exploit knowledge blueprint retrieved forwarded object arrange forwarding address occupy blueprint slot 
bit eld idiom may advantage concrete object model 
write concrete models exploring di erent ways pack model straightforward 
example existing models di er object monitor kept header slot ancillary hash map 
simple syntax obtains monitor case 
object models compared comparison jikesrvm pluggable object model mechanism ovm model ovm concrete model concrete 
jikesrvm partitions object model vm dispatch hashing synchronization vm allocator collector data vm 
di erent versions con gured source substitution 
ovm pragma mechanism tag methods interface possible ovm straightforward model independently selectable interfaces 
concrete side jikesrvm model allows vm export available unused bits way accessor methods vm vm pack data bits 
mechanism available allocator header misc header register number available bits need 
overhead mutual nested calls access bits presumably aggressive inlining optimizing compiler 
contrast ovm approach ort automate composition concrete model look interfaces supported write concrete model available java mechanisms inherit reuse functionality existing models course 
believe simpli es ovm model appreciably sacri cing composability premium nding clever packing schemes limited value exporting bits arbitrary partitions sure appreciable composability sacri ced 
ovm concrete object model supplies ecient ir instruction sequences operations object model image building time host vm 
touched see structure cvs repository www ibm com developerworks oss cvs jikesrvm rvm src vm indispensable 
object model operations interpreted compiled mode execution 
optimizing compiler achieve speedup relied simply operations reasonable 
harder compound idioms compound idioms ovm demand slightly powerful recognition simpler 
unchecked cast example unchecked cast idiom seen section 
idiom form method carries pragma represents unchecked cast 
idiom recognized java bytecode invocation method followed checkcast instruction invocation check removed 
java compiler enforces cast compatible declared return type method declaring return oop impose control idiom 
pragma serves vm address declare method unrestricted unchecked cast 
unchecked cast idiom trivially works code executes host jvm image build time semantics cast checked case 
opportunities de ne elds contiguous bits word common vm example eciently packing object model data encoding operands compact ir 
bit eld operations context frequently executed 
java shift logical operations sucient manipulate bit elds necessary elds widths sets computed run time 
ante additional design goals common case prede ned bit elds 
optimize operations prede ned bit elds 
architectures instructions immediate operands better purpose code produced general case java mask shift sequence 
improve expression intent source code dedicated methods get set portions word named bit eld declaration longer expression ands shifts ors 
methods typically slightly di erent purposes 
object model depends permit syntax oop method invocation objects type oop 
chief purpose allow programmer save cost checking cast vm address actual type type known 
support object model casts vm address oop host jvm java objects represent vm address hosted case declared concrete object model obtained implement set interfaces making supported object model 
goals complement de ning simple source level idiom bit eld manipulation able simple idiom recognition put appropriate operations ir 
alternative highly optimizing compiler determine analysis sequence bit operations involve constant mask shift operands emit desired code 
introducing simple idiom programmer intent explicit reduce reliance optimizing compiler get bit eld code simple compiler recognizes corresponding ir instructions 
development idiom guided criteria support bit elds code runs image build time run time 
idiom choose meaningful java ect bit eld operations running untransformed host jvm 
motivation requirement facilitate code re build time run time operations willing accept bit eld operations host jvm may cient transformed equivalents run time 
isolate code platform word size 
provide bit eld methods parameter return types vm word uses methods valid independent platform word size 
provide methods set retrieve bit eld int long de ne valid bit eld ts desired type property depends bit eld de nition code architecture 
provide methods access bit eld shifting semantics normalizing value retrieved stored bit eld significant bit unit place masking speed shift needed 
keep syntax declare bit eld reasonably simple subject constraints 
avoid requiring bit eld name repeated text varied width shift values 
get set word int long variants variants total complement bit eld operations comes twelve methods 
instance methods vm word parameter method type bit eld 
illustrates idiom 
idiom recognized replaced ir access static eld bf immediately preceding argument invocation bit eld methods vm word set gure 
idiom heaviest demands far ir editing framework vm word method tagged 
reason non deprecated methods cast vm word primitive integral types 
class extends static nal int width shift static nal bf bf width shift set hashed moved bf de ning bit eld 
value hashed moved stored bits vm word bit eld set known mention bf eld parameter set method 
entire idiom recognized replaced ir bit eld access 
code executes correctly host jvm ciently method call really happens 
pragma rewriter look backward control ow nd preceding static eld access identify bit eld 
ir editing framework especially convenient looking backward bit eld idiom cleaner best devise recognition pure linear scan 
idiom lends steps 
rst step implement guard pragma rewrite method rst recognizes idiom transforms ir sequence existing instructions right ect 
requires coding pragma touch interpreter compiler code run test system intended semantics 
second step introduce new dedicated ir instructions update pragma rewrite method emit 
point update interpreters compilers implement new ir instructions 

small set primitive tag idioms able implement useful compound idioms ovm con ning new code new modules ected 
developed idioms familiar java syntax source level familiar recognizable design patterns problems vm con guration involve ad hoc techniques prior recognize idioms produce code indirection ineciency weigh familiar patterns 
bit eld example shows capabilities ir analysis editing framework ect universe idioms devise 
current ir peephole editing framework sucient support selection useful idioms comfortable syntax 
clearly tradeo adding common ir java bytecode converted mode execution 
balancing bene easily added new behavior de ned semantics time required conversion ir may compact bytecode require allocations ir choices register stack may amenable direct interpretation fast compilation 
resembling high level hir format jikesrvm optimizing compiler ideal common ir time generate impose slowdown baseline compiler 
ovm common ir compact stack executable representation reason 
choice transformations ir iteratively xed point complicates tradeo cost current representation need resolve relative sets variable size instructions transformation pass 
opportunity compare di erent points ir design space balance compactness executability cost manipulation 

bowen alpern richard attanasio john barton anthony cocchi susan flynn hummel derek lieber ton ngo mark mergen janice shepherd stephen smith 
implementing jalape java 
michael berman editor conference object oriented programming systems languages applications pages 
acm press 
david bacon stephen fink david grove 
space time ecient implementation java object model 
magnusson pages 
greg james gosling benjamin peter steve mark turnbull 
real time speci cation java 
java series 
addison wesley 
www com pdf 
erich gamma richard helm ralph johnson john vlissides 
design patterns 
addison wesley 
david william pugh jaime 
atomic instructions java 
magnusson pages 
gregor kiczales erik hilsdale jim hugunin mik je rey palm william griswold 
overview aspectj 
rgen knudsen editor ecoop object oriented programming th european conference budapest hungary proceedings volume lecture notes computer science pages berlin heidelberg new york june 
springer verlag 
boris magnusson editor 
ecoop object oriented programming th european conference spain proceedings volume lecture notes computer science berlin heidelberg new york june 
springer verlag 
baker yamauchi vitek 
engineering customizable intermediate representation 
technical report purdue university department computer sciences 
pottenger eigenmann 
parallelization presence generalized induction reduction vivek sarkar question jikesrvm presentation march variables 
technical report univ illinois urbana champaign center supercomputing research development january 
