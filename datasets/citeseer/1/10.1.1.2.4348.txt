understanding uml formal semantics concurrency communication real time uml werner damm bernhard amir pnueli angelika oldenburg germany damm de weizmann institute science rehovot israel amir wisdom weizmann ac il 
define subset krtuml uml rich express behavioural modelling entities uml real time applications covering aspects active objects dynamic object creation destruction dynamically changing communication topologies inter object communication asynchronous signal communication synchronous communication operation calls shared memory communication global attributes 
define formal interleaving semantics kernel language associating model krtuml symbolic transition system sts 
outline compile industrial real time uml models making generalisation hierarchies weak strong aggregation hierarchical krtuml propose modelling guidelines real time applications uml 
provides semantical foundation formal verification real time uml models described companion 
establishment real time profile uml proposal uml action language installation special interest group shared omg develop profile uml addressing specification real time systems system level reflect pressure put standardisation bodies give rigorous foundation increasing level usage uml develop hard real time systems 
increased safety critical applications mandates need complement modelling oriented activities agreement formal semantics employed modelling constructs prerequisite rigorous research partially supported german research council dfg priority program integration specification techniques engineering applications da information society dg european commission project ist omega correct development real time embedded systems 
werner damm bernhard amir pnueli angelika formal analysis methods formal verification compliance requirements 
need perceived research community leading substantial body formalisation various subsets uml discussed detail section 
precise uml group series papers proposing meta modelling approach lacks capability address dynamics aspects level detail required formal verification 
approaches translation existing formalisms calculus asms casl object fall short covering rich range behavioural modelling constructs covered 
closest addressing intricacies understanding active objects 
approach takes account functional aspects real time systems considering discrete time model levels granularity 
focus investigation semantic foundation critical features real time applications concurrency including specification time points interferences types inter object communication synchronous operation calls asynchronous signal event emission 
described approach benefits numerous discussions industrial users employing uml tools development real time systems partners ist projects omega ait ist project omega developed agreed specification modelling concepts uml required support industrial users application development deliverable ist wp subsuming concepts inheritance polymorphism weak strong aggregation hierarchical state machines rich action language active passive reactive objects account detailed issues navigability visibility changeability ordering association points allowing unbounded multiplicity 
propose stage approach give formal semantics precompilation step translates models sufficiently compact sublanguage krtuml eliminating need kernel level address various facets associations inheritance polymorphism hierarchical state machines 
give formal semantics krtuml formalism symbolic transition systems 
semantic framework state space transition system valuations set typed system variables initial states transition relation defined order predicate logic 
show capture complete snapshot dynamic execution state uml model unbounded arrays object configurations maintain current status objects pending request table modelling status submitted served operation calls 
object configurations include information valuation object attributes state configuration state machine pending events collected event queue 
due space restrictions focusses definition formal semantics krtuml sketches ideas precompilation phase 
ist www omega imag fr index php ist intranet gr understanding uml refer reader full description step specification 
organized follows 
section gives formal definition constituents krtuml model 
section heart develops sts semantics motivating introducing consecutive sections system variables spanning state space transition systems transition relation 
section highlights aspects pre compilation step addressing inheritance aggregation 
section discusses related 
krtuml language developing krtuml maintain purified form ingredients uml relating interaction active objects 
intuitively active object instance active class event driven task processes incoming requests fashion 
comes equipped dispatcher picks top level event event queue dispatches processing state machine passive reactive objects associated active object inducing called run completion step 
generalize concept section proposing group active object collection passive server objects call components 
component passive objects delegate event handling active object component pre compilation capture delegation relation allowing refer ac active object responsible event handling passive object 
semantical model rich support communication shared attributes operation calls signals restrict communication model inter component communications purely asynchronous signal events 
kernel language caters difference active passive objects 
objects assumed reactive behaviour dependent current state system 
support called triggered operations operation calls return value depends current state system distinguished call primitive operations body defined program supported action language 
primitive operations involve services object component pre compilation eliminate calls primitive operations inlining assuming call depth primitive operations bounded 
contrast triggered operations willingness object accept particular operation call state expressed state machine labeling transitions emerging state operation name triggering guard style willingness object react signal event specified signal triggering guard 
reflecting wish return value triggered operations dependent object state notion components restriction general concept standard uml 
consider kind components containing exactly active object 
werner damm bernhard amir pnueli angelika body spread state machine acceptance call induce run completion step transition labels passed run completion step determine response particular invocation triggered operation 
pre compilation flattened hierarchical state machines flat state machines considered kernel language 
split compound transition annotations kernel language atomic actions triggering guards signal operation names possibly conditions allowed labels transitions 
elaborate formal definition krtuml models 
note different ingredients mutually dependent collect formal definition 
definition krtuml model 
krtuml model consists elements sig void ib set basic types comprising booleans natural numbers 
set typed predefined primitive functions 
sig finite set signals 
instance signal called signal event event brevity 
sig sig generalisation relation signals transitive closure irreflexive ev ev denotes ev generalisation ev 
denote reflexive transitive closure 
finite non empty set classes 
class consists isactive attr ops sm isactive predicate 
class called active iff isactive true 
attr finite set typed attributes may type void 
ops finite set typed triggered operations 
sm state machine explained terms actions expressions 
class contains specific implicit attributes introduced preprocessing self attr keeping object ac attr specifying event handling object associated class class root object serving specify system initialisation defined definition 
subset active classes called actors denote external objects part environment 
understanding uml krtuml allows set base types set functions operating including particular booleans natural numbers logical arithmetical operators 
signals operations may parameters defined types 
note support explicitly generalisation hierarchies signals generalisation hierarchies objects eliminated pre compilation 
elaborate elements krtuml model defined far start defining supported types 
clear distinguish base types types visible uml level third category types catering implicit attributes representing association points typically hold number depending multiplicity 
choosing type uniformly functions naturals classes cater unbounded multiplicity 
operationally view implicit attributes unbounded arrays index pointing associated object class containing nil pointer 
definition continued typing krtuml model defines set types df tc tas tc df tc set types tas df tc set association types represent kinds associations described composition aggregation neighbour 
type assume existence designated element nil default value 
type denote type attributes functions follows class attribute attr type denotes type attr type self tc tc type ac tc 
class triggered operation op ops type par op tn denotes parameter type ti type th parameter type op denotes type reply value type op void op yield return value 
type op defined type op type par op type op 
type par tn denotes parameter type ti type th parameter type denotes value type type type type par type 
ev sig type par ev tn denotes parameter type ev ti type th parameter 
introduce expression language supporting navigation expressions accessing objects association points closing application base type functions including equality boolean operations 
expressions terms defined scope class transition werner damm bernhard amir pnueli angelika guards actions class 
definition continued ii expressions class expression expr defined inductively follows navigation expression expr attr type tc tc attr 
set type expr df type 
note consider flat navigation expressions krtuml refer object self 
association access expr expr expr expr expr expressions type expr tc tas type expr 
set type expr df tc 
function application expr expr 
expr expr 
expr expressions type expr matches type th parameter define type expr type 
definition guards actions state machines expr expr expr denote expressions 
guards just boolean expressions express willingness accept signal event operation call possibly conjoined boolean condition 
definition continued iii guards class triggering guard state machine class guard short signal trigger ev expr ev sig type expr ib 
call trigger op expr op ops type expr ib 
condition expr type expr ib 
support rich action language allowing object creation destruction operation calls event emission assignments attributes association points 
expression passed object creation intended pass identity active object responsible event handling 
reply actions serve define return value triggered operation 
definition continued iv actions primitive action state machine class action short object creation expr attr type tc tc attr type tc tc type expr type ac 
understanding uml object creation association place expr expr attr type tc tc attr type tc tas type expr type expr type ac 
attribute assignment expr attr type tc tc attr type type expr 
association place assignment expr expr attr type tc tc attr type expr type tc tas type expr tc 
event emission send ev expr 
expr attr type tc ev sig type expr type par ev 
operation call ignoring reply value call op expr 
expr attr type tc op type ops type expr type par op 
operation call assigning value call op expr 
attr type tc tc attr attr type tc op type ops type expri op type op 
operation call assigning value association place expr call op expr 
attr type tc tc attr attr type tc op type ops type expri op type tas type expr op setting reply value reply expr tc type expr 
object destruction destroy expr type expr tc 
triggering guards actions appear decorations transitions statemachine class 
assume designated destruction state 
pre compilation extend user defined state machine pre fixing initial state sequence transitions modelling constructor actions destruction state unique entry point section added pre compilation modelling destructor code 
pre compilation transfers hierarchical statecharts flat state machines extended destruction state having incoming transitions 
definition continued state machines state machine class tc tuple finite set states 
initial state 
sm qx tr werner damm bernhard amir pnueli angelika qx destruction state mark destructor actions 
tr guard action transition relation 
krtuml denote set krtuml models 
note krtuml level intentionally inheritance relation classes class inheritance explained uplink downlink neighbour associations uplink downlink attr superclass preprocessing step 
uplink association model static polymorphism downlink association allows capture dynamic 
note association access restricted accessing single index krtuml level operations iteration associations adding 
assume operations explained terms primitive actions preprocessing 
identification actors considered necessary semantical point view actors treated active class 
information object actor instance exploited formal verification objects need necessarily encoded ordinary objects interpreted assumption environment behaviour expected sequences input stimuli 
assume preprocessing step outlined subsection establishes set requirements regarding sets attributes state machines krtuml model rely section explaining semantics 
attribute triggered operation names classes pairwise different example qualified class name states state machines pairwise different 
ii class attr contains attribute ac store responsible active object ac type tc isactive true 
iii values implicit attributes self ac assigned initialization corresponding object change life time object 
iv triggered operation op ops attributes op pi attr hold local copies parameters typed 
op 
op pn type par op ev sig willing receive transition ev expr tr attributes attr hold local copies signal parameters typed 
type par ev 
krtuml semantics understanding uml give semantics krtuml terms symbolic transition systems proposed name synchronous transition systems 
separate subsections derive types krtuml models type structure related symbolic transition systems introduce system variables required represent snapshot dynamic execution krtuml model 
elaborate way snapshots evolve defining possible cases transition predicate 
define predicate characterizing initial snapshots collect pieces transition relation full predicative definition transition relation leading definition symbolic transition system associated krtuml model 
symbolic transition systems introduce semantic model symbolic transition systems allow purely syntactical description transition system order logic predicates set typed system variables 
definition sts 
symbolic transition system sts consists finite set typed system variables order predicate variables characterizing initial states transition predicate order predicate referring primed unprimed versions system variables current states 
sts induces transition system set interpretations variables follows 
definition runs sts 
st set types variables semantic domain 
snapshot type consistent interpretation assigning variable value domain 
denotes set snapshots 
ii snapshot inductively defines value expr order predicates expr value expr order predicates expr provides interpretation unprimed interpretation primed variables expr 
iii snapshot called initial iff true 
iv snapshots snapshot called successor iff true 
computation run infinite sequence snapshots 
satisfying requirements werner damm bernhard amir pnueli angelika initiation initial 
snapshot sj successor sj 
vi set computations denoted runs 
denote th snapshot run runs df 
denote infinite suffix starting 
system variables krtuml semantics motivate choice types system variables snapshots related automated rail car system described model autonomous rail bound cars transport passengers terminals adhere simple arrive departure protocol allocate de allocate platforms inside terminal 
refer reader details 
cruiser car 
status self speed cruiser 
exe sc eq ds ds system configuration object configuration ac dest par dest ev par dest ev par fig 

system configuration variable type contains object configuration object identifier oc 
example object configuration object car shown enlarged 
depicts way object configuration captured 
shows enlarged entry object class car currently executing 
current state machine configuration illustrated state machine fact current state stored 
object gives current valuation attributes current state configuration maintains current object status elaborated event queue active objects dispatcher status active objects enforce single thread control objects grouped component 
semantic entity representing single class potentially unbounded array object configurations entry corresponding single instance class 
object status reflects life cycle object see 
prior creation objects perceived dormant 
creation new object instance pick dormant index corresponding class awake object realities life 
life objects suspended waiting completion operation call idle special case understanding uml discussed stable run completion step terminates 
happens reaching state outgoing transitions guarded signal triggers form ev expr call triggers form op expr conditions form expr evaluated false 
particular case accepting destruction object status switch dying remaining status run completion step induced objects destructor completed 
object status remain dead 
note destruction aggregate object composition association defined induces destruction parts dying may long painful process 
semantics allows observe sending events dying objects detecting dangling 
dormant create queue empty pending calls locally enabled transition idle executing suspended take event accept trig 
op 
initiate trig 
op 
call alive stable pick result destroy fig 

object life cycle 
dying destruction completed rest current section sig krtuml model 
define semantic types employed definition associated symbolic transition system semantic domain semantic types 
type system semantic types subsumes types krtuml model 
definition object types domains 
basic type assume existence corresponding semantic type domain type tc tc denote oc ttc corresponding seman tic type choose doc df domain 
call oc domain doc df doc object type resp 
domain 
object type oc assume existence designated element doc serve default value 
association type tc tas df doc domain 
define semantic type system configurations associated domain defining semantic type object configurations 
dead werner damm bernhard amir pnueli angelika definition object system configuration 
object configuration status ac sc eq ds consists elements object status status type associated semantic domain df dormant idle executing suspended dying dead 
object attribute configuration ac type tac df attr tt 
object state machine configuration sc type tsc associated semantic domain df event queue eq type df sequence entries dest ev par type df oc sig ev sig ev 
event queue entry dest denotes destination ev event type signal name par event parameters 
denote empty event queue 
dispatch ds type tds df oc object class denote object currently processing event 
type object configuration df tac tsc 
tds ii type system configuration df oc 
iii call component set cm ac objects assigned event dispatcher symbolic transition system uses variable sconf maintain object configuration objects note general assignment event dispatcher reactive object user defined 
default assignment derived composition association 
cruiser car 
dest op cruiser engage status pending result nil params nil pending request table pending request table entry fig 

pending request table pending request table system variable type 
contains entry object identifier oc 
understanding uml collect status pending operation calls pending request table 
example shows enlarged entry calls object class car 
currently call triggered operation engage cruiser pending 
exploit fact objects suspended calling operation 
maintain status operation calls table indexed sender objects resp 
actors 
entry pending request table maintains identity receiver name requested operation list parameters result field status information 
life cycle entry pending request table depicted 
object owning entry emits new operation call status entry switches pending 
remain status receiving object willing serve call causes status switch busy 
run completion step induced accepting call terminated result call entered result field entry status changes completed 
allow calling object pick result resume computation causing status entry unused 
caller calls callee accepts callee unused trig 
op 
pending call busy stable completed caller picks result fig 

life cycle triggered operation call 
definition pending request table 
pending request table entry dest op status result params maintains receiver triggered operation call dest type associated semantic domain df oc 
triggered operation identifier op type top associated seman tic domain dtop df ops 
triggered operation status status type semantic domain df unused pending busy completed 
result reply result type tres associated semantic main df op ops type op 
parameters params type associated semantic domain df op ops type par op 
werner damm bernhard amir pnueli angelika type pending request table entry df top tres 
ii type pending request table df oc 
symbolic transition system uses variable prt maintain operation requests objects furthermore need boolean flag sysfail indicate undefined state system tried read attribute object nil type reply action match type currently processed triggered operation 
performing arithmetic computations raise flag failure situations division 
initially sysfail set false remains set changed true 
transition predicate intuitively transition snapshots exists exactly object oc configuration changes reasons object idle event dispatched active object event destination discarded enabled state machine 
coarse granularity flow control kept elements ds active objects configurations 
object idle accepts triggered operation call 
fine granularity flow control kept elements dest pending request table 
object executing dying unstable takes transition statemachine executing action 
changes flow control 
object suspended picks result triggered operation call completed callee 
fine granularity flow control kept dest prt 
system may remain snapshot object executing implying pending request table empty event queues empty 
formalize conditions separately firstorder logic predicates construct transition predicate semantics 
brevity abbreviations oc definitions predicates sconf prt status df sconf status analogously sc ds eq 
df sconf value attribute df sconf sconf attributes type 
denote simultaneous assignment th components corresponding attributes event operation parameter tuple ev understanding uml primed abbreviation indicates primed system variable example sconf event queue 
en introduce abbreviations head df denotes entry queue 
tail df 
en denotes entry removed 
enqueue df denotes result appending entry brevity assume boolean expressions expr evaluated example tried read attribute value nil 
note incremental definition transition predicate symbol processed explicated definition yield final transition predicate 
informally symbol indicates difference current states system variables specified explicitly sequence expressions constituents 
denote logical df 
define object oc predicate stable current system configuration follows stable df tr sc ev expr sysfail sysfail expr op expr sysfail sysfail expr expr expr sysfail sysfail expr getting event 
formally event ev destination dispatched event queue active object object active object currently processing event transition guarded superclass ev ev enabled originating current state cf 
get event df ev expr ac ds nil expr true sysfail sysfail expr ac eq head ac eq dest ac eq tail ac eq ev sig head ac eq ev ev ev ev stable ac ds status executing ev head ac eq par ev expr op expr expr means label current transition form ev expr op expr expr resp signal trigger call trigger condition resp cf 
definition iii 
werner damm bernhard amir pnueli angelika sconf status idle ac ep ep sc ac eq eqi ds nil ev expr eqi ev ev ev 
tail eq get event status exec ac ep ep sc fig 

transition relation get event 
ac eq eqi ds ev expr sconf eqi tail eq element ac ds equal nil locks component processing signal event 
released component start process event new run completion step computations component completed 
note exploit fact syntactic category boolean expression definition krtuml models subsumed expression language order logic define transition predicates 
particular defined abbreviations apply expressions transition predicates providing intended relation sconf 
accepting triggered operation 
object accept triggered operation call op transition guard op enabled current state object called op accept op df op expr expr true sysfail sysfail expr oc prt dest prt op op prt status pending stable prt status busy status executing stable prt status completed prt result nil op prt op note object call trigger operation object component restrictions inter component communication 
ac ds ac ds execution operations rtc step change control objects level communication captured prt dest prt status 
skipping guards 
object take transition guarded boolean expression expression evaluates true skip guard df expr expr true sysfail sysfail expr understanding uml discarding events 
event object queue active object willing accept transition matching signal enabled event simply discarded discard event df ac ds nil ac eq head ac eq dest ac eq tail ac eq ev expr tr expr false ev head ac eq ev sysfail sysfail expr note triggered operation calls discarded remain callee accepts call 
executing actions 
object execute action current transition enabled annotated action 
distinguish types actions operation calls actions treating separated subformulas 
subformulas combined different contexts conditions performance final transition predicate 
assignment action simply assigns value destination 
event sending action causes new event appended queue destination active object 
reply action causes parameter value written reply field pending request table processes call object system failure indicated 
destroy action causes destination state machine configuration changed qx current state status dying 
subsequent steps execute actions destructor 
killing dying dead object causes system failure non op action df expr expr expr sysfail sysfail nil expr send ev expr 
sysfail sysfail nil expri ac eq enqueue ac eq ev expr 
expr reply expr oc prt dest prt status busy prt result expr sysfail sysfail type expr sysfail true werner damm bernhard amir pnueli angelika destroy expr expr oc expr nil ac ac status dormant dying dead sc qx stable status dying stable status dead sysfail true operation call action suspends object configures entry pending request table denotes callee called triggered operation parameters 
initially status operation pending 
creation action handled triggered operation caller block object desired class readily created inherited parts aggregated parts init create df call op expr 
expr call op expr 
expr ac ac sysfail sysfail nil ac ac status suspended expri prt dest prt op op prt status pending prt result nil prt op expr 
expr expr ac expr sysfail sysfail expr ac expr expr oc status dormant dying dead oc status dormant status idle isactive ac expr isactive ac status suspended prt dest prt op prt status pending prt result nil prt params nil status sc status sc sconf suspended dep idle disengaged sconf suspended dep executing disengaged sconf suspended dep idle engaged sconf call engage dep crs executing crs idle engaged car cruiser prt prt prt prt dest nil understanding uml op engage engage engage nil disengaged engage reply status pending busy completed nil engaged fig 

triggered operation call 
changing status caller callee called operation engage pending request table unprimed variables depicted time operation call values selected elements sconf prt 
stable 
object stable bookkeeping takes place 
processing event dispatch active object reset 
executing triggered operation pending request table status set completed event completion caller 
cases idle 
executing run completion step starting qx dead stable df stable ac ds ac ds nil status idle oc ret nil nil nil par prt dest prt status busy prt status completed status idle status dying status dead picking result 
object pick result previous triggered operation call callee set status pending request table entry completed pick result df prt status completed prt nil stable status executing call op expr 
expr nil prt result sysfail sysfail nil complete execution example triggered operation engage illustrated 
row tables show relevant part nil nil nil nil werner damm bernhard amir pnueli angelika system configuration time just entered call pending request table 
note taken transition remains previous state 
second row shows time just cruiser accepted call 
time just completed run completion step written result changed operation status completed idle 
indicator pick result time read reply value table clear table entry take transition 
executing continues run completion step assuming stable 
sts semantics krtuml model 
putting specifications different kinds transitions define semantics krtuml symbolic transition system system variables subsection initial condition combined transition relation specified definition 
definition krtuml model semantics 
sig krtuml model 
semantics sts sts system variables df sconf prt sysfail ib 
initial condition initially single object class exists status executing 
objects dormant attributes default values df status executing ds sc eq oc status dormant sc ds nil eq oc self attr nil type unique single object class alive run called root object transition relation intermediate predicate composes introduced subpredicates follows df oc status executing eq sysfail oc tr sc sc understanding uml status idle get event accept op status executing status dying skip guard non op action status suspended pick result stable sc sc status idle discard event status executing init create final transition relation obtained adding frame axiom requires places allowed change transition get new values assignment changing assignments 
semantics krtuml model set runs sts computations easy see effectively restricts activity object resulting interleaving actions different objects 
consequence definition definition formalises main properties described krtuml semantics 
consequence krtuml model runs sts sconf prt sysfail oc 
level computation concurrency sconf status sconf status executing cm cm objects different components executing time 
ii component interference points sconf ac ds nil oc sconf ac sconf ac sconf status idle dead dying 
object accept event objects component currently executing 
assessing expressiveness krtuml section indicate reduce richer uml models supported ist project omega krtuml subset defined section 
explain choice design decision formal semantics 
translating krtuml uml defines associations association points capture relations classes 
semantically association points maintain pointers objects werner damm bernhard amir pnueli angelika accessible association point subject restrictions visibility navigability 
precompilation introduces call implicit attributes translates code invoked creating compound objects establishing links employing set implicit operations add association 
note special type tas provided attributes krtuml model 
particular pre compilation create implicit attributes maintaining knowledge possibly dynamically created component objects strong aggregation called composition include calls creation component objects bounded multiplicity constructor code aggregate object contain calls destroying existing component object destructor code aggregate object 
regarding generalisation objects create private instances predecessors generalisation hierarchy creation compound objects induces creation components keep operations statecharts overwritten specialised objects 
allows capture static dynamic polymorphisms implicit attributes uplink downlink navigate instances find definition operations matching call 
require restrictions statechart inheritance sub class state machine overwritten independently corresponding super class 
private copies maintain object configuration accepting triggered operation change state configuration state machine corresponding object offering operation generalisation hierarchy 
statechart inheritance described considered particular case 
precompilation step transfers hierarchical uml statecharts flat state machines krtuml changing behavior 
states flattened state machine correspond state configurations set states original statechart extended history function keeping information history connectors 
statechart reactive class add kinds auxiliary states creation states 
qn outgoing transition guarded triggered operation followed constructor code initial state original hierarchical statechart 
statechart root class contain triggered operation creation transitions 
destruction state qx outgoing transitions containing destructor code 
state flattened state machine containing termination original statechart outgoing transition auxiliary state triggering guard action destroy self internal states necessary split complex transitions transitions containing non primitive actions 
note difference component object specified composition association part aggregate object level notion component group active passive objects krtuml level choice communication scheme understanding uml certain transformations pre compilation steps modelling assumptions 
elaborate concept components introduced definition iii 
targeting distributed system implementations real time systems synchronous operation calls clearly component communication 
estimation worst case execution time cater waiting delay receiving component able accept call may blocked awaiting serving operation call third component 
assume modeling style inter component communication restricted signal communication 
exploit allow grouping objects components component restrictions placed inter object communication 
pragmatics active objects uml mandate contains exactly active object allow include arbitrary number passive objects group 
active objects assumed reactive reactive passive objects required delegate event handling active object group 
eq crs cruiser ac car car ac hnd term terminal ac ac eq mgr comp comp fig 

uml components snapshot model part shows active objects car term event queues passive objects crs hnd mgr 
reactive objects car crs hnd denoted associated schematic state machines 
active objects car term designate components comp comp respectively 
figures illustrate concepts components intercomponent communication automated rail cars system example 
graphical representation snapshot model shows objects krtuml level 
reactive object link active object ac assumed constant object lifetime 
objects referring active object form component 
shows components single link component boundary 
event handling delegated component active object keeps events event queue 
event reached top queue active object may decide take werner damm bernhard amir pnueli angelika event queue dispatch destination 
indicated light gray arrows 
semantics section explained perspective destination 
eq crs cruiser ac car car ac hnd dispatch term terminal ac ac eq mgr comp comp fig 

event communication sending event car hnd fact enters event event queue term active object associated hnd 
semantics enforces single thread control active component 
feel deviating modelling paradigm particular allowing multiple threads execute object easily cause modelling errors acceptable hard real time applications 
related works attempts define uml semantics classified different orthogonal dimensions 
direction semantics classification level uml coverage 
people trying build semantics individual diagrams uml state machines collaboration diagrams class diagrams cases activity diagrams just give formal foundations action language 
diagrams views model attempts give semantics separated uml diagrams fail producing right semantics entire uml 
approach symbolic transition system represents static dynamic aspects 
combination statics dynamics considers problem defining active classes associated state machines 
gives fine interleaving semantics state machines terms transition systems 
difference approach authors give precise semantics state machines event queue handling consider limited inheritance treat flat uml state machines action semantics 
understanding uml coverage level relates problems possible concurrency aspects objects communication uncovered addressed original uml documents 
open problems typical called loose semantics introduced aspects concurrency object communication fixed design decision cover different implementations 
loose semantics suitable formal verification 
tries overcome problem fixing detailed semantics example feasibility uml semantic verification purposes 
side number uml modelling verification tools implementing precise semantics translating uml models programming language model checker internal formats 
tools different limitations supported uml features provide formal description implemented semantics just technical translations 
hu mann proposes third dimension classification attempts uml formal semantics dividing approaches groups naive set theoretic approach 
richters gogolla suggested simple set theoretic interpretation uml class diagrams 
approach semantics class diagram described set hypergraphs corresponding configuration objects 
approach low level abstraction concepts uml formal semantics 
kind semantics formal definition ocl constraints uml models 
consider ocl approach 
metamodelling semantics 
group approaches application bootstrapping principle semantics uml described small subset uml core static semantics 
approach group uml semantics 
essentially algebraic specification describe legal local snapshots system treating actions approach gives formal semantics dynamic behaviour account primitive action semantics 
study kleppe warmer oo meta modelling approach 
addition takes account static dynamic viewpoints system separated 
formal semantics state machines really defined set primitive actions restrictive transporting mechanism signal inter object communication specified 
approach give formal semantics actual state machines unfolding actions larger set primitive actions 
resolved open problems concurrency 
translation semantics 
approach tries keep right abstraction level defines translation uml class diagrams traditional specification languages object casl 
example reggio proposed general schema uml semantics extension algebraic language casl describing individual diagrams class diagrams state machines semantics composed get werner damm bernhard amir pnueli angelika semantics model 
uml diagram types translated formal notations state machines 
rger defined dynamic semantics uml terms asm extended new construct cover uml state machine features 
model covers event handling run completion step formalises object interaction combining control data flow features 
authors give complete solution solve transition conflicts clear transitions selected 
semantics implemented uml tool vendors code generation model simulation classified group approaches 
differently approaches study provides formalism sts static dynamic semantics contains action language 
combination approaches mentioned 
example combination approaches 
research static semantics defined meta modelling mechanism uml execution semantics expressed asm programs 
study covers features contained class diagrams body operations quite thorough set action types 
aspects inter object communications really covered semantics uml statecharts addressed accompanied complementary papers 
articles consider state machines separated rest uml approach provides semantics class diagrams statecharts 
respect approaches sketched main novelty approach resolves uncovered problems concurrency object communication giving formal semantics chosen concrete decision 
damm shown semantics formal verification 
approach allow active passive objects reactive considering event communication objects 
capture different kinds inter object communication synchronous triggered operation calls asynchronous signal events 
provided semantical foundation rich sublanguage uml expressive deal industrial uml models real time applications 
partners verimag proposed extensions semantical model focussed real time particular account need support annotations real time scheduling 
ongoing omega builds semantical foundation layed develop verification environment real time uml 
gratefully acknowledge contribution omega partners semantics 
understanding uml ab 
tau 
www com products tau index cfm 
alvarez clark evans sammut 
action semantics mml 
proc 
uml 
www cs york ac uk pdf 
rger 
asm semantics uml activity diagrams 
rus editor proc 
amast volume lncs pages 
springer verlag 
rger 
modeling dynamics uml state machines 
gurevich ph kutter odersky thiele editors state machines theory applications international workshop asm proceedings volume lncs pages 
springer verlag 
dblp dblp uni trier de 
clark evans kent 
metamodelling language calculus foundation semantics uml 
proc 
fase pages 
www dcs kcl ac uk staff tony docs ps 
clark evans kent brodsky cook 
feasibility study uml family languages precise oo meta modelling approach version september 
available www org 
clark evans kent sammut 
approach engineering object oriented design languages 
proc 
workshop language descriptions tools applications 
available www org 
compton shen 
semantic model state machine uml 
reggio knapp rumpe selic wieringa editors dynamic behaviour uml models semantic questions workshop proceedings uml workshop bericht pages 
ludwig maximilians universitt institut fr informatik october 
www edu papers uml ps 
rational software 
rational rose family 
www rational com products rose index jsp 
damm pnueli 
formal semantics uml kernel language 
omega technical report part deliverable project ist omega january 
available imag fr doc kl pdf 
damm 
live die lsc verification uml models 
proceedings 
appear 
engels heckel sauer 
dynamic meta modeling graphical approach operational semantics behavioral diagrams uml 
proceed 
international conference uml october 
evans france lano rumpe 
uml formal modeling notation 
modeling language international workshop june 
springer verlag 
evans clark 
foundations unified modeling language 
nd northern formal methods workshop electronic workshops computing 
springer verlag 
www cs york ac uk papers ps 
werner damm bernhard amir pnueli angelika harel 
executable object modeling statecharts 
ieee computer 
hu mann 
loose semantics uml ocl 
proceedings th world conference integrated design process technology 
society design process science june 
logix 
www com products index cfm 

kim carrington 
formalizing uml class diagrams object 
france rumpe editors proc 
uml volume lncs pages 
springer verlag 
kleppe warmer 
unification static dynamic semantics uml 
www klasse nl english uml unification report pdf 
kwon 
rewrite rules operational semantics model checking uml 
proceed 
international conference uml university york october 
lilius 
vuml tool verifying uml models 
turku centre computer science abo university finland 
technical report 
manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag new york 

design languages object oriented extensions executable semantics phd thesis 
institut national polytechnique de toulouse france april 
object management group 
uml action semantics final adopted specification ptc january 
available www kc com site home html 
object management group 
uml profile schedulability performance time specification ptc omg adopted specification march 
available cgi omg org docs ptc pdf 

formal specification object oriented meta modelling 
maibaum editor proceedings fundamental approaches software engineering fase number lncs 
springer verlag 

boom framework formal specification uml 
proceedings defining precise semantics uml 

formal approach cases relationships 
uml 
reggio astesiano choppy hu mann 
analyzing uml active classes associated state machines lightweight formal approach 
feas 
ftp ftp disi unige pub person reggio ps 
reggio cerioli astesiano 
rigorous semantics uml supporting multiview approach 
fase 
ftp ftp disi unige pub person fase pdf 
richters gogolla 
formalizing uml object constraint language ocl 

ling ram lee editors proc 
th international conference conceptual modelling er volume lncs pages 
springer verlag 
