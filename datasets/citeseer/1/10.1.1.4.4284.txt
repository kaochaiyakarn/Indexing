proceedings th ieee real time systems symposium rtss pages cancun mexico december 
ieee 
evolving real time systems hierarchical scheduling concurrency analysis john alastair reid kirk webb michael parker jay lepreau school computing university utah developed new way look real time embedded software collection execution environments created hierarchy schedulers 
common schedulers include run interrupts bottom half handlers threads events 
created algorithms deriving response times scheduling overheads blocking terms tasks systems containing multiple execution environments 
created task scheduler logic formalism permits checking systems race conditions errors 
concurrency analysis low level software challenging typically kinds locks thread mutexes disabling interrupts groups cooperating tasks may need acquire available types locks create correct software 
high level goal create systems evolvable easier modify response changing requirements systems created traditional techniques 
applied approach case studies evolving software networked sensor nodes 

focusing single abstraction concurrency events threads traditional models real time embedded software ignore great deal richness complexity actual systems 
example typical embedded system shelf realtime operating system rtos interrupts prioritized preemptive scheduler implemented hardware bottom half handlers software interrupts deferred procedure calls scheduled software threads scheduled preemptively rtos lightweight events run schedulers implemented individual os supported threads 
schedulers creates unique execution environment context running code particular performance characteristics restrictions actions taken inside 
furthermore pair interacting execution environments rules need followed implement mutual exclusion tasks running 
multiple execution environments exist developers exploit diverse properties mapping task appropriate environment 
example interrupt handlers incur little overhead provide inconvenient programming model blocking permitted longrunning interrupts unnecessarily delay tasks 
threads hand flexible block incur time space overhead 
concurrency structure system largely determined execution environments supports way tasks mapped environments 
example consider pair cooperating tasks 
tasks mapped event driven execution environment tasks mutually atomic run completion respect regardless preemption occurs parts system 
hand tasks mapped separate threads tasks potentially preempt acquire mutex accessing shared resources 
task mapped thread mapped interrupt handler preemption relation asymmetrical interrupt preempt thread vice versa 
case thread disable interrupts accessing resource shared tasks interrupt need take special action 
systems tend evolve time features requirements accumulate underlying platform changes accommodate newer better hardware 
systems designed exploratory way code initially structured simple apparently adequate way generalized times en working system created 
systems evolve commonplace task moved new execution environment 
small changes moving task event preemptive thread thread interrupt easily break previously correct system 
example code moved interrupt context accesses blocking lock new system risks crashing illegal block interrupt mode 
far obvious possible piece code transitively call blocking function 
similarly code moved event thread shares resource event run scheduler new system contains potential race condition 
problems difficult detect small change structure execution environments system implemented changing lines code suddenly requires concurrency assumptions thousands lines code reexamined modified 
main contributions engineering analysis real time systems 
section elevate execution environments class concept better understand validate real time software 
previous real time systems focused single execution environment usually preemptive multithreading environments distinctly second class 
framework making generalized adjustments mapping tasks execution environments order help tasks meet deadlines 
emphasis real time techniques guide system design opposed traditional real time analysis returns binary result schedulability 
particular trying create evolvable systems flexible gracefully adapt faced changes requirements inevitable time passes 
second contribution section develop analyses collections execution environments 
show feasible compute response times dispatching overheads blocking terms tasks real time systems hierarchy preemptive nonpreemptive priority schedulers 
developed task scheduler logic tsl formalism derive check rules concurrency execution environments 
third contribution section empirical evaluation approach solve problems meeting real time deadlines software networked sensor nodes 
irq process cpu high low low high mouse disk network clock fifo network bh disk bh 
scheduling hierarchy unix operating system 
clock network interrupt handlers network bh disk bh bottom half handlers processes 

hierarchical execution environments real time embedded software structured collection execution environments 
section explain point view describe useful 
definition execution environment informal set properties created instance scheduler global context interest developers 

example structure familiar readers generic unix scheduling hierarchy example depicted 
subsequent figures preemptive schedulers bold oblique font non preemptive schedulers oblique font entities hierarchy standard font 
top unix hierarchy root scheduler cpu runs interrupts possible times runs process scheduler user mode context 
interrupts prioritized irq scheduler implemented hardware software interrupt running lowest priority 
software interrupt handler contains scheduler uses fifo scheduling policy runs bottom half handlers completion 
scheduling hierarchies real time operating systems nearly identical shown 

execution environments 
viewing system hierarchy execution environments useful reasons 
facilitates understanding reasoning scheduling concurrency relations 
second hierarchical scheduling view system useful general notation succinctly describe different system architectures helps focus attention important similarities differences systems 
example rtlinux virtualizes cpu interrupt controller adding new root new thread scheduler scheduling hierarchy 
tinyos contains execution environments equivalent bottom half traditional operating system lacking preemptive thread scheduler 
applications extend scheduling hierarchy running new schedulers process thread context 
example event driven web server adds new non preemptive scheduler hierarchy scientific application add preemptive user level thread scheduler 
unix processes implicit signal scheduler preempt main flow control 
diversity execution environments unix illustrates little consequence majority programmers write code runs process context 
people developing embedded realtime applications frequently opportunity write code available execution environments order create code meets timeliness efficiency goals 
hierarchies discussed superficially similar previous hierarchical cpu scheduling hls concerned modular reasoning compositions schedulers 
described differs addresses heterogeneous mixes execution environments safety issues race conditions 
previous hand focused guarantees availability cpu time reservation semantics 
address concurrency issues concerned preemptive multithreading execution environment 
significant difference hls specified uniform interface connecting schedulers current aimed describing hierarchical schedulers naturally occur existing systems 
practice interfaces schedulers tend non uniform somewhat blurred attempts optimize systems may implemented hardware 

properties hierarchical schedulers reason hierarchical schedulers require scheduler task behavior restricted certain ways 
scheduling operations performed task limited 
releasing lock 

relinquishing control parent 
encompasses termination task instance voluntary blocking 

releasing task run scheduler hierarchy 
example clock interrupt handler rtos release thread blocked waiting timer expire 

parameterizing schedulers example task requesting priority raised 
task acts scheduler access additional operations 
dispatching child task 

suspending currently running child task saving state 
working formalizing restrictions remain intuitive 
real systems conform modification experience 
model cope exotic inter scheduler protocols scheduler activations 
single exception schedulers receive control cpu parent children 
exception preemption possible control taken away currently running task root scheduler arrival interrupt 
root scheduler pass control hierarchy scheduler way takes opportunity change scheduling decision save context previously running task dispatch new 
obviously preemptive schedulers non preemptive schedulers wait currently running task return control making scheduling decision 
see works practice assume machine running hierarchy process currently running blocked awaiting data network 
network interrupt arrives stops running root scheduler gives control irq scheduler saves minimal amount machine state dispatches network interrupt handler 
network interrupt handler designed run quickly acknowledges interrupt releases network bottom half handler adding element queue tasks run fifo scheduler second posting software interrupt 
network interrupt returns control parent irq scheduler finds interrupt pending software interrupt 
irq scheduler dispatches fifo scheduler dequeues dispatches network bottom half handler 
assume packet processed bottom half handler blocked process waiting network bottom half handler releases task calling process scheduler 
software interrupt returns cpu scheduler gives control process scheduler running saves state dispatches ready process 
system hierarchical schedulers execution environments lock provided particular scheduler 
locks effect preventing scheduler running certain tasks effectively blocking sub trees scheduling hierarchy 
lock higher hierarchy potentially blocks tasks lock lower hierarchy 
root level locks disabling interrupts cheap holding long easily cause unrelated tasks deadlines 
instance fundamental tension real time systems creating code efficient resources code reliably meets real time deadlines 

heuristics evolving systems basic premise systems evolve necessary restructure tasks meet real time deadlines 
furthermore claim mapping tasks execution environments usually modified easily aspects system algorithms requirements underlying hardware 
approximation problems meeting real time deadlines caused transient overload cpu spare cycles average sustained overload offered load long period time cpu handle 
case may possible solve problem adjusting mapping tasks execution environments strategies outlined 
transient overload system suffering transient overload developers identify task missing deadlines task tasks cause delay 
options promote code missing deadlines runs higher priority execution environment demote code causing deadlines missed adjust priorities single execution environment 
section give examples applying promotion demotion real system 
promoting code running interrupt environment accomplished virtualizing interrupt controller technique rtlinux 
sustained overload sustained overload cpu keep 
difficult problem transient overload solved solely promote time critical tasks demote long running tasks interrupt bottom half event aggregate tasks short wcet similar periods 
movement tasks execution environments rtos adjusting priorities dealt reducing system overhead 
overhead reduced moving task place scheduling hierarchy dispatched scheduler overhead current scheduler moving task place incurs synchronization overhead 
example processing incoming network packets thread context requires frequent expensive thread dispatches 
overhead reduced running network code bottom half handler fact real operating systems linux 
example concerns tightly coupled tasks executing thread 
benefit located thread order avoid overhead acquiring locks accessing shared resources 

reasoning execution environments main challenges building analyzing evolving systems containing hierarchies execution environments 
section address real time analysis restricted scheduling hierarchies 
key issues flattening scheduling hierarchy form analyzed traditional real time analysis deriving blocking term task system 
section address concurrency issues help developers create systems free race conditions 
problem difficult choices lock implementation thread mutexes disabling interrupts 
critical sections choice lock correct 
cases valid choices different performance characteristics 
example disabling interrupts thread mutex may increase throughput increase number missed deadlines 

response time analysis hierarchical priority schedulers section shows flatten scheduling hierarchy form analyzed standard static priority analysis informally argues algorithms correct 
goal encompass real time systems typically built primarily priorities analysis propose simple compared general frameworks reasoning hierarchical scheduling hls 
algorithm preemptive priority schedulers algorithm applies hierarchies containing preemptive static priority schedulers 
assigns priorities hierarchy tasks leaves assuming zero highest priority schedulers consume negligible cpu time 
view scheduling hierarchy directed acyclic graph perform depth traversal visiting children scheduler order highest lowest priority 
algorithm maintains counter initially value zero 
time traversal visits leaf hierarchy assigns priority task equal value counter increments counter 
see algorithm correct consider happen initially tasks runnable 
scheduler root hierarchy select highest priority child leaf task reached 
notice task task visited algorithm task assigned priority 
consider happen highest priority task completes blocks hierarchy selects highest priority task runs 
task corresponds second task visited algorithm 
argument repeated tasks visited 
algorithm adding support non preemptive fifo priority schedulers operating systems windows linux tinyos nonpreemptive scheduler run tasks run long placed interrupt context require lightweight dispatching 
schedulers typically fifo discipline avoid starvation may support priorities windows kernel supports hybrid priority fifo discipline scheduling deferred procedure calls 
second algorithm supports analysis scheduling hierarchies containing non preemptive schedulers restriction schedulers run leaf tasks schedulers 
response time analysis developed analyze task sets scheduled preemption thresholds useful permits analysis structured mix preemptive non preemptive scheduling 
preemptive priority schedulers proceed algorithm additionally assigning task preemption threshold equal priority 
fifo scheduler tasks assigned priority preemption thresholds set value 
non preemptive priority scheduler assign priorities preemptive schedulers set preemption threshold task value highest priority task run scheduler 
algorithm degenerates algorithm schedulers preemptive argue correctness handling non preemptive schedulers 
notice worst task scheduled fifo scheduler queued instance task run scheduler 
situation modeled assigning priority tasks 
necessary small change wang response time analysis task sets preemption thresholds assumed priorities assigned uniquely 
accomplished way accomplished response time analyses ensuring analysis accounts interference priority tasks addition interference higher priority tasks 
second notice non preemptive priority schedulers priorities assigned continuous range preemption threshold set highest priority range 
gives key properties 
set tasks run non preemptive priority scheduler preemption possible task starts run priority elevated preemption threshold high permit task run scheduler preempt 
second presence non preemptive scheduler affect preemption relations system 
see notice effect elevated preemption thresholds suppress preemption relations task preemption threshold high cause interfere task run scheduler 
example scheduling hierarchy shows priority preemption threshold computed task algorithm 
accounting scheduling overhead priority systems context switch overhead accounted charging cost context switches instance real time task 
concept extends straightforwardly hierarchies priority schedulers 
compute context switch cost add costs context switch performed scheduler root scheduling hierarchy task 
example irq cpu fifo thread event high high high high low low low low disk bh network bh clock network disk mouse 
priorities preemption thresholds computed algorithm handler charged cost interrupt prologue epilogue event handler charged cost scheduling thread dispatching event 
computing blocking terms blocking terms account worst case duration priority inversion realtime system significant practice different schedulers may radically different blocking terms 
example empirical evidence suggests linux kernel delay execution high priority threads ms rtlinux claims worst case scheduling latency orders magnitude 
compute blocking term task system hierarchical scheduling observe scheduler task root scheduling hierarchy opportunity block task 
label edge hierarchy blocking term contributed parent scheduler 
blocking term task sum blocking terms edges root hierarchy 

concurrency analysis section describes tsl formal system created address locking concerns systems multiple execution environments possible statically identify tasks resources locks 
embedded real time systems static sense 
tsl main ideas 
conservative estimation execution environment environments function may execute examining call graph system 
second relationships execution environments expressed terms hierarchical scheduling asymmetrical preemption relations 
tasks tasks sequential flows control system 
tasks finish returning control scheduler invoked tasks encapsulate infinite loop finish control returns scheduler preemption 
tasks act schedulers passing control tasks running hierarchy 
familiar examples tasks interrupt handlers event handlers threads 
schedulers preemption schedulers responsible sequencing execution tasks 
tsl models schedulers modular way specifying preemption relations scheduler induces tasks schedules 
preemption relations represented asymmetrically write task may preempt task execution system 
rule possibility start run begins execute finishes 
simple definition suits needs directly related preemption main concern tsl 
support multiprocessors hardware forms concurrency adopt definition atomicity sequential consistency 
simplest scheduler non preemptive event scheduler permit child preempt child 
children scheduler 
hand generic preemptive scheduler unix time sharing scheduler potentially permits child task preempt child task 
children scheduler third type scheduler commonly systems software strict priority scheduler interrupt controller typical pc 
schedules number tasks case software priority schedulers strict permit priority inversion due blocking 
locks preemption lead race conditions locks eliminate problematic preemption relations 
tasks tsl hold possibly empty set locks program point 
write parts task hold lock start run task holds read shorthand 
example consider threads usually preempt 
holding thread lock lk blocks task entering critical sections protected lk lk 
lock provided scheduler kinds locks provided scheduler part specification 
write scheduler provides lock require lock provided exactly scheduler 
common kinds locks 
locks resemble disabling interrupts prevent task run particular scheduler preempting task holds lock 
second locks resemble thread mutexes prevent preemption tasks hold instance type lock 
tasks interrupt handlers implicitly hold locks start running 
accounting locks matter specification needs special support tsl 
resources program point task accessing possibly empty set resources 
write task potentially uses resource holding set locks resources represent data structures hardware devices accessed atomically 
races definition race condition follows race def race occur different tasks common resource common set locks preempt holds locks 
example task uses resource locks fl task uses locks fl hold locks fl common race occurs fl hierarchical scheduling scheduler task point view scheduler level higher hierarchy 
example os schedules thread thread considered task regardless event scheduler implemented inside thread 
write scheduler directly task hierarchy parent relation 
similarly ancestor relation transitive closure tsl definition task slightly general sense usually real time community encompass scheduling code 
tsl gains power exploiting properties hierarchies schedulers 
ability lack ability preempt inherited scheduling hierarchy task preempt task preempt descendent useful consequence nearest common scheduler hierarchy tasks non preemptive scheduler task preempt 
task descendent particular scheduler requests lock scheduler may block task 
happens scheduler directly block task requested lock blocks currently running child transitively scheduling task requested lock 
task attempts acquire lock provided ancestors scheduling hierarchy child task scheduler block illegal action occurred 
tsl check generalized version blocking interrupt problem ensuring tasks acquire blocking locks provided ancestor schedulers 
formalize generalization follows illegal def blocking execution environments execution environment context running application code created instance scheduler 
operating definition execution environment informal list attributes environment practical significance software developers 
properties environment determined primarily scheduler rest system underlying hardware platform 
example consider execution environment created nonpreemptive event scheduler runs interrupt context non preemptive parent scheduler implies tasks environment preempt 
lack ancestor scheduler supports blocking implies tasks block 
details compiler underlying hardware platform determine number microseconds overhead interrupt dispatching event 
longest wcet task environment added longest duration task system disables interrupts determines worst case scheduling latency highest priority event environment 
reasoning systems assume code build system annotated tsl properties accesses resources specifications schedulers 
currently hand plan develop better tool support deriving facts code 
verify system contain race conditions illegal blocking run tsl checker lightweight automatic theorem prover 
domain tsl facts finite simple algorithms current tsl checker forward chaining evaluator written haskell 
chief goals tsl enable modular reusable specifications schedulers tasks applications 
tsl currently exists comes reasonably close goal places experienced problems 
adding new task scheduler add preemption relations task sibling tasks 
raw tsl require modify scheduler specifications application changes application specifications scheduler hierarchy changes approach modular 
avoid tsl checker provides direct support common types schedulers automatically generating necessary preemption relations 
second tsl account ability tasks release tasks 
example schedulers implement time slicing timer interrupts tsl misses fact disabling interrupts suppresses time slicing 
needs add non modular details task releases tsl models keep returning false positives potential race conditions happen 
working adding support causality task releases possible infer properties principles 
previous focused synchronization inference automatic derivation appropriate lock implementation critical section system 
focus tsl look problems system relying developer fix problems 
tsl reports presence illegal locking race conditions doing provides list problematic lock acquisitions preemption relations 

evolving real system section demonstrates validates approach creating evolvable real time systems solving problems meeting real time deadlines tinyos simple component operating system networked sensor nodes 
tinyos runs motes small systems equipped wireless packet radio 
consider changes base system adding long running tasks show support long running sections code disrupting ongoing computations 
meeting radio deadlines solve design problem tinyos critical sections cause blocking interferes reliable radio reception 

tinyos ping pong application tinyos scheduling hierarchy shown analogous bottom half rtos general purpose irq avr calc crc packet sent packet received fifo am send task low high spi output compare adc 
tinyos scheduling hierarchy interrupts scheduled preemptively cpu tasks scheduled software run completion semantics operating system 
runs single address space contains execution environments interrupt handlers running high priority tasks scheduled fifo order low priority 
tasks provide level deferred processing reserving interrupt context short time critical sections code 
context tinyos task restricted meaning usual definition refer interrupt handlers scheduling code 
motivating application simple exercises entire functionality tinyos network stack 
application runs pair motes sends packets counts replies second returns packet receives 
performance metric interest throughput important factor networked sensors 
modeling application tsl embedded systems typically relatively small number schedulers tasks straightforward develop model scheduling aspects application 
fact figures illustrate scheduling hierarchies contain required information 
main remaining challenge developing tsl model tracking resources locks inside code 
approach annotate critical section locks uses resources accesses tool developed perform simple source code analysis extract callgraph application 
quite feasible example authors tinyos developed new language nesc critical sections explicitly identified take little effort programmer identify resources critical section 
approach works best applied code written maintained code 
write application code wish able track changes little effort judged manually annotating code fine grained way desirable 
engineering compromise developed coarsegrained model system entirely scheduling hierarchy goal detecting race conditions introduced evolving system ability detect race conditions original system 
model consists single resource interrupt handlers tinyos tasks interrupts disabled single resource tinyos tasks interrupts enabled 
coarse grained model worth pointing coarse grained models sensitive race conditions fine grained models approximations safe ones 
expect simple model tsl reported race conditions base application 
experimental setup experiments run tinyos version 
mica motes atmel atmega bit microcontroller running mhz kb ram kb flash memory 
motes radio theoretically capable sending kbps tinyos drives kbps 
timing measurements taken setting output pins avr observing results logic analyzer 

supporting long running tasks experiment investigate add longrunning tasks maintaining high radio throughput 
desirable feature mote hardware capable running sophisticated algorithms supporting signal processing cryptography 
experiment timer interrupt post longrunning task times second 
task synthetic copy packet received radio spins rest execution time 
experimental procedure vary run time long running task measuring network throughput 
original tinyos data points show long running task interferes throughput 
data points ms tinyos network subsystem consistently crashes experiments due bug ms packets reliably returned point 
hypothesis drop throughput primarily caused delay returning packet sender 
believed packet transmission receipt processing runs interrupt context 
code run interrupt context affected long running task data clearly indicate part packet processing runs task 
examining code quickly confirmed pong application posts tasks part send task execution time ms original tinyos tinyos added preemption 
impact posting long running task times second ing receiving packets 
tinyos schedules tasks non preemptively transmission packet delayed load task completes load task running packet arrives 
restructuring scheduling hierarchy illustrate apply method restructuring system described section 
goal prevent tinyos radio tasks missing deadlines 
see problems performed response time analysis tinyos radio tasks variablelength cpu intensive task run tinyos nonpreemptive fifo scheduler 
analysis showed long running task runs ms run standard version tinyos causing missed radio deadlines 
avoid missed deadlines long running task demoted radio tasks promoted 
decided promote radio code interrupt context tinyos task computes crc field outgoing packet runs long ms demoted long running task necessitating significant changes structure execution environments tinyos 
changes tinyos task scheduler ran scheduler instance separate preemptive thread provided operating system 
tinyos support threads typical rtos provides preemptive multithreading mutual exclusion timers message queues resulting scheduling hierarchy depicted 
contains task schedulers foreground scheduler runs high priority network tasks background scheduler runs long running tasks experiment 
tasks running sched irq avr calc crc packet sent packet received am send task background background low high high low fifo fifo spi adc output compare 
tinyos scheduling hierarchy long running tasks retain run completion semantics respect foreground task preempt background task 
validating changed system components validating system making change execution environments checking real time problem motivated change fixed ensuring race conditions added system 
hypothesized network throughput restored original level avoid delaying execution tinyos tasks support packet processing hypothesis confirmed 
check race conditions modeled new scheduling hierarchy long running task tsl 
wrote long running task reasonable finer grained model resources added additional resource representing packet buffer noted accessed longrunning task task tinyos network stack 
ran tsl checker modified system told fact race condition caused new preemption relation radio tasks longrunning task 
fixing race protecting access mutex updating model tsl able find errors 

meeting radio deadlines original mica radio stack transferred data radio hardware bit time 
tinyos versions serial peripheral interface spi hardware implement byte level transfers radio host cpu increasing link speed reducing cpu overhead 
interrupts signaled spi extremely short deadline spi interrupt handled cpu cycles arrival byte radio data round trips second tasks posted second original tinyos tinyos virtualized spi 
posting tasks interferes radio reception standard tinyos kernel lost 
furthermore losing byte certain force entire packet lost defeats sec ded payload encoding scheme tolerate single corrupted bit byte 
consequence extremely tight real time deadline posting tinyos task disables interrupts cycles order safely callable interrupt non interrupt environments cause spi deadline missed 
experiments show posting task times second causes significant drop radio performance demonstrated 
changing hierarchy maintain radio throughput posting tasks promote part spi interrupt handler performing lightweight virtualization interrupt handling structure tinyos manner analogous done rtlinux 
virtualization aspects 
default tinyos enforces mutual exclusion disabling interrupts words lock provided scheduler root hierarchy 
saw section contributes blocking term task system 
avoid applying large blocking term spi interrupt handler mutual exclusion tinyos implemented lock provided scheduler level lower scheduling hierarchy virtual interrupt scheduler 
change shown effected modifying macros tinyos header files 
second spi interrupt handler split parts reads byte spi register integrates byte ongoing computation 
part time critical proceed delay matter rest system doing 
second part interacts rest system irq avr calc crc packet sent packet received fifo am send task low high spi soft spi adc output compare 
virtualizing interrupt scheduler spi interrupt disabled critical sections able reliably meet real time deadlines fore synchronous respect tinyos 
time critical 
implementation chose time critical part spi interrupt handler trigger software interrupt 
spi interrupt arrives tinyos critical section software interrupt handler runs immediately spi interrupt handler returns 
spi interrupt arrives tinyos critical section execution soft interrupt delayed critical section finished 
important property hierarchy interrupts run scheduler disabled critical sections tinyos code interrupts run irq scheduler 
validating changed system validate changed system show real time problem solved new concurrency errors added 
posting task modified tinyos kernel cause missed spi interrupts radio throughput vary function frequency tasks posted 
data points correspond modified kernel show case 
introducing new preemption relations potentially serious change scheduling hierarchy 
tsl detected race condition modified system 
problem new software interrupt handler preempted spi interrupt handler share small amount state 
tasks causally related software interrupt triggered hardware interrupt reasoned false alarm race condition occur software interrupt delayed long byte arrive 
packet lost anyway case opted eliminate race condition protecting accesses shared variable add overhead providing benefit 

related number research projects hierarchical scheduling techniques create flexible real time systems 
include open environment realtime applications windows nt hierarchical scheduling hierarchical virtual real time resources hls 
previous projects proposed new hybrid scheduling algorithms provide new useful reservation guarantees real time applications collections applications open systems task characteristics known advance 
current hand fundamentally different goal describe analyze hierarchical priority schedulers essentially real time embedded systems 
focuses closed static systems task characteristics known advance supports concurrency analysis 
trend inclusion concurrency mainstream language definitions java strong static checking errors leading programming language research direction providing annotations extending type systems model locking protocols 
efforts addressed possibility multiple execution environments tsl 
rtlinux linux gpl restructured scheduling hierarchies altered mapping tasks schedulers order help software meet real time deadlines 
efforts focused implementing evaluating single transformation developed general framework accompanying analyses restructuring systems code fix problems meeting real time deadlines 
execution environments created hierarchical schedulers system class concept done 
aspects multiple execution environments addressed previous research 
example long known static priority analysis permits homogeneous analysis ability interrupts threads meet real time deadlines 
jeffay stone analyzed schedulability mix interrupt handlers threads scheduled edf 
wang showed preemption threshold scheduling map tasks preemptive threads non preemptive user level events allocating minimal number preemptive threads 
efforts focused limited set execution environments addressed concurrency issues created diversity execution environments tsl 

contributions creation evolvable real time systems 
shown useful look system collection execution environments different properties exploited developers 
provided heuristics mapping tasks execution environments way real time deadlines met 
second contribution novel algorithms possible perform real time analysis hierarchies schedulers containing priority fifo schedulers 
third shown program concurrency analysis task scheduler logic detect race conditions concurrency errors resulting changing mapping tasks environments 
validated approach evolving real time systems case studies evolve structure networked sensor node software 
acknowledgments authors eric eide mike hibler reviewers helpful comments 
supported part national science foundation award ccr defense advanced research projects agency air force research laboratory agreements 
anderson bershad lazowska levy 
scheduler activations effective kernel support user level management parallelism 
proc 
th acm symp 
operating systems principles sosp pages pacific grove ca oct 
audsley burns richardson wellings 
applying new scheduling theory static priority pre emptive scheduling 
software engineering journal sept 

real time kernel 
net 
deng 
liu zhang frei 
open environment real time applications 
real time systems journal may 
feng mok 
model hierarchical real time virtual resources 
proc 
rd ieee real time systems symp 
rtss austin tx dec 
flanagan abadi 
types safe locking 
swierstra editor esop programming languages systems volume lecture notes computer science pages 
springer verlag mar 
gay levis von behren welsh brewer culler 
nesc language holistic approach networked embedded systems 
proc 
programming language design implementation pldi pages san diego ca june 
greenhouse scherlis 
assuring evolving concurrent programs annotations policy 
proc 
th intl 
conf 
software engineering icse pages orlando fl may 
hill szewczyk woo hollar culler pister 
system architecture directions networked sensors 
proc 
th intl 
conf 
architectural support programming languages operating systems asplos pages cambridge ma nov 
jeffay stone 
accounting interrupt handling costs dynamic priority task systems 
proc 
th ieee real time systems symp 
rtss pages raleigh durham nc dec 
klein pollak harbour 
practitioner handbook real time analysis guide rate monotonic analysis real time systems 
kluwer academic publishers 
carpenter baruah 
framework achieving inter application isolation multiprogrammed hard real time environments 
proc 
st ieee real time systems symp 
rtss pages orlando fl nov 

inferring scheduling behavior 
proc 
usenix annual technical conf 
freenix track pages monterey ca june 
reid 
lock inference systems software 
proc 
second aosd workshop aspects components patterns infrastructure software acp boston ma mar 
stankovic 
hls framework composing soft real time schedulers 
proc 
nd ieee real time systems symp 
rtss pages london uk dec 
rajkumar lehoczky klein 
analysis hierarchical fixed priority scheduling 
proc 
th ieee euromicro conf 
real time systems vienna austria june 
wang 
scalable real time system design preemption thresholds 
proc 
st ieee real time systems symp 
rtss orlando fl nov 
sha rajkumar lehoczky 
priority inheritance protocols approach real time synchronization 
ieee transactions computers sept 
linux gpl 
com 

rtlinux manifesto 
proc 
th linux expo raleigh nc mar 

