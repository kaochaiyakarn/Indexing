decision procedure lahiri carnegie mellon university pittsburgh pa ece cmu edu cs cmu edu 
tool term level modeling verification infinite state systems expressible logic counter arithmetic lambda expressions uninterpreted functions clu 
describe key component tool decision procedure clu 
apart validity checking decision procedure provides useful features concrete counterexample generation generation 
decision procedures fragments order logic form core automatic semi automatic verification tools 
applications include microprocessor verification predicate abstraction software verification 
decision procedures find components higher order logic theorem provers pvs 
tool modeling verifying infinite state systems expressible logic called clu 
logic decidable fragment order logic restricted lambda expressions uninterpreted functions equality counter arithmetic addition constants ordering arithmetic constraints permitted logic form integer expressions 
key components tool cient decision procedure clu 
apart logic handles distinguishing features decision procedure set apart decision procedures svc cvc ics eager translation sat decision procedure performs translation order formula boolean formula turn checked boolean satisfiability sat solver 
contrast sat procedures compute boolean abstraction order formula lazily refine abstraction inconsistent sat assignments 
contrast performs eager translation 
research supported semiconductor research contract rid aro daad 
integer interpretation queries hardware software verification require integer interpretation symbols 
available decision procedures complete integers restricts oneself clu logic 
hand complete integers extremely useful reasoning systems arrays 
reducing domain interpretation decision procedure exploits optimizations allow interpret symbols smaller domains analyzing formula structure 
small model property clu permits considering finite small set values integer symbols formula 
set reduced exploiting positive equality 
tool implemented moscow ml contains lines code 
interface sat solvers bdd packages 
clu formulas internally represented directed acyclic graph dag structure facilitates ective sharing common subexpressions 
dag storage manager uses heuristics detect collapse certain semantically equivalent syntactically distinct expressions 
clu logic examples consider example valid clu query contains uninterpreted functions lambda expressions arrays ite stands construct 
lines define temporary names sub expressions decide command invoke decision procedure 
lambda ite decide valid 
example modeled traditional select update arrays arbitrary number entries array gets updated single step 
lambda ite decide valid 
example invalid formula 
tool produces counterexample looks follows counter examples formula valid syntax slightly di erent actual tool partial interpretation function symbols relevant counterexample 
concrete counterexamples extremely useful debugging verifying non trivial systems 
logic supports limited quantifiers cost incompleteness top level formula 
assert universally quantified formula antecedent deciding clu formula follows decide forall limited capability useful practice automating non trivial proofs order processor verification unbounded resources 
decision procedure operation 
decision procedure performs series transformations reduce order formula boolean formula 
quantifiers eliminated quantifier instantiation techniques 
resulting clu formula translated equi satisfiable boolean formula sequence steps lambda expressions removed beta reduction ii second function applications replaced symbolic constants optimizations exploiting positive equality iii integer valued symbolic constants instantiated finite domain su cient preserve satisfiability atomic predicates symbolic constants encoded fresh boolean variables transitivity constraints imposed 
generated formula checked sat solver 
nature encoding greatly ects sat solver performance employs problem specific hybrid encoding strategies improve quality final encoding 
counterexample generation 
assignment produced sat solver boolean variables assignment order symbols including function constants 
assignments integer variables constructed function application arguments result application evaluated integer variables represent 
proof core generation 
sat solvers generate unsatisfiable core boolean variables 
generate proof core original clu formula 
variables mapped back atomic predicates clu logic mappings generated translation sat preserved 
atomic predicates find instance predicate discovery predicate abstraction verifiers 
benchmarking 
benchmarked decision procedure diverse set verification benchmarks arising verifying high level microprocessor designs cache coherence protocols model checking software device drivers compiler validation 
outperforms decision procedures including svc cvc benchmarks results may 
extensions 
decision procedure code performing symbolic predicate abstraction 
ongoing includes extending logic include quantifier free presburger arithmetic 
acknowledgments 
grateful randal bryant invaluable support feedback 

ball majumdar millstein rajamani 
automatic predicate abstraction programs 
programming language design implementation pldi pages 

barrett dill levitt 
validity checking combinations theories equality 
formal methods computer aided design fmcad lncs pages 

bryant german 
processor verification cient reductions logic uninterpreted functions propositional logic 
acm transactions computational logic january 

bryant lahiri 
modeling verifying systems logic counter arithmetic lambda expressions uninterpreted functions 
computer aided verification cav lncs pages 

leonardo de moura harald rue maria 
lazy theorem proving bounded model checking infinite domains 
conference automated deduction cade pages 


owre rue shankar 
ics integrated solver 
cav lncs pages 

lahiri bryant byron cook 
symbolic approach predicate abstraction 
computer aided verification cav lncs pages 

lahiri bryant goel 
revisiting positive equality 
tools algorithms construction analysis systems tacas lncs pages 
springer verlag 

lahiri bryant 
modeling verification microprocessors 
formal methods computer aided design fmcad lncs pages 

owre rushby shankar 
pvs prototype verification system 
conference automated deduction cade lnai pages 

bryant 
deciding quantifier free presburger formulas parameterized solution bounds 
th ieee symposium logic computer science lics july 
appear 

lahiri bryant 
hybrid sat decision procedure separation logic uninterpreted functions 
th design automation conference dac pages june 

bryant 
deciding separation formulas sat 
computer aided verification cav lncs pages 

aaron stump clark barrett david dill 
cvc cooperating validity checker 
th international conference computer aided verification cav volume lncs pages 
springer verlag 


available www cs cmu edu 
