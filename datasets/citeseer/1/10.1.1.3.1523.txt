generic exception handling java monad lutz schr oder till mossakowski department computer science university bremen 
develop equational de nition exception monads characterizes moggi exception monad transformer 
axiomatization de ne extension previously described computational logics abnormal termination 
instantiating generic formalism java monad loop project yields particular known hoare calculi abnormal termination jml method speci cations opens possibility extending formalisms hitherto missing computational features nondeterminism 
course orts provide proof support veri cation java programs classical hoare calculus extended encompass exception handling java main challenge deal abruptly terminating statements 
exceptions java part monad java paradigm encapsulation side ects monads :10.1.1.100.9674
question arises extended hoare calculi exceptions developed abstractly monad exceptions 
answer question positively rst characterizing moggi exception monad transformer equational theory categorical formulation generalizing previous monad independent hoare calculi calculi exception monads take account normal abrupt termination :10.1.1.13.8780:10.1.1.13.8780
advantage approach bound speci combination computational ects java monad 
rules calculus come essentially free just adapting normal monad independent hoare rules equational description exception monads :10.1.1.13.8780:10.1.1.13.8780
background formalism concepts logic hascasl higher order language functional speci cation programming basically internal language partial cartesian closed categories generalization toposes 
organized follows 
sect 
recall hascasl logic monads logic monads built top hascasl 
sect 
exception monads proves characterize moggi exception monad transformer 
sect 
introduces hoare logic exception monads sect 
concludes 
hascasl hascasl higher order extension casl featuring higher order functions style moggi partial calculus type constructors type classes constructor classes details see 
semantics hascasl speci cation class set theoretic intensional henkin models function type need contain set theoretic functions functions yield value input need equal see discussion rationale 
desired extensionality models may forced means axiom expressible language 
consequence intensional semantics presence intuitionistic internal logic lives terms 
specify internal equality symbol built syntactical sugar terms allows specifying full set logical operations quanti ers intuitionistic logic carried detail 
built syntactical sugar internal logic invoked means keyword internal signi es formulas block understood formulas internal logic 
categorically speaking hascasl models correspond partial categories generalization topoi 
hascasl seen syntactic sugar internal language 
internal logic internal language intuitionistic higher order logic partial functions precise description correspondence 
monads computations basis seminal monads formalizing side ects elegant functional way 
intuitively monad associates type type ta computations type function side ects takes inputs type returns values type just function type tb called program 
approach abstracts away particular notions computation store non determinism non termination surprisingly large amount reasoning fact carried independently choice notion 
formally monad category de ned kleisli triple function unit family morphisms ta assigns morphism tb morphism ta tb id ta description equivalent familiar endofunctor unit multiplication 
monad gives rise kleisli category objects functions side ects tb morphisms composite functions just order support language nitary operations multi variable contexts see needs technical requirement monad called strong equipped natural transformation tb called tensorial strength subject certain coherence conditions equivalent enrichment monad see discussion 
example 
computationally relevant monads set strength equivalent enrichment monads set strong include stateful computations possible non termination ta 
xed set states 
denotes partial function type nite non determinism ta denotes nite power set functor exceptions ta xed set exceptions interactive input ta smallest xed point 
set input values 
non deterministic stateful computations ta 
xed set states reasoning category equipped strong monad greatly facilitated fact proofs conducted internal language introduced 
crucial features language type operator ta contains computations type polymorphic operator ret ta corresponding unit binding construct denote haskell style terms form interpreted means tensorial strength kleisli composition see details 
essentially intuitively computes passes results nested expressions may denoted repeated nestings xn somewhat inaccurately denoted form sequences form called program sequences 
variables may omitted notation 
equivalence theorem proved language term formation rules deduction system order de ne morphisms order prove equalities 
theory exception monads sect 
formulated internal language arbitrary category equalizers 
coming computational logic hoare calculi see section needs framework partial cartesian closed category hascasl corresponding richer internal language 
monad generically de ne control structures loop see example 
de nitions require general recursion realized hascasl means xed point recursion cpos 
restrict monads allow lifting cpo structure cpo structure type ta computations way monad operations continuous 
laid detail 
executable speci cation iteration construct shown 
type constructors partial total continuous function space respectively 
iteration construct behaves loop additionally passes result value iterations 
loop just iteration ignoring result value 
spec iteration bool vars cpo op iter bool 
program iter test test iter test return op bool unit unit iter fig 

iteration control structure monad independent computational logic recall monad independent hoare calculus slight changes terminology concerning state side ect freeness strong monad usual calculus concerned proving hoare triples consisting stateful expression pre postcondition 
general undo changes state require pre postconditions leave state unchanged suitable sense order guarantee composability hoare triples time allowing conditions read state 
de nition 
program called state preserving ret ret shorthand sp unique element unit type 
example program state preserving state monad terminates change state 
program called stateless factors just value inserted monad called stateful 
state monad stateless changes reads state 
stateless programs state preserving vice versa 
order de ne semantics hoare triples introduce auxiliary judgements form intuitively state holds execution program sequence actual formula internal logic 
idea formulas outside usual logical rules apply remaining part 
formally abbreviates ret ret de nition 
state preserving program side ect free deterministic sense shorthand stateless programs side ect free 
monads state preserving programs side ect free unsurprising exception monads non determinism involved 
cases state preserving program side ect free deterministic 
de nition 
hoare triple partial correctness written consists program sequence precondition postcondition may contain side ect free 
abbreviates formula example hoare triple holds state monad holds state holds successful execution result order capture hoare triples total correctness recall dynamic logic monad allows nesting modal operators nature execution usual connectives rst order logic 
means informally state changed ect scope modal operator restored outside scope 
dynamic logic formula subformulas evaluated state evaluated modi ed states 
de nition 
formula dynamic logic term subobject consisting side ect free computations 
question structure allow interpretation diamond box operators hpi dynamic logic 
de nition 
say admits dynamic logic exist program sequence formula formula program sequence containing additionally complete lattice ordering joins meets denoted respectively 
usual monads admit dynamic logic 
monad logical connectives easily de ned substitution side ect free terms 
diamond operator qi de ned quanti cation validity formulas dynamic logic de ned follows de nition 
formula valid ret 
hoare triples partial correctness expressed dynamic logic give meaning hoare triples total correctness interpreting partial correctness plus termination hpi exception monads proceed develop general treatment monads feature exceptions raised caught 
give equational definition categorical terms translated notation 
de nition derive axiomatizations formulated various computational logics 
denote strong monad 
essential operations associated exceptions operation raise throws exception freezes current state catch operation returns previously thrown exception state resumes normal evaluation statements exception thrown catch 
obvious variations operation catches certain exceptions exceptions class lets pass easily implemented combinations catch raise fact convenient give raise polymorphic type ta basic example raise right injection course result type fact immaterial raise return results 
main point disagreement literature concerning modeling exceptions concerns raising exceptions regarded computational feature right exceptions just recorded part global state 
java semantics developed loop project direction bart jacobs see approach advocated group tobias nipkow prefers option late piece news nipkow turns approach allows modular semantics exceptions compare theorem :10.1.1.100.9674
terms concrete monads jacobs group uses monad :10.1.1.100.9674

set states set exceptions nipkow group implicitly uses 
se 
se se accommodates fact terminating statements need return value 
just moggi monad transformer exceptions applied usual state monad non termination state monad non termination possibly unde ned results extended state set se simultaneous advantage disadvantage catch monadic value normal execution sequences kleisli composition catch function monadic values 
contains monadic values arbitrarily manipulate state exception thrown simultaneously throw exception return value 
consequently need explicit hoare rules force normal statements skipped case state contains exception necessary add normality state precondition usual hoare rules 
contrast state automatically frozen exception thrown 
fact regarded consisting monadic values respect state freezing condition return exception value 
treatment generic exception monads shall opt monads modeled precisely choice allows better control monadic values 
need catch operation polymorphic type ta takes monadic value returns monadic value executes terminates normally returning value returned exception raised note catch returns monadic value converts thrown exceptions actual values 
basic exception monad 
catch simpler type general case result type catch say undo state changes resolve nondeterminism force termination 
ready announced categorical de nition exception monads 
unable resist temptation pop balloon straight away short somewhat mysterious de nition proceed heuristically backwards explicating de nition stepwise number intuitively convincing equations 
de nition 
exception monad strong monad type exceptions natural transformation catch catch catch inl equalizer diagram strong monad morphisms 
recall strong monads category simpli ed strong monad morphism natural transformation compatible remaining data sense cf 

naturality compatibility terms associated kleisli triples equivalent compatible binding 
point parts de nition self understood 
strong monad functor strong monad inl unit binding operator transforms inr moggi monad transformer exceptions described implemented haskell libraries course presupposes exists 
easy check inl strong monad morphism 
actual conditions imposed de nition particular catch strong monad morphism 
compatibility binding amounts equation catch catch inr catch see expresses fact sequential statement raises exception passed skipped terminates normally executed 
compatibility catch unit states pure values throw exceptions catch inl catch catch inl catch equation states catch raise exceptions 
fact catch equalizes catch inl equalizer captured equationally means raise operation absent basic de nition 
construct operation morphism equalizes catch inl catch monad morphism 
obtain factorization catch necessarily form 
raise operator de ned second component morphism catch raise de ning property raise equation catch raise inr stating raised exceptions caught 
combination binding compatibility catch implies catch raise catch denotes note strong monad morphism 
equation turn derive fact catch monic raise catch id catching exception undone re raising 
equations fact catch equalizes catch inl obvious equation inl id amount stating catch raise catch inl split equalizer diagram cf 
strong monad morphisms 
equivalently describe exception monad means equations implies catch monic fact catch strong monad morphism catch monomorphic follows easily raise strong monad morphism equalizes catch inl arising purely equational presentation exception monads translated notation explained section corresponding hascasl speci cation shown 
imported speci cations speci cation monad monads described section speci cation provides sum type operator left right injections inl inr axioms catch ret catch seq state catch strong monad morphism catch seq covers compatibility binding strength 
axiom catch raise equation catch catch states catch equalizes catch inl equation 
spec exception monad types type ex monad var type ops raise ex unit catch ex ex forall ex ex catch catch case inl catch inr ret inr catch ret ret inl catch raise ret inr catch catch catch ret inl catch case inl ret inr raise catch seq catch ret catch raise catch catch fig 

equational speci cation exception monads notation evident axioms properties intuitively expect raise catch fact indicated equations come heuristically de nition 
expected properties follow catch seq imply happens exception raised raise raise obvious way construct exception monads moggi exception monad transformer described take monad catch inl surprisingly construction classi es exception monads theorem 
category equalizers 
exception monad form strong monad proof 
exception monad equalizer morphisms catch inl equalizer preserved monad transformer 
de nition exception monads regarded complete equational characterization exception monad transformer 
may appear rst sight result built de nition codomain catch 
case result type catch describes exceptions observed sense constitutes minimal expectation merely states result catch computation returns exception regular value 
contrast theorem concerns entirely di erent question exceptions represented computations answer self understood 
implications exceptions inextricably notions computation regarded added remaining computational features modular way 
classi cation theorem facilitate reasoning exception monads prove corollary 
exception monad ta side ect free computation terminates normally catch inl 
state preserving computations may raise exceptions 
notation 
order intermediate results program sequence available catch packaged explicitly returned 
procedure abbreviated notation comes handy catch denotes catch ret 
generic hoare calculus abrupt termination proceed extend partial total generic hoare calculi monadic programs introduced section take account exceptional termination generalizing similar calculi introduced 
reason basic version generic hoare calculus insucient purposes exceptional termination due equation fg raises exception holds normal part calculi 
reasonable statements happens exception raised 
remedy problem introducing additional postcondition exceptional termination called abnormal postcondition opposition usual postcondition called normal postcondition 
raise suspicion hoare calculi fact generic reality new computational feature requires new hoare calculus :10.1.1.13.8780:10.1.1.13.8780
examples heuristic argument supports claim case problem fg raise quoted due fact exceptions constants ambient monad exceptional computations type contain truth values :10.1.1.13.8780:10.1.1.13.8780
phenomenon unique constant operations computational interpretation constants known far precisely exceptions 
appears need substantially terms additional axioms rules monad speci program constructs extended hoare calculi limited case exceptions 
introducing partial hoare calculus abnormal termination exception monad corresponding total hoare calculus total hoare calculus normal termination requires additional assumptions monad treated 
denote combination precondition normal abnormal postcondition form sg normal postcondition stateful formula may contain result variables abnormal postcondition stateful predicate function restriction re ects fact exceptional computations result abnormal postcondition concerned hitherto anonymous exception 
interpretation extended hoare assertion program sequence executed state satis es execution terminates normally post state result satisfy execution terminates abnormally exception post state satis es formally sg abbreviates catch inl inr associated hoare calculus subsumes generic hoare calculus show shows set proof rules extended hoare assertions 
rules catch raise counterparts generic hoare calculus note particular single composition rule seq similar 
conjunction weakening rules notations stand pointwise operations 
rule refers xed point operator introduced section rule applies cpo monads 
application operator requires implicitly continuous function type tb 
tb 
square brackets indicate reasoning local assumptions discharged application rule 
soundness rule consequence fact satisfaction extended hoare assertions admissible predicate 
rule easily derives rules particular recursive functions usual rule corresponding rule iteration construct described section iter sg iter sg corresponding rule listed basic rule generic hoare calculus improved moving rule 
rule sp seq sg sg sg wk sg conj disj sg sg sg bg sg bg sg sg sg 
sg sg ctr sg fv fv sg fg fx sp sp stateless ret catch sg catch inl inr raise fg raise 
fig 

generic hoare calculus partial exception correctness re ects fact state preserving programs change state regardless throw exceptions 
exception monad speci rules catch raise state catch catches thrown exception ect enclosed program sequence raise really throws exception 
calculus sound theorem 
extended hoare assertion derivable exception monad cpo monad rules excluding including iter corresponding formula derivable internal language 
proof uses de nition extended hoare assertions standard hoare triples generic hoare rules equations 
completeness calculus subject research conjecture completeness proof hoare logic lead completeness extended calculus equations re ected rules 
total extended hoare assertions reasoning total correctness basic case encoded generic dynamic logic requires additionally monad admits dynamic logic 
respect exceptions cause additional problems theorem 
strong monad admits dynamic logic 
exception monad admits dynamic logic de ne combined total correctness assertions normal abnormal termination sg pi hoare calculus extended total hoare assertions derived equational axioms exception monads means proof system generic dynamic logic 
basic case rules essentially extended partial hoare assertions exception rule course rules constructs iter derived 
fact immediately obvious total analogue easily prove total hoare rule iter specializes corresponding total rule total iter iter total db founded iter sg jml ect statement speci ed giving clauses precondition assumes normal postcondition ensures abnormal postcondition signals precondition non termination diverges hold execution statement cases statement hangs 
speci cation ensures signals diverges statement expressed notation sg observation derives clause coded way calculus discussed forces coding proofs 
course taken literally works classically intuitionistically rate prefer condition guarantees termination replacing entailed non termination 
consequence hoare calculus expressible calculus ignoring time class constraints involved exceptions formal description class mechanism described constraints expressed postcondition carried 
explicitly put sg exception 
obtaining conditions stating precondition terminates abnormally exception resulting state satis es partial exception correctness terminates abnormally exception state satis es total exception correctness respectively 
due fact calculus tailored speci cally java precise correspondence rules listed generic rules central features fact drop generic calculus 
particular composition rules derived composition rules partial total extended hoare assertions partial exception rule projection generic rule obtained specialization rule iter partial exception correctness normal correctness just dropped 
interesting derivation total exception rule rule reformulated analogy total break rule translates calculus ng bg sg bg 
sg exceptional hoare triples coded 
premises gathered single total extended hoare assertion draw required means generic total rule total see noting normal postcondition get contradiction similarly hoare rules jml method speci cations direct correspondence generic rules calculus 
generalized hoare calculi java monad developed monad independent hoare calculus exception monads expressed speci cation language hascasl 
extended previous monad independent calculi adding postconditions abrupt termination equational characterization moggi exception monad transformer arose striking categorical formulation 
extension monad independent hoare logic necessary reasons catch operation algebraic acts top monad 
exceptions constants basic monad independent calculus statements exceptional argue reasons particular apply uniquely exceptions computational feature 
contrast computational ects purely algebraic non constant algebraic operations :10.1.1.22.2642
expect genericity approach allow easy integration monadic computational ects substantial extensions formalism case exceptions 
additional computational ects include particular input output concurrency :10.1.1.100.9674
corresponding monads designed functional language haskell anticipate major re extensions java monad :10.1.1.100.9674
forms part dfg funded project hascasl kr 
authors wish christoph useful comments discussions 
barr wells toposes triples theories springer 
claessen poor man concurrency monad funct 
programming 
cofi common framework initiative casl manual lncs ifip series springer appear :10.1.1.22.2642
hoare axiomatic basis computer programming communications acm 
huisman java program veri cation higher order logic pvs isabelle ph thesis university nijmegen :10.1.1.22.2642
huisman jacobs inheritance higher order logic modeling reasoning theorem proving higher order logics lncs vol 
springer pp :10.1.1.22.2642

java program veri cation hoare logic abrupt termination fundamental approaches software engineering lncs vol 
springer pp :10.1.1.22.2642

jacobs poll logic java modeling language jml fundamental approaches software engineering lncs springer pp :10.1.1.22.2642

coalgebras monads semantics java theoret :10.1.1.100.9674
comput 
sci 
:10.1.1.22.2642
lambek scott higher order categorical logic cambridge 
mac lane categories working mathematician springer 
moggi categories partial morphisms calculus category theory computer programming lncs vol 
springer pp 

view programming languages tech 
report ecs lfcs univ edinburgh 
notions computation monads inform 
comput 

nipkow comprehensive formal semantics java language proc 
summer school ios press appear :10.1.1.22.2642
hoare logics isabelle hol proof system reliability kluwer pp :10.1.1.22.2642

peyton jones ed haskell language libraries revised report cambridge funct :10.1.1.22.2642
programming :10.1.1.22.2642
peyton jones gordon finne concurrent haskell principles programming languages acm press pp 

peyton jones wadler imperative functional programming principles programming languages acm press pp :10.1.1.100.9674

plotkin power notions computation determine monads foundations software science computation structures lncs vol :10.1.1.22.2642
springer pp :10.1.1.22.2642

schr oder classifying categories partial calculus submitted fossacs available www informatik uni bremen de hascasl ps henkin models partial calculus computer science logic lncs vol 
springer pp :10.1.1.22.2642

schr oder mossakowski hascasl integrated speci cation development functional programs algebraic methodology software technology lncs vol 
springer pp :10.1.1.22.2642

schr oder mossakowski monad independent dynamic logic hascasl developments algebraic development techniques th international workshop wadt lncs springer appear :10.1.1.22.2642
extended version appear logic comput 
schr oder mossakowski monad independent hoare logic hascasl fundamental aspects software engineering lncs vol 
pp :10.1.1.22.2642

schr oder mossakowski hascasl integrated functional speci cation programming 
language summary available www informatik uni bremen de forschung formal methods cofi hascasl von oheimb hoare logic java isabelle hol concurrency computation practice experience :10.1.1.22.2642
