electronic notes theoretical computer science url www elsevier nl locate entcs volume html pages automated compositional abstraction re nement concurrent programs level approach chaki jo el ouaknine karen edmund clarke computer science department carnegie mellon university pittsburgh pa usa email ouaknine cs cmu edu state space explosion problem model checking remains chief obstacle practical veri cation real world distributed systems 
attempt address problem context verifying concurrent message passing programs safety speci cations 
speci cally fully automated compositional framework combines orthogonal abstraction techniques operating respectively data events counterexample guided abstraction re nement cegar scheme 
way algorithm incrementally increases granularity abstractions speci cation established refuted 
explicit compositionality delays onset state space explosion long possible 
knowledge rst compositional cegar context model checking concurrent programs 
describe approach detail report encouraging preliminary experimental results obtained tool magic 
formal veri cation distributed software long acknowledged dicult important task 
reason tremendous research sponsored semiconductor research src contract tj national science foundation nsf 
ccr ccr oce naval research onr naval research laboratory nrl contract 
army research oce aro contract 
daad 
views contained document author interpreted representing ocial policies expressed implied src nsf onr nrl aro government entity 
published elsevier science chaki ouaknine clarke amount research years devoted modelling validation concurrent systems speci cations 
paradigms techniques ranging process algebra model checking predicate abstraction counterexample guided abstraction re nement cegar proposed ultimate goal automatically verifying large distributed applications written industry level programming languages 
majority advances target speci orthogonal aspects problem fail solve 
combines techniques eciently verify global speci cations concurrent programs fully automated way 
speci cally focus reactive systems implemented concurrent programs communicate synchronous blocking message passing 
examples systems include client server protocols schedulers telecommunication applications consider safety speci cations words requirements describing sequences messages events system allowed produce equivalently bad states system meant avoid 
propose fully automated compositional level abstraction re nement scheme verify parallel composition jj jjc sequential programs satis es speci cation spec 
rst predicate abstraction transform conservatively insofar safety properties concerned nite state program nite state process parallel composition may large state space reduce conservatively aggregating states events perform yielding smaller process explicitly build global state space coarser parallel composition jj jja construction exhibits original system behaviours usually 
check speci cation spec 
successful conclude original system jj jjc safe 
examine counterexample obtained determine valid lower levels 
important note validation carried component wise necessary construct full large state space system 
valid counterexample lowest level shows spec violated terminates procedure 
component speci re nement appropriate abstracted system carried eliminating spurious counterexample algorithm proceeds new iteration veri cation cycle 
crucial features approach consist leverage di erent kinds abstraction reduce parallel composition sequential programs coarse parallel composition nite state processes 
rst predicate abstraction partitions potentially nite state space possible values variables second abstraction resulting states ac chaki ouaknine clarke cording events communicate 
counterexample guided abstraction re nement scheme incrementally re nes abstractions right granularity achieved decide speci cation holds 
note termination entire algorithm obviously guaranteed experimental examples handled requiring human input 
compositional reasoning grounded standard process algebraic techniques enables perform analysis component component having construct global state spaces highest level 
veri cation procedure fully automated requires user input supplying programs speci cation veri ed 
implemented algorithm tool magic modular analysis programs carried number case studies report :10.1.1.103.5769
knowledge algorithm rst invoke cegar single abstraction re nement scheme particular action abstractions rst combine cegar fully automatic compositional reasoning concurrent systems 
experiments carried range variety sequential concurrent examples yield promising results 
smaller examples nd level approach constructs models times smaller generated predicate abstraction 
ratios increase dramatically consider larger larger examples 
instances magic constructs models orders magnitude smaller created mere predicate abstraction 
full details section 
foundations related predicate abstraction introduced means transform conservatively nite state systems nite state ones enable nitary techniques model checking :10.1.1.39.1920:10.1.1.111.7245
widely see instance :10.1.1.48.2623:10.1.1.29.3872:10.1.1.134.652:10.1.1.134.652
technique employ generate automatically suitable predicates described 
formalization general notion abstraction rst appeared 
distinguish exact abstractions preserve properties interest system conservative abstractions guaranteed preserve undesirable properties system :10.1.1.116.9247
advantage usually lead greater reductions state space exact counterparts 
conservative abstractions general require iterated abstraction re nement mechanism cegar order establish speci cation course follows fact halting problem undecidable 
chaki ouaknine clarke satisfaction 
abstractions nite state processes essentially lump states perform set actions gradually re ne partitions reachable successor states 
re nement procedure seen atomic step paige tarjan algorithm yields successive abstractions converge nite number steps bisimulation quotient original process 
counterexample guided abstraction re nement cegar iterative procedure spurious counterexamples speci cation repeatedly eliminated incremental re nements conservative abstraction system 
cegar non automated form 
compositionality features crucially broadly concerned preservation properties substitution components concurrent systems 
extensively studied process algebra particularly conjunction abstraction 
compositional framework non automated cegar data abstractions 
approach di ers communication takes place shared variables blocking message passing abstractions re ned eliminating spurious transitions splitting states 
technique closely related compositionality assume guarantee reasoning 
originally developed circumvent diculties associated generating exact abstractions implemented part fully automated incremental veri cation framework 
works closely resembling note 
bandera project ers tool support automated veri cation java programs interpretation automated cegar explicit compositional support concurrency 
imports abstractions extension java pathfinder incorporates cegar 
compositionality single level abstraction considered 
describes tool implemented java pathfinder explicitly supports concurrency uses datatype abstraction rst level partial order reduction aggregation invisible transitions second level 
abstractions exact require cegar 
slam project successful analyzing interfaces written built predicate abstraction automated cegar treatment ers explicit compositional support concurrency :10.1.1.134.652
lastly blast project proposes single level lazy predicate abstraction scheme cegar thread modular assume guarantee reasoning 
blast framework shared variables message passing communication mechanism 
chaki ouaknine clarke section presents series standard de nitions 
section describes level cegar algorithm section presents action guided cegar procedure 
section summarizes results experiments 
section ers avenues 
preliminaries labelled transition system lts short quadruple hs init act nite set states init initial state act nite set alphabet actions events transition relation 
write mean section noted assume xed lts hs init act trace nite possibly empty sequence actions 
de ne language lts set traces act sequence states init refer underlying sequence states path corresponding trace write enabled fa act tg denote set actions enabled state trace act states write indicate reachable exist states state trace act reach ft js tg stand set states reachable 
overload notation setting set states reach ft tg represents set states reachable state act trace act act necessarily disjoint set actions 
projection act act subtrace obtained simply removing actions act hs init act hs init act ltss 
parallel composition jjm hs init init act act de ned holds act act 
ii act act 
iii act act words components synchronize shared actions proceed independently local actions 
notion parallel composition csp anantharaman 
refer reader proofs standard results chaki ouaknine clarke theorem parallel composition associative commutative far accepted language concerned 
particular bracketing required combining ltss 
ii ltss pair ltss sharing alphabet act act jj jjm jj jjm 
words parallel composition preserves language containment 
iii ltss respective alphabets act act trace 
jj jjm act 
words trace belongs parallel composition ltss checked projecting examining trace individual component separately 
theorem forms basis compositional approach veri cation 
consider concurrent version programming language xed number sequential programs run concurrently independent platforms 
program associated alphabet actions act communicate particular event alphabet programs having alphabets willing synchronize event 
action realized call library routine 
programs local variables shared variables 
words assuming blocking message passing send receive statements sole communication mechanism 
parallel composition jj jjc programs write jj jjc denote set possible traces events jj jjc communicate 
full syntax ansi supported exception pointers recursion arithmetic 
refer reader details 
goal verify concurrent program jj jjc satis es speci cation spec expressed lts 
trace containment notion conformance concurrent program meets speci cation jj jjc spec 
level counterexample guided abstraction re nement consider concurrent program jj jjc speci cation spec 
rst invoke predicate abstraction reduce nite state program nite lts process having alphabet initial abstraction created relatively small set predicates predicates added required re ne eliminate spurious counterexamples 
procedure may add large number predicates yielding model potentially huge state space 
chaki ouaknine clarke input programs specification spec output jj jjc satisfies spec counterexample jj jjc spec predicate abst create ltss action guided abst create ltss repeat jj jja spec return jj jjc satisfies spec extract counterexample jj jja spec jj jjp jj jjc return predicate abstraction refinement adjust create new abstractions action guided refinement eliminate 
fig 

level cegar algorithm 
seek reduce lts fewer states having alphabet abstractions maintain language containment 
theorem immediately yields rule jj jja spec jj jjc spec converse need hold possible trace spec belong jj jja jj jjc 
spurious counterexample eliminated suitably re ning jj jjp re ning subsequently adjusting re ect change 
chief property re nement procedure level spurious counterexample restricting accepted language maintains invariant primed terms denote re ned processes 
note theorem check jj jjp jj jjc sequential component time necessary construct full state spaces parallel compositions 
iterated process forms basis level cegar algorithm 
describe algorithm 
predicate abstraction re nement procedure detailed 
action guided abstraction re nement steps marked respectively section 
chaki ouaknine clarke action guided abstraction cegar scheme operates ltss 
lts hs init act rst create lts hs init act ii contains states typically fewer 
abstraction hs init act ta trace re nement procedure produces re ned abstraction hs init act ii iii contains states important note require share alphabet 
iterating re nement procedure converge nite number steps lts accepts language write hs init act tb denote generic abstraction states called states states called concrete states 
framework states disjoint sets concrete states partition abstraction re nement step corresponds precisely re nement partition 
concrete state unique state belongs written abstraction generate partition sb concrete states uniquely determines model initial state init simply init pair states sb action act postulate transition tb exist concrete states construction instance existential abstraction 
straightforward show sound holds 
initial partition concrete states identi es states share set immediately enabled actions enabled enabled 
sg 
uniquely de nes initial abstraction construction marked 
order describe re nement step need auxiliary de nition 
state sb action act construct re ned partition split agrees sb outside distinguishes concrete states di erent successors sb precisely reach reach split sg 
re ned partition uniquely de nes new abstraction write abs split 
note order compute transition relation abs split suces adjust transitions tb source target 
re nement step takes input spurious trace returns re ned abstraction accept 
achieved repeatedly splitting states paths accept 
chaki ouaknine clarke input abstraction trace am output refined abstraction exists path am um reachable states init initial state reachable states reachable states reach reachable states endwhile abs split sa set states endwhile return fig 

action guided cegar algorithm lts 
algorithm marked describes procedure detail 
theorem algorithm described correct terminates 
proof 
rst note immediate algorithm terminates return abstraction 
equally clear obtained successive re nements 
remains show splitting operation performed algorithm results proper partition re nement termination follows fact set states nite 
observe reach init inner loop terminates 
point claim transition ii concrete states reachable init iii reachable concrete states concrete successors note ii follows fact inner loop entered reachable states iii immediate 
existential de nition transition relation conclude contains kinds concrete states having concrete successors 
splitting state action produces proper re nement 
splitting operation similar unit step paige tarjan algorithm 
iterating re nement procedure converges bisimulation quotient stress cegar algorithm described invokes abstraction re nement routine full parallel composition chaki ouaknine clarke jj jja input 
expensive size global state space grows exponentially number concurrent processes 
cheaper take advantage compositionality theorem jj jja jj jjp act 
suces apply abstraction re nement particular act implies jj jja jj jja 
advantage approach follows fact computational ort required identify grows linearly number concurrent components 
experimental results experiments carried broad goals mind 
rst goal compare ectiveness proposed level cegar approach particularly insofar memory usage concerned 
second goal verify ectiveness lts abstraction scheme 
carried experiments examples sequential programs concurrent programs 
example consisted implementation program speci cation provided separately lts 
experiments carried amd athlon xp machine gb ram running redhat 
example loc description state iter time state iter time lock pthread mutex lock pthread unlock pthread mutex unlock pthread socket socket socket sock alloc sock alloc socket sys send sys send socket sock sendmsg sock sendmsg socket lock modi ed pthread mutex lock unlock modi ed pthread mutex unlock sock alloc modi ed sock alloc sock sendmsg modi ed sock sendmsg times milliseconds fig 

summary results linux kernel code 
loc description denote number lines code brief description benchmark source code 
measurements liter omitted insigni cant 
example veri ed twice low level abstraction full level algorithm 
tests low level chaki ouaknine clarke predicate abstraction re nement scheme marked results tables tests incorporated lts action guided abstraction re nement procedure marked 
schemes started initial sets predicates 
experiment measured quantities size nal state space property proved disproved ii number predicate re nement iterations required iii number lts re nement iterations required iv total number re nement iterations required total time required 
tables summarizing results measurements reported columns named respectively state liter iter time 
unix kernel examples rst set examples meant examine approach works wide spectrum implementations 
chose code fragments linux kernel 
corresponding code fragment constructed speci cation linux man pages 
example speci cation socket states socket system call properly allocates internal data structures new socket returns fails returns appropriate negative error value 
summary results examples 
openssl examples set examples aimed verifying larger pieces code 
designed set benchmarks check various properties openssl version source code popular open source implementation ssl protocol secure data transfer internet 
particular source code implementing handshake occurs ssl client server attempt establish connection 
source code accordingly divided parts implement server client components respectively 
speci cations derived ocial ssl design documents 
example speci cation ssl states handshake initiated client 
rst examples sequential implementations examining di erent properties separately 
examples contains comment free loc 
results summarized 
remaining examples test various properties executed 
examples concurrent consist loc 
openssl benchmarks passed property 
results summarized 
terms state space size level re nement scheme outperforms level scheme note abstraction re nement scheme produces increasingly re ned models reuse memory iteration size nal state space represents total memory 
chaki ouaknine clarke example gain state liter iter time state liter iter time times seconds fig 

summary results sequential openssl examples 
factors ranging 
savings concurrent examples signi cantly higher sequential ones 
expect savings increase number concurrent components implementation 
aim reduce size state space achieved implementation level algorithm shows increase time level scheme 
believe situation engineering optimizations magic 
instance magic currently explicit state enumeration iteration performs entire veri cation scratch 
evident results majority iterations involve lts re nement 
induces local change transition system re ned model di er marginally previous 
done veri cation previous iteration reused 
plan investigate possibility doing incremental veri cation report ndings nal version article 
chaki ouaknine clarke example gain state liter iter time state liter iter time ssl ssl ssl ssl ssl ssl ssl ssl ssl ssl times seconds fig 

summary results concurrent openssl examples 
despite signi cant research advancement automated veri cation concurrent programs remains important elusive goal 
approach automatically compositionally verify concurrent programs safety properties 
concurrent implementations consist sequential programs communicate blocking message passing 
approach instantiation cegar paradigm incorporates levels abstraction respectively aggregate states values local variables observable events 
experimental results tool magic suggest scheme ectively state space explosion problem 
benchmarks level algorithm achieved signi cant reductions state space case orders magnitude compared single level predicate abstraction scheme 
currently engaged extending magic handle proprietary implementation large industrial controller metal casting plant 
code consists lines incorporates concurrent threads communicate shared variables 
adapting magic handle shared memory priorities 
enable test tool available shared memory benchmarks allow compare magic similar tools blast shared memory communication 
intend explore possibility adapting level cegar scheme di erent types conformance relations simulation bisimulation handle wider range speci cations 
chaki ouaknine clarke blast website 
www cad eecs berkeley edu blast 
magic website 
www cs cmu edu chaki magic 
slam website 
research microsoft com slam 
anantharaman clarke foster mishra 
compiling path expressions vlsi circuits 
proceedings popl pages 
ball majumdar millstein rajamani 
automatic predicate abstraction programs 
sigplan conference programming language design implementation pages 
ball rajamani 
automatically validating temporal safety properties interfaces 
proceedings spin volume pages 
springer lncs 
bensalem lakhnech owre 
computing abstractions nite state systems compositionally automatically 
proceedings cav volume pages 
springer lncs 
burch 
trace algebra automatic veri cation real time concurrent systems 
phd thesis carnegie mellon university 
technical report 
cmu cs 
chaki clarke jha veith 
modular veri cation software components proceedings icse 
ieee computer society 
clarke veith wang 
automated abstraction re nement model checking large state spaces sat con ict analysis 
proceedings fmcad pages 
clarke grumberg peled 
model checking 
mit press december 
clarke emerson 
synthesis synchronization skeletons branching time temporal logic 
proceedings workshop logics programs volume pages 
springer lncs 
clarke grumberg jha lu veith 
abstraction re nement 
proceedings cav volume pages 
springer lncs 
clarke grumberg long 
model checking abstraction 
proceedings toplas pages september 
clarke gupta 
sat abstraction re nement ilp machine learning techniques 
proceedings cav pages 
chaki ouaknine clarke giannakopoulou 
learning assumptions compositional veri cation 
proceedings tacas volume pages 
springer lncs 
col uribe 
generating nite state abstractions reactive systems decision procedures 
proceedings cav pages 
corbett dwyer laubach robby zheng 
bandera extracting nite state models java source code 
proceedings icse pages 
ieee computer society 
cousot cousot 
interpretation uni ed lattice model static analysis programs construction approximation xpoints 
proceedings sigplan conference programming languages pages 
dams 
shape analysis predicate abstraction model checking 
proceedings volume 
springer lncs 
das dill park 
experience predicate abstraction 
proceedings cav volume pages 
springer lncs 
grumberg long 
model checking modular veri cation 
acm trans 
programming languages systems 
henzinger majumdar qadeer 
thread modular abstraction re nement 
proceedings cav appear 
springer lncs 
henzinger majumdar 
lazy abstraction 
proceedings popl pages 
henzinger qadeer rajamani 
decomposing re nement proofs assume guarantee reasoning 
proceedings iccad pages 
ieee computer society press 
hoare 
communicating sequential processes 
prentice hall 
kurshan 
analysis discrete event coordination 
proceedings rex workshop volume pages 
springer lncs 
kurshan 
computer aided veri cation coordinating processes automata theoretic approach 
princeton university press 
lakhnech bensalem owre 
incremental veri cation abstraction 
proceedings tacas volume pages 
springer lncs 
mcmillan 
compositional rule hardware design re nement 
proceedings cav volume pages 
springer lncs 
milner 
communication concurrency 
prentice hall international london 
chaki ouaknine clarke kurshan 
syntactic program transformations automatic abstraction 
proceedings cav volume pages 
springer lncs 
clarke osterweil dwyer 
veri cation concurrent software 
proceedings icse pages 
acm press 
paige tarjan 
partition re nement algorithms 
siam journal computing 
dwyer visser 
finding feasible counterexamples model checking abstracted java programs 
proceedings tacas volume pages 
springer lncs 
roscoe 
theory practice concurrency 
prentice hall international london 
graf sa di :10.1.1.39.1920
construction state graphs pvs 
proceedings cav volume pages 
springer lncs 
stoller 
model checking multi threaded distributed java programs 
international journal software tools technology transfer 

