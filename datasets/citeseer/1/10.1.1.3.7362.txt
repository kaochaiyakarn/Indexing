cql continuous query language semantic foundations query execution arvind arasu babu jennifer widom stanford university widom cs stanford edu cql continuous query language supported stream prototype data stream management system stanford 
cql expressive sql declarative language registering continuous queries streams updatable relations 
presenting semantics relies black box mappings streams relations 
mappings define precise general interpretation continuous queries 
cql instantiation semantics sql map relations relations window specifications derived sql map streams relations new operators map relations streams 
cql language operational stream system 
structure cql query execution plans details important components operators inter operator queues synopses sharing components multiple operators queries 
examples drawn linear road benchmark proposed data stream management systems 
public repository data stream applications includes wide variety queries expressed cql 
considerable surge research aspects processing continuous queries unbounded data streams go 
papers include example continuous queries expressed declarative language abb cf mshr 
queries tend simple primarily illustration precise language semantics particularly complex queries left unclear 
furthermore little published date covering execution details general purpose continuous queries 
cql language execution engine general purpose continuous queries streams updatable relations 
cql continuous query language instantiation precise continuous semantics cql implemented stream prototype data stream management system dsms stanford str 
may appear initially defining continuous query language relational streams difficult take relational query language replace relations streams register query stream processor wait answers arrive 
simple monotonic queries complete stream histories approach nearly sufficient 
queries get complex add aggregation subqueries windowing constructs relations mixed streams situation 
consider simple query supported national science foundation iis iis com stanford graduate fellowship 
select price items rows items stream purchased items table relation containing price items rows specifies element sliding window 
simple query single obvious interpretation know 
example result query stream relation 
happens query result price purchased item item element window changes 
initially define precise semantics continuous queries 
semantics data types streams relations classes operators types operators produce relation stream stream relation operators produce relation relations relation relation operators produce stream relation stream relation 
classes operators black box components semantics semantics depend exact operators classes generic properties operators classes 
cql instantiates black boxes semantics uses sql express relation operators window specification language derived sql express relation operators set operators relation stream operators 
cql fully operational prototype dsms str 
cql specify linear road benchmark proposed data stream systems tca specify variety stream applications public repository sqr 
defining semantics concrete language certain goals mind 
wanted exploit understood relational semantics extension relational rewrites execution strategies extent possible 

wanted queries performing simple tasks easy compact write 
conversely wanted simple appearing queries expects 
believe goals achieved large extent 
stream query processing engine physical query plans generated cql textual queries 
query plan merging occurs single query plan may compute multiple continuous queries 
focus structure details execution plans plans selected migrate adapt time subjects forthcoming papers 
developing structure query execution plans certain goals mind 
wanted plans built modular pluggable components generic interfaces especially operators synopsis structures 

wanted execution model efficiently captures combination streams relations forms basis language 

wanted architecture permitting easy experimentation different strategies operator scheduling overflowing state disk sharing state computation multiple continuous queries crucial issues affecting performance 
believe goals achieved large extent 
summarize contributions formalize streams updatable relations section define semantics continuous queries black box classes operators stream relation relation relation stream section 
define concrete language cql instantiates black boxes semantics discussed earlier section 
define syntactic shortcuts defaults cql convenient intuitive query formulation point equivalences language section 
illustrate expressive power cql hypothetical road traffic management application proposed benchmark data stream systems tca sections 
compare expressiveness cql related query languages section 
describe query execution plans strategies stream system cql queries 
focus specifically operators inter operator queues synopses sharing components multiple operators queries section 
related preliminary description semantics cql language appeared invited abw 
include query transformations linear road benchmark material query execution included 
comprehensive description related data streams continuous queries bbd 
focus related languages semantics continuous queries 
continuous queries explicitly implicitly quite time 
materialized views gm form continuous query view continuously updated reflect changes base relations 
jms extends materialized views include chronicles essentially continuous data streams 
operators defined chronicles relations produce chronicles transform chronicles materialized views 
operators constrained ensure resulting materialized views maintained incrementally referencing entire chronicle histories 
continuous queries introduced explicitly time tapestry sql language called tql 
similar language considered bar 
conceptually tql query executed time instant time sql query snapshot database instant results time queries merged set union 
systems continuous queries information dissemination lpt 
semantics continuous queries systems periodic execution time queries tapestry 
section show tapestry queries materialized views relations chronicles expressed cql 
semantics concrete language proposed general languages incorporating window specifications constructs freely mixing mapping streams relations full power relational query language 
telegraphcq system cc proposes declarative language continuous queries particular focus expressive windowing constructs 
telegraphcq language discussed briefly section 
atlas sql extension provides language constructs expressing incremental computation aggregates windows streams context simple spj queries 
gsql sql language developed gigascope dsms network monitoring applications :10.1.1.68.4467
gsql compared cql section 
mile miles seg seg seg seg linear road highway system systems support procedural continuous queries opposed declarative approach 
event condition action rules active database systems closely related sql triggers fall category pd 
aurora system cc users directly creating network stream operators 
large number operator types available simple stream filters complex windowing aggregation operators 
tribeca stream processing system network traffic analysis sul supports windows set operators adapted relational algebra simple language composing query plans 
tribeca support joins streams 
aurora tribeca compared cql detail section 
stream tuples timestamps ordering semantics query language related temporal os sequence slr query languages 
respects temporal ordering constructs languages subsume corresponding features making language expressive easier implement efficiently 
note semantics temporal sequence languages time continuous queries 
running example introduce running example hypothetical road traffic management application introduced linear road benchmark data stream management systems tca 
simplified version linear road application illustrate various aspects language semantics execution plans full details original specification tca 
linear road application uses variable adaptive real time computation vehicle tolls traffic conditions regulate vehicular traffic system highways 
enable variable vehicle equipped sensor continuously relays position speed central server 
server aggregates information received vehicles highway system computes tolls real time transmits tolls back vehicles sensor network 
shows linear road highway system 
highways numbered 

highway miles long runs east west 
traffic flows directions highway 
direction highway divided mile segments exit entrance ramps segment boundaries 
vehicle highway current speed miles hour position reported central server seconds 
position specified attributes highway number 
direction east west position highway specified number feet left west highway 
complete linear road application tca highway lanes direction away detail examples 
vehicles pay toll drive congested segment toll charged uncongested segments 
segment congested average speed vehicles segment minutes miles hour mph 
toll congested segment formula prespecified constant number vehicles currently segment 
note toll congested segment changes vehicles enter leave segment 
server detects vehicle entered congested segment server outputs current toll segment conveyed back vehicle 
stream terminology simplified linear road application single input stream stream positions speeds vehicles single continuous query computing tolls single output toll stream progresses illustrate model express execute application language semantics query execution strategies 
streams relations section define formal model streams updatable relations 
standard relational model stream relation fixed schema consisting set named attributes 
stream element arrivals relation updates assume discrete ordered time domain time instant simply instant value concreteness represent nonnegative integers particular note stands earliest time instant 
time domain models application notion time particularly system wall clock time 
may type datetime semantics requires discrete ordered domain 
thorough discussion time issues data stream management systems appears sw 
definition stream stream possibly infinite bag multiset elements tuple belonging schema timestamp element 
note timestamp part schema stream zero multiple elements timestamp stream 
require finite unbounded number elements timestamp 
classes streams base streams source data streams arrive dsms derived streams intermediate streams produced operators query 
term tuple stream denote data non timestamp portion stream element 
example linear road application just base stream containing vehicle speed position measurements schema speed xpos dir attribute identifies vehicle speed denotes speed mph denotes highway number dir denotes direction east west xpos denotes position vehicle highway feet described section 
time domain type datetime application timestamp stream element denotes physical time position speed measurements taken 
definition relation relation mapping finite unbounded bag tuples belonging schema relation defines unordered bag tuples time instant denoted 
note difference definition relation standard standard relational model relation simply set bag tuples notion time far semantics relational query languages concerned 
term instantaneous relation denote relation traditional bag tuples sense relation denote time varying bag tuples definition 
denotes relation denotes instantaneous relation 
ambiguity omit term instantaneous referring instantaneous relation time relation contains bag tuples 
term base relation input relations derived relation relations produced query operators 
example linear road application contains base relations derived relations useful toll computation 
example toll congested segment depends current number vehicles segment represented derived relation dir attribute denotes highway number dir denotes direction identifies segment highway number vehicles segment 
time contains number vehicles highway segment time 
vehicles report positions seconds vehicles counted segment may left segment way knowing 
section shows derived relation specified base stream main toll computing continuous query 
example suggests concept relation useful applications inputs outputs streams 
natural model current number vehicles segment time varying relation stream latest values 
expressiveness point view necessary streams relations picked just streams relations designed language loss expressiveness issue discussed section 
implementation encode streams relations uniformly plus minus streams discussed section 
semantics section presents semantics continuous queries 
review section semantics classes operators streams relations stream relation operators produce relation stream relation relation operators produce relation relations stream relation streams relations relation stream relation relation operator classes mappings semantics relation stream operators produce stream relation recall relation referring formal notion time varying updatable relation defined section 
stream stream operators absent composed operators classes 
discuss detail section rationale decision primarily goal section exploiting understood relational semantics extension relational rewrites execution strategies extent possible 
terminology denotes bag elements stream timestamps 
denotes bag elements timestamp 
similarly denotes collection instantaneous relations 
denotes instantaneous relation 

stream relation operator takes stream input produces relation output schema instant computable 

relation relation operator takes relations 
rn input produces relation output 
instant computable 
rn 

relation stream operator takes relation input produces stream output schema instant computable 
define semantics 
definition continuous semantics consider query type consistent composition operators classes 
suppose set inputs innermost leaf operators streams 
sn relations 
rm 
define result continuous query time denotes result inputs available notion discussed 
cases case outermost topmost operator relation stream producing stream say 
result time produced recursively applying operators comprising streams 
sn relations 
rm 
case outermost topmost operator stream relation relation relation producing relation say 
result time produced recursively applying operators comprising streams 
sn relations 
rm 
definition informally think continuous queries operationally follows 
time advance domain discussed 
consider query producing stream 
time inputs processed continuous query emits new stream result elements timestamp 
assumptions operators new stream elements timestamp produced inputs timestamp 
query producing relation similar time inputs processed continuous query updates output relation state 
understand means time advance domain relationship application time wall clock time system time complex issue discussed depth separate sw 
precise query semantics need additional assumptions 
time advances inputs processed 
appears tacitly assuming streams arrive timestamp order relations updated timestamp order timestamp skew streams relations 
practice implement semantics correctly systems cope order skewed inputs 
issue revisited section thoroughly covered sw 
example linear road application sequence operators producing derived relation conceptually produces time instant instantaneous relation containing current number vehicles segment 
dsms implementing semantics produced known elements input stream dir timestamp received 
furthermore may additional lag relation updated due query processing time 
semantics dictate liveness continuous query output issue relegated latency management query processor cc 
continuous query language section presents concrete language cql defined instantiating operators semantics 
specify syntactic shortcuts defaults simplify expression common operations 
broadly approach designing operators cql follows support large class relation relation operators perform bulk data manipulation typical cql query small set stream relation relation stream operators convert streams relations back 
primary advantage approach ability reuse formal foundations huge body implementation techniques relation relation languages relational algebra sql starting scratch heavily stream language 
furthermore see queries cql quite natural express 
technically directly import existing conventional relation relation operators concrete language operate instantaneous relations operate timevarying relations mapping obvious denote traditional relational operator query instantaneous input relations 
rn 
corresponding relation relation operator oc cql produces time varying relation time 
rn 
apparent drawback approach simple filter stream requires operators turn stream relation perform relational filter turn relation back stream 
cql defaults syntactic shortcuts filters simple queries easy express section 
sections cover classes operators cql 
stream relation operators currently stream relation operators cql concept sliding window stream window point time contains historical snapshot finite portion stream 
classes sliding window operators cql time tuple partitioned defined 
syntactically sliding window operators specified window specification language derived sql 
types sliding windows fixed windows sul tumbling windows cc value windows slr windowing construct incorporated cql easily new syntax added semantics incorporating new window type relies solely semantics window operator development semantics 
time sliding windows time sliding window stream takes time interval parameter specified range 
specify syntax restrictions time interval point assume specifies computable period application time 
intuitively time window defines output relation time sliding interval size time units capturing latest portion ordered stream 
formally output relation range defined max important special cases 
consists tuples obtained elements timestamp 
cql introduce syntax special case 
consists tuples obtained elements uses sql syntax range unbounded terms window unbounded window refer special windows 
example range seconds denotes time sliding window seconds input stream 
time instant output relation sliding window contains bag position speed measurements previous seconds 
similarly instant contains possibly empty bag position speed measurements instant range unbounded contains bag position speed measurements far 
tuple windows tuple sliding window stream takes positive integer parameter specified query rows 
intuitively tuple window defines output relation time sliding window tuples ordered stream 
formally output relation rows consists tuples largest timestamps tuples length 
suppose specify sliding window tuples point tuples nth timestamp clarity assume timestamps unique 
break tie fashion generate exactly tuples window 
assume ties broken arbitrarily 
tuple sliding windows may window types dropped keyword preceding appearing sql syntax earlier specification mw preceding windows keyword superfluous 
nondeterministic may appropriate timestamps unique 
special case specified rows unbounded equivalent range unbounded 
example tuple sliding window sense stream case stream element timestamps unique 
example instant sliding window rows denotes latest position speed measurement ambiguous multiple measurements carry timestamp common occurrence linear road application 
partitioned windows partitioned sliding window stream takes positive integer subset 
ak attributes parameters 
specified query partition ak rows 
intuitively window logically partitions different substreams equality attributes 
ak similar sql group computes tuple sliding window size independently substream takes union windows produce output relation 
formally tuple values 
ak attributes 
ak occurs output instantaneous relation iff exists element largest timestamps elements tuples values 
ak attributes 
ak 
note analogous time partitioned windows provide additional expressiveness time windows 
example partitioned window partition rows partitions stream substreams picks latest element substream 
note ambiguity picking latest element substream position speed reports particular vehicle seconds granularity datetime second 
time instant relation defined window contains latest speed position measurement vehicle transmitted measurement 
relation relation operators relation relation operators cql derived traditional relational queries expressed sql straightforward semantic mapping time varying relations specified section 
traditional relation referenced sql query base derived relation referenced cql 
example consider cql query linear road application select distinct range seconds query composed stream relation sliding window operator followed relation operator performs projection duplicate elimination 
output relation query contains time instant set active vehicles vehicles having transmitted position speed measurement seconds 
relation stream operators cql relation stream operators istream rstream 
formal definitions operators assumed bag versions 

istream insert stream applied relation contains stream element tuple 
assuming notational simplicity istream 
analogously delete stream applied relation contains stream element tuple 
formally 
rstream relation stream applied relation contains stream element tuple time 
formally rstream careful reader may observe istream expressible rstream time sliding windows relational operators 
retain operators cql keeping goal section easy queries easy write 
example consider cql query stream filtering select istream range unbounded speed note syntax relation stream operator select clause 
query composed operators unbounded window producing relation time contains speed position measurements relational filter operator restricts relation measurements speed greater mph istream operator streams new values filtered relation result query 
effect simple filter outputs input elements speed greater mph 
filter query written rstream operator window select rstream speed see shortly defaults permit query written intuitive form select speed istream operator commonly unbounded windows express filter conditions shown stream results sliding window join queries 
rstream operator commonly windows express filter conditions shown stream results joins streams relations see query section 
operator frequently istream rstream see sqr examples 
syntactic shortcuts defaults keeping goal section permit syntactic shortcuts cql result application certain defaults 
course may cases default behavior author intended assume queries registered system informs author defaults applied offers opportunity edit expanded query 
classes shortcuts omitting window specifications omitting relation stream operators 
default windows stream referenced cql query relation expected commonly clause unbounded window applied stream default 
default unbounded window usually produces appropriate behavior cases window appropriate stream joined relation see query section 
default relation stream operators cases natural authors omit intended istream operator cql query 
outermost query streamed results stored results desired mw 

inner subquery window specified subquery result 
case add istream operator default query produces relation monotonic 
relation monotonic iff 
conservative monotonicity test performed statically 
example base relation monotonic known append range unbounded monotonic stream join monotonic relations monotonic 
result cql query monotonic relation intuitive sense convert relation stream istream 
monotonic author intend istream rstream add relation stream operator default 
second case add istream operator default subquery monotonic 
intended meaning window specification subquery result somewhat ambiguous semantic type error generated author add explicit stream operator 
example see filter query example written intuitive form select speed referenced window specification unbounded window applied default 
output relation window filter operators monotonic add default istream operator result 
linear road cql recall linear road application base input stream containing measurements vehicles highway system 
illustration derived relations streams linear road queries goal compute output toll stream toll 
recall vehicle entering congested segment time result output element denotes toll congested segment time 
incorporate assumptions suggested original linear road specification tca computing tolls 
vehicle considered entered segment speed position measurement vehicle transmitted segment 
vehicle considered remain segment exits system see assumption enters segment speed position measurement transmitted different segment 

vehicle considered exited system speed position measurement vehicle transmitted seconds 
assumptions necessary vehicle transmits speed position measurement seconds 
continuous query producing fairly complex express named derived relations streams 
shows derived relations streams interdependencies 
example produced derived stream derived relations 
base input stream naturally appears source 
specifications derived streams relations topological order 
derived stream relation describe meaning followed cql sub query produces 
query speed dir stream obtained replacing xpos attribute element corresponding segment number 
segments exactly mile long segment number computed integer dividing xpos number feet mile 
select speed xpos dir note default unbounded window default istream operator query 
query dir instant relation contains current segments active vehicles vehicles currently highway system 
select distinct dir range seconds partition rows informally query uses time window identify currently active vehicles assumption partitioned window identify latest segments vehicles 
query dir vehicle entering segment recall segment specified attributes highway number direction highway segment number highway time produces element stream 
select istream produced applying istream operator 
vehicle entering segment time causes new tuple appear causes istream operator produce element 
query dir instant relation contains current set congested segments 
recall section segment considered congested average speed vehicles segment previous minutes mph 
select dir range minutes group dir having avg speed query dir relation introduced example 
instant relation contains current count vehicles segment 
select dir count group dir query toll final output toll stream 
select rstream toll dir dir dir dir instant window identifies set vehicles entered new segments 
set vehicles joined determine vehicles entered congested segments compute tolls vehicles 
recall section toll congested segment formula prespecified constant number vehicles currently segment 
query provides example default unbounded window yield intended behavior window specification omitted 
general stream joined relation order add attributes filter stream window stream coupled rstream operator usually provides desired behavior 
recall linear road specification simplified version original tca 
cql specification complete linear road benchmark number stream applications network monitoring online auctions available sqr 
time management recall sections semantics assumes discrete ordered time domain specifically continuous semantics time logically advancing domain conceptually time inputs processed output corresponding stream elements timestamp instantaneous relation produced 
section briefly discuss dsms implement semantics realistic conditions 
topic covered depth sw 
exposition remainder section assume relations updated timestamped relational update requests arrive stream 
loss generality focus streams 
dsms produce output corresponding time processed input stream elements 
words know real wall clock time new input stream elements timestamp arrive making determination straightforward input streams alive elements arrive timestamp order 
stream applications including linear road input streams may generated remote sources network conveying stream elements dsms may guarantee order transmission particularly sources streams may pause restart 
stream prototype approach assume additional meta input system called heartbeats 
heartbeat consists simply timestamp semantics arrival heartbeat system receive stream elements timestamp 
various ways heartbeats may generated 
examples 
easiest fairly common case timestamps assigned dsms clock stream tuples arrive system 
stream elements ordered clock provides heartbeats 

source input stream generate source heartbeats indicate elements stream timestamp equal specified heartbeat 
sources input streams generate source heartbeats application level query level heartbeat generated minimum source heartbeats 
note approach feasible heartbeats stream elements single input stream reach dsms timestamp order 

properties stream sources system networking environment may generate heartbeats 
example know sources input streams global clock timestamping upper bound delay stream elements reaching dsms global time generate heartbeat timestamp details approach time management heartbeat generation sw 
equivalences cql section briefly consider syntactic equivalences cql language 
declarative language equivalences enable important query rewrite optimizations optimization process central topic 
equivalences hold sql standard relational semantics carry relational portion cql including join reordering predicate pushdown subquery flattening furthermore cql query subquery producing relation thought materialized view updated time equivalences materialized view maintenance gm applied cql 
example materialized view joining relations generally maintained incrementally recomputation approach join relations windowed streams cql 
fact equivalence incorporated binary join physical query plan operator section 
consider equivalences streams window reduction filter window commutativity 
identification useful stream syntactic equivalences topic 
window reduction equivalence rewrite cql query subquery unbounded window istream operator equivalent sub query window rstream operator 
select list stream including subquery producing stream condition 
select istream range unbounded select rstream furthermore stream key duplicates need replace istream operator rstream window applied little difference efficiency istream rstream 
transforming unbounded obviously suggests efficient implementation logically unbounded windows require buffering entire history stream windows allow stream tuple discarded soon processed 
separate developed techniques transforming unbounded windows rows windows transformations rely joins constraints streams bsw 
may find cases general criteria unbounded windows replaced windows detailed exploration left 
generally istream rstream equivalent relation 
filter window commutativity equivalence useful query rewrite optimization commutativity selection conditions time windows 
select list stream including subquery producing stream condition time interval 
select range select range system uses query evaluation strategy materializing windows specified query filtering applying window preferable reduces steady state memory overhead mw 
note converse transformation applied prefer move filtering condition window order allow window shared multiple queries different selection conditions mw 
note filters tuple windows generally commute 
comparison languages language provide detailed comparison related languages continuous queries streams relations discussed briefly section 
specifically show basic cql user defined functions aggregates window operators strictly expressive tapestry tribeca sul gsql materialized views relations chronicles jms :10.1.1.68.4467
discuss aurora cc difficult compare cql aurora aurora graphical procedural nature 
section discuss choice define language relations streams stream approach 
included discussion stream query language telegraphcq cc 
views chronicles conventional materialized view defined sql query expressed cql query cql semantics 
chronicle data model cdm jms defines chronicles relations persistent views equivalent streams base relations derived relations terminology 
consistency terminology theirs 
cdm supports classes operators relational algebra expressed cql 
class takes streams optionally base relations input produces streams output 
operator class expressed equivalently cql applying window input streams translating relational algebra operator sql applying rstream operator produce streamed result 
example join query cdm equivalent cql query select rstream second class operators takes stream input produces derived relation output 
operators expressed cql applying unbounded window input stream translating relational algebra operator sql 
operators cdm strictly expressive cql 
cdm support sliding windows streams implicit unbounded windows described 
furthermore cdm distinguishes base relations joined streams derived relations persistent views 
restrictions ensure derived relations cdm maintained incrementally time logarithmic size derived relation 
cql queries hand require unbounded time memory shown abb addressed mw 
tapestry tapestry queries expressed sql syntax 
time result tapestry query contains set tuples logically obtained executing relational sql query instant set union results 
semantics equivalent cql query select istream distinct istream range unbounded tapestry support sliding windows streams relation stream operators 
tribeca tribeca set stream stream operators shown tribeca operators specified sul expressed cql details omitted 
interesting operators demux demultiplex mux multiplex 
tribeca query demux operator split single stream arbitrary number substreams substreams processed separately stream stream operators resulting substreams merged single result stream mux operator 
type query expressed cql combination partitioned window group 
chronicles tapestry tribeca strictly expressive cql 
tribeca queries take single stream input produce single stream output notion relation 
cql queries multiple input streams freely mix streams relations 
gigascope gsql sql query language developed gigascope dsms designed specifically network monitoring applications 
gsql stream language relations created manipulated user defined functions 
streams gsql primary operators selection join aggregation merge 
constraints join aggregation ensure nonblocking join operator contain predicate involving ordered attribute joining streams aggregation operator grouping attribute ordered 
ordered attributes generalizations cql timestamps 
primary operations gsql expressed cql selection straightforward 
gsql merge operator expressed union cql 
gsql join operator translates sliding window join istream operator cql 
nontrivial express gsql aggregation cql requiring grouping aggregation projection join expressible details omitted 
aurora aurora queries built set eleven operator types cc 
operators composed users global query execution plan boxes arrows graphical interface 
somewhat difficult compare procedural query interface aurora declarative language cql draw distinctions 
aggregation operators aurora slide defined user defined functions yielding nearly unlimited expressive power 
aggregation operators optional parameters set user 
example parameters direct operator take certain action stream elements arrived wall clock seconds making semantics dependent stream arrival processing rates 
operators aurora stream stream aurora explicitly support relations 
order express cql queries involving derived relations relation relation operators aurora procedurally manipulates state corresponding derived relation 
stream query language semantics cql distinguish fundamental data types relations streams 
section outline motivations choosing dual approach purely stream approach 
worth noting derive stream language ls language cql instantiation semantics follows 

corresponding ary relation relation operator ary stream operator os ls 
semantics os 
sn expressed rstream 
sn 

corresponding stream relation operator unary stream stream operator ws ls 
semantics ws expressed rstream 

operators ls corresponding relation stream operators ls essentially expressive power 
clearly query ls rewritten query obtain query qs ls performing steps 
transform equivalent query rstream relation stream operator step possible indicated section 
second replace input relation ri rstream ri 
replace relation relation stream relation operator ls equivalent definitions 
turns language ls derived cql quite similar stream stream approach taken telegraphcq cc 
chose dual approach stream approach reasons 
goal section wanted exploit wide body understanding existing relational model extent possible 

experience large number queries sqr suggests dual approach results intuitive queries stream approach 
illustrated linear road examples section applications purely stream input output specifications may include fundamentally relational components 

having relations streams cleanly generalizes materialized views discussed detail section 
note chronicle data model jms discussed section takes approach similar supports chronicles closely related streams materialized views relations 
cql implementation stream section describe query plans execution strategies implementation cql declarative query language stream prototype data stream management system abb 
section describes physical representation streams relations query plans section describes query plan structure section enumerates operators query plans section briefly discusses query optimization plan generation 
details query plan generation adaptive approach query optimization topics forthcoming papers 
section presents stream graphical user interface viewing monitoring altering query plans 
internal representation streams relations recall formal definitions streams relations section 
stream bag pairs represented sequence timestamped tuple insertions relation time varying bag tuples represented sequence timestamped tuples insertion tuples deletion tuples capture changing state relation 
stream exploits similarity streams relations uses common physical representation sequences tagged tuples 
tuple part contains value attribute schema stream relation tag contains timestamp indicates tuple insertion deletion 
tagged tuple sequences append nondecreasing order timestamp 
base streams relation updates arrive timestamp order converted sorted sequences described section operators emit sorted sequences 
stream query plans continuous query specified cql registered stream system compiled query plan 
query plan merged existing query plans possible order share computation state 
plan generation focus discuss briefly section 
query plan runs continuously composed different types components operators queues synopses 
operators query plan operator reads input queues processes input semantics writes output output queue 
section describes current set operators supported stream enumerated table 
queues described encode streams relations query plan operators implement operator types semantics cql stream relation relation relation relation stream 
queues queue connects input operator oi output operator oo 
time queue contains possibly empty sequence representing portion stream relation physical representation described section 
contents pass queue time correspond stream relation produced oi 
queue buffers insertions deletions output oi processed oo 
synopses synopses store intermediate state needed continuous query plans 
query plans synopsis owned single operator state synopsis contains needed evaluation example perform windowed join streams join operator access tuples current window input stream 
join operator maintains synopsis hash table joined inputs 
hand operators selection duplicate preserving union require synopsis require saved state 
common synopsis system materialize current state relation contents sliding window relation derived subquery 
synopses may store summary tuples stream relation approximate query answering 
example synopsis types purpose reservoir samples vit streams bloom filters blo 
memory management currently queues synopses stored entirely memory process implementing capability spill disk 
common pool memory allocated queues synopses demand page granularity 
minimize copying proliferation tuples tuple data stored synopses replicated 
queues contain tuple data synopses tags containing timestamp insertion deletion indicator 
addition synopses simply stubs point data synopses discussed section 
example query plans illustrates merged stream query plan continuous queries input streams 
query windowed aggregate query maintains maximum value distinct value tuple sliding window stream 
cql select max rows group query streams result sliding window join streams 
window tuple window containing tuples window minutes time window 
cql select istream rows range seconds syn syn aggregate binary syn join syn syn syn seq windows stream syn seq windows stream continuous query plan queries plan contains operators seq windows seq windows aggregate binary join stream synopses syn syn queues 
operators seq windows seq windows stream relation aggregate binary join relation relation stream relation stream 
explain detail operators behave 
operator seq windows sliding window operator reads input stream tuples input queue updates sliding window synopsis syn outputs insertions deletions window relation queues 
syn contains tuples stream seq windows processed larger windows applied 
sliding window operator seq windows processes input stream tuples queue 
seq windows maintains synopsis syn contains tuples timestamps seconds 
seq windows outputs insertions deletions window relation queue 
specifically tuple timestamp seq windows produce insertion window timestamp deletion window timestamp seconds 
recall section insertions deletions emitted operator nondecreasing timestamp order 
operator aggregate maintains maximum value distinct value input relation tuple sliding window stream 
aggregate values change insertions deletions window recall provided operator seq windows queue 
operator aggregate maintains current aggregation result synopsis syn outputs insertions deletions result queue 
max incrementally maintainable current maximum reality special operator stream shepherd handles incoming streams placing elements corresponding stream input queues see section 
value leaves window may need inspect entire window find new maximum operator aggregate maintains second synopsis syn sufficient information maintain 
turns syn simply time shifted version syn syn contains tuple window tuples 
duplicating information plan shares tuple data syn syn indicated dotted arrow 
operator binary join joins input relations sliding windows streams 
binary join computes join incrementally insertions deletions windows provided queues respectively 
binary join processes tuples nondecreasing timestamp order inputs 
time ready process input tuple selects tuple queue lowest timestamp 
logically binary join maintains synopsis input syn syn 
insertion deletion joined syn compute corresponding insertions deletions join result output queue similarly 
joins nested loop index joins depending choose build indexes join attributes syn syn 
logically syn contains tuples stream binary join processed 
implementation actual tuple data shared duplicated synopses syn syn indicated dotted arrow 
similarly plan shares tuple data syn syn 
furthermore subplan rooted seq windows shared aggregate binary join sharing window computation queries 
query plans perform window sharing stream single physically stored synopsis automatically containing stream elements needed window stream see section 
operator stream converts relation produced join stream relation insertions semantics istream operator section 
stream receives insertions deletions join result queue appear stream simply pass insertions drop deletions 
tuple happens inserted deleted join result timestamp correct semantics stream detect case pass insertion 
case occur example window slides tuple values enter leave window happen identical 
handle case correctly stream buffers input insertions timestamp synopsis knows see tuples timestamp recall section 
important timestamps tuples output query operator properly reflect semantics specified earlier 
operators output tuples produced result input tuple consumed turns semantics maintained correctly copying input tuple timestamp output tuple 
example input tuple timestamp causes tuple window slide insert delete generated slide timestamped 
join results produced new input tuple timestamp new join results timestamp timestamps joining tuples process join inputs nondecreasing timestamp order inputs 
aggregation similar new input tuple timestamp produces insertions deletions aggregate result timestamped 
time windows trickier illustrated 
time window size stream tuple timestamp generates inserted tuple timestamp generates deleted tuple timestamp timestamp arithmetic particularly meaning depends time domain timestamps belong 
recall section semantics assumes discrete ordered time domain denotes increment domain second datetime domain 
execution query plans controlled global scheduler currently runs thread query operators system 
time scheduler invoked selects operator execute calls specific procedure defined operator passing parameter maximum number input tuples operator process returning control scheduler 
currently simple round robin scheduler intend incorporate appropriate scheduling algorithm research 
note synopses example stream query plan see query plans tend overloaded synopses 
example plan windowed join query uses synopses seq window operators binary join operator stream operator 
technique generating numerous synopses easier implement plan generation algorithm works arbitrary cql queries 
add post processing step traverses query plans physically merges synopses 
approach far leave synopses place logical stubs primarily point synopses 
example plan query materializes synopses synopses binary join operator shared synopses corresponding seq window operators 
synopses syn syn stubs pointing synopses syn syn respectively 
stream query operators section specify query operators currently implemented stream prototype query plans 
operator cql operator system operator 
cql operator types semantics stream relation relation relation stream 
operators discussed previous section cql operators 
system operators isolate cql operators lower level issues asynchronous order arrival streams load shedding bdm external stream data formats 
operators listed table 
stream relation operators sliding window operator seq window stream relation operator implemented stream 
supports tuple time partitioned window specifications introduced section 
illustrated stream instantiates sliding window operator denoted seq windows stream continuous query specifying window operator seq windows input queue providing tuples nondecreasing timestamp order 
sliding window query plan seq windows maintains output queue containing insertions deletions window 
single window operator stream system able share computation memory required window maintenance queries referencing name operator type description seq window stream relation implements time tuple partitioned windows select relation relation filters tuples predicate project relation relation duplicate preserving projection binary join relation relation joins input relations relation relation multiway join union relation relation bag union relation relation bag difference intersect relation relation bag intersection relation relation input relations aggregate relation relation performs grouping aggregation duplicate eliminate relation relation performs duplicate elimination stream relation stream implements istream semantics stream relation stream implements semantics stream relation stream implements rstream semantics stream shepherd system operator handles input streams arriving network stream sample system operator samples specified fraction tuples stream glue system operator adapter merging view plan rel glue system operator adapter merging view plan shared rel op system operator materializes relation sharing output system operator sends results remote clients relation relation operators table operators stream query plans definition relation relation operator takes relations input produces relation output 
stream query processor relations encoded sequences insertions deletions move queues query plans 
relation relation operator processes insertions deletions timestamp order input queues computes output incrementally writes output insertions deletions output queue timestamp order 
listed table stream supports relation relation operators corresponding standard relational operators 
notice stream supports join operators binary join binary join operator illustrated multiway join operator proposed 
consequently multiway join processed ways materialize intermediate results tree binary joins 
deciding strategy query optimization issue covered 
relation stream operators stream supports relation stream operators stream stream stream corresponding istream rstream operators defined section 
operator processes insertions deletions timestamp order single input queue writes output stream insertions output queue timestamp order 
consider stream 
mentioned section appear stream simply pass insertions ignore deletions tuple happens inserted deleted timestamp correct semantics stream detect case pass insertion 
handle case correctly stream operator buffer input insertions timestamp synopsis knows see tuples timestamp recall section 
operator stream exactly symmetric stream 
operator stream maintains entire current state input relation synopsis outputs tuples insertions time step 
may appear expensive recall section rstream operator commonly windows current state relation generally small 
system operators primary purpose system operators stream isolate cql operators dealing various lower level issues 
completeness understanding stream query plans section briefly discuss operators 
stream shepherd operator stream serves source query plans accessing primarily receives tuples arriving asynchronously network transforms stream internal representation writes appropriate input queues 
operator responsible buffering input tuples proper ordering generating heartbeats source applications don provide sw performing load shedding overload bdm 
stream sample operator currently system managed load shedding bdm intend implement sample clause query language bbd 
stream sample drops specified fraction stream tuples input queue uniform random sample coin toss 
implemented system operators serve materialization points relations shared rel op enable plans views merged new query plans rel glue stream glue send query results remote clients output 
query optimization cql language operational stream system query plan generator fairly naive hard coded heuristics generate query plans 
commonly applied heuristics 
push selections joins 

maintain indexes synopses binary join aggregate operators 

share synopses query plans possible 
actively moving time dynamic cost optimization cql queries 
cql uses sql relational query language leverage time optimization techniques traditional relational systems 
addition exploring adaptive query optimization techniques coarser grained eddies telegraph project cc 
approach relies interacting components monitor captures properties streams system behavior optimizer reconfigure query plans resource allocation properties change time 
example stream plans lastly snapshots query plans taken stream graphical query plan visualizer 
visualization interface users inspect plan generated continuous query soon query registered monitor plan behavior execution alter plan structure attributes plans memory allocation purpose experimentation 
shows query plan simple illustrative cql query streams select name max num rows rows name num num group name query windowed way join filter predicate followed aggregation 
system operators query plan stream shepherd operators streams output operator send query result continuously client submitted query 
cql operators seq window select binary join aggregate duplicate preserving project 
notice synopses shared window operators join selection pushed join 
selection pushed window operator general tuple windows selection commute 
binary join operator materializes output relation synopsis shared aggregate operator similar example section 
shows complete query plan linear road query section incorporates plans subqueries write query cql 
expect readers examine detail complex query plan 
plan aggregate query join plan query abb arasu babcock babu widom 
characterizing memory requirements queries continuous data streams 
proc 
st acm sigact sigmod sigart symp 
principles database systems pages june 
abb arasu babcock babu datar ito rosenstein widom 
stream stanford stream data manager 
proc 
acm sigmod intl 
conf 
management data page june 
demo description 
abw arasu babu widom 
cql language continuous queries streams relations 
th intl 
workshop database programming languages pages sept 
bar daniel barbar 
characterization continuous queries 
intl 
journal cooperative information systems dec 
bbd babcock babu datar motwani widom 
models issues data stream systems 
proc 
st acm sigact sigmod sigart symp 
principles database systems pages june 
babcock babu datar motwani 
chain operator scheduling memory minimization data stream systems 
proc 
acm sigmod intl 
conf 
management data pages june 
bdm babcock datar motwani 
load shedding aggregation queries data streams 
proc 
th intl 
conf 
data engineering mar 
appear 
blo bloom 
space time trade offs hash coding allowable errors 
communications acm july 
bsw babu srivastava widom 
exploiting constraints reduce memory overhead continuous queries data streams 
technical report stanford edu pub stanford university nov 
cc carney monitoring streams new class data management applications 
proc 
th intl 
conf 
large data bases pages aug 
cc carney operator scheduling data stream manager 
proc 
th intl 
conf 
large data bases pages sept 
cc cooper telegraphcq continuous dataflow processing uncertain world 
proc 
st conf 
innovative data systems research pages jan 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
proc 
acm sigmod intl 
conf 
management data pages may 
cf franklin 
streaming queries streaming data 
proc 
th intl 
conf 
large data bases pages aug 
cranor johnson shkapenyuk 
gigascope stream database network applications 
proc 
acm sigmod intl 
conf 
management data pages june 
dobra garofalakis gehrke rastogi 
processing complex aggregate queries data streams 
proc 
acm sigmod intl 
conf 
management data pages june 
gehrke 
special issue data stream processing 
ieee computer society bulletin technical comm 
data engg mar 
gm gupta mumick 
maintenance materialized views problems techniques applications 
ieee computer society bulletin technical comm 
data engg june 
go ozsu 
issues data stream management 
sigmod record june 
franklin aref elmagarmid 
scheduling shared window joins data streams 
proc 
th intl 
conf 
large data bases pages sept 
jms jagadish mumick silberschatz 
view maintenance issues chronicle data model 
proc 
th acm sigact sigmod sigart symp 
principles database systems pages may 
lpt liu pu tang 
continual queries internet scale event driven information delivery 
ieee trans 
knowledge data engg aug 
mshr madden shah hellerstein raman 
continuously adaptive continuous queries streams 
proc 
acm sigmod intl 
conf 
management data pages june 
mw motwani widom query processing approximation resource management data stream management system 
proc 
st conf 
innovative data systems research pages jan 
nguyen abiteboul 
monitoring xml data web 
proc 
acm sigmod intl 
conf 
management data pages may 
os snodgrass 
temporal real time databases survey 
ieee trans 
knowledge data engg aug 
pd paton diaz 
active database systems 
acm computing surveys mar 
slr seshadri livny ramakrishnan 
seq model sequence databases 
proc 
th intl 
conf 
data engineering pages mar 
sqr sqr stream query repository 
www db stanford edu stream sqr 
str stanford stream data management project 
www db stanford edu stream 
sul sullivan 
tribeca stream database manager network traffic analysis 
proc 
nd intl 
conf 
large data bases page sept 
sw srivastava widom 
flexible time management data stream systems 
technical report stanford edu pub stanford university july 
tca cherniack arasu 
linear road stream data management benchmark 
technical report 
available www cs brown edu research aurora linear road pdf july 
tatbul cetintemel zdonik cherniack stonebraker 
load shedding data stream manager 
proc 
intl 
conf 
large data bases pages sept 
terry goldberg nichols oki 
continuous queries databases 
proc 
acm sigmod intl 
conf 
management data pages june 
tucker tufte maier 
benchmark querying data streams 
manuscript available www cse ogi edu dot niagara 
vit vitter 
random sampling reservoir 
acm trans 
mathematical software mar 
naughton burger 
maximizing output rate multi way join queries streaming information sources 
proc 
th intl 
conf 
large data bases pages sept 
wang zaniolo luo 
atlas turing complete extension sql data mining applications streams 
manuscript available wis cs ucla edu publications html 

