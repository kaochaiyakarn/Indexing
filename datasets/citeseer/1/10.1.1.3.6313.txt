database evolution approach object oriented databases rashid computing department lancaster university lancaster la yr uk comp lancs ac uk describes composite evolution approach integrates evolution various types entities object oriented database model 
approach provides maintainers coherent comprehensible view system time maintains change histories fine granularity 
links meta objects implemented dynamic relationships semantic constructs firstclass objects 
referential integrity maintained relationships architecture reducing evolution complexity meta object level 
customisable exchangeable instance adaptation approach proposed 
approach separating instance adaptation code class versions aspects abstractions aspect oriented programming localise crosscutting concerns 
high level objectoriented model offering transparent access proposed evolution functionality provided 

conceptual structure object oriented database may remain constant may vary large extent 
need variations evolution arises due variety reasons correct mistakes database design add new features incremental design reflect changes structure real world artefacts modelled database database application object database applications subject evolution 
object oriented databases support evolution critical requirement characteristic complex applications computer aided design manufacturing office information systems provide support 
due underlying rich data model contrast conventional data intensive record processing applications applications require dynamic modifications data residing database way data modelled objects residing database schema database subject change 
furthermore requirement keep track change case needs reverted 
object oriented database management system needs traditional database functionality ability dynamically evolve various versions objects class definitions 
describes approach separation concerns principle dynamic evolution objectoriented databases 
approach implemented provide evolution support semi autonomous database evolution system 
section highlights shortcomings existing approaches 
followed discussion proposed approach 

shortcomings existing approaches historically database community employed fundamental techniques modifying conceptual structure object oriented database schema evolution database logical schema class definition class hierarchy modifications applied class versioning keeps different versions type binds instances specific version type schema versioning allows versions logical schema created manipulated independently addition managing evolution objects residing database number object versioning strategies employed 
approaches tend concentrate particular aspect evolution considering evolution process affects database 
approaches schema evolution category provide maintainers coherent comprehensible view system 
normally employ user defined default transformation functions screening case deferred update order bring existing objects line modified schema 
essential information historical changes lost 
major drawback change need reverted 
class versioning approaches hand maintain information historical class changes 
need change existing objects reflect schema changes 
error handlers update methods employed access objects particular class different versions class 
number versions class grows schema tends quite complex making maintenance difficult 
hard obtain coherent view system presence large number class versions 
schema versioning alleviates shortcomings schema evolution class versioning providing coherent view conceptual structure database time maintaining information historical changes schema 
historical information available finer granularity class versioning 
particularly useful maintaining forward backward compatibility existing applications schema versioning expensive terms space usage especially presence large number schema versions 
minor class changes lead creation new schema version significant overhead 
approaches counter problem simulating schema versions object oriented view techniques 
information historical changes available coarser granularity additional overhead introduced due view maintenance 
exception existing systems consider object versioning separate activity 
integrated evolution model 
consequently experienced application developer aiming managing evolution data meta data faces intellectual barrier interact separate evolution models 
exception iris meta object hierarchy existing systems static 
result code handling connections meta objects spread meta object space 
implementation dynamic evolution features cumbersome additional level complexity introduced due evolution problem moving meta object level 
furthermore hierarchy graph edges labelled order correctly determine particular links represented 
introduces additional overhead new edges introduced existing ones removed modified 
instance adaptation strategy existing systems fixed 
possible customise specific evolution scenario exchange entirely different strategy lifetime database 
required due availability sophisticated efficient strategy 
instance adaptation routines systems spread various classes class versions 
maintenance expensive changes localised 
existing systems offer reasonable evolution features respective categories access features transparent change specification language orthogonal programming language unnecessary schema implementation details hidden maintainers 
application programmer interact lower level object oriented model particular system implementation details schema 
high level object oriented model offering abstractions hide schema implementation details order provide transparent access evolution functionality oodbms available 

composite evolution approach discussed section existing approaches tend concentrate particular aspect evolution 
proposed approach contrast views evolution process affects database 
focuses database evolution schema evolution class versioning offering composite evolution approach providing support class hierarchy evolution class versioning object versioning composite evolution model version derivation graphs proposed basis define evolution taxonomy :10.1.1.3.6313
contrast existing taxonomies proposed evolution primitives evolution model data model particular object database management system 
taxonomy supported dbms supporting composite evolution model 
composite evolution model provides coherent comprehensible view system making maintenance easier 
model forms basis conceptual schema 

evolution dynamic relationships characterises relationships classes static fixed compile time 
relationships instances comparatively dynamic nature changed run time 
viewpoint differs 
relationships classes need fixed compile time 
dynamic nature changed run time 
schema object oriented database dynamically modified various meta objects classes form schema interconnected dynamic relationships 
dynamic schema changes dynamically modifying various relationships meta objects participate 
derives inherited relationships classes defines defined relationships classes members 
relationships exist meta objects objects propagate schema changes affected objects 
proposed evolution mechanism employs dynamic relationships approach observation types entities exist object oriented database 
objects meta objects meta classes 
relationships treated uniform fashion regardless type participating entities type relationship aggregation association 
dynamic relationships approach implement composite evolution model various evolution primitives taxonomy 
dynamic relationships achieve dynamic evolution serves fold purpose 
coherent view conceptual structure database provided making maintenance easier 
second information connections various meta objects separated encapsulated relationship constructs 
relationships dynamically introduced removed modified evolution framework extensible maintainable 
removal modification meta classes requires removal modification various semantic relationships referential integrity managed system 
propagation patterns semantics relationships modified independent fashion significant impact evolution framework 
dynamic relationships approach implemented layer top commercially available object database management system database language 
functionality exposed layer employed implement conceptual schema evolution primitives evolution model taxonomy outlined section 
flexible instance adaptation proposed evolution approach observes instance adaptation strategy object database evolution system crosscuts various class versions 
special abstractions called aspects aspect oriented programming localise crosscutting concerns employed separate instance adaptation strategy class versions 
provides greater flexibility maintainability changes instance adaptation code localised possible customise instance adaptation strategy seamlessly move entirely different required 
dynamic relationships implementation outlined section provided support seamlessly extending system meta class aspect integrating aspect oriented instance adaptation approach system 
instance adaptation aspects specified declarative aspect oriented language dynamically woven weaver tool compose aspects entities crosscut supporting run time persistent aspects 
description different instance adaptation strategies error handlers update methods switching flexible cost effective fashion 

transparent access evolution functionality increasing provision odmg standard commercial oodbms products transparent access traditional database functionality oodbms urgent need provide database application programmers transparent access advanced functionality dynamic evolution 
proposed evolution mechanism offers transparent api high level object oriented model provide access evolution functionality offered composite evolution model implemented dynamic relationships 
application programmer interacts high level model interacting lower level model particular dbms 

summarised author phd thesis 
discussion thesis highlighted need comprehensible rich evolution models object oriented databases demonstrated feasibility 
identified various crosscutting concerns introducing additional complexity evolution frameworks provided strong argument applying separation concerns principle localise changes improve maintainability extensibility evolution frameworks 
notion maintainable extensible evolution frameworks novel contribution takes research object database evolution new dimension 
proposed concepts consider evolution entities residing database management localisation changes evolution framework 
direct contrast existing evolution systems take account evolution database management system evolution framework 
separation concerns object database evolution led concept aspect oriented databases 
aspect oriented database separation concerns explicitly taken account 
various crosscutting concerns separated changes improves maintainability extensibility system 
databases provide storage facilities aspects application programs 
summary approach described provided new perspective object database evolution strong grounds development maintainable extensible databases general evolution frameworks particular 

documentation ed computer associates international fujitsu limited 
banerjee 
chou kim woelk data model issues object oriented applications acm transactions office information systems vol 
pp 

hulten version control object oriented architecture object oriented concepts databases applications kim lochovsky ed pp 

cattell barry eastman jordan russel velez object data standard odmg morgan kaufmann 
meyer zicari schema database evolution object database system vldb conf morgan kaufmann pp 

iris object oriented database management system acm transactions office information systems vol 
pp 

gamma design patterns elements reusable object oriented software addison wesley 
katz unified framework version modeling engineering databases acm computing surveys vol 
pp 

kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming ecoop springer verlag lncs kim 
chou versions schema object oriented databases vldb conf morgan kaufmann pp 

loomis object versioning journal object oriented programming pp 

monk sommerville schema evolution oodbs class versioning acm sigmod record vol 
pp 

peters ozsu axiomatic model dynamic schema evolution objectbase systems acm transactions database systems vol 
pp 


ra rundensteiner transparent schema evolution system object oriented view technology ieee transactions knowledge data engineering vol 
pp 

rashid database evolution approach object oriented databases phd thesis computing department lancaster university uk 
rashid hybrid approach separation concerns story rd international conference meta level architectures separation concerns reflection appear rashid aspect persistence nd international symposium generative component software engineering springer verlag lncs rashid object oriented aspect oriented databases dexa conf 
springer verlag lncs pp 

rashid sawyer dynamic relationships object oriented databases uniform approach dexa conf lncs pp 

rashid sawyer facilitating virtual representation cad data learning approach conceptual database evolution employing direct instance sharing dexa conf springer verlag lncs pp 

rashid sawyer transparent dynamic database evolution java object vol 
pp 

rashid sawyer flexible approach instance adaptation class versioning ecoop symposium objects databases springer verlag lncs pp 

gray miles object versioning system support collaborative design concurrent engineering th british national conference databases pp 

sjoberg quantifying schema evolution information software technology vol 
pp 

skarra zdonik management changing types object oriented database st oopsla conference pp 

