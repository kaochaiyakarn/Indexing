flocking terrain joel constraint systems laboratory department computer science engineering university nebraska lincoln cse unl edu december method animating herds animals follow terrain efficient run real time 
method involves making simple modifications reynolds agent flocking algorithm 
modifications local properties terrain low complexity 
method focuses terrain described elevation grid may extendible arbitrary terrain 
flocking algorithm modifications produces naturally behaving herds follow terrain 
hills attempt follow paths reduce energy expenditure 
terrain rule added flocking algorithm constant parameter adjusted produce different behaviors 
empirical analysis shows parameter affects energy expenditure animals traveling terrain 
acknowledgments advisor dr 
christopher kline sample flocking implementation occasionally referred creating implementation 
supported career award national science foundation 
contents simulation basics reynolds flocking algorithm obstacle avoidance 
implementation 
goal seeking terrain flocks herds correction 
natural behavior terrain 
natural routes 
energy expenditure 
drag force 
avoiding trees repulsive force 
steering nearest silhouette edge 
complexity implementation collision handling 
flock size 
parameters independent parameters 
animal reaction 
inference landmark values empirical analysis 
comfort zone 
visible flock mate range 
visible obstacle range 
viewing angle 
drag factor 
summary 
varying behaviors 
results source code list tables parameter landmarks 
parameters create various behaviors 
list figures rotating velocity slope 
possible paths get past hill 
drag force traveling uphill 
drag force contour closely 
gravity influence object inclined plane 
energy expenditure function coefficient 
energy expenditure function slope 
projection obstacle 
screenshot animals flocking obstacles 
dependency parameters 
screenshot showing animals avoiding obstacles 
screenshot herds moving terrain 
screenshot herd dividing group go hill 
animate large number objects hand tedious job 
job easier try automate process possible 
case flocks herds animals reynolds introduced simple agent approach animate flock animals space 
method animal decisions move small number simple rules consider neighboring members flock 
reynolds suggested modifications lead herd model giving animals ability follow terrain 
challenge give animals ability follow terrain keeping complexity low allow real time simulation herd 
herd move natural looking paths 
animals travel fastest flat ground slowly navigating downhill slowest moving uphill 
simple method satisfy requirements modifying reynolds basic flocking algorithm 
modifications local properties terrain minimize complexity gradient terrain 
method considers terrain described elevation grid words terrain function returns height horizontal position 
may simple extend method applicable arbitrary terrain 
area described section 
section discusses physical simulation 
section gives short descrip tion reynolds flocking algorithm followed explanation modi need algorithm 
sections discuss main behaviors focuses goal seeking ter rain obstacle avoidance respectively 
section discusses time complexity algorithm section discusses implemen tation issues 
implementation algorithm identify parameters allow control behavior flock 
section describes parameters 
sections discuss results respec tively 
simulation basics simulating behavior animal flock amounts updating animal position eq velocity eq time step applies animals moving physical body simulating 
equations position velocity acceleration elapsed time updates 
equations constitute forward euler approximation set differential equations 
simply find explicit solution differential equations acceleration function positions velocities similar dynamic bodies animal environment 
multiple bodies interacting fashion differential equations unsolvable 
simple euler approximation calculation remains matter complex system add bodies 
note equation afford time takes compute term involving acceleration may simply ignore situations 
typically real time simulation want animate simulation frame rate say frames second higher 
small term may negligible depending application 
term significant large accelerations 
tradeoff speed accuracy 
want able determine acceleration 
acceleration going result forces exerted animal decisions move outside forces acting 
time step want update acceleration forces newton law net force mass body 
time update loop program merely need body calculate net force acting update acceleration position velocity body motion formulas 
difference animal inanimate object animal forces acting animal originate animal inanimate objects react outside influences 
noted forward euler method integration possible method 
chose forward euler simplicity 
tion methods fall categories implicit explicit 
forward euler example explicit method 
complex explicit methods result accurate results turns explicit methods unstable large im plicit methods reverse euler remain stable 
downside implicit methods math complicated 
addition implicit methods require explicit knowledge derivatives forces body 
quite complex mul tiple bodies derivatives depend 
requires solving system equations 
implementation forward euler order maintain simplicity 
observations showed simulation remained stable long remained approximately ms 
reynolds flocking algorithm animals boids reynolds flocks move simple rules 
rules results acceleration 
accelerations various behavioral rules combined various ways animate animals 
simple rules produce natural looking flock behavior 
separation accelerating away nearby members flock closer threshhold distance 
alignment adjusting animal velocity match average ity neighbors 
cohesion accelerating center mass visible flock mates 
behavior executed animal individually 
reynolds describes possible behaviors added 
obstacle avoidance goal seeking 
obstacle avoidance produces acceleration steer obstacles goal seeking produces acceleration direction goal location 
possibilities behaviors 
purposes set behaviors separation alignment cohesion obstacle avoidance goal seeking 
section discuss obstacle avoidance section discuss goal seeking 
additions allow terrain explained section 
obstacle avoidance reynolds discusses various methods obstacle avoidance discuss detail 
reynolds divides methods groups geometric models image processing geometrical path planning 
methods listed obstacle avoidance techniques geometric models 
repulsive force field 
steer away center example flake discusses behavior calls view clearing 

steer surface curb 
steer nearest silhouette edge 
obstacle avoidance techniques image processing 
fuzzy silhouette 
obstacle density image 
buffer image 
implementation method similar steer away cen ter discussed section 
implementation implementation physical simulation choose size time step option choose fixed synchronize simulation system clock delay execution main loop simulation takes time solution cause problems executed machine takes longer go main loop 
option main loop run time set amount time elapsed previous execution main loop system clock 
main loop need update body acceleration position velocity motion equations frame animation needs drawn 
implementation animal updated frame 
order speed frame rate real time simulation may update fraction herd frame 
example may wish update half herd frame half frame 
case animal amount time time animal behavior updated 
position velocity animal updated frame may divide behavioral updates acceleration multiple frames manner 
goal seeking experimented goal seeking behavior 
tried simple attractive force pulling goal form pg pa pg position goal point pa position animal arbitrary constant 
gives force direction goal proportional distance goal 
scaling constant clipped maximum magnitude 
alternatively linear function constant magnitude quadratic exponential complex function 
force goal provide desired results tends draw boids full speed flight goal 
situation prevents boids back able catch ones front herd ones front maximum speed 
propose novel improved goal seeking behavior solve issue 
boid position attracted goal boid velocity attracted velocity pointing direction goal 
target velocity defined cruising speed cs 
cruising speed constant maximum speed 
define target cruising velocity vg pg pa vg cs 
pg pa create force pointing current velocity desired velocity 
vg trying get goal quickly possible boids travel slower cruising velocity allowing boids occasionally go faster necessary stragglers need catch 
resulting behavior realistic flock herd travel cruising speed maximum speed emergency conditions arise 
terrain flocks herds section discuss modifications flocking algorithm necessary create herd behavior 
animals confined dimensional space surface terrain curves space 
approach dimensional flocking algorithm terrain modeled height field 
effec tively animals flocking dimensional plane point height property animals adjust behavior 
modeled internally dimensional rendering animation animals drawn correct height terrain 
implementation boids adjust position constant height surface terrain 
implementation may allow complex havior jumping falling 
model horizontal plane height ter rain point 
define gradient height point terrain 
gradient vector components function partial derivatives dh dh dx dy eval point 
gradient gives vector pointing direction rapid increase height pointing direction uphill 
magnitude gradient slope terrain direction denote 
local maximum minimum terrain height perfectly level terrain gradient exactly zero 
exact point sheer cliff discontinuity gradient point undefined 
assume efficient way computing gradient point terrain 
normally simple compute 
example normal vector terrain point vector nx ny nz gradient nx nz ny nz slope terrain direction gradient nx nz ny nz nx ny nz 
correction animals confined dimensional surface dimensional flocking algorithm 
local properties terrain height gradient apply forces animals modify dimensional flocking algorithm 
flocking algorithm requires correction applied animal velocity animal constant velocity traveling hills moving space faster going uphill downhill moving level terrain 
effect seeking 
problem fixed applying correcting factor velocity update animal position frame 
correcting factor takes account slope terrain direction travel sv velocity gradient 
new rotating velocity slope 
illustrates want velocity rotated point slope terrain 
goal keep final velocity correct angle corresponds slope terrain direction travel vnew corrected velocity slope 
solve vnew function slope sv 
tan vnew sv vnew vnew vnew sv updating animal position simply updating position velocity multiply correcting factor sv note accurate correcting factor needs applied acceleration slope direction acceleration sa 
applying correction factor acceleration produce noticeable difference 
applying correcting factor allows animals motion terrain look natural 
particular causes velocity translated correctly velocity 
natural behavior terrain application correcting factor section change animals routes travel terrain 
point herd travel straight hills terrain features way path 
usually want herd go straight top hill natural looking route hill path 
order get natural looking behavior want add basic flocking algorithm new behavior rule takes terrain account 
natural routes possibility pre compute best route 
articles computing shortest routes terrain 
example kapoor describes method computing geodesic shortest path surface polygonal mesh terrain 
shortest path necessarily 
shortest path closer path path 
may prefer animals follow path closer note mean animals travel constant speed 
simply guarantees animated speed animal match expected speed 
path 
path possible paths get past hill 
path path shortest path possibly best robots vehicles time important factor animals humans naturally choose behaviors minimize energy expenditure 
example different gaits employed energy different speeds 
running efficient walking higher speeds walking efficient running slower speeds 
similarly reasonable animals choose paths minimize energy expenditure 
comparison field general relativity body space follows geodesic shortest path space time continuum doing shortest route planning 
merely follows times straight line locally flat space time 
reasonable animals herd follow reasonable path looking properties locally flat terrain gradient current position 
admittedly simplification reality animals see hill front react animal feels change gradient beneath feet 
acceptable approximation 
energy expenditure discussion clear need consider terrain affects energy expenditure 
naturally walking level terrain uses energy walking uphill knows walking steep hill uses energy walking level terrain 
generally conserve energy herd try follow contour lines avoid traveling 
hard rule energy expended increases distance traveled contour line wide short hill distance travel long direct route hill economical 
looking path vertical travel path longer path 
starting goal points may different altitudes ridge valley 
necessary get side ridge herd want pass lowest point ridge going far way 
drag force solution problem terrain create force animals 
force resists motion contour lines 
force increase magnitude gradient current position 
example animals going straight steep hill force acting animals direction downhill opposite direction gradient 
animals contour line traveling orthogonally gradient need avoid pushing downhill away contour line force proportional animal component velocity direction gradient shown figures 
compared drag result moving viscous fluid 
drag force acting direction opposite velocity proportional magnitude velocity fd force terrain thought drag force acts parallel gradient orthogonal contour lines 
drag coefficient grows magnitude gradient 
animal drag force gradient velocity drag force traveling uphill notice velocities figures magnitude produce different drag forces component velocity perpendicular contour lines computing drag force 
result force herd mo tion away direction gradient strongly terrain steeper 
herds take direct route moving wide short hill widely steeper hill 
question drag coefficient computed function slope 
increase slope increases 
linear relationship reasonable justified 
consider effect gravity bodies surface terrain 
animal drag force gradient velocity drag force contour closely inclined plane shown gravity exerts constant force downward body produce force parallel inclined plane perpendicular magnitudes sin cos re spectively angle inclined plane horizontal 
slope plane tan 
reasonable things affect speed animals travel hill extra energy required travel slope traction friction steeper slope animal cautious want travel slowly 
parallel force proportional effort required ascend plane amount traction hill proportional perpendicular normal force 
animal ability go hill sin dx cos gravity influence object inclined plane inversely proportional amount traction inversely proportional normal force 
ability travel inclined plane directly proportional parallel force inversely proportional perpendicular force introducing arbitrary constant aversion going hill form sin tan ks 
cos reasonable linear function slope coefficient drag force assignment dz ks 
fact drag coefficient goes infinity slope goes infinity reasonable 
summarize drag force normally force proportional velocity want drag force act parallel gradient take dot product velocity normalized gradient gradient 
equation said coefficient ks know 
drag force ks 
define force zero magnitude gradient zero 
question remains answered value multiplying constant implemented modifications flocking algorithm described far 
performed tests herds traveling location goal point located distance away simple goal seeking behavior 
constant vary value herds travel smooth randomly generated terrains calculated estimate average amount energy expended trip 
value constant gathered data trips order obtain reliable mean 
trip computed energy expended member herd took average members herd reached goal 
reaching goal defined average position herd certain arbitrary allowable error radius goal 
results shown graph 
energy expenditure function coefficient energy expenditure animal computed determining time step amount energy expended time step summing entire trip 
time step energy expended computed function distance traveled slope terrain direction travel 
energy expended linear distance traveled small time step 
economical slope humans downhill slope 
energy function reach minimum 
slope increases infinity re quired energy asymptote finite maximum value traveling straight infinite slope require finite amount energy just climbing vertical ladder requires finite amount energy 
similarly slope decreases negative infinity required energy asymptote smaller maximum value downhill travel just climbing vertical ladder requires finite amount energy climbing ladder 
required energy function slope illustrated 
fig ure shows energy expenditure distance traveled unit mass animal 
maximum left placed maximum right downward breaking action expends energy upward motion 
measuring average energy expenditure various values constant find values result low energy expenditure 
minimum rate energy expenditure slope energy expenditure function slope 
value zero constant eliminate effect terrain animals herd travel straight line terrain 
reasonable increasing value zero decrease energy expenditure point 
point animals constrained contour lines longer paths necessary expending energy 
higher value animals longer able accelerate fast climb hills able reach goal making energy expenditure measure infinite 
possibility stuck large necessitated inserting limit experimental runs 
needs time limit expended energy limit herd assumed stuck 
results implementation shown chart 
course necessary choose value minimizes energy expenditure 
fact different values may chosen different desired animal behaviors 
slow moving example may choose stick close contour lines energetic mountain may prefer hop top steep hill 
single animal may different values different times depending mood situation 
note different values may negative positive slope 
larger positive slopes causes animals travel slowly uphill downhill 
avoiding trees avoiding obstacles trees terrain implemented obstacle avoidance flocking behavior mentioned section 
sake comparison designed implemented evaluated different methods 
method discussed section simple repulsive force pointing away trees 
second method discussed section steering force nearest silhouette edge 
second method produced realistic looking results 
experiments involved small objects represent objects trees 
involve larger objects long fence 
complex objects large concave objects require complicated algorithms navigate 
repulsive force flock appear behave naturally modeling trees repulsive forces 
force fall distance tree increases possibly inverse square relation similar forces nature 
radius tree force significant 
flock heads straight tree cruising speed splitting tree hit invisible radius tree bounces backwards going tree 
effect similar drop handful balls metal cylinder 
bounce back outward colliding cylinder continuing way 
steering nearest silhouette edge method produced natural looking behavior may correctly areas dense collections obstacles 
simple approx way accomplish illustrated dimensions convex polygonal obstacles 
vertex polygon projected line perpendicular velocity shown dotted line 
projected values determine maximum minimum values 
positive negative obstacle side safely ignore 
maximum minimum values smaller absolute value nearest silhouette edge 
animal steer edge better past edge distance radius animal order clear obstacle 
nearest silhouette edge animal obstacle projection obstacle doing check reduce computation eliminating obstacles lie entirely animal irrelevant 
done filtering obstacles animal range vision 
method steering obstacles works cases 
fail situations animal close obstacle usually time animal gets close obstacle steered nearest silhouette edge avoiding troublesome situations 
possible improvement method account direction goal addition just current direction travel 
shows screenshot animals navigating tree obstacles 
complexity reynolds flocking algorithm complexity animal consider animal flock just determine animal range vision 
consider workload parts 
animal decide animals neighbors animal interactions neighbors computed 
part computing neighbor lists animals size flock 
second part computing interactions neighbors size neighbor list 
part sped sort spatial sorting screenshot animals flocking obstacles 
reynolds discusses animal placed bin computing neighbor list requires looking animals nearby bins 
speeds task computing neighbor list 
amount time required compute interactions tween neighbors changed 
simplest way improve second part just reduce visible range animal flock reducing effective neighborhood implementation ideas implemented windows machine microsoft direct api 
tested ghz pentium processor animals flock frame update animals took ms 
collision handling simulation look realistic handle collisions properly solid objects passing 
simulation really discrete time approximation solid objects overlapping space 
simple crude solution just force objects move overlapping 
computing update objects positions objects overlapping objects artificially backed objects longer overlapping 
time changes velocity energy result collision 
ideal solution artificial movement objects produces small errors accumulate time 
errors larger objects moving higher speeds overlaps larger 
solution described 
update position calculated overlap detected simulation backed point update smaller time step update attempted 
case overlap repeat described procedure smaller smaller time steps overlap 
note need specify small threshold distance objects objects closer threshold distance overlapping defined colliding 
method dividing time step recalculating provide accurate simulations 
desire produce real time simulations possible 
generally real time simulator computing updates rapidly possible time divide time steps recompute 
addition concerns problem 
object traveling fast may jump obstacle overlap occurring 
overlap way detect collisions object may pass obstacle detecting 
object traveling speed length object direction travel overlap object positions consecutive time steps 
object traveling speed gap consecutive positions 
size gap velocity object 
value positive gap gap large obstacle fit inside possible object jump obstacle overlap occurring 
solution test line segment connecting consecutive positions intersects obstacle 
precise strategy test intersection obstacle volume swept space object moves consecutive positions 
flock size running simulation real time important keep frame rate high 
unfortunately ability dependent complex ity computation implementation hardware simulation run 
ignoring moment annoyance low frame rate causes user real time simulation lower limit update rate flocks animals 
implementation animals acceleration needs updated behavior times second order normal flocking behavior occur 
animals updated frame frame rate artificially lowered second animals fail flock 
implemented feature allows animal velocity position updated frame behavior recalculated th frame set animals randomly divided generation time equal groups frame rate point 
set large cause animal behavior updated times second results original simulation slowed artificially 
reason breakdown simulation low frame rates forward euler simulation 
explicit integration technique unstable large 
complexity flocking algorithm quadratic number animals flock flock size drastically affects frame rate 
lower limit allowable frame rate places restriction maximum flock size 
course depends heavily implementation hardware simulation run 
machine implementation largest reasonable flock size 
discussed section process computing mem bers flock neighbors animal take large percentage simulations computation time especially trigonometric functions needed compute viewing angle 
kept mind may major limiting factor frame rate flock size 
parameters implementation parameters adjusted create desired results 
main set parameters listed animal size implementation defined simulation pa rameters terms size animals 
defining unit length radius animal parameters may animal radius units 
animal size consid ered longer parameter merely constant parameters defined terms animal size 
maximum speed vmax animals top speed cruising speed vc cruising speed natural speed ani attempt maintain heading goal flat terrain 
maximum acceleration amax animals top acceleration comfort zone radius comfort zone radius defines circle animal 
second animal enters animal com fort zone animal move away 
danger zone radius danger zone radius specifies smaller concentric circle inside comfort zone radius 
danger zone ra aids defining comfort zone specifies radius animals close accelerate amax away avoid collision 
second animal enters outer edges animal comfort zone animal minimal ation move away 
second animal manages get closer acceleration increases reaches maximum possible acceleration danger zone radius 
visible flock mate range rf visible flock mate range simply maximum distance second animal may animal calculating animal behavior 
visible obstacle range ro similarly visible obstacle range maximum distance obstacle animal calculating animal behavior avoiding obstacle 
visible range parameters rf ro may set equal maximum flexibility separated 
discussed separately 
viewing angle animal field view measured angle direction current velocity 
drag factor fd drag force causing animals follow con tour lines terrain closely 
shows parameters dependent 
arrow indicates value depends value animal size comfort radius danger radius cruising speed maximum speed visible range defined constant drag factor independant parameter dependency parameters 
maximum acceleration section describes set parameters may considered dependently 
section describes set parameters determines animals abilities react quickly events collisions gives relation connecting parameters 
section discusses parameters individually landmark values parameters 
independent parameters parameters set independently 
stated earlier animal size constant defining unit length 
setting constant parameters may set independently parameters define basics animal behaviors maximum speed vmax cruising speed vc maximum acceleration amax comfort zone radius section explains relationship parameters 
speed comfort zones may parameters chosen greatly define behavior flock defining rate movement spacing 
animal reaction animals ability react events impending collisions governed quantities time animals react rate able react 
impending collision time animal react course dependent animal speed distance obstacle 
ability react amount time dependent animal ability accelerate 
example animal moving straight tree collision occurs dependent close animal needs get tree notice ro fast animal going vmax animal maximum acceleration amax 
related shown assuming animal head ing directly obstacle needs accelerate orthogonally original velocity certain distance sidestep obstacle 
reaction time maximum distance able cleared amax amax visible range initial velocity 
adjusting velocity visible range effective adjusting acceleration quadratic relationship ability react acceleration linear relationship 
hand obstacle animal heading obstacle able decelerate collision inequality hold assuming acceleration amax opposite direction 
ratio held unity 
course setting parameters need allow exact ability react 
give room error allow inaccuracies imprecision simulation 
minimum inaccuracy discrete time nature simulation imprecision finite precision floating point numbers 
inference landmark values empirical analysis section describes parameters individually detail 
reasonable bounds considered parameters order determine landmark values 
comfort zone comfort zone animal radius animal tries keep flock mates 
clearly dependent animal size larger animal 
animals centers get closer distance animals accelerate apart 
danger zone radius larger animal size smaller comfort zone radius 
visible flock mate range parameter rf controls far away animals get affect behavior 
range possible values parameter discussed 
order improve real time performance simulation vis ible range animals reduced possible reduce number flock members animal consider 
raises question far visible range practically lowered 
clear reducing visible range comfort zone radius significantly change flock behavior 
animal see far edges comfort zone know animal entered comfort zone 
animals parameters animals may closer 
factor limiting minimum acceptable value visible range maximum speed vmax animals 
animal top speed increased minimum value visible range 
reason ratio visible range speed gives reaction time collisions 
ratio kept minimum allowed reaction time 
covered detail sec tion 
maximum value visible flock mate range set arbitrarily large keeping mind rf increased animal larger neighborhood flock mates consider slow simulation 
point raising value effect increasing visible range diameter flock effect flock behavior 
approximate value largest distance possibly computed flock rest 
rest flock squeezed tight possible keeping invading comfort zones 
simulation typically arrange tight group approximately hexagonal packing lattice sense hexagonal packing optimal packing circles inside larger circle large case number animals 
area group covers increase approximately linearly diameter group vary proportionally downside forming lattice animals arranged straight rows may undesirable 
avoid phenomena additional behavior module needed random grazing behavior herd traveling 
visible obstacle range parameter ro controls distance animal ob trees affect animal behavior 
worth mentioning statement hold visible flock mate range 
visible obstacle range different landmark values discuss section 
gauss proved compact lattice pattern 
implementation obstacle avoidance animal heading obstacle animal attempt steer edge obstacle provides shortest path goal 
shows example animals avoiding obstacles 
screenshot showing animals avoiding obstacles 
particular method obstacle avoidance described section cre ates limit maximum acceptable value visible obstacle range 
reason animal facing obstacle attempt steer nearest edge minimizes path distance goal 
obstacles positioned densely visible obstacle range large animal may see solid wall obstacles 
soon steered away obstacle facing obstacle may steer back original obstacle ob 
may continue indefinitely may prevent animals making progress 
problem eliminated limiting visible obstacle range nearest obstacles visible 
viewing angle viewing angle indicates far animal see angle directly ahead parameter range 
order traveling flock keep proper spacing animals side side need able see 
viewing angle angle need represent merely peripheral vision may include way sensing neighbors turning head scan wider angle hearing 
filtering viewing angle presents small problem requires calculating angle vectors requires trigonometric operation 
operation calculated number times frame 
implementation results showed trigonometric operation computation time 
sped storing cosine viewing angle 
drag factor drag factor df multiplying constant force helps animals travel closely contour lines terrain 
setting parameter zero eliminates force animals travel straight line terrain ignoring slope 
increasing parameter results stronger force keeping animals traveling contour lines 
parameter increased high animals held contour lines strongly able climb shallow hills 
case animals may easily stuck 
shows example animals contour lines group splits get hill 
drag factor normally resists animals movements away con tour lines 
negative value df accelerate away contour lines producing unrealistic behavior 
case animals accelerate rapidly steepest hills follow contour lines 
summary table lists parameters discussed landmark values summarizing analysis 
table parameter landmarks 
landmark values parameter minimum maximum animal size max speed vmax cruising speed cruising speed vc max speed max acceleration amax comfort zone animal size danger zone animal size comfort zone visible flock mate rf comfort zone farthest flock mate visible obstacle viewing angle drag factor ro fd animal size varying behaviors varying different parameters different behaviors emerge 
reasonable ranges fairly realistic herding behavior occurs 
setting extreme values odd behavior occur 
results obtained flock animals parameter values 
ghost reducing animals vision nil animal completely ignores 
physics engine handle collisions behavior group independent ghosts pass right 
vision reduced setting visible range viewing angle zero 
trapped obstacles including obstacles visible obstacle range animals see solid wall obstacles animals longer able progress sense trapped 
overwhelmed terrain setting drag force high creating terrain steep animals longer able climb slope 
animals trapped terrain able progress 
swarm insects allowing animals see purpose trying move center flock create effect looks similar swarm flying insects appear move randomly orbit center mass flock 
results table parameters create various behaviors 
behavior parameters ghost rf trapped obstacles ro small trees overwhelmed terrain fd large swarm insects rf behavior modifications flocking algorithm produce pleasing results 
animals hills dips terrain 
travel slowly traveling downhill slowly traveling uphill 
fig ure shows screen shot herd moving terrain camera 
animal represented small sphere 
screenshot herds moving terrain shows screenshot top view 
pic ture herd moving bottom right 
demonstrates herd divide groups go hill 
regroup side hill 
screenshot herd dividing group go hill 
correction section drag force section terrain simply functions slope animal current position computing constant time animal herd number animals herd 
avenues exploration 
possible issues raised listed handle long ridge terrain distant gap 
animals smart travel ridge pass gap 
method limited created specifically terrain described elevation grid 
modifications apply method arbitrary terrain include features sheer cliffs land bridges tunnels 
method consists dimensional flocking algorithm cor applied 
method explored dimensional flocking algorithm constraints animals positioned terrain headings tangent terrain 
progress done give animals higher level behavior 
point merely navigate pre determined goal location 
higher level behavior control module decisions behavior 
behaviors include finding food water migrating avoid ing danger 
brings complex issues animals find food water 
sort representation terrain behavioral decisions 
involve sort spatial database system 
allow animals analyze terrain front intelligent decisions travel 
kind memory animals 
animal herd leader 
challenging leader position 
kind decision making herd level 
influence individual animals 
experiments done concerning interaction different species 
especially interesting integration predators prey factors determine ecological system stable 
method designed point mass objects 
include objects complex representation complex dynamics 
involuntary motion slipping sliding hill implemented 
method simply uses distance determine neighbors visible 
complex version analyze terrain obstacles area determine vision obstructed 
reynolds flocking algorithm creates flocking behavior combining small set simple rules animal follows 
adding additional rules various behaviors created 
order create behavior herds moving terrain modifications basic flocking algorithm 

position velocity acceleration vectors flocking algo rithm restricted plane 

time step position animal updated longer just velocity sv 
additional behavioral rule added acceleration equal constant controls tightly herd follow contour lines terrain 
adjusted allow low energy expenditure terrain behaviors 
source code boid interface boid class 
boid object represents animal simulation joel defined afx boid bb dd included define afx boid bb dd included msc ver pragma endif msc ver include vector include entity include mesh include terrain include flock class flock class boid public public constructor creates individual boid randomized position velocity orientation 
boid flock terrain constructor creates individual boid specific position velocity 
boid flock terrain const vector const vector functions required void mesh int unsigned int float timestep msg unsigned int sendmsg msg msg destructor virtual boid update behaviors needs called frequently 
animal decisions updates behavior current acceleration void update behaviors update needs called frame 
animal position updated animated void update float elapsed time helper stuff controlling rate update behaviors called int behavior update delay number frames behavior updates int behavior update number frames behavior update accessor function retrieves current position animal vector const experiments want boids flock different groups ll call groups teams int team pointer terrain object terrain terrain temporary addition calculating energy expenditure float energy void reset float terrain drag factor float downhill terrain drag factor lets animal know flock member flock private model appears animation animal mesh mesh current acceleration velocity position animal vector acceleration vector velocity vector position scratch space boid static list boid finds animals considered animal stores list animals void computes new acceleration boid frame called update behaviors vector navigator functions provide basis behaviors combined create behavior animal vector keeps comfort space animals vector adjusts velocity match neighbors vector maintains flock cohesion vector steer arounds trees vector steers animal goal vector vector pos float radius function combines basis behaviors combines running total contained accumulator returns magnitude resulting value accumulator float accumulate vector accumulator const vector endif defined afx boid bb dd included boid cpp implementation boid class 
boid object represents animal simulation joel include boid include utils include forest include stuff profiling include profiler profiler lowlevel include profiler profiler highlevel definitions program zones file zones profiler subdirectory define zone boid update define zone boid navigator define zone boid accumulate define zone boid compute define zone boid avoid obstacles define zone boid keep distance define zone boid match heading define zone boid steer center define zone boid goto goal profiling stuff parameters control animal behavior point constants different individual animal const float boid max speed const float boid cruising speed boid max speed const float boid max boid max speed const float boid radius const float boid comfort radius boid radius const float boid danger radius boid radius const float boid visible range boid radius const float boid visible tree range const float boid viewing angle pi maximum angle vector pointing directly ahead boid see const float boid initial terrain drag factor const float boid initial downhill drag factor boid initial terrain drag factor declaration necessary static members list boid boid construction destruction constructor creates individual boid position velocity orientation 
boid boid flock terrain terrain set model boid mesh new mesh lpd animals represented simple spheres boid radius null mesh set material boid simple red color memset sizeof ambient ambient ambient ambient diffuse ambient mesh team set random position position vector float rand float rand max float rand float rand max pick random angle float pi float rand float rand max random speed float speed boid max speed float rand float rand max form random velocity velocity vector float sin float cos speed initial acceleration zero acceleration vector set position position position terrain position position boid radius temporary addition calculating energy expenditure position energy terrain drag factor boid initial terrain drag factor downhill terrain drag factor boid initial downhill drag factor constructor creates individual boid specific position velocity 
boid boid flock terrain const vector const vector terrain set model boid mesh new mesh lpd radius animals represented simple spheres boid radius null mesh set material boid simple red color memset sizeof ambient ambient ambient ambient diffuse ambient mesh team set position velocity position velocity initial acceleration zero acceleration vector set position position position terrain position position boid radius temporary addition calculating energy expenditure position energy terrain drag factor boid initial terrain drag factor downhill terrain drag factor boid initial downhill drag factor update called frame update behaviors may called preferably times second update behaviors needs called frequently 
animal decisions updates behavior current acceleration void boid update behaviors point just get new acceleration basis behaviors acceleration navigator update needs called frame 
animal position updated animated void boid update float elapsed time profile scope boid update drag force behavior want take account gradient terrain boid current position vector grad terrain position position slope direction gradient float slope grad magnitude acceleration grad slope slope slope slope slope zero vector grad slope normalized gradient component current velocity direction gradient float dot velocity grad vector new dot boid traveling uphill new terrain drag factor dot slope grad dot boid traveling downhill new downhill terrain drag factor dot slope grad acceleration new update position component gradient direction current velocity words slope direction boid travelling 
float grad velocity normalized grad adjustments account fact dimensional velocity acc moving boids terrain 
effectively reduces speed function slope direction 
possible optimization approximate sqrt factor position velocity elapsed time grad grad update velocity velocity acceleration elapsed time cap velocity maximum allowed value velocity squared magnitude boid max speed boid max speed velocity boid max speed set physical entity position position position terrain position position boid radius temporary addition calculating energy expenditure disp position position float distance disp distance float movement slope disp disp squared disp energy expended linear distance traveled slope determines come multiplying factor function slope 
float slope factor movement slope 
lets try piecewise linear function energy expenditure maximum slope energy expenditure minimum greater energy expenditure maximum uphill move const float movement slope just constant slope factor movement slope range const float const float slope factor movement slope movement slope range const float const float slope factor movement slope range infinity slope factor energy distance slope factor see time update behavior behavior update behavior update behavior update delay behavior update update behaviors function combines basis behaviors combines running total contained accumulator returns magnitude resulting value accumulator float boid accumulate vector accumulator const vector profile scope boid accumulate want come combination vectors want final result magnitude greater add check re limit 
vector temp accumulator temp squared magnitude go ahead return result accumulator temp return temp magnitude re want add just bring magnitude want find value magnitude accumulator solving value requires solving quadratic equation 
coefficients float squared magnitude float accumulator float accumulator squared magnitude quadratic formula float float sqrt accumulator return finds animals considered animal stores list animals void boid profile scope boid compute loop members flock list boid iterator members members boid pboid bother adding boid list neighbors pboid continue get vector pointing boid flock mate vector dir pboid position position boid visible neighbor dir squared magnitude squared boid visible range close velocity angle dir boid viewing angle field view add list neighbors push back pboid computes new acceleration boid frame called update behaviors vector boid navigator profile scope boid navigator vector acc float mag mag accumulate acc mag mag accumulate acc mag mag accumulate acc mag mag accumulate acc mag mag accumulate acc important modules return vector magnitude percentage maximum acceleration need convert real magnitude acc boid max clear return acc extern forest steer arounds trees vector boid profile scope boid avoid obstacles tree trees int trees get list trees int vector force accumulative force trees float closest dist squared bool tree false tree get radius tree vector vector trees position trees position float radius trees height boid radius add boid radius want boid aim exact edge tree allow room boid get past edge disp vector pointing boid position tree center vector disp position get squared distance tree float disp mag squared disp squared magnitude tree closest dist squared disp mag squared continue tree check emergency condition colliding tree 
disp mag squared squared radius case want accelerate directly away add force directly away tree force disp squared boid radius disp mag squared tree true closest dist squared disp mag squared continue tree colliding check direction tree boid 
ignore just go tree disp velocity continue tree get point know direction tree angle velocity vector degrees 
find projection tree line perpendicular disp float projected disp mag squared squared radius estimate getting close tree re getting close circle approximations need exact projected squared radius disp mag squared disp mag squared squared radius disp mag squared squared boid visible tree range bigger radius actual radius just give comfort space projected radius tree visible range continue tree comes tricky part 
basically want project circle tree line perpendicular velocity 
tree projects entirely left right current position boid heading collision course distance tree float disp mag disp mag squared calculate unit vector pointing tree vector unit disp disp disp mag unit vector pointing center tree unit vector pointing tree rotated degrees vector vector unit disp unit disp rotate degrees projection velocity line perpendicular direction tree need calculate points side tree project vector point projected disp vector point projected disp rotate velocity degrees vector perpendicular velocity vector right velocity velocity need normalize care relative distances projections point point float point right float point right projection positive negative velocity pointing tree 
ignore tree okay re looking tree 
edge tree closer current direction boid facing 
vector new vel point closer velocity direction projection closest zero fabs fabs new vel point new vel point got vector pointing direction want 
set magnitude 
just boid current speed 
new vel velocity magnitude apply force pushing current velocity new velocity radius distance ratio nearer trees greater impact force new vel velocity radius disp mag tree true closest dist squared disp mag squared limit magnitude force squared magnitude force return force keeps comfort space animals provides acceleration away nearest neighbors close assumes contains list neighbor boids vector boid profile scope boid keep distance size return vector vector change list boid iterator boid pboid dist vector pointing boid vector dist pboid position position get squared distance boid float mag dist squared magnitude check boid invading comfort zone mag squared boid comfort radius okay re close collision may decide strongly need accelerate away float squared boid comfort radius mag squared boid comfort radius squared boid danger radius cap dist change dist change squared magnitude change return change adjusts velocity match average neighbors assumes contains list neighbors vector boid profile scope boid match heading neighbors size return vector ll ave find average velocity neighbors vector ave int count list boid iterator boid pboid pboid team team ave pboid velocity count count return vector ave float count finish computing average vector change ave velocity boid max speed change squared magnitude change return change maintains flock cohesion accelerates average position neighbors assumes filled list neighbors vector boid profile scope boid steer center neighbors size return vector ll ave find average position neighbors vector ave int count list boid iterator boid pboid pboid team team ave pboid position count count return vector ave float count finish computing average vector change ave position change squared magnitude change return change steers animal goal vector boid profile scope boid goto goal get vector pointing goal vector team goals team position adjust vector cap magnitude boid cruising speed ll new vector new target velocity squared magnitude squared boid cruising speed boid cruising speed find difference current velocity target velocity 
new adjustment vector change velocity boid max speed change squared magnitude change return change accessor function retrieves current position animal vector boid const return position functions required boid result result position result boid radius return result void boid mesh mesh int boid return unsigned int boid float timestep msg update timestep return unsigned int boid sendmsg msg msg return void boid reset position vector float rand float rand max float rand float rand max velocity vector acceleration vector position position position terrain position position boid radius temporary addition calculating energy expenditure position energy flock interface flock class 
flock contains list boids flock responsible deleting dynamically allocated boids joel defined afx flock ab ef eb included define afx flock ab ef eb included msc ver pragma endif msc ver include list namespace std include entity include mesh include boid class boid class flock public public constructors destructors flock virtual flock helper function release memory boids flock void cleanup flocking functions void update float elapsed time updates members flock miscellaneous functions void addto boid boid adds boid flock int const return members size get number boids flock void boid boid removes boid flock releases boid memory vector ave pos int team gives average position flock ave pos int team returns average position flock functions required unsigned int float timestep msg unsigned int sendmsg msg msg temporary addition calculating energy float friend boid vector team goals private list boid members members flock endif defined afx flock ab ef eb included flock cpp implementation flock class 
flock contains list boids joel include outputting energy data include flock construction destruction flock flock set example goal positions team goals vector team goals vector flock flock calls update members flock void flock update float elapsed time list boid iterator members members update elapsed time adds boid flock void flock addto boid boid steps flock boid point members push back boid flock know boid boid boid know flock helper function release memory boids flock void flock cleanup members empty boid pboid members front members pop front delete pboid removes boid flock releases boid memory void flock boid boid find boid list list boid iterator members members boid pboid pboid boid remove delete members erase delete pboid return return gives average position flock vector flock ave pos int team vector ave int count list boid iterator members members boid pboid team pboid team ave pboid count return ave float count returns average position flock flock ave pos int team ave int count list boid iterator members members boid pboid team pboid team vector pboid ave pboid terrain count return ave float count functions required unsigned int flock float timestep msg const float error constant check flock reached goal 
average position flock error constant distance goal ave pos team goals squared magnitude output current average energy expended fout fout open energy dat ios base app fout boid pboid boid members front pboid terrain initialize pboid terrain pboid terrain float df pboid terrain drag factor df df fout endl df fout close list boid iterator members members pboid pboid reset pboid terrain drag factor df return unsigned int flock sendmsg msg msg return temporary addition calculating energy float flock float ave int count list boid iterator members members boid pboid pboid team ave pboid energy count return ave float count david 
physics game developers 
reilly associates 
gary william flake 
computational beauty nature 
mit press cambridge massachusetts 
joel 
flocking terrain 
technical report university nebraska lincoln 
kapoor 
efficient computation geodesic shortest paths 
acm symposium theory computing 
christopher kline 
web media mit edu boid boid 
cornell university 

mechanical determinants grade walking 
journal physiology 
mcn 
alexander 
theory metabolic costs gait 
journal theoretical biology 
craig reynolds 
flocks herds schools distributed behavior model 
siggraph conference proceedings pages 
craig reynolds 
bumping things notes obstacle avoidance course physically modeling 
siggraph conference proceedings 
craig reynolds 
steering behaviors autonomous characters 
proceedings game developers conference pages san francisco california 
miller freeman game group 
www red com cwr papers gdc steer html 

