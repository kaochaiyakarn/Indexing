copyright ieee 
published proceedings international workshop program comprehension iwpc may toronto canada 
personal material permitted 
permission reprint republish material advertising promotional purpose creating new collective works resale redistribution servers lists reuse copyrighted component works obtained ieee 
contact manager copyrights permissions ieee service center lane box piscataway nj usa 
feature driven program understanding concept analysis execution traces thomas eisenbarth rainer koschke daniel simon university stuttgart 
stuttgart germany koschke simon informatik uni stuttgart de task programmer wants understand certain feature implemented localize implementation feature code 
implementations set related features understood programmer interested commonalities variabilities 
large badly documented programs localizing features code identifying commonalities variabilities components features difficult time consuming 
useful derive information automatically 
feature component correspondence describes components needed implement set features respective commonalities variabilities features components 
describes new technique derive feature component correspondence utilizing dynamic information concept analysis 
method simple apply cost effective largely language independent yield results quickly 

assume programmer just assigned maintain legacy system say graphical editor drawing simple pictures consisting lines boxes ellipses manager wants add new feature allows user draw segments ellipses 
editor currently lets user draw ellipses different ways specifying radius diameter 
market analyst identified need alternative ways specify segments ellipses 
unfortunately unfamiliar implementation system 
maintainer fired document system 
reliable source information code 
interested similar features implemented components contribute existing similar features components drawing ellipses example 
primary components really want look specific features 
words interested general purpose components con tribute kinds features components draw single point 
want understand commonalities variabilities components specifically contribute set similar features order get design ideas implementation investigate ways integrate solution 
system consists hundreds files 
start 
important piece information maintainer needs understand set features implemented called feature component correspondence 
feature component correspondence documentation artifact describes components needed implement particular feature set features 
case related features describes jointly separately components features 
components identifies features components jointly separately contribute 
feature realized functional non functional requirement term feature intentionally weakly defined exact meaning depends specific context 
components computational units software architecture see section 
simplest example component subprogram function procedure 
generally change program partial knowledge required 
consequently complete time consuming reverse engineering system appropriate 
analysis focus problem 
feature component correspondence identify primary pieces software need looked gives insights relations related features components allows aim analyses selected components cost effectively 
describes quickly realizable technique ascertain feature component correspondence dynamic information gained execution traces concept analysis 
concept analysis mathematical technique investigate binary relations see section 
technique automatic great extent 
overview 
technique described execution traces generated profiler different usage scenarios see 
scenario represents invocation single feature set features yields subprograms executed features 
subprograms identify components considered components required certain features 
required components scenarios set features subject concept analysis 
concept analysis gives information relationships features required components 
feature usage scenario execution trace required components concept analysis feature component correspondence 
overview 
want point non functional requirements time constraints easily mapped components technique primarily aims functional features 
cases possible isolate non functional aspects security code map specific components 
instance concentrate network accesses single component enable controlled secure connections 
technique suited features internally visible compiler uses certain intermediate representation 
internal features detected looking source clear invoke outside derive execution trace features 
remainder article organized follows 
section introduces concept analysis 
section explains concept analysis derive correspondence section describes experience technique case study 
section discusses related research 

concept analysis concept analysis mathematical technique provides insights binary relations 
mathematical foundation concept analysis laid birkhoff 
primarily snelting introduced concept analysis software engineering 
evaluate class hierarchies explore configuration structures preprocessor statements understand type relationships recover components 
binary relation specific application concept analysis derive feature component correspondence states subprograms required feature invoked knowledge system architecture primitive components known just subprograms 
section describes concept analysis detail 
concept analysis relation set objects set attributes tuple called formal context 
set objects set common attributes defined oa analogously set common objects set attributes defined oa section formal context applying concept analysis derive feature subprogram relationships laid follows subprograms considered objects features considered attributes pair subprogram feature relation executed invoked 
time example binary relation arbitrary objects attributes shown table 
object oi attribute aj row column marked table example stems lindig snelting 
instance equations hold table known relation table table example relation 
pair called concept holds objects share attributes 
concept extent denoted extent intent denoted intent 
informally concept corresponds maximal rectangle filled table cells modulo row column permutations 
example table contains concepts relation table 
set concepts formal context forms partial order equivalently holds called subconcept called superconcept instance table concepts table 
true table 
set concepts formal context partial order form complete lattice called concept lattice lc infimum concepts lattice computed intersecting extents follows infimum describes set common attributes sets objects 
similarly supremum determined intersecting intents supremum set common objects share attributes intersection sets attributes 
graphically concept lattice example relation table represented directed acyclic graph nodes represent concepts edges denote superconcept subconcept relation shown 
general concept called top element denoted special concept called bottom element denoted 
concept lattice table 
combination graphical representation contents concepts table form concept lattice 
complete information visualized readable equivalent way marking graph node attribute represented concept general concept intent 
analogously node marked object represents special concept extent 
unique element concept lattice marked lc intent unique element marked object lc extent call graph representing concept lattice marking strategy sparse representation 
equivalent sparse representation shown 
content node representation derived follows objects objects attributes attributes instance node marked concept 

sparse representation 
feature component correspondence order derive feature component correspondence concept analysis define formal context objects attributes relation interpret resulting concept lattice accordingly 

context feature components components considered objects formal context features considered attributes 
note reverse case concept lattice simply inverted derived information 
set relevant features determined maintainer 
components consider alternatives depending knowledge system architecture available 
cohesive modules subsystems defined documented system architects re gained modules subsystems considered composite components 
physical modules modules defined means underlying programming language simply directly available existing files distinction cohesive modules know priori physical modules really group cohesive declarations physical modules result programmer way grouping declarations sense 
subprograms functions procedures global variables system subprograms global variables called low level components 
ideally alternative reliable complete documentation exists 
cohesive modules subsystems known advance hardly effort analyze large system obtain order apply concept analysis get feature component correspondence clear components relevant reverse engineering complete system costeffective 
retrieved feature component correspondence simpler definitions components clearly shows lower level components investigated obtain composite components reverse engineering may generally pay order detect cohesive modules developed semi automatic method integrating automatic state art techniques 
alternative chosen suitable documentation available reason trust programmers system great extent 
cases fall back alternative 
alternative concept analysis may additionally yield hints sets related subprograms forming composite components 
relation formal context necessary concept analysis defined follows component required feature invoked subprogram required needs executed global variable required accessed changed address taken composite component required parts required 
order obtain relation set usage scenarios needs prepared scenario exploits preferably relevant feature 
system set usage scenarios time execution traces recorded 
execution trace contains required low level components usage scenario invoked feature respectively 
composite components concept analysis execution trace containing required low level components induces execution trace composite components replacing low level component composite component belongs 
system run yields required components single scenario exploits feature 
single column relation table obtained system run 
applying usage scenarios provides relation table 
execution trace recorded profiler 
profilers record subprogram calls accesses variables 
symbolic debugger example allows set variable accesses instrument code sophisticated profiler available simple static dependency analysis considers variables directly statically accessed executed subprogram dynamically accessed transitively accessed variables automatically considered executed subprograms examined 
practice analysis may sufficient approximation 
aware may overestimate variable accesses may included paths executed runtime ignore variables means aliases simple static dependency analysis take aliasing account 
analysis obtain simplified feature component correspondence ignore variables come back phase sophisticated dynamic static analyses 

interpretation concept lattice concept analysis applied formal context described section gives lattice interesting relationships derived 
relationships fully automatically derived analyst complicated theoretical background hidden 
thing analyst know interpret derived relationships 
section explains interesting relationships automatically derived 
abstractly described section base relationships derived sparse representation lattice note duality interpretation component required features defined page 
feature requires components defined page lattice 
component specific exactly feature feature paths top element 
feature specific exactly component component paths tothe bottom element component required implement feature 
features components jointly contribute identified infimum graphically depicted lattice closest common node top element starting nodes respectively attached features common node jointly implemented components jointly required features described supremum graphically depicted lattice closest common node bottom element starting nodes respectively attached components common node jointly required features 
components required features bottom element 
features require components top element 
top element contain features components top element superfluous components exist set objects concept analysis contains components executed case filter ignores subprograms profiler reports execution count 
bottom element contain component features bottom element implemented system constellation exist usage scenario feature usage scenario appropriate relevant system 
information described derived tool fed back maintainer freeing maintainer familiar concept analysis having understand theory concept lattice 

implementation implementation described approach surprisingly simple tool concept analysis 
prototype unix environment opportunistic integration parts gnu compiler gcc compile system command line switch generating profiling information gnu object code viewer nm gnu profiler prof concept analysis tool concepts graph editor graphlet visualize concept lattice short perl script ascertain executed functions execution trace convert file formats concepts graphlet script just loc 
fact subprograms extracted object code implementation independent programming language great extent long language compiled object code advan tage additional compiler front necessary 
hand compiler may replace source names link names object code instance compilers name resolve overloading direct mapping subprograms execution trace back original source 
fortunately tools exist names profilers names automatically 
dealt case study code object code names identical source names 

case study case study analyzed xfig system version consisting written programming language section firstly general overview results secondly go details particular interesting observations 
xfig menu driven tool allows user draw manipulate objects interactively window system 
objects lines polygons circles rectangles splines text imported pictures 
interesting task case study define constitutes feature 
clearly capability draw specific objects lines splines rectangles considered feature xfig 
manipulate drawn objects different edit modes rotate move copy scale xfig 
considered main features capabilities 
ability draw different shapes lines curves rectangles 
ability modify shapes different editing modes rotate move copy scale conducted experiments 
investigated ability draw different shapes 
second analyzed ability modify shapes 
second experiment exemplifies combined features composed basic features 
second experiment shape drawn modified 
draw modify constitute basic feature 
combined features add effort needed derive feature component correspondence possible combinations 
experiments considered subprograms components 
simple implementation handle variable accesses 
required low level components detected 
resulting concepts contain subprograms grouped usage features 
note general subprograms lower concepts lattice features specific components upper region lattice 
concept lattice reflects level pw draw drawing selected msg resizing box elastic box append point create point erase box lengths init box drawing box drawing selected draw rectangle mon draw polyline mon draw mon node arrow bound set redisplay line line add line list add line draw line create line line bound create line drawing selected clip arrows free points elastic cancel line drawing get init trace drawing mode balloon node draw create mouse cmd balloon setup ind panel set line stuff set cursor create bitmaps process pending redisplay zoomed region main resizing poly elastic poly drawing selected set draw spline redisplay spline spline add spline list add spline create spline create spline bound spline drawing selected msg length msg erase lengths compute angle unconstrained line elastic line set redisplay arc arc add arc list add arc compute direction compute draw arc create arc arc bound arc drawing selected draw shift canvas clear kbd draw kbd check cancel pw text set text bound text search redisplay text toggle text add text list add text draw text new string create text text bound erase char string char handler draw char string finish text input text drawing selected mouse balloon print file resizing ebr resizing cbd resizing elastic ebr elastic cbd elastic drawing selected drawing selected drawing selected 
lattice experiment abstraction subprograms set scenarios 
identify subprograms required single feature set features analyze concept lattice described section 
experiment 
experiment prepared scenarios 
scenario invokes xfig performs drawing objects xfig provides terminates xfig aspects combined functionality xfig 
shapes xfig drawing panel shown picture objects library objects 
circle radius ellipse radii closed approx 
spline closed 
spline polygon rectangular box regular polygon picture object circle diameter ellipse diameters approximated spline interpolated spline polyline rectangular box rounded corners arc text library object 
xfig object shapes 
resulting lattice experiment shown 
contents concepts lattice omitted readability reasons 
size picture linear function number components bottom element contains components initialization gui code basic functions large drawn accordingly comparison point text drawing concept marked node subprograms 
shows concepts containing executed subprograms system 
lattice contains concepts 
introduce new component nodes component attached precisely pw curve set redisplay ellipse center marker ellipse add ellipse list add ellipse create ellipse ellipse bound draw ellipse see cbr elastic cbr drawing selected concept taller concept components contains 
concept introduces component exists component holds 
concepts introduce new component merely merge functionality needed superconcepts 
interesting observation excludes bottom element concepts components upper region lower region number components decreases number interferences increases lattice said horizontally decomposable decomposed independent sublattices connected top bottom elements interference overlap sublattices prevents horizontal decomposition 
say specific operations shared operations may sign little re shared operations really features 
maintainer find application specific subprograms upper region analyze 
inspected concept lattice manually looked source code attached subprograms order assign meaning concepts 
assigning meaning concepts generally simple concepts upper region specific subset features 
understanding concepts increasingly difficult concepts bottom element inspected 
lattice really reflect dependencies components imply calls additional static analysis source code required 
experiment needed browse call graph 
concept largest concept excluding bottom element 
exploits single feature draw text object 
lattice feature largely independent features shares components features 
concept represents features draw polyline draw polygon 
difference features additional line drawn closes polygon 
difference visible concept lattice features attached concept 
distinction body function called draw polygon polyline 
execution traces contain called subprograms single statements separate interleaved subprograms concept analysis remains uninformed difference 
concept denotes feature draw spline 
concept feature attached represents components shared drawing polygons polylines splines 
components real drawing operations operations keep log points set user draw lines set points user setting points spline appears polygon reshaped user set points 
concept stands feature draw arc concept concept represents shared components drawing elastic lines user setting points 
difference concept concept contains components draw elastic line adds capability set arbitrary number points 
splines need capability defined exactly points 
concept represents feature draw lines drawing rectangles polygons polylines expect 
generality feature immediately obvious concept lattice located middle level lattice 
framed area simpler structure rest lattice 
part deals circles ellipses details shown 
node contains sets upper set contains components attached node components lower set contains features including inherited concepts 
names features correspond objects drawn panel draw ellipse radius means ellipse drawn radius specified opposed diameter 
nodes represent features draw circles ellipses diameter radius 
contain specific components draw object plot elastic bend user drawing resize object 
note similarity component names 
specific commonalities circles ellipses represented node introduces shared components draw circles ellipses specified diameter radius 
nodes connect circles ellipses objects 
components attached nodes merge components different 
relevant parts circles ellipses concepts 
nodes direct infimum shown add components circle ellipse features 
components inherited nodes basic components lowest regions lattice indicates ellipses circles widely separate objects 
problem stated section required implement features drawing segments ellipses specifying radius diameter know start 
identifies respective subprograms 
distribution subprograms connected concepts invoked features highlights respective distinctiveness 
subprograms closer investigated static analysis related code 
identifies existing components new implementation built 
integrate new functionality subprograms specific concepts example probably best solution new functionality close existing create new components components new solution requires infrastructure analyse find infrastructure properly 
second experiment 
objects drawn edited 
instance objects rotated 
matter fact functionality needs provided new segmented ellipses 
second experiment analyzed edit mode rotate comes variants clockwise counterclockwise 
shapes drawn rotated clockwise counterclockwise resulted scenarios 
resulting lattice contained concepts introduce new component 
observed related shapes variants splines circles ellipses merged top lattice components 
order reduce size lattice selected representative related shapes re run experiment shapes ellipse polygon open approximated spline 
resulting lattice shown 

concept lattice second experiment 
lattice consists concepts provide specific functionality respective shapes 
concept functions depicts functionality splines concept functions represents lines polygons 
dependent concept functions groups functions related points 
concept functions denotes ellipse feature concept functions general drawing support functionality concept functions startup initialization code system 
analyzing concepts shapes provide individual rotate functions 
words rotate feature implemented specific shape generic component draws different shapes interesting finding terms re 
means add new rotate operation new segmented ellipses modify rotate operation ellipses identified concept lattice 
general observations 
experience applying method easy principle 
running scenarios hand time consuming 
may facilitated presence test cases allow automated replay various scenarios 
xfig gui running single scenario hand easy task 
pay attention cause interferences invoking irrelevant features 
instance xfig uses balloon help facility pops little window cursor stays time sensitive area gui button selecting circle drawing mode 
balloon help mechanism triggers introducing interferences features 
effects affect analysis introduce spurious connections features 
fortunately problem partly fixed providing specific scenario accidentally invoked irrelevant feature invoked leads refactored concept lattice contains new concept isolates irrelevant feature components 
example interferences due accidentally invoked irrelevant feature appeared layers directly top bottom element lattice ignored 

related research feature localization chen rajlich propose semi automatic method analyst browses statically derived dependency graph navigation graph computer aided 
analyst takes search method suited quickly cheaply derive feature component correspondence 
method relies quality static dependency graph 
graph example contain information potential values function pointers human analyst may functions called function pointers 
extreme conservative assumption function address taken called function pointer call site search space increases extremely 
generally statically undecidable paths taken runtime static analysis yield overestimated search space dynamic analyses exactly tell parts really runtime particular run 
chen rajlich technique helpful phase system needs rigorously analyzed 
purpose technique derive feature component correspondence 
handles system black box give insights internal aspects respect dependencies quality 
wilde dynamic analysis localize features follows 
invoking input set set test cases terminology set usage scenarios identified invoke feature 

excluding input set identified invoke feature 

program executed twice separately 

comparison resulting execution traces components identified implement feature 
wilde focus localizing required components specific feature analyzing commonalities variabilities related features localizing required components execution trace including input set sufficient 
subtracting components execution trace excluding input set execution trace invoking input set components remain specifically deal feature 
note technique achieves effect adds usage scenario starts ends system immediately 
considering execution traces different features time components specific feature sink concept lattice closer bottom element 
precisely recall section component specific exactly feature feature paths top element 
start finalization subprograms gather bottom element 
technique goes wilde technique allows derive commonalities variabilities components related features means concept analysis wilde technique localizes single feature 
derived commonalities variabilities import information maintainer needs understand system 

feature component correspondence describes components required implement set related features commonalities variabilities set related features components 
feature component correspondence useful 
identify components contribute certain feature 
identify features component contributes 
find components jointly needed implement subset features 
understand features components jointly contribute 
technique yields feature component correspondence automatically execution traces different usage scenarios invoking feature 
fact derived approach wilde analyses execution trace feature separately 
fact represent commonalities variabilities features components respectively additionally revealed applying concept analysis sound mathematical technique analyze binary relations 
resulting concept lattice reflects level feature specificity required components 
technique primarily suited functional features may mapped components 
particular non functional features easily map components 
example applications timing critical may result diverging behavior features take time account 
note technique suited features internally visible compiler uses certain intermediate representation 
internal features detected looking source clear invoke outside derive execution trace features 
invocation externally visible features comparatively simple graphical user interface available case case study 
usually menu selection similar interaction necessary 
case batch system may vary command line switches may provide different sets test data invoke feature 
order find suitable test data need knowledge internal details system 
furthermore success described approach heavily depends clever choice usage scenarios combination 
scenarios cover functionality step clumsy combination scenarios result huge complex lattices unreadable humans 
number usage scenarios increases tremendously features combined 
implementation technique surprisingly simple 
day opportunistically put set publicly available tools wrote single perl script loc total interoperability 
drawback simple implementation run system usage scenario get exe cution trace feature 
sophisticated environment allow start recording traces time 
implementation counts subprogram calls ignores accesses global variables single statements expressions 
useful analyze finer granularity particular subprograms interleaved different strands control different functionality united single subprogram possibly efficiency reasons 
instance subprogram case study draws different kinds objects 
function contained large switch statement branches drew specific kinds objects 
execution trace subprogram showed objects fact specific parts executed 
case study method provided valuable insights 
lattice revealed dependencies features xfig implementation absence dependencies respectively abilities draw text circles ellipses widely independent shapes 
related features grouped concept lattice allowed compare mental model drawing tool actual implementation xfig 
lattice classified components abstraction level useful information re general components lower level specific components upper level 
generalize results systems remains investigated 
particular information useful case study shown additional case studies controlled experiments information really helps maintainer understand system repeatable results obtained different people 
case studies controlled experiments want explore results obtained method described may combined results additional static analyses 
example want investigate relation concept lattice dynamic information static software architecture recovery techniques 
brandenburg graphlet universit passau www fmi uni passau de graphlet 
canfora cimitile de lucia di case study applying eclectic approach identify objects code workshop program comprehension pp 
pittsburgh ieee computer society press 
chen und rajlich case study feature location dependence graph proc 
th int 
workshop program comprehension pp 
june limerick ireland ieee computer society press 
implementing concept analysis tool identifying data types code master thesis university kaiserslautern germany 
lindig snelting assessing modular structure legacy code mathematical concept analysis proc 
int 
conference software engineering pp 
boston 
lindig concepts ftp ftp ips cs tu bs de pub local misc 
koschke atomic architectural component recovery program understanding evolution dissertation institut informatik universit stuttgart www informatik uni stuttgart de ifi ps rainer thesis 
krone snelting inference configuration structures source code proc 
int 
conference software engineering pp 
may ieee computer society press 
kuipers moonen types concept analysis legacy systems proc 
international workshop program comprehension iwpc ieee computer society press 
melo 

applying concept formation methods object identification procedural code proc 
conference automated software engineering nevada pp 
november ieee computer society 
reps identifying modules concept analysis proc 
int 
conference software maintenance bari pp 
october ieee computer society 
snelting reengineering configurations mathematical concept analysis acm transactions software engineering methodology pp 
april 
snelting tip reengineering class hierarchies concept analysis proc 
acm sigsoft symposium foundations software engineering pp 
november 
van deursen kuipers identifying objects cluster concept analysis proc 
international conference software engineering ieee computer society press 
wilde software reconnaissance mapping program features code software maintenance research practice vol 
pp 

xfig system www xfig org 
