induction stable models ram ai lab 
dept computer science university galicia spain email dc 
es 
line previous muggleton sakama extend logical characterization inductive logic programming normal logic programs stable models semantics 
logic program non monotonic semantics contradictory models 
provide complete characterization hypotheses solution induction kind programs 
consider motivating example 
example 
normal logic program assume want extension program atoms set fpg consequence extension note stable models fpg fqg 
literals consequence consider solutions fp fp qg fp pg fp qg solution directly fact wanted atom induced current ilp methods 
solutions contain rules negation failure non monotonic ilp induce 
fact current nm ilp methods reasons 
program stable models particular atomic consequences 
enlarged bottom set expansion set nm empty 
set get possible candidates body literals hypothesis literal appears body head allowed methods furthermore inconsistent 
interesting case solution positive rule current ilp methods able induce 
case de ned horn logic programs case example 
words entailed body fact reason discovered nm despite nm de ned non horn programs 
example 
consider normal logic program want learn fpg 
program stable model fqg 
literals consequence fq pg 
consider tentative solutions fp fp qg fp pg fp qg hypothesis solution program contradictory stable model 
fact tentative hypotheses solution contradictory 
hypotheses built literals consequence solution 
solutions 
consider fp pg 
program contradictory unique stable model fp qg 
inverse entailment enlarged inverse entailment muggleton non monotonic sakama rely set literals consequence de ne hypothesis solution induction :10.1.1.31.1630
extending induction nonmonotonic lp background knowledge containing negative literals rules longer representable set literals consequence 
example alternative fq pg set consequences fq pg accept solution 
extension basic setting ilp examples predicate examples rules extension considered contribution background knowledge learning task provide facts predicates induced rules rely 
act constraint background knowledge forbid solutions 
fact basic ilp extended background knowledge entail negative example making induction impossible 
part study centered identi cation constraint ect background 
ect normal program consequences may preserved induction 
consider consequences fpg want learn fqg fq solution consequences fqg longer consequence 
nonmonotonic consequences consequences relied default assumptions atom false 
section recall de nition stable models 
induction stable models characterized 
conclude discussing results commenting related 
normal logic programs stable models ground normal logic program set rules form am am ground atom 
rule program contain operator called positive 
stable model semantics normal logic program de ned steps 
positive program stable models minimal sets atoms satisfy condition rule am general ground program 
set atoms program obtained deleting 
rule formula body 
formulas form bodies remaining rules 
program positive stable model program stable model note de nition positive programs stable model unique coincides herbrand model program 
result holds horn programs shown program contradictory herbrand model stable model 
normal programs herbrand model exists stable model coincides unique strati ed normal programs 
di erence normal programs stable model stable models fp stable model fp stable models fpg fqg 
program contradictory stable models 
stable models atoms consequence program atoms common stable models 
stable models herbrand models minimal models di erentiate stable model just model necessary minimal call monotonic model program 
set atoms monotonic model rule satis es body satis es head set atoms monotonic model program monotonic model rule program 
easy verify stable model monotonic model program 
characterization induction stable models section propose necessary sucient conditions existence solution induction normal logic programs stable models semantics 
characterization steps 
induction complete set examples induction usual ilp setting set examples complete 
induction sets examples new ilp setting relevant stable models programming 
induction complete sets consider particular ilp setting set examples complete ground literal program positive example negative example 
case set examples corresponds model program 
setting task nding extension entails set examples application representation theorem lp 
nding program particular set facts consequence nd extension program particular set consequence 
simple solution viz set fact rules positive example 
mentioned solution entails negative examples 
normal program behavior constraint solutions stronger 
show example program entail negative examples accept simple solution set facts positive examples 
theorem 
existence solution necessary condition normal logic program possible model extension stable model monotonic model proof 
stable model program monotonic model 
addition formulas program deletes monotonic models satisfy 
monotonic model ect adding rules recover monotonic model 
note change monotonic model stable model previous proof facts hold nonmonotonic formalism 
complete set examples fa directly corresponds possible model denoted fa program solution set considered model monotonic model show converse theorem holds providing complete characterization existence solution induction problems complete set examples stable model semantics 
theorem 
existence solution sucient condition normal logic program possible model extension stable model monotonic model proof 
construct solution 
consider fa ja mg set fact rules corresponding positive atoms note construction monotonic model 
rules constructed satis ed 
monotonic model monotonic model verify stable 
consider reduct positive program 
stable model minimal model positive program monotonic model monotonic model reduct subset rules remaining rules negative literals deleted satis ed 
assume minimal monotonic model atom assume construction fact rule monotonic model fact rule monotonic model fact solutions monotonic model formed facts solution 
example cont 
theorem may surprising recall example 
example shown simple formed facts solution solutions 
key observation fpg example monotonic model model entails example set fpg valid 
solution shown corresponds model fp qg monotonic model solution example considered complete set sense set 
case example set fpg complete fp qg previous result conclude solution 
previous characterization existence solution induction stable models needs detect model monotonic model program 
theoretically model monotonic model program model satis es program 
model corresponding complete set examples tested satis ability constituting implementation induction stable models 
alternatively result verify set monotonic model 
name denote set atoms fa set fact rules atoms set fa proposition 
normal logic program monotonic model stable model proof 
consider program stable model monotonic model monotonic model proof direction similar theorem 
proposition identi es monotonic models verify stable models fact conditions proposition unique stable model 
stable model satisfy stable 
system smodels niemela sound complete implementation nd stable models normal program 
system smodels induce normal programs stable models semantics setting complete sets examples 
just consider example set possible model try program stable model solution induction solution 
stable model solution 
example cont 
recall example 
consider fp stable model fpg 
fp solution 
example consider fq stable model 
solution 
consider examples set fp qg stable model fp solution 
induction non complete sets consider set examples complete usual ilp setting 
de nition solution induction problem follows 
parts set examples positive examples negative examples solution presence background knowledge 
de nition complete extension set examples interpretation complete extension 
result identi es existence solution results case complete set examples 
theorem 
existence solution normal logic program set examples solution induction complete extension monotonic model proof 
solution stable model exists monotonic model furthermore complete extension 
note relation means monotonic model complete extension theorem extension stable model 
complete extension 
recall fact unique stable model alternative characterization complete set case recall results 
previous theorem proposition get 
corollary 
normal logic program set examples solution induction complete extension stable model implementation point view needed search extensions set examples complete set stable added direct implementation call times system smodels complete extensions stable model 
stable model solution 
note setting choice possible solutions 
extensions set examples solution 
usual choice induction speci solution general solution 
setting search reduced result 
proposition 
normal logic program monotonic model stable model proof 
consider add atoms stable model monotonic model monotonic model consider set examples extract subset positive examples stable model superset stable model 
complete extension solution induction 
stable model solution induction 
situation nonmonotonic induction contradictory extension provide consistent extension search consistent extension extensions choose particular generalization criteria 
note results characterize existence solution induction solution induction 
particular solution complete extension monotonic model solution corresponds monotonic model summary kinds solutions setting normal logic programs 
minimally extended 
facts positive examples minimally extended avoid contradiction generalizations 
generalizations minimal ones implying atoms 
solutions constructed just adding fact rules minimal ones usual ilp rst order generalization 
extension solution extended verify conditions characterization particular monotonic model condition appart usual condition complete extension 
nonmonotonic 
new kind solution setting nm viz negation failure call nonmonotonic hypotheses 
nonmonotonic hypotheses really constitute solutions speci minimally extended ones 
furthermore nonmonotonic solutions property usually non intended examples learned necessarily preserved induction induction steps multiple predicate learning 
nonmonotonic behavior stronger minimally extended generalized hypotheses part examples entailed rely default assumptions 
consider want extend cover additional examples 
task performed considering applying basic procedure arrive previous examples covered uncovered addition 
coverage previous examples done necessarily entailed addition rules program 
hand composed fact rules entails examples monotonically situation arise 
happen alternative situation negative examples covered addition known fact ilp horn theories 
induction non complete sets background horn theories far shown solutions composed collection fact rules characterize existence solution ilp normal logic programs 
extension points precisely set facts positive examples need solution 
restriction precisely characterizes existence solution set facts positive examples 
consider background knowledge horn theory de nite clauses goal clauses constraints clause contains operator 
result holds 
theorem 
existence solution horn logic program consistent set examples solution induction solution 
proof 
need prove direction 
obviously solution solution 
assume solution verify solution 
monotonic properties horn logic programs 
consider stable model exists 
furthermore unique lemma coincides herbrand model 
recall horn programs verify monotonic properties simply solution add consequences remove hypothesis consider stable model solution 
applying monotonic properties horn programs 
stable model solution induction sets examples stable models semantics normal logic programs constitute new declarative programming paradigm 
idea relies fact logic programs stable model stable models 
stable model associated alternative solution problem described program 
stable models problem solutions stable model problem solution 
typical problems kind combinatorial problems nding di erent ways nodes graph colored verifying adjacent nodes color 
typical examples planning problems nding sequence actions lead goal state initial state domain 
kind applications stable models programming induction welcomed 
usual setting ilp extended 
direct extension consider sets examples 
corresponding intended solution problem 
de nition induction stable models logic program sets examples en composed parts solution program induction set stable model 
note usual de nition induction ilp particular case unique set examples 
previous results worth characterize induction stable models 
need concept antichain result similar marek truszczynski 
collection sets atoms mn form antichain set subset set collection 
proposition 
normal logic program collection monotonic models fm ng form antichain extension models stable models simultaneously 
proof 
propose set rules added stable 
possibility add stable 
carefully chosen forbid intended stable achieved able stable keeping monotonic models subsets 
add rules satis ed subsets set subset satisfy rules consider fa nb nb set rules positive atom head body conjunction negative literals atoms subset positive verify rule corresponding model subset model verify body rules model satis es rules delete model subsets show stable 
consider reduct equal literals deleted reduct rules kept fact rules 
point proof theorem directly followed 
monotonic model monotonic model proposition stable model stable addition stable interfere fm ng collection form antichain 
recall mentioned model subset satisfy rules body rules reduct stable model theorem 
existence solution normal logic program sets examples en solution induction set complete extension monotonic model ii set complete extensions fm ng form antichain 
proof 
antichain condition needed collection stable models program form antichain 
recall model stable subset simultaneously stable 
proof theorem follows theorem 
solution collection stable models fm ng form antichain 
furthermore monotonic model complete extension 
collection monotonic models fm ng form antichain proposition extension models fm ng stable models simultaneously 
complete extension note solution facts general solution sets examples settings 
result shows nonmonotonic hypotheses negation failure body truly needed sets examples 
settings existence solution mean just form proofs 
solutions exists showed recall conditions result 
sense collection fh ng proposed thought speci solution problem conservative solution sense keeps monotonic models extended program possible 
implementation point view results settings 
notice induction sets separately set case induction non complete set 
di erence set facts test rules fa example 
normal logic program assume want extension program atoms sets fpg fqg consequence corresponding stable models extension 
note stable model fpg 
consider complete extensions form antichain collection 
monotonic models solution 
build fp qg fq pg 
fp pg stable models 
example 
consider simple graph nodes connected arc 
want nd di erent ways nodes graph colored colors represent white black nodes false 
background knowledge graph undirected condition graph sets examples inform possible solutions fw fw notice union contradictory 
unique stable model mb fn consider complete extensions fw fw form antichain collection 
monotonic models consider complete extensions mb fw mb fw form antichain collection monotonic models solution 
build fw fw 
considering head predicate examples added 
stable models 
solutions 
consider instance fw fw 
generalized fw correspond monotonic models just added monotonic consequences body hypotheses addition ecting stable models program 
discussion related results shown apply ilp settings far lp semantics stable models conservative extension 
characterization understood basis alternative techniques induction de ned 
example interesting nd ecient characterizations line nm settings reduce search solutions 
ilp identify general solution criteria preferred solution worth new domain 
characterization extends proposal nm characterizing induction general normal logic programs including contradictory background knowledge contradictory hypothesis 
clari es results :10.1.1.54.6870
furthermore identify necessary sucient conditions existence solution induction normal programs 
recall instance conditions nm hold example unique stable unique stable including solution 
theoretical method algorithm nm lead contradictory 
consider fnot lg fnot stable fqg 
rules stable counter model tentative solutions example 
induction sets examples de ned characterized 

research partially supported government spain pb 

bain muggleton 
nonmonotonic learning 
muggleton editor inductive logic programming pages 
academic press 

michael gelfond vladimir lifschitz 
stable model semantics logic programming 
kowalski bowen editors logic programming proc 
fifth int conf 
symp pages 

marek truszczynski 
nonmonotonic logic context dependent reasoning 
series arti cial intelligence springer verlag 

muggleton 
inverse entailment progol 
new generation computing 

muggleton 
completing inverse entailment 
proc 
th international workshop inductive logic programming ilp lnai pages 

ilkka niemel patrick simons 
smodels implementation stable model founded semantics normal logic programs 
proc 
th international conference logic programming nonmonotonic reasoning lpnmr lnai pages 

sakama 
properties inverse resolution normal logic programs 
proc 
th international workshop inductive logic programming ilp lnai pages 

sakama 
inverse entailment nonmonotonic logic programs 
proc 
th international conference inductive logic programming ilp lnai pages 
