distributing constraints sampling non binary csps miguel 
ciencias de la computaci universidad de campus de san vicente 
spain upv es nowadays real problems modeled constraint satisfaction problems csps 
generally problems solved search algorithms require order variables values considered 
choosing right order variables values noticeably improve efficiency constraint satisfaction 
order constraints studied improve efficiency particularly problems non binary constraints 
distributed model solving non binary csps agents committed sets constraints 
preprocessing agent committed ordering constraints sample finite population tightest constraints studied 
set agents incrementally concurrently committed building partial solutions problem solution 
constraint ordering value variable ordering improve efficiency inconsistencies earlier number constraint checks significantly reduced 
nowadays real problems artificial intelligence ai areas computer science engineering efficiently modeled constraint satisfaction problems csps solved constraint programming techniques 
examples problems include spatial temporal planning qualitative symbolic reasoning diagnosis decision support scheduling hardware design verification real time systems robot planning 
problems modeled naturally non binary ary constraints 
need address issues regarding non binary constraints started copyright american association artificial intelligence www aaai org 
rights reserved 
supported ppi visitor professor polytechnic university valencia spain 
adriana federico barber 
sistemas inform computaci universidad polit cnica de valencia de vera valencia spain upv es widely recognized constraint satisfaction literature 
researchers traditionally focused binary constraints tsang 
defining models order solve non binary csps relevant 
general methods solving csps include generate test gt backtracking bt algorithms kumar 
gt method generates possible combination variables systematically checks see solution satisfies constraints 
method serious drawback consider instances cartesian product variable domains 
respect bt efficient gt assigns values variables sequentially checks constraints variable assignment 
partial assignment satisfy constraints backtrack assigned variable repeat process 
method eliminates subspace cartesian product variable domains computational complexity solving nontrivial problems exponential 
works investigated various ways improving mentioned bt method 
order avoid thrashing kumar bt consistency techniques arc consistency consistency developed researchers 
techniques able remove inconsistent values domains variables 
ways increasing efficiency bt include search order variables values 
heuristics variable ordering value ordering sadeh fox bart developed due additivity variables values 
constraints considered additive order imposition constraints matter matters conjunction constraints satisfied bart 
spite additivity constraints little done constraint ordering heuristic techniques classify non binary constraints means arity 
non binary con straints arity techniques applied 
propose distributed model problem partitioned set subproblems solved search algorithm 
subproblems classified restricted studied 
fail principle explained succeed try fail classification carried preprocessing step agent called preprocessing agent carries sample finite population statistics distributed sample states search space represents entire search space 
sample checked constraints order classify tightest constraints constraints 
constraints partitioned blocks order studied agents called block agents 
statistics objective select distributed sample incorrect constraint classification may obtained repair method dynamically carried classify constraints appropriate order 
constraints labelled identify number violated tuples 
block agent works tightest constraints constraints fail inconsistent tuples earlier 
block agent finds solution partial problem block agent begins study second set tightest constraints consistent partial state generated block agent 
concurrently block agent continues studying subproblem obtain consistent partial state 
block agent variable assignments previous agents attempts find problem solution group constraints ones 
model allows agents run concurrently achieve partial solutions removes drawbacks synchronous backtracking algorithms yokoo :10.1.1.25.6848
section formally define constraint satisfaction problem describe known ordering algorithms 
section describes multi agent model 
section computational complexity 
results evaluation section 
section 
definitions algorithms section review basic definitions basic algorithms solving csps 
definitions csp generally constraint satisfaction problem csp consists set variables xn set domains dn variable xi set di possible values finite collection constraints cp restricting values variables simultaneously take 
state possible assignment variables number states equal product domain size partition partition set set disjoint subsets union subsets called blocks partition 
distributed csp distributed csp csp variables constraints distributed automated agents yokoo :10.1.1.25.6848
agent variables attempts determine values 
interagent constraints value assignment satisfy interagent constraints 
model agents agent knows set constraints variables involved constraints 
objective csp solution csp assignment values variables constraints satisfied 
objective csp may determine solution exists csp consistent 
solutions solutions solution preference 
optimal solution means objective function defined terms certain variables 
real problems desirable find solutions techniques value ordering valid 
focus mainly problems kind necessary able efficiently find deadends order reduce search tree 
ordering algorithms analyzed sadeh fox bart variable ordering value ordering 
briefly look algorithms 
variable ordering experiments analyses various researchers shown ordering variables assigned search may substantial impact complexity search space explored 
ordering may static ordering dynamic ordering 
examples static ordering heuristics minimum width freuder maximum degree dechter meiri order variables specified search begins changed 
example dynamic ordering heuristic minimum remaining values haralick choice variable considered point depends current state search 
dynamic ordering feasible search algorithms 
example simple backtracking extra information available search different choice ordering initial ordering 
forward checking current state includes domains variables pruned current set instantiations 
possible base choice variable information 
value ordering comparatively little done algorithms value ordering binary csps frost dechter :10.1.1.37.7424
basic idea value ordering algorithms select value current variable lead solution 
order values considered substantial impact time necessary find solution 
solutions required problem consistent value ordering difference 
different value ordering rearrange branches emanating node search tree 
advantage ensures branch leads solution searched earlier branch leads deadend 
example csp solution correct value chosen variable solution backtracking 
suppose selected variable instantiate choose value try 
may values succeed 
case value current variable eventually considered order matter 
hand find complete solution past instantiations want choose value succeed lead conflict 
multi agent model agent computation studied years field artificial intelligence widely branches computer science 
multi agent systems computational systems agents interact achieve goals 
agents systems may homogeneous heterogeneous may common goals distinct goals liu 
pointed definitions section distributed constraint satisfaction problem distributed csp constraint satisfaction problem variables constraints semantically partitioned distributed sub problems solved agent 
section provide definitions specifications different agents involved models formulation proposed multi agent model 
definition block agent aj virtual entity essentially properties autonomy social ability reactivity pro activity wooldridge jennings 
block agents autonomous agents 
operate subproblems direct intervention agent human 
block agents interact sending messages communicate consistent partial states exchange constraints 
perceive environment changes new partial consistent states respond possible complete consistent partial states 
block agents take initiative evicting constraints tightest sending exchanging previous block agents 
definition multi agent system system contains elements 
environment agents live variables domains constraints consistent partial states 

set reactive rules governing interaction agents environment constraint exchange rules communication rules 

set agents ak 
preprocessing agent preprocessing agent carries preprocessing step sampling finite population statistics target population sampled population chosen represent population 
context population states generated means product variable domains 
preprocessing agent chooses sampled population composed states target population polynomial function 
states distributed order represent target population 
statistics user may select size sample 
represents preprocessing agent 
preprocessing agent selected sample states preprocessing agent checks states vi vi satisfy constraint ci 
constraint ci labelled pri ci pri pri vi represents probability ci satisfies problem 
preprocessing agent classifies constraints ascending order labels pri 
preprocessing agent translates initial non binary csp ordered non binary csp studied csp solver 
observed constraint checked selected state 
furthermore state sample store evaluation value ti stochastic local search algorithm restart search 
ordered constraints partitioned blocks constraints 
block constraints managed agent called block agent 
taken account block agent committed solving restricted subproblem block agent committed solving restricted subproblem 
behavior block agents 
block agents block agents agents committed solving subproblems 
pointed definition agent set properties 
behavior characteristics block agents properties characteristics block agents 
block agent aj identifier partition set constraints ci block agent aj committed block constraints cj 
constraint labelled number violated constraints 
block agent aj set variables vj involved block constraints cj 
variables fall different sets variables set vj new variables set vj vj vj vj 
domain di corresponding variable xi maintained block agent xi involved xi vt block agent aj assigns values variables assigned aj assigns values variables xi vj variables xk vj assigned previous block agents aj 
block agent aj maintains storage partial problem solutions generated previous block agents aj 
block agent aj maintains assignments variables included sets vj 
block agent aj send constraints highest labels previous block agent aj managed 
case new variables involved constraints sent previous block agent corresponding variable domains 
block agents committed solving csps represent subproblems main csp 
block agents cooperate sending messages consistent partial states exchanging constraints 
follows overview multiagent formulation analyze relationship agents 
overview multi agent formulation specialized literature works distributed csps 
yokoo yokoo formalization algorithms solving distributed csps :10.1.1.25.6848
algorithms classified centralized methods synchronous backtracking asynchronous backtracking yokoo 
model considered synchronous model 
meant framework interacting agents achieve consistent state 
main idea multiagent model carrying partition problem constraints groups called blocks constraints tightest constraints grouped studied autonomous agents 
preprocessing agent carries partition constraints similar sample finite population objective classifying constraints groups tightest ones ones 
pointed selected state sample store evaluation value ti stochastic local search algorithm order restart search 
note state evaluation value zero ti state violate constraint solution 
constraints divided blocks preprocessing agent group block agents concurrently manages block constraints 
block agent charge solving subproblem means search algorithm 
block agent free select algorithm find consistent partial state 
select local search algorithm algorithm depending problem topology 
case block agent committed finding solution particular subproblem 
subproblem composed csp subject variable assignment generated previous block agents 
block agent works restricted block constraints 
block agent finds solution subproblem sends consistent partial state block agent concurrently study specific subproblems 
block agent tries solve subproblem knowing variables assigned block agent 
block agent variable assignments generated previous block agents tries find complete consistent state search algorithm 
block agent working concurrently block agents tries find consistent state order find problem solution 
note block agent identifier gets higher number new vari ables gets lower 
set new variables block agents high identifier may empty 
case block agents need check constraints partial states sent previous block agents 
dynamic repair method exchange constraints preprocessing agent may correctly classify constraints tightest 
due fact size sample appropriate sample correctly selected 
case block agents apply dynamic repair method exchange constraints 
constraint labelled identify number violated tuples 
block agent maintains upper bound label value 
upper bound reached block agent block agent negotiate exchange highest label constraints block agent lowest label constraints block agent 
way sampled population grows constraint ordering exact 
multi agent model shows multi agent model preprocessing agent carries constraint ordering block agents ai committed concurrently finding partial problem solutions sij 
block agent sends partial problem solutions block agent problem solution block agent 
example state sk problem solution 
concurrence seen time step block agents concurrently working 
block agent maintains corresponding domains new variables 
block agent assign values new variables block non binary constraints satisfied 
block agent finds value new variable sends consistent partial state block agent 
block agent assigns values new variables satisfying block constraints solution 
dynamic repair method applied constraint ordering correctly carried 
example look similar example yokoo :10.1.1.25.6848
variables variable domains respectively constraints see 
csp solved model constraints constraint partition straightforward 
blocks constraint block consider 
block composed constraint second block composed constraint 
due fact constraint tightest constraint maintains valid tuples maintains valid tuples 
block agent manages constraint block agent manages constraint 
observed variables new variables new variable variable 
domains variable known domain known 
furthermore responsible assigning values search algorithm responsible assigning values 
shows behavior distributed model gt 
observed time step generate consistent partial state 
sends message consistent partial state 
time step concurrently find consistent partial state problems 
tests state solution simultaneously tests partial state consistent partial 
time step tests state consistent state solution 
tests partial state 
solution required process halted 
solutions required model continues steps 
example queens problem wellknown problem example discrete problem variables eleven constraints 
queens problem multi agent model shows initial csp number valid tuples disequation 
preprocessing agent generates blocks constraints corresponding groups valid tuples tightest constraint different constraint constraint 
block agent committed block constraints solves subproblem means search algorithm 
observed block agents concurrently block agent receives consistent partial state 
section exhaustive evaluation queens problem observe constraint check saving 
analysis distributed model section evaluate computational cost preprocessing agent block agent search algorithm corresponding computational complexity 
preprocessing agent selects sample composed points spatial cost 
preprocessing agent checks consistency sample non binary constraint temporal cost ks 
preprocessing agent classifies set constraints ascending order 
temporal complexity 
temporal complexity preprocessing agent max ks 
application problems soft constraints proposed model applied problems hard constraints soft constraints 
hard constraints conditions satisfied soft constraints may violated satisfied possible 
problems type easily managed follows preprocessing agent studies normally hard constraints classifies hard constraints tightest hard constraints studied 
preprocessing agent studies soft constraints 
case classifies soft constraints soft constraints studied 
way constraints managed order tightest hard constraints hard constraints soft constraints tightest soft constraints 
hard constraints satisfied soft constraints possible satisfied 
evaluation model section compare performance model known complete csp solvers generate test gt backtracking bt appropriate techniques observing number constraint checks 
furthermore compare performance model hill climbing known local search algorithm analyzing number restart savings 
empirical evaluation carried dif ferent types problems benchmark problems random problems 
benchmark problems queens problem classical search problem artificial intelligence area 
queens problem studied previous section 
queens problem instance queens problem possible solutions 
problem place queens chessboard queens capture 
queens allowed placed row column diagonal 
general queens problem set queens placed chessboard queens attack 
table number constraint check saving model gt bt queens problem 
mod gt mod bt queens solutions constraint constraint check saving check saving table percentage restart savings hill climbing max flip queens problem 
mod hill climbing queens percentage restart savings table number constraint check saving queens problem gt model mod gt bt model mod bt 
objective find solutions 
results show number constraint check saving significant mod gt mod bt due fact model classifies constraints ascending order see tightest constraints checked inconsistent tuples discarded earlier 
furthermore percentage restart savings hill climbing model table 
hill climbing uses sample selects points highest labels restart search 
objective find solution 
observed percentage high queens problem number restarts reduced 
queens problem percentage restarts reduced 
random problems benchmark sets test algorithms specific problems 
years growing interest study relation parameters define instance csp general number variables number constraints domain size arity constraints 
notion randomly generated csps introduced describe classes csps 
classes studied empirical methods 
empirical evaluation set random constraint satisfaction problems defined tuple number variables number constraints domain size 
problems randomly generated modifying parameters 
considered constraints global constraints constraints maximum arity 
tables sets parameters varies order evaluate algorithm performance parameter increases 
evaluated test cases type problem value variable parameter 
table number constraint checks backtracking filtered arc consistency problems classes 
bt ac mod bt ac problems constraint constraint checks checks number constraint checks bt filtered arc consistency preprocessing bt ac bt ac model mod bt ac table 
left side table number constraint checks problems number constraints increased number variables domain size set table number constraint checks backtracking filtered arc consistency problems classes 
bt ac mod bt ac problems constraint constraint checks checks respectively 
results show number constraint checks reduced cases 
right side table number constraint checks problems domain size increased number variables number constraints set respectively 
results similar number constraint checks reduced cases 
distributed model solving non binary csps preprocessing agent committed ordering constraints sample finite population tightest constraints studied 
set block agents incrementally concurrently committed building partial solutions global solution 
inconsistent tuples earlier corresponding savings constraint checking 
hard problems solved efficiently problems solutions required 
working distributed model preprocessing agent removed due fact block agents dynamically exchange constraints 
set constraints initially randomly partitioned groups 
managed block agent 
number block agents enlarged reduced depending problem topology 
number enlarged new agents inserted system number reduced existing agents evicted 

constraint handling rules applications extensions invited talk 
th international conference applications prolog 
bart 
constraint programming pursuit holy grail 
proceedings invited lecture prague june 
dechter meiri 
experimental evaluation preprocessing algorithms constraints satisfaction problems 
artificial intelligence 
freuder 
sufficient condition search 
journal acm 
frost dechter 
look ahead value orderings constraint satisfaction problems 
proc 
ijcai 

dual viewpoint heuristic binary constraint satisfaction problems 
proc 
european conference artificial intelligence ecai 
haralick 
increasing tree efficiency constraint satisfaction problems 
artificial intelligence 
kumar 
algorithms constraint satisfaction problems survey 
artificial intelligence magazine 
liu 
autonomous agents multi agent systems explorations learning self organization adaptative computation 
world scientific singapore 
sadeh fox 
variable value ordering heuristics activity jobshop scheduling 
proc 
fourth international conference expert systems production operations management 
tsang 
foundation constraint satisfaction 
london san diego academic press 
wooldridge jennings 
agent theories survey 
intelligent agents 
yokoo durfee ishida kuwabara 
distributed constraint satisfaction problem formalization algorithms 
knowledge data engineering 
yokoo 
asynchronous weak commitment search solving distributed constraint satisfaction problems 
proc 
international conference principles practice constraint programming 
