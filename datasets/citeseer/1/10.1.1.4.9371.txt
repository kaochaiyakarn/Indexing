testera novel framework testing java programs khurshid darko marinov khurshid marinov lcs mit edu mit lab computer science technology square cambridge ma 
testera novel framework automated specification testing java programs 
formal specification method testera uses method precondition automatically generate nonisomorphic test inputs bound 
testera executes method test input uses method postcondition test oracle check correctness output 
testera allows users give specifications order logic formulae 
enabling technology testera uses alloy toolset provides automatic tool analyzing order logic formulae 
testera check java programs including networking architecture alloy alpha analyzer methods java collection framework 
article describes testera framework gives experimental results 

manual software testing general test data generation particular labor intensive processes 
automated testing significantly reduce cost software development maintenance 
describes testera novel framework automated testing java programs 
testera uses specification testing 
formal specification method testera uses method precondition automatically generate nonisomorphic test inputs bound test input bound objects class appear 
testera executes method test input uses method postcondition test oracle check correctness output 
testera allows users give specifications order logic formulae 
enabling technology testera uses alloy toolset 
alloy order declarative language sets relations 
alloy analyzer fully automatic tool finds instances alloy specifications finds assignments values sets relations specification assignment formulae specification evaluate true 
article invited submission automated software engineering journal 
earlier version article appeared proceedings th ieee conference automated software engineering ase 
kluwer academic publishers 
printed netherlands 
khurshid marinov key idea testera alloy express structural invariants inputs correctness criteria java program program computation 
previous analyzing naming architecture modeled inputs computation alloy 
discovered manually modeling imperative computation complicated due alloy declarative nature lack support recursion 
automatically modeling computation alloy performed subset java 
approach optimized scale checking programs size aforementioned naming architecture alloy analyzer 
testera presents lightweight approach automatically analyzable declarative notation analysis imperative computation 
testera requires user input correctness specification integer bound input size 
precise correctness criterion correctness checking method requires 
method precondition alloy testera uses alloy analyzer generate nonisomorphic instances satisfy precondition specification 
testera automatically instances create java objects form test inputs method test 
testera executes method input automatically abstracts output instance postcondition specification 
testera uses alloy analyzer check instance satisfies postcondition 
testera reports concrete counterexample input output pair violates correctness specification 
testera graphically display counterexample heap snapshot visualization facility alloy analyzer 
perform translations alloy instances alloy analyzer generates java objects inputs outputs method testera automatically generates test driver java implementation bytecode sourcecode method relevant classes 
current implementation testera uses bytecode engineering library parsing java bytecode 
testera identify program fails 
testera finds counterexample reports constraints postcondition violated output list sorting method sorted acyclic permutation input list 
testera test method interesting inputs describing order logic properties inputs possess 
allows testera finding new bugs program having fix ones discovered simply expressing invariant rules generation inputs lead known bugs 
testera novel framework testing java programs testera aims detecting bugs possible generating spurious error reports 
achieved expense compromising completeness limiting exhaustive analysis bounded input space 
errors may missed reported errors concrete counterexamples violated properties 
testera automatically generate java data structures description structural invariants able test code concrete data type level 
example order test method performs deletion balanced binary trees input tree automatically generated structural description need construct sequence method calls 
especially useful hard determine particular sequence element insertions empty tree produce balanced tree desired configuration especially deletions need interleaved insertions generate configuration 
article describe core components analysis architecture testera 
show various applications implementation testera 
illustrate testera capabilities checking intricate programs manipulate complicated data structures complex tools alloy analyzer 
testera able identify subtle bugs part alloy alpha analyzer bugs fixed alloy analyzer available public download 

example section presents example generation testing linked data structure illustrate programmers testera test programs 
java code declares singly linked list recursive method performing merge sort class list node header static class node int elem node void mergesort 
khurshid marinov object class list represents singly linked list 
header field denotes node non empty list 
objects inner class node represent nodes lists 
field elem denotes primitive integer data node 
field denotes node 
method mergesort destructively updates input list represented implicit parameter sort list 
assume class list implements acyclic lists 
class invariant list stated alloy formula acyclicity header alloy denotes reflexive transitive closure denotes transitive closure denote membership subset relation 
expression header denotes set nodes reachable header node list traversals field similarly expression header denotes set traversals 
quantifier stands universal quantification 
class invariant states nodes reachable header node list traversing node field number times lead back node 
precondition mergesort simply class invariant 
postcondition mergesort includes class invariant express stronger properties input list post state sorted permutation input list pre state 
properties expressed alloy follows sorted header elem elem output permutation input integer header elem header elem alloy denotes logical implication denotes set cardinality denotes set comprehension expression 
character denotes field traversal pre state field traversals default state pre state pre condition post condition 
formula check output sorted states nodes reachable header order set formula evaluates true nonempty 
formula check output permutation input states alloy syntax allow testera allows automatically translates formulae appropriate alloy syntax 
testera novel framework testing java programs integer occurs number times list pre state list post state 
java bytecode sourcecode list list node class invariant precondition postcondition bound input size testera automatically generates alloy specifications generating test cases checking correctness java test driver 
testera automatically uses generated alloy java code test specified method generating test inputs executing method inputs checking input output pair correctness 
illustration testera counterexample generation consider erroneously reversing comparison helper method merges lists elem elem elem elem results mergesort sorting lists reverse order 
testera detects violation correctness criterion generates counterexamples counterexample pre state input post state input testera analysis tells input list post state permutation input list pre state sorted 
worth noting shape analysis techniques unable handle methods mergesort require complicated invariants explicitly user loops method calls :10.1.1.152.1240
discuss section 
testera testera novel framework automated testing java programs 
built testera alloy alloy analyzer aa aim checking actual java implementations having model java computations alloy 
illustrates main components testera 
testera specification method states method declaration method return type name parameter types name java classfile contains method body class invariant method precondition method postcondition bound input size 
current implementation give specification command line arguments main testera method 
alloy instances alloy analyzer khurshid marinov alloy input spec concretization alloy java input input testera spec java tester run code 
basic testera framework java output alloy spec abstraction alloy output fail check correctness testera specification testera automatically creates files 
files alloy specifications specification generating inputs specification checking correctness 
third file consists java test driver code translates alloy instances java input objects executes java method test translates java output objects back alloy instances 
testera automatic analysis proceeds phases phase testera uses alloy analyzer generate non isomorphic instances alloy input specification 
second phase instances tested turn 
java test input method 
method executed input 
method output abstracted back alloy instance 
output alloy instance original alloy input instance signatures relations alloy input output specification 
testera uses alloy analyzer check valuation satisfies correctness specification 
check fails testera reports counterexample 
check succeeds testera uses alloy input instance testing 

alloy specifications discuss alloy specifications testera automatically generates specifications alloy analyzer generating inputs checking correctness 
alloy specification consists sequence paragraphs introduce new basic types record constraints relations de pass counter example testera novel framework testing java programs existing types 
alloy assumes universe atoms partitioned subsets associated basic type 
details alloy language alloy analyzer 
explain relevant alloy notation introduce 
recall singly linked list example introduced section 
alloy specification defines acyclic singly linked list module list open java primitive integer sig list header option node sig node elem integer option node fun list repok header module declaration names specification import includes existing specifications current 
testera specification library provides specifications java primitive integer allows users integers basic operations integers having explicitly specify alloy 
signature declaration list introduces uninterpreted type set atoms relation header signature declaration node introduces set atoms relations elem 
atom list header atom node 
keyword option specifies header partial function header may evaluate empty set list atom represents java value null 
similarly partial function elem total function java primitive values null 
alloy function repok states class representation invariant list invoked function constrains input list acyclic 
testera automatically parses java classfiles builds alloy signature declarations ones shown 
current testera implementation uses bytecode engineering library bytecode parsing 
testera builds alloy specifications combining signature khurshid marinov declarations alloy functions express class invariants method preconditions method postconditions 
input specification includes signature declaration specifying method inputs 
output specification includes signature declaration specifying method output 
alloy built notion state mutation 
input output specifications testera builds explicitly introduce state 
give details state specified 
discussed 

abstraction concretization translations discuss test driver testera automatically generates test specified method 
test driver consists java code performs abstraction concretization translations appropriately executes method test 
concretization abbreviated translates alloy instances java objects data structures 
abstraction abbreviated translates java data structures alloy instances 
concretization typically operates stages 
stage creates atom alloy instance corresponding object java classes stores correspondence map 
second stage establishes relationships java objects created stage builds actual data structures 
recall singly linked list example introduced section 
describes translation list pseudocode simplify presentation 
pseudocode foreach java loops iterate collections omit 
pattern matching shorthand denote java object represents pair fields accessed second 
input alloy instance java object corresponding atom signature list created 
atom signature node new list node object created 
atom signature integer new java lang integer object created appropriate value 
list variable input set appropriate object alloy atom input special atom represents input list 
completes stage 
second stage tuple alloy relation header corresponding field appropriately set java objects likewise tuples relations elem processed 
completes translation 
testera novel framework testing java programs instance map new foreach atom list map put atom new list foreach atom node map put atom new list node foreach atom integer map put atom new integer atom list input map get input foreach header map get header map get foreach elem map get elem map get intvalue foreach map get map get return new new object input map 
concretization translation linked list 
translations class store bi directional mapping alloy atoms java objects 
similar java util hashmap 
object get atom returns java object corresponding atom object sig returns alloy atom corresponding java object atom mapping atom creates new atom signature sig adds mapping returns 
test case testera invokes mergesort 
simple execution java follows 
execution test case input mergesort gives abstraction translation 
parameter ret represents input instance modified include method output values fields input objects aa check correctness criteria 
mergesort return type void output input list may mutated method 
method updates alloy relation adding tuple post state 
set visited keeps track nodes traversed loop 
necessary prevent translation enter infinite loop mergesort erroneously produces output list acyclic 
khurshid marinov instance instance ret list input map list node input header null ret header map input list map node set visited new visited contains null ret elem map node map new integer elem integer null ret map node map node visited add return ret 
abstraction translation linked list 
testera alloy specifications abstraction concretization translations automatically 
users may modify specifications translations introduce abstractions alloy specifications improve efficiency analysis 

case studies testera check variety programs including methods classes java util package 
programs manipulate non trivial data structures 
tested part alloy analyzer testera 
section illustrate analyses performed testera bugs detected 

red black trees java util treemap outline testera analysis red black tree implementation java util treemap standard java libraries version 
red black trees binary search trees extra bit information node color red black 
restricting way nodes colored path root testera novel framework testing java programs leaf red black trees ensure tree balanced guarantee basic dynamic set operations red black tree take lg time worst case 
binary search tree red black tree 
node red black 

leaf nil black 

node red children black 

simple path root node descendant leaf contains number black nodes 
red black properties expressible alloy 
testera test implementation red black trees java util treemap 
particular illustrate testera analysis remove method class java util treemap deletes node element input tree 
deletion complex operation standard operations red black trees involves rotations 
method remove java util treemap auxiliary methods lines code 
part java util treemap declaration public class treemap entry root static class entry object key object value entry left entry right entry parent boolean color public object remove object key 
red black trees java util treemap implement mapping keys values entry data fields key value 
field value represents value corresponding key mapped 
fields red black trees 
fields constants field red constant boolean false relevant testing remove method raise khurshid marinov parent ok root left right left right parent binary search tree properties unique keys disj root left right key key distinct children root left right left right left right tree acyclic root left right left right left subtree smaller keys root left right el left left right el key key right subtree larger keys root left right er right left right key er key red black tree properties 
node red black construction 
leafs black 
red node black children root left right color false left right left right color true 
paths root nil black nodes root left right left right left right root left right left right color true root left right left right color true 
red black tree invariants 
currently check exceptional behavior 
testera allows users specify fields exclude alloy models builds 
exclude generation fields ones declared 
declared type key object 
key objects need compared red black trees binary search trees 
testera novel framework testing java programs input pre state input post state input remove new integer 
counterexample erroneous version remove 
nodes labeled keys entries 
round filled nodes represent entries colored black empty nodes represent entries colored red 
square filled nodes represent nil nodes colored black 
entry key deleted input red black tree 
tree post state balanced precisely property violated 
comparisons explicit comparator keys provided time creation tree natural ordering actual type key objects 
testera allows users define actual type fields generation objects 
define actual type field key java lang integer testera automatically generates appropriate tree objects 
testera generate red black trees test inputs remove method 
gives alloy class invariant red black trees terms fields declared 
class invariant requires parent field consistent fields left right tree binary search tree satisfy properties red black trees mentioned 
generating test inputs class invariant testera phase analysis tests remove 
default testera checks partial correctness property class invariant preserved method 
check stronger properties check key remove removed tree post condition root left right key root left right key key explained indicates field access pre state 
expected testera analysis original implementation provided java util produce counterexamples 
erroneously swap black red code fragment color black building ne khurshid marinov query database service camera building ne lookup name database query service camera printer lookup name lookup name lookup name conforming services 
intentional names ins counterexamples lookup name testera detects violation structural constraints red black trees produces concrete counterexamples 
presents counterexample 
tree post state balanced precisely property violated 
noted alloy provides expressive notation expressing properties data structures 
evident fact fourth property red black trees expressible logic 
similarly check remove method 

intentional naming system intentional naming system ins proposed naming architecture resource discovery service location dynamic networks 
ins services referred intentional names describe properties services provide network locations 
intentional name tree consisting alternating levels attributes values 
query example intentional name hollow circles represent attributes filled circles represent values 
query describes camera service building ne 
wildcard may place value show value acceptable 
name resolvers ins maintain database stores mapping service descriptions physical network locations 
client applications invoke resolver lookup name method access services interest 
illustrates example invoking lookup name 
testera novel framework testing java programs database stores description services service provides camera service ne service provides printer service ne 
invoking lookup name query database return 
illustrate variety testera analyses discuss flaws identified testera java implementation ins 
flaws existed ins design corrected design 
modified implementation ins checked correctness testera 
details ins case study testera 
original java implementation ins consists lines code 
checking ins testera focuses lookup name method 
lookup name returns set services input database conform input query 
investigate correctness lookup name test soundness returns conforming services completeness returns conforming services 
ins inventors state formal definition conformance certain properties lookup name 
published description lookup name claims algorithm uses assumption omitted attributes correspond wildcards true queries advertisements testera claim illustrates counterexample 
attribute removed 
different results invocations lookup name contradict claim 
testera shows addition ins monotonic adding new service database cause existing services erroneously non conforming 
illustrates scenario services considered conforming semantics ins existence erroneously non conforming 
flaw points ins consistent notion conformance 
preceding flaws exist original design implementation ins 
define service conforming query subtree name wildcard matches value 
means service conforming provides attributes values mentioned right order 
testera analysis original implementation lookup name respect definition conformance reports counterexamples 
modified implementation re evaluated correctness lookup name testera 
time testera reports flaws increasing confidence changes corrected problems ins 
corrected algorithm forms part ins code base 
khurshid marinov 
alloy alpha analyzer main design goal testera efficiently analyzes complex data structures 
testera applied test various kinds programs 
illustration show testera uncover subtle bugs alloy alpha analyzer 
bugs appear analyzer generates instances user convenience retain names user gives static signatures 
problems appear rare case user explicitly declares static subsignature name aa picks atom basic signature 
bugs simple fixes corrected new version analyzer publicly available download 
recall basic signatures alloy introduce new types 
distinct basic signatures share atoms atoms signature unique 
test conjecture instances produced old analyzer satisfy properties 
build alloy meta specification simplified alloy specification consists basic signature subsignature declarations 
phase testera generates non isomorphic instances specification 
instances essentially represents alloy specification phase testera takes instance turn build corresponding alloy specification testing invokes analyzer generate instances checks instance satisfies uniqueness properties stated 
alloy code models alloy specification consists signature declarations atoms explicitly named static 
sig sig prefix sig suffix sig atom prefix suffix fact disjoint atom sig sig name set atom fact testera novel framework testing java programs disjoint sig name name partition static sig signature test ext partition static sig ext prefix partition static sig zero ext suffix basic type denotes signature names prefix suffix build atom names 
fact specifies names distinct atoms differ prefix suffix 
sig name atoms declared explicitly static 
fact constrains distinct signatures distinct names atoms 
sake simplicity pool signature names signature test prefixes suffixes zero 
zero placeholders symbols symbols leading alphabetic character allowed subsignature names alloy 
example instance analyzer generates specification signature test prefix suffix zero atom sig sig sig zero name sig test sig signature sig sig instance represents alloy specification sig test sig signature static sig extends test static sig extends signature stated earlier instance generated analyzer valuations signatures relations instance satisfy uniqueness properties analyzer sound 
testera analysis conjecture produces counterexample 
particular testera detects instance produced analyzer signature test khurshid marinov table summary testera analyses phase phase case study method property tested size gen check test sec pass sec singly linked lists mergesort mergesort erroneous red black trees remove java util remove erroneous ins published claim addition monotonic lookup name original lookup name corrected alloy alpha disj sigs unique atoms instance violates property atoms distinct signatures distinct 
counterexample testera generates signature test instance violates property atoms signature distinct 
violations uniqueness properties affect visualization part analyzer 
mentioned bugs fixed new version alloy analyzer publicly available download 

implementation performance implemented testera java 
table summarizes performance implementation case studies conducted analyses pentium iii mhz processor 
tabulate case study method test representative input size phase phase statistics testera checking size 
phase tabulate number inputs generated time generate inputs 
phase tabulate number inputs satisfy correctness criteria total time checking 
time seconds phase indicates reusing generated tests 
times seconds 
cases testera takes minute complete automatic generation testera novel framework testing java programs instances verification correctness small input sizes 
phase testera typically generates test inputs second 
studies complex structural invariants red black trees 
note number possible states consider generating red black trees nodes course alloy analyzer prunes away states test inputs generated fairly quickly 
ins alloy alpha analyzer studies performed alloy alpha analyzer 
studies wrote hand java code perform abstractions 
took hours write translations straightforward 
testera analysis studies fully automatic including generation translations 
phase testera performance depends complexity code executed 
indicated row testera analysis alloy alpha analyzer takes seconds test test cases 
test cases requires analyzer generate instances checking instances 
testera detects violation property tested testera generates concrete counterexamples 
case violation detected increase confidence implementation generating test inputs larger number objects 
simply increasing bound input size regenerating inputs produces test inputs smaller bound 
testera performance case enhanced ruling inputs smaller bound 
illustration tabulated results linked lists exactly nodes integers red black trees exactly nodes integers 
notice need generate test cases perform testing 
disk space issue testera perform testing checking inputs generated having store 
selecting trade means inputs reused test implementations methods 
khurshid marinov 
related 
specification testing large body research specification testing 
early goodenough gerhart emphasizes importance 
projects automate test case generation specifications specifications uml statecharts adl specifications 
specifications typically consider linked data structures tools generate java test cases 
cheon leavens describe automatic translation jml specifications test oracles junit 
framework automates execution checking methods 
burden test case generation programmers provide sets possibilities method parameters 
developed korat framework uses jml specifications automates test case generation correctness checking 
korat provides novel search algorithm systematically explores input space java predicate represents method precondition 
korat generates nonisomorphic inputs input size satisfy precondition 
korat provides faster generation test inputs testera 
korat performance depends order predicate accesses fields inputs 

static analysis projects aim developing static analyses verifying program properties 
extended static checker esc uses theorem prover verify partial correctness classes annotated jml specifications 
esc verify absence errors null pointer dereferences array bounds violations division zero 
tools esc verify properties complex linked data structures 
research projects attempt address issue 
valued logic analyzer tvla static analysis system verify list structure preserved programs perform list reversals destructive updating input list 
tvla analyze programs manipulate doubly linked lists circular lists sorting programs 
pointer assertion logic engine pale verify large class data structures represented spanning tree backbone possibly additional pointers add extra information 
data structures include doubly linked lists trees parent pointers threaded trees 
tvla pale testera novel framework testing java programs primarily intraprocedural role analysis supports compositional interprocedural analysis verifies similar properties 
static analysis program properties promising approach ensuring program correctness long run current static analysis techniques verify limited program properties 
example techniques verify correctness implementations balanced trees red black trees 
testing hand general verify decidable program property inputs bounded size 
jackson propose approach analyzing methods manipulate linked data structures 
approach build alloy model bounded segments computation sequences check model exhaustively aa 
approach provides static analysis unsound respect size input length computation 
testera checks entire computation handles larger inputs complex data structures 
testera require specifications helper methods 

software model checking lot interest applying model checking software 
verisoft operate directly java respectively program systematically explore state check correctness 
projects bandera translate java programs input language existing model checkers spin smv 
handle significant portion java including dynamic allocation object exceptions inheritance threads 
provide automated support reducing program state space program slicing data abstraction 
applying model checking software focused checking event sequences linked data structures 
data structures considered purpose reduce state space explored check data structures 
testera hand checks correctness methods manipulate linked data structures 
khurshid marinov 
testera novel framework automated testing java programs 
key idea testera structural invariants input data automatically generate test inputs 
enabling technology testera uses order relational notation alloy alloy analyzer 
automatic constraint solving ability alloy analyzer generate concrete inputs program 
program executed input output pair automatically checked correctness criteria expressed alloy 
testera requires user input method specification integer bound input size 
precise statement desired input output relationship correctness checking framework requires 
programs efficiently analyzed testera 
cases analysis completed minute small input bounds 
program violates correctness property testera generates concrete counterexamples 
believe approach taken testera promises scalability wide application computation modeled arbitrarily complex 
plan extend testera analysis report structural code coverage help users decide program sufficiently tested 
plan evaluate testera programs 

william adjie winoto elliot schwartz hari balakrishnan jeremy lilley 
design implementation intentional naming system 
proc 
th acm symposium operating systems principles sosp kiawah island december 

kent beck erich gamma 
test infected programmers love writing tests 
java report july 

boris beizer 
software testing techniques 
international thomson computer press 

chandrasekhar boyapati khurshid darko marinov 
korat automated testing java predicates 
proc 
international symposium software testing analysis issta july 

chang debra richardson 
structural specification testing automated support experimental evaluation 
proc 
th acm sigsoft symposium foundations software engineering fse pages september 

cheon gary leavens 
simple practical approach unit testing jml junit way 
technical report department computer science iowa state university november 

james corbett matthew dwyer john hatcliff corina pasareanu robby shawn laubach hongjun zheng 
bandera extracting finite state models testera novel framework testing java programs java source code 
proc 
nd international conference software engineering icse june 

thomas cormen charles leiserson ronald rivest 
algorithms 
mit press cambridge ma 

markus dahm 
byte code engineering library 
sourceforge 
net 

iosif 
deadlock detection tool concurrent java programs 
software practice experience july 

david detlefs rustan leino greg nelson james saxe 
extended static checking 
research report compaq systems research center 

patrice godefroid 
model checking programming languages verisoft 
proc 
th annual acm symposium principles programming languages popl pages paris france january 

goodenough gerhart 
theory test data selection 
ieee transactions software engineering june 

gerald holzmann 
model checker spin 
ieee transactions software engineering may 

hans martin 
improving software tests specifications 
proc 
th international conference users formal specification notation 

daniel jackson 
software modelling analysis alloy 
sdg lcs mit edu alloy book pdf 

daniel jackson ian schechter ilya 
alcoa alloy constraint analyzer 
proc 
nd international conference software engineering icse limerick ireland june 

daniel jackson 
finding bugs constraint solver 
proc 
international symposium software testing analysis issta portland august 

khurshid daniel jackson 
exploring design intentional naming scheme automatic constraint analyzer 
proc 
th ieee international conference automated software engineering ase grenoble france sep 

khurshid darko marinov 
checking java implementation naming architecture testera 
scott stoller willem visser editors electronic notes theoretical computer science entcs volume 
elsevier science publishers 

khurshid darko marinov daniel jackson 
analyzable annotation language 
proc 
acm sigplan conference object oriented programming systems languages applications oopsla seattle wa nov 

viktor patrick lam martin rinard 
role analysis 
proc 
th annual acm symposium principles programming languages popl portland january 

tal lev ami thomas reps mooly sagiv reinhard wilhelm 
putting static analysis verification case study 
proc 
international symposium software testing analysis 

mcmillan 
symbolic model checking 
kluwer academic publishers 

anders moeller michael schwartzbach 
pointer assertion logic engine 
proc 
sigplan conference programming languages design implementation snowbird ut june 
khurshid marinov 
jeff offutt 
generating tests uml specifications 
proc 
second international conference unified modeling language october 

rumbaugh jacobson booch 
unified modeling language manual 
addison wesley object technology series 

mooly sagiv thomas reps reinhard wilhelm 
solving shape analysis problems languages destructive updating 
acm transactions programming languages systems toplas january 

sankar hayes 
specifying testing software components adl 
technical report tr sun microsystems laboratories mountain view ca april 

elliot schwartz 
design implementation intentional names 
master thesis mit laboratory computer science cambridge ma june 

ilya 
generating effective symmetry breaking predicates search problems 
proc 
workshop theory applications satisfiability testing june 

spivey 
notation manual 
prentice hall second edition 

willem visser klaus havelund guillaume brat park 
model checking programs 
proc 
th ieee international conference automated software engineering ase grenoble france 
