leakage aware dynamic voltage scaling real time embedded systems cristiano pereira rajesh gupta center embedded computer systems department information computer science university california irvine irvine ca mail ics uci edu cs ucsd edu cecs technical report november traditionally dynamic voltage scaling techniques designed minimize dynamic power consumption dominant factor 
technology scales leakage current contributing significant energy consumption 
propose task scheduling techniques take leakage account minimize total energy consumption 
compute operating point called critical speed minimizes dynamic leakage energy consumption unit 
leakage energy dominates operating speeds lower critical speed energy efficient execute faster shutdown system 
due time energy cost associated shutdown longer shutdown intervals better 
address issue scheduling procrastination scheme delays task execution extend sleep intervals 
simulation experiments show average energy gains leakage oblivious dynamic voltage scaling procrastination scheme increases gains 
scheduling scheme extends sleep intervals times meeting timing requirements 
contents power model critical speed real time scheduling background 




algorithm 
experiments 

proofs list figures power consumption technology crusoe processor leakage power pac dynamic power pon intrinsic power consumption state energy cycle technology crusoe processor eac switching energy edc leakage energy eon intrinsic energy keep processor 

dvs 
comparison idle energy cs dvs normalized cs dvs 
comparison average sleep idle interval cs dvs normalized cs dvs 
list tables technology constants 
power management primary importance operation embedded systems attributed longer battery life reliability packaging costs 
power consumption device broadly classified dynamic power consumption arises due switching energy static power consumption logic operations performed 
cmos emerged dominant technology low static power consumption 
cmos device scaling trends driven need faster devices higher transistor densities show decrease device dimensions technology generation 
constant electric field scaling allows proportional reduction supply voltage 
supply voltage reduced threshold voltage vth proportionately reduced maintain desired performance delay improvements 
reduction threshold voltage results exponential increase subthreshold leakage current leading larger standby current 
leakage current cmos circuits contribute significant portion total power consumption increasing concern 
subthreshold leakage current nm projected nm technology 
fold increase leakage power predicted technology generation 
static power consumption comparable dynamic power dissipation projected surpass measures taken minimize leakage current 
furthermore leakage adverse effect increase temperature 
address issue efforts process circuit design micro architecture level minimize leakage power 
exponentially dependence subthreshold leakage current threshold voltage led threshold voltage scaling 
scaling threshold voltage controlling body bias voltage proposed minimize leakage 
multi threshold cmos popular technique reduce standby current 
techniques input vector control power supply gating proposed 
higher levels abstraction works focused minimizing leakage components cache 
techniques cache decay turning cache lines reduce shown effective results reducing cache leakage 
clock gating techniques control leakage systems chip soc 
ibm powerpc lp implements clock gating ip core register level 
intel family processors support fine granularity clock gating exploit fact system transistors time 
chip aggressively shuts elements processor idle gating disabling input 
processors support various shutdown mode save power 
examples transmeta crusoe processor support various sleep modes normal quick start deep sleep various types workload 
power states may reduce operating power processor systems states require little cpu activity 
dynamic voltage scaling dvs performance requirements reduces power consumption lead significant energy gains techniques optimize total static dynamic power consumption proposed 
note energy savings dvs come cost increased execution time 
implies devices longer time duration result greater leakage energy consumption 
steep increase leakage current generation obvious perform dvs execute system maximum speed shutdown 
note slowdown resulting frequency scaling decreases dynamic energy increases leakage energy 
important select correct operation point minimize total energy 
judiciously balance extent slowdown shutdown minimize total energy consumption 
shown operating maximum minimum possible voltage frequency need optimal point 
furthermore additional time energy cost shutdown problem harder 
irani consider combined problem dvs shutdown propose competitive line algorithm 
introduce concept critical speed minimizes energy unit workload 
theoretical result assumption continuous voltage range convex power consumption function 
lee propose leakage control edf lc edf scheduling algorithm minimize leakage energy consumption real time systems 
propose delaying task executions extend idle intervals 
algorithm assumption tasks executed maximum speed processor shutdown 
may energy efficient execute maximum speed 
enhance combining dynamic voltage scaling shutdown minimize total energy consumption 
contributions follows firstly leakage characteristics technology compute critical speed system 
furthermore assigned speed leaves idle intervals compute time interval task executions delayed extend length idle periods opportunity shutdown processor 
differs compute delays slowdown tasks 
algorithm simple implement low run time overhead compared lc edf 
furthermore minimum idle period guaranteed algorithm greater equal lc edf 
rest organized follows section discusses leakage power model computation critical speed minimize energy consumption 
section procrastination algorithm edf scheduling 
experimental results section 
section concludes directions 
section describe power model compute static dynamic components power consumption cmos circuits 
dynamic power consumption pac cmos circuits pac dd vdd supply voltage operating frequency effective switching capacitance 
dynamic voltage scaling reduces dynamic power consumption due quadratic dependence voltage 
different leakage sources contribute total leakage device 
major contributors leakage subthreshold leakage reverse bias junction current increase significantly adaptive body biasing 
power model technology parameters described martin 
threshold voltage vth subthreshold current cycle time function supply voltage vdd body bias voltage vth technology constants 
vth vth vdd vdd table 
technology constants const value const value const value vth vdd ld lg constant fitting parameters 
vdd vth leakage power dissipation due subthreshold leakage reverse bias junction current leakage device total leakage power consumption lg number devices circuit 
technology constants technology tables 
value transmeta crusoe processor scaled technology technology scaling trends table 
reduce leakage substantially 
static dynamic power consumption supply voltage varied range 
critical speed inherent cost keeping processor taken consideration computing optimal operating speed 
addition gate level leakage certain processor components consume power processor idle 
major contributors pll circuitry drives ma current 
power supply vio higher voltage supply processor core peak currents ma current comparatively lower power consumption adds significant portion idle power consumption 
intrinsic power cost keeping system referred pon 
power consumption components scale technology architectural improvement assume conservative value pon 
total power consumption processor pac pon pac dynamic static power consumptions 
variation power consumption supply voltage shown 
seen total power consumption power ac dc 
power consumption technology crusoe processor leakage power pac dynamic power pon intrinsic power consumption state decreases vdd scaled 
linear dependence static power consumption voltage quadratic dependence dynamic power voltage seen 
evaluate effectiveness dynamic voltage scaling compute energy consumption cycle different supply voltage values 
due decrease operating frequency voltage leakage adversely effect total energy consumption voltage scaling 
compute energy cycle decide aggressiveness voltage scaling 
contribution dynamic energy cycle dd eac dd leakage power device equation 
cycle time increases voltage decreases leakage energy cycle edc lg delay cycle 
energy keep system increases lower frequencies eon pon 
total energy consumption cycle varying supply voltage levels shown eac edc eon energy cycle ac dc total 
energy cycle technology crusoe processor eac switching energy edc dd leakage energy eon intrinsic energy keep processor 
define critical speed operating point minimizes energy consumption cycle 
compute minimum energy function evaluating gradient energy function respect vdd 
shows energy characteristics technology 
seen critical point vdd 
voltage frequency relation described equation vdd corresponds frequency ghz 
maximum frequency vdd ghz resulting critical slowdown crit 
seen energy efficient scale voltage vdd 
executing critical speed shutting system energy efficient executing voltages lower 
real time scheduling section enhance real time scheduling techniques knowledge critical speed crit minimize total energy consumption system 
background classical real time system model tasks arrive periodically deadlines 
task set periodic real time tasks represented ng 
tuple di cig represent task period task di relative deadline di ti worst case execution time wcet task maximum speed 
tasks scheduled single processor system preemptive scheduling policy 
assume task deadlines equal period di ti tasks scheduled earliest deadline edf scheduling policy 
tasks assumed independent preemptive 
dynamic voltage scaling dvs proposed minimize dynamic power consumption real time systems 
task slowdown factor extent slowdown applied meeting specified performance requirements 
task slowdown factor viewed normalized operating frequency lies range 
edf scheduling slowdown equal task utilization optimal slowdown minimize dynamic energy consumption 
dvs critical speed task slowdown computed known dynamic voltage scaling algorithm 
assume system utilization assigned slowdown task 
executing critical speed consumes time energy set minimum value slowdown factor critical speed crit 
update task slowdown factor critical speed smaller algorithm follows crit crit increasing slowdown factors feasible task set feasibility task set maintained 
shutdown overhead previous overhead processor shutdown wakeup neglected considered actual time energy consumption incurred processor 
processor shutdown wakeup higher overhead 
intel processor family switched deepest sleep mode loses registers cache contents 
registers saved main memory dirty data cache lines flushed main memory shutdown 
memory access results additional energy overhead 
waking sleep state incurs considerable overhead 
inherent energy delay cost wakeup specified 
addition components data instruction caches data instruction translation look aside buffers tlbs branch target buffers initialized resulting cold start misses case caches tlbs branch mispredictions case 
result additional energy cost 
cost vary depending nature application processor architecture 
procrastination algorithm due cost shutdown decision shutdown 
unforeseen shutdown result extra energy missing task deadlines 
idle power consumption compute minimum idle period referred idle threshold interval break wakeup energy overhead 
power consumption idle state addition power consumption shutdown state 
time energy overhead incurred due shutdown overhead shutdown wakeup energy efficient shutdown idle interval greater 
longer idle interval increase changes shutdown saving energy 
procrastination scheme achieve goal 
computing procrastination interval give edf feasibility condition task slowdown 
independent periodic tasks task set feasible slowdown factor task ci ti compute procrastination interval task maintaining feasibility 
procrastination interval zi time interval delayed guaranteeing task deadlines 
computation zi lemma 
detailed explanation results 
lemma tasks ordered non decreasing order period procrastination task zi time units guarantees deadlines tasks algorithm zi ck ti tk zk zi assumed power manager handles task procrastination implemented fpga 
processor enters sleep state handles control power manager fpga controller handles interrupts task arrivals processor sleep state 
controller timer keep track time wake processor specified time period 
procrastination algorithm shown 
processor sleep state task arrives timer set zi 
timer counts clock cycle 
task arrives counter expires counter adjusted new task arrival 
task arrives timer updated minimum current timer value ensures task system lets processor sleep state zk time units arrival 
counter counts zero expires processor woken scheduler schedules highest priority task system 
tasks scheduled assigned slowdown factor 
arrival new job ji processor sleep state timer active timer zi initialize timer timer min timer zi endif endif expiration timer timer wakeup processor scheduler schedules highest priority task deactivate timer timer operation timer counts clock cycle 
procrastination algorithm theorem tasks ordered non decreasing order period procrastination algorithm guarantees task deadlines procrastination interval zi task satisfies zi ck ti tk zk zi compute minimum idle period guaranteed procrastination algorithm 
idle period helps better shutdown decisions 
lemma minimum idle period guaranteed procrastination algorithm zmin min ck zi ti tk compare algorithm lc edf 
lc edf algorithm assumes tasks execute maximum speed prove proposed algorithm guarantees procrastination lc edf tasks executed maximum speed 
lemma tasks executed maximum speed minimum delay interval guaranteed procrastination algorithm greater equal guaranteed lc edf 
experiments implemented different scheduling techniques discrete event simulator 
evaluate effectiveness scheduling techniques consider task sets containing randomly generated tasks 
note randomly generated tasks common validation methodology previous works 
real life task sets tasks assigned random period wcet range ms ms ms ms respectively 
tasks assumed execute wcet 
processor power model described section 
critical speed processor crit 
compared energy consumption techniques dvs dvs tasks executed maximum processor speed 
traditional dynamic voltage scaling dvs tasks assigned minimum possible slowdown factor 
critical speed dvs cs dvs tasks assigned slowdown greater equal processor critical speed 
critical speed dvs procrastination cs dvs cs dvs procrastination scheduling scheme 
assume processor supports discrete voltage levels steps range 
voltage levels correspond discrete slowdown factors computed slowdown factor mapped smallest discrete level greater equal 
scheduling schemes cs dvs processor wakes arrival task system 
idle interval techniques assumed time period task arrival system 
cs dvs adds minimum guaranteed procrastination interval estimate minimum idle interval 
processor shutdown idle period greater minimum idle period result energy gains 
shutdown overhead embedded processor dissipates negligible power sleep mode idle mode dissipates mw power 
discussed section cache results additional energy overhead 
intel family processors typically cache sizes kb 
assume lines data cache dirty shutdown results memory writes 
energy cost nj memory write cost flushing data cache computed 
assume energy latency saving registers negligible 
wakeup additional cost due cache note context switch occurs task resumes execution cache penalty 
shutdown additional cost regular context switch due fact structures empty 
assume additional misses rate instruction data cache 
tlbs consider overhead negligible 
total overhead bringing processor active mode cache misses 
cost nj memory access results overhead 
adding cache energy overhead actual charging circuit logic assume total cost idle power consumption mw threshold idle interval ms 
assume sleep state power account power consumption sleep state fpga controller 
energy consumption compare energy consumption techniques discussed section results shown 
dvs consumes maximum energy energy consumption techniques normalized dvs 
seen techniques perform identical critical speed 
task slowdown factors fall critical speed dvs technique starts consuming energy due dominance leakage 
lower speeds energy consumed dvs approaches close dvs 
cs dvs technique executes critical speed shuts system minimize energy 
idle intervals sufficient shutdown consume energy dvs technique seen utilization 
cs dvs leads energy gains dvs gains dvs 
cs dvs minimizes idle energy stretching sleep intervals possible minimize shutdown overhead 
seen cs dvs results additional gains cs dvs 
compares cs dvs cs dvs 
shows number idle energy comparison cs dvs normalized cs dvs 
note slowdown factors mapped discrete voltage frequency levels idle intervals higher utilization 
idle period dynamic reclamation energy gains 
idle intervals shutdown processor compare benefits procrastination scheme 
higher normalized energy dvs dvs cs dvs cs dvs energy consumption normalized dvs processor utilization maximum speed 
energy consumption normalized dvs utilization inherent idle intervals short chance shutdown 
due procrastination idle periods extended resulting energy savings shutdown 
seen number higher higher utilizations results reduced idle energy consumption 
lower utilization relative number wake ups compared cs dvs decrease considerably 
note idle energy consumption cs dvs lower cs dvs 
number wakeup reduced percent reducing shutdown overhead 
seen idle energy consumption reduces proportionately 
compares relative increase sleep time intervals cs dvs cs dvs 
seen average sleep interval increased times 
extended sleep interval beneficial allows shutdown peripheral devices idle 
devices memory time overhead ms wake deep sleep states 
increases opportunity shutdown devices minimize total system energy 
compares average idle interval intervals task executing idle sleep state 
seen average idle interval increases times 
suggests cs dvs relatively idle intervals shutdown processor resulting leakage energy consumption 
cs dvs clusters task executions increasing opportunity shutdown reduce leakage 
means power manager fewer decisions shutdown 
normalized idle energy idle energy comparison gains cs dvs normalized cs dvs processor utilization maximum speed 
comparison idle energy cs dvs normalized cs dvs scheduling techniques consider leakage energy contribution minimize total energy consumption system 
show executing maximum minimum processor speed need optimal operating point 
operating minimum speed increases leakage energy contribution show executing critical speed shutting processor energy efficient 
results energy gains 
furthermore extending sleep intervals procrastination scheme increases gains energy gains 
compared naive wakeup scheme procrastination reduces number fourth stretching sleep intervals times 
extended idle periods results energy efficient operation system meeting timing requirements 
techniques simple energy efficient easily implemented 
plan extend techniques scheduling system wide resources minimizing total energy consumption 
international technology roadmap semiconductors public net 
berkeley predictive technology models berkeley edu research html 
normalized time interval comparison gains cs dvs normalized cs dvs processor utilization maximum speed idle interval sleep interval 
comparison average sleep idle interval cs dvs normalized cs dvs melhem moss alvarez 
determining optimal processor speeds periodic real time tasks different power characteristics 
euromicro conference real time systems 
melhem moss alvarez 
dynamic aggressive scheduling techniques power aware real time systems 
real time systems symposium december 
borkar 
design challenges technology scaling 
ieee micro pages aug 
sohi 
static power model architects 
intl 
symposium microarchitecture pages 
chandrakasan 
design methodology fine grained leakage control 
international symposium low power electronics design pages 
carpenter 
low power soc ibm powerpc information appliance platform 
www research ibm com arl 
vijaykrishnan irwin 
tsai 
impact technology scaling packaging dynamic voltage scaling techniques 
th annual ieee international asic soc conference september 
kim martin mudge 
caches simple techniques reducing leakage power 
isca june 
hu martonosi 
caches decay reducing leakage energy exploitation cache generational behavior 
acm transactions computer systems may 
intel processor 
intel 
www intel com 
irani shukla gupta 
algorithms power savings 
proceedings th symposium discrete algorithms 
johnson roy 
models algorithms bounds leakage cmos circuits 
ieee transactions cad pages 
krishna lee 
voltage clock scaling adaptive scheduling techniques low power hard real time systems 
proceedings th ieee real time technology applications symposium washington may 
yan luo 
combined dynamic voltage scaling adaptive body biasing heterogeneous distributed real time embedded systems 
international conference computer aided design nov 
lee chang 
energy aware memory allocation heterogeneous non volatile memory systems 
islped pages 
lee reddy krishna 
scheduling techniques reducing leakage power hard real time systems 
conf 
real time systems 
liu 
real time systems 
prentice hall 
locke vogel 
building predictable avionics platform ada case study 
proceedings ieee real time systems symposium 
martin mudge 
combined dynamic voltage scaling adaptive body biasing lower power microprocessors dynamic workloads 
international conference computer aided design 
aoki yamada 
power supply highspeed digital circuit technology voltage cmos 
ieee journal solid state circuits pages 
roy 
optimal body bias selection leakage improvement process compensation different technology generations 
international symposium low power electronics design pages 
langendoen sips 
energy priority scheduling variable voltage processors 
proceedings international symposium low power electronics design pages 
quan hu 
minimum energy fixed priority scheduling variable voltage processors 
design automation test europe pages march 
shin choi sakurai 
power optimization real time embedded systems variable speed processors 
international conference computer aided design pages 
skipped blind review 
nov 
transmeta crusoe processor 
transmeta 
www transmeta com technology 
zhang parikh stan 
model subthreshold gate leakage architects 
tech report cs univ virginia dept computer science mar 
proofs say task system remains idle despite presence task ready queue 
total time units task instance referred procrastination interval 
theorem tasks ordered non decreasing order period procrastination algorithm guarantees task deadlines procrastination interval zi task satisfies zi ck ti tk zk zi proof suppose claim false task instance misses deadline 
time job misses deadline 
latest time pending jobs arrival times deadlines equal requests arrive system start time time defined 
af ig set jobs arrive earlier deadlines pending requests jobs times interval tasks execute interval letx number instances tasks interval bounded tk lbe job arrives time ifthe system executing lower priority job time preemption occurs jobs executed 
job executions processor sleep state 
procrastination algorithm time processor sleep state timer active timer value greater zl timer value set zl 
wakeup timer value arrival zl 
timer value decreased arrival task procrastination interval task bounded zl 
equation follows zk zi maximum procrastination interval job bounded zi time units 
task misses deadline time sum total execution time jobs procrastination interval zi exceeds length interval 
ti ti wehave zi tk ck zi ck tk jobs arrival time deadline interval zi ck ti tk contradicts equation 
tasks meet deadline procrastination algorithm 
lemma minimum idle period guaranteed procrastination algorithm zmin min ck zi ti tk proof note procrastination interval zmin task satisfies constraints lemma guarantees meeting task deadlines 
task exists procrastination intervals zi zmin satisfy lemma 
procrastination algorithm processor sleep state timer inactive arrival task sets timer value procrastination interval arrived task 
timer counts clock cycle processor woken timer expires 
task arrives smaller procrastination interval zl current timer value timer set zl 
consider time timer set expiration timer task task arrival set timer 
timer expires procrastination interval zi 
tasks procrastination interval greater equal zmin zi zmin 
minimum procrastination interval zmin 
lemma tasks executed maximum speed minimum delay interval guaranteed procrastination algorithm greater equal guaranteed lc edf 
proof minimum idle period lc edf algorithm lmin min ck li ti tk minimum idle period procrastination algorithm maximum speed zmin min ck zi ti tk show zi li follows zmin lmin 
ck zi ti tk ck cl ti tk tl cj li ti tj zi li follows minimum zi greater equal minimum li 
zmin lmin 
li 
