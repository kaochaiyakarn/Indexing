examination dsls concisely representing model traversals transformations jeff gray department computer information sciences university alabama birmingham birmingham gray cis uab edu key advantage domain specific language dsl leverage captured concise representation programmer intention 
reports different dsls developed different projects 
dsls assisted specification various modeling tool ontologies integration models tools 
project different dsl applied language assist aspect oriented modeling 
languages converted different code generators 
dsls concerned issues traversing model performing transformations 
provides quantitative data relative sizes intention expressed dsl generated code 
observations regarding nature benefits manner conciseness dsl best leveraged 

proceedings th hawaii international conference system sciences important step solving problem choose notation 
done carefully 
time spend choosing notation may time save avoiding hesitation confusion 
choosing notation carefully think sharply elements problem denoted 
choosing suitable notation may contribute essentially understanding problem 
domain specific language dsl programming language executable specification language offers appropriate notations abstractions expressive power focused usually restricted particular problem domain 
dsls assist creation programs concise equivalent program written traditional bor institute software integrated systems vanderbilt university nashville tn gabor vanderbilt edu programming language 
fact dsls called little languages 
upward shift abstraction leads boost productivity 
observed lines code written dsl generate lines code traditional programming language 
key advantage dsl perspicuous domain expert language 
dsl typically concise notations abstractions characterizing intention domain built generator synthesizes program written dsl 
key benefit approach known generative programming 
common characteristic dsls declarative nature languages 
dsl declarative domain semantics clearly defined declarations precise interpretation 
dsls offer benefits individuals possess detailed knowledge particular domain lack technical programming skills needed implement computerized solution 
cases dsl allows computationally na user describe problems natural terms concepts domain informality imprecision omission details 
dsl assist separating programmers lower level details making decisions specific data structures implementation 
dsl capture variability domain user allowed express constructs terms variability invariants domain appear primitives language 
dsl programmer uses idioms closer abstractions problem domain 
advantages tedious mundane parts writing program automated translation dsl traditional programming language 
repetitive code sequences generated automatically error prone manual paste method 
generation tedious ieee code advantages maintenance phase project lifecycle 
programs written dsl usually easier understand modify intention program closer domain 
solutions constructed quickly programmer easily focus key abstractions 
dsl hides underlying details solution space implemented traditional programming language 
describes advantages realized different dsls separate projects 
section tool integration project described 
project utilized dsl describe ontologies fault analysis modeling tools avionics vehicle health management domain 
language specify method transforming model tool format different tool 
dsls assisted isolating programmer underlying corba data structures service calls needed perform model integration 
section different project described 
effort focused idea bringing concept aspect oriented programming domain modeling 
project benefit achieved dsl specify navigation domain models performing transformations 
language shielded programmer details core xml document object model dom api calls 
contains section general observations 

tool integration proceedings th hawaii international conference system sciences ability specify modeling semantics new tools integrate set previously defined tools useful 
researchers independently develop similar tools perform specific function type analysis particular domain 
isolated effort defines different semantic model uses diverse persistent storage mechanisms database set comma separated files 
unfortunately poses problem comes important issue integration result inability provide seamless exchange model representations tools 
serious problem bioinformatics domains foster environments demanding rich toolsets support various forms analysis 
solution section describes dsls support integration set engineering tools 
tool integration framework tool integration framework provides architectural solution semantic integration problem 
approach integrated model server ims created distinct tool domain 
built ims instance single domain specific schema capable representing principal entities relations tools domain 
ims contains unique definitions tool integrated semantic translators describe mapping unique tool single tool domain schema note mappings described directions tool integrated schema integrated schema tool 
seen integrated schema provides semantic mapping similar concepts different tools 
technique new tool sense ims 
mm fde lru fr msg obs lru var unit 
semantic mapping tools integrated domain model common model interface cmi collection corba interfaces provides tools capability exchanging models server network connection 
cmi specified corba interface definition language idl 
defines data structures rules accessing ims 
seen new integrated tools created access ims directly cmi 
example tool java integrated model browser provides view contents ims standard web browser 
legacy tools developed knowledge ims models transformed tool adapter form sent cmi 
tool adapter convert data native storage format structure valid respect cmi 
process simple syntactic transformation tool adapters focused syntactic issues 
currently created different tool adapters permit integration tools domain avionics fault analysis 
native storage formats tools form access database excel spreadsheet comma separated file proprietary textual specification language microsoft com modeling tool 
ims persistently stores translated models database built top microsoft ieee repository 
underlying database sql server access 
subsection brief overview framework 
points explained 
details 
remainder section describes dsls represent concepts tool see section transformations performed conversion tool ims see section 
integrated tool meta model objects legacy tool tool adapter corba common model interface 
tool integration framework integrated model server ims model specification language proceedings th hawaii international conference system sciences legacy tool tool adapter integrated model browser naming service order term success equation reuse amount domain specific content second order term specific technology chosen represent content 
engineering design tools manipulate models 
model thought graph structure 
node graph represents entity model link represents relation entities 
links represent explicitly defined relations may denote implicit link result hierarchical containment 
models follow data model schema expressed form model specification file msf 
msf written declarative dsl captures data model various entities relationships tool 
example type dsl data structure representation 
specification illustrates simple example msf bottom corresponding representation uml 
step building domain specific integration solution create msf concepts domain set tools integrated domain schema 
domain schema sent generator produces code equivalent cmi representation 
code defines implements semantic translation ims integrated model database classes allow construction manipulation corba data structures compliant cmi definitions 
msf file specified tool participating integration 
msf files tools passed code generator translated corresponding representation wrapped cmi data structures 
msf representation tool domain entity entity component paradigm foo model top model part component components model component part entity entity part entity entity part component subcomponents rel rel rel entity entity 
entity entity 
relation rel entity src entity dst rel entity entity top model uml representation tool domain components subcomponents 
sample tool definition corresponding uml class diagram ieee paradigm model model attr string name part object objects part failure mode failure modes rel failure mode rel fm entity object attr string name attr string part number attr string user text attr string attr double failure rate entity failure mode attr string failure mode attr string local effects attr string effects attr string effects attr string failure detection method attr long mode severity code attr double failure mode ratio attr double failure effect probability attr double failure rate relation failure mode object owner failure mode failures proceedings th hawaii international conference system sciences 
msf reliability analysis subset generated example tool included integration effort shown 
left side specifies entities relationships subset commercially available reliability analysis tool uses access persistent storage 
shows portion generated code single line msf 
msf code generator build wrapper classes model object right side extensions cmi representation corba 
wrapper classes provide definition attributes relationships access methods needed retrieve attribute values cmi 
contention advantages writing pertinent characteristics tool msf having code generator produce details building scaffolding interact underlying cmi data structures corba write specification left side code right side 
int model get objects vector object res int count type metadata object vector iterator itr vector list obj parts itr list itr list itr itr type type res push back object itr count return count comparing msf generated code 
knowledge studies quantified actual productivity improvements offered dsls 
earliest studies demonstrated order magnitude difference 
detailed study topic discovered dsl specifying data structures led reduction programming time factor 
determined study number lines code needed represent specific intention reduced factor 
table lists measurements taken msf generated criteria lines code size code number bytes 
ratio differences sizes representations provided cell table 
representative samples come tools integrated initial effort 
examination comparisons shows significant improvement conciseness representation dsl msf 
ieee table 
comparison msf generated code advise gme proceedings th hawaii international conference system sciences lines code bytes code msf ratio msf ratio msf ratio msf ratio msf ratio msf ratio msf ratio msf ratio msf ratio msf ratio semantic translation specification language final stage process integrating new tool ims focused creation mapping strategy various tools specific ims domain schema 
developers perform task understanding tool semantics ims schema semantics 
translation process link entities relations tools corresponding modeling elements ims vice versa 
process creating semantic translators core tool integration technology 
difficult task creating semantic translator specification strategy traverse visit graph transform different graph 
assist process constructed generator dsl adaptive programming ap 
ap key focus separation behavior structure 
aid modularization concern visitor traversal strategies 
modularization prevents knowledge program class structure tangled code desirable property called structure traversal strategies viewed specification class graph require hardwiring class structure code 
example traversal visitor language supporting modularization described 
application idea ap applied tool integration problem transformation models 
approach differs traditional ap focus model representations tools programs written traditional languages 
semantic translator specification traversal actions performed traversed node separated 
separation concerns evident tool integration process ways separation structure models possible paths traversals 
see left side separation traversal sequences desired paths traversals 
see right side separation visitors transformation actions node 
see left side instance dsl shown demonstrates traversal visitor specifications appear translator 
dsl called traversal visitor language 
translation process begins top model follows traversal specifications 
visitor nodes specific action performed executes required transformation elided inside inline code denoted 
nodes contain entities component necessary respective visitor traverse contained entities see lower arrow 
steps model translation shown arrows 
remaining traversal visitor sequence follow similarly 
shown constructs permit multiple passes model structure 
code shown represents actual piece semantic translator converts model tool ims schema representing fault analysis tools 
code just traversal specifications included tool semantic translator case partial specification describes manner component traversed 
generated code corresponds traversal fragment 
things notice generated code 
obvious observation majority code concerned iterating collections 
fact large percentage code replicated template iteration vectors 
manual construction repetitive code ripe area introducing errors 
automatically generating code offer assurance translator correctly constructed 
second observation generated code code generator knows tool definitions contained msf file 
notice names gme component gme 
names represent classes generated msf file specific tool gme 
ieee visitor visitor component 
traverse proceedings th hawaii international conference system sciences entity 
entity 
rel 
traverse 
traversal visitor specifications model component ims component parent parent fmap discrepancies parent dmap monitors parent mmap parent subcomponents parent parent fmap mmap parent fmap dmap 
single traversal specification gme ims traversal traversal visitor top model components 
component 
entity entity subcomponents rel 
rel 
src dst 
void traversal traverse gme component self ims component parent vector gme lst self get lst vector gme iterator itr itr lst itr lst itr gme arg gme itr vis visit arg parent fmap vector gme discrepancy lst self get discrepancies lst vector gme discrepancy iterator itr itr lst itr lst itr gme discrepancy arg gme discrepancy itr vis visit arg parent dmap vector gme monitor lst self get monitors lst vector gme monitor iterator itr itr lst itr lst itr gme monitor arg gme monitor itr vis visit arg parent mmap vector gme fault report lst self get lst vector gme fault report iterator itr itr lst itr lst itr gme fault report arg gme fault report itr vis visit arg parent vector gme component lst self get subcomponents lst vector gme component iterator itr itr lst itr lst itr gme component arg gme component itr vis visit arg parent vector gme lst self get lst vector gme iterator itr itr lst itr lst itr gme arg gme itr vis visit arg parent fmap mmap vector gme lst self get lst vector gme iterator itr itr lst itr lst itr gme arg gme itr vis visit arg parent fmap dmap 
generated code gme ims traversal specification ieee comparing generated code 
comparison specification generated code table 
rows represent semantic translators import tool model ims 
exist semantic translators reverse direction ims back tools shown table similar ratios 
table 
comparison generated code advise ims ims ims ims gme ims proceedings th hawaii international conference system sciences lines code bytes code ratio ratio ratio ratio ratio 
aspect oriented domain modeling ratio ratio ratio ratio ratio separate tool integration research described previously section introduces dsl improve separation concerns visual modeling tools 
subsections provide brief overview aspect oriented domain modeling 
invite reader consult comprehensive details 
problem crosscutting modeling constraints core research area institute software integrated systems isis model integrated computing mic 
decade major focus mic domain specific modeling environments created metalevel specifications particular domain 
generic modeling environment gme case tool supports generation new modeling environments 
gme code generators interpreters domain specific visual languages synthesize applications models 
key application area mic real time embedded systems 
mic applied modeling analysis synthesis system 
domain models created gme embedded real time systems highly adaptive 
real time embedded systems advantageous model design space application 
fact mandatory self adaptive systems choose run time numerous alternatives 
approach modeling self adaptive embedded systems uses form ocl constraints help prune size design space exploration 
constraints stipulate design criteria limit design alternatives 
unfortunately constraints tangled model hierarchy 
constraints cut modular boundaries model 
crosscutting nature constraints difficult maintain reason effects purpose 
case global property processor assignment scattered nodes model 
creates difficulty change model details global requirement necessitate modification multiple nodes model 
require modeler visit hand modeling element gme 
time consuming task cases impossible view effect different constraints 
solution aspect oriented techniques new modularity technologies proposed improve separation concerns programming languages 
particular research aspect oriented programming aop promoted means separation concerns crosscut modularity implementation 
aop translator called weaver responsible code specified traditional programming language additional code specified aspect language weaving concerns 
uniting core research area powerful new techniques offered aop extending purview applicability developing constraints domain specific models 
domain specific created particular instantiation framework 
core component framework code generator translates high level descriptions strategies specified dsl source code 
call dsl embedded constraint language ecl 
ocl 
solution problem tangled constraints involves separation constraints modeling elements 
solution allows modular specifications constraints propagated model domain specific weaver purpose integrate constraints back model 
domain specific ieee proceedings th hawaii international conference system sciences rely specification aspects strategies carry duty 
specification aspects similar pointcuts aspectj specify constraints applied model 
strategies describe constraint applied context particular node model 
description specification aspects strategies allows modeler quantify properties model module separate model structure 
components models select id 
fragment strategy contains single statement strategy defined 
statement finds models match specific id calls strategy selected models 
amount code generated code generator far concise simple see 
code implementing strategy statement focused iterating collection selecting elements collection satisfy predicate 
code calls xml parser wrapper class retrieves set models 
mods models components mods new std vector nodetype vector nodetype iterator nodetype nodetype id id id bool push back vector nodetype iterator apply 
sample generated code generated ecl comparing ecl generated code similar previous tables section data table comparison conciseness offered dsls ecl 
subjects study subset strategies created support research aspect oriented domain modeling 
details strategy 
table 
comparison ecl generated code power distribution processor assignment eager lazy exhaustive state transition state generation 
observations lines code bytes code ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio ecl ratio pieces code problem disorientation acute 
people idea component code experience considerable mental stress result 
reasonable assume language raises level abstraction concise underlying representation mapped generation time 
simple analogy comparison high level programming language equivalent assembly object code resides closer execution space 
typically representation single executable statement programming language translates assembly instructions bytes object code 
true regarding constructs offered dsl equivalent mapping programming language 
dick gabriel observed quote stress result disorientation caused mismatch expression intention objective underlying implementation needed realize objective 
particularly evident respect maintenance evolution piece software 
example right side method method representations implementation details level abstraction lower counterparts expressed dsl 
maintenance code intuitively problematic 
languages introduced highlight specific type benefit result ieee proceedings th hawaii international conference system sciences dsl 
advantages discussed sections 
generation data structures higherlevel specifications examples msf shown figures draw attention succinct expression pertinent characteristics modeling tool 
corresponding translation programming language contains details complicate expressibility 
hiding details user msf focus attention essential elements need specified 
minutiae moving execution implementation space concealed abstracted away msf 
observations working msf lead advantages generating data structures specifications written dsl 
finding confirmed 
code generator dsl contain detailed knowledge needed create intricate wrappers complex set inter related data structures cmi underlying corba interfaces 
synthesis iterative representations programming tasks repetitive nature 
pattern emerges technique implementing commonly occurring situation 
example seen code common form iteration performed different collections 
tedious nature repetitive duplication code source introducing programming errors 
respect iterating collections benefit ability concisely specify intention generator create solution 
visitor actions specified consist inlined code 
inlined code directly copied translator generated file 
conciseness improved ability specify higher level abstraction functional changes needed transformation 
addition possible offer benefit evident table 
area investigation 
considering table observation regarding state generation strategy 
translation yielded lowest ratio comparison 
strategy contains amount ecl collection statements suggesting somewhat obvious fact code needed iterate collection increases amount generated code 
wrapping api calls programmer written application frequent xml dom testify pleasant experience 
true library offers rich complicated set apis 
takes concentrated discipline follow strict sequence api calls needed accomplish specific task 
force programmer spend time tangled implementation details 
adapter methods shield ecl programmer concerns calling dom retrieve values 
ecl generator able wrapper methods order permit statements 
true example 
corba method calls collected adapters facades 

recognize strong undeniable influence language exerts ways thinking fact delimits space formulate give form thoughts 
domain specific languages gain power raising intentionality programmer expression 
dsl argued programmer express objective concise manner language higher expressiveness typically offered traditional programming language 
asserted programs written dsls easier maintain modify 
described observations different dsls suggest upward shift abstraction permit concise specification intention 
contains observations suggest situations best benefit generative approach dsls isolating programmer details complicated data structures api calls 
attempt experience categorize essential characteristics dsl beneficial 
comparisons focused solely relative sizes lines code 
clear programmer write code similar produced dsl generator 
results suggest benefit dsls area research investigate usefulness dsls respect improving programmer productivity 
important question time saved development dsls 
believe initial studies suggest decreased development time result due reduced complexity expressing objective ieee problem space automatically translating solution space 
topic currently studying concerns visual dsls called domain specific visual languages 
particular ideas investigating respect notations visually describing semantic equivalent ecl gme 
plans explore equivalents tool integration dsls 
language processors dsls respective outputs tied visual studio projects way textual specification works 
tool integration dsls contain fragments inlined code suggesting textual solution 
sandeep ted beatrice richardson assistance portions 
reviewers numerous helpful suggestions 
research conducted isis partially supported boeing 
benefited support darpa information exploitation office darpa program composition embedded systems program 
early versions supported darpa mic project 
proceedings th hawaii international conference system sciences john aycock compiling little languages python proceedings th international python conference houston texas november pp 

david domain specific automatic programming ieee transactions software engineering november pp 

don batory jeff thomas marty reengineering complex application scalable data structure compiler acm sigsoft international symposium foundations software engineering fse new orleans louisiana december pp 

jon bentley programming pearls little languages communications acm august pp 

ted biggerstaff perspective generative reuse annals software engineering vol 
pp 

krzysztof czarnecki ulrich eisenecker generative programming methods tools applications addison wesley 
susan davidson christian overton peter buneman challenges integrating biological data sources journal computational biology vol 
pp 

richard gabriel column name software development science art engineering report july august 
jeff gray ted sandeep james handling crosscutting constraints domain specific modeling communications acm october pp 

jeffrey gray aspect oriented domain specific modeling generative approach framework ph dissertation department electrical engineering computer science vanderbilt university march 
robert herndon realizable benefits language prototyping language ieee transactions software engineering june pp 

bor jeff gray component generation technology semantic tool integration ieee aerospace conference big sky montana march 
gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin aspect oriented programming european conference object oriented programming ecoop lncs springer verlag jyv skyl finland june pp 

gregor kiczales eric hilsdale jim hugunin mik kersten jeffrey palm william griswold getting started aspectj communications acm october pp 

kos peter greg nordstrom jonathan bor composing domain specific design environments ieee computer november pp 

karl lieberherr adaptive object oriented software international thomson publishing 
karl lieberherr doug orleans johan aspect oriented programming adaptive methods communications acm october pp 

sandeep kos constraint guided self adaptation international workshop self adaptive software hungary may 
johan mitchell wand language specifying recursive traversals object structures object oriented programming systems languages applications oopsla denver colorado november pp 

george polya solve princeton university press 
www com adam andrew andrew farmer peter dawn perry william integration platform heterogeneous bioinformatics software components ibm systems journal vol 
pp 

notable design patterns domain specific languages journal systems software february pp 

arie van deursen paul klint little languages little maintenance acm sigplan workshop domain specific languages paris france january pp 

arie van deursen paul klint joost visser domain specific languages annotated bibliography acm sigplan notices june pp 

jos warmer kleppe object constraint language precise modeling uml addison wesley 
niklaus wirth design programming languages proceedings ifip congress pp 

ieee 
