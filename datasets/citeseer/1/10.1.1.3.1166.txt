simple efficient relational querying software structures dirk beyer andreas claus lewerentz software systems engineering research group brandenburg technical university cottbus germany db cl informatik tu cottbus de analyses software systems formalized relational queries example detection design patterns patterns problematic design code clones dead code differences built designed architecture 
describes concepts crocopat tool querying manipulating relations 
crocopat easy simple query manipulation language predicate calculus simple file format relations 
crocopat efficient internally represents relations binary decision diagrams data structure known compact representation large relations computer aided verification 
crocopat general manipulates graphs binary relations ary relations 

querying manipulating graphs relations applications reverse engineering importance detection design patterns understanding object oriented programs increasingly recognized 
tools developed pat tool antoniol extended spool fu purpose 
detection patterns problematic design helps assessing design quality programs step improvement design quality 
tools hy pattern lint rpa iapr goose grok detect structures cyclic dependencies irregular inheritance 
graph pattern matching applied extract scenarios models source code 
proceedings th working conference reverse engineering wcre ieee detection repeated subgraphs supports identification code clones inductive inference design patterns :10.1.1.23.4224
forward traversal call inheritance graphs detect dead code backward traversal applied change impact analysis 
software systems evolve built architecture diverges designed architecture 
detection inconsistencies built designed architecture transformation built designed architecture achieve consistency support comprehension modification software 
reverse engineering large software systems multiple views different abstraction levels generated 
combination views create new views lifting lowering relations program entities create views higher lower abstraction levels hiding parts view formalized operations relations 
general purpose tool querying manipulating relations reverse engineering provide simple expressive query manipulation language efficiency large relations 
addresses requirements 
section introduce variant predicate calculus manipulation ary relations 
sufficiently expressive specify graph patterns arbitrary size resolves problem identified main loss binary relational algebra fahmy holt cordy 
section propose data structure binary decision diagram bdd internal representation manipulation relations 
evaluate concepts implemented tool called crocopat applied tool detect design patterns design problems object oriented software systems 
section reports results evaluation 
section compares approach related 

querying manipulating relations querying manipulating relations requires database relations query manipulation language data structures algorithms manipulation relations 
subsections section describe choices parameters 

database relations lightweight calculator relations facilitate data exchange tools require installation programs database management systems 
reading writing relations plain text files rigi standard format rsf section fulfills requirements 
originally rsf file represents binary relations 
sequence triples triple line 
element triple gives name relation variable second third element give related entities 
example rsf file assigns value relation variable call value relation variable inherit call call inherit rsf easily generalized binary relations ary relations allowing triples arbitrary tuples line 
relation tuples number elements 
example file allowed rel rel 
query manipulation language order predicate calculus known reasonably simple precise powerful language 
contrast languages calculators binary relations grok rpa relview sufficiently expressive specify graph patterns arbitrary size 
predicate calculus augmented statements output relations suitable basis language manipulating querying relations reverse engineering 
language purely declarative decided give user option control order calculations 
example user explicitly store reuse frequently needed intermediate result avoid repeated calculation structure program 
user required implementation avoids repeated calculations automatically cases caches 
proceedings th working conference reverse engineering wcre ieee programs language sequences statements 
syntactic elements italicized 
kinds statements assignment statements output statements 
statements input relations unnecessary input rsf files specified command line parameters automatically loaded execution program 
context free syntax assignment statements assignment statements form atomic expression expression 
syntax expressions conforms order predicate calculus major exceptions terms variables constants functions 
special operator transitive closure 
built binary relation 
grammar specifies context free syntax expressions including atomic expressions expression expression true false atomic expression term term expression expression expression expression expression expression expression ex variable expression fa variable expression tc expression variable variable atomic expression relation variable term list term list term term list term term constant variable variables relation variables strings letters digits underscore starting letter underscore 
constants strings arbitrary characters excluding double quotes 
semantics context conditions assignment statements syntax semantics expressions language conforms semantics expressions predicate calculus 
reader able understand example programs section write simple programs explicit knowledge technical details described subsection 
definition proceeds bottom variables assignment statements kept concise wellknown semantics predicate calculus 
domain variables set tuple elements input database tuple elements give names relation variables program 
call set example input database call call additional constants appear program 
scope variable limited statement name considered different appear different statements 
relation variable number elements input rsf tuples element number terms atomic expressions equal determine arity 
domain relation variable set relations arity 
input database domain relation variable call set binary relations call expressions form call term term 
semantics atomic expressions predicate calculus 
symbols ex fa mean negation conjunction disjunction implication existential quantification universal quantification respectively 
binary relation predefined 
preferred familiar notation term term consistent term term 
define context conditions transitive closure operator tc need notion free variable 
variable free expression occurs outside scope quantifier variable 
semantics tc defined variables free expression variables free 
contains exactly free variables binary relation 
expression tc represents transitive closure binary relation 
assignment statement fulfill context conditions 
firstly relation variables occur right hand side defined input database left hand side earlier assignment statement 
secondly set variables term list left hand side equal set free variables right hand side 
relations sides arity 
semantics assignment statement term list expression relation assigned relation variable expression assignment equivalent expression assignment 
proceedings th working conference reverse engineering wcre ieee output statements output statements output statement print text save atomic expression print statement prints text standard output 
save statement writes relation atomic expression rsf file name specified command line parameter 
right hand sides assignment statements variable atomic expression defined input database left hand side assignment statement appears save statement 

representation relations binary decision diagrams important problem querying graphs relations efficiency 
related problems polynomialtime algorithm known 
example decision subgraph graph isomorphic graph np complete 
time memory problem set elements ary relations elements 
experience computer aided verification shows data structure binary decision diagram bdd represent huge relations efficiently 
bdds associated set manipulation algorithms introduced bryant 
worst case time required bdd operations bounded polynomials sizes operand bdds 
bdds small manipulation efficient represent huge relations 
shortly introduce bdds give example represent large relations efficiently 
detailed bdds see 
bdd rooted directed acyclic graph 
decision nodes terminal nodes called terminal terminal 
decision node labeled boolean variable children called low child high child 
ordered bdds means variables occur order path root terminal node 
bdd maximally reduced respect rules merge isomorphic subgraphs eliminate node children isomorphic 
bdd represents relation bit vectors 
relations sets easily transformed relations binary encoding 
bit vectors represented bdd correspond paths root node terminal 
vector element corresponds node value path descends low child value path descends high child 
example consider program classes calls calls calls 
formalized binary relation represent relation bdd transformed relation 
encoding results bdd representation relation shown left part 
edges low children represented dotted lines edges terminal omitted avoid clutter 
bit vectors relation correspond paths root node terminal bdd 
example bit vector corresponds leftmost path dotted line dotted line dotted line solid line terminal 
extension example shows bdds stay small large relations 
consider chains calls tuples classes 
tuples tuples general tuples odd size relation grows exponentially 
bdd representation grows linearly 
see compare bdds 
left bdd represents relation right bdd increase added nodes labeled fact copies subgraph induced nodes labeled 
increase add copy subgraph nodes 
simple example illustrates general problem size intermediate results obtained searching graph patterns grows exponentially size pattern 
problem known joining tables relational databases 
bdds represent large relations efficiently 

evaluation previous section proposed language data structure querying manipulating relations 
argued benefits language sufficiently powerful express analyses software structures 
proceedings th working conference reverse engineering wcre ieee 
left bdd representation relation right bdd representation chains programs language reasonably easy understand write 
bdd representation relations scales analysis large software systems 
validate concepts empirically implemented tool crocopat tool analyze objectoriented software systems 
analysis program performance results crocopat compare corresponding data grok 
grok calculator binary relations applied reverse engineering problems see optimized handle large 

method evaluation language 
analyses performed experiments proven useful reverse engineering 
chose analyses reported yield useful results reverse engineering lit 
excluded analyses easy formulate software measures classes attributes concepts meant complement software measurement 
analysis compare programs crocopat grok 
evaluation efficiency 
scaling behavior bdd representation best illustrated contrasting performance data software systems different sizes including large systems 
chose known java systems awt java platform standard edition jdk awt complete java platform standard edition jdk eclipse 
table shows characteristics 
loc total number carriage returns source code rsf lines number tuples extracted rsf file 
system classes loc rsf lines jdk awt jdk eclipse table 
example systems performance evaluation tool sniff extract rsf files source code systems 
extracted call containment inheritance relations classes 
containment means class contains attribute type class 
inheritance includes extends implements relations 
example source code class class superclass class subclass extends superclass rsf file extracted inherit subclass superclass contain subclass analysis report computation times crocopat version grok version 
publicly available version grok include graph pattern matching described 
times grok analysis expressed grok language 
computation times seconds processor time linux pc ghz amd athlon processor mb memory 
crocopat restricted memory usage mb systems mb jdk eclipse 
grok report memory overflow mo uses mb 
proceedings th working conference reverse engineering wcre ieee 
experimental results design pattern 
argued knowledge design pattern instances helps understanding object oriented programs 
tools developed extended automatic detection design patterns instances pat tool antoniol analyzer spool fujaba 

composite design pattern shows class diagram composite design pattern 
identify possible instances pattern compute triples component class composite class leaf class composite leaf subclasses component composite contains component leaf contain component 
component composite leaf inherit composite component contain composite component inherit leaf component contain leaf component save component composite leaf 
composite crocopat program translation conditions crocopat program straightforward resulting program shown 
relations inherit contain loaded automatically rsf file specified command line parameter 
final statement saves tuples rsf file name specified command line parameter 
set composite pattern instances ternary relation natural way describe grok restricted binary relations 
table reports number detected composite pattern instances computation times crocopat 
system composites crocopat jdk awt jdk eclipse table 
composite results cycles 
understand undocumented class understand classes uses 
directly indirectly classes class understanding difficult 
tools applied detect cyclic structures hy pattern lint rpa iapr goose grok 
crocopat program detects cyclic uses classes uses include calls containment containing contained class inheritance subclass superclass 
statement relation computed union call containment inheritance relation 
second statement transitive closure relation computed yielding relation includes indirect uses 
classes related transitive closure participate cycle relation 
set classes assigned relation variable second statement written output rsf file third statement 
call contain inherit ex tc save 
classes cycles crocopat program shows corresponding grok program 
statement loads relations rsf file 
transitive closure dom computes domain set tuple elements relation id identity relation set ent set entities occurring input rsf file 
call contain inherit dom id ent 
classes cycles grok program table reports results applying programs example systems 
column cic shows classes participate cycles 
system cic grok crocopat jdk awt jdk eclipse mo table 
classes cycles results proceedings th working conference reverse engineering wcre ieee tedious human analyst find actual cycles list hundreds classes part cycle 
crocopat possible compute cycles fixed length 
program detects cycles order ascending length 
detection cycles length edges inheritance edges cyclic participate cycles deleted 
ensures computed cycles lengths greater just chains shorter cycles 
crocopat program simple long repetitive omit 
table reports numbers cycles lengths 
set cycles length ary relation computed binary relational algebra grok system crocopat jdk awt jdk eclipse table 
cycles fixed length results similar classes 
approaches code clone detection focus lexical syntactic level see overview 
algorithms complemented detection similar classes design level 
shows grok program detects pairs classes call classes contain instances classes inherit classes 
term ent ent compute complement relation composition operator inv swaps second element tuples relation 
shows corresponding crocopat program 
call ent ent inv call ent ent call inv call ent ent contain ent ent inv contain ent ent contain inv contain ent ent inherit ent ent inv inherit ent ent inherit inv inherit ent ent ident ident 
similar classes grok program 
ex call 
call ex 
call call 
ex contain 
contain ex 
contain contain 
ex inherit 
inherit ex 
inherit inherit ident save ident 
similar classes crocopat program feel programs unnecessarily difficult understand develop 
intuitively classes similar classes called class called second class classes called second called analogous conditions hold containment inheritance 
quantifier predicate calculus express conditions directly 
shows corresponding crocopat program 
fact program formalization similar classes developed programs figures composition operator quantifiers grok 
fa call call call call fa contain contain contain contain fa inherit inherit inherit inherit ident save ident 
similar classes crocopat program fa operator table reports number pairs similar classes number different classes pairs 
set classes similar pairs obtained postprocessing step 
preferred number similar classes number pairs similar classes large hard interpret classes pair wise similar number pairs degenerate inheritance 
class inherits class directly indirectly direct inheritance probably redundant misleading 
quality assessment framework see overview restructuring recommendations proceedings th working conference reverse engineering wcre ieee system sim 
cls 
grok crocopat jdk awt mo jdk mo eclipse mo table 
similar classes results avoid inheritance structures 
original assessment instance pattern indirectly 
structural analyses reveal exist instances 
degenerate inheritance structure consists classes second class direct superclasses third class class necessarily direct superclass second class 
shows straightforward crocopat program pattern 
natural way describe pattern grok restricted binary relations 
inherit inherit tc inherit save 
degenerate inheritance crocopat program table reports number detected pattern instances computation times crocopat 
system degenerate triples crocopat jdk awt jdk eclipse table 
degenerate inheritance results subclass knowledge 
superclasses know subclasses superclasses understandable reusable independently subclasses modifying subclasses affect superclass 
subclass knowledge special case cyclic usage structures discussed earlier detected tools pattern lint goose 
basic version pattern pair classes second class necessarily direct subclass class class possibly indirectly calls contains second class 
corresponding grok crocopat programs shown respectively 
table reports number detected instances subclass knowledge computation times grok crocopat 
know call contain inv inherit know 
subclass knowledge grok know super sub tc call super sub contain super sub super sub tc inherit sub super sub super save know super sub 
subclass knowledge crocopat system instances grok crocopat jdk awt jdk eclipse mo table 
subclass knowledge results 
discussion analyses naturally expressed grok crocopat results unary binary relations 
cases classes cycles subclass knowledge programs grok crocopat quite similar probably matter taste prefer 
compared grok crocopat quantifiers additional syntactic elements known predicate calculus add expressiveness 
conversely syntactic elements grok unnecessary crocopat inv dom ent 
case similar classes felt availability quantifiers crocopat development understanding program easier 
noted graph patterns nodes generally expressed binary relational algebra 
examples composite design pattern degenerate inheritance show patterns specified easily language crocopat 
concerning efficiency analyses crocopat required minutes time mb memory 
grok outperformed crocopat small problems crocopat scaled better large systems 
particular grok complete analysis eclipse required memory took time analyses jdk 
proceedings th working conference reverse engineering wcre ieee worth noting greater generality crocopat compared grok lead increased need resources 
compare performance relations arity greater 
indicated section expect full superiority bdds data structures shows relations 

comparison sql relational databases sql reverse engineering toolsets querying manipulating relations dali workbench 
subsection briefly compare performance database management system mysql crocopat computation transitive closures appear frequently structural analyses 
computed transitive closure relation union call contain inherit 
crocopat program simply closure tc transitive closure directly expressible sql developed sql script executed repeatedly fixed point reached 
improve performance mysql heap tables tables stored main memory hard disc int type table columns indexes appropriate 
computation times shown table 
systems mysql needs mb memory 
normal tables heap tables computation time explodes interrupted computations hour 
database management systems order magnitude faster performance satisfactory 
insert select closure insert select closure closure delete closure insert closure select distinct delete 
transitive closure sql system mysql crocopat jdk awt jdk mo eclipse mo table 
transitive closure results 
related sql known language querying manipulating relations 
lack transitive closure operator insufficient performance relational databases large graphs discussed section 
furthermore crocopat facilitates data exchange simple file format relations easier install maintain relational database management systems 
logic programming language prolog quite similar language crocopat 
prolog detect design patterns design problems tools pat pattern lint goose 
crocopat differs prolog interpreters tailored reverse engineering smaller language efficient algorithms optimized reduced language uses standard file format reverse engineering 
calculators binary relational algebra reverse engineering include grok rpa relview 
practically important queries expressed binary relations 
graph pattern nodes example tuple 
grok extended support graph pattern matching resulted complex language support operations ary relations 
program understanding toolset provides textual graph querying language 
approach differs crocopat respects focusses querying crocopat create modify relations 
focusses graphs binary relations crocopat ary relations 
requires specification graph class crocopat manipulate directed attributed graphs specification 
visual graph querying languages include graphlog tool hy annotated graphs iapr subset uml fujaba 
graph rewriting rule specification rapid prototyping language progres purely textual combination visual textual notation 
expressive complicated crocopat 
input output format relations crocopat uses tuple notation rigi standard format rsf section facilitates data exchange tools 
crocopat support xml graph exchange language gxl additional features gxl needed 
querying graphs relations related np hard problems subgraph isomorphism efficiency central problem 
binary decision diagrams successfully applied computer aided verification efficient representation manipulation huge relations see 
bdd calculator relations available reverse engineering ex proceedings th working conference reverse engineering wcre ieee ception relview limited binary relations potential bdds fully exploited 
experimental results section confirm excellent performance bdd implementation 

querying manipulating relations applications reverse engineering 
existing tools calculating relations powerful detect graph patterns nodes difficult integrate tools inefficient practically important operations 
proposed known language predicate calculus manipulation data structure bdd efficient internal representation ary relations 
implemented concepts tool crocopat evaluated tool structural analyses objectoriented software systems 
experiments confirmed language crocopat sufficiently expressive reasonably easy crocopat scales analysis large software systems 
crocopat integrated commercial software analysis visualization workbench 
relational databases users demanded crocopat efficient graph pattern matching 
rsf input output format integration easy inexpensive 
tool crocopat publicly available internet www software de crocopat 
antoniol 
design pattern recovery object oriented software 
proceedings th ieee international workshop program understanding iwpc pages 
meyer schneider 
relview system calculating relations relational programming 
astesiano editor proceedings st international conference fundamental approaches software engineering fase lncs pages berlin 
springer verlag 

user guide manual 
software tomography gmbh www software tomography com 
blostein sch rr 
computing graphs graph transformations 
software practice experience 
lewerentz simon 
external validation metrics quality assessment framework 
des workshops der gi software und pages 
deutscher universit 
bryant 
graph algorithms boolean function manipulation 
ieee transaction computers 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys 
burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation 
bailey 
evaluating clone detection tools maintenance 
proceedings nd ieee international workshop source code analysis manipulation scam pages 

chen gansner koutsofios 
data model supporting reachability analysis dead code detection 
ieee transactions software engineering 

automatic detection design problems object oriented reengineering 
proceedings technology object oriented languages systems tools pages 
clocksin mellish 
programming prolog 
springer verlag berlin rd edition 
ebert winter 
generic understanding programs 
electronic notes theoretical computer science 
fahmy holt 
software architecture transformations 
proceedings international conference software maintenance icsm pages 
fahmy holt cordy 
wins losses algebraic transformations software architectures 
proceedings th ieee international conference automated software engineering ase pages 
van 
relational approach support software architecture analysis 
software practice experience 
gamma helm johnson vlissides 
design patterns 
addison wesley reading ma 
garey johnson 
computers intractability guide theory np completeness freeman new york 

automatic design pattern detection 
proceedings th international workshop program comprehension iwpc pages 
holt 
structural manipulations software architecture tarski relational algebra 
proceedings th working conference reverse engineering wcre pages 
holt 
grok language 
plg uwaterloo ca holt papers grok intro html 
holt winter sch rr 
gxl standard exchange format 
proceedings th working conference reverse engineering wcre pages 
kazman 
assessing architectural complexity 
proceedings nd euromicro conference software maintenance reengineering pages 
proceedings th working conference reverse engineering wcre ieee kazman re 
view extraction view fusion architectural understanding 
proceedings th international conference software reuse pages 
keller pag 
reverse engineering design components 
proceedings st international conference software engineering icse pages 
acm 
kr mer prechelt 
design recovery automated search structural design patterns object oriented software 
proceedings rd working conference reverse engineering wcre pages 
krinke 
identifying similar code program dependence graphs 
proceedings th working conference reverse engineering wcre pages 
winter 
querying enabling technology software reengineering 
proceedings rd european conference software maintenance reengineering pages 
mendelzon 
reverse engineering visualizing querying 
software concepts tools 
mens wuyts 
declarative codifying software architectures virtual software classifications 
proceedings technology object oriented languages systems europe pages 
murphy notkin sullivan 
software reflexion models bridging gap design implementation 
ieee transactions software engineering 
sch fer welsh 
pattern design recovery 
proceedings th international conference software engineering icse pages 
sane campbell 
monitoring compliance software system high level design models 
proceedings th international conference software engineering icse pages 
melo basili 
inductive method discovering design patterns object oriented software systems 
technical report cs tr computer science department university maryland 

comprehending complex distributed object oriented software system report field 
proceedings th international workshop program understanding iwpc pages 
tonella antoniol 
object oriented design pattern inference 
proceedings international conference software maintenance icsm pages 
wind river systems sniff 
www com products sniff plus 
wong 
rigi user manual version 
ftp rigi csc uvic ca pub rigi doc 
wu hassan holt 
graph patterns extract scenarios 
proceedings th international workshop program comprehension iwpc pages 
