multi stage evolutionary algorithm timetable problem burke newall automated scheduling planning group department computer science university nottingham nottingham ng rd known timetabling problems particularly difficult solve especially dealing particularly large instances 
finding near optimal results prove extremely difficult advanced search methods evolutionary algorithms eas 
method decomposing larger problems smaller components size ea effectively handle 
show various experimental results method prove execution time considerably reduced method improve quality produced solutions 
timetable problem essence timetabling problem consists allocating number events finite number time slots periods necessary constraints satisfied 
general nature constraints varies different instances timetable problem problems share conditions individual entity person required attend events simultaneously 
period sufficient resources rooms service events scheduled period 
constraints fundamental timetabling problem generally form basis feasible timetable mentioned number constraints may introduced depending particular flavour timetable problem considered 
varying constraints odds 
instance scheduling university examinations considered undesirable conflicting exams adjacent periods 
alternatively scheduling university lectures preferred students lectures row 
putting aside differences experiments concentrating instance examination problem 
number possible side constraints problem difficult task carry aside producing feasible timetable minimise number conflicts adjacent periods order allow students time recover exams 
allocated large number periods case cause problems 
unfortunately limits time rooms mean finding feasible solution considerable task zero penalty solution exist 
timetable problem known general np complete welsh karp 
approaches applied timetable problem earliest methods utilise heuristics way 
example heuristic sequencing involves heuristic estimate difficult event schedule 
schedule events regard difficult events produce substantially better timetable merely random ordering 
useful addition process backtracking cart 
deals situations valid period available schedule event placements 
conflicting events chosen period order allow current event scheduled period 
unscheduled events placed back ordering scheduling 
addition heuristic methods number general search methods applied timetable problem 
approaches include simulated annealing thom tabu search variants genetic algorithms corn 
shown worth notable successful methods employ kind trick algorithm improve results timetable problems 
logically follows specialized timetabling algorithms may function substantially better general optimisation techniques 
interested reader information examination timetabling problem methods applied excellent surveys carter cart carter laporte cart go considerable depth 
information problem please see survey burke examination timetabling universities united kingdom 
memetic timetabling approach proposed timetabling problems memetic algorithms 
essence memetic algorithms evolutionary algorithms utilize local search extent 
concept originates dawkins describes meme idea concept passed society 
individuals adapt ideas suit environment opposed genes passed altered recipient 
way memes related genes dawkins memetic algorithms proposed alternative genetic algorithms moscato norman 
main motivation approach applying hill climbing operator genetic operators treat process search local optima entire search space 
applying local search operator clearly cause generation take considerably longer course justified sufficiently achieved generation local search 
memetic algorithm proposed uses combination mutation local search effectively search solution space 
mutation process consists separate operators light heavy mutation 
light mutation operator merely shuffles individual events valid periods purpose nudge solutions away local optima order find new solution 
heavy mutation operator hand functions targeting periods large amounts penalty arising 
algorithm randomly events periods produce new solution retains hopefully better characteristics original solution 
operators achieves substantial improvements solution quality followed application simple hill climber process effective 
problem definition technique tested instance examination timetabling problem 
point introduce notion hard soft constraints 
hard constraints considered essential satisfy terms producing practical timetable 
soft constraints hand regarded desirable satisfy essential 
problem exams scheduled periods examination seats available period non negative integers 
periods day 
exams may conflict number students enrolled exams 
scheduling exams encounter types conflicts order conflicts 
term describe situations conflicting exams scheduled period 
highly undesirable involves quarantining students exam may sit exam main sitting 
difficult situations tis regarded basic hard constraint 
second order conflicts hand important represent situations conflicting exams scheduled period scheduled periods near 
instance want students sit exams consecutive periods sit exams day 
totally satisfy constraints practical case treated soft constraints 
avoiding conflicts adhere limitations seating available period formally specify problem mathematically defining exam scheduled period number students exams period day period adjacent days 
weights day conflicts higher important satisfy 
number students exam take account fact feasible timetable necessarily possible need extra period th period place exams scheduled valid period 
constraints prevent scheduling period need heavily penalised 
need minimise eq subject eq eq eq 
eq sums occurrences students attend exams consecutive periods weights number unscheduled exams strongly discourage incomplete timetables 
consecutive periods day adjacent conflicts weighted 
single night conflicts weighted conflicts ignored example periods split weekend 
eq states event scheduled timetable 
eq specifies conflicting events scheduled period eq enforces condition total number seats required period greater number seats available 
problem formally follows minimise ip ij pq multi stage evolutionary algorithm timetable problem eq subject eq eq eq multi stage memetic algorithm basic framework memetic algorithms show promise timetabling problems time involved optimizing large problems say greater events longer find ideal 
preferable algorithm produce timetables matter minutes hours 
achieve sense original memetic algorithm apply subset total events time 
algorithm fix events timetable considering subset events trying schedule top scheduled previous stage 
process decomposition studied carter cart proposing heuristic method recursively splitting large problem smaller problems subproblem small solved conventional methods linear integer programming 
idea studied weare wear applied technique random data flexible length timetables 
results indicated number events considered time decreased time taken produce solutions decreases unfortunately quality solutions 
contributing factor lower quality flexible length timetable model preference shorter timetables 
may caused shorter timetables produced earlier phases expense second order conflicts final timetable may longer anyway 
purposes experiments fixed length timetable model avoid problems 
experiment modifications enhancements method 
shows set events split subsets scheduled different phases darker portions graph represent early process portion fixed timetable 
ip ij ip ij ip 
ip jp ij ip 
multi stage evolutionary algorithm timetable problem 
problem divided substantially reduce complexity problem course obvious pitfall fixing events periods fashion may impossible schedule events process 
fortunately number methods employ reduce chances happening 
firstly borrow idea heuristic sequencing methods choose subsets heuristic ordering 
help improve quality produced timetables optimising events cause problems 
secondly process look ahead process optimising subsets time fixing subsets stage 
inevitably lead process longer single set size considered process considering events twice justified leads substantial improvements quality 
illustrates earlier phase example approached look ahead set 

look ahead set having look ahead set help probably important heuristic chosen order events 
process concentrates scheduling difficult events earlier process reducing penalty caused events respect find fewer problems encountered process regardless look ahead set 
experiments heuristics generally accepted suitable exam timetabling problem cart set set set phase phase phase events period set set set phase phase multi stage evolutionary algorithm timetable problem largest degree 
choose schedule events greatest number conflicts events 
generally considered difficult 
colour degree 
similar largest degree schedule events greatest number conflicts events scheduled 
expect events conflicting events scheduled difficult place events large amount conflicts little events scheduled 
saturation degree 
schedule events fewer valid periods remaining timetable 
expect schedule events sooner may valid periods remaining schedule events 
formal definition problem define terms unambiguously 
degree exam defined eq gives cardinality set dot notation represents relationships 
degree exam constant need calculated run algorithm 
eq similarly exam defined eq 
degree colour degree exam changes time conflicting exams moved unscheduled list valid period 
eq saturation degree exam defined eq 
need recalculated time event moved period unscheduled list valid period 
eq degree 
ij 

jp ij 
jp ij jp multi stage evolutionary algorithm timetable problem multi stage process scheduling exams time described pseudocode point exit memetic algorithm presents choice 
normally memetic algorithm exit population fully converged inappropriate mutation driven memetic algorithm 
options run algorithm fixed number generations alternatively algorithm set number generations passed finding new best far solution 
experiments algorithm halted generations new best far solution 
generations may little low taken account generation typically achieves considerably consuming considerably cpu cycles typical genetic algorithm due hill climbing operator 
decomposition method independent particular technique solve subproblem memetic algorithm shown effective solving largest timetabling problems 
memetic timetabling algorithm memetic approach employs simple evolutionary model population solutions size experiments described 
algorithm applies mutation operators light heavy forms decided probability followed hill climbing operator produce population twice normal population size 
solutions selected set form new population generation 
previous experiments recombination operators algorithm proved experiments 
quality evaluation simple linear weighted penalty function assess quality fitness solutions 
function identical shown eq 
repeat unscheduled exam calculate desired degree exam pick exams largest degrees apply memetic algorithm schedule exams keeping previously scheduled exams fixed current position 
multi stage evolutionary algorithm timetable problem initial population generation initial population generated events random order scheduling valid period 
hill climbing operator applied member population 
light mutation mentioned section operator selects number events case random tries place alternative period picked random 
moves violate hard constraints allowed case period tried 
heavy mutation operator complicated operators algorithm describe detail 
targets periods appear causing large amounts penalty disruption 
disruption mean say events contained period temporarily unscheduled 
events disrupted periods randomly rescheduled timetable 
penalty period evaluation function defined eq 
eq constitutes large amount penalty clearly relative algorithm needs compare 
calculate average penalty period best solution population eq 
eq having calculated algorithm calculate probability disrupted period 
eq shows probability disrupted calculated bias definable value vary probability periods disrupted 
periods causing greater average penalty automatically disrupted 
eq case penalty arising particular period dependant events scheduled period algorithm special cases disrupting periods row 
instance say operator preserved period low number conflicts period sense disrupt period 
operator disrupt period 
summarised formally follows period timetable turn decide disrupted probability eq decision disrupt previous period disrupted disrupt period disrupt period penalty ip ij average fitness best number periods probability disrupt period penalty average penalty bias average penalty average multi stage evolutionary algorithm timetable problem disrupt disrupt period disrupt period limitation approach period disrupted previous period evaluate spread properties 
period immune changes light mutation operator hill climbing operator change substantially course evolution 
hill climbing operator simple efficient hill climbing operator applied mutation operator restore solutions local optima 
utilises delta evaluation ross avoid time consuming process performing full evaluation step 
equation gives fitness function delta evaluation function moving event period period defined eq 
eq actual process hill climber follows hill climbing routing occasionally check schedule events currently unscheduled main aim improve quality feasible solutions produce low quality feasible solutions infeasible solutions 
complicated local search procedure achieve inevitably increase total time spent algorithm 
selection selection achieved simple rank selection method candidate probability selected order quality 
process functions ordering candidate solutions order fitness 
fittest solution lowest penalty probability selected 
fails probability second fittest solution offered chance 
continues solution wins chance final solution reached 
probability case set 
ip ij ip ij ij iq ij repeat period random order event scheduled period schedule event valid period causing penalty includes original period try schedule unscheduled events improvement multi stage evolutionary algorithm timetable problem multi stage framework operation algorithm varies little proposed multi stage framework 
basically differences particular phase execution 
events fixed earlier phase moved operator memetic algorithm calculating conflicts seat usage 
algorithm ignores events added problem phase 

generating initial population particular phase set events phase added random order fixed events previous phases 
implementation matters information reimplementing approach equivalent performance achieved 
memetic algorithm conflict checking due number times conflicts exams need checked impractical obtain number conflicts time comparing lists enrolled students exams 
fortunately interested number students involved conflict actual students involved conflict need perform comparisons 
having calculated conflicts create conflict matrix matrix dimensions definition ij section th element matrix 
storing matrix algorithm enables rapid conflict checking eliminates number students factor complexity problem 
instance say students attend exams case th element matrix value 
data structures due hill climbing operator responsible large part operation memetic algorithm encoding solution timetables designed reduce time taken evaluate small steps 
illustrates link list style encoding 
period plus unscheduled list associated object solution knows event scheduled period 
similarly event associated object knows event scheduled period null pointer event 
representing timetable way easily move events period check conflicts facilitates rapid movement single events period making highly suitable hill climbing operator 
aside may need quickly establish period event scheduled 
event objects keep knowledge period associated event scheduled 
storing event objects ordered array quickly access information event 
altogether structure provides efficient manipulation stable memory usage 
multi stage decomposition method method implemented carefully find method produces results little faster traditional single phase approach 
authors main reason happen time taken perform evaluations delta evaluations stage algorithm 
instance consider problem events suppose decided multi stage evolutionary algorithm timetable problem schedule sets events look ahead 
consider third phase 
events fixed previous phase trying schedule events 
placing events consider events scheduled checking second order conflicts constraints 
similarly final phase consider events fixed 
algorithm majority execution time spent evaluating solutions portions solutions possible moves clear time taken phase increase substantially process ideally phase considers equal number events require equal amount time 
implementation experiments merged events fixed number virtual super events period timetable 
super events considered happen students events scheduled period far taken registered new single event 
forget initial events remove timetable letting new super events evaluation purposes 
obvious complexity advantages number events involved evaluations set size chosen plus number periods timetable regardless phase currently obvious exception phase need super 
encoding solution timetable period period period unscheduled event event event event event event event event event multi stage evolutionary algorithm timetable problem events 
due way records conflicts handled outlined section overhead checking conflicts super event single event 

merging fixed events improve performance illustrates timetable build phase phase approach 
actual process building super event basically case summing conflict matrices component events size event 
instance say wanted create new super event number events scheduled period event properties shown equation 
note super event period number real events 
eq treat combined super event having size equal sum component events process little complicated room allocation part problem 
unfortunately data sets testing university nottingham data includes information rooms 
case super event preserves room allocation component events altered 
results experimental data order evaluate effectiveness approach real enrollment data sets testing 
table lists data characteristics data set total number exams total number student exam 
density conflict matrix calculated average number exams exam conflicts divided total number exams 
example conflict density indicates exam conflicts half exams average 
data include data rooms available simple upper limit number seats available period 
problems range smaller densely conflicting problems fairly large relatively sparsely conflicting nott data set huge pur data set 
data sets obtained internet urls ftp ftp cs nott ac uk ttp data ftp utoronto ca previously fixed fixed events period period events phase phase period events phase merging 
multi stage evolutionary algorithm timetable problem problems typical timetable layout comprised periods day monday friday period saturday morning 
periods sunday 
layout repeated number periods problem reached 
primary task algorithm scheduling events number periods secondary task minimising number back back conflicts adjacent periods adjacent conflicts day penalised occurring overnight 
purposes solution evaluation quality function shown eq 
results method tested data sets subset sizes events look ahead set 
configurations tested heuristics times average result order provide reasonable statistically relevant result 
code institution number exams seats period number periods density conflict matrix carleton university ottawa king university nott nottingham university uk pur purdue university indiana table 
data testing multi stage evolutionary algorithm timetable problem data subset size look ahead penalty time results best unscheduled exams nd order day nd order overnight nott pur table 
results largest degree multi stage evolutionary algorithm timetable problem data subset size look ahead penalty time results best unscheduled exams nd order day nd order overnight nott pur table 
results colour degree multi stage evolutionary algorithm timetable problem tables show results achieved relevant heuristics 
value time column execution time cpu seconds dec alpha computer particular run 
number exams implies subset run incomplete final phase process run reduced subset size 
breakdown results best runs number unscheduled exams violations second order conflicts 
results shown graphically figures 
data subset size look ahead penalty time results best unscheduled exams nd order day nd order overnight nott pur table 
results saturation degree multi stage evolutionary algorithm timetable problem looking results largest degree shown table see quite mixed picture 
problem best result obtained subset size look ahead set tenth amount time execute larger subset sizes failing find feasible solutions 
similarly problem best result subset size look ahead set difference higher subset sizes quite great 
situation nott data quite different 
case larger subset sizes able consistently find quality timetables 
probably due high room utilisation nearly low density problem making bin packing problem graph colouring lessening effects 
results run look ahead set 
results run look ahead set 
results run look ahead set 
results run look ahead set time seconds colour degree largest degree saturation degree set set set set time seconds colour degree largest degree saturation degree set set set set time seconds penalty colour degree largest degree saturation degree set set set time seconds penalty colour degree largest degree saturation degree set set set multi stage evolutionary algorithm timetable problem tic 
considering results pur problem take account order conflicts unavoidable cart authors mean conflicting exams scheduled period 
situation practice involves quarantining student sit exam main sitting 
reduce amount infeasibility timetable find fully feasible timetables 
bearing mind clear larger subset size look ahead set finds best solution 
expected subset size larger huge number events course depend structure problem 

results run nott look ahead set 
results run nott look ahead set 
results run pur look ahead set 
results run pur look ahead set time seconds colour degree largest degree saturation degree set set set set time seconds colour degree largest degree saturation degree set set set set set time seconds penalty colour degree largest degree saturation degree set set set set set time seconds penalty colour degree largest degree saturation degree set set set set multi stage evolutionary algorithm timetable problem considering results colour degree see little difference individual results compared largest degree apart minor variations solution quality 
compare saturation degree discern notable improvement 
substantial variation problem see approach works completely differently nott data set employment saturation degree results algorithm consistently finding feasible solutions small subset sizes 
probable reason nott data set variable length exams periods resulting fewer available timeslots longer exams 
colour degree largest degree consider saturation degree 
problem subset sizes look ahead sets produce best quality solutions 
general trend pur problem remains roughly noticeable increase quality smaller subset sizes indicating saturation degree better heuristic problem 
results account saturation degree reliable heuristic method 
choices heuristic may suitable problems notable saturation degree outperforms heuristics nott problem constrained terms seats dense terms conflict matrix achieving equivalent performance densely conflicting problems 
terms subset size size appropriate smaller problems size larger problems 
cases look ahead set 
sizes suitable heuristic possible produce substantially better results fraction time memetic algorithm applied 
purposes comparison established method table shows results heuristic backtracking method similar described carter cart established implemented universities 
results represent lowest penalty data sets published algorithm 
heuristic saturation degree effective heuristic cart 
provides best comparison saturation degree certainly appears effective heuristic method 
method requires little run time large pur problem requiring longer minutes 
comparing results table results saturation degree see quite uniform reduction penalty roughly 
seen applying algorithm problem phases drastically reduce amount time taken find solution relative time taken apply algorithm entire problem considerably improve quality solution 
essence method hybrid heuristic sequencing evolutionary methods shown outperforms method 
hybrid improves components utilising knowledge problem order events expected difficulty single difficult event placing best available period take number difficult events apply ea find best placements respect events scheduled 
data penalty nott pur table 
results heuristic backtracking multi stage evolutionary algorithm timetable problem attempting determine best subset size method appears optimal size related number events problem may considerations 
instance saturation degree smaller problems best smaller subset size look ahead set larger nott data set produces roughly equivalent results sizes look ahead sets subset size look ahead set produces best results pur data set 
mentioned earlier expected optimal subset size pur data set higher due huge nature problem 
due evolutionary algorithm having upper limit amount data efficiently handle overcome larger population sizes inevitably lead higher run times low density conflict matrix 
trials look ahead set shows obvious benefits 
substantial extra time involved doing quite important subset sizes relatively small produce best results 
choice heuristic optimal subset size look ahead set possible difficult problems placements earlier process prevent events scheduled earlier periods 
prevent happening borrow idea heuristic sequencing methods allow backtracking operator applied phase events unscheduled 
operator allowed move events previously fixed order effective 
inevitably quality timetable lowered degree mean process chance finding feasible timetable method 
approach possibly adapted scheduling problems especially sort heuristic sequencing approach exists 
early carried automated scheduling planning group university nottingham employing similar approach power maintenance scheduling problems 
burke weare 
hybrid genetic algorithm highly constrained timetabling problems 
larry eshelman editor genetic algorithms proceedings th internation conference pages san francisco 
morgan kaufmann 
burke ford weare 
examination timetabling british universities survey 
edmund burke peter ross editors practice theory automated timetabling selected papers st international conference lecture notes computer science pages 
springer verlag berlin 
burke newall weare 
memetic algorithm university exam timetabling 
edmund burke peter ross editors practice theory automated timetabling selected papers st international conference lecture notes computer science pages 
springer verlag berlin 
burke newall 
investigating benefits utilising problem specific heuristics memetic timetabling algorithm 
working tr university nottingham uk dept computer science 
cart carter 
decomposition algorithm practical timetabling problems 
working industrial engineering university toronto april 
multi stage evolutionary algorithm timetable problem cart carter 
survey practical applications examination timetabling 
operations research 
cart carter laporte 
general examination scheduling system 
interfaces 
cart carter laporte lee 
examination timetabling algorithmic strategies applications 
working university toronto dept industrial engineering january 
appear journal operational research society 
cart carter laporte 
developments practical examination timetabling 
edmund burke peter ross editors practice theory automated timetabling selected papers st international conference lecture notes computer science pages 
springer verlag berlin 
corn corne ross fang 
fast practical evolutionary timetabling 
fogarty editor lecture notes computer science pages 
springer verlag berlin 
davis 
handbook genetic algorithms 
van nostrand reinhold 
dawkins 
selfish gene 
oxford university press 

construction examination timetables computer 
computer journal 
hertz 
tabu search large scale timetabling problems 
european journal operations research 
moscato norman 
memetic approach travelling salesman problem implementation computational ecology combinatorial optimisation message passing systems 
proceedings international conference parallel computing transputer applications 
ios press amsterdam 
ben paechter andrew cumming henri 
local search suggestion lists improving solution timetable problems evolutionary algorithms 
fogarty editor lecture notes computer science aisb workshop evolutionary computing pages 
springer verlag berlin 
ross peter ross dave corne hsiao lan fang 
improving evolutionary timetabling delta evaluation directed mutation 
davidor 
schwefel manner editors parallel problem solving nature volume iii 
springer verlag berlin 
thom thompson dowsland 
general cooling schedules simulated annealing timetabling system 
peter ross edmund burke editor practice theory automated timetabling selected papers st international conference lecture notes computer science pages 
springer verlag berlin 
wear weare 
automated examination timetabling 
phd dissertation university nottingham department computer science 
