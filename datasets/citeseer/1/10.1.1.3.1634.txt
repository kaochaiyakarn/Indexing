automatic generation hypertext system repositories model driven approach model driven methodology toolset automatic generation hypertext system repositories 
code generator called bamboo containment modeling framework uniformly describes data models hypertext systems 
employs lightweight modeling approach entities system abstractions containment relationships model hypertext system repositories 
description system repository data model specification mapping domain specific roles link version history entity definitions bamboo generate open hypertext repository matches specification 
benefits approach include shorter development cycle lower design implementation costs fewer design faults standard repository api extensibility adding new features 
validate approach automatically generating repositories accordance models existing hypertext systems 
demonstrate extensibility approach quickly building gui client top repository subsequently adding version control capabilities altering containment model regenerating system 
categories subject descriptors requirements specifications elicitation methods rapid prototyping database management logical design data models database management languages data description languages automatic programming program synthesis 
general terms design languages theory keywords containment modeling framework 
model driven development 
automatic code generation 
hypertext data models 
open hyperbase 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
hypertext august santa cruz california usa 
copyright acm 
james whitehead jr ge kai pan dept computer science engineering university california santa cruz cs ucsc edu 
software development process creating new hypertext systems expensive development commercial systems takes person years maintenance evolution add cost 
despite cost effort resulting hypertext systems usually problems difficult share resources systems underlying data models different expensive develop maintain new hypertext systems components patterns standardized reusable difficult change existing systems refactoring process problematic introducing new bugs inconsistencies 
previous proposed uniform modeling mechanism containment modeling framework describing content management system data models 
uses uniform set entities relationships attributes model hypertext system repositories 
framework successfully applied model existing hypertext content management software configuration management systems 
developed model driven methodology supporting toolset automatically generate hypertext system repositories 
major contributions developed model driven methodology toolset support rapid prototyping hypertext system repositories second approach effectively reduce cost extending hypertext systems 
implemented automatic generator called bamboo generate hypertext system repositories repository accessor apis 
bamboo uses template code generation 
recurring patterns hypertext system development encoded templates 
generator reduces monotonous repository layer programmers need build models repository layer leave tedious coding generator 
enables developers focus important development efforts domain logic user interface ui design 
currently provide support automatic generation domain logic ui code system domain specific requirements 
avoid error prone manual refactoring process 
generator supports easy way code refactoring adds new features systems developed 
users just need change model regenerate repositories minimum modification client code 
experiment show addition version control capability reimplementation notecards 
rest structured follows section discusses related automatic code generation history existing tools frameworks section introduces containment modeling framework basic building blocks graphical textual notations hypertext system repositories modeled section describes details generator architecture code generation process general architecture generated system discussed 
section uses experiments demonstrate generator produce hypertext system repositories construction gui interface generated repository example model repository extension 
section concludes illustrates possible directions 

background related automatic code generation code synthesis trace history back invention compilers 
fortran compiler called automatic programming system compiler 
advantages shorter development cycle low implementation cost fewer code faults automatic code generation quickly popular industry academia 
see various generators code synthesis user interface xml schema statistical analysis tools nasa 
development modeling code generation metamodeling frameworks produce domain specific generators particular domain knowledge 
examples include model driven architecture mda genvoca nasa meta 
meta generator frameworks provide basic modeling abstractions represent specific domain knowledge create domain models generators 
domain specific generators produce actual systems specifications 
automatic code generation component reuse play important part meta modeling frameworks 
bamboo generator meta generator framework domain specific modeling framework content management domain 
share philosophy design model automatic code generation component reuse 
believe model driven approach attempt automatically generate repository layer hypertext systems 
entities relationships web project employs extended er eer model specify database schemas automatically generates complex relational database systems gui web clients 
research ideas similar 
objective automatically generate relational databases managed web interface 
focus generate hypertext capable content management repository layer uniform modeling framework rapid prototyping hypertext systems 
modeling specification encode repository schema semantics operations data repository 
implementation bamboo repository layer independent storage type file system relational database object oriented database xml data store long implement standard accessor api 
modeling framework provides capability feature extension examples version control hypertext overlays 

containment modeling framework modeling framework constructing containment models specific content management domains hypertext systems 
containment model model definition repository schema particular system 
actual data stored repository instance containment model hypertext system 
containment models emphasize containment storage relationships entities content management system 
directed design principles simplicity neutrality basic modeling components entities relationships 
building blocks graphically textually describe compare hypertext system data models 
actual data repository consist entity instances relationship instances 
framework extended provide feature aspects feature overlay mechanism 
basic components entity relationship entities represent data abstractions hypertext system 
basic entity types atom container 
atoms lowest level abstraction 
divided atoms contain entities 
atoms represent file content attributes metadata items author modified date containers form containment structures consisting atoms containers 
structures hierarchical may topologies 
examples containers web pages text chunks images hyperlinks project folders contain sub project folders memos 
relationships represent connection entities express constraints containers refer containment relationship container 
types containment relationships referential inclusive 
referential containment means container physically stored different locations container stores pointer 
contrast inclusive containment indicates stored part container similar composition uml 
difference relationship types highlighted examining typical delete semantics container container deleted deleted inclusive containment referential containment removed remains unchanged 
relationships inherent modeling properties ordering multiplicity membership cardinality 
ordering property relationship identifies partial ordering relationship instances 
example suppose containment model defines inclusive relationship project folder meeting memos 
ordering property value true meeting memo instances partial ordering project folder instance contains 
ordering 
implementation ordering realized special index relationship instance 
multiplicity defines upper lower bound number occurrences entity instances ends relationship 
membership restricts number container instances particular type defined relationship instance belong cardinality restricts number instances particular type defined relationship container 
example project folder meeting memos set membership means meeting memo instance contained exactly project folder instances project folder instance official copy backup set cardinality project folder instance meeting memo instance memo instances 
special letter place means upper bound unlimited natural number 
discussion containment modeling framework please refer 
graphical representation xml representation graphical notation depicting entities relationships corresponding properties 
shows basic graphical notations describe containment model 
graphical notation provides visually straightforward way represent compare data models various hypertext systems 
helps hypertext system designers users quickly understand underlying data model mining thousands lines code hunting thick user manuals research papers 
previous graphical notation compare data models existing content management systems 
systems shows system data models going sections 
vary simple models kms entities moderately complex models chimera entities :10.1.1.54.8082
note relationships membership cardinality values defined default value 
entity type container type total entities relationships container name atomic object xor lower bound upper bound 
upper bound unlimited replace containment type ordering location membership cardinality 
graphical notations 
inclusive referential unordered ordered container anchor text nc nc name name frame name kms frame frame content annotation link anchor anchor description link name link node name nc content node node location link name group group nam node content nf nf name nc author notecards nc timestamp nc container link name nc nc type node composite nc name node container timestamp author value link anchor container author timestamp link name timestamp author link anchor link name anchor text chimera er db viewer anchor description viewer name view er object viewer app object containers hyperweb name view name hyper web hyperweb description view view description object name entity attribute obj ect ion 
containment model examples kms notecards chimera :10.1.1.54.8082
note relationships membership cardinality value default value 
chimera arbitrary attributes container entity short hand notation gray box 
containment modeling framework visual modeling language hypertext system data models 
repository layer details encoded uniform way provides ability automatically generate repositories hypertext systems 
research assumption repository layer code hypertext systems similar functions reading writing database file system querying particular entities hypertext systems achieve degree reuse building atop database technology find repetition opportunities code generation code maps hypertext system specific data model database 
manually implementing repositories similar existing systems scratch recurring patterns repository handling code 
hypothesis explore possible code generation implement recurring patterns find shortcut developing hypertext system repositories 
generated repository developer build complete system developing complex clients generated repository api extending repository extension mechanism repository 
containment model graphs serialize xml containment model representation 
basic textual model contains xml documents containment model definition scm xml repository data type definition xml 
gives examples files notecards containment model 
model definition file notecards scm xml describes entity relationship definition properties 
repository definition carries mapping information logical data types model definition physical data types physical repository store 
current implementation mysql relational database store instances entities relationships containment models physical data types mapped supported mysql 
xml version encoding utf model xmlns xsi www org xmlschema instance xsi dav cse ucsc edu bamboo xml sc xsd entities container name false inf type generic atom name nf id integer entities relationships relationship name unordered referential isordered false type referential relationship name unordered inclusive isordered false type inclusive relationships er model arc unordered inclusive link inf location container er model model notecards scm xml xml version encoding utf mapping xmlns xsi www org xmlschema instance xsi xml xsd value type integer int value type string varchar value type datetime datetime value type text text mapping notecards xml 
xml containment model specification notecards scm xml repository data type definition notecards xml notecards 
note parts omitted save space 
xml version encoding utf xmlns xsi www org xmlschema instance xsi xml hyper mapping xsd link link link hyper mapping xml 
hypertext mapping 
mapping file combines hypertext overlay versioning overlay add domain semantics top containment modeling files 
defines feature overlay extend core containment models 
extending basic containment model feature overlays basic containment models provide information repository domain specific knowledge hypertext systems expressed far 
example reading xml documents describing model definition data type definition know entity maps hypertext represents link acts anchor 
define container give name link support standard container operations add member delete member list members names entities just opaque strings semantics 
want add new features version control specification model definition identifying entities apply version control kind version control want entities versioned 
role defined semantically meaningful entity specific functions operations domain aspect 
example link role specific hypertext system domain associates hyperlink semantics link traversal operations container entity 
human beings read entity names graphical notation relate implicitly corresponding roles 
automatic generator knowledge role mapping information provide extra specifications 
extend basic containment model adding feature overlays carry domain specific role mapping information 
overlay relates semantics specific domain aspect hypertext version control workspace support distributed collaboration entity definition containment model specification 
give link container role hyperlink generator knows generate hypertext operations link traversal 
approach extending basic containment model overlays deliberately designed separate repository storage specific domain semantics 
gives example role mapping entities hypertext roles notecards containment model shown 
specifically states entity plays role entity plays role document link entity plays role hypertext link 
role mapping specification relates version control capabilities entities relationships applying 
abstraction choices tradeoffs inherent providing version control operations 
xml attribute set indicating desire rcs style version history :10.1.1.151.8450
additional detail provided section 
flexible overlay architecture separates different aspects content management system 
allows users customize system functionality integrating various overlays provides open architecture add new features changing existing basic repository model 

automatic repository generator software generator program translates domain specific language specification application source code 
generator program called bamboo takes input source code templates containment model description repository data type description hypertext mapping overlay applicable overlays version control overlay described section 
outputs generator source code files include repository schema definition initialization entity class definition api repository access simple command line shell client testing purposes 
remainder section describe bamboo generator architecture code generation process architecture generated repositories 
give experiments section show efficiency hypertext repository generation ease building actual hypertext systems top generated repositories extensibility adding new features overlays 
generator architecture bamboo generator consists major parts shown xml parser template file processor physical repository schema code creator initialization code modeled entity code generator 
xml parser analyzes input xml documents extracting entity relationship definition data type definition hypertext entity mapping overlay information 
currently apache xerces dom parser 
common practice automatic code generation prior execution bamboo prepared code templates contain model independent repository code special tags place holders model dependent code 
code templates generated systems template file processor parses template files generates actual source code inserting modeling information template files 
containment model data type description physical repository schema code creator produces code defines repository schema initializes physical repository 
current implementation mysql relational database open source experience relational database design optimization 
architecture extended include repository types file systems xml databases long support repository accessor api interface 
modeling entity code generator responsible generating entity classes correspond containment model entity relationship definition creates operations specific overlays link traversal hypertext systems show version history version control systems 
model description repository description hypertext mapping overlay xml files code template files ant build file template apache xerces xml dom parser code generator template file processor schema creator modeled entity generator 
generator architecture 
hypertext system repository source code ant build file generator inputs generate hypertext system repository bamboo needs inputs containment model description repository data type description template files hypertext mapping overlay 
described follows 
containment model description shown example required xml elements root element model entities relationships er model 
entities define possible entities hypertext system repository atoms containers 
entity attributes defined xml attributes atom container elements 
relationships select relationship types possible combinations containment type referential inclusive relationship ordering ordered unordered particular containment model 
er model specifies existing arcs entities xml attributes define multiplicity upper lower bounds 
repository data type description maps logical data types containment model physical repository data types 
example map logical string type physical varchar type mysql relational database 
information repository schemas built initialized generator knows map untyped entities typed data items repository 
template files specially tagged source code 
analysis manual implementation repository scm system called pie lines repository layer code dependent containment model specification 
means rest code remain static template files 
parts dependent model specifications substitute special generation tags code generator replace tags model dependent code generation time 
extension mechanism basic containment models bamboo take overlay specifications 
hypertext mapping overlay specifies mapping containment entities hypertext entities structure container link anchor term described 
provides information bamboo generate domain specific operations entities link traversal operations link entity 
overlay tells generator generating entities hypertext repository entities play specific roles particular hypertext operations 
implemented simple linear versioning overlay ordered revision versioning pattern version control rcs cvs style integrated hypertext mapping overlay 
provide detailed description experiment adding versioning overlay existing hypertext system section 
generation process user perspective automatic code generation process follows 
user defines required input xml documents described section 
second xml parser processes xml documents checks consistency sure total number conflict sum cardinality outgoing arc definition converts information linked list data structure memory 
code templates processed information input specification files 
generator creates repository schema definition code case code defines database tables basic initialization 
entity class definition code generated information extracted containment model 
purpose testing generate command line shell client repository exploration providing basic repository exploration functions 
ant build tool generated code build file provided generator outputs 
point generator done 
user run ant build tool get hypertext repository layer simple command line shell client 
gui client required user start existing code generated api start building gui client right away needing build layer scratch 
major tasks generator transform code templates desired target source code 
simple tag approach tag unique name semantic meaning 
examples tags include package import linked list definition entity classes accessor methods physical data types specific operation methods entity types 
tags expanded parts final code generator decide skip tags entity definition options overlay definition input xml files 
distinct tags source code template files 
generated system architecture generated hypertext system repository layers physical repository layer repository api layer logic layer front 
shows architecture generated repository 
physical repository layer stores instances entities relationships 
repository api defines accessor methods create destroy get set data values physical repository 
architecture includes standard repository api multiple api implementations accommodate different repository types file system relational database object oriented database xml data store currently implementation mysql relational database 
logic layer stores definition entity classes methods operation containers methods specific hypertext systems 
executes active constraint checking creating destroying entity instances 
example relationship cardinality definition entity entity time create instance entity provide instances entity 
logic layer checker enforces constraint requests user input front layer 
front client layer hypertext system repository 
generator creates command line shell program exploring repository 
users need manually build gui clients generated logic layer repository api 
front command line shell gui client entity definition including entity attributes relationship attributes scm constraints 
experiments generated repositories goals section 
want demonstrate bamboo capable replicating aspects repository layers interesting existing hypertext systems section 
validates bamboo ability create wide range repositories varying data models 
second want highlight advantage approach model driven generator easier add functionality existing repositories section extending model re executing generator extended repository created 
wish validate fact manually write usable gui interface top generated repository section 
generating repositories kms notecards chimera experiment generate repository layers hypertext systems described 
systems represent important monolithic open hyperbase link server data models 
generation process done ghz ibm thinkpad laptop mb memory se 
generation repeated times generation time average elapsed time 
results table 
note reported generation times bamboo execution include compilation time 
total entity number template files loc generated files loc code changes loc percentage generation time table 
metrics generated repositories 
kms notecards chimera logic layer repository api mysql repository api file system repository api repository api mysql database file system repository 
architecture generated hypertext system repository 
elements dotted lines currently implemented generated 
draw results 
generator scales small models entities kms medium sized models entities chimera 
second template code generation content management repositories feasible 
note percentage newly created code generated loc template loc template code base percentage generally increasing size containment model 
means large proportion code manually implemented generation approach 
third generator effective saving development time cost 
developer new strong existing background content management systems takes short period time anecdotal evidence suggests hours learn prepare input specification files 
see table takes generator second produce thousands lines code 
amount take days weeks performed manually 
notecards gui clients top generated repository second experiment demonstrates feasibility building prototype gui notecards system generated repository 
shows flexibility system extension model driven approach 
changing containment model add versioning definitions selected entities regenerate repository code extended system 
additionally minimal change gui client create gui version control enhanced system call 
chose notecards system implementation wellknown hypertext system straightforward data model set hypertext capabilities making suited example 
note reimplementing entirely original notecards system 
borrowing basic concepts notecards implementing generator approach 
generation steps experiment produced repository code notecards containment model described 
built prototype gui client notecards repository eclipse swt freely acknowledge gui differs original notecards 
client shows hierarchical tree structure container instances notecards links repository 
shows atomic properties selected notecards links author datetime 
simple operations provided add delete entity instances 
simple text viewer editor provided display edit content 
link implemented external link connecting notecards 
opening link ends opened viewers side side 
development process straightforward low level repository handling code produced generator 
developers spent time focusing domain logic interface design 
notecards client took weeks design implement test week spent learning eclipse swt toolkit programming 
wanted add new feature gui client versioning support certain entities 
normal procedure involve refactoring existing code places 
task time consuming error prone especially developers refactoring original developers 
model driven approach process easier 
changed hypertext role mapping specification adding attribute entities wish versioning capabilities case link 
previous research identified versioning patterns existing hypertext versioning systems 
pattern popular scm systems rcs sccs cvs :10.1.1.151.8450
gives example versioning pattern looks 
pattern version history entity contains revisions entity instance 
entity instances referential relationships connecting predecessor successor versions 
hypertext mapping specification adding attribute shown note difference old new hypertext mapping specifications attribute 
implement version control overlay hypertext mapping overlay complex version control options implemented far 
separate version control specification file 
second developed xml transformation tool automatically adds version history entities link entities containment model xml document added atom entities comment 
graphically shows generated containment model versioning pattern added 
shaded vo containers newly added version histories version history entity pattern defined 
containment model pattern vo id nc name id vo revision content author timestamp comment example pattern versioning pattern 
vo nf vo id nc vo id nc name nc id nc author nc timestamp nc content nf name nc nf vo nf nc vo nc nc comment nc nf nf id nf nf vo id name link vo containment model 
id author timestamp comment 
applying versioning pattern notecards containment model obtaining containment model 
example new hypertext mapping specification link entities assigned versioning newly added vo container new entities recording versioning metadata 
possible patterns entities added changed pattern definition 
call new model indicating notecards repository supports versioning 
note hypertext mapping containment model specifications changed data type code templates touched 
ran bamboo generator new set input files yielding repository version control support pattern 
note vo containers support checkin checkout view version history operations 
modified notecards gui client code add versioning related operations metadata version tags comment result client shown adds versioning support notecards 
shows versions left hand side tree structure 
versions notecards links contained selected version displayed table panes 
shows version opened viewer editor 
shows link traversal operation opens ends link version 
overview 
viewer editor 
open notecards connected link 

screenshots 

automatic code generation domain specific software development attracted attention decades 
applies domain knowledge design patterns reduce monotonous manual development increase productivity reduce errors perform code optimization 
code generation sharp tool rapid prototyping different design choices tested cost effective way design deficiencies identified early stages development 
containment modeling framework lightweight framework describing repository layers content management systems 
repository generator hypertext systems simplifies development hypertext systems users focus domain logic user interface design client 
generator demonstrated effective efficient tested existing systems 
extensible architecture allows additional features included feature overlays 
overlay represents aspect interest hypertext version control permits high level reasoning cross cutting features 
avoids dependency features provides flexibility adding new features 
additional information bamboo project website www soe ucsc edu research labs bamboo 
directions 
currently generated code manually tested validated design specification 
reliable safety critical applications 
genvoca nasa projects provide validation algorithms tools testing validation 
investigate approaches automatically generate test cases validation tools generated code 
implemented hypertext overlay version control overlay need overlays enrich features generated repository including workspace support concurrency control distributed collaboration 
implement overlays need explore mechanism standardizing interfaces overlays 
generated hypertext repositories share model data exchange different systems possible 
require semantic mapping tool different systems overlays 
possible generate domain logic user interface build top repository layer 
require rich domain knowledge hypertext system applications development reusable components domain logic representation user interface design 

project supported national science foundation contract number nsf career ccr 
gordon sung kim software engineering lab university california santa cruz invaluable discussion careful review 

mccracken yoder kms distributed hypermedia system managing knowledge organizations communications acm vol 
pp 

anderson data scalability open hypermedia systems proc 
hypertext darmstadt germany feb pp 
anderson taylor whitehead jr chimera hypertext heterogeneous software environment proc 
echt european conference hypertext technology edinburgh scotland sep pp 

experience model driven approach enterprise wide interface specification xml schema generation proc 
th ieee international enterprise distributed object computing conference brisbane australia sep pp 

batory singhal thomas genvoca model software system generators ieee software vol 
pp 
september 
berliner cvs ii parallelizing software development proc 
usenix winter technical conference dc jan pp 
buntine trends controversies domain specific code synthesis silver bullet vol 
pp 
january 
cleaveland building application generators ieee software vol 
pp 
july 
eclipse org eclipse org portal site www eclipse org accessed time 
fischer schumann generating data analysis programs statistical models journal functional programming vol 
pp 
may 
goldstein bobrow layered approach software design interactive programming environment 
new york mcgraw hill pp 

gordon whitehead jr containment modeling content management systems proc 
symposium mis lncs denmark aug pp 

lowry meta synthesis efficient domain specific program synthesis systems proc 
th knowledge software engineering conference boston mass nov pp 

bhatia tool automated code generation designing user interfaces character terminals proc 
clemson sc march april pp 

mysql ab mysql manual www mysql com doc en index html accessed time march 
object management group omg omg unified modeling language uml www omg org uml htm accessed time march 
object management group omg mda guide version www omg org docs omg pdf accessed time march 
sauter open hypermedia system proc 
fourth acm conference hypertext echt milano italy nov dec pp 
source code control system ieee transactions software engineering vol 
pp 

streitz haake lemke schuler cooperative hypermedia authoring environment proc 
fourth acm conference hypertext echt milano italy nov dec pp 

apache xml project xerces java parser release notes xml apache org xerces index html accessed time march 
tichy rcs system version control software practice experience vol :10.1.1.151.8450
pp 

trigg suchman halasz supporting collaboration notecards proc 
computer supported cooperative cscw austin texas dec pp 

vigna automatic generation content systems eer specifications proc 
th ieee international conference automated software engineering ase montreal quebec canada oct pp 

whitehead jr design spaces link structure versioning proc 
hypertext twelfth acm conference hypertext hypermedia denmark august pp 

whitehead jr uniform comparison data models containment modeling proc 
hypertext thirteenth acm conference hypertext hypermedia college park md june pp 

whitehead jr gordon uniform comparison configuration management data models proc 
th international workshop software configuration management systems scm portland oregon may pp 

leggett approach open hypermedia systems proc 
th acm conference hypertext hypertext dc march pp 

