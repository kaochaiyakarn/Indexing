enacting bpel ws specified workflows multiagent systems paul buhler computer science dept college charleston charleston sc usa cs edu describes development distributed functionally equivalent agent workflow enactment mechanism bpel ws specification 
demonstrates bpel ws viewed description social order collection agents agents serve proactive proxies underlying passive web services 
semantic web initiative working semantically rich descriptions web services reasoned agents current state art allow collections agents representing semantic web services organize enact workflows 
critically important serves bridge existing static views workflow enactment agent dynamic workflow engines 

details design development open distributed agent workflow enactment mechanism utilizing bpel ws specification multiagent system mas 
impact broad cuts existing emerging technologies example business process management systems web services internet agents application integration xml coordination 
currently trends changing way businesses interact environments 
trends incorporation real time data business processes 
corporate leaders believe having ability adapt processes near real time provide competitive edge environmental dynamics may simply destabilize business processes sociality business process typically recognized 
second trend dynamic jos vidal university south carolina computer science engineering columbia sc usa vidal sc edu realignment business partners enabled advances information technology 
need adaptive processes driven demands commerce spaces 
initial automation activities centered electronic data interchange edi initiatives 
space focused development deployment ebxml electronic business xml 
edi ebxml collaborating business partners predefine terms electronic interaction 
discussed technologies enforce regulated interaction create closed communities business partners 

comparison views virtual organizations require flexible fly alignment business partners words adaptive workflow capabilities 
loose collaborations business partners operate open non regulated scenarios collaboration agreements hindrance environments 
business process management software gaining momentum due emergence de facto standard describing business process compositions web services 
standard named bpel ws acronym business process execution language web services 
earlier works explored relationship web services multiagent systems mas workflows 
vision create adaptive workflow capability decentralized workflow enactment mechanisms combine web service agent technologies 
applicability mas workflow enactment previously noted example notion passive web services externally defined behaviors proactive agents palatable 
differentiating web services agents measure proactivity important distinctions worth noting 
distinguishing characteristics provided huhns web services know possess meta level awareness web services designed utilize understand ontologies web services capable autonomous action intentional communication cooperative behavior 
contrast agents possess capabilities 
agents viewed independent applications provide services loosely coupled asynchronous message exchange 
agents able take advantage nonblocking nature messaging overlapping processing communicative acts 
agent uses autonomy determine perform envision agent searching ways optimize workflow engaged 
occur finding service partners provide better quality service learning interaction histories existing partners maximize utility interactions 
detail sample bpel ws workflow serve running example remainder 
discussion architecture design distributed enactment mechanism 
followed examination hybrid coordination model 
discussion proceeds detail design workflow agents 
provides information enactment mechanism configured including examination configuration data consumed workflow agents 
concludes discussion lessons learned insights gained 

sample bpel ws workflow bpel ws xml defacto standard allows specification workflow activities defined web service invocations 
bpel ws submitted oasis standardization known ws bpel 
complete description bpel ws scope discussion provide background enable understanding sample workflow 
bpel ws files specify coordination control data service partners represent underlying web services 
control constructs sequence split join represented xml tags delineate control blocks 
example actions flow flow tags executed concurrently 
bpel ws defers underlying wsdl specification data exchanged service partners 
messages exchanged web service designated variables bpel ws file 
assignment copy operations variables allows data manipulated passed web services 
initial research efforts directed solving toy problems 
example workflow described serves purpose 
abstractly workflow consumes parameters stock symbol country name 
result workflow quote stock localized currency country 
example providing csc switzerland return price single share computer sciences stock swiss 
example workflow encoded bpel ws follows 
items note bold face text designate control constructs workflow activities remaining text describes data centric coordination messages exchanged partners web services 
bpel ws simplified removing attributes help clarify example 
process partners partner name requestor partner name partner name partner name partners variables variable name request variable name response variable name variable name variable name variable name variable name variable name variables sequence receive name request partner requestor operation variable request receive assign copy variable request part symbol variable part symbol copy copy expression usa variable part country copy copy variable request part country variable part country copy assign flow invoke name partner operation invoke invoke name partner operation invoke flow assign copy variable part result variable part copy copy variable part result variable part copy assign invoke name partner operation multiply invoke assign copy variable part variable response part result copy assign reply name response partner requestor operation variable response reply sequence process internally workflow definition coordinates interaction workflow partners named requestor 
provides graphical view structure workflow case maps ucm notation 

ucm diagram example workflow ucm intuitive line represents thread control passes partners workflow 
workflow process starts line designated ball 
tracing line start finish provides accurate account temporal ordering workflow activities 
notably line splits joins middle process corresponds flow flow tags respectively 

architecture design web services bpel ws created resurgence interest workflow technologies process oriented views software systems 
traditionally workflow engines static enactment workflows centralized control 
classic approach odds current trends real time enterprises closely monitor changing marketplace conditions events 
ultimate goal data fed back business processes increasing process responsiveness allowing adaptive changes occur 
achieve type workflow agility new enactment mechanisms required 
distributed systems possess dimensions distribution computation control data 
bpel ws web services computational activities control data dimensions specify coordination required manage process 
bpws engine bpel ws enactment engine available ibm alphaworks site 
bpws provides central coordination workflow computation potentially distributed internet 
bpws workflow instance thread control simulated parallelism engine workflow distributed application 
distributed applications typically posses single thread control synchronous communications transfer control component 
perspective application integration paradigm provides appropriate model internet workflow enactment particularly inter organizational workflows considered 
application integration considers components independently executing applications integrated asynchronous exchange data control 
web services passive entities don execute called wrap proactive agents possess thread control 
agents integrated enact workflow 
agents coordinated shared data space asynchronous exchange messages 
architecture flexible loosely coupled 
goal create open architecture built atop open standards increased interoperability 
primary web service standards soap wsdl uddi allow language platform neutral web service invocation 
agent space fipa standards define basic services need supplied compliant agent platforms 
adherence fipa standards enables agents heterogeneous sources assemble open systems 
additionally chose open source freely available software possible 
design goal worth mentioning desire preserve compositional completeness property inherent bpel ws 
context compositional completeness means composition web services published accessed web service participate compositions 
complex workflows viewed hierarchy workflows compositional completeness property allows agent workflows incorporated bpel ws workflow definitions 
architectural desires design constraints software components creation distributed enactment mechanism bpws editor graphical creation bpel ws specified workflows glue high level web service invocation toolkit jade fipa compliant agent development environment web service agent gateway bridge synchronous web service calls asynchronous agent messaging networked native xml database coordination medium 

hybrid coordination model previously discussed domain coordination encompasses issues data control 
distributed workflow enactment mechanism utilizes hybrid coordination model means combines separate data centered coordination mechanisms 
data managed shared network addressable xml repository control workflow activities driven asynchronous message exchange agents 
message exchange pattern control messages derived colored petri net cpn model workflow 
coordination medium facilitates storage retrieval sharing xml data 
networked native xml database complies xml db api specification 
stores xml documents logical groupings called collections 
data retrieved collection evaluation xpath query evaluated documents collection 
features ideal choice coordination medium 
tuple spaces coordination medium choice agent systems 
tuple spaces allow processes communicate space time process running machine write information shared tuple space read process running different machine day tomorrow 
tuple spaces provide form associative memory 
associative memory accessed content address 
way analogy sql retrieve records rdbms match criteria specified clause query 
way query tuple space retrieves records match criteria specified template 
xpath viewed template mechanism retrieve specific elements attributes collections nodes xml document 
example provide insight xpath coordination medium sharing data distributed workflow agents 
workflow example partner interacts stock quote web service 
interaction occurs xml soap messages intercepted stored 
sample captured soap response message appears 
soap envelope xmlns soap schemas xmlns xsi www org xmlns xsd www org xmlns schemas soap schema soap body xmlns urn delayed quotes result xsi type xsd float result soap body soap envelope downstream workflow returned stock quote needs multiplied currency exchange rate localize price 
occur quoted price needs extracted xml document 
xpath query retrieves quote string converted numeric equivalent 
string result requests execution workflow generate unique collections repository 
allows clean separation data individual workflow cases 
additionally assures efficient xpath queries number documents collection remains small 
cpns flow control mechanism petri nets pns workflow control mid 
pns known place transition nets provide deceptively simple rigorous way model finite state machines 
pns represented directed graphs types nodes places transitions graphically represented circles squares respectively 
state execution maintained tokens reside place nodes pn 
transition enabled input places marked token 
transition enabled fires removing token input places depositing token output places 
workflow perspective activities process occur transition nodes net 
presents example workflow pn form transitions correspond receive request invoke invoke invoke reply response 

pn model example workflow comparison ucm diagram pn model reveals equivalent 
cpns extension basic pns include notion tokens carry data 
different colored tokens equate different data types 
demonstration system utilizes different colored tokens 
messaging agent enactment mechanism 
second communicate control information agents process workflow instance 
sample message sent requestor request csc switzerland message signature indicating sent 
message identifies name workflow followed partner name message intended 
vertical bar separates message header payload 
payload message indicates request quote csc stock localized swiss currency 
example control message exchanged agents workflow enactment follows message carries distributed workflow agent signature identifies workflow name partner name message intended 
numeric value unique id assigned workflow instance 
id identify appropriate collection database 
final piece information name partner role sent message example message 
pn shown apparent invoke multiplication web service need receive messages workflow instance 
hard imagine pn centralized workflow enactment mechanism control execution order workflow activities 
interesting question arises regarding pn distributed workflow enactment 
question possible separate net pieces distributed retaining equivalent behavior 
answer illustrated depicts refinement place transitions simple pn consisting places transition 
refinement net transition writes token place enables subsequent transition 
transition writes output token place may reside network 
place turn enables transition 
concretely transitions pn model agents transition labeled df mts represents fipa compliant directory facilitator df message transport service mts components 
agent workflow completes task utilizes df locate address agent registered playing partner role needs receive control 
agent generates acl request message loads content area signed data sends message address returned df 
mts turn facilitates message delivery 
distribution cpn effectively managed df acting middle agent 
presents uml 
refinement subnet sequence diagram illustrates message exchange pattern instance example workflow 

uml sequence diagram showing message exchange pattern derived cpn model sample data 

agent design types agents enact workflow target agents distributed workflow agents 
target agent interfaces distributed workflow agents 
distributed workflow agents proactive proxies passive web services represent 
types agents implemented jade fipa compliant 
design goals distributed workflow enactment mechanism ability externally configure agents run time 
agents generic differentiated instantiation behavioral characteristics defined partner roles bpel ws file 
section provides detailed discussion external configuration data 
target agents illustrates structure target agent ucm notation 
agent represented parallelogram indicates active component system 
target agents receive messages distributed workflow agents distinct execution paths denote 
boxes execution path simply designate processing occurring lines note layer fold ucm notation 
layer fold abstraction indicates complexity hidden collapsed path 
case layer fold indicate interaction target agent middle agents 
distributed workflow agents reflects implementation distributed workflow agents 
new ucm notation dashed rounded rectangle placeholder symbol passive component 
distributed workflow agents share code base simply instantiated different workflow partner information 
consistent fact primary distinction agents web service represent 
configured 
provides high level diagram shows interaction major components 
note solid lines arrows indicate synchronous message exchange dashed variation designates asynchronous messaging 
sections describe configuration components shown 

ucm diagram target agent 
system configuration architecture distributed enactment mechanism relies different components properly 
ucm diagram distributed workflow agent 
illustration interaction components distributed enactment mechanism configuring provides web service interface services provided target agent 
example target agent plays requestor partner role 
defined bpel ws requestor receives requests users responds reply workflow runs 
requires gateway agent generated deployed 
critical interface gateway agent aligns workflow soap request response message structure 
gateway agent interface specified java interface 
provides tools facilitate generation gateway agents 
tools consume java interface produce skeletal gateway agent 
skeletal code edited comply messaging interface target agent 
gateway agent compiled packaged deployment 
example workflow java interface generate gateway agent 
package public interface float request string symbol string country gateway agent built installed needs deployed 
deployment step publishes wsdl interface gateway agent associates gateway agent target agent 
management console provides means accomplish task 
shows configuration gateway agent 
receives soap request gateway sends acl request specified target agent running target agent platform 
workflow complete target agent sends acl inform back gateway agent turn sends soap response workflow consumer 

configuration gateway agent configuring workflow agents workflow agents system share single configuration file expressed xml conveniently stored 
configuration data derived bpel ws file underlying wsdl files individual web services 
currently configuration data manually generated believe process automated 
portion configuration data example workflow process provided discussed 
workflow messages message name request part name symbol type xsd string part name country type xsd string message message name response part name result type xsd float string agent role response ns part message message name part name type xsd float string agent role response result part part name type xsd float string agent role response result part message message name part name type xsd float message messages partners partner name requestor service wsdl wsdl operation operation response service place place place place partner partner name place place place place service wsdl axis wsdl wsdl operation multiply operation service place requestor place partner partners configuration file contains data centric coordination information relevant enactment workflow 
data centric portion identified messages tag control centric section identified partners tag 
messages section defines messages individual partners interacting associated web service 
message names come directly bpel ws file message parts specified underlying wsdl files web service 
message part optional value constant designated xpath query designated 
associated xpath queries inform agent obtain data 
example target agent sends acl inform message gateway agent contents response message defined configuration file 
response message contains part named result type xsd float 
associated xpath query specifies obtain data soap response message stored 
partners section contains control centric coordination information relevant partners workflow 
partner names specified bpel ws file 
partner bound specific web service specified wsdl operation triplet 
corresponds message messages section configuration file 
agents track signed message receive individual workflow cases 
agent receives message workflow instance partners specified section agent invokes web service 
directly corresponds enabling transition pn input places marked 
intercepted soap request response pair web service interaction stored 
agent sends message workflow partners section 
example call multiplication web service received messages 
messages received service invoked soap messages stored requestor role notified 
command line parameters workflow agents provided name workflow participating name partner role performing command line parameters 
previously mentioned distributed workflow agents instances java class 
command line parameters distinguish 
parameters provide agent information retrieve partner specific information workflow global configuration file 
agent uses partner information registering df agents identify playing specific partner role 
example shows command line establish agent java jade boot container target agent utilizes different class file established similar fashion 
command line establish target agent java jade boot container name target container gui requestor requestor shows screen shot jade remote agent management console entire complement workflow agents running 

jade remote agent management console showing full complement workflow agents 
important points distributed workflow enactment mechanism functional provides research platform refinement experimentation performed 
development issues reasonable scaleable solutions 
discussed challenges overcome dynamically binding web services manner deal returned data 
conscious decision forgo unmarshalling soap response 
keeping data xml format insulates code differences rpc literal doc literal web service styles 
additionally transparent native xml database coordination medium choice 
learned valuable lessons remains 
importantly demonstration system support switch pick bpel ws constructs 
constructs support selective routing thought business rules workflow process 
example response previous web service pass control partner partner believe maintain code genericity augmenting section configuration file ruleml 
rules processed conditional logic scripts manner inspired 
hybrid coordination model proven relevance demonstration system 
example linda tuple space convey control messages agent consume message 
df asynchronous messaging opens interesting research opportunities regarding task allocation 
example consider happen workflow agent utilizes df locate agent playing role identified outgoing place discovered multiple agents returned 
agent reputation mechanism select partners engage bidding scenario managed contract net protocol point individual agents maintain opportunity intelligent potentially optimize execution workflow run time 
conversion bpel ws pn form area requires study 
currently generate pns replacement property exists workflow nets sufficient modeling positive flow control difficult capture fault exception handling 
additionally fact bpel ws inherits approach xlang presents difficulty expressed pn graph constructs 
pursue humboldt university ongoing developing pn semantic bpel ws 
initial description approach 
opportunities exist demonstrate advantages agent workflow enactment 
semantic web services available integrate semantic discovery service sds basic agent service available workflow agents 
accomplish integration partner description configuration file need augmented semantic description web service partner represents 
run time workflow agent autonomy locate potential web service partners aid sds 
integration allow agents heal workflow event primary web service unresponsive 
likewise various web services provide different qos levels provide opportunities explore self optimizing algorithms 
described opens new avenue research regarding agent oriented software engineering aose 
demonstrated possible take bpel ws file created graphical workflow design tool instantiate mas 
opens possibility general mas design methodology toolset formalized advancements occurring business process management space 
natural fit workflow essentially represents sociality business process relationships workflow participants necessary conversations processing product 
worth exploring aose process formalized consisting gaia agent oriented analysis design methodology graphical workflow design tools emit bpel ws distributed workflow enactment mechanism described 

supported national science foundation iis career award 

ibm 
bpws www alphaworks ibm com tech bpws 
xml cover pages 
business process execution language web services bpel ws xml org bpel ws html 
foundation intelligent physical agents www fipa org 
glue overview www com solutions wm glue telecom italia lab 
jade java agent development framework sharon cselt projects jade 
information technology group ag 
web services agent integration project sourceforge net index html 
apache xml project 
homepage xml apache org 
world wide web consortium 
xml path language xpath version www org tr xpath 
aalst application petri nets workflow managment 
journal circuits systems computers 
aalst hee workflow management models methods systems 
mit press cambridge mass 
buhler vidal integrating agent services bpel ws defined workflows usc cse tr cse sc edu papers pdf 
buhler vidal verhagen adaptive workflow web services agents 
proceedings international conference web services 
buhler vidal synthesis web services agent behaviors 
proceedings agentcities challenges open agent environments workshop 
buhr case maps object oriented systems 
prentice hall 
curbera implementing bpel ws architecture bpel ws implementation 
proceedings grid workflow workshop ggf 
analysis design multiagent systems hybrid coordination media 
proceedings world multiconference systemics cybernetics informatics 
huhns agents web services 
internet computing 
webservices org 
big boys unite forces mean www webservices org index php article arti 
klusch sycara brokering matchmaking coordination agent societies survey 
omicini zambonelli klusch tolksdorf eds 
coordination internet agents models technologies applications springer berlin new york 
mcilraith adapting bpel ws semantic web bottom approach web service interoperation 
proceedings second international semantic web conference 
stay flexible logic scripts 

schneider nierstrasz agent coordination scripting languages 
omicini zambonelli klusch tolksdorf eds 
coordination internet agents models technologies applications springer verlag new york ny 
singh huhns multiagent systems workflow 
international journal intelligent systems accounting finance management 
vidal buhler stahl multiagent systems workflows 
internet computing 
wooldridge jennings kinny gaia methodology agent oriented analysis design 
autonomous agents multi agent systems 
