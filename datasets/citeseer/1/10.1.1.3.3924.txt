tdl hardware description language retargetable postpass optimizations analyzes daniel universit des saarlandes absint angewandte informatik gmbh saarbr germany absint com 
hardware description language tdl designed goal generate machine dependent postpass optimizers analyzers concise speci cation target processor 
tdl assembly oriented provides generic modeling irregular hardware constraints typical embedded processors 
generic modeling supports graph search optimization algorithms 
important design goal tdl achieve extendibility tdl easily integrated di erent target applications 
tdl base system developed retargetable framework high quality code optimizations assembly level 
contemporary microprocessors analog devices philips tm signi cant improvements code produced production quality compilers achieved short retargeting time 
tdl implementing postpass optimizations neon st processor part commercial postpass optimizer 
tdl speci cations concise produced short time 
past years markets telecommunication embedded systems multimedia applications growing rapidly 
real time applications part embedded systems impose stringent performance requirements 
cost constraints performance requirements led development irregular hardware architectures specially designed real time applications digital signal processing 
type architecture quality code generated traditional high level language compilers satisfactory 
generating ecient code irregular architectures requires sophisticated optimization techniques exploiting speci hardware features target processor 
shortcomings available compilers resulted applications developed assembly language part 
due growing complexity embedded applications shrinking design cycles embedded products usage high level programming languages increasingly imperative 
urgent need retargetable code generation optimization techniques quickly adapted di erent target architectures deriving machine speci properties dedicated hardware description 
time techniques able produce high quality code modeled architectures 
system developed retargetable framework high quality code optimizations machine dependent program analyzes assembly level :10.1.1.12.8498
past research retargetability mainly focused closed compilation systems 
examples retargetable research compilers chess record aviv spam express :10.1.1.12.8498:10.1.1.124.9519
system industry requires replacing existing compiler infrastructure causes high costs 
retargetable compilers industry rare 
due postpass orientation integrated existing tool chains moderate ort allows improve code quality existing compilers 
costs associated changing compiler infrastructure avoided 
retargetability concept combination generic generative mechanisms 
machine description language tdl target description language allows specify hardware resources target processor instruction set irregular hardware constraints assembly language concise way :10.1.1.12.8498:10.1.1.22.1791:10.1.1.22.1791:10.1.1.22.1791
irregular hardware constraints modeled generic way enabling exploited generic graph search optimization algorithms 
tdl ers hierarchical structuring operation semantics speci cation semantical consistency checks 
article structured follows brief overview related sec 
basic design principles important language elements tdl described sec 

illustrate usage tdl framework sketched sec 

sec 
summarizes experimental results gained applications tdl 
sec 
contains summary gives outlook 
related hardware description languages variety application areas architectural synthesis hardware simulation code generation program analysis 
consequence large number di erent hardware description formalisms developed 
area processor modeling simulating widely languages vhdl verilog known approaches code generation isps mimola language language sled nml :10.1.1.22.1791:10.1.1.30.2781:10.1.1.30.2781:10.1.1.30.2781
languages currently development lisa aiming generating cycle accurate simulators architectures complex pipelines isdl expression rtl :10.1.1.112.5788:10.1.1.12.8498:10.1.1.12.8498:10.1.1.12.8498:10.1.1.124.9519:10.1.1.124.9519
hardware description languages categorized behavioral structural mixed behavioral structural languages :10.1.1.22.1791
behavioral description speci es instruction set target processor focuses semantics behavior machine operations 
structural speci cations typically close gate level describe hardware modules processor interconnections 
hardware description languages code generation incorporate aspects views classi ed mixed level approaches 
assembly oriented architecture description language system 
designed support analyzes transformations low level code 
architecture speci cation covers hardware resources instruction set means specifying detailed operation semantics 
complex interactions operations interdependencies scheduling allocation decisions modeled 
isdl designed support wide range tools code generators disassemblers instruction set simulators :10.1.1.12.8498:10.1.1.12.8498
assemblers disassemblers automatically generated isdl simplifying assumptions structure assembly language 
structural information restricted declaration storage resources behavioral components speci cation instruction set mechanism specifying constraints operation combinations 
storage resources declared problem functional unit binding addressed isdl description 
constraint mechanism purely syntactical exploit structural semantical information speci cation parts 
semantical analysis machine description 
nml retargetable code generator cbc retargetable compiler chess instruction set simulator checkers 
instruction set modeled attribute grammar terminal grammar corresponds valid instruction 
structural information provided declaring available storage resources 
specifying timing machine operations irregular hardware constraints building long instruction words independent operations vliw execution model explicitly supported 
nml designed processing assembly les specifying syntax assembly expressions comments directives supported 
sled part csdl computer systems description languages language family :10.1.1.30.2781:10.1.1.30.2781
sled focuses instruction decoding encoding specifying semantics machine operations dedicated language called rtl developed 
rtl higher order functional language sml 
ect machine operation speci ed register transfer list rtl describes change machine state induced operation 
detailed speci cation timing behavior operations directly supported 
expression mixed level language supporting architectural design space exploration automatic generation compilers simulators :10.1.1.12.8498:10.1.1.124.9519
structural information specifying hardware resources architecture including memory hierarchy pipeline mechanism data transfer paths 
assembly syntax speci ed modeling irregular hardware characteristics restricted 
example clear encoding restrictions limiting instruction word packing speci ed 
information speci cation detailed semantics machine operations :10.1.1.12.8498:10.1.1.124.9519
tdl tdl target description language descriptive language allows concisely specify hardware resources assembly language processor modeled 
tdl speci cation provides information target architecture uence program analyzes optimizations 
includes properties relevant hardware resources syntax semantics machine operations additional information timing characteristics 
tdl ers generic modeling irregular hardware constraints hierarchical structuring instruction set speci cation 
tdl easily extendible exible presupposition modeling wide range target architectures supporting di erent kinds optimizations analyzes 
tdl classi ed mixed structural behavioral description formalism :10.1.1.22.1791
resources declared structural style machine operations mainly described view operation behavior semantics 
tdl description modular structure 
comprise speci cation hardware resources description instruction set constraint section assembly section 
speci cation parts needed target applications omitted 
tdl description checked semantical consistency input errors inconsistencies machine description detected early 
remainder chapter di erent sections tdl description 
resource speci cation hardware sensitive program analyzes optimizations require knowledge hardware resources target processor 
includes functional units available register sets memories caches 
rule thumb hardware components important target application declared resources tdl description 
tdl ers set prede ned resource types properties described prede ned set attributes 
prede ned resource types comprise functional units register sets memories caches 
attributes available describe bit width registers default data type size memory access width alignment restrictions designer extend domain prede ned attributes declare user de ned attributes additional properties taken account 
possible declare user de ned resource types allows maximum exibility respect range supported hardware architectures target applications 
declarations semantical analysis machine description 
di erent views hardware resources supported tdl dedicated alias mechanism 
example analog devices adsp register le integer oating point register le 
view associated xed point operations oating point operations assembly representation views di ers 
implicit assumption machine model tdl resources di erent types parallel 
functional unit types multiple instances assumed parallel 
way vliw machine model supported 
architectures instruction level parallelism considered special case vliw architectures execution unit available 
architectures fully orthogonal instruction set parallelism functional units restricted 
restrictions parallelism modeled constraint section 
currently tdl completely specify architectures complex superscalar pipelines 
ongoing develop speci cation mechanism complex superscalar pipelines integrate tdl 
resources section 
alu replication register gpr size type signed gpr usage sp dreg gpr mapping type float memory dm type data align access replacement lru fifo associated cache cache assoc size type instr replacement lru fig :10.1.1.30.2781:10.1.1.30.2781:10.1.1.30.2781

example resource section 
example resource section shown fig 

functional unit type alu declared instances exist 
means target architecture functionally equivalent alus distinguished analyzes optimizations 
subsequently register le named gpr declared consists bit registers 
width element registers prede ned attribute size value prede ned attribute type indicates default registers store bit complement numbers 
assembly representation element register declared notation format strings example element registers gpr represented 
statement allows modify extend attribute setting previously declared resources 
example register gpr declared stack pointer :10.1.1.30.2781:10.1.1.30.2781
subsequently alias mechanism declare view register le gpr 
successive integer registers combined form bit register 
assembly representation combined registers declared 
declaration introduces data memory named dm supports bit accesses aligned bit boundaries 
example concludes declaring way set associative instruction cache lines byte length 
replacement strategy example user de ned attribute domain consists strings lru fifo scope resource type cache 
speci cation instruction set central part tdl speci cation description instruction set target processor 
assembly representation machine operations timing behavior semantics known speci cation additional information supported 
mentioned execution model tdl corresponds vliw architecture 
instruction composed machine operations executed parallel 
de nition instruction set form attribute grammar :10.1.1.22.1791
operation represented rule grammar orthogonal operation parts encapsulated rules 
terminals grammar represent feasible machine operations 
iadd dst gpr src gpr src gpr alu latency extern unsigned guarded true guarded false dst src src src gpr guarded true unsigned src src gpr guarded true unsigned src guarded false fig 

example operation declaration example operation declaration shown fig 
machine operation unambiguous name iadd declared 
name followed de nition assembly representation operation 
assembly representation speci ed syntax similar format strings 
expression represents occurrence non terminal 
productions non terminals introduced dedicated keyword order distinguish complete operations 
de nition assembly representation directive represents sequence characters 
expression dst gpr speci es rst occurrence format string second placeholder denotes destination register operation register register le gpr 
way information resource section reused instruction set description 
resource section viewed special part attribute grammar instruction set contains rules representing resources target processor 
consequence description shortened importantly semantical analysis operation de nitions possible 
checked referenced resources declared semantical speci cation type correct 
operands declared source operands attributes src src src 
attribute guarded ag indicating operation guarded additional source operand predicated execution 
operation part corresponding optional guard represented non terminal 
condition register speci ed leading exclamation mark operation executed signi cant condition bit value 
subsequent blocks represent timing semantics operation 
reservation table speci cation fig 
indicates operation iadd executed instance resource type alu execution time functional unit latency take clock cycle 
attribute mechanism plays important role supporting di erent views instruction set 
computing data dependences input procedure known operation storage locations read ones modi ed 
necessary know storage locations modi ed information modi ed sucient 
machine description basis value analysis constant propagation information result operation computed essential 
instruction set simulator generated machine description additionally known clock cycles ects operation take place 
views supported tdl ecient way 
example calculation generic data dependence graph values attribute instances operation instances input program dst src necessary interpret detailed speci cation operation semantics 
specifying semantics semantics operation describes execution operation ects machine state 
components machine state storage resources processor memory register cells condition codes tdl semantics speci ed dedicated register transfer language rtl similar mechanism register transfer lists cf 
:10.1.1.12.8498
register transfer represents transfer value storage location change machine state 
register transfers contained list assumed take simultaneously ect 
register transfer language tdl statement oriented 
main reason retain exibility generating cycle accurate instruction set simulators 
statements grouped group statements assumed take simultaneously ect 
execution operation viewed sequence ects spanning control steps 
ects explicitly assigned appropriate control step 
skeleton rtl grammar shown fig 
bnf form complete de nition :10.1.1.12.8498:10.1.1.22.1791:10.1.1.22.1791:10.1.1.22.1791

switch binop unop intconst binop unop id fig 

skeleton rtl grammar bnf form 
semantics machine operation speci ed rtl program consisting sequence statements 
rtl program may contain declarations virtual storage locations helpful describing semantics complex operations 
scope virtual storage declarations complete rtl program complete speci cation semantics machine operation 
feasible statements comprise assignments conditional statements loops function calls 
statements grouped blocks 
values computed expressions side ects 
means implicit modi cations storage locations changes explicitly 
expressions may numerical string constants attribute values storage locations applications operators rtl functions expressions 
storage resources referenced rtl statements declared resource section preceding virtual storage declarations rtl program 
operators include set arithmetic logical operators known language 
assumed produce side ects 
additionally set prede ned rtl functions common functions er possibility explicitly specifying side ects setting condition codes ow ags designer possibility declaring user de ned canonical functions 
way speci cation modularized shortened 
parameters passed functions thought bit sequences optionally type constructor 
declaration formal parameters annotated parameters read modi ed body function 
rtl expressions typed 
facilitates analyzing properties machine operations helpful nding bugs machine description 
register transfers represent operations machine level basic data types rtl bit sequences length denoted keyword storage 
specifying semantics operation clear contents storage location evaluated 
type storage location depends special conditions mode settings 
example contents register interpreted signed integer complement representation unsigned integer fractional value oating point number 
order allow maximum exibility rtl provides possibility annotating type storage location 
annotations represent conversion functions seen explicit type constructors 
basic data types rtl signed denotes bit signed integer complement representation 
unsigned denotes bit unsigned integer 
float denotes ieee oating point value bit mantissa bit exponent 
fract denotes fractional values 
bit number type fract 
value de ned hai 
storage denotes storage location length type previously mentioned 
tdl uses polymorphic type inference algorithm explicit type constructor inferred type overridden 
example expression signed dst requires destination interpreted bit complement value 
polymorphism rtl language restricted similar subtype rule object oriented languages 
formal parameter function declared type storage feasible pass storage locations contents inferred signed unsigned type 
cases polymorphism concerned width storage locations 
example consider prede ned function prototype signed signed unsigned unsigned 
rst parameter signed integer length result signed integer length 
bit passed second parameter value saturation performed case positive negative ow largest positive smallest negative number appropriate bit width returned 
ow occurs bit passed third parameter set 
parameters read parameters symbol indicates parameter modi ed function 
rtl operators provided default operators overloaded 
special attention paid constants 
integer constants treated bit complement values oating point constants bit numbers bit mantissa bit exponent 
representation required explicitly annotated appropriate type constructor 
binary hexadecimal values exactly represented 
constraint assembly speci cation constraint section tdl restrictions instruction level parallelism resource usage interdependencies scheduling allocation modeled specifying set rules 
rules composed boolean expressions refer properties hardware resources machine operations speci ed preceding sections tdl description 
rules independent assembly syntax allow semantical analysis machine description 
resulting representation concise exible error prone previous approaches allows modeling resource encoding restrictions uniform way :10.1.1.12.8498:10.1.1.12.8498
important property rule approach tdl speci ed rules automatically transformed functions generic graph optimizers list scheduling integer linear constraints generic search optimizers 
way irregular hardware properties modeled completely generic way 
fig 

system 
constraint section tdl viewed constraint store containing speci ed rules 
rules represent conditions respected preserve correctness program transformations 
rule composed premise consequent 
premise boolean expression statically evaluated tdl description processed 
represents condition boolean expression consequent satis ed 
condition speci ed premise describe operation properties invariant respect scheduling allocation decisions 
example test operation belongs certain operation class 
consequent represents condition dynamically evaluated runtime optimization phases 
focus instruction scheduling register assignment functional unit allocation includes conditions usage storage resources execution units parallel execution operations operation sequencing 
order support additional optimizations tdl possible incorporate conditions static respect instruction scheduling register assignment functional unit allocation 
phases conditions treated static information 
tdl parser checks premise statically evaluated case error reported 
constraint section functions generated invoked target application generic way order take account speci ed architectural restrictions 
rule functions generated ilp optimization generic list scheduling algorithm 
rst function traverses operations input program nested loop set operations satisfy condition premise ilp constraints equivalent consequent rule generated 
way additional hardware speci information incorporated integer linear programs 
second function support function generic list scheduling algorithms called order decide scheduling operation control step violate irregular hardware properties 
additional user supplied optimization phases individually analyses representation rules extract information relevant 
syntax constraint language shown fig 
bnf form 
constraint section introduced keyword constraint section consists set rules 
rule consists boolean expressions separated colon 
expressions represent premise consequent rule 
premise unbound variables operations introduced 
variables bound operation instances input program runtime generated optimizers 
boolean expressions constructed boolean operators disjunction conjunction negation prede ned set atomic expressions 
atomic expressions describe relations resource usage scheduling properties machine operations 
atomic expressions available check operand located set storage locations operation belongs operation class operations executed parallel operation executed exactly cycles 
additionally values cterm cterm cterm cterm id id id id id id id id const id src id src id dst id dst id exec fig 

excerpt grammar constraint language bnf form 
operation attributes compared feasible comparisons depend type attribute values character strings resource compared equality numerical values relations 
constraints section op op dst op src op op op op op op op op op src op src op src op src fig 

exemplary constraint section 
exemplary rules shown fig 

rst enforces rst source operand identical destination operand operations operation class 
second rule prevents operation operation class executed parallel operation operation class 
rule models restricted parallelism alu multiplier digital signal processor analog devices adsp 
operations executed parallel operands reside uniquely de ned register groups heterogeneous register le 
registers operations feasible executed parallel :10.1.1.12.8498
assembly section deals syntactic details assembly language instruction operation delimiters assembly directives assembly expressions order perform semantic preserving transformations assembly program possible distinguish machine operations assembly directives 
existing machine speci cation languages approach supports distinction description language system 
speci cation syntax assembly directives possible languages nml distinguished regular machine operations 
example simple directive declaration tdl shown details :10.1.1.12.8498:10.1.1.22.1791
global type name framework system postpass oriented retargetable optimizer analyzer developed retargetable framework high quality code optimizations machine dependent program analyzes assembly level :10.1.1.12.8498
overview shown fig 

combines issues machine description driven retargetability search postpass optimisations improve quality machine code especially irregular hardware architectures 
retargetability concept combination generic generative techniques 
generic program parts independent target architecture di erent processors modi cation 
hardware speci information retrieved standardized way architecture database generated tdl description 
input consists tdl description target machine assembly programs analysed optimized 
tdl speci cation processed target architecture tdl description parser speci ed assembly language architecture database generated 
architecture database consists set ansi les data structures representing speci ed information target architecture functions initialise access manipulate de ned 
core system generic hardware speci knowledge required architecture database referenced 
target architecture generic core system linked generated les yielding dedicated hardware sensitive postpass optimizer 
generated assembly parser reads input programs reconstructs control ow graphs 
control ow graph required program representations data dependence control dependence graphs calculated 
optimizations integer linear programming ilp allow phase coupled modeling instruction scheduling register assignment resource allocation precisely account hardware characteristics target architecture :10.1.1.12.8498
generated integer linear programs solved exactly novel ilp approximations 
approximations allow calculation time models drastically reduced obtaining solution quality superior conventional graphbased approaches :10.1.1.12.8498
optimization scope restricted basic blocks dedicated superblock concept allows optimization scope extended basic block loop boundaries 
superblock mechanism allows ilp high quality optimizations combined fast graph heuristics 
way ilp optimizations restricted frequently code sequences inner loops providing computation times acceptable practical :10.1.1.12.8498
experimental results section focuses experience gained tdl illustrate design goals application eld tdl description language 
framework retargeted di erent target architectures 
generate ilp postpass optimizers widely contemporary digital signal processors considerably di erent hardware characteristics analog devices adsp philips tm 
hardware characteristics adsp tm known phase coupled code optimization provided tdl descriptions 
especially includes constraints modelling irregular restrictions instruction level parallelism 
optimizer performs integrated instruction scheduling register assignment tm optimizer couples instruction scheduling functional unit binding 
sec 
sec 
experimental evaluation optimizers shortly summarized 
evaluation shows hardware description language tdl enables signi cant improvements code produced production quality compilers achieved short retargeting time 
platform implement hardware speci postpass optimizations neon microprocessor family part commercial postpass optimizer :10.1.1.12.8498
tdl descriptions exist neon dsp motorola cold re ti :10.1.1.12.8498
including comments tdl les contain lines cpp preprocessor size reduced 
time develop test tdl description new architecture ranges weeks experienced user months users 
adsp adsp digital signal processor irregular architecture restricted instruction level parallelism 
vliw execution model machine operations grouped long instructions executed parallel 
memory banks available con gured program data memory program memory store instructions data 
fig 

optimization results adsp 
data accesses program memory data memory executed parallel restricted set addressing modes speci address registers 
arithmetic operations executed parallel memory accesses control ow operations executed parallel arithmetic operations 
additionally restricted parallelism alu multiplier 
alu multiplier operations combined multifunctional instruction executed parallel 
presupposition input operands located register speci register group heterogeneous general purpose register le 
operand located register group operation feasible part multifunctional instruction cf 
sec 

generating high quality code requires phase coupled modeling instruction scheduling register assignment 
experiments performed sunos sparc ultra enterprise generated integer linear programs solved cplex library :10.1.1.12.8498
investigated input programs typical applications digital signal processing 
comprise computation routines benchmark hand written assembly programs 
input programs benchmark compiled assembly code gcc compiler 
hand crafted assembly programs explicitly sequentialized input programs available parallelism exploited 
input programs contain 
overview results representative input programs fig 

fig 
comparison code quality shown number compacted instructions exact provably optimal ilp solution exact compared result fastest ilp approximation app generic list scheduling algorithm highest level rst heuristic ls schedule input programs :10.1.1.12.8498
order ensure conservative comparison optimal register assignment input list scheduling algorithm explicitly computed ilp methods 
programs marked asterisk sequentialized hand crafted assembly programs programs number instructions input program corresponds number 
cases ilp approximations produce optimal results optimal number instructions exceeded approximative computations :10.1.1.12.8498
computation time ilp approximations ranges seconds minutes input programs containing instructions 
superblock mechanism allows combine fast heuristic methods generate highly optimized code hotspots important executed code sequences inner loops acceptable computation time 
register assignment input programs list scheduling algorithm optimal code quality lower ilp methods 
largest deviation investigated programs suboptimal register assignment input program di erence grow signi cantly larger 
code produced gcc compiler exceeds optimal number instructions average 
philips tm tm multimedia processor vliw architecture instruction scheduling interacts slot allocation problem 
long instruction word composed issued simultaneously 
operations assigned issue slots instruction word assignment operations issue slots restricted 
assignment issue slots determines operations executed parallel 
operations synchronized respect write back bus operations may write result simultaneously bus 
di erent operations di erent execution times non trivial problem 
overview results representative input programs fig 

input programs generated highly optimizing philips compiler 
fig 
number compacted instructions exact provably optimal ilp solution exact compared result fastest ilp approximation app generic list scheduling algorithm highest level rst heuristic performs resource allocation ls schedule input programs :10.1.1.12.8498
cases compiler produces optimal results input programs code improved signi cantly 
code quality ilp approximation high 
investigated programs produces optimal result remaining programs optimal number instructions exceeded 
computation time ranges seconds minutes input fig 

optimization results tm 
programs containing instructions 
superblock mechanism allows combine fast heuristic methods generate highly optimized code hotspots acceptable computation time 
schedule produced generic list scheduling algorithm exceeds optimal number instructions average 
hand crafted assembly programs er high level parallelism special dsp operations assigned issue slots 
programs interaction instruction scheduling resource allocation signi cant ect apparent result list scheduling algorithm 
optimal number instruction exceeded respectively 
outlook article machine description language tdl 
tdl designed support generating machine dependent postpass optimizers program analyzers assembly level 
focus embedded processors irregular hardware architectures traditional code generation optimization techniques fail achieve satisfactory code quality 
tdl assembly oriented provides generic modeling irregular hardware constraints allows exploited generic graph search optimization algorithms 
extendibility tdl dedicated abstraction mechanisms provide easy integration tdl di erent target applications 
system developed retargetable framework high quality code optimizations machinedependent program analyzes assembly level 
allows machine speci postpass optimizers automatically generated tdl speci cation 
optimizers generated heuristic algorithms exact approximative ilp methods 
short retargeting time signi cant improvements code produced production quality compilers achieved 
tdl implementing hardware sensitive postpass optimizations framework part commercial postpass optimizer 
tdl descriptions written various contemporary embedded processors speci cations concise produced short time 
research aims di erent directions 
ongoing extend tdl language modeling superscalar architectures complex pipelines 
generation cycle accurate instruction set simulators tdl speci cation goal 
ongoing develop interface tdl program analyzer generator pag 
allows program analyzer speci cation generate hardware sensitive program analyzers di erent target architectures 
examples value analyzes allow disambiguate memory accesses remove spurious data dependences guarded code 
furthermore modeling additional processors planned 

absint angewandte informatik gmbh 

code compaction st 
user documentation version 
www absint com 

analog devices 
adsp user manual 

barbacci 
instruction set processor speci cations isps notation applications 
ieee transactions computers jan 


functional speci cation retargetable system assembly language transformation optimization rev beta 
inria 


retargetable instruction scheduling pipelined processors 
phd thesis technical report university washington 

henry eggers 
marion system retargetable instruction scheduling 
proceedings pldi pages 

davidson ramsey 
machine descriptions build tools embedded systems 
proceedings acm sigplan workshop languages compilers tools embedded systems pages 
springer lncs volume june 

van 
describing instruction set processors nml 
proceedings european design test conference pages 
ieee 

khare ganesh dutt nicolau 
expression adl system level design exploration 
technical report university california irvine 


isdl instruction set description language version 
technical report mit rle apr 

ganesh khare dutt nicolau 
expression language architecture exploration compiler simulator retargetability 
proceedings date 

devadas 
instruction scheduling resource allocation scheduling aviv retargetable code generator 
proceedings design automation conference san francisco california 
acm 

ilog ilog cplex 
user manual 

neon www neon com 

architecture manual 


tdl hardware assembly description language 
technical report tdl saarland university 


retargetable system postpass optimisations analyses 
proceedings acm sigplan workshop languages compilers tools embedded systems june 


retargetable code optimisation integer linear programming 
phd thesis saarland university 


ilp approximations retargetable code optimization 
international conference optimization techniques applications 


code optimization integer linear programming 
editor proceedings th international conference compiler construction cc pages 
springer lncs mar 

wilhelm 
generic control flow reconstruction assembly code 
proceedings acm sigplan joined conference languages compilers tools embedded systems software compilers embedded systems scopes june 

van ki goossens 
chess retargetable code generation embedded dsp processors 
pages :10.1.1.22.1791
kluwer 

leupers 
retargetable code generation digital signal processors 
kluwer academic publishers 

schaefer 
vhdl hardware description design 
kluwer academic publishers 
edition 

martin 
generation program analyzers 
phd thesis saarland university 

marwedel goossens 
code generation embedded processors 
kluwer boston london 

motorola mcf integrated microprocessor user manual aug 
mcf um rev 

nowak 
graph retargetable microcode compilation mimola design system 
th annual workshop microprogramming pages 

ho mann meyr 
lisa machine description language cycle accurate models programmable dsp architectures 
proceedings design automation conference 

philips electronics north america 
tm preliminary data book 

ramsey fernandez 
specifying representations machine instructions 
acm transactions programming languages systems may 

siemens 
user manual version 
siemens ag 
www neon com 

spam research group www ee princeton edu spam 
spam compiler user manual sept 

texas instruments 
tms xx programmer guide 

thomas 
verilog hardware description language 
kluwer academic publishers 
edition 

wilhelm maurer 
compiler design 
addison wesley 

schl ager meyr 
dsp oriented benchmarking methodology 
proceedings international conference signal processing applications technology 
