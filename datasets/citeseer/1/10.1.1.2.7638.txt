ieee international symposium performance analysis systems software march programs repetitive similar behavior seen different execution times 
proposed algorithms automatically group similar intervals execution phases intervals phase homogeneous behavior similar resource requirements 
examine different program structures capturing phase behavior 
goal compare size accuracy structures performing phase classification 
focus profiling frequency program level structures independent underlying architecture performance metrics 
allows phase classification different hardware designs support instruction set isa 
compare basic blocks loop branches procedures opcodes register usage memory address information guiding phase classification 
compare different structures terms ability create homogeneous phases evaluate accuracy structures pick simulation points simpoint 
behavior program random programs execute exhibit cyclic behavior 
research shown possible accurately identify predict phases program execution 
identify phases break program execution contiguous non overlapping intervals 
interval continuous portion execution slice time program 
results fixed interval size instructions 
phase set intervals program execution similar behavior regardless temporal adjacency 
means phase may appear times program executes 
phase classification partitions set intervals phases similar behavior 
phases discover specific input run program 
prior showed possible accurately perform phase classification examining code executed 
compare program level structures guide phase classification 
goal compare size accuracy structures performing phase classification 
explore trade offs detecting phase behavior profiling basic blocks loop structures phase classification jeremy lau stefan brad calder department computer science engineering university california san diego jl calder cs ucsd edu branches procedures instruction mix register usage memory address information 
compare contrast effectiveness program structure phase classification guide picking simulation points sim point 
methodology metrics performed analysis spec programs ammp bzip gcc gzip mcf perl 
programs run inputs bzip gcc gzip run multiple inputs 
calculating averages results programs multiple inputs averaged program representative result average 
programs executed start completion simplescalar gather performance intervals complete execution program 
log reset statistics instructions 
baseline microarchitecture model detailed table 
chose programs interesting challenging phase classification prior studies 
collect frequency vector profiles atom 
metrics evaluating phase classification phases intervals similar program behavior way measure effectiveness phase classification examine similarity program metrics phase 
focus performance terms cycles instruction cpi phase 
classifying program intervals phases examine phase calculate average cpi intervals phase 
calculate standard deviation cpi phase divide standard deviation average get coefficient variation cov 
cov measures standard deviation percentage average 
cov compare different phase classification algorithms 
better phase classifications exhibit lower cov 
intervals phase exactly cpi cov zero 
calculate cov metric phase classification cov phase weighting percentage execution phase accounts summing weighted 
results metric compare different phase classification algorithms program 
way set associative byte blocks cycle cache latency way set associative byte blocks cycle cache latency way set associative byte blocks cy cache cle latency main memory cycle latency hybrid bit gshare bit predictors branch pred bimodal predictor order issue operations cycle issue entry re order buffer mem load store queue loads may execute prior store addresses known registers integer floating point integer alu load store units fp adder func units integer mult div fp mult div byte pages cycle fixed tlb latency virtual mem earlier issued instructions complete table baseline simulation model 
represents average percentage deviation phase classification exhibits 
phase classification simpoint focus research investigate different program information guide automated phase classification 
section summarize simpoint phase classification approach 
profiling granularity identify phases need decide frequently monitor program behavior 
divide execution program contiguous non overlapping intervals length instructions 
prior showed repetitive interesting phase behavior seen granularity instructions time scale operating system time slices 
gather profile information instructions executed run simpoint phase classification algorithm data 
data structures capture phase behavior data structures proposed collecting profiling information interval guide phase classification 
working set size interval execution keep track total working set size information profiled 
data may mean keeping track total number unique words pages referenced interval 
similarly code keep track number unique basic blocks executed interval 
working set bit vectors interval execution bit vector keeps track item encountered interval 
bit vectors expressive working set size bit vectors distinguish intervals working set size different items code data addresses accessed 
frequency vectors interval execution vector records frequency profile items encountered 
similar working set bit vectors just keeping track item referenced keep track number times item referenced 
frequency profiles expressive bit vectors indicate parts working set 
example frequency vectors differentiate intervals execute parts code happen exercise code differently emphasize different paths loop 
smith proposed bit vectors track code working set phase classification 
sherwood proposed frequency vector profiles perform phase classification 
frequency vectors track proportions code executed interval bit vectors track parts code executed working set relative frequencies execution 
smith conducted study compare basic block frequency vectors bit vectors procedures branches instructions goal detecting phase changes programs 
study focused phase change detection focus phase classification different problems 
phase classification problem grouping program execution intervals similar behavior regardless temporal adjacency 
phase change detection problem identifying phase changes temporally adjacent execution intervals 
working set bit vectors perform frequency vectors phase change detection 
examined techniques automated phase classification report results frequency vectors due space considerations 
working set bit vectors working set size sufficient identifying phase changes provide sufficient resolution line phase classification compared frequency vectors 
basic block frequency vectors prior approach basic block vector metric designed capture information changes program behavior time 
basic block single entry single exit section code internal control flow 
formally basic block vector dimensional array element array corresponds static basic block program 
start containing zeroes interval 
interval count number times basic block program entered record count 
example th basic block executed times 
weighted results section multiply count number instructions basic block basic blocks containing instructions weight 
interval normalize basic block vector dividing element sum elements vector 
compare intervals application execution 
intuition behavior program time directly related code executed interval 
basic block vectors fingerprints interval execution vector tells portions code executed frequently portions code executed 
comparing intervals evaluate similarity intervals 
similar intervals spend amount time roughly code performance intervals similar 
study frequency vectors generalization basic block vectors track relative frequencies events 
example loop vectors track relative frequencies execution loop branches 
collect frequency vectors program structures procedures opcodes register usage instruction mix memory access patterns 
clustering phase classification frequency vectors provide compact representative summary program behavior interval execution 
examining similarity clear high level patterns program execution 
exploit phase behavior useful automated way extracting phase information programs 
break complete execution program smaller groups phases similar frequency vectors algorithms machine learning clustering shown effective 
frequency vectors relate performance program grouping intervals frequency vectors produces phases similar distribution program structures architecture metric measured including performance 
goal clustering divide set points groups points group similar metric distance points different groups different 
known clustering algorithm means accurately break program behavior phases 
random linear projection reduces dimensionality input data disturbing underlying similarity information speed execution means 
serious drawback means algorithm requires value input number clusters look 
address run algorithm values goodness score guide final choice steps summarize phase clustering algorithm high level 
refer interested reader detailed description step 

profile program dividing program execution contiguous intervals size instructions 
interval collect frequency vector tracking program program structure basic blocks loops register usage 
generates frequency vector interval 
frequency vector normalized sum elements equals 
reduce dimensionality frequency vector data dimensions random linear projection 
advantage performing clustering projected data speeds means algorithm significantly reduces memory requirements orders magnitude original vectors 

run means clustering algorithm reduced dimensional data values maximum number phases detected 
run means produces clustering partition data different phases clusters 
step means algorithm compares similarity intervals grouping phases 
run means begins random initialization step requires random seed 

compare evaluate different clusters formed different bayesian information criterion bic measure goodness fit clustering dataset :10.1.1.19.3377
formally bic approximation probability clustering data clustered 
larger bic score higher probability clustering fit data 
clustering fitness clustering bic scored bic formulation 

final step choose clustering smallest bic score best score 
clustering chosen final grouping intervals phases 
algorithm groups intervals phases 
euclidean distance vectors similarity metric 
algorithm various types frequency vectors evaluate different program structures guide phase classification 
set number instructions interval maximum value try different random seeds value set bic score threshold relative maximum score 
phase classification guide simulation modern computer architecture research crucial understand cycle level behavior processor running application 
gain insight detailed cycle level simulators typically employed 
unfortunately level detail comes cost simulation time simulating full execution industry standard benchmark fastest simulator take weeks months 
long simulation times mean feasible simulate small portion program important section simulated accurate representation program behavior 
line phase classification described provides accurate efficient solution problem 
intervals execution classified phases program input single representative phase selected estimate behavior remaining intervals performing detailed simulation representative extrapolating 
choose representative pick interval closest center centroid cluster 
selected interval phase called simulation point phase 
perform detailed simulation selected simulation points phase 
performance results simulation point weighted size number intervals cluster represents 
combining weighted results simulation points gives accurate representation complete execution program input pair significantly reduces simulation time 
approach distributed part simpoint tool 
goal identify alternative structures accurately succinctly capture phase information 
improve efficiency simpoint phase classification techniques reducing amount information collected processed 
comparing different structures phase classification evaluate accuracy finding simulation points guide simpoint simulation 
code phase classification section consider tracking code isa instruction mix register usage structures phase classification 
control flow structures prior phase classification basic block frequency vectors 
start examining accuracy phase classifications loops procedures compare basic blocks 
tracking procedures create frequency vector entry static procedure program 
tracking loop branch frequency vectors create vector dimension entry intra procedural backward branch 
performing analysis binary level adequate approximation identifying loop branches 
table shows number static basic blocks loops procedures benchmarks 
number shows static frequency vector size structure number parenthesis shows percentage static entries encountered average interval execution 
results show times basic blocks loop branches twice loop basic block loop procedure max avg max avg max avg ammp bzip gcc gzip mcf perl average table maximum vector length average number non zero vector elements 
averages expressed percentage maximum 
branches procedures 
terms seen execution interval average basic blocks executed loop branches procedures 
examine types code vectors weighted number instructions executed unweighted 
original basic block vectors entry represented execution count basic block multiplied number instructions basic block 
weighted vectors 
unweighted vectors vector entry counts number times structure encountered considering number instructions executed structure 
results called basic block loops procedures vectors weighted instruction frequencies 
unweighted results front basic block loops procedures 
perform comparison easier phase tracker count number occurrences basic block loop procedure count number instructions executed 
retain phase consistency accuracy unweighted information simplify line dynamic phase identifiers trackers 
weighted structures represent basic blocks frequency vector entry indicates number instructions executed basic block execution interval 
loops loop vectors record number instructions executed inside loop execution interval 
nested loops instruction execution associated current loop nesting level 
loop vector entry records number instructions executed loop nesting level 
procedures procedure vectors record number instructions executed inside hierarchical procedure execution interval 
unweighted structures represent unweighted basic blocks frequency vector entry indicates number times basic block executed execution interval 
unweighted loops frequency vectors record number times loop branch executed execution interval 
cov cpi bb loops procs loops procs average cpi coefficient variation cov phase code vectors lower better 
cov measures standard deviation percentage average 
average cpi cov phases program producing metric measures homogeneity phases discovered program 
cpi error bb loops procs loops procs percent error cpi estimation code vectors guide selection simulation points 
cov cpi cpi error uw bb uw loops uw procs uw loops procs ammp bzip graphic bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf perl ammp perl bzip graphic average bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf perl perl average ammp bzip graphic bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf ammp perl bzip graphic perl bzip program average bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf perl perl average average cpi coefficient variation unweighted code vectors uw bb uw loops uw procs uw loops procs percent simpoint cpi error unweighted code vectors 
unweighted procedures frequency vectors record number times procedure invoked called execution interval 
shows cov cpi weighted basic blocks loops procedures combination loops procedures 
loops procs execution interval loop vector procedure vector concatenated higher dimension vector sent simpoint perform phase classification 
cov cpi results show instances tracking procedures works phase classification tracking procedures performs worse identifies homogeneous 
find loop intensive benchmarks perform significantly worse tracking procedures determine intra procedural control flow 
determine program spending significant amount time procedure 
particular significant number intervals fall entirely single procedure 
find loop vectors results similar cov cpi basic block vectors 
tracking procedures works applications tracking procedures addition loops provides slightly better performance 
shows error cpi estimation code structures choose simulation points 
representative interval containing instructions chosen phase see section 
results show benchmarks tracking procedures loops results approximately cpi errors combining provides slightly better results get best method 
shows cov cpi unweighted code vectors 
comparing results weighted results see removing weights significantly affect cov cpi basic block vectors loop vectors 
result promising implications profilers line phase analysis applications easier track unweighted vectors 
procedure vectors hand perform quite bit worse weighting removed 
shows error estimated cpi unweighted code vectors 
results show weights useful guiding selection simulation points 
average error estimated cpi doubles basic block vectors triples loop vectors 
unweighted loops procs average error rate 
profiling instruction mix alternative tracking code constructs track instruction mix 
consider tracking types information memory instructions maintain vector entry static load store instruction program 
frequency vector entry keeps track number times load store executed 
cov cpi ammp bzip graphic bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random load store op gzip source mcf average cpi coefficient variation instruction vectors 
cpi error ammp bzip graphic bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf perl perl perl perl average load store op percent simpoint cpi error instruction vectors 
opcodes instruction mix frequency vector contains entries entry represents unique opcode alpha isa 
vector length fixed programs 
frequency vector interval represents number times opcode executed 
figures show cov cpi error simpoint estimated cpi performing phase classification load store instructions instruction mix 
results show tracking loads stores opcodes performs comparably tracking basic block vectors terms cov cpi 
consider vectors simpoint cpi estimation find tracking loads stores opcodes perform slightly worse compared tracking basic blocks average 
particular maximum errors slightly higher 
average cov cpi cpi error cov cpi cpi error def def op def average cpi coefficient variation register vectors 
def def op def ammp bzip graphic bzip program bzip source gcc gcc gcc expr ammp gcc integrate bzip graphic gcc bzip program gzip graphic bzip source gzip log gzip program gcc gzip random gcc gzip source gcc expr mcf ammp gcc integrate perl bzip graphic gcc perl bzip program gzip graphic average bzip source gzip log gzip program gcc gzip random gcc gzip source gcc expr mcf gcc integrate perl gcc perl gzip graphic average gzip log gzip program gzip random gzip source mcf perl perl average percent simpoint cpi error register vectors 
local stride global stride local stride hash global stride hash loops local average cpi coefficient variation memory vectors 
local stride global stride local stride hash global stride hash loops local ammp bzip graphic bzip program bzip source gcc gcc gcc expr gcc integrate gcc gzip graphic gzip log gzip program gzip random gzip source mcf perl perl average percent simpoint cpi error memory vectors 
phase profiling registers consider register usage information guide phase classification 
register definitions track number times register number destination register execution interval 
alpha isa integer registers floating point registers 
distinguish floating point integer registers floating point register integer register map element vector vectors contain entries programs 
registers number times register number operand execution interval 
vector contains entries register number 
consider combinations definitions uses opcodes definitions uses 
combining vectors concatenate vectors opcodes definitions uses vectors entries feeding simpoint phase classifier 
shows cov cpi vector types 
graph indicates expected vectors information dimensions effective phase classification 
shows error simpoint estimated cpi vector types 
benchmarks consider find tracking register definitions effective guiding selection simulation points performing comparably basic block vectors 
number entries static programs relatively small result accurate phase classification register vectors attractive structures study 
may particularly interesting dynamic hardware phase classification architecture 
cov different architecture metrics examine benefit phase information guide sampling 
find samples taken single phase exhibit variation metrics compared samples taken intervals 
break execution program intervals instructions calculate coefficient variation cov intervals execution 
represents variation seen randomly sampling complete execution workload 
issue arises impact infrequently occurring events 
example program exhibits instruction cache misses small change number instruction cache misses appear huge change calculate percentage change essentially cov measures 
reduce impact rare events include average results benchmarks events occur instructions executed 
filter instruction cache misses data cache misses second level cache misses branch mispredictions 
average cov filter cpi il dl ul br bb def loops procs uw loops procs program average coefficient variation phase cpi instruction cache misses data cache misses nd level cache misses branch mispredictions 
program contributes average averages instructions executed 
set bars marked program show average cov metric intervals program 
shows average cov cpi instruction cache misses data cache misses second level cache misses branch mispredictions phase selection vector types consider 
bars far right show cov run program 
graph shows cov architectural metrics significantly stable phases discover considering program 
data phase classification section discuss evaluation performing phase classification memory profiling techniques 
local stride build frequency vector captures distribution strides exhibited load store program 
see load accessing memory location load previously accessed memory location increment third element frequency vector 
global stride similar local stride tracking stride load store program keep track stride temporally adjacent memory accesses loads stores tracked separately 
see load accesses memory location load saw accessed memory location increment fourth element frequency vector 
global stride vectors attractive profiling perspective profiler needs keep track addresses memory addresses loaded stored 
comparison local stride vectors require profiler keep track memory address accessed load store 
local stride pc hash local stride hash index frequency vector lower bits pc current load store 
combining aspect code executed memory access pattern hope characterize code executed data accessed interval 
global stride pc hash global stride hash index frequency vector bits pc current load store 
loops local stride concatenate vectors produced loop tracker vectors produced local stride tracker 
noted vectors large 
reduce amount data store allow memory vectors grow elements 
indices calculated modulo max vector size 
limiting maximum vector size results collisions thought part process random projection occurs vectors clustered 
shows coefficient variation cpi memory vectors 
expressive vectors local stride pc hash local stride loops resulted lowest cpi cov 
global stride vectors produce clusterings higher cpi cov local may acceptable alternative local stride vectors applications 
shows error calculated cpi type memory vector guide choice simulation points 
combination loops local stride produce lowest errors estimated cpi 
cpi error results memory vectors consistent cpi cov results 
estimated cpi error phase additive may cancel 
representative phase lower cpi actual average cpi phase representative phase higher cpi average phase errors hidden 
converse true terms errors additive 
reason high correlation cpi cov simpoint cpi error 
addition memory profiling techniques discussed experimented memory profiling techniques success 
briefly describe successful techniques 
memory working set size kept track number unique words memory accessed interval working set size bit unsigned integer 
space efficient profiling data structure informative 
technique simply provide information phase classification 
contrast problem phase change detection working set size indicator phases change 
working set bit vectors bit vector similar 
memory access lower bits address dropped result hashed bit vector 
bit vector indicates memory working set size memory chunks accessed 
interval classify relative distance metric code bit vectors group phases smallest relative distance threshold 
bit vectors memory accesses perform nearly bit vectors instruction accesses 
large part due higher dimensionality memory accesses 
memory locations accessed bit vector subject aliasing 
increasing bit vector size bits reduced aliasing somewhat memory bit vector highly sensitive noise 
due larger vector size necessary noise sensitivity memory bit vectors code data addresses classified significantly phases methods examined 
memory bit vectors may adequate detecting phase changes perform goal phase classification 
memory access frequency vectors element frequency vector counter contiguous bytes memory 
word memory accessed increment counter corresponding byte region word lies 
vectors phase classification intervals different memory access vectors similar behavior 
occurred intervals similar behavior walked different parts memory 
realization motivation memory stride vectors described 
comparison section summarize compare effectiveness various types vectors discussed 
shows average cpi cov vector types shows average error estimated cpi vectors guide selection simulation points 
clear vector types experiment produce accurate phase classifications low overhead 
shows average number phases detected vector type 
see vector types detect phases average 
interesting note register vectors result detection fewer phases compared basic block vectors cpi cov significantly affected 
comparison multiple cache configurations metrics track independent underlying performance metrics tied particular architecture isa 
phase behavior discover appear different architecture configurations 
evaluate claim compute cov cpi simpoint error estimated cpi processors different memory hierarchy configurations 
produce configurations start baseline architecture average cov cpi bb def op op def load store local stride local stride hash global stride global stride hash loops local loops procs loops procs uw bb uw loops uw procs uw loops procs def average cpi coefficient variation vector types 
average cpi error bb def op op def load store local stride local stride hash global stride global stride hash loops local loops procs loops procs uw bb uw loops uw procs uw loops procs def average percent simpoint cpi error vector types 
average number clusters bb def op op def load store local stride local stride hash global stride global stride hash loops local loops procs loops procs uw bb uw loops uw procs uw loops procs def average number phases detected vector types 
gcc cpi actual bb loops procs def memory hierarchy configurations actual cpi calculated cpi different memory hierarchy configurations gcc 
point axis represents different configuration 
vary latency size associativity caches memory described 
shows actual cpi estimated cpi various vector types gcc 
clear estimated cpi actual cpi highly correlated vector types consider different architectures gcc benchmark complex phase behavior 
indicates phases discovered estimate performance different architecture configurations 
performance phase homogeneous architectures different memory hierarchies 
shows cov cpi averaged gcc gzip graphic architecture configurations error estimated cpi 
note results programs difficult compare results previous section programs 
ideally show configurations benchmark input pairs huge amount simulation time required 
results show tracking alternative program structures register usage loops accurately capture program behavior low overhead different memory hierarchy configurations 
summary focused performing phase classification tracking program structures 
structures track independent underlying architecture metrics 
phases discover tied particular architecture configuration 
prior approach phase classification basic block frequency vectors focus examine different program isa level structures accurately concisely perform phase classification 
main observations weighted loop frequency vectors result low cov cpi basic blocks vectors 
tracking unweighted cov cpi cpi error def loops procs uw bb def gcc gzip graphic average loops uw loops local stride hash local stride hash op def global stride hash bb def load store uw loops procs global stride hash local stride uw loops procs procs gcc gzip graphic average cpi coefficient variation calculated cpi error vector types averaged different configurations 
loop vectors provides slightly accurate results shorter vectors shown table 
tracking register usage results phase classifications slightly accurate results terms cov metrics basic block vectors shorter vectors 
register usage vectors particularly attractive small size length register vector equal number registers instruction set 
compared basic block vectors register vectors quite efficient 
profiling memory strides produces phase classifications slightly accuracy basic block vectors memory vectors significantly longer basic block vectors 
hashing local stride pc current memory access instruction combining local stride loop vectors produced slightly lower cov 
register vectors loop vectors efficient effective alternatives basic block vectors phase classification 
acknowledgments anonymous reviewers providing helpful comments 
funded global stride uw loops loops loops procs uw bb op op def local stride load store global stride op procs def bb uw procs uw procs part nsf 
ccr nsf 
acr uc micro intel microsoft 

memory hierarchy energy performance general purpose processor architectures 
th annual international symposium microarchitecture december 
burger austin 
simplescalar tool set version 
technical report cs tr university wisconsin madison june 
dasgupta 
experiments random projection 
uncertainty artificial intelligence proceedings sixteenth conference uai pages san francisco ca 
morgan kaufmann publishers 
smith 
dynamic microarchitecture adaptation designed virtual machines 
international solid state circuits conference february 
smith 
managing multi configuration hardware dynamic working set analysis 
th annual international symposium computer architecture may 
smith 
comparing program phase detection techniques 
th annual international symposium microarchitecture december 
duesterwald dwarkadas 
characterizing predicting program behavior variability 
th international conference parallel architectures compilation techniques october 
macqueen 
methods classification analysis multivariate observations 
neyman editors proceedings fifth berkeley symposium mathematical statistics probability volume pages berkeley ca 
university california press 
pelleg moore 
means extending means efficient estimation number clusters 
proceedings th international conf 
machine learning pages 
morgan kaufmann san francisco ca 
calder 
picking statistically valid early simulation points 
international conference parallel architectures compilation techniques september 
sherwood calder 
basic block distribution analysis find periodic behavior simulation points applications 
international conference parallel architectures compilation techniques september 
sherwood calder 
automatically characterizing large scale program behavior 
th international conference architectural support programming october 
sherwood calder 
phase tracking prediction 
th annual international symposium computer architecture june 
srivastava eustace 
atom system building customized program analysis tools 
proceedings conference programming language design implementation pages 
acm 
