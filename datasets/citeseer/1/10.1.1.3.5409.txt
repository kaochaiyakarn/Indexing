system goals intruder anti goals attack generation resolution security requirements engineering axel van lamsweerde simon renaud de david janssens partement ing informatique universit catholique de louvain louvain la neuve belgium avl sbr rdl dja info ucl ac 
caring security requirements engineering time message received attention 
clear achieve systematically various stages requirements engineering process 
briefly introduce requirements process meet high assurance provided resulting requirements product 
constructive approach security requirements elicitation modeling analysis outlined attempt address meta requirements 
approach framework developed generating resolving obstacles requirements achievement 
framework integrates intentional obstacles set attackers break security goals 
attack trees derived systematically anti goal refinement leaf nodes reached software vulnerabilities observable attacker implementable attacker 
new security requirements derived resolution attack trees generated 

security increasingly growing concern internet age 
number security incidents reported cert growing exponentially past decade cert 
software applications ubiquitous heterogeneous mission critical vulnerable kem attackers malicious sophisticated attack technology consequences attacks may devastating point breaking severe safety critical concerns 
example reports denial service medical records prevented urgent surgery undertaken right conditions cert 
unsurprisingly major source vulnerability recognized poor quality software vie 
far research concerned state art fairly unbalanced far 
wing noted strength security guarantee provided current security technology inversely proportional size software layer technology applies win 
contrast size problem space size solution space summarized fig 

secure software layers security guarantee application languages systems protocols crypto application languages systems protocols crypto fig 
security problem space vs security solution space win context project aims bring researchers requirements engineering lam lam programming languages har roy computer security joy joy develop integrated vertical set security engineering techniques application language layers application specific security requirements engineering secure architecture design secure programming platform implementation stands ing de 
presents ongoing security requirements engineering side project 
start briefly reviewing section critical meta requirements development processes high assurance systems including security critical ones 
proceedings re workshop requirements high assurance systems monterey ca sept address problem specifying security related requirements eliciting goal oriented requirements engineering framework section 
section outlines analysis techniques generating resolving obstacles goal achievement extended integrate intentional obstacles set attackers want break security goals new security requirements derived attack generation resolution 
section illustrates ideas rational reconstruction known attacks resolutions webbased banking services 

problems challenges high assurance systems high assurance systems computer systems compelling evidence required system delivers services manner satisfies certain critical properties safety security fault tolerance survivability lea 
requirements ideal development process systems derived trivially recognized evidence related definition 
evidence defects expensive critical 
req high assurance concerns carefully considered requirements time required properties related safety security fault tolerance survivability precise inter related analysis positive negative interactions preserved transition downstream companion products 
evidence posteriori detection resolution defects may endlessly generate defects 
req constructive approach adopted properties construction guaranteed seamlessly system development 
evidence high assurance requires stronger level guarantee 
req elaboration process formal possible supported formal analysis tools compelling evidence provided 
req formalism required requirement lightweight usable early possible requirements engineering process 
evidence general objectives safety security fault tolerance survivability refined complete consistent set application specific requirements entailing 
requirements requirements elaboration process goal oriented objectives guaranteed met lower level operational requirements incremental partial models analyzed early stepwise respect higher level objectives alternatives considered relying rich multiple models facets complex system captured analyzed objectives open smooth roundtrip transitions informal semi formal formal requirements architecture risks leaks transitions minimized 
evidence positive negative interactions functional requirements related requirements easily analyzed requirements specification keeps separate rob 
req requirements specification structured way keeps functional safety security requirements separate 

bits goal oriented requirements engineering briefly recall concepts techniques involved requirements engineering method developed address requirements lam lam discussing concepts techniques extended engineer security requirements specific way 
goal prescriptive statement intent system existing satisfaction general requires cooperation agents forming system 
agents active components humans devices legacy software software components play role goal satisfaction 
agents define software define environment 
goals may refer services provided functional goals quality service nonfunctional goals 
goals domain properties descriptive statements environment physical laws organizational norms goals organized refinement abstraction structures higher level goals general strategic coarse grained involve multiple agents lower level goals general technical finegrained involve agents dar dar 
structures refinement links relate goal set subgoals called refinement possibly conjoined domain properties means satisfying subgoals refinement sufficient condition domain satisfying goal 
refinement links relate goal alternative set refinements means satisfying refinements sufficient condition domain satisfying goal 
goal refinement ends subgoal realizable individual agent assigned expressible terms conditions monitorable controllable agent :10.1.1.16.4054
requirement terminal goal responsibility agent software expectation terminal goal responsibility agent environment requirements expectations enforced software 
goals prescribe intended behaviors formalized real time temporal logic dar 
semiformal keywords achieve avoid maintain provided name goals temporal behavior pattern prescribe going temporal logic details 
softgoals prescribe preferred behaviors selecting preferred alternatives goal refinement graph chu 
goals operationalized specifications operations achieve dar operation distinction domain pre postconditions capture application operation means application domain required pre trigger postconditions capture requirements operations necessary achieving underlying goals 
goals concern objects entities associations events agents incrementally derived formulation produce structural model system represented uml class diagrams 
agents related interface object attributes monitor control respectively par 
obstacles introduced pot way guide elicitation identification scenarios lead goal violation 
declarative terms obstacle goal condition satisfaction may prevent goal achieved 
precisely obstacle said obstruct goal domain characterized set domain properties dom iff dom obstruction dom domain consistency obstacle analysis consists pessimistic view goals requirements expectations elicited stage 
principle identify ways breaking possible order resolve situation critical produce complete requirements robust systems 
formal techniques generation refinement obstacles available lam 
basic technique amounts precondition calculus regresses goal negations backwards known domain properties dom 
formal obstruction patterns may cheaper alternative formal derivations 
techniques allow domain properties involved obstructions incrementally elicited 
obstacles need resolved generated 
resolution tactics available generating resolutions notably goal substitution agent substitution goal weakening goal restoration obstacle prevention obstacle mitigation lam 
resolution select depends obstacle criticality likelihood occurrence high priority softgoals may impact selection 
selected resolution may deployed specification time resulting specification transformation lam runtime specification monitoring detects anticipates obstacle occurrences fea 
obstacle analysis recursive process may produce new goals new obstacles may need generated resolved 

preliminary elicitation security goals preliminary elicitation security related goals driven generic specification patterns associated specialization goal class confidentiality integrity availability privacy goals 
patterns expressed terms abstractions language meta model security specific language constructs 
subclass instantiation corresponding specification pattern sensitive objects object model yields corresponding candidates application specific security goals refined necessary 
example specification pattern confidentiality goals refers meta model elements agent object having generic attribute info capture definition confidentiality kem goal avoid ag agent ob object authorized ag ob info ob info pattern authorized predicate generic instantiated application specific domain definition web banking services certainly consider instantiation object account browsing object model introduce instantiating definition ag agent acc account authorized ag acc owns ag acc proxy ag acc manages ag acc pattern epistemic operator security specific construct defined knows value knows property operational semantics properties stored local memory agent ag 
agent knows property property local memory case property holds 
web banking services sensitive information accounts pair objects acc pin partof aggregation account linked object model match association instantiation yields confidentiality goal candidate inclusion goal graph goal avoid person acc account owns acc proxy acc manages acc acc acc acc pin principle applied elicit instantiations generic patterns privacy integrity availability goals maintain maintain achieve context security may worth recalling sensitive objects object model passive entities associations events active agents 

obstacle analysis revisited attack generation resolution noted lam obstacle refinement trees security goals correspond popular hazard trees called threat trees attack trees frequently modeling documenting known hazards potential attacks amo lev sch moo hel 
important differences 
obstacle trees goal anchored analyst knows exactly start analysis easier concentrate desired desired 
obstacle refinements formalized real time temporal logic generated systematically goal assertions domain properties regression techniques formal refinement patterns lam 
obstacle refinement trees may appear sufficient modeling resolving accidental non intentional obstacles security goals appear limited modeling resolving malicious intentional obstacles 
case active attacker modelled goals capabilities software vulnerabilities monitor control call anti models richer models anti goals intentional obstacles security goals want course distinguish clearly goals system consideration satisfy 
anti models lead generation subtle attacks discarding non realizable ones derivation effective customized resolutions 
anti models built systematically follows 

root anti goals obtained just negation confidentiality privacy integrity availability goals instantiated sensitive objects object model suggested previous section 

anti goal potential attacker agents elicited questions benefit anti goal known attacker taxonomies may help answering questions 

anti goal corresponding attacker class es identified attacker higher level elicited questions instances attacker class want achieve anti goal 
resulting anti goal graph fragments dual refinement abstraction process start aim reaching terminal anti goals realizable attacker agents identified software agents 
assigned attacker vulnerabilities assigned 
rightly fits common criteria definition vulnerability condition agent conjunction threat lead security requirement violation cc 
refinement abstraction process guided techniques asking questions anti goals available regressing anti goal assertions domain properties available lam applying formal refinement patterns notably milestone decomposition case pattern dar resolve lack monitorability resolve lack controllability patterns obstruction patterns lam :10.1.1.16.4054

anti goal refinement abstraction corresponding object agent anti models derived anti goal formulations boundary monitoring control interfaces attacker control includes software derived 

anti requirements operationalized terms capabilities corresponding attacker agent may include blind intelligent searching eavesdropping deciphering spoofing steps result multi component anti model relating attackers anti goals referenced objects anti operations achieve anti goals goals objects operations vulnerabilities 
goals formalized real time temporal logic logical models anti goals sets attack scenarios 
bounded sat solvers generate scenarios automatically 
rich attack models derived systematically way step exploit explore alternative resolutions derived 
preferred resolution selected criticality likelihood corresponding produce new security requirements 
new cycle anti goal analysis may need applied new requirements 
believe obstacle resolution operators may generate resolutions far direction support belief 
limited experience small case studies feeling obstacle prevention operator resulting new security goals form avoid frequently yields appropriate candidate goals refinement 
specific operators considered vulnerability condition attacker anti requirement condition uncontrollable attacker 
anti goals critical resolutions may deferred specification time run time intrusion detection technology 
experiments generating event expressions input intrusion detection system anti goal assertions temporal logic bro 

example web banking services illustrate critical steps procedure web banking services illustrate resolutions 
result step obtain anti goal negation confidentiality goal avoid obtained instantiation section achieve person acc account owns acc proxy acc manages acc acc acc acc pin asking sufficient conditions unauthorized know number pin account simultaneously symmetry multiplicity match association account numbers pins object model elicit domain properties person acc account owns acc proxy acc manages acc acc acc pin finds match acc acc acc acc acc pin owns acc proxy acc manages acc acc pin acc finds match acc pin acc acc acc pin regressing anti goal backwards domain properties see lam obtain anti goal alternative achieve person acc account owns acc proxy acc manages acc acc acc pin finds match acc acc achieve person acc account owns acc proxy acc manages acc acc pin acc finds match acc pin standard way resolving known limit number pin entries attempts 
second anti goal subtle corresponds sophisticated real attack reported san 
resolution obstacle prevention operator produce new requirement possibility exhaustive search account numbers matching fixed pin number avoided 
vulnerability anti goal assigned appeared conjunct needed achieve higherlevel anti goal 
similar derivation confidentiality requirement orders personal information web cd sales system derived vulnerability reported attacks wellknown cd sales order numbers appear page url shown order tracking service 

related proposals extending existing modeling notations capture attacker features requirements engineering time notably misuse cases complement uml cases sin sin ale abuse frames complement problem frames lin define scope boundary attacker 
extensions existing frameworks security requirements analysis include toronto group propose methodology framework yu identify attackers analyze propagate vulnerabilities agent dependency links suggest counter measures liu 
principle building catalogue known threat tree patterns documentation reuse instantiation nicely illustrated moo 
model checking technology generate analyze attack graphs 
state machine model network attack model attacker capabilities desired security property tools produce possible counterexample scenarios trying verify may seen upstream complement approach applied sooner process point earlier security problems requirements level generating attacks declarative goal anti goal models opposed operational state machine models need appropriately built reflect declarative specifications adequately 

requirements engineering approach modeling specifying security goals anti goals deriving attack trees systematically refinement leaf nodes reached vulnerabilities observable attacker implementable attacker 
anti goals seen intentional obstacles obstruct security goals 
new security requirements derived resolution generated attack trees 
approach extends kaos framework requirements elaboration extending specification language epistemic constructs reasoning attacker knowledge providing pattern approach preliminary formal elicitation security requirements generic specifications security related meta variables introducing dual modeling concepts richer modeling attacker universe adapting method elaboration dual anti models robust security requirements derived 
dual models goals requirements expectations environment software operations intentional obstacles security requirements implementable anti requirements software vulnerabilities attack primitives respectively 
approach attack tree generation goal directed requires preliminary elicitation applicationspecific security goals instantiation generic security requirement specifications applicationspecific sensitive objects 
appears natural way coping security issues application level primary concern 
research issues raised point apply sort attack tree derivation conflict conditions multiple goals lam attackers 
rich comprehensive meta model security requirements anti requirements look 
model trusted agents incorporate trust models framework 
build rich reusable libraries attack patterns fon resolution patterns 
propagate consequences security leaks models 
incorporate probabilistic reasoning frameworks reason partial satisfaction goals anti goals determine likelihood occurrences 
issues plan 

reported partially supported belgian fond national de la recherche scientifique regional government project rw conv 

ale alexander misuse cases cases hostile intent ieee software jan feb 
amo fundamentals computer security 
prentice hall 
bro gr obstacle monitoring implementation intrusion detection system 
thesis university namur july 
cc common criteria information technology security evaluation version aug www org cert www cert org stats cert stats html chu chung nixon yu mylopoulos nonfunctional requirements software engineering 
kluwer academic boston 
dar dardenne van lamsweerde fickas goal directed requirements acquisition science computer programming vol 

dar darimont van lamsweerde formal refinement patterns goal driven requirements elaboration proc 
fse fourth acm sigsoft symp 
foundations software engineering san francisco october 
fea feather fickas van lamsweerde reconciling system requirements runtime behaviour proc 
th international workshop software specification design ieee cs press april 
fon fontaine goal oriented elaboration security requirements 
thesis dept computing science university louvain june 
har haridi van roy brand mehl smolka efficient logic variables distributed computing acm transactions programming languages systems may 
hel wong honavar miller lutz software fault tree approach requirements analysis intrusion detection system requirements engineering journal vol 

joy quisquater importance securing bins garbage man middle attack matsumoto ed th acm conference computer communications security acm press pp 

joy quisquater moti power misbehaving adversaries security analysis progress cryptology ct rsa lectures notes computer science vol 
april 
kem kemmerer invited mini tutorial proc 
icse th intl 
conf 
software engineering portland ieee computer society press may 
lam van lamsweerde darimont letier managing conflicts goal driven requirements engineering ieee transactions software engineering special issue managing inconsistency software development november 
lam van lamsweerde requirements engineering year research perspective keynote proc 
icse nd international conference software engineering acm press 
lam van lamsweerde letier handling obstacles goal oriented requirements engineering ieee transactions software engineering special issue exception handling october 
lam van lamsweerde goal oriented requirements engineering guided tour invited proc 
re th intl 
symp 
requirements engineering toronto august pp 

lea mclean heitmeyer high assurance computer systems research agenda america age information national science technology council committee information communications forum bethesda 
letier van lamsweerde agent tactics goal oriented requirements elaboration proc :10.1.1.16.4054
icse th intl 
conf 
software engineering orlando ieee computer society press may 
letier van lamsweerde deriving operational software specifications system goals proc 
fse th acm sigsoft symp 
foundations software engineering charleston november 
lev leveson system safety computers 
addison wesley 
lin lin nuseibeh jackson moffett introducing abuse frames analyzing security requirements open university 
liu liu yu mylopoulos security privacy requirements analysis social proc 
re international conference requirements engineering monterey california september 
moo ap 
moore ellison linger attack modeling information security survivability technical note cmu sei tn march 
par parnas madey functional documents computer systems science computer programming vol 
pp 

pot potts schematic scenarios understand user needs proc 
dis acm symposium designing interactive systems processes practices techniques university michigan august 
rob robinson requirements interaction management acm computing surveys june 
roy van roy brand haridi lightweight reliable object migration protocol lecture notes computer science vol 
springer verlag october 
san dos santos vigna kemmerer security testing online banking service large international bank proceedings workshop security privacy commerce november 
sch schneier attack trees modeling security threats dr dobb journal december 
sch schneier secrets lies digital security networked world 
wiley 
haines jha lippmann automated generation analysis attack graphs proc 
ieee symp 
security privacy oakland ca may 
sin eliciting security requirements misuse cases proc 
tools pacific conf 
techniques object oriented languages systems 
sin templates misuse case description proc 
intl 
workshop requirements engineering foundations software quality 
vie mcgraw building secure software avoid security problems right way 
pearson education 
yu yu modelling organizations information systems requirements engineering proc 
re st intl symp 
requirements engineering ieee 
win wing symbiotic relationship formal methods security proc 
nsf workshop computer security fault tolerance software assurance needs solution 
december 
