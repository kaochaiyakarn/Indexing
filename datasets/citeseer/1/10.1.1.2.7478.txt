non iterative greedy algorithm multi frame point correspondence shah fellow ieee presents framework finding point correspondences monocular image sequences multiple frames 
general problem multi frame point correspondence np hard frames 
polynomial time algorithm restriction problem basis proposed greedy algorithm general problem 
greedy nature proposed algorithm allows real time systems tracking surveillance addition proposed algorithm deals problems occlusion missed detections false positives single non iterative greedy optimization scheme reduces complexity algorithm compared existing approaches multiple heuristics purpose 
greedy algorithms point tracking allow entry exit points scene limitation proposed algorithm 
experiments real synthetic data wide range scenarios system parameters validate claims performance proposed algorithm 
index terms point correspondence target tracking motion occlusion point trajectory data association bipartite graph matching path cover directed graph 
motion correspondence image sequence problem find correspondences feature points images occur due object real world different time instants 
correspondences feature points available applications object tracking motion analysis optical flow structure motion 
output correspondence algorithm set tracks track ideally corresponds unique point object real world specifies position frame entry exit scene 
assume information available feature points position image distinguishing feature points 
type scenario occurs applications particle tracking tracking large number similar objects 
psychological experiments shown human vision sensitive form appearance objects compared velocity position 
shown humans capable making inferences type object motion minimal information velocity position small number indistinguishable points object 
formulate problem follows 
notation rest 
sequence frames fi dimensions sx sy correspond time instances ti xi 
set points detected frame fi number points detected frame need 
define track length sequence points xi 
length track xi 
xim am 
aj xij denoted 
backward correspondence point ij aj track defined point ph candidate computer science university central florida orlando fl usa 
email cs ucf edu shah professor computer science director computer vision lab university central florida orlando fl usa 
email shah cs ucf edu preceding ij aj ij aj forward correspondence point point succeeding ij aj ij aj 
point track backward correspondence point forward correspondence 
assume detected points occur due sensory response real world points due sensor noise 
problem find set tracks 
tm ti true ti sensor response point zi real world point ti sensor response zi points occlusion zi track tr contains sensor response zi 
ti occurs due sensor noise 
condition requires real world point exactly track associated element integrity principle track associated exactly world point 
second condition disallows noisy detections false positives part track corresponding real world point 
definition track composed sensor responses single world point may include responses due occlusion point points composed points occurring noise 
problem find tracks distinguish types tracks noise removal 
distinction usually done higher level processes scope 
propose look ahead technique solve correspondence problem sliding window multiple frames 
information gathering time systems simulating cognitive processes supported researchers vision psychology 
neisser proposed model perceptual processes continually interact incoming information verify hypotheses formed basis available information time instant 
marr principle commitment states inference cognitive process delayed possible 
active information pickup human observer environment supported 
todd argued human observers require frames infer structure moving objects simple experimental settings 
existing algorithms similar look ahead strategies information gathering longer intervals time example backtracking 
comparison techniques sections 
major contribution formulation efficient robust solution multiframe correspondence problem defined 
proposed framework deals problems occlusion handling missed detections false positives single greedy optimization scheme reduces complexity algorithm compared existing approaches different heuristics purpose 
experimental results real synthesized sequences show proposed algorithm outperforms existing methods time efficient applicable general scenarios 
organization follows 
section survey related 
section iii define terminology notation provide graph theoretical formulation correspondence problem solution section iv 
refine solution section iv details proposed algorithm section choice gain function discussed section vi 
section vii demonstrate results proposed approach variety synthesized real sequences compare results previous approaches 
section viii concludes 
ii 
related large number correspondence methods proposed years 
methods define motion model optimization technique maximize minimize gain cost function motion model 
methods differ choice motion model optimization technique gain function 
ullman proposed minimal mapping approach probabilistic cost function distance points consecutive frames 
linear programming approach minimize cost function 
cost function improved jenkin introduced smoothness constraint nearest neighbor relationship 
greedy approach optimization 
barnard thompson relaxation approach solve problem 
algorithms frames establishing correspondences 
sethi jain proposed iterative greedy exchange algorithm nearest neighbor smoothness constraints 
self initializing version algorithm repeats optimization step forward backward directions equilibrium state achieved 
algorithm assumes points enter exit scene occlusion detection errors 
condition relaxed sethi 
rangarajan shah proposed proximal uniformity constraint non iterative greedy algorithm uses frames establish correspondences 
algorithm assumes fixed number real world points allows temporary occlusion missed detections 
contribution area veenman proposed hungarian search optimization tool goa tracker motion models defined :10.1.1.105.3671
basic algorithm assumes initial correspondences frames known establishes correspondences consecutive frames 
extension basic algorithm backtracks correspondences frames correspondences established basic algorithm 
algorithm assumes number world points remain frames allows occlusions detection errors done heuristics analysis number detected points consecutive frames 
apart methods quite algorithms proposed statistical domain known joint probabilistic data association filter multiple hypothesis tracking mht 
greedy approach efficient suffers combinatorial explosion 
efficient approximations mht 
techniques algorithm find best hypothesis reduce search space reduce search space limited temporal scope sliding window technique similar 
problem remains intractable approximations efficient implementation 
major drawbacks methods large number parameters assumptions probability distributions necessarily hold :10.1.1.105.3671
detailed review statistical techniques point correspondence see 
contribution presentation optimization algorithm optimizes gain cost function multiple frames general large variety motion models cost functions including statistical functions satisfy constraints posed proposed framework 
closely related veenman :10.1.1.105.3671
solution multi frame correspondence problem opposed frame correspondence problem :10.1.1.105.3671
special case inherently easy problem polynomial time optimal solution exists 
addition goa assumes number points scene remains constant restriction proposed algorithm 
self initializing version goa pass algorithm compared proposed algorithm single pass algorithm applicable real time systems 
iii 
definitions notations assume reader familiar basic graph theory terminology 
follow notation terminology 
edge weighted directed graph self loops multiple edges respectively set vertices edges digraph directed path length digraph sequence vertices 
vk vi vi directed edge vi vi example figures directed paths digraph shown 
vertex disjoint path cover set 
pk directed paths pi length pi pi pj pi set vertices directed path pi 
words vertex disjoint path cover digraph set directed paths vertex path paths common vertex 
simplicity notation refer vertex disjoint path covers path covers 
figures show different path covers digraph shown 
denote weight path cover defined sum weights edges cover maximum weight path cover path cover arg max ci path covers ci ci fig 

sample digraph different vertex disjoint path covers digraph fig 

split graph sample digraph shown matching graph split edge weighted digraph edge weighted bipartite graph partite sets copies 
vertex vertex vertex edge corresponding edge endpoints 
split graph digraph shown 
matching graph set edges shared vertices 
maximum minimum matching weighted graph matching maximum minimum weight matchings graph 
matching split graph shown 
graph subgraph graph written subgraph induced graph minimal subset containing vertices edges example subgraph induced edges graph graph vertex set edge set 
iv 
graph theoretical formulation section graph theoretical formulation multi frame correspondence problem defined section obvious graph theoretical formulation frame correspondence problem observed :10.1.1.105.3671
problem viewed finding maximum matching bipartite graph partite sets correspond sets points detected frames respectively 
denote vertex corresponding point 
edge corresponds match hypothesis point frame point frame edge weight gain associated match 
finding maximum matching find match point frame point frame total gain maximized 
efficient algorithms find maximum matching bipartite graph exist example hungarian search algorithm hopcroft karp total number vertices graph efficient algorithm frame correspondence problem exists natural apply technique frame problem 
dimensional matching problem np hard known solutions exponential requires approximations practical purposes 
avoid high computational complexity involve matching partite hypergraph model frame problem construct weighted digraph 
vk partitions vi corresponds set points xi detected frame fi 
xi vi vj directed edge vertex set vi vertex set vj frame problem edge corresponds match hypothesis point xi frame fi point frame fj edge weight gain associated match 
xi point detected frame fi 
edge vertex vi represents possibility having corresponding point frame fi fi forward correspondence possibilities detection errors occlusions absence maximum frames considered 
sample digraph formed way shown 
fig 

instance digraph defined section candidate solution definition correspondence problem section task find set vertex disjoint directed paths tracks length total gain maximum paths want find maximum weight path cover directed graph candidate solution problem shown 
xi 
xim am track corresponding real world point zi require gain function ip ap iq aq satisfies inequality ip ap aq ap ap aq aq condition guarantees total gain maximized edges path cover penalizes choice shorter track longer valid track 
note inequality reduces strong triangular inequality 
problem finding maximum path cover np hard case unweighted graphs 
theorem polynomial solution exists directed graph acyclic theorem edges maximum matching split graph acyclic edge weighted digraph correspond edges maximum path cover proof acyclic edge weighted digraph split graph form partite set maximum path cover digraph vertex indegree outdegree digraph induced edges indegree outdegree vertex correspond degrees vertices respectively set corresponding edges vertex degree matching graph 
maximum matching set corresponding edges argument similar vertex edge coming edge going 
directed subgraph induced edges consists vertex disjoint paths cycles 
acyclic consists vertex disjoint paths 
suppose contrary maximum matching 
maximum path cover digraph construction digraph described edges direction increasing time acyclic 
weighted directed graph optimal set tracks maximizes gain obtained polynomial time 
note number frames problem reduces bipartite graph matching problem described section 
algorithm successfully applied problem establishing correspondences multiple cameras disjoint field views see 
greedy algorithm far assumed gain function obtaining edge weights digraph easily computable 
case 
easy see construction digraph mentioned section iv assumes gain xi independent backward correspondences xi cases correspondence multiple cameras gain functions nearest neighborhood criteria appearance color properties feature points condition satisfiable 
gain function xi requires velocity acceleration point xi computable backward correspondence xi known condition true 
similarly gain functions smoothness motion satisfy condition 
framework defined section iv directly applicable gain function dependent backward correspondences 
interested gain functions motion information solution problem proposing greedy algorithm framework section iv 
algorithm assumes correspondences points frames 
fk established 
correspondences previous frames information available time instant tk may changed information available 
incoming frame proposed greedy algorithm modifies established correspondences previous frames extending tracks new frame includes tracks points occluded frames correcting previous mismatch newly obtained information 
fk current frame ck set correspondences established frame fk 
problem extending correspondences ck points frame fk represented digraph vi 
vk pairwise disjoint vertex vi corresponds point xi 
track 
xp ck modeled directed edges vertex xi vertex xi refer edges old edges 
possible extension track new frame fk modeled connecting terminal vertex vertex forward correspondence ck track vertex vertex set vk set vertices corresponding frame fk directed edge 
edges referred extension edges 
possibility previous mismatches represented directed edges non terminal vertex track vertices set vk 
call edges correction edges old edges extension edges correction edges shown bold normal dotted arrows respectively figures 
formally vertex pair vi vj edge correspondence ck digraph obtained way called extension digraph 
backward correspondences points xk established edge weights computed regardless type gain function 
fig 

initial correspondences 
extension digraph maximum path cover extension graph 
correction edges shown dotted lines old edges shown bold lines 
edges vertices shown extension digraph constructed seek set vertex disjoint paths tracks maximizes total gain 
algorithm section iv applied digraph candidate solution ck may contain types edges old edges correction edges extension edges 
extension edge change correspondence ck correction edge replaces existing edge old edge 
suppose point forward correspondence ck 
correspondence obtained assuming correspondence xy ck correspondence xy ck correspondence yz forward correspondences removed ck possible replaced new edges 
edges referred false hypotheses 
define edge false hypothesis directed path edge replaced correction edge 
edge yz false hypothesis 
replacement false hypotheses new edges performed recursive scheme 
empirically determined nonrecursive heuristic performs reasonably cases efficient recursive version section vii 
false hypotheses removed replaced obtain new correspondence set ck points frame fk 
correspondences extended number frames adding frame time similar fashion 
procedure false hypothesis originating vertex vi delete false hypotheses graph solve frame correspondence problem points sets fi fi 
fk call procedure 
set points frame fj fig 

recursive algorithm replacing false hypotheses procedure delete false hypotheses originating vertices vi solve frame correspondence problem vertices sets vi vi fig 

nonrecursive heuristic replacing false hypotheses initialization done frames algorithm bipartite graph matching obtain correspondences frames 
correspondences extended new frame algorithm described th frame 
stage backtracking performed applying algorithm reverse direction frames fk fk 
established correspondences 
takes care incorrect correspondence motion information available frames done just frames 
correspondence frames established correspondence extended new frame fi digraph constructed frames fi fi 
fi 
complete algorithm window size 
procedure 
fn establish initial correspondence frames frames algorithm bipartite graph matching 
new frame fi construct extension digraph frames fi fi 
fi compute edge weights gain function find maximum path cover graph replace false hypotheses fi fk perform backtracking frames fk fk 
fig 

complete algorithm multi frame correspondence problem vi 
gain functions section address question 
partial track xi xi 
xir ar 
ir point xb frame ir gain ij aj xb associated assigning xb forward correspondence ij aj ij predicted motion vector point ij aj vector predicted making assumption motion point ij aj constant velocity constant acceleration 
gain ij aj xb defined match ij candidate motion vector ij simplest gain functions distance predicted observed position point defined follows ij aj xij ij sx aj aj ajx denotes norm sx sy dimensions image respectively 
criteria defined ij aj xb prefers match closest expected position point ij aj 
reduces nearest neighborhood criteria motion information point ij aj available 
function ignores information direction motion may allow non smooth trajectories 
sethi jain proposed gain function prefers smooth changes magnitude direction motion :10.1.1.105.3671:10.1.1.105.3671
slightly modified version function follows ij aj xb xi aj xb ij aj xb ij aj xb ij aj xb ij aj xb ij aj xb function convex combination terms called directional coherence speed coherence respectively 
term penalizes large deviations direction motion second term prefers match change magnitude velocity acceleration 
disadvantage scheme complete reliance motion information requires initialization correspondence criteria support points entering scene 
utilizing advantages gain functions define gain function convex combination directional coherence term follows ij aj xb xi aj xb ij aj xb ij aj xb ij aj xb xi aj xb ij aj xb velocity information available function reduces nearest neighbor criteria 
satisfy constraint equation add small constant penalty gain function ij aj xb ij 
vii 
results section results proposed algorithm synthetic real sequences 
gain function equation experiments constant acceleration motion model specified sliding window size 
procedure recursive counterpart 
results compared self initializing version goa tracker smooth motion model defined :10.1.1.105.3671
veenman shown experimentally situations goa tracker outperforms algorithms comparison goa tracker implies comparison algorithms includes mht :10.1.1.105.3671
results synthetic data synthetic sequences section generated data set generator called point set motion generator 
generator provides control size image space number points number frames mean variance initial velocity mean variance change velocity probability occlusion maximum absence experiment consider scenarios separately points allowed enter exit scene may occluded detected 
ii points allowed enter exit scene new points may enter 
iii points allowed enter exit scene 
analyze performance tracking compare results track error defined tc tt tt total number true tracks tc number completely correct tracks generated tracker 
goa tracker allow points enter exit scene output goa shown scenario 
analyze noise handling capability algorithms consider scenario new points generated middle sequence 
modified track error goa proposed tracker total number true tracks points visible frame number completely correct tracks generated tracker 
points enter exit image sequences considered noise points visible frames considered valid tracks 
errors running times reported section estimated averaging errors running times sequences sequences generated parameters 
effectiveness proposed initialization scheme experiment demonstrates effectiveness proposed initialization scheme backtracking frames 
experiments run varying numbers points different modes manual initialization ii self initialization backtracking iii initialization 
track errors shown 
results show proposed initialization scheme manual initialization improves results significantly compared initialization 
track error manual initialization initialization backtracking initialization number points fig 

track errors different modes initialization 
upper curve obtained initialization middle lower curves errors backtracking manual initialization respectively 
recursive vs non recursive false hypotheses replacement second experiment analyzes tradeoff recursive non recursive routines false hypotheses replacement 
show running times algorithm recursive non recursive schemes 
running times computed sequences generated varying number points scene 
sequence consists frames running times reported sequence 
show track errors obtained varying probability occlusion frame point 
number points scene kept constant sequences 
seen significant difference performance non recursive recursive schemes terms track errors 
expected non recursive scheme efficient recursive 
rest experiments non recursive routine false hypotheses replacement 
fig 

tradeoff recursive non recursive schemes false hypotheses replacement running times varying number points frame track errors varying occlusion probability 
computational efficiency computational complexity algorithm determined number times maximum matching graph computed operation graph order non recursive scheme sliding window size done times 
computational complexity proposed algorithm bounded number points scene 
verify claim empirical analysis running times 
mentioned computational complexity algorithm depends parameters number points scene ii size sliding window 
shows running times proposed algorithm respect parameters 
shows plots running times sliding windows size frames respectively 
shows plot proportionality constant number points scene 
graph evident running times polynomial bounded 
proportionality constant lower smaller sizes sliding window 
typically algorithm runs frames second points sliding window size ghz intel pentium cpu 
fig 

running times seconds frame sequences varying number points frames sizes sliding window 
size sliding window recall section iv sliding window size required handle occlusion lasting frames 
validate claim show size sufficient probability occlusion point sequence high 
figures show track errors sequences varying occlusion probabilities different sizes sliding windows 
maximum absence occluded point sequences figures bounded frames frames respectively 
notice track errors change significantly increasing size sliding window frames frames respectively 
shows effect sequences fixed occlusion probability different number points scene 
rest experiments fix maximum absence occluding point frames window size frames 
experiments variable point density velocity occlusion probability experiment analyze performance proposed multiframe algorithm mf respect point density 
experiments performed increasing number point tracks fixed image space 
track errors shown applying mf different types sequences described 
addition track errors goa tracker shown sequences fig 

performance respect size sliding window track error different occlusion probabilities maximum absence point bounded frames frames 
fig 

performance respect size sliding window track error different number points frame occlusion probability maximum absence bounded frames 
points allowed enter exit scene 
show effect noise trackers modified track error ec allowing points enter exit scene 
similar experiments performed occlusion handling variable velocity performance probability occlusion varied mean velocity increased 
results show proposed algorithm performs comparably goa tracker points allowed enter exit scene 
performance proposed tracker unaltered points allowed exit scene additional noise introduced 
proposed tracker performs reasonably sequences points allowed enter exit scene simultaneously higher degree ambiguity sequences 
addition results track error track error goa entry exit mf entry exit mf entry mf entry exit number points fig 

variable point density performance proposed multiframe algorithm mf goa algorithm 
lower curves errors goa entry exit mf entry exit exit upper curve error mf entry exit 
effect noise ec points allowed enter exit scene 
upper curve error goa lower curve error mf goa entry exit mf entry exit mf entry mf entry exit probability occlusion fig 

occlusion handling proposed multiframe algorithm mf goa algorithm lowermost curve mf entry middle overlapping curves goa mf entry exit upper curve mf entry exit 
effect noise clearly show proposed algorithm outperforms goa tracker presence noise 
experiments noise density analyze noise handling capability proposed algorithm add random noise number points scene frame sequence 
points scene random points frame added sequence 
tracking errors different point noise densities shown 
seen results large number noisy points tracks recovered correctly instances 
track error goa entry exit mf entry exit mf entry mf entry exit mean velocity fig 

variable velocity performance proposed multiframe algorithm mf goa algorithm 
curves show pattern previous experiments 
effect noise fig 

performance respect random noise density track errors varying point densities varying occlusion probabilities presence noise high probability occlusion presents formidable challenge point correspondence algorithm 
high probability occlusion point missing frame assume point left scene expected reappear frame bounded interval time may disappear probability 
case noise density high frame spurious measurements valid points 
performance proposed algorithm varying occlusion probabilities noise density 
fig 

tracks generated rotating dish sequence 
results real sequences show results proposed algorithm real data sets 
set experiments standard sequences point correspondence literature 
experiment sequence black seeds placed rotating dish :10.1.1.105.3671
interesting sequence high variance speed points circumference center circle 
note proposed algorithm synchronous motion points 
shows seeds correctly tracked sequence claim verified ground truth 
fig 

tracks generated rotating ball sequence 
house sequence 
standard real sequences klt method detect feature points proposed algorithm establish correspondences :10.1.1.135.7147
rotating golf ball sequence contains roughly feature points frame enter exit scene addition noisy detection klt method house sequence camera rotating house contains feature points frame 
visual analysis outputs show tracks perfectly tracked sequence 
second set experiments natural sequences large number feature points high occlusion scenarios 
moving objects detected background subtraction centroids fig 

tracks generated cylindrical reservoir sequence 
flock fish 
fig 

frames fish sequence th frame 
feature points tracking 
example set particle tracking 
frame sequence showing particles cylindrical reservoir containing liquid tubular heater drives counter clockwise rotating convection cells 
particles frame stationary appear frames 
show tracks flock fish sea examples show tracking results bird flocks figures 
birds different altitudes frequent occlusions 
discontinuities tracks corners images right edge observed largely due simultaneous entrances exits points location image 
objects tracked reasonable sequences 
visual analysis results provides general feel collective motion proposed algorithm model group motion neighborhood coherency scene point tracked independently points 
viii 
framework efficient robust solution multi frame point correspondence problem 
proposed framework provides optimization algorithm optimizes gain cost function multiple frames may large variety motion models cost functions complete sequences tracking results accessed www cs ucf edu vision projects fig 

tracks generated sequences bird flocks fig 

frames birds sequence th frame 
fig 

frames second birds sequence th frame 
including statistical functions satisfy constraints posed 
algorithm applicable general settings shown perform extensive experimentation synthetic data 
results real data support experimental evaluation 
authors wish express appreciation anonymous referees careful reading manuscript suggestions improvement 
authors acknowledge dr cor veenman providing source code gao tracker dr dmitry chetverikov providing point generator 
research partially funded lockheed martin 
asada tsuji 
representation dimensional motion dynamic scenes 
computer vision graphics image processing january 
barnard thompson 
disparity analysis images 
ieee transactions pattern analysis machine intelligence july 

covering points digraph point disjoint paths application code optimization 
journal association computing machinery april 
chetverikov feature point tracking incomplete trajectories 
computing devoted issue digital image processing 
cox 
review statistical data association techniques motion correspondence 
international journal computer vision february 
cox hingorani 
efficient implementation reid multiple hypothesis tracking algorithm evaluation purpose visual tracking 
ieee transactions pattern analysis machine intelligence february 
cox miller 
finding ranked assignments applications multi target tracking motion correspondence 
ieee transactions aerospace electronic systems january 

fast method finding exact best hypotheses multitarget tracking 
ieee transactions aerospace electronic systems april 
dawson 
went apparent motion modeling solutions motion correspondence problem 
psychological review 
deb bar shalom 
generalized assignment algorithm multisensor multitarget state estimation 
ieee transactions aerospace electronic systems 
fortmann bar shalom 
sonar tracking multiple targets joint probabilistic data association 
ieee journal oceanic engineering july 
gary johnson 
computers intractability 
freeman new york 
gibson 
ecological approach visual perception 
houghton boston ma 
hopcroft karp 
algorithm maximum matchings bipartite graphs 
siam journal computing dec 
horn schunck 
determining optical flow 
artificial intelligence 
shah 
tracking multiple cameras disjoint views 
ninth ieee international conference computer vision 
shah 
tracking object classification automated surveillance 
european conference computer vision page iv ff 
jenkin 
tracking dimensional moving light displays 
proceedings workshop motion representation contr pages 
johansson 
spatio temporal differentiation integration visual motion perception 
psychological research 
kuhn 
hungarian method solving assignment problem 
naval reseach logistics quarterly 
marr 
vision computational investigation human representation processing visual information 
freeman new york 
neisser 
cognition reality principles implications cognitive psychology 
freeman san francisco 

multidimensional assignments multitarget tracking 
partitioning data sets dimacs workshop pages 
american mathematical society 
yan 
data association multi frame processing 
proceedings second international conference information fusion pages 
rangarajan shah 
establishing motion correspondence 
computer vision graphics image processing july 
rashid 
system interpretation moving light display 
ieee transactions pattern analysis machine intelligence pages january 
reid 
algorithm tracking multiple targets 
ieee transactions automatic control december 
sethi 
feature point correspondence presence occlusion 
ieee transactions pattern analysis machine intelligence jan 
sethi jain 
finding trajectories feature points monocular image sequence 
ieee transactions pattern analysis machine intelligence jan 
shea 
computational experiences hot starts moving window implementation track 
ieee transactions pattern analysis machine intelligence january 
shi tomasi :10.1.1.135.7147
features track 
ieee conference computer vision pattern recognition pages 
todd 
visual information rigid nonrigid motion geometric analysis 
journal experimental psychology human perception performance 
tsai huang 
uniqueness estimation dimensional motion parameters rigid objects curved surfaces 
ieee transactions pattern analysis machine intelligence january 
ullman 
interpretation visual motion 
press cambridge ma 
veenman reinders backer :10.1.1.105.3671
resolving motion correspondence densely moving points 
ieee transactions pattern analysis machine intelligence january 
chetverikov 
experimental comparative evaluation feature point tracking algorithms 
proceedings workshop evaluation validation computer vision algorithms pages 
kluwer series computational imaging vision 
west 
graph theory 
prentice hall nj 
yachida asada tsuji 
automatic analysis moving images 
ieee transactions pattern analysis machine intelligence january 
received degree computer systems engineering ned university engineering technology pakistan degree computer science university central florida 
currently phd candidate university central florida recipient fellowship award excellence research computer science 
research interests include graph theory discrete optimization tracking correspondence multiple cameras real time surveillance systems 
shah received degree electronics college engineering technology pakistan highest grades university awarded year father nation scholarship ph spent philips international institute technology eindhoven netherlands completed diploma 
dr shah received ph degrees computer engineering wayne state university detroit michigan respectively 
university central florida currently professor computer science director computer vision lab 
author books video registration motion recognition kluwer academic publishers 
published close articles leading journals conferences topics including visual motion tracking video registration activity gesture recognition 
supervised ph students completion currently directing ph students 
prof shah served project director national site reu research experience undergraduates computer vision funded national science foundation 
dr shah fellow ieee ieee distinguished visitor speaker invited seminars tutorials invited talks world 
received harris engineering achievement award awards teaching incentive program award research incentive award ieee outstanding engineering educator award 
editor international book series video computing editor chief machine vision applications journal associate editor pattern recognition journal 
associate editor ieee transactions pami guest editor special issue international journal computer vision video computing 

