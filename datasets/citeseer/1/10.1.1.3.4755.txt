preliminary study vectorization multimedia applications multimedia extensions gang ren peng wu david padua department computer science university illinois urbana champaign springfield ave urbana il padua cs uiuc edu ibm watson research center yorktown heights ny ibm com 
multimedia extension max introduced general purpose processors hp 
years passed means accessing computing power multimedia extensions limited assembly programming system libraries intrinsic functions 
similarity multimedia extensions vector processors believed traditional vectorization compile multimedia extensions 
traditional vectorization effectively vectorize multimedia extensions 
additional techniques needed 
tries answer questions 
code study berkeley multimedia workload identify new challenges arise vectorizing multimedia extensions provide solutions challenges 
past decade witnessed multimedia processing important computing workloads especially personal computing systems 
respond growing performance demand multimedia workloads multimedia extensions mme added general purpose microprocessors accelerate workloads 
multimedia extensions processors simple simd architecture short fixed length vectors large register file instruction set targeted specific multimedia application domain 
years ago multimedia extension max introduced hp today multimedia extensions usually programmed assembly languages libraries intrinsic functions 
promising alternative compile programs written high level languages directly mme instructions 
similarity multimedia extensions vector processors may naturally consider applying traditional vectorization techniques multimedia applications 
satisfactory results obtained vectorization realistic multimedia programs mme 
supported national science foundation itr 
necessarily representative positions policies government 
sets answer questions traditional vectorization techniques effectively vectorize multimedia extensions 
additional techniques needed 
answer questions conducted code study bmw benchmark set multimedia programs written 
code study identified differences compilation mme traditional vectorization discuss new analyses transformations bridge difference 
rest organized follows section gives overview mme architectures bmw benchmark 
section survey current programming models existing compiler supports multimedia extensions 
section discusses difference vectorizing mme traditional vector machines presents solutions address differences 
section concludes outlines 
background multimedia extensions mme increasing importance multimedia workloads major microprocessor vendors added multimedia extensions mme microarchitectures 
multimedia extensions available today include mmx sse sse intel altivec ibm motorola dnow 
amd max hp vis sun dvi dec mips mips 
multimedia extensions vector units support operations fixed length vectors short typically longer bytes 
purpose simd design exploit data parallelism inherent multimedia processing 
multimedia extensions evolved rapidly years 
early provided limited instruction sets 
example multimedia extension max offers instructions processing bit vectors bit integers 
today support wider vector length vector types comprehensive instruction set architecture isa 
instance supports bit vectors bit integers bit single precision float isa instructions 
project multimedia extensions support extensive isa especially better support floating point computations 
powerful general purpose foresee traditional applications numerical codes able leverage computing power mme 
example mme intel sse announced pentium processor sse evolves sse streaming simd extensions incorporating double precision floating point support instructions 
bit integers bit shorts bit chars bit single fp numbers bit double fp numbers fig 

streaming simd extensions sse supports bit vectors data types including single double precision floating point numbers bit integers shown 
provides instructions grouped arithmetic compare conversion logical shift shuffle data movement instructions 
sse instruction set non uniform 
vector types equally supported isa 
example sse provides max min operations vectors signed bit integers unsigned bit integers vectors integer types 
multimedia extensions vs vector processors despite general similarity multimedia extensions traditional vector processors exist key differences architectures 
multimedia extension instruction processes small number data elements limited register width longer bytes 
contrast long vectors typical traditional vector machines 
second multimedia extensions provide weaker memory units 
cost reasons multimedia extensions support gather scatter type memory operations vector machines usually 
addition multimedia extensions access memory vector length aligned boundaries 
sse allow misaligned memory accesses accesses incur additional overhead 
example sse misaligned load involves loads execution 
multimedia extension isas tend general purpose uniform diversified 
operations specialized supported specific vector types 
example sse max min operation mentioned 
vector unit berkeley multimedia workload code study berkeley multimedia workload bmw benchmark 
bmw benchmark written evolves mediabench 
table lists bmw benchmark programs study 
table 
berkeley multimedia workload applications name description line adpcm ima adpcm audio compression gsm european gsm speech compression lame mpeg layer iii audio encoder mpg mpeg layer iii audio decoder iw wavelet image compression jpeg dct lossy image compression mpeg mpeg video compression povray persistence vision ray tracer mesa opengl rendering api clone doom classical fps video game klatt speech synthesizer midi music rendering gus instruments characteristic multimedia applications core procedures take execution time 
fact hot spot behavior pronounced multimedia workloads integer programs floating point programs 
characteristic multimedia programs suitable hand compiler optimizations 
table gives execution time distribution representative multimedia integer floating point workloads ghz pentium iv processor 
table column proc gives number procedures take total execution time exec gives total percentage execution time spent procedures excluding time spent procedures call line gives percentage total source lines procedures 
table 
distribution execution time class application proc exec line image bmw jpeg decoder audio bmw gsm encoder graphics bmw mesa gears speech bmw integer specint vortex scientific specfp mgrid 
overview mme compilation programming multimedia extensions long time assembly language programming embedding inline assembly programs dominant means access multimedia extensions 
due difficulties programming debugging maintaining assembly programs usually important processing kernels loaded multimedia extensions 
multimedia extensions powerful need efficient programming methods grows importance 
computer vendors provide high level language interfaces multimedia extensions intrinsic functions facilitate accesses mme 
intrinsic functions embedded high level programming languages translated mme instructions native compilers 
gcc instance supports intrinsic functions multimedia extensions including sse dnow 

compared assembly coding intrinsic function programming model achieves better productivity readability portability sacrificing performance 
programming standard high level languages relying compiler produce optimized codes offer programmers easier way utilize multimedia extensions 
approach feasible compiled codes match performance previous approaches 
compilers multimedia extensions automatically compiling programs multimedia extension instructions tried academia industry 
architectural similarities vector processors multimedia extensions traditional vectorization naturally considered compile programs multimedia extensions 
traditional vectorization techniques developed vector processors mainly 
notion data dependence developed kuck coworkers university illinois 
overview vectorizing compiler technology 
lam developed optimizer vis sun multimedia extension suif merl 
focus address alignment issues code generation 
krall applied traditional vectorization code generation vis 
developed intel mmx suif 
experiments small kernels reported 
larsen amarasinghe proposed slp algorithm vectorization basic blocks 
vectorizing loop iterations slp algorithm packs isomorphic instructions basic block vector instructions 
implemented suif targeting altivec 
speedups reported kernels programs specfp 
domain specific language simd aregister developed provide portable way programming 
date commercial compilers support automatic vectorization multimedia extensions available 
bay software extends vast generate codes altivec extension 
portland group offers workstation fortran compilers support automatic usage sse sse extensions 
announces compiler extensions 
intel extended product compiler vectorize mmx sse sse 
bridging gap mme traditional vectorization studies show despite success vectorization traditional vector machines vectorization multimedia extension long way go 
section identify key differences traditional mme 
difference natural result differences programming style section common data types operations section application code patterns section architectures section 
difference programming styles pointers vs arrays traditional vectorization effective programs cycles spent tight loops involving array accesses 
multimedia applications hand rely pointers pointer arithmetic access data computationally intensive loops 
gives example pointer accesses extracted lame mpeg audio encoding application bmw benchmark suite 
example xp xpn point input buffers ep pp point output buffers initially passed procedure parameters 
ep xp xp xpn xpn ep ep pp xpn xp ep pp atan double xpn double xp fig 

pointer access example bmw lame twelve programs bmw benchmarks pointers core procedures pointer arithmetic 
pervasive pointers pointer arithmetic great impact vectorization terms memory disambiguation dependence testing 
example conducting dependence analysis compiler needs determine overlapping regions accessed variables xpn ep pp iterations 
exactly pointer aliasing problem 
complication comes fact xpn ep pp changing values loop 
conventional alias analysis may determine ep aliased particular iteration iteration may aliased ep iterations 
ep xp xp xpn xpn ep ep pp pp atan double xpn double xp fig 

bmw lame transforming pointers closed form expressions may observe xpn ep pp change values regular way 
variable change monotonically increasing decreasing values change constant iteration 
fact xpn ep pp induction variables represented closed form expressions iteration counter loop replacing xpn ep pp closed form expressions 
avoid confusion xpn ep pp represent values xpn ep pp entering loop 
ymin ymax xmin xmax dist dx dx dy dy dist rmax pb pb count pb pb count pb pb count pb count fig 

non closed form pointer access example bmw mesa keep mind represented array syntax xpn ep pp pointers 
means accesses aliased 
fact example xp xpn pointing element array double elements respectively 
compiler knows xp accesses elements onward xpn accesses elements backward loop xp xpn elements apart compiler prove accesses xp xpn non overlapping 
region access information obtained analyzing subscripts loop bounds 
task pointer analysis find distance memory location pointed xpn ep pp 
able disambiguate regions accessed xpn ep pp apply traditional dependence analyses resolve dependences transformed loop 
may loops contain pointers closed form expressions shown 
case exploit monotonicity pointers estimate access region conducting dependence analysis 
manually unrolled loops high performance demand multimedia workloads multimedia programs hand optimized 
typical example manually unrolled loops 
example bmw benchmark programs contain unrolled inner loops 
gives example manually unrolled loop extracted mpeg video encoder application inner loop completely unrolled times accumulate absolute difference input arrays 
break lx lx fig 

manually unrolled loop bmw mpeg example difficult expensive vectorize statements loop accesses non continuous iterations 
opportunity lies vectorizing unrolled statements loop body 
solution loop body apply vectorization 
shows code loop 
fortunately unrolled loops seen bmw benchmark quite simple 
break lx lx fig 

loop approach vectorize unrolled loops directly 
slp algorithm mentioned section offers solution identifying isomorphic operations basic block groups form mme simd instructions 
graphics codes common data structure represent colors struct fields rgb yuv 
fields stored continuous memory processed similar operation sequences 
coding pattern perfect candidate slp type vectorization 
limitations language mismatch language underlying mme architecture widens gap traditional mme vectorization 
integral promotion subword types ansi semantics char short types sub word data types automatically promoted integer type conducting arithmetic operations 
known integral promotion 
essence ansi supports storage subword data types operations 
design perfect match generalpurpose architectures general purpose isa support integer operations registers 
addition integer extensions combined load operations incur additional overhead 
table 
major data type bmw applications type application char mpeg doom mesa short adpcm gsm jpeg single mpg double lame povray hand bit integers natural representation types media data subword types widely multimedia applications 
result common see mme isa provides better support subword operations bit operations 
vectorization point view dealing subword data types integral promotion rule means wasting half total computation bandwidth incurring additional overhead due type extension 
vectorization subword operations word operations may introduce slowdowns underlying isa provides native support 
issue automatically avoiding unnecessary integral promotion affecting program semantics 
need backward data flow analysis trace effective width result operation result consumed 
effective width result operand propagated source operands accord ing operations 
safely convert word operation subword operation source operands word operation subword effective width 
saturated operations saturated arithmetic widely multimedia programs especially audio image processing applications 
semantics support saturated arithmetic native operators programmers express saturated operations native operations 
gives example 
short int define gsm add unsigned int int min word max word min word max word min word fig 

saturated add implemented bmw gsm help conversion code sequence vectorized sequence compare mask subtract add 
mme directly supports saturated add best performance achieved recognizing sequence transforming saturated add instruction 
idiom recognition identify max min operations scientific applications extended identify saturated operations 
int bp uint rfp rfp clip bp rfp rfp fig 

implementation saturated add bmw mpeg interestingly bmw benchmark implementations saturated add 
example array clip generated fly maps subscript corresponding saturated bit value 
case difficult compiler recognize pattern 
code patterns bit wise operations due nature multimedia processing bit wise operations multimedia applications 
gives example bit wise operations extracted mesa opengl graphics library 
vectorize code key techniques conversion recognizing reduction bit wise operations 
uint mask cx cw mask clip right bit cx cw mask clip left bit cy cw mask clip top bit cy cw mask clip bottom bit cz cw mask clip far bit cz cw mask clip near bit mask mask mask mask fig 

reduction bit wise operations bmw mesa mapping arrays applications bmw benchmark mapping arrays kernel loops different purposes 
example described section application mpeg uses mapping array obtain saturated results original ones 
common mapping arrays replace expensive math functions pow function 
shown array generated store result pow function integer 
kernel loop get result directly calling pow function 
init pow float temp fabs xr temp ix int temp fig 

kind mapping array bmw lame limitations mme architecture section thoroughly discussed architectural difference mme traditional vector architectures 
summarize multimedia extension uses short fixed length vectors weaker memory unit provides uniform general purpose isa 
believe architectural differences lead differences mme traditional vectorization oftentimes difficult 
new challenges open questions 
short fixed length simd architecture typically vector length byte implies vectorize iterations iteration basic block 
super word level parallelism slp approach may effective 
weak memory unit imposes significant challenge mme vectorization 
lack native support gather scatter type memory operations difficult vectorize codes non continuous memory accesses 
gives simple example stride accesses tmp 
tmp block int floor fig 

strided memory access bmw mpeg addition multimedia extensions support vector aligned loads stores 
precise alignment information benefits vectorization simplifies code generation 
aspects alignment optimization vectorization purposes obtain alignment information improve alignment program transformation loop unrolling 
pervasive pointers multimedia applications alignment analysis essence alignment analysis pointers may require program analysis 
alternative version different vectorization programs different alignment assumptions 
non uniform domain specific isa complicates code generation 
identify expression satisfies dependence continuous access alignment requirements may find expression direct mapping underlying isa 
operands expression supported data types 
vectorization successful vector code generator able map non supported vectorizable expression sequence native vector instructions 
essence code generator serves layer hides difference underlying non uniform domain specific isa uniform general purpose isa high level programming languages 
summary features discussed section summarized table core procedures berkeley multimedia workload 
summary important loops kernel procedures vectorized issues discussed section handled compiler 
mean time loops ineligible fully vectorization inherent dependence circles function pointer loop body 
table 
code patterns berkeley multimedia workload applications 
lp loop pt pointer access ul unrolled loop sat saturated operations mt mixed types ma mapping arrays statements dep inherent dependence ptr function pointer access name core proc 
lp pt ul sat mt ma adpcm adpcm coder dep 
adpcm decoder dep 
gsm calculation short term short term sy lame quantize calc noise mpg synth jpeg ac refine ac jpeg idct decode ac ref rgb convert mpeg dist form comp dither frame djvu backward filter forward filter encode buckets decode buckets init mesa flat true ptr 
smooth true ptr 
write span ptr 
gl shade dist atten anti textured gl depth test 
doom povray rs loop rs mix mystery mix single study showed despite success vectorizing traditional vector processors vectorization multimedia extensions long way go 
gap mme vectorization traditional vectorization natural result architectural differences multimedia extensions traditional vector processors differences multimedia applications numerical applications 
conducted depth study bmw benchmark suite 
code study identified key differences mme traditional vectorization code patterns common multimedia applications new issues arise mme vectorization 
discussed solutions address 
step power multimedia extensions vectorization 
study focuses identifying new requirements challenges faced mme vectorization providing actual solutions 
immediate propose new techniques address issues identified measure effectiveness techniques bmw benchmark 
time extend study application domain numerical applications 
interesting see numerical programs vectorized benefit multimedia extensions 

keith pradeep 
multimedia workloads change processor design 
ieee computer vol 
september 

andreas krall sylvain 
compilation techniques multimedia processors 
international journal parallel programming vol 


nathan alan smith 
design characterization berkeley multimedia workload 
multimedia systems vol 


lee potkonjak william mangione smith 
mediabench tool evaluating synthesizing multimedia communications systems 
proceedings micro 

gnu compiler collection gcc 
free software foundation boston ma 
david patterson john hennessy 
computer architecture quantitative approach 
morgan kaufmann publishers san mateo california 

david kuck 
measurements parallelism ordinary fortran programs 
ieee computer vol 
jan 

david padua wolfe 
advanced compiler optimizations supercomputers 
acm communication vol 
dec 

gerald monica lam 
optimizer multimedia instruction sets 
second suif compiler workshop stanford august 

venkat hugh lauer tanaka ellen xu chris wilson 
compiler mitsubishi electric neuro processor array 
suif compiler workshop stanford january 

andreas krall sylvain 
compilation techniques multimedia processors 
international journal parallel programming vol 



vectorizing compiler multimedia extensions 
international journal parallel programming vol 


bay software www com vast altivec html 

portland group compiler technology 
www com products htm 

software limited 
www com features html 

bik milind paul grey tian 
automatic intra register vectorization intel architecture 
international journal parallel programming vol 
april 

fisher dietz 
compiling simd register 
workshop languages compilers parallel computing university north carolina chapel hill north carolina august 

samuel larsen saman amarasinghe 
exploiting level parallelism multimedia instruction sets 
proceeding sigplan conference programming language design implementation vancouver june 

callahan dongarra levine 
vectorizing compilers test suite results 
proceedings acm ieee conference supercomputing orlando florida 

kohn maturana tremblay prabhu 
visual instruction set vis ultrasparc 
proc compcon san francisco california march 

ruby lee larry 
mapping application software multimedia instructions general purpose microprocessors 
spie symp 
electric imaging science technology san jose california february 

david carlson robert mueller 
multimedia extensions mhz risc microprocessor 
ieee journal solid state circuits vol november 

mips technologies mips extension digital media 
white march 

intel 
ia intel architecture software developer manual preliminary intel pentium processor information volume basic architecture 

stuart greg favor fred weber 
amd dnow 
technology architecture implementations 
ieee micro vol 
march 

intel 
intel architecture optimization manual 

sam fuller 
motorola altivec technology 
white may 

william blume rudolf eigenmann 
range test dependence test symbolic non linear expressions 
proceedings supercomputing washington november 

wu cohen padua 
monotonic evolution alternative induction variable substitution dependence analysis 
proceedings th international conference supercomputing sorrento italy june 

bik grey tian 
automatic detection saturation clipping idioms 
proceedings th international workshop languages compilers parallel computers july 

sam larsen witchel saman amarasinghe 
increasing detecting memory address congruence 
proceedings th international conference parallel architectures compilation techniques pact charlottesville va september 
