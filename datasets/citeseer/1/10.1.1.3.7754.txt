implicit explicit schemes fast animation particle systems eberhardt wilhelm institut universit bingen germany mail gris uni tuebingen de particle systems widely employed animate deformable objects 
order achieve real time capable systems simplifications reduce computational costs solving ode expense numerical physical correctness 
implicit explicit imex methods provide way solve partly stiff systems efficiently system meets requirements 
methods allow solution differential equation particle systems computed correctly quickly 
imex method simulate textiles 
particular approach require works stiff materials 
mid animation deformable models attracted attention computer graphics 
terzopoulos fleischer proposed continuous model deformable objects solved resulting pdes finite differences 
particle systems common model particular dimensional deformable objects textiles :10.1.1.40.3173
approaches require ordinary differential equation solved 
terzopoulos fleischer semi implicit numerical method explicit space implicit time explicit methods popular 
require considerably step systems equations solved 
unfortunately explicit methods allow small time steps stiff particle systems 
baraff witkin implicit time stepping underwent renaissance animation implicit methods allow large time steps loss stability :10.1.1.40.3173
traditionally computer graphics realistic behaviour important short computation time virtual reality applications interactive frame rates necessary 
presentation barrier torn accept hours computation animation deformable objects 
focused reducing computational costs step preserving stability properties implicit algorithm 
major drawback implicit methods step requires generally nonlinear system solved 
necessarily step newton method solve system 
achieve interactive frame rates computer animation approaches circumvent problem 
simplifications introduced allow fast performance implicit step 
consequence simplifications solution solution ode originally posed 
results visually pleasing doubtful specific materials modelled correctly way 
propose imex methods solve arising differential equation fast correctly 
imex methods called split odes consist methods implicit explicit applied stiff parts ode second parts 
methods numerical analysis instance solve convection diffusion problems 
main idea split right hand side function ode preferably linear stiff part nonlinear part 
way linear system solved time step 
compare method approaches taken authors 
numerical methods approaches require initial value problem ordinary differential equation form solved 
specialise system exploit structure 
multistep methods discussed imex methods derived multistep methods describe briefly 
method steps form time step size numerical solution time 
coefficient required nonzero 
important special cases class adams methods class bdf methods backward differentiation formulas multi step method called implicit 
implicit method requires solution nonlinear system equations needed evaluate 
equations solved newton method newton scheme 
fixed point iteration suitable stiff odes 
nonlinear system system solved 
newton method applied leads systems linear equations form 

known forward backward euler schemes fit multistep frame 
forward euler method turns explicit adams method backward euler method bdf method 
methods ones especially developed deal stiff equations 
imex schemes order reduce computational look specialised setting right hand side split ode incorporates stiff part system remainder 
discussed numerical analysis literature possible combine schemes solving 
done stability properties implicit method nearly preserved gaining ease computation explicit method 
thorough analysis combining multistep methods 
constant step size obtain general formula compare coefficients explicit implicit method respec tively 
newton method solve defined analogously 
linear system get jacobian contains stiff eigenvalues system 
approach may save lot don compute jacobian 
improvement achieved linear operator respect case newton method reduces solution single linear system possible formulate symmetric jacobian conjugate gradient method cg stationary methods jacobi method suitable large stiff eigenvalues 
cg advantage fast convergence direction major eigenvalues represent stiff components 
possible isolate stiff components linear operator inexact simplified newton method solution respectively 
exploiting second order structure system discussion special structure defined ode second order auxiliary variable gets equivalent system order doubled dimension jacobian special form exploit analogously splitting respectively parts solving omit newton index iteration 
advantage upper half left computation solution dimension system reduced original dimension second order ode 
save considerable amount computing time 
comparison methods ideas context imex schemes implicitly previous 
baraff witkin formulate nonlinear constraints linear approximation obtain linear system equations :10.1.1.40.3173
way system solved implicit euler step linear solved efficiently cg method 
method corresponds solution nonlinear system newton iteration 
nonlinear part integrated high stiffness may encounter similar problems deal 
provot proposed simple model incorporating linear springs 
model desbrun implicit euler method 
system split linear nonlinear part precomputed inverse system matrix solving linear part equations 
don aim solving equation completely don integrate nonlinear term 
correcting force introduced preserve angular momentum approximately 
precomputed inverse prohibits change step size changes elastic moduli 
kang simplification avoid solving linear system 
order update solution vector step divide row diagonal entry matrix linear system 
just perform single iteration jacobi scheme solving linear equation 
may little solve equation damp modes especially considering fact convergence behaviour strongly depends special prop erties system matrix fact diagonal dominant identity 
equation counts convergence may hardly conceivable 
post correction step restrict spring maximum value 
moderately stiff springs obtain behaviour performing post correction 
unfortunately physical soundness guaranteed modification numerical solution 
modelling mass spring system note stiffness particle systems model textiles due springs account tension forces provot calls springs structural springs 
sufficient solve springs implicitly explicit scheme remaining forces 
forces linear springs particles elastic modulus spring rest length 
desbrun split forces linear part non linear part approach included treated explicit method part 
possible constant absolute value jacobian contribute significantly 
solution imex scheme remains stable circumstances feasible parameters treated explicitely 
additionally need damping forces account energy dissipation 
modelled structural spring damping coefficient 
dissipative forces stiff linear incorporated 
get linear forces spring acting particle defining matrices analogously linear forces written matrices represent discretized laplacian operator models diffusion deformable model 
desbrun 
explicit forces contained arbitrary non stiff forces 
forces due bending shearing depending angles typically magnitudes smaller compared tension forces integrated explicitly 
approach major advantage particle system anymore restricted springs described provot model allows triangle meshes animated 
external forces due air resistance wind gravitation treated explicitly 
setting linear system describe imex order method applied described particle system 
uses implicit explicit form euler methods follow section reduce system coordinates ordinates applying integration scheme lower row equation 
implicit gives euler method applying system substituting symmetric linear system solved efficiently cg method 
cg iteration complexity sparse matrix vector multiplication linear number nonzero entries sparse matrix 
sparse matrices general nonzero expensive multiplying inverse elements due loss sparsity inversion 
seen stiffness system depend 
note corresponds angular frequency harmonic oscillator 
smaller mass density material leads differential equations 
furthermore finer discretization leads ode single particle finer mesh smaller mass matrix system changes elastic moduli damping coefficients change 
forces textiles linear approximated piecewise linear springs see 
required realistic textile modelling 
general matrix set step 
number cg iterations depends condition number matrix starting value iteration 
condition number matrix improved incomplete cholesky preconditioner 
effect iteration converges steps 
starting value computed predictor new solution vector values solution 
considering single step integration methods value compute predictor follows constraints collision response numerical setup animation way enforce constraints particular constraints imposed collisions 
baraff witkin efficient method enforce constraints cg method :10.1.1.40.3173
iteration cg method new direction filtered solution alter constrained direction 
necessary preset velocity particle start value cg method constraining velocity directions guaranteed velocity unchanged final solution returned cg method 
repositioning suggested produced severe increase number cg iterations system :10.1.1.40.3173
dispense alteration particle positions control position particle time described constraint enforcing mechanism 
correcting particle position want particle move back surface constrain velocity normal direction penetrated surface projection oriented direction point particle penetrates surface see 
constrain direction particle velocity particle free move directions forces acting 
velocity constrained direction normal penetrated surface particle driven back surface move freely surface 
way allow textile penetrate temporarily 
visualisation frame auxiliary particles corresponding penetrated particles displayed penetration visible 
way kind collision elastic inelastic modelled 
dealing high stiffness model textiles extremely large elastic moduli obtained experiments note solution computed remains stable movement textile reduced large time steps animation comes unstable methods show chaotic behaviour 
reason happening matrix linear system entries couple different coordinate directions solve independent systems 
changes direction compensated direction integration step coupling terms contained 
appear single computation right hand side linear system 
order overcome problem coupling terms updated linear solving procedure right hand side system updated cg method 
start cg method initial cg iterations update current approximative solution cg iterations 
updated iteration converges conventional cg method 
algorithm solve error preconditioner tolerance constraint operator enforces constraints described previous section pseudo code algorithm updated filtered cg solve cg iterations needed time step solver efficient 
stiff springs simplified newton method needs cg iterations plain cg require simulation 
sufficient constant forcing term impose residual tolerance cg iteration 
improvements optimising forcing term part forthcoming 
results implemented numerical algorithms matrix template library mtl university notre dame 
provides efficient flexible data structures sparse matrix vector operations crucial simulation performance 
evaluate performance techniques examples simulated various parameters 
example square table 
example demonstrates collision response described section 
second textile fixed corner points 
particles cg matrix setup solver cg square table performance simulation sec 
mips rs mhz particles cg matrix setup solver hanging textile performance simulation sec 
mips rs mhz cg successive entries table number particles example elastic modulus mass quotient damping coefficient mass quotient structural springs time step number cg iterations 
measured computation times modified cg method matrix setup times numerical solver including matrix setup cg computation new solution number cg iterations increases stiffness get performance stiff springs 
note smaller time step necessarily lead increase number cg iterations 
discussed system efficiently simulates behaviour textiles 
approach arising differential equation completely solved nonlinear forces treated correctly 
especially important context high stiffness neglecting forces lead wrong results 
due flexible design system suited virtual reality applications high accuracy simulation cloth 
results show approach leaving elastic moduli matrix constant capable simulating particles real time 
accurate model high varying stiffness model nonlinear behaviour cloth computation time exceed minutes expensive high quality rendering scene 
model numerical treatment depend regular structure particle mesh 
rectangular triangular meshes provide additional freedom modelling complex shapes textiles may 
focus algorithmic numerical improvements variable time stepping jacobi saving strategies result speedup 
choosing optimal preconditioner variable forcing term may prove valuable 
examples partly supported dfg 
grateful christian fruitful discussions 
developers mtl making library available 

implicit explicit methods timedependent partial differential equations 
siam numer 
anal 
baraff witkin :10.1.1.40.3173
large steps cloth simulation 
cohen editor siggraph conference proceedings annual conference series pages 
acm siggraph addison wesley july 
isbn 
breen house 
predicting woven cloth interacting particles 
glassner editor proceedings siggraph orlando florida july computer graphics proceedings annual conference series pages 
acm siggraph acm press july 
isbn 
desbrun schr der barr 
interactive animation structured deformable objects 
graphics interface pages june 
eberhardt weber 
particle system approach textiles 
computers graphics 
eberhardt weber 
fast flexible particle system model cloth 
ieee computer graphics applications sept 
wanner 
solving ordinary differential equations ii 
springer verlag berlin 

kang 
choi 
cho 
lee 
park 
real time animation technique flexible thin objects 
wscg pages feb 
provot 
deformation constraints mass spring model describe rigid cloth behavior 
davis prusinkiewicz editors graphics interface pages 
canadian information processing society canadian human computer communications society may 
isbn 
siek lumsdaine 
matrix template library generic components high performance scientific computing 
computing science pages nov 
ftp www lsc nd edu research mtl 
terzopoulos fleischer 
deformable models 
visual computer 
