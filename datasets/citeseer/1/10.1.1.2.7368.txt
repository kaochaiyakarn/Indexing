page assessing dependability ogsa middleware fault injection nik jie xu department computer science university durham science labs south road durham dh le durham ac uk jie xu durham ac uk presents research devising dependability assessment method upcoming ogsa middleware network level fault injection 
compare existing dce middleware dependability testing research requirements testing ogsa middleware derive new method fault model testing ogsa middleware 
implemented extendable fault injector framework undertaken small proof concept experiments simulated ogsa middleware system apache soap apache tomcat 
results initial experiments uncovered discrepancy simulated ogsa system 
detail research including plans adapt fault injector framework stateless environment standard web service environment ogsa service 
keywords software fault injection grid middleware fault model ogsa soap 
page grid computing means solving large scale scientific problems requires dependable middleware layer facilitate interaction various nodes grid system reduce level complexity programmer designing implementing program solve problem 
ogsa system currently front running technology grid computing requires detailed metric dependability 
required uncover existing problems system provide potential users metrics compare dependability systems 
fault injection proven method assessing dependability system 
done area fault injection distributed systems general appears little research carried applying middleware relation corba middleware grid middleware ogsa particular 
sets method fault model testing ogsa middleware details experimental results obtained 
main aim research define method assess dependability grid middleware identify key components grid middleware apply method apply method key area ogsa act proof concept method provide metrics allow method refined experiments 
previous research field middleware testing fault injection concentrated tightly coupled rpc distributed systems 
defining testing method grid middleware new set challenges faced require different solutions effect areas system priority testing 
key differences considered greater chance network failure higher levels security encryption protocol stack generic nature page platform need support multiple programming languages timing constrains asynchronous nature grid operations 
contribution threefold analyse differences techniques characterise tightly coupled rpc distributed systems grid distributed systems define method characterise grid middleware apply method key component ogsa 
characterisation technique practical network level fault injection prevent rejection messages security issues messages intercepted level slightly physical network layer see section 
basically request messages target services corrupted pass protocol stack api service behaviour observed classified possible failure modes 
experiments version ogsa specification 
toolkit specification due quarter initial experiments conducted tomcat version apache soap java running redhat linux installation 
comparison ogsa systems classic rpc systems ogsa systems represent radical departure classic tightly coupled rpc distributed systems corba dcom moving away tightly coupled rpc architecture service 
new approach distributed systems architecture requires new fault model testing method gone 
published dependability classical distributed systems middleware little published grid middleware dependability 
aims define method assessing dependability grid middleware ogsa particular 
page designing new fault model testing grid middleware important review differences grid middleware traditional distributed systems decide existing techniques appropriate apply features require new techniques 
shall section compare ogsa middleware corba dcom popular distributed system middleware products dce specification 
interface definition dce specification defines interface definition language idl purpose specifying interfaces 
definition language compiled idl compiler form utilised middleware 
dcom takes approach compiling idl byte sequence termed type definition file middleware layer marshal un marshal data packets 
done termed automation types complex types require idl compiler generate proxy stub code 
corba generates proxy stub code regardless type 
means client server copies proxy information order marshal un marshal data packets 
dynamic discovery service information problematic see section 
ogsa uses similar definition principle define interfaces 
ogsa utilises web service definition language wsdl define interfaces 
defined xml held known locations 
host single wsdl definition service dynamically marshal un marshal data accordingly circumventing need host copy proxy stub code 
cases detailed interface definitions help automate test generation parsing definition files generating tests 
envisaged manual intervention required add boundary limits tests defined wsdl 
page message format dce specification defines binary message format dce middleware implementations 
messages header followed stub data defined idl definition optional authentication trailer 
formats message connection oriented message format connectionless message format 
means dce run connection oriented transport connectionless oriented transport 
dce specification doesn define transport layer specification defines comprehensive protocol exactly delivery connection oriented connectionless messaging 
ogsa messages defined xml format 
ogsa doesn assumptions underlying transport supports synchronous asynchronous messaging 
binary format message relatively easy inject fault message type byte level layout 
xml message formats variable length ascii text injecting faults message require parsing xml injecting message outputting new xml message 
synchronous asynchronous transfers dce distributed systems tend synchronous nature corba com provide asynchronous capabilities 
main method middleware products implement asynchronous messaging polling 
asynchronous interface compiled idl multiple stub methods generated call send message poll response commonly method supplying asynchronous notifications implement call back interface 
usually done creating publicly exposed interface client passing interface pointer server 
server call exposed methods page interface needs notify client event disadvantage introducing concurrency issues 
ogsa provides number mechanisms synchronous asynchronous transfers 
include rpc style request response messaging asynchronous notifications interface bulk data transfer gridftp 
dce ogsa middleware implement roughly set rpc transfer mechanisms similar fault injection models test ogsa middleware 
ogsa implements bulk transfer mechanisms incorporated fault model separately 
authentication encryption dce system public key challenge protocol authenticate connection dce cell 
structured provide single sign functionality 
connection authenticated corba middleware provide encrypted communication ssl protocol whilst dcom connections sent unencrypted 
authentication process sends initial challenge server respond correct response 
authentication trailer attached packet sent provide level security information trailer isn linked rest message contents data message body changed authentication effected 
implementations dce middleware corba ssl transport providing encrypted transport level physical layer security 
dcom rely pki challenge protocol authenticate connections provide encryption send data packets clear 
ogsa systems utilise higher level authentication encryption classic distributed systems environment expected run 
whilst page classic distributed systems mainly run private lans ogsa systems envisaged run internet geographically different sites possibly run different organisations 
ogsa systems may utilise ws security provide security 
extension soap protocol allows authorisation certificate token provides mechanism encryption public key exchange 
may utilise transport layer ssl https provide level security 
whilst may possible inject faults dce distributed systems weak security network packet level faults injected ogsa systems authentication encryption takes place 
done packets rejected receiving host security attacks test intended fault class 
service discovery system registry research conducted providing general purpose service discovery mechanism corba currently corba dcom rely client server objects having detailed knowledge idl interface specifications locations services wish utilise 
little specific instances objects stored local registries allow rpc calls routed correct context machine 
registry mechanism ogsa allows discovery specific services particular host capabilities service dynamic registration un registration service host 
ogsa registry central operation ogsa system requires testing part fault model mutation data stored registry fault injection messages sent received registry service un registration database whilst transactions executed 
page may multiple identical services provided grid registry mechanism fault model take account provider may utilized service fails respond 
timing lifetime objects dce systems simple concept life cycle object 
simplistic terms object created exists server released garbage collected 
keep alive ping mechanism implemented check objects destroyed early host crashes unforeseen events 
dce systems intended run lans reasonably fast response times packet time outs equivalently short 
ogsa systems far complex notion life cycle 
ogsa object specified life span 
life span may extended reduced utilising client time possible object may may exist regardless state assumed utilizing client 
asynchronous operations may take long time execute compared tightly coupled distributed systems service requests may specify time execute data returned may considered invalid 
ogsa defines far wider range timing constraints dce system incorporated fault model regard data validity times delayed data responses putting outside validity times prematurely deleted objects 
summary differences major differences dce middleware systems ogsa middleware descriptive generally available definition language detailed registry xml message format bulk transfer mechanisms encryption lifetime objects 
page method assessing dependability ogsa middleware system dependability assessed model measurement techniques 
modelling predictions dependability system decided concentrate efforts developing measurement technique provide actual metrics complete middleware system 
main techniques measurement assessment observation errors failures large sets logs exercise seldom pathways code consume large amounts time achieve 
felt deliberate insertion faults yield data faster whilst exercising seldom pathways code 
research done regard testing classic distributed systems fault injection 
section noted number differences dce middleware ogsa middleware 
research ascertain research basis creating test method ogsa middleware appropriate additions modifications 
testing techniques number techniques available performing fault injection summary 
techniques decided base initial experiments network level fault injection reasons firstly common factor design client server software secondly heterogeneous implementation language nature ogsa software simple implement thirdly protocol packets modified simulate large number fault classes transport layer failure api parameter faults 
fault classes corruption memory space practical initial experimentation carried software running jvm find commonly available fault injector supports facility code mutation techniques reasonably employed inject faults heterogeneous nature ogsa page systems felt wasn feasible initial experiment robustness testing techniques addressed experiments see section achieved partly simulating corrupt data ogsa interface level corrupting network traffic syscall interposition techniques felt complex implement initial experiment especially jvm software large number potential operating systems hosting middleware 
method consider variation network level fault injection means determining system dependability 
intend inject faults network packets directly problems altering encrypted signed packets constructed 
purpose signing packet identify source packet ensure packet isn intercepted tampered transit 
effectively inject fault discarded receiving transport layer consequently relay fault desired destination test desired area 
encryption concerned ensuring packet read tampered whilst transit 
consequently packet unreadable encrypted injecting random faults packet impossible allow fine level packet manipulation require 
classes faults tested experiment see section 
propose inject faults api boundary application top protocol stack lowest easily accessible point inject faults encryption signing taken place 
overcome problems allow level control require 
page system boundaries targeting test method ogsa systems wasn available start experiment define test system boundary terms available software simulate ogsa system 
ultimate aim test method evaluate dependability ogsa interface method calls dependability ogsa middleware 
concerned testing operation client applications services installed servers 
expect applications fault tolerant degree required execute test scripts user intervention 
purposes test method consider part simulated ogsa middleware 
apache soap api network transport servers host ogsa services 
client applications server side service code considered outside boundary tested see 
fault model types fault affect ogsa distributed system classified follows physical faults effecting memory processor registers software faults programming errors design errors 
occur application level system boundary consider errors system boundary experiment resource management faults memory leakage exhaustion resource file descriptors communication faults message deletion duplication reordering corruption 
whilst traditional distributed systems class errors widely assumed large effect middleware usually built reliable transport lan ogsa middleware runs wans may unreliable lan systems especially message delivery times life cycle faults premature object destruction starvation keep alive messages delayed asynchronous responses outside specified timing constraints 
page research concentrate communication faults implemented network level fault injection 
allow inject network level faults allow create framework allow simulate faults injected api level modifying soap message parameters 
failure modes ogsa service discuss ways ogsa service fail effects failure system crash service instance crash hosting web server hang service corruption data middleware corruption data middleware duplication messages omission messages delay messages 
effect modes depend fault tolerance system 
middleware able detect reject corrupted data raise appropriate error responses 
true duplication omission messages 
fault injector framework detailed detect states monitoring soap message flow various elements system 
crashes services hosting environments detected time mechanisms 
experiment fault injector framework means checking 
addressed research 
problematic operation corrupts data leaving middleware 
corrupt data passed middleware layer network boundary handled corrupt data passed application mechanism place application deal 
fault injector detect monitoring soap message exchange detecting invalid data returned application 
problematic area service hang 
whilst may superficially appear service crash indicative corruption hosting environment 
may page symptoms application level harder detect 
differentiating service hang server crash left research 
delayed messages may cause errors due service life span issues 
middleware relevant error conditions application delayed messages 
application layer ultimately handle 
fault injector framework handle delaying request response packets 
noted fault injector mechanism introduce latency message exchange taken account constructing application test 
quantified effect subject experiment 
fault injection design fault injector consist elements fault injector framework hooks soap api pass soap messages fault injector user script inject faults message stream 
envisaged research enhance test infrastructure extend areas tested 
fault injector framework ogsa messages encoded xml format message parsed re emitted inject fault 
take place message signing encryption taken place 
fault injector sax parser stage parse process process messages 
pass determine particular message fault injected 
second pass happen pass indicates second needs inject fault 
fault needs injected message passed back soap api unchanged 
mechanism chosen dom tree implementation provides simplicity sax parser implementation reduces overhead parsing page message twice 
means message doesn reassembled dom tree sending back soap api 
injector written separate process software test 
small amount hook software written native language host system test allow communication entities see section 
communication facilitated tcp ip socket connection fault injector process acting server 
overhead processing message taken parsing xml network transfer time disregarded 
injector structured way reasons simplifies design injector software 
injector software implemented small amount hook code needing implemented host platform language 
fault injector separate process connected tcp ip socket possible load processing separate machine 
possible nodes instance fault injector allow multi node experiments ordinated 
fault injector written python series classes global function execute user test script 
python language chosen implement test harness scripting language provides scripting language provides object oriented facilities comprehensive set xml processing classes string processing functions self compiling allows easy modification scripts whilst providing speed benefit code execution 
page addition injecting faults fault injector framework monitors stream messages generated faults 
fault conditions recorded log file see table notifications injected faults see table 
log file stored xml format easily analysed 
table fault injection report tags tag description tag inserted log soap message intercepted discarded 
tag inserted log soap message intercepted corrupted 
soap api modifications initial experiment conducted apache soap package running tomcat 
soap library modifications consist small quantity hook code inserted org apache soap envelope class outgoing messages org apache soap rpc call incoming messages 
chose method instrumenting soap library relatively non intrusive easily portable upcoming ogsa toolkits 
hook code consists opening socket fault injector server sending soap packet receiving modified packet back 
modified packet replaces packet constructed soap library 
page currently hook code opens new socket connection soap message passed fault injector 
whilst adverse effects noted experiment opening closing sockets short duration mean socket linger value forces operating system keep socket connection open passed point socket connection opened communicate fault injector 
consumes file descriptors socket linger timeout allows socket fully closed 
cause starvation resources client server machines cause unintended secondary errors 
intend address experiments modifying hook code fault injector socket connection element reuse messages 
table log file fault tags tag description parseerror tag inserted log incoming soap packet received soap library fails parsing way 
tag inserted log soap fault message detected expect fault flag set user script 
flag cleared message received ensuring registers tag message injected fault 
tag inserted log soap fault message isn detected expect fault flag set user script 
flag cleared message received ensuring registers tag message injected fault 
tag inserted log soap fault message detected expect fault flag isn set 
records unexpected fault conditions 
user test scripts user test scripts written derived classes fault injector creates instances test inject record faults 
example simple script 
script simply defines fault injector trigger class derived inject doesn flag messages faults injected 
page fault injector framework creates new instance inject class handler class message processed 
results class created scope entire lifetime test run record tag statistics 
statistics test simplistic expect enhance experiments 
currently class records cumulative number occurrences tag specific attributes return count method 
allows tests form reject fifth occurrence constructed scanning tag checking count 
table inject class methods defined user script method description method called fault injector framework ascertain fault injected message 
return fault injected 
suggest variable contain return value set start body methods 
method called fault injector check see test conditions met 
return indicate test progress indicate test terminate 
start method called fault injector framework start tag encountered message 
tag name tag attributes passed parameters checked normal string processing functions check fault needs injected 
body method called fault injector framework body tag received 
complete body tag passed checked normal string processing functions see fault needs injected 
method called fault injector framework tag received 
user trigger class derived class inject define methods see table 
combining data obtained result class fault triggers defined 
base class contains method called instructs fault injector framework scan message check see fault packet log results scan log file see table 
page experiment topography experiment performed simple system composed elements see 
experiment designed executed machine proof concept experiment fault injector framework designed experiments easily client request fault middleware boundary client request server response system topography response may contain fault request may contain fault request may contain fault distributed multiple machines reduce loading particular machine allow truly distributed ogsa systems assessed 
response may contain fault fault injector element client software 
second element simulated middleware consists soap api tomcat server 
third element fault injector software scripts 
fourth element server side application 
server response fault service analogy ogsa system terms system boundary ogsa interfaces forming api system system boundary drawn back level soap api don ogsa toolkit 
ogsa system page relevant ogsa interfaces libraries sit system boundary soap api 
server configured provide minimal emulation ogsa services complex features registry functionality 
assumed purpose experiment ogsa grid service equates web service 
server import parser import handler inject result class inject def init self direction inject init self direction self def self return self def self return def start self name attrs return def body self name ch return def self name return class handler def init self inject results handler init self inject results def start self name attrs return def body self name ch return def self name return class result def init self result init self example user script skeleton page encryption signing employed experiment don layers add test system 
envisaged included tests 
faults injected client server soap apis responses monitored check effect grid middleware 
results soap application written deployed server machine provided simple set routines calculated simple easily verifiable integer sequence numbers see 
interface method defined poll back sequence value time 
soap client program written polled back sequence numbers apache soap api 
simple applications form test bed experiments described 
area test decided emulate basic structure ogsa middleware experiment ogsa interfaces appropriate area test soap transport 
provides area study unchanged actual released system 
provides basis writing fault injection software gaining experience inserting hook code soap library 
major difference experiment testing ogsa system need keep track web service instances 
web services inherently stateless nature ogsa implementations implement instance server 
implemented identifier sent soap packet envisaged track different contexts fault injector framework 
fault injector written object oriented manner envisaged sets derived class written convert fault injector framework handle page package test public class int seq operation ogsa set handle stateless operation normal web services 
public int getnext int result seq seq return result public int return seq public void reset int start seq start example soap test application test script test intended check middleware combination fault conditions 
script written inject faults stream soap messages tenth sequence request client server corrupting encoding styles schema address fifteenth sequence response server client corrupting encoding styles schema address discarding third sequence response server client seventh sequence request client server inserting extra text soap env body element method element 
total packets faults injected total faults pkt injected variance faults injected page analysis results reveals number faults injected system test approximately total number packets sent received fault injector see 
approximately corrupted soap packets remainder withheld response packets 
test performed loop iteration repeated times loop iteration 
variation results set results produced particular loop iteration value small variation percentage totals loop iterations see 
faults faults faults missing generated expected variance faults generated test fault injector recorded classes faults fault expected generated fault expected generated fault generated expected 
fourth category response injecting fault inferred 
fault expected deemed occurred fault injected system fault packet expected generated packet intercepted normal packet fault packet 
condition occurs response sent back server client fault injector discards packet 
client generate fault packet way knowing response packet expected 
fault conditions generated see faults expected received generated schema corruption case expected 
fault expected faults attributed discarding response packets server client 
indicated level reliability middleware error conditions appear page faults generated faults produced faults generated test handled correctly middleware server remained stable 
reliability middleware assessed period approximately hours due time constrains data indicate level reliability period time conditions 
experiment attempt accelerate production error conditions middleware fault injection time duration required access middleware reliability reduced 
determined test duration capable ascertaining focus research 
faults missing generated inserting text soap env body element 
fault expected break soap specification fault packets generated 
small deviation soap specification didn appear effect reliability middleware lifespan test continued function correctly respects 
believe caused soap implementation installing handler specific element body expects data specification 
consequently explains continued functioning soap implementation data soap env body tag just silently discarded 
test program loop iterations faults generated faults expected faults missing page total packets fault condition classed non catastrophic event caused rare event 
classed event rare likelihood happening outside fault injection experiment extremely remote 
require corresponding bug soap implementation connected soap implementation receiving message generate event 
effects system negligible lifespan test approximately hours longest test test case caused server service crashes application crashes believe non catastrophic event 
noted client application returned error conditions faults injected performance degraded slightly due combination timeout effects response packets discarded latency introduced fault injector parsing soap messages 
faults injected faults injected test test program loop iterations faults injected total packets responses discarded total packets middleware appeared high degree dependability continued operate service requests generating error conditions handlers hadn implemented soap implementation 
furthermore test executed page total packets faults injected total faults pkt injected variance faults injected test period hours iteration test cumulative memory leaks similar effects seen 
data required determining suitable duration test determine dependability middleware long periods time experiment indicate middleware posses level dependability errors communications medium 
second test script intent test check dependability middleware simulated bad connection 
script written discarded request response getnext 
cause approximately soap packets requests responses discarded see 
loop iteration run repeats test test 
variation results obtained repeated test number loop iterations 
small variance totals loop iterations 
fault conditions detected faults class faults expected see 
expected result test discarding request packet client server servers point view having received request discarding response packet server client generates network packet fault handled time 
client application manually monitored verify correct error responses 
page faults generated faults faults missing expected test appeared indicate collection middleware test high degree resilience soap packet loss unreliable network timescale test approximately hours middleware continued operate correctly presence faults 
unexpected results obtained indicating level dependability test case 
discarding soap packets cause unexpected adverse effects client server server crashes hangs 
parameter value modification test script written allow application return values changed 
experiment allowed return data modified returning valid soap response packet 
tests generated errors modified results seen client program 
test carried ensure fault injector infrastructure reliably handle modifying soap parameter data whilst returning correctly formatted soap response packets 
facility required ogsa middleware research see section 
variance faults generated test main intend experiment assess viability network level fault injection determine dependability ogsa middleware perform proof concept experiment back analysis technique 
whilst experimentation required assess fault injection techniques method experiments yielded significant results applied simulated ogsa middleware 
page succeeded discovering small deviation mature soap implementation exercising untried control pathway 
whilst coding error minor discovery significant gone unnoticed long period time uncovered minimum time effort technique 
useful metrics obtained experiment indicated middleware run dependability duration test approximately hours 
capable continued operation presence faults system 
metrics gained second test especially significant provide dependability information ogsa middleware applicable current web servers unreliable links 
experiment provided useful information experience design insertion hook code soap implementation 
possible accomplish short timescale minimum disturbance existing code base 
experiment produced fault injector capable enhanced test ogsa middleware 
modular design means relatively easy enhance whilst maintaining existing interface 
written way easily enhanced handle ogsa middleware stateless web services 
secondary aim experiment create testing framework applied ogsa middleware specifically upcoming globus toolkit gt release 
commencement experiment alpha versions gt available key existing technologies gt simulate middleware allow fault injector framework constructed 
developing test method parallel gt ogsa development position assess dependability middleware short time alpha released 
short timescale alpha release dependability assessment allow problems uncovered passed middleware developers incorporated page alpha releases 
construction testing method started alpha release gt available working test method software ready time provide useful metrics alpha test period 
third aim dependability assessment method assess dependability ogsa interfaces 
planning initially method gt alpha release simulate soap level corruption packet loss done experiment assess effect gt 
allow quickly gather useful dependability metrics gt timely manner 
initial metrics gathered intend extend method test specific interface gt 
intend target security interface gt security trust key concerns grid computing 
envisage testing take form corrupting api level parameters framework credentials access permissions deliberately trying corrupt network messages see section existing techniques tools perform type assessment 
detailed method experimental details mainly undertaken proof concept determine technique test ogsa software 
experiment successfully demonstrated network level fault injection gather useful metrics system dependability 
required enhance method determine fault injection methods conjunction enhance replace network level fault injection 
undertaken enhancing existing fault injector accommodate robustness testing techniques 
done existing framework modify api parameters encapsulated soap message achieving aim corrupting data api interface 
done preliminary experiment prove specific page parameters modified needed ascertain practical technique implement robustness testing 
area research enhance existing framework track stateful nature gt services allow information target fault injection specific services instances services 
existing framework written object oriented manner easily accomplished adding small layer software derived existing base classes 
allow existing framework test normal web services required 
method enhanced test signing encryption faults envisaged mechanism fault injector framework carefully avoids problem 
area study possibly outside fault injector framework detection server hangs service crashes monitoring software soap message detection probably required detect 
foster kesselman nick tuecke physiology grid open grid services architecture distributed systems integration argonne national laboratory 
tuecke czajkowski foster frey graham kesselman open grid service infrastructure wg draft draft ed global grid forum 
allen foster karonis ripeanu seidel supporting efficient execution heterogeneous distributed computing environments proceedings sc 
keahey peng thompson foster greenwald mccune computational grids action national fusion collaboratory generations computer systems vol 
pp 

page russell allen foster seidel von laszewski astrophysics simulation collaboratory science portal enabling community software development cluster computing vol 
pp 

lyu software fault tolerance 
chichester new york john wiley 
marsden fabre dependability corba systems service characterization fault injection symposium reliable distributed systems osaka japan 
corba component model ed object managment group 
component object specification draft ed microsoft digital equipment 
distributed component object model dcom binary protocol microsoft 
dce remote procedure call issue ed open group 
christensen curbera meredith weerawarana web services description language wsdl ed 
deshpande schmidt ryan design performance asynchronous method handling corba distributed objects applications move meaningful internet systems coopis doa odbase irvine ca 
schmidt programming asynchronous method invocations corba messaging report vol 
pp 

thai learning dcom st ed 
sebastopol ca reilly 
atkinson della hallam baker klein lamacchia leach maruyama shewchuk simon web services security ws security version ed international business machines microsoft 
page box layman mendelsohn nielsen thatte simple object access protocol soap ed 
nolan simon composing deploying distributed applications semantic service discovery mechanism international conference parallel distributed processing techniques applications pdpta las vegas nv usa 
iyer failure data analysis lan windows nt computers reliable distributed systems lausanne switzerland 
ghosh fault injection testing distributed object systems tools pp 

hecht hecht qualitative interpretation software test data computer aided design test evaluation dependability beijing 
