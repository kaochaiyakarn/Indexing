cooperative computing sensor networks envision decade advances technology sensor networks powerful 
part larger class networks embedded systems sufficient computing communication energy resources support distributed applications 
current software architectures programming models suitable new computing environments 
distributed computing model cooperative computing smart messages software architecture programming large networks embedded systems 
cooperative computing distributed applications dynamic collections migratory execution units called smart messages working achieve common goal 
virtually userdefined distributed application implemented model 
illustrate flexibility describe implementation smart messages previously proposed applications sensor networks spin directed diffusion 
simulation results applications micro benchmark results prototype implementation demonstrate cooperative computing viable solution programming networks embedded systems 

cost embedding computing negligible compared actual cost goods trend incorporating computing wireless communication capabilities consumer products 
believe generation computing systems embedded virtually unbounded number dynamically connected 
systems iftode cristian kang division computer information sciences rutgers university piscataway nj usa iftode cs rutgers edu penetrate possible domain daily life expectation operate outside normal requiring far attention human users desktop computers today 
illustration systems received considerable interest couple years sensor networks :10.1.1.117.697:10.1.1.117.1253
networks severe resource limitations terms processing power amount available memory network bandwidth energy 
envision decade sensor networks part larger class networks embedded systems nes sufficient computing communication energy resources support distributed applications 
instance companies propose computer systems embedded cars video cameras able communicate 
networks networks intelligent cameras performing object tracking large geographical area beneficial perform local computations cooperate order execute global task 
may perform sophisticated filtering data node acquired image distributed object tracking running centralized algorithm server 
challenge face program nes appropriate computing model system support necessary execute distributed applications networks 
nes pose unique set challenges traditional distributed computing models difficult employ programming 
number devices working achieve common goal orders magnitude greater seen far 
systems heterogeneous hardware architectures embedded system tailored perform specific task 
nes typically deployed environments void human attention unacceptable expect human hit reset button recover failure 
nes inherently fragile node connection failures norm exception 
availability nodes may vary greatly time nodes unreachable due mobility depletion energy resources catastrophic failures 
nodes nes communicate wireless network interfaces 
communicate directly nodes transmission range 
similar ad hoc networks separation hosts routers disappears node perform routing 
scale heterogeneity encountered nes different application requirements preclude existence common routing support 
flexibility multiple routing algorithm network desirable 
applications running nes target specific data properties network individual nodes 
application point view nodes properties interchangeable 
fixed naming schemes ip addressing inappropriate situations 
need target specific data properties network raises issue different naming scheme dynamic bindings names node addresses 
naming scheme content properties appropriate nes fixed naming scheme 
propose distributed computing model cooperative computing software architecture nes execution migration 
cooperative computing applications consist migratory execution units called smart messages sms working accomplish distributed task 
sms user defined distributed programs composed code data execution control state migrate network searching nodes interest nodes program needs run execute routing node path 
believe distributed computing execution migration suitable nes data migration message passing due volatility dynamic binding names nodes specific networks 
cooperative computing provides flexible support wide variety applications ranging data collection dissemination content routing object tracking 
nodes network support sms providing name shared memory tag space inter sm communication access host system architecturally independent environment sm execution 
sms self routing responsible determining paths network 
sms name nodes interest properties self route nodes stepping stones 
applications cooperative computing able adapt adverse network conditions changing routing dynamically 
validate cooperative computing model designed implemented prototype modifying sun microsystem java kvm kilobyte virtual machine 
report micro benchmark results prototype running testbed consisting linux hp ipaqs equipped cards wireless communication 
results indicate cooperative computing feasible solution programming real world applications 
larger scale evaluation developed simulator executes sms allows account execution communication time 
simulator implemented previously proposed applications data collection data dissemination sensor networks directed diffusion spin :10.1.1.117.1253
simulation results show model able provide high flexibility user defined distributed applications limiting increase response time traditional non active communication implementations 
rest chapter organized follows 
section describes cooperative computing 
section presents node architecture model 
section discuss details smart messages section presents api cooperative computing 
section shows micro benchmark results prototype implementation 
section describes applications implemented sms simulation results section 
section discusses related 
conclude section 

cooperative computing model cooperative computing distributed computing model large scale ad hoc nes 
model distributed applications defined dynamic collections migratory execution units called smart messages sm cooperate achieving common goal 
execution sm described terms computation migration phases 
ex ecution performed step determined particular properties node 
nodes interest current computation sm may read process data 
intermediate nodes sm executes routing algorithm 
migrations sms carry mobile data code missing destination lightweight execution state 
nodes network cooperate providing architecturally independent programming environment virtual machine sm execution name shared memory tag space inter sm communication interaction host system 
sms system support provided nodes form cooperative computing infrastructure allows programming userdefined distributed applications nes 
model new distributed application developed priori knowledge scale topology network specific functionality node 
placing intelligence sms provides flexibility obviates issue implementing new application protocol nes difficult impossible conventional approaches 
sms resilient network volatility 
time certain nodes may unavailable due mobility energy depletion sms able adapt controlling routing 
sms carry multiple routing procedures choose appropriate conditions encountered network 
feature sms discover routes nodes interest adverse network conditions 
moving execution source data improves performance applications need process large amounts data 
example transferring large size images network object tracking application sm perform analysis images nodes acquired 
reduces network bandwidth energy consumption time improves user perceived response time 
impact performance transferring code limited caching code nodes 
shows simple application illustrates novel aspects computation communication cooperative computing 
application performs object tracking large area campus airport urban highway system network mobile robots attached cameras 
target represented person moves geographical region 
user inject tracking sm inject tracking smart message tracking completes response smart message migrates back tracking smart message response smart message camera performs tracking camera just routing distributed object tracking cooperative computing node network 
sm migrates node acquired image possible target object analyzes image may decide follow object 
network maintains routing infrastructure sm responsible determining path cameras detected object 
sm direction motion geographical information chase object 
sm arrives new node picture object generates task analyze object motion 
sm may migrate neighbor nodes obtain pictures object different angle lighting conditions 
tracking completes sm generates response sm transport gathered information back user node 

node architecture goal sm software architecture keep support required nodes network minimum placing intelligence sms individual nodes 
shows common system support provided nodes cooperative computing 
admission manager receives incoming sms decides accept stores messages sm ready queue 
code cache stores frequently code reduce amount traffic network 
virtual machine vm acts hardware abstraction layer scheduling executing tasks generated incoming sms 
tag space name shared memory stores data objects persistent sm executions offers unique interface host os system 

admission manager prevent excessive resources energy memory bandwidth node needs perform admission control 
sm presents resource re smart message arrival admission manager smart messages ready queue virtual machine code tag cache space node architecture smart message migration resource table 
admission manager responsible receiving incoming messages storing sm ready queue subject admission restrictions 

code cache commonly applications executing nes localized behavior exhibiting spatial temporal locality 
cache frequently sm code order amortize time initial cost transferring code network 

virtual machine virtual machine vm schedules executes migrates sms 
migrate sm vm captures execution state sends code data hop 
vm destination resume sm instruction migration invocation 
vm ensures sm conforms declared resource estimates sm removed system 

tag space node supports sms manages shared memory called tag space consisting tags persistent sm executions 
tag space contains types tags application tags created sms tags provided system 
tags define basic hardware node provide sms unique interface local os system 
sms allowed read write types tags create delete application tags 
illustrates structure application tags 
identifier name tag similar file name file system 
identifier sms content node naming 
access sms tags restricted identifier access control information lifetime data application tag identifier access control information pointer handler tag structure tags access control information associated tag 
application tags vm associates access control information carried sm created tag owner tag 
tags owner device sets access control information application tags tags differ terms functionality lifetime 
application tags offer persistent memory limited lifetime application tags alive certain amount time sms created finished execution local node time interval tags expire node reclaims memory 
tags hand permanent provide pointer handler system call external process capable serving requests 
list possible utilizations tags naming sms name nodes interest tag identifiers 
data storage sm store data network creating tags 
data exchange data sharing exchanging data tag space communication channel different sms 
routing sms may create routing tags visited nodes store routing information data portion tags 
synchronization sm block specific tag pending write tag sm 
tag written sms blocked woken ready execution 
interaction host system sm issue commands request data host os devices tags 
information access control protection domains sm security general 

smart messages sms execution units migrate network execute nodes interest route node path node interest 
sms comprised code data sections referred bricks lightweight execution state resource table 
code data bricks dynamically assemble new possibly smaller sms 
ability incorporate necessary code data bricks new sms reduce size sms consequently amount traffic network code data carried sms divided bricks solely purpose 
execution state contains execution context necessary resume sm successful migration 
resource table consists resource estimates execution time tags accessed created memory requirements network traffic 
resource estimates set bound expected needs sm node admission manager admission decision 
sm computation embodied tasks 
execution task may modify data bricks sm local tags access 
migrate create new sms block tags interest 
collection sms cooperating common goal forms distributed application 

smart message life cycle sm defined life cycle node subject admission control admission task generated sm code data bricks scheduled execution completion node sm may terminate may decide migrate nodes interest 

admission 
avoid unnecessary resource consumption admission manager executes way handshake protocol transferring sms neighbor nodes 
resource table sent destination admission control 
sm admission fails task informed decide subsequent actions 
sm accepted admission manager checks code bricks ids computed offline applying hash function code code bricks belonging sm cached locally 
informs source trans fer missing code bricks code bricks cached arrival 

scheduling execution 
admission sm task scheduled fifo order execution 
execution nonpreemptive new sms accepted dispatched execution current sm terminates 
executing sm yield vm blocking tag 
execution time bounded estimated running time admission vm may terminate sm respect admission contract 
non preemptive scheduling reasons 
execution time sms usually short times node merely stepping stone en route node interest 
context switching incur overhead respect total execution time sm 
second need support multiprogramming interactive programs traditional computer systems embedded systems commonly operate unattended 
third communication terminates current sm form communication cooperative computing migration invocation consequently idea multiple threads application overlap communication computation sense sm programs 
hand non preemptive scheduling inter sm synchronization sharing particularly simple implement 

migration 
current computation complete local node task may continue execution node 
current execution state captured migrated code data bricks 
task accesses mobile data tags able implement efficient migration small part entire execution context saved transferred network 
essentially transfer instruction stack pointers stack frames corresponding current task 
important notice migration explicit programmers call migration primitive needed data transferred migration specified programmer data bricks 
category primitives tag space operations tag name lifetime data tag name tag name tag name value sm creation program files code bricks data bricks sm synchronization tag name timeout sm migration tag names timeout sys migrate hop 
smart message self routing sms self routing responsible determining paths network 
system support required sms routing entire process place application level 
sm names destinations terms tag identifiers executes routing algorithm node path 
sms may create routing tags intermediate nodes network store routing information 
routing information locally available sm may create sms route discovery block routing tag 
write tag unblocks sm resume migration 
tags persistent lifetime routing information acquired subsequent sms amortizing route discovery effort 
sm include routing brick code bricks 
single routing algorithm reach node interest presence highly dynamic network configurations 
sm carry multiple routing algorithms change execution current network conditions 
instance sm proactive routing algorithm stable relatively dense network ondemand algorithm volatile sparse network 
way sm may complete network conditions change significantly execution 
complete description self routing mechanism 

programming interface api cooperative computing model table provides simple powerful primitives 
sms access tag space dynamically create new sms synchronize tags migrate nodes interest 
write tag 
operations allow sms create delete table cooperative computing api access existing tags 
mentioned section operations subject access control 
interface access tags sms issue commands devices writing tags get data reading tags 

sm created injecting program file node program calls list program file names build new sm structure 
sm may execution assemble new sm subset code data bricks 
call commonly create route discovery sm routing information locally available 
sm needs clone calls primitive returns true parent false child sm 
typically invoked current computation needs migrate copy nodes interest continuing execution local node 
newly created sm inserted sm ready queue 

primitive implements update synchronization mechanism 
sm blocks tag waiting write 
prevent deadlocks takes timeout parameter 
writes tag timeout interval vm returns control sm 
typical example sm blocks routing tag waiting route discovery sm bring new route 
sys migrate 
primitive implements high level content migration provided usually library function 
allows applications name nodes interest tag names bound migration time 
returns normally timeout sm guaranteed resume execution node interest 
case timeout sm control intermediate nodes path 
presents example typical sm uses 
instance sm typical sm tag tag timeout computation quality result back timeout code skeleton typical smart message object tracking application described section 
sm migrates nodes hosting tag interest executes nodes certain quality result achieved 
done sm migrates back node injected network 
function implements routing routing tags low level primitive called sys migrate possibly sms route discovery 
sm choose multiple functions correspond different routing algorithms 
sys migrate primitive migrate sms neighbor nodes 
entire migration protocol capturing execution state sending sm hop implemented sys migrate 

prototype implementation evaluation implemented sm prototype java linux harnessing developed supported java application development tools knowledge base specifically modified sun microsystem kvm kilobyte virtual machine small memory footprint little kb suitable resource constrained devices source code publicly available 
sm api encapsulated java classes 
efficiency implemented api java native methods 
implemented serialization mechanism kvm support serialization 
kvm interpreter thread introduced additional threads admission control local code injection 
design sm computing platform specific hardware software environment 
implemented sm software distribution freely available rutgers edu virtual machine mate scylla language underlying operating system 
report micro benchmark results sm prototype 
specifically evaluated cost hop migration cost tag space operations 
testbed consists hp ipaqs running linux hh 
ipaq contains intel strongarm mhz bit risc processor mb flash memory mb ram memory 
communication lucent orinoco silver pc cards ad hoc mode 
factor cost java method call overhead approximately inserted code measuring costs inside native methods associated sm api 

cost sm migration hop migration phases execution capture source sm transfer execution resumption destination 
capable capturing resuming sm convert sm machine independent representation 
code bricks machine independent java class format data bricks execution state need converted 
conversion done simple object serialization mechanism 
serialization execution state significant impact capture transfer local variables execution control state 
important factors determine cost hop migration data brick serialization sm transfer data brick de serialization 

data brick serialization de serialization 
study effect data brick serialization fixed size code brick bytes varied data brick kb kb 
stack frames kept constant bytes activation records 
cost serializing stack frames ms commonly data bricks sm consist mixture objects primitive types 
types data bricks evaluation represent practical lower upper bound typical data bricks array integers array objects 
object array represents upper bound elements causes call top level vm serialization method integer array represents lower bound call top level vm serialization method 
cost data brick serialization cost data brick de serialization shows serialization cost ms data bricks large kb 
commonly sms process data source carry small size data 
applications developed carry kb costs ms serialize 
presents cost de serialization data bricks 
observe cost larger cost serialization 
increase caused memory allocation costs object de serializations 

sm transfer 
evaluate total cost migrating sm serialization transfer de serialization performed sets experiments 
varied code brick size keeping data brick size stack frame size fixed bytes bytes respectively 
second var effect code brick size single hop migration effect data brick size single hop migration ied data brick size keeping code brick size stack frame size fixed bytes bytes 
figures show results experiments cases code cached code cached 
time transfer sm code cached represents essentially overhead way handshake protocol size data bricks stack frames small 
demonstrates data brick size contributes significantly total cost migration 
important serialization mechanism minimal space overhead 

cost tag space operations tables shows cost tag space operations application tags 
primitive lowest cost performs number tag space operation time table time tag space operations tag name time ms gps location neighbor list image capture kb light sensor battery lifetime system time free memory table cost reading tags operations 
sm reads tag vm interpreter acquires lock performs lookup tag space returns data sm 
write tag operation costs slightly higher interpreter check unblock sms blocked tag 
primitive involves additional step register timer tag lifetime needs append sm queue suspend current task 
primitive highest cost interpreter needs wake sms blocked tag remove timer tag lifetime remove tag structure tag space 
table presents access time tags currently implemented prototype gps location query neighbor discovery camera image capture light sensor system status inquiry battery lifetime system time amount free memory 
typical node video camera gps receiver attached shown 
gps location updated user level process reads gps serial interface 
location neighbors identifiers returned reading neighbor list tag 
tag typically geographical routing algorithms carried executed sms 
get information neighbor nodes implemented neighbor discovery protocol maintains cache known neighbors 
image capture tag system performs prototype node video camera gps receiver attached rgb format conversion captured image returning tag reader 
tag values obtained directly linux system calls 

applications prove virtually protocol application written sms implemented previously proposed applications spin directed diffusion :10.1.1.117.1253
different paradigms content communication computation sensor networks spin protocol data dissemination directed diffusion implements data collection 

spin smart messages spin family adaptive protocols disseminates information nodes sensor network 
implementation spin stage handshake protocol data dissemination 
time node obtains new data disseminates data network sending advertisement neighbors 
node receiving advertisement checks received requested data 
sends request message back sender asking advertised data 
initiator sends requested data process executed recursively entire network 
example cooperative computing program presents code implementation spin sms 
tag space node hosts tags value data received timestamp associated data 
string tag int timeout int timestamp data data string tag data string tag timestamp address src dest true sm source timeout timestamp child sm true sm node src sys migrate migrate neighbors timestamp integer system exit data exists node timestamp dest sys migrate src migrate back source data sys migrate dest bring data destination data protocol initiated injecting disseminate sm node produces data 
sm blocks line waiting new data 
time new data produced sm reads spawns lines 
child sm migrates neighbors advertise new data line 
destination node data data child sm updates migrates back source bring data lines 
data arrival child sm executes recursively algorithm data disseminated entire network 

directed diffusion smart messages directed diffusion sink node requests data sending interests named data 
data matching interest drawn source nodes sink node 
intermediate nodes cache aggregate data may direct interests previously cached data 
sink may receive data multiple paths reinforce path providing best data rate 
data arrive reinforced path 
implementation directed diffusion spin smart messages ing sms tag space node hosts tags data value best data rate available node best hop source 
directed diffusion initiated injecting sm sink 
execution sm main phases exploration starts sink floods network find data interest reinforcement chooses best path brings data source sink 
information interest locally available value explore sm spawns child sm migrates neighbors parent sm blocks 
operation performed recursively node sm reaches node containing tag 
point child sm migrates back parent carrying discovered data rate 
new data rate better value stored sm updates new value source best node path source data 
update unblocks parent sm carry data rate hop back 
eventually sink node reached reinforcement phase begins 
reinforcement phase collect sm migrates best hop starting sink 
directed diffusion smart messages intermediate node sm spawns child sm migrates best hop parent sm blocks waiting data 
sm reaches source spawns new sms carry data hop back promised data rate 
recursively blocked sm awaken data arrival carry data back reaches sink 

simulation results large scale evaluation developed event driven simulator extended support sm execution 
simulator written java allow rapid prototyping applications 
get accurate results communication execution time accounted 
simulator provides accurate measurements execution time counting vm level number cycles vm instruction 
account execution time simulated node java thread implemented new mechanism scheduling threads inside jvm 
communication model simulator generic wireless contention solved message level 
transmission node senses medium backs case contention 
main goal conducting simulation experiments quantify data convergence time implementations spin directed diffusion sms compare results results traditional message passing implementations 
define data convergence time time certain percentage total number nodes received data spin data rate directed diffusion 
cases spin smart messages due flooding nodes receiving data data rate 
spin completes nodes received data directed diffusion start reinforcement phase nodes received data rate 
network configuration experiments 
network nodes distributed uniformly square area node transmission range 
average number neighbors node 
set experiments evaluate data convergence time sm injected network 
presents data convergence time single directed diffusion sm sink source located diagonal corners square region 
plot data convergence time different cases sm base case application passive communication sm 
top curve shows time code caching 
second curve see improvement times performance code caching activated execution sm network 
code cached sm visits node time subsequent sms execution 
effects caching important case sms visit node multiple times directed diffusion travel network forward looking source backward diffusion data rate 
third curve observe decrease completion time code cached nodes 
fourth curve shows data convergence time traditional implementation protocol implemented node data transferred network execution time accounted 
observe degradation performance directed diffusion multiple smart messages implementation code cached nodes compared traditional implementation 
believe reasonable price flexibility program user defined distributed application nes 
plots curves single spin sm launched network node located corner square area 
execution code caching leads times improvement performance reducing size sms essential protocol flooding stage communication 
third curve shows decrease completion time similar directed diffusion code cached nodes 
completion time increases compared traditional implementation 
second set experiments quantify performance applications multiple sms run simultaneously network 
figures show data convergence time directed diffusion spin code cached nodes 
experiments data convergence time time certain percentage nodes received data data rate sms running parallel 
nodes sms start distributed uniformly network 
results show data convergence time increases number sms initial flooding phase increased contention network 
shapes curves independent number sms 
results indicate spin completes faster directed diffusion cases compared top curves figures 
cause spin floods neighbors brings data directed spin multiple smart messages sion needs flood entire network finds source brings data rate back nodes 
initial phase directed diffusion generates messages network leading higher contention performance increase soon reinforcement phase begins 

related sms influenced design mobile agents ip networks 
mobile agent may viewed task explicitly migrates node node assuming underlying network assures transport 
sms apply general idea code migration focus flexibility scalability ability perform distributed computing unattended nes 
mobile agents sms defined responsible routing network 
mobile agent names nodes fixed addresses commonly knows network configuration priori sm names nodes content discovers network configuration dynamically 
furthermore sm software architecture defines common system support node provide 
goal architecture reduce support required nodes nodes nes possess limited resources 
sm self routing mechanism shares design goals leverages done active networks 
sms differ key features 
main difference terms programmability 
target faster communication ip networks cooperative computing define distributed computing model nes sev eral sms cooperate exchange data synchronize tag space 
additionally model contain migration execution state model 
migration execution state sms trades overhead flexibility programming sophisticated tasks require cooperation synchronization entities 
example execution state allows sms routing decisions results computation done previously visited nodes 
research mobile ad hoc networking resulted numerous routing protocols 
protocols generally designed networks primarily targeted traditional mobile computing applications networks mobile personal computers 
leveraged protocols routing algorithms sm self routing mechanism 
sensor networks represent step large networks embedded systems 
research area focused hardware operating systems network protocols 
cooperative computing provides solution developing user defined distributed applications sensor networks crucial issue marginally tackled far 
demonstrated cooperative computing provides flexibility enable implementation previously proposed protocols computing platform 
similar cooperative computing sense frameworks programmable nes code migration 
suitable re program network 
supports mobile control scripts accesses resources virtual devices cooperative computing support mobile java code java supported embedded systems today execution state migration uniform access resources tags 
mate efficient virtual machine sensor networks significantly simplify code development dissemination effort 
main difference cooperative computing research mate targets just network programming model traditional message passing 
sms hand execution migration 
sm transfers code execution state network 

described programming model large scale networks embedded systems distributed applications implemented collections smart messages 
model overcomes scale heterogeneity connectivity issues encountered networks execution migration content naming self routing 
experimental results prototype implementation demonstrate feasibility cooperative computing 
implementation simulation results sensor network applications show model represents flexible simple solution programming large networks embedded systems 
acknowledgments supported part nsf ani 
authors ulrich kremer chalermek intanagonwiwat frequent discussions regarding design cooperative computing 
philip stanley iyer saxena contributions various stages project 
java platform micro edition 
java sun com 
axis communications 
www axis com 

www com 
blum wood abdelzaher son stankovic entity maintenance connection service sensor networks 
proceedings international conference mobile systems applications services mobisys san francisco ca may pp 

intanagonwiwat saxena iftode self routing pervasive computing environments smart messages 
proceedings st ieee international conference pervasive computing communications com dallas fort worth tx march pp 

han srivastava design implementation framework efficient programmable sensor networks 
proceedings international conference mobile systems applications services mobisys san francisco ca may pp 

wetherall 
active network vision reality lessons capsule system 
proceedings th acm symposium operating systems principles sosp charleston sc december acm press new york ny pp 

gray cybenko kotz rus mobile agents motivations state art 
handbook agent technology bradshaw ed 
aaai mit press 
silva intanagonwiwat govindan estrin ganesan building efficient wireless sensor networks low level naming 
proceedings th acm symposium operating systems principles sosp banff canada october acm press new york ny pp 

heinzelman kulik balakrishnan adaptive protocols information dissemination wireless sensor networks 
proceedings fifth annual acm ieee international conference mobile computing networking mobi com seattle wa august acm press new york ny pp 

hill szewczyk woo hollar culler pister system architecture directions networked sensors 
proceedings ninth international conference architectural support programming languages operating systems asplos ix cambridge ma november acm press new york ny pp 

intanagonwiwat govindan estrin directed diffusion scalable robust communication paradigm sensor networks :10.1.1.117.1253
proceedings sixth annual acm ieee international conference mobile computing networking mobicom boston ma august acm press new york ny pp 

li john douglas de couto david karger robert morris 
scalable location service geographic ad hoc routing 
proceedings sixth annual acm ieee international conference mobile computing networking mobicom august pp 

johnson maltz dynamic source routing ad hoc wireless networks 
imielinski korth eds 
kluwer academic publishers 
juang oki wang martonosi rubenstein energy efficient computing wildlife tracking design tradeoffs early experiences zebranet 
proceedings tenth international conference architectural support programming languages operating systems asplos san jose ca october acm press new york ny pp 

jung sukhatme cooperative tracking mobile robots environment embedded networked sensors 
ieee international symposium computational intelligence robotics automation 
tripathi agent server architecture ajanta mobile agent system 
proceedings international conference parallel distributed processing techniques applications pdpta las vegas nv july pp 

karp kung greedy perimeter stateless routing wireless networks 
proceedings sixth annual acm ieee international conference mobile computing networking mobi com boston ma august acm press new york ny pp 

levis culler mate virtual machine tiny networked sensors 
proceedings tenth international conference architectural support programming languages operating systems asplos san jose ca october acm press new york ny pp 

milojicic mobile objects agents 
usenix conference object oriented technologies systems pp 

moore hicks nettles practical programmable packets 
proceedings th annual joint conference ieee computer communications societies infocom anchorage ak april pp 

perkins royer ad hoc demand distance vector routing 
proceedings nd ieee workshop mobile computing systems applications wmcsa new orleans la february pp 

priyantha miu balakrishnan teller cricket compass context aware mobile applications 
proceedings th annual acm ieee international conference mobile computing networking mobicom july acm press new york ny pp 

schwartz jackson strayer zhou rockwell partridge smart packets applying active networks network management 
acm transactions computer systems 
stanley iftode scylla smart virtual machine mobile embedded systems 
rd ieee workshop mobile computing systems applications wmcsa monterey ca december pp 

white mobile agents 
bradshaw ed mit press 
xu iftode security architecture smart messages challenges solutions open issues 
proceedings st international workshop mobile distributed computing mdc may 
