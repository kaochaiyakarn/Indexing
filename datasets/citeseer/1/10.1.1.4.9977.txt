trustme anonymous management trust relationships decentralized systems singh college computing georgia tech cc gatech edu decentralized peer peer networks offer opportunities threats 
open decentralized nature extremely susceptible malicious users spreading harmful content viruses just wasting valuable resources network 
order minimize threats community reputations trust measurements fast de facto standard 
idea dynamically assign peer trust rating performance network store suitable place 
peer wishing interact peer informed decision rating 
important challenge managing trust relationships design protocol secure placement access trust ratings 
surprisingly related area support limited anonymity assume anonymity undesired feature neglect 
motivate importance anonymity especially trust systems 
trustme secure anonymous underlying protocol trust management 
protocol provides mutual anonymity trust host trust querying peer 
series simulation experiments show trustme protocol extremely secure face variety possible attacks thorough analysis protocol 

peer peer overlay networks increasingly gaining acceptance internet provide infrastructure desired information products located traded 
systems central indices run legal problems systems continued 
gnutella kazaa freenet extremely popular www community millions users worldwide 
attractive features typical resource sharing application anonymity provides requester provider resource 
open nature networks system vulnerable malicious users trying infect network 
genuine looking files may contain viruses potentially destroy data infect programs peer hard drive 
anti virus software detect incidents hardly mechanism ling liu college computing georgia tech cc gatech edu prevent threat punish malicious users 
accountability peer providing particular resource 
drawbacks primary hurdles promotion systems useful setting 
assuming pure environment strategies tackling issues decentralized nature need develop mechanisms avoid presence central trusted authorities 
existing communities community reputations estimate trustworthiness predict behavior peers 
concretely current systems associate peer trustworthiness metric allow peers access information decide interact peer 
metric primarily peer reviews peer interacting peer rates performance peer common scale vice versa 
trustworthiness metric usually called reputation trust value 
high trust value indicates peer gained reputation terms past performance trustworthy low trust value means peer relatively poor quality service qos past rated low reputations peers community 
typical transaction trust enabled resource sharing networks follows peer query particular resource normal protocol queries 
receive number offers various peers network willing provide resource provider peers 
requestor peer query trust values provider peers select best peer provide service 
interacting chosen provider peer rate provider peer performance vice versa 
important issues involved process trust metrics effective computing reputation trust 
distribute store access trust values peers securely 
issue related trust models building trust peers 
second issue related secure storage secure access trust values possible abuses malicious peers 
fair amount done area computing reputation trust ratings :10.1.1.13.4475:10.1.1.16.6889
area developing secure underlying protocols distribute access trust ratings overlay network relatively unexplored 
trustme anonymous secure protocol maintaining accessing trust rating information 
trustme uses public key cryptography schemes provide security resistant various attacks 
argue distribution access trust ratings distinguished routine functions file inquiry downloading performed system 
attempt answer questions trust value peer stored 
clearly peer hold trust value case peer trustworthy 
decentralized nature central place stored 
securely access peers trust values 
protocols follow message forwarding mechanisms message reaches desired peer going number peers network 
send un encrypted messages anybody fake critical information 
unique characteristic trustme protocol support mutual anonymity managing peers trust relationships 
peers access trust ratings peers remain anonymous peers store trust ratings peers protected targeted attacks keeping identity hidden 
addition trustme design ensures properties 
security due decentralized management trust relationships trust rating peer stored peers network extremely important protect trust hosting peers targetted attacks 

reliability important ensure anybody querying trust value gets true trust value presence various malicious users 

accountability peer review trust systems important peers accountable feedback provide peers 
malicious peer trying manipulate trust ratings identifiable 
remaining sections briefly overview related 
describe proposed trust management protocol trustme 
report initial results simulation experiments showing effectiveness cost trustme protocol 

related security threats peer peer information sharing environments due main features peer peer design anonymous peer peer communication example gnutella servants peers anonymous identified self identified servant id variety shared information files authorized shared gnutella include media types including executable binary files 
feature involves weakness due combination low accountability low trust individual peers 
shield anonymity malicious peers answer virtually query providing tampered information 
features combined environments vulnerable certain security attacks compared centralized systems 
adhoc mechanisms applied current systems blacklisting hosts checking file signatures virus scans greater need dependable security framework protocols 
commerce community notion reputation trust metrics received great deal attention 
formal treatment appeared number approaches relatively useful :10.1.1.102.8227
successful usage trust industrial setting reputation system ebay user rates users shares information participants 
aforementioned suited distributed decentralized environment existing pure systems 
suffer inherent complexity involved maintaining trust models ebay model relies centralized server store knowledge 
community efforts engaged mechanisms building reputation trust models 
scarce amount research developing secure means accessing maintaining models decentralized systems 
absence mechanisms huge threats possible render trust models effectively useless preventing users gaining access correct trust ratings 
security research environment focussed issues identity distributed hash tables dht 
best knowledge attempted secure protocol message level addition trust model 
protocol polling mechanism public key cryptography provide various security features 
contrast trustme design argues provide secure reliable accountable distribution access trust ratings peers important authenticate messages critical ensure requestor anonymity provider anonymity distributed management trust relationships systems 

trustme protocol anonymous trust management 
anonymity essential major factors rise systems anonymity provide 
felt extremely essential design mechanisms provide privacy escape censorship 
various attempts develop systems outside realm crowds commercial available examples 
scope anonymous services provided freenet received attention 
line uses trusted third parties established super peer nodes provide mutual anonymity responder hybrid systems 
unfortunately security point view anonymity regarded rogue element 
trust systems sacrificed anonymity order provide secure underlying protocols 
huge threat potential disrupt functioning system 
malicious peer identify peers reporting poor trust values launch targetted attacks preventing doing 
attacks range spam threatening emails best complete dos attack worst 
possible electronic confrontation means 
possibilities peers reviewing peers letting reviews publicly available 
lack anonymity expressed possible cause ebay users having little negative ratings 
spectrum peer maintain anonymity querying peer trust value 
employee looking ratings available career seeking new suppliers letting current supplier know 
clearly anonymous protocol trust systems go long way computing mission critical applications 

protocol design considerations popular approaches derive trust ratings peers reputations transaction rating user rating 
transaction approach peers provide feedbacks completion transaction trust rating peer computed transactions performed peers 
approach peer gives reputation rating peer experiences peer transaction basis 
trust rating peer aggregation ratings obtained rest peers 
current including trustme approach greater robustness malicious groups acting 
representative peer say peer wants query trust value peer say peer broadcasts query network 
peers interacted peer express opinions reply back ip port tuple encrypted public key peer receiving replies peer individually contact voters ask confirm votes filter incorrect fake messages 
number drawbacks approach persistence trust metrics persistent 
peers interacted peer network reviews counted 
potentially exploited collective malicious peers network sending high low value peer masking opinions various peers genuine ratings 
experiments indicate ref section small number malicious peers totally dominate ratings targetted peer 
anonymity peers expressing opinions lose anonymity 
peer potentially query trust value protected ask friend query identify peers giving poor trust values 
peers selectively targetted attacks dos 
equivalent voters having right secret ballot 
tedious decision making decision making process extremely lengthy tedious 
peer contact voters confirm votes increasing time taken decision wants trust peer 
peer combine valid votes arriving decision 
ideally system voters secret ballot votes stay system voters logged decision making process fast 
trustme designed qualities mind 
place trust rating peer random peer replies queries trust values holds 
peer anonymously issue query get true value needing know identity peer single reply message peer decision 
alternative approach 
propose simplistic underlying protocol dht mechanism chord 
peer set mother peers hold trust values peer 
mother peers decided hashing id peer different hashes obtain number mother peers 
peer wants query trust value peer just hashes id obtain various mother peers queries trust values 
decides majority values 
kind approach suffers number shortcomings insecure communication hashing peer id obtain various mother peers communication mother peer querying peer secured 
vulnerable host threats manin middle bucket brigade attacks 
dht threats relying dht design system automatically prone numerous possible attacks discussed 
malicious routing information tampering malicious lookup replies host possible scenarios come picture 
small percentage malicious nodes devastating consequences 
security solutions attacks extremely complex compatible current available systems 
anonymity scheme identity mother peers exposed 
mentioned malicious node attack mother peers prevent sending true trust values 
group threats problem ids hash significant monitoring malicious group nodes single node simulating group nodes select combinations ids favorable scenario example trust values particular node group hosted group members 
handle problems trustme uses random assignment trust holding agent peers henceforth called tha peers uses smart public key mechanisms prevent loss anonymity 
ensures communication secure 
notations tha peer stands peer holds trust value particular peer 
private key denoted alphabet public key alphabet special private key denoted special public key ref 
section 
trust value denoted abbreviation time stamp time particular instant denoted correct manner helps pseudo identification 
trustme requires peer possess couple pair keys joins network symbol stands concatenation denotes followed encryption message particular key bootstrap server entry point peers network denoted stands identifier peer network 
user chosen ip address 
stands special peer identifier assigned bs ref 
section 
peer offering resources called offering peer peer querying trust values offering peers called querying peer 
query trust value particular peer called trust query 
words node peer 

protocol 
providing receiving services serving tha peer peers network 
peer joins network bootstrap server generates private public pair called special private special public special sense peer bootstrap server assigns set peers tha peers peer peers know authentication mechanism receiving message encrypted indicates coming tha peer secure transmission mechanism encrypting message means tha peer read 
information peer securely transmitted tha peers exact procedure achieved explained section 
moment assume set peers tha peers peer possess abovementioned information peer 
bootstrap server assigns identifier peer denoted identifier assigned peer joins network notice node reading assured valid node fake 
compromise identity peer prevent loss anonymity particular attack explained 
phases entire protocol trustme broadly functions manner 
peer equipped couple public private key pairs 
trust values peer say peer randomly assigned peer tha peer network 
assignment done bootstrap server way trust holding responsibilities equally distributed participating peers 
assignment unknown peers including peer communication tha peer carried special key indicates knowledge trust value peer peer say peer interested querying trust value peer broadcast trust query peer tha peer replies trust value information 
depending trust value peer decide interact peer 
interaction peer securely file report giving adequate proof peer indicating peer new trust value peer tha peer modify trust rating peer provide security reliability accountability trustme uses smart public key cryptography mechanisms 
details firstly bootstrap server pair keys key known peers network 
easily achieved distributing time peer join 
case multiple bootstrap servers share single pair keys distributed join 
pair keys primary certification mechanism certifying validity node joined network query peer say peer intending query trust value peer just broadcast trust query message containing typically peer simultaneously query number peers offered services particular resource 
case trust query concatenated ids peers 
note message forwarding mechanism system querying peer identified looking query message 
provides complete privacy querying peer 
reply receiving trust query peer tha peer say peer generate reply forward back network 
goal message ensure querying peer identify generated tha peer tampered enroute 
reply message looks number points note field indicates reply message contains trust value peer key provided decrypt encrypted part key communicate peer peer network read trust value peer undesirable anyway peer query trust value specifically know value 
encryption sure reply coming tha peer 
prevents peer just randomly sending value 
apart ensuring valid node replying ensures accountability 
peer identify tha peer malicious tha peers values 
ensures message replayed time 
provides caching opportunity peers cache value trust value particular time window 
presence ensures peer peer extracted earlier replies send replies trying pose peer 
note possibility peer generate random combination fake reply message 
explain prevented section 
collecting proof interaction peers peer interact exchange peer gets peer peer gets value proof interaction 
note peer generate value fake manner know peer private key 
prevent replaying message 
added protection somebody message peer interaction peer 
important interaction message group operating peers attempting boost rating need exchange messages time compromise private keys making pay malicious attempt 
report having interacted peer peer file report indicating peer new trust value peer broadcasting report message 
need ensure tha peer read message peer interacted peer send report 
report message form important features report message tha peers read message ones possessing 
serves secret ballot mechanism 
note tha peer need reporting peer update global trust value global value individual trust values peers 
id obtained decrypting contained message known tha peer peer 
interaction exchange message encrypted sent decrypt 
done pre vent peer sending fake report scenario getting hold value interaction 
tallying outside interaction exchange message ensures right peer sending report 
discussion look various possible attack scenarios trustme prevents manipulating reply messages attempted malicious tha peer non tha peer 
tha peer tha peer send wrong trust value reply 
prevent bootstrap server assigns number tha peers single peer 
querying peer take majority vote select value 
ensures reliability 
trustme presents possibility punish malicious peer 
reply messages tha peers able see tha peers replying 
include reply messages tha peers sending wrong values 
querying peer easily identify peers looking majority peers advising 
assignment tha peers random extremely small possibility majority peers malicious operative making mechanism secure 
possibility malicious tha peer get tha peer see broadcasted reply send wrong trust value mentioned earlier easily prevented reply message 
non tha peer attempt replay genuine reply message time try fake pair keys 
scenario prevented including reply message 
message older user decided window disregarded 
scenario easily prevented mechanism 
offering peers peers offered resources queried trust values send keys part offer query phase 
tallied value reply 
prevent anybody tampering peer trust value peer generate correct peer possible offering peer generate fake reply message send incorrect offer send fake reply accordingly 
prevented tha peers send value correct receiving conflicting reply messages peer just rejects offer peer potentially blacklists 
manipulating proof interaction messages proof interaction message manipulated attempting replay old message fake pair keys 
replay avoided interaction message outside reasonable time frame discarded 
possibility peer uses fake pair keys 
note possible offering peer fake tha peer included true value reply message 
prevent querying peer faking offering peer report message containing proof get actual public key tha peer 
manipulating report messages little done manipulate report message 
mentioned earlier peer fake report message secure sense tha peer read message 
possibility peer rate peer wrong manner giving poor rating performance 
tackled trust model level 
trust model effect peer trust rating single peer 
attempting identify tha peers case private public key pair exists possibility identifying tha peers 
peer monitor network long time reading various reply messages construct mapping corresponding reading tha peers identify 
second pair prevents happening 
pair acting tha peer 
till protocol achieves complete anonymity security reliability accountability 
summarize important aspects trustme protocol persistence peer just file report sure experiences accounted trust value interacting peer 
peer logs system review counted 
way provide persistence votes provide stronger trust mechanism 
experiments indicate sec systems provide highly misleading trust values presence small number malicious peers 
central trusted authority important notice bootstrap server act cta 
form certification authority 
pseudo identification mechanism peers mark peers 
signify manner peer trusted 
trust mechanisms network bootstrap server participate 
small decision time notice reply messages peer decision interact particular peer 
extremely convenient fast 
ease contribution extremely easy peer contribute trust value peer sending single report message 
highly convenient opposed notifying tha peer 
peer join section explain peer join handled 
peer contacts bootstrap server joining network bootstrap server collect values 
generates new pair private public keys gives peer cache available peers network bootstrap server select set peers serve tha peer peer tha peer say peer prepares trust message peer broadcasted network tha peer receiving message updates local database 
note peer generate message know peer read entire information knows outside inside efficiency purposes 
outside prevents peer decryption check message inside ensures fake message prefixing friendly rest message 
note attack possible scenario 
peer broadcast messages generates fake pair sends friendly peers reply excellent trust ratings peer prevented ways 
broadcast done bootstrap server 

peer interacting peer interacting ask message shortened version tally getting tha peers 
peer leave essentially main things taken care peer leaves system 
data peers peer tha peer exiting peer contacts bootstrap server gets new peer take place 
broadcasts relevant message assigning responsibility new peer 
note convenient buffer mechanism implemented assigning tha peers peer information step 
step need take place number tha peers goes 
data tha peers peer invalidate information tha peer maintains time stamp peer records accessed information accessed long time just deletes database 

analysis look importance persistence typical trust decentralized system 
mentioned earlier non persistent system peers decisions locally available trust values 
locally available trust values obtained combining individual ratings peers interacted desired peer currently network 
take account ratings peers interacted desired peer left system 
global trust values take account trust ratings peers interacted desired peer trustme systems providing true account 
simulated scenario randomly generated network peers periodically removed peers 
presents mean squared errors local trust values kinds peer behaviour inconsistent peers rated peer randomly consistent peers get rated poor peers malicious malicious peers rating peers poor poor peers 
transaction selects random querying peer random queried peer comprises complete phases querying reporting protocol 
mean squared error trust values consistent behaviour inconsistent behaviour malicious behaviour number transactions mean squared errors non persistent systems consistent behaviour scenario mse case local values close approximation global values 
inconsistent behaviour scenario little worse peer lose peers rating left system current peers rating bad vice versa 
malicious behaviour scenario worst malicious peers deliberately try reverse ratings peers tend mislead querying peer 
shows effects targetted attack malicious peers particular peer 
target high trust value peer rating bad somebody queries trust value 
result systems locally available actual values rates peer trust value lies little malicious peers trust value non persistent system highly misleading 
proves having trust values local global number transactions targetted attack single peer look costs various protocols 
components costs 
cost cryptography primitives 
order currently available systems public key cryptography 
second component messaging costs increased number messages due different protocols 
presents messaging costs polling trustme systems 
trustme systems twice expensive polling systems 
primary component cost mechanisms cost broadcasting 
polling mechanism query broadcasted trustme query report broadcasted 
graph shows number messages increase linearly number non persistent persistent trust systems 
messaging costs vary little number tha peers 
cost broadcasting change significantly addition new tha peers 
total number messages trustme tha trustme tha polling number transactions messaging costs compare response times systems 
assume response complete querying peer receives message provides information take decision 
note expecting messages order strictly verify authenticity message 
choice choose peer accept services receipt message abort process case message proved authentic 
cumulative response times total response time transactions measured time units unit equal time taken exchange message peer neighbour assuming 
tha peers 
cumulative response time trustme polling trustme caching number transactions cumulative response times shows trustme systems cumulative response time 
reason fact receiving single reply tha peer local peer decision 
hand polling mechanism expensive collect replies peers combine 
caching trust values significantly reduces response times querying peers 
peer forwarding query reply caches reply locally responds queries cached value 
trust values available closer normal 
term close overlay network property geographical proximity 
shows variation cumulative response times number tha peers 
number tha peers increases greater chance tha peer close querying peer reducing response times 
cumulative response time tha peers tha peers tha peers tha peers tha peers tha peers tha peers number transactions cumulative response times 
described design trustme secure anonymous underlying protocol trust management 
protocol provides mutual anonymity trust host trust querying peer aiming providing secure reliable accountable distribution access ratings peers 
thorough security analysis protocol reported initial experimental results showing trustme protocol desirable fea tures anonymity reliability accountability secure presence variety possible attacks 
ongoing trustme explore various cryptographic primitives efficient compared public key cryptography 
broadcast authentication mechanisms tesla symmetric key cryptography worth exploring 
intend study mechanisms sort central authority available 
abdul rahman hailes 
supporting trust virtual communities 
hicss 
aberer despotovic 
managing trust peer peer information system 
cikm 
clarke sandberg wiley hong 
freenet distributed anonymous information storage retrieval system 
lecture notes computer science 
damiani di vimercati paraboschi samarati 
choosing reputable network 
eleventh international world wide web conference honolulu hawaii may 
crowds 
www research att com projects crowds 
dingledine freedman molnar 
free haven project distributed anonymous storage service 
proceedings workshop design issues anonymity unobservability july 
douceur 
sybil attack 
iptps workshop cambridge ma usa march 
kamvar schlosser garcia molina 
reputation management networks 
international world wide web conference 
kaufman perlman 
network security private communication public world 
prentice hall 
marsh :10.1.1.102.8227
formalising trust computational concept 
ph thesis university stirling 
ratnasamy francis handley karp shenker 
scalable content addressable network 
proceedings acm sigcomm 
sit morris 
security considerations peer peer distributed hash tables 
iptps workshop cambridge ma usa march 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings conference applications technologies architectures protocols computer communications 
xiao xu zhang 
mutual anonymity protocols hybrid systems 
rd international conference distributed computing systems providence rhode island may 
xiong liu 
reputation trust model peerto peer ecommerce communities 
ieee international conference electronic commerce 
yu singh 
social mechanism reputation management electronic communities 
cooperative information agents 
