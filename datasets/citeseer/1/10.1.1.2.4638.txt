framework projected clustering high dimensional data streams aggarwal watson 
ctr 
ibm com data stream problem studied extensively years great ease collection stream data 
nature stream data essential algorithms require pass data 
single scan stream analysis methods proposed context 
lot stream data highdimensional nature 
high dimensional data inherently complex clustering classification similarity search 
research discusses methods projected clustering high dimensional data sets 
method difficult generalize data streams complexity method large volume data streams 
propose new highdimensional projected data stream clustering method called hpstream 
method incorporates fading cluster structure projection clustering methodology 
incrementally updatable highly scalable number dimensions size data streams achieves better clustering quality comparison previous stream clustering methods 
performance study real synthetic data sets demonstrates efficiency effectiveness proposed framework implementation methods 
second author supported part national science foundation iis ibm faculty award 
current address university minnesota twin cities minneapolis mn email cs umn edu permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference toronto canada jiawei han wang uiuc cs uiuc edu philip yu watson 
ctr 
ibm com problem data streams gained importance years advances hardware technology 
advances easy store record numerous transactions activities everyday life automated way 
ubiquitous presence data streams number practical domains generated lot research area 
important problems explored data stream domain clustering 
clustering problem especially interesting data stream domain application data summarization outlier detection 
clustering problem defined follows set data points wish partition groups similar objects notion similarity defined distance function 
lot research devoted scalable cluster analysis years :10.1.1.131.5152
data stream domain clustering problem requires process continuously determine dominant clusters data dominated previous history stream 
high dimensional case presents special challenge clustering algorithms traditional domain static data sets 
sparsity data high dimensional case 
highdimensional space pairs points tend equidistant 
result unrealistic define distance clusters meaningful way 
high dimensional data uses techniques projected clustering determine clusters specific subset dimensions 
methods definitions clusters cluster specific particular group dimensions 
alleviates sparsity problem high dimensional space extent 
cluster may meaningfully defined dimensions sparsity data subset dimensions particular subsets points form high quality meaningful clusters 
course subsets dimensions may vary different clusters 
clusters referred projected clusters 
concept projected cluster formally defined follows 
assume number clusters 
addition algorithm take input dimensionality subspace cluster reported 
output algorithm twofold way partition ck data points partition element form cluster points partition element outliers definition cluster 
possibly different set ei dimensions cluster ci points ci cluster subspace defined vectors 
vectors outlier set assumed empty set 
cluster ci cardinality corresponding set ei equal user defined parameter context data stream problem finding projected clusters challenging 
additional problem finding relevant set dimensions cluster problem significantly computationally intensive data stream environment 
problem clustering studied data stream environment methods case full dimensional clustering 
significantly difficult problem clustering high dimensional data stream exploring projected clustering methods 
note existing projected clustering methods discussed easily generalized data stream problem typically require multiple passes data 
furthermore algorithms computationally intensive data stream problem 
addition data streams quickly evolve time essential design methods designed effectively adjust progression stream 
develop algorithm highdimensional projected stream clustering continuous refinement set projected dimensions data points progression stream 
refer algorithm hpstream describes high dimensional projected stream clustering method 
updating set dimensions associated cluster performed way points dimensions associated cluster effectively evolve time 
order achieve goal utilize condensed representation statistics points inside clusters 
condensed representations chosen way updated effectively fast data stream 
time sufficient amount statistics stored important measures cluster projection quickly computed 
section discuss fading cluster structure useful book keeping 
structure capable performing updates way outdated data temporally discounted 
ensures evolving data stream past history gradually discounted computation 
comparison previous literature substantial progress aspects 
hpstream introduces concept projected clustering data streams 
lot stream data high dimensional nature necessary perform high quality high dimensional clustering 
previous stream clustering methods stream clustream handle data due clustering data relevant dimensions 
proclus exploring projected clustering handle data streams due requirement multiple scans data 

hpstream explores linear update philosophy projected clustering achieving high scalability high clustering quality 
philosophy proposed birch 
clustream introduces idea stream clustering show quality high dimensional data 
projected clustering hpstream reach consistently high clustering quality due adaptability nature real data set data shows tight clustering behavior different subsets dimension combinations 
major progress hpstream proposed explored innovative ideas 
example fading cluster structure nicely integrates historical current data user specified user tunable fading factor 
bit vector registration dynamic update relevant dimensions minimal radius clustering quality enhancement improved clustering efficiency accuracy 
remaining organized follows 
section discuss basic concepts necessary developing algorithm 
section introduce hpstream algorithm 
section reports performance study real synthetic data sets 
compare hpstream algorithm full dimensional clustream algorithm 
brief discussion possible extensions included section 
summary discussed section 
fading cluster structure motivation concepts data stream consists set multidimensional records 
xk 
arriving time stamps 
tk 
data point xi multidimensional record containing dimensions denoted xi 
xd 
stream clustering pro cess provide greater level importance data points introduce concept fading data structure able adjust recency clusters flexible way 
assumed data point weight defined function time function referred fading function 
value fading function lies range 
assumed fading function monotonic decreasing function decays uniformly time particular choose exponential form fading function 
exponentially fading function widely temporal applications desirable gradually discount history past behavior 
order formalize concept fading function define half life point data stream 
definition half life point defined time 
conceptually aim defining half life define rate decay weight assigned data point stream 
correspondingly decay rate defined inverse half life data stream 
denote decay rate 
order half life property hold define weight point data stream perspective clustering process weight data point 
easy see decay function creates half life 
evident changing value possible change rate importance historical information data stream decays 
higher value lower importance historical information compared data 
define fading cluster structure data structure designed capture key statistical characteristics clusters generated course data stream 
aim fading cluster structure capture sufficient number underlying statistics possible compute key characteristics underlying clusters 
definition fading cluster structure time set dimensional points xi 
xin time stamps ti 
tin defined tuple fc 
vectors contain entries 
explain significance sets entries 
dimension jth entry weighted sum squares corresponding data values dimension 
weight data point defined level staleness arrival data stream 
contains values 
th entry equal tik xj ik 
dimension jth entry weighted sum corresponding data values 
weight data point defined level staleness arrival data stream 
contains values 
th entry equal tik xj ik 

maintain single entry containing sum weights data points time entry equal tik 
clustering structure discussed satisfies number interesting properties 
properties referred additivity temporal multiplicity 
additivity property defined follows observation clusters cluster structures fc fc respectively 
cluster structure fc fc fc 
additivity property follows fact cluster expressed sum individual components 
temporal multiplicity property defined follows observation consider cluster structure time fc 
points added time interval fc fc 
note property holds exponential decay component cluster structure 
algorithm designed projected clustering data streams set dimensions associated cluster 
cluster associate dimensional bit vector corresponds relevant set dimensions element dimensional vector value corresponding dimension included cluster 
bit vector required book keeping needed assignment incoming points appropriate cluster 
algorithm progresses bit vector varies order reflect changing set dimensions 
section discuss clustering algorithm various procedures cluster maintenance 
high dimensional projected clustering algorithm section discuss individual clusters maintained online fashion 
algorithm high dimensional clustering utilizes iterative approach continuously determines new cluster structures re defining set dimensions included cluster 
clustering process run normalization process order weigh different dimensions correctly 
clustering algorithm needs pick dimensions specific cluster comparing radii different dimensions 
note different dimensions may algorithm hpstream data stream point cluster structures fcs dimensionality vector sets bs dimensionality assume fcs contains relevant cluster structures denoted fcs fc 
fc cr 
assume bs contains relevant cluster dimensions denoted bs 
cr 
receive data point current time stream ds bs fcs fcs ds cr cr index argmax ds ds index set index fcs add new fading cluster structure fcs solitary data point fcs add remove clusters fcs zero dimensions assigned fcs delete added cluster fcs basic algorithm clustering high dimensional data streams algorithm cr bitvector cr datapoint procedure finds manhattan segmental distance projected dimensions dimension bit value cr find distance centroid cr return average distance included dimensions finding projected distance algorithm faded cluster structures fcs incoming point create fcs tentative fading cluster structures adding existing clusters compute fcs radii fcs tentative clusters dimensions pick fcs dimensions radii create bitvector cr cluster cr reflecting projected dimensions computing projected dimensions algorithm faded cluster structure bitvector find radius cluster dimensions contained number bits value return finding limiting radius cluster refer different scales age salary attributes vastly different ranges variances 
possible compare dimensions meaningful way original data 
order able compare different dimensions meaningfully perform normalization process 
aim equalize standard deviation dimension 
initial sample data points calculate standard deviation dimension subsequently value dimension data point divided note data stream may evolve time values may change 
normalization factor recomputed periodic basis 
specifically process repeated interval points 
value changes corresponding fading cluster statistics may need changed 
assume standard deviation dimension changes normalization phase 
cluster statistics fc cluster needs correspondingly mod ified 
specifically ith entry needs ith entry multiplied needs multiplied illustrated basic incremental algorithm clustering high dimensional data streams 
incremental pseudo code shows steps associated adding point data stream 
input algorithm includes current cluster structure fcs sets dimensions associated cluster 
cluster structures sets dimensions dynamically updated algorithm progresses 
set dimensions bs associated cluster includes dimensional bit vector ci cluster structure fcs 
bit vector contains bit dimension included cluster ci 
addition maximum number clusters average cluster dimensionality input parameter 
average cluster dimensionality represents average number dimensions cluster projection 
data stream clustering algorithm utilizes iterative approach assigning data points closest cluster structure step algorithm 
closest cluster structure determined projected distance measure 
cluster dimensions relevant cluster utilized distance computation 
time continue re define set projected dimensions associated cluster 
re definition projected dimensions aims keep radii clusters projected dimensions low possible 
clustering process requires simultaneous maintenance clusters set dimensions associated cluster 
proceed systematically describe steps high dimensional clustering algorithm 
pseudo code algorithm described 
set dimensions associated cluster updated procedure 
procedure determines dimensions way spread chosen dimensions small possible 
note clusters may contain points 
difficult compute dimensions statistically robust way 
extreme case cluster may contain point 
degenerate case computation dimensions possible radii different dimensions distinguished 
order deal degenerate cases need incoming data point determination dimensions cluster 
desirable pick dimensions way fits selected cluster projected dimensions selected 
specifically data point temporarily added possible cluster process determination dimensions 
significant difference chosen dimensions clusters contain data points 
selected dimensions chosen corresponding bits stored bs 
step determination closest cluster structure incoming data point order compute distance cluster centroid set projected dimensions corresponding cluster 
data bs book keeping mechanism determine set projected dimensions cluster distance computation 
corresponding procedure referred 
discuss details procedure slightly 
decided cluster data point assigned determine natural limiting radius corresponding cluster 
limiting radius considered natural boundary cluster 
data points lie outside natural boundary added cluster 
points create new clusters 
procedure determination limiting radius denoted 
incoming data point lies inside limiting radius added cluster 
new cluster needs constructed containing solitary data point note new data point noise newly created cluster subsequently points added 
explained ultimately lead deletion cluster 
event new cluster created total number cluster structures fcs may increase 
cluster needs deleted order room incoming cluster 
case cluster structure updating performed deleted 
rule ensures stale outdated clusters removed update process 
order determine closest cluster incoming data point procedure determining projected distance cluster cr 
method finding distance discussed procedure illustrated 
order find projected distance distance dimension bit value cr determined 
average distance dimensions known manhattan segmental distance reported projected distance 
note necessary normalize distance measurements point entire stream normalized point 
distance value computed cluster data point added cluster distance value 
procedure finding limiting radius illustrated 
motivation finding limiting radius determine natural boundary clusters 
incoming data points lie limiting radius closest cluster assigned cluster 
data points naturally fit inside existing clusters 
limiting radius defined certain factor average radius data points cluster 
radius computed statistics fading cluster structure 
note fading cluster structure contains second order moments data points inside clusters 
average square radius dimension included data point helps stable computation projected dimensionality cluster contains small number data points 
note data point assigned cluster needs added statistics corresponding cluster 
purpose need additive temporal multiplicity properties 
temporal multiplicity applied lazy way specific instants new data point added cluster 
temporal component cluster statistics may remain stale cases 
affect execution algorithm 
computation measures finding projected distance computing dimensions affected temporal decay factor 
step assigning data point cluster update temporal decay function cluster 
current time update time cluster 
item fading cluster structure multiplied factor tup point statistics incoming data point added corresponding fading cluster structure statistics 
additivity property ensures updated cluster represented statistics 
data stream clustering process necessary perform additional initialization process original clusters created 
purpose certain initial portion containing points utilized 
offline process order create initial clusters 
process implemented means algorithm initial sample data points 
full dimensional means algorithm applied data points 
square radius dimensions included averaged order find total square radius included dimensions 
square root value relevant radius cluster projected set dimensions 
find create initial set clusters 
procedure applied order determine relevant dimensions cluster 
set dimensions associated cluster compute new set assignments data points corresponding centroids 
note new assignment different full dimensional assignments set projected dimensions number dimensions order calculate closest centroid included projected cluster 
value scaled data point 
new assignments utilized cre boundary factor order decide final ate new set centers 
process recom value limiting radius 
incoming data puting dimensions centroids repeated point lies outside factor average ra iteratively procedure converges final set projected dimensions closest clus clusters 
clusters create fading ter needs create new cluster containing solitary cluster structures data stream data point 
computation 
illustrated process com observe number projected projected dimensions 
input parameter 
calculating spread dimension procedure uses input parameter pick cluster fcs 
total fcs fcs dimensions radii 
computed ranked increasing order 
stead fixed number projected dimensions select fcs dimensions radii radius rank threshold projected dimensions cluster 
incom radii different dimensions 
data point included cluster low number projected dimensions vary purpose computation dimensions 
ensures course execution data stream cluster incoming data point added cluster ing process 
threshold corresponding set projected dimensions reflect intuitively appealing wide variety data sets 
data normalization ensures standard deviation dimension unit threshold chosen terms number standard deviations dimension 
may variation data sets picking value choice better statistical interpretation 
empirical results section thorough experimental study evaluating various aspects hpstream algorithm 
experiments performed intel pentium iv processor computer mb memory running windows xp professional 
authors proposed clustream algorithm shown better clustering quality previously designed stream clustering algorithm :10.1.1.13.8650
testing clustering accuracy efficiency compared hpstream algorithm clustream 
implemented algorithms microsoft visual 
experiments hpstream maintained number fading cluster structures micro clusters clustream 
algorithm parameters clustream chosen adopted :10.1.1.13.8650
mentioned parameters hpstream set follows decay rate spread radius factor 
real synthetic data sets evaluating hpstream clustering quality stream processing rate scalability sensitivity 
real data sets 
previously proposed stream clustering algorithms chose sum square distance ssq short evaluate clustering quality 
ssq current time tc horizon denoted ssq tc computed follows 
point pi find centroid cpi closest cluster structure compute pi cpi distance pi cpi ssq tc equal sum pi cpi points previous horizon ssq measure evaluating projected clustering full dimensional measures useful measuring quality projected clustering algorithm 
purpose try find large real data sets contain class labels data points class labels clustering process 
ssq cluster purity assess clustering accuracy 
cluster purity defined average percentage dominant class label cluster 
subset points arrive predefined window time current instant compute cluster purity 
empirical results showed qualitative results generally sensitive choice window horizon 
real data set kdd cup network intrusion detection stream data set evaluate clustering accuracy stream clustering algorithms 
data set corresponds important problem automatic real time detection cyber attacks consists series tcp connection records weeks lan network traffic managed mit lincoln labs 
record correspond normal connection intrusion classified types 
connections data set normal occasionally burst attacks certain times 
data set contains totally connection records connection record attributes 
continuous attributes clustering outlier point removed 
second real data set tested forest data set obtained uci machine learning repository website www ics uci edu mlearn 
data set contains totally observations observation consists attributes including quantitative variables binary wilderness areas binary soil type variables 
testing quantitative variables 
forest cover type classes 
synthetic datasets 
generated synthetic data sets test clustering quality efficiency scalability 
know true cluster distribution priori compare clusters true clusters compute cluster purity 
synthetic data set generator takes parameters input number data points number natural clusters number dimensions average number projected dimensions required 
number projected dimensions cluster uniformly distributed drawn 
projected dimensions cluster chosen randomly 
data points cluster normally distributed mean cluster uniformly chosen 
standard deviation defined projected dimension cluster dimensions randomly chosen dimension 
experiments set parameters respectively 
data points different clusters generated different times pre defined probability distribution 
order reflect evolution stream data time randomly re computed probability appearance certain cluster periodically 
assume projected dimensions evolve little time 
order capture kind evolution randomly dropped projected dimensions clusters replaced new dimension possibly different cluster 
addition notations naming synthetic data sets indicates base size number data points data set indicate number natural clusters dimensionality point average number projected dimensions respectively 
example kc means data set contains total data points dimensions belonging different clusters average number projected dimensions 
clustering evaluation analyze experimental results clustering quality accuracy efficiency comparing algorithms 
important discovery ssq longer measure clustering quality 
cluster purity taken measure clustering quality 
accuracy comparison 
evaluated clustering quality hpstream algorithm comparison clustream algorithm real synthetic data sets 
cluster purity hpstream clustream stream time units quality comparison network intrusion data set horizon stream speed cluster purity hpstream clustream stream time units quality comparison network intrusion data set horizon stream speed show clustering quality comparison results network intrusion detection data set 
experiments clustream dimensions set average number projected dimensions hpstream means average hpstream projected dimensions 
stream speed set points time unit horizon 
chose series time points kind attack connections happened 
example time phf connection connections normal connections past horizon time totally smurf teardrop pod attack connections horizon 
see hpstream clustering quality clustering purity higher better clustream 
example time hpstream grouped different attack connections different clusters clustream grouped kinds attacks cluster hp stream cluster purity higher clustream 
set stream speed points time unit horizon test clustering quality shows results 
time hpstream higher cluster purity clustream 
checked original class labels connections horizons current time connections belong attack type smurf 
result matter clustering algorithms cluster purity mean clustream job case 
cluster purity hpstream clustream stream time units quality comparison forest data set horizon stream speed tested clustering quality hpstream real data set forest 
data set set average number projected dimensions 
show clustering quality comparison results 
set stream speed points time unit compute cluster purity different time horizon 
shows hpstream higher cluster purity clustream data set high dimensionality 
changed stream speed points time unit horizon compare cluster quality algorithms 
shows similar picture hpstream higher cluster purity clustream 
cluster purity hpstream clustream stream time units quality comparison forest data set horizon stream speed generated synthetic data set cluster purity hpstream clustream stream time units quality comparison synthetic data set kc horizon stream speed cluster purity hpstream clustream stream time units quality comparison synthetic data set kc horizon stream speed kc test clustering quality 
data set contains points total dimensionality average number projected dimensions 
data points belong different clusters 
experiments set hpstream 
shows set stream speed points time unit horizon hpstream consistently better clustering quality clustream average cluster purity hpstream higher clustream 
changed stream speed points time unit horizon test clustering quality 
shows cluster purity hpstream algorithm higher clustream 
efficiency test 
network intrusion detection forest data sets test efficiency hpstream clustream 
clustream algorithm needs periodically store away current snapshot micro clusters pyramidal time framework implemented versions clustream algorithm uses disk maintain snapshots micro clusters stores snapshots micro clusters memory 
algorithm efficiency measured stream processing rate versus progression stream defined inverse time required process points unit points second 
experiments fixed stream speed points second 
shows stream processing rate network intrusion data set see number points processed second clustream memory hpstream clustream disk stream time units stream processing rate network intrusion data set stream speed number points processed second clustream memory hpstream clustream disk stream time units stream processing rate forest data set stream speed hpstream efficient disk clustream algorithm marginally slower memory clustream algorithm 
know memory clustream algorithm consume memory hp stream 
addition data set processing rate hpstream stable points second means hpstream support high stream speed points second 
shows stream processing rate forest cover type data set 
data set smaller dimensionality network intrusion data set algorithms higher stream processing rate 
example hpstream memory clustream algorithms stream processing speed points second 
similarly hpstream higher processing speed disk clustream algorithm consumes memory memory clustream algorithm 
sensitivity analysis sensitivity analysis show sensitive clustering quality relevance average projected dimensionality radius threshold decay rate 
choice average projected dimensionality average projected dimensionality plays important role choosing proper set projected dimensions hpstream clustering want know sensitive affecting clustering quality 
know true average projected dimensionality advance synthetic data sets synthetic data set kc test clustering quality choosing different average projected dimensionality cluster purity stream time units choice synthetic data set kc horizon stream speed cluster purity stream time units choice synthetic data set kc horizon stream speed kc generated average projected dimensionality experiments series different test clustering quality 
fixed stream speed points time unit horizon 
shows result 
see lead best cluster purity small large generate poor clustering quality 
addition cluster purity similar suggests long choose value range hpstream clustering quality 
set stream speed points time unit horizon set tests 
shows result similar 
addition settings data set know clustream generated cluster purity higher result matter value choose hpstream better cluster purity clustream experiments sensitivity average projected dimensionality demonstrate long choose value deviated true average projected dimensionality hpstream high clustering quality 
tests network intrusion detection data set hpstream generated similar clustering solution chose value range 
choice radius threshold 
average projected dimensionality provides flexible natural way hpstream pick set correlated dimensions clustering highdimensional data cases radius threshold may intuitively chosen alternative selecting set projected dimensions 
quality controlled parameter allow number projected dimensions evolve stream 
example dimensions network intrusion detection data set deviation certain type connections 
user knowledge advance may choose radius threshold close defining set projected dimensions 
cluster purity hpstream hpstream hpstream clustream stream time units quality comparison radius threshold network intrusion data set horizon stream speed shows test result network intrusion data set setting stream speed points time unit horizon 
experiments test clustream clustering quality hpstream varying radius threshold input parameter 
result shows set radius threshold hpstream better clustering quality clustream 
example time cluster purity hpstream higher clustream 
suggests radius threshold range hpstream generate clustering solutions network intrusion data set 
choice decay rate 
important parameter hpstream decay rate defines importance historical data 
section set moderate value hpstream showed better clustering quality clustream 
experiments isolate effect decay rate changing small value large 
synthetic data set kc set stream speed points time unit average projected dimensionality test cluster purity hpstream cluster purity decay rate hpstream clustream choice decay rate synthetic data set kc stream speed time units time horizon 
shows results corresponding series decay rates 
hp stream relatively stable cluster purity better clustream 
high value hpstream quality deteriorates quickly little better clustream 
note choice represents pathological case clusters determined small number arriving data points 
cases algorithms tends show relatively similar behavior 
scalability test scalability tests show hp stream linearly scalable dimensionality number clusters 
shown hpstream stable stream processing speed progression stream real data sets 
high scalability terms dimensionality number clusters critical success high dimensional clustering algorithm 
generated series synthetic data sets test scalability hpstream 
runtime seconds number dimensions kc kc kc scalability dimensionality stream speed generated data sets varying number dimensions test scalability di 
kc contains points natural clusters kc contains points clusters kc contains points clusters 
series data sets generated data sets dimensionality set respectively 
average number projected dimensions data set set stream speed set points time unit 
shows varied dimensionality hpstream linear increase runtime data sets different number points different number clusters 
example data set series kc runtime increases seconds seconds dimensionality changed 
runtime seconds number clusters kd kd kd scalability number clusters stream speed test scalability number natural clusters generated series data sets varying number clusters 
kd contains dimensional data points kd data points kd data points 
series data sets generated data sets number natural clusters set respectively 
average number projected dimensions data set set stream speed points time unit 
shows runtime hpstream scalability terms number clusters data sets different number points dimensionality 
high scalability hpstream terms number clusters stems algorithm design implementation 
costly functions hpstream algorithm computation number clusters linearly scalable number clusters exploit temporal locality improve efficiency certain period points usually belong small number clusters dimensions clusters changed past period necessity re compute radii 
discussion experiments shown hpstream framework leads accurate efficient highdimensional stream clustering 
framework extended ways assist stream data mining 
methodologies cluster structure micro clustering ideas designed projected stream clustering applied projected clustering non stream data 
method worked high dimensional projected stream clustering represents general methodology independent particular evaluation measures implementation techniques 
example change distance measure euclidean distance measures change detailed clustering algorithm means methods general methodology applicable 
interesting detail implementation techniques particular applications 
second extension framework tilted time windows store data different time granularity 
may take somewhat space cluster structure may give user flexibility dynamically assign modify fading ratio discover clusters flexibly specified windows time periods facilitate discovery cluster evolution regularity 
study may promote development new streaming data mining functions stream classification similarity analysis dynamically discovered projected clusters 
new framework hpstream high dimensional projected clustering data streams 
finds projected clusters particular subsets dimensions maintaining condensed representations clusters time 
algorithm provides better quality clusters full dimensional data stream clustering algorithms 
tested algorithm number real synthetic data sets 
case hpstream algorithm effective full dimensional clustream algorithm 
high dimensional projected clustering data streams opens new direction exploration stream data mining 
methodology treat projected clustering preprocessing step may promote effective methods stream classification similarity evolution outlier analysis 
aggarwal 
human computer interactive method projected clustering 
ieee transactions knowledge data engineering 
aggarwal procopiuc wolf yu park 
fast algorithms projected clustering 
acm sigmod conference 
aggarwal han wang yu :10.1.1.13.8650
framework clustering evolving data streams 
vldb conference 
aggarwal 
intuitive framework understanding changes evolving data streams 
icde conference 
aggarwal 
framework diagnosing changes evolving data streams 
acm sig mod conference pp 

agrawal gehrke gunopulos raghavan 
automatic subspace clustering high dimensional data data mining applications 
acm sigmod conference 
ankerst breunig 
kriegel sander 
optics ordering points identify clustering structure 
acm sigmod conference 
babcock babu datar motwani widom 
models issues data stream systems acm pods conference 
cortes fisher pregibon rogers smith 
hancock language extracting signatures data streams 
acm sigkdd conference 
domingos hulten 
mining high speed data streams 
acm sigkdd conference 
lewis elkan 
scalability clustering algorithms revisited 
sigkdd explorations 
feigenbaum testing spot checking data streams 
acm soda conference 
guha mishra motwani callaghan 
clustering data streams 
ieee focs conference 
guha rastogi shim 
cure efficient clustering algorithm large databases 
acm sigmod conference 
jain dubes 
algorithms clustering data prentice hall new jersey 
ng han 
efficient effective clustering methods spatial data mining 
large data bases conference 
callaghan mishra meyerson guha motwani 
streaming data algorithms high quality clustering 
icde conference 
zhang ramakrishnan livny 
birch efficient data clustering method large databases 
acm sigmod conference 
