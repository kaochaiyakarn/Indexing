deriving java virtual machine timing models portable worst case execution time analysis erik yu shing hu andy wellings real time systems research group department computer science university york york yo dd uk erik andy cs york ac uk 
performing worst case execution time wcet analysis highly portable real time java architectures resulting utilisation system challenges 
current wcet approaches tied particular language target architecture 
stressed wcet analysis approaches usually considered relation procedural programming languages 
propose comprehensive portable wcet analysis approach demonstrate java virtual machine timing models derived effectively real time embedded java systems 
keywords real time java worst case execution time wcet analysis portable wcet able support predictable expressive real time java environment major international efforts attempted provide real time extensions java real time specification java real time core extensions java 
specifications addressed issues related java real time context including scheduling support memory management issues interaction non real time java real time java programs device management 
timing analysis crucial real time systems guarantee hard real time threads meet deadlines line design 
order ensure appropriate scheduling algorithms schedulability analysis required 
typically scheduling algorithms assume worst case execution time wcet estimation thread known prior conducting schedulability analysis 
estimating wcet bounds real time threads vital importance 
unfortunately real time java specifications satisfactory solution wcet estimations carried java architecture portability mind 
erik yu shing hu andy wellings part current wcet approaches tied particular language target architecture 
addition analysis approaches considered relation procedural programming languages 
performing wcet analysis java architecture take account additional dynamic features dynamic dispatching memory management platform independent issue 
wcet analysis approaches appropriate java architecture java programs write run appropriate real time write carefully run conditionally 
knowledge portable wcet analysis proposed taken account platform independent features java architecture 
portable wcet analysis uses step approach high level analysis analysing java programs low level analysis producing virtual machine time mode vmtm target platform conducting combination high level analysis low level analysis compute actual wcet bound analysed code sections 
portable wcet analysis approach tended focus supporting portability addressing dynamic features java 
noted portable wcet analysis highly depends vmtm target platform appropriate solution show vmtm particular platform built efficiently 
practical standpoint bringing approach engineering practice number issues addressed 
reasons introduce comprehensive portable wcet analysis takes account dynamic dispatching issues presents built various target platforms 
major contributions introducing measurement approaches demonstrate extract java portable wcet analysis discussing vmtm derived profiling approach presenting build portable benchmark model extract various target platforms 
rest organised follows 
section gives summary related section presents overview comprehensive portable wcet analysis 
section discusses java extracted various platforms different approaches 
section gives simple example evaluate approaches 
section 
related general principal ways obtaining wcet program static analysis dynamic analysis measurement approach 
systems industry relied ad hoc measurements execution times vmtm timing model target virtual machine including list worst case execution time native methods java bytecode instructions 
lecture notes computer science designing real time systems 
arguably measuring execution time unsafe practice know worst case captured measurements 
contrast static analysis give relatively safer results wcet analysis 
number research approaches demonstrated estimate wcet high level low level analyses 
unfortunately wcet approaches tied particular language target architecture 
addition analysis approaches considered relation procedural programming languages 
processors tended complex research approaches integrated measurement techniques static analysis address modern complicated processor issues 
approaches attempted estimate wcet bounds applications target platform 
result techniques take advantage platform independent feature supported java 
notable exceptions include portable wcet analysis proposed 
approach taken account platform independent features java architecture 
tended focus supporting portability account issues connected dynamic dispatching features 
appropriate solution show vmtm particular platform built efficiently 
approach extends portable wcet analysis approach take account dynamic dispatching issues provide portable model build vmtm effectively real time embedded systems 
arguably additional pessimism performing wcet process particular way counteracts added benefits portability brings 
observed pessimism compensated gain time reclaiming mechanisms integrated approach 
overview framework philosophy portable wcet analysis framework uses step approach able offer comprehensive wcet analysis bearing portability dynamic dispatching issues mind 
note framework part going called extends current real time java architecture proposed real time java expert group 
environment targeted cluster distributed high integrity real time java systems consumer electronics embedded devices industrial automation space nuclear power plants medical instruments 
environment facilitate various static analysis approaches provide information expressed java source programs java bytecode extensible extensible distributed high integrity real time java environment erik yu shing hu andy wellings portable annotation class format called extensible annotations class file proposed 
generate files annotation aware compiler named compiler derive additional information manual annotations source programs introduced 
furthermore static analyser called analyser introduced order support various static analyses including program safety analysis timing analysis 
java class files platform independent analysis java class files static analysis dynamic analysis measurement java source files files estimating wcet wcet target virtual machine vmtm native method platform dependent analysis fig 

comprehensive portable wcet framework step framework platform independent analysis 
stage technique analyses annotated java programs java class files produce portable wcet information 
manual annotations approach introduced characters single line 
multiple lines 
note formats assumed comments java 
advantage knowledge accumulated compiler portable wcet information extracted source programs java bytecode statically 
dynamic dispatching methods analysed previous approaches 
portable wcet information computed form called worst case execution frequency vectors compiler 
vectors represent execution frequency information basic blocks complex code structures collapsed part analysis 
portable wcet information stored files 
note static analysis stage 
parallel analysis target platform performed called analysis 
takes form definition timing model virtual machine 
stage performs platform dependent analysis context specific hardware vm implementation java basic block continuous section code sense control flow goes instruction leaves 
lecture notes computer science bytecode instructions 
stage information potential effects pipelines caches may captured 
platform independent analysis carried static analysis approach static analysis technique perform analysis number challenges 
noted deriving vmtm necessary take account implementation aspects java virtual machine operating system 
addition analysis bear mind hardware architecture various embedded systems 
order accommodate diverse set implementations underlying platforms virtual machines embedded systems measurement analysis technique approach 
explored section 
final stage estimating wcet bounds thread 
environment wcet analysis tool analyser performs combination results platform independent analysis target vmtm compute actual wcet bound analysed code sections 
deriving java virtual machine models deriving vmtm target platform crucial portable wcet analysis results analysis highly dependent outcome vmtm 
arguably real time embedded field analysing virtual machine produce vmtm target platform needs efficient rapid development life cycles software built embedded systems short applications demanded reusable compatible various architectures 
efficiently derive different platforms key issue portable wcet analysis approach 
propose measurement approaches profiling analysis benchmark analysis demonstrate vmtm extracted target platform 
note possible ways execution time measured clock cycle counters timers 
approach instruction high resolution low overhead run time provided architecture extract time stamp counter processor 
show software approach architecture linux platform approach applied cpu architectures operating systems support instructions libraries extract time stamp counter processor 
example library routine sparc architecture solaris operating systems hardware data acquisition interfaces windows linux solaris operating systems 
analysis cache effects scope 
www com erik yu shing hu andy wellings profiling analysis observing behaviour system analyse specific aspects applications executing system novel 
automatic tracing analysis proposed extract temporal properties applications operation systems 
approach shows empirical analysis reduce estimation real time applications 
accordingly profiling analysis technique applied deriving vmtm particular platform instrumenting additional code virtual machine 
idea relatively straightforward derive vmtm number issues need addressed ensure reliability derived vmtm 
example insert instrumenting code minimise side effects instrumenting code run time avoid order execution measurement specific code section 
similar automatic tracing analysis approach profiling execution time bytecode divided steps 
extracting run time information analysing 
step involves exploring context virtual machine temporal information derived instrumenting code extract time stamp counter processor low runtime overhead 
instance instrumenting code accumulate instruction mnemonics time stamp counter time interpreter fetches bytecode 
step analyses data builds vmtm target platform 
interpreter engine entering method code attributes bytecode interpretation leaving method allocate memory extracting cpu time stamp counter extracting cpu time stamp counter dump storage location instrumenting code fig 

instrumenting profiling code interpreter engine able trace run time information instrumenting code needs provided java virtual machine 
instrumenting mainly depends lecture notes computer science specific implementation jvm 
java virtual machines conduct interpretation java bytecode method approach 
reduce memory run time overhead needed collecting run time information implementation profiling analysis refer suggested implementation 
note major aim collecting run time data method interpreter engine reduce memory run time overhead instrumenting code analysing applications 
shown small amount memory allocated invoking method necessary store collected information run time 
accumulated data dumped storages returning method finishing interpretation method 
dumping accumulated data point reduce noise side effects instrumenting code measurement results 
data analysed requirements target platform vmtm built analytical data 
avoid order execution profiling serializing instruction invoked extracting time stamp counter processor 
experimental implementation approach carried implementations provided 
basically instrumenting code including serializing time stamp counter instructions added interpreter engine 
starting interpretation method buffer store run time information prepared 
execution time bytecode measured starting opcode fetched fetching opcode 
run time information captured interpreter classified opcode mnemonics 
leaving method captured run time information conducted statistical analysis produce vmtm 
evaluation approach discussed section 
benchmark analysis noted analysis portable wcet analysis approach highly depends vmtm target platform technique provided previous section needs enormous effort carried including modifications execution engine target java virtual machine derive execution time bytecode 
order conduct clear source virtual machine necessary 
deriving execution time single bytecode achieved previous mechanism deriving execution specific sets bytecodes accomplished 
furthermore implementations previous approach reused building vmtm new virtual machine 
means creating vmtm new virtual machine needs started scratch 
able apply portable wcet analysis real time embedded systems effectively major issues need addressed instrumenting code reused effectively various platforms modifying erik yu shing hu andy wellings execution time specific set bytecodes measured 
address issues benchmark analysis approach introduced 
aim approach provide java benchmark may produce vmtm automatically executing target virtual machine 
principle mechanism inject individual set specific bytecodes instrumenting code developed native method may access time stamp counter processor java program 
native method java native interface jni features benchmark ported easily different platforms modifying benchmark 
issues need addressed achieve goals specific bytecodes inserted java program measure execution time specific bytecodes maintain integrity java stack injection additional bytecodes 
prove feasibility approach reduce time needed develop mechanism number tools investigated 
advantage time stamp counter instruction supported architecture bytecodes disassembler assembler tools provided compiler suite java native interface feature benchmark analysis approach carried 
procedure benchmark established 
java program jni java java class file java class file additional bytecode measured disassembler assembler assembly language instrumenting bytecode instrumenting specific set java bytecodes jni library target platform java apis real time apis target virtual machine java class file additional bytecode measured ge ra te virtual machine timing model measuring wcet specific set java bytecodes target vm generating fig 

instrumenting measuring benchmark approach shown java program native method access time stamp counter translated java bytecode traditional compiler 
class file translated assembly language term benchmark means collection java programs instrumented particular bytecodes measured 
lecture notes computer science able insert specific set java bytecodes easily text mode 
note integrity java stack jvm needs borne mind inserting additional bytecodes 
instance executing iload instruction virtual machine load integer java stack 
need add complementary bytecodes remove integer stack order maintain data integrity java stack program 
bytecodes may need provided values executing iadd 
result ensure data integrity java stack corresponding complementary bytecodes needed added pre post locations measurement bytecodes 
injecting specific bytecodes file saved assembly language format translated standard java class files 
individual instrumenting java programs combined comprehensive benchmark generate vmtm automatically 
individual java program benchmark ready measuring execution time specific set bytecodes target platform 
note major purpose benchmark produce vmtm contains collections wcet bounds vectors method calls 
possible building vmtm systems small provide compact benchmark comprises vectors systems 
benchmark executed particular target platform native method access timestamp counter target platform 
approach generate execution time specific set common sequence bytecodes allows insert combination bytecodes mechanism 
observed generating instrumented java programs automatically conducted simple program implementing procedure 
table 
measurements wcet instrumenting code experiment average 

table 
measurements wcet iload instrumenting cost experiment average 

experiment carried ri preliminary result analysis iload bytecode 
java program developed native method access time stamp counter processor developed measure cost instrumenting code 
experimental results cost instrumenting code table 
iload bytecode instructions added instrumenting code corresponding complementary bytecode istore inserted post instrumenting code 
measurement iload carried times loop 
experiment conducted times table 
graph illustrating distributions measurement erik yu shing hu andy wellings cycles iload counts cycles iload counts fig 

measurements iload bytecode benchmark analysis iload instruction 
iload shows machine cycles measurements loop iload presents percentage measurements loop assumed high execution time measurements influenced operation systems interrupts 
evaluation evaluation analysis illustrated example code bubble sort algorithm 
shows individual basic block algorithm offset numbers 
maximum number iterations outer inner loops assumed respectively size equal 
vectors bubble sort algorithm generated prototype compiler compilation text mode 
example different java bytecodes generated java compiler 
deriving vmtm necessary minimise run time overhead influences import public extends data public void run 
data public void 
fig 

bubble sort algorithm java fig 

individual basic blocks offset numbers lecture notes computer science 
method subtag body bb goto bb goto bb bb bb bb bb bb bb return subtag body 
fig 

vectors bubble sort algorithm text mode background process running operating systems including background tasks 
addressed issues running test bed single user mode linux 
addition background processes killed manually reduce influences possible 
measurements execution time represented machine cycle unit rest example 
table 
vmtm derived benchmark analysis bytecode average aload iload istore isub goto iconst iconst summary vmtm bubble sort example shown table 
table shows different statistical analysis results vmtm carried benchmark analysis 
bytecode measured times continuously 
shown vmtm derived benchmark approach shows constant outcomes vmtm produced profiling approach presents relatively pessimistic results measurements taken account wcet erik yu shing hu andy wellings cycles profiling benchmark aload bytecode iload istore isub goto cycles profiling benchmark aload bytecode iload istore isub goto fig 

comparing profiling benchmark analyses bounds 
reasoned ad hoc measurements analysis produce pessimism derives execution time bytecode various methods invoked vm methods invoked initialisation phase vm 
result measurements worst case response time bytecode wcet bounds 
observed percent measurements profiling analysis close results derived benchmark analysis 
experiment shows analysis difficulties control particular bytecodes measured number measurements bytecodes 
order obtain reliable measurements profiling approach needs provided large amount particular bytecodes needed measured 
table different wcet bounds average estimated 
bubble sort algorithm obtained follows wcet bb sort table 
comparing final wcet bounds approach measurement benchmark profiling final wcet bounds algorithm different approaches measurement benchmark analysis profiling analysis conducted 
estimations account measurements table 
note method estimating pipeline effects scope technique proposed integrated approach easily benchmark analysis 
lecture notes computer science aim portable code support hardware interchangeability wcet analysis portable applications needs bear portability mind 
comprehensive portable wcet proposed stage approach analyse highly portable reusable java applications real time embedded systems 
mainly discussed derive various facilitate portable wcet real time embedded java applications 
approaches profiling benchmark proposed derive 
major advantage profiling approach extended integrate tracing profiling techniques posix trace disadvantages approach needs source code knowledge target vm takes time instrument additional code vm 
contrast benchmark analysis highly portable needs provide native method access timestamp counter target processor 
benchmark analysis convenient integrate profiling techniques 
techniques applied various applications depend requirements systems 
experimental results outcomes benchmark analysis approach encourage carry portable wcet analysis real time embedded java systems results profiling analysis approach reminds account run time issues cache effects branch prediction issues achieve relatively safer tighter wcet estimations 
number issues need addressed approach account timing properties cache effects wcet estimations extending just time compiler techniques 

murphy 
low level analysis portable java byte code wcet analysis framework 
proceedings th ieee real time computing systems applications pages december 

burns wellings 
portable worst case execution time analysis java byte code 
proceedings th euromicro conference real time systems pages june 

colin 
wcet analysis probabilistic hard real time systems 
proceedings rd ieee real time systems symposium december 

gosling hardin turnbull 
real time specification java 
addison wesley 

chapman burns wellings 
integrated program proof worst case timing analysis spark ada 
proceedings workshop language compiler tool support real time systems june 
erik yu shing hu andy wellings 
consortium 
real time core extensions java platform 
international consortium specification revision september 
www org 


hu wellings 
addressing dynamic dispatching issues wcet analysis object oriented hard real time systems 
proceedings th ieee international symposium object oriented real time distributed computing pages april 


hu wellings 
static timing analysis environment java architecture safety critical real time systems 
proceedings th ieee international workshop object oriented real time dependable systems words pages january 


hu kwon wellings 
extensible distributed high integrity real time java environment 
proceedings th international conference real time embedded computing systems applications pages february 


hu wellings 
novel gain time reclaiming framework integrating wcet analysis object oriented real time systems 
proceedings nd international workshop worst case execution time analysis wcet june 


hu wellings 
gain time reclaiming high performance real time java systems 
proceedings th ieee international symposium object oriented real time distributed computing pages may 

intel applications notes 
instruction performance monitoring 
intel 
cedar intel com software media pdf pdf 


project 
dms decision management systems gmb 
www dms 

lim bae jang rhee min park shin park kim 
accurate worst case timing analysis risc processors 
ieee transactions software engineering july 

lindgren 
measurement simulation techniques real time systems analysis 
dissertation uppsala university sweden 

mueller 
static cache simulation applications 
ph thesis department computer science florida state university july 

farber 
making worst case execution time analysis hard real time tasks 
proceedings th international conference real time computing systems application december 

burns 
review worst case execution time analysis 
real time systems 

shaw 
reasoning time higher level language software 
ieee transactions software engineering july 


extracting temporal properties real time systems automatic tracing analysis 
proceedings th international conference real time embedded computing systems applications pages february 


real time java 

www com java 
