journal embedded computing february aspects components real time system development reconfigurable reusable software te dag nystr rgen hansson christer link ping university department computer science link ping sweden university department computer engineering ster sweden increasing complexity real time systems demands enabling configurability reusability strong motivations applying new software engineering principles aspect oriented component development 
introduce novel concept aspectual component real time system development 
concept design method assumes decomposition real time systems components aspects provides real time component model supports notion time temporal constraints space resource management constraints composability 
initial results show successful application proposed concept positive impact realtime system development enabling efficient configuration real time systems improved reusability flexibility realtime software modularization crosscutting concerns 
provide arguments presenting application proposed concept design development configurable embedded real time database called comet 
furthermore comet system example introduce novel way handling concurrency real time database system concurrency modeled aspect crosscutting system 
index terms embedded systems real time systems software components aspects database systems temporal analysis 
real time embedded systems widely modern society today 
successful deployment embedded real time systems depends low development costs high degree market 
componentbased software development cbsd paradigm realtime embedded systems development offers significant benefits configuration embedded real time software specific application components component library reducing system complexity components chosen provide functionality needed system rapid development deployment real time software software components properly designed verified reused different embedded realtime applications evolutionary design components replaced added system appropriate complex embedded real time systems require continuous hardware software upgrades 
aspects real time embedded systems encapsulated component defined interfaces crosscut structure system synchronization memory optimization power consumption temporal attributes 
aspect oriented software development aosd emerged new principle software development provides efficient way crosscutting concerns software systems 
aosd allows encapsulating crosscutting concerns system modules called aspects 
applying aosd real time embedded system development reduce complexity system design development provide means structured efficient way handling crosscutting concerns real time software system 
integration disciplines cbsd aosd real time systems development enable efficient system configuration components aspects library system requirements ii easy tailoring components system specific application reuse context changing behavior code component applying aspects 
results enhanced flexibility real time embedded software notion system configurability component 
due specific demands real time systems applying aosd cbsd real time system development straightforward 
example need provide methods analyzing temporal behavior individual aspects components development process real time systems software technology supports predictability time domain 
furthermore want aosd cbsd real time system development need provide methods efficient temporal analysis different configurations components aspects 
additionally cbsd assumes component black box internals components visible aosd promotes white box components entire code component visible component user 
implies need provide support aspect integration component code preserving information hiding component largest degree possible 
able successfully journal embedded computing february apply software engineering techniques aosd cbsd real time systems questions need answered 
appropriate design method allow integration software engineering techniques real time systems 
component model aspects appropriate real time embedded environments 
component model capture adopt principles cbsd aosd real time embedded environments 
investigate address research questions proposing novel concept aspectual componentbased real time system development accord 
concept founded design method decomposes real time systems components aspects provides real time component model rtcom supports notion time temporal constraints space resource management constraints composability 
rtcom component model addressing real time software reusability composability combining aspects components 
experience far applying proposed concept positive impact real time system development enabling efficient configuration real time systems improved reusability flexibility real time software structured way handling crosscutting concerns 
show accord successfully applied practice describing way applied design development componentbased embedded real time database system comet 
comet example novel approach modeling implementing real time policies concurrency control scheduling aspects crosscut structure realtime system 
modularization real time policies aspects allows customization real time systems changing code components 
organized follows 
section ii background component aspects oriented software development 
section iii outline accord design method 
rtcom section iv 
section show application accord development comet 
comet example describe new way modeling real time concurrency control policy aspect real time database system 
related section vi 
finishes section vii summary containing main directions research 
ii 
background section background component software development sections ii ii 
main differences components componentbased aspect oriented software development discussed section ii 
component software development need transition monolithic open flexible systems emerged due shortcomings traditional software development high development costs inadequate support long term maintenance system evolution unsatisfactory quality software 
cbsd emerging development paradigm enables transition allowing systems assembled pre defined set components explicitly developed multiple usages 
developing systems existing components offers advantages developers users decreased development costs increased quality software shortened market reduced maintenance costs 
software components core cbsd 
different definitions interpretations component exist 
general software architecture component considered unit composition explicitly specified interfaces quality attributes performance real time reliability 
systems com component framework component generally assumed self contained binary package precisely defined standardized interfaces 
similarly corba component framework component assumed corba object standardized interfaces 
component viewed software artifact models implements defined set functions welldefined standardized component interfaces 
universal definition component suitable component system currently exist 
definition component clearly depends implementation architectural assumptions way component reused system 
component systems common fact components composition 
types components independent definition communicate environment defined interfaces com corba interfaces defined interface definition language idl microsoft idl corba idl 
furthermore independently application area software component normally considered black box properties component sees interfaces components internal state attributes component strongly encapsulated 
frameworks standards components today primarily focus corba com javabeans increasing need component development identified area real time embedded systems 
aspect oriented software development aosd emerged new principle software development notion separation concerns 
typically aosd implementation software system constituents components written component language java aspects written corresponding aspect language aspectj developed java aspect languages share similarities aspectj 
te aspects components real time system development aspect weaver special compiler combines components aspects process called aspect weaving 
components system composition aosd white box components 
white box component piece code program function method completely accessible component user 
white box components enforce information hiding fully open changes modifications internal structure 
aosd modify internal behavior component weaving different aspects code component 
aspects commonly considered property system affect performance semantics crosscuts functionality system 
aspects software persistence debugging described separately exchanged independently disturbing modular structure system 
existing aspect languages aspect declaration consists advices pointcuts 
pointcut aspect language consists join points described pointcut expression 
join point refers point component code aspects woven method type struct union 
shows definition named pointcut refers calls function join point program aspect woven exposes single integer argument call 
pointcut int call void int args fig 

example pointcut definition advice void int cout lock requested endl fig 

example advice definition advice declaration specify code run join points specified pointcut expression reached 
different kinds advices declared advice code executed join point ii advice code executed immediately join point iii advice code executed place join point 
shows example advice 
advice call followed execution advice code printing lock id components vs aspects discuss notion component cbsd aosd particular focus abstraction metaphors example written 
white box black box component 
cbsd uses black box abstraction metaphor components aosd uses white box component metaphor emphasize details component implementation revealed 
black box white box component abstractions advantages disadvantages 
example hiding details component implementation black box manner advantage component user deal component internals 
contrast having details revealed white box manner allows component user freely optimize tailor component particular software system 
main motivation main benefits cbsd overlap complement ones aosd 
furthermore making aspects aspect weaving usable cbsd allow improved flexibility tailoring components enhanced reuse components different systems 
allow aspects change component code preserve information hiding largest extent possible requires changing black box component 
turn implies gray box abstraction metaphor component 
gray box component preserves main features black box component defined interfaces access points component allows aspect weaving change behavior internal state component 
iii 
accord design method argued growing need enabling development configurable real time embedded systems tailored specific application managing complexity requirements real time system design calls new concepts new software engineering paradigms real time system development 
section accord proposal address new needs 
notion aspects components accord enables efficient application divide conquer approach complex system development 
effectively apply accord provide design method constituents 
decomposition process sequential phases decomposition real time system set components ii decomposition real time system set aspects 
components software artifacts implement number defined functions welldefined interfaces 
aspects properties system affecting performance semantics crosscutting functionality system 
real time component model rtcom describes real time component supports aspects enforces information hiding 
rtcom specifically developed enable efficient decomposition process ii support notion time temporal constraints iii enable efficient analysis components composed system 
design real time system accord method performed phases 
phase real time system journal embedded computing february run time aspects real time systems resource demand temporal constraints portability composition compatibility versioning flexibility application fig 

classification aspects real time systems real time property real time policies memory optimization synchronization security decomposed set components 
decomposition guided need functionally exchangeable units loosely coupled strong cohesion 
second phase real time system decomposed set aspects 
aspects crosscut components system 
phase typically deals non functional requirements crosscutting concerns real time system resource management temporal attributes 
design components aspects implemented rtcom 
analogous classical object oriented design method initially identifies objects building blocks system accord initially identifies components aspects building blocks real time software system 
accord viewed extension classical object oriented design method turn implies accord founded established design method 
aspects real time systems classify aspects real time system follows see application aspects ii run time aspects iii composition aspects 
application aspects change internal behavior components crosscut code components system 
application context refers application real time embedded system configured memory optimization aspect synchronization aspect security aspect real time property aspect realtime policy aspect 
optimizing memory usage key issues embedded systems crosscuts structure real time system view memory optimization application aspect system 
security application aspect influences behavior structure system system able distinguish users different security clearance 
synchronization entangled entire system encapsulated represented synchronization aspect 
memory optimization synchronization security commonly mentioned aspects aosd 
additionally real time properties policies viewed application aspects influence structural behavior system 
depending requirements system real time properties policies refined show example comet system see section 
application aspects enable tailoring components specific application change code non functional requirements referred extra functional requirements 
components 
informally define application aspects programming aspect language level constructs encapsulating crosscutting concerns change code component 
run time aspects critical refer aspects monolithic real time system need considered integrating system run time environment 
run time aspects give information needed run time system ensure integrating real time system compromise timeliness available memory consumption 
component declared resource demands resource demand aspect information temporal behavior contained temporal constraints aspect worst case execution time wcet 
temporal aspect enables component mapped task group tasks specific temporal requirements 
additionally component contain information platform compatible real time operating system supported hardware related information 
information contained portability aspect 
imperative information contained run time aspect provided ensure predictability composed system ease integration run time environment ensure portability different hardware software platforms 
informally define run time aspects languageindependent design level constructs encapsulating crosscutting concerns contain information describing component behavior respect target run time environment 
implies run time aspects change code component 
composition aspects describe components component combined compatibility aspect version component version aspect possibilities extending component additional aspects flexibility aspect 
composition aspects viewed languageindependent design level constructs encapsulating crosscutting concerns describe component behavior respect composition needs component 
implies composition aspects change code component 
having separation aspects different categories eases reasoning different embedded real time related requirements composition system integration run time environment 
example run time system define run time aspects real time system fulfill proper components application aspects chosen library composing monolithic system 
approach offers significant flexibility additional aspect types added components monolithic real time system improving integration run time environment 
aspects identified recommend table components identified application aspects crosscutting effects different components recorded example table section 
show section step especially useful phase design te aspects components real time system development functional part run time part policy mechanisms temporal constr 
resource demand portability operation operation mechanism wcet wcet memory memory os type hardware type fig 

real time component model rtcom composition part aspect component functional compatibility temporal compatibility resource platform compatibility component modeled designed take account identified application aspects 
iv 
real time component model rtcom section rtcom viewed component colored aspects inside application aspects outside run time composition aspects 
rt com language independent component model consisting parts see functional part ii run time system dependent part iii composition part 
rtcom represents coarse granule component model provides broad infrastructure functional part 
broad infrastructure enables tailoring component weaving application aspects changing functionality behavior component suit needs specific application 
contrast traditional component models fine grained allow controlled configuration component adopt different system 
type fine grained component typically optimal particular functionality provided component terms code size allow component tailoring merely fine tuning restricted set parameters component 
component implemented rtcom functional part component implemented application aspects run time system dependent part run time aspects implemented followed composition part rules composing different components application aspects 
notation notation provide formalized framework rtcom denotes set components real time system development configuration represents component system denotes set mechanisms denotes set operations denotes set application aspects real time system development ic ig set component interfaces set functional interfaces component ic set compositional interfaces component ig set configuration interfaces component rtcom define component follows 
definition component component tuple set mechanisms encapsulated component set operations component set component interfaces 
sections provide follow definitions extensive elaboration constituents definition notation introduced section 
functional part rtcom define functional part rtcom need define notion mechanisms operations component follows 
definition mechanisms set mechanisms component non empty set functions encapsulated component definition operations set operations component set functions implemented operation exists non empty subset mechanisms subset operations components mapping 
implication definition establishment mechanisms fine granule methods functions component 
definition implies component provides set operations components system 
operations viewed coarse granule methods function calls implemented underlying component mechanisms 
additionally operation component call number operations provided components system 
example operations mechanisms related component 
example operation implemented subset component mechanisms operation implemented subset component mechanisms 
furthermore operation component mechanism implementation times uses times 
relationship operations component system configuration precisely defined enable temporal analysis real time software composed rtcom components 
rtcom primarily targeted hard real time systems efficient wcet analysis essential requirement 
provide means satisfying requirement introduce notion non recursively cyclic set operations follows 
definition non recursively cyclic set operation sequence fi mapping temporal analysis refers static wcet analysis code dynamic schedulability analysis tasks 
journal embedded computing february uses fig 

operations mechanisms component calls calls calls fig 

example recursively cyclic set operations defines operation oi oi fi ki oi oi defined oi oi fik kik di oi operation domain functions level operation sequence non recursively cyclic dj di dj 
set operations recursively cyclic operation implemented operation turn implemented operation operation recursive cycle implemented operation see 
having recursively cyclic sets operations component different components temporal analysis wcet analysis system composed components inherently difficult 
rtcom current form supports non recursively cyclic operation sets 
definition characterizes property 
definition component configuration operations ordered sequence non recursively cyclic property considered formed purpose wcet analysis 
functional part rtcom represents actual code implemented component characterized definition 
definition functional part belong wellformed component set functional part component represented tuple set mechanisms component set operations implemented component 
functional part rtcom constituents relationship properties introduced far illustrate small example ordinary linked list implemented rtcom 
functional part linked list component code consists component mechanisms operations prescribed definition 
mechanisms needed ones manipulation nodes policy mechanisms fig 

functional part linked list component list see 
operations linked list component implemented underlying component mechanisms 
example uses mechanisms create link new node list fifo order 
implementation operations component defines behavior component 
component provides fifo ordering nodes list exhibits fifo component policy 
policy component changed modified weaving application aspects component code functional part component 
application aspects directly dependent functional part rt com 
definition application aspects influenced requirements preserving information hiding component largest extent possible ii enabling temporal analysis resulting woven components 
satisfy requirements utilize notion mechanisms building blocks application aspects provide application aspects follows 
definition application aspects application aspect set tuples advice type defined mapping set pointcuts describes subset operations components preceded succeeded replaced advice depending type advice 
definition extends traditional definition programming language level aspects specifying pointcuts advices terms mechanisms operations 
enables performing temporal analysis woven system aspects real time environments 
enables existing aspect languages implementing application aspects real time systems enables existing integrate aspects components maintaining predictability real time system 
rtcom pointcuts refer operations implying pointcut application aspect points operations component modifications component code allowed 
having mechanisms components basic building blocks advices te aspects components real time system development aspect pointcut list operands op call void list operands args op advice op void list operands op node position determined node node determine position op node priority priority node list fig 

application aspect decisive factor enabling temporal analysis resulting woven code see section iv details performing wcet analysis 
furthermore implementation application aspect limited mechanisms component aspect contain finite number advices precede succeed replace operations system configuration 
advices application aspects implemented mechanisms number components 
assume want change policy linked list component fifo priority ordering nodes 
achieved weaving appropriate application aspect 
shows application aspect consists named pointcut identifying operation component join point component code lines 
advice implemented component mechanism determine position node priority lines 
weaving application aspect code linked list component result component execution operation preceded execution advice placing node list position determined priority 
expressing semantics aspect weaving formally definition requires mathematical interpretation sequential execution code fragments manner 
represent code fragments xy denotes sequential compositions resulting textual concatenation pieces code define mathematical interpretation code xy follows 
definition pieces code sequences statements programming language 
mathematical representation respectively 
denote mathematical representation code xy glue 
formal notation introduced far formally express semantics application aspect weaving follows 
definition weaving application aspects application aspect set pointcuts weaving application aspect component results component holds oi oi oi glue oi glue oi example assume component set mechanisms set operations set component interfaces 
weaving application aspect consisting advices respective pointcut sets result component glue glue 
glue component execution operations preceded execution code advice execution operation succeeded execution advice operations remain unchanged 
weaving application aspects code component change implementation mechanisms implementation operations component 
operations flexible parts component implementation change weaving application aspects mechanisms fixed parts component infrastructure 
advices implemented mechanisms components advice change behavior component changing operations component 
enable easy implementation application aspects component design functional part component performed manner 
mechanisms basic blocks component implemented 
particular attention identified application aspects table reflects crosscutting effects application aspects different components help designer remaining steps rtcom design implementation 
operations component implemented component mechanisms see definition 
note implemented operations provide initial component policy basic somewhat generic component functionality 
initial policy denote policy framework component 
policy framework modified weaving different application aspects change component policy 
development process functional part component results component colored application aspects 
graphical view rtcom application aspects represented vertical layers functional part component influence component behavior change component policy 
journal embedded computing february run time system dependent part rtcom run time system dependent part rtcom accounts temporal behavior functional part component code aspects aspects woven component 
run time aspects part run time dependent part rtcom represented horizontal parallel layers functional part component describe component behavior see 
run time part component run time aspects expressed attributes operations mechanisms application aspects elements functional part component influence temporal behavior component 
illustrate run time aspects represented handled rtcom wcet example runtime aspect 
way enabling predictable aspect weaving ensure efficient way determining wcet operations real time system modified weaving aspects 
wcet specifications rtcom observations aspect weaving change wcet mechanisms mechanisms fixed parts rtcom aspect weaving changes operations changing number mechanisms operation uses changing temporal behavior 
mechanisms known fixed wcet policy framework aspects function mechanism wcet component woven aspect computed calculating impact aspect weaving operations component terms mechanism usage 
facilitate efficient wcet analysis different configurations aspects components wcet specifications run time part rtcom satisfy wcet mechanism known declared wcet specification wcet operation determined mechanisms implementing operation internal wcet body function method implements operation manages mechanisms wcet advice changes implementation operation mechanisms implementing advice internal wcet body advice code manages mechanisms 
shows wcet specification mechanisms component mechanism wcet declared assumed known 
similarly shows wcet specification component policy framework 
operation defining policy component declares mechanisms uses times uses specific mechanism 
declaration computing operations component aspects 
shows wcet specification application aspect 
advice type modifies operation operation modifies declared mechanisms mechanism name wcet value wcet mechanism name wcet value wcet 
fig 

specification wcet component mechanisms policy operation name uses name mechanism number times value internal operation wcet called mechanisms excluded operation 
fig 

specification wcet component policy framework mechanisms implementation advice number times advice uses mechanisms 
wcet specifications aspects components list parameters expressing value 
presents instantiation wcet specification policy framework linked list component 
operation framework named internal wcet number times uses particular mechanism declared see 
wcet specification application aspect changes policy framework shown 
maximum number elements linked list vary wcet specifications parameterized parameter 
resulting wcet component woven application aspects computed tool developed called aspect wcet analyzer 
aspect wcet analyzer aspect advice name type changes name uses number times value internal advice wcet called mechanisms excluded 
fig 

specification wcet application aspect te aspects components real time system development policy operation name uses ms operation name uses ms mechanisms mechanism name wcet ms mechanism name wcet ms mechanism name wcet ms 
fig 

wcet specification policy framework aspect advice name type changes name uses ms 
fig 

wcet specification application aspect performs automated aspect level wcet analysis approach determining wcet realtime system composed aspects components 
main goal aspect level wcet analysis determining wcet different real time system configurations consisting aspects components actual aspect weaving system configuration performed help designer configurable real time system choose system configuration fitting wcet needs underlying realtime environment paying price aspect weaving individual candidate configuration 
aspect wcet analyzer performs computations set rules define compute new wcet operation woven aspects depending type advice aspect 
example advice type modifying operation new wcet operation computed value old wcet wcet operation aspects augmenting value wcet advice 
rule reflects fact code advice aspect weaving inserted code operation 
similar rules exist advices types 
example linked list component compute wcet operation modified advice type illustrated 
composition part rtcom composition part rtcom refers functional part run time part component represented third dimension component model aspects aspects mechanism usage mechanism usage fig 

example wcet calculations operation modified advice composition interface functional interface provided rtcom configuration interface fig 

interfaces supported rtcom functional interface required see 
different application aspects woven component composition aspects represented composition part rtcom contain information component compatibility respect different application aspects respect different components 
rtcom interfaces rtcom supports different types interfaces see functional interface ii configuration interface iii composition interface 
functional interfaces components classified categories provided functional interfaces required functional interfaces 
provided interfaces reflect set operations component provides components system 
required interfaces reflect set operations component requires components 
having separation provided required interfaces eases component exchange addition new components system 
configuration interface intended integration real time system run time environment 
interface provides information temporal behavior component reflects run time aspect component 
combining multiple components results system configuration interface enables designer inspect behavior system run time environment see 
composition interfaces correspond join points embedded functional component part 
weaver identifies composition interfaces uses journal embedded computing february provided functional interface rtcom system real time system functional interface aspects weaved component configuration interface system configuration interface fig 

interfaces role composition process composition interface required functional interface system functional interface aspect weaving 
composition interfaces ignored component system compile time needed activated certain application aspects woven system 
composition interface allows integration component aspectual part system 
aspect weaving performed component level weaving application aspects component functionality system level weaving application aspects monolithic system 
explicit separation software component interfaces composition interfaces functional interfaces introduced 
comet component embedded real time database section shows apply introduced concept aspectual component development design development concrete real time system presenting application design method development configurable real time embedded database system called comet 
background goal comet project enable development configurable real time database embedded systems enable development different database configurations different embedded real time applications 
types requirements dealing best illustrated example comet targeting application areas control systems automotive industry 
systems typically hard real time safety critical systems consisting distributed nodes implementing specific functionality 
nodes depend collaborate provide required behavior vehicle control system node viewed stand realtime system nodes implement transmission engine instrumental functions 
size nodes vary significantly small nodes large nodes 
depending functionality node available memory different database configurations preferred 
safety critical nodes tasks non preemptive scheduled line avoiding concurrency allowing task active time 
turn influences functionality database node respect concurrency control 
critical nodes having preemptable tasks require dbms transaction manager recovery logging user interface indexing memory handling transaction scheduler locking fig 

comet decomposition set components concurrency control mechanisms 
furthermore nodes require critical data logged warning errors require backups startup shutdown nodes ram main memory require non volatile backup facilities database 
narrow sense application area goal enable development different comet configurations suit needs node respect memory consumption concurrency control recovery different scheduling techniques transaction storage models 
sections show reached goal applying accord design development comet system 
comet components accord design method section iii performed decomposition comet set components defined functions interfaces 
comet basic components see user interface component transaction scheduler component locking component indexing component recovery logging component memory handling component transaction manager component 
user interface component uic enables users access data database different applications require different ways accessing data system 
operations data database received uic 
main activities uic consist receiving parsing incoming requests application user 
uic takes incoming requests execution plans 
transaction scheduler component tsc provides mechanisms performing scheduling transactions coming system scheduling policy chosen 
comet designed support variety scheduling policies edf rm 
tsc charge maintaining list transactions system including scheduled transactions unscheduled active transactions transactions submitted execution 
hard real time applications real time embedded systems controlling vehicle typically require sophisticated transaction scheduling concurrency control system allows transaction access database time 
tsc flexible exchangeable part database architecture 
te aspects components real time system development run time resource demand temporal constraints portability comet aspects composition compatibility versioning flexibility application transaction real time scheduling concurrency control memory optimization synchronization security fig 

classification aspects embedded real time database system locking component lc deals locking data provides mechanisms lock manipulation maintains lock records database 
lc provides policy framework lock administration locks granted 
policy framework changed specific policy lc deals lock conflicts weaving concurrency control aspect see section 
indexing component ic deals indexing data 
indexing strategies vary depending real time application database integrated trees multi versioning suitable applications large number read transactions 
additionally possible customize indexing strategy depending number transactions active system indexing algorithm needed 
recovery logging component rlc charge recovery logging data database 
comet stores data main memory need different recovery logging techniques depending type storage non volatile eeprom flash 
memory handling component mhc manages access data physical storage 
example time tuple added deleted mhc invoked allocate release memory 
generally reads writes memory comet involve mhc 
transaction manager component tmc coordinates activities components system respect transaction execution 
example tmc manages execution transaction requesting lock unlock operations provided lc followed requests operations provided ic inserting updating data items 
comet aspects accord decomposing system set components defined interfaces decompose system set aspects 
decomposition comet aspects fully corresponds accord decomposition section iii types aspects run time composition application aspects 
comet real time database system refinement application aspects reflect real time database issues 
comet decomposition application aspects real time policy aspect refined include real time scheduling concurrency control policy aspects real time property aspect table crosscutting effects different application aspects comet components components application aspects transaction real time scheduling concurrency control memory optimization synchronization security uic tsc lc ic rlc mhc tmc accord replaced transaction model aspect database specific 
crosscutting effects application aspects comet components shown table note application aspects crosscut depend application aspects 
primarily focus crosscutting effects application aspects different components 
details dependencies inter relationships aspects refer interested readers 
seen table identified application aspects crosscut component 
example concurrency control cc aspect crosscuts components tsc lc tmc manner 
tmc responsible invoking lc obtain release locks 
way lc invoked tmc depends cc policy enforced database needs adjusted separately type cc policy type cc aspect 
furthermore way deal lock conflicts enforced lc 
lc modified cc aspect facilitate lock resolution policy prescribed cc policy cc aspect 
scheduling cc tightly coupled sense cc polices typically require information transactions system maintained tsc means tsc modified cc aspect provide adequate support chosen cc policy 
application aspects vary depending particular application real time system particular attention identify application aspects real time system 
comet rtcom components aspects comet implemented rtcom discussed section iv 
functional part components implemented application aspects 
illustrate process benefits drawbacks example component lc application aspect cc aspect 
lc performs functionality assigning locks requesting transactions maintaining lock table journal embedded computing february functional part policy mechanisms run time part wcet aspect policy operation name uses ms mechanisms mechanism name wcet ms 
fig 

locking component concurrency control aspect changes uses aspect lc operands op apply specific cc policy resolve lock conflict hp pl op priority priority abort block pointcut lc operands op call void lc operands args op pointcut lc operands op call void lc operands args op advice op void lc operands op write lock held conflict needs resolved applying cc policy op advice op void lc operands op write read lock held conflict needs resolved applying cc policy op locking component concurrency control aspect records locks obtained transactions system 
seen table lc crosscut application aspects 
application aspect influences policy changes behavior lc cc aspect defines way lock conflicts handled system 
enable lc reuse code largest possible extent lc implemented policy framework lock conflicts ignored locks granted transactions 
policy framework modified weaving cc aspects define ways handling lock conflicts 
different cc policies real time database systems exist mechanisms lc compatible existing cc algorithms 
lc contains mechanisms see left part maintaining table locks held transactions system 
policy part consists operations performed lock records transactions holding requesting locks 
operations lc implemented underlying lc mechanisms 
mechanisms provided lc cc aspects implementing class pessimistic locking protocols hp pl 
large class optimistic protocols implemented locking mechanisms mechanisms provided lc cc aspects implementing optimistic protocols occ ti occ apr 
right part represents specification real time cc aspect lines applied class pessimistic locking cc protocols 
chose give specific details hp pl protocol commonly main memory database systems known pessimistic cc protocol 
cc aspect pointcuts advices execute pointcut reached 
defined rtcom pointcut model pointcuts refer operations lines 
pointcut intercepts call function read lock transaction records lock table 
similarly second pointcut intercepts call function gives write lock transaction records lock table 
granting read write lock advices lines check lock conflict 
conflict exists advices deal calling local aspect function lines resolution conflict done implementing specific cc policy 
function called advices considered part body advice equivalent place code function advice separately 
furthermore traverses list transactions holding lock underlying mechanisms lc 
advices implemented mechanisms lc traverse lock table lines list transactions holding lock function 
far shown cc aspect affects policy lc cc aspect crosscuts components te aspects components real time system development see table 
example cc aspect implementing pessimistic hp pl protocol see aspect uses information transaction priority lines maintained tsc crosscutting tsc 
optimistic protocols occ ti require additional pointcuts defined tmc protocol compared pessimistic protocols assumes execution transactions phases read validate write 
additionally depending cc policy implemented number pointcuts advices varies 
example cc policies optimistic policies require additional data structures initialized 
cases additional pointcut added aspect intercept call initialize lc 
advice initialize necessary data structures cc aspect data structures lc initialized 
wrap give benefits drawbacks applying accord development comet platform 
example lc cc aspect see section draw 
benefits applying accord development comet platform context example lc cc aspect 
clean separation concurrency control aspect crosscuts lc code enabled allowing high code reusability component mechanisms cc aspects 
efficient tailoring component system fit specific requirement case specific cc policy weaving cc aspect lc changes policy component changing component code leaving configuration comet unchanged 
having lc functionality encapsulated component cc encapsulated application aspect enables reconfiguring comet support transaction execution excluding lc completely non locking cc protocol needed 
drawbacks experienced applying accord realtime system development 
great number components aspects available system composition result explosion possible combinations components aspects 
common problem software systems components extensive research done identifying defining composition rules components 
coarse granularity rtcom may result nonnegligible component code overhead due large number mechanisms implemented component order support weaving application aspects 
restricting number mechanisms component policy framework initially adding mechanisms component demand required application application aspect way dealing code overhead 
trade achieving flexibility components tractable combinations aspects components optimization component infrastructure number mechanisms particular application 
vi 
related section address research area component real time database systems realtime database research projects aspects separate concerns 
focus existing component real time systems enforcement real time behavior 
systems component usually mapped task passive component binary component port object component 
analysis real time components solutions addresses problem temporal scopes component level task attributes wcet release time deadline 
accord rtcom model supports mapping component task takes broader view composition process allowing real time systems composed tasks components necessarily mapped task 
accord contrast approaches building real time component systems enables support multidimensional separation concerns allows integration aspects component code 
vest uses aspect oriented paradigm provide component model enables weaving application aspects component code focuses composition aspects 
area database systems aspect oriented databases aod initiative aims bringing notion separation concerns databases 
focus initiative providing non real time database limited configurability aspects components 
best knowledge kids research project focusing construction configurable database composed components database subsystems object management transaction management 
commercial component databases introduce limited customization database servers allowing components managing non standard data types data modules plugged fully functional database system 
somewhat different approach microsoft universal data access architecture components data providers wrap data sources enabling translation local data formats different data stores common format 
real time point view component database approaches discussed enforce real time behavior aspects separate concerns system 
existing real time design methods focus task structuring different views system note accord framework restrictive allows flexible augmentation mechanisms component 
journal embedded computing february temporal structural moderate emphasis information hiding 
analysis real time system design missing early design approaches highlighted important real time system development 
furthermore configuration guidelines tools system decomposition configuration essential part design methods real time systems far enforced existing real time design methods 
rt uml example infrastructure provides configuration tools form visual language 
note rt uml considered design method essentially provides syntax semantics real time system design powerful expressiveness design method means specifying real time software components 
contrast real time design methods modern software engineering design methods primarily focus component model strong information hiding interfaces means component communication 
notion separation concerns considered fundamental software engineering captures aspects software system early system design 
observed gap design approaches different communities real time community focused primarily real time issues exploiting modularity software extent software engineering community done 
accord helps bridging gap provides support aspects aspect weaving code components efficient component system tailoring better reusability flexibility realtime software issues fully addressed existing real time design approaches 
vii 
summary years key research challenges software engineering research community enabling configuration systems reuse software composing systems components component library 
research focuses applying aspect oriented componentbased software development real time system development introducing novel concept aspectual component real time system development accord 
accord elements applied development real time database system called comet 
accord introduces real time system development design method enables improved reuse configurability real time database systems combining basic ideas component aspect oriented communities real time concerns bridging gap real time systems embedded systems database systems software engineering ii real time component model called rtcom enables efficient development configurable real time systems iii new approach modeling real time policies aspects improving flexibility real time systems 
comet example shown applying accord impact real time system development providing efficient configuration real time systems improved reusability flexibility real time software modularization crosscutting concerns 
number research challenges left resolved 
consider issues crucial successful application accord focus 
successfully apply accord real time system development develop tool environment support accord development process including identification components aspects system requirements ii automated extraction information reflects run time behavior components aspects built rtcom iii automated extraction compositional needs components iv automated configuration realtime systems chosen set components aspects 
currently limited understanding effects performance memory consumption building systems components aspects 
investigation essential class performance constrained systems 
ideas notions introduced rtcom applicable wider spectrum application domains necessarily limited real time systems 
larger scale formalizing model help generalizing different application domains 
smaller scale need identify tradeoffs real time component model respect mechanisms component enable aspect weaving 
acknowledgments authors dr comments discussions formalization realtime component model 
financially supported swedish foundation strategic research ssf save project network center industrial information technology contract 
stankovic vest toolset constructing analyzing component operating systems embedded real time systems proceedings embedded software international workshop ser 
lecture notes computer science vol 

tahoe city ca usa springer verlag october pp 

szyperski component software object oriented programming 
addison wesley 
kiczales lamping mendhekar maeda lopes 
loingtier irwin aspect oriented programming proceedings ecoop ser 
lecture notes computer science vol 

springer verlag pp 

ossher kiczales eds proceedings st international conference aspect oriented software development 
acm press 
griswold aksit eds proceedings nd international conference aspect oriented software development 
acm press 
bosch design software architectures 
acm press collaboration addison wesley 
larsson case study demands componentbased development proceedings th international conference software engineering 
limerick ireland acm june pp 

te aspects components real time system development larsson state practice component software engineering course proceedings rd international workshop component software engineering 
ieee computer society january 
applying cases requirements validation component real time software proceedings nd ieee international symposium object oriented real time distributed computing 
saint malo france ieee computer society press may pp 

microsoft component object model specification available www microsoft com com resources asp february 
architecture reactive systems active real time database standardized components proceedings international database engineering application symposium ideas 
montreal canada ieee computer society press august pp 

omg common object request broker architecture specification omg formal documentation formal february available ftp ftp omg org pub docs formal pdf 
dittrich component database systems 
morgan kaufmann publishers ch 
component database systems foundations overview 
stankovic humphrey survey configurable component operating systems embedded applications ieee micro vol 
pp 
may june 
meyer component development buzz spark ieee computer vol 
pp 
july guest editors 
kiczales feeley improve modularity path specific customization operating system code proceedings joint european software engineering conference esec th acm sigsoft international symposium foundations software engineering fse 
gal schr der aspect oriented extension proceedings th international conference technology object oriented languages systems tools pacific 
sydney australia australian computer society february downloaded www org 
aspectj programming guide xerox september available aspectj org doc dist index html 
mann invasive software composition 
springer verlag december 
larsson eds building reliable component real time systems 
artech house publishers july 
te nystr hansson aspect level wcet analyzer tool automated wcet analysis real time software composed aspects components proceedings rd international workshop worst case execution time analysis wcet porto portugal july 
te nystr hansson worst case execution time analysis real time systems aspects components proceedings th ifac ifip ieee workshop real time programming 
poland elsevier may 
te nystr hansson integrating symbolic worst case execution time analysis aspect oriented software development oopsla workshop tools aspect oriented software development november 
liu layland scheduling algorithms multiprogramming hard real time traffic environment journal association computing machinery vol 
pp 
january 
nystr te hansson data management issues vehicle control systems case study proceedings th euromicro international conference real time systems vienna austria june 
lu ng tian tree tree main memory database index structure revisited proceedings th australian database conference pp 

rastogi seshadri bohannon silberschatz sudarshan improving predictability transaction execution times real time databases real time systems vol 
pp 
november kluwer academic publishers 
yu xiong composition reuse aspects proceedings workshop foundations aspect oriented languages boston usa march 
sipma formal model cross cutting modular transition systems proceedings workshop foundations aspect oriented languages boston usa march 
abbott garcia molina scheduling real time transactions performance evaluation acm transactions database systems vol 
pp 
september 
sha rajkumar son 
chang real time locking protocol ieee transactions computers vol 
pp 
september 
lee son dynamic adjustment serialization order real time database systems proceedings th ieee real time systems symposium december 
datta son bird hand worth birds bush 
limitations priority conflict resolution firm real time database systems ieee transactions computers vol 
pp 
may 
bass long robert technical concepts component software engineering software engineering institute carnegie mellon university tech 
rep cmu sei tr 
lindgren system development real time components proceedings ecoop workshop pervasive component systems france june 
stewart designing software components real time applications proceedings embedded system conference san jose ca september class 
stankovic zhu lu yu humphrey ellis vest aspect composition tool real time systems proceedings th real time applications symposium 
toronto canada ieee computer society press may 
rashid object oriented aspectoriented databases proceedings dexa ser 
lecture notes computer science vol 

springer verlag pp 

scherrer dittrich kids construction database management systems reuse department computer science university zurich tech 
rep ifi september 
data oracle extensibility architecture oracle technical white 
oracle 
redwood ca february 
developing modules informix universal server informix technology 
informix march available www informix com 
universal data access ole db ole db technical materials 
ole db white papers april available www microsoft com data htm 
software design method real time systems communications acm vol 
pp 
september 
software design method ada real time systems proceedings th washington ada symposium ada 
mclean virginia united states acm press pp 

kopetz sch tz design real time systems specification implementation verification software engineering journal vol 
pp 

burns wellings hrt hood structured design method hard real time ada systems ser 
real time safety critical systems 
elsevier vol 

douglass real time uml developing efficient objects embedded systems 
addison wesley 
jonsson specification implementation deployment components communications acm vol 
pp 
october 
dogac distributed object computing platform communications acm vol 
pp 

zsu yao component database systems ser 
data management systems 
morgan kaufmann publishers ch 
building component database systems corba 
aksit bosch van der bergmans real time specification inheritance anomalies real time filters proceedings ecoop ser 
lecture notes computer science vol 

springer verlag pp 

journal embedded computing february te received sc 
degree electrical engineering university bosnia licentiate degree computer science link ping university sweden 
currently ph student department computer science link ping university sweden 
current research interests include software engineering methods composition techniques tools component real time embedded systems 
dag nystr received sc 
computer engineering licentiate degree university sweden 
currently employed ph student department computer science engineering university sweden 
current research interest mainly data management vehicular control systems 
rgen hansson received sc 
sc 
degree university sk vde sweden respectively 
received ph degree link ping university sweden 
assistant professor department computer science link ping university 
authored authored papers edited books areas 
research focused techniques ensuring robustness timeliness complex real time applications prone transient overloads 
involved design construction system distributed active real time database system suitable large complex real time systems 
current research interests include techniques methodologies repositories functioning real time adaptive overload management component software architectures embedded real time systems 
dr hansson serves director national graduate school computer science sweden 
dr hansson served program general chair international workshop active real time database systems 
christer professor computer engineering university 
dean faculty science technology university 
founding members department computer science engineering 
previously working manager technology abb automation technology products robotics 
worked consultant particular automotive industry 
research interests design complex real time systems system software engineering realtime systems 
christer interested technology transfer academia industry manifested successful transfers automotive industry 
christer instrumental forming dynamic innovation system granted 
christer numerous courses real time system industry sweden europe 
received ph royal institute technology kth stockholm kth professor university 
year awarded best teacher university 
