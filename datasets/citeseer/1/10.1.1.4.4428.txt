local reasoning copying garbage collector lars birkedal university copenhagen birkedal itu dk noah smith university copenhagen noah itu dk john reynolds carnegie mellon university john reynolds cs cmu edu programming language model logic appropriate implementing reasoning memory management system 
state meant correctness copying garbage collector employ variant novel separation logics formally specify partial correctness cheney copying garbage collector :10.1.1.11.5322
prove implementation cheney algorithm meets specification logic auxiliary variables 
categories subject descriptors logics meanings programs specifying verifying reasoning programs assertions logics programs specification techniques general terms theory verification keywords separation logic copying garbage collector local reasoning reasoning formally low level imperative programs manipulate data structures involving pointers proven difficult mainly due lack reasoning principles adequate simple time 
reynolds hearn suggested separation logic tool reasoning programs involving pointers see survey historical remarks 
dissertation yang showed separation logic promising direction giving elegant proof non trivial waite graph marking algorithm 
key features making separation logic promising tool permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
popl january venice italy copyright acm supports local reasoning specifying reasoning program fragments involving pointers may restrict attention footprint programs just part memory program fragments read write 
aim explore idea local reasoning realization separation logic 
prove correctness cheney copying garbage collector local reasoning extension separation logic 
reasons chosen focus cheney algorithm algorithm involves imperative manipulations data particular updates existing data structure waite algorithm moves data 
simultaneously treats data set records linked pointers array records 
cheney algorithm copies kind data including cyclic data structures best knowledge correctness proof done local reasoning programs copying cyclic data structures 
variants algorithm practice runtime systems compilers functional programming languages toy example 
best knowledge formal correctness proof cheney algorithm literature 
reasons proving correctness garbage collector considered key challenge long time 
nettles gave informal proof correctness copying garbage collector expressed wish formal verification 
motivating factors call attention 
analysis answers question literature paves way important far reach local reasoning separation logic garbage collected language analyzed 
underlying garbage collector presumed operational semantics language inasmuch partial pruning renaming relocation current state allowed time execution program 
mentioned pruning renaming done proven done correctly 
expresses desirability proof provide 
analyses distinct levels level user language runtime system garbage collector level runtime system providing operations user language memory allocation garbage collection 
believe analyses pave way investigation correctness combinations user level programs runtime systems goal far unfeasible 
preliminary ideas direction sec 

additional second motivating factor analysis garbage collection connection foundational proof carrying code typed assembly language 
settings memory allocation deallocation construct part instruction set memory management system implicitly assumed 
believe correctness proof contribute mimicking realistic setting machine assembly languages 
contributions methodology sec 
storage model syntax semantics assertions 
storage model concrete close real machines treats locations multiples 
assumed data locations encoded 
similar real implementations runtime systems compilers 
simplicity assume heaps consist cons cells aligned component location divisible pointers cons cells multiples 
usual separation logic state consists stack heap stack finite map variables values heap finite map locations integers 
new feature values include finite sets relations pointers integers give semantics assertions auxiliary variables 
assertion language sec 
extension separation logic new assertion forms finite sets relations 
new forms crucially express part specification cheney algorithm particular existence isomorphism pointers old cells pointers copies old cells 
believe methodology sets relations widely specify prove correct programs involving shared cyclic structures 
somewhat similar approach richard specify verify algorithm copying directed acyclic graphs 
extended iterated separating conjunction separation logic arbitrary finite sets 
assertion holds state denotes finite set 
holds see fig 
precise definition 
illustrated sec 
specify program dividing locations manipulates disjoint sets iterated separating conjunction expressions finite sets relations express particular properties set locations 
argue weakness separation logic extend mentioned new constructs 
extensions expected young logic encounters subtle algorithm 
real question resulting specification natural formalization programmer understanding algorithm 
sec 
define syntax semantics programming language implementing garbage collector 
simple imperative programming language constructs heap lookup heap update constructs allocating heap cells 
associated program logic sec 

program logic standard new rules regarding sets relations 
include frame rule separation logic local reasoning possible explained sec 

sec 
express means garbage collector correct 
definitions analysis referred involve pruning renaming program states 
cheney algorithm specification implementation thereof sec 
implementation included appendix informal analysis algorithm derive formal specification invariant 
pointers manipulated algorithm naturally divided disjoint sets natural method sets relations iterated separating conjunction mentioned 
sets relations crucial way record initial contents heap garbage collection 
possible relate final heap garbage collection initial heap prove final heap garbage collected version initial heap 
emphasize point 
cheney algorithm assumes contiguous semi heaps equal size old new works copying live data old new 
reasons popularity cheney algorithm variants thereof runs time proportional live data touches dead cells 
fact reflected directly specification algorithm refers live part old 
spirit local reasoning direct correspondence intuitive understanding algorithm formal specification 
sec 
prove implementation cheney garbage collection algorithm correct 
proof proceeds showing proposed invariant previous section invariant showing invariant suffices conclude correctness 
key ideas proofs particular explain local reasoning allows reason locally different fragments algorithm illustrating power frame rule 
full proofs details companion technical report 
sec 
discuss related discussed conclude suggestions sec 

syntax semantics section basic storage model syntax semantics expressions assertions 
basis system standard separation logic pointer arithmetic extend expression assertion languages finite sets relations new basic assertions extension iterated separating conjunction arbitrary finite sets 
storage model assume countably infinite sets var int var fs var frp var fri var path variables var disjoint union sets 
metavariables 
range var assume var types types int fs frp fri path indicating type variable 
set locations set natural numbers divisible set pointers set natural numbers divisible 
formally define variables 
var pointers ptr def locations loc def finite sets fs def ptr pointer rel ns frp def ptr ptr integer rel ns fri def ptr paths path def head tail values val def fs frp fri path heaps def loc stacks def var val var 
states def int fs fs fri fri path path frp frp 
expressions define syntax semantics expressions types int fs frp fri path 
expressions type int just syntax semantics standard 
expressions remaining types just semantics syntax evident presentation semantics 
expressions type int defined grammar int mod fs 
semantics fs number elements finite set denoted fs see 
order avoid introducing explicit type boolean values standard encoding truth values denotes false integers denote true 
superscript indicates type meant indicate type variables superscript indicate type composite expressions 
times omit superscripts variables causes confusion 
range expressions type fs 
semantics expression type fs finite set pointers 
operator adds element set pointer removes pointer set 
itv set pointers half open interval fs fs ptr fs int ptr fs int itv int int ptr fs fs formally define semantics expressions form fs fs 
note may range expressions type frp 
semantics expression type frp finite relation pointers 
frp frp frp int int ptr ptr frp frp 
range expressions type path 
semantics expressions type path straightforward denotation expression equal conclude semantics expressions give semantics expressions type fri 
range expressions 
operator model structure preserving property garbage collector inasmuch extends relation identity non pointers composing relation cf 
definition 
fri fri frp ptr 
frp fri ptr ptr 
denote syntactic equality expressions write denote stacks assertions assertion language extension separation logic new assertion forms finite sets relations 
just semantics assertions syntax evident presentation semantics 
range assertions 
set fv free variables assertion defined usual note bound substitution expression variable assertion defined standard way 
write assertion emphasize variable may occur free formal semantics assertions judgement form intended meaning assertion holds state require fv dom 
semantics fig 
ranges boolean expressions ranges types 
fig 
notation indicate dom dom 
call heaps disjoint define combined heap dom dom brief explanation clauses fig 
appropriate 
assertion forms emp implies frp fri emp dom 
heaps ptr ptr ptr 
tfun frp 
tfun fri 
iso 

eval path head ptr 
eval tail ptr 
eval reachable ptr path 
eval 
emp 

semantics assertions taken separation logic 
emp states heap empty states precisely location domain heap 
means hold disjoint current heap means heaps disjoint current heap holds combination satisfy assertions eval reachable concern evaluation paths says pointer range relation denoted set denoted iterated separating conjunction 
informally 
split disjoint heaps 

note semantics classical standard order logic fragment 
standard shorthand notations def def def def int def int int notations sense locations shall denotes pointer 
shall write 
introduce special classes assertions 
definitions taken 
call assertion pure validity depend heap stacks heaps call assertion monotone stacks heaps imply indicates set theoretic inclusion graphs 
literature monotone assertions called intuitionistic 

pure assertion distributes iff assertions pure assertions monotone 
syntactically assertion pure contain occurrences emp shorthand notation 
definition 
call assertion valid states fv dom denote semantic validity implies states may easily verify number useful assertion schemas valid interesting ones omit obvious assertions finite sets relations standard rules classical logic simple arithmetic 
rules iterated separating conjunction 
emp 
give rules involving special operator relations 
ptr frp 
ptr ptr tfun ptr 
ptr tfun tfun rules exploit heaps single valued 
fv pure monotone implies lemmas applied reason assertions involving lemma 
suppose valid 
means infer suffices show valid 
way implication 
lemma 
pure assertion valid valid 
induction means order infer suffices show example rule derived rules get monotonicity 
monotone assertion fv 
programming language section define syntax semantics programming language implementation garbage collector 
assertion language defined give program logic language 
syntax semantics definition 
syntax programming language grammar skip int fs frp int od fi note constructs allocating deallocating locations heap 
straightforward add constructs language need 
specification implementation cheney algorithm simply assume domain heap contains necessary locations 
operational semantics relation configurations 
configurations form called terminal form called non terminal 
definition 
relation configurations defined number inference rules completely standard 
just rules assignment heap lookup heap update dom int dom semantics easily seen deterministic 
definition 
say stuck configuration goes wrong non terminal configuration stuck 
terminates normally terminal configuration published definitions programming language separation logic special configuration called abort fault concept stuck able avoid complication restricted programming language deterministic sublanguage 
standard define mod command set variables modified command occur left hand side forms int 
set fv command just set variables occur program logic definition 
assertions command 
partial correctness specification said hold states fv dom implies go wrong refer precondition specification postcondition 
set proof rules sound respect def 

rules regarding constructs simple language standard rules regarding heap 
rules heap lookup 
fv fv fv fv rule heap update 
frame rule mod fv 
frame rule local reasoning possible suppose assertion describes state execute footprint locations read written described local specification involving footprint infer global specification involves locations footprint simpler state reason local specifications frame rule says adequate 
derived rule pure assertions pure mod fv 
example useful derived rule note pure assertions move frame rule pure mod fv follows standard rule consequence 
expected soundness result 
theorem 
specification derivable rules standard rules hoare logic holds 
example rule lookup derived frame rule standard rules hoare logic 
fv distinct variables expressing garbage collection section define means state garbage collected version state 
formulation builds analysis involves pruning renaming states 
basic requirement heaps states isomorphic 
simplicity assume heaps consist cons cells 
definition 
heaps 
call heap isomorphic bijection dom dom pointers dom 
extension identity numbers pointers 
refer heap isomorphism 
course necessary heap isomorphism consisting live data data reachable root set 
simplicity assume root cell 
definition 
state root dom 
pointer reachable pointer heap reachable pointer called reachable state reachable root prune restricted pointers reachable definition 
states 
heap isomorphism root root call state isomorphism 
formal notion garbage collection follows definition 
states 
say garbage collected version exists state isomorphism prune prune 
definition 
command gc correct garbage collector gc implies garbage collected version cheney algorithm implement reason cheney algorithm 
implementation algorithm associated memory allocator appendix assumes semi heaps old itv new itv equal size 
memory allocator attempts allocate cons cell old space available old garbage collector copies cells old reachable root new allocation resumes new 
garbage collector delimited comments code appendix refer gc notice algorithm aware locations live cells locations reachable root 
spirit local reasoning specification involve reachable pointers old called alive remaining unreachable part old 
notice set forw auxiliary variable set implementation sense 
assignments variables necessary program ease job proving properties program 
chosen existentially quantify variables omit program reasoning clearer program modifies auxiliary variables explicitly 
root scan free fin busy forw free 
state execution precondition execution gc assume assertion holds 
ptr set ptr alive new alive new reachable head tail alive root tfun head alive tfun tail alive tail alive head alive root alive alive 

head 
tail new informally assertion things expresses alive set pointers reachable root head tail relations recording initial contents reachable cells seen iterated separating conjunction set alive 
invariant exhibit invariant loop consider fig 
snapshot state execution 
reachable cells old part heap bold horizontal line shown 
cells alive modified stage component updated forwarding pointers appearance 
original contents components indicated dotted lines parenthesized numbers 
pointers alive naturally divide sets pointers alive point cells modified algorithm 
forw pointers alive point cells component overwritten pointer new 
algorithm proceeds scanning cells scan free pointers scan points cell scanned 
cell scanned contains non pointer scan pointer incremented cell scanned contains pointer cell pointed copied forwarding pointer placed original cell cell scanned contains pointer forw cell pointed copied simply update scanned cell 
auxiliary variables forw keep track forwarding pointers record live cells copied new 
cell copied old new corresponding pointer moved forw updated 
pointers new divided sets fin itv set scan pointers new scanned 
modified algorithm 
itv scan free pointers new scanned 
point original contents cells pointed pointers alive 
free itv free pointers new available allocation 
sets illustrated fig 

note fin free intervals case forw general 
observe correspondence pointers forw busy fin itv set free 
bijection turn heap isomorphism looking 
invariant algorithm pure impure part describes heap 
pure part pure iso forw busy alive forw reachable head tail alive root alive new head alive tail alive tfun head alive tfun tail alive alive new root forw scan free ptr free ptr scan ptr set ptr note particular conjunct iso forw busy expressing bijection conjunct reachable head tail alive root expressing alive set pointers reachable head tail root set cells live initially 
rest pure simply records basic facts relationship various sets pointers 
describe impure part invariant partitioning pointers sets 
cells pointed pointers modified algorithm described head tail define 

head 
tail 
cells pointed pointer forw forwarding pointer component 
recalling records forwarding pointers define forw forw 


cell pointed pointer contains original contents cell pointed pointer forw 
pointer recorded inverse define 

head 
tail 
cells fin scanned 
case distinction pointers non pointers scanning captured oper tail tail head head 
situation pointer fin ator 
define fin fin 

head 
tail 
understand fin helpful consider fig 
functional notation functional relations 
pointer fin address rightmost bottommost cell 
scanned held original contents cell pointed pointer alive 
cell copied component overwritten forwarding pointer recorded original contents cell pointed recorded head tail letting denote address rightmost uppermost cell fig 
head head cell pointed scanned component 
scanning component cell pointed copy cell pointed necessary update component scanning point address copy cell 
denoting address copy definition head 
pointers free need know domain heap allow safely copy cells free 
define free free 

summing invariant algorithm pure forw fin free 
proofs section prove implementation cheney garbage collection algorithm correct 
key ideas proof refer companion technical report details 
proof proceeds stages 
show sec 
invariant invariant show algorithm correct sense definition 
need consider iterated separating conjunction sets section element 
example write forw assertion forw 


invariant prove specifications init scan free body init code loop body body loop 
proof specification similar part proof second specification omit 
observe body consists similar parts delimited comments code 
show specification similar 
cell pointed scan mixed state component finished second scanned 
specification scan free pure forw fin free scan 
scan head scan 
scan tail scan 
observe branches 
proof specification corresponding interesting branch delimited comments code cell copied old new 
prove specification scan free scan ptr new show precondition implies assertion 
prove local specification heap manipulations apply frame rule infer required specification 
illustrates power frame rule 
lemma 
assertion scan free scan ptr new free valid 
lemma derivation step uses scan free scan ptr new scan free free pure forw fin scan free free 
scan tail scan 
head 
tail scan free straightforward show local specification rules heap lookup heap update rule pure root scan free 
footprint root free scan 
footprint assertions frame rule 

head 
tail scan free free free free scan free free scan free free head tail write code fragment 
notice specification mentions footprint locations dereferenced updated 
illustrated fig 
footprint shown dotted circles 
executing heap depicted fig 
resulting heap depicted fig 
footprint shown 
execution resulting heap depicted fig 

continue derivation 
pure forw fin scan free free 
scan tail scan 
head 
tail scan free pure forw fin scan free free 
scan tail scan free scan free free head tail forw forw free free free assertion similar state reasons space 
specification follows derived frame rule 
proof second specification uses standard rules assignment implication uses lemma 
apply lemma show implications see preconditions lemma include free forw forw 

free free forw 

free free forw forw 

forw forw 

forw implication uses rule pure assertions 
third uses rule 
remaining implications needed conclude lemma technical report 
completes outline formal proof specification scan free body 
sufficiency invariant show invariant suffices prove implementation correct 
lemma expresses algorithm moves reachable cells forw 
lemma 
scan free ptr path eval head tail root forw lemma proved obvious induction principle paths 
lemma expresses completion algorithm forw equal alive 
lemma 
scan free forw alive 
easily shown lemma 
formal proof theorem bit involved 
informally expresses exit loop pointers alive scanned satisfy condition fig 
satisfies 
theorem 
scan free alive head 
proof uses lemma 
prove main theorem 
theorem 
state 
gc garbage collected version 
proof sketch argue alive relation denoted execution 
satisfies condition theorem 
head head recorded original contents models construction precisely means 
specification mention unreachable part old cells copied program implementation copies cells reachable root 
related proposals types manage problem reasoning programs manipulate imperative data structures 
idea welltyped programs go wrong aimed giving proofs correctness 
capabilities traditional region calculus extended annotation capability region gives criteria decide safe deallocate region 
setting alias types static notion constraint describe shape heap decide safe execute program 
hierarchical storage ideas bi region calculi give type system structure locations 
petersen propose type theory ordered linear logic foundation defining data laid memory 
type theory builds concrete allocation model provided cheney copying garbage collector 
attempt formal correctness proof garbage collector published problem selected challenging hopefully instructive 
problems 
proof informal merely gives idea obtain formal proof 
informal proofs published 
fact mechanically verifiable proof need kinds trivial invariants justify informal approach 
explored great detail needed formal proof demonstrated proofs fallacious 
gave correctness proof version mark sweep collector local reasoning 
type preserving garbage collector appel wang transform typed programs form call function acts garbage collector program 
function designed typed target language safe execute 
approach appel wang guarantees safety correctness garbage collector treatment cyclic data structures user language create cyclic data structures 
shao combine ideas region calculi alias types typed regions propose programming language type system expressive type garbage collector type preserving generational handles cyclic data structures 
lot proof carrying code 
basic idea code producer submitting proof safety program course transferred low level programming languages separation logic 
nipkow research group munich developed framework formally verifying programs traditional hoare logic arrays extension separation logic underway 
allow verify correctness proof mechanically ship proof proofs programs garbage collector 
specified proved correct cheney copying garbage collector local reasoning extension separation logic 
specification proof manageable local reasoning conclude idea local reasoning scales challenging algorithms 
extended separation logic sets relations generalized iterated separating conjunction shown features specify naturally prove correct algorithm involving movement cyclic data structures 
believe methods wider include experimentation subtle algorithms analyzed methods applicable cheney algorithm 
goal prove simple variant cheney collector natural ask approach scales complex systems collected data complex types collector different type copy 
proof collector believe extension methodology serve basis proofs algorithms 
example complex type system definition heap isomorphism needs refined induce new notions logic 
includes studying specify prove correct combinations user level programs runtime systems mentioned 
foundational proof carrying code appel suggests compiling high level languages typed assembly language 
offers 
suggest compiling types high level languages garbage insensitive predicates sense memory allocator garbage collector implementation malloc operation tal 
nature garbage insensitive predicates gc predicates correct garbage collector gc predicates resulting type safety guarantees preserved garbage collector desired 
acknowledgments authors wish peter hearn richard cristiano henning niss martin elsman insightful discussions 
lars birkedal noah smith research partially supported danish natural science research council danish technical research council 
john reynolds research partially supported fellowship queen mary university london national science foundation ccr basic research computer science centre danish national research foundation 
implementation cheney algorithm alloc free free free free free free set set scan free set scan free fi garbage collection starts forw alive root root free free root free forw forw root root root free free free scan free begins scan mod mod set scan begins free free free scan free forw forw free free free ends fi skip fi ends begins scan mod mod set scan free free free scan free forw forw free free free fi skip fi ends scan scan od garbage collection ends root set alloc fi ahmed jia walker 
reasoning hierarchical storage 
proc 
lics 
appel 
foundational proof carrying code 
proc 
lics 
ben ari 
algorithms fly garbage collection 
acm transactions principles programming languages systems 
birkedal smith reynolds 
correctness garbage collector local reasoning 
technical report tr university copen hagen copenhagen denmark july 
available www itu dk english research publications 

correctness local reasoning 
private communication mar 

local reasoning separation aliasing 
submitted space workshop 
available www cs mdx ac uk 
hearn 
program logic equivalence presence garbage collection 
theoretical computer science 
cheney 
nonrecursive list compacting algorithm 
comm 
acm november 
crary walker morrisett 
typed memory management calculus capabilities 
proc 
popl pages 
dijkstra lamport martin scholten 
fly garbage collection exercise cooperation 
comm 
acm 
hoare 
axiomatic approach computer programming 
comm 
acm 
mehta nipkow 
proving pointer programs higherorder logic 
automated deduction cade 
shao 
typed regions 
technical report yaleu dcs tr dept computer science yale university new haven ct 
morrisett walker crary glew 
system typed assembly language 
acm transactions programming languages systems 
necula 
proof carrying code 
proc 
popl pages 
necula lee 
safe kernel extensions runtime checking 
osdi pages berkeley ca usa 
nettles 
larch specification copying garbage collection 
technical report cmu cs carnegie mellon university pittsburgh pa dec 
hearn reynolds yang 
local reasoning programs alter data structures 
csl berlin 
owicki gries 
axiomatic proof technique parallel programs 
acta informatica 
petersen harper crary pfenning 
type theory memory allocation data layout 
popl january 

incremental garbage collection algorithm systems 
distributed computing 
pym 
semantics proof theory logic bunched implications volume applied logics series 
kluwer 
reynolds 
separation logic logic shared mutable data structures 
proc 
lics pages 

mechanically verified incremental garbage collector 
formal aspects computing 
smith walker morrisett 
alias types 
european symposium programming march 
tofte 
talpin 
implementing call value lambda calculus stack regions 
proc 
popl pages 
wang appel 
type preserving garbage collectors 
proc 
popl pages 
yang 
local reasoning stateful programs 
phd thesis university illinois urbana champaign 
