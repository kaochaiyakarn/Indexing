scalable internet routing topology independent node identities bryan ford massachusetts institute technology october unmanaged internet protocol uip fully selforganizing network layer protocol implements scalable identity routing 
contrast routing protocols depend scalability centralized hierarchical address management uip nodes flat namespace cryptographic node identifiers 
node identities created locally demand remain stable network changes 
name services uip routing protocol conventional address networks disjoint discontinuous address domains providing connectivity pair participating nodes underlying network provides direct connectivity 
uip routing protocol works networks arbitrary topologies global traffic patterns requires log storage node routing state enabling small ubiquitous edge devices act ad hoc routers 
protocol rapidly recovers network partitions bringing node date multicast chain reaction log depth 
simulation results indicate uip finds routes average length best possible route 
technical report describes progress contain complete final polished results 
research conducted part iris project project iris net supported national science foundation cooperative agreement 
ani 
routing protocols flat node namespaces traditionally limited scalability node storage node routing traffic overheads increase linearly size network 
scalability today internet millions soon billions nodes currently possible address routing topology information embedded structured node addresses 
classless inter domain routing cidr enables ip routers store detailed routing information nodes subnets local administrative domain aggregating routing information distant networks larger address blocks 
scalability cidr depends careful assignment node addresses mirror structure network 
manual ip address assignment tedious technical dynamic assignment addresses unstable time nodes edge networks temporarily disconnected assignment services 
organizational resistance plagues ip address renumbering efforts host mobility multihoming violate hierarchical cidr model leading extensions demanding additional care feeding 
firewalls network address translators nats create discontinuous address domains making remote access peer peer communication difficult 
new networking technologies may require fundamentally different incompatible address architectures 
factors suggest single address routing protocol single centrally administered routing domain may provide connectivity pair nodes world want communicate 
uip scalable identity internetworking protocol designed fill connectivity gaps left protocols ip 
uip multiple address layer layer networks large today internetworking challenges layer internetwork nodes identifiers flat namespace hierarchical addresses 
uip nodes act self configuring routers enabling directly indirectly connected uip nodes communicate paths may cross number address domains 
motivating example joe average user bluetooth enabled phone laptop bluetooth support devices home network illustrated 
just moved working internet connection 
uip running devices joe bluetooth phone communicate laptop devices 
laptop acts self configuring router devices reachable home network joe having assign addresses manually 
joe eventually obtains internet connection deploys home nat turns located larger nat deployed cheap isp 
internet connection active joe home devices automatically merge global uip network access internet connected uip host 
friend jim home example joe bluetooth phone automatically discovers connects jim pc connected internet node runs uip 
joe phone control remotely access devices home exactly home 
configuration required joe home devices jim pc automatically conspire uip nodes internet build necessary forwarding paths 
joe runs ipv network firewall uip internet protocol architecture highly restrictive forwarding policy firewall permits uip traffic specific internal hosts installed software network administrator trusts 
joe fortunate trusted host likewise merges global uip network 
joe access home devices pc home access bluetooth phone location 
joe network administrator set firewall policy allow uip traffic joe machine joe doesn 
uip role internet uip sits top existing address network layer protocols ipv ipv operate directly link layer protocols ethernet bluetooth see 
upper level protocols applications uip way traditional address network layer protocols 
addresses upper level protocols applications name connect uip nodes cryptographic identifiers comparable moskowitz proposed host identities 
uip node identifiers relationship network topology nodes create identifiers central authorities node identifiers remain valid long desired node moves surrounding network topology changes 
focuses purely uip routing forwarding algorithms leaving aspects uip developed 
reason exposition protocol high level algorithmic nature 
properties uip node identifiers importance relatively uniformly distributed flat namespace 
key properties uip contrast conventional routing algorithms flat namespaces uip routing protocol log node storage update traffic requirements 
uip achieves scalability distributing routing information network self organizing structure adapted kademlia distributed hash table dht algorithm 
location independent naming services dhts uip assume underlying protocols provide connectivity nodes 
address routing protocols fail provide direct connectivity reason intermittent glitches network address translators incompatible address routing technologies uip routes discontinuities forwarding traffic uip nodes 
cost distributing routing information network scalability individual uip nodes rarely information determine shortest best possible route node 
effect uip implement distributed pairs shortest paths algorithm conventional protocols flat namespaces 
uip attempts moderate goal efficiently finding path exists usually finding reasonably short paths 
goal appropriate uip purpose uip find communication paths address protocols ip find 
general expect identity routing efficient routing protocols take advantage locality aggregation properties structured addresses 
uip intended replace address routing protocols complement 
protocols ip move data efficiently short hops comprising core internet infrastructure large managed networks uip needs route data long hops resolving discontinuities address domains bridging managed core networks ad hoc edge networks 
reason important uip find best possible route time important algorithm scalable robust fully self managing 
explore specific uip forwarding mechanisms routing protocol 
mechanism guarantees nodes operate log space node network topology 
forwarding mechanism allows uip find somewhat better routes uses log space typical networks may require space worst case network topologies 
forwarding mechanism simulations indicate uip consistently finds paths average length best possible path 
uip occasionally chooses paths longer best possible path bad paths rare 
road map rest organized follows 
section details routing protocol uip nodes organize find paths nodes section describes alternative mechanisms uip nodes forward data indirectly connected nodes 
section evaluates routing forwarding protocol demonstrates key properties simulations 
section summarizes related section concludes 
routing protocol section describes distributed lookup routing structure enables uip nodes locate communicate topology independent identities 
neighbors links node uip network maintains neighbor table node records information uip nodes actively communicating point time communicated 
nodes listed neighbor table node termed neighbors 
neighbor necessarily near geographic topological node identifier space presence neighbor relationship merely reflects ongoing pairwise communication 
neighbor relationships mandated design uip protocol described neighbor relationships initiated actions upper level protocols 
example request upper level protocol node send packet node effectively initiates new uip neighbor relationship neighbor relationships may turn ephemeral long term 
uip node neighbor table analogous table ipv ipv host maintain order keep track current path maximum transmission unit mtu vital information endpoints currently interest upper level protocols 
part entry node neighbor table node uip implementation maintains information needs send packets particular neighbor 
information describes link node forwarding virtual links neighbor 
link nodes may physical virtual 
physical link link connectivity provided directly underlying protocol 
example connected nodes internet successfully communicate public ip addresses ab physical link perspective uip layer communication path may reality involve hops ip layer hops link layer 
physical link available termed physical neighbors node stores ip address address information underlying protocols appropriate entry neighbor table 
virtual link contrast link nodes communicate forwarding packets intermediaries uip level 
describe nodes virtual neighbors 
mechanism packet forwarding contents neighbor table entries node virtual neighbors described section 
simply assume general principle holds 
existing physical virtual links ab bc endpoint common nodes construct new virtual link ac establishing uip level forwarding path uip nodes construct new virtual links recursively existing physical virtual links 
example virtual link ac builds physical links ab bc virtual link ad turn builds virtual link ac physical link cd 
virtual links set node nodes neighbor table virtual neighbors 
node nodes neighbors necessarily need know order virtual link ac 
constructing virtual links uip nodes construct new virtual links single basic mechanism represented build link procedure build link node target node node nw waypoint necessary build link nw assert nw neighbors assert nw neighbors try contact ip address mac address direct contact attempt succeeds build physical link build virtual link nw assert neighbors pseudocode build physical virtual link shown 
node build virtual link node waypoint node nw neighbor table nw neighbor table respectively 
node build link procedure construct link build link procedure attempts initiate direct connection underlying protocols network link layer address es may learned nw example node network interfaces different address domains publish ip addresses ieee mac addresses network interfaces uip nodes domains initiate direct connections don know exactly domain 
direct connection attempts succeeds physical neighbor virtual link necessary 
direct connection attempts fail succeed quickly constructs virtual link nw forwarding waypoint 
way build link procedure takes advantage underlying connectivity efficiency possible succeeds indirect connectivity available 
uip network structure virtual links provide basic forwarding mechanism uip nodes algorithm determine virtual links create order form communication path nodes 
purpose uip connected nodes network self organize distributed structure allows node locate build communication path resolving neighbor tables buckets node id space target node identifier bit time left right 
uip network structuring algorithm closely related peer peer distributed hash table dht algorithms pastry kademlia 
dhts uip uses self organizing structure look information ip mac address es node uip identifier basis constructing uip level forwarding paths nodes underlying protocols provide direct connectivity 
simplicity exposition assume node identifier node identifier unique identifiers generated bit hash function 
treat uip node identifiers opaque bit binary bit strings 
longest common prefix lcp nodes written lcp longest bit string prefix common respective uip identifiers 
proximity nodes prox length lcp number contiguous bits identifiers common starting left 
example nodes lcp proximity nodes empty lcp proximity zero 
nodes closer identifier space higher proximity 
node identifiers unique prox prox node divides neighbor table buckets illustrated places neighbors bucket prox corresponding neighbor proximity distance metric known xor metric important symmetry property node falls bucket node neighbor table falls bucket neighbor table 
symmetry facilitates establish build communication path node target node build path prox neighbor table prox assert find neighbor bucket find neighbor bucket request failed return failure node exist reachable 
build link assert neighbor return success working link pseudocode build path node ment pairwise relationships nodes allows nodes relationship benefit requests flowing direction 
order uip network fully functional network satisfy connectivity invariant 
node perpetually maintains active connection neighbor bucket long reachable node exists network fit bucket practice node attempts maintain active neighbors bucket times redundancy factor building communication paths connectivity invariant maintained uip network node communicate target node procedure outlined pseudocode 
node looks bucket prox neighbor table 
bucket empty exist reachable search fails 
bucket contains target node active neighbor search succeeds 
picks neighbor bucket proximity bits match identifier immediately bits opposite proximity 
node sends message requesting nearest neighbor node looks bucket neighbor table returns information node 
information returned includes uip identifier nodes known ip addresses ieee mac addresses underlying protocol addresses nodes 
node uses build link procedure establish connection direct physical link possible virtual link 
active neighbor falling bucket neighbor table closer proximity original node continues search iteratively resolving bit step building additional recursive virtual links needed finds desired node search fails 
search eventually succeeds active physical virtual neighbor communication proceed 
practice nodes improve robustness responsiveness build path procedure selecting set neighbor nodes iteration making find neighbor requests parallel way kademlia dht lookups 
parallelizing construction uip communication paths added benefit originating node having discovered alternate paths node 
originating node evaluate alternative paths suitable criteria choose best subsequent communication keep information stored away primary path fails 
endpoint nodes balance traffic load paths find reason believe paths sufficiently independent load balancing effective improving performance 
merge procedure build path procedure lookup procedure kademlia dht modified support construction indirect forwarding paths nodes communicate directly underlying protocols 
network construction maintenance uip requires robust algorithm kademlia dhts 
dhts generally assume underlying protocols provide full connectivity nodes nodes join leave network limited rate relatively independently 
discontinuous network topologies uip intended run merge node portion network reachable neighbor merge prox neighbor table full find neighbor bucket find neighbor bucket request succeeded build link find neighbor bucket find neighbor bucket request failed break prox assert build link pseudocode merge node network single broken link split network arbitrary points causing nodes partition perceive nodes partition disappeared en masse 
network split persists time nodes side re form separate networks merged networks re connected 
algorithm assumes underlying protocols provide means topologically near uip nodes discover establish physical neighbor relationships 
example uip nodes ethernet broadcasts ipv subnet broadcasts ipv neighbor discovery detect nearby neighbors automatically 
nodes contain hard coded ip addresses known uip nodes internet nodes working internet connections quickly merge public internet wide uip network 
user cases explicitly provide address information necessary establish contact relevant uip nodes 
new physical link established means node link performs merge procedure outlined merge network reachable node 
merge process works follows 
suppose node node neighbor falling bucket neighbor table 
initial identifier bits common neighbors buckets suitable corresponding buckets neighbor table 
node requests information neighbors buckets builds physical virtual link node 
assuming neighbor table satisfied connectivity invariant neighbor table buckets 
node asks neighbor bucket searching identifier network 
node proximity 
node builds link fills empty buckets neighbor table continues process neighbors proximity greater eventually reaches node proximity bucket contains neighbors 
means nodes network greater proximity satisfied connectivity invariant neighbor table respect portion network reachable merge notifications node merges node network merge procedure may nodes network ones contacted directly need learn neighbor tables satisfy connectivity invariant new larger network 
addition may just lone node joining network may member larger existing network reachable neighbor table previously split evolved independently network 
case nodes network may need learn nodes network vice versa connectivity invariant re established globally 
cause nodes update neighbor tables appropriately uip uses simple notification mechanism 
node contact reason new physical virtual neighbor nn bucket prox nn neighbor table full addition nn sends message existing neighbors notifying new node nn response notification message existing neighbors contacts nn build link nn likewise merges nn network merge 
process helps fill previously neighbor table buckets subsequently sends notifications neighbors 
chain reaction stops affected nodes cease finding new nodes fit buckets neighbor tables 
understand process consider initially separate uip networks red network consisting nodes 
green network consisting nodes 
say node satisfies red connectivity invariant bucket neighbor table contains red node red node exists fit bucket 
similarly say node satisfies green connectivity invariant buckets contains green node green node exists fit bucket 
assume green nodes initially satisfy green connectivity invariant green nodes satisfy red connectivity invariant initially connections red green networks 
similarly red nodes satisfy red connectivity invariant red nodes satisfy green connectivity invariant 
suppose physical link established nodes connecting networks 
response performs merge filling buckets neighbor table filled green nodes reachable likewise performs merge fill buckets nodes red network 
node effectively locates builds links nearest highest proximity neighbors green network likewise locates builds links nearest neighbors red network 
result merge process satisfies green connectivity invariant satisfies red connectivity invariant 
satisfied red green invariants respectively adding new neighbors node neighbor table un satisfy previously satisfied connectivity invariant satisfy global connectivity invariant covering red green nodes 
assuming node identifiers reasonably uniformly distributed high probability find new nodes opposite network fit previously buckets 
merge bucket prox may full far apart identifier space 
may nodes green network fall buckets event green network smaller red network 
similarly may nodes red network fall buckets red network smaller green network 
networks similar size certainly find new neighbors fit buckets 
rate discovery new neighbors falling buckets causes send merge notifications existing neighbors red green networks respectively supplying link opposite node hint nodes network start merge processes 
node network notified way initiates merge process fill neighbor table nodes network process triggering merge process neighbors eventually leaving nodes satisfying global connectivity invariant 
practice important ensure inevitable flurry merge notifications swamp network especially relatively large networks merge 
standard protocol engineering solutions apply problem rate limiting acceptance spread notifications propagating merge notifications periodically batches keeping cache node seen merge notifications avoid performing merge times response equivalent merge notifications received different neighbors 
packet forwarding previous section described uip nodes form self organizing structure node build communication path node recursively constructing virtual links top links specify exactly virtual links operate 
section explore construction maintenance virtual links detail 
explore particular alternative methods implementing virtual links source routing recursive tunneling 
source routing potentially enables nodes find efficient routes keeps basic forwarding mechanism simple possible recursive tunneling approach minimizes amount state node maintain neighbor table 
source routing source routing entry node neighbor table represents virtual neighbor contains complete source route target node 
source route lists uip identifiers sequence nodes starting origin node target node adjacent pair sequence source routing versus recursive tunneling working physical link 
course links need physical perspective uip layer link uip source route may represent hops ip routing link layers 
consider example nodes connected chain physical links 
nodes established virtual link ac building hop source route mutual neighbor nodes similarly established virtual link ce suppose node subsequently learns desires create virtual link ae node contacts requesting source route appends source route ce existing source route ac yielding complete physical route send packet node includes packet uip header complete source route virtual link ae stored neighbor table entry uip node path examines header find packet current position path bumps position indicator position forwarding packet uip node path 
forwarding source routing uip essentially equivalent source routing ip 
theory node may store lk entries neighbor table node identifier size number buckets neighbor table redundancy factor bucket 
practice top log buckets non empty total number nodes network 
source route forwarding neighbor table entries may hold source routes paths hops length worst case network topology nodes connected long chain 
case node may require log storage 
practical networks source routes course shorter large worst case storage requirement may problem 
recursive tunneling contrast source routing entry node neighbor table virtual neighbor contains complete explicit route depends physical links recursive tunneling preserves abstraction properties neighbor relationships allowing forwarding path describing virtual link refer physical virtual links 
result neighbor table entry representing virtual link needs hold uip identifiers identifier target node identifier waypoint virtual link constructed 
recursive tunneling guarantees node requires log storage neighbor table entries constant size 
example node constructed virtual link ac node constructed virtual link ce learns wants construct virtual link ae recursive tunneling need duplicate route ask information route order construct new virtual link merely depends knowledge knows get knows get constructs neighbor table entry describing high level hop forwarding path recursive tunneling beneficial properties 
neighbor table entry virtual neighbor needs store uip identifiers size neighbor table entry limited constant size node entire neighbor table depends size uip identifiers number buckets number entries bucket 
second low level routes network change higher level routes built immediately correct updated information information propagation delays 
example node goes making path unavailable finds alternate route virtual link ae automatically new route having aware neighbor table changed 
actual packet forwarding mechanism recursive tunneling course slightly involved source routing 
illustrated send packet node wraps packet data successive headers 
prepends uip tunneling header describing second level virtual path nodes examine header 
second forwarding recursive tunneling prepends second uip tunneling header describing level virtual path prepends appropriate lower layer protocol header ip ethernet header necessary transmit packet physical link packet reaches node strips lower layer protocol header looks level outer uip tunneling header find uip identifier hop 
looks identifier neighbor table prepends appropriate new lower layer protocol header transmits packet packet reaches node strips lower layer protocol header level uip tunneling header destination header examines second level tunneling header find final destination looks neighbor table finding level virtual neighbor prepends new level tunneling header describing route prepends lower layer protocol header physical link forwards message subsequently forwards message strips lower layer protocol header tunneling headers interpreting packet data 
path optimization upper layer protocol node attempts contact node uip build path procedure described section searches network structure requested node identifier process may build virtual links build link procedure section 
search process virtual links constructed essentially driven distance relationships uip identifier space distance relationships underlying physical topology 
uip node complete flexibility way chooses nodes fill particular bucket neighbor table nodes network fit bucket 
network contains nodes uniformly distributed identifiers expect nodes flexibility choice neighbors log log buckets 
naturally expect nodes select best nodes find bucket closest terms physical topology uip hop count best pragmatic measure involving latency bandwidth reliability example 
general expect iterations build path process stay node immediate topological vicinity subsequent hops covering larger topological distances remaining distance identifier space progressively narrowed 
build path hops depend physical inexpensive low order virtual links hops depend expensive high order virtual link eventually resulting communication path network highly nonoptimal fashion 
important find way optimize routes produced process 
basic path optimization inherent build link procedure 
node locates target node build path process subsequently finds contact directly underlying protocols ip address information discovers process build link short circuit path physical link requiring uip level forwarding 
second important path optimization nodes check obvious redundancies routes produced higher order virtual links built lower order virtual links 
source routing type path optimization easier node information complete physical route neighbor neighbor table explore limited form path optimization works recursive tunneling 
path sophisticated forms path optimization certainly possible desirable optimizations relying deeper analysis relationships known neighbors additional information exchanged neighbors minimal information maintain network build virtual links 
leave advanced path optimizations focus effects simple optimizations rely strictly local information 
path optimization opportunities different topologies builds virtual link source route optimization uip forwarding source routing optimize source routes combining shorter paths longer simply checking nodes appear shorter paths 
example suppose node established virtual link ad path building virtual link bd path virtual link exists learns attempts create virtual link af path optimization resulting path path trivially shortened optimal simply noting appears twice eliminating redundant hops 
optimization shortens path optimal path optimization help case necessarily know direct neighbors 
recursive tunnel optimization path optimization easy forwarding recursive tunnels information needed perform optimization spread network 
example node knows hop virtual link ad physical link ab necessarily know type link bd may know node exists 
general virtual link node contains neighbor table virtual physical link representing hop link virtual link node contains neighbor table physical virtual link 
call chain intermediate nodes path inherently knows hop chain example hop chain hop chain implement path optimization recursive tunnels extend build link procedure section node attempts build new virtual link waypoint node nw contacts existing neighbor nw requesting nw hop chain node compares information returned hop chain nw short circuits redundant path elements 
example node building virtual link requests hop chain compares chain hop chain discovering redundant node shortening path form path optimization help redundant path component hidden hop chain 
similarly optimization handle reason source routing optimization fails 
protocol evaluation section simulation results evaluate behavior uip routing forwarding protocol 
realworld implementation protocol development implementation deployed substantial critical mass users developed simulations provide realistic option tuning protocol predicting behave large networks intended support 
performance metrics order asses basic viability uip routing protocol focus measuring efficiency network paths protocol finds random network topologies 
important factors affect performance real world uip networks remain study 
particular simulations confirm protocol recovers node failures network partitions full characterization dynamic behavior uip network continuous change 
order measure efficiency routing paths chosen uip nodes define uip path length nodes total number physical hops path constructs build path procedure 
define stretch ratio uip path length length best possible path underlying topology 
measure stretch pair nodes build path construct path node measuring total number physical hops path eliminating virtual links build path constructed measurement path affect measurement subsequent paths 
networks nodes measure possible paths nodes larger networks take sample randomly chosen node pairs 
test network topology selecting appropriate network topologies simulations uip difficult way predict topologies networks protocol uip deployed 
topological maps existing ipv internet sense existing connected internet precisely portion today global network infrastructure uip find paths ip uip simply treats paths direct physical links 
function uip designed provide finding paths nodes internet nodes private ad hoc networks attached reliable topological data available precisely adjoining networks private 
construct artificial topologies approximate important characteristics believe global network infrastructure 
expect topology uip deployed consist clusters node cluster reliably address connect node cluster nodes cluster limited connectivity nodes clusters 
second diversity existing networking technologies deployment scenarios expect size clusters follow power law distribution larger clusters having better connectivity neighboring clusters 
expect clusters hops single huge central cluster public ip internet 
construct artificial topology having characteristics start single distinguished cluster call root cluster initially containing single node 
randomly grow network node time follows 
new node choose number attachment points node geometric random variable multihoming probability parameter pm approximately network network size number nodes maximum stretch recursive tunneling maximum stretch source routing average stretch recursive tunneling average stretch source routing network path stretch source routing versus recursive tunneling nodes attachment points attachment points 
choose attachment point new node random walk root cluster downstream probability parameter new cluster probability parameter pn step probability move attachment point downstream probability terminate process 
move attachment point downstream choose node random current cluster create new cluster private node probability pn probability pn pick random cluster node attached cluster just came 
random walk terminates add new node cluster walk ended 
call resulting random network topology rooted topology consists small clusters centered single large root cluster approximating connected ip internet surrounded smaller private networks 
choose somewhat arbitrarily baseline parameters experiments 
network topologies varying sizes constructed multihoming probability pm downstream probability new link pn 
topologies build uip networks redundancy factor adding nodes network time random order 
vary parameters explore impact efficiency routing protocol 
source routing versus recursive tunneling measure average maximum path stretch observed vertical axis nodes networks size horizontal axis source routing recursive tunneling 
error bars indicate standard deviation measured stretch 
random node rooted topology root cluster contains nodes network average distance nodes hops maximum distance nodes total network diameter hops 
source routing recursive tunneling see uip routing protocol consistently finds paths average twice long best possible path 
average case efficiency recursive tunneling slightly worse source routing due limited amount information nodes optimize paths find network 
routing protocol occasionally chooses bad paths stretch source routing recursive tunneling low standard deviation indicates bad paths occur rarely 
rooted versus unrooted networks determine uip routing protocol benefits tree structure rooted network topologies 
uip routing protocol viable underlying protocol ip doing routing large central cluster uip routing internetwork number small link layer networks joined ad hoc fashion 
explore question modify random network creation procedure section random walk find new attachment point starts cluster chosen uniformly random existing clusters known root cluster 
resulting unrooted topologies uniform distribution cluster sizes connections clusters 
random node unrooted topology example largest cluster contains nodes average distance nodes hops network diameter hops 
expect efficient routing diffuse network difficult rooted network 
compares path efficiency uip source route forwarding rooted unrooted networks varying sizes 
find unrooted networks yield greater stretch particularly wide mar network size number nodes maximum stretch unrooted network maximum stretch rooted network average stretch unrooted network average stretch rooted network network path stretch rooted versus unrooted networks gin 
result suggests uip routing highly dependent rooted topologies may useable diffuse topologies 
related section compare uip routing forwarding protocol existing routing algorithms wired ad hoc networks relate uip name services systems similar features 
routing algorithms classic distance vector algorithms rip variants ms wrp dsdv router continuously maintains routing information addressable node subnet 
protocols router requires storage network size regularly exchange connectivity information size neighbors 
link state algorithms ospf fsr routers maintain complete network connectivity maps 
approach achieve faster routing table convergence avoid looping problems basic distance vector algorithms cost greater storage requirements maintenance overhead 
reactive demand routing algorithms designed ad hoc networks dsr aodv require routers store information currently active routes limiting maintenance traffic storage overheads networks localized traffic patterns 
routing queries distant nodes may broadcast network desired route limiting scalability protocols networks global traffic patterns 
landmark related hierarchical protocols dynamically arrange mobile nodes tree 
routing protocol assigns node hierarchical address corresponding current location tree implements identity lookup service current address node 
non leaf node serves landmark children responsible routing traffic nodes outside local subtree 
landmark routes local traffic purely lowest levels tree providing scalability traffic patterns predominantly local 
global traffic pass landmark nodes upper levels hierarchy upper level nodes easily overloaded network global traffic patterns 
location independent name services naming services internet domain name system dns translate location independent node names demand location specific addresses 
name services inherently assume node globally unique address reached nodes 
desired node private ip network network address translator example generally ip address reached outside network name services help 
name routing bridge multiple ip address domains dns names dependence centrally administered dns namespace unsuitable ad hoc networks 
distributed hash table dht algorithms pastry chord kademlia implement fully decentralized self organizing name services depend top hierarchical administration dns traditional name services 
uip routing protocol uses self organizing network structure closely related kademlia dht 
conventional name services dht algorithms provide network layer routing functionality 
process locating item dht called routing involves iteratively contacting sequence nodes progressively closer desired item identifier space process assumes node initiating lookup directly contact nodes sequence underlying protocols 
uip virtual link abstraction described section forward ing mechanisms described section provide fundamental new functionality required turn kademlia dht network layer routing protocol 
internet indirection infrastructure uses similar peer peer search structure implement location independent naming communication multicast anycast support 
provides special case support forwarding traffic hosts firewalls depends participating hosts connected internet times implement general network layer routing functionality 
systems resilient overlay networks ron serves function similar spirit uip increasing reliability ip network detecting connectivity failures underlying network forwarding traffic 
ron attempt scalability dozen nodes assumes participating nodes unique ip addresses 
protocols developed provide connectivity firewalls nats socks upnp 
specialpurpose protocols tied characteristics network topologies commonly deployed nats firewalls solve general problem routing different address domains connected arbitrary fashion 
today global network infrastructure grown size diversity reach single internetworking protocol 
ipv ipv scalability necessary route millions billions nodes centrally administered hierarchical address domains edge networks dependent tedious manual address assignment continual connectivity address services dhcp 
existing ad hoc networking protocols fully self configuring scalability ip 
uip scalable identity routing protocol multiple address routing domains single flat namespace enabling communication location independent node identifiers 
identity routing participating nodes private ip address domains ad hoc edge networks uniformly accessible connected global internet 
disconnected global internet uip edge networks remain functional maximally interconnected 
simulation experiments uip indicate routing forwarding protocol practical scalable 
uip nodes information choose best possible routes nodes routes chosen uip nodes average twice long optimal route 
preliminary results suggest identity routing internet scale networks may viable 
david andersen resilient overlay networks 
proceedings th acm symposium operating systems principles banff canada october 
carpenter crowcroft rekhter 
ipv address behaviour today february 
rfc 
chen robert morris 
scalable landmark routing address lookup multi hop wireless networks 
technical report massachusetts institute technology laboratory computer science march 
microsoft 
plug play networking microsoft automatic private ip addressing march 
frank dabek emma frans kaashoek david karger robert morris ion stoica hari balakrishnan 
building peer peer systems chord distributed lookup service 
proceedings th workshop hot topics operating systems may 
darpa 
internet protocol september 
rfc 

dynamic host configuration protocol march 
rfc 
jakob eriksson faloutsos srikanth krishnamurthy 
pushing peer peer stack 
proceedings nd international workshop peer peer systems berkeley ca february 
mario gerla hong pei 
landmark routing large ad hoc wireless networks 
proceedings ieee globecom san francisco ca november 
cheriton 
architecture content routing support internet 
usenix symposium internet technologies systems march 
hagino snyder 
ipv multihoming support site exit routers october 
rfc 

routing information protocol june 
rfc 

protocol complications ip network address translator january 
rfc 
david johnson 
routing ad hoc networks mobile hosts 
proceedings ieee workshop mobile computing systems applications pages 
ieee computer society december 
ford jr fulkerson 
flows networks 
princeton university press princeton 
young bae ko nitin vaidya 
location aided routing lar mobile ad hoc networks 
mobile computing networking pages 
leech socks protocol version march 
rfc 
maymounkov david mazieres 
kademlia peer peer information system xor metric 
proceedings st international workshop peer peer systems march 
merlin segall 
failsafe distributed routing protocol 
ieee transactions communications com september 
mockapetris 
domain names implementation specification november 
rfc 
moskowitz 
host identity protocol architecture april 
internet draft progress 
moy 
ospf version july 
rfc 
murthy garcia luna aceves 
efficient routing protocol wireless networks 
mobile networks applications 
pei mario gerla tsu wei chen 
fisheye state routing routing scheme ad hoc wireless networks 
proceedings ieee international conference communications pages new orleans la june 
charles perkins elizabeth belding royer 
ad hoc demand distance vector routing 
proceedings nd ieee workshop mobile computing systems applications pages new orleans la february 
charles perkins pravin bhagwat 
highly dynamic destination sequenced distance vector routing dsdv mobile computers 
acm sigcomm conference communications architectures protocols applications pages 
perkins editor 
ip mobility support ipv august 
rfc 
rekhter li editors 
architecture ip address allocation cidr september 
rfc 
rosenberg weinberger huitema 
simple traversal user datagram protocol udp network address translators nats march 
rfc 
antony rowstron peter druschel 
pastry scalable distributed object location routing large scale peer peer systems 
proceedings ifip acm international conference distributed systems platforms middleware pages heidelberg germany november 

traditional ip network address translator traditional nat january 
rfc 
ion stoica daniel shelley zhuang scott shenker surana 
internet indirection infrastructure 
proceedings acm sigcomm 
paul francis tsuchiya 
landmark hierarchy new hierarchy routing large networks 
proceedings acm sigcomm pages stanford ca august 
upnp forum 
internet gateway device igd standardized device control protocol november 
www upnp org 

