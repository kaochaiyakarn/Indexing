java subtype tests real time krzysztof jan vitek lab department computer sciences purdue university 
dynamic subtype tests frequent operations java programs 
naive implementations costly space running time 
techniques proposed reduce costs restricted ability cope dynamic class loading may suffer pathological performance degradation penalizing certain programming styles 
subtype test algorithm designed time space constrained environments real time java require predictable running times low space overheads dynamic class loading 
algorithm constant time requires average bytes class memory shown yield average speedup production virtual machine 
real time specification java requires dynamic scoped memory access checks assignment 
extend perform memory access checks constant time 
dynamic subtype tests modern object oriented programming languages 
java subtype tests executed variety contexts checked casts array updates exception handling instanceof queries 
language runtime system responsible maintaining data structures encode subtype relation efficiently answering queries 
subtype tests performed linear time traversing type hierarchy 
unfortunately implementations lead unpredictable performance 
problem remains state art implementations constant time fast path slow path falls back form hierarchy traversal 
lack predictability particularly real time settings giving time bound simple instruction array store requires making non trivial assumptions concrete types objects knowledge implementation technique vm 
goal engineer subtype test algorithm memory constrained real time systems satisfies requirements queries run constant time 
space overhead significantly increase system footprint 
preemption latency small bounded 
general purpose virtual machines hotspot jikes unpredictable performance nuisance impacts programming style 
instance vitek application subtype tests may slower interface classes usually number implemented interfaces larger vm specific constant 
situation reinforces folklore cost interfaces suggests avoided performance critical activities 
issue implementation subtype tests object oriented languages addressed authors theoretical applied communities :10.1.1.106.4911
number non incremental techniques compact constant time subtype tests proposed 
production virtual machines implement fast incremental algorithms special cases exhibit suboptimal performance 
investigate simple techniques known algorithms strive find compromise requirements 
reduce amount needed class loading cases recomputation guarantee fast constant time subtype tests require little space class 
report proof concept implementation algorithm called integrated production virtual machine sun microsystems research vm evm 
show particular implementation reduced space consumption improved running times average 
change lines original code vm optimizing just time compiler 
discuss extensions extension combined encoding unifies treatment classes interfaces extension algorithm checking memory accesses 
memory access checks mandated real time specification java assignment 
observe checks special case subtype tests relatively straightforward apply problem 
technique described slow path loads compares faster previous :10.1.1.16.2159
need word storage memory area 
subtype tests java start presenting subtype test algorithm evm 
subtype tests mandated java language specification checked cast expressions type comparisons array stores exception handler determination 
cases primitive functions evaluated instanceof returns true class checkcast throws exception class write mean type subtype function checks object instance type second assignable recomputation create short pauses infrequent argue impact throughput 
furthermore thread safe allowing runtime preempted time real time thread 
subtype tests real time type 
functions treat null values differently 
null instance test returns false cast succeeds 
java defines subtyping relation arrays equality dimensions subtyping element types 
remainder differences focus core functionality subtype testing implemented procedure fig 

evm type test algorithm treats class interface queries differently 
classes hierarchy traversed requested class located root reached 
interfaces type array implemented interfaces scanned 
basic scheme optimized straightforward ways 
subtype test logic guarded equality test catch cases argument types 
exploit type locality tests type cache added 
cache holds type tested positively subtype type 
evm optimizing compiler inlines code implements extends 
equality test inlined cheap 
branch kind type pr class interface may resolved pr loaded 
algorithm simple performs pathological cases performance tests may vary greatly 
type info type info parent type info interfaces type info cache type info cl type info pr cl pr cl cache pr return true pr return implements cl pr return extends cl pr implements type info cl type info pr int pr length cl pr interfaces cl cache pr return true return false extends type info cl type info pr type info pcl cl parent pcl null pcl pcl parent pcl pr cl cache pr return true return false fig 

evm subtype test hierarchy traversal entry cache equality test 
vitek runtime behavior subtype tests twelve java programs characterize runtime behavior subtype tests practice 
data obtained running programs instrumented version evm 
benchmark suite part larger collection available www org 
runtime program size 
average size programs benchmark suite inclusive jdk libraries close classes interfaces practice smaller number loaded 
difference significant designing algorithm solely static characteristics overly pessimistic 
seen table includes counts classes interfaces loaded vm test runs respectively columns class relatively small numbers loaded types suggests typical situation size data structures may 
table illustrates average number implemented interfaces depth inheritance hierarchy defined number classes type hierarchy root 
averages low noted benchmark twelve implemented interfaces 
inheritance chain length suggest average iteration count hierarchy traversal 
believe architecture benchmark programs accounts variations programs 
instance interfaces implementors chose minimize number avoid supposed higher cost interface dispatch 
contrast eh clean design rich type hierarchy large number interfaces deep inheritance chains 
noted data predictor subtype test performance see 
name description class eh html java ca cap javac stress test gj gj java compiler ka kawa scheme interpreter bl bloat bytecode optimizer je jess expert shell ja html generator xm xml xml tool toba java compiler rh rhino javascript interp 
soot optimization fmk confined confinement check table 
benchmark suite 
number classes dynamically loaded benchmark run class 
average number implemented interfaces chain average inheritance chain height 
subtype tests real time hierarchy shape 
shape class hierarchy characterized number runtime leaf classes contains 
runtime leaf class subclass dynamically loaded benchmark run 
fig 
shows average loaded classes leaves 
runtime leaf classes may course subclasses simply loaded run 
rh xm ja je bl ka gj ca eh leaf classes non leaf classes interfaces fig 

breakdown dynamically loaded classes interfaces 
leaf classes subclasses 
test frequencies 
benchmark programs performed average tests second measured instrumenting optimizing jit compiler interpreter running 
fig breaks subtype tests instanceof checkcast 
expected casts occur frequently programs manipulate generic data structures generic java compiler gj 
extreme bytecode analysis framework uses template macro expansion mechanism generate container types avoiding casts 
observed number casts higher optimizing compiler turned 
accounted common programming idioms easily optimized jit instanceof guard cast 
variability test frequencies rh xm ja je bl ka gj ca eh second instanceof checkcast fig 

subtype tests second 
vitek due programming style instance inner loop visitor pattern complex instruction hierarchy iteration requires tests 
data shows tests extends tests 
test sites 
evm jit compiler emits average subtype test sequences program 
fig 
shows benchmarks test sites 
surprisingly low suggests code size increase due inlining negligible 
correlation number sites dynamic occurrences tests established 
number sites small compiler implementors may choose keep track test sites program execution 
information available original code patched remove extra interface check 
ro rh ka jp je ja gj en ca bl xm fig 

subtype tests sequences emitted jit 
success rate 
considered successful returns true instanceof throw exception checkcast 
fig 
shows tests suc rh xm ja je bl ka gj ca eh success fig 

ratio successful subtype tests 
instanceof test successful returns true checkcast throw exception 
subtype tests real time 
clearly implementation optimize success considering frequency tests costs slow path ignored 
cache effectiveness 
evm uses element cache composed array cache object cache 
array cache record successful cast performed array store object cache tests 
average hit rate seen fig 
results highly variable 
hit rates low eh je 
numbers confirm usefulness caches demonstrate panacea 
rh xm ja je bl ka gj ca eh cache obj cache hit arr cache hit obj cache arr cache fig 

effectiveness element cache 
bars denote respectively hits object cache array cache 
bars indicate misses object array cache 
values normalized wrt 
successful subtype tests 
costs 
cost cache depends number comparisons required implements extends functions 
average iteration counts caches turned appear table 
counts levels inheritance traversed second number interfaces tested 
numbers surprisingly high benchmarks eh average interfaces tested cache implication pathological cases important performance perturbations quite occur 
eh cp gj bl je xm tb rh ja extends implements table 
iterations hierarchy traversal algorithm 
vitek 
test form 
subtype tests evaluated benchmark suite 
fig 
shows large majority performed leaf classes 
rh xm ja je bl ka gj ca eh scalar fig 

frequency 
bar denotes ratio tests subtype leaf 
second bar ratio non leaf classes 

drawn data 
runtime type hierarchy important compile time hierarchy 
benchmark programs consist classes portion small 
appear runtime common encounter shallow hierarchy interfaces 
caches important performance sufficient 
surprisingly test sites suggesting code bloat issue 
algorithm algorithm called ranges buckets characteristics 
subtype tests run constant time 
caches added basic algorithm yield different configurations tradeoffs studied section 
space requirements small 
class interface single word reserved extends tests average bytes implements tests 
algorithm incremental nature 
type information may recomputed eagerly class load lazily needed depending requirements application 
meet responsiveness requirements real time systems essential algorithm interruptible time particular updates type information take milliseconds 
updates thread safe 
data structures consistent state time answer subtype queries 
presentation structured follows 
section describes range numbering scheme checking inheritance relation extends 
section describes bucketing technique multiple subtyping implements 
range extends tests subtype tests real time awell known technique representing single inheritance relation assigning range type ranges children subranges parents ranges ranges siblings disjoint 
technique described schubert independently rediscovered implementors modula 
subtype tests essentially range inclusion checks computed constant time constant space 
assuming class described variables called low high type subtype low low high high range assignment performed preorder walk inheritance tree 
number type low bound time type encountered 
high bound chosen larger maximum type low bound children high bounds 
sample assignment shown fig 

questions need addressed range queries practical 

bits required represent ranges 

impact class loading minimized 

thread safety ensured 
question important long running systems may load classes applications benchmark suite 
advantageous pack ranges single word 
naive encoding fig 

range assignment inheritance hierarchy 
class root subclasses subranges 
siblings disjoint ranges 
vitek restrict vm classes 
note encoding section requires packed ranges 
class loading frequent implies recomputing range assignment time new class added 
cost computing assignment minimized 
real time setting real time thread may released range assignment middle recomputed 
algorithm designed ensure preempted invalidating type information 
refining encoding consider refine encoding address questions mentioned 
subtype query instanceof type provider type object client 
left hand side test client provider asthe client position right hand side provider position 
observe high bounds needed 
equation written low low low high low bound information required client 
furthermore low low safely weakened low low invalidating result 
invariants maintained cases subclass low low high 
key insight limit growth ranges reduce cost recomputing assignment high bounds computed demand 
type info high low type info parent extends type info cl type info pr cl pr pr low cl low cl low pr high return true invalid pr promote pr return extends cl pr return false invalid type info return high fig 

extend test 
subtype tests real time long low bound initialized type client position subtype queries 
refined extends test function perform check test fails validity provider verified 
valid high bound zero high bound computed say type promoted test attempted time 
fig 
gives pseudocode extends tests 
type info data structure contains bit values high low 
check added obviate need promote leaf types form extends equality check 
range assignment time new class added system class inserted hierarchy insert procedure shown fig 

type starts invalid range state allows client position 
algorithm recomputes range assignment calls promote routine 
benchmarks promote called average eleven times program promotion loaded classes promotion tests 
cost promotion linear number types shown 
promotions triggered eagerly class loading case extends procedure fig 
need check validity 
insert type info high low parent null parent low fig 

adding class hierarchy 
consider hierarchy fig 
result calls insert 
classes invalid range 
subtype test extends forces relabeling 
fig 
shows promoted triggers promotion parent extends evaluate true 
second test extends succeed promotion 
note children invalid range necessary distinguish far 
fig 
shows result evaluating extends 
invalid promoted 
extends fails 
evaluate extends trivially case leaf types promoted testing extends leaf 
course tests kind fail fact need promote leaf 
interfaces subclasses object need promoted provider position 
vitek insert insert insert insert insert insert insert insert extends extends extends extends extends fig 

allocating bounds small hierarchy 
subtype tests real time true 
extends evaluated fig 
step promotions required 
pseudocode implementation figures 
basic data structure representing types type info inherited evm 
includes parent class interface siblings child 
promote invoked algorithm starts flattening hierarchy array entry records flatten 
leaf classes stored non leaves stored twice subclasses 
ranges allocated increasing counter non leaf entries 
algorithm doing slightly strictly necessary recompute assignment entire tree time 
int char ignore type info root entry array int array pos entry char type type info class position type info high low boolean type info super nextsibling fig 

data structures constants global variables 
thread safety real time argue algorithm fig 
thread safe 
promote procedure maintains invariants 
type information promotion low low high high high furthermore pair type low low low low vitek synchronized promote array new entry array pos root root root flatten array null flatten null add ignore add flatten add nextsibling null nextsibling flatten add char entry new entry type class position array array pos int position int pos pos arr pos pos array pos type ignore char prev array pos type char array pos type prev prev position array pos position position int pos array pos pos pos entry array pos type type ignore class low position class low position class high position class high position fig 

computing range assignment 
subtype tests real time invariants follow fact ranges assigned order classes occur siblings list 
order siblings modified insertion types added sibling list parent operation modifies order 
ensure data structures consistent step update schedule write type info preorder right left tree traversal 
high bounds written low bounds bounds children 
consider updates fig 
fig 
types updated 
order ensures valid step 
high 
high 
low 
low 
low 
low 
state immediately may cause wonder validity approach 
state valid types recognized subtypes 
attempt evaluate extends block promote procedure returns 
real time java vm real time thread block 
achieved configuring perform eager range assignment 
time new class loaded entire hierarchy recomputed 
imposes added cost class loading cost acceptable real time threads expected trigger class loading way bound costs class loading 
bucket implements tests algorithm subtype tests multiple inheritance type hierarchy required implements tests variant packed encoding algorithm extended handle dynamic hierarchy extensions 
implements tests form client instance class provider interface type 
approach interface represented numbers call bucket bucket identifier iid 
algorithm maintain invariants distinct interfaces bucket bucket bucket bucket bucket bucket iid iid 
vitek type info byte display interface info byte iid byte bucket implements type info cl interface info pr return cl display pr bucket pr iid fig 

implements test 
goal find heuristics minimize number buckets 
class runtime system maintains display array indexed bucket 
implement interfaces bucket display element bucket contains iid 
subtype test performed comparing provider interface iid value stored class display bucket require array access compare illustrated fig 

test returns correct answer provided interfaces common subtype assigned bucket 
algorithm satisfies requirement striving keep number buckets low total space taken displays proportional number interfaces system times number buckets 
number interfaces bucket typically small obviously bounded total number interfaces system cf 
table byte encode interface iid 
case overflow new bucket allocated 
dynamic class loading violate invariant interfaces common subtypes belong distinct buckets newly loaded class may implement interfaces point common subtype 
case necessary recompute assignment interfaces buckets 
may done algorithm simpler approach gives satisfactory results practice 
class loaded determine invariant violated 
achieve check existing buckets contains interface implemented invariant violated recomputation needed 
procedure performed bucket contains interfaces implemented new buckets created left remaining interfaces assigned new buckets 
new buckets receive available bucket number 
subsequently remaining interfaces assigned new buckets new buckets contain approximately number interfaces 
interface moved bucket bucket iid remains unchanged iid added list 
subtype tests real time assigned receive iid appears exclusion list 
buckets processed iterate loaded classes reallocate displays 
existing entries displays remain unchanged new entries added account new buckets 
means class display iid identifying interface may appear index corresponding original bucket indices corresponding buckets subsequently moved 
interface loaded choose bucket assign 
buckets created buckets full numbers iid range appear bucket exclusion list add new bucket 
choose bucket fewest interfaces created buckets add interface 
small integer constant implementation 
heuristic observation implemented interfaces serializable loaded early vm initialization low bucket numbers 
class implementing interface defined application code implement system interfaces putting interfaces bucket require bucket divided 
hand interfaces loaded application code implemented class put bucket 
iid interface chosen number iid range assigned interface bucket appear bucket exclusion list 
argue implements tests algorithm thread safe 
follows facts provider iid changes provider bucket number changed displays reallocated existing entries displays change 
test fig 
old values client display provider bucket new values denoted client display provider bucket 
wehave cases 
client display provider bucket client provider loaded prior test answer correct client display provider bucket correct construction client display provider bucket client display contains entry old new bucket number test returns correct answer client display provider bucket case occur displays updated provider bucket fields written memory barrier issued steps 
cases test returns answer 
virtual machines threads stopped gc safe points 
systems thread safety atomic assume safe points inserted middle subtype test sequence 
vitek experimental results implemented algorithm sun labs virtual machine research evm 
evm uses element general purpose cache element array store cache 
subtype test algorithm evm described section 
just time compiler emits inline code check cache call line test routine 
modifications baseline evm build 
evaluate benefits caching removed inlined cache checks emitted sparc jit instanceof checkcast tests array stores configuration 
experimented configurations algorithm 
configuration preserved original cache checks emitted jit replaced rest test code inline type equality test followed line calls extends implements routines 
configuration removed original caches changed jit emit fast path extends test 
lazy range assignment configurations 
performed experiments sun blade workstation mhz sparc iie processor mb ram 
speedup results summarized fig 

obtained average runs displayed percentage speedups baseline evm configuration higher faster 
results show better average baseline speedups average 
inlining subtype test appear pay performs xm bl cp eh gj ja xm bl cp eh gj ja je ka rh avg je ka rh average fig 

performance proposed subtype test techniques percentage speedup baseline 
baseline unmodified evm system 
evm cache turned 
variant algorithm inlining subtype test sequence caches 
variant caches 
category shows average speed ups 
exhibits average improvement compared base line 
subtype tests real time slightly worse baseline 
clearly indicates caches important performance 
number range promotions bucket recomputations program shown fig 

show clearly recomputation infrequent 
individual costs recomputation fig 

recomputation times small linear number classes system 
ro rh ka jp je ja gj en ca bl xm bucket recomputations range promotion fig 

number recomputations implements extends metadata 
class loading creates invalid ranges may result recomputations buckets recomputation triggered new class introduces conflict bucket assignments 
loaded loaded classes fig 

range bucket recompute times function number classes interface loaded system recompute time 
computed space required store metadata code size emitted jit 
fig 
gives breakdown costs 
guarantee constant space type information data note average size required bytes class bytes fixed overhead 
increase code size modest 
representation smaller evm requires words class share type displays 
vitek rh xm ja je bl ka gj ca eh memory kb fig 

memory requirements algorithm kb 
bar denotes space required inlined test sequences second bar denotes subtype metadata 
average memory cost class bytes data structures 
combined encoding outline alternative approach algorithm call combined encoding 
treatment extends implements checks 
space efficient implementation somewhat simpler 
loaded class interface placed bucket receives iid bucket 
max inline buckets reserved classes 
max inline small constant 
class inheritance chain length max inline put bucket ifd max inline class treated interface 
interfaces assigned bucket algorithm described section 
classes max inline buckets change bucket assignment 
classes packed encoding technique reduces cohen algorithm 
type info short inl parents max inline byte parents short iid short bucket type info cl type info pr buckets pr bucket max inline cl inl parents cl parents return buckets pr bucket pr iid code fig 

combined encoding test sequence 
data subtype tests real time fig 
illustrates combined encoding 
key idea inl parents field display inlined type info structure 
may padded zero entries necessary 
note short integers bucket max inline buckets buckets grow large 
provider known compile time non leaf class inlined buckets bucket number change subtype test executed instructions load client display element compare branch 
code implemented runtime routine inlined 
dynamic subtype testing truncated padded cohen displays explored 
algorithms guarantee constant time tests 
real time java scoped memory access checks real time specification java introduces concept scoped memory java 
scoped memory similar principle familiar notion stack allocation languages region construct ml 
semantics scoped areas defined 
salient features described 
scoped memory area entered thread subsequent allocations come scoped memory area 
thread exits scope active threads area entire memory area reclaimed objects allocated 
scoped areas nested 
scoped memory hierarchy forms tree scope multiple 
scoped memory area reclaimed time memory area longer lifetime permitted hold object allocated memory area lifetime 
defines distinguished memory areas called conceptually act root imm heap fig 

valid patterns 
double arrows indicate parent relations scopes parent scope represent allowed patterns stored field object allocated vitek scope tree considered longer lived scoped memory areas 
fig 
gives valid patterns scope tree composed scoped memory areas 
implementations enforce semantics means scope checks 
scope checks performed time stored memory 
subtype tests predictability space time essential 
encoding straightforwardly implement dynamic scope checks 
consider assignment assignment allowed region allocated longer lived region region region 
assuming object added region field holding scoped memory area code write barrier fig 

rx region ry region extends rx ry fail fig 

scoped memory access check 
outline variant algorithm section adapted implementing access checks ensure constant time space performance test sequence short inline 
range computation 
ranges computed eagerly scoped memory area entered 
area contains threads entered scoped area area parent newly entered region 
area entered different parent scopes different times parents time 
eager computation may costly recall cost linear number memory areas practice encountered application scenarios require handful 
computing assignment prohibitive major part bookkeeping associated region management 
reduce need recomputing ranges memory area caches range assigned new range computed entered different parent 
changes algorithm needed subtype tests real time 
heap immortal memory assigned maximum range allow scoped memory areas 

sparse ranges limit need recomputing ranges 

bounds inactive scoped memory areas cleared recomputing range assignment 

inactive memory area entered extends check performed cached range extends check successful ranges need reassigned 
point drastically reduce need recompute range assignment common coding idiom scoped area repeatedly perform computation periodic task 
representation ranges discussed 
scope checks 
eager range computation obviates need check promotions newly allocated object reside region valid range 
scope check sequence simpler 
shorten sequence packing bounds word performing range check single compare 
fig 
shows code compact test 
check assumes equality test performed 
furthermore memory areas range fields called constructed low high called constructed low high 
furthermore insert procedure section modified children allocated low 
client provider client low bound larger provider 
previous works implementing access checks relied hierarchy traversal cohen encoding 
hierarchy traversal clearly unacceptable performance function depth scoped memory area scope tree 
cytron approach slow path requires loads compares assumes addition equality test 
check outlined faster compact 
region info unsigned unsigned res extends region info region info return true provider client res fig 

compact scope access check 
vitek related constant time ct techniques 
simplest constant time algorithm treats subtype relation large sparse binary matrix number types 
large programs matrices grow megabyte range 
furthermore clear strategy incremental update 
despite disadvantages simplicity binary matrix approach motivated practice 
attempts reduce space requirements binary matrices retaining constant time access viewed techniques compressing matrix 
ct single subtyping 
particularly effective idea due cohen dijkstra displays 
type identified unique type identifier tid simply number 
runtime type information data structure records complete path type root sequence type identifiers 
key trick build type card ancestors type identifiers ancestor stored offset equal level inthe array 
encoding type inclusion tests reduce bound checked array access comparison operation 
bound check necessary array sizes uniform 
approach extends checks jikes rvm described wirth oberon 
ct multiple subtyping 
hierarchical encoding proposed krall horspool vitek constant time technique represents type set integers chosen maps type set representation 
set subtype superset set representing parent 
slightly counterintuitive relation allows natural representation bit vectors 
bit vector representation test function type subtype bit pattern parent occurs child 
problem finding optimal bit vector encodings partial ordered sets np hard classes partial ordered sets optimal encoding large number types supertype 
graph coloring algorithm fast generates compact sets hierarchies bits 
unfortunately obvious way support incremental recomputation 
technique compacting subtype hierarchies packed encoding vitek horspool krall 
binary matrix encoding mapping types matrix indices 
type row matrix 
packed encoding columns unrelated types merged 
reuse columns similar spirit reuse genes hierarchical encoding levels cohen algorithm 
subtype tests packed encoding run fast cohen algorithm space usage subtype tests real time somewhat higher empty entries arrays holding type ids 
technique basis treatment interfaces 
gil published papers improving techniques 
incremental techniques 
currently efficient subtype test algorithms production virtual machines ones click rose jikes rvm team 
variants cohen displays slow path may require scanning linear list types 
techniques slightly space consuming approach inline metadata class data structure 
gil incremental algorithms provide alternatives bucketing technique 
space overhead data implements test low benchmarks evaluated techniques 
subtype test algorithm perform subtype tests constant time fairly modest space requirements 
supports incremental modifications type hierarchy thread safe 
algorithm properties required addition real time virtual machine 
evaluated production vm shown possible get predictable performance time improve time space goal 
average benchmarks ran faster required memory baseline virtual machine 
achieved adding unnecessary complexity virtual machine lines original code modified 
acknowledgments supported darpa nsf ccr 
authors dave detlefs help evm evm team producing excellent system 
programs benchmark come suite mcgill sable research group making available 
david holmes urs lzle alex doug lea bill pugh michael hind scott baxter comments 

hassan kaci robert boyer patrick lincoln roger nasr 
efficient implementation lattice operations 
acm transactions programming languages systems 

alpern cocchi grove 
dynamic type checking jalapeno 
java machine research technology symposium april 

william jr martin rinard 
implementation scoped memory real time java 
lncs 
vitek 
greg james gosling benjamin peter steve mark turnbull 
real time specification java 

addison wesley june 

yves caseau 
efficient handling multiple inheritance hierarchies 
proc 
conference object oriented programming systems languages applications oopsla published sigplan notices pages 
acm press september 

cliff click john rose 
fast subtype checking hotspot vm 
java grande november 

norman cohen 
type extension type tests performed constant time 
acm transactions programming languages systems 

angelo ron cytron 
efficient memory checks real time java 
proceedings languages compilers tools embedded systems 

dean defouw grove litvinov chambers 
vortex optimizing compiler object oriented languages 
proc 
conference object oriented programming systems languages applications oopsla 
acm press october 

dijkstra 
recursive programming 
numer 
programming 

michel 
tree structure distributive lattices applications 
theoretical computer science 

teresa valerie 
analyzing performance memory management 
proceedings fifth international symposium object oriented real time distributed computing 

andreas krall reinhard 
cacao bit just time compiler 
geoffrey fox wei li editors ppopp workshop java science engineering computation june 
acm 

andreas krall jan vitek nigel horspool 
near optimal hierarchical encoding types 
proc 
european conference object oriented programming ecoop computer science 
springer verlag june 

schubert 
determining type part colour time relationships 
computer special issue knowledge representation october 

mad tofte jean pierre talpin 
region memory management 
information computation february 

jan vitek andreas krall nigel horspool 
efficient type inclusion tests 
conference object oriented programming systems languages applications oopsla october 

niklaus wirth 
type extensions 
acm transactions programming languages systems 

niklaus wirth 
reply type extension type tests performed constant time 
acm transactions programming languages systems 

yoav joseph gil 
efficient subtyping tests pq encoding 
conference object oriented programming systems languages applications oopsla october 

yoav joseph yossi gil 
fast algorithm creating space efficient dispatching tables application multi dispatching 
proceedings th acm conference object oriented programming systems languages applications oopsla volume acm sigplan notices pages 
acm press november 
