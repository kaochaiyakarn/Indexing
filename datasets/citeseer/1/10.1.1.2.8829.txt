designing telerobotic systems distributed corba applications michele stefano monica stefano robotics intelligent machines laboratory dipartimento di ingegneria dell informazione university parma area delle scienze parma italy ce ce appears proc 
intl 
symposium distributed objects applications november catania italy 
virtual laboratories line robots examples distributed telerobotic systems emerging internet technologies 
building applications scratch demanding effort satisfy wide set requirements arising distributed systems domain location transparency interoperability telerobotic domain guaranteed quality service real time operation dynamic reconfigurability concurrent collaborative interaction distributed sites 
systems exploitation object oriented standard middleware corba effective known features services enhancements real time corba ami 
summarize experience development software framework telerobotics real time corba 
framework takes advantage corba services allow implementation advanced teleoperation systems avoiding proprietary ad hoc solutions communication priority management 
order enable distributed collaboration virtual laboratories supports concurrent control data distribution multiple clients 
framework evaluated real scenario building distributed telerobotic application allows control robot arm sensors multiple clients 
internet technology rapidly evolving providing access timely data news sports financial sources live video teleconferencing 
comfortable live viewing step reach touch controlling physical device 
years pleasure operating robot limited trained specialists 
ideally internet opens door wider audience networked robot systems developed usually 
main cause system operator master communication channel slave fig 

traditional model teleoperated system 
robot arm terms software architecture implemented scratch standard base 
considering robots sensors controllers objects networked robots distributed objects step idea open reusable scalable software architectures teleoperation 
distributed object computing latest research development topics computer science software industry 
de facto standards inter object communication dcom distributed component object model java rmi corba common object request broker architecture 
adhering standards development time shortened newly developed components easily connected existing resources 
vehicle research distributed robotics corba software framework developed simplify implementation flexible portable extensible reusable telerobotic applications initial features described 
departing works exploited advanced corba features address real time requirements concurrency resource access task execution data distribution 
discuss requirements modern telerobotic systems section available alternatives terms middleware software section 
illustrate enhanced corba framework section describe distributed application framework section report experimental results obtained testing different communication models section 
describe prior field section draw section 
requirements robotic teleoperation systems brief intuitive definition robotic teleoperation allows operator location perform physical task location means robotic device 
regardless robot autonomy degree distance sites teleoperation system specific components command sensorial interface master station human operator control task slave robotic device performs actions remote site operator instructions communication channel sites 
traditional approach robot teleoperation graphically described 
telerobotic systems typically designed critical scenarios dangerous uncomfortable expensive humans perform 
ap operator operator client client operator client network operator client server sensor server server fig 

advanced teleoperation scenario 
robot arm robot arm sensor plications assembly maintenance exploration hazardous environments underwater space nuclear chemical plant remote presence power line maintenance 
years distributed computing systems internet opened new broad application perspectives robot teleoperation systems 
examples novel applications tele teaching tele learning virtual laboratories remote line equipment maintenance projects requiring collaboration remote users experts devices 
conventional architecture fundamental role high level description telerobotic system unsuitable coping novel paradigms provide new interesting opportunities propose alternative challenges 
modern telerobotic systems tend dynamic users physical resources sensor robot controllers need connected disconnected run time system students researchers geographically distributed sites want access part time available virtual laboratory resulting changes number location peers applications act client server need preserving performance services dynamically variable system load 
operators may different access levels simple sensor monitoring system supervision peers light weight runnable platforms desktop workstation embedded system increasing applications complexity 
support different robot programming methods line line hybrid provided transparency accessible applications appear local 
peers directly interfaced sensors devices act servers execute multiple commands time clients offer high degree internal concurrency 
increasing number clients affect system performance scalability 
real time features needed preserve qos reliability 
need distribute increasing quantities sensory data potentially large number clients system operation 
telerobotic task timely availability adequate sensory data emulate operator physical presence remote site particularly crucial 
furthermore new telerobotic applications viable context existing infrastructure constrained budget leads development heterogeneous systems built integrating mix new legacy equipment hardware acquired multiple vendors running different operating systems programmed variety languages 
expensive development new application avoided relying previous experience better common framework 
middleware software previous section list features requirements advanced telerobotic systems reported 
building type teleoperation architecture scratch heterogeneous dynamic systems demanding due economic time constraints 
trend modern distributed systems design open reconfigurable scalable architectures built standard middleware software distributed object computing 
available solutions include javasoft java remote method invocation java rmi microsoft distributed component object model dcom omg common object request broker architecture corba 
sun java rmi java sun com products jdk rmi provides simple fast model distributed object architecture 
extends known remote invocation model allow shipment objects data methods packaged shipped network recipient able interpret message 
main drawback rmi approach application written java 
constraint troublesome common heterogeneous environments robotic applications incorporating legacy specialized hardware software components 
microsoft dcom www microsoft com com tech dcom asp supports distributed object computing allowing transparent access remote objects 
dcom overcomes rmi reliance java object description language achieve language independence limitations concerning legacy code scalability applications 
developer options restricted dcom proprietary solution mainly working microsoft operating systems 
language vendor operating system independence goal corba www corba org mature solution provides similar mechanisms transparently accessing remote distributed objects overcoming interoperability problems java rmi dcom 
advanced features real time corba ami provide functionalities essen tial telerobotic applications 
moment corba logical choice building complex distributed telerobotic applications 
framework teleoperation corba middleware corba offers set facilities tools connecting objects heterogeneous computational nodes simplifying development distributed applications 
spite fact development telerobotic application remains fairly demanding task 
developed framework aims provide flexible effective infrastructure advanced telerobotic systems 
framework offers handles implementation multithreaded servers concurrency mechanisms simplify sharing cpu computation communication activities management client requests order preservation adaptation reactions different requests depending urgency 
servers operate real time allow implementation appropriate control laws guaranteed operation 
furthermore framework provides synchronization mechanisms exclusive allocation non sharable resources methods data distribution peers 
telerobotic system built framework exhibits location transparency easily achieved corba middleware 
furthermore portability framework various operating systems allows reusability code client stations reallocation heterogeneous server stations 
class diagram shows structure framework designed cope wide range situations providing classes robots mobile sensors 
concrete class implementation requires adding code specific device controller functionalities communications concurrency real time shared classes corba 
subsections discuss corba features exploited usefulness telerobotic application domain 
real time features telerobotic system provide operator guarantee correct execution priorities application tasks server 
real time corba specification provides developer handles resource management predictability 
heterogeneity nodes distributed applications precludes common priority scale forcing users earlier corba versions concern low level details threads different oses 
real time corba priority mapping mechanism converts corba priority levels assigned corba operations os native priority levels vice versa 
teleoperation applications require task execution right priority server side 
rt corba defines invocation models server declared controller manipulator open close gripper open close open close sonar attach detach radar attach detach attach detach robot infrared arm attach detach sensor attach detach attach detach attach detach camera attach detach fig 

class hierarchy framework 
objects created assigned execution priority client propagated client establishes priority methods invokes priority honored server 
control robots sensors teleoperated multiple remote clients requires multithreaded server allowing concurrency actions 
server able discriminate services granting privilege critical tasks emergency reading safety sensors avoid priority inversion low priority tasks blocking high priority ones 
support programming multithreaded servers rt corba provides thread pool mechanism enabling preallocation server resources 
thread pool mechanism group threads statically created corba server start time 
threads ready bound requested methods fixed cap set dynamic threads created static threads exhausted 
thread pool avoids overhead thread creation destruction run time helps guaranteeing performance constraining maximum number threads host 
extreme condition set threads bound low level requests server deadlines high priority actions situation clearly unacceptable robot teleoperation system 
avoid depletion threads low priority requests thread pool partitioned lanes different priority 
partitioning sets maximum concurrency degree server amount done certain priority 
partitioning lanes related parameters modified run time freedom reserved higher priority methods borrow threads lower level lanes lane exhausted 
concurrency action execution standard service requests corba systems rely synchronous method invocation smi model blocks client server notifies requested activity 
approach acceptable simple teleoperation applications consisting stepping action time possibly go mode smi clearly unsuited advanced telerobotic scenarios user invoke execution multiple concurrent actions 
examples tasks coordinated operation multiple arms concurrent sensing manipulation 
non blocking invocations earlier corba versions relied methods guaranteeing delivery request techniques requiring significant programming efforts known error prone 
efficient way perform non blocking invocations provided corba messaging specification asynchronous method invocation ami model polling callback approach 
ami allows corba system efficiently activate multiple concurrent actions remote teleoperated site 
ami smi share object interface clients choose synchronous asynchronous calls server implementation affected 
robotic applications set parallel actions time coordinated execution required ensure logical correctness safety 
rationale waiting rendezvous strategy framework 
proper thread synchronization server required achieve capability 
basic corba synchronization mechanism mutex interface corba lacks higher level mechanisms condition variables semaphores barriers 
developed action synchronization mechanism top mutex 
instruction termed cobegin prefixes invocation parallel actions server acting barrier method invocations execution start calls reached server 
cobegin method mandatory parallel execution actions 
cobegin server schedules ami requests soon arrive 
managing multiple clients fundamental challenge advanced teleoperated systems manage input operators generating single coherent control sequence robot allowing collaborative coordinated teamwork 
basic functionality provided framework ensures atomicity calls library functions devoted interaction robot controller regardless thread safeness 
potential conflicts arising multiple clients avoided forcing exclusive access library functions mutex construct implementing mutual exclusion lock 
server side solely responsible implementation functionality mutexes introduced servant code 
addition ensuring single command consistency atomicity framework implements concurrent access control session level guaranteeing full robot control interferences operators 
implementation coordination scheme allowing multiple clients control single robot coherent logically safe pattern interaction corba concurrency control service 
concurrency service defined corba specification allows clients coordinate access shared resource resource consistent state compromised accessed concurrent clients 
service define resource developer define resources identify situations concurrent access resources leads conflict 
coordination mechanism provided concurrency service lock 
shared resource associated lock client get appropriate lock access shared resource 
lock modes read write upgrade intention read intention write defined allowing different resolution conflict concurrent clients 
specification defines types client concurrency service transactional client acquire lock behalf transaction non transactional client acquire lock behalf current thread 
framework adopts non transactional style available rt corba implementations support transactional clients 
scenario users compete control single robot access data multiple sensors exclusive control robot granted user interval time simultaneous read sensor data allowed users 
scheme shows framework copes requirement concurrency service 
robot robot objects created 
lock hold lock mode rw create give give robot rs fig 

collaboration diagram describing client core object class asks lock able control robot object 
scenario client exclusive control robot holds write lock holds lock holds lock holds lock commands status sensors data robot robot ask write lock ask read lock waiting queue scenario clients collaborative control robot holds read lock holds read lock holds read lock holds lock holds lock holds lock commands ask write lock ask write lock waiting queue status sensors data note client fig 

scenarios concurrent access single robot device clients 
class maintains information robotic device robot class controls movements sets parameters 
robot object corba object created registered naming service 
client side object contains corba objects interacts concurrency control service enforce correct concurrent access 
shown scenario client invoking commands robot object holds write lock ensuring exclusive control 
write lock conflicts locks client requesting lock resource suspended waiting release 
clients invoking methods object required hold locks class accessor methods 
preserve generality cover wider domain applications alternative scenario outlined group users want control single robot collaborative way primary operator backup operators preventing operators obtaining exclusive control robot 
scenario scenario collaborating client holds read lock 
read lock conflicts write intention write locks allows sharing robot control clients holding read locks client requesting exclusive control write lock suspended waiting queue 
data distribution telerobotic applications require large amounts sensory data returned remote clients 
implementing data distribution client server communication model drawbacks inactivity client waiting response effects network server required polling operations 
suitable solution interactions peers publisher subscriber communication model 
publisher sensor changes state sends notification subscribers 
subscribers turn retrieve changed data discretion 
section variants publisher subscriber communication model defined corba specification investigated callback technique 
solutions peers involved communication exhibit client server relationship anymore suitable terminology defines supplier peer producing data consumer receives 
distributed callbacks 
approach data distribution subsystem avoiding polling operations minimizing network saturation distributed callbacks 
observer pattern suggests defined corba classes available sensor subject supplier side observer consumer side 
receive data sensor consumer calls method attach ami remote subject object passing observer object 
sensor holds list observer objects attached 
new sensor data ready sent supplier application attached observer objects invocation appropriate method 
approach avoids client active waiting network saturation efficiency supplier greatly affected number consumers 
multiple consumers attached supplier supposed persistently store send separate message turn preferences consumer able define desired data receiving rate avoid unnecessary data submission 
due high memory computation requirements scalability bounded relatively small number consumers 
event service 
relieve supplier administrative duties related consumers management implemented second version data distribution subsystem corba event service 
general idea sensor consumer sensor observer sensor consumer sensor observer 
attach 
attach 
publish 
detach 
detach 
publish sensor supplier sensor subject fig 

distributed callback data distribution 
event service decouple suppliers consumers event channel acts proxy consumer real suppliers proxy supplier real consumers 
implementation allows transparent implementation broadcast sensor data multiple consumers 
corba specification proposes different models interleaving active passive roles suppliers consumers 
robotic applications reasonable model canonical push model active supplier pushes event passive consumers registered event channel 
despite benefits introduced adoption event channel matters discussion 
avoid compile time knowledge actual type event sensor data communicated interface definition language idl type contain omg idl data type 
communication type unsafe consumers charged duty converting type data type need 
event service specification lacks event filtering features conveyed event channel turn sends connected consumer 
load missing property laid consumers forced filter data looking ones really need 
event service specification consider qos properties related priority reliability ordering 
attempting ensure properties application results proprietary solutions prevent orb interoperability 
notification service 
third solution data distributed subsystem corba notification service introduced corba specification overcome previously listed deficiencies event service 
notification service defined superset event service enhancing components 
notable improvements respect event service include filtering qos management 
filter objects encapsulating constraints consumer subscribes precise amd mhz mb os solaris linux intel dual mhz mb os windows nt network intel mhz gb os linux intel mhz mb os solaris fig 

experimental testbed 
controller ccd camera robotic arm stereo vision puma system micro ccd camera infrared proximity sensor set events interested 
filter types defined forwarding filter decides event continue component mapping filter defines event priority lifetime 
qos properties reliability priority ordering timeliness associated channel proxy single event 
building telerobotic application framework developed telerobotic application case study evaluate framework described section 
application shown 
operator provided direct continuous teleoperated control remote device required perform peg hole task 
representative assembly task problem exploited benchmarking teleoperation architectures 
remote manipulator puma interfaced pentium workstation solaris os running rci robot programming controlling environment 
sensory system comprises black white camera ir proximity sensor mounted near gripper manipulator video camera mounted ceiling shooting testbed area stereo vision system front task site 
workstations connected lan fast ethernet switch introduce substantial delay latency 
software side implementation written ace orb tao freely available open source standard compliant real time implementation corba 
client station runs client application allowing graphically choose required services available system 
advanced station provided multimodal user interface including virtual reality glove tracker operator wrist 
client 
client application built corba services providing transparency location implementation available components 
user search components corba objects looking naming service locate requested objects name return remote object stored name 
teleoperation application includes heterogeneous sensors data broadcasted client stations quickly returned user 
definition application tasks operator choose alternatives submitting sequence single commands developing program high level language interpreted 
support invocation concurrent actions server achieve temporal continuity command execution robot developed application takes advantage asynchronous calls see section 
server 
server application manages puma manipulator sensors client requests order urgency preserved 
server implemented multi threaded architecture thread pool mechanism see section 
feature allows management high number requests received multiple clients concurrently monitoring controlling task 
safety reason emergency button object implemented server immediately system emergency situations 
purpose thread pool lanes mechanism preserves server reactivity high priority calls avoiding priority inversion thread exhaustion low priority requests 
empirical performance assessment variants application implemented test correctness framework identify relevant parameters robot server 
lanes low medium high priority defined thread pool server application controls manipulator sensors directly related manipulator 
low medium priority lanes supply threads execution actions composing goal task 
high priority lane supplies threads emergency actions guarantee immediate dispatch 
scheduling algorithm priority level round robin sched rr available posix compliant operating system 
experiments involving simulated workload carried evaluate correctness robustness server tested variety sets concurrent actions different priority levels synchronization 
goal experiments verify effectiveness cobegin avoid priority inversion execution parallel actions 
experiments described left showing precedence relations duration priority method call 
correct outcome experiment requires concurrent methods executed priority 
right compares experimental executions task 
cobegin top diagram medium priority action id request reaching server executed high priority action smi optional ami pri duration ami smi pri duration ami smi pri duration ami pri duration method id method id cobegin time index cobegin time index fig 

left precedence graph concurrent task consisting initial action start optional cobegin followed concurrent actions different priority duration 
right experimental results concurrent actions top bottom cobegin 
host name hardware configuration operating system faster machine piv ghz mb ram linux slower machine athlon mhz mb ram mandrake linux table 
experimental setup host features 
id 
cobegin bottom diagram priority threads guaranteed priority inversion occurs 
data distribution communication models described section integrated proposed corba framework telerobotic systems 
experiments reported assess relative performance terms latency scalability proposed data distribution mechanisms 
experiments reported section follow push model supplier generates data sends event channel available directly consumer processes 
single supplier ore consumers requiring sensory data considered 
supplier consumer located host event channel different host 
host machines exploited experiments listed table features 
hosts connected fast ethernet switch 
aside tests network significant traffic processing place hosts 
set experiments byte packet pushed supplier single consumer 
consumer activity limited update latency ec faster machine ec slower machine ec faster machine faster machine slower machine 
tmin jitter tmin jitter tmin jitter distr 
call 
event serv 

serv 
table 
latency ms byte packet configurations supplier consumer event channel ec 
ec faster machine ec faster slower machine 
distr 
call 
event serv 

serv 
table 
average interarrival time ms byte packet increasing number consumers configurations supplier consumers event channel ec 
value far 
table reports latency minimum average standard deviation jitter values set samples considering alternative allocations event channel supplier consumer 
allocation event channel affects implementations event notification services 
course due single consumer type experiment distributed callback approach exhibits lower latency event notification services implementations additional features utilized 
added latency event notification services small event channel located host supplier consumer 
channel located machine performance corba services decreases data sent forth back channel host network 
set experiments measures average time interval successive byte packet receptions interarrival time increasing number consumers 
results ms selected consumer configurations reported table 
range investigated callback implementation slightly better performance event channel ones requires data cross lower number hops 
event service notification service implementations better scalability event channel located fast machine achieve performance comparable callback implementation starting consumers significantly better performance starting consumers 
summarize robot servers performing complex tasks sensor data acquisition distribution motion planning actuator control dealing large number attached clients event channel represents effective tool maintain workload control 
clients different qos needs expense slight overhead notification service appropriate solution configurability options available callback event service implementations 
related relates area internet telerobotics aim build flexible cheap dynamic heterogeneous distributed telerobotic systems applications 
broad perspective applications collection 
main issue projects interaction web users lacking technical skills require easy command interfaces 
research views internet telerobotics distributed robotic systems addressing issues arising implementation client server systems 
papers exploit interoperability location transparency provided corba ease system implementation applications distributed laboratory supervisory control scheme internet telerobotic system conceived provide assistance aged disabled people 
papers directly concerned implementation systems supporting distributed telerobotic applications 
hara propose framework oo programming robot control dalton taylor advocate nonblocking asynchronous communications viewed essential build distributed robotic systems 
feature available corba implementation relied architectural framework exploited non standard middleware 
believe current corba rt corba specifications including ami invocation model advanced features choice longer justified 
research departs prior art respects 
knowledge developed telerobotic framework cots middleware merely interoperability location transparency full advantage multithreading real time features 
previous area asynchronous method invocation model asynchronous interface deemed essential feature 
rt corba technology matured leveraged develop reliable telerobotic systems strict control computational resources 
viability cost effectiveness new telerobotic applications virtual laboratories networked line robots widely enhanced exploiting cots software components 
systems implementing applications pose demanding challenges dynamically reconfigurable highly scalable deal potentially large number peers provide real time features guaranteed performance efficient concurrency mechanisms locally distributed environment 
corba middleware especially extensions suited needs distributed telerobotic systems 
summarized experience development software framework telerobotics real time corba ensuring proper real time operation server managing concurrent control data distribution multiple clients 
results obtained show corba brings number remarkable advantages telerobotic domain enabling portable highly reconfigurable applications support concurrency real time features 
furthermore corba standard services naming resolution data distribution concurrency control avoid need ad hoc solutions error prone require significant development efforts 
major drawbacks encountered experience overhead communications limited synchronization available important fact corba orbs available offers full implementation corba standard covering aspects dynamic scheduling fault tolerance fully compliant corba services 
plan investigate additional techniques distributing data minimal overhead managing authentication operators secure access telerobotic system 
tests software design efforts required public distribution framework 
acknowledgment research partially supported italian ministry education university research project multi agent system intelligent fixed mobile robotic components 

object oriented robot programming vol 
jan 

hori hirai networked robots distributed objects ieee asme int 
conf 
advanced intelligent mechatronics 

software framework real time corba telerobotic systems ieee int conf 
intelligent robots systems 

jia gang distributed robotic systems corba communication architecture ieee int 
conf 
robotics automation 

dlr minimally invasive robotics surgery scenario 
advances interactive multimodal telepresence systems 

schmidt flexible multimodal assembly generic interconnection framework ieee int 
conf 
robotics automation 

remote control robotics 
springer 

sheridan telerobotics automation human supervisory control 
cambridge ma mit press 

hara web top robotics ieee robotics automation magazine vol 
pp 
june 

goldberg gentner mercury project feasibility study internet robots ieee robotics automation magazine vol 
pp 
mar 

dalton taylor distributed robotics internet ieee robotics automation magazine vol 
pp 
june 

hara hori online robots online robots goldberg eds 
mit press 

ws international workshop tele education mechatronics virtual laboratories germany july 

goldberg eds online robots 
mit press 

backes tso mars pathfinder mission internet operations wits ieee int 
conf 
robotics automation 

abe verification advanced space teleoperation system internet ieee rsj int conf 
intelligent robots systems 

real time corba revision object management group aug 

ryan schmidt parsons design performance scalable orb architecture corba asynchronous messaging proc 
middleware conference acm ifip 

common object request broker architecture specification revision object management group dec 

douglass doing hard time developing real time systems uml objects frameworks patterns 
addison wesley 

chong remote coordinated controls multiple cooperation ieee conference robotics automation 

object management group concurrency service specification www omg org technology documents formal concurrency service htm apr 

buschmann meunier rohnert stal system patterns 
wiley sons 

henning advanced corba programming 
addison wesley 

object management group event service specification www omg org technology documents formal event service htm mar 

notification service specification www omg org technology documents formal notification service htm aug 

distributed object computing doc group real time corba tao ace orb www ece uci edu schmidt tao html 

integration robotics laboratory corba ieee int 
conf 
systems man cybernetics 

generic robotic motion control api kit technology corba communications ieee international conference robotics automation 

jia internet robotic system common object request broker architecture ieee int 
conf 
robotics automation 
