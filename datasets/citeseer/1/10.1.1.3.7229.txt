planar graphs negative weight edges shortest paths near linear time satish rao log time algorithm finding shortest paths planar graph real weights 
compared best previous strongly polynomial time algorithm developed lipton rose tarjan ran time best polynomial algorithm developed henzinger klein subramanian rao ran time 
significantly improved algorithms query dynamic versions shortest path problems 
shortest path problem real positive negative weights problem finding shortest distance specified source node nodes graph 
assume graph negative cycles shortest path nodes typically undefined presence negative cycles 
general algorithms shortest path problem easily modified output negative cycle exists 
holds algorithms 
shortest path problem long studied continues find applications diverse areas 
problem wide application underlying graph grid graph 
example image segmentation approaches negative cycle detection 
favorite applications planar graphs include separator algorithms multi source multi sink flow algorithms algorithms finding minimum weighted cuts 
bellman ford gave mn algorithm finding shortest paths edge vertex graph real edge weights 
gabow tarjan showed problem solved algorithm depended computer science division university california berkeley ca 
mail cs berkeley edu 
supported fulbright scholarship scholarship faculty engineering university thailand 
computer science division university california berkeley ca 
mail cs berkeley edu 

notation ignores logarithmic factors 
values edge weights 
strongly polynomial algorithms bellman ford remains best known 
graphs positive edge weights problem easier 
example dijkstra shortest path algorithm implemented log time 
planar graphs discovery planar separator theorems algorithm lipton rose tarjan 

algorithm partitioning graph pieces recursively computing distances borders pieces numerous invocations dijkstra algorithm build dense graph 
bellman ford algorithm resulting dense graph construct global solution 
algorithms worked planar graphs separable 
combining similar approach non strongly polynomial algorithm goldberg general graphs henzinger give algorithm shortest path problem planar graphs set graphs sized separator 
log time algorithm finding shortest paths planar graph real weights 
algorithms query dynamic versions shortest path problems 
idea approach similar approaches discussed constructs dense non planar graph subset nodes computes shortest path tree graph 
observe exists shortest path tree dense graph obey non crossing property geometric embedding graph inherited embedding original planar graph 
condition compute shortest path tree dense graph time near linear number nodes dense graph significantly linear number edges 
specifically decompose dense graph set bipartite graphs distance matrices obey condition called monge condition 
efficient algorithms searching minima monge arrays developed previously 
see example 
assuming recursive decomposition graph 
algorithm proceeds combining dijkstra bellman ford algorithms methods searching monge matrices sublinear time 
line method searching monge arrays version dijkstra algorithm dense graph 
note algorithms heavily rely planarity previous methods require graphs separable 
methods tolerant violations planarity 
results continue hold graph embedded plane edges cross 
example algorithms apply road map crossing non intersecting highways 
results give results 
log algorithm finding shortest paths planar graphs real weights 
algorithm requires log preprocessing time answers distance queries pairs nodes time log best previous algorithms query preprocessing time product algorithm supports distance queries update operations change edge weights amortized time log operation 
algorithm works positive edge weights 
algorithm supports distance queries update operations change edge weights amortized time log operation 
algorithm works negative edge weights 
line monge searching problem methods solve may novel independent interest 
related planar graphs positive edge weights henzinger gave time algorithm 
improves frederickson previously log algorithms problem 
frederickson gave improved pairs shortest path algorithm planar graphs small hammock decompositions 
gave dynamic algorithms complexity linear size hammock decomposition 
quite efficient certain cases graph outerplanar 
general planar graphs grid graphs algorithms better 
similar binary searching technique monge searching problem appeared algorithm finding shortest paths dimensional polygon mitchell 
preliminaries directed graph weight function directed edges distance labelling source node function minimum paths algorithms algorithms sequence edge relaxations 
algorithms start labelling 
choose edge relax 
relax operation proceeds edge setting distance label minimum dijkstra algorithm described correctly computes distance labelling weights edges nonnegative findmin foreach min edge relaxation phase phase implementation algorithm correctly computes shortest path labelling nodes graph 
distance functions bellman ford suggested algorithm guaranteed compute distance labelling cycle graph total weight 
negative 
phase phase relax edges 
phase phase feasible price functions function price function node set 
reduced cost function edge set induced price function defined known reduced cost function preserves presence negative cycles shortest paths 
say price function feasible edges 
feasible price function find distance labelling source node dijkstra algorithm modified graph weights called graph distance labelling original graph easily recovered 
note valid set distance labels source node feasible price function 
compute shortest paths sources graph negative weight edges accomplished application bellman ford algorithm applications dijkstra algorithm 
algorithm proceed section description algorithm 
section define main tool dense distance graph efficiently searchable representation distances planar graph 
section show compute graph inductively relying monge data structures efficient implementations dijkstra algorithm bellman ford algorithm 
section show compute shortest path labelling graph 
sections dense distance graph basis query dynamic shortest path algorithms 
dense distance graph decomposition graph set subsets necessarily disjoint union sets node border nodes set exists edge refer subgraph induced subset piece decomposition 
assume recursive decomposition level piece nodes border nodes divided nodes border nodes 
recursion stops piece contains single edge 
recursive context define border node border node original piece new border node introduced decomposition current piece 
convenient define level decomposition natural way entire graph piece level decomposition pieces decomposition entire graph level pieces decomposition 
node level border node border node level piece 
note node may border node levels 
level border node level border node assume loss generality graph bounded degree graph 
assume inductively planar embedding piece recursive decomposition border nodes single face circularly ordered 
assume simplicity loss generality piece connected 
find recursive decomposition form log time 
see 
piece decomposition recursively compute pairs shortest path distances border nodes paths lie entirely inside piece 
call dense distance graph planar graph 
level dense distance graph subgraph dense distance graph level border nodes 
refer level dense distance graph piece subgraph level dense distance graph edges correspond paths lie piece 
graph underlies previous algorithms shortest paths planar graphs 
give better algorithm construct 
computing dense distance graph assume recursively level dense distance graph distances border nodes piece 
show find edges level dense distance graph correspond particular piece recall level dense distance graph consists pairs shortest path distances border nodes level dense distance graph 
note level distance graph may contain negative edges 
finding feasible price function single bellman ford computation source find shortest path distances source dijkstra computation stated section 
proceed doing single bellman ford computation level dense distance graph border node doing dijkstra computations graph compute shortest path distances remaining border nodes 
exactly previous researchers 
algorithms implementations bellman ford dijkstra depended linearly number edges level dense distance graph 
methods depend near linearly number nodes dense distance graph square root number edges 
assume piece contains nodes border nodes 
property decomposition assume number border nodes contain border nodes 
level dense distance graph contains nodes 
bellman ford step bellman ford algorithm run proceeds follows 
phase phase relax edges 
phase phase total number boundary nodes number edges 
relax edge directly running time step edge relaxation total running time bellman ford step relax edges time near linear number nodes particular log partitions nodes form log monge arrays st nd arrays rd th arrays th th arrays 
time 
gives running time log bellman ford step 
accomplish maintaining edges log levels monge arrays 
edges monge array relaxed log time number nodes data structure 
monge array define formed follows 
divide border nodes halves left half circular order arbitrary starting point second right half 
consider set edges dense distance graph go left border nodes right ones 
edges obey monge property underlying shortest path tree need cross 
left right partitioning define monge array direction edges reversed edges array go right border nodes left border nodes 
successive monge arrays constructed recursively dividing left right halves 
node occur log data structures edge occur data structure 
shows partition nodes edges 
relax edges monge array follows 
nodes left label associated node right choose left node minimizes 
planarity piece parent edges right nodes need cross gives monge property 
special case standard divide conquer technique find parents time log number nodes monge array total number nodes data structures log decomposition 

time relaxing edges log 
number phases bellman ford runs number nodes longest path 
time bellman ford step log node piece 
fsg 
empty smin min 

min min 
fvg pseudocode dijkstra implementation 
dijkstra step invocation bellman ford shortest path tree border node relabelling property modify edge weights positive shortest paths remain unchanged 
modified weights repeatedly apply dijkstra algorithm compute pairs shortest distances border nodes order compute shortest path distances border node proceed dijkstra 
working level decomposition view level separately 
maintains data structure allow scan node relax edges dense distance graph adjacent node find minimum labelled node efficiently 
dijkstra algorithm maintain set scanned nodes global heap keeping minimum labelled nodes 
implementation proceeds follows 
node extracted global heap 
node belong scan containing 
scanned node minimum labelled node change update entry global heap primary difference implementation dijkstra algorithm normal implementation node scanned appear heap 
data structure guarantee minimum border node scanned reappear minimum node 
data structure guarantee node reappear log times 
denote pseudocode describes algorithm computing shortest path tree starting border node uses operations data structures maintained 
relax edges dense distance graph level piece conditioned sequence calls implemented log time 
return border node scanned piece label greater nodes piece 
procedure implemented time 
return border node scanned piece label greater nodes piece attempt remove heap piece 
node returned procedure log times 
sequence calls implemented log time 
show implement data structure section 
point assume bounds stated bound running time dijkstra step 
stress scanned node returned 
data structure guarantee border nodes returned log times 
data structure returns minimum labelled node minimum node 
algorithm scans node minimum nodes returned 
time algorithm scans node minimum distance label nodes 
algorithm valid implementation dijkstra algorithm scans minimum labelled nodes 
correctly computes shortest path labelling 
analysis running time dijkstra step piece border nodes consideration 
number calls bounded number nodes level dense distance graph degree node bounded 
node scanned dijkstra algorithm calls 
called log times node level dense distance graph 
total number operations log total cost log number calls bounded number calls 
running time computing shortest path tree log log total running time computing trees log log 
running time constructing dense distance graph level decomposition time doing bellman ford step log time dijkstra computations log 
log levels decomposition time construct dense distance graph log 
shortest path solve shortest path problem source dense distance graph follows 
add border node pieces contain compute dense distance graph resulting decomposition 
compute shortest path labelling source level dense distance graph border nodes bellman ford algorithm 
extend distances internal nodes recursively bellman ford algorithm 
bellman ford computation costs log level 
running time computing distances log 
supporting queries graph static dense distance graph dijkstra procedure answer shortest path queries pair nodes 
section show dense distance graph find shortest distance pair nodes log time 
algorithm similar dijkstra step shortest path algorithm 
suppose query distance pair 
shortest path viewed sequence paths border nodes nested pieces contain lengths paths represented dense distance graph edge border nodes enclosing border nodes edge border nodes piece 
perform dijkstra computation subgraph dense distance graph compute shortest path 
derive bound number border nodes pieces containing follows 
piece piece decomposition 
number nodes goes geometrically 
number border nodes bounded square root number nodes piece goes geometrically 
number border nodes involved 
algorithm dijkstra step pieces levels decomposition 
algorithm dijkstra step continues time log total number nodes involved dijkstra step 
total number nodes graph searching running time bounded log 
dynamic algorithms graphs positive edge weights dynamic data structure answers shortest path queries allows edge cost updates cost edge may decreased increased 
edge additions deletions addressed 
query algorithm previous subsection explicitly works pieces recursive decompositions contain query pair 
avoid pieces distances pieces reflected distances border nodes pieces containing 
dynamic version algorithm query case 
query step uses dijkstra algorithm crucial weights non negative 
update introduce negative edge graph 
simplify presentation discuss case edges positive weights section 
section extend idea general case 
know efficiently maintain explicit representation distance graph update occurs 
pieces containing update edge correct distances border nodes 
edge dense distance graph border nodes region containing update edge longer accurate distance label 
edge dense distance graph correct label 
call pieces contain updated edges activated pieces call border nodes pieces activated nodes 
see example 
properly recompute distance piece contains update edge need consider distances border nodes pieces contained define activated graph valid edges corresponding border nodes pieces containing update edge sibling pieces 
see 
answer query pair adding valid edges border nodes pieces containing activated graph running dijkstra computation resulting graph 
call graph extended activated graph 
see 
proceed deriving bound number nodes involved computation assuming allow maximum updates rebuilding entire data struc updated edge activated pieces activated nodes eis updated border nodes st level separators nd level separators nd level separators sibling pieces activated pieces activated graph nodes extended activated graph border nodes graph level decomposition 
activated nodes 
activated graph updated 
extended activated graph 
ture 
update number border nodes pieces need dijkstra computation 
naively bound total number activated nodes fact consider top process divides piece contains update edge show total number activated nodes nk follows 
consider decomposition tree 
leafs activated 
pieces children activated call pieces branching pieces 
number nodes goes geometrically tree bound total number activated border nodes number border nodes branching pieces 
worst case branching pieces highest level decomposition tree form balanced binary tree 
note pieces level partition graph number border nodes maximized partition graph evenly 
level border nodes 
sum level dominates total sum number border nodes nk dijkstra computation described section run time nk log total cost sequence updates queries nk log queries plus log re building dense distance graph 
choosing log get amortized complexity log operation 
dynamic algorithms graphs negative edge weights follow strategy case 
simply maintain notion activated graph sequence updates 
answer query pair compute distance labelling extended activated graph 
unfortunately may negative edges extended activated graph just dijkstra computation 
note feasible price function node set extended activated graph edge updated negative weight computation dijkstra algorithm update price function follows 
compute shortest distance labels 
nodes starting greater changing weight introduce edge negative reduced cost graph 
price function update update price function 
updates compute feasible price function extended activated graph performing dijkstra computations starting original price function extended activated graph update update price function described 
feasible price function extended activated graph includes updates proceed previous section 
queries updates rebuild dense distance graph 
total time sequence queries updates nk log recomputing price log re building dense distance graph 
choosing log get amortized complexity log operation 
monge searching data structures section describe data structure underlies algorithms 
describe general setting bipartite monge searching problem subsection 
develop online version data structure section 
data structure extended handle case section 
note interface data structure involved 
data structure mainly dijkstra step algorithms 
technique reducing general case bipartite case edge relaxation step implementation bellman ford 
bipartite monge searching bipartite graph right matching set jf 
ordered sets call monge right matching iff pair matches example bipartite graph distance function monge property 
consider bipartite graph distance function satisfying condition nodes note right matching exists monge right matching having greater cost 
standard divide conquer techniques derive log algorithm finding minimum monge matching graph 
line bipartite monge searching condition distance function holds offset distance left node cost edge 
consider line version problem offset distances left side nodes specified line 
bipartite graph distance function edges satisfying initial distance node cost edge matching 
initially distance specified life data structure 
want data structure maintain best monge right matching 
interface suitable application data structure introduce growing subset initially 
allow user query best matched node add current best matched node bns basically set denotes set nodes correct matches 
interpretations node correct match line setting 
context dijkstra algorithm minimum node certainly correct match correct label minimum labelled node labelled nodes 
see example data structure decide current minimum node correct math 
current minimum node correct match user add able query best matched nodes data structure allows queries current best matched node outside correctly matched set 
idea find correct parent middle right node checking left nodes recurse top bottom half right nodes 
look left node recursive level 
loss generality assume jaj jbj ordered set fa ordered set fb data structure maintains initial distance variables subset supports operations 
set return node arg min 
set build data structure interval tree ordered set fd supports query form min interval tree implemented balanced binary tree 
time query log size ordered set 
data structure maintains node active left neighbor tree ordered index binary tree nodes best left neighbors right node 
heap minimum edges best left node data structure stores node best left node binary tree storing triplet implement active node data structure maintains range data structure interval tree representation values algorithm maintains invariant initial distance node best left node right nodes range note implies ranges nonoverlapping 
example see 
describe operation performed 
activated insert find set right nodes fb node minimum left node 
interval trees constructed priori distances 
computed 
data structure representation distance function input 
easy add representation dense distance graph 
set activated left nodes newly activated node intervals bipartite graph activated nodes intervals 
changes activated 
describe find top right match suppose denote nodes fn ordered find maximum index node 
find activated left node interval contains sequentially comparing distance label top right match nk new distance label get continue comparing distance better old 
know fb binary search similar method find node interval 
need modify data structure changes 
internal data structures affected tree heap best left node data structure nodes previously intervals shrink intervals 
nodes interval removed removed set 
node interval affected find new best right neighbor update heap accordingly 
delete entries corresponding modify entries corresponding shows data structure modified activated 
find minimum edge return 
find best left matched node create new nodes put set 
set remove heap interval tree find best right neighbors add note eliminate best left node data structure allowing return minimum node left neighbor returns edge 
improve running time 
analysis running time note size greater execution algorithm create nodes time called 
called times create nodes 
analyze running time operation 
searching index takes time log 
find sequential search binary search 
node examined sequential search removed 
charge cost sequential search cost removing updating nodes 
cost binary search log 
search lower costs 
node pick best right neighbor add done log time 
interval node update data structure 
nodes change intervals re pick best right neighbors update entries takes log time 
nodes deleted reappear 
delete takes time log charge time node inserted data structure 
operation takes log amortized time 
read top item time 
find current minimum node time 
takes log time find left matched node operations take log time 
runs time log 
non bipartite line monge searching generalize data structure support case graph bipartite section 
graph distance function nodes circular order distance function satisfies property notice sign inequality reversed case crosses contrary bipartite case crosses 
general case reduced log bipartite cases 
idea explained section 
graph create dlog ne bipartite graphs left right partition edges go directions 
denoted bipartite graphs dlog ne reduction edge belongs bipartite graph 
refer bipartite graph level denote set log bipartite graphs 
operations need non bipartite data structure 
want able set initial offset distance bipartite case want find minimum labelled node 
minimum labelled node graph minimum levels 
notion set different 
suppose node current minimum labelled node label level bipartite graph 
correct match reach minimum level levels labels necessarily reach minima change 
put levels affect search interval left node 
add set level bipartite graph 
drawback call return 
node belongs log levels node reappear log times 
data structure non bipartite case consists log data structures bipartite cases maintains heap minimum nodes levels initially distance offset levels 
names procedures consistent algorithm constructs dense distance graph call procedures findmin respectively 
describe operations data structure supports implementation running time 
operation done calling left side node 
affected levels call findmin update entries heap operation done log amortized time log levels call costs log amortized time 
time finding minimum nodes updating heap log log log heap size log 
find minimum distance node levels 
done time returning minimum entry heap find minimum distance node levels remove node level attempt add node set data structure 
operation minimum node call level minimum node belongs update level entry cost log time cost updating log log 
operation done log time 
noted discussion log attempts add node node appear minimum node 
acknowledgments chris careful reading 
aggarwal bar noy samir khuller dina kravets schieber 
efficient minimum cost matching transportation quadrangle inequality 
journal algorithms 
bellman 
routing problem 
quart 
appl 
math 
samuel buss peter yianilos 
linear log time minimum cost matching algorithms quasi convex tours 
siam journal computing 
cox rao zhong 
ratio regions technique image segmentation 
proceedings international conference pattern recognition pages 
ieee aug 
costa geiger gupta 
dynamic programming detecting tracking matching elastic contours 
ieee trans 
pattern analysis machine intelligence 
christos 
computing shortest paths distances planar graphs 
proc 
th icalp pages 
springerverlag 
ford fulkerson 
flows networks 
princeton univ press princeton nj 
greg frederickson 
new approach pairs shortest paths planar graphs extended 
proceedings nineteenth annual acm symposium theory computing pages may 
greg frederickson 
fast algorithms shortest paths planar graphs applications 
siam journal computing december 
harold gabow robert tarjan 
faster scaling algorithm network problems 
siam journal computing 
andrew goldberg 
scaling algorithms shortest path problem 
siam journal computing 
monika henzinger philip klein satish rao subramanian 
faster shortest path algorithms planar graphs 
journal computer system sciences 
lipton rose tarjan 
generalized nested dissection 
siam journal numerical analysis 
richard lipton robert tarjan 
separator theorem planar graphs 
siam journal applied mathematics 
miller naor 
flow planar graphs multiple sources sinks 
siam journal computing 
joseph mitchell david mount christos papadimitriou 
discrete geodesic problem 
siam journal computing 
satish rao 
faster algorithms finding small edge cuts planar graphs extended 
proceedings fourth annual acm symposium theory computing pages may 
