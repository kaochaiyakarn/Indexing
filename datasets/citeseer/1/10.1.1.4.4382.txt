design problem solving task analysis design problem solving complex activity involving number subtasks number alternative methods potentially available subtask 
structure tasks key concern research task oriented methodologies knowledge systems chandrasekaran clancey steels mcdermott 
way conduct task analysis develop task structure chandrasekaran lays relation task applicable methods knowledge requirements methods subtasks set 
major goal article develop task structure chandrasekaran propose task structure design analyzing general class methods call modify methods 
task structure constructed identifying range methods task 
method knowledge needed subtasks sets identified 
recursive style analysis provides framework understand number particular proposals design problem solving specific combinations tasks methods subtasks 
subtasks really specific design 
analysis shows ideal method design design problem solving result recursively selecting methods number criteria including knowledge availability 
task analysis help knowledge acquisition system design discussed 
copyright american association artificial intelligence 
rights reserved 
design knowledge activity 
design search space subassemblies designing artifacts meant achieve functions constraints important class design characteristic properties goel pirolli 
concentrate class design problems article 
sufficiently complex versions design problem common theme emerges design process involves mappings space design specifications space articles winter articles ai magazine devices components referred mapping behavior structure typically conducted means search exploration space possible subassemblies components 
accent assembly fact origin frequent suggestion design synthetic task 
design problem formally search problem large space objects satisfy multiple constraints 
vanishingly small number objects space constitute satisficing mention optimal solutions 
needed design practical strategies radically shrink search space 
set view design deliberative problem solving process view design intuitive instantaneous process design solution comes mind designer 
artistic creations scientific theories said creators occurred manner 
plausible solution occurs way proposal needs evaluated modified examining alternatives 
simple cases deliberative processes essential real world design 
functions constraints components relations designer charged specifying artifact delivers functions satisfies constraints 
design task availability possibly large generally implicitly specified set primitive components assumed 
domain specifies repertoire primitive relations connections possible components 
electronics engineer example assume availability transistors capacitors electrical components designing waveform generator 
primitive relations domain serial parallel connections components 
course design general recursive certain component assumed available fact available design component undertaken round 
vocabulary primitive components relations different original device 
functions expressed state series states want device achieve avoid specified conditions 
functions explicitly stated part problem specifications implicit designer understanding domain 
example implicit function engineering devices safety example subsystem role explained prevents leakage potentially hazardous substance function explicitly stated part design specification 
addition desired functionalities design specifications usually mention number constraints 
distinction functions constraints hard formally pin functions constraints behavior properties device 
useful distinguish functions constraints functions primary reason device desired 
design constraints properties artifact example weigh process making artifact description constraints design process example want design week 
computationally effective process design generate candidate design functions modify meet constraints 
definition design task consider definition design task definition design problem specified set functions explicitly stated design consumer implicitly defined domain delivered artifact set constraints satisfied technology repertoire components assumed available vocabulary relations components 
constraints pertain design parameters process making artifact design process 
solution design problem consists complete specification set components relations describe artifact delivers functions satisfies constraints 
solution expected satisfy set implicit criteria example complex costly plausible alternatives ruling goldberg devices 
preceding definition captures domain independent character design generic activity 
planning programming engineering design share definition subprocesses significant degree 
versions design problem defini tion needs modified extended examples start design process minimal statement functions constraints available additional ones developed parallel design process 
second design problems involve extensive trade studies part design process search ways functions constraints relaxed modified 
third time honored method invention design space explored specific set functions mind 
functions identified structural configurations arise exploration 
fourth world primitive objects open ended implicitly specified 
design framework extended cover variations 
task structure say problem solving task method suggested task 
method described terms operators uses objects operates additional knowledge organize operator application satisfy goal 
knowledge level method characterized knowledge agent needs set apply method 
different methods task call knowledge different types 
take simple example task multiplying numbers logarithmic method consists series operations extract logarithm input numbers add logarithms extract sum 
operators appear font 
arguments results objects method 
note typically include level description logarithmic method specifications extract logarithm addition 
computational model provide capabilities primitives performance operations set subtasks method 
method application operators method set subtask 
objects method needs generic class problems domain 
example consider hierarchical classification malfunction hierarchy common method diagnosis 
establish hypothesis refine hypothesis operations applied hypotheses hierar chy 
objects useful solving instances diagnostic problem domain 
malfunction hypotheses directly available generation hypotheses set subtasks 
common method generation objects compilation called deep knowledge 
structure function models device diagnosed proposed deep models generate malfunction hypotheses chandrasekaran smith 
finite set mutually distinct methods task numerous variants method 
term method useful shorthand refer set related proposals organizing computation 
types methods type method particular importance knowledge systems methods viewed problem space search newell 
designer soar air cyl brown chandrasekaran examples design systems explore search spaces 
example air cyl understood searching space parameters components air cylinder design plans propose modify parameter values 
class methods consists algorithms directly produce solution search space alternatives example producing set design parameters numerically solving set simultaneous equations 
algorithms available called structured problems 
real world problems ill structured role domain knowledge help set spaces alternatives help control search spaces 
task analysis type recursively continued methods operators directly achievable analysis framework reached 
task analysis design explicitly indicate subtasks want draw specific attention 
operators exist require additional problem solving 
articles 
task structure 
lays relation task applicable methods knowledge requirements methods subtasks set winter articles ai magazine task structure design propose critique modify family methods common top level family methods design characterized propose critique modify pcm methods 
methods subtasks proposing partial complete design solutions verifying proposed solutions critiquing proposals identifying causes failure modifying proposals satisfy design goals 
subtasks combined fairly complex ways method straightforward way pcm method organize combine subtasks 
example pcm method step 
design goal propose solution 
proposal exit failure 
step 
verify proposal 
verified exit success 
step 
unsuccessful critique proposal identify sources failure 
useful criticism available exit failure 
step 
modify proposal return 
pcm methods need way achieve iteration step numerous variants way methods class 
example solution proposed part design problem part deemed crucial 
solution modified 
partial solution generate additional constraints leading design commitments 
subtasks scheduled fairly complex way subgoals different methods alternating 
hard identify separate method variation 
implications design architecture open number methods discussed concluding sections article 
article attention devoted proposal subtask design knowledge subtask 
task default method uses compiled knowledge get solution problem solving 
method practical simple cases 
method potentially applicable simple versions tasks interesting internal structure explicitly mention discussion 
task analysis provide framework various approaches design understood 
selected examples existing ai systems illustrate ideas attempt provide survey ai design 
methods proposing design choices design proposal methods domain knowledge map part specifications partial complete design proposals 
groups methods identified problem decomposition solution composition retrieval cases memory constraint satisfaction 
problem decomposition solution composition 
class methods domain knowledge map subsets design specifications set smaller design problems 
design plans special case decomposition method 
second retrieval cases memory correspond solutions design problems similar close current problem 
third family methods solve design problem constraint satisfaction problem variety quantitative qualitative optimization constraint satisfaction techniques 
decomposition case methods help reduce size search spaces knowledge viewed compilation chunking earlier individual community search design space 
conversion design problem amenable global optimization algorithms requires substantial priori knowledge structure design problem 
decomposition solution composition 
treat method terms features information processing analysis calls types knowledge information needed inference processes operate form knowledge 
knowledge needed form 
dn design problem dis smaller subproblems associated search spaces smaller 
number alternate decompositions problem available case selection needs attendant possibility backtracking making choice 
repeated applications decomposition knowledge produce design hierarchies 
domains effective decompositions known little search decompositions needs conducted part routine design activity 
example automobile design decomposition remained largely invariant decades 
decomposition knowledge design generally arises functional specifications decomposed set subfunctions freeman newell 
design decom position knowledge come form part subpart decomposition direct mapping available functions components 
important subgoals decomposition solution composition method generating specifications subproblems 
functional specifications need get translated specifications subproblems 
dn 
second gluing subproblem solutions solution original design problem 
routine design subtasks explicit solved compiled knowledge problem specification implies solution problems 
general additional problem solving needed 
decomposition solution composition method organize subgoals shown example example decomposition solution recomposition method step 
search space decompositions 
choose alternative decompositions design problem step 
generate specifications subproblems chosen decomposition 
step 
set subproblem design problem 
solve order determined control strategies domain knowledge example progressive deepening 
step 
subproblems solved solutions subproblems solution exit 
step 
failure steps go step choice relax specifications go step 
caveats mentioned connection pcm method apply 
specifically control subproblems solved variable complex previously indicated 
sources complexity discussion 
design problem possible generate constraints subproblems original problem specifications 
domains constraint generation subproblems alternates partial design turn provides additional information constraints subproblems 
complex process commitments backtracking 
extreme cases design problem solving consist search parameters subproblems solvable 
example propose revise method marcus mcdermott wang involves common top level family methods design characterized propose critique modify pcm methods 
making commitments subparts design problem propose part revising constraints parts problem violated 
configuration tasks mittal subproblem solutions part problem desired functions mapped set key components remaining task dominated subtasks specification generation solution recomposition 
components connected certain preconditions postconditions need satisfied 
conditions available priori need derived configuration behaviors 
discovering connection conditions checking specific configuration proposals result desired functional behaviors involve simulation problem solving method example kelly steinberg 
complex dependencies constraints subproblems 
situations commitments going constrain specifications 
dn commitments specify constraints strategy identified progressive deepening natural emerge 
strategy involves making commitment subproblem pass commitments generate additional specifications undoing earlier commitments needed repeating process 
control issues 
sets control issues dealing sets decompositions choose step decomposition recomposition method order subproblems decomposition ought attacked step 
problem decomposition generally produce node 
decompositions node need solved decompositions node need solved 
finding appropriate decomposition requires search graph 
articles winter articles ai magazine er rule searches expensive 
domains multiple decompositions possible easily formalizable heuristics choose machine effective proposing alternatives human evaluating making selection 
routine design extensive searches spaces possible decompositions avoided limiting number possible decompositions choice point 
design hierarchies come domains problem sufficiently routine decomposition available choose selection point 
transformation methods balzer algorithm synthesis type decomposition method 
approach set highlevel specifications algorithm converted series programming language level commitments recursively mapping subsets specifications components commitments 
commitment typically constrain implementation commitments 
constraint search space possible transformations needed 
implemented transformation systems humans choose set alternative transformations design system 
regarding order subproblems decomposition attacked main constraint knowledge dependencies subproblems just discussed 
subproblems organized form design hierarchy default control top actual control complicated 
example component leaf level design hierarchy limiting component components subsystems designed component chosen 
part design process case appear bottomup flavor 
general appropriate control strategies come dependencies subproblems 
design plans 
special case decomposition knowledge design plan representing precompiled partial solution design goal rich johnson soloway mittal brown chandrasekaran 
design plan specifies sequence design actions take producing design part design 
design commitments design plan choices level primitive objects intermediate level design abstractions need refined level primitive objects 
example designing automobile design plan commit choice diesel engine power plant 
choice design proposal sense commitment diesel engine design specified detail stage posed subtask solved available methods 
design plan set design problems 
dn subproblems sense decomposition knowledge strong form process transforming main problem goals goals allocated subproblems method putting solutions subproblems back obtain solution original design problem directly encoded plan 
design plans indexed number ways 
possibilities design goal achieving goal plan component designing part plan 
goal component small number alternative plans attached additional knowledge helps choosing 
control inference issues plans similar general case decomposition alternate plans possible routine design design plan hierarchies emerge 
default control strategy characterized instantiate expand plan steps specify design parameters calls design plans 
choosing plan making commitments specific problem hand instantiation process calling plans specifying details portions expansion part 
number additional pieces information needed generated expansion process undertaken 
information dependencies parts plan need generated run time example discovering certain parameters piston need chosen rod optimizations discovered run time example base attach component attach component 
noah sacerdoti early example run time generation dependencies optimization 
design proposal case retrieval 
major source design proposal knowledge design case instance successful past design problem solving 
cases arise individual problem solving experience organization design firm design community 
cases episodic represent problem solving episode represent result abstraction generalization episodes 
design plans considered fairly abstracted versions numerous cases 
sussman proposes design strategy choose completed design satisfies constraints closest ones apply current problem modify design current constraints 
schank emphasizes importance case problem solving general 
case reasoning planning design hammond goel chandrasekaran explores family methods 
case reasoning correct designs obtained searching memory bank previous cases design solves problem similar current 
heart case design proposal matching choose design closest current problem 
clearly features cases important matching 
notion prioritizing goals difference ordering sense means analysis needed 
indexing cases rich vocabulary features case goals satisfies key idea case reasoning 
matching retrieval driven associative processes indexes 
case planning domain specific goals index cases 
problem designing engineering artifacts design cases need indexed terms output behaviors interest 
example goel chandrasekaran propose design cases indexed functions 
generally show cases indexed causal representation relates structure device function method indexing help retrieval 
goel proposal matching retrieval benefit principled representation design goals states device substances device operates 
case design proposal lot common analogical reasoning design 
maher zhao gero propose analogical reasoning design heart design creativity 
cases indexed causal representation relates structure device function 
design proposal constraint satisfaction 
fairly strong assumptions particular classes design problems formulated optimization constraint satisfaction algebraic equation solving problems 
common formulations solution lies space determined simultaneous constraints specific classes computational algorithms available directly locate space 
particular structure design specified parameters determined specifics design problem numeric symbolic optimization techniques useful design proposal 
linear integer dynamic programming techniques solve design problems formulated manner 
versions constraint satisfaction problem solved constraint propagation 
constraints propagated way component parameters chosen incrementally converge set satisfies constraints stefik 
formally design thought constraint satisfaction tempted propose global constraint satisfaction universal solution design 
knowledge reduce size space example decomposing problems smaller problems design constraint propagation computationally intractable 
knowledge decomposition create subproblems sufficiently small problem spaces constraint satisfaction methods excessive search 
verification verification involves checking design proposal satisfies functional specifications 
families methods subtask attributes interest directly calculated estimated means domain specific algorithms formulas example algebraic formulas articles winter articles ai magazine calculate total weight cost finite element methods calculate stress distribution 
direct calculation methods interest ai point view 
second behaviors interest derived simulation 
behaviors checked requirements 
simulation takes description system structure input generates behaviors interest output 
methods simulation mirror rules behavior component composed component properties 
quantitative simulation methods equations directly describe results composition 
equations domain specific 
example differential equations describe behavior reaction reaction vessel 
structural description proposed design reaction vessel translated parameters differential equation equation simulated derive behaviors interest 
generic ai techniques generating behavior structure useful simulation 
qualitative simulation see forbus survey current state art consolidation bylander functional simulation examples ai techniques available deriving behaviors structure 
proposed design simulated various input conditions behavior evaluated 
techniques take structural description input qualitative descriptions component behaviors rules composition mimic operation device produce qualitative descriptions behavior 
qualitative quantitative simulation alternate qualitative simulation identify behaviors unacceptable ranges focused quantitative procedure get precise values 
visual simulations 
visual simulation artifacts widely human designers verification 
designs imagined represented communicated pictorially domains architecture mechanical engineering 
see goel pirolli design protocol studies show prevalence images design 
clear need pictorial representations symbolic representations coexist design systems 
major representations simulation design proposals play role making design proposals analogy domains 
little ai research done date visual representations qualities needed pictorial reasoning imagination symbolic properties needed arbitrary referencing composition parts 
direction proposed chandrasekaran narayanan representations simulation discussed narayanan chandrasekaran 
critiquing critiquing subtask causes design failure analyzed parts structure identified potentially responsible unacceptable behavior constraint violation 
critiquing really generalized version diagnostic problem problem mapping undesirable behavior parts structure responsible behavior 
modification design directed candidates 
course localization responsibility failure entire approach design need changed 
needed criticism information structure device contributes intended contribute desired behavior 
ai method commonly subtask dependency analysis stallman sussman 
method applicable explicit information available form dependencies knowledge explicitly relates types constraint specification violations prior design commitments 
example total weight proposed design higher weight limit domainspecific knowledge usually available identifies parts weights sufficiently large adjusted 
dependencies discovered analyzing preconditions postconditions design operators 
example certain output value say voltage electronic device proposed design excessive input output stage give information components upstream contributed specific output 
dependency analysis identify potential candidates verified simulation 
proposals critiquing case reasoning literature domain specific critics variations precompiled patterns relating output behavior possible changes 
goel approach critiquing design proposal functional analysis proposed design 
design proposal task methods subtasks design propose critique modify family pcm propose verify critique modify propose decomposition methods incl 
design plans transformation methods specification generation subproblems solution subproblems generated decomposition set design tasks composition subproblem solutions specification generation subproblems case methods global constraint satisfaction methods numerical optimization methods numerical symbolic constraint propagation methods constraint propagation incl 
match retrieve similar case constraint posting simulation decide constraints propagate composition configuration methods simulation prediction behavior candidate subproblem solutions configurations verify domain specific calculations simulation qualitative simulation consolidation visual simulation critique causal behavioral analysis techniques assign responsibility dependency analysis techniques modify hill climbing methods incrementally improve parameters dependency changes function structure mapping knowledge add new functions design new function 
candidate design endowed causal indexes explicitly indicate relation structure intended functions relatively easy identify substructures modification goel chandrasekaran 
modification modification subtask takes information failure candidate design input changes design get closer specifications 
basically required changing functional subpart proposed design adding components proposed design satisfy design specifications 
depending informa tive failure analysis types knowledge available number problem solving processes applicable 
briefly outlined paragraphs 
modification driven form means reasoning differences reduced order significant 
especially useful knowledge relates desired changes behavior possible structural changes goel 
related search approach modification done form hill climbing 
method parameters changed direction improvement noted additional changes direc articles table 
task structure design 
task default compiled knowledge method domain specific knowledge directly achieve 
method included 
subtasks critiquing indicate families generic ai methods explicit indication subtasks 
winter articles ai magazine tion maximal increment measure performance 
method especially applicable design problem viewed parameter choice problem predetermined structure example dominic system dixon simmons cohen 
modification straightforward dependency directed methods 
dependency point reached backtracking alternative choice simply list finite choices available 
systems perform routine design problems explicit knowledge different kinds failures 
information attached design plans brown chandrasekaran 
criticism reveal need add new functions 
functions modularly added creating integrating separate substructures deliver functions design additional structures simply viewed new design problems solved methods available design 
subtasks generating specifications additional design problems integrating solutions discussed section problem decomposition solution recomposition 
discussion task structure task structure design described preceding sections summarized table 
task structure description task proposed methods internal external subtasks knowledge required methods control strategies method 
task analysis provides clear road map knowledge acquisition 
analysis integrate methods goals discussed section 
choice methods methods chosen various tasks 
set criteria properties solution methods produce answers precise produce answers qualitative 
produce optimal solutions produce satisficing ones 
properties solution process computation pragmatically feasible 
time take 
memory 
availability knowledge required method applied example method design verification require available description behavior device system differential equations information directly available generated additional problem solving method 
delineation methods properties helps move away arguments ideal methods design 
method task structure evaluated appropriateness situation asking questions reflecting criteria 
evaluation take place problem solving time done knowledge system designed evaluation guide knowledge system designer choice methods implement 
different types methods different subtasks 
example design system knowledge problemsolving method subtask creating design quantitative method finite element method subtask evaluating design 
implications architecture design problem solving multiplicity possible methods subtasks task task specific architecture exclusively design complete design generic activity generic method 
note subtasks simulation particularly specific design task 
knowledge modules embedded design architecture unavailable tasks require simulation subtask knowledge tasks need replicated 
building monolithic task specific architectures complex tasks useful architectural approach invoke different methods different subtasks flexible way 
ideas architectures support methods means special purpose shells help encode knowledge control problem solving 
approach immediate extension generic task methodology chandrasekaran 
methods combined domain specific manner methods subtasks selected advance included part application system methods recursively chosen run time tasks task structure clear ai methods numeric methods flexibly combined human designers alternate problem solving heads formal calculations 
criteria listed previous subsection 
approach architecture needed capability evaluating different methods choosing executing setting subgoals arise chosen method repeating process 
soar rosenbloom laird newell bb hayes roth tips punch candidates architecture 
approach combines advantages task specific architectures flexibility run time choice methods 
herman attempt precisely approach 
method specific knowledge strategy representations general architecture helps select methods set subgoals step adding flexibility advantages task specific architecture view 
limitations 
real world problems switching methods result control large grained 
consider earlier description pcm method 
method description calls specific sequence operators propose applied 
numerous variants method complex sequencing various operators appropriate different domains 
hopeless task try support variants architectures shells 
better long run task analysis guide identification needed task specific knowledge flexible general architecture determine actual sequence operator application additional domain specific knowledge 
subtasks flexibly combined response problem solving needs achieving finer grained control behavior 
see johnson chandrasekaran smith realizing generic task ideas soar 
task structure clear methods algorithmic numeric methods flexibly combined human designers alternate problem solving heads formal calculations 
example designer need sure maximum current proposed circuit limits components point set current voltage equations solve 
finds current branch circuit permitted limit go back critiquing design look possible places change 
task structure view outlined shows computer design systems similarly engage flexible integration problem solving forms algorithmic activity 
key top level control goal oriented set subgoals choose methods appropriate subgoal 
appropriate method subtask numeric algorithm method invoked executed point control reverts top level pursuing goals 
concluding remarks years number working systems come able perform version design task domain 
design proposals bring common different design tasks 
attempts develop formal principle algorithms design meant cover types design 
general algorithms computationally intractable particularly helpful identifying sources power tractability human design problem solving domains 
view elaborated generic vocabulary tasks methods part design design problems different domains simply differ mixture subtasks methods 
expertise methods knowledge control strategies emerge period articles winter articles ai magazine different domains help tractably solve task domain 
key understanding real world design computationally uniform algorithm design structure task showing tasks methods subtasks domain knowledge related 
analysis clarifies relationship architectures general purpose architectures knowledge systems 
acknowledgments ideas collaborations individuals way article david brown ashok goel design problem solving tom bylander john josephson todd johnson jack smith jon generic tasks 
am thankful john gero ashok goel mary lou maher dale david useful comments earlier drafts 
usual caveat holds don necessarily agree am saying article 
support air force office scientific research defense advanced research projects agency contracts gratefully acknowledged 
balzer 
transformation implementation example 
ieee transactions software engineering se 
brown chandrasekaran 
design problem solving knowledge structures control strategies 
san mateo calif morgan kaufmann 
bylander 
critique qualitative simulation consolidation point view 
ieee systems man cybernetics 
chandrasekaran 
task structures knowledge acquisition learning 
machine learning 
chandrasekaran 
generic tasks knowledge reasoning high level building blocks expert system design 
ieee expert 
chandrasekaran narayanan 
integrating imagery visual representations 
proceedings twelfth annual conference cognitive science society 
hillsdale lawrence erlbaum 
clancey 
heuristic classification 
artificial intelligence 
dixon simmons cohen 
architecture application artificial intelligence design 
proceedings design automation conference 
washington ieee computer society 
forbus 
qualitative physics past 
exploring artificial intelligence eds 
shrobe american association artificial intelligence 
san mateo calif morgan kaufmann 

knowledge experimental design molecular genetics 
proceedings sixth international joint conference artificial intelligence 
menlo park calif international joint conferences artificial intelligence 
goel 
integration case reasoning model reasoning adaptive design problem solving ph diss dept computer information science ohio state univ goel chandrasekaran 
functional representation designs redesign problem solving 
proceedings eleventh international joint conference artificial intelligence 
menlo park calif international joint conferences artificial intelligence 
goel chandrasekaran 
device models adaptation design cases 
proceedings darpa workshop case reasoning ed 
hammond 
san mateo calif morgan kaufmann 
goel pirolli 
motivating notion generic design information processing theory design problem space 
ai magazine 
hammond 
case planning viewing planning memory task 
boston academic 
hayes roth 
blackboard architecture control 
artificial intelligence 
herman 
high level language building design expert systems flexible multiple methods 
ph diss dept computer information science ohio state univ forthcoming 
johnson soloway 
knowledge program understanding 
ieee transactions software engineering 
johnson chandrasekaran smith jr 
generic tasks soar working notes aaai spring symposium knowledge system development tools languages 
menlo park calif american association artificial intelligence 
kelly steinberg 
critter system analyzing digital circuits propagating behaviors specification 
proceedings second national conference artificial intelligence 
menlo park calif american association artificial intelligence 

machine understanding devices causal explanations diagnostic ph diss dept computer information science ohio state univ mcdermott 
taxonomy problem ing methods 
automating knowledge acquisition expert systems ed 
marcus 
boston kluwer 
maher zhao gero 
creativity humans computers 
knowledge design architecture eds 
gero 
helsinki helsinki university technology 
marcus mcdermott wang 
knowledge acquisition constructive systems 
proceedings ninth international joint conference artificial intelligence 
menlo park calif international joint conferences artificial intelligence 
mittal 
generic model configuration tasks 
proceedings ninth international joint conference artificial intelligence 
menlo park calif international joint conferences artificial intelligence 
mittal 
pride expert system design handling systems 
ieee computer 
narayanan chandrasekaran 
qualitative simulation spatial mechanisms preliminary report technical report laboratory ai research ohio state univ newell 
reasoning problem solving decision process problem space fundamental category 
attention performance volume 
hillsdale lawrence erlbaum 
punch 
diagnosis system task integrated problem solver architecture tips including causal reasoning ph diss dept computer information science ohio state univ rich 
formal representation plans programmer apprentice 
proceedings seventh international joint conference artificial intelligence 
menlo park calif international joint conferences artificial intelligence 
rosenbloom laird newell 
soar architecture general intelligence 
artificial intelligence 
sacerdoti 
structure plans behavior technical report ai center sri menlo park calif schank 
dynamic memory theory learning computers people 
new york cambridge university press 
stallman sussman 
forward reasoning dependency directed backtracking system computer aided circuit analysis 
artificial intelligence 
steels 
components expertise 
ai magazine 
stefik 
planning constraints 
artificial intelligence 

automating algorithm design architecture general intelligence ph diss school computer science carnegie mellon univ 
mdx integrated medical diagnosis system ph diss dept computer information science ohio state univ sussman 
computational model skill acquisition ph diss massachusetts institute technology 
computational model skill acquisition 

new york american elsevier 
notes 
evolved number years 
earlier versions appeared chapter brown chandrasekaran research engineering design 



constraints described part design specification distinguished term constraint appears description design methods constraint directed problem solving 

article terms task goal interchangeably 

subscribe view algorithms simply degenerate cases search agent sufficient knowledge correct choice choice point 
pragmatically speaking best think algorithmic methods separate type implementing require search support general 

task structure described inherently incomplete additional methods identified subtask result research 
chandrasekaran received engineering madras university india ph university pennsylvania philadelphia 
research scientist ford blue bell pennsylvania working speech character recognition machines 
ohio state university columbus 
currently professor computer information science directs laboratory ai research 
currently major research activities knowledge reasoning architecture mind cognitive science 
chandrasekaran editor chief ieee expert serves editorial boards numerous international journals 
invited speaker international joint conference artificial intelligence held milan awarded university distinguished scholar award ohio state university 
fellow ieee 
articles winter 
