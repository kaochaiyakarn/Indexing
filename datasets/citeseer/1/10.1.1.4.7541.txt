high level tracker abstractions augmented reality system design machado coelho blair macintyre gvu center college computing georgia institute technology atlanta ga usa machado blair cc gatech edu argue ideal tracking system choice tracking technology ends crucial decision turn affects application development process 
claim tracker abstraction help application developer reason final result tracker uncertainty registration error source necessary new class applications conform heterogeneous tracking environment developed 
introduce method achieve intended result 
augmented reality ar application design usually follows steps specification application requirements definition tracking technology application implementation 
application designers choose convenient tracking system cheap gps access purchase cheapest closely satisfies application requirements 
choosing tracking technology figures prominently current ar system design ideal tracking technology ones available vastly different conflicting characteristics 
example high accuracy trackers currently expensive typically cover small area cheaper wide area trackers typically lower accuracy 
implication need tradeoffs choosing tracking technology application development guided limited underlying constraints chosen tracking technology 
tight binding specific tracker may happen unconsciously 
example laboratory invests tens thousands dollars specific tracking system naturally tend design applications constraints tracking system 
approach works reasonably applications naturally match characteristics existing trackers 
example trackers provide fairly constant level accuracy small fixed space matches needs applications medical procedures maintenance training tasks 
interesting ar applications different requirements different times locations especially operate longer periods time large areas 
examples include maintenance large factory floors machines military policing applications emergency response wide area entertainment 
furthermore application environments reasonable assume capabilities tracking system may change time intentional accidental damage environment implying applications adapt changes tracker characteristics possible times 
research focus developing capabilities deal multiple trackers priori knowledge characteristics trackers developing algorithms necessary estimate registration error virtual physical objects real time designing program structures help application appropriate augmentation situation 
rest structured follows section ii discuss necessity consequences tracker abstraction 
section iii discusses registration error estimates computed 
section iv uses estimates conclude section brief description current 
ii 
abstraction layers believe applications heterogeneous tracking characteristics require higher level tracker abstractions currently available properly designed implemented deployed 
fundamental characteristic abstractions support application developer deal changes tracking quality 
believe abstractions simplify creation ar applications making dependent characteristics currently available tracking technology able adapt newer technologies available 
software engineering viewpoint properly designed abstractions encourage application developers focus want applications behave various tracking conditions explicit assumptions affects tracker accuracy application 
view tracker abstractions ar applications analogously window systems desktop applications 
prior creation general purpose hardware independent windows systems windows application developers built applications intimately tied specific pieces graphics hardware 
allowed developers squeeze maximum amount performance specific set hardware locked application hardware intertwined application requirements design choices characteristics hardware blurring reason specific choices behaviors 
application behave way want hardware forced 
advent systems systems provide wide range software engineering benefits performance portability especially consider various toolkits built top 
summarize benefits widely written 
associated libraries toolkits allowed applications built independently specific hardware 
powerful hardware available applications recompiled especially written way reacted speed power hardware 
porting new platforms support window system trivial 
believe ar applications written top properly designed tracking abstractions 
separating application specifics individual trackers applications better able leverage new tracking technologies available adapt changing tracking conditions running maintained understood easily tracking assumptions clearly identified application 
device independence libraries built years vr ar system provide basic level tracker abstraction unc chapel hill example 
goal libraries typically allow application receive tracker reports standardized format independent tracker generate readings allowing applications ignore low level details communicating different tracking technologies 
believe lowest level abstraction enhanced number ways 
tracking system provide details characteristics tracker range operation number sensors 
second system provide details estimated accuracy tracking measurement 
information allow developers create applications adapt changing tracking characteristics 
argued precise estimates accuracy trackers impossible obtain clear application developers implicitly explicitly incorporate accuracy estimates applications 
may published accuracy numbers tracker experiment hardware determine accuracy 
incorporating estimates best case black box estimates easy developing better estimates runtime knowledge tracking system possible cases 
example vision fiducial tracking system estimate accuracy camera pose accuracy camera calibration optical angle pixels computed position orientation fiducial tells system accuracy real world position fiducial feature points compute camera pose 
intuitive way tracker information available application developer estimate registration error associated objects augmented 
think approach effective allows application developer focus effect cares misalignment object real world computer generated graphics opposed causes registration error tracker uncertainties inaccuracies hard reason directly 
consequences envision applications tracker abstraction layer able automatically reconfigure deal loss tracker discovery new tracking system available 
instance consider scenario mobile ar application uses differential gps vision tracking system hybrid tracking system track person head 
user outdoors differential gps receives information satellites base station 
camera captures artificial marker vision system computes camera position relation marker fiducial available vision tracker 
system active carried receivers range stationary emitters 
user begins outdoors 
application receives information gps system information available vision system 
person enters building gps tracking system longer 
region building equipped artificial markers vision system start working application receive reports 
user approaches region equipped emitters system start working application reports vision system 
scenario application deals different tracking systems discovers new trackers loses user moves 
having capabilities allow development new class ar applications emergency response military maintenance discussion usually trade abstraction performance levels abstractions added performance may negatively impacted 
augmented reality applications demanding respect performance 
ideally ar application receives tracking updates rate refreshes display update reports precise location attitude tracked object moment display refreshed 
realistically various delays exist acquiring tracking measurement rendering computer generated graphics 
longer delay bigger registration error 
important notice analogy windowing system break may want willing trade speed elegance 
abstraction vs performance important issue dealt adding levels abstraction ar system 
instance application designed different components 
component responsible visualization completely independent component tracking 
approach provides reasonable level abstraction independence 
components may developed separately teams specialize part responsible allowing better system 
developed properly may severely compromise performance point computer generated graphics augmentation lags real world 
tightly integrated system uses tight loop update tracker reports render computer generated graphics exhibit misregistration due lag fig 

example registration error estimation 
system highlights building windows outlining areas screen objects occupy 
outline created growing convex hull estimate registration error 
simple computer model building shown clarity 
model registered world intended objects fall highlighted areas screen 
render scene final head position calculated 
downside approach application drop frames keep visualization lag user movements 
iii 
trackers registration error basic abstractions device independence important part allowing application developers create ar systems intimately tied trackers allow application access tracker report characteristics 
mentioned believe giving application developer estimate registration error permit better control final graphical result improving user understanding situation 
exposing registration error intuitive powerful final effect application developer interested simpler understand deal actual errors affecting tracker quality 
system lag absolute pose error 
variety reasons application developers difficulty dealing multiple trackers directly estimating registration error underlying causes registration errors time varying depend user current location activity 
example noise magnetic trackers increases distance transmitter 
accuracy systems rely beacons passive active depends number beacons visible configuration 
issues affect systems ranging gps satellite effect moving active beacon sonar navigation systems optical systems 
property systems position orientation errors frequently correlated errors correctly modeled independently 
causes errors may understood difficult impossible correct quantify example presence metal magnetic fields radically affect direction reported magnetic compass magnitude error easily detected 
effects errors function distance object observer object moves away effects position related errors diminish angular errors 
computing registration error nested transformations complex time consuming properly implemented 
dealing intrinsic characteristics tracking systems difficult understand model applications deal heterogeneous tracking systems required handle simple task interfacing systems 
increase system complexity caused system need keep track tracking system active ones reach moment 
think providing application developers framework compute registration error estimate allow develop complex applications free burden dealing trackers characteristics directly 
tracker report important part dealing tracking reports understand correspond precise pose object tracked point highest probability 
result possibility data wrong 
propose tracker reports treated absolute description pose location attitude object tracked simplification 
tracking report modeled probability distribution function pdf 
tracking report received system mean pdf singular point space 
accuracy tracker encoded covariance gaussian distribution giving programmer relatively simple expression location tracker accuracy form reasoned 
gaussian model simplification clear possible measure quantify actual statistical characteristics tracking systems 
consistent pdf representation approximate tracker reading allows relatively sophisticated methods reason effects tracker accuracy information available application developers 
sections method estimate registration error tracker reports modeled gaussian distributions 
techniques proposed estimates improve quality augmentation user quality interaction 
estimation registration error estimating registration error object complex problem 
similar easier problem estimating registration error point 
pdf error characterization tracker reports feasible problem solved statistical tools unscented transform 
unscented transform compute ellipse screen corresponds registration error region point 
calculate registration error object compute region vertex geometrical representation object aggregate 
propose aggregation methods depending application wants access number region representation registration error estimate 
produce numerical representation maximum main axis aggregated 
produce region representation error estimate polygonal representation screen ellipses aggregated computing convex hull points 
framework estimating registration error objects consists steps estimating registration error vertices polygonal representation object aggregating estimates objects follows object augmented construct list vertices 
calculate vertex statistical properties registration errors 
particular calculate mean covariance registration errors point 
aggregate values computing max main axis want numerical representation computing convex hull covariance ellipses computed previous step want region 
convex hull vertices object approximate silhouette object reasons 
convex hulls computed quickly fast algorithm compute external contour object arbitrary view point 
second compute silhouette quickly uses envision information benefit significantly accurate nonconvex silhouette algorithms implement significantly complex non convex polygon 
exact contour useful want render silhouette complex object uses get better results having programmer break concave object collection convex parts iterative algorithms multiple parts 
iv 
applications registration error estimate estimate registration error provided application application developer information improve perceived result 
uses registration error estimate include design different graphical representations augment object registration error estimate level error 
estimate compute region object guarantee augmentation block view object region guaranteed inside object 
determine regions guide user interaction 
sections iv iv examine techniques detail 
level error registration error estimates choose available augmentations object 
application developer designs different graphical representations augment object 

system real time choose appropriate augmentation circumstance 
idea similar detail approach commonly computer graphics 
consider example scenario maintenance worker responsible verifying status heavy machinery factory 
factory equipped low accuracy tracking system entire floor high accuracy tracking system region machine located 
person enters factory system may display high level information machine located ft person stands 
text message drilling tool far right needs maintenance displayed attempt spatially superimpose graphics top machine registration error big 
maintenance person approaches machine consequently registration error reduced allowing graphical augmentations system automatically replace textual augmentation low resolution graphical representation machine 
detailed augmentation provided maintenance person gets closer machine 
build application scenario necessary application developer provide fig 

expansion adds neighboring points distance smaller radius kernel direction 
contraction removes points closer radius kernel 
augmentation object augmented registration error ranges augmentation 
underlying structure needs able compute real time registration error associated object choose appropriate augmentation 
bounding regions important issue ar screen place augmentations block view objects user cares 
bell revisited idea user interface management systems uims automatically manage augmentations positions screen 
able needs know portion screen occupied object 
help task regions computed follows inner region determined removing points inside original geometrical model distance border estimate 
region guaranteed inside object augmented 
instance place labels buildings 
outer union inside model plus points distance estimate point inside original region 
object guaranteed inside regions 
application wants display graphics block object compute outer object place augmentation outside area 
regions computed contracting expanding original bounding volume estimated registration error kernel operations 
operations similar morphological operations dilation erosion 
see 
interaction common interaction task probably important ar object selection task 
interest direct interaction user points directly object select fingers hand indirect interaction intermediate device mouse stylus track ball select object 
help user interact system sure system receiving input user intended increase size pointer rearrange augmentations screen depending registration error expected 
estimate registration error compute region object previous section iv 
region corresponds projection space object guaranteed confidence interval specified 
outer region target user interaction 
system computes intersection region associated object region associated input data provided direct indirect interaction 
current test ideas currently extending open source scene graph allow underlying structure develop ar applications support heterogeneous tracking systems 
original scene graph added support ar trackers fiducial finding video mixed optical see uncertainty transformations 
additions derive decision 
instance registration error estimator traverses relevant nodes computes estimate registration error 
added higher level building blocks leverage estimates 
example level error nodes extension switch nodes choose child error estimate 
acknowledgments supported siemens gvu industrial affiliate onr 
motion tracking requirements technologies 
lawrence erlbaum associates ch 

holloway registration error analysis augmented reality presence teleoperators virtual environments vol 
pp 
august 
azuma orientation tracking outdoor augmented reality registration ieee computer graphics applications vol 
pp 

uhlmann simultaneous map building localization real time applications university oxford tech 
rep transfer thesis 
julier uhlmann durrant whyte new approach nonlinear transformation means covariances linear filters ieee transactions automatic control vol 
pp 
march 
macintyre coelho adapting dynamic registration errors level error loe filtering international symposium augmented reality isar oct 
bell feiner view management virtual augmented reality acm symposium user interface software technology nov 
macintyre coelho julier estimating adapting registration errors augmented reality systems ieee virtual reality vr march 
