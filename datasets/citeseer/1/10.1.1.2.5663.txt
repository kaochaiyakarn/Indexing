building dynamic interface presentations example pablo castells de universidad de madrid pablo castells ii uam es current foreseeable trends computer technology usage call increasingly flexible sophisticated interactive software development graphical user interfaces guis remains complex costly process 
effort involved interface construction partially alleviated complementary graphical editors visual tools 
visual builders save time require little knowledge developer help improve quality displays 
tools know today confined construction static portion interface presentations provide little support dynamic aspects displays dynamic behavior programmed toolkits special purpose libraries 
main reason level abstraction visual languages tools provide low hand favors ease hard specify procedural information 
research aims extending expressive power existing visual tools construction resorting written programming language significant range non trivial dynamic displays 
model approach internal representation constructed displays models support dynamic presentation functionalities developing extended visual language incorporates abstractions programming example techniques interactive specification dynamic presentations manipulating concrete presentation objects visual environment 
ideas carried gui development tool tool building neat display structures working examples interactive construction presentation models 
state art hardly conceive gui development nowadays aid graphical editor sort 
interface builders ones included programming environments microsoft visual basic visual borland delphi symantec visual cafe allow construction interface presentations drawing program predefined interface components buttons menus scrollbars checkboxes selected palette dragged working area inserted containing components windows panels moved resized aligned 
constructed visual representation tool generates actual code executable interface 
tools extremely easy accounts popularity pointed support small part full working interface 
visual languages tend suited description static shapes declarative information hard obtain dynamic behavior procedural specifications way 
systems field programming example shown possible overcome limitations interface builders including inference capabilities domain knowledge possible build abstractions manipulating concrete objects 
developer builds examples desired result system generates full programs generalizing examples inferring developer intent 
results achieved date tend lack reliability required wide implantation gui technology 
believe key aspects system workable avoid hiding relevant information user results lack control 
difficulty resides finding appropriate form convey information 
high level systems model tools generate sophisticated interface features high level description model visual characteristics interface application data tasks performed user 
building interface developer builds declarative model system generates final interface 
tools hard require learning particular specification language understanding non trivial concepts 
tools complemented graphical editors interaction developer tends menus 
carrying kind complex underlying concepts mechanisms systems intuitive visual environment difficult problem general 
system overview takes underlying presentation model previous mastermind 
model language conceived easily amenable interactive specification bridges gap declarative descriptions obtained graphical tool procedural information needed execute interfaces described model 

model construction interface generation development environment consists graphical presentation editor application data builder see 
create examples application data construct visualize presentation models 
developer uses data examples provide values design time construction interface presentations structure appearance depends application data run time 
interface builder presentations built working representation similar final resulting interface 
developer constructs presentation components editor selecting graphical primitives widgets catalog predefined components 
presentation model interaction developer direct manipulation working presentation model compiler graphical tool 
environment general object oriented data model application data builder allows developer browse classes defined application create objects classes fill object attributes example data connect data graphical components presentation 
data examples keystone specifying presentation structures introducing new unintuitive awkward visual notations 
building generic display developer constructs specific displays specific data system generates constructs generalizing examples 
data examples provide developer concrete objects refer provide system information uses infer developer intent 
final interface display generated example values give rise placeholders store real application data runtime 
presentation design example infers presentation constructs response developer actions 
doing system analyzes information contained model constructed far examining value types structural properties data spatial relationships presentation objects context information describing developer visualizing handling data examples top level application object displayed data builder part class hierarchy time performs action 
inferred constructs include data flow application presentation form directional constraints iterative presentations associated collections variable amounts data conditional components sensitive data presentation platform characteristics recursive presentations recursive data structures 
constraints presentation properties defined moving snapping object borders pointing dragging object parameters presentation application models 
includes demonstrational mechanism editing constraints providing different examples constrained values appropriate constraints induced 
iterative components defined constructing example component replicated example data sequence 
dragging value sequence component confirmation system creates copy component value contained data set associating values replicas 
modify characteristics replicas object needs manipulated 
similar mechanism 
constructs defined similar principles 
order give developer appropriate level control editor provides times complete feedback developer operations operations performed system effects 
information place introducing necessary virtual manipulable objects labeled rectangles parameters arrows constraints consistently integrated environment selected moved avoiding possible property sheets extraneous elements force developer design constructed 
combines expressive power model system ease programming example tool 
techniques benefit model paradigm model provides explicit declarative representation interface tool reason 
relatively small set visual language primitives allows construction significant class interface presentation constructs supported current tools 
balance expressive power ease achieved keeping limited amount complexity model abstraction developer deal mapping underlying model abstractions visible presentation objects reducing mental transformation effort required developer different representations interface 
castells szekely 
declarative models presentation 
proceedings international conference intelligent interfaces iui 
orlando florida pp 

castells szekely 
presentation models example 
design specification verification interactive systems duke puerta eds 
springer verlag pp 

cypher ed 
watch programming demonstration 
mit press 
myers 
user interface software tools 
acm transactions computer human interaction vol march pp 

szekely luo neches 
interface builders model interface tools 
proceedings interchi april pp 

wiecha bennett gould greene 
tool rapidly developing interactive applications 
acm transactions information systems july pp 

