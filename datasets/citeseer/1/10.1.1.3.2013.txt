maintaining program understanding issues tools directions thomas kurt department computer science aalborg university denmark cs aau dk cs aau dk 
understanding program key aspect software development 
understanding prerequisite initial development efforts 
concerned challenge maintaining program understanding purpose supporting phases program life time 
approach maintaining program understanding document decision rationales program informal textual explanations internal documentation 
starting point particular paradigm program documentation program called programming 
contribution key documentation issues identified basis experience programming 
documentation motifs represent thematic elements software typically transverse structure source program files 
documentation proximity characterizes distance documentation program 
documentation occasions temporally situations capturing formulating understanding program 
years large number documentation tools developed 
second contribution number contemporary documentation tools reviewed 
tools selected basis relevance key documentation issues relative common attention interest particular tool documentation communities 
final contribution number directions challenges outlined 
widely acknowledged kind software development deep comprehensive understanding problem programmed solution 
nygaard founder object oriented programming quoted stating briefly program understand 
newly developed software analysis design activities seen means establish understanding necessary initial implementation solution 
purpose maintaining existing software thomas kurt understanding regained costly studies source code 
typically written program understanding maintained initial analysis design documents inconsistent current state software 
may fact case initial program understanding forgotten regained times 
years oriented documentation approach called programming ep 
ep textual documentation connected existing source programs side side source programs web browser 
ep takes stand maintaining program understanding written documentation associated normal program source files 
ep respects inspired literate programming lp 
lp necessary organizes pieces program source files constituents documentation 
contrast ep connect documentation existing source files 
today landscape programming languages development tools unrealistic ask major reorganization main software artifacts due documentation concerns 
written program documentation seen investment intended paid back life time program 
case investment large due creation large amounts program documentation chances investment pays back 
documentation investment done cost program understanding increase dramatically 
little known optimal investment strategy 
maintaining program understanding complicated fact changes program leads changes understanding program 
program understanding means static life time program 
may costly keep program understanding date version program 
clear worthwhile invest keeping program understanding date 
original document valuable circumstances reflect exact status program 
may case understanding program development history important understanding version program 
initial phase program development natural focus understanding version program 
focus may shifted understanding way program changing contrast understanding version program 
design decisions program development help programmers understand current state program 
abandoned design ideas helpful programmers attempt gain understanding program 
dream researchers area program comprehension program documentation course invent technique solves maintenance program understanding problem 
aware breakthrough may find worthwhile area 
due large amount money involved software maintaining program understanding issues tools directions maintenance modest contributions improvements worth efforts 
section key issues regarding maintenance program understanding 
issues important programming 
argue issues central program documentation 
number contemporary documentation tools emerged scene years 
tools described discussed 
section characterize tools relate key issues raised section 
tools addressed web pas theme literate programming tool leo 
addition compare tools literate programming tools 
discussions key issues contemporary tools attempt set scene area program documentation 
key documentation issues area program documentation broad multifaceted 
purpose contracting spreading discussion key documentation issues section 
issues conceptualized documentation motifs documentation proximity documentation occasions 
subsections explain discuss issues 
addition argue find issues particular importance area 
documentation motifs define documentation motif formulated understanding thematic element piece software 
meaning phrasing term clearly emphasizes metaphoric impact music art 
documentation motif may may manifest source program typically 
documentation motif may represent holistic understanding scattered parts program add contribute single concept program 
example datatype represented scattered fragments program may represented documentation motif 
documentation motif may represent understanding certain relationships parts program 
chain procedure calls crucial algorithmic aspect program may serve example documentation motif 
instances design pattern represent example documentation motifs 
argued need explicitly merriam webster dictionary motif usually recurring salient thematic element arts especially dominant idea central theme single repeated design color 
thomas kurt maintain design decisions recording documenting instantiations design patterns 
traces may seen documentation motifs 
traces traceability links connect elements requirements design subsequent models source code 
documentation motif may represent understanding observations arguments certain qualities program affected fragments modules 
instance understanding important critical efficiency aspect elevated documentation motif 
program adheres specific set requirements 
requirements considered documentation motifs direct impact program locations 
similarly understanding re usability concern scattered different pieces large program seen documentation motif 
notion documentation motif mainly refers non local thematic elements involves program code spread piece software 
documentation motifs seen informal way representing aspect oriented program aop 
documentation motifs purposes may particular useful programs written ordinary non aop languages 
documentation motif maintain understanding specific application domain concept 
rajlich wilde overview role concepts program comprehension 
see documentation motifs general notation rajlich wilde documentation concepts 
rajlich wilde vision role concepts mainly oriented mapping domain concepts relevant fragments program 
documentation motifs may include kinds knowledge program domain concepts documentation motifs oriented explaining program parts 
ideal preserving understanding program commonly accepted frequently unclear parts understanding documented 
words question kind insight incorporate documentation 
realistic desirable documentation explain aspect detail program 
recommend relatively small number documentation motifs selected documentation motifs bulk total program documentation 
documentation terms selected documentation motifs may represent essential insights program number different overlapping perspectives 
boosting documentation motifs documentation large oriented transverse program understanding directly deducted program code 
literate program seen particular sequence documentation motifs motif represents knowledge named group program statements 
original ideas literate programming allow multi understandings mutually overlapping 
theme literate programming proposed remedy limitation maintaining program understanding issues tools directions 
theme literate programming tool discussed section 
programming conception suited support documentation motifs 
programmer free structure documentation selected motifs 
documentation motif represented paragraphs typically matter writing style includes number links natural constituents individual sentences 
seen program side program holds information documentation motifs abstractions classes methods contributing 
documentation proximity value documented program understanding critically depends availability documentation relation program source files 
issue documentation proximity characterizes distance documentation documented entities 
documentation proximity affects ease finding relevant documentation program part updating documentation program changed qualities documentation program development tools 
distance documentation program fragments metric measured different ways 
order enhance value availability documentation usually seek arrangement documentation program source files stay close proximity 
physical documentation proximity denotes situation documentation weaved kept close relevant parts program source files 
physical proximity documentation represented comments source code 
may lead style self documenting code described brooks 
main rationale physical documentation proximity expectation documentation available needed programmer simply plain view 
evenly important usually hypothesized documentation nearby relevant program fragments updated program updated 
large amounts textual comments physical proximity source program easily lead programs 
problem may deteriorate diagrams graphical elements allowed annotations source program 
importantly stated section documentation motifs important programmers pertain relationships different program units 
code comments local specific point program suitable explain relationships program 
literate programming relies physical documentation proximity 
compared notion self documenting code literate programming reverses merriam webster dictionary proximity quality state proximate proximate immediately preceding near 
thomas kurt roles comments programs 
leads arrangement program fragments located constituents program explanations 
due programming language documentation language notation separating problem literate programming profound 
particular aspect literate programming referred syntax problem 
documentation program libraries interface documentation style javadoc relies physical documentation proximity 
elements interface documentation close proximity documented abstractions 
interface documentation usually arranged program comments typically written special purpose markup vocabulary 
difficult combine physical documentation proximity multiple documentation motifs 
literate programming coined knuth supported different web systems strictly oriented sequence documentation motifs forming essay program 
psychological ordering source code fragments textual explanations chosen author order changed rearranging rewriting large portions literate program 
navigational proximity represents situation documentation program located different documents connected navigational measures 
navigational proximity distance documentation program units measured terms interaction steps involved navigation units 
navigational proximity calls special support development tools browsing tools 
consequence updating documented program understanding particular concern 
navigational proximity easily coexist multiple documentation motifs physical proximity 
documentation motif form documentation unit linked relevant program fragments 
mentioned links navigational basis forms proximity 
match multiple documentation motifs navigational proximity driving force promotion programming 
non physical proximity important augment tools programming environment 
realistic locate relevant documentation possible remind programmers existence relevant documentation 
documentation occasions documentation occasion defined situation programmer gained understanding program potentially relevant maintain 
programming task number occasions writing merriam webster dictionary occasion favorable opportunity circumstance state affairs provides ground reason occurrence condition brings need arising particular circumstance 
maintaining program understanding issues tools directions documentation updating existing documentation 
stated roughly occasions programming task performed 
ideally writing documentation considered cycle starting code written concluded code written 
obviously common approach 
studies show documentation seldom changed program changed 
documentation written programming contribute maintained program understanding different ways 
documentation written coding includes sketches code design descriptions context part program written programming task hand 
example problem solve requirements conditions witch program part 
documentation written programmer forced think carefully code written 
helps ensuring correctness chosen solution affect code quality performance flexibility 
claimed programmers adhering literate programming evidence anecdotal 
programmers extreme programming aim ensuring correctness chosen solution writing units tests program code written 
tests seen representation specification understanding programming task 
similar way design contract seen way specify preserve understanding program 
programming tasks best done doing 
writing documentation coding programmer ensure existing documentation reflects current program previous versions 
addition switching programming writing documentation programmer forced think carefully current programming task keeping program right track 
aspects program really understood programming task completed 
real final understanding established performing programming task 
solutions problem understood programming done 
rationale programmer able produce explanation solution reasons solution 
writing documentation fact requires programmer carefully reviews new code order ensure important implications decisions forgotten 
programmers lived program long time tend take decisions rationales granted 
legacy software lacks proper documentation 
maintenance programs involves costly error prone program understanding 
process writing documentation program completed termed re documentation 
goal re documenting thomas kurt program recover program understanding maintenance easier 
argued need documentation specific parts program user driven prompted needs 
documentation occasion extreme variant documentation 
programmers may instance internet ask questions program code 
developers programmers answer question update documentation question 
argued approach particular open source projects 
conjecture user driven documentation demands able just larger teams programmers collaborate longterm software projects 
general documentation need pushes occasions writing documentation concrete question program asked programmers start debating actual source code 
survey programmers forward lethbridge need real world software development tools support lightweight documentation 
lightweight documentation everyday documentation easy create easy maintain 
lightweight technologies enable quick efficient means communicate ideas pictures whiteboard session taken digital camera enable reader feedback simple 
reader feedback important issue 
mentioned temporal aspect documentation program understanding history program 
literate programming tools directly provide means maintaining program history 
may possible maintain kind differential documentation describes changes program rationales changes 
difficult re establish particular version program documentation support version control system 
contemporary documentation tools documentation tools support assist programmers handling documentation 
documentation tools integrated program development environment separated program development tools 
number documentation tools produce documentation supposed accessed world wide web resource 
support documentation motifs put specific requirements documentation tools 
possible annotate specific parts program group explanations relevant fragments program 
documentation approaches navigational proximity call special support documentation tools 
particular updating documentation program changes realistic supported documentation tool 
furthermore documentation tools restrain maintaining program understanding issues tools directions documentation written 
documentation tools support writing documentation different occasions needed 
literate programming tools web family cases noninteractive batch oriented separate program development tools non integrated 
exceptions literate programming environment introductory programming churcher 
generation programming tools scheme java characteristics similar original literate programming tools 
elements programming implemented integrated integrated development environment java 
cover landscape documentation tools 
tools documentation early software development phases uml modeling related tools considered 
forthcoming sections focus documentation tools different categories tools popular widespread addressed academic context 
tools particular interest relative documentation issues raised section 
structure discussions tools interface documentation tools internal documentation 
interface documentation tools interface documentation aims describing conditions restrictions interaction program unit 
documentation general explanatory nature program unit interface documentation fulfills need precise documentation spells way program unit may clients 
interface documentation essentially separate resource maintained manually generated automatically source program code 
developers eiffel libraries automatic extraction interface documentation eiffel classes 
interface documentation eiffel libraries intended printable resources 
advent java interface documentation javadoc tool line resource allows easy global sharing 
today numerous variants documentation tools unique features automatically generating documentation 

interface documentation tools appeared programming community advent javadoc 
differs javadoc general documentation tool offers highly configurable features 
supports different programming languages java objective idl exits add ons range additional languages 
furthermore produce web documents printable documents 
printable documents generated latex rtf documents man pages 
thomas kurt implies allows embedded latex formulas code comments documentation blocks 
produce xml documents enable programmers define resulting output xsl stylesheets 
web documents html files structured similar fashion javadoc page generated class includes documentation class members 
components program documented major abstractions fields global variables methods functions classes enumerations structs 
documentation embedded program code comments structure special documentation tags 
code comments internal component body selected inclusion documentation component 
allows grouping components create module structures documentation structures source code 
possible group members class file fields methods 
example possible group get set methods class 
kinds groups associated name 
provides option linking defined name program documentation grouping order form documentation motifs form documentation motifs transverse program structure 
speciality extract pretty print source code resulting documentation 
defined names source code marked linked relevant documentation particular component 
furthermore inter operate graph drawing tool order generate inheritance diagrams 
main occasion writing interface documentation time class member function field method defined 
producing interface documentation rich features extract code structure source code documented 
means outline tool help programmers get overview program 
re document program order maintain reestablished understanding program 
perform re documentation manner web pas see 
documentation embedded source code entities physically proximity 
price pay grouping feature mentioned 
syntax grouping voluminous render source code 
re documentation web pas 
partitioned annotations software pas hypertext notebook programmers record understanding program 
understanding stems programmers observations existing program 
pas supports programmers incremental re documenting programs 
resulting documentation studied web browser 
maintaining program understanding issues tools directions pas divides program components classes functions dependencies function arguments 
component associated annotation explains particular component 
annotation divided number partitions 
partitions classes example domain annotation class dependencies dependency annotation authors comments member functions 
partitions created needed 
division program components partitions automatically generated 
job programmers fill partitions annotations explaining text 
components program nodes tree 
root annotations classes span child nodes 
actual source code represented child nodes annotations 
browsing programmers move hierarchy follows hierarchical structures program 
option documenting motifs transverse program structure 
structure documentation strictly follows program structure 
addition browsing facilities include source code option navigating source code relevant documentation 
documentation program physically separated 
consequence documentation secondary product danger forgotten time 
intended occasion writing documentation potentially long time program completed 
pas suited writing documentation programming 
parsing tool pas hms offers support adding deleting annotations partitions program changes program components defined documentation written 
internal documentation tools internal documentation commonly term documentation aimed maintaining understanding actual program code 
usually internal documentation involves writing program intent explain details program order maintain understanding program works 
different internal documentation tools today 
literate programming represented web family tools radical approach internal documentation 
literate programming set supporting tools inspired tool developers 
programmers consider original ideas literate programming unfit modern software development 
idea writing program fundamental modern tools internal documentation 
selected tools mentioned previous sections couple section describe additional tools represents novel approach internal documentation 
theme literate programming 
theme literate programming introduced means creating different paths thomas kurt chunks literate program 
paths chunks called themes 
themes allow creating sequences documentation motifs example different audiences different purposes transverse program understanding explaining patterns aspects concepts 
path corresponds weave operation current tool provides theme author options configuring resulting presentation 
addition tangled program considered theme 
contrast traditional literate programming chunks limited code documentation 
new chunk types defined needed chunks figures diagrams unit tests 
additional contrast chunk types nested 
theme literate programs explored created special tool 
tool provides facility browsing themes editing contents individual chunks theme 
available chunks stored common repository repository chunks assigned relevant themes 
occurrence chunk theme stored chunk repository 
furthermore tool contains integrated version control system allowing themes refer specific versions chunks 
program documentation close physical proximity chunks theme chunks repository 
presentation theme contains physically interleaved documentation source code just traditional literate program 
explanations source code chunk able fit different contexts themes 
chunk self contained self explanatory 
kind explanations difficult produce situation worse smaller chunks 
essentially supports literate programming occasions programmers ideally write documentation coding 
chunks created coding chunks hold actual source code 
leo literate editor outlines 
leo tool supports literate programming pragmatic fashion 
leo part operated graphical user interface 
leo literate program outlined tree nodes 
node represents section chunk displays chunk name 
sub nodes contain body chunk names defined parent node 
way leo outlines provides overview literate program 
leo allows cloning nodes 
cloned node copy node entire sub tree nodes 
clone changed node contents edited nodes added deleted moved change mirrored clone 
example possible create documentation motif transverse program structure adding relevant clones node containing explanation documentation motif 
leo provides vast range convenience features structuring managing outlines 
gui allows moving nodes outlines natural way drag drop leo provides number commands re maintaining program understanding issues tools directions structuring outlines 
addition leo provides support programming languages form syntax highlighting 
program documentation close physical proximity relative 
addition leo provides tangle command exports defined files vice versa 
exported files contain redundant information code comments enables leo import files modified tool 
means programmers restricted limited programming environment leo provides 
leo put specific temporal requirements writing documentation 
occasion documentation written code chunks form nodes created prior coding 
directions challenges efforts years oriented evolution investigation programming 
far identified key issues find particular importance maintenance program understanding 
part characterized discussed issues 
argued section navigational proximity easily coexist multiple documentation motifs physical proximity 
due observation continue advocate programming alternative approaches documentation program physically intertwined 
appears discussion section language independent tools play important role area program documentation 
language independence important programmers limit single programming language software projects involve programming language 
due nature programming required knowledge programming language 
challenge area programming develop approach enables addressing programs fashion uniform programming languages 
step attractive provide generalized markup programming languages style 
little done integrate version control mechanisms documentation tools 
argued section knowledge program evolution important documentation aspect 
challenge investigate support maintenance understanding current program previous versions program 
major goal involving older program versions enable documentation program evolution 
programming may call versioning relations documentation program source code 
known area hypertext versioning links relationships particular tricky difficult area 
part versioning support tools needed management version scheme appropriate thomas kurt tions versioning information help programmers comprehend level information 
documentation tools general support different documentation occasions 
definitively provide tools help programmers writing documentation programming 
pointed section documentation created need re documentation purposes scope documentation tools 
documentation written late development process lack important information programmers time forget decisions rationales 
documentation written programming process programmers may problems identifying aspects relevant maintaining program understanding 
remedy challenge effort put identifying describing documentation motifs line documentation patterns 
go efforts put investigating options automatic generation templates knowledge documentation motifs 
involves identification process difficult realize fully automatic process 
semi automatic approaches involving input programmer unexplored options documentation support 

requirements programming environment 
international workshop program comprehension ieee 
andersen christensen kumar pedersen rensen programming java 
proceedings eighteenth annual international conference computer documentation ieee educational activities department 
programming 
nordic journal computing 
programming home page available www cs auc dk programming 

aspects internal program documentation perspective 
th international workshop program comprehension ieee 
knuth literate programming 
computer journal 
lethbridge singer forward software engineers documentation state practice 
ieee software 
writing internal documentation 
europlop proceedings th european conference pattern languages programs konstanz 
patterns design documentation 
proceedings ecoop lncs springer verlag 
evolution product lines traceability 
proceedings workshop engineering complex object oriented systems evolution oopsla 
published online www dsg cs tcd oopsla papers shtml 
maintaining program understanding issues tools directions 
evolution support homogeneously documenting patterns aspects traces 
proceedings th european conference software maintenance reengineering 

kiczales lamping mendhekar maeda lopes loingtier irwin aspect oriented programming 
proceedings european conference object oriented programming springer verlag 
rajlich wilde role concepts program comprehension 
proceeding th international workshop international workshop program comprehension ieee 
churcher theme literate programming 
proceedings ninth asia pacific software engineering conference ieee computer society 
brooks mythical man month essays software engineering 
addison wesley twentieth anniversary edition 

hypertext system literate programming 
journal object oriented programming 
tilley ller info simple document annotation facility 
proceedings th annual international conference systems documentation acm press 
friendly design distributed hyperlinked programming documentation 
garzotto nanard nanard eds proceedings international workshop hypermedia design montpellier france 

sun microsystems javadoc tool home page sun microsystems 
available java sun com products jdk javadoc index html 
forward lethbridge relevance software documentation tools technologies survey 
proceedings acm symposium document engineering acm press 
state documentation practice corrective maintenance 
proceedings ieee international conference software maintenance acm press 
literate programming software engineering perspective 
proceedings software education conference university new zealand ieee computer society press 
beck extreme programming explained embrace change 
addison wesley publishing 
meyer object oriented software construction second edition 
prentice hall 
parnas clements rational design process fake 
ieee transactions software engineering 
rajlich incremental web 
ieee software 
library communication programmers worldwide 
phd thesis link ping university link ping studies science technology dissertation 

cockburn churcher literate tools novice programmers 
proceedings second australasian conference computer science education acm press 
programming environment scheme 
editors proceedings nordic workshop programming environment research 
thomas kurt 
programming open integrated development environments java 
proceedings nd international conference principles practice programming java 

meyer lessons design eiffel libraries 
communications acm 
meyer reusable software 
prentice hall 
kramer api documentation source code comments case study javadoc 
proceedings seventeenth annual international conference computer documentation 

van 
www org 
documentation threads presentation fragmented documentation 
nordic journal computing 
leo outlining editor 
webpages charter net front html 
maletic marcus source code files structured documents 
th international workshop program comprehension ieee 
structural cognitive problems providing version control hypertext 
proceedings acm conference hypertext acm press 
