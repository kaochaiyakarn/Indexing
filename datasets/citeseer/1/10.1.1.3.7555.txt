middleware application adaptation requirements support pervasive computing christian becker gregor schiele university stuttgart institute parallel distributed systems universit 
stuttgart germany christian becker gregor schiele informatik uni stuttgart de pervasive computing environments characterized additional heterogeneity compared existing computing infrastructures 
devices ranging small embedded systems full fledged computers connected spontaneously formed networks 
analyze requirements applications system software cope dynamically changing execution environment 
micro broker middleware base component framework pervasive computing supporting application adaptation proposed 

past middleware platforms target researchers order provide flexibility respect configuration middleware 
requirements reconfigurable middleware systems arose mainly domain quality service qos management 
different application requirements nonfunctional aspects qos lead mechanisms middleware ensure distinct qos property 
vision ubiquitous pervasive computing adds new complexity 
everyday environment populated smart everyday items 
processors integrated environment allow access information related real world control distinct functionality 
systems scenarios far heterogeneous classical computing environments 
sensors need limited computing communication capabilities devices dedicated single purpose presentation system video projector contain full fledged computer software specialized presentation management 
involved devices communication technology differ ranging infrared connections radio links computers connected static links 
resulting network topologies frequently change due user device mobility 
information services available bound location device temperature information presentation system far away place typically interesting available nearby 
result requirements adaptation configuration underlying middleware applications change compared requirements classical middleware systems 
example scenario derive motivate requirements middleware configuration support application adaptation 
approach support requirements micro broker middleware base component model application framework 
discussion related closes summary outlook 

system model section pervasive computing scenario possible applications system model defined 

scenario consider scenario common envisioned pervasive computing systems 
scenario embedded specialized devices sensors providing information temperature position users specialized systems mentioned presentation system 
devices equipped wireless communication 
stationary devices mobile devices typically carried users 
devices handheld devices personal digital assistants pdas cell phones smart clothes 
computing environments today vanish substituted devices complement systems 
order motivate environments applications possible applications sketched 
support senior citizens order support life elderly home body functions positions captured evaluated designated home server 
change health condition occurs information behave audio video devices room person currently located 
serious health conditions ambulance called provided health status person 

office support status rooms objects monitored sensors propagated vicinity 
users nearby provided environmental information meeting rooms additionally locally available services accessible user nearby presentation system user room output 
derive requirements scenarios underlying system model 

system model pervasive computing environments classified involved devices network characteristics 
furthermore applications depend abstractions provided underlying operating system middleware referred system software 
briefly sketch characteristics topics remainder subsection 

devices 
stated devices range sensors specialized systems full fledged computers mobile devices 
processing storage properties may differ widely devices provide different capabilities applications running devices 
examples sensors temperature positioning display input capabilities controlling capability dimming light adjusting blind window 
availability device capability restricted space time 
gps sensor building night sensors daylight operating 

network 
wireless connections devices differ respect underlying technology characteristics 
profound difference classical computing environments spontaneous nature networks formed nodes temporarily communication range 
obstacles user mobility power saving common events lead reconfiguration spontaneous network 
result services located device current spontaneous network client available 
prevents usage centralized lookup trading services 
interaction service device providing service leave network 
devices equipped different network interfaces spontaneous networks overlap devices reachable network interface time 

system software 
support system software clearly may differ widely 
specialized operating systems embedded devices common operating systems middleware support completely proprietary solutions 
application point view abstractions interact remote services typical middleware responsibility access device capabilities operating system task important order comprehensive easy 
relevant issue distributed systems general interoperability typically achieved relying interoperability protocols interoperability protocols reflect communication model application supported middleware 
remote method invocations reflected request response messages events realized way messages containing event 
requirements underlying transport connection oriented channel lead restricted usage way communication optical link connection communication available 

requirements section derive requirements adaptation applications support system software component models 
applications considered executed distributed way 
standalone applications require adaptation support device capability unavailable gps sensor indoor kinds adaptation requirements subset general ones distributed applications 

application adaptation requirements applications spontaneous networking environment cope changing service device capability availability devices available services application 
service unavailable alternative service selected 
applications composed services clear dependencies 
alternative levels application defined require different services application continue long set services available 
clearly supported middleware requires appropriate framework applications 
mechanisms address fluctuating sensor availability device 
different abstractions programming device capabilities middleware operating system abstractions remote services device capabilities typically different proxy objects vs system calls 
adaptation switch local remote device capability done programming interface 

system software adaptation requirements system software spontaneous networking environment support device lookup service discovery spontaneous networks device lookup depends underlying network characteristics requires distinct lookup mechanisms supported network interface 
additionally services require distinct interoperability protocols depend network interface service lookup take account 
detection lost devices unavailability services devices signalled application application framework 
flexible protocol support selection network interface looses connection device communication network interfaces provide communication channel 
switching different interoperability protocols networks different characteristics requires adaptation underlying transport fulfill requirements interoperability protocol iiop requires connection oriented error free signalling communication 
decoupling application communication model interoperability communication model order allow different communication links outgoing incoming messages application communication model rpc events kept independent communication model possible interoperability protocols 
example allows communication infrared sending request event receiving reply reply message rpc interoperability protocol tcp ieee 
uniform abstraction device capabilities services allows applications access remote capabilities way local ones 
uniform abstraction access services device capabilities allows mask heterogeneity devices 
flexible integration adaptation mechanisms different application requirements need support mechanisms migrate component remote host increase application performance migrate local node order save energy different mechanisms easily integrated configured directly application system software application framework 
system software offering mentioned support sufficient help application programmers conquer heterogeneity dynamics pervasive computing environments 
programming middleware mechanisms selecting distinct mechanisms manually application programmers rely high level policies result combinations mechanisms system software 
examples policies energy saving leading fostering local execution application components restricting radio communication costly terms energy increasing availability extensive remote services order allow application execution trade energy 
needed addition middleware supporting requirements stated application framework provide benign abstractions choosing appropriate adaptation policies 
order support framework developed micro broker middleware base meets requirements 
currently developing component system base allow specification component dependencies 
sketch design base component system currently developing 

base micro broker middleware middleware base intended minimal platform suitable small embedded systems extensible abstractions available resource rich environments 
base provides application programmers suitable abstractions conquer heterogeneity pervasive computing environments 
objective base form foundation adaptation supporting component framework 
briefly sketch architecture base 
detailed information available 
major design decision base choose micro broker design 
device capabilities local remote services uniformly accessible invocation objects carry target object method name parameters service context indicating special handling invocation qos parameters 
micro broker takes incoming invocations dispatches local service skeleton remote service transport module connects local remote device device local device capability 
remote accessed services 
invocation objects created manually service provides stub object proxy stub object conventional middleware systems typically provide 
micro broker responsible synchronizing caller issue invocations receive possible replies invocation 
allows application choose different communication models remote rpc deferred synchronous rpcs events stub objects 
furthermore utilization different interoperability protocols possible 
interoperability protocols typically reflect applications communication model 
micro broker maps application communication model exchange invocation objects different protocols long accept invocation object transfer 
interoperability protocol going incoming invocations necessary micro broker keeps track expected responses modelled invocations 
scenario node uses communication technologies going request incoming reply depicted 
base allows integration transport plug ins runtime 
dynamic invocation creation local service registries provide simple reflection mechanism 
base prototype implemented java making suitable variety java enabled embedded systems mobile phones board 
minimal configuration base requires kbytes memory 
due buffer usage increase maximum kbytes 
base suitable small embedded java systems 
extensibility micro broker allows integration features available resource rich computing environments 

functionality provided base offers basic abstraction ease application development 
additional mechanisms top base needed enable automatic adaptation applications runtime order request application object response base micro broker application object transport plug base micro broker transport plug transport plug network base micro broker transport plug base micro broker transport plug application object transport plug application object transport plug 
request response interaction base react changing availability services device capabilities current application execution policy minimize energy usage maximize dependability application 
achieve propose application model component system named 
application model specifies architectural building blocks modelled components interdependencies modelled contracts components 
runtime specification mapped concrete set component instances mandatory contracts fulfilled 
offer distinct functionality specified interfaces definition 
functional properties contract modelled interface additional properties dependency component qos requirements behavioral contracts pre post conditions explicitly modelled contract types 
concept proposed realm traditional component systems 
contract types templates contract instances components templates component instances 
components instantiated contract types mapped concrete contracts offer desired property negotiate distinct qos property bind component indicate contract violation 
application modelled special component called application anchor specifies set necessary sub components 
components depend specified contract types 
health monitoring application anchor application logic energy policy size resolution presentation system 
health monitoring application 
simplified example 
health monitoring application shown outputs information advices suitable display vicinity 
application formed sub component instances health monitoring component retrieve sensor information blood pressure pulse presentation system component responsible presenting advices certain health conditions calm take distinct kind medicine display nearby 
application logic component depends components 
receives sensor information health monitoring component derives advices sends presentation system component 
simplicity dependency application logic presentation component shown 
modelled contract requires distinct size resolution presentation system 
additionally policy regarding energy consumption shown assigned application 
application specification mapped instances devices realize components 
different components mapped specific services residing potentially different devices 
contracts components negotiated binding established 
example acquiring display component negotiation ensures resolution size fulfill contract 
policy specifying energy consumption taken account underlying framework tasks need lot energy performing calculations accessing remote components executed 
policies lead configurations underlying base enforce selecting transport requiring energy 
mapping application policies contracts binding components deployed different devices shall provided framework 
currently implemented base designed sketched application model 
steps involve design underlying framework mapping contracts policies services mechanisms provided base 
framework allow adaptation applications activating applications application anchor contract satisfied 
dependencies applications fulfilled application policies contracts involved 
adaptation supported mechanisms underlying middleware selection alternative contracts 
execution context application determined services available nearby devices associated component instances application specification 

related 
middleware systems past multitude different middleware systems developed shielding application programmers distribution services different operating systems hardware architectures 
conventional middleware systems designed stable environments service unavailability treated error making systems unsuitable spontaneous networking environments 
achieved extending conventional middleware systems dynamically reconfigurable middleware systems able adapt behavior runtime marshalling done :10.1.1.101.2890
existing reconfigurable middleware systems concentrate powerful reconfiguration interfaces supporting small resource poor devices 
resource restrictions devices prohibit application full fledged middleware system 
way address restrict existing systems provide functional subset leading different programming models subset available interoperability protocols 
option structure middleware multiple components unnecessary functionality excluded middleware dynamically 
example universally interoperable core uic 
base uic micro kernel dynamically extended interact different existing middleware solutions 
different communication models different protocols outgoing incoming messages supported 

component systems pervasive computing component systems strive independence software components underlying platform properties order allow re 
way achieve model explicit context dependencies contracts components contracts component container ee 
typically inter component contracts negotiated various solutions exist ease integration application framework aspect oriented programming paradigm 
approaches appropriately handle intercomponent contracts component container contract typically relies fixed common abstraction making unfeasible pervasive computing environments container contract change 
realm ubiquitous computing approaches component systems emerging 
pebbles stage hard judge requirements met aura project proposes component framework similar 
resource dependency aura system addressed underlying middleware hand tailored resource monitors 
comprehensive support adaptation application layer middleware layer intended 
similar aura world gaia system shift complexity application adaptation programmer 
support underlying middleware provided respect communication issues 

outlook pervasive computing environments differ existing ones increasing heterogeneity devices networks 
spontaneous networking leads situations treated errors classical computing require distinct precautions happen regularly 
typical scenarios derived system model pervasive computing support system software application adaptation 
extensible middleware platform provides basic abstractions ease application development 
automatic adaptation applications supported component model framework 
basic abstractions middleware base build framework component model 
contract concept specify required properties component interaction indicate application configurations leading component application model 
adaptation applications reduced validating required contracts activating applications contracts fulfilled 
contract enforcement mechanisms adapt provided base 
currently designed implemented base 
building prototypes applications base order gain experience framework support application model 
steps aim completing framework 
becker 
generic qos support corba 
proceedings th ieee symposium computers communications iscc 
becker schiele rothermel 
base micro broker middleware pervasive computing 
proceedings ieee international conference pervasive computing communications percom mar 
bergmans aksit 
composing crosscutting concerns composition filters 
communications acm oct 

plouzeau watkins 
making components contract aware 
ieee computer july 
blair coulson robin papathomas 
architecture generation middleware 
proceedings middleware 

cheng garlan sousa steenkiste hu 
software architecture adaptation pervasive systems 
international conference architecture computing systems arcs trends network pervasive computing apr 
grimm anderson bershad wetherall 
system architecture pervasive computing 
proceedings th acm sigops european workshop sept 
object management group 
common object request broker architecture specification revision july 
object management group 
minimum corba specification revision aug 
oxygen system group homepage 
lcs mit edu 
rom campbell 
gaia enabling active spaces 
proceedings th acm sigops european workshop sept 
rom kon campbell 
reflective middleware desk hand 
ieee distributed systems online journal special issue reflective middleware 
rom carvalho hess campbell 
integrating pdas distributed systems 
sun microsystems 
java platform enterprise edition 
java sun com ee 
sun microsystems 
java remote method invocation specification revision 
szyperski 
component software object oriented programming 
addison wesley nd edition 
weis becker plouzeau 
uml meta model contract aware components 
proceedings uml 
