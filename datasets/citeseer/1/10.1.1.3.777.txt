parrot transparent user level middleware data intensive computing douglas thain miron livny computer sciences department university wisconsin distributed computing continues alphabet soup services protocols managing computation storage 
live environment applications require middleware transparently adapt standard interfaces new distributed systems software known interposition agent 
lessons learned interposition agents progressive study design possibilities 
performance important concern pay special attention tangible issues portability reliability compatibility 
comparison methods interposition focusing method debugger trap requires special techniques achieve acceptable performance popular operating systems 
method implement complete interposition agent parrot splices existing remote systems namespace standard applications 
primary design problem parrot mapping fixed application semantics semantics available systems 
offer detailed discussion errors unexpected conditions carefully managed order keep mapping intact 
conclude evaluation performance protocols employed parrot andrew benchmark demonstrate semantic differences consequences performance 

field distributed computing produced countless systems harnessing remote processors accessing remote data 
despite intentions designers single system achieved universal acceptance deployment 
carries strengths weakness performance manageability reliability 
renewed interest world wide computational systems increasing number protocols interfaces play 
complex ecology research supported part lawrence landweber ncr fellowship distributed systems 
distributed computing services condor pbs lsf local operating system common process interface main exit abort kill sleep application process open close read write common interface parrot chirp ftp nest rfio distributed services load interaction dcap 
model distributed systems stay 
result model distributed computing shown 
center lie ordinary applications built standard interfaces posix 
lie number batch systems manage processors interact users deal failures execution 
batch system interacts application simple interfaces main exit 
lie number services organize communicate remote memory disks tapes 
ordinary operating system os transforms application explicit reads writes low level block network operations compose local distributed file system 
attaching new service traditional os trivial task 
principle extensible os received attention research community production operating systems limited facilities extension usually requiring kernel modifications administrator privileges 
may acceptable personal computer requirement difficult cpu io sible provide custom naming services applications visiting borrowed computing environment mainframe commodity computing cluster opportunistic workgroup 
remedy situation advocate interposition agents 
devices transform standard interfaces remote protocols normally operating system 
effect agent allows application bring filesystem namespace goes 
releases dependence details execution site preserving standard interfaces 
addition agent tap naming services transform private names fully qualified names relevant larger system 
practical lessons learned years building deploying interposition agents condor project 
notion agents unique condor seen relatively little production systems :10.1.1.35.5918
due variety technical semantic difficulties arise connecting real systems 
progressive design study explores problems explains solutions 
detailed study methods interposition experience building deploying 
remaining effective impractical privilege required 
compare performance functionality methods giving particular attention portability reliability 
particular concentrate method explored detail debugger trap 
method employed idealized operating systems requires additional techniques order provide acceptable performance popular operating systems limited debugging capabilities linux 
debugger trap focus design parrot interposition agent splices remote systems filesystem space ordinary applications 
central problem design agent semantic problem mapping quite identical interfaces 
outgoing mapping usually quite simple read get write put forth 
real difficulty lies interpreting large space return values remote services 
new kinds failure introduced servers crash credentials expire disks fill 
trivial transformations application standard interface lead brittle frustrating experience user 
corollary observation access computation storage fully divorced 
notions design encourage partition distributed systems activities computation storage 
interposition agent serves connection concerns operating system kernel manages types devices mediate interaction passing application 
deliberately postpone evaluating performance considering errors boundary conditions 
correct handling cases significant performance implications 
see detailed error interface posix result significant latency remote system probed multiple times extract necessary information 
demonstrate performance parrot andrew benchmark illustrate importance low latency operations real applications 

applications interposition agents diving details building interposition agents wish give examples may distributed system 
interactive browsing 
construction new type storage protocol device frequently accompanied construction tools visualize organize manipulate contents 
time consuming wasteful tools exist tasks standard filesystems 
shown parrot enables ordinary tools browse remote archive case hierarchical mass storage server mss national center supercomputing applications ncsa 

interactive browsing parrot improved reliability 
naturally networked services accessed interposition agent far reliable local filesystem 
remote services prone failed networks power outages expired credentials problems 
agent attach application service improved reliability 
example rocks emulates reliable tcp connection network outages address changes 
parrot add reliability file system layer detecting repairing failed connections 
private namespaces 
batch applications frequently hardwired certain file names configuration files data libraries ordinary inputs outputs 
specifying private namespace application instance may run simultaneously keeping activities separate 
example instances application hardwired write output txt may redirected write output txt instance number 
private namespace may constructed performance concerns 
centralized data server serve simultaneous remote applications saturated 
copies necessary data available system private namespace may constructed force application nearby copy 
logical performance purposes private namespace built points lifetime application 
may fixed program lifetime may resolved demand program runs external service 
remote dynamic linking 
dynamic linking presents problems naming execution 
large majority standard applications linked dynamic libraries named loaded runtime 
dynamic linking reduces storage memory allowing applications share routines 
advantage liability complexity perfectly captured phrase dll hell interposition techniques permit remotely executing application fetch libraries trusted source needed 
libraries may shared normally execution site burdening user 
profiling debugging 
vast majority applications designed tested standalone machines 
number surprises occur applications moved distributed system 
absolute relative cost operations change techniques acceptably inefficient linear search may 
attaching interposition layer application user may easily generate trace summary behavior observe precisely application 
exactly study distributed applications 

interposition techniques compared interposition techniques applications described 
particular strengths weaknesses 
summarizes interposition techniques 
may broken broad categories internal external 
internal techniques modify memory space application process fashion 
techniques flexible efficient applied arbitrary processes 
external techniques capture modify operations visible outside application address space 
techniques flexible higher overhead applied nearly process 
condor project experience building deploying internal techniques external technique debugger trap 
remaining external techniques describe relevant publications 
simplest technique polymorphic extension 
application structure amenable extension may simply add new implementation existing interface 
user small code changes invoke appropriate constructor factory order produce new object 
technique condor java universe connect ordinary inputstream output stream secure remote proxy 
general purpose libraries sfio 
static library technique involves creating replacement existing library 
user obliged re link application new library 
example condor standard universe provides drop replacement standard library provides transparent checkpointing back submission site fully emulating user home environment 
dynamic library technique involves creating replacement existing library 
linker controls user may direct new library place old dynamically linked library 
technique dcache implementations socks bypass toolkit 
binary rewriting technique involves modifying machine code process runtime redirect flow control 
requires detailed knowledge cpu architecture hidden abstraction paradyn toolkit :10.1.1.41.2316
technique hijack process runtime 
traditional debuggers specialized operating system interface stopping examining resuming process 
debugger trap technique uses interface merely examining process debugging agent traps system call provides implementation places result back target process intended system call 
example technique ufo allows access ftp resources file fetching 
difficulty debugger trap tools compete access single process debug interface 
tool daemon protocol tdp provides interface managing tools distributed system 
remote filesystem may interposition agent simply modifying file server 
nfs popular choice technique legion objectspace translator slice 
short modifying kernel may install kernel callout permits filesystem serviced user level process 
facility ground microkernel added afterthought case implementations afs 
internal techniques may applied certain kinds programs 
polymorphic extension static linking apply programs rebuilt 
dynamic library technique requires replaced library dynamic binary rewriting paradyn toolkit internal techniques external techniques polymorphic static dynamic binary debugger remote kernel extension linking linking rewriting trapping filesystem callout applies library program dynamic dynamic link exc 
setuid user burden change code relink code identify identify run command superuser modify os semantic layer fixed syscall fs ops syscall init fini difficult difficult difficult difficult easy impossible easy affect linker debug application easy easy easy easy db child easy easy secure hole detection easy difficult difficult difficult easy easy easy porting little os os os revision os little os required revision revision cpu requires presence dynamic loader particular library dynamic 
external techniques apply process exception debugging trap prevents traced process elevating privilege level setuid feature 
burden user techniques varies widely 
example polymorphic extension requires small code changes static linking requires rebuilding 
techniques may possible packaged commercial software 
dynamic linking binary rewriting require user understand programs dynamically linked 
standard system utilities dynamic commercial packages static 
experience users surprised quite frustrated unexpectedly static application ignores interposition agent 
remote filesystem kernel callout techniques impose smallest user burden require cooperative system administrator necessary changes 
debugger trap imposes small burden user simply invoke agent executable 
significant difference techniques ability trap different layers software 
internal techniques may applied layer code 
example bypass instrument application calls standard memory allocator window system library opengl library 
contrast external techniques fixed particular interfaces 
debugger trap operates physical system calls remote filesystem kernel callout limited certain filesystem operations 
differences techniques affect design code attach 
consider matter implementing directory listing remote device 
internal techniques capable intercepting library calls open 
easily mapped remote file access protocols generally separate procedures accessing files directories 
unix interface unifies files directories accessed system 
properties interposition techniques call open 
external techniques accept open file directory defer binding remote operation read invoked 
choice interposition layer affects design agent 
external techniques differ range operations able trap 
debugger trap modify system call remote filesystem kernel callout techniques limited filesystem operations 
particular remote filesystem may restrictions 
example stateless nfs protocol representation system calls open close 
access information interposed service provide semantics significantly different provided nfs 
file system interfaces express binding individual operations processes initiate 
remote filesystem agent sees read write process id issued 
information difficult impossible performing accounting purposes security performance 
number important activities take place initialization finalization process dynamic libraries loaded constructors destructors automatic routines run streams created flushed 
transitions libraries resources process state flux 
complicates implementation internal agents wish intercept activity 
example application may perform global constructor destructor 
internal agent rely global constructors destructors ordering enforced application agent 
likewise dynamically loaded agent interpose actions dynamic linker 
programmer agents exercise care constructing agent selecting libraries invoked agent 
code time consuming create debug 
activities easily manipulated external techniques 
example external techniques easily trap modify activities dynamic linker 
getpid stat open close read read kb write write kb bandwidth mb rewrite mb static mb dynamic mb debug mb code complete fully debugged 
production deployment interposition agents requires users permitted debug applications agents 
techniques admit debugging user programs complication arising debugger trap 
obvious reasons single process debugged processes debugger attached instrumented process 
debugger trap agent manage entire process tree user may agent invoke debugger may invoke application 
debugger operations may trapped just system call passed application supervision agent 
interposition agents may security convenience 
agent may provide sandbox prevents untrusted application modifying external data permitted access 
internal techniques suitable security purpose may easily subverted program invokes system calls directly passing libraries 
external techniques fooled way suitable security 
related security matter hole detection 
interposition agent may fail trap operation attempted application 
may simply bug agent may interface evolved time application deprecated newly added interface agent aware 
internal agents especially sensitive bug 
standard libraries develop interfaces added deleted modified library routines may invoke system calls directly passing corresponding public interface function 
example fopen may invoke open system call passing open function 
event causes general chaos application agent resulting crashes worse silent output errors 
problem occurs external agents 
interfaces change unexpected event detected unknown system call 
agent may terminate application indicate exact problem 
problem hole detection underestimated 
experience significant operating system upgrade includes changes standard libraries turn require modifications internal trapping tech 
overhead interposition techniques niques 
internal agents rarely forward compatible 
identifying fixing holes time consuming 
missed operation unknown spend long hours debugger see expected course application differs actual behavior 
discovered new entry point added agent 
treatment simple diagnosis difficult 
learned lesson hard way porting condor remote system call library bypass toolkit wide variety unix platforms 
reasons described porting follows 
polymorphic extension remote filesystem require little effort build new system 
debugger trap kernel callout significant system dependent components ported operating system nature stability interfaces tractable task 
remaining techniques static linking dynamic linking binary rewriting viewed significant porting challenge revisited minor operating system upgrade 
compares performance transparent interposition techniques 
constructed benchmark program timed iterations various system calls mhz athlon xp running linux 
available bandwidth measured reading mb file sequentially mb blocks 
mean standard deviation cycles benchmark shown 
file operations performed existing file temporary file system 
case gives performance benchmark agent attached remaining show benchmark modified interposition technique 
case constructed minimal agent trap system calls invoke modification 
seen binary rewriting static linking methods add significant cost application 
dynamic method overhead order microseconds manage structure potentially multiple agents invoke function pointer 
overheads quickly dominated cost moving data process 
debugger trap greatest overhead techniques ranging slowdown getpid slowdown writing kb 
importantly application process 
syscall 
return 
exec syscall 
resume return 
trap return 
resume enter 
trap enter host kernel agent process 
modify result 
ptrace control flow 
modify call bandwidth measurement demonstrates debugger trap achieves half unmodified bandwidth 
fairly noted latency bandwidth dominated latency bandwidth accessing remote services commodity networks 
security reliability come measurable cost reasons cost explained section 

debugger trap detail concentrate details debugger trap 
methods explained detail publications referenced 
alexandrov described solaris proc debugger trap instrument process manner 
linux currently widely deployed platform scientific distributed computing 
ptrace debugger model generally considered inferior solaris proc model interposition limitations accommodated 
shows control flow necessary trap system call ptrace interface 
agent process registers interest application process host kernel 
attempt application invoke system call host kernel notifies agent attempt 
agent may modify application address space registers including system call arguments 
satisfied agent instructs host kernel resume system call 
completion agent opportunity modify application result 
satisfied agent resumes return system call application control 
large number context switches accounts high latency measured 
conceptually simple complexities ptrace interface application process open fd write read read mmap peek poke mmap mmap shared library channel read write output input buffer buffer 
ptrace data flow agent process process ancestry 
ptrace interface forces traced processes immediate children tracing processes 
notification trace events occurs path notification child completion events tracing process receives signal call retrieve details 
consequence tracing tool wishes follow tree processes maintain table process ancestry 
system calls communicate information children trapped emulated agent 
traced process forks linux kernel propagate tracing flags child 
may overcome trapping instances fork converting flexible linux specific clone system call instructed create new process tracing activated 
data flow 
emulation system calls requires ability move data target application 
shows necessary data flow techniques 
convenient access special file proc mem represents entire memory space application 
modified read write mapped address space agent process 
provides high bandwidth read access writing file permitted 
pair ptrace calls peek poke provided read write single word target application 
interface moving small amounts data target application obviously suited moving large amounts data required read write system calls 
move data efficiently application coerced writing file implemented commented kernel source 
reasons appear lost folklore comments source suggest security concerns 
clearly read write access process address space revoked target process raise privilege level setuid 
clear extent revocation implemented 
file descr 
file pointers file objects device drivers application process read write memory ops open csp flags interposition technique poly static dynamic binary debug remote kernel parrot library parrot read parrot parrot write name data csp flags name data csp flags csp flags name data paged memory page fault handler name data parrot open mount list name resolver chirp lookup local chirp ftp nest rfio dcap driver driver driver driver driver driver 
architecture parrot assisting agent 
accomplished converting system calls shared buffer called channel 
ordinary file created agent passed implicitly shared children 
agent maps channel memory minimize copying application processes simply maintain file descriptor pointing channel 
example suppose application issues read remote file 
trapping system call entry agent examines parameters read retrieves needed data 
copied directly buffer channel 
read modified poke accesses channel 
system call resumed application pulls data channel unaware activity necessary place 
data copy accounts diminished bandwidth 
architecture parrot parrot library performing posix remote data services 
provides interface entry points parrot open parrot read 
application may written modified invoke library directly may attached various interposition techniques described 
internal structures parrot shown bear strong resemblance operating system 
parrot tracks family tree child processes recording table open file descriptors seek pointers similar device independent structures 
lowest layer series device drivers implement access remote system 
operating system parrot know structure remote devices level inodes blocks 
refers remote open files name may multiplex applications requests remote channel 
parrot large number entry points operations 
may classify categories operations file descriptors operations file names 
traverse data structures parrot take direct route device drivers 
operations read write operate file descriptors 
entering parrot commands check validity arguments descend various data structures 
read write examine current file pointer argument call read method corresponding file object 
file object device driver performs necessary remote operation 
operations rename stat delete operate file names 
entering parrot commands pass name resolver may transform program supplied name variety rules systems 
transformed names passed directly device driver performs operation remote system 
name resolution served drivers 
simplest case mapping parrot operates name unchanged 
applications may specify ordinary local file names passwd fully qualified remote filenames ftp ftp cs wisc edu roadmap 
mount list driver simple file maps logical file names directories remote file names unix 
alternatively chirp driver provides lookup rpc permits remote controller perform run time name binding behalf application 
name resolver natural place attaching application external naming systems 
example replica location service handle system resolve document names physical locations may accessed 
interface employ parrot sandbox selectively permitting renaming rejecting access certain files manner similar janus 
posix applications access file explicit operations read write 
files may memory mapped 
standard operating system memory mapped file separate virtual memory segment backing store kept file system virtual memory pool 
parrot accomplishes thing underlying drivers reducing memory mapped files mechanisms open files 
memory mapped files supported ways depending interposition method 
parrot attached internal technique memory mapped files may supported simply allocating memory malloc loading necessary data memory invoking necessary device driver 
matter policy entire file loaded mmap invoked paged demand setting necessary memory protections trapping software interrupts generated access memory 
parrot attached external technique entire file loaded channel application redirected mmap portion channel shown 
parrot currently write mechanism policy memory mapped files encounter application requires 
parrot buffering disciplines 
default parrot simply performs fine grained partial file operations remote services access minimal amount data satisfy application immediate reads writes 
taken route reasons 
file fetching introduces large latency file opened 
unnecessary price application take advantage overlapped cpu access reading streamed files sequentially 
second remote protocols reliable mechanism ensuring synchronization shared cached files wish introduce new synchronization problem 
variety systems proposed managing wide area replicated data 
prefer parrot leverage systems fine grained access protocols implement replica management anew 
optionally parrot may perform file staging caching open similar ufo 
long latency paid file may accessed efficiently local storage 
protocols provide sequential access ftp require cache implement random access 
open cached file validated performing remote stat equivalent described 
file size modification time changed re fetched 
protocols semantics parrot equipped variety drivers communicating external storage systems particular features limitations 
simplest local driver simply passes operations underlying operating system 
chirp protocol designed authors earlier provide remote semantics similar posix 
standalone chirp server distributed parrot 
file transfer protocol ftp heavy early days internet 
simplicity allows wide variety implementations purposes results unfortunate degree imprecision expand 
parrot supports secure gsi variant ftp 
nest protocol native language nest storage appliance provides array authentication allocation accounting mechanisms storage may shared multiple transient users 
rfio dcap protocols designed high energy physics community provide access hierarchical mass storage devices castor dcache 
parrot preserve posix semantics sake application foremost concern ability protocols provide necessary semantics 
performance secondary concern affect significantly semantic issues 
summary semantics protocols 
posix name binding separation namespace filesystem file objects inodes contains 
open system call performs atomic binding file name file object allows program lock file object independently renaming linking unlinking names point 
model reflected chirp rfio dcap protocols provide distinct open close actions separately data access 
ftp nest get put model performing name lookup data access 
model application may lose files open manipulated process 
distinction models begins blur consider recovery failed connection 
get put models advantage 
parrot loses connection service merely re establishes connection 
connection lost open close service parrot reconstruct state re opening necessary files 
course recovery procedure may reconnect different file object referenced original open 
detect parrot examines remote inode opening re opening remote files order detect binding changed mean time 
file descriptor considered stale reads writes descriptor fail error nfs 
exception ftp protocols provide inexpensive random non sequential access file closing re opening 
permits efficient manipulation small portion large remote file retrieving thing 
sequential nature ftp requires parrot local copies files order changes replace file 
directories supported completely chirp nest rfio may create delete list contents 
dcap currently support directory access may added version 
dcap typically alongside kernel nfs client metadata access 
support directories ftp varies greatly 
ftp standard mandates distinct commands directory lists list little agreement proper behavior 
list provides completely free name binding discipline metadata connections posix open close random direct chirp open close random direct client ftp get put sequential varies indirect file nest get put random indirect client rfio open close random direct file op dcap open close random direct client form text dump readable humans standard machine readable structure 
meant provide simple machine readable list directory entries encountered servers omit subdirectory names omit names dot insert messages directory list distinguish empty non existent directories 
metadata communicated posix interface stat structure returned stat fstat lstat system calls 
chirp rfio dcap provide direct single rpcs fill structure necessary details 
ftp nest single calls provide information necessary details may obtained multiple rpcs determine type size details 
chirp nest provide support managing symbolic links 
feature done remote protocols expose existing filesystems contain symbolic links 
result confusion interactions programs user 
example symbolic link may appear directory listing explicit operations examining links appear inaccessible file unusual access permissions 
connection structure remote protocol implications semantics performance 
chirp nest dcap require tcp connection client server 
ftp rfio require new connection file opened 
addition rfio requires new connection operation performed non open file 
file system operations metadata queries result extraordinary number connections short amount time 
ignoring latency penalties activity large number tcp connections consume resources clients servers network devices address translators 

errors boundary conditions error handling pervasive problem design traditional operating systems 
new models file interaction developed attending error modes added existing systems expanding software interface level 
example addition distributed 
protocol compatibility posix file systems unix kernel created new possibility stale file handle represented error 
error mode discovered lowest layers kernel value added device driver interface file system interface standard library expected handled directly applications 
luxury interposition agent 
applications existing interface desire ability change 
lucky may re error analogous identical purpose 
underlying device drivers generate errors ranging vague file system error precise server certification authority trusted unlimited space errors lower layers transformed fixed space errors available application 
answer question remind interposition agent live vacuum line defense errors 
shows application agent supervision batch system 
context may appeal batch system take higher level scheduling action 
say pass buck batch system 
perform triage error may easily converted form honest recognizable application 
errors converted appropriate errno passed application normal way 
errors take considerable effort pinpoint 
permanent error indicates process fatal flaw possibly run completion 
type error parrot halt process way clear batch system reschedule 
transient error indicates process run inherent flaw 
encountering transient errors system interact batch system 
indicate job release cpu execute retry operation 
types errors permanent transient come distinct sources errors mismatch requests mismatch results 
mismatch requests occurs target system needed capability 
mismatch results occurs target system capable result ous meaning application 
consider turn 
mismatched requests 
difficulty comes device driver provides support whatsoever operation requested application 
different solutions problem expectation application ability handle error 
representative examples stat 
services dcap permit directory listings 
call possibly succeed 
failure may trivially represented calling application permission denied implemented undue confusion 
applications understand may fail number reasons normal filesystem prepared understand deal errors 
contrast applications prepared fail 
generally understood non terminal file may accessed randomly applications bother consider return value 
ftp server local caching enabled risk number dangers allowing checked command fail 
attempt seek non file results permanent error message standard error stream 
stat command offers puzzling difficulty 
stat simply provides set meta data file owner access permissions size modification time 
problem remote storage systems provide data 
example ftp provides file size meta data standard way 
cause stat report permission denied systems assumption honesty best 
unfortunately causes trivial programs fail 
stat frequent operation called implicitly manner code including command line tools large applications standard library 
glance appears necessary information simply extracted remote systems 
may construct workaround surveying actual uses stat cataloging 
commands ls program elements file dialogs stat annotate lists files possible detail interactive user 
optimization 
standard library tools uses stat retrieve optimal block size device 
short circuiting 
programs libraries including command line shell fortran standard library stat access quickly check presence file performing expensive open exec 
unique identity 
command line tools unique device file numbers returned stat determine file names refer physical file 
prevent accidental overwriting recursive operations 
cases little harm pre senting default guessed information 
program rely values returned stat done atomically operation 
program uses stat measure existence size file prepared open read return conflicting information 
may fill response stat benevolent lies encourage program continue reading writing 
device driver fills values structure able determine multiple remote operations fills rest defaults 
example inode may computed hash file full path modification time may set current time 
course device driver determine file exist may truthfully cause stat fail 
particular interest block size field returned stat 
practice physical block size underlying device irrelevant file abstraction devices may concept block 
routines particularly standard library block size indication file optimal transfer size 
parrot leverages interpretation hide potentially high latency interposition remote access 
default parrot indicates block size megabyte files 
explain reason choice 
mismatched results 
device drivers necessary machinery carry user possible requests provide vague errors supported operation fails 
example ftp driver allows application read file get command 
get command fails available information error code encompasses sort file system error including file access denied directory posix interface permit catch error value requires specific reason 
error code returned application 
technique dealing problem interview service order narrow cause error 
similar expert system functional system described efe 
shows interview tree get operation 
get fail assume named file directory attempt move 
succeeds error file attempt size named file 
succeeds file inaccessible error access denied fails error file error interview technique drawbacks 
significantly increases latency failed operations 
generally necessary optimize error cases 
addition technique atomic may determine incorrect value remote filesystem simultaneously modified process 
large space infrequent errors simply expression application inter success 
get transient error 
directory 
access denied 
cwd size file 

error interview transient error 
transient error 
face 
nest declare disk allocation expired deleted 
ftp server may respond backing store temporarily offline 
user credentials kerberos gsi certificates may expire longer valid 
response may reallocate lots rebuild connections attempt renew certificates 
techniques take time computing resources guarantee eventual success 
point accept error occurred 
errors analogue interface application parrot declare transient error seek reschedule job 

integrating computation reality transient errors requires integration computation storage systems 
interposition agent natural device mediating systems able take complex actions involving application flow control 
generally speaking agent limited simple scheduling actions exposed posix interface 
example permanent error caused forcing process call exit indicating completed unsuccessfully returned submitter 
transient error indicated terminating process forcible kill signal 
batch system condor interprets evidence outside interference comparable workstation owner evicting visiting process 
job placed batch scheduler 
emphasize difference local operating system scheduling batch scheduling 
response transient error agent simply block necessary data available 
cause running process release cpu move wait state local scheduler 
process doing local scheduler irrelevant batch scheduler 
program agent issues explicit instruction batch system possession bandwidth mb block size ftp rfio dcap nest chirp 
throughput mb file copy cpu 
continued charged holding resource regardless consuming physical cycles 
batch system condor complex information attached transient error control port execution site 
job executing condor system process known starter 
starter tasks provide local control port application invoke complex actions batch system 
incidentally protocol spoken port chirp 
constrain rpc provided starter specifies clause added job scheduling constraints expressed classad language 
example parrot discovers needed file scheduled staged tape am constrain add requirement daytime kill application 
condor re place process new requirements satisfied 
alternatively suppose parrot moved dataset nearby cache considerable cost 
releasing cpu call constrain add requirement subnet continue processing 
application fail evicted time re placed condor machine satisfying constraints subnet needed data 
multiple calls constrain overwrite previous constraint previous decisions may un done 
notion job directed resource management introduced pruyne doctoral thesis 
resource management interface called permits running job request release external resources run time 
similar idea notion execution domains condor shadow directs allocations location checkpoint images 
chirp constrain facility combines ideas permitting job agent direct allocation requests concert state external system 
protocol server stat open close read read kb write write kb bandwidth chirp chirp ms mb ftp wu ftpd ms random partial file access mb nest nest ms mb rfio ms mb dcap dcache ms mb 
performance 
performance protocols local area network deferred discussion performance point may see performance effects semantic constraints 
possible write applications explicitly remote protocols efficient manner parrot provide conservative complete implementations posix operations 
example application may need know size file requests information stat parrot obliged fill structure possibly great cost 
services discussed exception chirp designed primarily efficient high volume data movement 
demonstrated compares throughput protocols various block sizes 
throughput measured copying mb file remote storage device standard cp command equipped parrot varying default block size controlled stat emulation described 
course absolute values artifact system seen protocols tuned near optimal performance mass data movement 
default block size explained earlier chosen mb compromise protocols 
exception chirp reaches half available bandwidth 
strict rpc nature required posix semantics chirp server extract underlying filesystem data necessary supply immediate read 
technically feasible server read ahead anticipation operation data pulled server address space invalidated actors file semantically incorrect 
throughput dcap block size kb unintended interaction default tcp buffer size kb 
developers dcap aware artifact recommend changing block size buffer size avoid 
reasonable advice protocols require tuning kind 
benchmarks latency posix equivalent operations protocol 
measurements obtained manner identical indicated servers residing system 
notice latencies measured milliseconds gave microseconds 
hasten note comparison certain sense fair data servers provide vastly different services performance differences demonstrate cost service cleverness implementation 
example chirp ftp achieve low latencies lightweight translation layers ordinary file system 
nest somewhat higher latency provides abstraction virtual file system user namespace access control lists storage allocation system built existing filesystem 
cost due necessary metadata log records activity stored directly underlying file system 
rfio dcap designed interact mass storage systems single operations may result gigabytes activity disk cache possibly moving files tape 
context low latency concern 
said things may observed table 
ftp benefited years optimizations cost stat greater chirp need multiple round trips fill necessary details 
additional latency open close due multiple round trips name establish new tcp connection 
rfio dcap higher latencies single byte reads writes kb reads writes 
due buffering delays small operations anticipation data 
importantly remote operations exceed latency debugger trap orders magnitude 
comfortable previous decision sacrifice performance favor reliability interposition technique 
conclude similar andrew benchmark 
andrew benchmark consists series operations parrot source tree consists directories files totaling kb 
prepare source tree moved remote device 
copy stage tree duplicated remote device 
list stage detailed list ls lr tree 
scan stage files tree searched grep text string 
stage software built 
perspective involves sequential read source file sequential write object file series random reads writes create executables 
considered original andrew benchmark quite small today standards aged point longer compiles standard tools 
distance cache protocol copy list scan delete local local sec sec local chirp sec sec lan chirp sec sec lan chirp sec sec lan ftp sec sec lan nest sec sec lan rfio overwhelmed repeated connections lan dcap support directories nfs delete stage tree deleted 
compares performance andrew benchmark variety configurations 
cases horizontal rule measure cost layer software added parrot chirp server host chirp server local area network 
surprisingly cost separating computation storage high 
copying data slower network slowdown stage quite acceptable intend increase throughput remote parallelization 
cases adjacent rule change enabling caching 
expected cost unnecessary duplication causes increase copying source tree difference easily stage cache eliminates multiple random necessary link executables 
list delete stages involve directory structure metadata access affected cache 
cases horizontal rule explore various protocols run benchmark 
cases caching enabled order eliminate cost random access discussed 
dcap protocol semantically unable run benchmark provide necessary access directories 
rfio protocol semantically able run benchmark high frequency filesystem operations results large number tcp connections quickly exhausts networking resources client server preventing benchmark running 
chirp ftp nest able complete benchmark 
nest results high variance due delays incurred metadata log periodically compressed 
difference performance chirp ftp nest primarily attributable cost metadata lookups 
stages heavy stat multiple round trips necessary implement completely ftp nest striking cumulative effect 

interposition agents provide stable platform bringing old applications new environments 

performance andrew benchmark lined difficulties encountered solutions constructed course building deploying types agents condor project 
general interposition techniques lowest overhead require greatest amount knowledge application expensive techniques reliable flexible 
shown linux debugger trap limitations put 
interest grows virtual machines distributed systems need powerful low overhead methods interposition grows 
appropriate interface task open research topic 
notion virtualizing multiplexing existing interface common technique plague errors boundary conditions suffered silently practitioners 
problems rarely publicized aware excellent exceptions 
metz describes berkeley sockets interface surprisingly hard multiplex 
garfinkel describes subtle semantic problems sandboxing untrusted applications 
emphasized problem error handling forces integration access computation storage 
sensible partitioning technical problems tends focus practitioners problem holistic view needed properly bring 
narrow interfaces exit kill widely portable provide coarse grained control 
example powerful interface chirp constrain call 
believe richer interface integration remains fruitful area research 
information parrot www cs wisc edu thain research parrot 
acknowledgments john bent sander assistance deploying debugging parrot 
victor wrote mechanism binary rewriting 
alain roy gave thoughtful comments early drafts 
accetta baron bolosky golub rashid tevanian young 
mach new kernel foundation unix development 
proceedings usenix summer technical conference atlanta ga 
alexandrov schauser 
ufo personal global file system user level extensions operating system 
acm transactions computer systems pages august 
allcock chervenak foster kesselman tuecke 
protocols services distributed data intensive science 
proceedings advanced computing analysis techniques physics research pages 
anderson chase vahdat 
interposed request routing scalable network storage 
proceedings fourth symposium operating systems design implementation 
barring baud durand 
castor project status 
proceedings computing high energy physics padua italy 
baru moore rajasekar wan 
sdsc storage resource broker 
proceedings cascon toronto canada 
livny 
utilizing widely distributed computational resources efficiently execution domains 
computer physics communications 
bent leroy roy stanley arpaci dusseau arpaci dusseau livny 
flexibility manageability performance grid storage appliance 
proceedings eleventh ieee symposium high performance distributed computing edinburgh scotland july 
foster kesselman tuecke 
gass data movement access service wide area computing systems 
th workshop parallel distributed systems may 
cheriton 
uio uniform system interface distributed systems 
acm transactions computer systems february 
efe 
proposed solution problem levels generation 
acm computing practices november 
ernst fuhrmann waldman 
dcache distributed storage data caching system 
proceedings computing high energy physics beijing china 
garfinkel 
traps pitfalls practical problems system call interposition security tools 
proceedings network distributed systems security symposium february 
goldberg wagner thomas brewer 
secure environment untrusted helper applications 
proceedings sixth usenix security symposium san jose ca 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
hunt 
detours binary interception win functions 
technical report msr tr microsoft research february 
jones 
interposition agents transparently interposing user code system interface 
proceedings th acm symposium operating systems principles pages 
kleiman 
vnodes architecture multiple file system types sun unix 
proceedings usenix technical conference pages 
leech lee jones 
socks protocol version 
internet engineering task force ietf request rfc march 
metz 
protocol independence sockets api 
procedings usenix technical conference june 
miller callaghan hollingsworth 
paradyn parallel performance measurement tools 
ieee computer november 
miller cortes livny 
tool daemon protocol tdp 
proceedings supercomputing phoenix az november 
pruyne 
resource management services parallel applications 
phd thesis university wisconsin madison 
raman 
matchmaking frameworks distributed resource management 
phd thesis university wisconsin october 
samar stockinger 
grid data management pilot 
proceedings iasted international conference applied informatics innsbruck austria february 
small seltzer 
comparison os extension technologies 
proceedings usenix technical conference pages 
solomon litzkow 
supporting checkpointing process migration outside unix kernel 
proceedings usenix winter technical conference pages 
sun 
establishing persistent identity handle system 
proceedings tenth international world wide web conference hong kong may 
thain 
son livny 
kangaroo approach data movement grid 
proceedings tenth ieee symposium high performance distributed computing pages san francisco california august 
thain bent arpaci dusseau arpaci dusseau livny 
pipeline batch sharing grid workloads 
proceedings twelfth ieee symposium high performance distributed computing seattle wa june 
thain livny 
multiple bypass interposition agents distributed computing 
journal cluster computing 
thain livny 
error scope computational grid 
proceedings eleventh ieee symposium high performance distributed computing july 
tuecke foster 
replica selection globus data grid 
ieee international symposium cluster computing grid may 

vo 
discipline method architecture reusable libraries 
software practice experience 
whitaker shaw gribble 
scale performance denali isolation kernel 
proceedings fifth symposium operating system design implementation boston ma december 
white grimshaw nguyen 
grid file access legion model 
proceedings ninth ieee symposium high performance distributed computing august 
miller 
reliable network connections 
proceedings eighth acm international conference mobile computing networking pages atlanta ga september 
miller livny 
process hijacking 
proceedings eighth ieee international symposium high performance distributed computing 
