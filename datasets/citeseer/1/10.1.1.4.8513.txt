automatic detection fragments dynamically generated web pages ramaswamy college computing georgia tech arun iyengar ling liu fred douglis ibm watson research center atlantic drive box atlanta ga yorktown heights ny laks cc gatech edu ibm com dividing web pages fragments shown provide significant benefits content generation caching 
order web site fragment content generation methods needed dividing web pages fragments 
manual fragmentation web pages expensive error prone unscalable 
proposes novel scheme automatically detect flag fragments cost effective cache units web sites serving dynamic content 
consider fragments interesting shared multiple documents different lifetime personalization characteristics 
approach unique features 
propose hierarchical fragment aware model dynamic web pages data structure compact effective fragment detection 
second efficient algorithm detect maximal fragments shared multiple documents 
third develop practical algorithm effectively detects fragments lifetime personalization characteristics 
evaluate proposed scheme series experiments showing benefits costs algorithms 
study impact adopting fragments detected system disk space utilization network bandwidth consumption 
categories subject descriptors information systems information storage retrieval general general terms algorithms design performance keywords dynamic content caching fragment caching fragment detection shared fragments fragments 
amount information world wide web continues grow astonishing speed 
number dynamic web pages done intern ibm research summers 
copyright held author owner 
www may new york new york usa 
acm 
typically generated programs executing request time increasing rapid pace 
web caching technologies date successful efficient delivery static web pages effective delivering dynamic web content due frequent changing nature diversified freshness requirements 
efforts address problem efficient serving dynamic pages fragment publishing caching web pages stands successfully commercialized years 
conceptually fragment portion web page distinct theme functionality distinguishable parts page 
web page fragments stored independently server caches 
publishing scheme lifetime specified fragment level page level 
advantages fragment schemes apparent conclusively demonstrated 
separating non personalized content personalized content marking increases cacheable content web sites 
furthermore fragment solution web page need invalidated part page expires 
amount data gets invalidated caches reduced 
addition information shared web pages needs stored improves disk space utilization caches 
fragment caching solutions typically rely web administrator web page designer manually fragment pages web site 
manual markup fragments dynamic web pages labor intensive error prone 
importantly identification fragments hand scale requires manual revision fragment markups order incorporate new enhanced features dynamic content operational fragment solution framework 
furthermore manual approach fragment detection unmanageable unrealistic edge caches deal multiple content providers 
growing demand techniques systems automatically detect interesting fragments dynamic web pages scalable robust efficiently delivering dynamic web content 
interesting mean fragments detected cost effective fragment caching 
automatic detection fragments presents unique challenges 
compared static web pages dynamically generated web pages distinct characteristics 
hand dynamic web pages seldom single theme functionality fragment header fragment included pages fragment side bar fragment included pages fragment daily schedule fragment fragments football sport today page frg frg frg frg xxxxxx frg typically contain pieces information varying freshness sharability requirements 
hand dynamic personalized web pages completely dynamic personalized 
dynamic personalized content embedded relatively static web page templates 
furthermore dynamic web pages web site tend share information 
shows dynamic web page generated publishing system 
football sport today page web pages hosted ibm sporting event 
contains interesting fragments cost effective candidates fragment caching latest football results women final latest medal tally daily schedule women football navigation menu ibm logo sport site top page sport links menu left side page 
fragments differ terms themes functionalities invalidation patterns 
latest results fragment changes different rate latest medal tally fragment turn changes frequently fragment containing daily schedule 
contrast navigational menu top page sport links menu left side page relatively static shared dynamic pages generated response queries sport events hosted web site 
second apparent example humans easily identify fragments different themes functionality prior knowledge domain content sports example 
order machines programs automate fragment detection process need mechanisms hand correctly identify fragments different themes functionality human involvement hand efficient effective detecting flagging fragments cross comparison multiple pages web site 
propose novel scheme automatically detect common top frg high volume web serving overview frg frg news te sports ft frg news today fragment frg frg fragments web page frg frg frg fragment latest results fragment fragment medal tally fragment flag fragments dynamic web pages cost effective fragment caching 
analyze web pages respect information sharing behavior personalization characteristics change frequencies time 
analysis system detects flags interesting fragments web site 
consider fragment interesting sharability pages served web site distinct lifetime characteristics 
contains original contributions propose efficient fragment aware data structure model dynamic web pages including augmented fragment tree shingles encoding fast algorithm computing shingles incrementally 
data structure forms step efficient detection fragments 
second efficient algorithm detecting fragments shared documents call shared fragment detection algorithm 
algorithm distinctive features uses node buckets speed comparison detection exactly approximately shared fragments multiple pages 
introduces sharing factor minimum fragment size minimum matching factor performance parameters measure tune performance quality algorithm terms fragments detected 
third effective algorithm detecting fragments different lifetime characteristics call lifetime personalization fragment detection algorithm 
unique characteristic algorithm detects fragments beneficial caching nature pattern changes occurring dynamic web pages 
discuss performance enhancements basic algorithms report experiments evaluation proposed fragment detection scheme showing effectiveness cost approach 

candidate fragments goal automatic fragment detection find interesting fragments dynamic web pages exhibit potential benefits cost effective cache units 
refer interesting fragments candidate fragments rest 
web documents considered formed html documents approach applied xml documents 
documents formed converted formed documents document normalization example html tidy 
concretely introduce notion candidate fragments follows web page web site candidate fragment 
part candidate fragment candidate fragment conditions satisfied part shared existing candidate fragments 
part different personalization lifetime characteristics encompassing parent ancestor candidate fragment 
formal definition candidate fragments web pages web site definition 
candidate fragment nw denote set web pages available web site cf denote set fragments contained fragment fragment referred ancestor fragment fragment iff directly transitively contains fragment af denote ancestor fragments fragment fs denotes set fragments corresponding set documents di nw fs nw cf di 
document web site fragment fs called candidate fragment conditions satisfied 
maximal shared fragment shared distinct fragments fm fi fs fi fj exists fragment af shared distinct fragments fm 

fragment distinct personalization lifetime characteristics 
af different personalization lifetime characteristics observe recursive definition base condition web page fragment 
evident definition conditions independent 
conditions define fragments benefit caching different independent perspectives 
call fragments satisfying condition shared fragments fragments satisfying condition fragments denoting lifetime personalization fragments 
lifetime characteristics fragment govern time duration fragment cached stay fresh tune value server 
personalization characteristics fragment correspond variations fragment relation cookies parameters url 
observed independent conditions candidate fragment definition correspond aims fragment caching 
identifying creating fragments parts shared fragment aim avoid unnecessary duplication information caches 
creating fragments different lifetime personalization properties improve cacheable content minimize amount frequency information needs invalidated 

fragment detection basics section discuss basic design automated fragment detection system including system architecture efficient fragment aware data structure automating fragment detection important configurable parameters system 
system overview primary goal system detect flag candidate fragments dynamic pages web site 
fragment detection process divided steps 
system conceived construct augmented fragment tree af tree dynamic pages fed fragment detection system 
second system applies fragment detection algorithms augmented fragment trees detect candidate fragments web pages 
third step system collects statistics fragments size pages share fragment access rates statistics aid administrator deciding enable fragmentation 
gives sketch system architecture 
provide independent fragment detection algorithms detecting shared fragments detecting lifetime personalization fragments 
algorithms collocated server side cache edge cache dynamic web page dumps web site 
fragment detection system architecture algorithm detecting shared fragments works collection different dynamic pages generated web site fragment detection algorithm works different versions web page obtained single query repeatedly submitted web site 
example order detect fragments need locate parts fragment different lifetime personalization characteristics 
done comparing different versions dynamic web page detecting parts changed time parts remained constant 
put fragment detection algorithm differs shared fragment detection algorithm algorithms directly augmented fragment tree representation input web pages 
output fragment detection algorithms set fragments shared number documents different lifetime personalization characteristics 
fragmentation information served recommendations fragment caching policy manager respective web administrator see 
augmented fragment trees shingles encoding detecting interesting fragments web pages requires efficient traversal web pages 
compact data structure representing dynamic web pages critical efficient accurate fragment detection 
document models proposed popular model document object model dom models web pages hierarchical graph 
dom tree structure efficient fragment detection number reasons 
fragment detection algorithms compare pages detect fragments contents shared multiple pages contents distinctive expiration times 
dom tree reasonably sized html page nodes 
nodes tree correspond text formatting tags contribute content fragment detection algorithms 
second importantly nodes dom contain sufficient information needed fast efficient comparison documents parts 
motivate introduce concept augmented fragment tree af tree removes text formatting tag nodes fragment tree adds annotation information necessary fragment detection 
augmented fragment af tree shingles encoding hierarchical representation web html xml document characteristics compact dom tree text formatting tags big bold removed 
second content node shingles encoding :10.1.1.24.779
shingles fingerprints property document changes small amount shingles encoding changes small amount 
third node augmented additional information efficient comparison different documents different fragments documents 
concretely node af tree annotated fields node identifier nodeid vector indicating location node tree 
string indicating value node 
value leaf node text value internal node null empty string 
string defined recursively 
leaf node equal 
internal nodes concatenation children nodes 
node perceived fragment content region web document anchored subtree node 
integer value length bytes 
represents size structure document represented node 
encoding fast comparison 
vector integers representing shingles 
shingles property document changes small amount shingles change small amount 
fingerprinting techniques md behave similarly 
illustrates high sensitivity shingles comparing md hash example strings 
second strings essentially strings small perturbations portions differ strings highlighted 
md hashes strings totally different shingles strings vary just single value values shingles set shingle values set absent underlined diagram 
property shingles popular estimating resemblance containment documents 
fragment publishing web pages improves scalability web services 
provide efficient techniques automatically detect fragments web pages 
believe automating fragment detection crucial success fragment web page publication 
md bb aa shingles fragment publishing web pages improves efficiency web services 
provide scalable techniques automatic detection fragments web pages 
believe automating fragment detection critical success fragment web page publication 
md shingles example shingles versus md af tree construction step fragment detection process convert web pages corresponding af trees 
af tree constructed steps 
step transform web document dom tree prune fragment tree eliminating text formatting nodes 
result step specialized dom tree contains content structure tags table tr 
second step annotate fragment tree obtained step nodeid node value 
known shingles encoding algorithm compute 
briefly discuss basic algorithm compute shingles string 
basic algorithm string considered sequence tokens 
tokens words characters 
str tn ti token total number tokens str 
shingles set window length sample size constructed follows 
set subsequences length string str computed 
tw tw tn tn tn 
subsequences hashed number obtain token id hash function similar rabin function employed purpose 
parameter governs size hash value set subsequences mapped 
parameter set small value subsequences mapped token id leading collisions 
larger values avoid collisions subsequence increase size hash value set 
token ids corresponding subsequence 
token ids minimum selected shingles string str 
parameters tune performance quality shingles encoding 
basic shingles computation algorithm suitable computing shingles independent documents 
computing shingles independently node entail unnecessary computations inefficient 
simply content node af tree part content parent node 
computing node independently leads higher cost due duplicated shingles computation computing parent node incrementally 
propose incremental shingles computation method call hierarchical shingles computing scheme scheme short 
efficient shingles encoding algorithm section describe novel method compute shingles incrementally strings hierarchical structures trees 
incremental mean algorithm reuses previously computed shingles subsequent computation shingles 
consider string am tokens 
non overlapping substrings concatenation am 
describe incrementally compute shingles shingles available 
denote shingles strings respectively 
define overlapping sequences subsequences subsequences completely shingles shingles hashes subsequences represented set 
obtain shingles follows mins mins represents operation selecting minimum values values set shingles available extra computations needed compute hashes overlapping sequences 
central idea algorithm 
illustrates working scheme example string 
example shingles string string pre computed available want compute shingles concatenation strings 
algorithm computes overlapping subsequences strings shown overlap computes shingles overlapping string 
algorithm selects minimum values strings yield shingles entire string 
experiments see section indicate optimization reduce number hashes computed constructing af tree times improve shingles computation time times kbyte documents compared basic algorithm 
performance gain greater larger documents 

detecting shared fragments section discusses algorithm detect shared fragments 
collection dynamic web pages generated response string string automatic detection fragments websites shingles string shingles overlap shingles string min overlap shingles concatenated string algorithm distinct queries web site afi denote af tree th page 
call fragment afi maximal shared fragment shared distinct fragments pages ancestor fragment shared fragments pages 
system defined parameter 
definition mind immediate question efficiently detect shared fragments ensuring fragments detected cost effective cache units beneficial fragment caching 
experiences fragment solutions show shared fragment detection algorithm address fundamental challenges 
needs define measurement metrics sharability 
dynamic web site common find web pages sharing portions content similar exactly 
instances differences portions content superficial formatting differences 
automatic fragment detection system able detect approximately shared candidate fragments 
different quantifications meant shared lead different quality performance fragment detection algorithms 
second challenge need efficient scalable implementation strategy compare fragments pages identify maximal shared fragments 
approximate sharability measures shared fragment detection algorithm operates various web pages web site detects candidate fragments approximately shared 
introduce measurement parameters define appropriateness approximately shared fragments 
parameters configured needs specific application 
accuracy performance algorithm dependent values parameters 
minimum fragment size minf parameter specifies minimum size detected fragment 
sharing factor actor indicates minimum number pages share segment order declared fragment 
minimum matching factor actor parameter specifies minimum overlap considered shared fragment 
parameter minf exclude small segments web pages detected candidate fragments 
threshold size documents necessary overhead storing fragments composing page high fragments small 
parameter actor defines threshold number documents shared candidate fragment 
parameter actor model significance difference fragments compared 
fragments compared considered sharing significant content overlap greater equal actor 
detecting shared fragments node buckets shared fragment detection algorithm detects shared fragments steps shown 
algorithm creates sorted pool nodes af trees web pages examined node buckets 
algorithm groups nodes similar runs condition test maximal shared fragments 
number nodes group exceeds minimum number pages specified actor parameter corresponding fragment maximal shared fragment algorithm declares node group shared fragment assigns fragment identifier 
step putting nodes sorted pool node buckets concretely algorithm uses bucket structures create sorted pool nodes 
algorithm creates nb buckets 
bucket initialized bucket size associated pre assigned range denoted minsize maxsize 
af trees processed starting root tree node placed appropriate bucket nodes bucket minsize maxsize 
process putting nodes buckets bucket grows current size split buckets 
similarly step results pool buckets uneven distribution nodes bucket merge operation merge buckets 
af trees processed nodes entered corresponding buckets buckets sorted nodes bucket 
process set buckets containing nodes sorted node 
step shows working step af trees nodes trees put buckets 
buckets sorted buckets bt bt bt merged obtain set sorted buckets 
system supplied parameters number buckets nb employed purpose size bi bucket range bucket minsize maxsize 
various factors may affect decision set parameters including number af trees examined average number nodes af tree range nodes 
performance step better nodes evenly distributed available buckets 
way achieve balanced distribution nodes buckets set ranges buckets lower size spectrum smaller range buckets progressively increase buckets higher size spectrum 
strategy motivated observations 
expected number nodes lower level af trees larger number nodes higher level 
second nodes lower level expected smaller nodes higher levels af tree 
encourage having smaller ranges buckets lower size spectrum gradually increase range buckets higher size spectrum 
step aft sorted buckets aft sort sort buckets buckets step bt bt bt bt bt node buckets similar node group shared fragment detection algorithm step identifying maximal shared fragments grouping similar nodes output step sorted pool buckets descending order ranges buckets bucket contains list nodes sorted 
task second step compare nodes group nodes similar identify groups nodes satisfy definition maximally shared fragments 
step processes nodes buckets decreasing order sizes 
starts node having largest contained bucket highest maxsize value 
node processed algorithm compares node subset nodes 
subset constructed follows 
processing node ai subset nodes ai compared include nodes sizes larger ai ranges 
cset ai denote subset nodes respect node ai 
formula compute cset ai 
ai cset ai aj aj important note value setting parameter implications performance accuracy algorithm 
low increases number comparisons performed algorithm 
close number comparisons decrease lead comparison process nodes similar 
practice value appropriate web sites 
comparing node processed nodes cset algorithm compares nodes 
nodes shingles overlap minimal matching factor specified actor shingles node processed grouped 
step demonstrates comparison grouping nodes sorted buckets 
group actor nodes possibility detecting fragment 
declare group candidate fragment need ensure fragment corresponding group nodes maximally shared fragment trivial fragment 
ease decision group nodes similar shingles maximally shared fragment mark descendent declared fragment fragment id assigned fragment 
similar nodes detected check ancestors nodes belong fragment 
reject node group trivial fragment 
declare node group candidate fragment assign fragment id mark descendant nodes fragment id declare candidate fragment remove nodes belonging group buckets 
algorithm proceeds processing largest node node group manner 

detecting fragments fragments lifetime personalization fragments 
typically fragments different lifetime personalization characteristics encompassing parent fragment 
way detect fragments compare various versions web page track changes occurring different versions web page 
nature pattern changes may provide useful lifetime personalization information helpful detecting fragments 
challenge developing efficient fragment detection algorithm identify logical units web page may change different versions discover nature change 
web pages undergo variety changes versions 
parts web page deleted moved web page new parts may added 
simple algorithm compares parts appearing relative position different versions web page yield accurate fragments 
second challenge detect candidate fragments beneficial caching 
suppose structure table web page examined 
suppose properties structure remain constant different versions web page contents structure changed different versions 
possible ways detect fragments table structure fragment substructures table structure fragments 
beneficial caching depends percentages substructures changing changing frequency amount changes 
design fragment detection algorithm take number steps address challenges 
augment nodes af tree additional field takes value set choices unchanged 
second provide shingles similarity function compare different versions web page determine portions web page distinct lifetime personalization characteristics 
third construct object dependency graph web document examined top candidate fragments detected 
object dependency graph graphical representation containment relationship fragments web site 
nodes correspond fragments web site edges denote containment relationship 
propose configurable parameters measure quality fragments terms cache benefit tune performance algorithm minimum fragment size minf parameter indicates minimum size detected fragment 
child change threshold parameter indicates minimum fraction children node change value parent node declared 
parameter take value 
fragment detection algorithm works af trees different versions web pages 
installs version chronological order available base version 
algorithm compares subsequent version base version identifies candidate fragments 
new base version installed web page undergoes drastic change compared current base version 
step algorithm executes phases 
phase algorithm marks nodes changed value position versions af tree 
second phase algorithm outputs fragments merged obtain object dependency graph 
phase comparing af trees detecting changes concretely af trees corresponding versions web page algorithm compares node tree node similar 
employ nodes similarity comparison 
ai bj denote similarity function similarity shingles ai bj 
compute ai bj formula ai bj processing node bj af tree obtain node ai tree ai bj exists ah ah bj ai bj denotes user specified threshold quantity take value 
node tree means node similar node bj 
means node corresponds part added version 
node bj marked 
node ai similar node bj algorithm begins comparing node bj node ai 
algorithm compares nodeids nodes 
subtree value nodeid nodes exactly match node marked unchanged 
nodeids nodes differ means node changed position tree marked 
nodes ai bj exactly match algorithm checks leaf nodes 
marked 
algorithm recursively processes child node bj manner described marking unchanged 
algorithm addresses second issue discovering fragments extent changes undergoing calculating fraction bj children marked 
fraction exceeds preset threshold call bj marked 
algorithm recursively marks nodes tree phase 
version version unchanged unchanged unchanged object dependency graph fragments fragment detection algorithm phase detecting labeling fragments second phase algorithm scans tree root outputs nodes marked 
pass algorithm descends node children node marked unchanged 
node marked algorithm outputs fragment descend children 
ensures detect maximum sized fragments change versions 
demonstrates execution step fragment detection algorithm 
compare nodes af tree version appropriate nodes af tree version 
example node compared nodes appear different positions af trees 
indicate node version 
example set 
node marked children changed value 
indicates fragments discovered second pass algorithm 
summary fragment detection algorithm detects parts web page change value parts web pages changing position versions 
nodes changed value counted deciding status parent node 
nodes changed position unchanged purpose 
node just changes relative position parent node value parent node change considerable extent 

experimental evaluation performed range experiments evaluate automatic fragment detection scheme 
section report sets experiments 
second sets experiments test fragment detection algorithms showing benefits effectiveness algorithms 
third set studies impact fragments detected system improving caching efficiency fourth set experiments evaluates hierarchical shingles computation scheme 
input schemes collection web pages including different versions page 
periodically fetched web pages web sites bbc news bbc uk ibm portal marketing www ibm com www com slashdot www slashdot org created web dump web site 
sites share information web pages candidates shared fragment detection slashdot web page forms candidate fragment detection reasons explained section 
detecting shared fragments set experiments study behavior shared fragment detection algorithm 
data sets experimental study web page dumps bbc internet news ibm 
due space limitations primarily report results obtained experiments bbc web site 
bbc known news portal 
primarily web pages bbc web site classified categories web pages reporting complete news editorial articles henceforth referred article pages lead pages listing top news hour different categories world americas uk observed considerable information sharing lead pages 
bbc web site case study detecting shared fragments 
data set bbc web site web dump distinct web pages web site collected th july 
web dump included lead pages article pages 
illustrates number shared fragments detected different values minf actor recall minf minimum size detected fragment actor minimum percentage shingles overlap 
minf set bytes actor set number fragments detected 
number fragments increased actor set actor set 
experiments observed increase number detected fragments increasing actor 
number fragments detected bbc data set phenomenon explained follows 
actor set high value algorithm looks perfect matches 
suppose node af tree document children suppose node af tree document case children obviously nodes trees don match perfectly 
actor algorithm set nodes detected fragments 
hand actor set parent node detected single fragment 
actor set higher values number fragments detected increases 
size detected fragments falls increasing actor 
size largest fragment bytes maximum size detected fragments bbc internet news data sets ibm match factor match factor match factor maximum size detected fragments illustrates effect 
graph indicates maximum size detected fragments various data sets actor set bbc web site change size largest detected fragment drastic 
size falls bytes bytes actor increases 
pie chart indicates percentage fragments number pages sharing fragments bbc data set 
see large number fragments little shared exactly pages 
fragments shared exactly pages pages shared pages 
pages shared fragment fragments shared pages 
mean number pages sharing detected fragments 
fragments shared pages fragments shared pages fragments shared pages fragments shared pages fragments shared pages distribution fragment sharing bbc data set similar type behavior observed data sets 
large percentage detected fragments shared small number pages fragments shared web pages site 
detecting fragments experimental evaluation fragment detection algorithm 
experimented number web sites due space limitations restrict discussion web site slashdot www slashdot org 
slashdot known web site providing electronics business news 
front page slashdot web site carries headlines synopses articles site 
page indicates number comments posted users article 
new comments added existing articles new articles added web site page changes small ways relative entire content page 
forms case fragment detection techniques identify similarity pages 
slashdot data set study similarity pages level unstructured bytes finding different versions slashdot home page short time frame extremely compressible relative 
web page provides case study detect fragments number reasons 
web page highly dynamic 
parts page change minutes web page experiences major changes couple hours 
second various portions web page different lifetime characteristics 
third web page experiences different kinds changes additions deletions value updates furthermore parts web page personalized user 
table provides synopsis results fragment detection experiments 
total fragments detected set fragments detected set 
observe higher numbers fragments detected set higher values 
indicates threshold percentage children change value parent flagged changed 
threshold set higher values nodes located deeper tree flagged fragments 
nodes deeper tree number fragments detected higher 
equivalently average size fragment decreases increases 
note set higher values larger numbers small fragments detected 
set lower values fewer numbers large fragments detected 
cases depth fragmentation 
set number fragments detected depths respectively 
total fragments average fragment size depth fragmentation table statistics fragment detection impact caching having discussed experimental evaluation fragment detection system regard accuracy efficiency study impact fragment caching performance cache server network web sites incorporate fragments detected system respective web pages 
start studying savings disk space requirements fragment cache web pages incorporate fragments discovered fragment detection system comparison page cache stores entire pages 
earlier explained experimental evaluation shared fragment detection system bbc data set 
compare disk space needed store web pages data set stored page granularity disk space requirements storing web pages fragmented determined system 
size disk space mb disk space requirements page caching fragment caching fragment caching total number pages total storage requirements page fragment caches indicates total storage requirements function number pages page caches fragment caches 
graph shows caching fragment level requires disk space conventional page level caching 
graph shows improvements higher actor set low values 
actor set low values larger size fragments discovered 
stored replicated savings obtained terms disk space higher 
study effects fragments detected system load network connecting cache server 
discussed section incorporating fragments web pages reduces amount data invalidated caches turn reduces load origin servers backbone network 
order study impact fragments server network load fragments detected algorithm slashdot web site 
study load network need access invalidation patterns web pages 
accurate traces indicating patterns access invalidations certain assumptions aid create model accesses invalidations web pages 
assume requests web pages arrive poisson process supported past analysis 
assume request arrival rate requests second 
second model invalidation processes individual fragments poisson processes 
assume invalidation process fragment independent fragment web page 
invalidation rates experiments vary invalidations second invalidations second 
indicates total bytes transferred function number requests arriving cache fragment invalidation rates invalidations second 
axis bytes transfered page bytes transfered cache server page cache invalidation rate fragment cache invalidation rate page cache invalidation rate fragment cache invalidation rate number requests bytes transferred server cache indicates number accesses axis indicates total number bytes transferred log scale 
number bytes transferred page level caching higher fragment level caching 
invalidation rates high effect pronounced 
experiment demonstrates effectiveness caching fragments discovered fragment detection system reducing load network connecting cache origin server 
improving fragment detection efficiency section evaluate performance enhancements proposed 
proposed number techniques improve performance fragment detection process including incremental scheme compute nodes af trees algorithm 
due space constraints restrict discussion experimental evaluation algorithm 
number hashes thousands number hash calculations shingle computation direct computation algorithm size document string number hashes computed direct schemes shows total number hash computations involved constructing af tree 
document characters content string number hash computations needed scheme times number hashes computed direct computation 
document con tent string characters number hashes computed scheme times number hashes computed direct computation 
note benefits algorithm greater larger documents 

related fragment publishing delivery caching dynamic data received considerable attention research community years 
edge side includes markup language define web page components page assembly edge caches 
esi provides mechanisms specifying properties fragment level 
mohapatra discuss fragment mechanism manage quality service dynamic web content 
chan woo structural similarity existing various pages single site efficiently multiple web pages time 
analytical simulation studies compare esi finding esi potential performance advantages due ability deliver changing fragments 
addition considerable amount literature general area generation delivery caching dynamic content 
previous papers addresses problem automatically detect fragments web pages 
bar yossef rajagopalan related research automated fragment detection authors addressing different problem 
discuss problem template detection discovery web pages 
differs template detection context content 
template detection aimed improving precision search algorithms 
aimed detecting fragments beneficial caching content generation 
second syntactic definition number hyperlinks html parse tree elements 
define html element parse tree web page children hyperlinks ancestors 
definition different working definition candidate fragment provided section 
definition forbids recursion 
contrast permit embedded fragments 
third system algorithms detect shared fragments detect fragments 
detect embedded fragments 
significant identifying web objects identical granularity entire pages images pieces pages md sha hashes detect eliminate redundant data storage transfer 
motivations researches similar shared fragment detection algorithm restrictive sense full html pages detect eliminate pages byte blocks exact replicas 
pages similar level entire web pages pieces web pages identified resemblance detection delta encoded 
techniques potential reduce transfer sizes decomposing web pages separately cached fragments accomplishes similar reductions size need explicit version management 
addition discovering extracting objects web pages received considerable attention research community 
projects aim extracting objects nature information contain concentrates discovering fragments lifetime personalization sharing characteristics 

heavy demand technologies ensure timely delivery fresh dynamic content users 
generation caching dynamic web content widely recognized effective technique address problem 
past area adequately addressed problem divide web pages fragments 
manual fragmentation web pages web administrator web page designer expensive error prone scale 
novel scheme automatically detect flag interesting fragments dynamically generated web pages cost effective cache units 
fragment considered interesting shared multiple pages distinct lifetime personalization characteristics 
scheme analysis web pages dynamically generated web sites respect information sharing behavior personalization properties change patterns 
approach unique features 
propose hierarchical fragment aware model dynamic web pages data structure compact effective fragment detection 
second efficient algorithm detect maximal fragments shared multiple documents 
third develop algorithm effectively detects fragments lifetime personalization characteristics 
evaluate proposed scheme series experiments showing benefits costs algorithms 
report study impact adopting fragments detected system disk space utilization network bandwidth consumption 

document object model recommendation 
www org dom 
edge side includes standard specification 
www esi org 
html tidy 
www org people tidy 
lee noh min koh 
replica aware caching web proxies 
computer communications 
bar yossef rajagopalan 
template detection data mining applications 
proceedings www may 
broder 
resemblance containment documents 
proceedings sequences 
broder glassman manasse zweig 
syntactic clustering web 
proceedings www april 
liu 
fully automated object extraction system world wide web 
proceedings icdcs 
candan agrawal 
li po 

view invalidation dynamic content caching multi tiered architectures 
proceedings vldb september 
challenger iyengar dantzig 
scalable system consistently caching dynamic web data 
proceedings ieee infocom march 
challenger iyengar reed 
publishing system efficiently creating dynamic web content 
proceedings ieee infocom may 
chan woo 
cache compaction new technique optimizing web transfer 
proceedings infocom 
datta dutta thomas ramamritham 
proxy dynamically generated content world wide web approach implementation 
proceedings sigmod june 
douglis iyengar 
application specific delta encoding resemblance detection 
proceedings usenix annual technical conference june 

gu chen 
ma 
chen 
visual content understanding web adaptation 
proceedings ah 
kelly mogul 
aliasing world wide web prevalence performance implications 
proceedings th international world wide web conference may 
kulkarni douglis lavoie tracey 
redundancy elimination large collections files 
proceedings usenix annual technical conference june 
appear 
manber 
finding similar files large file system 
proceedings usenix january 
mogul 
network behavior busy web server clients 
technical report dec western research laboratories 
mogul chan kelly 
design implementation evaluation duplicate transfer detection 
proceedings nsdi march 
appear 
mohapatra chen 
framework managing qos improving performance dynamic web content 
proceedings globecom november 
garcia molina paepcke 
evaluation esi class delta encoding 
proceedings wcw 
rabin 
fingerprinting random polynomials 
technical report center research computing technology harvard university 
rhea liang brewer 
value web caching 
proceedings th www conference 
suel noel 
improved file synchronization techniques maintaining large replicated collections slow networks 
proceedings icde march 
appear 
