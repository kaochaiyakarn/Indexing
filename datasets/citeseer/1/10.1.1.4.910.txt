ieee transactions data engineering piazza peer data management system alon halevy zachary ives jayant madhavan peter mork dan suciu igor tatarinov june draft ieee transactions data engineering intuitively data management data integration tools suited exchanging infor mation semantically meaningful way 
unfortunately suffer significant problems typically require comprehensive schema design store share information difficult extend schema evolution heavyweight may break backward compatibility 
result small scale data sharing tasks easily facilitated non database oriented tools little support semantics 
goal peer data management system pdms address need propose decentralized easily extensible data management architecture user contribute new data schema information mappings peers schemas 
represent natural step data integration systems replacing single logical schema interlinked collection semantic mappings peers individual schemas 
describes aspects piazza pdms including schema mediation formalism query answering optimization algorithms relevance semantic web 
index terms peer data management data integration schema mediation web databases databases data management tools excel providing semantically rich data repre sentations expressive query languages historically hindered need significant investment design administration schema evolution 
schemas generally predefined comprehensive fashion evolving incrementally new concepts encountered schema evolution typically heavyweight may break existing queries 
result people find database techniques obstacles lightweight data storage large scale data sharing tasks facilitators 
resort simpler expressive tools ranging spreadsheets text files store exchange data 
provides simpler administrative environment standardization terminology description necessary significant cost functionality 
worse lightweight repository grows larger complex scale easy migration path semantically richer tool 
conversely strength html world wide web easy intuitive june draft ieee transactions data engineering support ad hoc extensibility new pages authored uploaded quickly linked existing pages 
flat files web environment lacks rich semantics 
initially shortcoming spurred movement xml allows data semantically tagged 
unfortunately xml carries requirements shortcomings data management tools rich data shared different groups concepts need placed common frame 
xml schemas completely standardized groups mappings created pairs related data sources 
desire complement web semantics spurred vision semantic web calls sharing structured data web scale queries spanning large numbers web sites 
research focus semantic web treating web knowledge base defining concepts relationships 
particular researchers developed knowledge representation languages representing meanings relating custom ontologies different domains reasoning concepts 
best known example rdf languages build rdf schema owl 
investigation define meaning data locally issues large scale data sharing addressed 
data integration systems proposed partial solution problem large scale data sharing 
systems support rich queries large numbers autonomous heterogeneous data sources exploiting semantic relationships different sources schemas 
administrator defines global mediated schema application domain specifies semantic mappings sources mediated schema 
get strong semantics needed applications data sources evolve independently appear relatively flexibly 
reality mediated schema integrated part system facilitates information sharing bottleneck process 
mediated schema design done carefully globally data sources change significantly violate mappings mediated schema concepts added mediated schema central administrator 
ad hoc extensibility web missing result data integration systems provide limited support large scale data sharing 
believe clear need new class data sharing tools preserves semantics rich query languages facilitates ad hoc decentralized sharing june draft ieee transactions data engineering db projects upenn uw stanford berkeley data project name descr student name status faculty name rank office advisor title forum year author data area name descr project name sponsor pubs title venue year author author member member area name descr project name pub title venue year member name pos name year thesis members name projects name 
data direction name project pid name 
fig 

pdms database research domain 
arrows indicate partial mapping relations peers 
peer relations shown stored relations university peers omitted 
db projects virtual mediating peer stored data 
illustrates semantic networks joined establishing single mapping pair peers uw stanford case 
administration data defining semantic relationships 
participant environment able contribute new data relate data existing concepts schemas define new schemas frames queries define new relationships existing schemas data providers 
believe natural implementation system peer peer architecture call system peer data management system pdms 
vision pdms blend extensibility html web semantics data management applications 
example extensibility pdms best illustrated simple example 
illustrates peer data management system supporting web database research related data 
running example describe functionality 
hierarchy data integration systems mediators pdms supports arbitrary network relationships peers 
true novelty lies pdms ability exploit transitive relationships peers schemas 
shows semantic networks fully joined mappings similar members semantic network example required single mapping 
new mapping stanford uw enables query peers access data peers transitive evaluation semantic mappings 
importantly mappings defined june draft data ieee transactions data engineering similar nodes semantic networks typically easier attempting map large number highly dissimilar schemas single mediated schema conventional data integration 
describes main contributions piazza pdms building university washington 
data integration literature relational data model largely simplest cleanest model define properties analyze complexity accordingly description piazza system relational context 
section ii presents logical model underlying defines problem semantic mediation pdms 
section iii outlines theoretical results concerning query answering mediation pdms 
section iv describes query answering algorithm piazza explains current research directions pursuing query optimization 
directions development techniques mapping composition explain section relational model ideal defining properties pdms real world xml useful representation sharing semantically rich data relational semistructured data sources export xml xml rdf data format focus efforts semantic web 
actual piazza system uses xml data model 
section vi describe piazza xml support explain provide infrastructure supporting xml rdf semantic web applications 
ii 
logical model pdms description logical model underlying pdms 
informally pdms consists set data sources peers related semantic mappings 
pdms viewed strict generalization data integration systems 
discussion assume relational data model focus select project join queries set semantics notation conjunctive queries 
notation joins specified multiple occurrences variable 
explicitly specified assume queries contain comparison predicates 
views refer named queries 
assume peer defines relational peer schema relations called peer relations query pdms posed relations specific peer schema 
loss generality assume relation attribute names unique peer 
june draft ieee transactions data engineering peers may contribute data system form stored relations 
stored relations analogous data sources data integration system queries pdms reformulated strictly terms stored relations may stored locally peers 
note peer needs contribute stored relations system peers may strictly serve logical mediators peers 
assume names stored relations distinct peer relations 
example example pdms peer relations shown 
lines peers indicate mapping described relations peers 
stored relations containing actual data provided universities upenn uw stanford berkeley peers 
db projects virtual peer provides uniform view domain 
stanford berkeley neighboring universities came agreement map schemas directly 
flexibility due ability evaluate transitive relationships schemas evident joined 
example mapping stanford berkeley pdms upenn uw pdms established queries peers able access stored relations 
note approach support evolving schemas naturally 
new schema version treated additional peer schema 
general new version similar previous version making problem specifying mapping versions easy 
addition resulting mapping accurate 
mapping language pdms obviously power pdms lies ability exploit semantic mappings peer stored relations 
particular types mappings considered mappings describing data stored relations generally respect peer relations mappings peer schemas 
point instructive recall formalisms context data integration systems build defining mapping description language 
mappings data integration data integration systems provide uniform interface multitude data sources logical virtual mediated schema 
mediated schema june draft ieee transactions data engineering virtual sense posing queries storing data 
mappings established mediated schema relations data sources forming tier architecture queries posed mediated schema evaluated underlying source relations 
data integration system viewed special case pdms 
main formalisms proposed schema mediation data integration systems 
called global view gav relations mediated schema defined views relations sources 
second called local view lav relations sources specified views mediated schema 
fact cases source relations said contained view mediated schema opposed exactly equal 
illustrate 
example db projects member peer relation mediates upenn uw peers may expressed gav definition 
definition specifies member db projects obtained union upenn uw schemas 
note examples peer relations named peer name relation name syntax may lav formalism specify uw peer relations views mediated db projects relations 
formalism especially useful data sources related particular mediated schema 
cases convenient describe data sources views mediated schema way 
scenario db projects may eventually mediate universities lav appropriate extensibility 
illustrates lav mapping uw june draft ieee transactions data engineering fundamental difference formalisms gav specifies extract tuples mediated schema relations sources query answering amounts view unfolding 
contrast lav source centric describing contents data sources 
query answering requires algorithms answering queries views exchange lav provides greater extensibility addition new sources require change mediated schema 
mappings pdms piazza peer language 
goal preserve features gav lav formalisms extend tiered architecture general network interrelated peer source relations 
semantic relationships pdms specified pairs small sets peer optionally source relations 
ultimately query peer relation may reformulated source relations peer transitive closure peer mappings 
formally define types mappings refer storage descriptions peer mappings 
storage descriptions peer contains possibly empty set storage descriptions specify data stored peer relating stored relations peer relations 
formally storage description form stored relation peer 
description specifies stores relation query schema 
result query schema peer cases data stored exactly definition view subset 
context data integration situation arises data peer may incomplete called open world assumption 
allow storage descriptions form call descriptions containment inclusion descriptions versus equality descriptions 
may possible describe exact contents data source refined query done 
june draft ieee transactions data engineering example storage description relate stored students relation peer upenn peer relations storage description says upenn students stores subset join student sor faculty reflects fact upenn students contain information students world probably contain data local students 
upenn affiliation peer relation corresponding semantics available storage description specified precisely follows peer mappings peer mappings provide semantic glue schemas different peers 
types peer mappings inclusion equality mappings similar concepts storage descriptions 
general case mappings form conjunctive queries arity inclusions sets peers 
query refer peer relation resp 
intuitively statement specifies semantic mapping stating evaluating peers produce answer subset case inclusions evaluating queries sides equation accommodate gav lav style mappings note allows express types mappings data integration 
second kind peer mappings called definitional mappings 
datalog rules relations head body peer relations body contain query 
formally long peer relation appears head definitional description mappings written equalities 
include definitional mappings order obtain full power gav mappings 
distinguish definitional mappings reasons june draft ieee transactions data engineering show section iii complexity answering queries equality mappings restricted definitional attractive general case definitional mappings easily express disjunction means union pair mappings summary pdms specified set peers means equal 
set peer schemas mapping function peers schemas set stored relations peer set peer mappings set storage descriptions storage descriptions peer mappings provided peer may stored peer relations defined peers peer extend peer relations data 
semantics peer stored relations mappings query peer schema pdms needs answer query data stored relations 
formally specify problem query answering need define semantics queries 
show notion certain answers data integration context generalized context 
goal formally define set answers query posed relations peer challenge arises peer schemas virtual fact data may exist partially system 
formally assume pdms instance stored relations set tuples stored relation data instance pdms assignment set tuples relation peer peer stored relations 
denote denote set tuples assigned relation result computing query extensional data define certain answers consider data instances consistent specification definition consistent data instance data instance stored relations pdms instance storage description form 
peer description said consistent june draft ieee transactions data engineering form form definitional description head predicate definitional mappings head result evaluating body instance intuitively data instance consistent describes possible state world extension peer relations allowable data peer mappings consistent data instance define certain answers hold possible definition certain answers query schema peer pdms instance stored relations tuple certain answer data instance consistent note bullet definition require extension fixed point model datalog rules 
defined certain answers hold consistent data instance get intuitive semantics datalog mappings 
query answering define query answering problem pdms pdms instance stored relations query find certain answers iii 
complexity query answering algorithm answering queries piazza focus section iv important understand tractable query answering pdms model 
section briefly review basic results relating complexity finding certain answers pdms mapping language full details 
computational complexity finding certain answers understood data integration context tiered architecture mediator set data sources 
show complexity query answering global context pdms data integration formalisms locally 
complexity depend restrictions impose peer mappings june draft ieee transactions data engineering focus analysis data complexity complexity query answering terms total size data stored peers 
typically complexity query answering polynomial np hard decidable undecidable 
polynomial case possible find reformulation query query refers stored relations 
reformulated query optimized executed 
cases possible find certain answers efficiently possible develop efficient reformulation algorithm provide certain answers returns certain answers 
key result peer mappings plays significant role complexity answering queries 
definition acyclic peer mappings set inclusion peer mappings said acyclic directed graph acyclic 
graph contains node node peer relation mentioned arc node corresponding corresponding peer description form appears appears theorem characterizes extreme cases query answering pdms theorem pdms specified problem finding certain answers conjunctive query pdms undecidable 
includes inclusion peer mappings storage descriptions peer mappings acyclic conjunctive query answered polynomial time data complexity 
difference complexity second bullets shows presence cycles culprit achieving query pdms note equalities automatically create cycles 
sense theorem establishes limit arbitrary combination formalisms lav gav 
second bullet points powerful schema mediation language pdms query answering done efficiently 
shows lav gav style reformulations chained arbitrarily extends results combined level lav followed level gav 
show complexity affected allowing comparison predicates identify cases query answering cyclic pdms tractable establish june draft ieee transactions data engineering complexity pdms consistency problem 
summary arbitrary data integration formalisms pdms query answering undecidable identified large useful subset query answering tractable 
iv 
query reformulation algorithm section describe algorithm query reformulation 
input algorithm set peer mappings storage descriptions query output algorithm query expression refers stored relations 
answer need evaluate stored relations 
precise method evaluating scope note techniques adaptive query processing suited context 
furthermore discussion assume peer mappings available single location reformulation done single place 
currently investigating methods distributed query reformulation 
algorithm sound complete sense 
evaluating produce certain answers certain answers polynomial time section iii produce certain answers 
describe algorithm provide intuition working challenges faces 
consider pdms peer mappings definitional similar gav mappings data integration 
case algorithm simple construction rule goal tree goal nodes labeled atoms peer relations rule nodes labeled peer mappings 
expanding query subgoal relevant definitional peer mappings pdms 
leaves tree expanded storage descriptions final step reformulation terms stored relations 
extreme suppose peer mappings pdms inclusions left hand side single atom similar lav mappings data integration 
case query subgoals apply algorithm answering queries views 
apply algorithm result proceed previous case storage descriptions step reformulation 
challenge complete algorithm combine interleave types reformulation techniques 
type reformulation replaces subgoal set subgoals replaces set subgoals single subgoal 
algorithm achieve june draft ieee transactions data engineering coauthor coauthor author author query author author peer descriptions coauthor author author storage descriptions area coauthor reformulated query fig 

reformulation rule goal tree emergency services domain 
dashed lines represent nodes included label see text 
building rule goal tree simultaneously marks certain nodes covering parent node uncle nodes 
illustrate algorithm example 
example illustrate rule goal tree shows example simple query 
query asks researchers worked project authored 
expanded subgoals appears goal node 
peer relation indicating researchers project involved single definitional peer description expand goal node rule children goal nodes peer relation specifying projects individual researcher involved 
author relation involved inclusion peer description 
expand author rule node child goal node relation coauthor 
expansion different nature lav style reformulation 
intuitively reformulating author subgoal left hand side right hand side includes subgoals author appropriate variable patterns mark covering uncle node 
annotation indicated dashed line 
peer relation author involved single peer description need expand precisely build rule goal dag illustrated example 
june draft ieee transactions data engineering subgoal author 
note apply description second time head variables reversed coauthor may symmetric 
point reformulate peer mappings consider storage descriptions 
find stored relations peer relations tree produce final reformulation 
reformulations peer relations stored relations gav lav style 
simple example reformulation involves level peer mappings general tree may arbitrarily deep 
optimizations second challenge face rule goal tree may huge 
tree may deep may need follow path semantically related peers 
second branching factor tree may large data replicated peers 
crucial develop effective methods pruning tree generating solutions quickly 
important emphasize sophisticated methods developed constructing rule goal trees context datalog analysis focus works developing termination criteria provide certain guarantees optimizing construction tree 
optimization methods immediately borrowed techniques developed evaluation datalog logic programs lifted data level expression level memoization nodes detection dead ends useless paths 
subtle case useless paths detected follows 
suppose sibling goal nodes labels suppose appears single inclusion peer description form right hand side numerous inclusion peer mappings 
case way reformulate predicate appears satisfies subgoal need explore ways reformulating redundant 
paths pdms traversed frequently develop set techniques may judiciously pre compose select set mapping chains network 
composition context means semantic mappings data sources possible june draft ieee transactions data engineering generate direct mapping equivalent original mappings 
equivalence means query class queries instance data sources composed mapping yields exactly answer obtained original mappings 
composition problem relevant number static analysis questions arise pdms 
pre computing composition mappings remove redundancies resulting reformulation leading significant run time savings 
second find redundant paths network paths pair nodes equivalent query reformulating query paths result equivalent queries third note data source source necessary concepts modeled nodes path result paths network get longer may witness information loss 
determine path possibly useful query find weak links try improve mappings 
discuss composition mappings detail 
mapping composition section assume semantic mappings form conjunctive queries respectively 
denote mapping brevity slightly abuse notation specifying bodies variables appear bodies assumed head variables 
composition problem 
suppose data sources mappings interested computing direct mapping guaranteed equivalent original mappings 
formally problem follows 
definition composition mapping composition mappings query language databases queries language certain answers certain answers note definition define unique composition 
defines june draft ieee transactions data engineering means set formulas equivalent compositions 
mentioned interested composition set conjunctive queries 
illustrate mapping composition examples 
example schemas single binary relation respectively 
consider mappings encodes edges graph states subset node pairs paths length similarly states node pairs paths length subset note brevity notation formula formula composition consists formulas formula captures fact path length emanating left hand side path length emanating means similar paths guaranteed projection column 
formula formula shows composition obtain facts obtain endpoints paths length paths length turn obtained paths length intuitively formulas capture relationships relationships follow 
example illustrates key difficulty constructing composition 
suffice consider composition formulas right hand side views appear right hand side formulas composition may require formulas complex views formula 
key challenge bound set views june draft ieee transactions data engineering considered 
fact example shows situation subtle set views may finite 
example consider mappings 
graph encoded red edges relation green edges relation 
earlier example subset node pairs red green paths 
relations formulas composition described similarly 
observe sequence sequence infinite 
equation infinite sequence captures formula path comprising red edge followed green edges query contained path comprising red edge followed green edges query 
expressed terms rule implied rules 
fortunately see cases including finite encoding infinite set glav formulas 
composition algorithm describe composition algorithm glav mappings :10.1.1.10.8486
provide brief overview algorithm 
see construct set composition formulas hold query describe compose single query terminology defined basis composition algorithm 
june draft ieee transactions data engineering fig 

composing example single query sequence reformulations 
composition single query informally proceed steps 
reformulate query second reformulate result steps parts reformulate query right hand side formulas replace views right hand side appearing left 
illustrate process query example 
proceed computing queries mappings maximally contained rewriting terms views right hand sides formulas query obtained replacing views corresponding views left hand sides formulas unfolding view definitions 
maximally contained rewriting views right hand sides formulas query obtained replacing views corresponding views left hand sides formulas unfolding view definitions 
procedure provide characterization composition june draft ieee transactions data engineering fig 

query unfolding set glav formulas set glav formulas form conjunctive query conjunctive queries composition set conjunctive queries general proposition may infinite challenge algorithm faces create composition cases 
algorithm key observations 
identify set minimal composition formulas show sufficient producing composition 
intuitively composition formulas minimal sense get results combination smaller formulas 
exists database instance formulas produce certain answers produced piecing smaller formulas composition 
second observation minimal formulas built increasing size 
minimal composition formula subgoals exists minimal composition formula subset subgoals possibly subset head variables subgoals observations mapping composition algorithm compo sition formulas right hand sides single atom 
step algorithm considers minimal formulas computed far tries extend adding atom right hand side 
process terminates new minimal rules obtained extension set computed minimal rules finite set composition mappings 
third observation underlying algorithm identify condition minimal com position formulas essentially tells formulas extended similar june draft ieee transactions data engineering ways 
condition partition formulas equivalence classes treat formulas equivalence class identically 
show finite number equivalence classes follows algorithm terminate composition 
formalize condition notion residues 
illustrate notion residue consider formula example extended obtain formula 
intermediate steps deriving formula shown 
fig 

deriving formula example containment mapping maps variable variable atom target atom observe extend containment mapping introduce atom extended containment mapping 
includes target extended query include join condition variable captured formulas join variable maps variable 
atom position variable atom characterize possible extensions formula constitute residue formula 
complete formula obtained extending maximally contained rewriting cover new atoms introduced algorithm algorithm constructs query rewrite graph qrg encodes composition sets mapping formulas 
briefly qrg consists kinds nodes query nodes rewrite nodes 
paths qrg contain alternate query nodes rewrite root node encodes minimal composition nodes 
path formula contains single atom chained obtain query similarly chained obtain query key construction qrg expand subgoal tree june draft ieee transactions data engineering atom gg query rew query gg residue rew query gg residue atom query rew query rg gg residue atom gg query gg gg rg gg rg gg gg gg rg gg gg gg gg gg 
fig 

query rewrite graph example 
query rewrite graph consists query nodes rewrite nodes 
right hand sides formulas composition encoded paths query nodes root left hand sides encoded corresponding rewrite nodes 
tree show different composition formulas encoded paths tree 
expanded subgoal equivalent residue 
show large class queries queries guaranteed finite number non residues algorithm terminate generate exact composition :10.1.1.10.8486
note number residues finite subset qrg produces correct composition formulas albeit possible ones 
show qrg composition mappings example 
vi 
pdms infrastructure semantic web point focusing formal aspects piazza pdms query answering problem 
course goal establish semantics real system implementation call piazza 
prototype piazza system designed scalable foundation data sharing applications constructed 
reality virtually mirrors goals semantic web community provide web scale sharing structured data enabling sophisticated queries performing complex tasks involving web sites 
june draft ieee transactions data engineering research defining meaning data semantic web relationships data little said piece large numbers web data sources perform queries span 
believe pdms provides solid basis building semantic web applications 
pdms architecture enables creation webs data allowing incremental addition sources new source maps sources deems convenient requiring sources map slow evolve hard manage standard schema 
piazza system implemented xml data model provide greatest flexibility accommodating real world data relational semistructured rdf data available xml form 
describe section xml data model requires slightly modified mapping language requires modifications query answering algorithms support xml nesting structure see details 
explained relationship pdms model traditional data integration techniques 
important consider piazza relates current semantic web efforts 
relationship semantic web xml vs rdf noted research semantic web date focused rdf underlying data model 
noted wide disconnect rdf world today data providers applications 
rdf represents set classes properties creating graph relationships 
rdf focused identifying domain structure 
contrast existing data sources applications export data xml tends focus domain structure important objects entities 
explicitly spelling entities relationships nest information related entities directly descriptions important objects doing leave relationship type unspecified 
instance xml data source serialize information books authors list book objects embedded author object 
book author logically related objects particular association rdf author writes book applications source may know document structure implicitly represents logical writes relationship 
vast majority data sources relational tables spreadsheets programming language june draft ieee transactions data engineering objects mails web logs hierarchical structures encode objects domain structure relationships 
application development tools web services rely structures 
clearly desirable semantic web able inter operate existing data sources consumers persist indefinitely serve real need 
perspective building semantic web applications need able map different domain structures sources document structures 
argue pdms xml data model provides infrastructure supporting rich semantic web applications 
follows describe extension piazza xml data model 
particular describe language semantic mappings implemented system 
ultimate goal piazza provide query answering translation full range data rdf associated ontologies xml substantially expressive schema language 
focus sharing xml data explain rdf owl data instances incorporated 
main distinctions rdf unordered xml xml accompanied schema assign semantic meaning particular attributes xml uses hierarchy membership implicitly encode logical relationships 
xml hierarchy central objects typically top related objects embedded subelements document structure embedding objects creates binary relationships 
course xml may include links represent arbitrary graphs predominant theme xml data nesting 
rdf names binary relationships pairs objects xml typically 
semantic meaning relationships expressed schema simply interpretation data 
important note xml perceived having syntax accurately viewed semantically grounded encoding data similar fashion relational database 
importantly pointed patel schneider simeon xml extended simply reserving certain attribute names serve element ids idrefs maintain rdf semantics xml representation 
consider unordered xml order information encoded data 
june draft ieee transactions data engineering data xml rdf worlds different formalisms defining schemas 
xml world uses xml schema object oriented classes database schemas 
xml schema defines classes subclasses specifies restricts structure assigns special semantic meaning keys certain fields 
contrast languages rdfs daml oil various levels owl come knowledge representation kr heritage ontologies represent sets objects domain relationships sets 
owl uses portions xml schema express structure called domain values 
remainder refer owl representative class languages 
functionality kr descriptions concept definitions captured xml world generally database world views 
kr world concept definitions represent certain set objects constraints satisfy concepts compared subsumption algorithms 
xml world queries serve similar purpose furthermore named views referenced queries views 
view express constraints combine data multiple structures perform role kr concept definition 
queries compared query containment algorithms 
extensive literature studies differences expressive power description logics query languages complexity subsumption containment problem 
example certain forms negation number restrictions query expressions query containment undecidable arbitrary join conditions expressed reasoned description logics 
mapping xml data section describe language mapping xml nodes piazza network 
algorithm mappings query answering described 
node schema expressed xml schema defines terminology structural constraints node 
clear distinction intended domain terms defined schema node actual data may stored 
clearly stored data conforms terms constraints schema intended domain terms may broader particular data stored node 
example terminology publications applies data instances particular ones stored node 
june draft ieee transactions data engineering source xml schema pubs book title author name publisher name source xml schema authors author full name publication title pub type source rdf owl class definition class id book datatypeproperty id booktitle domain book range xsd string datatypeproperty id domain book range author class id author datatypeproperty id domain author range xsd string fig 

example peer data source schemas xml sources rdf source owl ontology 
source xml contains books nested authors source xml contains author nested publications 
indentation illustrates nesting suffix indicates occurrences bnf grammar 
source rdf set owl class property definitions slightly simplified notation 
relational case mappings play roles 
role storage descriptions specify data stored node 
allows separate intended domain actual data stored node 
example may specify particular node contains publications topic computer science author university washington 
second role peer mappings describe terminology structure node correspond second node 
language storage mappings subset language schema mappings discussion focuses 
data integration literature uses standard relational query language queries mappings elect xml query query language language specifying mappings 
xml query inappropriate mapping language reasons 
xml query user thinks terms input documents transformations performed 
mental connection required schema output setting requires thinking relationships input output schemas 
second user define mapping entirety 
simple way define mappings incrementally different parts june draft ieee transactions data engineering schemas collaborate experts developing sub regions mapping xml query extremely powerful query language fact turing complete result aspects language difficult impossible reason 
approach define mapping language borrows elements xml query tractable reason expressed piecewise form 
mappings language defined mapping definitions directional source target take fragment target schema annotate xml query expressions define source data mapped fragment 
mapping language designed easy mapping designer visualize target schema describing data originates 
conceptually results different mapping definitions combined form complete mapping source document target certain rules 
instance results different mapping definitions concatenated form document cases different definitions may create content combined single element piazza fuses results output element unique identifiers similar skolem functions languages xml ql 
complete formal description language 
describe main ideas language illustrate examples 
mapping definition begins xml template matches path subtree legal instance target schema prefix legal string target schema grammar 
elements template may annotated query expressions subset xml query bind variables xml nodes source combination bindings instance target element created 
variable bound referenced scope defined enclosing tags template 
variable bindings output new target data referenced query expressions correlate data different areas mapping definition 
shows example peer xml schemas source xml source xml 
fig ure defines simple mapping schema source xml source xml 
variable braces delimit query expression annotations mapping definition instantiate new book element target occurrence variables typ bound author title june draft ieee transactions data engineering pubs book document source xml authors author publication title typ publication pub type typ book title title author name full name name author book pubs initial mapping pubs book piazza id document source xml authors author publication title typ publication pub type typ book title piazza id title author piazza id name full name name author book pubs refined mapping coalesces entries fig 

simple examples mappings schema source xml source xml schema 
publication type elements source respectively 
construct title author element occurrence book 
author name contains new query expression annotation full name element created match xpath expression schema match 
example mapping create new book element author publication combina tion 
probably desired behavior book multiple authors appear multiple book entries single book multiple author subelements 
enable desired behavior situations piazza reserves special piazza id attribute target schema mapping multiple binding instances output elements created target tag name id attribute coalesced attributes element content combined 
coalescing process repeated recursively combined elements 
example see improved mapping coalescing book elements 
sole difference previous example piazza id attribute 
determined book titles collection unique occurrence title june draft ieee transactions data engineering data source refers book 
identical books piazza id coalesced likewise title author subelements author names 
target see authors nested book entry 
example shows invert hierarchies going source target schemas 
may detailed information values data mapped source target example know mapping definition yields book titles starting letter interestingly may know possible values attribute target absent source publisher 
piazza refer sort meta information properties 
information help query answering system determine mapping relevant particular query useful efficiency purposes 
example continuing previous schema consider partial mapping pubs book piazza id document source xml authors author publication title typ publication pub type typ book property title piazza id title author piazza id name full name name author publisher name property name publisher book pubs property definition specifies know mapping includes titles starting second defines virtual subtree delimited target 
june draft ieee transactions data engineering insufficient data source insert value publisher name define property restriction values 
special variable allows establish known invariant value current location virtual subtree case known publisher name values specified 
general query target looking books mapping query looking books published 
query looking books published mapping piazza tell book published 
focusing pure xml data point mappings useful translating xml serializations rdf 
example maps xml rdf uses value mappings concordance table 
example suppose attempting map source xml owl instance source rdf 
furthermore assume title book specified differently sources source uses caps format uses mixed case 
assume concordance table concordance xml populated xml schema form table entry source name source name mapping map data source xml source rdf book piazza id rdf org source rdf document source xml authors author publication title full name typ publication pub type document concordance xml table entry source name source name typ book booktitle rdf resource booktitle june draft ieee transactions data engineering book author rdf org source rdf document source xml authors author author typ publication pub type full name typ book vii 
related idea mediating different databases local semantic relationships new 
federated databases cooperative databases notion inter schema de define semantic relationships databases federation 
previous proposals assumed database federation stored data focus mapping stored relations federation 
differs ways 
scale pdms assumed larger structure ad hoc 
joining leaving pdms easier federated database 
consequence relationships peers looser 
second peers play different roles provide data provide integration services peers provide 
result need able map relationships stored relations conceptual relations extensional vs intentional relations 
third focus algorithms chaining multiple peer mappings order locate data relevant query 
described challenges involved building pdms focusing intelligent data placement technique materializing views nodes network order improve performance availability 
authors study variant data placement problem focus intelligently caching reusing queries olap environment 
described local relational models formalism mediating different peers pdms sound complete algorithm answering queries formalism describe expressive power formalism compared previous ones data integration literature 
june draft ieee transactions data engineering edutella system represents interesting design point xml rdf ability spectrum 
piazza built peer peer architecture mediates different data representations 
focus edutella provide query storage services rdf ability different underlying stores 
important focus project translating rdf data queries underlying storage format query language 
data particular document structure attempting translate different structures edutella begins rdf uses canonical mappings store different subsystems 
result inherent rdf mediated architecture edutella employ point point mappings nodes 
edutella uses jxta peer peer framework order provide replication clustering services 
architecture proposed piazza peer peer web system 
projects database community developing similar architectures slightly different emphases 
chatty web focuses gossip protocols exchanging semantic mapping information mappings selection projection queries evaluate information loss 
focuses problems relating mappings objects different relations important aspect mapping sources 
peerdb takes approach mapping peers schema mappings peerdb employs information retrieval approach query reformulation 
peer relation columns associated set keywords 
query peer schema peerdb reformulates query peer schemas matching keywords associated schemas 
keywords matched directly pair schemas chaining reformulation steps required keyword matching may give irrelevant query reformulations user decide queries executed 
kr community observer kraft systems explored number issues distributed ontologies including mappings structured sources approximate mappings concepts ontologies 
significant interest developing grid computing architectures see www mygrid org uk www com modeled electric power grid system 
goal construct generic parallel distributed environment resource sharing information exchange allow arbitrary users especially scientific users plug grid 
noted lively discussion interesting relationships june draft ieee transactions data engineering grid computing semantic web 
believe piazza provides data management infrastructure support data services grid 
viii 
concept peer data management system emphasizes ad hoc scalable distributed peer peer computing environment compelling distributed systems perspective provides easily extensible decentralized environment sharing data rich semantics 
contrast data integration systems centralized mediated schema administrator experience impede small point point collaborations 
complements knowledge representation semantic web providing mechanism translating different ontologies data representations 
described main highlights piazza pdms including solution schema mediation peer data language uses previous mediation formalisms local level form network semantically related peers characterization theoretical limitations answering queries pdms algorithm answering queries system results concerning composition semantic mappings 
argued pdms provide basis building applications semantic web showed extend piazza xml data model 
described implemented prototype piazza built small web database research related web sites 
currently focusing developing testing effective methods query optimization piazza management propagation updates pdms 
addition believe management large collections semantic mappings raises interesting challenges 
query composition lays basis studying fundamental properties networks 
interested studying boost collection mappings improve ability nodes obtain relevant data distant nodes network 
peer data management rich domain creates wealth new problems replicate data reconcile inconsistent data 
berners lee hendler lassila semantic web scientific american may 
june draft ieee transactions data engineering dean connolly van harmelen hendler horrocks mcguinness patel schneider stein owl web ontology language available www org tr wd owl ref july working draft 
garcia molina papakonstantinou quass rajaraman sagiv ullman widom tsimmis project integration heterogeneous information sources journal intelligent information systems vol 
pp 
march 
haas kossmann wimmers yang optimizing queries diverse data sources proc 
vldb athens greece 
candan papakonstantinou subrahmanian query caching optimization distributed mediator systems proc 
sigmod montreal canada pp 

levy rajaraman ordille querying heterogeneous information sources source descriptions vldb pp 

duschka genesereth answering recursive queries views pods pp 

manolescu florescu kossmann answering xml queries heterogeneous data sources proc 
vldb pp 

ambite ashish knoblock minton modi muslea tejada ariadne system constructing mediators internet sources system demonstration proc 
sigmod seattle wa 
lambrecht kambhampati optimizing recursive information gathering plans proceedings th international joint conference artificial intelligence pp 

smith bernstein dayal goodman lin wong integrating heterogeneous distributed database systems proceedings national computer conference 
afips press nj pp 

halevy answering queries views survey vldb journal vol 
pp 

abiteboul duschka complexity answering queries materialized views pods seattle wa pp 

halevy ives suciu tatarinov schema mediation large scale semantic data sharing vldb journal appear 
friedman levy millstein navigational plans data integration proceedings aaai 
ives halevy weld integrating network bound xml data ieee data engineering bulletin special issue xml vol 
june 
halevy mumick sagiv shmueli static analysis datalog extensions journal acm vol 
pp 
september 
srivastava ramakrishnan pushing constraint selections proc 
pods san diego ca pp 

madhavan halevy composing mappings data sources proc :10.1.1.10.8486
vldb 
vardi complexity bounded variable queries proc 
pods pp 

halevy ives mork tatarinov piazza mediation integration infrastructure semantic web data journal web semantics appear 
patel schneider simeon building semantic web xml int semantic web conference june 
june draft ieee transactions data engineering horrocks van harmelen patel schneider daml oil www daml org daml oil index html march 
levy 
rousset combining horn rules description logics carin artificial intelligence vol 
pp 
september 
halevy ives mork tatarinov piazza data management infrastructure semantic web applications proc 
int 
www conf 
xml query effort wwww org xml query 
deutsch fernandez florescu levy suciu query language xml eighth international world wide web conference 
litwin mark roussopoulos interoperability multiple autonomous databases acm computing surveys vol 
pp 

krishnamurthy litwin kent language features interoperability databases schematic discrepancies proc 
sigmod denver colorado pp 

rusinkiewicz sheth specifying dependencies ina multidatabase environment ieee computer vol 

catarci lenzerini representing interschema knowledge cooperative information systems journal intelligent cooperative information systems pp 

gribble halevy ives suciu databases peer peer acm sigmod webdb workshop 
ng ooi papadias tan adaptive peer peer network distributed caching olap results proc 
sigmod 
bernstein giunchiglia kementsietsidis mylopoulos serafini data management peer peer computing vision proceedings webdb workshop 
nejdl wolf qu decker sintek naeve nilsson palmer risch edutella networking infrastructure rdf eleventh international world wide web conference pp 

aberer mauroux hauswirth chatty web emergent semantics gossiping twelfth international world wide web conference 
kementsietsidis marcelo arenas mapping data peer peer systems semantics algorithmic issues sigmod 
ng ooi 
tan zhou peerdb system distributed data sharing sigmod 
mena kashyap sheth illarramendi observer approach query processing global information systems interoperation pre existing ontologies distributed parallel databases vol 
pp 

preece hui gray kraft agent architecture knowledge fusion vol 
pp 

roure foster miller hendler goble semantic grid grid meets semantic web panel www conference honolulu hawaii 
june draft 
