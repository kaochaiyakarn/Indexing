precise service level agreements james davide wolfgang emmerich department computer science university college london london wc bt uk emmerich cs ucl ac uk slang xml language defining service level agreements part contract client provider internet service describes quality attributes service required possess 
define semantics slang precisely modelling syntax language uml embedding language model environmental model describes structure behaviour services 
presence slang elements imposes behavioural constraints service elements precise definition constraints ocl constitutes semantic description language 
semantics define notion sla compatibility extension uml enables modelling service situations precursor analysis implementation provisioning activities 
increasingly distributed systems primitives build mission critical applications cross autonomous organizations 
examples include web services example supply chain management computing demand distributed component grid technology offered ibm 
usefulness functioning business depend functionality quality services example performance reliability qualities depend behaviour service client contracts provider client service contain terms governing individual mutual responsibilities respect qualities 
clauses called service level agreements slas previous proposed specialised languages represent slas purpose easing preparation automating negotiation adapting services research partly funded eu project ist automatically terms reasoning composition 
slang sla language differs previous significant respects firstly contrast languages focus web services exclusively defines sla vocabulary spectrum internet services including application service provision asp internet service provision isp storage service provision ssp component hosting motivated observation federated distributed systems manage quality aspects deployment 
secondly structure slang derived industrial requirements 
resembles slas currently effort provide realistic terms useful usable 
thirdly meaning slang formally defined terms behaviour services clients involved service usage 
benefits formal semantics include reduction ambiguity meaning language means check semantics ensure absence inconsistencies loopholes 
style semantic definition aims user friendly allowing serve human negotiators 
provides formal basis comparisons slas model systems employing slas guide implementation analysis efforts 
facilities address types compositionality slas inter service composition required qos levels compared offered qos levels intra service composition qos levels offered service related levels provided components 
describes approach taken produce rigorous understandable specification semantics slang semantics reasoning service composition 
unified modelling language uml model language producing syntax 
embed language model object oriented model services service clients behaviour 
presence slas instances language model constrains behaviour associated services service clients 
constraints defined formally object constraint language ocl accompanying natural language descriptions define semantics language 
semantics easily understood context service model 
exemplify approach section describing slang semantics asp slas 
inter service composition requires matching desired service levels expressed target sla terms offered service levels 
slas deemed compatible offered sla permits behaviours service model violate target sla 
composition discussed section 
intra service composition requires specification behaviour system extraneous slas 
employ combined service language model basis extension uml 
allows modelling services slas context detailed design information 
semantic model services slas informs analysis activities determine emergent qualities composed systems 
inform development sla aware services provides model behaviour systems 
uml extension provided form qos catalogue appropriate proposed uml profile modelling quality service fault tolerance characteristics mechanisms henceforth qos profile described section 
section describes slang detail 
section gives example semantic definition slang presenting semantics asp slas 
section discusses compatibility slas addressing inter service composition 
section presents qos catalogue asp part slang addressing intra service composition 
section discusses differences slang sla languages terms approach style semantic definition 
section summarizes section discusses 
slang slang meets need sla language support construction distributed systems applications reliable qos characteristics 
syntactic structure semantics slang defined model distributed system architecture 
model defines scope language assisted identifying service usage scenarios parameters slang represent 
model shown model applications clients application services deliver user services 
application ser slightly modified application tier middle tier underlying resources app app application application service container storage network 
model distributed system architecture vices services electronic interface web services ee net components 
containers host application services responsible managing underlying resource services communication transactions security forth 
networks provide communication services storage implement persistence containers 
slang slas include point description contractors information customer provider location facilities contractual statements start date duration agreement service level specifications technical qos description associated metrics 
slang defines different types sla corresponding service usages model 
divided vertical slas service provides technical support client horizontal slas client part functionality service service type 
hierarchical structure slang syntax subdivides sls terms specific groups 
terms subdivided client provider mutual responsibility clauses 
vertical slas hosting service provider host persistence host storage service provider communication application host internet service providers 
horizontal slas asp application service asp container container providers networking network providers 
slang syntax defined xml schema 
choice xml basis language reflects popularity xml domain distributed systems 
particular xml documents frequently provide service meta data deployment descriptors 
adopting xml basis slang seek ease integration qos adaption negotiation technologies depending slang statements existing internet service technologies 
slang semantics formal semantic definition slang advantages 
ambiguity concerning meaning sla limited disagreements concerning correspondence semantic elements real world 
semantic elements specific corresponding language elements ambiguity reduced 

implications semantic definition tested refined generating slas assessing semantics reasonable 

semantic definition forms objective basis definitions relationships slas particular matching desired service levels offered service levels required inter service composition 

semantic definition provides service implementations conform slang slas 
approach approach taken formalising slang adapts approach precise uml group formalising uml 
language modelled uml 
creates meta model syntax 
statements language regarded instances model 
uml defined syntax serves point attachment semantic descriptions meta data interfaces notations 
case slang xml schema provides primary definition language 
necessary manually translate uml 
shows syntax asp slas 
reflects hierarchical structure xml schema slang top level defining type sla separate clauses provider client responsibilities mutual responsibilities example 

parties services involved agreement modelled 
case slang informal model provided starting point 
translated uml refined 
shows refined model application service provision 
additional concepts introduced support definition semantics terms slang 
example asp sla specify types backup monitoring solution 
introduced allow assertion solutions real world correspond specified sla 
defining type software backup monitoring may contribute little principle goal ensuring qos distributed applications 
industrial requirements slang indicated clients frequently required 
capacity formalise clearly apparently informal constraints significant benefit approach taken 

behaviour parties services involved agreement modelled model basis 
shows behaviour application services clients 
primary interaction case interval time client invoking operation service 
operations capabilities service 
client able detect usage successful completion 
usage appears completed client detect failure occurred 

language model related elements slas intended constrain 
seen classes operation monitoring solution model elements associated relevant clauses language model 

semantics slang defined constraints imposed behavioural model presence sla elements 
expressed ocl constraints defined context sla clauses 
sla associated service service client constraints refer entities place conditions 
readability constraints expressed natural language 
complete set constraints defining meaning asp sla documented 
example ocl definition constraint define meaning maximum latency reliability 
reliability asp sla defined terms failed overdue usages system 
failure gives client leave assume interval service outage equivalent inter invocation time service maximum allowable rate 
party sla double duration double string string server client name string application operation name string name string schedule name string double duration double period double double string double boolean name string double reliability double double name string string 
syntax slang name string double double boolean boolean double asset datatype name string name string owner 
refined model application service provision client service reasonably claim unavailable assume provider trusted report outages honestly client necessarily trusted trusted third party poll service definition reliability required 
maximum allowable rate datatype name string operation party name string strictest client performance clause applying moment failed operation invoked 
server client performance clauses sla associated schedules 
schedule defines clause applies specifying start date date duration period 
clause applies repeatedly name string event date double interval duration double log failed boolean operation name string deleted created datatype name string lost owner name string recovered 
behavioural model application service provision ing duration inactive period complete 
multiple schedules associated clause allow specification complex timing interpretation clause applies schedules apply 
example schedules durations hours periods week start dates offset day combined specify composite schedule working day 
ocl definitions rely models figures 
defined context class meaning constraints apply instances class server performance clauses real world 
operations usages associated clause referred constraints navigating associations uml models dot operator 
name opposite association usually name associated class lower case character 
attribute values ocl operations referred syntax 
ocl operations side effect free operations defined context classes decompose complex constraints 
convention omitted signatures operations compartment diagrams 
reliability constraint proportion downtime observed total time clause applies greater name string backup incremental boolean datatypes string encrypted boolean individual boolean percentage permitted failures reliability 
context inv self operation forall reliability additional ocl operations support definition reliability constraint context def returns client performance clauses governing performance operation time double operation sla select schedule exists applies expression maximum throughput client operation time limit double operation isempty iterate double min amount downtime observed failure time restrictive throughput constraint applicable time downtime double operation double total amount downtime observed operation operation double select failed duration schedule exists applies date collect downtime date iterate double double constraint relies definition operations defined context superclass clause evaluates total time applicable applies defined context schedule evaluates true schedule applies specified time date 
complete set operations combined constraint defines effect sla environment 
proportion failed overdue service usages may exceed specified reliability 
definition unambiguous consistent providing strong parties employing slas 
semantics support activities related service composition discussed subsequent sections 
inter service composition slas say sla compatible set allowable behaviours subset words system conforming violate perfectly acceptable client requiring notion compatibility supports inter service composition 
service require express requirements sla 
service provides required functionality offers compatible sla composed fulfil requirements 
definition allows comparison fully specified slas 
slas include restrictions client behaviours preferable allow comparisons slas requirements relating server behaviour 
dangerous due interactions sla terms 
example definition reliability previous section relationship invocation rate constraint client reliability 
sla offering higher reliability faster rate necessarily compatible sla slower rate absolute number failures may property concern client absolute number successes 
possible generalisation notion compatibility ability compare sla sets values ranges specified parameter interpretation compatible compatible specific valuation ranges 
possible procedure checking compatible employ semantic model meta model 
associated service model constraints checked set behavioural models acceptable thought set traces system behaviours 
clearly approach potentially extremely computationally expensive unworkable possible behaviours infinite 
preferable employ theorem prover establish validity union constraints equivalent investigate approach 
definition compatibility similar conformance defined relation language qml contract conforms constraints stronger 
sla dimension defined contract qml direction indicating ordering values metric higher values implying stronger constraints 
conformance contracts assessed comparing values corresponding dimensions contracts 
comparison definition compatibility hard check somewhat inflexible 
basis semantic definition sla terms user defined ordering metric spaces suggests concept offers safer guarantees requirements met particularly presence dependencies sla terms discussed 
qos catalogue slang reasoning internal composition slas special case qos prediction components governed slas system conform offer sla 
qos prediction requires view system effect components quality attributes known 
may require sophisticated analysis determine emergent qos values 
uml potentially offers view 
represent logical structure deployment behaviour service 
extended profiles enable description qos properties 
section describe slang slas may modelled uml semantics enables analysis implementation activities 
profile semantic extension uml allowing naturally model domains interest 
common string datatypes string boolean boolean string double double reliability double double 
asp qos characteristics slang catalogue define semantics profile domain model 
interpretation elements uml model labelled stereotypes correspond instances domain model 
object management group omg standardise profiles particular application areas 
standard profiles ensures reusability models tools operate annotated model data 
qos profile currently proposed standard 
allows modelling qos characteristics classes qos values instances classes 
qos values associated model elements indicate behaviour requirements 
proposal compensates providing catalogue qos characteristics informally defined semantics 
define new profile represent services slas reused qos profile defining qos catalogue slang 
shows slang catalogue asp slas 
sla terms defined qos characteristics inherit definitions provided semantic model analogously defining profile directly domain model 
qos profile allows corresponding qos values attached messages uml communication diagram stereotypes 
cases state recipient message corresponds service associated sla semantic model sender corresponds service client 
elements assumed behave accordance sla terms 
defined opportunity tool check compatibility slas compatibility criteria defined previous section 
shows example model including slang schedule double double period double duration double asp contract governing interaction client online auction service 
constraints bidding operation shown 
ability represent slas uml necessary insufficient condition enable reasoning qos properties 
necessary represent impact system components directly governed slas cases support analysis method determining emergent characteristics system 
profile schedulability performance real time specification henceforth real time profile provides facilities systems performance issue resource utilisation scheduling greatest performance impact 
supports derivation models queuing networks petri nets 
efforts underway extend uml describe reliability properties 
shows qos characteristics defined domain model real time profile allowing direct analysis 
alternative semantic model approach directly available 
perfectly possible qos characteristics simultaneously real time profile annotations interpretation real time measures approximation service levels consider formalised 
provides complete picture behaviour system terms performance including sla terms sufficiently detailed permit analysis 
uml design language choice adopting model driven architecture mda development strategy 
methodology models business knowledge maintained separately technical models artifacts enhancing reusability multiple platforms 
model transformation key technology mda deploy business knowledge automatically new sd asp example customer bid sec reliability min tar day hour datatypes users bids day false 
example communication diagram including slang qos values cal domains 
transformations rely semantics source target domains 
providing rich semantic representation sla aware systems qos catalogue potentially serves starting point implementations systems mda principles benefiting model transformations 
show mda techniques enable automatic analysis giving example performance analysis proceeds designs expressed realtime profile 
slang semantics provides analysis implementation efforts relating internal composition slas 
related approach defining semantics slang derived precise uml group define syntax uml lend semantics associating semantic domain 
contribution approach demonstrate application high level abstraction including sophisticated quantitative properties 
section compare semantic definition slang offered sla languages 
briefly describe features languages lacking slang potential impact semantic definition 
qua project adopts rigorous approach defining semantics qos properties knowledge define concrete syntax representing slas 
model qos properties related performance service supplies set operations 
input output messages causally related operation invocations 
output messages characterised set variables 
set error functions defined difference vector observed output trace particular input trace ideal trace observed service deployed infinitely fast equipment operating error 
slas defined constraints values error functions 
possible see correspondences semantics qua approach 
case service model defines information available concerning service operation ocl constraints provide concrete representation error functions 
features semantics obvious qua approach constraints independent service model assumption constraint service provider capable providing monitoring solution specified asp sla ability constrain client behaviour qua terms input trace 
qml defines type system slas allowing user define dimension types 
whilst language highly extensible meaning individual metrics context system formally established 
exchange slas parties requires common understanding metrics regarded serious deficit 
qml define rigorous semantic type system notion sla conformance 
qml provide type systems slas allowing sla described instantiated specific values 
provides guidance developers new slas xml schemas 
slas require common understanding terms parties hoped new types sla defined infrequently 
generalisation relationships slas potentially helpful structuring family sla types 
provides additional reuse facilities including template instantiation reuse definitions 
sla specifications rely specification measurements external ontologies 
ontologies structured natural language descriptions measurements including advice taken interdependencies 
xml web services sla language 
measurements assumed provided web service encapsulating monitors 
constraints placed implementation monitors common understanding role remains external definition language 
provides ability create new metrics defined functions existing metrics 
useful formalise requirements expressed terms multiple qos characteristics impacting notions compatibility slas 
semantic expressions metrics formally defined barrier prevents definition 
xml language structured way monitoring clauses separated contractual terms distribution third party 
interested supporting third party monitoring schemes slang 
precisely schemes require careful modelling inform design metrics 
principle syntactic separation clearly useful 
provides additional syntax interrelate service offerings 
relationships indicate substitutability slas event violation 
facilities clearly useful language allow definition management information including financial terms associated slas 
defined semantic claims need financial ontologies clearly desirable feature sla languages lacking slang 
languages define management actions including notifications event sla violations 
corba trading object service allows advertisement selection services offers constraints typed properties 
properties include qos specifications generally take idl type 
semantics formally defined external ontologies specified 
trader clients agree interpretation properties 
quo corba specific framework qos adaption proxies 
includes quality description language describing qos states adaptations notifications 
properties language defined result invoking instrumentation methods remote objects 
formal constraints placed implementation methods 
approach taken defining semantics slang 
advantages semantic reduce ambiguity language improve consistency support sla composition 
model forms basis common understanding sla terms parties sla reducing risk outsourcing functionality organisations providing unambiguous negotiation arbitration agreements 
facilities vital emerging internet service business model 
introduced concepts inter intra service composition slas 
inter service composition supported notion compatibility slas defined relationship possible service behaviours slang semantics 
intra service composition relies semantics provide meaning models services uml diagrams supporting analysis implementation activities 
slang evolving language 
related section highlights desirable features previous sla languages slang benefit incorporating 
include payments related service violations reuse features including sla templates clause reuse generalisation hierarchies specification management actions performed response qos state changes sla violations ability define new parameter types terms existing types ability distribute clauses third parties exposing sensitive details client server ability define dynamic relationships service levels effectively defining permissible states system capable adapting qos behaviour 
features enhance utility usability language modifying semantic definition underlying parameters potentially requiring extensions existing semantics 
additional realise value semantic definition automating consistency checking slas implementing application monitors rely definition slas assess conformance slang terms defining additional relationships slas automating comparison investigating methodologies designs systems governed slang slas 

vladimir richard guidance related specifying measuring quality service distributed object systems 
st international symposium object oriented real time distributed computing pages kyoto japan april 
ieee press 
olson bryant burt 
quality service catalogue software components 
southeastern software engineering conference pages huntsville alabama usa april 
evans kent 
meta modelling semantics uml approach 
nd international conference unified modeling language volume lecture notes computer science lncs pages 
springer verlag 
frankel 
model driven architecture applying mda enterprise computing 
omg press 
wiley publishing 

qml language quality service specification 
technical report tr palo alto california usa 
international business machines ibm web service level agreement language specification january 
emmerich 
specification language service level agreements 
technical report university college london march 
object management group omg 
joint qos fault tolerance rfp logix open realtime edition 
object management group omg 
corba trading service formal edition may 
object management group omg 
uml ocl nd revised submission ad edition january 
object management group omg 
uml profile schedulability performance real time specification final draft ptc edition march 
object management group omg 
unified modelling language formal edition march 
beckmann 
application hosting requirements 
technical report ag dortmund september 
organization advancement structured information standards oasis 
universal description discovery integration uddi july 
pagurek patel 
reusability constructs web service offerings language 
workshop web services business semantic web caise wes lecture notes computer science lncs austria june 
springer verlag 
rodriguez roberts emmerich 
reliability support model driven architecture 
workshop software architectures dependable systems icse wads appear portland oregon usa may 
acm press 
emmerich 
model driven approach non functional analysis software architectures 
th ieee conference automated software engineering appear montreal canada october 

semantics slang asp slas 
blair 
quality service semantics component systems 
nd international conference reflective adaptive middleware systems middleware volume lecture notes computer science lncs pages 
springer verlag june 
sun microsystems enterprise java beans ejb specification august 
pagurek patel 
requirements ontologies management web services 
workshop web services business semantic web caise wes volume lecture notes computer science lncs pages toronto canada may 
springer verlag 
pagurek patel ma 
management applications web service offerings language 
th international conference advanced information systems engineering caise volume lecture notes computer science lncs pages austria june 
springer verlag 
world wide web consortium 
web services description language wsdl 
