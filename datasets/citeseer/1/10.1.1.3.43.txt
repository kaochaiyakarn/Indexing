efficient security mechanisms routing protocols yih chun hu carnegie mellon university cs cmu edu economy critical infrastructure increasingly rely internet securing routing protocols critical importance 
new mechanisms tools securing distance vector path vector routing protocols 
securing distance vector protocols hash tree chain mechanism forces router increase distance metric forwarding routing table entry 
provide authentication received routing update bounded time new mechanism similar hash chains call tree authenticated oneway chains 
cases maximum metric large provides efficient initial computation cost efficient element verification mechanism new cryptographic mechanism called mw chains 
securing path vector protocols cumulative authentication mechanism authenticates list routers path routing update preventing removal reordering router addresses list mechanism uses single authenticator routing update router address 
simple mechanism securely switch way chains authenticating way chain previous 
mechanisms efficient symmetric cryptographic techniques building blocks securing routing protocols 

routing protocols difficult efficiently secure 
attacker may example attempt inject forged routing messages system may attempt modify legitimate routing messages sent nodes 
attacker may attempt exploit mechanisms routing protocol intended quickly spread new routing information consume large amounts network router resources 
addition cryptographic mechanisms routing protocol may protocol supported part nsf ccr nasa nag gifts schlumberger bosch 
views contained authors interpreted necessarily representing official policies endorsements express implied nsf nasa schlumberger bosch rice university carnegie mellon university government agencies 
adrian perrig carnegie mellon university perrig cmu edu david johnson rice university cs rice edu vulnerable attacks traditional security mechanisms generally expensive terms cpu time attacker may able routers simply flooding router large numbers randomly generated forged routing messages authenticated rejected router leading denial service consuming router cpu time 
current routing protocols internet today border gateway protocol bgp routing information protocol rip originally designed operate trusted environment assuming malicious nodes 
growing importance usage internet increasing number corporations public services dependent correct functioning internet routing protocol security significant issue 
command control critical infrastructures control power grid emerging internet carry voice traffic examples trend 
importance securing internet routing illustrated bgp misconfigurations non malicious bgp speakers able disrupt internet routing result incorrect configuration 
researchers proposed secure network routing protocols standard digital signatures authenticate routing update messages 
similarly area secure multihop wireless ad hoc network routing researchers standard digital signatures authenticate routing messages 
unfortunately generation verification digital signatures relatively inefficient challenging design scalable efficient viable secure routing protocol asymmetric cryptography 
symmetric cryptographic primitives efficient asymmetric primitives far security mechanisms symmetric cryptography designed requirements routing protocols 
discuss exceptions aware 
mechanisms symmetric cryptography proposed secure link state routing updates 
cheung presents efficient time authentication protocol authenticate link state routing updates 
proposed authentication optimistic routers routing update authenticated 
hauser tsudik propose efficient oneway hash chains authenticate link state routing updates 
zhang subsequently improves mechanism presents chained merkle time signature similar basic mw chains scheme section technique space efficient 
assumes neighboring routers share secret keys routers md authenticate messages 
approach allows bgp protect spoofed tcp segments connection stream tcp resets particular concern 
basagni protocol network wide shared key routing purely symmetric cryptography 
approach assumes secure hardware protect key 
previously developed efficient secure routing protocols symmetric cryptography 
sead protocol introduces new efficient mechanism way hash chains secure distance vector routing updates 
ariadne routing protocol secure demand ad hoc network routing protocol source routing 
new security mechanisms efficient symmetric cryptographic techniques applied strengthen current distance vector path vector routing protocols incorporated design new secure routing protocols 
securing distance vector protocols hash tree chain mechanism forces router increase distance metric forwarding routing table entry 
provide authentication received routing update bounded time new mechanism similar hash chains call tree authenticated way chains 
cases maximum metric large provides efficient initial computation cost efficient element verification mechanism new cryptographic mechanism called mw chains 
securing path vector protocols cumulative authentication mechanism authenticates list routers path routing update preventing removal reordering router addresses list mechanism uses single authenticator routing update router address 
simple mechanism securely switch way chains authenticating way chain previous 
section discuss assumptions underlying secure mechanisms 
section describes basic cryptographic mechanisms 
section describes new mechanisms improving security distance vector protocols section presents new mechanisms building efficient secure path vector routing protocols 
section 
assumptions designing mechanisms build secure routing protocols assumptions node capability key setup 

node assumptions computational resources network nodes vary greatly high internet backbone router tiny ad hoc network node 
results general possible design mechanisms extremely lightweight efficient 
allows mechanisms resource constrained ad hoc network nodes enables large internet routers scale high bandwidth links 
particular design mechanisms purely symmetric cryptographic functions message authentication codes macs cryptographic hash functions 
contrast mechanisms asymmetric cryptography orders magnitude slower hash functions 
previous secure internet ad hoc network routing relies asymmetric cryptography 
computing signatures resource constrained nodes expensive high overhead computations may hinder routing protocol scalability large networks 
assume trusted hardware modules 
secure routing trusted hardware simpler node compromise assumed impossible 

security assumptions key setup assume mechanism enables secure authentic distribution keying material 
mechanisms require distribution authentic public values enable authentication subsequent values 
cumulative authentication mechanism assumes pairwise shared secret keys authentic public keys nodes broadcast authentication system tesla 
digital signatures public key infrastructure may set authenticated public values establish pairwise shared secret keys conjunction key agreement protocol diffie hellman 
assume protection immediate replay routing packets 
wired network static wireless network router configured list possible neighbors router receives update node list silently discard update 
mobile tree authenticated values wireless networks ad hoc networks developed packet leashes restrict immediate replay 
assume mechanisms 

cryptographic mechanisms section review basic cryptographic mechanisms 
review values known merkle hash trees 
review way hash chains frequently cryptographic primitive 

tree authenticated values mechanism tree authenticated values efficient hash tree authentication mechanism merkle known merkle hash trees 
authenticate values vw place values leaf nodes binary tree 
simplicity assume balanced binary tree power 
blind vi values way hash function prevent disclosing neighboring values authentication information describe vi 
merkle hash tree construction commit values internal node binary tree derived child nodes 
consider derivation parent node mp left right child nodes ml mp ml denotes concatenation 
compute levels tree recursively leaf nodes root node 
shows construction values 
root value tree commit entire tree conjunction additional information authenticate leaf value 
authenticate value vi sender discloses vi sibling nodes nodes path vi root node 
receiver nodes verify path root authenticates value vi 
example sender wants authenticate key includes val ues packet 
receiver authentic root value verify equals stored root value 
verification successful receiver knows authentic 
extra added tree avoid disclosing example value authentication 

way hash chains way hash chains simply way chains frequently cryptographic primitive design secure protocols 
create way chain selecting final value random repeatedly apply way hash function 
description discuss way chain viewpoint usage value chain value generated initially randomly chosen value value chain 
way chains main properties assuming cryptographically secure way hash function anybody authenticate value really belongs way chain earlier value vi chain checking equals vi 
latest released value vi way chain adversary find value equals vi 
value vi released second pre image collision resistant hash function prevents adversary finding different vi vi equals vi 
properties result authentication way chain values current value vi belongs way chain see value property equals vi originates chain released creator chain 
jakobsson coppersmith jakobsson propose storage efficient mechanism way chains way chain elements requires log storage log computation access element 

mechanisms securing distance vector protocols section review distance vector routing protocols discuss attacks previous securing distance vector routing remaining research challenges 
new mechanisms address challenges 
utility mechanisms limited routing protocols 
particular mechanism section allows highly efficient generation verification elements long hash chains giving constant factor speedup generation verification 
particularly useful protocols long way hash chains tesla biba 

overview distance vector routing distance vector routing protocol finds shortest paths nodes network distributed implementation classical bellman ford algorithm 
distance vector protocols easy implement efficient terms memory cpu processing capacity required node 
popular example distance vector routing protocol rip widely ip networks moderate size 
distance vector routing routing multihop wireless ad hoc network having node network act router participate routing protocol 
distance vector routing router maintains routing table listing possible destinations network 
entry node routing table contains address identity destination node shortest known distance usually number hops destination address node neighbor router hop shortest route destination distance destination known metric table entry 
routing packet destination node transmits packet indicated neighbor router destination router turn uses routing table forward packet hop destination 
maintain routing tables node periodically transmits routing update neighbor routers containing information routing table 
node uses information advertised neighbors update table route destination uses hop neighbor claimed shortest distance destination node sets metric table entry destination hop metric neighbor update 

attacks distance vector routing security mechanisms distance vector routing protocol may vulnerable number attacks malicious routers 
example malicious router perform types attacks try attract traffic possible advertising short distances destinations 
attack referred attack 
attack quite powerful malicious router control communication passes 
router eavesdrop data selectively drop alter packets inject packets 
eavesdropping specific target may challenging today internet need access network link target claiming short distance target malicious router attract target traffic 
try claim longer distances 
attack results traffic flowing attacking router potentially allowing attacker obtain network services example case multihop wireless ad hoc network network bandwidth battery power forward packets nodes 
attempt prevent attack weaker malicious router arbitrarily discarding delaying reordering packets sent forwarding 
inject routing loops 
powerful attack resulting routing loop go malicious router single packet sent loop cause packet forwarded large number times 
routing loop goes malicious router attack equivalent data flooding attack example attacker forms loop routers nx back time forwards packet loop equivalent sending packet traversing routers 
inject large number route updates consume network bandwidth router processing time 
attacks forms denial service attacks consuming network resources preventing packet delivery 
attacks powerful attacks attack routing loop attack attacker loop 
result aim prevent malicious router claiming shorter distance target prevent loop forming attacker loop 

overview previous securing distance vector routing remaining challenges briefly reviewed previous secure routing section 
sead secure distance vector routing protocol designed particularly efficient uses way hash chains asymmetric cryptography 
briefly overview sead discuss remaining research challenges 
sead secure efficient ad hoc distance vector routing protocol dsdv secure sead hash chains 
distance vector protocols rip sead requires limit hop count metric denoted 
distance vector update originated node sead contains sequence number metric example sead hash chain 
arrows show direction hash chain generation hash chain usage proceeds opposite direction 
tion 
sequence number indicate freshness route update 
metric distance measured number hops originating node destination 
node receives route update entry route update accepts entry entry higher sequence number entry equal sequence number lower metric route entry currently node route table destination 
order prevent attacks route updates sequence number metric authenticated 
sead authenticates sequence numbers metrics route updates way hash chains 
outlined section mainly concerned authenticity route update node route shorter order prevent attack 
initialize node forms way hash chain vi vi describe section maximum hop count maximum sequence number hash chain allows 
values authenticate routing update entries specify node destination 
allow values authenticated authentic published authenticated seed value node example certificate authority 
value authenticate route update entry sequence number metric node destination example hash chain node depicted 
initialize published authenticated seed value node start route update entries destination node sends authenticator sequence number metric 
recipient authenticate public authenticated value compute node advertise sequence number metric authenticator 
similarly recipients update advertise sequence number metric authenticator forth 
time node starts route updates entries destination disclose authenticate sequence number metric 
properties way hash chain node forge routing update higher sequence number forge routing update equal sequence number lower metric 
larger sequence numbers take precedence smaller ones nodes simply drop updates smaller sequence numbers metric lower 
node selects hop router destination source address routing update shortest distance receives source address routing update authenticated 
authentication achieved signature broadcast authentication pairwise shared keys 
sead specifies pairwise shared keys exploits periodic nature protocol 
nodes move range nodes example hear update sent 
node including updates symmetric authentication new neighbor conversely hears updates respond including updates symmetric authentication new neighbor nodes move away longer neighbors routing tables reflect 
example move apart routing table show longer neighbor update fresh sequence number override older update received directly including routing updates symmetric authentication node sead prevent number attacks attacks shortcomings remain sead prevent distance fraud node receiving advertisement sequence number distance metric re advertise sequence number distance section presents approach prevents distance fraud 
drawback sead attacker force victim node verify hash chain long ks maximum number hops maximum number sequence numbers represented hash chain 
section describes tree authenticated way chains mechanism bounds effort lgs 
scheme prevents sequence number rushing attack section 
overhead verify authentication values large node missed routing updates 
attacker exploit overhead perform denial service attack sending bogus routing updates forcing node spend considerable effort verifying authenticity 
section introduce novel authentication scheme hybrid way chain time signature call mw chain 
mw chain introduce section way chain efficient verify case missed routing updates 
network maximum diameter approach reduces verification overhead lgs arbitrary positive integers reduce overhead setting single hash chain ks 
discuss mechanisms solve remaining challenges 
mechanisms generalized secure distance vector protocols 

hash tree chains preventing distance fraud alternative called hash tree chains way hash chains authenticating distance metric distance vector protocols prevent distance fraud attack introduced 
new mechanism forces node increase distance destination sending routing update 
noted section packet leashes prevent adversary replaying routing update wireless networks adversary stealth node route 
packet leash provides hop hop authentication preventing adversary impersonating node 
prevent distance fraud need prevent attacker replaying hash value increasing metric replacing node id attacker node id construct special way chain call hash tree chain element chain encodes node id forcing node increase distance metric wants encode id step way chain contains collection values authenticate particular node 
values authenticated merkle tree root merkle tree generate collection values step 
hash tree chain hybrid hash tree way chain 
way chain property way sead enforce nodes decrease distance metric hash tree property authenticate node id construct hash tree pair vi vi way chain values follows 
value vi derive set values bn way hash function vi build hash tree values described section 
root tree previous value way chain vi 
shows example 
node id forwards shaded values neighboring nodes compute way hash tree chain forward verify authenticity values value sign id forwarding route update automatically increasing distance metric 
examples hash tree chain single value corresponds node tuple values corresponds node 
notational analytic convenience describe hash tree chains number values hash chain value power 
small network value correspond single node nodes share single value attacker way derive value advertisements neighboring nodes follow hash tree chain step order provide valid authenticator 
larger networks nodes overhead generating step chain may great result authenticate node tuple values 
nodes share tuple values attacker learn values different neighbors advertise metric forge advertisement increasing metric 
show attacker probability success may sufficiently small 
change encoding node id update attacker static network continue forge updates finds appropriate set values neighbors 
consider hash tree chain values step hash tree height 
example node unique node id tuple encodes node id sequence number mod tuple changes sequence number 
analyze security hash tree chains probability malicious node forge advertisement advertisements neighbors 
clearly value corresponds single node id forgery possible 
consider case pair values represents node 
analysis consider hash tree chain values psfrag replacements vi vi vi vi vi generation usage vi authenticating distance metric sequence hash tree chain 
example element bi stands router hash tree chain supports routers 
step network nodes 
compute probability attacker claim metric heard metric advertised nodes 
values attacker produce nodes particular value 
follows attacker ways failing get predetermined values 
compute probability attacker unable obtain value 
set nodes attacker receive value disjoint nodes values 
result attacker ways failing get values 
applying inclusion exclusion principle compute number ways attacker fail obtain values needs possible distributions 
probability successful defense example attacker hears advertisements probability forging valid authenticator advertisements increasing distance destination 
words attacker decrease advertised metric expectation average rounds 
improve security reduce route oscillations require node advertise particular metric consecutive sequence numbers choose route 
example require route advertised consecutive times accept routing updates sent accepted valid second attacker successfully send forged routing update average years parameters 
generalize analysis consider security hash tree chain scheme node corresponds set values 
consider number ways attacker fail obtain specific set different values 
nodes help attacker total ways pick nodes help attacker 
ai set combinations nodes include value bi needed attacker 
attacker psfrag replacements sample network demonstrate sequence number rushing attack 
ai ways fail 
apply principle ai ai ai ai probability successful defense ai analyze variants scheme described earlier 
particular look 

represents fold reduction computation exchange increase overhead 
attacker probability success consecutive advertisements required metric routing change attacker succeeds years 

represents fold reduction computation exchange increase overhead 
attacker probability success consecutive advertisements required metric routing change attacker succeeds years 

tree authenticated way chains preventing sequence number rushing attack protocols sead node missed number sequence numbers may need perform large number hash operations bring chain date 
creates potential denial service vulnerability attacker knows victim missed updates destination attacker flood victim updates containing sequence numbers bogus authenticators victim perform hash operations update received attempt verify update 
alternatively attacker fabricate update sequence numbers far requiring node receiving update perform large number hash operations determine update bogus attack somewhat mitigated loose time synchronization rate limiting new sequence numbers 
attack sequence number rushing attack 
explain attack example 
consider case malicious node tries attract traffic flowing source destination neighbor shows network setup 
attacker hops hops hears new routing updates reach rush routing update policy node uses routing update sequence number forward traffic hears routing update new sequence number contains shorter route 
remedy rushing attack adapt delayed route update adoption policy shortest route previous sequence number 
example node hears routing update sequence number destination shortest update sequence number 
unfortunately approach vulnerable attack sends routing updates hears update sequence update distance sequence number followed update distance sequence number tree authenticated way chain mechanism section prevents forging low distance metrics previous route updates 
delayed route update adoption policy prevent sequence number rushing attack 
describe efficient tree authenticated oneway chain mechanism properties addition hash chain sead bounds effort verify update second prevents node fresh sequence number information lower metric authenticators old sequence numbers 
new scheme new hash chain sequence number 
node scheme generates random hash chain root sequence number psfrag replacements example tree authenticated way chain construction authenticating sequence way chains 
instance allows sequence numbers authenticated metrics 
shaded values represent sequence number metric 
example prf secret master key derive 
authentic anchor hash chain hk maximum metric node authenticate hm authenticator sequence number metric allow nodes authenticate anchors hk node builds hash tree hash chain anchors leaves section 
node sends update new sequence number includes root hash chain anchor hash chain hk path root hash tree 
authenticate update node verifies anchor path root hash tree 
verifies hash value hm verifying hk hm 
maximum hash chain length anchor verification requires log effort number sequence numbers represented root computation required verify update bounded log 

mw chains mechanism section new cryptographic mechanism section improve efficiency secure network routing prevent class service attacks 
mechanism extension merkle time signature construction 
construction subsequently extended goldreich micali rohatgi 
extension signature construction call way merkle chain mw chain provides instant authentication low storage overhead 
oneway chain contains list values called heads heads set signature branches set checksum branches 
achieve low storage overhead derive branches single head way hash function basic way construct mw chain signature branch checksum branch head 
assuming want set branches sign values choose length signature branch checksum branch choose random value bits long chosen head value vn 
signature checksum branches computed vi vi 
head value vn 
signature value mw chain ordered set 
attacker produce produce similarly attacker produce produce generally mw chain signature branches checksum branches 
call lengths signature branches lengths checksum branches 
signature value ordered set sm nm ni mod mod 
example shows example mw chain sign value 
example signature chains length checksum chains length 
sign value case psfrag replacements head vi generation verification mod mod mod mod mod 
signature ordered set 
signature chain sign log bits 
signa ture chains sign vi vi vi vi vi branches example mw chain sign value log bits 
sign message bits signer splits message chunks mm size log bits 
signer adds values si mi signature 
note value signature chain signs number second value 
prevent attacker forging message mi anybody compute oneway chain direction know previous values sender uses checksum chain moves opposite direction signature chains 
consequently attacker tries sign described need invert checksum chain computationally infeasible 
checksum chains need long sign maximum sum occur signature chains 
signer computes checksum signature chains summing values signed sig nature chains head vi mi 
signer splits checksum checksum chunks 
checksum chunks encoded reverse checksum chains compared message chunks encoded signature chains 
checksum chunk si signer adds value ci si signature 
rohatgi proposes concrete instantiation sign bit message signature chains length checksum chains length 
zhang presents similar mechanism bring multiple hash chains heads 
result mw chains advantage reduced storage overhead 
retrospect may development hash tree chains unnecessary node mw chain sign node identifier preventing node directly replaying authenticator 
unfortunately mw chains context secure attacker receiving advertisements equal metric recover values signature checksum chains 
example performed monte carlo simulation scenario nodes represented signature chains length checksum chains length attacker hears advertisements 
case attacker able forge valid signature probability contrast hash tree chain probability successful forgery psfrag replacements vi vi 
preventing denial service attacks faster hash chain authentication section described mechanism allows node verify hash chain needing perform large number hash functions 
amount effort required verify element lgs length hash chain number hash chains 
network overhead lgs initial computation cost ks 
maximum metric large approach may prohibitively expensive terms initial computation cost element verification 
section describe approach combined merkle tree authentication described section lgs verification cost generation cost cost lgs overhead positive integer 
achieve creating skiplist chain followed step skips steps virtual hash chain 
basic version skiplist long step skiplist represents steps hash chain represents 
general embedded inside allowing values 
protocols tesla biba improve efficiency long hash chains 
skiplist represented mw chain capable signing bits ensure security example bits 
step mw chain represents steps generation usage step skiplist vi virtual hash chain 
generate hash chain skiplist associated step new head chosen hashing head step 
anchor hash chain skiplist computed step mw chain sign new anchor 
example head step skiplist vi node forms vi computes corresponding anchor example hm level 
signs anchor vi described section 
concretely consider case level skiplist step skiplist corresponds steps virtual hash chain 
mw chain steps long virtual hash chain mn steps long 
leftmost element virtual hash chain vn chain elements derived 
alternative representation pair hm hm represents hm signed vn 
element pair hm 
element position left hm 
general xth element left represented pair hx mod hm 
verify hash element node follows hash chain anchor verifies signature anchor 
multiple levels signature verified recursively verification signature requires verification signature higher level chain 
example levels hash chain followed table mechanisms compared public key equivalents initialization computation hop computation overhead bits hash tree chain rsa equivalent cpu optimized rsa equivalent minimal overhead tree authenticated way chains rsa equivalent skiplist step step rsa equivalent step step notation maximum metric metric hop total network size average number neighbors number hops covered skiplist hop step cost hash chain step 
rsa timings performed bit keys openssl 
hash tree chain performance network size roughly number ases internet uses hash tree size values corresponding node 
cpu optimized rsa equivalent combines routing table elements merkle tree amortizing signature costs routing table elements 
tree authenticated way chain size calculation initialization cost amortized elements 
anchor second level skiplist signature checked skiplist anchor anchor skiplist verified verifying signature top level skiplist 
generalized allow skipping type way chain formed single arbitrary head verified single anchor 
example hash tree chains conjunction 
generalized skiplist generated way hash chains lowest level skiplist head step seed head way chain anchor way chain signed step skiplist 
possible application choose top level skiplist represent steps maximum diameter network 
reduce initial cost setting merkle tree described section number sequence numbers covered tree 
increases overhead computation cost update sent verified respectively 

efficiency evaluation evaluate efficiency mechanisms implemented generation verification procedures mechanisms described section 
efficiency hash function rijndael block cipher meyer construction bit key bit block size depending number bits hashed 
single block hashed hash output initialization vector iv initial key ek built implementation top implementation 
implemented hash tree chains leaves represents node network single element node node network elements node 
skiplist rohatgi construction signature chains length checksum chains length 
ran tests laptop mobile pentium cpu running ghz 
verifying node way chain took average computing step hash tree chain took average computing step mw chain took average 
result network maximum metric length worst case verification takes just millisecond 
advantage approach computation needed verification generation particular worst case authentication plus verification operation takes just verification 
compare results efficiency public key cryptography analyzed functionality provided mechanism 
summary analysis shown table 
tree authenticated way chain essentially provides signature public key root value private values authenticated 
tree authenticated oneway chains significantly efficient existing approaches authenticate anchor rsa 
hash tree chain uses cryptographic mechanisms ensure nodes authorized advertise particular metric advertise metric 
particular nodes hear advertisement metric lower advertise metric 
public key approach problem adapted solution proposed kent node signs list nodes allowed advertise particular metric 
routing table element includes signature chain length equal metric shows delegation authority advertising particular metrics 
node verifying chain need verify number signatures equal distance destination 
addition node needs psfrag replacements new anchor signed mw chain element generation usage old anchor bootstrapping new hash chain 
new anchor signed mw chain element far left side old chain 
psfrag replacements old tree mw chain element signs new root bootstrapping new tree authenticated way chain 
new root signed mw chain element embedded old tree 
run secure neighbor discovery protocol order know neighbors authorize 
protocol may easy design wired network fixed wireless network list potential neighbors easily generated prohibitively expensive mobile wireless environment ad hoc network 
alternative signatures 
example network maximum metric step skiplist skip elements sender sign anchor metric authenticator sign metric authenticators 
naturally node sends advertisement metric include signature metric authenticator general node advertising metric include signatures metric authenticators may slower public key mechanisms general purpose processors advantages may require network overhead long chains second signature generation overhead reduced especially sender third easier implement hardware fourth verification easily parallelizable 

bootstrapping new chains trees time progresses elements way hash chains hash trees eventually run node needs securely distribute anchor new chain root new tree 
recall security schemes relies secure distribution initial values authenticate subsequent values 
solution problem compute chain long network unfortunately computation may relatively expensive 
alternative solution old chain tree authenticate new anchor root 
achieve place single mw chain element left hand side hash chain hash tree chain element big picture 
leaf bottom leaf hash tree identical top leaf structure omitted clarity 
tree authenticated way chain section 
node comes close running current chain generates new chain uses mw chain element old chain form time signature anchor newly generated chain 
distributes new anchor piggybacking updates time old chain expires 
shows skiplist element hash chain authenticating new hash chain anchor shows skiplist element tree authenticated way chain authenticating new tree authenticated way chain root 
approach extended ways chain contain mw chain elements allow nodes easily reenter network entire chain node 
furthermore node may choose piggyback newly authenticated anchor switches new chain progressively node consumes chain 
example node may distribute authentication information chain element power anchor approach reduces overhead allowing nodes rejoin network extended time away 

combining primitives primitives hash tree chains described section tree authenticated way chains section protect specific attacks fraud rushing attack addition provide section efficient traversal long hash chains 
order prevent attacks combine approaches shown 
highest level shown right side tree authenticated way chain merkle tree 
root merkle tree bootstrapped node 
leaf merkle tree anchor chain leaf representing single sequence number 
case chains built top hash tree chains chains implemented hash tree chains metric fraud concern hash chains 
bottom mw chain element authenticating root tree authenticated way chain 

mechanism securing path vector protocols 
overview path vector routing path vector protocols similar distance vector protocols place metric routing update includes list routers case bgp list autonomous systems route 
default path vector protocol choose route shortest recorded path policies may specify specific routers prefer avoid 
result node may wish authenticate hop routing update traversed recorded path assure hops removed recorded path 
traditional way perform authentication node insert authenticator packet recipient individually verify authenticator packet received 
approach requires network overhead carrying message authentication code mac node path 
section cumulative authentication mechanism property message authenticated single mac ordered list nodes traversed packet 

cumulative authentication describe cumulative authentication mechanism case private keys shared authenticating node node path 
packet authenticated way maintains path authenticator address list 
packet traverses node node appends address address list 
authenticates position list replacing path authenticator mac computed received path authenticator packet immutable fields 
ha hc hb hd hb ha hd mact hc packet reaches receiver path authenticator originally initialized known value receiver reconstruct expected final path authenticator value address list 
reconstructed value matches received value packet deemed authentic fact traversed node address list 
shows example cumulative authentication packet addition updating path authenticator node appends address address list packet 
node authenticates packet shared mac verify path packet traversed verifying received path authenticator checking mact mact mact cumulative authentication resists removal previous nodes address list 
example attacker wishes remove address list obtain ha derive valid hc ha 
inverting mac infeasible attacker generally cooperation node immediately node removed 
mechanism prevent second node removing node node source node equivalent second node dropping original packet originating packet type destination 
private shared keys authentication possible cumulative authentication mechanism case tesla broadcast authentication protocol authentication authentication performed sender packet authenticated recipient 
perform authentication recipient may desirable proactive routing protocol bgp node path verifies tesla security condition tesla keys released updates address list path authenticator described current tesla key 
node buffers packet verification 
sender transmits key required verification authentication node sender transmitted original routing packet 
node receiving authentication packet verifies authentication information 
node performs authentication appends previous tesla key cumulative authentication packet target authentication packet transmits new authentication packet neighbor sent original routing packet 
demand protocol ariadne initiator floods route request packet needs route destination initiator may wish perform authentication 
case node path updates address list path authenticator described 
packet reaches destination destination verifies tesla security condition 
alternatively destination include timestamp allow source verify security condition 
destination adds authenticator path authenticator address list possibly timestamp sends packet reverse route came 
node receiving packet includes packet key allows original authenticator reconstructed 
authentication performed tesla tesla key destination authenticating path authenticator address list timestamp sent original sender 

performance evaluation evaluate performance cumulative authentication examined overhead reduction resulting cumulative authentication ariadne 
performed simulations running simulated seconds examined number bytes overhead transmitted control packets 
ariadne run cumulative authentication total overhead nodes simulated seconds megabytes cumulative authentication total overhead megabytes 
result represents reduction routing overhead 

new mechanisms building blocks creating secure distance vector path vector routing protocols 
mechanisms protect routing protocol standard routing attacks highly efficient symmetric cryptographic techniques mechanisms help protect routing protocol denial service attacks example simply flooding large numbers randomly generated forged routing messages authenticated rejected routers 
securing distance vector protocols hash tree chain mechanism forces router increase distance metric forwarding routing table entry 
provide authentication received routing update bounded time new mechanism similar hash chains call tree authenticated way chains 
cases maximum metric large provide efficient initial computation cost efficient element verification mechanism new cryptographic mechanism called mw chains 
securing path vector protocols cumulative authentication mechanism authenticates list routers path routing update preventing removal reordering router addresses list mechanism uses single authenticator routing update router address 
economy critical infrastructure increasingly rely internet securing routing protocols critical importance 
routing security mechanisms described applied conventional routing protocols internet today specialized routing protocols designed new environments multihop wireless ad hoc networking 
mechanisms provide foundation efficient secure routing protocols designed leave development protocols 

acknowledgments dawn song important feedback 
anonymous reviewers valuable comments earlier draft encouraging include evaluation proposed security mechanisms 
stefano basagni kris 
secure 
proceedings second symposium mobile ad hoc networking computing mobihoc pages october 
steven cheung 
efficient message authentication scheme link state routing 
proceedings th annual computer security applications conference pages 
don coppersmith markus jakobsson 
optimal hash sequence traversal 
proceedings sixth international conference financial cryptography fc lecture notes computer science 
springer 
joan vincent 
aes proposal rijndael march 
brian neil levine elizabeth royer clay shields 
secure routing protocol ad hoc networks 
proceedings th ieee international conference network protocols icnp november 
diffie martin hellman 
new directions cryptography 
ieee transactions information theory november 
shimon oded goldreich silvio micali 
line line digital signatures 
advances cryptology crypto edited gilles brassard volume lecture notes computer science pages 
springer verlag 
gregory finn 
reducing vulnerability dynamic computer networks 
technical report isi rr usc information sciences institute june 
brian 
cryptography technology implementations aes rijndael assembler june 
available fp plus com cryptography technology rijndael 
ralf hauser gene tsudik 
reducing cost security link state routing 
proceedings symposium network distributed systems security ndss pages february 

routing information protocol 
rfc june 
andy 
protection bgp sessions tcp md signature option 
rfc august 
yih chun hu david johnson adrian perrig 
secure efficient distance vector routing mobile wireless ad hoc networks 
fourth ieee workshop mobile computing systems applications wmcsa pages june 
yih chun hu adrian perrig david johnson 
ariadne secure demand routing protocol wireless ad hoc networks 
proceedings eighth acm international conference mobile computing networking mobicom september 
yih chun hu adrian perrig david johnson 
packet leashes defense wormhole attacks wireless ad hoc networks 
proceedings ieee infocomm april 
markus jakobsson 
fractal hash sequence representation traversal 
proceedings ieee international symposium information theory isit pages july 
john jubin janet 
darpa packet radio network protocols 
proceedings ieee january 
stephen kent charles lynn karen seo 
secure border gateway protocol bgp real world performance deployment issues 
proceedings symposium network distributed systems security ndss pages february 
petros luo lu lixia zhang 
providing robust ubiquitous security support mobile ad hoc networks 
proceedings ninth international conference network protocols icnp pages november 
kumar 
integration security network routing protocols 
review 
kumar jon crowcroft 
integrating security inter domain routing protocols 
computer communication review october 
mahajan david wetherall tom anderson 
understanding bgp misconfiguration 
proceedings sigcomm conference communications architectures protocols applications august 
gary malkin 
rip version 
rfc november 
stephen carl meyer jonathan 
generating strong way functions cryptographic algorithm 
ibm technical disclosure bulletin 
ralph merkle 
protocols public key cryptosystems 
proceedings ieee symposium security privacy 
ralph merkle 
digital signature conventional encryption function 
advances cryptology crypto edited carl volume lecture notes computer science pages 
springer verlag 
ralph merkle 
certified digital signature 
advances cryptology crypto edited gilles brassard volume lecture notes computer science pages 
springer verlag 
sandra murphy 
bgp security vulnerabilities analysis 
internet draft draft murphy bgp txt october 
openssl project team 
openssl may 
www openssl org 
charles perkins pravin bhagwat 
highly dynamic destination sequenced distance vector routing dsdv mobile computers 
proceedings sigcomm conference communications architectures protocols applications pages august 
charles perkins elizabeth royer 
ad hoc demand distance vector routing 
proceedings second ieee workshop mobile computing systems applications wmcsa pages february 
perlman 
interconnections bridges routers 
addison wesley 
adrian perrig 
biba time signature broadcast authentication protocol 
proceedings eighth acm conference computer communications security ccs pages november 
adrian perrig ran canetti dawn song tygar 
efficient secure source authentication multicast 
proceedings network distributed system security symposium ndss pages february 
adrian perrig ran canetti tygar dawn song 
tesla broadcast authentication protocol 
rsa cryptobytes summer 
rekhter tony li 
border gateway protocol bgp 
rfc march 
pankaj rohatgi 
compact fast hybrid signature scheme multicast packet authentication 
proceedings th acm conference computer communications security november 
karen stephen kent 
securing nimrod routing architecture 
proceedings symposium network distributed systems security ndss february 
bradley smith garcia luna aceves 
securing border gateway routing protocol 
proceedings global internet pages november 
bradley smith murthy garcia luna aceves 
securing distance vector routing protocols 
proceedings symposium network distributed systems security ndss pages february 
zapata asokan 
securing ad hoc routing protocols 
proceedings acm workshop wireless security wise september 
kan zhang 
efficient protocols signing routing messages 
proceedings symposium network distributed systems security ndss march 
zhou zygmunt haas 
securing ad hoc networks 
ieee network magazine november december 
