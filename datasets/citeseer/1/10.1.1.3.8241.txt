automated index management distributed web search distributed heterogeneous search systems emerging phenomenon web search independent topic specific search engines provide search services distribute user queries suitable search engines 
previous research investigated methods engine selection merging search results performance improvements user perspective 
focus performance service provider point view income queries processed vs resources answer 
consider scenario individual search engines compete user queries choosing documents topics index 
difficulty stems fact utilities local engine actions depend uncertain actions competitors 
naive strategies blindly indexing lots popular documents ineffective 
model competition search engines stochastic game propose reinforcement learning approach managing search index contents 
evaluate approach large log user queries real search engines 
categories subject descriptors information storage retrieval systems software distributed systems artificial intelligence distributed artificial intelligence intelligent agents multiagent systems general terms management performance economics keywords distributed web search stochastic game reinforcement learning 
distributed heterogeneous search environments emerging phenomenon web search 
consider federation independently controlled specialised search en permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
cikm november new orleans louisiana usa 
copyright acm 
khoussainov nicholas kushmerick department computer science university college dublin dublin ireland nick ucd 
specialised search engines provide focused search services specific domain particular topic 
help process user queries effectively efficiently distributing suitable search engines query 
compared traditional search engines google altavista specialised search engines may provide access arguably larger volumes high quality information resources frequently called deep invisible web 
envisage heterogeneous environments popular influential 
unlock benefits distributed search users incentive search engines participate federation opportunity money 
previous research mainly targeted performance environments user perspective improved quality search results 
hand provider search services interested utility service compared cost resources income search queries processed versus amount resources needed answering queries 
performance optimisation search engines service provider point view focus 
important factor affects particular search engine performance heterogeneous search environments competition independently controlled search engines 
engines available users send queries provide best possible results 
service offered search engine influences queries received competitors 
multiple search providers viewed participants search services market competing user queries 
examine problem performance maximising behaviour non cooperative specialised search engines heterogeneous search environments 
particular analyse scenario independent topic specific search engines compete user queries choosing documents topics index 
example 
consider heterogeneous environment specialised search engines having equal resource capabilities 
assume users interested sport cooking sport popular topic 
decide index documents sport cooking google tries receiving equal share user queries 
decides spend resources sport stays topics able provide better search sport case users send queries sport cooking receiving queries higher performance 
decides index popular topic search engines competing sport queries may receive search requests previous cases 
example generalised way 
search engines heterogeneous search environment independent terms selecting content independent terms performance achieved 
changes parameters search engine affect queries received competitors vice versa actions competing engines influence queries received search engine 
utility local content change depends state actions search engines system 
uncertainty actions competitors potentially large number competing engines optimisation problem difficult 
example experiment sec 
search engines competed head head popular topic profitable engine market topics popular ignored competition 
example illustrates naive strategies blindly indexing popular documents suboptimal 
model competition specialised search engines partially observable stochastic game motivate concept bounded rationality 
bounded rationality assumes decision makers unable act optimally gametheoretic sense due incomplete information environment limited computational resources 
cast problem reinforcement learning task goal specialised search engine learn behaviour strategy suboptimal competitors 
effectiveness approach evaluated simulation environment 
simulator implements simplified formalisation problem driven user queries submitted existing search engines 

competing search services markets questions optimal behaviour computational markets researched extensively consumers suppliers points view 
greenwald studied behaviour dynamics automated agents act behalf service suppliers employ price setting algorithms maximise profits 
example hu wellman multiagent learning double auction markets 
services markets heterogeneous web search environments number features requiring different approaches developing optimal behaviour strategies 
heterogeneous search environment typically consists specialised search engines metasearcher 
components independently owned independently controlled 
specialised search engines index specific subsets documents web particular topic 
provide results selected queries 
find suitable search engine users submit search requests metasearcher 
metasearcher uses content summaries known search engines route user queries 
users indicate demand submitting queries system search engines supply search services selected topics act brokers 
simple scenarios search engines change content arbitrary ways provide search results need discover corresponding documents web 
depends availability information web properties engine web crawler robot 
current index content influences quickly search engine change topics depending current topic relevant new topic 
note reality content specialised search engines determined external factors changed reasons competition 
example content specialised engine providing search journal articles determined scope journal 
index search engines may change time process may related directly actions market participants variations user interests 
consider search engines competitors having somewhat restricted competition strategies simplest case fixed index content changes performed matter happens market 
conditions engines compete remain stationary 
web changes time user interests topics popularity 
search engines continuously adapt changing environment variations population behaviour competitors 
summarise effects search engine local actions depend current state state environment web users simultaneous state actions competitors 
dependencies may known priori learned service providers experience 
difficulties arise fact information may simply available decision makers example exact state actions competitors 
complexity problem domain attempting analysis realistic feasible reasonable 
start simplified model 
goal select approach allows principle factor realistic details models 

problem formalisation performance metric 
adopt economic view search engine performance 
performance difference value utility search service provided cost resources provide service 
value search service function user queries processed 
cost structure actual search engine may quite complicated involving categories storage crawling indexing searching 
simplified version problem formula search engine performance qd number queries received time interval number documents engine index number new documents added index time interval constants 
represents service value price processing search request user total income service provisioning 
qd represents cost processing search requests 
amount resources sufficient process queries need process twice queries time 
similarly twice resources needed search twice documents time 
amount resources cost proportional expressed qd reflects resource costs 
example fast search engine confirms cost search far reality 
cost crawling indexing new documents 
cost indexing new documents proportional number documents added cost crawling vary documents 
assume average crawling cost 
cost document storage maintenance 
includes storing copy document keeping document description date 
assume search engines system constants calculating performance 
having reasonably assumes cost resources cpu memory network unit search engines having assumes unrealistically search engines choose charge users amount query 
leave optimisation search engine performance environments engines may different service pricing 
service price differentiation selection search engines metasearcher depends documents engines index 
goal engine choose index content way maximises profit 
engine selection model 
intend generic model reasonable metasearch system 
allow implementation details particular metasearch algorithms presuming approximate generic model 
reasonable assume users send queries search engine contain relevant documents query better 
ultimate goal metasearcher select user query search engines forwarded maximise results relevance minimising number engines involved 
existing research metasearch go simply ranking search engines 
unclear top ranked search engines queried results requested assume query forwarded highest ranked search engine 
case search engines top rank selected random 
note research suggested querying engines increases recall due small overlap contents results obtained traditional topic specific search engines 
heterogeneous search system overlap engines focusing topic greater making efficient query engines 
ranking search engines performed expected number relevant documents indexed engine 
engine indexes largest expected number documents nr relevant query highest rank 
apply probabilistic information retrieval approach assessing relevance documents 
document probability pr rel document considered user relevant query case nr pr rel mean set documents indexed engine metasearcher know exact content search engines tries estimate nr corresponding content summaries 
pr rel pr rel queries look metasearcher search engine points view queries may differ lexically 
engines rankings queries get forwarded search engine 
queries partitioned equivalence classes identical pr rel functions 
call classes topics 
assume fixed finite set topics queries assigned topics 
course feasible reality 
way approximate topics practice cluster user queries received past assign new queries nearest clusters 
engine selection ideal crawlers 
assume users issue queries single topic 
see extended multiple topics 
receive queries search engine needs highest ranked topic 
means index size search engine document index largest possible nri 
achieved engine indexes relevant documents topic 
population search engines performed topic specific focused web crawlers 
difficult model web crawler assume search engines ideal web crawlers find relevant documents topic 
assumption search engines indexing number documents nr nr 
similarly nr nr assuming documents pr rel 
metasearcher forward user queries engine containing largest number documents 
model extended multiple topics assume document relevant single topic 
case state search engine represented number documents engine indexes topic query topic forwarded engine largest course extension ignores possible overlaps topics queries documents 
hand associate topic search term engine selection model reflect extent real life engine selection algorithms 
decision making process 
decision making process proceeds series fixed length time intervals stages 
time interval search engines simultaneously independently decide documents index topic 
allocate appropriate resources expectations number queries users submit interval incurring corresponding costs 
search engines unlimited crawling resources presume incremental adjustments index contents require time engines 
users submit queries time interval allocated search engines index parameters described 
process repeats stage 
calculate performance search engine interval need consider income queries engine received cost resources allocated query processing 
search engines know advance queries users submit time interval queries search engine receive depends competitors 
assume engine allocates resources gets queries cost idle resources wasted 
contrary search engine receives queries expected queries process excess queries simply rejected search engine benefit 
model reflects natural inertia resource allocation buy sell computing resources fly processing individual user query 
performance search engine time interval pi min qi qi ci di qi number queries expected engine time interval qi number queries received di dt number documents engine index ci number documents added index time interval 
number queries topic received engine presuming represented di maxj set highest ranked search engines topic number queries topic submitted users 
search engine receive queries ranked lower competitors receives appropriate share top ranked engine 
total number queries search engine calculated qi qt experiments number user queries expected engine topic stage equals number queries submitted topic previous stage 
account search engine expects queries topics documents indexed tal number queries expected qi assume metasearcher provide statistics number previously submitted user queries 
note follows formula pi engine wins competition performance decreases index size grows eventually negative di 
effect accords intuition huge index eventually cost maintain recovered answering queries serves justify economic framework analysing optimal search engine behaviour 
decision making stochastic game 
decision making process modelled stochastic game 
stochastic game sg tuple number decision makers players set game states ai set actions player transition function ri reward function player game proceeds stages 
stage players simultaneously choose actions collect rewards ri state game changes transition function sgs similar markov decision processes mdps multiple decision makers selecting actions state rewards depend joint action players 
sgs natural extension mdps multiple agents matrix games multiple stages 
case players search engines state game stage defined state indices search engines time determines user queries stage 
player action ai ai vector index adjustments topic index adjustments possible grow increase number documents indexed topic change number documents topic shrink decrease number documents topic 
reward player stage game calculated formula pi number documents ci added search engine index stage calculated ci ct grow 
goal player game maximise total reward sum rewards stages played 
general population engines may change values bounded web continues grow user queries vary requiring potentially infinite number time states game 
consider competition limited number stages finite number time states assume constant population players fixed web size 
strategies observations 
player strategy policy game function maps history player current possibly past observations game probability distribution player actions 
sg player observations consist parts observations state search engine observations opponents state 
topics player inputs consist observations state search engine topic observations relative positions opponents topic observations total 
observations state reflect number documents search engine index topic assume search engines know contents indices 
observations opponents state reflect relative position opponents metasearcher rankings indirectly gives player information states opponents index 
observations available topic winning opponents ranked higher topic search engine index documents topic tying opponents having rank engine higher rank topic opponents index smaller numbers documents topic losing rank search engine topic higher opponents opponents index documents topic 
may ask player obtain information rankings opponents 
done sending query topic interest metasearcher search user requesting ranked list search engines query 

optimal behaviour tic games player behaviour strategy policy sg evaluated strategies players 
optimal behaviour sg general opponent dependent select actions players need know opponents strategies 
nash equilibrium game theory provides way resolve uncertainty opponents 
combination players strategies called nash equilibrium players benefit unilaterally deviating equilibrium 
players agree play nash equilibrium incentive follow agreement certain actions 
non trivial result proved exist equilibria sgs just matrix stage games 
agreeing play nash equilibrium problematic game multiple equilibria frequently case 
players select equilibrium play 
large body research equilibrium selection game theory various principles criteria 
ultimately requires characterising nash equilibria game nphard matrix games complete information game follows 
np hardness results possibility players may complete information game lead idea bounded rationality players limited abilities optimal decisions 
goal derive strategy performs sub optimal opponents 
mentioned earlier problem domain parameters game opponents may known priori learned interaction 
learning sgs studied extensively game theory machine learning 
methods fields require assumptions strategies players 
feature sets classify fixed vs evolving policies reactive policies vs policies memory state full 
call policy fixed mapping observation histories actions set policy remains constant evolving changes time 
output reactive policy depends current observation policies memory take account history past observations 
easy see player fully observe state game opponents fixed reactive policies sg equivalent mdp opponents simply part markov process behaviour essentially markovian 
standard reinforcement learning techniques mdps qlearning 
opponents fixed policies memory state opponents memory hidden player 
real opponents limited memory size memory state spaces finite sg equivalent partially observable mdp pomdp 
possible approach sgs opponent modelling 
opponent modelling assumes opponent strategies representable finite state automata 
player learns parameters automata current state experience calculates best response strategy automaton 
method needs know opponent actions observations rewards automaton inference 
case full information sg state observe opponents actions rewards 
important aspects sgs repeated interaction players 
means game round player learn game parameters behaviour opponents 
explicit assumption boundedly rational opponents suggests player knowledge opponents behaviour modify optimise strategy 
strategies players may change time learning problem tracking moving target 
optimal best response policy changes players evolve outside control 
question kind strategy want learn 
main interest player performance approach learn policy guarantees lower payoff bound safety level independently opponents behaviour 
approach suggested zero sum fully observable sgs 
unfortunately works zero sum games requires ability observe opponents actions rewards 
assuming players may change policies completely arbitrary manner practical general sum sgs 
research general sum sgs presumes opponents class learning algorithms 
goal find strategy performs class learners 
bowling veloso investigated self play playing opponents learning algorithm fully observable sgs 
proposed policy hill climbing algorithm phc modification learning non deterministic reactive policies 
little research done partially observable sgs 
despite considerable previous learning sgs techniques applicable problem domain may face partial observability evolving opponents 
case fixed opponent strategies sg equivalent pomdp learning globally optimal strategy computationally intractable 

cougar algorithm propose utilise algorithm reinforcement learning called gaps stands gradient ascent policy search 
gaps learner plays parameterised strategy represented non deterministic moore automaton parameters probabilities actions state transitions 
gaps implements stochastic gradient ascent space policy parameters 
learning trial parameters policy updated reward gradient 
essentially gaps searches possible policies general locally optimal yields higher rewards close policies 
gaps number advantages important problem domain 
model reinforcement learning algorithms phc opponent modelling gaps attempt build model game opponents interaction experience derive optimal behaviour policy obtained model 
greatly reduces information needs algorithm allowing cope partial observability scale number opponents 
policies learned gaps non deterministic state full 
ability play non deterministic policies policies probabilistic action choices transitions means gaps potentially achieve optimal performance games mixed non deterministic strategy equilibria exist 
singh showed pomdps reactive policy arbitrary worse policy memory 
advantageous learn state full policy pomdps consequently 
gaps scales multiple topics modelling decisionmaking game factored actions action components correspond topics 
action space games product factor spaces action component 
gaps allows reduce learning complexity learning product action space separate gaps learners action component 
shown distributed learning equivalent learning product action space 
gradient methods disadvantage gaps guaranteed find local optimum 
cougar design learning 
call search engine uses proposed approach cougar competitor gaps rivals 
cougar controllers represented set non deterministic moore automata topic functioning synchronously 
inputs automaton game observations topic outputs automaton actions changing number documents indexed corresponding topic resulting action controller product actions topic produced individual automata 
training cougar controller compete various opponents performed series learning trials 
learning trial consists days day corresponds stage sg played 
search engines start empty indices driven controllers adjust index contents 
day engine controllers receive observations simultaneously produce control actions change document indices 
query generator issues stream search queries day 
metasearcher distributes queries engines index parameters day search engines collect corresponding rewards 
day search engines continue current states query generator issues different queries belonging subsequent day 
resulting performance trial calculated sum discounted rewards day 
trial cougar controller updates strategy gaps algorithm 
action state transition probabilities controller automata modified payoff gradient see details update mechanism 
simulate user search queries logs obtained web proxy large isp 
search engine uses different url syntax submission requests developed extraction rules individually known search engines 
total number queries extracted collected period days day subset queries simulations 
associated topics search terms logs 
simulate queries topics extracted popular terms logs 
number queries generated topic day equal number queries term logs belonging day 
trial reward trials cougar bubble bubble vs cougar learning curve 
experimental results experiments consist parts 
part evaluate performance cougar various fixed opponents 
second part test cougar evolving opponents case cougar learners 
experiments fixed opponents simulated search engines competing topics 
different fixed strategies simple called bubble trivial called wimp 
fixed opponents bubble 
bubble strategy tries index documents possible regard competitors doing 
follows performance formula unconstrained growing leads eventually negative performance 
total reward falls certain threshold bubble search engine goes bankrupt shrinks index documents retires trial 
process imitates situation search provider expands business paying attention costs eventually runs money quits analogy com bubble 
intuitively sensible response bubble strategy wait bubble bursts come game 
competitor index bubble grows start indexing minimal number documents bubble search engine goes bankrupt 
experiments bubble increasing decreasing number documents indexed topic simultaneously 
fig 
shows cougar performance improved learning 
cougar controller reached steady performance level resulting strategy evaluated series testing trials 
fig 
testing trial bubble cougar engines showing number documents indexed engines day trial top half axis shows number documents topic bottom half shows number documents topic 
note cougar learned wait bubble goes bankrupt win queries topics 
fixed opponents wimp 
wimp controller intelligent strategy 
consider case single topic 
set possible document index sizes divided wimp non overlapping sequential regions confident unsure panic 
wimp behaviour region follows confident strategy region increase document index size ranks higher opponent 
goal achieved wimp stops growing keeps index unchanged unsure region wimp keeps index unchanged ranked higher documents trial reward cougar topic cougar topic bubble topic bubble topic days bubble vs cougar sample trial trials cougar wimp wimp vs cougar learning curve opponent 
retires reduces index size panic wimp retires straight away 
idea wimp tries outperform opponent growing index confident region 
index grows unsure region wimp prefers retirement competition winning tying opponent 
reflects fact potential losses unsure region opponent wins substantial wimp dare risk 
panic region corresponds large index sizes performance formula yield negative performance matter engine wins competition 
generalise wimp strategy multiple topics modified way 
wimp opponent differentiate topics queries documents 
assessing index size wimp simply adding documents different topics 
similarly observing relative positions opponent adding ranking scores different topics 
multi topic bubble wimp changing index size synchronously topic 
common sense tells behave aggressively wimp knock competition enjoy benefits monopoly 
exactly cougar controller learned seen fig 

fig 
presents learning curve 
policy complexity vs performance 
pointed earlier ability cougar learn non deterministic policies potential advantage partial observability 
policy states represent complex documents trial reward days cougar topic cougar topic wimp topic wimp topic wimp vs cougar sample trial trials states states states states cougar vs wimp different number states potentially optimal behaviours 
analyse effects policy complexity performance achieved evaluated cougar controllers different number policy states wimp opponent 
fig 
demonstrates states performed better cases learned slowly 
performance bounds 
cougar superior fixed strategy opponents interesting question performance relates maximum minimum values obtainable opponents 
asses evaluated bubble wimp corresponding best case omniscient worst case strategies 
results table show cougar near optimality demonstrate fact performance result dumb opponents cougar performed worse 
evolving opponents cougar self play 
guaranteed theoretical point view gradient learning converge self play 
practice observed learners converged relatively stable strategies 
table fixed opponents performance bounds upper lower cougar optimal bubble wimp trial reward trials thousands cougar cougar fixed cougar challenger cougar self play training left evaluation right 
simulation setup fixed opponent experiments 
trained cougar learners state gaps policy self play scenario topics 
players decided split query market search engine specialised different topic 
winner engine happened pick popular topic 
pointed previously policy learned cougar general locally optimal policies simultaneously learned opponents 
question interested locally optimal policy perform unbiased cougar learner 
test fixed strategy winner self play trained cougar 
envisage possible failure winner policy learn compete popular topic opponent learned compete popular topic 
unbiased challenger able capture queries topics 
evaluation state cougar learner showed performance winner policy quite stable 
challenger better take popular topic 
fig 
shows performance search engines training left evaluation right 
fixed cougar achieves performance learner training 
evolving opponents scaling 
important advantage gaps ability handle multiple topics modelling decision making game factored actions 
analyse scalability approach number topics simulated cougar learners competing scenario different topics 
fig 
shows obtained learning curves 
analysis engines behaviour showed similarly case learners topics decided split query market see table 
important detail results popular topics attracted search engines 
confirms market split really profit driven demonstrates cougar economic thinking 
indicated fig 
profitable engines specialise relatively unpopular topics engines compete popular topics earning substantially money 
naive strategy indexing popular documents suboptimal experiment 

stochastic games provide convenient theoretical framework modelling competition search engines heterogeneous web search systems 
finding optimal behaviour strate trial reward trials thousands se se ses ses competing topics table market split topic term ireland dublin irish free java engine topic term map university mp download jobs engine gies stochastic games challenging task especially partially observable games players may evolve time 
demonstrated reinforcement learning state full policies effective approach problem managing search engine content 
adaptive search engine cougar shown potential derive behaviour strategies allowing win competition non trivial fixed opponents policies learned self play robust evolving opponents case 
claim provide complete solution problem believe promising step 
clearly strong assumptions models 
direction relax assumptions simulations realistic 
particular intend perform experiments real documents existing metasearch algorithm 
interesting try cougar clever fixed opponents 
currently assume users insensitive quality search results intend extend metasearch service pricing models account user satisfaction 
selecting highest ranked engine query envisage choosing search engines probability distribution ranking positions 
account fact reality winning search engine may necessarily get queries topic 
advantage approach requires minor modification model handle complication 
formula number queries received engine see sec 
take form pr hit rank pr hit probability search engine ranked position topic receive query topic 
probabilities pr hit estimated query logs search engines track result links users followed collected search providers record click data 
interesting see modifications affect cougar performance simulations 
direction investigate issues learning convergence performance robustness self play learners 
motivated optimal behaviour search services document collections approach applicable general scenarios involving services weigh cost inventory objects expected inventories competitors anticipated needs customers 
example interesting apply ideas large retail ecommerce sites decide products stock 

research supported sfi science foundation ireland office naval research 

bowling veloso 
rational convergent learning stochastic games 
proc 
th intl 
joint conf 
ai 
carmel markovitch 
learning models intelligent agents 
proc 
th national conf 
ai 
conitzer sandholm 
complexity results nash equilibria 
proc 
th intl 
joint conf 
ai 

competitive markov decision processes 
springer verlag new york 
gravano garcia molina 
gloss text source discovery internet 
acm trans 
database systems 
greenwald kephart tesauro 
strategic dynamics 
proc 
st acm conf 
electronic commerce pages 
hu wellman 
learning agents dynamic multiagent system 
cognitive systems research 
littman 
markov games framework multi agent reinforcement learning 
proc 
th intl 
conf 
machine learning 
osborne rubinstein 
course game theory 
mit press 
peshkin 
reinforcement learning policy search 
mit ai lab technical report 
peshkin meuleau 
kim kaelbling 
learning cooperate policy search 
proc 
th conf 
uncertainty ai 

search engines web dynamics 
computer networks june 
rubinstein 
modelling bounded rationality 
mit press 
sherman price 
invisible web uncovering information sources search engines see 
independent publishers group 
singh jaakkola jordan 
learning state estimation partially observable markovian decision processes 
proc 
th intl 
conf 
machine learning 
van rijsbergen 
information retrieval 
butterworths nd edition 
watkins 
learning delayed rewards 
phd thesis cambridge university 
