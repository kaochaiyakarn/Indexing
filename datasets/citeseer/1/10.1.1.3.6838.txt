employing theory formation guide proof planning andreas meier volker simon colton 
fachbereich informatik universit des saarlandes germany ags uni sb de www ags uni sb de school computer science university birmingham uk cs bham ac uk www cs bham ac uk division informatics university edinburgh uk dai ed ac uk www dai ed ac uk 
invention suitable concepts characterise mathematical structures challenging tasks human mathematicians automated theorem provers alike 
approach automatic concept formation guide non isomorphism proofs residue class domain 
main idea proof automatically identify discriminants structures show isomorphic 
suitable discriminants generated theory formation system proof constructed proof planner additional support traditional automated theorem provers computer algebra system 
case study concerned automatic classi cation residue class sets integers sets isomorphic structures 
residue class sets binary operations approach prove structures isomorphic terms basic algebraic properties 
necessary proofs constructed multi proof planner forms part mega theorem proving environment 
multi uses guidance computer algebra model generation 
particularly hard problems arising domain non isomorphism proofs show structures non isomorphic na proof attempt exhaustive case analysis infeasible cases 
better approach nd invariant residue class sets property change isomorphism show di ers particular pair residue class sets 
say particular invariant structures acts discriminant structures di erent value 
unfortunately employing small set prede ned invariants necessarily deal cases occur 
author supported epsrc gr european union ct 
department computer science university york 
overcome dilemma hr automatic theory formation system automatically detect discriminants structures 
model discriminants appropriate concepts proof constructed multi support traditional automated theorem provers computer algebra system 
structured follows section introduce problem domain motivate automatic concept formation non isomorphism proofs 
section gives brief overview various systems employ construct non isomorphism proofs 
section gives detailed account proofs constructed preliminary results section 
proving non isomorphism problems section rst brie introduce problem domain residue class structures proof techniques developed non isomorphism proofs described 
generalise proof techniques new proof scheme enables construction arbitrary discriminants algebraic structures suce demonstrate structures involved isomorphic 
residue class domain de ne residue class set integers set congruence classes modulo integer zn arbitrary subset zn concretely dealing sets form nf nf denotes congruence class modulo 
integer write cl congruence class modulo binary operation residue class set function notation form xy xy xy constant congruence class xy xy xy denote addition multiplication subtraction congruence classes integers respectively 
furthermore combination basic operations respect common modulo factor xy 
abbreviate operations xy xy xy respectively 
structures rs rs examine isomorphic determine function rs 
rs injective surjective homomorphic 
proof planning isomorphism non isomorphism proofs appropriate guidance proof planner crucial success 
cases structures isomorphic usually fairly simple compute appropriate mapping computer algebra system model generator observe avoid confusion indices modulo factors writing indices superscripts indexed variables clearly distinct congruence classes form cl 
subsequently show isomorphism 
structures isomorphic dicult appropriately guide necessary non isomorphism proof 
techniques non isomorphism proofs previous implemented proof techniques proof planner multi show structures isomorphic 
require varying degrees guidance computer algebra model generation testing possible functions essentially corresponds case split possible instantiations mapping showing case isomorphism 
technique require guidance multi structures sets cardinality multi consider possible functions infeasible relatively small proof contradiction 
idea technique nd pair distinct elements structure mapped image homomorphism shows exists injective isomorphism 
technique prospective pair elements computed computer algebra system maple reliably sem model generator 
guidance subsequent proof process essentially equational theorem proving success guaranteed 
prede ned invariants 
intuitive way show non isomorphism nd invariant property structure structure exhibit 
implemented proof planning approach prede ned invariants structures involved di erent cardinality structures form di erent algebraic entities structure group semigroup structures contains element order element structure order structures unit element similarly order traces elements 
multi checks invariants order 
compute orders traces elements multi uses computer algebra system gap 
automatic exploration residue class domain see usually start sets similar algebraic structures cardinality quasigroups order 
invariant relevance prede ned criteria sucient successfully construct non isomorphism proof 
systematically constructing discriminants new proof technique describe aims reliable proof strategy non isomorphism proofs 
essentially generalisation technique section 
structures construct appropriate discriminant invariant property structures exhibits show structures isomorphic 
xy xy fig 

quasigroup multiplication tables formally structures want nd property holds example consider pairwise non isomorphic quasigroups respective multiplication tables fig 

comparing tables discriminant fairly obvious main diagonal elements main diagonal distinct 
invariant property things obvious compare multiplication tables invariant hold 
generalised proof procedure follows structures 
nd appropriate discriminant 
show holds 
show holds nally 
show holds single proof parts combine give sketched formal proof 

intro 
elim section describe realize proof technique combination multi heterogenous systems 
observed example discriminants necessarily obvious fairly complicated de nitions 
realization technique aims automatically generate discriminants arbitrary pair structures provide multi 
remainder pair set op consisting set set binary operation op describe structure step fairly obvious human mathematician crucial formal proof 
systems involved proof technique described previous section realized mega proof planner multi 
residue class structures rs rs task show rs rs coordinating steps 
compute suitable discriminant employ hr system theory formation 
obtain formal proof discriminant arbitrary structures step rst order automated theorem provers call tramp interface transformation system 
proofs discriminant residue class structures rs rs holds done multi possibly help general purpose computer algebra system maple 
section give short overview di erent systems involved explain detail proof planner integrates coordinates computations systems assemble proof 
hr system hr system performs automated theory formation inventing concepts making conjectures proving theorems nding counterexamples 
main functionality application nding discriminants discussed concept formation achieved production rules take old concepts input output new concept 
particular production rules compose composes functions conjugation 
match equates variables predicate de nitions 
forall introduces existential quanti cation 
exists introduces universal quanti cation 
match forall forall exists exists fig 

example construction example construction discussed consider concept single element diagonal multiplication table algebra case fig 

concept constructed hr match forall exists production rules depicted fig 

scenario concepts supplied user concept element algebra multiplication elements give third 
match production rule multiplication concept invents notion multiplying element 
forall production rule invents concept elements elements multiply give 
exists production rule hr invents notion algebras element 
shall see section concept discriminate non abelian quasigroups fig 

details hr forms concepts see 
parameters users experiment order get best performance hr particular application 
instance user tell hr ignore concept formation steps arity function produced greater certain limit 
hr tell advance arity function particular concept formation step involving particular production rule user specify limit individual production rules 
calling automated theorem provers tramp calls directly executed rerouted tramp system 
tramp comprises functionalities rstly interface rst order logic 
problem produces input formats connected systems runs systems concurrently 
secondly tramp transform output natural deduction nd proofs 
tramp currently interfaces variety rst order term rewriting systems 
problems tramp employs otter 
systems resolution principle deal rst order logic problems equality 
scenario necessary provers deal equality discriminant properties hr usually contain equations see examples discussed section 
multiple strategies proof planner multi proof planning considers mathematical theorems planning problems initial partial plan composed proof assumptions theorem open goal 
proof plan constructed help planning steps called methods essentially partial speci cations tactics known tactical theorem proving 
order ensure correctness proof plans executed generate sound calculus level proof 
mega system traditional proof planning approach enriched incorporating mathematical knowledge planning process see details 
methods encode general proving steps knowledge particular mathematical domain 
control rules provide possibility introducing mathematical knowledge proceed proof planning process specifying traverse search space 
depending mathematical domain proof situation uence planner behaviour choice points goal tackle method apply 
mega proof planner multi additionally provides strategic level extends proof planning 
instance di erent planning strategies implement di erent proof techniques specifying particular sets methods control rules 
enable problem tackled di erent ways 
di erent strategies backtracking facilities re ning modifying proof plans speci ed 
strategy applicable problem multi reason strategy employ switch strategies proof attempt 
particular planner backtrack applied strategies perform search level strategies 
incorporating hr tramp way incorporate speci knowledge planning process exploiting knowledge implicitly specialised external systems 
multi supports access external systems methods control rules strategies 
general computations external systems treated ways hints proof steps 
di erence soundness hints checked subsequent proof planning process fails succeeds hint 
hand guarantee soundness proof steps special procedures provided transform output external systems subproofs mega check 
scenario concepts provided hr hints output proof steps employ tramp corresponding transformation module 
multi employs hr control rule hr succeeds providing discriminant problem hand control rule triggers proof plan 
note multi backtrack di erent instantiations interface tramp realized method 
multi applies method open goal problem consisting formula goal formulas proof assumptions passed tramp 
method applicable provers interfaced tramp succeeds prove problem 
goal simply closed producing subgoals 
method level proof goal just step 
correctness method application checked expansion results nd proof tramp provides output 
constructing proofs section describe proof process contributions individual systems involved detail 
illustrate procedure proof xy example 
proof procedure realized multi proof planning strategy 
planning methods strategy contains methods invoke tramp appropriately prepared subproblem control rule inject results note interface multi hr currently automated 
control rule currently allows user supply hr results 
intend interface completely automatic 
hr 
strategy applied goal form set op set op multi splits goal subgoals form 
set op 
set op 
set op set op set op set op set op set op newly introduced meta variable placeholder replaced concrete term proof discriminant 
multi receives suitable discriminant hr afore mentioned control rule order replace meta variable example discriminant property hr provides set op set set op 
concrete instantiated subgoals form 


set op set op set set op set set op set op set op subgoals subsequently proved multi strategies possibly computations computer algebra system maple 
subgoal solved atp tramp 
remainder section describe interesting parts subproofs detail 
rst explain obtain discriminants hr useful context 
obtaining useful discriminants hr scenario hr needs supplied multiplication tables example algebras nd discriminant invoked ag stating algebraic multiplication tables 
possible discriminants appropriate problem 
multi needs discriminants concerned relations elements sets involved particular existentially universally quanti ed statements 
instance discriminants involve natural numbers structures contain di erent number elements satisfying certain property generally dicult handle proof planner 
hr production rules appropriate application turned particular size production rule calculates cardinalities sets nd group theory invariants di erent context see chapter 
choose compose exists forall match production rules discussed section guarantee discriminants usable rest proof procedure 
sorted quanti cation variable set states variable ranges set set 
hr run number concept formation steps told output concepts specialise algebras abelian discriminate multiplication tables supplied 
output transformed suitable concepts multi 
currently interface multi hr automated 
discriminants manually ordered provided control rule establishes interface multi tramp 
currently implementing automatic interface 
discriminants ordered respect complexity multi chooses complex rst increasing chances success subsequent proof planning process application 
example fig 
discriminants hr discovered yy single element diagonal multiplication table true true 
symmetry diagonal true true 
right identity right identity true true 
stands binary operation respective structures hr passes properties multi transformed lambda abstraction directly inserted meta variable 
rst discriminants results term set op set set op quanti ed variables restricted range set set 
subproofs goal want prove atp generally form set op set op set op set op set op set op contains de ned concept isomorphism 
providing usual de nition isomorphism atp unsuccessful nd proof 
alternative formalisation better suited structures isomorphic homomorphisms order send problem de nition isomorphism original subproblem adequately rewritten 
multi applies appropriate theorem mega knowledge base results new subgoal proved set op set op set op set op hom set op 
set op hom set op 
set op set set expansion occurrences concept hom usual de nition homomorphism goal sent atp 
trying close subgoal multi applies method 
applicable interfaced tramp succeeds nding proof 
tramp returns corresponding nd proof 
formula passed tramp higher order theorem contains quanti cations sets operations functions tramp calls connected rst creates clause normal form theorem higher order variables constants theorem negated clause normalisation 
tramp particular settings calls default mode 
planning level subgoal simply closed application 
plan executed nd proof provided tramp expansion step 
tramp ability translate refutation proofs direct nd proofs domain proofs indirect indirect argument inherent part problem 
domain tramp proofs su er fact low level quite lengthy 
example tramp produces nd proofs containing nd proof transformed proof steps proof 
expanded subproofs usually relatively dicult understand user 
tramp provides proof format mega directly check 
subproofs multi remainder proof prove goals set op set op instantiated discriminant 
part proved multi proof planning strategies implemented prove simple properties residue class structures associativity existence unit elements 
see details 
rst strategy implements exhaustive case analysis 
possible problems quanti ers range nite sets 
strategy proceeds case analysis di erent ways depending universal existential statement proved 
case split elements set involved performed statement question proved single element separately 
case single elements set involved examined stepwise statement holds 
idea second strategy equational reasoning possible prove properties residue classes 
checking validity statements possible cases tries reduce goals equations 
equations passed computer algebra system maple check equality holds 
equation contains meta variables considered variables equation solved supplied maple additional arguments 
multi tries apply equational reasoning strategy rst generally faster produces shorter proofs 
fails goal reduced equations exhaustive case analysis applicable occurring problems 
example goals prove algebra size pairs successes proportion abelian quasigroups non abelian quasigroups non abelian semigroups abelian non abelian non abelian quasigroups abelian semigroups non abelian semigroups non abelian quasigroups abelian semigroups non abelian semigroups abelian non abelian total table 
proportion pairs algebras hr discriminants goal proved exhaustive case analysis 
multi rst rewrites goal pushing negation inside case split universally quanti ed variable range performed 
results goal elements domain 
instance resulting goal prove goal multi tries nd suitable instantiation set inserting possible instantiation succession attempting prove resulting inequality 
example succeeds second subgoal proved equational reasoning strategy 
multi rst decomposes quanti ers results goal cl cl cl new meta variable new constant 
goal statement congruence classes transformed corresponding goal integers mod mod passed maple 
maple applies function compute equation holds general 
result instantiation proof plan goal closed 
results test hr ectiveness nding discriminants arbitrary pairs algebraic objects pairs di erent algebras sizes 
pair hr allowed concept formation steps order nd discriminants 
allowed hr production rules previously mentioned experimentation chose function arity limits compose exists forall match 
average session took seconds mhz pentium machine 
results table 
note hr discriminants nearly pairs higher success rate anticipated short session lengths allowed tests 
average hr discriminants pair total distinct concepts discriminants 
xy xy fig 

multiplication tables non abelian 
sets discriminants hr constructed usually complexity similar discriminants discussed section 
fact complex discriminants hr non abelian fig 

hr constructed discriminants including xx 
states exists idempotent element element squares give idempotent 
thought obvious means idempotent element appears diagonal 
element exists element relative simplicity discriminants facilitates subsequent proofs multi 
particular usually hard predict succeed discriminant 
large set di erent discriminants increase chance success multi backtrack come proof discriminant instantiate 
far tested planning atp side roughly examples hr discriminants 
tested examples successfully proved 
performed best problems 
particular proved example non abelian discriminant 
resulting proof plan consists steps 
atp part proved transformed tramp nd proof containing steps 
comparison attempts solve problems structures opposed structures shows incorporated systems depend cardinality involved residue class structures di erent degrees 
experiments hr performance vary signi cantly applied problems hr solved problems size see table importantly took roughly time provide solutions 
application hr works structures time smaller amount data usually works di erence size algebras minimal 
ected cardinality involved structures simply subproblem responsible contain residue class structures 
complexity problem part depends complexity discriminants provided hr 
experiments complexity hr discriminants depend cardinality involved residue class structures 
hr multi performance depends cardinality residue class sets strategy applied 
performing equational reasoning multi solves subproblem set number steps subproblem set hand multi performance considerably di ers applies exhaustive case analysis strategy 
subproblem nested quanti cations results cases results cases 
multi prefers application equational reasoning case multi subproblems set op set op solvable strategy 
comparison di erent approach experimented model generator sem construct discriminants 
properties created mega sem tests property discriminant 
sem nds models involved structures respect created property 
property candidate discriminant sem succeeds structure fails 
possible properties constructed follows 
basic construction element equation op 
associated equation formulas properties result quantifying existentially universally op op 
properties generated permuting sequence quanti cations op making variables equal op 
complicated properties result combination copies basic construction element instance op op op op op properties associated combined equations constructed mechanisms residue class structure rsn property sem passed multiplication table operation residue class structure clauses resulting normalization property multiplication table rsn encoded set equations form op result ab 
sem asked nd model input 
tried nd discriminants residue class structures systematically randomly checking properties space construction mechanism 
turned nd simple discriminants set op set set op 
complicated discriminants discriminant yy discussed section search space reach approach note combination copies basic construction element op op number possible properties resulting construction mechanisms roughly 
problems approach sem twofold 
search enormous space possible candidates second search blindly able guide search powerful heuristics 
restricted production rules mentioned hr searches similar space search mechanism little sophisticated recognises things 
firstly constructs concept examples concepts built examples useless discriminant 
secondly constructs concept examples previous concept new concept discarded reduce redundancy 
simple empirical checks powerful reducing amount search hr undertakes 
hr success achieved mechanisms available limited search certain search steps taken agenda result functions high arity 
problems dicult additional mechanisms experimented heuristic search measures concepts various ways builds new concepts interesting old ones rst ii forward look ahead mechanism tell advance application concept formation steps lead concept achieves particular categorisation task case nding invariant discussed length 
produce sophisticated systems tackle increasingly dicult problems necessary combine programs greater sum parts 
example fruitful cooperation heterogeneous mathematical systems prove non isomorphism theorems residue class domain 
cooperation essentially orchestrated proof planner multi uses theory formation system hr construct appropriate discriminants structures 
proof planned help automated theorem provers computer algebra system 
problem identifying discriminant objects machine learning problem theory solved program progol uses inductive logic programming identify concept correctly set positive negative examples 
mentioned may dicult practice supply single positive single negative example suggest amount compression concept high suggested viable solution 
currently call hr manually supply proof planner appropriate information working automating communication 
tested cooperation number examples hr proved successful vast majority examples 
hr discriminants handled proof planner automated theorem provers successfully relatively complicated discriminants 

uller fiedler huang kerber konrad meier siekmann 
rge 
mathematical assistant 
proceedings th international conference automated deduction cade volume lnai pages 
springer verlag germany 

bundy 
explicit plans guide inductive proofs 
proceedings th international conference automated deduction cade volume lncs pages 
springer verlag germany 

colton 
automated theory formation pure mathematics 
phd thesis department arti cial intelligence university edinburgh 

colton 
application comparison automated theory formation inductive logic programming 
linkoping electronic articles computer information science special issue proceedings machine intelligence forthcoming 

colton bundy walsh 
notion interestingness automated mathematical discovery 
international journal human computer studies 

colton bundy walsh 
automatic identi cation mathematical concepts 
proceedings th international conference machine learning icml pages 
morgan kaufmann usa 

colton cresswell bundy 
classi cation automated mathematical concept formation 
proceedings interdisciplinary workshop similarity categorisation 
university edinburgh 

gap group aachen st andrews 
gap groups algorithms programming version 
www gap dcs st ac uk gap 

meier 
tramp transformation machine proofs nd proofs assertion level 
proceedings th international conference automated deduction cade volume lnai pages 
springer verlag germany 

meier 
classifying isomorphic residue classes 
proceedings th international workshop computer aided systems theory volume lncs pages 
springer verlag germany 

meier 
comparing approaches explore domain residue classes 
journal symbolic computations 
forthcoming 

meier 
exploring properties residue classes 
proceedings symposium pages 
ak peters usa 

meier 
proof planning multiple strategies 
proceedings international conference computational logic volume lnai 
springer verlag germany 

siekmann 
knowledge proof planning 
arti cial intelligence 

muggleton 
inverse entailment progol 
new generation computing 


maple handbook maple release 
springer verlag germany 

zhang zhang 
sem system enumerating models 
proceedings th international joint conference arti cial intelligence ijcai pages 
morgan kaufmann usa 
