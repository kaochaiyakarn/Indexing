characterization repeating dynamic code fragments francesco michael fertig sanjay patel center reliable high performance computing department electrical computer engineering university illinois urbana champaign center reliable high performance computing technical report crhc study analyze dynamic instruction streams spec integer benchmarks find frequently occurring units computation idioms 
idiom broadest sense interdependent piece computation dataflow 
example load add store idiom performs increment operation set interdependent instructions 
heuristic technique performs exhaustive analysis selected regions application instruction stream able derive small set idioms consisting alpha instructions set covers non trivial fraction stream 
average benchmark set consisting idioms total instructions spans instruction stream 
provide catalog top idiom occurring benchmarks 
catalog provides interesting insights type small scale computations frequent general code 
idiom identify locations source code originates 
idioms occur multiple static locations 
outline potential applications idioms including techniques cache compression effective instruction dispersal clustered architecture specialized instructions customizable instruction set 
deeply investigate application reduce redundancy trace caches potentially boost fetch bandwidth careful systematic encoding frequent idioms smaller instruction words 
demonstrate simple decoder suffices instruction stream 
dynamic instruction streams exhibit repeating patterns levels 
example opcodes static sequences basic blocks exhibit repetition 
repetition exploited efficient program execution 
examine unique dimension repetitive nature dy namic instruction streams 
examine patterns frequencies idioms computation dataflow occurring general integer code 
broadly defined idiom set instructions dataflow graph connected instructions value produced produce value instruction idiom 
example idiom provided represents common idiom results variable increment high level code 
note resulting instructions need physically sequential binary 
idiom occur places binary repeated source level variable increment 
net result idiom possibility occurring frequently execution 
int insert 
ldq 
add 
stq example common idiom variable increment 
source code expressed alpha instructions constitute operations 
analysis code source level instruction level idioms past influenced design instruction sets processor mechanisms 
common idioms supported instruc tion sets scaled arithmetic data structure accesses pre post increment array accesses multiply adds signal processing codes subword parallel instructions mmx sse extension processing media rich data streams 
processor mechanisms functional unit chaining clustering derived notion certain instructions repeatedly occur particu lar sequences 
perform analysis dynamic code streams spec integer benchmarks identify constituent code idioms occur frequently 
study evaluate code streams general manner previous studies basic block level analysis performed araujo 
performing nearly exhaustive evaluation code streams alpha binaries able identify small set idioms provide sizeable coverage entire stream 
average spec benchmark identify set idioms totaling instructions cover dynamic instruction stream 
benchmarks coverage high 
individual idioms cover high fractions instruction stream arise occur multiple locations static binaries 
essential components idiom level analysis code streams descrip tion applications idioms improve processor architecture 
part analysis st ld provide catalog top idioms integer benchmarks including characteristics frequently idiom occurs static dynamic code 
applications component describe evaluate mechanism reduce redundancy trace caches potentially boost fetch bandwidth compressing idioms smaller codewords 
methodology objective find small set idioms application span large amount application dynamic instruction stream 
deriving optimal set idioms requires constructing storing fragment dependent instructions size 
computational complexity analyzing subgraphs dataflow entire dynamic instruction stream finding absolute set commonly occurring idioms intractable problem 
time simple heuristic peephole analysis basic block may limiting restricts possibility idiom spanning branch instruction 
address problems performing analysis sequences basic blocks execute unit 
techniques developed recombine blocks larger units purposes scheduling optimization trace scheduling superblock formation fetch bandwidth maximization trace caches 
unit analysis frame 
frame trace code segment highly predictable branches converted control flow assertions essence frame basic block branches highly regular converted checks trigger recovery control flow behaves differently 
frame code guaranteed execute atomically frame side exits entrances 
frames basis analysis allows idiom formation encompass multiple basic blocks having consider multiple control flow paths 
frames demonstrated cover significant fractions instruction stream approx 

frames capture program hot spots dynamically built observed program behavior 
high level overview methodology provided 
process works passes 
pass set idioms generated 
starting set frames generated dynamically algorithm described provided frame builder frame decomposed set possible idioms frame analyzer 
set possible idioms pruned idiom selector set disjoint non overlapping idioms static instruction occurs multiple idioms 
phase heuristically search set idioms find small disjoint set process frames delineated branch instructions 
branch direction consecutive times converted assertion 
assertions terminate frames 
potentially spans large fraction instruction stream 
second pass calculate statistics percentage instruction stream covered derived set idioms 
subsections describe passes detail 
dynamic stream frames frame generalization builder pass graph builder pass second pass frame analyzer idiom selector standardization possible idioms frames select top idiom store top idiom remove remove overlapping idioms top non overlapping idioms overview idiom analysis process 
dynamic stream stream idiom mapper frame builder generates frames analyzing dynamic instruction stream 
frames passed frame analyzer function generate possible idioms derived frames 
analyzer operates frame basis 
analyzes frames account dynamic coverage entire set frames constructed builder 
heuristic significantly prunes number frames need analyzed results change top idiom benchmarks investigated 
analyzer passes frame steps instruction generalization graph construction standardization 
dynamic coverage generalization involves series simple code transformations remove artificial dis particular opcodes 
alpha lda load address add register immediate instructions perform operation 
operates bit immediate operates bit immediate generalized 
transformation loss information difference number instructions dependencies 
graph construction involves constructing maximal dataflow graph frame 
maximal dataflow graph defined graph instruction represented node instruc tions share edge exists register dependence 
graph need strongly connected may multiple independent threads dependence frame 
due transient nature memory dependencies detached nature memory reader writer pairs dataflow graph edges register dependencies 
maximal dataflow graph constructed possible subgraphs formed 
subgraph defined connected subcomponent maximal dataflow graph 
subgraphs precursors idioms 
simplify analysis choose minimum subgraph size instructions maximum size 
subgraphs smaller instructions excluded perform minimal computation difficult gain useful insights 
size restriction heuristics subgraph construction 
brute force approach computationally feasible maximal dataflow graph largely linear split merge points capable causing explosion number subgraphs 
subsequent experiments show raising maximum size strongly affect qualitative results 
observed common idioms larger twelve instructions 
standardization final phase analyzer 
purpose standardization par ticular idiom occurrence general form 
done equivalent segments dataflow perform basic computation map idiom 
process involves steps ordering operands commutative instructions extracting register dependencies 
subgraphs computationally equivalent differ ordering source operands commutative instructions 
example addq perform equivalent computation 
subgraphs forced standard ordering source operands causing subgraphs essentially equivalent expressed differently map 
standardization techniques computational equivalence performing law algebraic standardization performed loss information involved doing involve physically changing operators idiom 
furthermore subgraphs relatively small fragments dataflow opportunities transformations 
transformation extracting register dependencies similar register renaming pro cess 
register specifiers transformed parameters 
maintains dependence information abstracting away mapping computation specific architectural registers 
process allows separate instances computation equivalent despite fact individ ual instructions may store results different architectural registers 
register parameters actual register inputs idiom outputs 
number parameters temporary values produced consumed idiom 
furthermore immediate values abstracted point treated input parameters idiom 
subgraph parameter ized considered idiom 
abstracted piece computation number register immediate inputs number register outputs 
idiom selector final phase pass 
frame analyzer passes list entire set generated idioms selector 
selector job reduce large list smaller set idioms set span large fraction benchmark instruction stream 
selector works follows top idiom selected list coverage set frames processed analyzer referred frame stream represents instructions stream occur frames 
idioms overlap selected top idiom eliminated list avoids situation entire top idioms overlapping region code 
step necessary potential uses idioms allow overlap 
process repeated set number idioms collected 
analysis chose collect idioms benchmark 
practice top idioms detected unaffected particular selection heuristic employed degree overlap top idioms small 
second pass second pass simple 
entire dynamic instruction stream searched unique instances top set idioms 
re running benchmark matching dynamic instruction stream set idioms derived pass stream mapper determines complete instruction stream coverage set idioms 
analysis pass dynamic instruction idiom 
idiom catalog section provide listing idiom highest coverage dynamic instruction stream spec integer benchmarks detected analysis technique outlined section 
particular idioms highly specific benchmark compiler generate binaries interesting higher level insights derived listing 
figures provide pictorial representations top idioms 
node dataflow representation idiom alpha instruction 
idiom provide example piece source code idiom derived percentage total dynamic instruction stream covered idiom number unique static occurrences idiom observed execution idiom different static instructions 
shading provided assist mapping constituent instructions back source code originates 
pictorial representation include inputs outputs idioms 
idiom represents self contained unit computation inputs outputs parameters registers immediate values idiom 
sense idiom forms primitive operation performed frequently associated application 
values generated idiom live outputs idiom example output thes addq top idiom crafty 
possible determine value live dead exit idiom conservatively mark values outputs potentially idioms fewer outputs denoted 
idioms immediate value inputs shown diagram prevent clutter 
cases multiple logical inputs physical value cases idiom coverage lower bound 
technique approximate order conserve memory usage 
denoted rx 
example ldq instructions mcf register inputs base register 
idioms provide valuable insights frequent data manipulations performed benchmark 
example top idiom bzip results code rotates array characters element 
particular idiom originates static loop bzip source code compiler unrolled times 
idiom represents sequence operations happen repeatedly unrolled loop 
point note particular loop occurs locations bzip source code 
compiler generated slightly different code version resulting versions getting mapped idiom 
idiom generalized slightly include version loop increasing coverage 
idiom derived single static site covers nearly dynamic instruction stream bzip 
benchmark gap frequent idiom represents function call occurs function pointer calculated table lookup 
source idiom arises macro definition occurs nearly sites source code 
data sets nearly sites expressed dynamically 
note source code idiom spans multiple conditional branches 
benchmark mcf idiom represents frequent calculation elements data structure 
resulting instruction idiom register inputs possible outputs 
idiom includes conditional branch 
benchmarks gzip parser top idioms represent byte manipulations 
benchmarks alpha compiler enabled generate instructions extensions byte word extensions compiler performs byte extractions data 
possibly done reduce number memory operations performed associated code 
benchmarks mcf crafty gap vpr idioms encompass pointer indirect addressing 
benchmarks exhibit lower coverages top idioms 
benchmarks small minimum sized idioms 
benchmarks perform wider varied types operations reflected top idioms 
example top idioms gcc vortex perlbmk related function calling convention alpha 
gcc vortex idioms save values stack perlbmk idiom reflects update stack global pointers entry function 
section investigate broader properties idioms collect 
hope establish frequency characteristics types idioms exist general integer code exploited variety ways 
example idioms direct dispersal policies better execution cluster assignment 
idioms tailor special purpose functional units design time reconfigurable units run time 
detail applications section 
rx lda stq xor addq xor beq bne stq addl beq update sp gp stq stq stq stb rx stq stq bzip dynamic coverage number static instances tmp yy ll tmp tmp tmp tmp yy yy tmp yy tmp eon dynamic coverage number static instances static int return 
gcc dynamic coverage number static instances calling convention ldq addq stq jsr addq ldq addq addq ldq addq ldq ldq crafty dynamic coverage number static instances define unsigned long long 
save hash key 
save hash key ply gap dynamic coverage number static instances define type hd long hd int int hd type 
define eval hd long hd int hd type hd hd eval gzip dynamic coverage number static instances unsigned char buf 
buf lit unsigned char lc top idioms occurring benchmarks bzip crafty eon gap gcc gzip 
idiom provide example source code idiom derived dynamic coverage idiom number static occurrences idiom 
rx ldq ldq addq mov ldq subq rx rx ldq addq addq stq sra stq ldq stq rx mcf dynamic coverage number static instances cost bea compute red cost arc arc return arc cost arc tail potential arc head potential int bea dual infeasible arc arc cost red cost return red cost 
red cost bea compute red cost arc bea dual infeasible arc red cost parser dynamic coverage number static instances int dict compare char char 
vortex dynamic coverage number static instances calling convention addq lda lda ldq ldq update sp gp lda ldq update sp gp lds perl dynamic coverage number static instances calling convention twolf dynamic coverage number static instances calling convention vpr dynamic coverage number static instances struct heap float cost 
struct heap heap heap cost 
top idioms occurring benchmarks mcf perl parser twolf vortex vpr 
idiom provide example source code idiom derived dynamic coverage idiom number static occurrences idiom 
analysis previous section provided samples top idioms spec integer benchmarks 
expand set include top idioms application 
ing comprehensive listing set idioms attempt distill broader properties provide insights nature idioms 
dynamic coverage plots show dynamic instruction stream coverage varies number idioms application 
graph divided similar plots enhance readability 
vary number idioms 
seen graph top idioms average constituent instructions cover instruction stream 
idioms required maximize coverage 
increasing set idioms results slightly higher coverage curves flatten 
experiments show idioms marginal increase coverage new idiom added 
reasons behavior 
top idioms generally program hot spots 
second idioms large number static occurrences 
third heuristic technique derive set idioms susceptible local minima 
heuristics potentially result better spanning sets idioms 
dynamic stream coverage number idioms coverage optimized code 
par mcf eon vor cra dynamic stream coverage number idioms pointed earlier set generated idioms highly sensitive code generation policies compiler 
contains plots similar binaries statically optimized 
unoptimized binaries idioms cover dynamic instruction stream signif higher optimized binaries 
increase due fact optimizations vpr gap twf gcc higher likelihood different places source code similar structure map idiom 
performing optimizations compiler able customize piece code particular context process map appear similar code constructs slightly differently idioms 
dynamic stream coverage number idioms coverage unoptimized code 
vpr par gap twf cra dynamic stream coverage number idioms specific nature idioms look varies factors isa compiler programmer basis idioms appears fundamental small set idioms cover non trivial amount application instruction stream 
coverage distributions section describe idiom analyzer notion program hot spot frame generate candidate idioms 
idioms eventually chosen analyzer limited hot spots 
example top idiom benchmark gap occurs nearly observed different static locations 
idioms provide high dynamic coverage times idioms largest number static instances 
shows scatter plot top idioms benchmark sorted rank idioms higher coverage fractions appear right 
vertical position point represents relative number static occurrences idiom number defined number static occur idiom divided total number static instances top idioms benchmark 
allows relative comparison benchmarks meaningful look relationship static instances dynamic coverage 
seen strong correlation normalized static occurrence dynamic coverage idiom 
idioms higher coverage derived multiple sites source code 
common idioms statically dynamically frequent dynamically frequent code constructs inner loops 
eon mcf gcc relative static instances increasing dynamic coverage rank relative static instances vs dynamic coverage 
noteworthy benchmarks bzip trend opposite 
top ranking idioms derived static sites 
benchmarks small highly executed regions code responsible majority computation 
resulting idioms kernels executed high frequency may static instance potentially high coverage 
idiom properties order provide concise comprehensive picture nature idioms detected analysis provide characteristics idiom size 
characteristics provided table 
data idioms top idioms benchmark generated analyzer 
table lists various properties register inputs outputs categorized size 
example average idiom size register input register outputs average idiom size inputs outputs 
recall estimations register outputs conservative uncertain value idiom externally 
internal values lists number values generated idiom known outside idiom correspondingly number pessimistic 
addition register inputs idiom immediate inputs memory arithmetic logic operations 
inputs zero refer inputs immediate inputs set register inputs hardwired 
point interest number ld st instructions compared number immediate values appearing average idioms 
example average instruction idiom ld st instructions requires immediate input 
memory instructions alpha require immediate offset bulk immediate inputs idiom memory operations 
idioms size number immediates number memory operations memory operations offsets zero counted immediate inputs 
included table fraction dynamic occurrences idioms span branch instructions 
data point may peculiar provide demonstrate basic block level analysis idiom detection example peephole analysis compiler optimization opportunities 
analysis done frames highly regular regions control flow able detect candidate idioms span multiple basic blocks 
analysis idiom size register inputs immediate inputs register output internal values inputs zero num lds sts num branches span branches na rel frequency table various idiom properties broken idiom size 
experiment section provides analysis idioms spec integer benchmarks treated entity 
discover idioms exist general application find idioms primitive applications 
analysis starts set top frames benchmark set account corresponding benchmark dynamic instruction stream 
benchmark runs different number instructions number times frame executed normalized benchmarks equivalent effective contribution instruction stream 
coverage top idioms resulting analysis lower benchmark specific set 
number interesting observations analysis 
algorithmic idioms rank highly individual benchmarks generally common benchmarks 
top cross benchmark idioms primitive classified broad categories generic data manipulation branch calculation calling convention overhead idioms originating standard libraries 
idioms category due manipulations byte data types stored idioms map directly alpha extension compiler chose 
common idiom cross benchmark analysis belongs category callee save register values newly calculated stack pointer 
idioms category standard library 
experiments benchmarks shown effect pronounced code uses standard template library 
provides examples top cross benchmark idioms 
addq xor bne calculating load address inserting byte designated loading value branching inequality location applications rx rx ldq lda addl beq loading zero extending byte basic loop control set idioms occurred frequently benchmarks 
analysis sections support notion small set frequent idioms derived general purpose applications 
benchmarks analyzed span set idioms quite significant 
property idioms coupled fact idioms encapsulate computation communication provides interesting applications 
obvious application idioms explored smaller scale previous re search mapping idioms new types instructions executed special functional units tailored computation pattern 
example add frequent including instruction isas save cache space fetch bandwidth ex ecution latency shift add done single cycle 
furthermore notion idiom allows machine level optimizations constituent tasks 
example recalling increment example provided section idiom optimized machine level removing address calculation associated 
possible definition idiom access location 
target applications idioms identified previous section general 
idiom formation phase analysis technique need filter idioms match prototype intended application 
example idioms limited number register inputs outputs candidates 
restricted notion idioms examined ye 
demonstrated idioms inputs output consisting arithmetic logic operations significantly speed media applications processing idioms reconfigurable functional unit 
idioms dynamically affect processor policies 
example idioms encapsulate value communication instructions assigned unit execution cluster multi clustered architecture 
section demonstrate third operations idiom generate values idiom 
localization communica tion idioms valuable clustered execution values generated instruction need broadcast outside idiom outside cluster 
identification idioms help processor architects build understanding frequent patterns computation 
compression fetch bandwidth section examine specific highly aggressive idiom concept 
exploit notion applications idiom locality compressing fetch stream application 
basic concept want pack idioms smaller code words representing increment idiom ldq add stq singular instruction 
doing operations instructions constitute idioms abstracted operands allowing compaction instruction words represent operations 
basic concept applications new instructions added isa encode idioms customized application 
profile driven compiler analysis application produces idiom list systematically mapped idiom instruction words 
compiler communicates idiom list hardware special instruction application startup time 
format idiom word shown 
contains fields opcode denotes current instruction word number words follow part idiom spare alpha opcodes idiom id decoder locate template idiom dispersal field discuss parameters dynamic bindings input output registers immediate values idiom 
table shows considerable number source operands instructions idioms com pletely internal idiom zero 
property exploited order perform computation correctly inputs outputs need encoded idiom format 
furthermore multiple instructions idiom constant value need specified idiom parameter 
idiom opcode encountered fetch stream decoder access idiom decoder cache idc id idiom idc contains templates idioms recom input output specifiers contained parameter field idiom instruction words form original instruction words 
original instruction words added back instruction stream starting position idiom codeword 
process outlined 
slightly restricted ver sion concept proposed araujo 
proposed concept storing operations separately operands binding decode time 
expand allowing idioms span basic blocks preserve compiler scheduling information 
fetch packet addq idiom idiom addl addq ldq bis ldq opc id dispersal parameters multiword idiom instruction idiom decoder cache template formation instruction words dispersal decode packet idiom decoding logic decode stages expand idiom codeword constituent operations 
dispersal field allows idiom preserve compiler instruction scheduling 
compiler scheduling information preserved dispersal field 
indicates constituent instructions idiom instruction stream 
bit dispersal field represents instruction position 
indicates corresponding position filled idiom instruction indicates position filled instruction fetch stream 
dispersal field allows information input arrival positions output positions abstracted idiom potentially allowing code fragments map idiom 
length field idc potentially idiom id case software exception cause appropriate idiom reloaded idc 
addq ldq addq addl addq ldq sra bis stq ldq corresponds span idiom number instruction words operation idiom 
dispersal field increases idiom applicability avoiding sticky issue instruction idiom uses value generated idiom register memory produces value idiom 
cases dispersal field allows compiler interleave idiom external instruction 
issue discussed section 
evaluate scheme measured percent reduction number instruction words bit alpha instructions required fetched encoding performed 
number code words needed particular idiom instance depends number inputs outputs idiom 
number inputs outputs small idiom potentially fit regular alpha instruction format described 
idioms larger number inputs outputs require additional words 
benefit scheme derives ratio original size instructions size idiom encoded form 
benefit mechanism comes particularly trace caches store instructions dynamic order 
trace frame caches suffer significantly redundancy 
redundancy mitigated storing traces frequent computation traces represented idioms 
benefits 
allows instructions compacted trace frame 
benefit traces reach maximum size limit 
allows traces frames stored cache particular time trace stored multiple cache blocks pentium iv 
allows boost fetch bandwidth fetch width greater number instructions bytes cross fetch decode boundary unit time 
presumes decoder renaming logic execution engine keep added fetch rate 
shows percent reduction number instruction words need fetched straightforward idiom instruction encoding 
mentioned idiom occupies fixed number bit instruction words depending number parameters idiom contains 
observe approximately reduction number instructions required fetched 
experiments shown significant portion compression benefit shown achieved small number encoding formats 
scheme different idiom formats different size different number bits allocated registers immediates dispersal bits 
small fixed number formats necessary decoding logic simpler 
idioms encoded smallest format fields type idiom requires 
idiom fit encoding formats discarded 
alpha immediates bits size depending originate arithmetic logic operation memory operation control flow operation 
encoding format specified number fields 
additional compression benefit achieved adjusting reduction dynamic instructions cra eon gap gcc mcf par twf vor vpr effect idioms bandwidth compression 
results net saving number instruction words fetched 
size immediate field need particular idiom 
instance loads stores instruction stream offsets fit smaller field 
memory offsets dynamic instruction stream fit bits 
addition branch targets large size generally near value 
delta encoding scale number bits necessary branch targets 
generally speaking instruction encoding issues definite tradeoff encoding compactness decoding complexity 
applicability idioms applications concept idiom restrictions 
done intentionally try display maximum potential idea 
certain applications may impose additional restrictions type idioms created order maintain correctness hardware simpler 
call process filtering idiom specialization 
case compressing fetch bandwidth situation called idiom deadlock avoided maintain correctness 
displays deadlock case segment dataflow shown 
nodes constitute idiom included 
idiom instructions placed contiguously decode buffer dataflow order violated precede follow 
chose solve problem dispersal fields solved specialization filtering idioms deadlocked produced 
idioms map general code specialized functional units potentially necessitate idiom specialization 
idioms memory operations probably excluded idioms live register output 
example deadlocked idiom 
nodes idiom included 
related general concept idiom analysis instruction combining general compiler algorithm map general code sequences machine idioms 
expand previous performing analysis regions code span multiple basic blocks 
furthermore propose flexible idiom instruction allows compiler combine instructions pre defined machine instruction exists concept code stream analysis detection frequent pairs operation explored previ ously typically context finding small number instructions potentially executed single cycle 
analysis restrict set dependency chains form order find purely repeating idioms 
potential uses idiom concept compressing trace frame cache space fetch bandwidth 
previous cache compression focused somewhat restricted models cache compression static binary instructions physically sequential contained basic block required significant amount computation decompress coded stream 
scheme proposed araujo quite similar fetch compression proposed section 
propose separating operation tree opcodes 
relax constraint operation tree idiom exist single basic block 
furthermore dispersal field allows preservation compiler scheduling information 
study developed analysis technique able heuristically find repetitive dataflow fragments integer code streams 
technique spec integer benchmarks able derive small set idioms consisting alpha instructions set covers non trivial fraction stream 
average benchmark set consisting idioms total instructions spans instruction stream 
significant outcome study 
find top idioms benchmarks categorized idioms perform data structure related manipulation perform branch calculation perform operations related calling convention overhead 
top idioms benchmark occur frequently execution 
example top idiom bzip spans quarter application instruction stream 
generally speaking idioms significant coverage occur multiple static locations binary 
investigate application potentially preserves cache space boost fetch bandwidth trace cache frame cache 
developing careful systematic encoding frequent idioms smaller instruction words simple decoder suffices instruction stream 
mechanism reduce number instruction words fetched cache 
provides depth qualitative study top idioms spec integer bench marks characterization design points left unexplored 
currently investigating idioms differ architectures alpha new applications idiom concept fetch bandwidth compression 
alfred aho ravi sethi jeffery ullman 
compilers principles techniques tools 
addison wesley 
guido araujo paulo mario cortes ricardo 
code compression operand factorization 
proceedings th annual international symposium ture 
bryan black john paul shen 
block trace cache 
proceedings th annual international symposium computer architecture pages 
joseph fisher 
trace scheduling technique global microcode compaction 
ieee transactions computers july 
richard hank scott mahlke roger john gyllenhaal hwu 
su formation static program analysis 
proceedings th annual international symposium microarchitecture pages 
robert glenn hinton michael david sager chan lee 
trace instruction caching 
patent number 
charles eva trevor mudge 
analysis high performance code compression method 
proceedings th annual international symposium microarchitecture 
wayne wolf 
code compression embedded systems 
design automation conference pages 
sanjay patel tony tung bose matthew 
increasing size atomic instruction blocks control flow assertions 
proceedings th annual international symposium microarchitecture 
alex peleg uri weiser 
mmx technology extension intel architecture improving mul communications application performance times 
ieee micro 
james phillips vassiliadis 
high performance interlock collapsing alu ieee transactions computers 
eric rotenberg steve bennett james smith 
trace cache low latency approach high bandwidth instruction fetching 
proceedings th annual international symposium mi 
vassiliadis james smith 
performance potential data dependence speculation collapsing 
proceedings th annual international symposium microarchitecture 
vassiliadis bart richard 
scalable compound instruction set machine 
ibm journal research development 
zhi alex ye andreas scott hauck banerjee 
chimaera high performance architecture tightly coupled reconfigurable functional unit 
proceedings th annual international symposium computer architecture pages 

