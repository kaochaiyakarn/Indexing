fundamenta informaticae xxi ios press formal model situated multi agent systems danny weyns department computer science leuven belgium danny weyns cs kuleuven ac tom holvoet department computer science leuven belgium 
contrary cognitive approaches agency lot effort devoted formalization agent concepts little done formalization situated multi agent systems situated mass 
generic model situated mass model formally describes architecture situated mass architecture agent situated local context able perceive act 
intelligence situated mass results interactions agents environment individual capabilities model takes action centric approach 
model deals actions agents environment ongoing activities environment moving objects interactions agents ongoing activities environment 
model situated mass described ferber muller 
model agents mas act global pace agents globally synchronized 
drawbacks global synchronization centralized control poor scalability 
model allows agents synchronize locally 
model centralized entity imposes agents act global pace agents decide perform actions 
model supports simultaneous actions regional synchronization 
regional synchronization agents form synchronized groups basis actual locality 
different groups act asynchronously agents group act synchronously 
result model suffer drawbacks global synchronization preserves properties handling simultaneous actions 
apply model simple mas application 
show model instantiated practical application 
follow trace evolution application demonstrate model deals particular step 
weyns holvoet formal model situated multi agent systems 
generic model situated multi agent systems situated mass 
model formally describes architecture situated mass focus model interactions situated agents effects interactions produce world 
contrasts popular knowledge level approaches bdi focus manipulation symbolic representation environment desired behavior representations specifications agents decision making 

situated multi agent systems situatedness property agents adopted researchers domain mas 
known example wooldridge jennings definition agent agent computer system situated environment capable autonomous action environment order meet design objectives 
definition situatedness expresses fact agent isolated entity exists environment concept environment kept 
definition explicit means agent situated environment definition explicitly refers fact existence agent environment entails social component 
situated mass agents particularly social entities 
emphasis situated mass mas 
agents environment constitute complementary parts multi agent world 
situatedness expresses local relationships agents objects environment 
exactly relationships give system meaning drive evolution mas 
situatedness agent placed context able perceive interact agents 
intelligence situated mas originates interactions capabilities individual agents 
approach situated mass long history 
brooks identified key ideas situatedness embodiment emergence intelligence 
steels deneubourg introduced basic mechanisms agents coordinate environment gradient fields marks 
maes adopted early robot oriented principles reactivity broader context software mass drogoul dorigo parunak researchers drew inspiration social insects adopted principles situated mass school reactive mass originates rejection classical agency symbolic ai nowadays original opposition tends evolve convergence different schools emphasizing different aspects 
researchers having different points view complementary applications 
situated mass applied success numerous practical applications broad range domains 
examples manufacturing scheduling supply chains systems artificial worlds social simulation network support peer peer systems 
benefits situated mas known striking efficiency robustness flexibility 
wooldridge pointed number limitations situated mass quoted limitations inherent approach decision making situated agents local current information situated agents definition short time view world 
topics unsolved problems engineering situated agents respect desired behavior 
weyns holvoet formal model situated multi agent systems 
situated agents situated agents live act 
decision making extensive reasoning mental issues 
situated agents long term planning decide action sequence executed perform situated actions 
situated actions actions selected basis agent position state world perceives limited internal state contrary knowledge agents situated agents emphasize internal modeling environment 
favor employ environment source information 
internal representations subsymbolic evolving threshold values express dynamics agent preferences time certain behaviors 
forms internal state representations goals respect immediate environment see objects get commitment particular role local ongoing collaboration long objects available pass agent front 
describing representation terms immediate environment known representation 
situated agents representations instrument direct decision making process done 
representations oblige agent keep track hypothetical state investigate implications plan 

simultaneous actions different agents situated mas may execute actions simultaneously actions possibly interfere 
term simultaneous actions general designation actions happen see 
distinction kinds simultaneous actions independent actions interfering actions 
independent actions actions interfere 
example agents decide step different location actions happen independently 
interfering actions hand bring agents contact 
interfering actions correspond interaction agents depending nature interactions distinguish concurrent actions influencing actions joint actions 
concurrent actions conflicting nature 
example agents simultaneously try pick object 
result interaction may agent gets object fails get 
influencing actions actions positively negatively affect 
example agents push object different directions object moves resultant actions 
resulting movement profitable individual agents depends potential intentions 
joint actions actions executed order produce successful result 
example joint actions group agents carry large object move 
researchers similar distinction different kinds simultaneous actions 
examples allen ferguson differentiate actions interfere actions additional effects griffiths luck talk joint actions group agents perform concurrent actions performed time boutilier brafman distinguish actions positive negative interacting effect 
wavish adopted notion situated action mass associate situated action stimulus behavior related external perception 
relax definition allow agents integrate limited internal state select situated actions 
interaction interfering actions interchangeably 
general notion interaction interfering actions allocation task means contract net called interaction 
weyns holvoet formal model situated multi agent systems 
locally synchronous model situated mass contrary cognitive approaches agency lot effort devoted formalization agent concepts little done formalization situated multi agent systems 
genesereth nilsson described set simple architectural models including models purely reactive agents simple agents memory 
number researchers developed formal theories agent architectures interaction 
interesting analysis differences rational reactive agent architectures proposes unified architecture aims capture architectures special cases 
ferber muller pursued similar course developed formal model mas applicable purely reactive agents agents memory 
model ferber theory action described 
essence theory separates agent wants perform happens 
agents produce influences environment subsequently environment reacts combining influences deduce new state world 
reification actions influences enables environment combine simultaneously performed activity mas 
built theory ferber muller model able deal complex interactions environment agents environment 
model agents mas act global pace agents globally synchronized 
global synchronization implies centralized control general undesirable property mass order calculate reaction environment combine influences agents cycle fit scalability mas 
contribution formal model situated mass allows agents synchronize locally 
model centralized entity imposes agents act global pace agents decide perform actions 
model supports simultaneous actions regional synchronization 
regional synchronization agents form synchronized groups basis actual locality 
different groups act asynchronously agents act synchronously group 
results model suffer drawbacks global synchronization preserves properties handling simultaneous actions 

design choices model formalized approach model gives rigorous specification situated mas 
specification describes structural decomposition mas 
splitting mas constituent components reduces complexity offers means reasoning situated mass means communication specification serve basis constructing situated mass implementation 
model bias 
decomposing system implies design choices reflects vision designers modeled system 
basic choices underlie model 
model actions agents consequences environment 
deal complex interactions environment agents 
balance autonomy agents simultaneity actions 
decompose behavior agent set functional modules refined weyns holvoet formal model situated multi agent systems 
describe evolution mas 
formalized approach motivate choices 
choices clearly express underlying action centric approach proposed model 
motivation choices interactions agents central problem solving abilities situated mass choice expresses agents may slaves collective 
advocate autonomy situated agent respect decision act limited agents far agent involved possible interactions agents 
independently acting agents able act autonomously pace enhancing flexibility mas 
motivation may sound evident finding balance agents autonomy ability perform simultaneous actions non trivial matter 
practice autonomy agents decide act sacrificed keep implementation simple global synchronization 
focus choice architecture individual agents 
motivation structural decomposition build model serve basis constructing situated agents 
number design choices reflect common principles agent architectures limited perception memorization decision making 
motivations specific choices explained discussion agent model section 
goal choice integrate activity agents ongoing activities environment 
motivation build model supports dynamical evolution environment directly depends agent activity potentially interferes activity agents 
example moving object influenced agent soccer player kicks rolling ball robot arm removes malformed product conveyor belt 
motivation choice precise 
goal model perform mathematical verification situated mass verification important topic limit discussion formal description mas 
final concerns non determinism mas 
avoid overloaded expressions included non deterministic evolution mas model 
elaborated example application discussed touch non determinism briefly 

overview structured follows 
section briefly discuss ferber muller model action influences reactions influences 
section explains regional synchronization 
section general theory dynamical system 
subsequently apply theory 
develop model agents section 
section describe model ongoing activities environment 
integrate models integral model situated mass section 
section apply model situated mass simple example application 
show model instantiated follow trace evolution application 
evaluate model conclude respectively sections 

influences reactions ferber muller describe model actions situated mass section give brief summary model 
evaluate model point number limitations 
weyns holvoet formal model situated multi agent systems model ferber muller main principles 
distinguishes influences reactions influences 
influences come inside agents attempts modify course events world 
reactions result state changes produced environment combining influences agents local state environment laws world 
clear distinction products agents behavior reaction environment enables handle simultaneous actions 
second model decomposes system dynamics parts dynamics environment dynamics agents situated environment 
third model describes different dynamics mas means state machines 
contrary classical theories state world describe evolution mas ferber muller model evolution described transformation call dynamical state 
dynamical state defined tuple 
set internal states agents representing mental state mas 
defined vector agents fa mas 
denotes internal state agent set possible states agent represents state environment set influences simultaneously produced environment 
evolution mas defined evol 
cycle evol evol cycle ferber muller define evolution mas infinite recursive function called evol takes argument dynamical state world 
step cycle function transfers dynamical state dynamical state 
evol function runs infinite loop returns results errors impossible values denoted cycle function split sub functions behavior react exec 
start behavior typed follows behavior behavior decision behavior defines agent transforms internal state produces influence internal state state environment 
internal state agent updated percept decision function decides operation executed information 
react exec typed follows react jj exec jj authors explain evol produce result 
assumption behavior agent perceived state environment 
confusion issue ferber affirms assumption 
weyns holvoet formal model situated multi agent systems set laws world describe state computed previous state set influences set operators defined mas produce influences 
operators laws composed parallel denoted jj operator react function takes influences current state world laws produces state world 
exec function produces influences dynamical state 
authors parallel composition operators simply produces union influences produced different operators 
laws parallel composition commutative allow flexible description state changes unordered set laws 
applied parallel composed laws respectively operators get react jj react react exec jj exec exec describe dynamics system ferber muller integrate react exec function behavior agents cycle function cycle 
exec jj jj react jj jj behavior jj jj denotes set parallel composed operators jj jj denotes applied set parallel composed laws 
cycle function expresses evolution mas agents 
evolution described infinite recursive function produces cycle new state environment reaction environment set produced influences new set internal states result behavior individual agents new set influences produced agents dynamics environment 
evaluation model brings considerations 
model deals complex interactions environment agents solving fundamental problem simultaneous actions elegant way 
model applicable purely reactive agents agents memory model agents forced perform simultaneously action cycle step model restricted synchronous description mas evolution 
hard requirement implies number drawbacks model 
scalability model respect number agents mas limited 
influences agents treated happened influence possibly interfere influence 
costs calculating reactions order square complete number agents mas mas populated agents 
second agents globally synchronized implies centralized control evolution mas 
centralized control conflicts distributed nature mas 

regional synchronization resolve drawbacks global synchronization losing properties handling complex interactions introduce regional synchronization 
regional synchronization shifts responsibility obviously type argument react function jj similar jj argument exec function 
brief overview examined general model agents memory 
information purely reactive agents see 
weyns holvoet formal model situated multi agent systems synchronization environment agents 
regional synchronization longer global synchronizer agent equipped local synchronizer 
synchronizer responsible setup synchronization associated agent synchronizers agents 
goal synchronization handle simultaneous actions particular interfering actions range agent synchronize agents accordance range interfering actions 
context situated agents quite natural limit range perceptual range agents 
synchronization agents boils reaching mutual agreement synchronization 
reach agreement synchronizers negotiate exchanging messages 
general setting regional synchronization trivial matter 
agent may establish synchronization agent 
implies group reach agreement synchronization 
second agents autonomous entities running asynchronous processes 
fundamental property agent entered phase synchronization setup disturbed time new agent enters perceptual range synchronizing agent 
third tough nut crack concerns situatedness agents 
situated agents explicit position environment agent personal view environment 
agents positioned inside perceptual range may see different candidates synchronize 
property synchronization setup agent may know limited number agents synchronized group belongs 
call group region synchronized agents 
member region synchronized agents synchronized member group member directly synchronized subset group agents perceives 
developed algorithm enables individual agents establish regional synchronization 
detailed discussion algorithm refer 
limit discussion intuitive description algorithm 
stated agent equipped synchronizer responsible handling synchronization 
action agent enters synchronization setup 
synchronization setup starts synchronizer receives view set synchronization time 
view set initial set candidates synchronization containing synchronizers perceptual range associated agent 
agents perceive agent perceptual range skip synchronization setup continue immediately acting asynchronously 
synchronization time value logical clock moment synchronizer view set composed 
logical clock counter maintained environment time group synchronized agents concluded acting phase value logical clock incremented new view sets agents composed 
view set synchronization time synchronizer composes synchronization set 
name synchronization time synchronization set contains member set 
member set synchronizer view set synchronizer represented member 
member tuple containing name candidate synchronization state time stamp 
initially member member set initial state denoted ini time stamps value stands initial value zero 
execution algorithm synchronizers interfering actions kinds simultaneous actions described section concurrent actions influencing actions joint actions 
notice value logical clock global variable 
distributed setting local environment mas host maintains local clock 
weyns holvoet formal model situated multi agent systems progressively try synchronize members synchronization set means sending messages back forth 
interaction negotiating synchronizers pass phases 
phase decide agree synchronization subsequently second phase mutually commit agreement 
process synchronizers exchange value synchronization time mutually register received values member particular synchronizer 
algorithm state member evolves ini ack synchronization accepted com committed sync mutually synchronized 
decision synchronizer continues synchronization particular synchronizer depends membership requesting synchronizer comparison value synchronization time member value synchronizer synchronization time combination states members member set 
case synchronization achieved rejecting synchronizer informs colleague 
far belong member set synchronizers remove corresponding member member set 
soon members member set synchronizer reached state sync synchronizer concludes synchronization setup activates associated agent continue acting 
individual sets synchronized agents environment composes regions agents influences handled synchronously 
conclude section briefly describe algorithm integrates building blocks distributed algorithms phase commit protocol logical clock 
classical phase commit protocol coordinator manages votes participants decides outcome interaction 
algorithm synchronizers peers play role participant coordinator ongoing synchronization setup 
role synchronizer plays respect depends comparison values synchronization time value logical clock received entered synchronization setup 
phase commit protocol result algorithm set synchronizers reached agreement associate agents execute action synchronized 
contrary phase commit protocol reaching agreement matter fixed set participants algorithm regional synchronization result agreement subset synchronizers involved ongoing negotiation 

dynamical system section theory forms basis model situated mas discuss sections 
theory describes dynamics system composed set actors fa exist environment 
actors processes perform actions environment 
denote group actors simultaneously perform action 
furthermore introduce set possible subsets activity invoked actors activities may going environment 
examples activities moving object context ant systems pheromone 
describe activities ongoing activities denoted ac ac fd dm set possible ongoing activities mas ac set subsets ongoing activities simultaneously active environment 
theory discuss distinction influences reactions environment 
different notion dynamical state ferber muller weyns holvoet formal model situated multi agent systems 
state environment describes set consumptions consumption effect environment reserved particular actor 
consumption result reaction environment produced influences actor 
actor consumes consumption consumed effect absorbed actor food turned energy actor may simply hold element object picked consumption may affect actor state arm robot external force 
motivate different choice dynamical state comparison ferber muller model section 
dynamics system defined cycle function maps dynamical state dynamical state cycle cycle clarify activities invoked actors ongoing activities environment hand reaction environment activities hand split cycle function parts 
part composed sub functions exec apply exec represents activities invoked actors ongoing activities environment represented apply function 
second part single function react represents reaction environment simultaneously performed activity actors ongoing activities 
start exec typed follows exec jj exec jj jj fa set simultaneously acting actors set influences produced influence sets produced actors influence sets produced system 
influences produced application operators 
operators simultaneously acting actors composed parallel denoted jj operator 
operator applied denoted set operators available actors operators available system 
define operator tuple name expression variables appear conditions inf 
conditions set expressions determine operator name applicable 
inf denotes activity world application operator attempts realize 
operators composed parallel define resulting set influences simultaneous acting actors simply union influences produced different operators 
exec jj jj expresses execution operators invoked actors words state environment set actors consume subset consumptions say resulting reduced set consumptions produce set composed operators jj jj set influences effects ongoing activities environment induced apply function typed follows borrow notion consumption ferber introduced concept 
binary operator simply denotes subtraction sets operand minus operand operator analogously denotes addition sets 
weyns holvoet formal model situated multi agent systems apply jj apply jj jj set operators applied ongoing activities represents set influence sets produced environment application operators ongoing activities 
apply jj jj expresses application operators resulting ongoing activities environment fd current set ongoing activities putting words state environment produces set influences application set parallel composed operators jj jj operator ongoing activity activities invoked actors ongoing activities environment happen simultaneously combine influences resulting apply exec convenience relaxed definition function composition denotes function defined calculate results calculate definition represent combination activity invoked actors ongoing activities binary operator typed follows jj jj jj jj jj jj jj jj jj jj apply jj jj exec jj jj reaction environment simultaneously performed activity actors ongoing activities environment described react function typed follows react jj react jj jj denotes laws world 
laws describe state environment computed previous state produced influences 
laws defined tuples set conditions effects inf set set influences involved law collection possibly interfering influences originated execution set parallel composed operators 
conditions state representations environment parameterized boolean expressions 
term conditions hold apply effects effect induced law 
effects expresses results successful application law mas state changes effects actors experience 
note outcome effects non deterministic set concurrent actions law may specify random selection different possible outcomes 
operators laws composed parallel react jj jj expresses reaction environment simultaneously performed activity environment 
putting words state environment united sets influences produce section elaborate semantics parallel composition laws illustrated concrete set laws 
weyns holvoet formal model situated multi agent systems 
structural overview execution reaction cycle 
set parallel composed laws jj jj state environment add set consumptions say resulting updated set consumptions describe evolution dynamical system cycle react jj jj apply jj jj exec jj jj define evolution dynamical system sequence cycles 
cycle cycle function transfers dynamical state dynamical state produces new state environment new set consumptions 
twofold transfer result reaction environment execution set parallel composed operators jj jj invoked subset actors exist system application set parallel composed operators jj jj resulting ongoing activities environment state environment set consumptions set parallel composed laws world jj jj 
conclude section reflect model clarify respect proposed model differs model ferber muller 
obvious differences models definition dynamical state granularity groups synchronized agents 
discuss differences models perspective execution reaction cycle situated mass graphically depicted fig 

ferber muller model dynamical state composed influences 
dynamics mas expressed reaction environment set influences subsequently production new set influences state environment laws world 
execution reaction cycle runs point influences collected point influences collected indicated switch point model fig 

model start cycle initiated environment model takes environment centered view mas evolution 
fits synchronous evolution mas agent system produce new influence new cycle 
granularity synchronous acting agents ferber muller group agents mas 
agents act global pace influences agents cycle considered happen simultaneously 
weyns holvoet formal model situated multi agent systems model proposed dynamical state composed consumptions 
dynamics mas expressed subset consumptions production set influences environment subsequently reacts applicable laws updating state producing new set consumptions 
model execution reaction cycle runs point reactions calculated point reactions calculated indicated switch point model fig 

model actors take initiative start cycles model takes agent centered view mas evolution 
subtle difference ferber muller model model subsets actors consume consumptions independently run asynchronously execution reaction cycle 
model granularity synchronous acting actors subsets 
influences actors subset considered happen simultaneously different subsets act asynchronously 

model situated agents section describe architecture situated agent fits theory dynamical system discussed previous section 
theory notion actor concept process able act environment consume results actions 
section refine notion actor generic model situated agent 
observable behavior situated agent encapsulated entity capabilities 
consider agents memory seen generalization exclude model applicable purely reactive agents 
section integrate agent model model ongoing activities environment discuss section generic architecture situated mass start introducing number definitions ag fa agents mas identity fy set unique identities agent mas id ag function returns agent identity id set possible subsets identities agents percept set possible percepts set possible consumptions mas consumption consumed agent set consumptions consumed agent internal state set possible states set identities agents agent directly synchronized ag id ag id id set synchronization messages exchanged set possible synchronization messages mas operators available mas ag operators available agents mas ag operator agent ag ag set operators available definitions define situated agent tuple percept denotes perceptual input agent able perceive environment 
weyns holvoet formal model situated multi agent systems ag consumption memorization synchronization decision agent capable perceive neighboring environment 
expressed function typed follows sense interpret interpret sense interpret sense compound function 
sense produces representation local environment agent 
define demarcation mas 
marks scope agents able perceive environment 
depending domain fixed parameter agents function determines perceptual range agent particular capabilities state environment limited applied context agent interpret takes representation local environment produces percept agent 
perception situated agent capable consume effects environment 
consuming consumption expressed consumption function typed follows consumption identify consume consumption consume identify consume identify consumption compound function 
consumptions personalized consuming consumption requires mapping set consumptions agent consumes 
identify function uses set identities uniquely distinguishes agents mas 
personalized applied context agent memorization function allows situated agent register knowledge 
function typed follows memorization memorization memorization function takes arguments percept consumption actual internal state 
memorization produces new internal state 
extent agent uses percept consumption update internal state depends implementation memorization choice designer 
enable simultaneous actions situated agent capable set synchronization agents 
done synchronization function may specify region obstacle scope perceiving agent 
physical sensing naturally incorporates constraints software mass constraints modeled explicitly weyns holvoet formal model situated multi agent systems synchronization synchronization synchronization establishes synchronization agent identity belongs important design choice concerns way sets composed 
approach model synchronization natural consequence situatedness agents part agents decision mechanism see 
reflected fact composition set synchronized agents depends actual perception agents implementation synchronization module 
regional synchronization represents set agents directly synchronized 
synchronization achieved execution synchronization protocol exchange structured set synchronization messages protocol implemented synchronization module 
decision separate synchronization setup agent decision making motivated basic principle situated agents keep decision making simple avoid expensive reasoning select action reactive fashion actual situation 
essential capability agent decision making ability agents decide action executed 
functionality reflected model decision function decision ag decision decide agent uses percept consumption updated internal state 
decision results selection operator execution environment 
describe complete behavior situated agent behavior ag behavior memorization consumption decision synchronization behavior situated agent expressed follows internal state agent perception environment consumption situated agent updates internal state selects operator execution simultaneously set directly synchronized agents 

model ongoing activities environment section describes model ongoing activities environment 
contrary agents encapsulated entities capable performing actions ongoing activities simply operate environment evolving state environment 
agents ongoing activities produce influences subject modeled laws mas 
ongoing activities exist independently particular agent typically originate triggers invoked agents 
fore example ball rolls kicked agent pheromone starts weyns holvoet formal model situated multi agent systems dropped ant 
clearly approach generalized 
ongoing activities environment modeled independent agent intervention evolution environmental variables temperature 
describe ongoing activities environment definitions ac fd dm set possible ongoing activities environment set ongoing activities simultaneously operate environment ac ac operators ongoing activities mas ac ac set operators ongoing activity singleton introduce function operation returns operator particular ongoing activity environment operation ac ac operation depending state environment application operator ongoing activity returns set influences 
set empty operator applicable current state environment set contains influence instance particular ongoing activity 
elaborate application operators ongoing activities section 

model situated mas ready describe integral model situated mas accordance theory dynamical system discussed section integrates model situated agents ongoing activities environment described previous sections 
intuitively situated mas set situated agents perform simultaneous actions dynamic environment 
formally define situated mas tuple exec compose apply collect react cycle subsections successively discuss contributions activity mas agents contributions ongoing activities environment 
integrate contributions discuss reaction environment simultaneously performed activity system 
graphical overview integral formal model situated mass conclude discussion number open issues model 

contribution activity agents mas call set simultaneously acting agents set regional synchronized agents short region 
region denoted ag set possible regions mas 
equivalence class agents related relation ith 
ith equivalence relation set agents directly indirectly synchronized convenience op short operation 
weyns holvoet formal model situated multi agent systems fb ay agents directly synchronized id describe activity invoked region definitions set possible influences invoked environment ag set possible influences invoked agents ag influence invoked agent ag ag set possible influences invoked set influences invoked region fg ag id id ag set sets influences invoked regions exec function agent typed follows exec ag ag exec decision synchronization section defined exec representation activity invoked set simultaneously acting actors 
model situated mass split functionality parts 
exec denotes part activity invoked single agent influence operator selected parallel composed operators agents region belongs 
simultaneous activity agents situated mas may originate region 
different regions active time apart ongoing activities environment discuss section 
composition simultaneous activity agents represented model compose function 
denotes set regions act time environment set possible subsets regions mas 
denote agent belongs region compose typed follows compose ag compose fa aw compose composes influence sets region belongs composition region identity sets directly synchronized agents set agent detailed explanation region composition refer 
compose function removes consumptions consumed agents resulting intermediary set consumptions denoted strictly speaking domains selected influences directly synchronized agents consumptions restricted sets different agents convenience general sets possible subsets type 
weyns holvoet formal model situated multi agent systems 
contributions ongoing activities environment simultaneously activity invoked agents active regions number ongoing activities may produce influences environment 
describe activity invoked environment ongoing activities definitions ac set possible influences invoked ongoing activities ac ac set influence sets invoked ongoing activities ac ac set influences invoked ongoing activity set influences invoked ongoing activity ac set influences simultaneously invoked set ongoing activities op op ac set influence sets simultaneously invoked ongoing activities similar agents split simultaneous activity ongoing activities parts 
apply function expresses activity invoked ongoing activity typed follows apply ac apply operation apply produces set influences instance ongoing activity environment 
composition simultaneously performed ongoing activities environment represented collect function typed follows collect ac collect fd collect composes influence set ongoing activities system simply union influence sets produced ongoing activity 
reaction simultaneously performed activity environment mas model collect function responsible collecting influences ongoing activities environment compose function assembles influence sets active regions slightly modify operator combines influence sets resulting functions ac ag collect compose weyns holvoet formal model situated multi agent systems composition influence sets defined operator define react function situated mas 
react function expresses reaction environment simultaneously performed activity 
sets influences produced agents regions influences produced ongoing activities environment 
important notice activity agents region definition local interference actions agents different regions 
ongoing activities associated particular regions influence set ongoing activities potentially interfere influence active agent 
practice reaction environment simultaneously performed activity cycle calculated region combined set influences ongoing activities 
react typed follows react jj react jj jj react executes influence sets active regions ongoing activities mas state environment set consumptions parallel composed laws world jj jj 
results new state environment new set consumptions say set added intermediary set consumptions delivered compose function resulting set consumptions denoted conclude express evolution situated mas model dynamics agents environment cycle cycle react jj jj memorization collect apply operation compose exec decision synchronization consumption express dynamics situated mas evolution situated mas defined sequence cycles 
cycle cycle function transfers dynamical state dynamical state produces new internal states agents new state environment new set consumptions 
new internal states result memorization active agents new state environment new set consumptions result reaction environment composition parallel executed decisions agents active region collection applied operators ongoing activities environment previous dynamical state set parallel composed laws world 
gives overview integral weyns holvoet formal model situated multi agent systems 
graphical overview formal model situated mass model situated mass important notice evolution mas typically nondeterministic 
avoid overloaded expressions included non determinism model 
illustrate cause non determinism briefly look application laws model consider mas agents pick objects environment 
suppose neighboring agents simultaneously try pick object 
resolve concurrent actions suppose law mas determines case non deterministic choice object involved agents 
consequence actions agents mas evolves possible directions depending agents gets object 
kinds non determinism reconsider evolution mas say cycle evolution starts particular dynamical state transferred number possible new dynamical states 
dynamical state space mas grows cycle divergent tree evolution mas expressed model sequence cycles reflects trace tree 
module simply routes synchronization messages senders receivers 
take kind non determinism account example application discussed section 
weyns holvoet formal model situated multi agent systems 
open issues dealing time 
model evolution situated mas viewed state machine executes cycle simultaneously performed activity environment point time 
way model ensures conceptual simultaneity practice things happen sequentially single processor system 
respect practical implementation mass question arises reconcile conceptual simultaneous activity physical activity 
practical point view important problem mention briefly issues 
ferber muller model mapping conceptual simultaneity physical activity straightforward 
cycle agents mas decide action 
agents invoked influence cycle executed 
variant approach allow agents act cycles execute special null action concluded decision making 
way imitate asynchronous evolution mas 
order 
example approach robocup soccer server time updated discrete steps ms agents players allowed perform action cycle 
players acted time simply ignored 
simulator deals interfering actions players kick ball kicks applied ball resulting acceleration calculated 
approach may perfect robocup competition general solution simultaneous actions 
fact soccer server guarantees actions processed physical time slot ms treated happened 
offer support logical simultaneity actions 
reason actions simultaneously acting agents handled time network delays agents got little execution time sequential execution platform effects simultaneous actions agents taken account 
model mapping conceptual simultaneity physical activity complex 
agents act synchronously region agents different regions may active time 
practice mapping implemented different ways 
solution give agent mas fixed period time decision making execute regions concluded action selection 
contrary robocup soccer implementation discussed solution ensures simultaneous actions agents treated correctly influences executed region basis 
regional synchronization simultaneity actions established locality agents exactly matches radius actions different situated agents may interfere 
ensuring agent gets guaranteed slot time calculation requires dedicated scheduling infrastructure 
problem subject current research working group 
synchronization agents dynamics 
concerns quite complex problem synchronization agent activity dynamics environment 
problem cases ongoing activities environment associated physical time 
pheromone evaporation example implemented function physical time 
load computer system typically fluctuates 
consequence decline pheromone strength evolve proportionally available computation time agents 
kinds problems subject ongoing research 
sourceforge net downloads html weyns holvoet formal model situated multi agent systems direct communication 
model explicitly deal direct communication agents 
ferber messages transmitted time influences received perception 
decided integrate communication model way 
point synchronization messages actions pin model handle actions environment communicative acts agents pace 
demonstrated desirable 
ongoing research intends integrate direct communication model general way 

model applied section apply model situated mas simple example application 
introduce application 
define number operators laws 
follow number cycles possible evolution mas 
selected arbitrary regions active successive cycles different cycles focusing different kinds interactions 
operators laws state representations simple strips language model bound language representation language 

simple application fig 
depicts mas case illustrate model situated mass previous section 
take start activity example application depicted situation 
mas discrete dimensional environment agents live 
goal agents bring packets black squares place 
agents able pick put packet neighboring place places included 
neighboring agents transfer packets directly 
transfer requires simultaneous action agents agent carries packet pass packet accepting agent accept packet 
agent carry packet time 
furthermore allow agents carry packet push forward neighboring packet place 
road clear distance packet moves depends applied force friction environment 
moving packet bumps obstacle take simple approach moving packet 
packets agents places assumed obstacles moving packets 
exceptional case agent able catch moving packet stretches arms moment packet arrives position 
catch agent holds packet 
places contain packet agent carry packet 
agents step free neighboring place step places 
important property agents limited view environment 
example mas demarcation fixed agents defined view size illustrated agent fig 

view size marks range agents able perceive environment setup regional synchronization agents 
synchronization enables act simultaneously transfer packet 
represent state set formulas form predicate values 
initial dynamical state application denote defined follows weyns holvoet formal model situated multi agent systems 
initial situation mas application fa cg active region 
floc loc loc loc free free free free free free free carry carry friction fg fid pos hold fid pos fid pos fid pos hold definitions self explanatory 
note current set consumptions empty 

operators laws elaborate evolution mas give overview operators available agents ongoing activities environment laws world determine effects performing operators 
operators general definition operators defined section operator tuple applied representation language terms described follows name expression form variables appear conditions inf 
conditions state representations boolean expressions variables values 
inf term form parameters influence set variables values 
example application define operators agents walk dx fid pos lx free lx dx dx pickup fid pos lx hold lo jlo lo lx putdown dx fid pos lx hold fput dx push fid pos lx lo lo lx fid pos lx hold loc ly receive fid hold declare operators laws relevant explanation mas evolution example 
state denotes state hold denotes possible value particular domain 
weyns holvoet formal model situated multi agent systems clarify operators agents explain operator pickup example 
agent able pick packet conditions hold identity agent agent positioned location lx currently agent hold packet packet positioned location lo packet agent positioned lo lx 
conditions hold agent invokes influence pick lo lx environment agent performs attempt pick packet located lo lx denotes direction agent picks packet relative distance compared actual location 
note agent verify conditions internal state verification conditions includes information agent perceived environment 
ongoing activities environment define single operator fat lo speed packet located lo attempts move long speed 

laws representation language laws defined follows set conditions effects inf set set influences involved law collection possibly interfering influences originated execution set parallel composed operators 
conditions state representations environment boolean expressions variables values 
term conditions hold apply effects effect induced law 
effects set formulas expresses state changes consumptions agents 
additional effects denoted keyword add keyword rem refers effects remove existing state 
outcome effects non deterministic selection different possibilities 
selection denoted 
example application define laws simple laws 
step dx floc lx free lx dx loc lx free lx dx add loc lx dx free lx pick dx floc lx carry lx dx lo add free lo carry hold import dx floc lx carry lx dx dx add carry hold put fput dx floc lx carry free lx dx carry hold add lx dx deliver fput dx floc lx carry lx dx dx carry hold add press floc lx lo lo lx fadd speed move fat lo speed friction free lo lo free lo speed weyns holvoet formal model situated multi agent systems add free lo lo speed halt fat lo speed friction free lo lo free lo speed add free lo lo bump fat lo speed free lo free lo lo free lo speed add free lo lo block fat lo speed free lo speed joint laws 
transfer accept floc lx loc ly carry carry carry hold add carry hold catch accept fat lo loc lx speed dt dt lx lo free lx lo lo speed add free lo carry hold concurrent laws 
clash dx step dy floc lx loc ly lx dx ly dy free lx dx loc lx free lx dx add loc lx dx free lx loc ly free ly dy add loc ly dy free ly clarify laws explain joint law catch example 
catch simultaneously performed influences involved packet moving speed agent prepared accept packet 
catch succeeds conditions hold initial position packet lo agent located lx packet speed unit time dt speed packet moves distance lx lo original position lo agents position lx places initial position packet agent lo lx free 
conditions hold law applied packet moves starting position lo place free hands agent holds packet contrary ferber muller impose composition laws commutative 
result law non deterministic selection different outcomes advocate general requirement commutativity laws mass rigid 
propose laws applied ordered way 
ordering number influences involved law denoted notion level law 
application laws starts highest level laws 
law subset influences set simultaneously performed influences matches conditions law hold law applied corresponding subset influences removed set simultaneously performed influences 
subsequently procedure repeated remainder set simultaneously performed influences laws level 
expr start produces set condition terms substituted value expr start 
start resulting set empty 
weyns holvoet formal model situated multi agent systems matching laws level procedure repeated laws lower level 
influences matching compound law simple laws level applied 
note selection law level nondeterministically set influences involved different laws 
case typically occurs number laws deal different scenarios mas 
simple laws move halt bump block illustrate case 
laws influence move involved laws applicable selected non deterministically 
shown example classify laws kind interaction applicable simple laws concerning independent simultaneous actions 
classification increases readability laws serve guideline designers structure complex sets laws 
note example joint concurrent laws level simple laws level 
procedure apply laws put forward start tackle problem 
research necessary fully disentangle quite complex problem 

evolution mas starting initial situation section see follow number cycles potential evolution mas 
cycle regions agents active possible ongoing activities environment 

cycle ff fa cg fg cycle region active transfers dynamical state 
follow individual decision making agent region 
description see section 
fid pos hold fat free loc loc free carry fg synchronization fa bg fid pos hold decision fid pos loc loc free loc carry fg synchronization fb cg fid pos decision receive fid pos floc free loc free fg synchronization fc bg fid pos decision push weyns holvoet formal model situated multi agent systems 
fdg active region ftg ongoing activity 
cycle decides pass packet carries neighbor agent prepared accept packet 
agent decides push packet 
terms simultaneous actions perform joint actions actions independent agent action 
determine reaction environment 
receive push exec jj accept press accept press gg fg fg fg apply fg fg react press effects carry hold add carry hold speed hold add hold fid pos hold fid pos fid pos fid pos hold floc loc loc loc speed free free free free free free free carry carry friction hold add hold new situation application cycle executed depicted 

cycle ff fdg ftg second cycle region moving packet active 
acts asynchronously respect agents agent inside perceptual range 
fact implementation decision module assume selected action 
note update internal state agents percepts consumptions 
effects cycle assimilated perception consumption 
weyns holvoet formal model situated multi agent systems 
fa cg active region ftg ongoing activity 
decides deliver packet carries place 
packet moves initial speed place place 
due friction environment movement speed reduced 
skip detailed individual decision making agent look environment reacts application active operators 
exec jj fput gg fg hold add hold apply react move effects carry hold free speed add free speed hold fid pos hold fid pos fid pos fid pos hold floc loc loc loc speed free free free free free free free carry friction hold hold add hold simultaneous actions cycle independent actions 
interference action movement environment 
new situation application cycle executed depicted 

cycle ff fa cg ftg third cycle region agents active packet moves 
agent decides step place pick packet agent decide step weyns holvoet formal model situated multi agent systems 
fag fdg active regions ftg ongoing activity 

clearly leads nasty collision laws fortunately consequences agents 
effects result agents decisions moving packet walk walk exec jj step step step step gg hold add hold hold apply react move effects loc free free speed add loc free free speed fg fid pos fid pos hold fid pos fid pos hold floc loc loc loc speed free free free free free free free carry friction hold new situation application resulting execution cycle depicted 

cycle ffag ftg fourth cycle regions active second packet moving 
cycle picks new packet form place catches moving packet arrives position 
joint actions weyns holvoet formal model situated multi agent systems 
resulting situation mas application 
acts independently interaction packet determine effects actions environment perform exec apply react current dynamical state 
exec jj exec jj gg hold fg apply react import effects speed add carry hold free carry hold fadd hold hold fid pos fid pos hold fid pos fid pos floc loc loc loc free free free free free free free free carry carry carry friction fadd hold hold execution cycle conclude investigation evolution example application 
resulting finished situation application depicted 
evaluation model situated mass deals complex interactions situated mass 
interactions agents environment interactions agent weyns holvoet formal model situated multi agent systems ongoing activity environment interactions different ongoing activities environment 
model keeps balance fundamental properties situated agents autonomy agents decide act ability perform simultaneous actions 
model simultaneous actions supported regional synchronization 
contrary centralized synchronization regional synchronization impose centralized control 
regional synchronization agent equipped local synchronizer responsible setup synchronization locally neighboring colleagues candidates direct interaction 
reviewing execution reaction cycle depicted fig summarize ferber muller model agents run execution reaction cycle synchronously model subsets locally synchronized agents run cycle asynchronously 
models support simultaneous actions models differ granularity simultaneously acting groups 
uller model agents mas act simultaneously model agents act simultaneously region 
exchange decentralization regional synchronization requires infrastructure implies computational commutative costs 
examined matter detail 
respect scalability cost calculate reactions set influences model depends size regions 
apart influences produced ongoing activities environment influences agents potentially interfere region 
reduces average cost cost ferber muller model see section rs population agents mas rs region size average number agents region 
composition regions designed activity mas localized model results better performance scalability 
side effect regional synchronization environment responsible composing regions synchronized agents 
model functionality achieved compose module 
designing model individual situated agent took approach balance modeling fundamental aspects situated agents guaranteeing maximal flexibility 
integrated functionality memorization agent model seen generalization 
agents memory memorization module simply ignored 
topic concerns heterogeneity agents mas 
model pronounce internal implementation separate agent modules 
model explicitly supports heterogeneity different levels perceptual capabilities kind consumptions agent able consume capabilities memorize set operators agent able execute 
comparison ferber muller model complexity model higher 
directly consequence different approach result adopted level abstraction 
fact numerous aspects implicitly ferber muller model explicit model 
examples explicitness synchronization explicit modeling ongoing activities environment modeling demarcation perception identification agents integration personalized consumptions 
conclude point interested reader elaborates concrete implementation discussed model 

model situated mass regional synchronization 
model formally describes architecture situated agents environment agents live 
weyns holvoet formal model situated multi agent systems model supports simultaneous actions agents ongoing activities environment happen independently agent intervention evaporation pheromone 
model builds theory influences reactions influences developed ferber muller 
evolution mas expressed sequence cycles 
cycle dynamical state transferred new dynamical state 
model ferber muller dynamical state composed state influences 
model takes environment centered point view imposes agents produce new influences cycle mas evolution agents act global pace 
contrary model takes agent centered point view 
model dynamical state composed state consumptions 
agents take initiative act starting perceiving local environment consuming consumption 
order act simultaneously agents synchronize 
introduced regional synchronization enables agents synchronize colleagues region 
synchronization locally established agents tuned scope interactions agents 
composition regions designed results comparison centralized synchronization improved autonomy agents better scalability mas 
applied model simple mas application 
showed model instantiated practice 
illustrated possible evolution mas means different kinds interactions including interaction agent ongoing activity environment 
employ model research group basis engineering common platform situated mass experiences formalized approach point advantages model explicitly rigorously specifies core concepts situated multi agent systems decomposition precise semantics enabling refinement implementation model serves excellent framework communication discussion 
number topics model subject 
currently general solution deal parallel composition laws investigate integrate direct communication model general way 
topics research concern timing issues synchronization agent activities ongoing activities environment mapping conceptual simultaneous activity physical activity 

acknowledgments members task force labs leuven valuable discussions contributed 
word appreciation goes frank elke useful comments 
anonymous reviewers accurate remarks initial version 
critical comments account able improve significantly 
allen ferguson actions events interval temporal logic 
journal logic computation special issue action processes 
weyns holvoet formal model situated multi agent systems babaoglu meling anthill framework development agent peer peer systems 
proceedings th international conference distributed computing systems vienna austria 
bonabeau snyers kuntz theraulaz routing telecommunications networks ant agents 
bonabeau theraulaz deneubourg adaptive task allocation inspired model division labour social insects 
biocomputing emergent computation world scientific 
boutilier brafman partial order planning concurrent interacting actions 
journal artificial research access foundation morgan kaufmann 
bratman israel pollack plans resource bounded practical reasoning 
computational intelligence 
brooks intelligence representation prints workshop foundations artificial intelligence ma 
brooks intelligence reason mit ai lab memo 
deneubourg aron goss pasteels random behavior amplification processes number participants contribute foraging properties ants 
physics 
dorigo gambardella ant colony system cooperative learning approach traveling salesman problem 
ieee transactions evolutionary computation 
drogoul ferber multi agent simulation tool modeling societies application social differentiation ant colonies 
decentralized elsevier north holland 
ferber un de action pour les systemes multi agents 
sur les systemes multi agents intelligence artificielle 
ferber multi agent systems distributed artificial intelligence isbn addison wesley great britain 
ferber muller influences reaction model situated multiagent systems 
proceedings th international conference multi agent systems aaai press japan 
fikes nilsson strips new approach application theorem proving problem solving 
artificial intelligence 
genesereth nilsson logical foundations artificial intelligence morgan kaufmann san mateo ca 
griffiths luck cooperative plan annotation trust 
mcburney wooldridge eds workshop notes uk workshop multi agent systems liverpool 
journal artificial societies social simulation 
soc surrey ac uk html kowalski sadri unified agent architecture combines rationality reactivity 
proceedings international workshop logic databases san italy lncs 
factors actors computational sociology agent modeling 
annual review sociology 
maes modeling adaptive autonomous agents 
artificial life journal mit press cambridge ma 
weyns holvoet formal model situated multi agent systems maes situated agents goals 
ed 
maes designing autonomous agents press cambridge ma 
parunak go ant engineering principles natural agent systems 
annals operations research 
parunak baker clark agent architecture manufacturing requirements agent system design 
proceedings workshop agent manufacturing minneapolis mn 
rao agentspeak bdi agents speak logical computational language 
proceedings th european workshop modeling agents multi agent world lnai volume 
review multi agent systems distributed artificial intelligence ferber 
volume issue see 
sauter parunak ants supply chain 
proceedings workshop agent decision support managing internet enabled supply chain agents seattle wa 
sauter matthews parunak brueckner evolving adaptive pheromone path planning mechanisms 
proceedings international conference autonomous agents multi agent systems bologna italy 
holvoet individual model emergent task allocation 
proceedings adaptive agents multi agent systems london uk 
steels cooperation distributed agents self organization 
proceedings european workshop modeling autonomous agents multi agent world elsevier science publishers holland 
wavish representing multi agent worlds 
able technical note tn philips research laboratories 
weyns holvoet look talk synchronization scheme situated multi agent systems 
mcburney wooldridge eds workshop notes uk workshop multi agent systems liverpool 
weyns holvoet regional synchronization simultaneous actions situated multi agent systems 
proceedings th international central eastern european conference multi agent systems prague czech republic lnai 
weyns holvoet model simultaneous actions situated multi agent systems 
german conference multi agent system technologies mates erfurt germany lnai 
wooldridge multiagent systems isbn 
john wiley sons england 
wooldridge jennings 
intelligent agents theory practice 
knowledge engineering review 
