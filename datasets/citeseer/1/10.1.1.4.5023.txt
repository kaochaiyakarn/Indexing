model checking knowledge time local propositions cooperative adversarial systems wiebe van der hoek michael wooldridge van department computer science university liverpool liverpool zf 
wiebe csc liv ac uk 
model checking approach automatic verification finite state systems focused predominantly system specifications expressed temporal logic 
distributed systems community logics knowledge epistemic logics advocated expressing desirable properties protocols systems 
range logics combining temporal epistemic components developed purpose 
model checking problem temporal logics knowledge received comparatively little attention 
address problem 
brief survey relevant issues literature introduce temporal logic knowledge halpern vardi logic ckln 
develop approach ckln model checking combines ideas interpreted systems semantics knowledge logic local propositions developed engelhardt approach local propositions provide means reduce ckln model checking linear temporal logic model checking 
introducing exploring ideas underpinning approach case studies bit transmission problem leadership election dining cryptographers spin establish temporal epistemic properties system implemented promela 
keywords model checking verification knowledge time epistemic temporal logic bit transmission leadership election dining cryptographer spin kluwer academic publishers 
printed netherlands 
knowledgetimefinal tex keywords model checking verification knowledge time epistemic temporal logic bit transmission leadership election dining cryptographer spin 
mid modal logics knowledge increasingly deployed formal specification distributed systems precise concept process knows 
temporal logics knowledge temporal logics enriched modal knowledge operators widely reasoning distributed systems 
model checking approach automatic verification finite state systems focussed predominantly system specifications expressed temporal logic linear temporal logic case spin branching temporal logic case smv relatives 
model checking problem temporal logics knowledge received comparatively little attention 
halpern vardi proposed model checking alternative deduction logics knowledge long ago proposal focussed logics temporal component 
ron van der meyden studied complexity model checking problem particular class essentially infinite state systems knowledge time showed problem complex pspace complete best case undecidable worst class 
address problem model checking approach showing finite state systems satisfy specifications expressed logics combine temporal knowledge components 
remainder organised follows 
section shortly elaborate modal logics knowledge readers familiar epistemic logic literature may wish skip section 
section introduce temporal logic knowledge halpern vardi logic ckl 
develop approach ckl model checking combines ideas interpreted systems semantics knowledge logic local propositions developed engelhardt 
approach ckl model checking reduced linear temporal logic model checking 
introducing exploring ideas underpinning approach case studies bit transmission problem leadership election dining cryptographers spin establish temporal epistemic kluwer academic publishers 
printed netherlands 
knowledgetimefinal tex properties promela system 
case studies bit transmission leadership election scenario examples cooperative systems sense want prove positive epistemic properties system property form eventually agent comes know 
systems argue local propositions approach works 
third example wish prove negative epistemic property property form agent comes know 
case proving existential property lines exists local proposition 
case proving universal property need quantify local propositions order prove absence knowledge 
consequence argue local propositions approach establish epistemic properties cooperative systems usually straightforward approach suited adversarial systems 
conclude comments issues research 

background model checking techniques originated widely understood technique automatically verifying finite state systems satisfy formal specifications 
formal specifications commonly expressed formulae branching time temporal logic ctl case smv model checker relatives formulae linear temporal logic case spin 
comparatively little attention model checking community epistemic logic modal logic knowledge 
epistemic modal logics widely recognised having originated jaakko hintikka philosopher early showed certain modal logics formally capture intuitions nature knowledge 
recognised epistemic logics important role play theory distributed systems 
particular demonstrated epistemic logics formally express desired behaviour protocols 
example specifying communication protocol quite natural wish represent requirements process knows process received packet send packet 
epistemic logic requirements expressed formally naturally 
key reasons modal logics knowledge achieved prominence discovery halpern colleagues mid epistemic logics natural interpretation terms states processes commonly called agents knowledgetimefinal tex distributed system 
model received widespread interest known interpreted systems model 
addition interest epistemic logics specification communicating systems interest knowledge logics directly programming systems 
knowledge program general form case 
case intuitive interpretation program collection rules left hand side rule represents condition expressed epistemic logic agent knows 
condition satisfied corresponding action program statement executed 
researchers take view programs best understood specifications systems knowledge programs form directly executed 
studies computational complexity automatically synthesising executable programs knowledge programs 
despite level interest logics knowledge specifying communicating systems comparatively little model checking logics 
somewhat prior current growth interest model checking halpern vardi proposed model checking alternative deduction modal logics knowledge 
showed model checking problem multi agent logics knowledge tractable speculated approach wider applications community best knowledge pun intended topic reported 
computational complexity satisfiability validity problems temporal logics knowledge studied exhaustively halpern vardi similar studies appear carried respect model checking 
closest familiar vardi investigated problem concrete program said implement knowledge program 
showed general case knowledge program contain knowledge tests temporal modalities complexity problem coincided model checking problem linear temporal logic pspace complete see 
knowledgetimefinal tex closely related van der meyden investigated model checking problem small class temporal knowledge logics agents assumed perfect recall 
established model checking problem class varies pspace complete best case undecidable worst 
van der meyden investigate practical model checking knowledge time 
rao george investigated model checking problem range logics combining temporal ctl modal components study implement techniques developed consider logics knowledge 
benerecetti giunchiglia developed techniques similar temporal modal logics logics unusual non kripke semantics 

temporal logic knowledge concerned modelling systems composed multiple agents independently operating process 
ag 
denote set agents 
assume agent ag set local states 
agent local state contains information required completely characterise state agent value local variables value program counter 
particular information available agent determined local state 
state system moment characterised tuple 
local state agent moment 
denote reachable global states system set states system may possibly enter legal computation sequence 
notice explicitly introduced environments quite common literature simplicity assume environment modelled agent system 
run function associates natural number global state 
idea run represents possible computation system general system may number possible runs say system set runs denote system 
run time point point point defines global state 
denote th component tuple 
local state agent run time knowledgetimefinal tex conventional practice associate agent ag equivalence relation set points 
say indistinguishable point view alternatively carries exactly information 
relation give semantics knowledge modalities ckl give semantics common knowledge modality introduce relations set ag agents define relation define relation transitive closure model interpreted system ckl pair system valuation function gives set primitive propositions true point pp 
notice model system set infinite runs may sight appear odds notion finite state systems model checking generally applied 
fact contradiction 
kripke structure ctl logic total time relation initial states obtain interpreted system unwinding relation starting initial states obtain set infinite runs 
syntactically ckl propositional temporal logic augmented indexed set modal operators agent ag common knowledge operators ag formula read agent knows formula means common knowledge 
formulae constructed set 
primitive propositions 
language contains standard propositional connectives implies 
temporal dimension take usual set time connectives eventually weak 
set ckl formed formulae ckl defined grammar knowledgetimefinal tex ckln true ckln ckln ckln ckln ckln ckln ckln ckln ckln ckln ckln ckln ckln 
ckln 
ckln 
semantics ckln true logical constant truth element primitive propositions negation disjunction ag agent knows ag common knowledge semantics ckl satisfaction relation ckln holds pairs form interpreted system point formulae ckl read ckln satisfied equivalently true point 
rules defining ckln 
semantic rules temporal connectives remaining temporal connectives introduced abbreviations follows 
true remaining propositional connectives assumed defined terms notice ckl expressive language 
particular language possible express fact statement true knowledgetimefinal tex states interpreted system play part interpretation formula 
see done define universal modality defined maximal solution fixed point formula cag 
illustrate properties define reachability relation 
say point directly reachable written agent ag define reachability relation transitive closure 
proposition 
interpreted system points ckln 
ckln 
proof assume ckln 
exists sequence points 


agent ag proof induction precisely show ckln ckln 
inductive step cases consider corresponding cases definition straightforward 
true points play part evaluation formulae 
linear temporal logic propositional logic consider language logic obtained ckl omitting knowledge common knowledge modalities get linear temporal logic ltl see 
formula ltl interpreted respect points interpreted systems ckl note knowledgetimefinal tex interpretation ltl formula depend run interpreted 
truth falsity ltl formula interpreted point depend run dependent runs case knowledge modalities express properties runs 
write ltl indicate ltl formula satisfied point ltl serves ltl satisfaction relation 
refer subset ltl obtained permitting temporal logic connectives propositional logic 
local propositions introduce notion local proposition 
local propositions play important role reduction ckl model checking ltl model checking 
agent local proposition formula propositional logic interpretation points equivalence class induced relation 
formally propositional logic formula said local points ckln ckln understand idea local proposition assume loss generality local state agent tuple local variables 
value time 
course exactly state conventional computer process indexed set 
primitive propositions assumed form part vocabulary ckl language ag note need mutually disjoint possible variables shared agents variable appears state agent requires addition semantic constraint described 
assume obvious interpretation local variables bit value state 
variable shared agents require variable value inside agents system state requirement ensures valuation function give unique defined value shared variables 
straightforward show proposition 
formula propositional logic containing variables local 
proof immediate fact 
knowledgetimefinal tex idea local propositions relate semantic definition knowledge syntactic global state verifying local proposition 
extend notion local proposition sets agents 
set ag agents propositional formula say local local 
prove immediate analogue proposition proposition 
formula propositional logic containing variables shared agents local 
proof need show depends shared variables ckln ckln 
assume 
sequence points 
agent 
definition local state particular shared variables values 
formula depending values interpretation 
ckln ckln 
addition show proposition 
interpreted system points local proposition 
ckln ckln 
proof assume 
exists sequence points 
agent 
local local 
definition local ckln ckln 
ckln ckln 

ckl model checking ltl model checking model checking problem ckl follows 
interpreted system formula ckl return set points satisfied set knowledgetimefinal tex ckln 
problem practical model checking problems invariant properties true state system clearly way practical model checker able enumerate set 
reason generally concerned slightly simpler version problem 
refer model checking problem ckl mean problem determining interpreted system formula formula true initial state run ckln 
say realises satisfies property 
interpreted system ckl formula write stand fact realises ckln 
main idea model checker ckl reason principle implemented 
available model checker linear temporal logic ltl example form spin 
spin takes input system described promela language formula propositional ltl checks formula satisfied state run system 
run fails satisfy formula reports run counter example 
model checking problem spin solves follows 
system formula ltl determines ltl 
ltl formula system write mc ltl indicate realises mc ltl ltl 
turn main ideas underpinning article show ckl model checking reduced ltl model checking 
knowledgetimefinal tex approach takes inspiration logic local propositions llp 
llp modal logic single universal modality nec allows quantification propositions 
formula nec llp means true states 
llp collection quantifiers agent allow quantification propositions local agent 
intuition proposition local agent able determine truth locally available information information available state 
key insight quantifiers define knowledge modalities 
example nec agent knows proposition local true true true 
proved definition knowledge corresponds conventional terms kripke structures accessible worlds 
show ideas considering model checking problem ckl suppose want determine property true system want determine suggests approach problem 
order show find proposition local predicate state mc ltl notice formula model checked components 
corresponds structure original input formula knowledge modalities replaced propositions 
second component represents constraint invariant hold 
reduced ckl model checking problem ltl model checking problem ltl model checking tools available spin suggests partially automate process model checking ckl formal details formal details reduction approach 
consider just model checking statement form reduced ltl model checking 
define function lp takes argument interpreted system ltl formula returns local proposition globally implies knowledgetimefinal tex definition lp 
lp local proposition mc ltl ltl false formula exists 
lp say serves local proposition 
aside note lp function similar spirit sound local predicate function engelhardt 
show 
proposition 
interpreted system point ltl formula lp 
ckln ltl proof left right 
immediate definition lp 
right left 
need show ltl implies ckln 
definition lp know ltl addition mc ltl 
mc ltl points particular ltl 
local ltl ltl ltl ckln 
way extend function lp sets agents 
ag define lp lp local proposition mc ltl ltl false formula exists 
result proved 
proposition 
interpreted system point ltl formula lp 
ckln ltl proof proposition making proposition 
knowledgetimefinal tex suppose ltl formula establish mc ltl 
case invariant system true states reachable possible computation 
immediately conclude 
proposition 
interpreted system ltl formula mc ltl 
point ckln 
route model checking subset ckl formulae ltl model checking faced problem determining ckln attempt find lp check ltl 
notice finding local proposition require solving ltl model checking problem mc ltl 
notice approach deal nested knowledge operators 
see example section 

case studies section show ckl model checking technique applied case studies 

bit transmission problem case study bit transmission problem 
adapt discussion problem pp 
bit transmission protocol studied context epistemic logic halpern zuck 
basic idea agents sender receiver communicate unreliable communication medium 
medium may delete messages message arrive recipient message correct 
assumed environment satisfies kind fairness property message sent infinitely eventually arrives 
sender sequence bits 
desires communicate receiver receiver receives bits prints 
goal derive protocol satisfies safety requirement receiver prints incorrect bits liveness requirement bit eventually printed receiver 
obvious solution problem involves sending acknowledgment messages indicate message received 
halpern zuck key insight recognise acknowledgment message knowledgetimefinal tex natural number variable natural number variable sender true read send kr send kr krk kr sender receiver kr set true write send krk kr send kr kr receiver 
bit transmission protocol 
fact carries information knowledge state sender message 
motivated development knowledgebased protocol 
obtaining bit sender transmits receiver 
point knows message may deleted environment 
continues transmit bit knows bit received 
point receiver knows value bit transmitted sender knows receiver knows value bit receiver know acknowledgment received 
sender repeatedly sends second acknowledgment receives back third acknowledgment receiver receives acknowledgment starts transmit bit 
receiver receives bit indicates final third acknowledgment received 
pseudo code version protocol pp 
note write shorthand value bit 
kr means receiver knows value bit knowledgetimefinal tex demonstrate ideas concrete setting consider promela code simplicity assume message delivery guaranteed 
complicated version may add deletion errors having process steal messages knowledge properties specific points program labels see 
code sender receiver agents main variable declarations 
initialisation code unremarkable subtle exception 
suppose initialise send array bits transmitted straightforward assignment statement 
array remain fixed execution program values bits array common knowledge agents system 
get problem exploit spin non deterministic execution mechanism 
macro initial variable name assigns random sic bit define initial fi macro initialise send recv arrays init process ensuring values arrays may initially di erent values di erent computations 
goal protocol eventually values recv array values initially send array 
general form properties prove follows program label unary predicate means program counter agent instruction labelled 

predicate way common practice reasoning programs temporal logic see pp 
spin remote mechanism define 
predicates 
property prove receiver state send acknowledgment knows value bit received 
bt interpreted system bit transmission problem assignment clear name atomic propositions 
want verify bt knowledgetimefinal tex define ack kr define ack kr define ack krk kr chan int outward sender chan int outward receiver local int send message sent local int recv message received int count sender bit count int count receiver bit count proctype sender count printf sender sends bit count send count ack ack ack count count break od proctype receiver count recv count printf receiver receives bit count ack ack ack count count break od 
bit transmission protocol promela message delivery guaranteed bt ckln kr recv count send count immediately translates bt bt ckln knowledgetimefinal tex bt ckln kr recv count send count deal find local proposition recv count send count serve output function lp claim candidate 
recall definition order conclude lp bt check conditions local obvious label 
second condition mc ltl bt generate spin ltl claim recv count send count follows 
define propositions represent ckl propositions respectively 
define receiver define recv count send count property checked written spin ltl formula negate claim verified claim conventional manner spin ltl claims 
come third condition bt ltl 
course depends particular note virtue dealing satisfy 
eliminated epistemic modalities reduced problem fact bt bt ltl recv count send count equivalent bt bt ltl recv count send count definition mc ltl gives mc ltl bt recv count send count summarising candidate local proposition recv count send count checking local ii mc ltl bt recv count send count 
observe returned lp bt ltl show corresponding property sender sender label send ack message knows receiver knows value bit sent 
knowledgetimefinal tex kr recv count send count notice nested knowledge formula 
deal find local proposition recv count send count 
note take knows recv count send count position know change just sends 
checked similar way done 
reduces problem checking checking local proposition send ack waiting 
checking reduces finding local propositions ltl checking macro define sender define receiver property easily represented checked spin ltl formula exactly way check property krk kr recv count send count give example proving absence knowledge 
suppose agent label case bits recv array initially assigned essentially random values 
may bits correct sense match send necessarily case kr recv count send count formula invalid system single run system satisfies property knowledgetimefinal tex atr recv count send count property directly encoded checked spin 

leadership election protocol leadership election protocol certain number asynchronous communicating processes arranged circular manner 
communication occurs neighbours 
processes program di er having distinct initial number stored local memory 
objective process find maximum numbers 
process largest number called leader 
unidirectional solution problem algorithm sends messages direction circle 
unidirectional solution requiring log messages exists 
algorithm implemented promela 
implementation part example programs spin distribution 
versions exist 
program processes initialisation procedure di erent 
version initial numbers assigned way 
version initial numbers assigned nondeterministically 
model checking knowledge initialisation procedure needed 
spin distribution contains sample properties problem 
examples suggested runs eventually leader run leader elected runs eventually leader elected runs leader leader 
requirements necessary requirements set su cient characterizing solution 
obvious requirement instance right leader chosen 
right leader process largest initial number 
consider processes protocol communicating agents common goal gaining knowledge leadership 
way looking protocol suggested implementation boolean variable knowledgetimefinal tex occurs 
apparently variable indicates presence knowledge 
ckl evaluate additional properties protocol 
ltl example properties described hold exactly leader chosen 
interested knowledge processes protocol finishes 
particular wish prove run eventually processor knows maximum number modified code provided slightly 
interesting variables local specific process 
spin allow variables requirements 
replaced local variables global arrays variables process 
change ect implementation possible refer variables requirements 
modified implementation shown 
order election protocol correct right leader chosen 
right leader case process highest initial value variable ini 
number proposition denote highest number 
numbers assigned run test run 
expresses certain moment remains true 
process 
ckl property wish check processes behave su cient check property 
initialisation procedures implementations provided number highest number 
true trivially known agents initialisation procedures little 
test algorithm agents new initialisation procedure assigns nondeterministic way ranges restriction agents necessary complete model checking reasonable time 
initialisation procedure 
list formula prove local proposition properties check respectively 
ranges initialisation see smallest greatest number 
fact eventually agent knows highest number nontrivial 
knowledgetimefinal tex byte nr leaders define number processes ring define xn byte mtype winner chan mtype byte byte ini byte nr 
declarations leadership election protocol promela 
prove ckl property local proposition nr check mc ltl mc ltl propositions defined follows 
note initialisation procedure process start gets process number 
agent referred node 
proposition expresses process label lost label leader 
define ini ini ini ini define ini ini ini ini define define node lost node leader define nr summary verified knowledge properties stronger temporal properties provided example 
note order meaningful verification new initialisation procedure needed general needs non deterministic initialisation procedure order verify knowledge properties certain facts trivially known agents 
knowledgetimefinal tex proctype node chan byte byte maximum bit active know winner leader xr xs start printf msc nr active nr maximum nr nr know winner winner nr fi nr fi nr active nr maximum maximum active fi nr fi winner nr nr lost printf msc lost leader printf msc leader leader nr leaders assert nr leaders fi know winner winner nr fi break od 
agent definition leadership election protocol promela 
knowledgetimefinal tex init byte proc atomic pick number assigned fi non deterministic choice ini ini ini ini ini ini ini ini ini ini ini ini works fi assigned numbers break od proc proc run node proc proc ini proc proc proc proc break od 
init process leadership election protocol promela 

dining cryptographers second case study example important emerging class applications epistemic logic proving knowledge properties protocols 
cryptographers sitting dinner favorite star restaurant 
waiter informs arrangements hotel bill paid anonymously 
cryptographers paying dinner nsa national security agency 
cryptographers respect right 
tex payment wonder nsa paying 
resolve uncertainty fairly carrying protocol cryptographer flips unbiased coin menu cryptographer right see outcome 
cryptographer states aloud coins see flipped lefthand neighbor flipped fell side di erent sides 
cryptographers payer states opposite sees 
odd number di erences uttered table indicates cryptographer paying number indicates nsa paying assuming dinner paid 
cryptographer paying learns utterances cryptographer implementation dining cryptographer problem 
obvious inspecting code label reached 
instance number messages sent expected match deadlock occur 
move knowledge properties verified property 
gives confidence correctness implementation 
verify agents learn cryptographers pays 
verify formulas 
verify agent agents play essentially role protocol 
order prove formula find local proposition description solution suggests parity announcements 
corresponds proposition sum implementation 
formulas common proposition sum proof formula 
formula verified spin 
sum sum verification second property similar 
local proposition sum ltl formulas 
sum sum knowledgetimefinal tex harder verify agents learn pays case cryptographers pays 
verify property 
pays problem show local state agent agent certain agent paying 
supply useful local proposition show local proposition exists 
done verifying single ltl property 
verify property local state agent 
agent access data announcements pays coin flips 
introduced propositions possible combination announcements flip flip combination coin flips coins known agent 
proceed falsify statement 
flip pays model checker report formula hold 
run local state agent agent pay proves local state agent know agent paid 
order draw local state agent model check formula local state agent 
example verify formulas 
remaining formulas 
flip pays flip pays flip pays flip pays flip pays flip pays flip pays 
flip pays flip pays flip pays flip pays process means scripting language 
script calculates local variables possible combinations knowledgetimefinal tex input system input formula kx 
vn local variables 
vn dom 
vn return false return true 
procedure proving ignorance variables values 
formulas verified possible reason local state unreachable 
suppose instance flip pays falsified 
case check flip 
second formula true local state unreachable formula ignored 
verification second formula fails counterexample original knowledge formula 
algorithm pseudocode procedure 
notice dining cryptographers example adversarial system sense goal prove absence knowledge opposed presence knowledge case bit transmission problem 
need script check combinations local propositions suggests local propositions approach suited systems 

concluding remarks model checking approach automatic verification focussed exclusively specifications expressed temporal logic 
little attention temporal epistemic logics logics proven useful widely advocated specification protocols 
considered model checking problem logics 
introduced halpern vardi known temporal epistemic logic ckl demonstrated ideas interpreted systems paradigm logic local propositions possible reduce ckl model checking ltl model checking 
gave case studies bit transmission problem leadership election protocol dining cryptographers problem implemented promela showed knowledgetimefinal tex define number cryptographers bool bool random bool bool chan ing bool chan outg bool proctype cryptographer chan bool pays pays pays pays fi active proctype main byte random false random true fi false break od true true true skip fi run cryptographer ing outg ing ing random ing random outg break od skip 
dining cryptographers promela 
knowledgetimefinal tex define define define define define define define define define flip random random define flip random random define flip random random define flip random random define pays define pays define pays define pays pays pays define main define sum 
propositions dining cryptographers 
desirable temporal epistemic properties system proved spin 
engelhardt suggested local propositions similar manner implementing knowledge programs 
main limitation approach extensive model checking verification process requires input human verifier obtain local propositions reducing ckl specification ltl 
direct implementation ckl model checking extension refinement spin desirable 
obstacles building system pure ltl formulae ckl formulae express properties multiple runs 
moment believe approach er theoretically founded practically valuable verifier desires check epistemic temporal properties systems 
extent interest epistemic logic applications specification communicating systems believe approach potentially valuable 
step investigate theoretical foundations particular discover extent approach applicable 
plan extend ideas knowledge programs determine classes programs local propositions needed easily determined 
model checking verify programs implement knowledge programs obvious application 
role local propositions especially contexts di erent knowledgetimefinal tex distributed systems best knowledge explored 
supported uk epsrc project gr verifiable languages protocols multiagent systems european commission ist programme project ist sustainable information ecosystems 
alessio ron van der meyden gave detailed helpful comments preliminary draft 
shorter preliminary version published th international spin workshop model checking software april grenoble france 

benerecetti giunchiglia serafini 
model checking algorithm multiagent systems 
muller singh rao editors intelligent agents lnai volume 
springer verlag berlin germany 

chaum 
dining cryptographers problem unconditional sender recipient untraceability 
journal cryptology 

clarke grumberg peled 
model checking 
mit press cambridge ma 

dixon fisher wooldridge 
resolution temporal logics knowledge 
journal logic computation 

dolev maria rodeh 
log unidirectional distributed algorithm extrema finding circle 
journal algorithms 

emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume formal models semantics pages 
elsevier science publishers amsterdam netherlands 

engelhardt van der meyden moses 
knowledge logic local propositions 
proceedings conference theoretical aspects reasoning knowledge tark pages evanston il july 

fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge ma 

fagin halpern moses vardi 
knowledge programs 
distributed computing 

goldblatt 
logics time computation csli lecture notes number 
center study language information ventura hall stanford ca 
distributed chicago university press 
knowledgetimefinal tex 
halpern vardi 
complexity reasoning knowledge time 
lower bounds 
journal computer system sciences 

halpern vardi 
model checking versus theorem proving manifesto 
lifschitz editor ai mathematical theory computation papers honor john mccarthy pages 
academic press london england 

halpern zuck 
little knowledge goes long way knowledgebased derivations correctness proofs family protocols 
journal acm 

hintikka 
knowledge belief 
cornell university press ithaca ny 

holzmann 
design validation computer protocols 
prentice hall international hemel england 

holzmann 
spin model checker 
ieee transactions software engineering may 

manna pnueli 
temporal logic reactive concurrent systems 
springer verlag berlin germany 

manna pnueli 
temporal verification reactive systems safety 
springer verlag berlin germany 

mcmillan 
symbolic model checking 
kluwer academic publishers boston ma 


ch 
meyer van der hoek 
epistemic logic ai computer science 
cambridge university press cambridge england 

rao george 
model theoretic approach verification situated reasoning systems 
proceedings thirteenth international joint conference artificial intelligence ijcai pages chambery france 

van der meyden 
model checking knowledge time systems perfect recall 
proceedings conference foundations software technology theoretical computer science lncs volume pages 
springer verlag berlin germany 

ron van der meyden 
finite state implementations knowledge programs 
proceedings conference foundations software technology theoretical computer science volume lncs pages 

ron van der meyden 
knowledge programs complexity perfect recall finite 
shoham editor proceedings sixth conference theoretical aspects rationality knowledge pages renesse holland 
de 

vardi 
implementing knowledge programs 
proceedings sixth conference theoretical aspects rationality knowledge tark pages de netherlands 

vardi 
branching vs linear time final showdown 
margaria yi editors proceedings conference tools algorithms construction analysis systems tacas lncs volume pages 
springer verlag berlin germany april 

wooldridge dixon fisher 
tableau proof method temporal logics knowledge belief 
journal applied non classical logics 
knowledgetimefinal tex knowledgetimefinal tex 
