zone balancing peer peer networks analysis random node join xiaoming wang zhang li loguinov computer science department texas university college station tx usa cs tamu edu balancing peer peer graphs including zone size distributions important topic peer topeer research :10.1.1.132.9448:10.1.1.14.2448:10.1.1.14.2448
bring analytical understanding various peer join mechanisms study zone balancing decisions initial sampling peer space affect resulting zone sizes derive asymptotic results maximum minimum zone sizes hold high probability 
categories subject descriptors communication networks network protocols general terms algorithms performance theory keywords peer peer load balancing modeling balls bins 
latest peer peer networks organize users massive millions nodes graphs called distributed hash tables dhts provide scalable efficient faulttolerant environment exchanging information users 
static dhts received significant attention traditional approaches developments important areas peer peer research remains study evolving dht graphs users randomly join leave system :10.1.1.3.9768:10.1.1.132.9448:10.1.1.142.752:10.1.1.147.1879:10.1.1.105.3673
performance metrics dynamic graph determined distribution dht zones held peer 
supported part nsf ccr ani 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmetrics performance june new york ny usa 
copyright acm 
imbalance zone sizes may lead increased diameter smaller node degree lower bisection width higher local congestion routing graph 
addition uneven zone distribution results unfair allocation user objects peers creates hotspots certain parts graph 
hotspots relieved sophisticated object hashing techniques effect weakened structure underlying graph 
study proposed mechanisms peer peer networks derive corresponding probabilistic bounds maximum minimum zone size users joined system 
random graph size define fmax ratio largest zone size average zone size fmin ratio average zone size smallest zone size 
methods sample single point dht space known fmax log high probability :10.1.1.142.752:10.1.1.147.1879:10.1.1.147.1879:10.1.1.105.3673:10.1.1.105.3673
improve result deriving exact upper lower bounds fmax hold probability arbitrary constants random center splits existing nodes 
largest zone usually studied purposes load balancing user objects keys bounds clear minimum zone received attention :10.1.1.147.1879:10.1.1.147.1879:10.1.1.105.3673
naor state proof minimum zone smaller average factor log 
loguinov implicitly assume derivations fmin additionally concludes fmin log essentially means upper bound reconcile partial results show fmin upper bounded probability random splits log probability center splits log :10.1.1.3.9768:10.1.1.3.9768
represents natural logarithm 
show splitting existing neighbors center fact optimal possible splitting methods uniform opposed non uniform hash indexes provides best possible performance terms fmax fmin 
multi point sampling methods naor select random points dht space choose largest node split approach classical balls bins power choices 
show chernoff type bounds log fmax upper bounded probability analyze problem approach bins derive asymptotic upper lower bounds fmax arbitrary results show large graphs fmax log simultaneously holds values probability specifically log fmax high probability 
bound tight result extends shown demonstrates tend infinity fmax converge 
tice multi point sampling lead classical log log bound fmax expected log analysis various balls bins problems 
zone balancing approach suggested analyzed adler 
method new node samples random peer graph queries direct neighbors graph assumed regular 
demonstrates long degree node log fmax fmin constants exact value constants shown 
study similar problem nodes allowed sample parts graph deterministic function example may represent graph linking rules derive upper bounds fmax model 
analysis shows log bound holds probability log fmax log 
contrast purely random model fmax converges insight find log deterministic model requires times samples purely random model achieve bounds fmax 
loguinov variation adler approach joining peer walks edges graph starting random location splitting largest node certain number hops initial node :10.1.1.3.9768:10.1.1.3.9768
step walk biased largest neighbor location neighbor varies evolution graph closed form analysis approach complicated 
offer model method time compare performance remaining methods simulations 
balancing methods include virtual server approach originally chord messor system proximity aware balancing cluster balancing dynamic algorithms provide alternative mechanisms balancing graphs orthogonal analysis :10.1.1.132.9448:10.1.1.14.2448:10.1.1.14.2448:10.1.1.105.3673
organized follows 
section provides background motivation 
section studies model derives bounds fmax fmin 
section re derive bounds center split model 
section studies maximum zone multi point methods section shows simulations de bruijn dhts 
section concludes 

motivation preliminaries generic load balancing relatively old area 
problem typically assumes existence fixed bins objects peer peer peer linkage chord left de bruijn graphs right 
degree graph 
placed bins uniform possibly nonuniform random selection 
assuming largest bin contains log balls reduced log log log sampling random bins placing object 
main application results systems equal distribution object keys simply call objects peers 
balancing number keys node important objective concerned structure graph failure high degree nodes peers large zones compromises strength underlying graph congestion large zones leads increased response delay presence low degree nodes peers small zones increases diameter system 
problems common graphs third noticeable de bruijn dhts :10.1.1.3.9768
example system peers maximum zone times larger average probability show result 
chord system average node degree log degree largest peer high probability 
peer fails links broken simultaneously leading adverse effects graph 
true largest peer receives routing traffic proportion degree may increase response delay queries passing node 
system utilizes variation de bruijn graphs peers smallest zone degree equal susceptible disconnection graph experience larger routing diameter show nodes de bruijn graphs degree random node join 
briefly describe model dht space utilized proceed zone balancing analysis 
unit ring model shown dht space dissect various distributed join algorithms partition circumference nodes system 
shows peers holding non overlapping parts ring edges originating peer linking rules vary different types graphs characteristic location neighbor computed location zone held peer 
assuming generic regular graph dhts chord links consequence routing rules de bruijn graphs 
information see :10.1.1.3.9768
note analysis limited ring topologies applies virtual coordinate spaces 
peer random split peer center split random left center right splitting existing neighbors 
log neighbors exponentially increasing distances left side de bruijn graphs link sequential nodes certain offset original node right side 
construction ring accomplished distributed join process 
new node selects random location dht space hashing function attempts join peer peer system random location 
approach chord node splits existing peer exactly illustrated left node splits peer point random hash index notice construction leads possibility having small zones lands near boundaries existing zone 
second approach splits peer half demonstrated right 
keep notation consistent call method random split method center split improve fairness zone sizes dhts sample random locations graph center split largest zone find 
methods perform better single point approaches sampling random points graph may costly especially order log 
generally leads log log messages join constants inside depend diameter graph 
chord nodes diameter degree sampling log peers requires average messages appears excessive 
decrease message join overhead alternative approach deterministically sample neighbors peer subsequently walk edges graph discover nodes :10.1.1.3.9768:10.1.1.14.2448:10.1.1.14.2448
reduces join overhead factor dav degree graph dav average distance nodes 
example chord nodes deterministic method sample log peers times fewer messages previous approach messages join 
note deterministic method generally sample points graph provide bounds fmax purely random approach 
rest address issues log correct value graph achieve desired level balancing samples deterministic method equivalent purely random approach 

single point random split treatment dht space assumes toroidal unit circle purely random perfectly uniform number generator infinite precision random hash index probability collision zero 
represent number peers system focus deriving bounds max min zone sizes hold high probability 
due limited space certain proofs omitted 
definition 
event en occurs high probability respect exists fixed constant en 
typically ensures stronger bounds likelihood event en compared simply saying en happens surely probability 
customary class problems derive bounds hold study asymptotic behavior system pay special attention terms possible keep results applicable graphs small size maximum zone formally define performance metrics mentioned :10.1.1.14.2448:10.1.1.14.2448:10.1.1.14.2448:10.1.1.147.1879:10.1.1.147.1879
definition 
random variable fmax ratio maximum zone size average zone size points peers joined random instance system 
definition 
random variable fmin ratio average zone size minimum zone size points joined system 
fmax fmin provide main performance metric 
suppose random points 
xn independently uniformly chosen unit circle 
define yi th spacing points circle mn largest spacing mn max 
yn sn smallest spacing sn min 
yn 
theorem 
random splits inequalities holds probability log log log fmax log 
proof 
recall result due lim log mn 
notice exists critical point sharp transition surely percolation effect common problem regardless user joins graph areas networking 
recalling small approximately substituting log log log get bounds 
conclude exists zone larger average factor log log log range table compliance fmax bounds random splits 
column range specifies lower upper bounds fmax hold range table compliance fmin bounds random splits 
larger factor log example graph peers fmax probability understand bounds hold small generated random graphs different sizes nodes 
table shows columns pl pu fraction graphs actual fmax complies respectively lower upper bounds ideally pl pu equal 
table shows fmax graphs violates bounds probability close predicted minimum zone examine behavior fmin theorem show bounds exponentially worse 
theorem 
random splits inequalities holds probability log fmin 
proof 
recall yi uniformly distributed simplex 
xn xi na na yi 
na note left side probability minimum zone size sn re write terms sn assume sufficiently large sn pl pl pu pu 
substituting get upper bound 
similarly log log log get lower bound 
illustrate extent fluctuation fmin generated random graphs examined number graphs violating 
table shows holds high accuracy variety graph sizes range fmin confined substantially construction split trees random balls left 
representation tree circle right 
larger traditionally expected 
node graph peer zone size smaller average factor 
furthermore unfairness factor occurs random graphs 
show bounds improved simply different peer splitting algorithm derive pleasant results fmin 

single point center split maximum zone notice existing users split half incoming nodes dht space organized dynamic binary trie 
join process peer modeled ball drops root virtual trie descends tree randomly choosing goes left right 
leaf ball ends node split 
movement ball represents digits binary expansion hash index recall digits independent uniform peers assumptions 
model shown new incoming node splits node leaf shares longest common prefix existing nodes 
note similar tree model independently proposed adler analysis completely different 
notice zone size peer simple exponential function depth hx binary trie hx problem finding fmax fmin center split peer peer dhts boils estimating probabilistic bounds smallest largest depth leaf trie 
hi depth peer particular random instance graph min hi smallest depth max hi largest depth leaf 
assuming bound random variables high probability said resulting bounds fmax fmin 
state obvious answer question lemma proof 
lemma 
assume center split dht dl du hl hu hold high probability 
fmax fmin bounded inequalities high probability du fmax fmin hu follows examine distribution derive probabilistic bounds dl du 
discussion section 
define sequence indicator random variables ai ai signifies level split trie full 
say level full nodes level non leaf 
recall level full ai implies ak immediately follows smallest leaf depth levels full ai 
insight result formulates distribution simple recurrence equation 
lemma 
center split trie leaves tail distribution pn ak ak pn ak ak conditional probability level full previous levels 
full pn ak ak ak 
notice recurrence limit number samples join process applies single point multi point methods 
difference approaches shape pn ak ak 
show analysis single point split section leave discussion multi point methods section 
lemma 
single point center split unit ring probability level full previous levels full pn ak ak exp 
proof 
notice split trie built peers contains leaves non leaf nodes 
examine level trie observe possible nodes level non leaf level fully split 
assuming previous levels full ak exactly non leaf nodes contributed filling levels 
remaining non leaf nodes chance split level levels filled node level hit incoming ball splits node half equal probability problem reduces finding probability uniformly randomly placed balls bins manage occupy bin ball 
ways solve problem involves application wellknown results coupon collector problem 
approach 
define random number non empty bins balls thrown bins 
write pn ak ak 
recall coupon collector problem coupons drawn uniformly randomly equal probability total different coupons 
probability smallest depth simulation model simulation model simulation model table smallest depth split trees simulation 
obtain distinct coupons experiment 
large term approximated uj yielding uj 
interested asymptotically large log allows approximation immediately leads result 
accuracy demonstrated table shows distribution simulations different table shows combined result matches simulations especially increases 
result lemma place derive probabilistic bounds theorem 
assuming mass concentrates values dl dl du probability dl log log log log log shown proof 
proof 
examine lower bound derive dl dl restrict value proof show conveniently allows constrained values dl dl 
ease presentation set dl 
dl exp exp approximation holds smaller select particular value equal log log log smallest leaf depth number nodes upper bound simulation lower bound largest leaf depth number nodes upper bound simulation lower bound unit ring simulations smallest depth left largest depth right 
center splits graphs value function determine 
expanding small get log holds long satisfies log 
solving get log en log log lambert function multi valued solution 
adding floor function get dl 
consider upper bound find du du notice equivalent finding du du accomplish task set log log log 
write exp log holds satisfies log log solving equation en log log log 
log du integer apply ceiling function du log log log leads du du final step show du dl 
neglecting asymptotically small log du dl log log log equals long 
verify correctness random tree model generated random graphs center splits unit circle examined smallest depth execution 
log log guarantee confidence bounds ensured 
left shows actual results hl hu actual height table height split trees simulation 
percentage column indicates fraction graphs height 
spread shown vertical bars follow model 
notice mass concentrates values dl dl 
far fmax concerned easy notice depending value affects floor function upper bound fmax fluctuates log log log log log log 
minimum zone focus estimating largest depth height tree left 
problem appears similar just studied results substantially different seen theorem 
theorem 
probability mass center split dhts concentrates values hl hl hl hu hl log log 
proof 
random binary tree constructed dropping balls splitting leaves left known structure called patricia trie 
tree collapsed version regular binary trie intermediate nodes single child removed 
recalling probability height random patricia trie concentrated values hl hl hl hl immediately get statement theorem 
note term statement theorem depends decimal expansion simply equals zero practical graphs non trivial size 
right shows simulation results confidence unit ring topology largest leaf depth corresponding bounds 
table simulations demonstrate mass fact centers values 
result theorem quite interesting shows constructing simple split tree bound fmin significantly improved shown previous section log log 
nev bound noticeably worse fmax log 
neglecting ceiling floor functions consider 
case fmin upper limited fmax just 
fmin limited fmax 
example difference observed simulations tables 
row tables notice fmax fmin probability 
average fmax average fmin average fmax fmin center split schemes probability simulations nodes iterations 
optimality conclude section observing splitting existing neighbor half fact optimal methods sample single peer circle 
theorem 
best lowest bounds fmax fmin achieved uniform hashing function splitting existing neighbors center 
result theorem illustrated shows average values fmax fmin random graphs center splitting existing peers fractions peer split 
splitting method interpreted peers applying non uniform hashing function appear probability probability clearly shows optimal cases confirms prior observation fmin substantially harder bound fmax 

maximum zone multi point split random model start section examining behavior maximum zone incoming peer allowed sample random locations ring implicit assumption peer split largest discovered node 
model problem split trees examine evolution system add new peer network time step derive conditional probability pn ak ak level fully split previous levels 
model center split approach proposed multi point methods split nodes middle 
note multi point sampling du equal dl large dl small 
rest limit analysis dl value trivially obtain du deduce tight upper bounds fmax 
follows convert non linear stochastic process model differential equations borrowing inspiration continuum mean field theory modeling scale free dynamics internet topology 
note identical approach independently proposed mitzenmacher kurtz theorem general theory markov processes 
expected non empty bins model model simulation simulation number samples number samples model simulation comparison expected number non empty bins solution iterations left 
comparison actual probability solution right 
technique previous section model non leaf nodes balls dropping bins 
ball placed bin sample random bins place ball occupied bin 
goal analysis determine probability bins occupied process 
assume system starts time stops time adds new node dht integer time unit 
suppose number non empty bins time random instance graph process expectation random graphs 
notation pn ak ak 
lemma shows approximated solution simple differential equation derive pn ak ak 
lemma 
point sampling center splits unit ring pn ak ak pn ak ak solution differential equation dt initial condition conducted numerous balls bins simulations verify accuracy 
values values small matched remarkably 
left shows quality fit cases balls simulation results plotted isolated points models drawn continuous lines 
right shows probability simulation balls 
seen figures models follow actual result seamlessly 
simulation compares bounds smallest depth obtained observed simulations unit ring 
binary search find values guarantee pn ak ak lower bound pn ak ak upper bound 
note smallest depth number samples upper bound simulation lower bound fmax model number samples simulation continuous upper lower bounds actual smallest depth simulations left 
discrete upper bound fmax simulations right 
call bounds continuous generally produce non integer left shows spread observed simulations confidence corresponding continuous upper lower bounds 
converting non integer previous example discrete lower bound dl plot right upper bound fmax comparison simulations 
seen figures result lemma provides accurate estimate fmax 
generally allow closed form solution large resort binary search similar methods obtain probability fmax exceeds certain threshold 
approach time consuming says fmax behaves function overcome limitations derive asymptotic expansion arbitrary demonstrate accuracy simulations 
asymptotic expansion section study behavior solution obtain closed form expression bounds satisfied high probability 
theorem 
point sampling center splits minimum tree depth bounded dl probability dl log log log log log log log small constant 
verify result theorem solving dl binary search achieve confidence 
test numerical bounds model examples nodes case case 
values directly obtain dl leads corresponding upper bound fmax 
shows result process confirms accurate 
figures show value fmax drops linearly slope flattens fmax converges respectively 
re write main result terms fmax 
corollary 
sufficiently large fmax bounded fmax numerical solution closed form model number samples fmax numerical solution closed form model number samples comparison continuous bounds fmax numerical solution confidence closed form model nodes left nodes right 
probability fmax log log log 
bound lowered best possible 
note upper bound holds large possible carefully select term inside floor function integer case fmax bounded half shown 
log choices fmax fluctuate log concerned upper bound simultaneously holds represents best possible result fmax 
analysis log yields fmax 
assuming sufficiently large graphs neglecting term log samples bound fmax log samples high probability 
deterministic model section different model sampling points circle relies random deterministic choices 
method arises new node samples direct neighbors randomly chosen peer neighbors pre determined fixed rules similar model studied discussed 
model situation organize nodes level split trie non overlapping groups size random point ball lands group peer allowed sample remaining points group 
grouping symmetric deterministically leads result regardless group point ball lands 
example framework shown 
zone samples known locations circle 
implemented adding circle circumference location point sampling peers holding additional points 
locations happen neighbors sampling comes additional message overhead 
model simple generalize value long individual zones overlap 
note deterministic model directly correspond linking rules particular group model deterministic peer sampling left 
representation terms groups right 
network isolates nodes group rest graph 
model leads interesting results provides baseline comparison purely random approach 
lemma 
assuming deterministic sampling bins group non overlapping groups pn ak ak bd pn ak ak beta function bx incomplete beta function bx dt 
proof 
apply approach previous sections study probability balls placed bins able split bins 
notice bin group split long balls land group need compute probability group receives random balls number balls nj thrown group binomial distribution number balls probability new ball randomly placed group ignoring mild dependency nj asymptotically difference probability groups receive points nj 
recall upper tails binomial random variable estimated regularized beta function bd beta function bx incomplete beta function 
result follows immediately 
expected simplifies larger values need numerical methods compute 
alternative method derive estimate upper tails binomial distribution simplify workable form 
carry smallest depth upper bound simulation lower bound number samples fmax model number samples simulation continuous upper lower bounds model actual confidence simulations unit circle nodes left 
discrete upper bound fmax computed simulations right 
task section check accuracy beta function model simulations 
balls bins experiments perfectly accurate 
skip results brevity focus accuracy model bounding value smallest depth binary search solved obtain continuous upper lower bounds du dl 
left compare bounds actual value confidence observed simulations unit circle 
simulations joining peer deterministically sampled additional locations ring adding 
original hash index seen beta function model accurately tracks evolution right show discrete version fmax applying corresponding floor function model compare obtained simulations 
shows fixed bin structure model conservative unit ring cases number groups integer overestimates real fmax points jump 
issue notwithstanding find provides approximation class deterministic sampling methods 
asymptotic expansion study behaves different values lemma 
result converted form pn ak ak exp 
log log dn log 
approximation identical original beta function comparisons performed 
typical fit models case shown left 
useful requires binary search just step derive exact bound smallest depth holds probability fmax beta function asymptotic model number samples fmax beta function closed form model number samples beta function solution asymptotic model nodes left 
verification closed form model beta function nodes right 
theorem 
deterministic sampling minimum depth bounded dl log mn probability mn largest zone size en mn log dn lambert function negative secondary branch multivalued lambert function 
result major improvement requires binary search compute upper bounds fmax 
directly produces result easily computed software packages matlab mathematica 
verified bounds fmax derived numerous tests 
example nodes shown right 
result theorem allows easy computation bounds fmax clear metric deterministic method compares random approach 
address question simpler shape assuming log theorem 
log simplify fmax log log log log log 
result interesting shows example log log log 
fmax converges sufficiently large contrast random sampling model model table values fmax computed models large fmax random number samples deterministic fmax random number samples deterministic comparison fmax random deterministic sampling left right 
fmax converges 
verify asymptotics growing 
value asymptotic bound 
table shows convergence process fmax computed beta function lambert function 
matlab ability compute incomplete beta function stops approximately provides results table shows term slowly decays zero fmax converges value close predicted model 
discussion deterministic model clearly provides worse performance random model studied earlier difference terms fmax models significant expected 
shown values deterministic model obtains fmax larger random model small additive constant 
remaining issues random deterministic sampling achieve optimal best possible load balancing zones logarithmic samples deterministic model equal random 
define optimality discuss models achieve 
theorem 
exists arbitrary splitting mechanisms number samples actual fmax random graph size 
aid theorem apparent random sampling mechanism achieves optimal load balancing log 
functions log log log log super logarithmic provide negative answer question 
deterministic sampling fmax converges observed 
cdf degree cdf purely random random walk biased walk degree cdf degree de bruijn dhts single point sampling center splits left 
degree distribution various multipoint sampling methods right 
study issue making random deterministic models exhibit similar performance 
corollary 
assuming random method samples log nodes deterministic method samples log nodes corresponding upper bounds fmax equal log 
assuming log methods equivalent terms fmax deterministic model uses approximately times samples random model 
notice deterministic factor asymptotically grows increases quite aggressively quickly voids benefits reduced message overhead obtained deterministic method 
conclude application desires bounds fmax close large typically find random model appealing 
cases application needs quick dirty bound small deterministic method provides viable alternative 
example achieve fmax probability deterministic model requires times samples random model 
apply analysis section study performance multi point methods actual peer peer systems 

simulations section briefly analyze performance multipoint sampling methods actual dhts 
selected de bruijn graphs underlying model multi point methods proposed context linking rules graph provide interesting platform observing effect large small zone sizes node degree 
implemented variation regular de bruijn dhts borrowing design ideas :10.1.1.3.9768
simulations diameter graph examine sampling methods random sampling log points dht deterministic sampling approximately points random walk going edges graph model random sampling random walk biased walk table fraction nodes final graph certain degree deterministic sampling points biased walk :10.1.1.3.9768:10.1.1.14.2448
main performance metric degree distribution nodes graph peers joined system 
average results simulations show resulting distribution degree 
baseline example shown left single point center split method 
maximum degree quite rare nodes degree degree degree 
right show cdf degree distribution multi point methods 
sample random points method points deterministic methods 
random walk method examines neighbors original peer randomly walks hops recording zone sizes neighbors visited node extension 
biased method chooses largest neighbor walk :10.1.1.3.9768
walk finished largest discovered node split joining peer 
shown right sampling nodes deterministic method approximates purely random model 
additional results table confirm observation show biased walk performs better methods removing extreme values degree graph 
analyze message overhead involved methods 
diameter graph hops happens average distance de bruijn graphs join overhead purely random method approximately messages :10.1.1.3.9768
metric approaches long peer maintains list zone sizes held current neighbors 

examined distribution maximum minimum zone sizes peer peer networks derived tight bounds metrics 
deterministic methods fact suboptimal match purely random methods larger sampling size 
involves analysis height split trees multi point sampling design greedy algorithms random walk improve balancing performance existing deterministic methods 

aberer datta hauswirth quest balancing peer load structured peer peer systems epfl technical report :10.1.1.14.2448
adler halperin karp vazirani stochastic process hypercube applications peer peer networks acm stoc june 
aspnes shah fault tolerant routing peer peer systems acm podc july 
azar broder karlin upfal balanced allocations siam journal computing vol 
july 
barabasi albert jeong mean field theory scale free random networks physica 
byers considine mitzenmacher geometric generalizations power choices bu technical report february 
byers considine mitzenmacher simple load balancing distributed hash tables iptps february 
chawathe ratnasamy breslau lanham shenker making gnutella systems scalable acm sigcomm august 
gonnet hare jeffrey knuth lambert function advances computational mathematics vol 

class problems related random division interval annals math 
statistics vol 
june 
degroot probability statistics 
addison wesley 
devroye law iterated logarithm order statistics uniform spacings annals probability vol 

devroye log log law maximal uniform spacings annals probability vol 

mendes evolution networks biological nets internet www 
oxford university press 
content addressable network technical report 
gupta kumar capacity wireless networks ieee transactions information theory march 
kaashoek karger koorde simple degree optimal hash table iptps february 
karger lehman leighton levine lewin panigrahy consistent hashing random trees distributed caching protocols relieving hot spots world wide web acm stoc may 
karger ruhl new algorithms load balancing peer peer systems iris student workshop august 
karp luby meyer auf der heide efficient pram simulation distributed memory machine acm stoc may 
szpankowski limit laws heights generalized tries patricia tries latin 
kurtz solutions ordinary differential equations limits pure jump markov processes journal applied probability vol 

law 
siu distributed construction random expander graphs ieee infocom march 
liben nowell balakrishnan karger analysis evolution peer peer networks acm podc july 
loguinov kumar rai ganesh graph theoretic analysis structured peer peer systems routing distances fault resilience acm sigcomm august :10.1.1.3.9768
magnus formulas theorems special functions mathematical physics 
springer verlag 
malkhi naor viceroy scalable dynamic emulation butterfly acm podc july 
mitzenmacher load balancing density dependent jump markov processes ieee focs october 
mitzenmacher studying balanced allocations differential equations combinatorics probability computing vol 

mitzenmacher power choices randomized load balancing ph thesis 
kitsuregawa effective load balancing peer peer systems data engineering workshop march 
montresor meling babaoglu messor load balancing swarm autonomous agents international workshop agents peer peer computing 
naor wieder novel architectures applications continuous discrete approach acm spaa june 
rao lakshminarayanan surana karp stoica load balancing structured systems iptps february 
ratnasamy francis handley karp shenker scalable content addressable network acm sigcomm august 
roussopoulos baker practical load balancing content requests peer peer networks stanford university technical report january :10.1.1.132.9448
rowstron druschel pastry scalable decentralized object location routing large scale peer peer systems ifip acm international conference distributed systems platforms november :10.1.1.142.752
stoica morris karger kaashoek chord scalable peer peer lookup service internet applications acm sigcomm august :10.1.1.105.3673
szpankowski patricia trees revisited journal acm vol 

asymmetry helps load balancing ieee symposium foundations computer science 
wang zhang li loguinov zone balancing peer peer networks analysis random node join extended version texas technical report june 
xu kumar yu fundamental tradeoffs routing table size network diameter peer peer networks ieee jsac vol 
january 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing uc berkeley technical report april 
zhu hu efficient proximity aware load balancing structured peer peer systems international conference peer peer computing september 
zhuang zhao joseph bayeux architecture scalable fault tolerant wide area data dissemination acm nossdav june 
