goms user interface design evaluation technique 
bonnie john human computer interaction institute departments computer science psychology carnegie mellon university pittsburgh pa phone email bonnie john cs cmu edu david kieras department electrical engineering computer science university michigan advanced technology laboratory building beal avenue ann arbor mi phone email kieras eecs umich edu june appear acm tochi copyright association computing machinery permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copyrights components owned acm honored 
abstracting credit permitted 
copy republish post servers redistribute lists requires prior specific permission fee 
request permissions publications dept acm fax permissions acm org 
goms 
keywords goms cognitive modeling usability engineering seminal card moran newell book psychology human computer interaction goms model widely known theoretical concepts human computer interaction 
concept spawned research verify extend original real world design evaluation situations 
synthesizes previous goms provide integrated view goms models design 
briefly describe major variants goms matured sufficiently actual design 
provide guidance practitioners goms variant different design situations 
examples application goms practical design problems summarize lessons learned 


purposes seminal card moran newell book psychology human computer interaction cmn goms model widely known theoretical concepts human computer interaction hci 
concept spawned research verify extend original concept 
olson olson reviewed state art cognitive modeling goms tradition discussing extensions basic framework research stage development pointing way plausible useful extensions explored 
outlined significant gaps cognitive theory prevent cognitive modeling general addressing important aspects hci fatigue argued cognitive models essentially wrong granularity form address certain aspects computer systems design user acceptance fit organizational life see carley opposing view 
coming years history hci cognitive modeling different goals olson olson 
goals provide guidance practitioners wishing select goms variant design evaluation task briefly demonstrate value goms techniques real world design evaluation tasks 
focuses subset goms research reached sufficient maturity tools engineer toolbox design 
techniques survey variants original goms concept sufficiently tested codified leave research laboratory taught practitioners real world design evaluation situations empirical validation 
examples applying goms techniques design situations ranging small design issues systems payoffs ranging informally positive actual dollar figures 
hope examples help hci practitioners see value goms situations 
tutorial version goms information textbooks handbooks tutorial notes card moran newell john gray kieras press 
expect useful deciding goms appropriate design problem variant goms appropriate 
details conduct analysis obtained sources 
comparison techniques 
john kieras press provides detailed comparison goms variants surveyed predictions comparing contrasting underlying mechanisms 
organization follows 
remainder discuss concept engineering models computer system design goms family techniques instantiations engineering approach 
second section describes goms applied design 
third section provides brief case goms 
histories members goms family applied actual software development situations 

engineering models human computer interaction 
engineering models 
motivation goms hci cognitive modeling efforts provide engineering models human performance 
ideal models produce priori quantitative predictions performance earlier stage development process prototyping user testing 
predict execution time learning time errors identify parts interface lead predictions focusing designer fix 
allow analysis different levels approximation predictions appropriate design situation obtained minimum effort 
straight forward computer designers extensive training psychology models integrated cover total tasks 
hci research reached ideal goms currently mature engineering models properties discussed truly useful real world system development 
psychology researchers fit parameters models data collected task re studying 
interface design system developers need quantitative priori predictions systems built 
hci researchers done extensive theoretical empirical estimate parameters robust reliable tasks empirical validation predictions 
mean parameters fixed constants situation determinable priori 
goms models tables parameters covering wide range tasks created previous research see card moran newell gray john atwood olson olson kieras press 
interactive systems today developed trained psychologists human factors experts dillon sweeney maguire 
computer system developers expected bring psychological expertise task basic psychology built models 
tables parameter values mentioned example incorporating basic psychological knowledge form engineers 
addition procedures constructing applying model clearly defined representative examples allow techniques taught learned intended model users 
mean procedures fixed explicit recipes cook book 
guidelines rules representative situations style analysis developed leads useful predictions 
handbook chapters tutorials goms address issue john gray kieras press 
engineering models address useful range design issues 
activities performed people interacting computer systems quite varied ranging simple perceptual motor actions pointing mouse extremely complex activities comprehending textual pictorial material way creative problem solving 
covering entire span possible today engineering models issues may addressable engineering models predicting creativity 
general issues effective coverage possible today extremely important 
lower level issues effects layout key mouse pointing captured existing models 
second complexity efficiency interface procedures addressed current goms models 
point user acquire execute procedure order perform useful computer system especially valuable engineering models address procedural aspects user interface 
third essential goms 
activities performed considered design 
optimizing various aspects portions interface isolation physical layout keyboard visual layout screen ensure system usable allow task performed effectively 
goms models especially useful analyses procedural aspects task exercise parts system design 
engineering models disciplines engineering deliberately approximate 
include just level detail necessary design job 
example sizing duct unit fine variations volume respect temperature ignored air assumed certain range temperature 
assumption holds equations simple relating area duct rate air passing 
air traveling pipes cooling chamber air conditioner substantial temperature change hot cool assumption longer holds factors incorporated relative humidity compressibility 
way engineering models hci approximate nature attending details necessary analyze design problem keeping modeling effort tractable 
engineers approximate models blindly context knowledge detailed theory 
know terms exist detailed theory sensitive predictions variations terms terms dropped calculations tractable sacrificing accuracy necessary design situation 
done theory specifies mechanism phenomenon describes 
similarly engineering models hci approximations processes involved human behavior simply approximations behavior 
way theoretical foundations models allow designer choose right model required level detail design problem recognize design problem involves issues factors addressed models 
goms models range quick dirty keystroke level model detailed accounts knowledge interleaving tasks 
section discuss approximations viable different design situations 
card moran newell developed concept goms criteria useful engineering models mind 
goms models usefully approximate priori predictions cover range behavior involved hci tasks proven learnable usable computer system designers 
show evaluation results produced goms engineering models quite useful quite limited 
replacing user testing current engineering models best viewed reducing amount user testing required develop highly usable system 
iterative design process engineering models non user testing techniques see nielsen mack applicable early design process evaluate candidate designs resolve design issues possible investing actual user testing 
multiple technique approach best available scientific practical knowledge humancomputer interaction see olson moran discussion coordinated methods 

overview goms concept 
general goms concept 
starting point discussion goms define concept general goms model subsequently referred goms concept 
concept weaker proposal original cmn proposal serves capture goms models common 
general goms concept defined follows goms 
useful analyze knowledge task terms goals operators methods selection rules 
acronym goms stands components goms model goals operators methods selection rules 
briefly goals simply user goals defined layman language 
want accomplish software 
day minutes seconds 
goals divided subgoals accomplish goal writing alfred hitchcock student set subgoals find information life line encyclopedia find names films cdrom movies outline word processor fill outline 
operators actions software allows user take 
original command line interfaces operator command parameters typed keyboard 
today graphic user interfaces operators just menu selections button presses direct manipulation actions 
operators gestures spoken commands eye movements 
operators defined different levels abstraction goms models define concrete level button presses menu selections 
methods learned sequences subgoals operators accomplish goal 
method accomplish goal selection rules component goms model required 
selection rules personal rules users follow deciding method particular circumstance 
goals operators methods selection rules describe procedural knowledge user requires perform task 
complete discussion goms components task identify included john kieras press 

goms family techniques 
general goms concept similar task decomposition concepts diaper ainsworth newell simon van kieras press concept spawned family task analysis modeling techniques goms family 
different versions goms today goms concept cmn goms 
original formulation proposed card moran newell loosely defined demonstration express goal subgoals hierarchy methods operators formulate selection rules 
klm 
simplified version cmn called keystroke level model uses operators goals methods selection rules 
analyst simply lists keystrokes mouse movements user perform accomplish task uses simple heuristics place mental operators 
ngomsl 
rigorously defined version called ngomsl kieras press presents procedure identifying goms components expressed form similar ordinary computer programming language 
ngomsl includes rules thumb steps method goals set terminated information needs remembered user doing task 
cpm goms 
parallel activity version called cpm goms john uses cognitive perceptual motor operators critical path method schedule chart pert chart show activities performed parallel 
goms techniques produce quantitative qualitative predictions people proposed system different versions different emphases 
techniques goms 
speak coverage functionality system provide estimates task performance time 
cmn goms ngomsl provide predictions sequence operators people employ specific task instance 
ngomsl provides predictions learning time benefits consistency indication likelihood errors 
detailed account techniques produce predictions john kieras press 

applying goms design designer approaches design task applies heuristic analytic empirical design techniques known useful task hand 
instance illustrated presentation jones horton mechanical engineer designing flywheel may algebraic equations estimate initial dimensions wheel analytic technique sure design maximum safe speed type wheel tables empirical results empirical technique modify design including safety factor heuristic technique 
order apply techniques designer know techniques available design tasks applicable benefit applying technique outweighs effort apply 
section provide information required designer choose existing goms techniques techniques suitable design situations benefits technique estimate effort involved technique 
subsequent section examples different techniques actual system design evaluation 
design situation characteristics important selecting goms analysis technique type task users engaged types information gained applying technique 
lists goms family methods combination type task type information 
discuss task type dimension type information gained describe issues involved different goms techniques apply 
fact cells empty points need research predictive user modeling techniques 
cases existing goms techniques modified adapted cases presents techniques currently documented 

characterizing user tasks user tasks characterized different ways dimensions important deciding goms analysis technique applicable user task technique suitable degree goal directedness user purposes system degree skill involved user task degree interaction control user versus computer system agents involved task sequentiality user task 
goms 
design information task type functionality coverage execution time procedure learning time error recovery support ngomsl sequential parallel goms klm cmn goms ngomsl cpm goms operator sequence cmn goms ngomsl cpm goms see text functionality consistency ngomsl goms goms goms goal directed routine cognitive skill passive active systems 
goms techniques available different combinations task type type design information desired 
note tasks goal directed routine cognitive skills included information types provided goms models shown 

goal directness 
computer applications today support related goals find information calculations analyses produce reports control apparatus 
instances user task goal application support goal effectively possible terms learning accomplish goal accomplishing goal 
applications goal directed electronic magazine user browse primarily relaxation opposed trying find particular article 
goms appropriate analyzing goal directed portions user interaction indicates goal directed task type amenable goms analysis 
task situations goal directed subgoals need effective support relaxing magazine couldn turn electronic page 
goms 
goms analysis techniques designer analyst start list high level user goals 
goms analyses techniques provide list come sources external goms 
typically list goals obtained task analysis approaches see diaper ainsworth kieras press including interviews potential users observations users similar existing systems worst case simple intuitions part analyst 
clearly high level task analysis critical step successful design approach including goms 
list assembled goms analyses help identify lower level user goals quickly guide design system user accomplish tasks efficient learnable way 
goms analysis identify new high level goals tasks analyst overlooked correct user goals 
best analysis may stimulate analyst intuitions lead correction list users goals 

skill 
skill dimension tasks runs extreme problem solving user know perform task search solution routine cognitive skill user knows exactly task situation simply recognize situation execute appropriate actions see cmn chapter 
extant goms techniques apply routine dimension 
goms direct way representing nature difficulty problem solving required discover appropriate operators methods selection rules 
understanding predicting behavior active area cognitive psychology research may addressed hci analysis techniques cognitive walkthrough technique wharton rieman lewis polson applies exploratory behavior novice users 
limitation indicates task type goms models apply routine cognitive skills 
important remember computer tasks open ended creative ones substantial components routine cognitive skill 
tasks evolve problem solving routine skill extensive 
predicting fully practiced user performance valuable performance empirically measured system just designed implemented 
second tasks elements routine skill problem solving 
instance cmn ch 
showed expert task laying printed circuit board cad tool half problem solving half execution routine procedures 
detailed study new programming language create graphing application showed embedded problemsolving activities designing program figuring new language routine behavior manipulating help system goms applicable analysis behavior peck john 
examples goms analysis routine complex tasks include widely studied text editing situation spreadsheet lerch mantei olson digital oscilloscope lee polson bailey playing video game john vera john vera newell 
user task may primarily problem solving task aspects task involve routine cognitive skill 
aspects system design analyst goms improve design allow users effectively non routine creative parts task 
skills usually involve aspects perception motor actions cognitive processing 
psychology hci literature typically cognitive skill shorthand perceptual cognitive motor skill continue tradition 
goms 

locus control 
computer system tasks roughly categorized passive system tasks active system tasks 
passive system tasks user control pace timing task events computer merely sits waits inputs user 
text editing typical passive system task 
active system tasks system produce spontaneous asynchronous events outside user control 
user prepared react system include people providing information making requests 
telephone operator tasks aircraft piloting examples active system tasks 
video games extreme active systems 
artificial intelligence techniques interface anticipate users needs result active systems 
goms analyses useful passive active systems approaches 
handled analyst 
analyst provides particular pattern activity interruptions goal rescheduling represented klm cpm goms model 
approach successfully gray john atwood modeling telephone operators interaction customers 
likewise john colleagues cmn goms relaxed goal stack predict actions year old expert playing video game john vera john vera newell 
second approach assume active system produces events responded methods interrupted conflict 
typically top level method simply waits event invokes appropriate responding event 
meyer approach analyze power plant operator associate system 
approximation clearly fails deal case user respond simultaneous mutually interrupting events analysis useful identifying usability problems system 

sequential vs parallel activity 
hci tasks usefully approximated sequential application operators text editing 
tasks involve overlapping parallel activities simplification usefully approximate task telephone operator tasks analyzed gray john atwood 
currently cpm goms applicable truly parallel case 
important consider task involving parallel operations usefully approximated sequential model 
parallel operations represented simple modification sequential model 
example logically necessary users visually locate object point mouse 
sequential analysis operator visually locate object followed point object operator 
practiced users locate fixed object screen items menu bar pointing mouse meaning operators execute parallel 
pointing takes longer visually locating parallel execution approximated sequential model simply setting time visually locate object operator zero see gong 
alternatively parallel operations take place level analysis design issues question 
example telephone operator performs call completion tasks typing listening visually searching parallel predictions execution time done cpm goms ngomsl model determine procedure entering billing number consistent different task contexts 
long configuration goms 
parallel operators differ design alternatives task contexts sequential analysis useful 
sum goms analysis applicable instances goal directed routine cognitive skill embedded problem solving activities creative interactions unstructured exploration 
tasks passive systems active systems usefully approximated sequential operators truly parallel 
section describes type information obtainable goms models tasks 

design information provided goms models 
functionality coverage consistency 
primary design question functionality system provides method user goal 
goms models generate predict range goals user bring system designer generates list user goals member goms family check method exists proposed existing system listed 
goms goes methods analyzing functionality looking procedures accomplish function 
instance object action analysis lists nouns verbs move file useful early step designs olson moran 
system provide functionality reasonably suited task meaning method involved reasonably simple fast 
example consider user word processor want put footnotes bottom appropriate pages 
word processors functionality specialized simple methods accomplishing goal 
word processors user put footnotes page hand redone length text changes 
despite limited word processors provide method accomplishing goal 
rare functionality simple sense considered interface design implicit requirements performance learning time corresponding methods 
working high level goms model reveal system functionality chosen terms meeting requirements see kieras press 
important quantify requirements goms family members provide quantitative predictions discussed subsections 
information obtained functional consistency comparing methods knowledge necessary perform different commands 
ngomsl particularly suited analysis consistency structure content ngomsl methods inspected learning time predictions ngomsl take form consistency account 
consistent interface methods similar goals resulting fewer methods learned 

operator sequence 
cmn goms ngomsl predict sequence overt physical operators user perform accomplish task klm cpm goms analyst supply note ngomsl model accurately reflect underlying knowledge structure task quantitative measures effect consistency reduction learning time suspect ngomsl quantitative predictions learning parallel tasks 
goms 
sequence operators 
methods selection rules specify commands user enter menu items select forth accomplish goals 
prediction decide add new method system example see card moran newell best train methods 
sequential tasks choose ngomsl depending benchmark tasks necessary see discussion section 
parallel tasks currently technique predicting operator sequence 
cpm goms explore possible effects design changes affect operator sequence 

execution time 
indicates members goms family predict execution time restrictions user practiced errors task 
predictions hold tasks involve typing commands point click tasks estimates primitive operators obtained 
visual search tasks modeled goms allowing different screen layouts evaluated chuah john pane lohse 
predictions validated laboratory studies actual real world systems field 
constructed goms analysis designers predictions empirical validation 
hci specialists feel restrictions skilled error free performance mean goms models useful actual design situations users novices causal users errors common time consuming 
utility goms execution time predictions dismissed casually 
note empirical measurements execution speed questionable users errors evaluation problem unique goms 
second task domains users fact practiced execution speed critical 
domains include clerical systems support domain experts perform highly skilled tasks days time 
time domain experts valuable waste slow clumsy interface designing execution speed critical goms help 
third users errors system predicted slow error assumption slow real users involved errors generally result longer execution times 
goms predictions execution time give essentially best case basis comparing designs dimension 
analogy note epa automobile gas mileage ratings allow useful comparison cars purchase decision actual mileage obtained may vary 
likewise comparing execution time predictions useful choosing designs occurrence errors inflates actual execution time 
status goms regard user errors discussed 
system designed unnecessarily slow action sequences execution time may critical design issue 
example system single user produce highly practiced performance walk application help home buyers locate house new city goms predictions execution time may useful design evaluation techniques focus design issues recognizability menu terms time user 
execution time important variable domains success video game hinges excitement creates speed player play game 
likewise critical design target educational software support provides learning speed user operate 
important realize current interfaces walk entertainment educational software waste user time methods slow inconsistent clumsy reason 
goms family models contribute designing software fast easy secondary design criterion 
goms 
sequential tasks studied goms research multiple techniques predicting execution time sequential tasks 
choice technique depends primarily methods need explicitly represented purposes 
klm far easiest technique 
explicit methods needed reasons evaluate learning time design documentation discussed cmn goms ngomsl models provide execution time information 
cpm goms technique making execution time predictions truly parallel task situations 
execution time operator sequence prediction important practical concern number benchmark tasks small 
predictions operator sequence execution time obtained hand simulation models simply manually listing operators klm 
number benchmark tasks large probably worth creating machine executable versions ngomsl model done variety ways programming language 
simpler computer tools goms models available wood byrne wood sukaviriya foley kieras kieras wood hornof 

learning time 
information learning time provided ngomsl models predictions cover time learn methods goms model ltm information require 
predictions validated variety situations merit serious consideration 
making absolute predictions learning time involves issues complications discussed john kieras press 
simplest advice practical situations limit ngomsl learning time predictions relative comparisons alternative designs 
comparisons designs fairly robust complex interface normally harder learn simpler variety possible learning situations 
applying predictions analyst keep mind important qualifications 
time learn interface procedures may insignificant total training time systems users acquire substantial domain knowledge cad cam system fighter aircraft weapons control system 
domain knowledge may involve learning words icons interface constructing mental model system learning new operators bank aircraft 
goms models represent knowledge mechanisms required learning substantial domain knowledge 
second predicted procedure learning time quite misleading walk systems self evident systems little explicit training supposed required 
point clear method involving single step typing unlabeled control key yield low predicted learning time user may easy way learn correct keystroke actual usage situation 
example just problem karat schafer explored transfer training word processors usually predicted ngomsl experienced users word processor completely trying learn new word processor scroll screen 
analysis techniques cognitive walkthrough technique wharton rieman lewis polson better suited uncover problems 

error recovery support 
design goals involved user errors preventing users making errors predicting anticipating errors occur system design designing system help user recover errors occurred 
despite goms 
obvious importance goals time research human errors far providing familiar rough guidelines concerning prevention user error norman 
methodology predicting errors users function interface design sufficiently validated engineering tool regardless theoretical approach theoretical analysis human error infancy see reason discussion 
doctoral theses demonstrated relationship observed errors properties goms models lerch mantei olson jong transition practical real world design situations 
originally pointed cmn goms direct application third design goal listed helping users recover error occurred 
case design question system provides method user follow recovering error 
fast simple consistent method ubiquitous undo command goal recover error 
design question different substance designing methods user goals 
indicates goms models address question specific choice depending specific aspect interest 
possible frequent important errors determined evaluating designs quality support error recovery done extant goms family members 

informal understanding design 
additional type design information listed informal understanding design issues 
pointed karat bennett goms model purely heuristic value explicit system requires user 
constructing goms model way user interface designer aware implications design 
important appears common design error focus non procedural issues screen layout graphic design burdening user clumsy interface 
exercise requires designer think carefully procedures entailed design help purely intuitive way identify usability problems clarify nature user task see kieras press discussion 

information provided goms 
kinds information relevant design included goms family techniques 
aspects user knowledge system may important design situations able perform mental simulations internalized device model analogical reasoning infer operating procedures see kieras polson discussion 
existing potential approaches task analysis required capture forms task knowledge 
example electronics troubleshooting incorporates person knowledge electronic components structure function system investigation addition various kinds procedural knowledge current analogical reasoning applied understanding consistency operating systems rieman lewis young polson 
addition information users knowledge may relevant design 
examples information standard human factors issues readability letters words screen visual quality display layout recognizability menu terms icons memorability command words quality environment user acceptance affect system fun cause boredom fatigue social organizational impact system resulting influence productivity 
types design issues generally independent procedural quality interface designers techniques goms explore effect 
goms 

goms design uses effort payoff 
section examine common uses information provided goms models 
discuss general issues time learn goms models 
specific design evaluation questions effort required different goms techniques depends types questions techniques 
start cost commensurate complexity system modeled models design evaluation problem built answers subsequent questions require effort 
addition fully analyzing entire system interface properly selected subset interface isolated detailed analysis meaning useful results obtained quite modest modeling efforts 
cases section demonstrate approach 
decision invest effort goms modeling depends design issues iterations involved 

general issues time learn goms method design entails cost learning method time effort apply specific design situation 
large amount detailed description involved goms methodology viewed extremely time sort design techniques cost object lewis rieman landauer 
impression pervasive misleading requires discussion correct 
impression probably residue known difficulty applying techniques research form reflect effort required learn apply developed technique 
fact accumulated experience cases described section assess actual costs 
clear goms techniques discussed excellent return investment amount investment commonly believed 
example estimate effort applying ngomsl actual design problem provided gong summarized section case 
brief ngomsl application development situation required fraction software programming time time empirical evaluation 
second impression unfounded time inadequate basis comparing effectiveness goms techniques techniques 
amount technique comparison research methodological problems gray 
results support argument goms easy efficient example raw results nielsen phillips comparison klm done undergraduates hci class accurate technique 
analytic required goms techniques relative techniques 
example cognitive walkthrough technique wharton rieman lewis polson considered discount techniques 
cognitive walkthrough requires defining user actions keystroke level set benchmark cases represent important user tasks 
developing information fact required apply klm substantial part preliminary defining cmn goms ngomsl model 
cognitive walkthrough level effort qualifies fast efficient discount evaluation technique goms modeling considered fast efficient technique 
experience teaching goms techniques university industrial students experience hci instructors universities klm taught undergraduates single class session homework assignments students construct models produce execution time predictions accurate design decisions see nielsen phillips john 
single class session suffice cmn goms goms 
student basic skill task decomposition develop goal hierarchies tasks 
ngomsl cpm goms harder learn different reasons 
difficulty ngomsl models working complete accurate methods deliberate goal working memory manipulation higher degree formality precision cmn goms 
ngomsl taught undergraduate class sessions kieras description press couple homework assignments feedback 
full day tutorials chi conferences kieras industrial short courses appear adequate get software developers started technique 
ngomsl interpreter development facilitate precise model building wood byrne wood sukaviriya foley kieras kieras wood hornof 
cpm goms difficult klm cmn goms analyst identify describe detail perceptual cognitive motor processing activities coordinated time 
john gray built series pert chart templates dozen common situations perceiving visual information typing holding conversation building blocks combine models complex tasks 
undergraduate class sessions allow students manipulate existing models easily correctly give start building models scratch 
full day tutorials appear material satisfaction tutorial participants john gray 
goms modeling skill attained researchers years effort 
fact numerous applications goms real world people attended tutorial read technique 
section details case studies demonstrate point 

profiling means focus design effort 
critical practical design problem design effort focused goms substantial contributions problem 
example developer need know user procedures streamlined decrease human execution time important improve underlying software algorithms decrease response time system 
answer questions goms profile execution times human computer system determine portions interaction significant excessive amounts time 
goms models describe user keystroke keystroke eye movement eye movement easy identify procedures contributing time procedures performed user system responses 
priorities assigned design issues rational manner 
examples actual goms design projects described section goms techniques just way 
example cpm goms demonstrate refining screen design keyboard layout relatively little effect system performance compared speeding system response latency gray john atwood 
system profiling requires quantitative predictions execution time timeconsuming uses goms 
payoff substantial analysis done early design process little cost compared building prototypes respond realtime empirical testing prevent resources poured design efforts relatively little value 
goms 

comparing alternative designs 
comparing alternative designs obvious goms techniques 
goms analyses require running system priori predictions performance early design process evaluate different ideas implemented prototyped 
extreme existing alternative systems evaluated installing user organization illustrated case studies section 
comparisons summative predictions system takes half time system perform task system requires third learning time system importantly discussed profiling easy compare procedures system system discover merits deficits 
effort involved making comparisons alternative systems depends kind information required 
need know important functionality covered systems 
expert execution time important issue long term system 
high turnover personnel training time great importance 
situation requires shallow cmn goms analysis second may require depth cpm goms analysis third requires full blown ngomsl model 
notice models created compare alternative designs overlap models created purposes 
example design process uses goms focus design effort model basis compare alternative solutions 
additional determinant effort required alternatives need evaluated similar 
experience model constructed serve base similar designs require small modifications base model 
effort put modeling initial system amortized number alternatives evaluated 
instance cpm goms models developed existing nynex workstation took staff months created potential benefits new features evaluated literally minutes gray john atwood 

sensitivity parametric analyses 
design situations value design ideas depends assumptions characteristics task domain users system 
common techniques engineering design examine dependencies sensitivity analysis sensitive predictions assumptions parametric analysis predictions vary function parameters 
goms family members quantitative predictions performance analyses 
examples descriptions klm card moran newell cmn ch 

addition profiling predicted measures analyses help guide empirical data collection identifying sensitive issues ensuring valuable data obtained limited time resources 
effort involved minimal assumptions parameters amenable simple models klm clearly substantial cpm goms ngomsl model required 
analyses typically vary assumptions parameters usually require baseline models set benchmark tasks minimal manipulation models discover desired relationships 
base goms model constructed exploring sensitivity analysis effects different parameters inexpensive fast 
goms 

documentation line help systems 
documentation line help systems pose design questions addressed goms methodology 
users normally know goal want accomplish turn documentation help know method accomplishing goal deduce experimenting system 
documentation help provide low level methods level command option specification user goal bell option ftp user task level goal transfer files 
consequently typical documentation help supports rare user required method knowledge needs details 
contrast help documentation explicitly methods selection rules users need order accomplish goals 
list user goals provides specification document organization entries index table contents 
experiments done workers gong ngomsl shows approach works extremely results better typical commercial documentation help 
standard advice documentation help task oriented clear ensures goms provides systematic theory empirically validated approach determining required content procedural documentation help 
related application goms determining alternative methods efficient included design training documentation nilsen jong olson polson 
example telephone operator call handling cpm goms predict execution time differences different methods identifying differences suggested efficient methods selection rules include documentation training materials 
goms models inform parts design process qualitatively quantitatively 
section demonstrates diverse set uses design evaluation real world examples 

examples actual applications goms analyses real world system designs section presents examples application goms design evaluation interfaces variety different kinds systems real systems development 
cases illustrate wide scope applicability goms models effectiveness answering design questions quickly efficiently 
cases concern actual development projects described open scientific literature documented industrial technical reports noted result interviews authors 
descriptions brief goal illustrate wide variety applications limited space cases proprietary concerns limit information available 
note cases goms real world example additional cases appeared beard smith press nielsen sidebar john vera rosenblatt 
considering cases reader beware design purpose section illustrate goms applied real problems 
argue design problems cases dealt techniques 
goms 
problems benefit hindsight interface problem look simple identify fix described 
example concerns design issues arose course real world professional software development effort 

klm applications case 
mouse driven text editor 
known klm real system design surprisingly xerox card moran 
early designing text editor xerox star design team suggested schemes selecting text 
different schemes called different numbers buttons mouse 
goal buttons mouse possible easy learn providing efficient procedures experts 
relatively easy run experiments different schemes test learnability novices novice newly created system 
substantially difficult run experiments experts experts 
experts created extensive training prohibitive procedure time workstation availability money 
design team combination experimental results novices tasks explore tradeoffs learnability expert performance 
models contributed directly design mouse xerox star 
case 
directory assistance workstation 
interview judith olson university michigan members human factors group bell laboratories judith olson jim carla springer examined task directory assistance telephone operators klm 
directory assistance operators line databases telephone numbers look numbers customers 
common wisdom guiding procedures time bell system key see 
instructed type letters database search query typically letters name occasionally letter name letter street address database search return possible answers query 
felt efficient dao visually search answer customer request screen full names type longer restrictive query produce fewer names screen 
group analyzed task inefficiencies recommended procedures 
searches required unacceptably long times keyed query brought multiple pages names 
second unacceptably high rate misses visual search 
information customer wanted screen trying perform quickly failed see midst retrieved information 
arrive better design group analyzed database categorized queries common rare standard procedures yield names relatively 
analysis set benchmark queries selected parameterized klm constructed clarified tradeoff query size number retrieved names 
resulting recommendation type keystrokes previously thought restrict search 
report submitted time breakup bell system direct results particular report impossible track 
current dao training nynex employees longer advocates key see 
taught key needed get number responses screen worth add letters redo search visually search screen 
currently nynex dao searches result answer returning search wayne gray personal communication 
goms 
case 
space operations database system 
personal communication 
klm design large command control system space operations 
system monitor maintain catalog existing orbital objects debris 
new version system replace existing text database system intended graphical user interface 
software design new system analyzed simulation techniques determine system architecture algorithms provide adequate performance system implemented 
order quickly construct simulation complete system klm represent human operator time preliminary interface design 
couple person months benchmark tasks selected represented basic interaction techniques obtaining information orbiting object joystick select open information window 
additional person month constructed preliminary design give execution time benchmark tasks 
system simulation run results analyzed software architecture modified produce required performance 
new interface eventually prototyped experiments get actual human performance data simulations obtain data tasks involved processes complex decision making scope klm 
empirical results showed earlier estimates provided reasonably accurate 
availability usefully accurate estimates user execution time early design process critical allowing system performance assessed simulation 
system built installed operation late descendant original system operation today 
case 
cad system mechanical design 
interview brenda leading vendor cad cam software mechanical design ported bravo cad package dedicated graphics terminal implementation macintosh environment 
began receive reports new implementation slower previous dedicated graphics terminal version 
interface design group extensive klm analyses identify source problems 
example analysis identified major problem menu paradigm 
original environment menu selections remained screen marching menus permitting multiple low level selections repeating higherlevel selections 
new implementation menu organization followed macintosh rules required menus disappear lowest level selection 
resulting need repeat higher order selections greatly increased task execution times 
candidate dialog box evaluated klm 
aspects interface refined klm reducing depth menu commands levels increase working speed eliminating functions options required cad tasks 
new design implemented unix vms platforms bravo system currently successful widely suite cad applications 
quantification execution time provided klm valuable internally help justify focus interface design efforts set priorities externally help support competitive claims 

ngomsl applications case 
television control system 
summarizes design problem involving designing screen menu interface high consumer electronics television set 
current technology systems television set computer goms 
control user perform setup adjustment tasks navigating menu structure selecting options setting adjustments 
complex consumer electronics products available resulting interface fairly complex considerable potential 
needless say ease learning extremely important product 
currently screen menu interfaces complex televisions obscure menu labels deep menus frequently performed tasks arbitrary organization product features user tasks inconsistent navigation selection methods 
product development situation described adequate time extensive user testing iteration prototypes ngomsl analysis applied effort help arrive improved interface quickly 
actual candidate designs generated usual ways analyzed goms 
early result ngomsl task analysis determining key distinction infrequent critical tasks required set television configure cable system occasional tasks adjusting set viewing changing brightness major task watching programming tv vcr 
actual starting point ngomsl analysis initial proposal improved interface design main virtue simplicity single function key cycle possible control functions set resulting simple navigation methods screen displays 
design preserved setup adjustment distinction confirmed user testing superior original interface 
ngomsl analysis verified interface quite slow interfering viewing task 
response proposed interface conventional menu structure analysis showed user testing confirmed interfered user main task 
ngomsl analysis showed new prototype inconsistent methods navigating menu structure setup adjustment methods different lead increased learning times user frustration inconsistent methods moving low level function 
correcting problems identified ngomsl analysis produced simpler easier learn interface 
interface analyses revised designs appeared television product line considered wider adoption manufacturer 
case 
nuclear power plant operator associate 
brief ngomsl training workshop meyer performed fairly complete analysis interface experimental prototype intelligent associate nuclear power plant operators 
system combined outputs separate expert systems operator support systems providing integrated surveillance function 
complete prototype system involved multiple networked computers total display monitors included full simulation actual nuclear power plant 
basic concept system information provided separate expert support systems integrated single coordinating agent responsible informing operator alarm event making recommendation referring operator appropriate subsystem supporting detail 
ngomsl methodology choice apply difficulty performing usability tests highly trained users limited availability complex system 
example emergency scenarios fully supported prototype system 
top level ngomsl method written show basic structure task associate clarifying relative roles human operator system 
top level method conventional situation operator associate system goms 
simply operator working dealing various possible alarms interacting separate expert support systems 
operator required engage fairly elaborate reasoning information searching ill structured problemsolving right alarm event 
contrast associate system alarm event relevant subsystem recommendation action 
requested human operator explicitly state agreement disagreement recommendation 
subsequent interactions concerning alarm event strictly operator initiative operator free ignore alarm disregard recommendation deal 
system potentially considerably simplified initial reasoning problem solving required handle alarm event complicate operator task significantly 
course associate accurate trusted operators come rely unduly addressed goms analysis 
lower levels interaction ngomsl model identified specific problems suggested solutions 
example operator designated alarm event displayed calculator palette buttons enter number required method clearly convoluted necessary 
example lack certain information displays resulted methods required excess looking display cases requiring large physical movements 
final example newer design support system provided line operating procedures predicted faster previous design improved generic methods 
case 
intelligent tutoring system 
steinberg describe ngomsl analysis revise interface intelligent tutoring system 
tutoring system concerned training air force maintenance personnel troubleshooting aircraft hydraulic systems flight control systems 
basic content structure tutoring cognitive analysis task domain troubleshooting skills required 
tutoring system provided full multimedia environment trainee move aircraft selecting areas aircraft manipulate cockpit controls observe external components motion open inspection panels examine internal components 
user basic method troubleshooting think troubleshooting operation carry 
original interface assumed troubleshooting operations local sense user think single component observe manipulate carry action think component action combination perform 
ngomsl analysis showed troubleshooting activities larger scope spanning components locations aircraft 
typical activity input output test inputs supplied set components components entirely different location observed 
example enter cockpit set switches start moving control stick observe see moved 
original interface support multiple component input output tests user traverse component hierarchy simulated aircraft times perform component actions observations individually 
revised interface suggested ngomsl analysis allowed user easily view act multiple parts aircraft rapid access aircraft cockpit 
reflected basic structure task realistic fashion making faster simpler carry testing activity context tutoring system 
case 
industrial scheduling system 
report ngomsl model deal common situation existing interface extended 
system question partly automated scheduling system managing equipment goms 
maintenance activities steel making plant 
shutting equipment steel plants serious effects production scheduling accurate management critical 
original version system included automatically generated interface viewing 
required extension allow users enter directly scheduling system delete modify scheduled 
steel plant natural hierarchical structure levels deep terminal non terminal location set machines shut maintenance 
non terminal location plant shut downtime period deemed shut 
natural hierarchical structure choice display downtime information combination plant hierarchy date user viewed grid showing locations rows days columns cell containing number scheduled downtime hours 
selecting row user move hierarchical level view broken detail 
clicking cell user view list individual downtime schedule items comprising listed total hours 
new set requirements allow user enter new delete modify existing ones assumption list modifications unordered 
solution simply add dialog box grid display interface relevant location date selected traversing hierarchy user simply specify downtime start time duration information location date 
implementation effort minimal 
goms analysis showed resulting interface extremely inefficient 
adding new downtime requires traversing hierarchy affected location date modifying location downtime date requires deletion reentry 
side effect method allow user create new downtime entry simply selecting modifying existing downtime dates location downtime 
redesigned interface alleviated problems 
solution form screen user specify downtime attributes selecting context sensitive lists editing attribute fields 
downtime attributes location levels simultaneously displayed 
selecting location required traversing plant structure hierarchy locations involved date selection consisted simply filling set fields selection lists contents determined higherlevel selection 
addition new downtime entry created selecting existing entry modifying fields needed 
goms analysis interface designs required days total described difficult time consuming 
return analysis difficulties original interface clear set actual downtime scheduling tasks predicted redesigned interface require half execution time original due substantial improvement modifying existing schedule times 
case 
cad system ergonomic design 
gong see gong kieras provides detailed case study application goms methodology actual software product 
program cad system ergonomic analysis workplace design emphasis biomechanical analyses detect problems occupational safety situations assembly line jobs requiring handling awkward heavy objects 
user typically industrial engineer describe situation specifying user physical posture carrying step job parameters weight lifted object program generate information stress factors likelihood lower back injury 
program sold commercial basis pc dos version gong task develop macintosh version program commercial distribution 
goms 
applying goms analysis refine design suggested fact domain experts available serve subjects formal conventional user test attempt collect informal feedback produced information functionality user expectations ease 
gong constructed goms model initial version software adhered macintosh interface guidelines examined model problems 
example problem interface assumed default method specifying posture users probably override favor far simpler easier method 
example methods retrieve ltm operators user memorize associations commands menu names appeared 
final example certain methods involved time consuming interaction modal dialogs dialog boxes explicitly dismissed user continue 
gong lists specific identified problems addressed specific interface design solutions 
revised interface predicted faster learn faster original interface 
subsequent empirical test confirmed predictions 
gong reported time spent developing working goms model days compared days spent software development programming days spent informal user feedback collection formal evaluation study 
ngomsl methodology usefully accurate predictions helped identify specific usability problems provided basis design solutions 
addition despite widespread opinion goms analysis time consuming practical actual effort required quite reasonable especially single design iteration methodology produced substantial improvement learning execution time 

cpm goms application case 
telephone operator workstation 
details application technical managerial gray john atwood atwood gray john 
telephone serving new york new england nynex considered replacing workstations toll assistance operators taos handle calls collect calls person person calls new workstation claimed superior manufacturer 
major factor making purchase decision quickly expected decrease average time call offset capital cost making purchase 
average decrease second time call save estimated year decision economically significant 
evaluate new workstations nynex conducted large scale field trial 
time research group nynex worked bonnie john cpm goms models effort predict outcome field trial 
models constructed current workstation set benchmark tasks 
modified models reflect differences design workstations included different keyboard screen layout keying procedures system response time 
modeling effort took person months time included making extensions cpm goms modeling technique handle type task teaching nynex personnel cpm goms 
models produced quantitative predictions expert call handling time benchmark task workstations combined frequency call type predicted new workstation average seconds slower old workstation 
new workstation save money cost nynex dollars year 
counter intuitive prediction 
new workstation technically superior goms 
features 
workstation advanced technology communicate switch higher speed 
new keyboard placed frequently keys closer 
new display graphic user interface recognizable icons obscure alphanumeric codes 
procedures streamlined combining previously separate keystrokes keystroke defaults eliminate keystrokes call types net decrease keystroke call 
manufacturer nynex believed new workstation substantially faster old estimate seconds faster call 
despite intuition contrary empirical field trial data analyzed supported cpm goms predictions 
new workstation seconds slower old workstation 
addition predicting quantitative outcome field trail cpm goms models explained new workstation slower old workstation empirical trials typically 
simple estimate new workstation faster greater speed new features considered isolation 
execution time task depends components interaction fit captured critical path cpm goms model 
structure task faster features new workstation failed shorten critical path 
examination critical paths revealed situations new keyboard design slowed call new screen design change time call new keying procedures fewer keystrokes increased time calls advanced technology communication technology slowed call 
complex interaction features task tao captured displayed way analysis technique empirical trial able accomplish 
nynex decided buy new workstations 
initial investment adopting technique paid purchase decision allowing nynex design evaluations little hours analysis 

summary goms family analysis techniques provide different types information system design evaluation discussed section 
real world cases section demonstrate uses provide lessons 
systems involved actual systems development showing goms just research approach applicable real world software system development 
analyses worked generated design guidance showing goms modeling produce information effectively design process 
systems quite varied type mix multimedia tutoring systems specialized clerical applications process control systems consumer electronics systems domain experts general purpose desktop applications 
goms applicable types applications levels domain expertise 
systems quite complex elaborate refuting stereotype goms limited desktop tasks text editing goms applied large scale fully complicated real world systems 
goms 
goms modeling provided usability information system earliest design phases undergoing redesign evaluated implementation 
goms useful phases system development 
cases goms evaluation provided usability information empirical evaluation extremely difficult showing goms useful evaluation techniques practical 
documented effort required conduct analyses reasonable light value results obtained showing actual experience goms modeling cost effective 
cases analyses done groups brief workshop tutorial showing goms learned quickly 
current family goms techniques truly usable useful designers analytic tool 
readers interested details theoretical differences goms family members pointers ongoing cognitive modeling research hci directed john kieras press 
acknowledgments authors contributed equally article order names reflects alphabetical order authorship 
wayne gray judy olson comments drafts 
bonnie john supported office naval research cognitive science program contract number advanced research projects agency dod monitored office naval research contract 
david kieras supported office naval research cognitive science program number nr advanced research projects agency dod monitored contract 
views contained document author interpreted representing official policies expressed implied office naval research advanced research projects agency government 
atwood gray john 
project analytic empirical methods applied real world chi problem 
lewis polson mckay eds 
human computer interface design success stories emerging methods real world context 
san francisco morgan kaufmann publishers 
beard smith 
press 
quick dirty goms case study computed tomography interpretation 
human computer interaction 
byrne wood sukaviriya foley kieras 

automating interface evaluation 
proceedings chi boston ma usa april 
new york acm pp 

goms 
card moran 

user technology pointing pondering 
goldberg 
ed 
history personal workstations 
new york acm 
pp 
card moran newell 

keystroke level model user performance time interactive systems 
communications acm 
card moran newell 

psychology human computer interaction 
hillsdale nj lawrence erlbaum associates 
carley 

computational organization theory 
hillsdale nj lawrence erlbaum associates 
chuah john pane 

analyzing graphic textual layouts goms results preliminary analysis 
proceedings companion chi boston ma usa april 
new york acm pp 

diaper 
ed 

task analysis human computer interaction 
uk ellis horwood 
dillon sweeney maguire 

survey usability engineering european industry current practice needs 
diaper guest eds 
people computers viii 
cambridge cambridge university press 
pp 



goms models design documentation user interfaces uneasy 
position workshop human computer interaction advances derived real world experiences interchi conference amsterdam april 


designing help goms model information retrieval evaluation 
human factors pp 

meyer 

goms analysis evaluation tool process control evaluation prototype system 
technical report oecd reactor project norway 
applied motion study 
new york macmillan 
gong 

validating refining goms model methodology software user interface design evaluation 
ph dissertation university michigan 
gong 

designing minimal documentation goms model usability evaluation engineering approach 
proceedings chi seattle washington april may acm new york 
gong kieras 

validation goms model methodology development specialized commercial software application 
proceedings chi boston ma usa april 
new york acm pp 


apprenticeship instruction real world tasks coordination procedures mental models strategies 
ernst rothkopf ed review research education 
washington 
goms 
gray john atwood 
project validation goms prediction explanation real world task performance 
human computer interaction pp 

gray 
damaged merchandise 
review experiments compare usability evaluation methods 
manuscript submitted publication 
john 

extensions goms analyses expert performance requiring perception dynamic visual auditory information 
proceedings chi seattle washington april may acm new york 
john 

deeper comparison methods reaction nielsen phillips new data 
proceedings companion chi boston april acm new york 
pp 

john 
goms 
interactions vol 

pp 

john gray 
goms analyses parallel activities 
tutorial notes chi denver colorado may acm new york 
john kieras 
press 
goms family analysis techniques comparison contrast 
acm transactions computer human interaction john vera 

goms analysis graphic machine paced highly interactive task 
proceedings chi monterey may acm new york 
pp 

john vera newell 

real time goms model expert behavior highly interactive task 
behavior information technology pp 

jong 
subgoal structure cognitive control mechanism human computer interaction framework 
ph dissertation university michigan 
karat bennett 

modeling user interaction methods imposed designs 
tauber ackermann eds mental models human computer interaction 
amsterdam elsevier 
karat schafer transfer word processing systems 
proceedings chi boston april new york acm pp 

kieras 

practical goms model methodology user interface design 
helander ed handbook human computer interaction 
pp 

amsterdam north holland 
kieras 

goms modeling user interfaces ngomsl 
tutorial notes chi conference human factors computer systems boston ma april 
kieras 
press 
guide goms model usability evaluation ngomsl 
helander landauer eds handbook human computer interaction 
second edition 
amsterdam north holland 
goms 
kieras 
press 
task analysis design functionality 
allen ed handbook computer science engineering crc press kieras polson 

approach formal analysis user complexity 
international journal man machine studies 
kieras wood hornof 

glean computer tool rapid goms model usability evaluation user interface designs 
uist proceedings 
ainsworth 

guide task analysis 
london taylor francis 
landauer 

trouble computers usefulness usability productivity 
cambridge mit press 
lee polson bailey 

learning transfer measurement tasks 
proceedings chi austin texas april may acm new york pp 

lerch mantei olson 

translating ideas action cognitive analysis errors spreadsheet formulas 
proceedings chi 
new york acm 
lewis rieman 

task centered user interface design practical 
book available ftp cs colorado edu pub cs hci design book 
lohse 

cognitive model understanding graphical perception 
humancomputer interaction 


cad generation user interface 
computer aided engineering november 


case study goms analysis extension user interfaces 
technical report etr research newcastle laboratories nsw australia 
newell simon 

human problem solving 
englewood cliffs nj prenticehall 
nielsen mack 
eds 

usability inspection methods 
new york john wiley sons nielsen phillips 

estimating relative usability interfaces heuristic formal empirical methods compared 
proceedings interchi amsterdam netherlands pp 
new york acm 
nilsen jong olson polson method engineering data model practice 
proceedings chi monterey california may may acm new york 
pp 

norman 

design rules analyses human error 
communications acm 
goms 
jones horton 

machinery handbook book mechanical engineer 
twentieth edition fourth printing industrial press new york 
olson moran 
mapping method muddle guidance methods user interface design 
lewis polson mckay eds 
humancomputer interface design success stories emerging methods real world context 
san francisco morgan kaufmann publishers 
olson olson 

growth cognitive modeling human computer interaction goms 
human computer interaction 
peck john 

browser soar cognitive model highly interactive task 
proceedings chi monterey california may may acm new york 
pp 

reason 

human error 
cambridge cambridge university press 
rieman lewis young polson raven writing desk 
lessons interface consistency analogical reasoning cognitive architectures 
proceedings chi boston ma usa april 
new york acm pp 



understanding user errors database query 
ph dissertation university michigan 
steinberg 

cognitive task analysis interface design technical troubleshooting 
gray murray eds proceedings international workshop intelligent user interfaces 
new york acm 
pp 

wharton rieman lewis polson 

cognitive walkthrough method practitioner guide 
nielsen mack eds 
usability inspection methods 
new york john wiley sons wood 

issues implementation goms model design tool 
unpublished report university michigan 
van 

human engineering guide equipment design revised edition 
washington american institutes research 
vera rosenblatt 

developing user model intelligent agents 
moore lehman eds 
proceedings seventeenth annual conference cognitive science society 
mahwah nj lawrence erlbaum 
pp 

