re versatile scanner generator peter donald cowan computer science department computer systems group university waterloo april usually claimed lexical analysis routines coded hand despite widespread availability scanner generators efficiency reasons 
efficiency consideration exist freely available scanner generators gla generate scanners faster hand coded ones 
generated scanners tailored particular environment scanners environments possible usually complex hand coded scanner appealing 
describe re scanner generator generates scanners faster usually smaller produced scanner generator known authors including gla adapt easily environment 
categories subject descriptors programming languages language classifications specialized application languages programming languages processors general terms algorithms languages performance additional key words phrases lexical analysis scanner generator lexical analysis routines coded hand despite widespread availability scanner generators 
example unix systems scanner generator installed typically lex flex unix applications mechanically generated scanner 
commonly cited reason lex generated scanners performance times slower equivalent hand coded scanners 
result considerable research improving performance mechanically generated scanners 
gla scanner generator produce scanners faster hand coded scanners 
hand coded scanners prevalent 
possibility due difficulty adapting generated scanners specific applications 
scanner generators tailored particular environment 
fact trend years integrate scanner generators compiler toolkits 
example gla part eli compiler construction system rex part gmd toolbox compiler construction scanners permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
copyright association computing machinery appear 
known cocktail compiler compiler toolbox karlsruhe 
generated tools assume existence library support modules error handling input buffering symbol table management similar functions 
support modules simplify task compiler interpreter adaptation purposes difficult 
adaptation environments difficult assumptions input restrictions placed tokens order achieve better performance 
re goes extreme concentrates solely generating code matching regular expressions 
re successful task produce scanners faster created scanner generators surprisingly usually smaller 
re assumptions input place restrictions tokens 
large degree performance flexibility re generated scanners due novel method determining refill buffer avoids complications introduced sentinel method 
sections describe re scanner specifications discuss specifications converted scanners give performance results achieved implementation including comparison gla 
scanner specifications re source file consists code interleaved comments form re containing scanner specifications 
specifications replaced generated code invoked simply falling comments illustrated appendix define yycursor unsigned char scan uint unsigned char re null simple scanner 
scanner specification takes form list rules rule consisting regular expression action expressed executable code 
illustrates trivial re scanner specification example 
call code generated specification print return print rule return id rule return dec rule return hex rule return err rule sample specification 
matches character 
rule example match bit character 
rules listed order precedence 
determine longest possible prefix remaining input matches regular expressions execute action applicable rule 
re different language straightforward 
re generated scanners require additional support code 
dfa sample specification 
state start state 
accepting states labeled number rule match 
example state accepts rule 
transitions differing label represented arc example state transitions state characters re different scanner generators user provide input buffering mechanism scanner generated code simply assumes user defined pointers yycursor routine 
executing generated code yycursor set point past character buffer respectively 
token recognized action executed yycursor set point just past token 
called buffer needs filling additional input characters provided 
called yycursor point character scanned set point possible backtracking point buffer 
update possibly yycursor returning 
typically yycursor defined macros 
things re doesn provide re doesn provide things available conventional scanner generators including default rules input pseudo tokens buffer management routines 
supplied user 
handicap allows re generated scanners tailored environment 
example scanner defined compiles bytes code size equivalent hand coded routine 
scanner generators produce scanners competitive hand coded analyzers case 
overly difficult implement traditional scanner re 
example appendix contains support code scanner benchmarked table 
note code allows arbitrarily long contiguous tokens provides line column number information 
generating directly executable scanners demonstrated gla generating directly executable code tables result faster scanners 
achieve speed gla generated scanners assumptions input place certain restrictions tokens section show generate directly executable scanners avoid restrictions faster usually smaller 
approach added benefit faster scanners easily created expense increased code size technique akin loop unrolling 
constructing dfa step generating directly executable scanner construct dfa recognizes regular expressions specification 
presents dfa recognizes regular expressions 
possible algorithm constructing dfa 
dfa task assumptions restrictions discussed detail sections 
scanning input expressed follows starting start state move state state transitions labeled consecutive characters input 
transitions backtrack accepting state say path spells token rule associated determines code executed 
result problem generating scanners essentially reduces problem generating executable representation dfa 
generating code assume input entirely contained single buffer generating code dfa relatively straightforward illustrated code templates 
note difference prologue int goto fin yycursor switch case action code states code accepting state lq yycursor rule yycursor mq switch yycursor case goto default goto fin code non accepting state lq yycursor mq switch yycursor case goto default goto fin directly executable scanner 
code generated scanner consists prologue followed code state 
start start state 
action denotes code associated rule goto denotes state reached state transition labeled rule denotes rule associated state save backtracking information 
labels section 
templates accepting non accepting states accepting states additional code save backtracking information 
shows code generated state 
buffering complications arise input contained single buffer additional code needed filling buffer necessary 
yycursor yycursor switch yycursor case goto case goto case goto case goto case goto default goto fin code state 
yycursor yycursor yycursor switch yycursor code state 
sentinel method scanner generators sentinel method determine buffer needs filling 
simplest case symbol appear valid input chosen sentinel character 
extra state added dfa transitions state sentinel symbol added original states 
dfa arrives new state time refill buffer 
buffer scanning restarted previous state 
unfortunately possible approach outlined necessary information simply available 
code added state save necessary information result slower larger scanners 
gla solves problem ensuring sentinel gets inserted tokens case scanner restarted start state 
ensure sentinel gets inserted tokens gla allows newline ascii lf characters appear token disallows buffering partial lines buffering re generated scanners check buffer needs filling simply comparing yycursor 
method inspired mechanism guard stack overflow reduce amount checking 
checks inserted certain key states 
checks simply ensure input buffer scan proceed key state 
example dfa sufficient check characters buffer starts character buffer dfa states 
checks required 
checks inserted key states form yycursor maximum number characters consumed key state reached 
example shows code generated state 
set key states determined discovering strongly connected components sccs dfa 
scc maximal subset states exists path state subset 
set key states consists states non trivial sccs start state 
note scc include subset states subset removed acyclic 
describes simple heuristic choosing subset 
practice non trivial sccs encountered consist single state current version re simply includes states non trivial sccs algorithm compute sccs 
optimizations optimizing compilers generating smaller slightly faster code transformations applied generated code 
eliminating backtracking consider state dfa 
note transitions state reach accepting states backtracking information need saved code default case changed go directly code associated state 
result optimization shown 
generally optimization applied accepting states transitions yycursor switch yycursor case goto case goto case goto case goto case goto default goto code state backtracking eliminated 
accepting states 
optimizing switches compilers generate jump table set statements switch statement depending distribution case labels 
compilers decision method biased generating jump tables cases results faster albeit larger code 
experience directly executable scanners shown replacing jump tables input contains newlines gla scanner attempt buffer entire input stream 
problem detecting stack overflow lr parsers probably best left hardware mechanisms 
noted finding minimal set states remove scc order render acyclic equivalent feedback vertex set problem np complete 
statements results scanners smaller surprisingly cases slightly faster result capability replacing switch statement statements added re 
re bases decision generate switch statement replace ifs solely density switch statement 
surprising simple heuristic works 
esoteric applications input alphabet simple interval re advantage provision don care entries switch statement case matches statements switch executed 
examples table re simply better job generating code switch statements compiler 
address problem generating code switch statements 
replacing switches ifs replacing switch statement statements useful sort cases label group rule subranges illustrated 
re replaces switch linear binary search depending number subranges switch yycursor case case goto case goto case case goto case case goto case case goto case goto case case goto case case goto switch state 
switch 
subranges linear search generated binary search 
show linear binary searches respectively replace yycursor goto yycursor goto yycursor goto yycursor goto yycursor goto yycursor goto goto linear lookup code sequence state 
see table examples 
number distinct subranges divided total number cases 
yycursor yycursor goto yycursor goto yycursor goto goto yycursor goto yycursor goto goto binary lookup code sequence state 
switch 
note particular comparison 
optimization eliminates comparison time applied 
note comparisons required top bottom range 
simplifying switches general rule better replacement code generated switch contains fewer subranges 
way reducing number subranges switch expense speed locate base switch similar replace code cases appear identically base switch goto code generated base switch 
re uses optimization advantage generating code transitions states matching keywords 
example note switches states differ switch state respectively 
shows code generated states 
way yycursor yycursor goto yycursor yycursor goto yycursor yycursor goto yycursor yycursor goto goto code states optimizations 
implementing optimization construct tunnel automaton dfa generate code tunnel automaton 
common subexpression elimination compilers fact yycursor figures loaded register 
assigning yycursor local variable 
experimental results table compares re generated scanners hand coded lcc scanner comparable gla flex generated scanners variety platforms 
reports times seconds required various scanners scan lines source 
byte source file essentially time space program user sys total text data bss total gcc flex cem flex cf lcc gla re re cc flex cem flex cf lcc gla re re sparc gcc flex cem flex cf lcc gla re re gcc flex cem flex cf lcc gla re re gcc flex cem flex cf lcc gla re re table comparison generated scanners 
consists copies source james clark sgml parser times reported averages trials sizes reported include library code flex provides number table compression options including cem tables optimized space cf tables optimized speed 
default re heuristic decide switch replaced ifs option forces re generate switches 
comparisons meaningful semantic processing code removed lcc scanners code provide line column number information added re specification 
remaining differences note scanners include ffl flex generated scanners provide line column number information 
ffl gla generated scanner assumes bit input 
general rule re generated scanners fastest followed gla generated scanner lcc scanner 
flex generated scanners significantly slower 
space optimized flex scanner smaller default re scanner narrow margin 
architectures notably ibm table driven scanners probably produce better results ibm compilers typically generate poor code large routines 
various scanners input files tests available anonymous ftp csg uwaterloo ca pub peter re sampler tar flex available anonymous ftp ftp uu net packages gnu flex tar gla available anonymous ftp ftp cs colorado edu part eli package pub cs eli eli tar lcc front available anonymous ftp princeton edu pub lcc tar alpha version re soon available anonymous ftp csg uwaterloo ca pub peter re re tar related key performance flexibility re generated scanner approach determine buffer needs filling 
interestingly lcc scanner uses similar approach certain concessions keep bookkeeping manageable 
comparison gla natural compare re gla generates directly executable scanners 
re gla differences simply targeted different types users gla intended people simply wish leverage efforts existing tools libraries re intended people specialized needs willing provide support routines 
example gla provides buffering mechanism re users supply 
differences unique gla addressed part previous sections 
interest differences code re gla generate 
scanners generated re gla differ primarily aspects determine buffer needs filling generate code switches 
gla uses ascii nul character sentinel determine buffer needs filling 
improve speed reduce size generated scanners gla buffers complete lines restricts tokens contain newline ascii lf characters token embedded newline character comment required recognized auxiliary scanner written code perform buffering related bookkeeping done automatically gla generated code 
available anonymous ftp ftp uu net pub text processing sgml tar gla generated scanner sizes include size error reporting module err discussed detail section 
mechanism re uses refill buffer eliminates restrictions allows re generate faster smaller scanners 
re allows auxiliary primary scanners specified regular expressions 
example appendix contains auxiliary scanner comments 
re gla usually replaces switches ifs 
re gla case heuristic decide switches replace generates switch start state uses ifs rest 
gla replaces switches code sequences form yycursor goto 
yycursor sn goto ln bit vectors membership tests involving sets element 
optimization state transition test remain state performed 
example shows gla generated code state note static unsigned char 



yycursor goto yycursor goto gla code state 
element entries bit vectors reduce scanner size gla generated scanner crash behave unpredictably non ascii character appears source sense results section bit misleading gla specification obtain figures table typical gla specification 
usually scanners implemented gla handle keywords identifiers gla optimized 
table presents fair comparison keyword matching rules removed gla re specifications 
re generated scanners faster smaller mips cc compiled gla scanner slightly faster 
note re specification substantially sped technique akin loop unrolling 
replacing original keyword matching rule re specification ret id rules gla generate statement 
compilers generate object code 
checks ensure bit characters appear input 
za za 
time space program user sys total text data bss total gcc gla re re re cc gla re re sparc gcc gla re re gcc gla re re gcc gla re re table scanner performance keywords treated identifiers 
uses unrolled specification 
ret id ret id ret id ret id ret id ret id ret id ret id ret id reduces number buffer checks results significant speed improvement scanner 
summary described re tool creating lexical analyzers 
tools re concentrates solely generating efficient code matching regular expressions 
purpose re suitable wider variety applications allows generate scanners approach hand crafted scanners terms size speed 
compared scanners generated flex gla re generated scanners faster cases smaller 
re generated scanners perform room improvement 
near term improvements include gla bit vectors simplify switches adding state unrolling operator 
longer term inline actions added re 
example specification fc fc obtain value previously scanned integer 
typically sorts specifications action specification 
acknowledgments authors referees valuable comments suggestions 
scanner define bsize define ret cur cursor return define define yycursor cursor define lim define ptr define cursor fill cursor typedef struct scanner int fd uint line bot tok ptr cur pos lim top eof scanner fill scanner cursor eof uint cnt tok bot cnt move partial token bottom memcpy bot tok lim tok tok bot ptr cnt cursor cnt pos cnt lim cnt top lim bsize buffer needs expanded buf malloc lim bot bsize sizeof memcpy buf tok lim tok tok buf ptr buf ptr bot cursor buf cursor bot pos buf pos bot lim buf lim bot top lim bsize free bot bot buf cnt read fd char lim bsize bsize eof eof lim cnt eof lim cnt return cursor int scan scanner cursor cur std tok cursor re goto comment rules goto std cursor eof ret pos cursor line goto std printf unexpected character tok goto std comment re goto std cursor eof ret tok pos cursor line goto comment goto comment aho sethi ullman compilers principles techniques tools 
addisonwesley 
reprinted corrections 
bernstein producing code case statement 
software practice experience october 
efficient computation lalr look ahead sets 
acm transactions programming languages systems october 
ellis stroustrup annotated manual 
addison wesley 
fraser hanson retargetable compiler ansi sigplan notices october 
garey johnson computers intractability guide theory npcompleteness 
freeman 
gray fl gla generator lexical analyzers programmers 
usenix conference proceedings june 
gray levi sloane waite eli complete flexible compiler construction system 
communications acm february 
efficient generation lexical analysers 
software practice experience 
harrison formal language theory 
addison wesley 
hennessy mendelsohn compilation pascal case statement 
software practice experience september 
horspool whitney faster lr parsing 
software practice experience 
jacobson tuning unix lex true say lex 
usenix conference proceedings washington dc winter pp 


kernighan ritchie programming language nd ed 
prentice hall 
lesk lex lexical analyzer generator 
computing science technical report bell telephone laboratories murray hill nj 
paxson flex man pages 
flex tar available anonymous ftp ftp uu net packages gnu 
fast lr parsing 
proceedings acm sigplan symposium compiler construction july acm 
sale implementation case statements pascal 
software practice experience september 

