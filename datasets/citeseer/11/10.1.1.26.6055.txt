architecture intrusion detection autonomous agents jai jose omar garcia fernandez david eugene spa ord diego zamboni coast laboratory purdue university west lafayette cs purdue edu coast technical report june intrusion detection system architectures commonly commercial research systems number problems limit con scalability eciency 
common shortcoming existing architectures built single monolithic entity data collection processing 
review architecture distributed intrusion detection system multiple independent entities working collectively 
call entities autonomous agents 
approach solves problems previously mentioned 
motivation description approach partial results obtained early prototype discussion design implementation issues directions 
background motivation start introducing concepts describing limitations see existing intrusion detection systems distributed approach autonomous agents help overcoming limitations 
intrusion detection intrusion detection id de ned problem identifying individuals com portions supported contract mda maryland procurement oce sponsors coast laboratory 
main author contact person questions concerning puter system authorization legitimate access system abusing privileges insider threat 
add de nition identi cation attempts computer system authorization abuse existing privileges 
de nition matches intrusion de ned set actions attempt compromise integrity con dentiality availability resource 
received comments regarding word intrusion previous de nition 
de nition word include concept insider resources attempt 
sense proper term intrusion misuse detection 
de nition term intrusion represent intrusion misuse 
broad categorization models intrusion detection described misuse detection model detection performed looking exploitation known weak points system described speci pattern sequence events data signature intrusion 
anomaly detection model detection performed detecting changes patterns utilization behavior system 
type intrusion detection described 
performed building statistical model contains metrics derived system operation intrusive observed metrics signi cant statistical deviation model 
intrusion detection system ids computer program attempts perform id misuse anomaly detection combination techniques 
ids preferably perform task real time 
idss usually classi ed host network 
host systems base decisions information obtained single host usually audit trails network systems obtain data monitoring trac information network hosts connected 
notice de nition ids include preventing intrusion occurring detecting reporting intrusion operator 
desirable characteristics ids characteristics identi ed desirable ids run continually minimal human supervision 
fault tolerant sense able recover system crashes accidental caused malicious activity 
startup ids able recover previous state resume operation una ected 
resist subversion 
ids able monitor detect modi ed attacker 
impose minimal overhead system running interfere normal operation 
able con gured security policies system monitored 
able adapt changes system user behavior time new applications installed users changing activity new resources available cause changes system resource usage patterns 
number systems monitored increases chances attacks increase consider characteristics desirable able scale monitor large number hosts providing results timely accurate manner 
provide graceful degradation service sense components ids working reason rest ected little possible 
allow dynamic recon guration 
large number hosts monitored impractical restart ids change 
limitations existing ids existing network host idss perform data collection analysis centrally monolithic architecture 
mean data collected single host audit trails monitoring packets network analyzed single module different techniques 
idss perform distributed data collection preprocessing modules distributed hosts monitored collected data shipped central location analyzed monolithic engine 
review systems take approaches 
number problems architectures central analyzer single point failure 
intruder prevent working example crashing slowing host runs network protection 
scalability limited 
processing information single host implies limit size network monitored 
limit central analyzer unable keep ow information 
distributed data collection cause problems excessive data trac network 
dicult recon gure add capabilities ids 
changes additions usually done editing con guration le adding entry table installing new module 
ids usually restarted changes take ect 
analysis network data awed 
shown performing collection network data host data destined provide attacker possibility performing insertion evasion attacks :10.1.1.119.399
attacks mismatched assumptions network protocol stacks dif ferent hosts hide attacks create service attacks 
idss designed distributed collection analysis information 
hierarchical system described describes cooperative system central authority 
systems solve problems mentioned recon guration adding capabilities ids described designs 
autonomous agents software agent de ned software entity functions continuously autonomously particular environment able carry activities exible intelligent manner responsive changes environment ideally agent functions continuously able learn experience 
addition expect agent inhabits environment agents processes able communicate cooperate move place place doing 
context de ne autonomous agent henceforth agent software agent performs certain security monitoring function host 
term agents autonomous independently running entities execution scheduled operating system process 
agents may may need data produced agents perform considered autonomous 
additionally agents may receive high level control commands indications start execution change operating parameters entities 
high level control interfere de nition agent autonomy 
agent may perform single speci function may perform complex activities 
autonomous agents improve characteristics ids agents independently running entities added removed system altering components having restart ids 
furthermore agents may provide mechanisms recon guring run time having restart 
additionally agents tested introducing complex environment 
agent may part group agents perform di erent simple functions exchange information derive complex results may able obtain 
argue ids data collection analysis elements agents solves problems mentioned section agent stops working reason things may happen agent truly independent produces results results lost 
agents continue normally 
data produced agent needed agents group agents may impeded working properly 
case damage restricted set agents 
agents continue normally 
agents properly organized mutually independent sets single point failure problem reduced 
organizing agents hierarchical structure multiple layers agents reducing data reporting upper layers system scalable 
idea proposed :10.1.1.158.8429
ability start agents independently systems monitored adds possibility recon guring ids parts having restart 
need start collecting new type data monitoring new kind attacks appropriate agents started disturbing ones running 
similarly agents longer needed stopped agents need recon gured sent appropriate commands having restart ids 
agent collects network information related host running reduce possibility subject insertion evasion attacks reducing number mismatched assumptions 
additionally agents data collection analysis entities provides desirable features agent programmed arbitrarily obtain data audit trail probing system running capturing packets network suitable source 
ids built collection agents cross traditional boundaries host networkbased idss 
agents stopped started disturbing rest ids agents upgraded increased functionality required 
long external interface remains unchanged backward compatible components need know agent upgraded 
agents implemented separated processes host agent implemented programming language best suited task perform 
related idea doing distributed intrusion detection new idea having di erent functions performed di erent modules ids 
grids project uc davis employs data source modules running host report information graph engines build graph representation activity network detect possible intrusions 
grids provides mechanisms allow third party security tools data sources clear data sources added removed updated 
nadir system performs distributed data collection employing existing service nodes los alamos national laboratory integrated computer network icn collect audit information analyzed central expert system 
describes ids runs realworld system presents interesting results considerations regarding collection storage reduction processing data large computer network 
novel approach cooperative security managers csm employed perform distributed intrusion detection need hierarchical organization central coordinator 
model csm performs local ids host running additionally communicate exchange information users moving network detect suspicious activity 
architecture allows take actions intrusion detected starting damage control activities stopping intruder actions 
unclear aspects mechanisms updated recon gured intrusion detection mechanisms locally csm 
idea employing widely distributed elements perform intrusion detection emulating extent biological immune systems giving system sense self explored :10.1.1.53.9010
distributed sensor system performs central processing organized hierarchical fashion described 
proposes system identical original design system done :10.1.1.158.8429
appeared years conference little way detail citations related enable determine may relate 
emerald project proposes distributed architecture intrusion detection employs entities called service monitors deployed hosts perform monitoring functions similar functionality propose agents :10.1.1.114.4122
de ne layers monitors performing data reduction hierarchical fashion 
monitors programmed perform function 
emerald project progress expect provide interesting results 
approach autonomous agents id foundation proposed :10.1.1.158.8429
papers introduced idea lightweight independent entities operating concert detecting anomalous activity prior approaches mentioned previously 
system architecture propose architecture call aafid autonomous agents intrusion detection building idss uses agents lowest level element data collection analysis employs hierarchical structure allow scalability described section 
overview simple example ids adheres aafid architecture shown 
gure shows essential components architecture agents transceivers monitors 
refer components aafid entities simply entities ids constituted aafid system 
user interface transceivers monitors data flow control flow agents hosts legend physical layout components sample aafid system showing agents transceivers monitors communication control channels 
ui logic organization aafid system showing communication hierarchy components 
bidirectional arrows represent control data ow entities 
notice logical organization independent physical location entities hosts 
physical logical representations sample ids follows aafid architecture called aafid system 
aafid system distributed number hosts network 
host contain number agents monitor interesting events occurring host 
agents host report ndings single transceiver 
transceivers host entities oversee operation agents running host 
exert control agents running host ability start send con guration commands agents 
may perform data reduction data received agents 
transceivers report results monitors 
monitor operation transceivers 
monitors access network wide data able perform higher level correlation detect intrusions involve hosts 
monitors organized hierarchical fashion monitor may turn report higher level monitor 
transceiver may report monitor provide redundancy resistance failure monitors 
ultimately monitor responsible providing information getting control commands user interface 
logical organization corresponds physical distribution depicted shown 
components export api communicate user 
section describe component greater detail 
components architecture agents agent independently running entity monitors certain aspects host reports abnormal interesting behavior de nition interesting appropriate transceiver 
example agent looking large number telnet connections protected host consider occurrence event suspicious 
agent generate report sent appropriate transceiver 
agent authority directly generate alarm 
usually transceiver monitor generate alarm user information received agents 
combining reports di erent agents transceivers build picture status host monitors build picture status network monitoring 
agents communicate directly aafid architecture 
send messages transceiver 
transceiver decides information agent con guration information 
notice architecture specify requirements limitations functionality agent 
may simple program monitors speci system variable event example counting number telnet connections minutes complex software system example instance idiot looking set local intrusion patterns 
long agent produces output appropriate format sends transceiver part aafid system 
internally agents allowed perform functions need 
possibilities agents may evolve time genetic programming techniques suggested :10.1.1.158.8429
agents may employ techniques retain state sessions allowing detect longterm attacks changes behavior 
currently architecture specify mechanisms maintaining persistent state 
agents migrate host host combining aafid architecture existing mobile agent architecture 
agents written programming language 
functionalities reporting communication synchronization mechanisms common agents provided shared libraries similar mechanisms 
framework implementation described provide tools mechanisms necessary writing new agents relatively simple task 
transceivers transceivers external communications interface host 
roles control data processing 
host monitored aafid system transceiver running host 
control role transceiver performs functions starts stops agents running host 
instructions start agents come con guration information monitor response speci events example report agent may trigger activation agents perform detailed monitoring host 
keeps track agents running host 
responds commands issued monitor providing appropriate information performing requested actions 
data processing role transceiver duties receives reports generated agents running host 
appropriate processing analysis reduction information received agents 
distributes information received agents results processing agents monitor appropriate 
monitors monitors highest level entities aafid architecture 
control data processing roles similar transceivers 
main di erence monitors transceivers monitor control entities running di erent hosts transceivers control local agents 
data processing role monitors receive reduced information transceivers control higher level correlations detect events involve di erent hosts 
monitors capability detect events may unnoticed transceivers 
control role monitors receive instructions monitors control transceivers monitors 
additionally monitors ability communicate user interface provide access point aafid system 
high level control accessed common api monitors programs user interfaces 
api includes mechanisms accessing information monitor providing commands monitor send commands lower level entities transceivers agents 
monitors control transceiver mechanisms employed ensure consistency information behavior 
aafid architecture currently specify mechanisms achieving consistency 
user interfaces complex feature full ids useless mechanisms allow users interact control 
looked full detail user interface problem issues mentioned section 
aafid architecture clearly separates user interface data collection processing elements 
user interface interact monitor api monitor exports request information provide instructions 
separation allows di erent user interface implementations concurrently aafid system 
example graphical user interface gui provide interactive access ids command line interface scripts automate maintenance reporting functions 
communication mechanisms transmission messages entities central part functionality aafid system 
communication entities disrupted system essentially stops working 
aafid architecture specify communication mechanisms minimum set characteristics consider desirable 
detailed discussion tradeo discussion implementation alternatives section 
consider important points communication mechanisms aafid system appropriate mechanisms different communication needs 
particular communication host may established di erent means communication network 
communication mechanisms cient reliable sense add signi cantly communications load imposed regular host activities provide reasonable expectations messages getting destination quickly alterations 
communication mechanisms secure sense resistant attempts external attacker authorized entity rendering unusable ooding overloading provide kind authentication con dentiality mechanism 
topics secure communications secure distributed computation security autonomous agents studied possibly previous aafid implementations obtain communication channels provide necessary characteristics 
ideas possible components course designing system architecture explored alternate architectural components 
brie discuss components simple network management protocol snmp audit router 
discuss merits employing system 
components currently part aafid architecture 
simple network management protocol snmp simple network management protocol snmp protocol designed facilitate exchange management information network devices 
snmp model comprises network management system nms managed devices 
snmp agent runs managed device snmp manager operates machines network going monitored 
snmp agent software typically designed minimize impact managed device 
run management software bear load management contain applications management information users example gui 
management information base mib database speci es variables maintained agents manager query set 
operations de ned get getnext information retrieval set information setting trap handling asynchronous events 
snmp model implement aafid architecture 
transceivers implemented snmp agents functionality monitor achieved snmp nms 
autonomous agents confused snmp agents unique identi ers specially designed mib 
object identi ers provide access set parameters mib values represent state autonomous agent retrieved set nms 
transceivers communicate monitor raising snmp traps 
autonomous agents communicate transceiver setting corresponding data values 
snmp implement aafid architecture interesting possibility 
number signi cant issues investigated including security fault tolerance ease extension deployment implementation 
audit router system audit trails essential source information ids 
problems arise di erent entities agents aafid architecture try access simultaneously 
may useful mechanism helps distributing information entities need 
describe possibilities implementing mechanism 
rst simplest scheme pass audit records agents select records need 
problem scheme agent process audit trail probably waste processing resources 
possibility embed agents central audit server passes appropriate records appropriate agents 
version approach successfully idiot ids 
problem model supports push mechanism client server interaction 
means server sends events agents available 
agent ready receive events events lost agent implements synchronization bu ering techniques 
propose mechanism uses central audit router 
router handles provides agents mechanisms retrieve records require 
central audit router maintains database agents audit classes require implements support routines bu er management see 
agents need register router give information regarding types audit classes require 
doing receive handle return 
agent simply read handle ready receive new events 
agent closes handle router information tables 
technique implements pull model computing 
downside audit router complex need manage bu ers associated tasks 
model support push model allowing agents specify callback function invoked audit router certain types data received 
way implement audit router model described separate audit stream di erent audit class bu ers 
audit router maintains agent agent agent system audit file buffer management database agents audit classes required audit router registration information legend control data stream system audit data audit router model 
audit router acts intermediary audit les agents require information 
agent handle list positions appropriate audit class bu ers 
audit record requested router returns record chronological order bu ers maintaining 
disadvantages aafid architecture identi ed shortcomings aafid architecture propose 
control role monitors single points failure 
monitor stops working transceivers controls producing useful information 
solved hierarchical structure failure monitor noticed higher level monitors measures taken start new monitor examine situation caused original fail 
possibility establish redundant monitors look set transceivers fails take interrupting operation 
duplicated monitors provide redundancy problem consistency duplication information 
mechanisms ensure redundant monitors keep information obtain results interfere normal operation ids 
aafid architecture currently specify access control mechanisms allow di erent users di erent levels access ids 
issue need addressed monitor transceiver agent levels user interfaces 
detection intrusions monitor level delayed necessary information gets agents transceivers 
problem common distributed idss 
implementations developed prototypes aafid architecture currently process improving implementations developing new ones 
prototype rst prototype built programmed combination perl tcl tk intended proof concept architecture :10.1.1.44.9066:10.1.1.119.399:10.1.1.119.399
implementation call aafid behavior components hardcoded extremely con gurable 
udp inter host communication mechanism solaris message queues intra host communication mechanism 
agents developed prototype detect di erent types interesting activity 
prototype allowed show aafid architecture doing distributed detection anomalous events 
gain experience writing agents allowed identify important functionality needed agents 
identify design issues improved 
example rst prototype integrates monitor gui single program proved limitation allow organize monitors hierarchical fashion 
second prototype drawing experiences obtained rst prototype developed second scratch call aafid prototype written exclusively perl advantage making easy port architectures expense performance loss 
main objective implementation allow extensive testing architecture emphasis ease con extensibility 
major contributions new implementation increased portability written completely perl 
implementation infrastructure provides base services necessary developing new entities 
de nition internal api developing new agents 
clear separation communication mechanism internals platform dependent elements 
clear de nition entity object relationships di erent classes objects 
di erent execution modes entities loadable modules stand programs facilitate developing testing new entities 
de nition extensible message format extended represent di erent types information 
furthermore handling message format internals encapsulated modi ed updated minor modi cations elements system 
separation monitor user interface 
implementation current test bed architecture developing new agents exploring new communication data reduction mechanisms 
detailed description aafid 
low level implementations rst prototypes helped re ning architecture identifying needs problems solved 
emphasis placed performance issues prototypes implemented highlevel scripting languages perl large memory cpu footprints 
reason architecture design starts stabilize started porting architecture lower system levels 
particular currently working integrating components aafid architecture unix kernel 
currently working incorporating additional auditing monitoring capabilities linux kernel possibly solaris bsd os windows nt 
advantages disadvantages lowlevel approach described section 
experiences comments design issues experiences obtained design implementations aafid architecture see section identi ed number issues subject 
issues classi ed broad categories communication components ids impact ids performance hosts monitored data processing reduction user interface design 
discussed section 
communication scalability reduce overhead imposed ids communication mechanisms employed cient possible 
classify communication needs ids major groups intra host communication processes inside single host communication processes running di erent hosts 
intra host communication general inter host communication mechanisms may communication host think intra host communication optimized fact entities involved host 
ids architecture identi ed main types intra host communication take place communication case transceiver sending message agents 
communication agents send information transceiver 
keeping needs mind considered di erent intra host communication schemes message queues 
mechanism system ipc facilities establishing message queues 
message queues provide method doing asynchronous message passing processes ective method transferring small amounts data messages processes 
process sends message kernel copies data pool memory kernel allocated hold messages 
receiving process requests retrieve message kernel copies message receiver address space 
message transfer requires data copy operations may result reduced performance messages passed large 
primary shortcoming message queues limited amount kernel memory available 
reason maximum number messages message queues times messages queue exist time usually fairly low 
solaris default number 
consequence resource limitation method vulnerable denial service attack process running system create message queue ll messages read 
act agents communicating transceiver 
additionally restrictions place practical limit number agents may running simultaneously system 
problems partially solved message queues limits reached switching possibly slower method communication 
think solves scalability problem 
advantage approach fairly straightforward implement provides mechanism prioritize messages agent messages processed immediately 
approach rst prototype versions system mainly lack scalability vulnerability attacks 
shared memory 
scheme provides ecient means sharing data processes data copied processes 
name suggests multiple processes share memory pages 
process mapping physical space space pointers code 
method signi cant improvement message queues agents pass large messages advantages disadvantages similar 
message queue scheme scheme requires adequate block kernel memory allocated hold data shared processes 
example solaris kernel attempts prevent allocation signi cant portion kernel memory allowing available kernel memory allocated 
hard limit scheme vulnerable avor denial service message queues attack sophisticated 
scheme introduces practical limit number agents run simultaneously system 
looking communication needs shared memory scheme adequate oneto communication transceiver write shared memory agents read access 
perspective new problem implement reliable signaling transceiver notify agents new information receive 
pipes 
traditional unix implementations pipe unidirectional rst rst unstructured data stream xed maximum size 
data written pipe read front pipe 
data removed pipe read 
read write le descriptors returned pipe system call inherited child processes 
feature allows multiple processes reading writing pipe 
common type pipe available system unix variants named pipe fifo rst rst le 
behave similar traditional pipe di er way created accessed 
svr uses streams mechanism implement named pipes 
major di erence srv pipe bidirectional 
type pipe communication entities running host 
disadvantages type pipe internal limit volume data put pipe reading process extract 
limit reached writing process blocks fails 
similarly reader process block fail attempts read empty pipe 
pipes communication device bene ts 
relatively simple implement modern version unix implements types pipes 
pipes accessed le handles extreme exibility components distributed system interconnected 
helps isolating components speci cs communication mechanisms 
operating systems windows nt provide support pipes speci mechanisms setting accessing di erent investigated porting program uses pipes systems 
independently communication scheme ids needs access control communication channels 
mechanisms mentioned ability performing access control means message queues shared memory process sets queue shared memory area establishes access modes structure manner similar unix le system access modes 
regular unix pipes pipe accessible process creates children de nition inaccessible processes 
named pipes access control performed unix le permissions mechanisms accessed entries unix le system 
schemes show promise studied carefully deciding particular 
may feasible di erent communication scheme depending situation 
distinctions clear examples may possible 
inter host communication main characteristics achieve communication scheme ids performance reliability security 
performance 
ids operate real time messages delivered quickly possible part system overloading network agents running 
communication mechanism able provide transmission times incurring overhead 
reliability 
messages sent host arrive correctly order time may major concern ids may 
question single missing message agent drastic di erence intrusion detected 
estimate maximum amount lost messages able give acceptable estimate degradation service 
unfortunately meaning acceptable depends system deployed 
security 
privacy authentication important needs ids messages generated ids may contain sensitive data hosts monitored unauthorized entities able generate messages accepted legitimate elements ids 
usually cryptography solution problems 
cryptography comes cost performance overhead imposed systems 
security problem possibility denial service attacks attacker impossible dicult messages get delivered 
important note intruder able completely disrupt communication simply delaying may give window opportunity damage done 
questions may help deciding best approaches follow terms security privacy necessary 
mentioned messages contain sensitive information may case components semantics communication carefully designed 
authentication necessary 
looks rst glance de nite want anybody able generate fake messages send monitors 
implement 
form cryptography deemed necessary ways 
selection algorithms implementation decisions ect result 
example encryption performed transceivers monitors agents report local transceivers encryption done batches periodically sending messages lot individually encrypting sending message 
method may produce improvement performance presents problem messages may tagged urgent wait 
details resolved working implementation 
possibility selective encryption 
messages sensitive performance may gained having mechanism specifying messages encrypted 
course presents technical problems 
example entities involved communication able detect kind transmission performed act accordingly 
dicult issue selection encrypted 
issues mentioned raise number questions answers depend speci approach followed 
currently see possible solutions existing protocol udp tcp way takes account weaknesses provide functionality need 
advantages base protocol exists know supported 
disadvantages unreliability case udp overhead reliability case tcp lack features encryption 
design new protocol needs ids mind 
protocol may provide reliable transmission low overhead security mechanisms 
advantages going way protocol tailored ne tuned speci needs making specialized necessary 
big drawback protocol design trivial task lot issues proving correctness implementing fully testing deploying dicult time consuming job 
dicult aspects designing communication protocol id determining appropriate level compromise di erent factors eciency security protocol useful respect 
see eld extensive research 
expressing concerns regarding inter host communication particularly related performance scalability come fundamental question really need worry 
particular get point thousands hosts communicating 
argued appropriate hierarchical organization may happen 
example system structured subnetwork reports single monitor monitors turn report higher level monitors problem may relevant previous discussion suggested 
case secure reliable communication priority 
level eciency required communications protocol depends level data reduction achieved 
data reduction schemes amount information sent network limited eciency may secondary concern 
impact host performance rst implementations aafid architecture entities implemented separate processes 
data collected analyzed generated kernel example user login information process accounting network connection establishment 
means time system action logged analyzed information transferred kernel space user space causing context switch increasing load imposed system ids 
number agents running host increases load overhead caused may start impact normal host 
particularly true parts ids written scripting languages perl tcl tk usually large consumers resources 
approach reduce overhead caused ids write components compiled language probably reduce memory cpu usage solve context switching problem overhead derived having separate processes running 
step language supports multithreading implement agent separate thread separate process 
may reduce agent overhead address context switching problem 
lowest level achieve integrate components unix kernel 
example agent monitors network connections read relevant data structures directly having execute netstat command repeatedly 
true aspects process accounting le accesses integrating agents kernel reduce problems mentioned context switch prevented agent running kernel 
information registered processed place close produced reducing possibility modi ed attacker gets agent 
harder intruder tamper agents kernel modi ed 
transceivers built kernel 
way data transferred outside kernel transceiver decides send monitor processing making noti cation 
approach just described disadvantages building entities kernel components essentially destroys portability agents designed implemented speci operating system mind 
versions unix handle kernel internals exactly way 
problem worse think porting ids non unix operating systems 
entity misbehaves intentionally programming con guration mistake damage running kernel full access system 
entities kernel large impact host behavior slowing fundamental operations accesses disk memory kernel data structures disrupting timing critical low level operations disk accesses entities incorporated kernel carefully designed implemented debugged 
crucial issue resources available entities kernel limited may insucient performing useful actions 
example agent monitors ip packets may need large amount memory able keep state information monitor events necessary detect syn ood attack 
preliminary indicates probably possible develop distinct independent kernel agents perform complex tasks tightly coupled kernel code 
ect especially visible agents monitoring network communications 
results achieved date indicate kernel agents feasible continue exploration area potential payo see section 
data processing reduction agents lightweight possible little forwarding element sends data transceiver turn merges data coming agents forwards appropriate monitor processed appropriate actions taken 
approach rst prototype 
technique create high amount network trac limits scalability system 
counterpart move computation load monitor transceivers agents entities local host initial processing reduction data report monitor pieces information relevant 
taken extreme making transceiver local id system communicates monitors part larger global id system 
unfortunately impact hosts monitored local computation take away computing cycles real applications hosts 
related problem decide state ids kept 
centralized approach state kept central monitor 
host taken compromised destroyed state hosts depend monitor may lost 
hand host processing engine state information distributed di erent hosts making complete loss dicult 
disadvantage building consistent picture state ids dicult 
think best approach try nd balance extremes 
detailed performance studies may help making decision computational load distributed agents transceivers monitors maximize throughput scalability system imposing excessive load hosts network 
user interface ids rendered useless mechanisms allow users control monitor 
case user interface deal common problem interface highspeed distributed continuous running computer system human user quickly analyze large volumes data guard hours day control 
traditional approaches window displays list hosts monitored user view detail provide rudimentary form control happening elements distributed ids scale 
underlying problem deeper issue possible human monitor control system may dicult control partly designed certain extent act take decisions goes 
problem involves issues ranging data formats storage gui design including communication security consistency 
think fundamental issues 
data ids entities need provide give user clear picture system 

eciently reliably consistently get information user 

information useful way 
interface able provide user multiple levels detail high level overview parameters agent manner easy possible 

allow user provide feedback control entities system 
ideally done way ecient fast reliable resistant failures secure resistant attempts unauthorized access able monitor manageable understandable user 

interface responsive 
user want able immediately see effects changes told immediately interest happens 

keep state provide meaningful historical information user reports activity traces certain period time issue user interface studied detail considered 
section identify guidelines 
describe near term long term issues identi ed relevant 
current near term currently underway coast laboratory speci areas developing agents 
currently process developing large number agents covering wide range monitoring activities 
allow discover limitations illuminate design decisions internal interfaces services provided prototypes writing agents 
low level implementations preliminary mentioned section negative feel potential bene ts derived components merits study 
promising area explore development agents monitor patterns system calls identify anomalous behavior 
shown possible detect common intrusions performing short range correlations process system calls 
high level implementations latest highlevel prototype mentioned section currently continuous development improvement 
expect experimentation prototype help identifying strong weak areas design 
additionally lessons learn high level implementations may applied lower level ones 
communication mechanisms 
intend explore intra inter host communication mechanisms inside outside unix kernel 
communication interfaces de ned allow modi cation communication mechanisms having change programs 
furthermore security considerations incorporated mechanisms system deployed production settings 
developing tools 
simple graphical user interface gui developed existing high level prototype 
existing version gui provides simple access control functions rst step trying identify user interface issues may explored 
development tools making easier develop agents 
tools provide semiautomatic code generation help developing debugging new agents 
deployment testing 
best way test architecture having people 
plans release latest prototype selected testers rst general public allow experiment architecture try system provide feedback allows improve 
developing transceivers monitors 
experiment di erent approaches data reduction reporting incorporating di erent functionalities components search adequate balance local central processing 
current implementation transceivers send information receive monitors monitors store information processing 
medium term issues expect address immediate concerns satis ed 
semantics communication 
far focused technical architectural aspects design 
semantic aspects communication contents messages enable detection intrusions 
probably object investigation basic architecture settled 
data reduction 
di erent approaches may taken control data reduction agents transceivers monitors 
particular scheme thought having agent carry necessary data reduction code incorporated transceivers monitors agent deployed 
approach neglects fact events di erent agents may need combined processed 
issue investigated 
porting platforms 
intend port high level prototypes operating systems windows nt 
additionally development kernel components probably take place operating systems including solaris linux bsd os 
encryption 
plan carefully evaluate encryption con dentiality authentication purposes mechanisms deemed necessary implemented way reduces impact performance ids 
extensions architecture 
test aafid architecture existing prototypes discover aspects changed extended provide better additional functionality 
example possible extension architecture allow monitors automatically respond certain events rule sets absence human controller 
aspects dealt encountered 
long term issues things think important addressed point currently plans 
global administration con guration 
ids grows capability monitor hosts increases con guring controlling hand impractical 
mechanisms remotely con guring entities necessary 
includes monitor administration monitors exert control entities controlled way 
deploy control monitors deploy detection code react events detected monitors report issues may addressed 
agent host con guration agents may need added removed dynamically hosts 
example unusual condition detected host may want add extra agents monitor detailed fashion 
done manually automatically 
mechanisms topic interesting 
load balancing failure control 
ids monitoring networks hundreds thousands hosts running tens hundreds agents issues load balancing failure control important 
example having single monitor controlling large number hosts may counterproductive terms performance security 
problems solved respect load balancing 
keep consistent global state 
multiple monitors ensure capability detecting intrusion current global state 
communicate high level entities 
order keep global state sort communication occur monitors transceivers 
optimum maximum size analysis 
important know limits aafid architecture 
interesting perform analysis determine maximum size terms hosts agents host monitors eciently supported de nition eciency 
knowing optimum size ids performs best interesting development 
reliability 
reliably keep state ids sessions crashes reboots important feature real world ids 
having reliability mechanisms ensures ids alert time result provide better protection 
propose architecture intrusion detection systems called aafid independent entities called autonomous agents performing distributed data collection analysis 
centralized analysis done host network basis higher level entities called transceivers monitors 
architecture allows computation performed intrusion detection happen point information available 
agent transceiver monitor level 
demonstrated feasibility architecture implementation working prototypes 
rst prototype described second described detail aafid architecture allows data collected multiple sources allowing combine best characteristics traditional host network idss 
apparently allows build idss resistant insertion evasion attacks existing architectures tests performed support claim :10.1.1.119.399
furthermore modular characteristics architecture allow easily extended con gured modi ed adding new components replacing components need updated 
example possible modify system produce messages cidf format 
aafid architecture faces problems traditionally realm distributed systems research scalability performance security 
tradeo eciency resource consumption security may able results previous research implement mechanisms aafid needs nding appropriate balance id context di erent factors open area research 
user interface big issue 
done intrusion detection years focuses perform detections little done way presenting information user allow user specify policies ids understand enforce 
je rey bradshaw 
software agents 
je rey bradshaw editor software agents chapter pages 
aaai press mit press 
mark todd ellis ivan eugene spa ord 
idiot users guide 
coast laboratory purdue university computer science building west lafayette september 
mark eugene spa ord :10.1.1.158.8429
defending computer system autonomous agents 
proceedings th national information systems security conference pages oct 
mark gene spa ord 
active defense computer system autonomous agents 
technical report coast group department computer sciences purdue university west lafayette feb 
dorothy denning 
intrusion detection model 
ieee transactions software engineering february 
william farmer joshua guttman vipin swarup 
security mobile agents issues requirements 
proceedings th national information systems security conference volume pages 
national institute standards technology october 
stephanie forrest steven hofmeyr anil somayaji thomas sense self unix processes 
proceedings ieee symposium security privacy 
ieee computer press 
stephanie forrest steven hofmeyr anil somayaji 
computer immunology 
communications acm october 
maccabe 
architecture network level intrusion detection system 
technical report university new mexico department computer science august 
heberlein dias levitt mukherjee wood 
network security monitor 
proceedings ieee symposium research security privacy pages may 
judith hochberg kathleen jackson cathy stallings david dubois josephine ford 
nadir automated system detecting network intrusion misuse 
computers security may 

automated information system ais alarm system 
proceedings th national information systems security conference 
national institute standards technology october 
ieee journal selected areas communications may :10.1.1.44.9066
special issue secure communications 
brian kernighan dennis ritchie :10.1.1.44.9066
programming language 
prentice hall englewood cli nj usa second edition 
sandeep kumar 
classi cation detection computer intrusions 
phd thesis purdue university west lafayette 
merriam webster 
intrusion 
online dictionary 
www com dictionary 
accessed may 
mukherjee todd heberlein karl levitt 
network intrusion detection 
ieee network may june 
john ousterhout :10.1.1.119.399:10.1.1.119.399
tcl tk toolkit 
addison wesley reading ma usa 
phillip porras peter neumann :10.1.1.114.4122
emerald event monitoring enabling responses anomalous live disturbances 
proceedings th national information systems security conference pages 
national institute standards technology 
thomas timothy :10.1.1.119.399
insertion evasion denial service network intrusion detection 
technical report secure networks january 
marshall rose 
simple book management tcp ip internets 
prentice hall nj 
dias heberlein ho levitt mukherjee 
dids distributed intrusion detection system motivation architecture early prototype 
proceedings th national computer security conference pages october 
eugene spa ord diego zamboni 
framework prototype distributed intrusion detection system 
technical report coast laboratory purdue university west lafayette may 
staniford chen cheung crawford frank levitt wee yip 
grids graph intrusion detection system large networks 
proceedings th national information systems security conference volume pages 
national institute standards technology october 
stuart staniford chen common intrusion detection framework 
www page cs ucdavis edu cidf 
richard stevens 
tcp ip illustrated volume volume protocols professional computing series 
addison wesley 

unix internals new frontiers 
prentice hall englewood cli nj usa 
larry wall tom christiansen randal schwartz 
programming perl 
reilly associates second edition edition september 
gregory white eric udo 
cooperating security managers intrusion detection system 
ieee network pages january february 

