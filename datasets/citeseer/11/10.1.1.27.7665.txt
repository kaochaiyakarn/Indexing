dexter hypertext model frank halasz xerox parc coyote hill rd palo alto ca halasz xerox com mayer schwartz tektronix labs box ms beaverton labs tek com nist hypertext standardization workshop gaithersburg md january presents dexter hypertext model 
dexter model attempt capture formally informally important abstractions wide range existing hypertext systems 
goal model provide principled basis comparing systems developing interchange interoperability standards 
model divided layers 
storage layer describes network nodes links essence hypertext 
runtime layer describes mechanisms supporting user interaction hypertext 
component layer covers content structures hypertext nodes 
focus model storage layer mechanisms anchoring presentation specification form interfaces storage layer component runtime layers respectively 
model formalized specification language specification language set theory 
briefly discusses issues involved comparing characteristics existing systems model 
hypertext systems notecards neptune deli kms intermedia augment enge common 
differ 
way systems differ related classes systems multimedia database systems 
level hypertext systems provides users ability create manipulate examine network information containing nodes interconnected relational links 
systems differ markedly specific data models sets functionality provide users 
augment intermedia notecards neptune example provide users universe arbitrary length documents 
kms hypercard contrast built model fixed size canvas items text graphics placed 
radically different designs common systems notions hypertext nodes 
attempt provide principled basis answering questions presents dexter hypertext model 
model provides standard hypertext terminology coupled formal model important abstractions commonly wide range hypertext systems 
dexter model serves standard compare contrast characteristics functionality various hypertext non hypertext systems 
dexter model serves principled basis develop standards interoperability interchange hypertext systems 
dexter model described initiated result small workshops hypertext 
workshop held october dexter inn new hampshire 
name model 
workshops representatives major existing hypertext systems large part discussion workshops elicitation abstractions common major hypertext systems 
dexter model attempt capture fill formalize results discussions 
important focus workshops attempt find common terminology hypertext field 
turned extremely difficult task especially absence understanding common differing abstractions various systems 
term node turned especially difficult extreme variation term various systems 
providing defined set named abstractions dexter model provides solution hypertext terminology problem 
cost 
order avoid confusion model contentious terms node neutral terms component abstraction model 
dexter model formulated formal specification language typed set theory 
provides rigorous basis defining necessary abstractions discussing interrelationships 
understanding language prerequisite fully understanding details dexter model described attempts provide complete description model prose accompanying formal specification 
readers unfamiliar able gain full precisely detailed understanding model 
refers passing architectural concepts number existing hypertext systems including augment enge concordia document examiner walk hypercard igd intermedia kms neptune ham deli notecards sun link service pear trig 
reader assumed familiar general characteristics functionality systems 
appropriate background material systems conklin proceedings hypertext ht hypertext ht conferences 
divided main sections 
section provides brief overview entire model 
second section describes storage layer model formally informally 
third section describes runtime layer model similar manner 
final section discusses issues involved comparing existing systems model 

overview model dexter model divides hypertext system layers runtime layer storage layer component layer illustrated 
main focus model storage layer models basic node link network structure essence hypertext 
storage layer describes database composed hierarchy data containing components interconnected relational links 
components correspond typically thought nodes hypertext network cards notecards hypercard frames kms documents augment intermedia articles 
components contain chunks text graphics images animations form basic content hypertext network 
runtime layer presentation hypertext user interaction dynamics presentation specifications storage layer focus dexter model database containing network nodes links anchoring component layer content structure inside nodes layers dexter model 
storage layer focuses mechanisms components links glued form hypertext networks 
components treated layer generic containers data 
attempt model structure container 
storage layer differentiation text components graphics components 
provide mechanisms dealing defined structure inherent structured document oda document component 
contrast component layer model specifically concerned contents structure components hypertext network 
layer purposefully elaborated dexter model 
range possible content structure included component open ended 
text graphics animations simulations images types data components existing hypertext systems 
attempt generic model covering data types 
dexter model treats component structure outside hypertext model se 
assumed models designed specifically model structure particular applications documents data types oda conjunction dexter model capture entirety hypertext including component content structure 
extremely critical piece dexter model interface hypertext network component content structure 
hypertext system requires mechanism addressing refering locations items content individual component 
dexter model mechanism know anchoring 
anchoring mechanism necessary example support span span links intermedia 
intermedia components complete structured documents 
links possible documents spans characters document spans characters document 
anchors mechanism provides functionality maintaining clean separation storage component layers 
storage component layers treat hypertext essentially passive data structure 
hypertext systems go far sense provide tools user access view manipulate network structure 
functionality captured runtime layer model 
case component structure range possible tools accessing viewing manipulating hypertext networks far broad diverse allow simple generic model 
dexter model provides bare bones model mechanism presenting hypertext user viewing editing 
presentation mechanism captures essentials dynamic interactional aspects hypertext systems attempt cover details user interaction hypertext 
case anchoring critical aspect dexter model interface storage layer runtime layer 
dexter model accomplished notion presentation specifications 
presentation specifications mechanism information component network user encoded hypertext network storage layer 
way component user function specific hypertext tool doing presentation specific runtime layer property component access path link taken component 
view running animation student animation view animation editor teacher presentation specifications link access path illustration need presentation specifications access path links components 
illustrates importance presentation specifications mechanism 
animation component taken computer training hypertext 
animation component accessed components teacher component student component 
link student component animation brought running animation 
coming teacher component animation brought editing mode ready altered 
order separate cases runtime layer needs access presentation information encoded links network 
presentation specifications generic way doing just 
anchoring interface allows storage layer communicate generic way runtime layer violating separation layers 
attempts give flavor various layers dexter model embedded typical hypertext system 
depicts node link hypertext network 
storage layer contains entities components nodes link 
actual contents text graphics components located right storage layer components layer 
runtime layer single graphics component user 
link emanating node marked arrowhead located near bottom node window computer screen 
xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx xxxxxxxxxxx text text document component component link component text text document runtime layer component layer storage layer depiction layers dexter model embedded actual hypertext system 

simple storage layer model overview storage layer storage layer describes structure hypertext finite set components functions resolver function accessor function 
accessor resolver functions jointly responsible retrieving components mapping specifications components components 
fundamental entity basic unit storage layer component 
component atom link composite entity components 
atomic components primitive storage layer model 
substructure concern components layer 
atomic components typically thought node hypertext system card notecards frame kms document intermedia statement augment 
links entities represent relations components 
basically sequence endpoint specifications refers part component hypertext 
structure links detailed 
composite components constructed components 
composite component hierarchy created composite component contains composite restricted direct acyclic graph dag composite may contain directly indirectly 
composite components relative rare current generation hypertext systems 
exception augment system document tree structured composition atomic components called statements 
component globally unique identity captured unique identifier uid 
uids primitive model assumed uniquely assigned components entire universe discourse just context single hypertext 
accessor function hypertext responsible accessing component uid mapping uid component assigned uid 
uids provide guaranteed mechanism addressing component hypertext 
uids basic addressing mechanism hypertext may restrictive 
example possible augment system create link statement containing word 
statement specified link may exist may change time documents edited 
link rely specific statement uid address target statement 
link followed specification resolved uid possible access correct component 
kind indirect addressing supported storage layer component specifications resolver function 
resolver function responsible resolving component specification uid fed accessor function retrieve specified component 
note resolver function partial function 
specification may resolvable uid component specified may exist 
case component specification resolve uid component 
particular uid may specifier case resolver function identity function 
implementing span span links intermedia requires simply specifying entire components 
span span linking depends mechanism specifying substructure components 
order preserve boundary hypertext network se content structure components mechanism depend way knowledge internal structure atomic components 
dexter model accomplished indirect addressing entity called anchor 
anchor parts anchor id anchor value 
anchor value arbitrary value specifies location region item substructure component 
anchor value interpretable applications responsible handling content structure component 
primitive unrestricted viewpoint storage layer 
anchor id identifier uniquely identifies anchor scope component 
anchors uniquely identified universe component uid anchor id pair 
part composition anchor designed provide fixed point storage layer anchor id combined variable field component layer anchor value 
component changes time edited runtime layer component application change anchor value reflect changes internal structure component reflect component movement point region items anchor conceptually attached 
anchor remain constant providing fixed referent specify structure component 
mechanism anchor id combined component specification mechanism provide way specifying endpoints link 
model captured entity called specifier consists component specification anchor id additional fields direction presentation specification 
specifier specifies component anchor point component serve endpoint link 
direction encodes specified endpoint considered source link destination link source destination source destination 
encoded direction values respectively 
specification primitive value forms part interface storage layer runtime layer 
nature specifications discussed conjunction runtime layer 
returning issue link components possible describe structure bit precisely 
particular link simply sequence specifiers 
note provides links arbitrary arity despite fact binary links standard existing hypertext systems 
directional links standard existing systems handled direction field specifier 
atom composite component info attributes presentation spec anchors content arbitrary text xxxxx node 
component info attributes presentation spec anchors content xxxxx 
atom atom resolves value id value id link specifier component spec anchor id direction presentation spec specifier component spec anchor id direction presentation spec text resolves depiction organization storage layer including specifiers links anchors depicts organization storage layer including specifiers links anchors 
depicts components including atomic components composite component constructed atomic components plus text link component represents connection anchor span atomic component anchor span composite component 
foregoing discussion components described atom link composition components 
actuality describes model calls base component 
contrast components model complex entities contain base component associated component information 
component information describes properties component content 
specifically component information contains sequence anchors index component specification contains information runtime layer component user set arbitrary attribute value pairs 
attribute value pairs attach arbitrary property value component 
example keywords attached component keyword attributes 
similarly component type system implemented model adding component type attribute appropriate type specification value 
addition data model storage layer defines small set operations access modify hypertext 
operations defined way maintain invariants hypertext fact composition hierarchy components sub components acyclic 
operations defined model include adding component atomic link composite hypertext deleting component hypertext modifying contents information anchors attributes component 
operations retrieving component uid specifier resolved uid 
operation needed determining interconnectivity network structure 
operation returns set links refer anchor anchor containing component 
formalization storage layer described envision hypertext system consisting set components uid set uid 
uid retrieving component involves finding uid uid get hold actual component accomplished means accessor function returns component uid 
uids normally meant visible clients hypertext system 
component specification may possible find uid component specification refers means resolver function 
component specifications arise set component spec 
description visual presentation spec component part component run time layer storage layer visual descriptions come set spec 
component spec spec links important kind component supported hypertext system 
directionality important links times immaterial 
introduce direction free type model respectively link source destination source destination 
direction schema type specifier essentially takes form description link 
description sufficient determine uid component link 
described overview anchoring plays important part model 
anchors identified means unique component anchor id set anchor id 
anchor values come set anchor value 
anchors just pairs anchor id associated anchor value 
anchor id anchor value anchor anchor id anchor value value type specifier describes single link 
include variable specifier schema model different ways visually showing links follow specifier illustrated example shown 
specifier component spec anchor id spec direction direction links include specifiers 
way links hypercard buttons modeled way links button having direction value direction value 
specifiers link constraint simplifies hypertext model 
hand reason multi way links model 
general model duplicate specifiers allowed 
constraint specifier direction 
link specifiers seq specifier specifiers ran specifiers direction base component generalization traditional node link hypertext atomic element modeled type atom atom models node typical hypertext system internal detail omitted 
link modeled link schema composite described recursively sequence base components 
components ancillary information associated attribute value pairs anchors presentation information 
hypertext systems allow attributes components 
attributes thought attribute value pairs modeled partial function mapping attributes values 
introduce additional sets set attribute names set possible values attribute value additional information associated base component mentioned captured schema 
include invariant anchor ids unique component number anchors component equal size set different anchors component 
comp info attributes attribute value anchors seq anchor spec anchors ran anchors note value 
introduce function returns instance schema minimal information attributes anchors argument 
spec comp info ps spec 
pa info comp info info attribute info anchors info ps recursive type base component describe base components hypertext system 
base component atom atom link link composite seq base component schema component represents base component associated information 
component base component comp info functions defined remainder section just specification model easier read understand meant particular significance right 
function builds component base component associated information 
component base component comp info component component lb base component comp info 
component functions extract respectively base component associated information component 
base component info info component 
base info introduce predicates prefix relations respectively true iff component atom link composite 
component component component component base ran atom base ran link base ran composite define type consistency relationship components components type consistent atoms links composites 
component component component link components referred quite frequently follows introduce schema define variables type 
component ran link introduce helpful functions extract various parts base component type 
functions defined link components return respectively set component specs link set anchor ids link 
component spec anchor id 
cs component spec ran link base specifiers 
cs anchor id ran link base specifiers 
functions defined component return respectively attributes anchors 
attributes component attribute value anchors component anchor component attributes info attributes anchors ran info anchors introduce function component returns component just attributes function possibly overwritten new value attribute 
component attribute value component lc component attribute value 
component comp info info attributes attributes anchors anchors component base components sub components component may sub component component 
relationship denoted defined 
component component component 
base ran composite base hypertext system modeled schema proto hypertext parts 
set components represents traditional nodes links hypertext system 
partial function termed resolver returns uid component specifier 
note specifier may return uid 
get hold component introduce accessor function uid returns component 
note function partial invertible 
proto hypertext components component resolver component accessor uid component identify links resolving component introduce function hypertext system uid component system returns uids links resolving component 
proto hypertext uid uid lh proto hypertext uid 
uid uid comp comp components uid accessor comp component spec comp resolver constraints satisfied instance schema proto hypertext call hypertext 
accessor function yield value component 
function invertible component uid 
resolver function able produce possible valid uids 
cycles component subcomponent relationship component may subcomponent directly transitively 
anchor ids component anchor ids component specifiers links resolving component 
hypertext proto hypertext components ran accessor ran resolver dom accessor components 
components lids uid lids hypertext accessor anchors accessor lids adding new components section model adding new component hypertext 
function defined section function called run time layer part external view model 
see section conformance model external view 
adding new component hypertext function 
ensures range accessor function extended include new component 
resolver function extended specifier new component corresponding uid 
hypertext component hypertext hypertext component hypertext components components uid uid 
component spec accessor accessor uid resolver resolver uid functions creating new node link composite respectively 
function described 
hypertext atom spec hypertext component hypertext atom ps spec component component atom ps ps creating link ensure component specifiers resolve existing components 
test consistency links introduce link consistency predicate prefix relation 
hypertext hypertext link specifier cl cl components link base cl ran specifiers 
component components 
accessor resolver hypertext link spec hypertext component hypertext link ps spec component component link ps ps creating composite ensure subcomponents new composite hypertext 
hypertext seq base component spec hypertext component hypertext seq base component ps spec component component composite ps ps component base ran components package creating new component function 
function ultimately invoked run time layer 
hypertext base component spec hypertext component hypertext bc base component ps spec 
atom bc atom bc ps atom bc ps link bc link bc ps link bc ps seq base component bc composite bc ps composite bc ps deleting component deleting component ensure remove links specifiers resolves component 
hypertext uid hypertext hypertext uid uid 
hypertext uids uid uids uid uid components components accessor uids accessor uids accessor resolver resolver uids modifying components modifying component require associated information remain unchanged type atom link composite remain unchanged resulting hypertext remains link consistent 
hypertext uid component hypertext hypertext uid uid component component hypertext accessor uid components components accessor accessor uid resolver resolver info info uid retrieving component retrieve component uid means just returned value accessor function 
hypertext uid component hypertext uid uid 
uid accessor uid uid happens represent link exist operations return source destination specifier component 
attributes introduce functions get set value attribute exists component 
attribute value hypertext uid attribute value hypertext uid uid attribute 
component accessor uid attribute value uid attributes hypertext uid attribute value hypertext lh hypertext uid uid attribute value 
hypertext component accessor uid components components accessor accessor uid resolver resolver function returns set component attributes 
hypertext attribute hypertext attribute component dom attributes anchors useful know link components associated particular anchor 
function returns set link component uids associated particular anchor id particular component id hypertext uid anchor id uid lh hypertext uid aid anchor id lid uid lids uid lids lid lids aid accessor lid 
simple runtime layer model overview runtime model fundamental concept runtime layer instantiation component 
instantiation presentation component user 
operationally instantiation thought kind runtime cache component 
copy component cached instantiation user views edits instantiation altered cache written back storage layer 
note simultaneous instantiation component 
instantiation assigned unique session see instantiation identifier iid 
instantiation component results instantiation anchors 
instantiated anchor known link marker 
terminology congruent intermedia term anchor refers attachment point region term link marker refers visible manifestation anchor displayed document 
order accomodate link marker notion model instantiation complex entity containing base instantiation sequence link markers function mapping link markers anchors instantiate 
base instantiation primitive model represents sort presentation component user 
moment user hypertext viewing editing number component instantiations 
runtime layer includes entity called session serves keep track moment moment mapping components instantiations 
specifically user wants access hypertext opens hypertext 
user create instantiations components hypertext action known presenting component 
user edit instantiations modify component accumulated edits instantiation action known realizing edits destroy instantiation action known component 
user finished interacting hypertext session closed 
model session entity contains hypertext accessed mapping session current instantiations corresponding components hypertext history runtime resolver function function realizer function 
moment history sequence operations carried open session operation 
version model history defining notion read session 
intended available operation needs preceeding operations 
session runtime resolver function runtime version storage layer resolver function 
resolver maps specifiers component uids 
runtime resolver information current session including history resolution process 
storage resolver layer access runtime information 
example specifier may refer accessed component named 
runtime resolver responsible mapping specifier uid matching specification 
storage layer resolver able handle specification 
runtime resolver restricted superset storage layer resolver function specifier storage layer resolver resolve uid resolved uid runtime resolver 
heart runtime model session function 
input consists component uid presentation specification 
returns instantiation component part session 
presentation specification primitive model intended contain information specifying component instantiated system instantiation 
note component presentation specification storage layer model 
presentation specification meant contain information component notion 
responsibility function selection combination presentation specification passed presentation specification attached component instantiated 
model current form explicit 
function core component operation 
component takes component specifier session presentation specification calls component uid derived resolving specifier 
component turn core follow link operation 
follow link takes iid instantiation link marker contained instantiation 
presents component destination endpoints endpoints specifier direction link endpoint anchor represented link marker 
case links binary equivalent link link marker source 
result link presentation destination component anchor 
function inverse function called realizer function takes instantiation returns new component reflects current state instantiation including edits instantiation 
basic mechanism writing back cache instantiation edited 
component produced realizer argument storage layer modify composite operation replace component edited component 
operation wrapped function called realize edits runtime layer 
formalization runtime layer runtime model depends notion visual representation component 
instantiation unique instantiation id set iid 
iid instantiation consists base instantiation represents component sequence link markers represents anchors component function mapping link markers anchor ids 
base instantiation link marker instantiation base base instantiation links seq link marker link marker anchor id dom ran links user manipulates instantiations way mapping instantiations components 
function variable instants session schema defined maps instantiation id pair consisting instantiation uid corresponding component 
accessor function hypertext schema maps uids components 
instantiation may associated uid component 
hypertext manipulated session modelled session schema 
operation free type names various operations user perform hypertext session 
operation open close create edit save delete session user opens instantiations hypertext components hypertext may modified 
term presents denote opening instantiation component component user means instantiation 
instantiations function component represent presentation specifiers implicitly component explicitly user link specifier implicitly current set instantiations 
function part schema session captures relationship 
saving result series edits reverse function needed call function realizer function 
takes instantiation returns component current session 
component specifiers resolved run time 
example specifier node visited 
storage layer independent component specifiers 
introduce notion run time resolver just extension regular resolver function 
note invariants anchors schema hypertext apply component specifiers domain resolver 
function give links component specifiers resolvable run time domain resolver additional links captured run time layer 
session hypertext history seq operation instants iid instantiation uid uid spec instantiation realizer instantiation component component spec uid head history open uid uid ps spec uid dom accessor realizer uid ps accessor uid resolver session session history history realizer realizer session begins existing hypertext storage system clean instantiation slate 
session hypertext hypertext hypertext 
history open instants operations open new instantiation introduce function opens set new instantiations existing set components 
session specifier spec session session specs specifier spec session iid iid instantiation uid history history instants instants specs dom instants dom specs iid uid uid cs component spec ps spec inst instantiation cs ps second uid cs inst uid ps iid inst uid specs spec specifier spec spec follow link link marker instantiation components associated link specifiers direction 
may link involved may link associated particular anchor 
iid 
iid 
link marker aid anchor id links specs specifier spec aid instants iid 
links accessor second instants iid aid specs specifier links ran link base specifiers specs 
direction second specs opening new instantiation newly created component modeled schema 
component component base component ps spec spec history history create component ps 
uid uid inst instantiation iid iid iid dom instants inst uid 
uid accessor component instants instants iid inst uid schema models removal instantiation 
iid iid history history instants iid 
instants instantiations modified editing 
editing instantiation cause change component 
explicit save operation required save result edit edits 
instantiation instantiation iid iid history history edit iid 
dom instants instants instants iid 
instantiation second instants iid iid iid history history save instants instants component inst instantiation uid uid inst instants iid uid second instants iid realizer inst uid complete allow component deleted 
component identified instantiation component deleted instantiated 
remove instantiations component 
iid 
iid history history delete iid 
dom instants uid uid uid second instants iid uid instants iid 
instants session ends closed 
notice default save results changes instantiations 
history history close instants model read session schema read session session save create delete ran history 
conformance model reason model hypertext try answer ascertain purported hypertext system warrants called hypertext system 
actual hypertext system show meets conformant model 
best guidance answering question comes vdm experience heading data reification described example chapter cliff jones book software development vdm 
exhibit total functions called retrieve functions map actual types functions actual hypertext system types functions model 
demonstrate adequacy actual representation value 
obviously retrieve functions satisfy invariants data types functions 
informal way saying expressible realizable model expressible realizable actual system 
actuality model powerful necessary 
particular admitting multi way links links links model put fairly heavy burden implementation 
hypertext systems notion composites 
hypertext systems kms links explicit source destination 
requiring discrimination values type direction 
currently working minimal model addresses items may necessary 
list summarizes sets base types types functions operations actual realizations hypertext system conforming model 

storage layer functions 

uid component spec spec anchor id anchor value atom attribute value iid base instantiation link marker attributevalue 
runtime layer operations schemas 

types 
direction anchor specifier link comp info base component component hypertext instantiation operation session 
concluding remarks development dexter model early stages 
discussed section model currently stated far powerful existing hypertext system 
provisions ary links composite nodes example intended accomodate design hypertext systems 
existing system examined includes ary links composite nodes 
result existing system conforms model sense supports mechanisms model supports 
solution problem mechanisms optional resulting family interrelated models support differing sets optional mechanisms 
weakest model example composites binary links 
strongest model dexter model form 
conformance model exact set mechanisms supported 
systems compared basis set mechanisms support 
related issue involves number consistency restrictions model imposes 
example creating link model requires specifiers resolve existing components 
restriction prevents creation links dangling outset 
model include restrictions prevent creation dangling links deletion linked components 
restriction adequately represents consistency guarantee kms 
overly restrictive augment allows creation initially dangling links 
contrast restrictive notecards ham prevent dangling links times 
case mechanisms restrictions sort optional model 
conformance model appropriate choices restrictions 
case mechanisms systems compared basis set restrictions enforce 
model compared detail hypertext systems designed represent 
clearly necessary step development model formally specify architecture operation number hypertext systems constructs dexter model 
systems chosen represent broad spectrum designs intended application domains implementation platforms enterprise provide valuable feedback regarding adequacy completeness model 
particular help model provides sufficient mechanisms representing important common abstractions systems 
provide feedback naturalness model specification systems dexter terms feels natural abstractions certain systems excessively fit dexter abstractions 
model useful developing hypertext interchange standards despite early stages development model useful developing hypertext interchange standards 
described panel interchanging hypertexts hypertext conference oren number efforts started operationalize abstractions dexter model form interchange formats 
shows example format 
format experimenting interchange hypertexts notecards hypercard 
seen format fairly straightforward rendering entities dexter model syntax 
format means developed interchange standard 
suggest dexter model provides basis develop standards 
fact model attempt provide defined comprehensive model ideal basis developing comprehensive standard interchanging hypertexts widely differing systems 
text text 
text text 
link example trivial interchange format derived model 
model described grew series workshops hypertext 
people attended workshops instrumental development model rob doug engelbart steve feiner 
frank halasz john leggett don mccracken norm meyrowitz tim oren amy pearl catherine plaisant mayer schwartz randy trigg jan walker bill wieland 
workshops organized jan walker john leggett 
notes terms hypertext hypermedia differentiated hypertext referring text systems hypermedia refering systems support multiple media 
distinction term hypertext generically refer text multimedia systems 
participants workshops listed page 
systems discussed workshops augment concordia document examiner igd intermedia hypercard kms neptune ham notecards sun link service 
halasz mccracken yoder kms distributed hypermedia system managing knowledge organizations 
communications acm 

camp campbell 
ham general purpose hypertext machine 
cacm 

conklin hypertext survey 
ieee computer 
september 
deli delisle schwartz neptune hypertext system cad applications 
proceedings acm sigmod international conference management data 
washington 
january 
enge engelbart authorship provisions augment proceedings compcon conference compcon digest san francisco california 

february 
enge engelbart collaboration support provisions augment proceedings afips office automation conference digest los angeles california 
february 
feiner steven nagy van dam andries experimental system creating presenting interactive graphical documents acm transactions graphics 

goodman complete hypercard handbook 
bantam books new york 
new york 

halasz moran trigg notecards nutshell 
proc 
acm chi gi human factors computing systems graphics interface conf toronto canada 
april 
halasz reflections notecards issues generation hypermedia systems communications acm 
july 
hypertext walker ht proceedings hypertext tr university north carolina department computer science 
acm 
march 
ht hypertext proceedings 
pittsburgh pa usa 
acm press order number 
november 
jones systematic software development vdm 
prentice hall international hertfordshire england 

lang lange formal approach hypertext post prototype formal specification 
department computing science technical university denmark 
october 
meyr meyrowitz intermedia architecture construction object oriented hypermedia system applications framework proceedings oopsla portland oregon 
september october 
oren tim chair panel interchanging hypertexts 
proceedings hypertext 

oren pear pearl sun link service protocol open linking 
hypertext acm 
november 
shneiderman hypertext hypertext 
addison wesley new york 

spivey notation 
prentice hall international hertfordshire england 

trig trigg weiser network approach text handling acm transactions office information systems 


walk walker document examiner delivery interface hypertext documents hypertext papers university north carolina chapel hill north carolina 
november 
walker yankelovich walk walker supporting document development concordia 
computer 

yankelovich haan meyrowitz drucker intermedia concept construction seamless information environment ieee computer 
january 
table contents 
overview model 
simple storage layer model overview storage layer formalization storage layer adding new components deleting component modifying components retrieving component attributes anchors 
simple runtime layer model overview runtime model formalization runtime layer 
conformance model 
concluding remarks model useful developing notes halasz hypertext walker walker yankelovich 
