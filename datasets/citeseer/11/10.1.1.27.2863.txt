unifying sat graph planning henry kautz shannon laboratory labs research kautz research att com bart selman department computer science cornell university selman cs cornell edu blackbox planning system unifies planning satisfiability framework kautz selman plan graph approach strips planning blum furst 
show strips problems directly translated sat efficiently solved new randomized systematic solvers 
certain computationally challenging benchmark problems unified approach outperforms satplan graphplan 
demonstrate polynomialtime sat simplification algorithms applied encoded problem instances powerful complement mutex propagation algorithm works directly plan graph 
observed classical ai planning problem planning complete certain information form logical deduction 
early attempts general theorem provers solve planning problems proved impractical research focused specialized planning algorithms 
relationship inference explicitly acknowledged example strips system fikes nilsson originally described way theorem proving practical 
relationship deduction developed fact 
example chapman tweak clarified logic variety non linear planning 
belief planning required specialized algorithms challenged planning propositional satisfiability testing kautz selman 
satplan showed general propositional theorem prover competitive best specialized planning systems 
success satplan attributed factors ffl logical representation computational properties 
fact satplan uses propositional logic order logic particular conventions suggested representing time actions significant 
differently declarative representations semantically equivalent quite distinct computational profiles 
ffl powerful new general reasoning algorithms walksat selman kautz cohen 
researchers different areas computer science creating faster sat engines year 
furthermore researchers settled common representations allow algorithms code freely shared fine tuned 
result point time best general sat engines tend faster terms raw inferences second best specialized planning engines 
principle course improvements applied specialized engines time done new crop sat solvers 
approach shares number features satplan strategy graphplan system developed independently blum furst 
graphplan broke previous records terms raw planning speed popular planning framework 
comparisons satplan show approach strictly superior 
example satplan faster complex logistics domain comparable blocks world domains graphplan faster 
excellent reviews discussions systems see kambhampati weld 
practical difference satplan graphplan takes input set axiom schemas input set strips style operators 
bear deep similarities 
systems phases creating propositional structure graphplan plan graph satplan cnf wff performing search assignments variables constrained structure 
propositional structure corresponds fixed plan length search reveals plan length exists 
kautz selman noted plan graph direct translation cnf form resulting formula close original conventions satplan 
unifying framework kambhampati examples disjunctive planners 
initial creation propositional structure case plan refinement splitting search structure case plan extraction 
hypothesize differences performance system explained fact graphplan uses better algorithm instantiating refining propositional struc ture satplan uses powerful search extraction algorithms 
satplan fully instantiates complete problem instance passing general logic simplifier limited inference algorithm runs completion polynomial time solver complete incomplete model finding program contrast graphplan interleaves plan graph instantiation simplification 
simplification algorithm graphplan mutex computation algorithm determining pairs actions pairs facts mutually exclusive 
mutex computation viewed rule limited inference specialized take particular advantage structure planning problems kambhampati 
specifically mutex computation limited application negative binary propagation qg fp rg infer rg application rule allows deduction negative binary clause mutex 
mutex algorithm graphplan incomplete mutexes logically follow inferred terminates polynomial time 
note algorithm different simplification rule unit propagation employed original satplan powerful propagating negative clauses somewhat powerful propagating positive information 
set mutexes ways graphplan prune nodes graph instantiation prune branches search tree involve mutually exclusive actions 
observations led create new system combines best features graphplan satplan 
system called blackbox works series phases 
planning problem specified standard strips notation converted plan graph length mutexes computed described 
plan graph converted cnf wff 
wff simplified general cnf simplification algorithm 
wff solved variety fast sat engines 
model wff model converted corresponding plan incremented process repeats 
note specialized limited inference mutex computation general limited inference cnf simplification 
return complementary nature processes section 
input final general sat engine considered combinatorial core problem 
basic translation plan graph sat described kautz mcallester selman section describe variation experiments 

propose similar scheme translating plan graphs augmented temporally qualified goals sat 
wff generated plan graph considerably smaller generated translating strips operators source code benchmarks available www research att com kautz blackbox 
log cutoff log backtracks relationship cutoff value measured backtracks restart performed expected solution time 
data randomized backtracking algorithm satz rand satplan encoding logistics planning problem log 
axis specifies expected number backtracks performed solution counting previous failed restarts 
axioms direct way done earlier medic system ernst millstein weld 
furthermore fact plan graph mutex relationships directly translated negative binary clauses formula easier solve kinds sat engines 
blackbox currently includes local search sat solver walksat systematic sat solvers satz li anbulagan rel sat bayardo schrag addition original graphplan engine searches plan graph cnf form 
systematic solvers comparable power quite different approach satz forward checking rel sat employs dependency directed backtracking 
order robust coverage variety domains system employ schedule different solvers 
example run graphplan seconds walksat minutes solution satz minutes 
blackbox system introduces new sat technology randomized complete search methods 
shown gomes selman kautz systematic solvers combinatorial domains exhibit heavy tail behavior get stuck particular instances 
adding small amount randomization search heuristic rapidly restarting algorithm fixed number backtracks dramatically decrease average solution time 
illustrates effect adding randomized restarts deterministic backtracking search algorithm 
see cutoff increased lowest setting mean solution time rapidly decreases 
cutoff continues increase mean solution time increases near linear fashion 
increase expected time due fact problem nonnegligible portion runs take arbitrarily long complete 
example optimal cutoff value runs succeeds finding solution 
applied randomization restart technique version satz blackbox 
variable choice heuristic satz chooses split variable maximizes particular function number unit propagations performed variable chosen see li anbulagan details 
version satz rand randomly selects set variables scores best score 
value selected empirically 
cutoff value specified solver schedule 
value cutoff value ideal domains 
predicting cutoff values deep theoretical question known asymptotic results luby practical 
need solve number similar problems feasible carefully tune cutoff value instances value rest set 
done unique problem encountered specify parallel plan length advance system search series different size problems 
simple effective practical solution provide solver schedule different cutoff values 
schedule specifies number trials low cutoff value failed higher value forth solution trials failure 
viewed version known search strategy iterative deepening 
iterative deepening time spent trials low cutoff value negligible compared spent trials higher value early part schedule fails find solution little effort wasted 
empirical results order test effectiveness blackbox approach selected benchmark problems characteristics ffl domains computationally challenging simple polynomial time algorithm optimal planning 
ffl solution time dominated search plan graph generation relatively fast solution extraction hard 
ffl problem instances critically constrained finding optimal plans harder finding sub optimal ones 
ffl parallel sequential planning problems included 
ffl instances push limits approach order demonstrate scales 
results set problems logistics planning highly parallel planning domain classic blocks world purely sequential domain 
test machine sgi mhz challenge server process ran dedicated processor 
largest amount ram allocated blackbox solution largest logistics problem log mb solution largest blocks world problem bw mb 
memory allocated phase constructing initial plan graph 
table compares performance blackbox version satplan graphplan ipp version logistics benchmark problems optimal plan length provided input 
graphplan original code developed blum furst incorporated front blackbox 
ipp koehler new implementation graphplan algorithm including improvements extensions 
tried solvers satz walksat blackbox satplan 
input blackbox graphplan ipp pddl strips format mcdermott input satplan set hand crafted axiom schemas state encodings described kautz selman 
blackbox simplified wffs passing solver failed literal rule satplan simplified unit propagation 
general observations 
see scaling blackbox sat solvers better graphplan 
important note point wff generated plan graph code running blackbox graphplan identical 
indicates cost performing sat translation small compared savings gained sat engines relatively simple backward chaining search performed graphplan 
ipp generally improves graphplan case provides faster solution times smallest instances slower blackbox 
due fact improvements ipp graphplan invoked test come play plan length initial state description contains facts irrelevant solution 
test allow take advantage heuristic graph pruning option ipp doing prevents ipp finding minimum parallel length solutions 
short critically constrained planning problems plan extraction computational bottleneck graphplan type solvers translating plan graph sat applying general sat solver boost performance 
second general observation scaling best solution times blackbox satz rand close scaling best solver times satplan walksat 
quite remarkable fact blackbox encodings generated automatically satplan axioms carefully hand tuned order provide best possible performance walksat 
satplan encodings included explicit state invariants fact truck location time known boost performance problem solvers kautz selman 
striking fact time generate satplan encodings taken account blackbox times consistently better satplan times 
example seconds generate solve log satplan takes minutes minutes generate seconds solve 
short advances sat solvers planning sat encodings automatically generated strips operators competitive planning handcrafted sat encodings 
results contrast earlier experiments solving automatically generated sat encodings planning problems 
kautz selman reported walksat problem par blackbox graphplan ipp satplan walksat satz satz create walksat satz rand rand rocket sec sec sec min sec sec sec sec sec rocket sec sec sec min sec sec sec sec sec log sec sec sec min hour min sec min sec log min sec sec min hour min sec sec sec log min sec sec min sec sec sec log sec sec min sec hour min table results critically constrained logistics benchmark planning problems running mhz sgi challenge server 
optimal parallel plan length provided input 
blackbox options column satz compact satz 
blackbox options column satz rand compact satz cutoff restart satz cutoff restart 
satplan solver options column satz rand satz cutoff restart 
walksat options blackbox satplan best noise cutoff 
timings real wall clock times including input output differences second different programs significant due implementation details 
timings randomized methods averages trials 
timings satplan separate time generate wff create time solvers 
long dash indicates solution hours 
backtracking solver complex satz rel sat difficulty solving plan graph generated sat encodings larger logistics problems getting far log running time exploded 
medic system ernst millstein weld solvers generated sat encodings directly strips axioms advantage intermediate plan graph representation conventions described kautz mcallester selman 
reported solution time hours walksat log note significant overhead plan graph generation fact generation phase blackbox takes seconds problems described versus minutes generation satplan medic 
longer version contain detailed comparison medic 
preliminary experiments indicate wffs generated plan graph blackbox significantly different computational properties ones generated directly strips medic despite fact logically equivalent kautz mcallester selman 
particular plan graph wffs contain fewer variables clauses easier solve 
example encoding log generated blackbox contained variables clauses encoding generated medic regular operator representation explanatory frame axioms contained variables clauses 
shown blackbox wff solved satz rand seconds able find setting parameters satz rand solve medic wff hours 
differences kinds wffs explained fact plan graph algorithm prunes unreachable nodes reducing number variables corresponding encoding propagating mutexes nodes increasing number negative binary clauses 
added binary clauses increase propagation branch backtracking search speed solution time 
interesting open question currently investigating sat solver uses dependency directed backtracking rel sat learn added clauses running medic type encoding 
short intermediate plan graph representation appears improve quality automatic sat encodings strips problems 
consider differences performance caused different sat solvers blackbox satplan 
see walksat performs smaller blackbox instances poorly largest log log contrast local search works largest satplan encodings 
suggests specific connection local search statebased encodings topic received relatively little attention original satplan 
deterministic version satz shows consistent behavior blackbox instances rocket log satz dramatically log log satplan encodings 
happening satz variable choice heuristic usually wrong choice early search tree algorithm spends time exploring large area search space devoid solutions 
discussed gomes selman kautz observe occurring backtrack search deterministic algorithm large distribution problem instances randomized backtrack algorithm repeatedly solving single instance 
case easiest observe formed basis experimental subject simply runs algorithm variable choice heuristic randomly breaks ties 
experiments discussed contrast deterministic algorithm running small different instances 
set examples small surprising phenomena problem timeout prove optimal prove optimal satz rand satz rel sat rocket sec sec sec rocket min min min log min min log min min min log min min log min min min table results blackbox finding optimal solutions benchmark planning problems system search minimum parallel time length 
timeout satz rand solver options graphplan satz cutoff restart satz cutoff restart 
prove optimal satz solver options graphplan satz cutoff restart satz 
prove optimal rel sat solver options graphplan relsat 
long dash indicates solution hours 
case quality solutions ultimately 
occurred trials 
reran experiments randomized restart version satz described earlier 
blackbox schedule satz rand cutoff backtracks restarts followed cutoff backtracks restarting solution 
satplan schedule cutoff backtracks restarting solution 
schedules roughly tuned hand observing trials necessarily optimal 
case observed solution time significantly reduced 
blackbox times rocket log cut half significant savings seen satplan solution time log decreased hours minutes 
short randomized restarts boost performance systematic sat algorithms encodings planning problems 
table shows results running blackbox logistics instances parallel solution length specified advance 
times running graphplan ipp mode instances marginally higher plan length input graphplan type engines perform occurs plan length reaches optimal bound 
ran blackbox satz rand modes timeout mode solution restarts restarts cutoff restart cutoff plan length incremented 
second mode blackbox complete making final part solver schedule run satz cutoff 
second mode proves optimality 
comparing modes see timeout faster second quality solutions ultimately 
second mode blackbox effort goes proving non existence solution length step optimal 
words np part sat translation empirically harder np part 
table presents data initial experiments dependency directed backtracking sat solver rel sat 
complete method guarantees optimality see timings comparable satz rand incomplete mode 
plan length input preliminary experiments indicate satz rand usually edge rel sat 
short performance blackbox plan length search tasks acceptable information failed short trials reused graphplan 
problem sat approach domains problem encodings large 
notable case classic single armed blocks world 
parallel actions permitted plan graph contain layers actions solution 
blocks actions mutexes layer 
translation step block problem large contains clauses negative binary clauses mutexes 
developed modification translation scheme reduce number clauses cases 
note logically necessary translate particular mutex negative binary clause implied parts translation 
particular add clauses state action implies effects preconditions part default translation mutexes need explicitly translated actions conflicting effects conflicting preconditions mutexes effect action conflicts precondition needed 
table shows results performing compressed translation 
encodings smaller number clauses considerably easier solve satz rand difficulty chaining horn clauses entail missing mutexes 
comparison final column provides solution times graphplan search engine working plan graphs explicitly include inferred mutex relations 
performance blackbox graphplan comparable currently state art 
blackbox ability find optimal solutions step blocks world problems considered state art performance little years ago 
short sat encodings large sequential domains operators refinements encoding scheme delay onset combinatorial explosion 
summary experiments show blackbox provides effective approach search bound problem instances certain highly parallel planning domains logistics planning 
approach runs difficulties domains blocks world intermediate plan graph sat translation large technique compressed encodings provide significant relief 
longer version preparation include results expanded set benchmark problems including instances aips planning competition 
performance blackbox aips problem steps blackbox graphplan default compress clauses time clauses time reverse sec sec sec step sec sec sec large sec sec sec large min sec min large hour table comparing default compressed sat translations produced blackbox blocks world problems optimal plan length input parallel actions possible 
solver blackbox compact satz cutoff restart satz cutoff 
star indicates solver failed due memory size long dash solution hours 
tion respectable competitor dominated categories round ipp round note competition problem instances provide way distinguishing planning systems employ plan graphs basis search strategies 
nearly instances easy sense planning graph generated search strategy extract solution hard sense planning graph grew large conversion cnf 
example blackbox difficulty dealing gripper domain due explosion initial plan graph domain inherently non combinatorial linear time domain specific optimal planning algorithm exists 
differences performance various systems largely due various graph pruning strategies employed strategy ipp nebel 
strategies incorporated blackbox simply replacing graphplan front ipp 
memory required sat encoding issue running blackbox small memory machines noted ones mb required log particularly current code optimize memory copies wff kept core memory reused wffs sequentially generated larger bounds 
falling prices ram currently mb support argument approach grow practical time 
serious technical challenge comes structure sharing techniques compactly representing large plan graphs appear versions ipp stan fox long 
translate representations sat multiplying shared structure 
compiling pure sat try compile plan graph smaller set axiom schemas lifted form cnf 
axiom schemas passed general lifted sat solver compiled rules constraint logic programming system 
alternative appears particularly attractive light results obtained constraint logic programming solve planning problems van beek chen 
role limited inference plan graph approach strips planning gains power mutex computations briefly percent set problem vars flit step bw bw bw rocket rocket log log log log table number variables encoding series planning problems simplification percentage determined simplification unit propagation failed literal rule flit binary failed literal rule 
set problems blocks world second set logistics 
described 
construction plan graph graphplan marks pair instantiated actions mutually exclusive deletes precondition add effect 
determines pair facts predicates fully instantiated particular time instant mutually exclusive actions add exclusive actions add 
additional mutexes added actions precondition mutex precondition 
takes number preconditions effects operator constant mutex computation performed time number instantiated actions instantiated action specifies parameters particular time step 
mutex computation simply specialized form constraint propagation limited deduction 
nodes determined inconsistent instantiation immediately eliminated plan graph 
remaining mutex relations constrain search graph sat translation 
natural wonder forms limited inference useful planning problems 
blum personal communication observes computing higher order mutexes triples actions useful 
binary mutex computations extract important local information problem instances 
decided test hypothesis experimenting series different limited inference algorithms sat encodings problems 
program compact developed james crawford considered options unit propagation apply unit resolution 
requires time 
failed literal literal try adding literal formula applying unit resolution 
inconsistency determined literal set false 
requires time 
binary failed literal pair literals try adding pair literals formula applying unit resolution 
inconsistency determined binary clause consisting negations literals added formula single failed literal rule applied 
requires time 
table shows result applying kinds simplifications series encodings blocks world logistics planning problems 
problem show number variables instance percentage variables values determined local computation 
results unit propagation confirm intuition little local information left problems 
blocks world problems variables determined unit propagation logistics problems determined 
story changes dramatically failed literal rule flit 
blocks world problem completely solved 
variables determined 
logistics domain variables eliminated 
binary failed literal rule powerful 
blocks world problems solved completely trivial solve variables rule 
logistics problems reduced size remained non trivial solve 
results led select failed literal rule default simplification procedure blackbox 
runs quickly greatly decreases size hardness problem instance 
far higher overhead versus binary failed literal rule impractical domains considered takes long simplify problem binary rule solve unary simplifier satz rand 
results suggest improved implementation binary rule dramatic help certain domains 
see general limited inference computations sat encoding planning problems provide powerful complement kind specialized mutex computations performed graphplan front blackbox 
role planning specific domain independent simplification procedures 
plan see find polytime simplification algorithms sat take particular advantage structure sat encodings planning problems 
provided overview blackbox planning system described unifies plan graph approach strips planning planning satisfiability framework 
provides concrete step ijcai challenge unifying planning frameworks kambhampati 
discussed empirical results suggest new randomized systematic sat algorithms particularly suited solving sat encodings planning problems 
examined role limited inference algorithms creation solution problem encodings 
strong evidence best current general sat engines powerful search plan extraction engines graphplan descendents 
possible incorporate heuristics general solvers back specialized planner see rintanen approach rapid development new sat engines tactic may premature 
alternative giunchiglia 
evidence possible dramatically boost performance general sat engine feeding tiny amount information structure encoding particular identification action variables 
improving plan graph generation phase kambhampati 
nebel 
directly incorporated blackbox replacing front 
blackbox evolving system 
general goal unify different threads research planning inference propositional satisfiability common foundation 
important direction touched domain specific control knowledge planning bacchus kabanza kautz selman gerevini schubert fox long see cheng selman kautz adding control knowledge blackbox 
bacchus kabanza 

temporal logic control search forward chaining planner 
new directions planning ghallab eds ios press 
bayardo jr schrag 

csp look back techniques solve real world sat instances 
proc 
aaai portland 


satplan satplan tool planning constraints 
aips workshop planning combinatorial search pittsburgh pa van beek chen constraint programming approach planning 
proc 
aaai orlando fl 
blum furst 

fast planning planning graph analysis 
proc 
ijcai montreal canada 
chapman 

planning conjunctive goals 
tr ai tr ai lab 
cheng selman kautz 

control knowledge planning benefits tradeoffs 
proc 
aaai orlando fl 
ernst millstein weld 

automatic sat compilation planning problems 
proc 
ijcai nagoya japan 
fikes nilsson 
strips new approach application theorem proving problem solving 
artificial intelligence 
fox long 
automatic inference state invariants tim 
forthcoming 
gerevini schubert 
inferring state constraints domain independent planning 
proc aaai madison wi 
gomes selman kautz 

boosting combinatorial search randomization 
proc 
aaai madison wi 
giunchiglia sebastiani 

act rest follow exploiting determinism planning satisfiability 
proc 
aaai madison wi 
kambhampati 

challenges bridging plan synthesis paradigms 
proc 
ijcai nagoya japan 
kambhampati lambrecht parker 

understanding extending graphplan 
proc 
th european conf 
planning steel ed vol 
lnai springer 
kautz mcallester selman 

encoding plans propositional logic 
proc 
kr boston ma 
koehler nebel hoffmann dimopoulos 

extending planning graphs adl subset 
proc 
th european conf 
planning ibid 
li chu min anbulagan 
heuristics unit propagation satisfiability problems 
proc 
ijcai nagoya japan 
luby sinclair zuckerman 

optimal speedup las vegas algorithms 
information process 
lett 
kautz selman 

planning satisfiability 
proc 
ecai vienna austria 
kautz selman 

role domain specific axioms planning satisfiability framework 
proc 
aips pittsburgh pa kautz selman 

pushing envelope planning propositional logic stochastic search 
proc 
aaai 
mccarthy hayes 

philosophical problems standpoint artificial intelligence 
machine intelligence michie ed ellis horwood chichester england page ff 
mcdermott 

pddl planning domain definition language 
draft 
nebel koehler 

ignoring irrelevant facts operators plan generation 
proc 
th european conf 
planning ibid 
rintanen 

planning algorithm directional search 
proc 
kr cohn schubert shapiro eds morgan kaufmann 
selman kautz cohen 

noise strategies local search 
proc 
aaai seattle wa 
veloso 

learning analogical reasoning general problem solving 
ph dissertation cmu 
weld 

advances ai planning 
ai magazine appear 
