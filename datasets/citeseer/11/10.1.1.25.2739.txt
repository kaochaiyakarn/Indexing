exploiting local similarity indexing paths graph structured data kaushik university wisconsin cs wisc edu pradeep shenoy university washington cs washington edu philip bohannon bell laboratories bohannon bell labs com ehud ben gurion university ehud cs bgu ac il xml semi structured data may partially specified missing schema information motivating structural summary automatically computed data 
summaries serve indices evaluating complex path expressions common xml semi structured query languages 
answer path queries accurately summaries encode information long seldom queried paths leading increased size complexity little added value 
introduce indices family approximate structural summaries 
concept bisimilarity nodes grouped local structure incoming paths length parameter smoothly varies level detail accuracy index 
small values size index substantially reduced 
smaller index approximate describe techniques efficiently extracting exact answers regular path queries 
experiments show moderate values path evaluation index ranges efficient simple queries competitive complex queries significantly space comparable structures 

rapidly increasing popularity xml data representation lot interest query processing data conforms labeled tree data model 
schema data may partially constrain data 
example xml schema construct allows arbitrary content appear element 
result techniques developed extract structural summaries directly data :10.1.1.41.3258:10.1.1.25.9024
aiding user query formulation serving convenient place store statistics structural summary fulfill conducted part author visiting bell labs 
roles schema traditional database schema prescriptive may change update 
structural summaries play important role query evaluation graph structured data schema 
query languages proposed querying data relatively simple clause sql replaced pattern language built path expressions 
simple path expressions popularized objectoriented query languages path languages proposed semistructured xml graph structured data substantially complex regular path expressions xpath expressions 
efficient query answering languages clearly depends efficient evaluation complex path expressions 
structural summaries semi structured data aid evaluation pruning search space 
alternatively index graph consisting structural summary stored mapping summary nodes data nodes may evaluate path expressions directly :10.1.1.30.6664:10.1.1.41.3258
introduces indices family efficient flexible data structures capable serving structural summaries index graphs graph structured data 
key observation exploited indices structure interesting 
particular long complex paths tend contribute disproportionately complexity accurate structural summary 
indices approximate paths longer exploiting similarity short paths reduce size structure 
index substantially smaller fully accurate structure substantially faster shorter path expressions surprisingly quite competitive arbitrary path expressions 
index key contributions 
develop efficient techniques extracting exact answers path expressions approximate index graphs 
include techniques validating nodes doubt observations allowing number needless validations avoided 
second report results preliminary study perfor mance addresses comparative performance index index original data graph real world data sets impact parameter size index graph performance :10.1.1.30.6664
performance results show indices effectively support path queries 
example large classes simple queries evaluated subset internet movie database index reduces query processing cost measured graph node visits compared index 
data set index smaller index fewer nodes 
rest organized follows 
background material section 
section introduce index construction algorithm 
section introduces techniques path expression evaluation section evaluates search performance index 
discuss related section conclude section 
background model xml semi structured data directed labeled graph vg root label oid value 
edge indicates object subobject relationship 
simple nodes vg outgoing edges value value function 
node vg labeled string literal label function unique identifier oid function simple objects distinguished label value 
single root element distinguished label root 
example shows portion hypothetical metro guide represented data graph 
numeric identifiers nodes represent oid 
guide reasonably built collection xml documents published businesses civic groups interested parties 
non tree edges may implemented id idref construct xlink syntax 
introduce terminology paths path expressions 
node path sequence nodes 
edge exists node 
label path sequence labels 
node path matches label path label path specified path refers label path 
matches valid node 
matches node path path path simple path expression label path label root 
regular path expression defined usual way terms sequencing alternation repetition optional expressions shown 

symbol matches path expressions matching root element database graph initial root label implied omitted 
denote regular language specified say matches data graph node label path appearing word matches node path result evaluating set nodes vg match example simple path expression root metro cultural museum evaluated graph return 
complicated expression finds names hotels museums root metro neighborhoods neighborhood 
hotel museum name 
expression matches nodes 
optional allows query ignore irregularities schema attraction cultural tags museums just hotels tag hotels 
common class queries includes initial example hotel finds hotel nodes graph 
need create structural summary semistructured data clearly identified lore project dataguide created response :10.1.1.41.3258:10.1.1.25.9024
approach taken dataguide followed including create structural summary form labeled directed graph 
idea preserve paths data graph summary graph having far fewer nodes edges 
proposed possible associate extent node summary produce index graph :10.1.1.30.6664:10.1.1.41.3258
node index graph ext extent respect subset vg index graph result executing path expression union extents index nodes match require extent mapping safe 
label path matches path node node 
matches path ext 
guarantees result path expression contained result 
index graph said precise converse holds ext 
valid label path 
valid label path define notion bisimilarity closely related index 
symmetric binary relation vg called bisimulation data nodes label parent parent vice versa 
nodes said bisimilar denoted bisimulation example objects hotel nodes hotel hotel name name name name root cultural museum museum cultural museum museum neighborhoods business metro neighborhood neighborhood name phone name phone cultural attraction attraction natural history art nearby nearby hotels hilton 
example graph structured database bisimilar objects labeled attraction parent labeled nearby 
extension objects nodes immediately labeled cultural bisimilar parents 
easy induction shows nodes bisimilar set coming paths 
partition vg induced obtain index graph creating index node equivalence class setting members equivalence class extent node 
edge added index node edge exists node ext node ext 
way defining index index graph referred simply index :10.1.1.30.6664
worst case guarantee index size index bigger data graph 
computed time lg number nodes number edges data graph algorithm proposed paige tarjan 

index index dataguide precisely encode paths data graph including long complex paths 
nodes locally similar may stored different extents due variety complex circuitous paths 
instance example subtrees rooted appear similar 
bisimilar due incoming path passes hotel nearby attraction cultural 
small example clear path may important querying museum objects 
easy get longer paths semantic content larger examples authors consider similarity relationship index :10.1.1.30.6664
consider alternative due inefficient construction algorithms similarity relation see details :10.1.1.30.6664
paths exist index close data graph size 
fact subset data open directory project see section index turns data graph size 
course long complex paths key majority queries written users larger index may preferred 
expect queries rare practice 
intuition explore problem building index graphs take advantage local similarity order reduce size index graph 
mean nodes similar structure example museum nodes grouped possible long path case hotels distinguishes 
accomplish goal exploit fact equivalence class partition nodes data graph create index graph process similar index 
index graph safe larger data graph size index graph may precise 
illustrate point index graph obtained simply classifying nodes graph shown label shown 
labels associated index nodes correspond common label data nodes extents 
numbers shown index nodes oid data nodes respective extents 
note index graph combined subtrees starting nodes labeled cultural business respectively 
certainly acceptable approximate summary original database 
false paths museum node oid reachable node labelled hotel original database 
consider index graph 
detailed index graph special property false paths length length measured nearby hotel phone name attraction neighborhood museum cultural business neighborhoods metro root hotels hotel metro root neighborhoods business cultural museum neighborhood name hotels name phone name nearby attraction attraction cultural cultural 
index graphs data graph terms number edges index graph 
example nodes separated length path nearby attraction cultural node 
go splitting node containing extent ensure paths length valid 
formalize process obtain family index graphs 
main idea structures give absolute precision group similar pieces data order allow index size maximum area index graph affected update controlled parameter set 
parameter increases indices family get accurate index 
index graph bisimilarity step achieving goal indexing desirable paths data graph propose index classifies data graph nodes paths length entering data nodes 
obtain index notion bisimilarity satisfies property nodes bisimilar set paths nodes identical 
definition bisimilarity defined inductively 

nodes iff label 

node iff parent parent vice versa 
simple induction see definition ensures weaker condition sets achieve 
note bisimilarity defines equivalence relation nodes graph 
call bisimulation 
obtain index graph bisimulation creating index node equivalence class associating data nodes class extent node 
edges added process similar index explained section 
call index 
increasing refines partition induced equivalence relation splitting certain equivalence classes 
continues fixed point reached relation shown exactly maximal bisimilarity relation index derived 
process illustrated example 
index 
sequence indices example shows data graph index index index respectively bisimilarity bisimilarity bisimilarity 
case bisimulation maximal index 
note index graphs shown figures index index respectively data graph shown 
illustrates family indices pick structural summary requisite amount detail meets space constraint 
describe proof properties index graphs 
property nodes bisimilar set length 
set label paths length index node set label paths length node extent 
index precise simple path expression length equal 
index safe result path expression contains graph result query 
bisimulation equal refinement bisimulation 
property see varying obtain smooth range indices increase size converge index 
property subsequent index derived splitting nodes previous index 
intuition index construction algorithm described section 
property index limits impact update index graph 
index effect index update data graph limited locally neighborhood distance formalized property property nodes shortest path contains edges 
edge added deleted going node update affect bisimilarity relationship index construction algorithm compute index variant standard algorithm computing bisimulation 
presenting construction algorithm introduce important notion stability set graph nodes respect 
set nodes succ denote set successors nodes set node edge 
definition sets data graph nodes said stable respect subset succ succ disjoint 
call partition vg stable respect partition vg equivalence class stable respect class bisimulation coarsest refinement bisimulation stable respect 
sets nodes node sets wish stable respect split succ succ 
represent bisimulation list node sets corresponds equivalence class bisimulation partition compute bisimulation steps 
copy bisimulation split equivalence classes node sets copy stable respect equivalence classes bisimulation 
procedure compute sketched 
data structures implement efficiently ones 
algorithm maintains partition data nodes list node sets 
iteration algorithm stabilizes respect copy line implements stabilization node set process repeated times 
initial partition label index partition algorithm outputs partition corresponding index 
set copy partition 
approach takes time km space number edges bisimulation partition computed index constructed procedure compute index shown 
index composition label map value index hash table index graphs data graphs cases path index maintained data graph maintained index graph 
variety possible index structures composition leads large index design space corresponding path evaluation search space scope 
consider composition addition label map 
label map simply partition data nodes label analogous edge index allows access nodes certain label 
implemented hash table consider large data graph stored mapping data nodes may stored clustered label 

path evaluation approximate index graphs section strategies data graph index graph search introduce validation techniques path evaluation approximate indices technical result allows unnecessary validations avoided 
path expression evaluation evaluate path expression graph forward backward strategy 
forward strategy simply involves simulating action nfa graph described 
backward evaluation strategy label map introduced find nodes bearing final label mentioned evaluated reverse manner nodes determine paths data nodes match automaton 
intuition expression may significantly selective earlier parts processing manner cheaper 
note optimization issue depending data query shall see forward backward executions may better 
purpose evaluating multiple search techniques including label map avoid certain procedure compute 
list node sets 
partition vg label 
copy 

foreach stabilize 
compute succ 
foreach split 
replace succ succ 
split 
break 
copy procedure compute index 
compute 
foreach equiv 
class bisimulation 
create index node 
ext data nodes equiv 
class 
foreach edge 
index node containing 
index node containing 
edge 
add edge 
index computation poor evaluation strategies 
example initial construct commonly find pattern graph naive automaton execution scheme entire graph explored pattern 
label map evaluation non wildcard labels query 
feasible execution plans evaluation scope 
forward evaluation regular path queries graph proceeds follows 
nfa created regular expression root 
run index graph index graph traversed breadth making corresponding state transitions automaton matching transition label pairs 

table kept avoid repeatedly visiting data node graph state automaton avoiding cycles 

node index graph reached corresponding automaton state accept state index node added final result 
note due table edge visited state cost evaluation limited number states automaton number edges graph 
practical queries small constant 
handling approximate index graphs evaluate regular expression index graph simply forward backward automaton evaluation strategy adding nodes ext result set accepted automaton 
indices safe index result set superset target set results obtained data graph 
property automaton execution strategy accepts node index graph path length root node ext target set index node accepted longer path data nodes initially added set result set exploring graph breadth ensure shortest path node 
deal possible false positives validating nodes original data graph 
validation handled reverse execution automaton data graph node potentially expensive take advantage shared paths mitigate expense 
idea keep track node passed way accept state reverse execution state automaton node 
node encountered state know validation leads answer terminate current automaton execution 
similar technique minor modifications keep track paths lead failure 
note backward evaluation strategy data graph validation nodes closely related 
main difference number nodes checked reverse automaton 
fact backward evaluation strategy data graph usually need backward traversal nodes index validation 
index provides better pruning simple label map cost visiting nodes index achieve pruning 
avoiding needless validation prove theorem significantly reduces need validate nodes allowing node extents marked directly valid 
consider label path 
index node suffix paths path expression denote associated regular language 
theorem paths exist database path expression data graph nodes ext target set proof theorem appears full version 
illustrate idea theorem consider evaluating path expressions bad evaluated index shown 
arriving oid index evaluating conclude valid member answer set need validated distance root path matched 
reason follows index accurate suffix path data graph node existence parent label case node ensured node connected root path suffix node path database matched query node result set query 
case bad node validated case discarded exact answer 
current implementation takes advantage theorem cases 
disregard distinguished root graph data files drawn xml document single root paths go root 
second subcase path expression form common construct 
node index graph recognized automaton due path portion matched trivially satisfies condition theorem length portion path matched need considered 
result observations simple queries evaluated accurately index fact demonstrated queries real world data section 

performance section investigate performance index 
description experimental framework datasets discuss impact index graph size 
address performance costs evaluating classes path expressions data graphs drawn real world sources 
section summarizes results experimental study 
experimental framework data experiments described section xml data drawn web sites supporting querying browsing data 
source internet movie database imdb second open directory project odp 
selected imdb database identified highly cyclic database stress path indexing algorithms authors able compute strong dataguide significant subsets data 
portion database organized movie elements elements classes people appear movie credits actor director composer wide variety information movies 
arises movie element pointers individuals worked movie element representing individual pointers movies worked 
create dataset chose small subset movies people associated movies 
sample movies associated current set people add movies associated people database 
process repeated desired database size reached dangling pointers removed 
open directory project data hierarchical classification topics internet sites 
extracted subsets data choosing set top level topics case shopping home society regional forming data set 
manipulated original rdf format inter topic appear idref edges selectively replaced tags word served topic title 
name home nodetype topic 
transformation allows meaningful path queries 
note complete query processing system utilizing index graphs transformations simple mappings index creation path expression evaluation 
note topics appear path expression index replaced tag topic final result set filtered original topic 
varied complexity index graph applying transformation subset tags appeared frequently data top frequent tags 
path expression queries divide path expressions classes purposes evaluating index performance short long 
queries linear path expressions generated performing random walks index data set 
probability don care symbols added 
construct chosen simulate expression ignores tags certain levels query structure document imperfectly known note cyclic data accomplishes poorly 
short queries length path matching query varies long queries corresponding lengths 
intention short queries answered precisely index values long queries require validation 
consider classes complex queries long queries initial long queries middle 
query evaluation cost model absence standard storage scheme data simple memory cost model cost query defined number nodes visited index data graph automaton execution 
nodes counted visited ids appear extent matched index node case approximate indices data graph nodes visited result validation counted 
cost corresponds number os native storage engine store data indices assign uniform cost object examination 
noted difficult guarantees clustering graph model object examination may require random disk access 
size case index size index upper bound dependent number distinct tags length longest simple path path cycles data independent size data :10.1.1.30.6664
particular multiple copies data graph size index increase course number oids stored extents index increases 
data unstructured index big 
worst case data node unique tag represents case absolutely structure data 
case index equals data size 

index sizes shows variation number nodes index databases experiments 
lower curve shows number nodes index sample imdb database nodes 
index range values shown fraction database size 
data set indices database size 
note index converges index small case relatively small value 
fact index equal size index 
index shows wide range sizes 
second curve shows index sizes subset odp data generated top frequent tags dataset 
size database nodes built topics 
variation sizes indices similar case imdb data 
note size index index converges significantly higher fraction database nearly 
space saving properties index significantly important dataset 
index approximate answers long queries initial imdb data parameter index false positives guaranteed results 
index accuracy shows details regarding accuracy index path expression queries 
data set imdb data set described earlier section queries long queries initial described section 
moment ignore query execution mechanism associated cost shall return subsequent sections 
results shown averaged queries 
axis refers parameter index index results shown stacked bar components bottom top nodes guaranteed answer correct nodes need validated accessible paths longer index false positives 
expected index simply classifies nodes labels gives large number false answers 
index extremely small encodes little original graph structure 
fraction false positives quickly drops close 
initial queries illustrates index accurately preserves paths length just start note queries accurate results include node matches label root 
results queries initial similar omitted 
note correctly returned answers validate guarantee correctness 
number drops rapidly increases making index result reasonable approximate answer applications 
path expression evaluation results comparison index graphs short long queries imdb short imdb long odp short normalized data graph fwd index fwd index fwd data graph fwd index index data graph 
query execution costs cross section results query processing costs index index data graph 
compares query performance graphs different execution strategies queries 
group bars shows query execution costs index index data graph forward execution costs followed backward label map execution costs graphs order 
execution cost group averaged queries normalized forward execution cost data graph experiment 
groups correspond experiments imdb dataset short queries imdb dataset long queries odp dataset short queries 
brings points relative performance index index data graph similar shown data sets query types execution strategies 
note results complex queries containing mixed discussed 
index experiments clearly better index turn better data graph regardless label map regardless evaluation 
instance imdb dataset short queries best index cost half index cost quarter data graph cost 
label map note index size imdb database index odp database index size backward execution best execution strategy 
example short queries forward execution strategy cheaper 
variation query performance forward backward execution mainly due shared paths optimization see section 
longer paths greater chance sharing greater saving 
example benefit shared path optimization consider second group bars imdb data long queries backward evaluation data graph simple optimization shown factor worse 
longer queries backward execution strategy tends better 
shorter paths likelihood sharing forward execution efficient queries 
impact parameter shows impact parameter index query processing different query sets execution strategies imdb dataset 
execution cost index shown fraction corresponding index cost index traversal validation costs marked separately 
described earlier validation cost number data graph nodes visited resolve doubtful cases index result 
results shown correspond best plan case shorter queries forward execution longer queries backward execution 
shows performance index short queries 
seen index traversal cost index cheaper large factor smaller values 
validation cost drops drastically increases intermediate values cheaper get approximate result validate get correct answers accurate index 
expected larger indices noticeable validation costs queries satisfied paths shorter shows similar comparison index index longer queries 
results largely similar previous graph show new feature larger indices show component validation cost 
shows performance index comparison index short queries odp data 
normalizing factor index execution cost execution mechanism 
seen results quite similar short queries imdb database 
result important light considerable size index database 
results combined space saving qualities index clear winner 
consider 
imdb short long queries impact short queries forward exec parameter index validation cost index cost 
short queries odp data odp data queries longer queries queries containing odp database contained relatively fewer long paths random walk returned 
summing results see intermediate values index outperforms index validation cost factored 
note value performance index best size index significantly smaller index 
fact larger index equal index little difference performance 
path expressions consider effect presence query performance index 
graph compares index index longer path expression queries single query 
results correspond best execution plan 
plot shows case index give significant benefits index 
note comparison data graph execution cost shown factor worse index cost 
shows performance index queries single placed query 
see case index worse index 
cost index execution validating large number false paths 
note results backward evaluation strategy comparison best execution strategy data graph times index cost 
summary results experiments section summarized follows index approximate close accurate intermediate values path expressions 
includes simple paths longer index queries start 
index execution cost competitive appropriate values better index 
true account validation cost index bear 
complex queries including contain show different results index worse close index performance 
index clearly advantageous user path expressions short query optimizer select path index 
mix user queries index may best choice small win expressions competitive queries 

related previous proposals indexing semistructured data path expressions strong dataguide index :10.1.1.30.6664
examined difference index index section 
strong dataguide graph computed interpreting non deterministic automaton obtaining 
index performance queries containing equivalent deterministic automaton 
simple path expression consisting labels evaluated examining sequence exactly nodes strong dataguide 
side effect data node appear extent index node 
directly analogous deterministic automata worst case number nodes strong dataguide exponential size data graph 
behavior attained real data set noted unable compute strong dataguide small subset highly cyclic internet movie database 
authors propose representative object structure schema discovery path queries 
full representative objects fros implemented dataguides 
propose approximation fros representative objects 
index similar ro path length database ro automaton summary 
index stores information ro returns specific oid labels directly suitable path queries non deterministic 
approximate versions dataguide appear applicability path evaluation focus discussed 
typing scheme proposed global nature 
phase approach similar bisimulation computation takes account incoming outgoing paths 
minimal perfect typing yield bigger path index outgoing paths 
authors propose storage indexing strategy data nodes partitioned relational tables extent dataguide fall 
storage indexing strategy equally applied index index 
results tree data 
numbering scheme xml data trees proposed enables ancestor queries answered constant time 
path tree viewed string stored multi level patricia trie 
structures directly extended handle graph data numbering scheme preorder postorder numbers generalize graphs infinite paths graph fact acyclic graph exponentially paths 
explore application local similarity structural summaries path indexing expect ideas widely applicable especially area statistics query optimization 
particular technique markov chains finite memory proposed estimate selectivity path expressions exploits local structure save space 
note index graph defined index dataguide similar structure quotient graph structures commonly summaries program automata 

index clean generalization index 
varying family indices offers smooth tradeoff size index graph accuracy 
owing smaller size small values perform better index interesting classes queries remaining competitive queries 
expect extend structural summaries indexing areas schema extraction query optimization instance maintaining statistics 
expect techniques generalize handle complex path conditions selection branching 
part 
handling updates important aspect structural summary path indexing problem 
index index specific update algorithm index applicable index 
index worst case guarantee impact updates effect updates restricted distance storing tree splits representing history index builds iterations possible arrive update algorithm edge insertions 
topic 
goal complexity maintained index structure utilized application investigate techniques index structures adaptable specific query workloads 
authors rajeev alur yannakakis helpful discussions theory practice bisimulation hank korth jeff naughton rachel pottinger dan suciu helpful comments earlier versions 
abiteboul 
querying semi structured data 
int conference database theory icdt 
abiteboul buneman suciu 
data web relations semistructured data xml 
morgan kaufmann publishers 
naughton 
estimating selectivity xml path expressions internet scale applications 
proceedings vldb 
bohannon kaushik shenoy 
efficient indexing xml data 
technical report lucent technologies bell labs nov 
buneman fernandez suciu 
unql query language algebra semistructured data structural recursion 
vldb journal large data bases may 
clark 
extensible stylesheet language xsl version 
world wide web consortium recommendation 
www org tr xslt nov 
clark derose 
xml path language xpath 
recommendation 
world wide web consortium www org tr xpath nov 
cooper sample franklin 
fast index semistructured data 
proceedings vldb 
chamberlin florescu robie simeon stefanescu 
xquery query language xml 
world wide web consortium www org tr xquery feb 
deutsch fernandez florescu levy suciu 
query language xml 
proceedings eighth world wide web conference 
fernandez florescu levy suciu 
declarative specification web sites strudel 
vldb journal large data bases may 
electronic edition 
fernandez simeon wadler cluet deutsch florescu levy maier mchugh robie suciu widom 
xml query languages experiences exemplars 
www db research 
com user simeon xquery ps 
gionis garofalakis rastogi seshadri shim 
xtract system extracting document type descriptors xml documents 
proc 
international conference management data 
goldman widom 
dataguides enabling query formulation optimization semistructured databases 
third international conference large data bases pages 
goldman widom 
approximate dataguides 
proc 
workshop query processing semistructured data non standard data formats pages jan 
lee yannakakis 
online minimization transition systems extended 
proceedings fourth annual acm symposium theory computing may 
li moon 
indexing querying xml data regular path expressions 
proceedings vldb 
mchugh abiteboul goldman quass widom 
lore database management system semistructured data 
sigmod record 
mchugh widom abiteboul luo 
indexing semistructured data 
technical report stanford univ jan 
milner 
calculus communicating processes volume lecture notes computer science 
springer verlag 
milo suciu :10.1.1.30.6664
index structures path expressions 
icdt th international conference database theory 
nestorov abiteboul motwani 
extracting schema semistructured data 
sigmod record jun 
nestorov ullman weiner chawathe 
representative objects concise representations semistructured hierarchical data 
proceedings th international conference data engineering icde pages 
ieee apr 
open directory project 
dmoz open directory project 
www dmoz org 
paige tarjan 
partition refinement algorithms 
siam journal computing dec 
park 
concurrency automata infinite sequences 
theoretical computer science th gi conf lncs pages 
springer verlag karlsruhe mar 
quass rajaraman sagiv ullman widom 
querying semistructured heterogeneous information 
deductive object oriented databases dood number lncs pages 
springer 
mendelzon 
indexing xml data toxin 
proc 
webdb 
derose maler orchard 
xlink standard 
world wide web consortium www org tr xquery nov 
internet movie database internet movie database 
www imdb com 
thompson beech maloney mendelsohn 
xml schema part structures 
working draft feb 
