gsat dynamic backtracking matthew ginsberg cirl university oregon eugene david mcallester mit ai laboratory technology square cambridge ma substantial interest new families search techniques 
family consists nonsystematic methods gsat contains systematic approaches polynomial amount justification information prune search space 
introduces new technique combines approaches 
algorithm allows substantial freedom movement search space information retained ensure systematicity resulting analysis 
bounds size justification database conditions guarantee database polynomial size problem question 
past years seen rapid progress development algorithms solving problems csps 
csps arise naturally subfields ai planning vision examples include propositional theorem proving map coloring scheduling problems 
problems difficult involve search guarantee example successful coloring portion large map extended coloring map entirety 
algorithms developed types 
systematic algorithms determine solution exists searching entire space 
local algorithms hill climbing techniques find solution quickly nonsystematic search entire space probabilistic sense 
empirical effectiveness nonsystematic algorithms appears result ability follow local gradients search space 
traditional systematic procedures explore space fixed order independent local gradients fixed order local gradients impossible needed ensure node examined twice search remains systematic 
dynamic backtracking ginsberg attempts overcome problem retaining specific information portions search space eliminated local gradients remainder 
previous algorithms recorded elimination information dependency directed backtracking stallman sussman dynamic backtracking selective information caches polynomial amount memory required 
earlier techniques cached new result backtrack amount memory linear run time exponential size problem solved 
unfortunately dynamic backtracking known similar method truly effective local maneuvering search space basic underlying methodology remains simple chronological backtracking 
new techniques included search efficient exponential number nodes search space examined early choices retracted 
existing search technique able move freely search space keep track searched hasn 
second class algorithms developed presume freedom movement greater importance systematicity 
algorithms class achieve freedom movement abandoning conventional description search space tree partial solutions thinking space total assignments values variables 
motion permitted assignments differ single value hill climbing procedure employed try minimize number constraints violated assignment 
best known algorithms class min conflicts minton gsat selman 
min conflicts applied scheduling domain specifically schedule tasks hubble space telescope 
gsat restricted boolean satisfiability problems variable assigned simply true false led remarkable progress solution randomly generated problems type performance reported selman kautz selman selman surpassing techniques simulated annealing kirkpatrick systematic techniques davis putnam procedure davis putnam 
gsat panacea problems performs fairly poorly 
problem solution example gsat able report confidence 
solution exist appear possible difficulties gsat may encounter 
gsat search space may contain local minima clear gsat move reduce number constraints violated assignment 
example consider csp generating crossword puzzles filling words fixed dictionary empty frame ginsberg 
constraints indicate conflict squares words square letter 
domain getting close necessarily indication problem nearly solved correcting conflict single square may involve modifying current solution 
konolige reported gsat specifically difficulty solving problems sort konolige 
second gsat forward propagation 
crossword domain selecting word may force selection variety subsequent words 
boolean satisfiability problem assigning variable value true may cause immediate cascade values assigned variables technique known unit resolution 
plausible forward propagation common realistic problems randomly generated ones difficult random problems appear tangles closely related individual variables naturally occurring problems tend tangles sequences related variables 
furthermore appears gsat performance degrades relative systematic approaches sequences variables arise crawford baker 
aim describe new search procedure appears combine benefits earlier approaches loose sense thought systematic version gsat 
sections summarize original dynamic backtracking algorithm ginsberg presenting perspective local search 
termination proof omitted earlier papers ginsberg mcallester 
section modification dynamic backtracking called partial order dynamic backtracking pdb 
algorithm builds mcallester mcallester 
partial order dynamic backtracking provides greater flexibility allowed set search directions preserving systematicity polynomial worst case space usage 
section presents new variant dynamic backtracking flexible allowed set search directions 
final procedure systematic exponential space worst case 
section presents empirical results comparing pdb known algorithms class local randomly generated sat problems 
concluding remarks contained section proofs appear appendix 
constraints nogoods slightly nonstandard definition csp 
definition constraint satisfaction problem mean finite set variables finite set possible values variable set constraints form delta delta delta variable element solution csp assignment values variables satisfies constraint 
variable require constraint delta delta delta require size constraint satisfaction problem mean product domain sizes various variables jv technical convenience definition constraint clear shortly 
moment merely note description clearly equivalent conventional represent constraints terms allowed value combinations various variables write axioms disallow specific value combinations time 
size csp number possible assignments values variables 
systematic algorithms attempting find solution csp typically partial solutions discovered violate constraints happens backtrack occurs partial solution consideration modified 
procedure course need record information guarantees partial solution considered search proceeds 
information recorded structure search depth search chronological backtracking example 
sophisticated methods maintain database form indicating explicitly choices eliminated 
database consisting set nogoods de kleer 
definition nogood expression form delta delta delta nogood represent constraint implication logically equivalent constraint delta delta delta clearly different ways representing constraint nogood 
special nogood empty nogood false 
denote empty nogood derived set constraints follows solution exists problem attempted 
typical way new nogoods obtained resolving old ones 
example suppose derived values domain follows combine nogoods conclude solution moving gives general suppose collection nogoods form delta delta delta varies variable appears nogoods 
suppose antecedents agree value time appears antecedent nogoods term fixed nogoods collectively eliminate possible values conclude inconsistent moving specific gives note freedom choice variable appearing nogood 
gamma gamma gamma gamma gamma gamma gamma gamma denmark england bulgaria czechoslovakia small map coloring problem step search algorithm presumably satisfy changing value selection consequent variable corresponds choice variable flip terms gsat hillclimbing algorithms 
remarked dynamic backtracking accumulates information set nogoods 
see done consider map coloring problem repeated ginsberg 
map consists countries bulgaria czechoslovakia denmark england 
assume wrongly countries border shown countries denoted nodes border arc connecting 
coloring map colors red green blue 
typically abbreviate colors country names single letters obvious way 
table gives trace conventional dependency directed backtracking scheme attack problem row shows state procedure middle backtrack step new nogood identified colors erased reflect new 
coloring removed appears boldface 
drop column discussed shortly 
add drop coloring red bulgaria green try color czechoslovakia red 
violates constraint czechoslovakia different colors nogood table produced 
change czechoslovakia color blue turn denmark 
denmark colored red green nogoods appear remaining color denmark blue 
unfortunately having colored denmark blue color england 
nogoods generated resolve eliminate possible colors england 
result solution rewrite 
turn resolved get correctly indicating color red inconsistent choice green bulgaria 
analysis continue point gradually determine bulgaria red denmark green blue england color chosen denmark 
mentioned problem approach set gamma nogoods grows monotonically new nogood added step 
number nogoods stored grows linearly run time presumably exponentially size problem 
related problem may increasingly difficult extend partial solution violating nogoods gamma 
dynamic backtracking deals discarding nogoods irrelevant sense antecedents longer match partial solution question 
example nogoods eliminated indicated final column trace 
derive remove denmark longer colored blue 
derive remove nogoods antecedents 
information retain red color precludes red czechoslovakia denmark england green bulgaria 
dynamic backtracking dynamic backtracking uses set nogoods record information portion search space eliminated record current partial assignment considered procedure 
current partial assignment encoded antecedents current nogood set 
formally definition acceptable assignment nogood set gamma assignment satisfying nogood gamma antecedent nogood 
call set nogoods gamma acceptable nogoods gamma gamma exists acceptable assignment gamma 
gamma acceptable antecedents nogoods gamma induce partial assignment values variables acceptable assignment extension partial assignment 
table example nogoods encode partial assignment nogoods fail encode partial assignment seventh nogood inconsistent partial assignment encoded nogoods 
sixth nogood removed seventh nogood added 
procedure dynamic backtracking solve csp complete assignment values variables gamma solution gamma fl constraint violated gamma simp gamma fl acceptable assignment gamma simplify discussion assume fixed total order variables 
versions dynamic backtracking dynamic rearrangement variable order ginsberg mcallester 
new nogood added fixed variable ordering select variable appears nogood latest variable appears 
subroutine simp closes set nogoods resolution inference rule discussed previous section removes nogoods antecedent appears nogood 
giving detailed analysis note simplification ensures gamma remains acceptable 
prove termination introduce notation definition acceptable gamma variable define live domain values appear nogood gamma 
denote size live domain jxj gamma denote gamma tuple hjx gamma 
jx gamma 
xn variables csp specified order 
acceptable gamma define size gamma size gamma jv gamma jv gamma jxj gamma jv informally size gamma size remaining search space live domains variables assuming information lost change value variable result obvious lemma suppose gamma gamma gamma lexicographically gamma 
size gamma size gamma 
termination proof repeat observation simplification lexicographically reduces gamma 
assuming gamma initially size jv follows running time dynamic backtracking bounded size problem solved 
proposition acceptable set nogoods stored space number variables maximum domain size single variable 
worth considering behavior procedure applied csp union disjoint csps share variables constraints 
subproblems unsatisfiable variable ordering interleaves variables subproblems classical backtracking search take time proportional product times required search assignment space separately 
contrast procedure works problems independently time taken solve union problems sum times needed individual subproblems 
follows procedure fundamentally different classical backtracking backjumping procedures procedure fact called polynomial space aggressive backtracking procedure mcallester 
dynamic backtracking local search proceeding highlight obvious similarities procedure selman description gsat selman procedure gsat solve csp max tries randomly generated truth assignment max flips solution return flip variable results greatest decrease number unsatisfied clauses return failure inner loop procedure local move search space direction consistent observation remains true backjumping techniques 
goal satisfying maximum number clauses say gsat follows local gradient maxsat objective function 
local search get stuck local minima outer loop provides partial escape giving procedure independent chances find solution 
gsat dynamic backtracking examines sequence total assignments 
initially dynamic backtracking considerable freedom selecting assignment cases update total assignment manner identical gsat 
nogood set ultimately constrains allowed directions motion forces procedure search systematically 
dynamic backtracking get stuck local minima 
systematicity ability follow local gradients desirable 
observations previous paragraphs indicate properties conflict systematic enumeration search space appears incompatible gradient descent 
better understand interaction systematicity local gradients need examine closely structure nogoods dynamic backtracking 
discussed fact single constraint represented nogood variety ways 
example constraint represented nogoods capture information behave differently dynamic backtracking procedure encode different partial truth assignments represent different choices variable ordering 
particular set acceptable assignments quite different set acceptable assignments case acceptable assignment satisfy case hold 
intuitively nogood corresponds changing value nogood corresponds changing manner represent constraint influences direction search allowed proceed 
procedure choice representation forced need respect fixed variable ordering change latest variable constraint 
similar restrictions exist original presentation dynamic backtracking ginsberg 
note considerable freedom choice constraint 
total assignment usually violates different constraints 
partial order dynamic backtracking partial order dynamic backtracking mcallester replaces fixed variable order partial order dynamically modified search 
new nogood added partial ordering need fix unique representation considerable choice selection variable appear nogood 
leads freedom selection variable value changed allowing greater flexibility directions procedure take traversing search space 
locally optimal gradient followed gsat adhered 
partial order variables represented set ordering constraints called safety conditions 
definition safety condition assertion form variables 
set safety conditions denote transitive closure saying acyclic antisymmetric 
write mean words possibly empty sequence safety conditions 
requirement antisymmetry means simply distinct words loops partial order variables 
section restrict attention acyclic sets safety conditions 
definition nogood fl denote fl set safety conditions antecedent fl variable 
informally require variables antecedent nogoods precede variables antecedent variables constrain live domains 
state partial order dynamic backtracking procedure represented pair gamma si consisting set nogoods set safety conditions 
cases interested ordering information variables precede fixed variable discard rest ordering information discard safety conditions involving variable follows record follow somewhat formally definition set safety conditions variable define weakening denoted set safety conditions removing safety conditions form adding safety condition set weakening sense total ordering consistent consistent 
usually admits total orderings example specifies total order allows order agrees including variable general lemma set safety conditions variable total order consistent safety conditions exists total order consistent agrees state pdb procedure 
procedure solve csp complete assignment values variables gamma solution gamma fl constraint violated gamma si simp gamma fl acceptable assignment gamma procedure compute simp gamma fl select fl fl acyclic gamma gamma fflg fl remove gamma nogood antecedent nogoods gamma rule possible values ae result resolving nogoods gamma gamma si simp gamma ae return gamma si simplification procedure maintains invariant gamma acceptable acyclic addition time needed single call simp appears grow significantly sublinearly size problem question see section 
theorem procedure terminates 
number calls simp bounded size problem solved 
example suppose return problem 
coloring countries red bulgaria green 
table shows total assignment existed moment new nogood generated 
add drop initial coloring violates variety constraints suppose choose involved violated constraints 
choose specifically add 
modify blue 
constraint violated denmark england different colors add gamma 
suggests change color england try green conflicts bulgaria 
write new nogood change bulgaria blue done 
table optimal choice changing coloring england 
forced color england blue 
conflicts continue leave england nogood add 
nogood resolves produce worst choice put 
add nogood gamma remove nogood nogood antecedent 
add safety condition indicating continue precede 
safety condition nogood discovered indicated explicitly original nogood dropped database 
change denmark green england forced red 
bulgaria denmark green write new nogood denmark ordering implied nogood 
changing denmark blue conflicts write new nogood resolves produce 
drop involve introduce safety conditions 
follows drop safety condition point forced change color bulgaria search continues 
important note added flexibility pdb dynamic backtracking arises flexibility step simplification procedure new nogood selected 
selection corresponds selection variable value changed 
procedure previous section csp union disjoint csps procedure treat subproblems independently 
total running time remains sum times required subproblems 
arbitrary movement partial order dynamic backtracking provide total freedom choice direction search space 
new nogood discovered existing partial order constrains interpret nogood roughly speaking forced change value late variables changing values predecessors 
partial order constraint looser previously 
section allow cycles nogoods safety conditions permitting arbitrary choice selection variable appearing new nogood 
basic idea suppose introduced loop variable ordering including pair nogoods rewrite nogoods variable appears view combination single variable takes value product set theta variables combined way rewrite nogood example antecedent 
example rewrite 
logically equivalent 
view eliminating particular value pair variables 
definition set safety conditions possibly acyclic 
write equivalence class denoted hxi fl nogood involves variable denote fl result moving fl terms involving members hxi gamma set nogoods denote gamma set nogoods form fl fl gamma 
difficult show set safety conditions relation js equivalence relation 
example rewriting nogood presence ordering cycles suppose fl nogood hyi fx yg fl 
placing literal nogoods forces reconsider notion acceptable assignment definition cyclically acceptable assignment nogood set gamma set safety conditions total assignment values variables satisfying nogood gamma antecedent nogood 
define third dynamic backtracking procedure 
note remains defined acyclic drops ordering constraints variables procedure solve csp complete assignment values variables gamma solution gamma fl constraint violated gamma si simp gamma fl cyclically acceptable assignment gamma procedure compute simp gamma fl select fl unconstrained gamma gamma fflg fl remove gamma nogood ff element hxi antecedent ff nogoods gamma rule possible values variables hxi ae result resolving nogoods gamma involve variables hxi gamma si simp gamma ae return gamma si selected remains acyclic procedure identical previous section 
proposition suppose working problem variables size largest domain variable constructed gamma repeated applications simp 
largest equivalence class hxi contains elements space required store gamma 
equivalence class variables possible values number possible values combined variable procedure generate distinct nogood eliminate possible values space requirements procedure grow exponentially size equivalence classes 
time required find cyclically allowed assignment grow exponentially size equivalence classes 
address difficulties selecting advance bound largest allowed size equivalence class 
event termination guaranteed theorem procedure terminates 
number calls simp bounded size problem solved 
selecting variable place new nogood corresponds choosing variable value changed iteration analogous selecting variable flip gsat 
choice unconstrained procedure procedure tremendous flexibility way traverses search space 
procedures previous sections procedure continues solve combinations independent subproblems time bounded sum times needed solve subproblems individually 
ideas boolean csp constraints trace explain add gamma remove gamma nogoods simply constraints appearing problem 
orderings second third nogoods conflict choose write form case 
puts equivalence class drop nogood point 
interpret nogood requiring value taken disallows disallows 
follows nogoods resolved obtain new nogood simply add dropping nogood antecedent falsified 
experimental results section preliminary results regarding implemented effectiveness procedure described 
implementation somewhat restricted procedure opposed general procedure 
compared search engine procedure tableau crawford auton wsat walk sat selman 
tableau efficient implementation davis putnam algorithm systematic wsat modification gsat 
wsat gsat wsat effective fairly wide range problem distributions selman 
experimental data collected random sat problems target investigation growing evidence problems representative difficulties encountered practice crawford baker 
generated problems clauses contain involve groups locally connected variables opposed variables selected random 
somewhat specifically filled theta square grid variables required variables appearing single clause neighbors grid 
lisp code generating examples appears appendix 
believe qualitative properties results reported hold wide class distributions variables spatial locations clauses required local 
experiments performed crossover point approximately half instances generated expected satisfiable appears difficult problems lie crawford auton 
note instances crossover point hard example local variable interactions problems lead short resolution proofs solution exists unsatisfiable cases 
sharp contrast random sat problems short proofs appear exist general shown proof lengths growing exponentially average chv atal szemer edi 
realistic problems may short proof paths particular scheduling problem may unsatisfiable simply way schedule specific resource opposed global issues involving problem entirety 
satisfiability problems arising vlsi circuit design expected locality properties similar described 
problems involved variables 
size generated satisfiable unsatisfiable instances executed procedures measure performance 
wsat tested unsatisfiable instances 
wsat measured number times specific variable values flipped 
pdb measured number top level calls procedure 
tableau measured number choice nodes expanded 
wsat pdb limited flips tableau limited running time seconds 
results satisfiable problems follows 
tableau give node count successful runs indicate fraction problems solved computational resource limitations 
wsat pdb successfully solved instances 
variables pdb wsat tableau unsatisfiable instances results variables pdb tableau times required pdb wsat appear growing comparably pdb able solve unsatisfiable instances 
eventual decrease average time needed tableau managing solve easiest instances class 
causes tableau completely ineffective unsatisfiable case partially effective satisfiable case 
succeed large problems tableau run time greater methods 
collected data time needed top level call simp partial order dynamic backtracking 
function number variables problem number pdb wsat variables msec msec times measured sparc running unoptimized common lisp 
efficient implementation expect improve method approximately order magnitude 
mentioned section time flip growing sublinearly number variables question 
aim primarily theoretical contribution describing new class constraint satisfaction algorithms appear combine advantages previous systematic nonsystematic approaches 
focus description algorithms obviously remains done 
course procedures tested variety problems synthetic naturally occurring results reported section scratch surface 
especially important realistic problems included experimental evaluation ideas problems performance profiles substantially different randomly generated problems crawford baker 
experiments previous section need extended include unit resolution need determine frequency exponential space needed practice full procedure 
left completely untouched question flexibility procedure exploited 
group violated constraints pick add gamma 
variable constraint 
choices correspond choice backtrack strategy conventional setting important understand setting 
proofs proposition acceptable set nogoods stored space number variables maximum domain size single variable 
proof 
done storing partial assignment encoded gamma space 
antecedent nogood represented bit vector specifying set variables appearing antecedent allowing nogood stored space 
nogoods share nv nogoods 
lemma set safety conditions variable total order consistent safety conditions total order consistent agrees proof 
suppose ordering delta delta delta delta delta delta ordering consistent suppose ordering delta delta delta claim ordering 

consistent show showing consistent specific safety condition safety condition remain satisfied 
ordered known satisfy safety conditions clearly follows 
remaining case specific safety condition appear violated 
case include safety condition conflict ordering 
contradiction completes proof 
theorem procedure terminates 
number calls simp bounded size problem solved 
proof 
fact prove theorem procedure stated 
consider simplification procedure procedure compute simp gamma fl select fl fflg acyclic gamma gamma fflg fl remove gamma nogood nogoods gamma rule possible values ae result resolving nogoods gamma gamma si simp gamma ae return gamma si difference procedure procedure procedure removed nogoods antecedents procedure removes nogoods partial order lemma suppose gamma chosen fl fl gamma 
fl nogood violates acceptable assignment gamma gamma simp gamma fl fl fl gamma proof 
clear lemma hold take fl show weakening drop safety condition associated nogood gamma weakening drops safety condition fl variable fl implies case underlying nogood deleted 
follows lemma simp removes nogood fl simp drop variable fl clearly fl simp drops nogoods antecedents virtue lemma simp drops nogood 
see difference procedures set nogoods maintained procedure stated retains superset nogoods retained version simp set safety conditions cases nogood set acceptable cases 
suffices prove theorem simp larger set nogoods computed simp simply result fewer acceptable assignments procedure consider 
see procedure simp terminates definition definition set safety conditions fixed variable ordering delta delta delta xn respects gamma tuple hjx gamma 
jx gamma denote size gamma size remaining search space definition denote size gamma maximum size allowed vary 
proposition suppose gamma acceptable acyclic fl fl gamma 
fl nogood violates acceptable assignment gamma gamma simp gamma fl size gamma size gamma 
proof 
variable fl 
nontrivial step procedure simp gamma gamma fflg 
reduces jxj gamma step fl 
introduces new orderings 
total ordering consistent fl 
exist total ordering consistent fl agree jxj gamma reduced tuple associated lexicographically smaller tuple associated time procedure called 
implies tuples allowed gamma lexicographically smaller tuple allowed simplification 
applying lemma conclude size gamma si pair reduced 
step removes gamma nogoods increases size live domain fact allows repeat lexicographic argument preceding paragraph 
simplification performs resolution executes recursive call recursion continue decrease size gamma si 
follows modification procedure simp fact terminate number steps bounded original value size gamma size problem solved 
procedure terminate quickly 
proposition suppose working problem variables size largest domain variable constructed gamma repeated applications simp 
largest equivalence class hxi contains elements space required store gamma 
proof 
know nogood set acyclic group variables equivalent gamma results variables grouped point maximum domain size reduced problem maximum number nogoods stored bounded nv previously amount space needed store nogood 
theorem procedure terminates 
number calls simp bounded size problem solved 
proof 
proof essentially unchanged theorem provide sketch 
novel features proof involve showing lexicographic size falls variables merged equivalence class equivalence class broken variables contains handled separately 
order extend definition handle equivalence classes follows definition set safety conditions fixed variable ordering delta delta delta xn respects jjx jj jjx jj ae hx jyj gamma 
denote gamma tuple jj 
jjx jji 
denote gamma tuple lexicographically maximal allowed vary 
definition ensures lexicographic value decreases combine variables remaining choices combined variable aren counted latest possible point 
remains show removal nogoods safety conditions split equivalence class prematurely 
clear 
removing safety condition causes variables equivalent case safety condition removed 
note safety condition removed progress variable lexicographic harm splitting equivalence class 
experimental code code generate instances class problems ideas tested 
arguments procedure size variable grid number clauses centered single variable 
variable grid generated bcc bcc clauses random subject constraint variables clause form right triangle horizontal vertical sides length vertex opposite 
triangles assignments values variable triangle giving possible clauses 
common lisp code generating sat problems 
variables edge grid usually generate fewer clauses boundary grid relatively unconstrained 
defun problem aux result xx yy dotimes dotimes dotimes floor 
random rem setq xx random yy random 
xx 
xx 
yy 
yy push new clause xx yy result result defun new clause xx yy mapcar lambda aux zerop random list xx list yy chv atal szemer edi chv atal szemer edi 
hard examples resolution 
jacm 
crawford auton james crawford larry auton 
experimental results crossover point satisfiability problems 
proceedings eleventh national conference artificial intelligence pages 
crawford baker james crawford andrew baker 
experimental results application satisfiability algorithms scheduling problems 
proceedings twelfth national conference artificial intelligence 
submitted 
davis putnam davis putnam 
computing procedure quantification theory 
assoc 
comput 
mach 
de kleer johan de kleer 
assumption truth maintenance system 
artificial intelligence 
ginsberg matthew ginsberg michael frank michael halpin mark torrance 
search lessons learned crossword puzzles 
proceedings eighth national conference artificial intelligence pages 
ginsberg matthew ginsberg 
dynamic backtracking 
journal artificial intelligence research 
kirkpatrick kirkpatrick gelatt vecchi 
optimization simulated annealing 
science 
konolige kurt konolige 
easy hard difficult problems greedy algorithms 
proceedings fourth international conference principles knowledge representation reasoning bonn germany 
mcallester david mcallester 
partial order backtracking 
ftp ai mit edu pub dam dynamic ps 
minton steven minton mark johnston andrew philips philip laird 
solving large scale constraint satisfaction scheduling problems heuristic repair method 
proceedings eighth national conference artificial intelligence pages 
selman kautz bart selman henry kautz 
domain independent extensions gsat solving large structured satisfiability problems 
proceedings thirteenth international joint conference artificial intelligence pages 
selman bart selman hector levesque david mitchell 
new method solving hard satisfiability problems 
proceedings tenth national conference artificial intelligence pages 
selman bart selman henry kautz cohen 
local search strategies satisfiability testing 
proceedings dimacs workshop maximum clique graph coloring satisfiability 
stallman sussman stallman sussman 
forward reasoning backtracking system computeraided circuit analysis 
artificial intelligence 
