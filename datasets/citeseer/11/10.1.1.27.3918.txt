grin project highly optimising back lazy functional languages urban thomas johnsson department computing science chalmers university technology teborg sweden mail johnsson cs chalmers se 
low level optimisations conventional compiler technology give poor results applied code lazy functional languages mainly completely dioeerent structure code unknown control aeow novel approach compiling laziness needed 
describe complete back lazy functional languages uses various interprocedural optimisations produce highly optimised code 
main features new back 
uses monadic intermediate code called grin graph reduction intermediate notation 
code making suited analysis program transformations time provides machinery needed express concrete implementation concerns 
heap points analysis able eliminate unknown control aeow due evals forcing closures applications higher order functions program 
transformation machinery uses simple grin program transformations optimise intermediate code 
eventually grin code translated risc machine code apply interprocedural register allocation algorithm followed low level optimisations 
elimination unknown control aeow earlier help lot making low level optimisations 
preliminary measurements look promising currently twice fast glasgow haskell compiler small programs 
approach gives opportunities optimisations unexplored 
execution speed programs written lazy functional language haskell increased substantially languages rst appeared case slower consume memory imperative programs cases 
reason functional programs slow course functional languages general lazy languages particular 
hard compiler optimise program results 
put way say laziness negligible runtime cost 
purposes show cost reduced doing aggressive optimisations current compilers 
part attack known problem conventional imperative compiler optimisations apply code produced lazy functional language apply produce far satisfactory results 
show important reason laziness properties generated code encode lazy evaluation strategy building forcing delayed computations 
rst important principle solving problem interprocedural optimisation compiler optimise procedures currently program 
seen contrast standard method global optimisation procedure optimised time method quite suoecient imperative programs 
explained detail section 
describe novel back compiler lazy functional language 
interesting features back interprocedural aiming aggressive optimisations current compilers 
intermediate code called grin graph reduction intermediate notation suited analysis program transformations 
time level needed 
step process heap points analysis single grin program transformation able eliminate unknown control aeow give approximation real control aeow inlining calls eval apply program 
grin code compiled optimised series simple grin source source program transformations taken produce greatly code 
grin transformations basis resulting machine code form suitable conventional optimisation techniques 
particular interprocedural register allocation algorithm developed especially call intensive languages mind 
organisation rest follows 
section elaborate problem implementing lazy evaluation try motivate interprocedural compilation important 
section describe structure compiler back 
sections introduce intermediate code grin describe compiled optimised program transformations 
particular heap analysis discussed terms compiler literature global really mean global 
main sum upto upto upto sum case 
xs 
sum xs fig 

small program summing numbers 
section 
grin transformations code translated real machine code described section number low level optimisations applied register allocation described section overview optimisations section 
preliminary results section 
conclude related development back 
lazy evaluation explain lazy evaluation hinders optimisation show interprocedural compilation rst step solving discuss small example program gure 
program running example 
program written syntax similar haskell 
written program imperative language imperative style certainly real loops sum numbers know imperative compilers optimising loops poor optimising procedure calls 
imagine program written strict functional language execution result call graph gure 
main sum upto fig 

call graph dene node call graph union invocations corresponding function 
arc call graph means function call may occur direction arrow 
note call graphs approximations happen execution program safe approximations 
returning example program strict call graph illustrates happen strict execution program 
main function call upto function produce list numbers 
upto function create list recursion kind loop 
eventually return main directly call sum 
sum function consume list recursion sum numbers second loop 
strict version program loops quite 
imagine compiler noticing sum upto recursive calls try optimise ias 
turn call graph program executed lazy language look quite dioeerent attractive compilers point view gure 
main eval sum upto fig 

original call graph imagine standard implementation lazy evaluation graph reduction 
additional procedure added call graph special eval procedure 
procedure force evaluate suspended computation 
normally hidden runtime system implementation think eval ordinary procedure turn argument weak head normal form 
call graph particular procedure calls eval mean procedure needs value closure suspended computation hand eval calls procedure means suspended computation procedure forced 
number dioeerent ways implement optimise see example joh pj thing common code faced suspended computation 
mean unknown compile time procedure call jump 
call graphs seen rst eval new call eval suspended procedure 
main sum upto fig 

improved call graph unfortunately unknown calls main reasons conventional compiler optimisations give poor results lazy functional languages 
compiler faced unknown call unknown control aeow normally pessimistic assumptions possible example allowing values held registers 
functional programming style encourages functions surprising global optimiser optimise code calls time give poor results cases 
consequence want conventional optimisations eliminate control 
way described section 
seen call graph eoeect completely eliminating eval procedure replacing arc eval safe superset calls arcs ordinary procedures 
get call graph gure 
illustrates behaviour happen lazy evaluation program 
loop sum function recursion iteration call upto function produce number new cons cell 
call graph clear producer consumer relationship typical lazy evaluation upto sum functions 
aggressive optimiser allowed optimise sum upto functions take advantage knowledge produce better code compared original program eval 
compiler able compile real haskell programs back conjunction existing front lennart augustsson unpublished 
state art haskell front 
get optimised code level style comparable example core language pj glasgow haskell compiler 
code lambda lifted super combinators haskell constructions overloading transformed away 
structure back extended seen gure 
front uses standard separate compilation 
back stand program collect code produced les program spread les optimise program 
entire system uses separate compilation front grin back currently need program 
rst part back uses intermediate code grin gradually transforms optimises code simple form 
code translated machine code hypothetical risc machine second part back uses risc code 
low level optimisations risc code nally assembler code sparc processor 
risc code sparc specic large project generate code dioeerent processor 
optimisations done nature apply risc processor 
grin intermediate code purpose grin intermediate code machine joh code provide framework vehicle compilation lazy functional languages 
grin provides similar primitives machine slightly higher level 
grin thought procedural language statements inside procedure bodies essentially address code 
grin quite possible compile lazy functional languages variety ways dioeerent forms tagging unboxing grin code quite general form intermediate language suitable intermediate form compilers heap languages lisp sml possibly languages smalltalk grin special provisions accommodate lazy evaluation 
continue program gure running example 
shows translated grin code 
module haskell simple haskell module haskell module 
separate compilation front heap analysis grin code generation grin transformations simple grin grin simple grin interprocedural optimisation grin part register allocation risc code generation risc optimisation simple grin risc risc risc sparc interprocedural optimisation risc part fig 

overview compiler sooner translation process confronted issue updating due call need 
chosen updating explicit grin language 
currently fancy writing grin programs state monadic wad rst order strict functional programs grin syntax gure :10.1.1.100.9674
unit operation corresponds unit monad bind operator 
store fetch update operations particular monad 
compilers represent code address assume existence primitive operators basic values convention names basic valued variables note terminology node value just node tag cint possibly followed arguments pointers basic values 
monads normally higher order constructs consider grin monad inj 
operations grin rst order 
prog binding binding var var exp denition exp sexp val 
exp sequencing case var alt 
case var exp exp conditional sexp operation alt val 
exp sexp var val application function call unit val return value store val allocate new heap node fetch var load heap node update var val overwrite heap node exp val 
tag val complete node literal constant var variable empty fig 

grin syntax name suggests node values quite reside heap node values may value local variables returned values procedures may eventually allocated registers 
grin language priori interpretation dioeerent node values grin program interpret representing ordinary constructor values source language tags cint unevaluated expressions 
naming convention node tag names denote ordinary data constructors unevaluated function applications respectively 
front fair amount strictness analysis unboxing sake exposition assume unsophisticated translation essentially style machine fancy tagging unboxing strictness analysis assumed 
basic translation scheme grin procedure 
arguments functions evaluated unevaluated put boxes heap pointers boxes passed actual arguments 
procedures return node values result pointer heap 
essential feature approach eval normally hidden runtime system done tagless pointer dispatch written ordinary grin procedure susceptible transformation 
shows accompanying eval procedure example 
main store cint store cint store store eval cint upto eval cint eval cint 
unit 
store cint store unit sum eval case 
unit cint xs 
eval cint sum xs cint ax 
unit cint ax fig 

grin code program gure 
eval fetch case cint 
unit 
unit xs 
unit 
upto update unit 
sum update unit fig 

grin code accompanying eval procedure 
standard eval takes pointer node case unevaluated function application sure node gets evaluated updated eval nally returns value pointed 
means eval fetch node pointed perform case 
case enumerate possible nodes eval encounter aeow analysis easiest done enumerating nodes named 
eval returns node encountered calls appropriate procedure evaluate application updates node value returned 
heap points analysis result transformation grin code especially inlining eval greatly aided program analysis gives safe approximation possible nodes pointers point points grin program 
section describe precisely analysis returns running example 
describe analysis implemented section 
main aim analysis determine call eval safe approximation dioeerent nodes eval get fetches node argument pointer 
eoeect heap analysis determines values variables grin program description heap 
concrete semantics value variable basic value pointer heap entire node value returned procedure bas bas bas bas bas xs bas bas ax bas fig 

environment analysis result 
cint cint cint cint fig 

heap analysis result sharing analysis 
cint shared cint shared unique unique cint shared unique fig 

heap analysis result sharing analysis 
eval 
semantics basic values abstracted single bas 
locations bounded domain locations total number store statements grin program 
occurrence store statement generates location time executed 
store statement little heap feasible implementation pointer simply identity heap abstracting away relative position little heap 
values pointer valued variables arguments nodes sets locations 
see section gure 
shows environment derived running example grin program gure 
store statements program numbered values variables analysis returns heap maps locations node values 
show possible heap derived running example shortly 
consider eval upto procedure 
value derived heap cint nodes eval trivial value evaluated 
consider eval sum procedure 
value derived gure locations nodes 
turned quite easy incorporate sharing analysis points analysis 
provide useful information update avoidance serves improve precision points analysis 
actual practice analysis returns third component sharing table maps locations sharing properties true location shared concrete instance location may subject fetch false 
example general stage compilation points analysis currently applied eval performs fetch operations want analyse program process fetch operations occur explicitly 
shows heap analysis derived running example sharing information 
see locations contain nodes locations unique non shared 
explanation nodes born nodes eval update concrete location visible 
location may shared possible value nonlinear variable 
nonlinear variables example 
environment running example modied sharing analysis part general 
grin transformations eval inlining heap points analysis step compilation process inline calls eval 
general replace call eval entire body see gure 
cases blatantly wasteful eval point small subset nodes result points analysis gives safe subset 
may omit accompanying update operations sharing information corresponding locations unshared 
discuss general cases rst point view running example 
consider eval sum procedure assume moment sharing information analysis possible nodes encountered 
code eval rest expanded replacing call body eval substituting actual arguments formal ones deleting impossible cases fetch case 
unit xs 
unit 
upto update unit rest seen gures information derived analysis case points node unique unshared 
information things node case analysis needs done pointer known unshared updating needs done 
inlined better fetch upto rest second eval appearing sum eval simpler character 
nodes point fact cint ordinary value nodes eval call evaluation procedure get actual value simple fetch 
shows complete sum procedure evals inlined accordingly 
inlining eval happen ad hoc step indicated 
resulting inlining eval shown result large number small transformations see section 
sum fetch upto case 
unit cint xs 
fetch cint sum xs cint ax 
unit cint ax fig 

procedure sum evals inlined 
grin transformation machinery eval inlining important transformation fact small part large number grin program transformations 
main idea grin transformation machinery simple grin source source transformations 
transformation course correctness preserving hopefully performance improving 
single transformation small change taken produce greatly optimised grin code 
transformations sense try nd small sub expression larger grin expression matches certain pattern transform slightly dioeerent sub expression 
transformations bit involved 
remember assume front transformed program ias possible functional level implement functional transformations 
example transformations going transformations concentrate examples 
transformations general nature specialised 
show kind 
monad unit laws copy propagation 
monad structure grin directly monad laws wad monads satisfy transformation rules :10.1.1.100.9674
left unit monad law usually written bind operator grin unit get useful transformation denoted instantiating binding unit instantiate unit 
unit law 
fi reduction delete unit left binding simply substitution eliminated 
note necessarily variables equally complete nodes unit cint cint 
corresponding right unit monad law give rise transformation 
unit fig 

normalisation bind associativity 
monad bind operator associative wad turns useful transformation purposes :10.1.1.100.9674
transformation process idea keep grin code normalised keep grin syntax tree bind operations spine 
unfortunately property destroyed transformation introduces new code example inlining call eval 
say example code ig hj want replace sequence im kj 
restructure code shown gure keep right skewed property 
exactly associativity monad law tells 
shown grin terms general transformation 



unboxed values 
current front uses unboxing methods described 
transforming strict function arguments function results unboxed representations 
shortcomings 
method unbox function returns value datatype single constructor takes argument example pair 
simply way express functional code function return exactly value 
unboxing function arguments types single constructor argument mentioned unfortunately implemented 
example strict pair argument unboxed replaced arguments component pair transformation called arity raising 
nal shortcoming unboxing done attempted restricted contexts suoeciently strict 
grin problem handling cases 
example express function returns unboxed pair simply returns components pair nal code done registers 
show transformation give example function returns boxed integer changed return unboxed integer 
grin function returns integer unit operation 
means actual tag visible simply remove unit cint unit course change calls function 
assuming function just unboxed called transform calls context 
unit cint extra units lambdas get inserted trivially eliminated monad law transformations described 
example assume call appeared right lambda pattern cint 
unbox 
unit cint cint 
associativity left unit laws 
eoeect eliminate associated calls special care taken tail calls handled 
unboxing procedure arguments types node arguments done completely analogous way 
simplifying nodes 
grin transformations nature optimisations 
example transformation call 
aim grin variables contain node values tag possibly arguments concrete transforming multiple variables containing simple value basic value pointer 
consider foo fetch 
case 
xs 
function single list argument points analysis shown argument evaluated remains eval fetch 
look variable contain complete node tag tag arguments 
replace simple variables call vector foo fetch 
case 
xs 
fact consider actual tags basic values 
variable bind tag 
note 
hopefully bit clear right hoisting transformation 
simplify vectors variable nodes just introduced 
case expression example depends tag explicit foo fetch 
case 

xs transformation case expressions icase bind variables 
right motion hoisting 
fetch operation load complete node memory bind various components variables 
simplify grin code split fetch components foo fetch 
fetch 
fetch 
case 

notation il mean th component node pointed see branch case expression corresponding fetch operations moved hoisted branch foo fetch 
case 

fetch 
fetch 
call transformation right motion hoisting 
interesting compare described 
variants binding case branch look quite transformation dioeerence course allocate storage heap fetch read heap 
code example note imply way node gets stored heap 
says way extract tag omit substitution henceforth 
situation extra level grin code 
transformation example possible way distinguish dioeerent components value node variable 
thing transformation decrease memory bandwidth fetching unnecessary values 
transformation negative impact execution time 
branch common values needed early fact better prefetch case test reasons memory latency 
hand tag loaded rest node probably cache subsequent loads cheap 
experiments needed determine optimisation really 
transformations 
eoeect grin transformations shown gradually turn grin code simple form operations explicit 
actual code generation real machine code quite simple see section 
higher order functions true grin philosophy function objects represented node values 
just machine combinator machines function objects grin programs exist form curried applications functions arguments 
consider function upto running example takes arguments 
represent function object upto node application upto argument node naming convention prex indicates partial application number missing arguments 
analogy generic eval procedure programs higher order functions generic apply procedure cover possible function nodes appear program 
example shown gure 
apply returns value function value node applied additional argument 
generally apply just returns version function node argument nal argument supplied call procedure takes place 
grin provide way function application variable lazy context directly build representation variable closure wrapped purpose ap procedure 
compiling programs uses higher order functions apply calls inlined way eval calls 
application original program argument apply statements sequence 
arrangement conceptually simple great advantage comes points analysis 
implies unnecessary construction intermediate function values apply case 
unit 
upto 
fig 

apply procedure 
twice store fap eval apply ap eval apply fig 

grin code function twice 
sequence inlined easily avoid intermediate function values 
points analysis designed points analysis overriding design goal fast order able analyse large entire programs done cost precision 
result analysis think live variable analysis 
accomplish means single heap approximates real heap times program points analysis aeow insensitive single environment approximates local environments arrangement impose extra approximation local variables uniquely named local environment subset global environment analysis insensitive calling context procedure parameter gets value corresponding actual parameters call sites return value returned result calls procedure 
mentioned section include sharing analysis points analysis machinery 
provide desired sharing information update avoidance serves improve precision points result 
analysis works steps setting system data aeow equations variables environment heap solving equations 
loc icons val loc values val node con theta node values node heap loc values variables fig 

domains heap points analysis 
bas bas bas bas bas xs eval fetch heap xs bas bas ax bas ru rs cint fig 

environment equations 
heap cint cint ru rs cint ru fig 

heap equations 
eval ftag tag value node fetch heap fl ng heap heap tag tag tag tag tag fig 

utility functions 
rst describe basic machinery sharing analysis part discuss needed implement sharing analysis deal higher order functions 
basic analysis machinery deriving equations 
grin program set system data aeow equations describes values variables environment locations heap 
figures shows equations running grin program example gure 
domains summarised gure 
proceed explain dioeerent forms equations 
environment contains variables grin program plus variable procedure denotes return value call ru upto rs sum 
quite lot variables immediately seen value bas mentioned single xed location store statement equations environment part 
heap variable location value corresponding store possibly unioned item 
location value node represent unevaluated function application case simply set locations value corresponding return values nodes updated eventually union ru rs respectively 
parameter variables value union actual arguments applications program direct calls sum xs lazy calls store 
instance rst argument upto gets value tm dioeerent stores 
variable holds value eval simply obtained union value locations point done fetch extracting nodes represent value constructors done eval 
values variables bound case xs get value extracting corresponding component value variable cased 
union sets node values unioned tag tag resulting set element node tag see gure 
unions sets pointers ordinary unions 
solving equations 
having obtained data aeow equations points analysis natural way solving equations xpoint iteration starting empty environment empty heap apply equations xpoint reached 
implementation convergence speeded depth rst ordering asu sec 
variable equations 
example takes iterations converge xpoint 
adding sharing analysis mentioned section sharing analysis easily incorporated points analysis adding third component suitably called sharing heap mapping locations boolean value true instance location shared false 
initial value sharing heap 
value sharing heap awkward express equational form follows iteration abstraction location set shared true pointed nonlinear variable shared location 
heap return value part ru location ed location shared 
semantic function eval needs modied just take subset node values represent proper values needs extract values application 
omit details 
higher order functions higher order functions cause fundamental add analysis practical ones 
value apply depends obviously value value contains node apply contains value value contains node value apply contains upto returns application saturated point gure 
previously parameter procedure gets value union variables example 
unfortunately due apply calls equations variables longer static 
call procedure occurs result apply call actual arguments call need ed values corresponding parameter variables 
solved problem practically follows 
single variable call aa collect possible extra arguments result program 
convenient represent extra arguments closure nodes applications apply grin program ed rhs aa 
call upto occur result apply case value need contain node value applications contain node 
variable parameter need extract relevant part aa rst argument upto example need add aa right hand side equation 
risc code generation grin transformations resulting code translated machine code hypothetical risc machine load store architecture assuming innite number available virtual registers 
virtual registers mapped real machine registers register allocator 
translation risc code straightforward nal grin code simple form 
procedure represented aeow graph basic blocks 
intraprocedural aeow graphs stage dags grin represent intraprocedural loops 
compilation tail recursion optimisations turn tail calls function aeow graph 
interprocedural level procedures aeow graphs linked call return edges 
entire back lot book keeping analysis aimed determining information registers contain root pointers need followed gc 
space reasons postpone description done 
interprocedural register allocation believe register allocation vital optimisation 
reasons explained section believe important interprocedural register allocation lazy functional languages 
put way need implement languages eoeciently minimise procedure call return overhead doing interprocedural register allocation method achieving cho 
register allocation algorithm described space reasons explain detail changed bit 
summary interprocedural graph colouring algorithm optimistic graph colouring additions interprocedural coalescing restricted form live range splitting 
cheap procedure calls 
register allocator helps reducing procedure call penalty ways successful passing procedure arguments registers argument registers procedure 
achieves targeting value argument call calculated correct register 
cases extra necessary call site 
likewise procedure return values register return result 
local variables live call site kept register call 
seen contrast global register allocator normally save restore certain registers call site risk clobbered callee 
graph colouring 
main task register allocation algorithm build interference graph conaeict graph complete program colour 
initially assume variables allocated virtual registers 
variable said live certain point value may execution path leading point 
allocator fails nd colour variable spilled value kept memory splitted kept dioeerent registers dioeerent periods 
participate colouring procedure arguments return values local variables kinds temporaries introduced compiler 
risc optimisations risc optimiser implements number dioeerent low level optimisations 
naturally implement optimisations lazy functional languages heap pointer tail call optimisations 
optimise stack usage stack pointer frame building return address shrink wrap technique similar cho optimise callee saves registers 
example return address register seen callee saves register need save certain new procedure call 
similar way avoid creating stack frame absolutely needed 
dioeerent stack optimisations tail call optimisations succeed creating small tight loops tail recursive functions 
optimisations general kind instruction scheduling branch optimisations 
sparc processor delayed load architecture call branch delay slots means important separate loads instructions uses loaded result ll delay slots useful instructions 
standard instruction scheduler accomplish style gm 
currently risc optimisations placed register allocation see gure bit odd comparison conventional compilers normally optimisations done register allocation 
case turns standard optimisations subsumed transformations done grin level 
measurements compared back chalmers glasgow haskell compilers hbc ghc respectively 
implementation experimental unfortunately able compile large programs 
measurements shown taken toy programs experiments 
hand positive thing having small test programs possible examine code produced various stages compilation get tests compiler isub 
measurements gure show example programs sieve summing primes queens problem size rst order program ditto higher order functions 
assuming risc style jump link instruction doing procedure calls 
sparc standard system stack 
hbc grin grin ghc instructions stack time instructions sieve stack time instructions stack time instructions stack time hbc ghc fig 

performance small programs 
column marked just grin means handwritten grin code input back 
intention create fair comparison hbc back ends 
sure code written exactly input hbc back strictness reads writes exactly nodes heap 
words hbc grin columns perform exactly graph reduction 
column marked grin shows back front supposed fair comparison ghc column 
ghc roughly comparable front ends 
main measurements done tool collect dynamic instruction counts 
show total instruction count total number stack loads stores millions instructions 
include timings 
hard accurately measure time unix system especially small programs seen mainly 
garbage collection times included compiler 
look total instruction count see grin column roughly times fast hbc back compared hbc back 
moving grin column see get slightly better times fewer instructions executed compared hbc 
total instruction count correlate timings 
comparing grin ghc roughly twice fast ghc examples 
included stack counts measure register allocator succeeds register allocation typically means stack allocated variables including temporaries function parameters results allocated registers 
looking gures see dra unfortunately able tool ghc binaries 
user times mhz mb external cache mb memory 
matic reduction number stack back compared hbc ranging eliminated stack 
related interprocedural optimisation 
various interprocedural optimisations gained increasing popularity simply powerful corresponding global procedure optimisations 
practical program optimisation reduced integrated programming optimisation environment environment 
lazy language haskell compilers typically compile module time 
rst sight appear opportunity optimise procedures 
apply low level optimisations actual dynamic control aeow important explained section 
lazy language function local module source code escape module run time built closure called eval 
grin transformations 
intermediate code grin essence dioeerent intermediate code implement lazy functional languages usually called code particular machine machine joh abc machine tim fw 
sense grin slightly machines mentioned 
hand compared stg language pj grin proven useful transformations see section 
idea new see example kh app 
particular idea large number small transformations similar pj glasgow haskell compiler 
main dioeerence compared transformations grin code low level code compared core stg language ghc essentially nd order calculus stg language slightly lower level 
typical example dioeerence grin node value closure having force evaluate expressible stg language 
may illusion monadic presentation grin code gives nice framework doing analysis transformations 
relationship grin continuation passing style cps aj compared programming monads continuations probably mainly matter taste 
compare grin static single assignment ssa code cfr received popularity implementing imperative languages mainly fortran 
grin get single assignment variables grin program assigned example discussed 
heap points analysis 
great deal done pointsto analysis conventional languages see example overview sh 
notable exception addressed problem context lazy graph reduction 
karl filip fax fax fax quite similar scope addresses problems 
central type program analysis called aeow inference analyses programs expressed intermediate language fleet functional language explicit evals thunks 
name suggests analyses programs higher level grin code 
aeow inference derives information quite similar uses information eliminate evals thunks unboxing update elimination 
register allocation 
knowledge interprocedural register allocation applied previously code generated lazy functional language 
applied kinds languages lisp sh cho wal 
preliminary results look promising lot implementation needs done say back really practical 
say interprocedural approach scale large programs 
possible problem areas heap points analysis interprocedural register allocation 
various methods trading exactness speed cases dioecult predict exactly code quality precise program information 
grin back described constitutes quite heavy basic machinery 
come ooe ground opportunities optimisations far inlining grin transformations unfold calls eval apply plan experiment aggressive methods 
inlining conventional calls resulting grin code give compile time version vectored return mechanism stg machine joh 
area investigate transformations usually done closer front ghc transformations done grin level example unboxing deforestation possibly strictness analysis 
ghc kind apply repeat transformations automatically 
plan implement similar machinery back 
doing aggressive optimisations ones described turn impractical large entire programs 
consider approach optimisation spent really matters execution speed program 

second author johnsson visited glasgow functional programming group serc fellowship rst ideas joh concerning grin approach occured inspiring environment 
aj appel jim 
continuation passing closure passing style 
conference record th annual acm symposium principles programming languages pages austin tx january 
app appel 
compiling continuations 
cambridge university press 
asu aho sethi ullman 
compilers principles techniques tools 
addison wesley publishing reading mass 
preston briggs keith cooper ken kennedy torczon 
coloring heuristics register allocation 
proceedings acm sigplan conference programming language design implementation volume pages portland june 
urban 
interprocedural register allocation lazy functional languages 
proceedings conference functional programming languages computer architecture la jolla california june 
url www cs chalmers se fpca ps 
urban 
interprocedural register allocation lazy functional languages 
licentiate thesis chalmers university technology mars 
url www cs chalmers se lic ps 
cfr ron cytron jeanne ferrante barry rosen mark wegman kenneth zadeck 
eoeciently computing static single assignment form control dependence graph 
acm transactions programming languages systems october 
cho fred chow 
minimizing register usage penalty procedure calls 
proceedings sigplan conference programming language design implementation june 
keith cooper ken kennedy linda torczon 
impact interprocedural analysis optimizations programming environment 
acm transactions programming languages systems october 
fax karl filip fax optimizing lazy functional programs 
mycroft editor static analysis symposium sas volume lncs 
springer verlag september 
url www kth se kff ps 
fax karl filip fax flow inference code generation garbage collection lazy functional languages 
licentiate thesis department teleinformatics royal institute technology stockholm january 
url www kth se kff ps 
fw fairbairn wray 
tim simple lazy machine execute supercombinators 
proceedings conference functional programming languages computer architecture portland oregon september 
gm gibbons steven muchnick 
eoecient instruction scheduling pipelined architecture 
proceedings acm sigplan symposium compiler construction volume pages palo alto ca june 
joh johnsson 
eoecient compilation lazy evaluation 
proceedings sigplan symposium compiler construction pages montreal 
available www cs chalmers se johnsson 
joh thomas johnsson 
analysing heap contents graph reduction intermediate language 
peyton jones hutton holst editors proceedings glasgow functional programming workshop workshops computing pages 
springer verlag august 
available www cs chalmers se johnsson 
kh kelsey hudak 
realistic compilation program transformation 
conference record th annual acm symposium principles programming languages pages austin tx january 
pj peyton jones 
implementing lazy functional languages stock hardware spineless tagless machine 
journal functional programming april 
pj simon peyton jones 
compiling haskell program transformation report 
proceedings european symposium programming link ping april 
simon peyton jones john launchbury 
unboxed values rst class citizens non strict functional language 
functional programming computer architecture sept 
simon peyton jones partain andr santos 
moving bindings give faster programs 
proceedings international conference functional programming philadelphia 
sh peter steenkiste john hennessy 
simple interprocedural register allocation lisp 
acm transactions programming languages systems january 
sh marc shapiro susan horwitz 
fast accurate flow insensitive points analysis 
conference record popl nd acm sigplan sigact symposium principles programming languages paris france january 
smetsers erik cker john van groningen rinus 
generating eoecient code lazy functional languages 
proceedings conference functional programming languages computer architecture cambridge massachusetts july 
wad wadler :10.1.1.100.9674
essence functional programming 
proceedings symposium principles programming languages pages albuquerque new mexico 
wal david wall 
global register allocation link time 
proceedings sigplan symposium compiler construction pages new york 
