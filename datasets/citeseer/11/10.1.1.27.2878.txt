ubiquitous corba manuel roman dennis fabio kon roy campbell kon rhc cs uiuc edu computer science department university illinois urbana champaign increasing popularity ubiquitous computing new approaches low consumption wireless connectivity enable hundreds heterogeneous devices interconnected achieve common task 
communication network enabled heterogeneous devices requires standard protocols defined interfaces 
existing middleware architectures offer standard mechanisms dcom corba jini cases suitable heterogeneous devices 
resources required middleware solutions normally exceed computational limits heterogeneous devices minimalist component object request broker orb dynamically reconfigured requires smallest configuration kb memory 
incoming ubiquitous computing trend allows existence collections network enabled devices attached rooms people buildings 
ubiquitous computing paradigm provide natural interaction paradigm enable new services 
main benefit ubiquitous computing comes interoperability devices 
interoperability requires defined protocol heterogeneous devices standard way export functionality offered device 
task communication middleware implementations 
current communication middleware implementations built assuming minimum set hardware software requirements suitable desktop computers small ubiquitous devices 
communication middleware implementations com java corba big size fit devices limited resources provide tools dynamic reconfiguration allows modifying architecture fly 
usually problem applications require specific subset functionality forced linked functionality 
case corba example client program simply invokes method remote object requires client side functionality orb object request broker client side static invocation interface 
unfortunately orb implementations include functionality single library tao provide separate libraries client server sides option choose specific subset functionality 
dynamically configurable component orb brings benefits corba maintaining small memory footprint 
key properties dynamic configurability component architecture 
dynamic configuration allows modifying architecture orb run time possible choose time functionality required 
dynamic behavior possible component architecture orb 
orb collection exchangeable components coordinated skeleton known component configurator 
design implementation motivated lack corba implementation small memory footprint dynamically adapted particular requirements applications 
approach followed design principles need get simplicity 
functionality required vs size ratio application uses fraction corba functionality linked fraction total size orb 
solution proposed dynamically configurable component orb allows modifying architecture fly accommodate changing requirements applications 
apply simplicity principle keep interface implementation components simple possible 
defined interface implementation allow tracking dependencies different components critical aspects altering architecture orb 
adopts microkernel approach core contains low level essential components 
application programmer implements customized policies selects collection policies available orb package marshaling specific giop implementations 
implements low level functionality required guarantee corba interoperability iiop allows users implement customized components top functionality complete implementation corba orb interface 
core customized component called configurator client side configurator server side configurator provide glue consistently combine components 
result combining different components belong different categories network marshaling 
number components way interconnected defines behavior functionality size 
defines standard set categories extended new functionality required 
associated categories components provide different implementations changed fly 
configurator provides entry point orb functionality clearly separates client server side functionality 
client server side attached configurator 
contain knowledge required decide component safely attached modified removed 
applications choose functionality require client side server side exact client server functionality need 
client side configurator defines categories specific components associated cdr cdr giop writer iiop writer multicast iop giop reader iiop reader connector invocation interface 
current invocation interface exports simplified dynamic invocation api conform corba specification sufficient embedded devices 
functionality architecture server side configurator similar client side configurator connector invocation interface replaced acceptor object adapter 
tested palmpilot running palmos device 
size palmpilot kb version requires kb 
cases configured client side functionality 
capable interoperating corba compliant object tests tao standard desktop orb 
tests example controlling video camera moving panning zooming palmpilot controlling powerpoint presentation running windows nt hp jornada 
douglas schmidt 
tao overview 
cs wustl edu schmidt tao intro html fabio kon roy campbell 
dependence management component distributed systems ieee concurrency february 
