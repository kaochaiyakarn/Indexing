reasoning xml schema languages formal language theory lee murali mani makoto murata ucla csd ucla csd ibm almaden research center ibm tokyo research lab 
cs ucla edu mani cs ucla edu trl ibm jp technical report ibm almaden research center rj log november mathematical framework formal language theory describe compare xml schema languages 
framework uses related areas regular tree languages cdg ambiguity regular expressions bkw 
content classical hu au results normal form representation regular tree grammars framework marked regular expressions model groups ambiguities subclasses regular tree grammars corresponding languages describe xml content models regular tree languages td top input scan vertical lookahead single type constraint languages tdll top left right input scan vertical horizontal lookaheads local tree languages closure properties language classes boolean set operations classification comparison xml schema proposals type systems dtd xml schema dsd xduce relax properties grammar classes common operations xml document validity checking type resolution xml document interpretation 
popularity xml increases substantially importance xml schema language describe structure semantics xml documents increases 
dozen xml schema language proposals lc comprehensive mathematical analysis schema proposals available 
believe providing framework mathematical terms important understand various aspects xml schema languages facilitate efficient implementations 
goal propose formal language theory especially regular tree grammar theory framework 
consider motivating example 
available www cs ucla edu example consider collection xml documents document associated different schema 
may want find union schemas union types defined schema 
suppose user wants obtain schema union schemas 
user wish document valid respect schemas valid union schema document invalid respect schemas remain invalid respect union schema 
schema evolves new version may want take intersection old new schemas determine documents remain valid 
may want take difference new schema old schema determine semantics constraints supported old schema new schema 
sigma example illustrates usefulness closure properties xml schema languages boolean operations union intersection difference 
operations common real applications fully investigated context xml schema languages 
instance heterogeneous xml data integration system extensively uses union intersection operator create canonical view underlying sources 
xml query processing computing answers multiple documents single document may require compute union 
mathematical framework help study properties various xml schema languages precise way 
consider motivating example 
example xml document schema suppose wants verify document valid schema find types non terminals associated element document 
operation requires entire document memory regular tree grammar 
requirement restricted form regular tree grammar called tdll grammar 
sigma example reveals importance complexity aspects operations performed xml schema document 
issues directly related efficient implementation xml schema language proposals popular sax meg dom wha interfaces 
believe important mathematical framework study efficient operation possible 
attempt answer questions 
contributions short follows propose mathematical framework formal language theory define ambiguities marked regular expressions model groups define subclasses regular tree grammars corresponding languages describe xml content models precisely study closure properties subclasses boolean set operations framework detailed analysis comparison xml schema proposals type systems framework straightforward specify say xml schema proposal powerful xml schema proposal respect expressive power content models results complexity important schema operations membership checking type resolution xml document interpretation 
conventions historically multiple equivalent terms different research sub communities xml 
research sub communities working xml research terms listed doctype book element book author publisher 
element author pcdata 
element publisher empty 
attlist publisher name cdata implied 
book 
author hopcroft author 
author ullman author 
publisher name addison wesley 
book 
book xsd book xml table dtd xml document fragment book example 
author author publisher book book author author author cdata publisher ffl cdata pcdata ffl pcdata pcdata grammar instance tree table grammar instance tree representation corresponding xml schema document table 
ffl database web community terms schema xml document 
schema considered definition set conforming xml documents 
example shown table 
ffl formal language community oldest community studied trees defined xml uses terms grammars instance tree automata language 
grammar defines set trees instance trees language denotes set trees accepted grammar automaton check instance tree belongs language cdg 
denote grammar denote language set nodes set edges denote instance tree 
example shown table 
ffl type theorists terms type definitions variables values 
set type definitions equivalent schema grammar 
xml document said set values value considered assigned variable 
example shown table 
terms describe information xml document value content structure element structure 
xml document viewed value content embedded structure 
value content xml document refers text values attribute values 
structure refers tree structure attribute names 
element structure refers element tag names arranged tree structure attribute names 
defining element structure replace text value xml document node called 
table shows example structure element structure 
note element structure xml document include text attribute values 
define value content xml document confused content element typically respect xml 
value content sole purpose type book book author publisher type author author string type publisher publisher book author hopcroft author ullman publisher type definitions variables values table type definitions variables representation corresponding xml schema document table 
book 
author pcdata author 
author pcdata author 
publisher name 
book 
book 
author pcdata author 
author pcdata author 
publisher 
book 
structure element structure table structure element structure representation book xml xml document table 
related mentioned relies largely related areas regular tree languages ambiguous regular expressions 
tree languages regular tree languages long history dating back late 
main reasons study period relationship derivation trees context free grammars 
description tree languages closure properties obtained book available online cdg 
contributions field consist defining normalized grammar representation regular tree languages subclasses regular tree languages features xml schema proposals 
field related regular tree languages regular hedge languages studied tak mur 
regular hedge language defines set hedges hedge ordered list trees 
regular hedge language essentially similar regular tree language need add special root symbol hedge regular hedge language regular tree language 
words regular hedge language hwi regular tree language special symbol denoting root tree 
ambiguity regular expressions described 
authors give results relevant regular language corresponding unambiguous regular expression construct automaton called glushkov automaton bkw corresponding regular expression preserves ambiguities non deterministic finite state automaton obtain corresponding regular expression ambiguities 
ambiguous regular expressions model groups studied context sgml content models bkw 
authors describe concept fully marked regular expressions ambiguous regular expressions languages 
construct glushkov automaton preserves ambiguity regular expressions 
includes extensions existing ambiguity regular expressions extend notion marked regular expression allow symbols marked regular expression subscript define ambiguities marked regular expressions model groups extend glushkov automaton marked regular expressions define prefix suffix regular expressions model groups introducing element structure document topic 
check marked expression model group ambiguous ambiguous compared typical definition successor sets set symbols occur successor symbol regular expression 
outline remainder organized follows 
section define regular tree languages regular tree grammars nf normalized representation regular tree grammars 
section study regular expressions marked regular expressions ambiguities marked regular expressions 
introduce subclasses regular tree languages section study closure properties different language classes boolean set operations section 
followed evaluation different xml schema language proposals section overview complexity analysis document validity checking document interpretation section concluding remarks 
regular tree languages grammars traditional regular string languages regular string grammars hu suitable describe permissible element content dtd xml schema languages originally designed describe permissible strings element trees mur 
element trees form regular tree languages 
section define regular tree grammars languages terms remainder 
borrow definitions cdg 
context free tree grammars studied past cdg restrict regular tree grammars 
definitions regular tree languages tree automata cdg 
book defines regular tree grammar follows 
slightly modify definition allow trees infinite arity allow model group bkw production rules 
notation presume readers familiar 
definition 
regular tree grammar cdg regular tree grammar rtg denoted tuple ffl set non terminal symbols ffl set terminal symbols ffl set production rules form expression expression model group ffl set start symbols instance regular tree grammar representation book xsd dtd grammar representation table 
definition called normalized regular tree grammar cdg 
equivalence regular tree languages grammars defined definition shown cdg 
context mention difference tree set string set regular tree grammar said define tree set string set 
words give equivalent definition regular tree grammar study different schema proposals section 
consider language defined regular tree grammar define set trees set serialized strings 
production rules grammar table re written follows 
book 
book author publisher book 
author 
author 
publisher 
publisher 
reader observe orthogonal sub rules production rule regular tree grammar 
example consider production rule book book author 
ffl sub rule says tree root symbol book derived book 
ffl second sub rule says tree children specified author 
observations define normal form regular tree grammars subsection 
normal form regular tree grammars normal form definition intended give concise syntactical representation schemas easier understanding analysis 
normal forms regular context free string grammars studied hu 
regular string grammars normal forms right linear left linear grammars 
context free grammars normal forms chomsky greibach normal forms 
define normal form regular tree grammars observations lemmas 
ffl increased interest separate parts production rule tree regular grammar schema proposals 
hedge rules relax mur regular expression types xduce complex type definitions xml schema examples 
ffl separate subparts ensure content element describes regular string language context free language 
relax ensures disallowing recursion xduce allows right linear grammars 
ffl orthogonal restrictions placed subparts production rule define subclasses regular tree languages 
lemma regular tree grammar rules form model groups rewrite regular tree grammar way non terminal say rule form 
xi proof construction rewrite keep appears rhs rule replace 
lemma regular tree grammar rules form rewrite 
xi proof model groups model group definition 
definition 
normal form grammar normal form nf defined ffl set non terminal symbols deriving trees capitals letter symbol 
book 
ffl set non terminal symbols content model specification capitals letters symbol 
book 
ffl set terminal symbols 
ffl set production rules form 
restriction rule corresponding non terminal symbol 
ffl set production rules form expression expression model group non terminal symbols 
restriction rule corresponding non terminal symbol 
ffl set start symbols 
convert regular tree grammar definition nf constructions described lemmas separating subparts production rule 
ease explanation combine rule rule expression say production rule expression 
theorem regular tree language derived regular tree grammar nf 
xi example consider grammar table 
convert nf get author author publisher author publisher book book author author author publisher publisher cdata pcdata 
author author cdata publisher ffl pcdata fflg sigma regular tree grammar nf instance tree table define 
ffl root defines root tree produced words root production rule 
regular tree grammar nf root unique 
ffl model group denoting content instance book author publisher 
ffl denotes model group denoting content instance book author 
ffl ree assignment tree gives tree non terminal symbols denoting valid assignment assignment tree non terminal assignment corresponding instance tree multiple assignment trees regular tree grammar 
grammar example tree table assignment tree assignment node assignment tree 
define terms slight variations regular tree grammar definition 
interesting properties regular tree grammar maintained normalization convenience define terms regular tree grammar nf 
section study subclasses regular tree languages introduce ambiguities string regular expressions section 
ambiguities regular string expressions content model non terminal symbol defined previous section model group 
section describe properties regular tree languages ambiguities content models 
preparation study ambiguities model groups section 
borrow extend definitions 
definitions bkw authors study ambiguous model groups languages 
remainder section model group illustrative example 
give basic definitions model group 
definitions theorems lemmas model groups apply regular expressions explicitly consider regular expressions 
ffl alphabet set symbols model group 
example alphabet fa bg 
ffl letter term model group 
ordered list letters model group denoted letters 
example letters hx zi 
model group letter letters corresponding symbol alphabet denote sym example sym sym sym relationship holds model group 
ffl symbol call base subscript ffl marking bkw process adding subscript letter model group 
denote marking model group example define 
result marking model group marked model group defined 
ffl marked model group model group consists letters subscripts bkw 
typically denote marked model group 
example marked model groups marked denote element membership list 
model group model group define letters alphabet accordingly marked regular expression defined similar marked model group 
note marked model group regular expression extension marked regular expression defined bkw require letters marked regular expression 
ffl inverse marking 
drop subscripts marked model group regular expression 
result marked model group model group denote function example bkw 
define alphabet 
example ffl symbols alphabet called competing symbols 
words base different subscript 
example symbols competing competing symbols ffl letters letters called competing letters sym sym competing symbols 
example third letters competing letters competing letters ffl fully marked model group marked model group letters sym sym 
example fully marked model group 
typically denote fully marked model groups 
fully marked model group fully marked regular expression defined similar fully marked model group 
note marked regular expression defined bkw corresponds fully marked regular expressions 
ffl fm denote conversion model group marked model group fully marked model group 
previous examples fm fm fm fm ffl denote conversion fully marked model group marked model group 
example defined define alphabet 
example similarly note letters letters competing corresponding letters letters competing fm ffl denote model group marked unmarked alphabet sigma mg sigma 
similarly re sigma denote regular expression marked unmarked sigma 
subscripted symbols easier explanation holds significance whatsoever 
define function model group obtain model group 
framework corresponds marked model group corresponds unmarked model group 
remember string fully marked regular expression 
give definitions prefix model group suffix model group define ambiguities model groups 
definitions illustrate obtain prefix suffix model group model group letter letters 
definition 
prefix model group marked unmarked model group letter letters prefix model group denoted prefixmg defined constructively follows 
prefixmg ffl prefixmg prefixmg prefixmg prefixmg prefixmg prefixmg prefixmg prefixmg prefixmg ae prefixmg letters prefixmg letters prefixmg ae prefixmg letters prefixmg letters prefixmg ae prefixmg letters prefixmg letters definition 
suffix model group marked unmarked model group letter letters suffix model group denoted defined constructively follows 
ffl ae letters letters ae letters letters ae 
letters letters ready define ambiguous marked model groups ambiguous marked model groups 
framework ambiguous ambiguous regular expression definitions bkw translated ambiguous ambiguous fully marked regular expressions 
definition 
ambiguous marked model group marked model group ambiguous contains words yv words alphabet alphabet 
defining prefix suffix model groups opposed easier prefix suffix languages established notions left right quotients purely matter taste judgement 
example marked model group ambiguous 
example consider sigma definition 
ambiguous marked model group bkw marked model group ambiguous contains words yw words alphabet alphabet example marked model group ambiguous consider hand ambiguous marked regular expression ambiguous 
sigma define ambiguous ambiguous marked regular expressions similar ambiguous ambiguous model group 
show determine model group regular expression ambiguous ambiguous 
theorem marked model group ambiguous exist competing letters letters ffl prefixmg prefixmg oe ffl oe 
xi proof prove directions 
direction definition exist strings yv 
competing symbols alphabet 
letters correspond strings yv competing symbols prefixmg prefixmg 
direction string prefixmg prefixmg string 
string prefixmg string prefixmg similarly string string existence follow definitions 
sym sym yv 
upsilon theorem marked model group ambiguous exist competing letters letters ffl prefixmg prefixmg oe xi proof prove directions 
direction definition exist strings yw 
know competing symbols alphabet letters correspond respectively strings yw 
prefixmg definition bkw requires easy show definitions equivalent 
relationships different model groups marked model group unambiguous marked model group unambiguous marked model group 
prefixmg 
direction string prefixmg prefixmg 
string prefixmg string prefixmg string string definitions exist 
sym sym 
upsilon far defined ambiguous ambiguous marked model groups regular expressions 
illustrates relationships different model groups 
theorem shows ambiguities marked model groups defined ambiguities marked regular expressions 
theorem marked fully marked model group ambiguous ambiguous corresponding marked regular expression ambiguous ambiguous 
xi proof corresponding regular expression marked unmarked model group marked unmarked obtained writing model group regular expression operators described bkw 
showing ambiguities preserved straightforward 
upsilon reader observe conversion mentioned theorem produce non fully marked regular expression corresponding fully marked model group 
exist fully marked regular expression ambiguity 
example consider example bkw 
translates corresponding ambiguous fully marked regular expression 
section see ambiguities model groups relate regular tree grammars 
astute reader able predict relationship symbol 
subclasses regular tree grammars section show relationship marked model groups studied section regular tree grammars 
define subclasses regular tree languages defined ambiguities marked model groups 
section show relationship various language classes 
regular tree grammars ambiguous regular expressions relationship regular tree grammars ambiguous model groups content model non terminal symbol model group 
consider regular tree grammar nf convenience 
reader able observe section transformation regular tree grammar definition regular tree grammar nf preserves ambiguities 
start list basic definitions regular tree grammar 
ffl define symbol denoted tl language obtained fag language obtained fag 
ffl define unmarked model group corresponding unmarked content model example unmarked model group corresponding book author publisher 
ffl say symbols competing tl tl oe 
symbols competes competes need compete example consider tl tha tl tha tl compete compete 
ffl say symbols lookahead competing root root 
competing symbols denote lookahead competing symbols 
easy observe symbols lookahead competing lookahead competing necessarily need lookahead competing 
ffl define marked model group corresponds lookahead competing relationship content model follows mg 
lookahead competing symbols mg introduce competing symbols marked model group 
example marked model group corresponding book author publisher 
call marked model group corresponding lookahead competing relationship simply marked model group ffl define fully marked model group corresponding mg fully marked model group corresponding 
example fully marked model group corresponding book 
ready define subclasses regular tree languages 
assume loss generality regular tree grammar nf 
show assumption loss generality section 
local tree languages grammars local tree grammars impose restrictions rules 
local tree languages grammars studied past tak mur mur 
commonly term tree locality constraint times context independent types 
definition 
tree locality constraint tree locality constraint imposes restriction production rules regular tree grammar rule form terminal symbol constraint ensures 
suppose regular tree grammar say satisfies tree locality constraint 
tree 
terminal symbol node exactly non terminal symbol production rule form rule rhs 
definition 
local tree grammar local tree grammar ltg regular tree grammar satisfies tree locality constraint 
example grammar local tree grammar 
author son author son author son book book author author author son son son cdata pcdata 
author author 
son son cdata pcdata fflg sigma theorem marked model group corresponding mg local tree grammar unambiguous unambiguous 
xi proof definition follows competing symbols marked model group corresponding mg 
upsilon definition 
local tree language language local tree language generated local tree grammar 
td languages grammars td languages correspond languages deterministic vertical lookahead input tree 
section introduced marked model group corresponding vertical lookahead 
defining td grammars 
definition 
vertical lookahead constraint vertical lookahead constraint imposes condition rules marked model group corresponding ambiguous 
definition 
td grammar td grammar regular tree grammar satisfies vertical lookahead constraint 
theorem td grammar unique assignment tree xi doctype book element book author 
element author son 
attlist author name cdata 
element son pcdata 
book 
author name 
son 
aa son 
author 
book 
pcdata book xsd book xml instance tree table dtd xml file instance tree book 
example consider local tree grammar example 
suppose grammar representation book xsd table 
example xml document book xml instance tree shown table 
single assignment tree corresponding assignments various nodes assignment tree follows assignment assignment assignment assignment pcdata fp 
sigma definition 
td language language td language generated td grammar 
single type constraint languages grammars introduce single type constraint stricter condition vertical lookahead constraint 
definition 
single type constraint single type constraint imposes restriction rules competing symbols marked model group corresponding 
definition 
single type constraint grammar regular tree grammar said single type constraint grammar satisfies single type constraint 
example consider regular tree grammar author son article author author son art author author son book book author author author son son son article article art author author author daughter daughter 
author author 
son son ffl art 
author author 
daughter daughter fflg satisfies single type constraint rules single symbol rhs 
satisfy tree locality constraint rules author author author author author author produce terminal symbol author 
sigma definition 
single type constraint language language single type constraint language generated single type constraint grammar 
tdll languages grammars trees vertical horizontal navigation impose restrictions horizontal lookahead 
ambiguity definitions 
restrict deterministic content model definition xml 
words study ambiguity fully marked model groups bkw 
need restricted deterministic content models define ambiguity general marked model groups 
definition 
tdll grammar tdll grammar regular tree grammar satisfies condition fully marked model group corresponding symbol unambiguous 
example consider grammar rule form 
rules form 
tdll defined definition astute reader observe rule unambiguous enforce deterministic constraint 
sigma definition 
tdll language language tdll language generated tdll grammar 
relationship language classes subsection examine relationship various language classes introduced earlier section 
relationships shown section compare expressive power different xml schema proposals 
show assumption regular tree grammar nf loss generality 
lemma assumption regular tree grammar nf loss generality 
xi proof prove defining content model regular tree grammar definition 
regular tree grammar definition 
consider rules produce root symbol model groups regular tree grammar define 
define ambiguities content model definitions 
easy verify normalization steps lemmas ambiguities preserved normalized regular tree grammar 
upsilon show relationship various language classes studied 
proof relationships definition non redundant regular tree grammar 
non reason defining tdll grammars deterministic content models come schema proposal deterministic content model 
surprising schema authors unhappy constraint 
find tdll grammars deterministic constraint useful class grammars refer section 
redundant regular tree grammar regular tree grammar nf reduced cdg symbols tl tl marked model group corresponding symbol reduced marked model group 
define reduced marked model group 
reduced marked model group marked model group rewritten lesser ambiguities xml 
marked model group xml corresponds symbol 
combining letters slightly different example rewrite rewrite 
scenarios letters marked model group rewritten xml fewer ambiguities follows ffl equivalent operator 
example marked model group rewritten 
ambiguous 
marked model group written 
fully marked regular expression corresponding ambiguous corresponding 
marked model group written 
fully marked model group corresponding ambiguous corresponding 
ffl marked model group 
example marked model group rewritten rewritten 
ambiguous 
ffl consecutive letters letters sym sym 
example marked model group rewritten 
fully marked model group corresponding ambiguous corresponding 
definition 
reduced marked model group reduced marked model group marked model group properties 
ffl 
ffl operators 
ffl consecutive letters letters sym sym 
definition 
non redundant regular tree grammar non redundant regular tree grammar regular tree grammar satisfies conditions 

symbol reached symbol 
symbol tl oe ffl 

symbols tl tl 

marked model group corresponding reduced marked model group 
lemma regular tree language non redundant regular tree grammar representation ambiguities language non redundant grammar representation 
xi proof proof regular tree grammar representation ambiguities non redundant grammar representation 
properties reduce number symbols changing language 
property definition reduced marked model group ensures rewrite model group resulting model group ambiguities 
upsilon theorem td languages properly contained regular tree languages 
xi proof definition know td language regular tree language 
need show exists regular tree language td language 
show exists non redundant regular tree grammar td grammar 
shows regular tree language td language 
consider non redundant regular tree grammar content model corresponding marked model group 
upsilon theorem single type constraint languages form proper subclass td languages 
xi proof single type constraint language td language definition 
consider non redundant regular tree grammar content model corresponding marked model group 
upsilon theorem tdll languages form proper subclass td languages 
xi proof tdll language td language definition 
consider non redundant regular tree grammar content model corresponding marked model group upsilon theorem local tree languages form proper subclass single type constraint languages 
xi proof definition local tree language single type constraint language 
proving proper inclusion straight forward consider non redundant regular tree grammar symbols root root 
grammar example 
upsilon theorem tdll languages proper subclass single type constraint languages 
xi proof consider non redundant regular tree grammar content model corresponding marked model group 
upsilon theorem single type constraint languages proper subclass tdll languages 
xi proof consider non redundant regular tree grammar content model corresponding marked model group 
upsilon boolean set operations tree languages section study closure properties different language classes boolean set operations union intersection difference 
regular tree languages closed boolean set operations cdg 
show language subclasses td constraint tdll local tree languages closed intersection closed union difference 
show closure intersection introduce automata regular tree languages 
vertical horizontal navigation trees study different automata finite tree automata cdg vertical navigation glushkov automata bkw horizontal navigation ambiguities model groups 
give automata define automaton intersection language proceed study closure properties 
finite tree automata requirements non deterministic top tree automata define 
define automaton language normalized regular tree grammar representation tree automata section 
definition 
non deterministic top finite tree automaton cdg top finite tree automaton ta defined tuple ta sigma ffi ffl set states 
state corresponding symbol 
denote state corresponding symbol 

note root defined state 
ffl sigma ffl set initial states state symbol ffl ffi sigma theta mg transition function 
words transition function gives model group symbol sigma state transition function corresponding production rule 
example rule corresponding transition ffi 
note top finite tree automaton corresponds directly regular tree grammar 
automaton define final states 
automaton non deterministic 
example consider production rule root root tree fragment satisfies production rule 
ffi tree locality constraint regular tree grammars translated tree automaton follows symbol sigma state root regular tree tdll languages deterministic content model constraint superclass single type constraint languages 
languages closed intersection cdg 
give construction top tree automaton representing intersection regular tree languages accepted automata respectively 
definition 
intersection automaton regular tree languages sigma ffi sigma ffi top non deterministic finite tree automata representing languages 
sigma ffi automaton accepts intersection language words 
define follows 
ffl defined hq root root 
define root hq root root 
ffl sigma sigma sigma ffl set states hq root root 
ffl ffi hq defined root root sigma follows ffi ffi ffi hq note marked model groups 
subsection show obtain marked regular expression alphabet consists symbols form ha alphabet alphabet model group obtain regular tree grammar nf intersection automaton 
done just reversing steps definition separating rules 
glushkov automata marked model groups subsection define glushkov automata general marked model groups 
bkw state glushkov automaton corresponds letter model group start state 
input alphabet automaton alphabet corresponding fully marked model group 
call glushkov automaton corresponding fully marked model group 
general marked model group define glushkov automaton follows difference glushkov automata input alphabet definition 
glushkov automaton marked model group bkw consider marked model group corresponding fully marked model group unmarked model group words fm fm glushkov automaton defined sigma ffi ffl qe set states 
state corresponding letter denote state corresponding symbol words qe alphabet note qe alphabet qe alphabet defined state qe ffl sigma alphabet 
note sigma alphabet defined symbol sigma ffl start state 
ffl fe set final states obtained defined bkw 
ffl ffi qe sigma transition function 
qe sigma define ffi fy follow glushkov automaton marked model group example glushkov automaton marked model group shown 
easy observe glushkov automaton 
ffl just top finite tree automaton corresponds directly regular tree grammar nf glushkov automaton corresponds directly model group 
ffl consider path possibly repeating edges states final state 
gives string 
example glushkov automaton path states 
ffl string accepted 
corresponds path input symbols final state 
path input symbols glushkov automaton 
note function defined path input symbols path states 
function defined path states 
path states say gives corresponding path input symbols 
example path states corresponding path input symbols 
define ambiguities language accepted 
ambiguities preserved definition 
intersection automaton marked model groups sigma ffi sigma ffi glushkov automaton representing model groups 
define intersection glushkov automaton sigma ffi follows ffl defined hq 
define hq hh hq hh ffl sigma ha sigma sigma 
define ha 
ffl hq ffl hq 
ffl ffi hq ha hq ha sigma defined follows hr ffi hq ha hr ffi ffi 
intersection glushkov automaton obtain marked regular expression flow graph algorithm 
define intersection model group model groups marked regular expression corresponding glushkov automaton represents intersection glushkov automaton alphabet fm alphabet fe ffi alphabet fm alphabet fe ffi fe fe ffi ffi defined appropriately 
step intersection model groups intersection tree automata 
understanding tree automata glushkov automata ready examine closure properties various language classes introduced section 
closure properties mentioned regular tree languages closed union intersection difference 
show subclasses regular tree languages closed union difference 
showing languages closed give example languages local tree tdll union difference language captured non reducible regular tree grammar td grammar 
note nonredundant regular tree grammar easy verify resulting language td grammar representation 
show language subclass closed intersection 
lemma exist grammars local tree grammar tdll grammar derived non reducible regular tree grammar td 
xi proof regular tree grammars production rules doc para para para ffl production rules doc para para para ig union represented regular tree grammar production rules doc para para para para ffl para para ig td grammar 
easy verify td grammar derives 
upsilon theorem td single type constraint tdll local tree languages closed union 
xi lemma exist grammars local tree grammar tdll grammar gamma derived non reducible regular tree grammar td 
xi proof production rules doc para para para ig production rules doc para para para ffl difference gamma set documents para figures 
represented regular tree grammar production rules doc para para para para para ig para para ig td grammar 
easy verify td grammar derives 
upsilon theorem td single type constraint tdll local tree languages closed difference 
xi ready show closure intersection local tree single type constraint td tdll languages 
assume regular tree languages intersection regular tree language sigma ffi sigma ffi top non deterministic tree automata obtained normalized regular tree grammar representation respectively sigma ffi represent intersection tree automaton obtained construction definition theorem local tree languages closed intersection 
xi proof local tree languages 
definitions intersection tree automaton local tree languages state hq root root root 
local tree language 
upsilon remaining closure proofs consider intersection marked model groups 
assume marked model groups want find marked model group representing intersection 
sigma ffi sigma ffi glushkov automata respectively 
intersection glushkov automaton sigma ffi obtained flow graph algorithm 
theorem single type constraint languages closed intersection 
xi proof show satisfy single type type constraint satisfies single type constraint 
know definitions single type constraint languages intersection glushkov automaton symbol ha sigma 
upsilon theorem td languages closed intersection 
xi proof show unambiguous unambiguous 
assume contradiction ambiguous 
show ambiguous 
ambiguous exist paths input symbols ha ha ha hb hb hb exist symbols ha hb ha hb ha hb ha ha ha gamma gamma hb hb hb gamma gamma ha ha ha hb hb hb 
definition intersection automaton know 
definition sigma implies ambiguous 
upsilon theorem tdll languages closed intersection 
xi proof show unambiguous unambiguous 
assume contradiction ambiguous 
show ambiguous 
ambiguous exist paths input symbols ha ha ha hb hb hb exist symbols ha hb ha hb ha hb ha ha ha gamma gamma hb hb hb gamma gamma 
definition intersection automaton know 
definitions sigma implies ambiguous 
upsilon evaluating different xml schema language proposals section compare representative xml schema language proposals dtd dsd xmlschema xduce relax 
schema proposals define regular tree grammar 
converting rules schema proposals regular tree grammar definition 
give equivalent definition regular tree grammar explain features schema proposals respect regular tree grammar definition 
definition 
regular tree grammar regular tree grammar defined tuple non terminal symbols set terminal symbols set start symbols 
defines set production rules form ax 
defines set production rules form expression expression regular expression model group symbols 
multiple rules symbol respectively 
restriction rules language defined symbol regular language 
grammar defined section expressed grammar definition 
conversion requires identify model group representing content model non terminal symbol 
model group exists content model symbol regular language 
dtd dtd defined bpe tdll local tree grammar 
tree locality constraint enforced distinguishing terminal symbols non terminal symbols 
horizontal look ahead constraint enforced validating dtd constructing mentioned appendix bpe 
dsd dsd kms impose constraint production rules express regular tree grammar dsd 
example valid content model dsd 
parsing dsd uses greedy technique vertical horizontal lookaheads 
dsd accept regular tree languages 
example dsd accept string form conforms element definitions dsd form id book title name title 

conjecture dsd accepts tdll languages 
converted grammar notation title title book title expression equivalent 
content patterns dsd allow specifying content element say attribute values ancestors 
xml schema xml schema represents tdll grammars satisfy single type constraint 
define different concepts xml schema follows 

complex type definition defines production rule 
instance xsd complextype name book 
xsd sequence 
xsd element name title minoccurs maxoccurs 
xsd element name author minoccurs maxoccurs unbounded 
xsd element name publisher minoccurs maxoccurs 
xsd sequence 
xsd complextype 
converted grammar rule book 
title author publisher book author 

group definition defines new non terminal follows fal section xsd group name 
xsd sequence 
xsd element name shipto type 
xsd element name type 
xsd sequence 
xsd group 
group definition equivalent grammar rules 
shipto 
xml schema allows group definition contain group definitions restriction 
xml schema allows context free language content model element shown 
ffl believe making content model description context free language intention overlooked 
worth mentioning candidate recommendation xml schema believed restrict language defined content model regular language 

object oriented programming xml schema borrows concepts sub typing 
achieved extension restriction 
example derived types extension slightly modified fal section 
complextype name address 
sequence 
element name name 
element name street 
element name city 
sequence 
complextype 
complextype name 

extension base address 
sequence 
element name postcode 
sequence 
extension 

complextype 
type definitions address equivalent rules 
name street city 
name street city postcode suppose element declaration element name shipto type address 
equivalent rules shown 
shipto address shipto shipto note rule shipto shipto automatically inserted true object oriented programming paradigm 
considered side effect formal language theory 
xml schema provides attribute called block prevent sideeffects 
example address defined block automatically insert rule 
xml schema provides attribute called final prevents derived types extension restriction 
example address defined final derive type called 

xml schema provides mechanism called xsi type allow satisfy horizontal vertical lookahead constraints tdll grammar 
example legal rules xml schema 
fx 

author 
author author son author daughter ft title author author author author author author book book book book book book zg grammar satisfy vertical horizontal lookahead constraints 
checking document validity lookahead properties unique assignment tree maintained requiring document mention explicitly type 
example valid node instance tree book xsi type 
noted xml schema equivalent regular tree grammar way define type book 
author author author author author author xml schema 

substitution group definition previously known equivalence class converted equivalent grammar definition follows 
example consider substitution group definition fal section modify slightly easy explanation element name type ipo comment 
element name type ipo comment 
converted grammar rules ipo comment ipo comment zg ipo comment non terminals 
substitution groups require rule form ipo comment ipo comment derived xduce xduce provides type definitions equivalent regular tree grammar 
type definition produces tree converted rule 
consider example type addrbook addrbook erson written addrbook addrbook erson 
type definition produce tree written rules 
example type represents rules 
ffl 
note xduce writes type rules right linear form content model definition equivalent regular string language 
xduce provides mechanism called slightly difficult convert grammar terminal symbols non terminal symbols 
explain convert declarations grammar rules 
example consider declaration subtag consider rules produce root production rule 
rules fa 
introducing subtag declaration adds additional rules fa relax regular tree grammar expressed relax mur iso 
consider relax 
words assume tag names 
role attribute relax equal tag name 

defines rule rule 
example consider slightly modified mur 
role section label section 
ref label occurs 

converted production rules section sect ion 

defines rule 
example consider taken mur label 
ref label para 

converted grammar 
para relax allows contain 
requires recursion ensures grammar remains regular 

relax allows share label 
example specify relax label 
ref label para 

label 
ref label 

converted rules 
para 

relax allows multiple share label follows 
example role label 
ref label 

role label 
ref label 

role label 
ref label 

converted rules fa zg 
tag typically specify attributes 
effect adds additional level indirection rule specification 
convert grammar representation need collapse role attributes 
clear example mur 
tag name val role val integer 
role val integer label val 
ref label 

tag name val role val string 
role val string label val 
ref label 

converted grammar rules fv val val compares expressive power different grammar classes xml schema language proposals 
membership checking type assignment section study operations performed grammar defined definition tree ffl membership checking document validity checking determines tree permitted grammar 
ffl type non terminal assignment document interpretation determines assignment tree tree 
necessary distinguish tree model event model 
models fine small documents 
documents significantly large tree model performance problems event model scales 
expressive power different regular tree grammars regular tree grammars relax xduce td grammars single type constraint grammars local tree grammars tdll grammars tdll grammars single type constraint xml schema tdll grammars tree locality constraint dtd tree model application programs access tree memory traverse tree number times 
tree may created xml parser accessed api dom wha 
alternatively tree may created application programs output xml parser 
event model application programs notified start element event api sax meg 
start element event raised xml parser encounters start tag respectively 
words application programs visit leave elements document depth manner 
application program visits element document able visit element 
assume application programs attempt reconstruct document memory buffer events memory 
automata regular tree grammars studied past cdg mur 
automata known checking tree membership deterministic top nondeterministic top deterministic bottom non deterministic bottom 
top automata assign states superior elements subordinate elements bottom automata assign states subordinate elements superior elements 
deterministic automata assign state element non deterministic automata assign number states element 
provide formal definitions tree automata mention important observation non deterministic top deterministic bottom nondeterministic bottom tree automata equivalent accept regular tree languages deterministic top tree automata accept subset regular tree languages 
deterministic top tree automata assign state element examining element examine parent element state assigned 
restriction deterministic top tree automata useless xml 
lot useful xml allowed examine element assigning state 
refer automata phrase lookahead 
consider complexity respect size xml schemas consider complexity respect size xml documents 
size documents may significantly large mb size schemas limited 
fact dtds considered large element types 
membership checking consider membership checking 
show efficient algorithm applicable regular tree grammar 
theorem membership checking regular tree grammar created event model time required linear number nodes document 
xi algorithm simulates non deterministic bottom tree automata 
assigns zero possibly multiple non terminals element assigning non terminals child elements 
element child elements 
nonterminal say assigned exists non terminal sequence ffl production rule terminal symbol ffl production rule expression matches expression ffl non terminals assigned assume deterministic string automaton constructed content model production rule 
non terminal regular tree grammar state deterministic string automaton transition function returns new state 
show algorithm implemented event model 
key idea maintain set states string automaton 
sets states pushed popped stack xml parser raises element element event respectively 
idea illustrated algorithm membership 
obviously time complexity algorithm linear number nodes document 
algorithm membership element start tag encountered production rules terminal symbol tag identified 
note production rule may 
production rules empty set states corresponding deterministic string automaton created 
sets states parent element pushed stack 
element tag encountered set states examined 
contains final state non terminal corresponding production rule assigned element 
assigning zero multiple non terminals element sets states parent element popped stack 
non terminals current state set state computed applying transition function corresponding string automaton 
algorithm applied td tdll single type constraint local tree grammars 
membership checking efficient 
see subsection algorithms restricted grammars 
algorithms perform membership checking type assignment arguably straightforward 
type assignment consider type assignment local tree grammars single type constraint grammars tdll grammars 
assignment tree constructed document grammar document permitted grammar 
algorithms type assignment membership checking 
theorem type assignment local tree grammar single type constraint grammar tdll grammar built event model deterministic top tree automaton lookahead 
time required linear number nodes document 
xi type assignment algorithms classes grammars similar 
algorithms simulate deterministic top tree automata lookahead 
assign nonterminal element assigning non terminal parent element elder sibling elements 
element child elements 
suppose nonterminal assigned non terminals assigned gamma gamma respectively 
non terminal assigned conditions hold ffl production rule terminal symbol ffl production rule expression gamma prefixmg expression ffl production rule terminal symbol show algorithms implemented event model 
type assignment programs receive events forward application programs element event received type element added 
assume deterministic string automaton constructed content model production rule 
key idea maintain state deterministic string automata current element 
state current element pushed popped stack xml parser raises element element event respectively 
idea illustrated algorithm 
obviously time complexity algorithm linear number nodes document 
theorem type assignment regular tree grammar may ambiguous 
xi proof simple example regular tree grammar tree type assignment ambiguous 
book book author author title cdata author author son author author daughter cdata pcdata ffl book 
title pcdata title 
author 
book 
algorithm element start tag encountered non terminal element determined 
depending class grammars done follows case local tree grammars non terminal determined directly terminal symbol current start tag see definition 
case single type constraint tree grammar non terminal assigned parent element content model 
content model contains non terminal root terminal symbol current start tag see definition 
non terminal non terminal current element 
type assignment fails 
case tdll grammars assume deadend states states final states reached removed deterministic string automata content models 
consider current state string automaton parent element 
transitions state associated non terminals 
tdll constraint definition ensures non terminals say terminal symbol current start tag root 
non terminal non terminal current element 
type assignment fails 
current state parent element updated 
state computed applying transition function corresponding string automaton non terminal current element current state parent element 
production rule element identified 
initial state corresponding string automaton created state current element 
state parent element pushed stack 
element tag encountered state current element examined 
final state corresponding string automaton type assignment fails 
node represented assigned author author 
note ambiguous assignment possible td tdll single type constraint local tree grammar 
upsilon theorem type assignment td grammar built event model 
xi proof consider grammar follows doc doc para para para para para cdata para para cdata cdata pcdata ffl type paragraph determined examining paragraph 
document contains odd number paragraphs type paragraph para 
contains number paragraphs type para 
event model buffer element event paragraph 
upsilon implementations subsection describe status implementations xml schema languages 
ffl dtd membership checking dtds widely implemented 
implementations event model simulate top deterministic automata lookahead 
ffl xduce type assignment implemented designers xduce tree model 
implementation simulates top non deterministic automata backtracking 
backtracking may require exhaustive search 
ffl dsd type assignment dsd similar xduce 
tree model simulates top non deterministic automata backtracking 
backtracking thorough perform exhaustive search 
ffl xml schema schema validity assessment defined xml schema part performs type assignment deterministic top tree automata lookahead 
best knowledge implementations follow model 
xml schema allows tdll grammar satisfying single type constraint mechanisms xml schema key unique require tree model 
xml schema validator tree model 
xml schema processor implementation combined sax parser dom parser 
combined event model parser support key unique 
xerces java parser implementation event model support key unique 
xml spy xml instance xml document editors tree model 
editing documents controlled schemas xml schema 
ffl relax implementations relax available different algorithms type assignment membership checking 
program tree model 
simulates top nondeterministic automata backtracking 
backtracking may require exhaustive search 
relax verifier program event model 
performs membership checking perform type assignment 
program algorithm membership 
relax verifier java program event model 
algorithm membership utilizes top non determinism 
intuitively available official site relax www xml gr jp relax 
speaking element visited possible non terminals element temporarily assigned element 
possible non terminals chosen examining parent element non terminals temporarily assigned 
element left program examines temporarily assigned non terminals allowed subordinate elements 
advantages combining top non determinism bottom non determinism appropriate error messages error recovery 
relax verifier performs type assignment membership checking 
lineartime algorithms type assignment implemented 
requires pass processing xml documents dedicated tdll grammars deterministic constraint 
java class generator 
relax module generates java classes represent xml documents permitted module 
java classes receive xml documents dom trees perform type assignment 
type assignment uses top non deterministic automata limited backtracking 
mathematical framework formal language theory compare various xml schema languages 
framework normal form representation regular tree grammars ambiguities general marked regular expressions model groups various subclasses regular tree languages defined 
detailed analysis closure properties expressive power different subclasses 
results complexity membership checking type resolution various xml schema languages 
class grammars describe great detail tdll grammars deterministic constraint 
believe class grammars play important role useful features membership checking type assignment done linear time event model strictly expressive tdll grammars deterministic constraint single type constraint grammars strictly expressive td grammars 
expect xml processing system behave follows server xml processing result xml processing xml document regular tree grammar xduce 
server try evaluate regular tree grammar equivalent representation say tdll grammar 
convert grammar form 
server send document grammar client 
client gets document tdll regular tree grammar 
client wish processing limited memory considerations 
grammar client gets regular tree grammar client memory limitations try convert grammar tightest possible tdll grammar processing 
provides framework systems problems answered come solutions example tightest say tdll grammar regular tree grammar 
interesting research topics lookaheads vertical horizontal directions 
algorithmic aspects type checking pose lot challenges example precise class grammars type assignment event model 
error recovery error messages important implementations 
au aho ullman 
principles compiler design 
addison wesley 
book greibach ott 
ambiguity graphs expressions 
ieee transactions computers feb 
bkw klein wood 
unambiguous regular languages 
information computation 
bpe bray paoli sperberg mcqueen eds 
extensible markup language xml 
feb 
www org tr rec xml 
cdg comon dauchet gilleron tison 
tree automata techniques applications 
www grappa 
fr tata 
fal fallside 
xml schema part primer sep 
www org tr xmlschema 
hu hopcroft ullman 
automata theory language computation 
addison wesley 
hosoya vouillon pierce 
regular expression types xml 
int conf 
functional programming icfp montreal canada sep 
iso iso iec 
information technology text office systems regular language description xml relax part relax core 
dis 
kms klarlund moller 
dsd schema language xml 
acm sigsoft workshop formal methods software practice portland aug 
lc lee chu 
comparative analysis xml schema languages 
acm sigmod record sep 
meg 
sax simple api xml may 
www com sax index html 
mur murata 
regularity locality string languages tree languages feb 
www oasis open org cover html 
mur murata 
syntax regular non local schemata structured documents apr 
www oasis open org cover html 
mur murata 
hedge automata formal model xml schemata 
www xml gr jp relax hedge nice html 
mur murata 
relax regular language description xml 
www xml gr jp relax 
tak takahashi 
generalizations regular sets study context free languages 
information control jan 
thompson beech maloney mendelsohn eds 
xml schema part structures sep 
www org tr xmlschema 
wha wood le byrne champion isaacs jacobs nicol robie wilson eds 
document object model dom level specification sep 
www org tr wd 

