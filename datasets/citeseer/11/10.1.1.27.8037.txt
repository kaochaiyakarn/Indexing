object oriented design pattern inference paolo tonella itc irst ist 
la ricerca 

povo trento italy tonella irst itc antoniol university faculty engineering italy antoniol ieee org designing new application experienced software engineers usually try employ solutions proved successful previous projects 
reuse code organizations seldom explicit 
represents important information system extremely valuable maintenance phase documenting design choices underlying implementation 
addition having available reused similar problem encountered 
approach proposed inference recurrent design patterns directly code design 
assumption availability pattern library concept analysis algorithm adapted purpose able infer presence class groups instantiate common repeated pattern 
fact concept analysis provides sets objects sharing attributes case object oriented design patterns class members inter class relations 
approach applied application structural relations classes led extraction set structural design patterns enriched non structural information class members method invocations 
resulting patterns interpreted meaningful organizations aimed solving general problems instances analyzed application 

approaching problem conceiving new system expert designers tend reuse solutions worked past 
design patterns recurring organizations classes communicating objects object oriented systems employed design flexible elegant reusable 
popular object oriented oo design pattern collection contained book gamma design patterns implementation smalltalk collected documented 
design patterns beneficial forward engineering process represent relevant information system reverse engineering phase 
program understanding maintenance perspective pattern provides knowledge role class pattern organization reason certain relationships pattern constituents remaining parts system 
discovery patterns software artifact highlights rationale adopted solution represents step program understanding process improves documentation 
consequently maintenance identification design pattern instances provides insight software artifacts structure reveals places changes reuse extensions expected 
useful information looked code matching library known design patterns system conceived design pattern paradigm mind knowledge implicit designer background 
contrary design pattern available libraries adopted application approach fails 
patterns created willingly designers developers inferred code design 
similar scenario design system needing particular design patterns due specificity application domain 
patterns library means determine presence observe repeated class object organization directly code design 
generally recurrent solutions retrieved software artifacts different abstraction levels requirements architecture design 
approach inference oo design patterns code design proposed 
exploits concept analysis identify groups classes sharing common relations 
extracted concepts contain maximal collections class sets having pattern relations tween candidates represent design patterns inferred code design 
number instances pattern indicator frequency reuse identified class organization number involved relations determines complexity pattern 
proposed approach applied case study consisting public domain application set design patterns inferred 
different class properties example isolate meaningful design patterns 
works addressed problem recovering design patterns code design library known patterns matched authors knowledge attempted directly infer design patterns code design 
kramer prechelt proposed approach developed system called pat localizes instances structural design patterns means structural information 
relies reverse engineering capability case tool extract design information uses prolog facts represent rules express patterns 
keller developed approach prototype tool recovering visualizing generic ad hoc design patterns reverse engineered source code system 
tool supports recovery design patterns automatic manual semi automatic design clustering techniques 
knowledge existence design patterns preserved central repository 
melo basili developed manual inductive method help discover design patterns existing oo software systems 
antoniol proposed multi stage reduction strategy oo metrics structural properties match design code library patterns 
works inferring high level information system pattern library deal identification data types objects code 
main difference nature inferred information interpreted terms design patterns 
works aiming data type identification concept analysis 
concept analysis applied extraction code configurations 
relation procedures global variables analyzed means concept analysis 
resulting lattice identify module candidates 
concept analysis identify modules considering positive negative information types function arguments return value 
accesses dynamic locations attributes allow determination module candidates consisting functions operating common dynamic data structures 
contribution adoption concept analysis successfully identify data types objects purpose inferring oo design patterns directly code design assumption availability pattern library employed design system 
organized follows section describes proposed approach design pattern inference code design introduces notion equivalent patterns classes simplify output concept analysis usable 
addresses problem representing non structural information constitute pattern 
section discusses results application inference technique real public domain system 
different design patterns retrieved code different choices characteristic attributes 
drawn section 
design pattern inference design patterns organizations classes arrangements operations aimed solving general problems 
infer design patterns repeatedly inside application properties characterizing pattern recovered instances 
sake simplicity consider structural relations classes class diagram possibly reverse engineered code 
presence repeated pattern described possibility extract groups classes sharing mutual relations 
notion close concept concept analysis 
properly representing input domain concept analysis effectively employed infer design patterns code design 
basic definitions concept analysis introduced results example discussed illustrate general ideas 
primer interested reader refer 

concept analysis pattern inference concept analysis permits grouping objects common attributes 
application concept analysis objects groups classes attributes relations classes 
starting point concept analysis context set objects set attributes binary relation objects attributes stating attributes possessed object 
application binary relation states class pairs connected relation 
concept maximal collection objects possess common attributes grouping objects share set attributes 
formally concept pair sets 
example class diagram containing inheritance association relations 
table 
order context example constructed means inductive algorithm 
fo oj pg fa aj pg set objects set attributes binary possess relation 
said extent concept said intent 
algorithms compute concepts context 
simple bottom algorithm described 
key observation concept analysis design pattern corresponds formal concept 
fact concept consists set class groups sharing common relations 
number groups extent cardinality gives number instances pattern code design number attributes determines complexity pattern number relations involved 
size class groups considered candidate patterns order design pattern 
consider class diagram 
different relations classes represented labelled class relation confused containing labelled pairs theta set classes class diagram 
extends relation represents association classes aggregated sequences included class addressed sequential index name 
sequences place sets way possible express relations different parts pattern knowing name classes instantiating pattern sequence indexes 
associated attributes pairs sequence indexes labelled relation identifier 
class sequences attributes common fact class sequences extends second class sequences associated third 

inductive context construction context order built class diagram considering class sequences length objects labelled relations sequence indexes attributes xn jx ng ng mitigate combinatorial explosion associated generating possible sequences classes inductive context construction algorithm proposed steps described 
underlying hypothesis design patterns consist connected graphs 
initial step pairs classes collected relation holds 
inductive step class sequence previous iteration augmented classes having relation classes sequence 
attribute set updated accordingly 
inductive context construction algorithm ensures sequences representing disconnected graphs initial step rg rg step step gamma gamma gamma gamma gamma gamma gamma rg 
steps inductive construction order context representing structural relations classes 
class diagram disregarded 
addition order context contains order gamma context lower order sequences initial subsequences current objects attributes retained 
context order inductively constructed example initial step generates object set class pairs attribute set inductive step classes related paired classes appended sequence forming new context order table 
noted considering possible class sequences lead object set elements inductively constructed context contains objects 
reduction object set size due presence disconnected subgraphs class diagram partial connectivity inside connected graph 
reduction limit ability concept analysis infer possible design patterns 
table 
concepts order context table 

equivalence classes patterns applying concept analysis context table set concepts table determined 
directly interpreted design patterns redundancies apparent removed defining notion equivalent instances equivalent patterns 
definition equivalent patterns concepts representing design patterns equivalent permutation indexes extent objects exists object concept transformed object second concept permutation vice versa 
definition patterns equivalent classes extent ordered differently 
consequently intent attribute concept transformed attribute second concept vice versa 
fact possible define index permutation transforming object extent second attributes assured mapped accordingly concept definition maximal collection attributes shared set objects remapped objects equal necessarily possessed attributes 
consider example concepts table 
index permutation 


defined object indexes transforms 
expected applied attributes gives attributes concepts associated equivalent patterns just retained representative equivalence class 
definition equivalent instances objects extent concept representing design pattern instances equivalent permutation indexes objects exists transforms object second applied attributes concept produces attributes concept 
class sequences pattern contain classes different order attributes characterize pattern invariant respect permutation instances pattern considered distinct difference order involved classes 
treated equivalent instances 
concept table contains examples equivalent instances 
class sequences transformed applying permutation 


indexes 
addition application attributes produces set attributes 
equivalent instances pattern represented concept permutation sequence indexes employed demonstrate objects extent equivalent 
equivalent instances concept extent replaced representative instance 
way cardinality resulting extent associated number instances pattern code design 
additional simplifications concepts computed context 
concepts empty extent intent interesting removed 
concepts representing patterns disconnected subgraphs disregarded determined lower order context 
context order computed order patterns looked gamma gamma order contexts suffice lower order patterns 
example concept characterized association class second third class ignored 
pattern simply represents notion association retrieved order context 
equivalence classes patterns instances substituted single representative element lower order patterns disregarded patterns empty extent intent concepts table table 
table 
patterns obtained simplifying table 
pattern characterized inheritance relation classes association derived class third class pattern associations common class relevant feature 
pattern coincident structure second class group 
patterns respectively instances class diagram 
instance class group left right coincides pattern instance represented particularly interesting contains patterns intermixed 
example highlights nice property related concept analysis pattern inference pattern identified cases implemented conjunction patterns noisy way 
fact presence shared relations apparent context examined concept analysis 
concept analysis appealing patterns inferred directly code design noisy intermixed implementations expected 

non structural attributes structural relations association inheritance may insufficient narrow choice candidate design patterns 
additional attributes attached classes context purpose enriching characterization inferred patterns pruning false positives 
additional attributes basically kinds relations classes properties individual classes 
relations classes handled exactly way structural attributes 
example interesting relation classes invokes method represented attribute label call method invocation associated specific method class class label modified chm indicate method class calls method second class 
properties individual classes need special treatment index class sequence involved 
express positional related index represented brackets name attribute 
attribute interest class owns method associated representation 
consider example 
classes method associated context augmented attributes classes owning may occupy available sequence positions context table 
applying concept analysis resulting context design patterns obtained simplification 
enrichment table instantiations 
depicted 
picture pattern associated class diagram enriched non structural relations attributes 
class names replaced positions sequences instance classes 
structural relations owned methods represented links classes class attributes respectively graphical format usually adopted class diagram 

case study proposed approach applied public domain application mec version 
mec trace replay pro 
example design pattern inferred code design 
class names replaced positional indexes actual pattern instances 
gram run target program trace replay viewer see executing exactly traced 
mec written consists lines code loc header file loc total classes 
code reverse engineered class diagrams extracted 
aggregation association relations classes distinguished implementations clearly separated 
term association inclusive relations 
order context inductively constructed including structural relations inheritance association 
contains objects attributes successfully analyzed sun sparc workstation normal load conditions 
equivalence classes patterns computed resulting concepts 
shows structural patterns inferred application listed decreasing frequency order 
frequent pattern consists classes associated third 
organization matched non equivalent class sequences 
recurring structures involve association inheritance 
particular design pattern depicted resembles known class organizations described adapter 
adapter pattern adapts interface exported associated class number services called different calling conventions extended class number 
instances identified concept analysis possess class organization pattern 
manually inspected see behavior corresponds purposes adapter pattern 
answer positive associated class interface adapted ex 
structural patterns inferred mec system 
number instances pattern 
tended class 
concept analysis able infer code patterns widely recognized recurrent organizations oo design 
step search potential domain application specific design patterns 
adding non structural attributes structural patterns selected investigation 
pattern bottom left involving inheritance relation association general class considered interesting 
structural attributes instances pattern extracted initial context augmented information methods owned called class 
num classes owned methods fetch count fetch table 
classes methods concepts specialize bottom left pattern differing methods owned class number 
methods owned involved classes considered 
resulting context objects attributes analyzed concepts equivalence classes considered particularly relevant 
structure initial pattern classes number common methods see table 
differ classes associated position concept second shown table 
methods shared classes concept different method owned classes second concept 
closer inspection association classes number pattern reveals concept association implemented list objects type method parameters association second concept due method parameters type 
method names additional attributes allowed determining subsets initial pattern instances having different features 
class groups share common methods groups characterized presence list objects associated class 
method invocations analyzed investigate identified patterns 
context objects structural relations bottom left pattern augmented call relation pairs methods constructed 
consists objects attributes analysis took 
design pattern inferred mec system 
method invocations represented dashed lines 
determined concepts depicted considered particularly interesting 
structure initial pattern involves classes concept table position number 
considered characterization pattern 
class number contains method invokes method class number 
property true methods 
addition method class calls method class number similar property holds suffix ev class number 
void count int count int lds count int ids ids lds ids 
source code method class 
contains source code method class 
purpose method sending class information output communication channel 
statements write class specific data 
sequence statements repeated times lists objects associated classes 
example sequence refers list objects 
number objects list written followed loop objects list 
body loop delegates output operation object retrieved list 
identical pattern lists objects type 
additional output operations delegated concrete classes implement calling virtual method 
actual implementation class number pattern instantiated 
methods inspected pattern arises different purposes 
fact function reading information related current class builds text string class information properly formatted 
methods structure method general class performs input formatting operations data 
loops lists objects associated classes delegating ongoing operation invokes virtual method perform input formatting required concrete implementation class 
specific design pattern inferred code 
purpose organizing input output operations class contains list objects part data members possible concrete implementations 
related information owned general class directly handled class 
information contained objects processed looping objects delegating operation information related specific concrete implementations general class processed virtual invocation 
engineers maintain system may find extracted information useful understanding organization design decision led chosen class structure comprehended terms purpose rationale 
kind information extremely valuable especially maintenance personnel familiar application due turn lack obsolescence available documentation 
successive iterations software reuse inferred information facilitate design decisions avoid problems solved recovered design pattern 

design patterns documenting presence code 
approach infers characteristics directly code design extremely useful software maintenance 
approach pattern inference concept analysis proposed 
extracts recurrent groups classes sharing common structural relations non structural attributes predefined pattern library adopted code design level 
approach applied case study consisting program kloc 
purely structural design patterns extracted code starting point 
recognized matching widely adapter pattern manual verification confirmed intuition 
non structural attributes added structural patterns obtain specialization features 
way class organization aimed handling input output operations recovered 
employed general class including sequence objects associated class extended derived class 
concept analysis revealed powerful technique able infer meaningful class organizations directly code 
pattern retrieved analyzed application meaning purpose valuable information system 
devoted investigating usefulness non structural attributes considered presence code clones 
proposed approach applied industrial designs code 
antoniol 
metrics identify design patterns object oriented software 
proc 
fifth international symposium software metrics metrics pages 
canfora cimitile munro taylor 
extracting data type programs case study 
proceedings international conference software maintenance pages montreal quebec canada september 
canfora cimitile munro 
precise method identifying reusable data types code 
proceedings international conference software maintenance pages victoria british columbia canada sept 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley publishing reading ma 
kramer prechelt 
design recovery automated search structural design patterns object oriented software 
international workshop program comprehension pages 
krone snelting 
inference configuration structures source code 
proc 
th international conference software engineering pages sorrento italy may 
lindig snelting 
assessing modular structure legacy code mathematical concept analysis 
proc 
th international conference software engineering pages boston massachussets usa may 
johnson 
new approach finding objects programs 
software maintenance research practice 
keller 
pattern visualization software comprehension 
proc 
international workshop program comprehension pages 
schmidt 
design patterns develop reusable object oriented communication software 
communication software cacm special issue object oriented experiences mohamed tsai eds 
melo basili 
inductive method discovering design patterns object oriented software systems 
technical report university maryland computer science department college park md usa oct 
reps identifying modules concept analysis 
proceedings international conference software maintenance pages bari italy oct 
snelting 
reengineering configurations mathematical concept analysis 
acm transactions software engineering methodology 
tonella 
diagram encapsulate dynamic memory access 
proceedings international conference software maintenance pages bethesda maryland november 
yeh harris 
recovering data types object instances conventional procedural language 
proceedings working conference reverse engineering pages 
