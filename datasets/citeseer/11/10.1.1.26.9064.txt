costs benefits pair programming alistair cockburn humans technology dell rd salt lake city ut usa arc acm org various principles names definitions perceptions laboriously tested tone ill discussion insight reason forth case achieve man highest possible force plato knowledge commonly socially constructed collaborative efforts shared objectives dialogues challenges brought differences persons perspectives 
salomon pair collaborative programming programmers develop software side side computer 
interviews controlled experiments authors investigated costs benefits pair programming 
development time cost pair programming improves design quality reduces defects reduces staffing risk enhances technical skills improves team communications considered enjoyable statistically significant levels 
keywords pair programming collaborative programming extreme programming code reviews people factors collaborative programming pair programming programmers collaboratively algorithm design programming task sitting side side computer 
practice nominated times decades improved way developing software 
laurie williams university utah computer science central campus salt lake city ut usa cs utah edu convention speaks having people develop code having people see 
managers view programmers scarce resource reluctant waste doubling number people needed develop piece code 
programming traditionally taught practiced solitary activity 
experienced programmers reluctant program person 
say code personal person slow 
say working partner cause trouble coordinating times code versions 
time respected programmers prefer working pairs making preferred programming style 
pair programmers describe working pairs twice fast 
qualitative evidence suggests resulting design better resulting simpler code easier extend 
relative novices contribute expert programming interviews 
raises provocative questions 
pair programming really effective solo programming 
economics 
people factor enjoyment job 
interest pair programming authors examined interview experimental data understand costs benefits practice 
presents results page investigation 
previous publications demonstrated pair programming beneficial 
purpose reexamine results explain pair programming beneficial 
project experience excerpt comes experienced programmer describing organization venture pair programming 
reveals features pair programming experience discussed 
early december team began high risk activity involved touching just file merging code trying keep working 
furthermore tree involved fairly deep 
merge composed utter tedium massive thought effort 
staff agreed points pair programming significantly reduce risk subtle errors debugging give broader code review provide opportunity communicate knowledge coders 
weeks things didn envisioned 
doing side side pair programming people called partner programming coded individually reviewed changes partner checking modifications 
reported catching errors early 
encouraging disappointed weren working consistently 
months merge began notice things changing 
pair particular spent day doing honest goodness pair programming pairs getting closer ideal 
discussions clear knew change happening 
simply worked better 
discovered took longer independently review changes review process involved teaching partner learned making changes 
took long making changes 
working avoid doing twice coding went faster due brain effect confident correctness results 
checkpoint application zoomed qa hardly hitch 
included didn take weeks debug especially trees spent weeks qa hell 
obvious pairs dramatically reduced defect rate 
merge progressed pairs worked closely 
subsystem complete pairs get rearranged knowledge task 
slowed things new pairs spend time getting phase working effectively 
august pairs fairly point routinely speak twice weekly team meetings 
subsequent releases internal external went smoothly rarely hit massive bugs 
continual review caught serious issues including major design problems hadn noticed 
wasn involved pair fairly late game 
partner synchronized brains great experience 
relatively junior asked right questions struggling answers usually forced discover best solution problem 
team members decided 
effect experience 
investigative paths explore paths software engineering organizational effectiveness 
surprisingly paths point pair programming 
investigative paths briefly described economics 
controlled experiment small development cost adding second person 
resulting code fewer defects 
defect removal savings offsets development cost increase 
satisfaction 
people working pairs experience enjoyable working 
design quality 
study pairs produced shorter programs solo peers indicating superior designs 
interviewees page comments 
continuous reviews 
pair programming shoulder shoulder technique serves continual design code review leading efficient defect removal rates 
problem solving 
interview participants constantly refer team ability solve impossible problems faster 
learning 
pair programmers repeatedly cite learn 
team building communication 
interview participants describe people learn discuss 
improves team communication effectiveness 
staff project management 
multiple people familiarity piece code pair programming reduces staff loss risk 
investigative paths discussed reviewing supporting statistical interview data highlighting costs benefits 
economics pair programming key issue 
expensive managers simply permit 
assume incorporating pair programming double code development expenses critical manpower needs 
code development costs expenses quality assurance field support costs considered 
ibm reported spending repairing fixes customer reported problems 
defect 
controlled experiment run second author university utah investigated economics pair programming 
advanced undergraduates software engineering course participated experiment 
third class coded class projects years 
rest class completed projects collaborative partner 
results time students spent assignments shown 
initial adjustment period program assignment pairs spent time program individuals 
development costs certainly double pair programming 
relative time individual vs collaborators program program program programmer time individual collaborators significantly resulting code fewer defects 
results statistically significant 
shows test cases students passed program essentially percentage instructor test cases passed 
post development test cases passed code defects program program program individuals collaborators initial increase code development expense recovered reduction defects example illustrates 
program lines code loc developed group individual programmers group collaborative programmers 
typical rate loc hour individuals develop code hours 
take pairs longer hours cost hours 
representative statistics reported programmers inject defects lines code 
thorough development process removes approximately page defects 
individuals expected defects remaining program collaborators defects 
organizations developers code passed test quality assurance department finds fixes remaining defects 
typically systems test takes hours defect 
fairly conservative factor hours defect testing finds extra defects spend hours fifteen times collaborators extra hours 
program sent directly customer test department pair programming favorable 
industry data reports hours spent defect field 
fairly conservative factor hours defect customer plagued extra defects field support spend hours times collaborators extra time 
pair programming justified purely economic grounds 
aspects consider 
satisfaction pair programming satisfying programmers won practice 
programmers initially skeptical resistant programming partner 
takes conditioned solitary programmer comfort zone programmer wrote adjustment period solo programming collaborative programming eating hot pepper 
time try 
eat statistically significant results pair programming teams earlier programmed reported enjoyed pair programming confident programs programmed defect rates show entitled 
graph shows results anonymous surveys professional pair programmers student pair programmers university utah 
programmers enjoyed programming collaboratively 
enjoy pair programming prof sum sum pair enjoyment programmer comments sum fall agree disagree page fall fall psychologically sure major mistakes 
find reassuring know partner constantly reviewing code drive 
sure done job trust watching approved says nice somebody works students prefer overhead study previously discussed class divided groups individual group solo programmers programming collaborative group programming done pairs 
programming assignment cycle individuals program complete pairs programs complete 
programming cycles pair complained arrangement unfair 
felt harder individuals cycle 
instructor suggested students split solo programmers part individual group longer feel 
students rejected offer instantaneously 
complain additional workload 
feel strong indicator satisfaction pair programming 
design quality comments came team lead heard pair programming 
described designer programmers working terminal 
proceeded started notice team consistently produced designs distinctly better quality 
asked 
said taken working design programming 
designs programs better way 
agreed standard teams pairs 
design quality better 
interview files cockburn nick flor masters student cognitive science reported distributed cognition collaborative programming pair studied 
distributed cognition field cognitive science belief closely observed practices cognition struck fact mind rarely works 
revealed practices distributed minds persons symbolic physical environment flor recorded video exchanges programmers working software maintenance task 
correlated specific verbal non verbal behaviors study known distributed cognition theories 
theories searching larger spaces alternatives system multiple actors possesses greater potential generation diverse plans reasons actors bring different prior experiences task may different access task relevant information stand different relationships problem virtue functional roles 
important consequence attempt share goals plans conflict programmers overtly negotiate shared course action 
doing explore larger number alternatives single programmer 
reduces chances selecting bad plan 
pair programmer description matches flor came different ideas design go result arguing better led truly superior hybrid design 
quantitative study university utah pairs completed programs superior quality consistently implemented functionality individuals fewer lines code 
details shown 
believe indication pairs better designs 
lines code program program program individuals collaborators continuous reviews inspections introduced years ago cost effective means detecting removing defects software 
results empirical studies consistently effectiveness reviews 
programmers find inspections enjoyable satisfying 
result inspections done mandated inspections held inspectors 
despite consistent stream positive findings years industry adoption inspection appears remain quite low definite data exists 
example informal usenet survey conducted respondents practiced inspection irregularly 
theory inspections effective prominent knowledge earlier defect product cheaper fix defect 
sources including state times expensive remove defect additional process step 
exponential cost growth easy understand 
inspection programmer say statement starting line page clause programmer marks listing promptly change computer 
software field customer call software shop christmas eve cash registers just crashed 
sell case programmer looks directly problem just identified 
second case field maintenance team translate symptom cash registered crashed back problem exact line code caused crash 
easy see translation symptom back problem costs exponentially direct problem identification 
pair programming problem identification occurs minute basis 
continual reviews outperform formal reviews defect removal speed eliminate programmer reviews 
description senior originally skeptical programmer shows pairing novice contributed programming 
sitting experienced developers working fairly straightforward task 
thinking great skill smalltalk soon teaching young programmer really done 
hadn programming minutes asked doing doing 
sure bad track 
went way 
reminded correct method name time 
pretty soon suggesting calling formatting error syntax mistake 
ron jeffries final benefit code reviews reviewers learn new coding idioms language features system 
continuous reviews collaborative programming create unique educational capability pairs endlessly learning 
review unique educational capability process analyzing critiquing software artifacts produced potent method learning languages design techniques application domains forth 
keeping known characteristics code reviews find practitioners citing mistakes entered saving cost compilation providing economic benefit early defect identification removal 
coding standards followed accurately peer pressure 
team members learn talk 
problem solving times felt tag ropes describe problem way valuable insight 
fight long 
insight 

suppose call brainstorming feels different david wagstaff salt lake city pair relaying name effect wagstaff describes 
pairs consistently report solve problems faster different improving design quality detecting typing errors brainstorming 
problem solving refer puzzled doesn expected simply go forward 
interviews hand remarks practitioners describe contributing knowledge best abilities turn 
share knowledge energy brainstorming turn steadily away problem 
combining brainstorming pair relaying powerful 
programmer wrote working partner go back working part mind gone 
find getting confused things 
learning knowledge constantly passed partners tool usage tips mouse programming language rules design programming idioms design skill 
learning happens tight apprenticeship page mode 
partners take turns teacher taught moment moment 
skills habits cross partners 
line sight learning discusses apprenticeship case studies 
studies range tailors flag navy modern supermarkets 
book legitimate peripheral participation highlight key aspects apprenticeship novice actively participates novice legitimate novice works periphery steadily moving higher rank 
novice initially simple non critical 
critical 
distinctive characteristics note successful apprenticeship environments novice line sight expert expertise transmitted part ongoing visual auditory field 
describe successful apprenticeship learning tailors navy line sight available 
beginner explicitly picks skills hearing seeing expert 
interesting case studies discussion supermarkets 
line sight access local expert 
beginners simple cuts perform way learn difficult cuts done senior butcher room 
lave wenger situation apprenticeship learning happen 
obvious project programming environments match butcher situation tailor situation 
extremely difficult set programming environments sight line hearing expert novice accommodated 
novice programmer generally sits workspace working simple code expert sits workspace creating complex code making architectural decisions 
pair programming better apprenticeship situation 
expert author obtained project management pattern set workshops senior project managers 
full pattern listed appendix includes examples caveats summarized expert novices learning techniques habits don want turn expert full time teacher 
put expert leader workspace novice workers novices learn watching listening expert usual 
novices pick expertise hopefully habits expert 
expert disturbed set ways create personal quiet time 
note overlap apprenticeship studies 
significant pattern accepted senior project managers going apply 
pair programming example expert legitimate peripheral participation line sight hearing access 
expect learning occurs pair programming significant merely learning new tool usage programming language idioms 
expectation matches hand reports practitioners 
statistical confirmation pair programming exclusively web programming class university utah taught second author 
class consisted familiar programming web programming languages tools 
majority students wysiwyg web page editors prior class 
eleven week semester students learned advanced html javascript active server page scripting microsoft access sql activex commands 
cases statements languages program listing 
unusual students produced programs minimal questions teaching staff 
students queried reasons independence anonymous page survey day class 
wrote partner class agreed statement learned active server pages faster better working partner attribute part result enhanced problem solving pairs described part enhanced pair learning 
team building communication arrived saw sight bill didn team random collection bright talented individuals didn 
didn sit near 
didn 
scene weekly staff meeting talk pair programming 
benefits pair programming enumerated pause pair programming mandatory 
production code written partner 
awkward silence descends 
eye glances exchanged don think going 
need write code partner isn available 
find 
goals spread knowledge 

available glad 
really push keyboard away wait 
silence paired sessions went smoothly 
sessions awkward 
communication serial parsimonious 
handheld guys third wheel 
encouraged developers think loud ward cunningham calls reflective articulation 
trick 
began just take turns coding 
week noticed remarkable phenomenon 
developers talking 
people 
really appreciate 
anyway noticed having real conversations 

began enjoy trust 
weeks real team 
interview files cockburn psychology computer programming written years ago respectively replaced topic teamwork 
extreme programming crystal light methodologies adaptive software engineering strengthened attention team building communication 
cockburn goes farther argues order project drivers side issues 
pair programming contributes ways 
people learn illustrated quote 
university utah study pairs ran insurmountable personality clash 
industry hand comments indicate personality clashes occasionally happen sufficient pressure motivation people learn 
interviews people reveal pattern similar extreme 
having people learn 
learning means people team share problems solutions quickly hidden agendas 
teamwork enhanced 
pair learn ways communicate easily communicate 
raises communication bandwidth frequency project increasing information flow team 
rotating partners increases information flow farther 
increase team effectiveness pair programming teams report 
know statistical study effects 
staff project management project management benefits improved staff skills reduced staff risk 
project team benefit increased learning 
course project skills team members increase programming software design 
page risk losing key programmers reduced multiple people familiar part system 
referred truck number circles people hit truck quit project 
worst answer 
having knowledge dispersed team increases truck number project safety 
summary significant benefits pair programming mistakes get caught typed qa test field continuous code reviews defect content statistically lower continuous code reviews designs better code length shorter ongoing brainstorming pair relaying team solves problems faster pair relaying people learn significantly system software development sight learning project ends multiple people understanding piece system people learn talk giving better information flow team dynamics people enjoy 
development cost benefits expected approximately 
shorter expensive testing quality assurance field support 

salomon distributed psychological educational considerations 
learning doing social cognitive computational perspectives ed 
pea brown 
cambridge cambridge university press 

constantine constantine 
yourdon press computing series ed 
yourdon 
englewood cliffs nj yourdon press 

beck extreme programming explained embrace change 
reading massachusetts addison wesley 

williams strengthening case pair programming ieee software 
submitted ieee software 
online www cs utah edu papers 
pdf 
williams kessler 
collaborative software process 
international conference software engineering 
submitted consideration 
limerick ireland 
online www cs utah edu papers icse pdf 
case collaborative programming communications acm 



humphrey discipline software engineering 
sei series software engineering ed 
freeman musa john 
addison wesley longman 
humphrey personal software process 
addison wesley 

flor hutchins 
analyzing distributed cognition software teams case study team programming perfective software maintenance 
empirical studies programmers fourth workshop 
ablex publishing 

fagan advances software inspections reduce errors program development 
ibm systems journal 


johnson reengineering inspection formal technical review communications acm 



lave wenger situated learning legitimate peripheral participation 
new york ny cambridge university press 

weinberg psychology computer programming silver anniversary edition 
new york house publishing 


new york house publishers 

cockburn crystal clear human powered software development methodology small teams addison wesley preparation 
online members aol com crystal clear 

adaptive software development house 

cockburn characterizing people non linear order components software development international conference software engineering 
submitted consideration 
limerick ireland 
online humans technology technical report tr members aol com papers nonlinear nonlinear htm 
page page appendix expert project management pattern slightly abbreviated members aol com papers htm thumbnail novices hard time developing habits 
keep expert hearing distance 
indications novices learning techniques habits 
working project experts private offices novices shared workspace 
counter indications regulations prevent putting expert novices shared workspace 
expert poor communication skills habits don want replicated 
expert spends time activities disturb novices talking phone matters 
forces need get done expert novices 
want novices learn expert habits worth learning 
afford expert disturbed bit novices learn habits 

don want turn expert full time teacher 
people hesitate disturb boss expert phone call knock door 
put expert leader workspace novice workers novices learn watching listening expert usual 
resulting context effect related patterns novices pick expertise hopefully habits expert 
expert disturbed set ways conventions create personal quiet time 
expert watch novices simply delegate problems expert 
people room 
questions lower expert productivity 
people room create conversations making hard concentrate 
training day care says experts spending time mentoring novices 
put expert charge novices develop system 
covers dangers having expert try teach designing 
expert expert responsible teaching novices 
situation set novices see hear expert works accordance principles 
pair programming non conflicting possible partner pattern expert 
bring expert person person pair people rest people workspace 
examples thomas watson jr ex ceo ibm went serious father ceo ibm assigned sit corner senior vp desk months 
months watch listen successful executive ordered days handled people 
unusual clear example expert 
team leader junior designers design graphics workstation private office 
weeks felt uncomfortable distance team moved desk floor designers 
distractions great main focus teaching designers able discuss timely casual basis 
capable eventually reducing time spend giving skills project 
lead programmer worked room novice programmers 
bad habits idea doing design orderly way talking programmers design program change code middle night 
knew morning program left 
months novices produced bad designs refused design carefully 
attitude ideal 
left project consultant took place sharing room 
deliberately discussed designs desk overhear 
months novices started talking drawing designs soon skilled designing programming 
page 
