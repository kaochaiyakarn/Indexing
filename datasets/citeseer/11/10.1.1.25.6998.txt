visualization large nested graphs navigation interaction greg parker glenn franck colin ware faculty computer science university new brunswick box nb 
canada omg ca parker systems visualizing large information structures graphics view networks nodes arcs represent data 
understand large structures necessary show small scale large scale structure 
called problem focus context 
distortion rapid zooming elision multiple windows techniques developed provide focus context single representations 
review techniques argue visualization number advantages 
system called nv developed investigate visualization understanding structure large computer programs 
nv system visualizing large nested graphs interactive graphics 
tested graphs containing nodes relationships 
describe nv design philosophy 
basic navigation facilitated set widgets rapid scaling interactive elision 
experimental features include animations called snakes trace dynamic software behavior 
parker common way visually represent information structures network nodes arcs technically called graph 
nodes represent entities procedures modules objects object oriented computer program arcs represent relationships entities method usage inheritance 
common graphs kind include entity relationship diagrams database modeling myers diagrams represent module relationships software call graphs showing calling relationships procedures inheritance graphs showing pattern inheritance object oriented code data flow diagrams systems modeling 
shape color nodes arcs altered represent different kinds entities different kinds relationships 
generally diagrams type scale easily 
limit reached entities relationships diagram tangled incomprehensible web 
traditional solution problem modularize diagram create subsidiary diagrams different pages 
number experimental systems developed interactive graphics help solve scale problem switching pages 
system nv system 
shows sample view taken system 
parker 
example graph displayed 
data represents part software system analyzed year related date problems 
nv uses representation rapid navigation techniques nested graphs help understand large information structures 
currently applied projects software reverse engineering particularly year diagnosis 
parallel existence research lab investigating techniques animation help look temporal behavior computer programs superimposed software structure 
describing basic features allow nv help understand large information structures continue describing snakes 
snakes method developed understanding multi threaded applications 
background problem viewing large graphs focus context 
important provide information large scale structure graph time allowing users drill arbitrary level detail 
discussion parker consider techniques solve focus context problem distortion rapid zooming elision multiple windows viewing 
distortion techniques number techniques developed spatially distort graph 
distortion gives room designated points interest decreases space objects away points 
techniques designed single focus hyperbolic lens 
allow multiple foci simultaneously expanded 
methods simple algebraic functions distort graph distance focus 
alternative method called intelligent zooming uses techniques graph layout dynamically resize reposition parts graph selected points interest note simple rescaling image described section 
basic concept distortion techniques spatially expand currently interesting expense providing focus context 
rapid zooming techniques rapid zooming techniques large information landscape provided part visible viewing window instant 
user ability rapidly zoom points interest means focus context simultaneously available user rapidly smoothly move focus context back 
may allow user cognitively integrate information 
pad pad systems designed concept 
note number techniques loosely referred zooming 
include changing camera focal length moving camera object scaling object 
result cases part scene occupies larger area viewing window 
term zooming refer technique results effect regardless actual algorithm 
parker mackinlay developed rapid navigation technique scenes called poi navigation 
method moves user point interest selected surface object 
time viewpoint viewer brought point perpendicular surface 
elision techniques elision technique parts structure hidden needed 
typically achieved collapsing node contains sub graph single node 
intelligent zoom system node opened expands reveal contents simultaneously adjusting entire graph space expanded node 
number nodes expanded way arbitrary depth graph continuously adjusted creating space objects interest correspondingly reducing size parts graph 
rescaling elision hand hand 
elision idea applied text graphics 
generalized fisheye technique viewing text data detail shown distance focus interest increases 
example viewing programming code full text shown focus away subroutine headers visible code internal subroutine elided 
elision methods eliding blocks structure single compact representation provides context 
clearly kind technique works nested graph structures entire sub graphs collapsed representative nodes 
parker multiple windows common especially mapping systems window shows overview show expanded details 
pad multiple windows called portals portal individually zoomed 
problem multiple window techniques details disconnected overview difficult see zoomed details belong overview window 
solution lines connect boundaries zoom window source image larger view 
interactive visualization visualization provides focus context operation linear perspective 
objects seen foreground detail away 
changing viewpoint foreground focus changed 
small part context information typically visible part visible somewhat arbitrary unrelated current focus 
layout scene critical determining context visible 
evidence larger structures understood better 
cone trees allow display tree structured graphs showing children node form cone subsidiary nodes 
claimed nodes may cone trees visual clutter clearly contained layout 
experimental evidence shows substantially larger graph structures viewed 
motion parallax depth cue allows see structures rotated appears especially important 
parker 
previous major done visualization information networks semnet project fairchild 
project representation allow users visualize large knowledge bases nodes arcs dimensional space 
heard informally semnet project regarded practical useful system developers opinion reasons published 
design space systems visualizing complex relational structures large 
create usable visualization system requires dozens design decisions badly may move system threshold usability 
case graphics performance increased dramatically semnet project interactive performance critical utility systems 
nv new visualization solution believe crossed threshold usability 
believe nv system deal tens thousands entities nested non nested relationships 
problems navigation layout semiology addressed order produce effective solution 
briefly consider issues broad terms nv solution 
spatial navigation 
graph visualization operations available translation scaling point interest rotation point orthogonal screen degrees freedom 
rotations commonly 
pad main operations selection points interest zooming scale changes 
intelligent zooming navigation consists entirely opening closing nodes spatial positioning handled automatically 
space setting viewpoint view direction degree freedom operation 
scaling moving viewpoint point scale isomorphic transformations 
constrain direction virtual environment direction screen reduced degrees freedom 
parker zooming works navigation means selecting points interest moving viewpoint manner results motion similar navigation 
basis poi navigation method 
layout 
problem layout critical visualization graphs 
nodes randomly placed information simply appear confusing 
layout graphs may easier 
expended laying graphs ways minimize arc crossings 
dynamic environment arc crossings important arcs intersect 
perceived intersecting arcs motion parallax shading stereoscopic disparities enable distinguish arcs lie different depths 
possible extra spatial dimension encode semantic information 
example koike produced layout modules message passing system third dimension time axis display message sequencing information 
semiotics 
semiotics discipline governs representation information means symbols 
presents challenge objects constructed icons equally understandable viewpoint 
despite problem may important advantage solution 
object central metaphor modern coding 
encouraged think blocks code physical objects defined boundaries 
object concept understood broad sense goes object oriented programming 
reasonable claim graphical entity shaded viewed perspective object representation usually simple rectangle solution better matches central metaphor 
solution problems navigation layout semiotics nv developed past years reached believe state practical utility 
system full scale working solution 
parker 
object oriented program represented graph 
nodes represent files arcs show inheritance function calls file inclusion relations differentiated color 
image rotation widget bottom scene stationary position 
second image shows graph user rotated graph slightly axis 
nv displays nested graphs nv data visualization tool viewing large relational information structures 
designed problems multiple entity types exist multiple relationships 
consider specific example case object oriented software entities consist variables methods objects object libraries see 
relationships consist inheritance method uses part relationships higher level architecture including formation object libraries 
information represented kind complex graph weighted typed nodes arcs 
nodes arcs weighted size things represent metrics 
entities shown boxes colored type graphics drawn surfaces 
relations lines connecting nodes 
parker node contain entire sub graph nested arbitrary depth 
nodes open closed elided 
open contents visible 
closed size reduced sub graph hidden 
size node function number size nodes internal sub graph 
nodes contain sub graphs connected nodes closed fat arc appears represents nested arcs 
thickness arc depends number arcs represents 
nv relies fast interactive graphics runs sun ultra creator graphics sgi indigo extreme better 
navigation exploration nv nv designed techniques navigation 
elision widgets rapid zooming non spatial navigation section describe techniques 
early development nv explored stereoscopic viewing fish tank vr viewing navigational aids 
comment experiences give reasons find viewing modes valuable 
elision information hiding elision critical practical application nv 
system capable real time interaction showing nodes arcs simultaneously 
performance reduced point interaction difficult 
large structures visualized nested 
essential principle allows impose tree parker forest structure graph purpose 
fortunately examples contain relationship nest sub graphs simplify diagram 
nesting structure usually inherent way software organized directories libraries modules example shows structure line program represents part digital switch nested levels deep hierarchy modules sub modules 
top level major entities move structure rarely entities nested node 
largest examples investigated find quite manageable 

structure line code program undergoing major reorganization 
code broken major sections opened 
nodes sections contain nesting deep levels 
arcs sections link duplicated modules previous locations new ones 
duplicated effort clean system placing highly connected entities section 
parker widgets basic spatial navigation nv combines widgets scaling 
widgets illustrated 
widgets objects rendered part scene 
example rotation widget bottom screen curves scene extremes 
widgets allow scene rotated translated scaled velocity control position control 
translation widgets rotation widgets scale widget 
translation widgets translate graph directions rarely navigation done rotation rapid scaling 
rotation widgets allow rotation vertical axis tilting horizontal axis 
scale widget scales entire graph center screen 
widgets handles 
triangle handle velocity control 
selected dragged graph structure moves velocity proportional displacement neutral middle position 
middle mouse button held time widget locks current velocity 
maintain constant rate rotation example 
rectangular handles allow direct manipulation scene 
handles selected scene moves amount proportional displacement 
effectively handles provide way drag graph position 
parker 
widgets navigate graphs 
widget parts creates single type motion graph 
navigation rapid scaling achieved method similar poi navigation different principles 
user positions cursor object middle mouse button 
causes scene scale long button held 
double click followed prolonged hold allows user scale scene 
zoom operation applied entire graph structure scales middle screen scene simultaneously translated selected object moves center screen 
scale translation algorithm follows middle mouse button depressed scale scene center screen translate scene distance object center screen parameters assuming frame rate frames second object moved distance center screen seconds graph scaled factor 
rapid zooming key combining widget controlled interaction rapid zooming having common center types operations 
nv point center workspace center screen integrate zooming widget operations see 
scale object scaled simultaneously moved central point 
subsequently scene rotate roughly center object see 
parker 
technique rapid zooming 
turntable center scene represents vertical axis rotation center scene 
scaling takes place point middle axis objects zoomed translated point 
user selects object holds middle mouse button scene scaled workspace center time scene translated center point selected object moved midpoint scene 
vertical axis rotation widget passes point 
order zoom user double clicks middle mouse button holds 
button depressed graph scaled scene center point 
case scene translate simply gets smaller 
non spatial navigation nv allows exploration data ways spatial 
methods available basic system transitive queries layout 
parker queries key problems software re engineering partitioning existing legacy code way modular 
part task involves finding domain influence various entities variables procedures 
nv dynamic querying capability node selected relationships explored highlighting incoming outgoing arcs designated type 
example wish find procedures call particular procedure pick node represents particular procedure select procedure call relation 
move slider arcs representing calling relation connected highlighted node highlighted 
moving slider highlights entities call designated procedure indirectly arcs away 
slider moved relation applied transitively revealing effect breadth search graph procedures affected selected node changed way 
layout graph layout normally thought data exploration technique 
nv powerful tool understanding information structures 
basic method weight certain kind relation heavily example inheritance oo program applying layout 
layout performed particular structure visually prominent 
layout algorithms nv described detail 
briefly summarize layout methodology describe data exploration tool 
nv designed create kind synergy manual layout automatic layout 
synergy powerful tool understanding complex structures 
automatic phase nv layout stage process applied recursively nested structure 
note nested graph parker divided series vertical layers enforces tree forest structure graph 
nested sub graph steps followed assign nodes layers graph 
done sub steps discover root nodes 
find disjoint clusters graph root nodes assign nodes vertical layers depending distance root cycles broken part process 
clusters placed varying levels graph number nodes layer graph 
lay graph layer simulated annealing process 
nodes dragged position sum weighted arc forces forces repelling unconnected nodes 
ways layout algorithm tuned represent different aspects structure 
layering done kind arc example structure represented object oriented software inheritance uses relationship function uses variable layering 
relationships ordered inheritance arcs primarily nodes connected inheritance layered connected uses arcs 
secondly annealing process different kinds relationships arc types weighted differently depending importance 
continue example inheritance considered important relation heavily weighting inheritance cause nodes cluster inheritance inheritance structure clearly revealed 
shows layouts graph representing software code written natural programming language 
layout left shows effects assigning lower priority order arc type fetch graph graph understandable fetch arcs wind spread clusters parker primarily created smaller arc groups 
image shows results ordering fetch arcs structure partitions cleaner structure understandable 

effects ordering arc types layout 
graph fetch relation numerous arc type 
image left layout done fetch relations low priority results spread graph 
image right fetch arcs ordered higher priority types results coherent structure graph 
fish tank vr stereoscopic viewing early stages project investigated fish tank vr viewing modes nv 
method producing convincing representation virtual object stereoscopic viewing glasses head position tracking 
head position information perspective geometrically correct user actual viewpoint 
done carefully convincing virtual object created vicinity monitor 
studies shown complex graphs perceived fish tank vr viewing employed abandoned mode viewing reasons parker motion parallax comes head movement appears important component fish tank vr allows graph larger viewed 
get motion parallax simply rotating graph virtual turntable proven just effective 
stereoscopic viewing allow larger graphs examined larger 
gain offset cost able display half number nodes arcs update rate resolution 
addition ghosting artifacts display lower quality 
possibility eye strain may result extensive stereoscopic viewing 
ultimately balance may change 
cost stereo head tracking negligible graphics fast required nodes arcs displayed smooth hz update display useful display option 
imposing behavior nested structure major reason imposing dynamic behavior top nv graph structure provide outlet viewing execution traces 
execution traces contain calling sequences various threads application 
systems currently exist debugging multi process software attempted debug software animating execution traces code structure nested environment 
complications overcome execution animation possible stem nested characteristics nv 
snakes major issues surrounding implementation dynamic behavior visually represent executing process 
previous systems parker visualize messages parallel virtual machine simple lines represent executing entities interaction 
irrespective underlying software structure lines may indicate process activity quite satisfactorily different approach taken superimposing animation top structure 
uses represent various nodes parallel machine 
messages shown small animations resembling beads flow nodes 
beads potentially outline execution sequences intuitively better message packets execution threads 
developed novel construct call snake visualize execution threads 
highlighting entire arc snake shown variable number head shapes sizes animates arc leaving tail stretching 
purpose tail arcs length guide user attention historical account process 
allows user piece events just unfolded 
various head shapes represent process states types processes messages 
example cylindrical head calls cone shaped head represent returns 
cones represent processes cylinders represent messages 
snakes intended represent processes snake tail represent message 
way messages exchanged processes represented addition execution threads 
parker 
snake shown cone shaped head ability bend nodes indicate execution calling sequences 
multiple actor environment snakes nv environment comes significant increase complexity graph interaction management 
consider real world parallel night watchman roaming hallways unoccupied office building 
lone human user controlling entire scene interaction quite simple 
watchman rounds various doors opened light sources turned 
area doors promptly shut lights switched 
office building nested graph type interaction actor type environment quite obvious rules quite simple 
snakes implemented take advantage facilities human operator manipulates mouse interactions 
snakes considered automatic versions human user consequently transformed nv graphs multi actor interaction networks 
consider office building analogy busy 
people factors consider interacting environment 
example human courtesy implies doors closed parker faces just lights switched room full unsuspecting people 
rules implemented nv environment metaphorically keep peace numerous possible actors interacting graph 
contrasts single thread simulation multi thread simulation 

single thread trace image contrasted multi threaded trace second image 
second image shows amount activity increases multiple snakes introduced environment 
consider effect snake closing node actor 
second actor human user action may result certain degree annoyance frustration 
user may intentionally arranged graph certain nodes remain visible 
example user may opened nodes representing files internal classes visible 
visibility classes may essential contextual clue increases comprehensibility trace 
snake closes pre opened nodes setup hopelessly destroyed parker context lost 
interruption normal trace flow caused trace abort simple result restoration initial graph state 
second actor snake potential major disaster 
illustrates potential situation 
snake left closes large node right tail reaches node snake inside node trapped 
arcs top trying animate collapsed 
trying travel collapsed arcs necessarily dire consequences system stability 
cope situation snake forced reopen closed closing node result disturbing visual 
possibility snake may close node top snake just come alive current time index patiently awaiting particular instance time continue destination 
snakes consider active actors scene actors enter graph awaken 

trapping snake inside node 
snake left image closes node right tail completely left adjoining arc snake right may trapped inside 
address problem miscommunication actors resulting closure nodes node scene equipped actor counters 
parker counter handles snakes handles human user 
actor requests opening node counters incremented 
conversely actor requests node closed counter decremented 
counters act analogously semaphore provide mutual exclusion competing processes multi process environment 
long node actor counter greater zero node closed 
soon actor inside node decrements counter zero close requests granted 
guarantees actor adversely affected closing nodes 
human users require special attention 
requests influence counter snakes 
counter incremented decremented numerous times user 
consider situation snakes entered node incremented actor counter 
human user requests closure node consecutive times node comply 
probability situation arising quite high bit unnatural request closure system obey user probably keep trying close node 
address issue second counter placed node 
counter simply acts flag indicate user examining contents node question 
node close snake counter user counter zero 
automatic viewpoint control large data sets visualized alternatively user scaled display possible significant portion nv graph may occluded border viewing window 
undesirable side effect inevitability animation located clipped regions graph certainly go unnoticed user 
user may realize activity commenced graph completely oblivious whereabouts 
remedy problem automatic camera controls called automatic viewpoint controls implemented 
realize type control user viewpoint latched head snake enabling direct user attention various locations graph 
parker essentially user viewpoint performing execution trace synchronism snake 
rapid zooming interface developed navigation nv user viewpoint automatically manipulated 
automatic viewpoint control deal destinations currently visible scene 
problem addressed nv querying support added locate nodes easily 
scene zoomed front facing corners destination visible 
departure destination view scene zoomed destination node 
currently closed snake open destination node scene zoomed 

technique automatic camera control 
image shows user viewpoint departure node 
image shows scene zoomed user see departure destination nodes 
final image shows scene zoomed destination node 
thing automatic controls need know snake destination 
method provides user global graph context addition focus 
shows sequence camera motions occur track snake departure node destination node 
frame shows departure node 
second frame illustrates position scene scaled destination visible 
frame shows final position scene destination origin 
parker representing state information order implementation debugging aid information provided complement actual calling sequence 
example user may wish view calling parameters snake reached destination 
user wishes see process identification numbers sending receiving nodes exchange pvm packets 
ideally implementation provide generic way view type extra information retrieved data extraction process 
attempts provide extra information state execution thread sound 
snake depending state execution thread represented emit different sound 
example snakes performing calling sequences emit noise snakes performing returns humming noise 
unfortunately sound eventually abandoned quite annoying 
sound process active graph combined numerous snakes quite disturbing confusing 
order display execution trace information nv data probes incorporated system 
snakes contain optional information attached nodes destination node lists 
snake arrives destination informs node message attached data probes 
probe node informs information snake wishes display 
node passes data nesting levels probes hierarchy 
allows user monitor information passed sub hierarchy attaching probe parent 
shows data probe just received calling parameters snake seen passing node 
parker 
data probe attached node just passed message 
probe displaying data contained message 
reviewed number techniques available dealing problem navigating large amounts data maintaining focus context 
techniques sense additional methods available 
nv chose distortion methods intelligent zoom favor added perspective combined rapid navigation 
allows maintain scene consistency single window interface 
deal size graphs nv information elided 
requires significant scaling scene order view data 
main navigation technique employ involves rapid zooming manual automatic 
zooming operates standard interface provided set widgets 
important allow consistent movement easy see automatic zooming affects scene example widgets reflect translation scale changes 
snakes travel graph guide control camera important realize position changes relate graph 
parker inherent understanding graphs essential navigation facilitate extensive layout capabilities 
capabilities complemented providing flexible control appearance objects display 
varied meaningful graphical display graph distinctive information landscape familiar user time 
enhanced navigation techniques employed data comprehensible envision number practical software engineering applications nv 
include reverse engineering software partitioning training debugging 
currently major effort focussed preparing nv commercial software reverse engineering particularly year remediation 
major problem area partitioning legacy code subsections identified isolated remedial action 
building interface software repository partnership formal systems 
fsi 
code structure reverse engineered means fsi refine parsing system 
part process placed oracle database 
nv provides user interface large structures result performing various queries database 
applying clustering layout techniques partition code structured hierarchies segregated partitions 
addition interactive querying capability possible trace sphere influence individual variables code structure 
separate project carried collaboration nortel looking distinct applications 
software training 
take individual programmer months get approximate mental picture large body software 
programmers year may brought projects training costs parker substantial 
nv help new programmers understand architecture code scope 
code management 
working tools allow version control information superimposed software structure 
especially useful critical stages example code undergoing major re organization distinct bodies code merged 
addition clone identification software identify duplicated sections code 
allow software engineers organize software rational structure 
execution trace visualization 
nortel interested snakes demonstrate dynamic program behavior employees 
detailed traces software execution digital switch aid developers allowing visualize complex interactions low level structures having examine source code 
acknowledgments acknowledge assistance laval david tim dudley nortel providing data advice support 
ibm toronto labs provided inspiration early stages project 
grateful ronald hunter help insights applications software reverse engineering 

bartram dill dyck ho 
contextual assistance user interfaces complex time critical systems intelligent zoom 
proc 
graphics interfaces 
parker 
bederson hollan 
pad zooming graphical interface exploring alternative interface physics acm uist proceedings acm press 
card robertson mackinlay 
information visualizer information workspace 
chi proceedings 

deering high resolution virtual reality 
proceedings siggraph 
computer graphics 

dill bartram ho continuously variable zoom navigating large hierarchical networks 
ieee conference systems man cybernetics san antonio 

fairchild furnas 
semnet dimensional graphic representations large knowledge bases 
cognitive science applications human computer interaction 
ed raymond guindon lawrence erlbaum 


furnas 
generalized fisheye views proceedings chi acm press 

ware 
distributed program visualizer 
th international conference high performance computers 
cdrom proceedings carleton university press ieee canada press 
ottawa june 

koike 
role spatial dimension software visualization acm transactions information systems 
parker 
lamping rao pirolli 
focus context technique hyperbolic visualizing large hierarchies 
acm chi denver 

mackinlay card robertson 
rapid controlled movement virtual workspace 
siggraph conference proceedings 
computer graphics 


space presentation emphasis techniques visualizing graphs 
proc 
graphics interfaces 

sarkar brown 
graphical fisheye views graphs proc graphics interface 

schaffer greenberg bartram dill roseman navigating hierarchically clustered networks fisheye full zoom methods 
acm transactions chi 

sunderam geist dongarra manchek 
pvm concurrent computing evolution experiences trends 
parallel computing 

ware lewis 
drag mag image 
acm chi conference companion 
chi videotape 
ware franck 
evaluating stereo motion cues visualizing information nets dimensions 
acm transactions graphics 

parker 
ware franck dudley 
layout visualizing large software structures 
visual second international conference visual information systems san diego nov 
parker 
