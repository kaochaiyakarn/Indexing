specification real time hybrid systems rewriting logic peter jos meseguer computer science laboratory sri international menlo park usa dept informatics university bergen norway explores application rewriting logic executable formal modeling real time hybrid systems 
give general techniques systems specified ordinary rewrite theories show wide range real time hybrid system models including object oriented systems timed automata hybrid automata timed phase transition systems timed extensions petri nets expressed rewriting logic quite naturally directly 
rewriting logic executable supported language implementations approach complements property oriented methods tools suited execution purposes 
relationships timed rewriting logic approach wirsing studied 
explores application rewriting logic executable formal modeling real time hybrid systems 
general conceptual advantage logic specific model different models specified logic terms means possibly awkward translations fixed model 
advantages rewriting logic semantic framework concurrency models amply demonstrated see surveys 
shows supported darpa rome laboratories contract darpa nasa contract nas office naval research contract national science foundation ccr 
supported norwegian research council 
preprint submitted elsevier preprint april number known models real time hybrid systems likewise naturally specified rewriting logic framework 
rewriting logic specify different formal models systems unified logic 
rewriting logic executable supported language implementations models executed formally analyzed variety ways 
contrast known formal methods tools real time hybrid systems kronos step uppaal 
model checking tools require user specify system formal properties system satisfy 
tools try check system satisfies property 
tools suited directly executing system 
said hytech takes hybrid system description parameters unspecified returns concrete values parameters system satisfy property 
course model checking tools important strengths 
point executable specification methods tools complement strengths new ways 
see rewriting logic complements specifications temporal logic concrete automaton ones think covering intermediate level substantially help bridging gap property oriented specifications actual implementations providing ffl precise mathematical model system initial model specifications proved correct means inductive theorem proving model checking techniques ffl support useful techniques automated semi automated formal reasoning analysis rewriting logic equational logic levels coherence confluence strategy formal analysis ffl support executable specification rapid prototyping symbolic simulation ffl possibility generating correct implementations specifications theory transformations code generation techniques 
show ordinary rewrite theories sufficient specify real time systems natural way 
essentially need include specification time data type satisfying appropriate equational properties 
useful highlight real time aspect making explicit duration information rewrite rules 
formalize idea section means real time rewrite theories show adding explicit clock reducible ordinary rewrite theories way preserves expected properties 
naturalness specification method smooth integration rewriting logic support object oriented specification explored illustrated examples section address question generally naturally rewriting logic express variety real time hybrid system models 
show detail objectoriented real time systems wide range models including timed automata hybrid automata timed phase transition systems timed extensions petri nets expressed rewriting logic quite naturally directly 
important research contribution exploring application rewriting logic real time specification wirsing timed rewriting logic trl extension rewriting logic rewrite relation labeled time stamps 
trl shown suited giving object oriented specifications complex hybrid systems steam boiler applied give semantics sdl telecommunications specification language 
fact rewriting logic object oriented specifications maude language natural extension trl object oriented specifications timed maude 
approach taken different 
mentioned argue real time systems specified ordinary rewriting logic reasoning behavior require special inference system proposed trl 
special notation highlighting real time aspects provided real time rewrite theories show essentially regarded syntactic sugar 
conceptual advantage remaining simpler theoretical framework practical advantage able existing language implementations rewriting logic execute specifications 
conceptually practically useful study relationships approach trl 
section show map logics trl gamma 
sending trl specification corresponding rewrite theory way logical entailment preserved 
translated theory general prove additional sentences 
due intrinsic conceptual differences formalisms analysis reveals 
prerequisites rewriting logic maude assume familiarity basic concepts rewriting logic 
recall basic notions shall 
rewriting logic specifications rewrite theories form sigma sigma equational theory set labels collection labeled rewrite rules form gamma 
gamma 
implicitly universally quantified variables appearing sigma terms equational theory sigma assumed order sorted 
set sorts comes equipped partial order relation interpreted subset inclusion model furthermore operation symbols subsort overloaded example addition symbol naturals integers rationals 
overloaded operators required yield result arguments regardless overloaded operator applied 
frequent initial model construction tr associated rewrite theory rewrite proofs ff gamma 
derivable rules rules deduction rewriting logic equated modulo natural notion proof equivalence 
tr understood order sorted sense sort associated category arrows ff gamma 
equivalence classes proofs ground terms sort arrow composition corresponding application transitivity rule 
text maude notation specific rewrite theories 
part notation self explanatory 
case object oriented modules explain syntax basic assumptions section 
time models real time rewrite theories specifying equationally general requirements models time consider section propose general notion real time rewrite theory consisting ordinary rewrite theory rewrite rules affecting system associated time duration expressions section 
show real time rewrite theories form category section reduced ordinary rewrite theories adding explicit clock global state way preserves expected properties section 
finish section discussion issues specification techniques real time rewrite theories section 
time models time modeled abstractly commutative monoid time additional operators gamma delta monus satisfying maude theory 
fth time protecting bool sort time op time op time time time assoc comm id ops time time bool op gamma delta time time time vars time ceq ceq eq gamma delta ceq gamma delta eq true eq false eq ceq true ceq gamma delta theory example proved relation partial order time true exists unique gamma delta simulation executable specification purposes interested computable models theory time means operations computable 
bergstra tucker theorem models finitely specifiable initial algebras set church rosser terminating equations 
example nonnegative rational numbers specified model time adding subsort rat specification rationals extending order monus operation obvious way 
similarly real algebraic numbers standard order computable finite algebraic specification church rosser terminating equations 
note just constructive version real numbers yield computable data type equality order predicates constructive reals computable 
examples need extend time domain new value require time domain linear 
theory gives specification time domain extended value 
fth time including time sort time time op time op time time bool op gamma delta time time time op time time time assoc comm id var time eq true linear time specified theory fth ltime including time op min time time time comm vars time ceq ceq min theory extended time value follows fth ltime including ltime time op min time time time comm var time eq min notation symbols denote time values denote variables sort time domain 
real time rewrite theories recalling notion theory morphism equational theories define real time rewrite theories specify real time systems rewriting logic contain duration information rules 
rules divided tick rules model elapse time system instantaneous rules model change approximated take zero time 
having tick rule gamma 
lead rewrites gamma 
rewrites time elapses part system consideration 
ensure uniform time elapse introduce new sort system subsorts free constructor state system intended meaning ftg denotes system state uniform time elapse ensured global state form ftg tick rule form ftg gamma 
ft definition equational theory morphism sigma 
sigma consists map sorts sigma sorts sigma mapping sending function symbol sigma sigma term sort set variables contained set axiom holds straightforward extension terms equations condition definition real time rewrite theory oe tuple oe sigma rewrite theory ffl oe equational theory morphism oe time 
sigma time theory defined section ffl time domain functional ff gamma 
rewrite proof term sort oe time ff equivalent identity proof ffl sigma contains designated sort usually call state specific sort system subsorts operator state system satisfies non trivial equations ffl assignment term sort oe time rewrite rule form gamma 
terms sort system 
variables ordered assignment 
alternatively understood assignment 

give definition loose semantics rewrite theories 
real time rewrite theories defined similar way initial semantics setting 
notation write gamma 
rule sort system duration equals oe rule written gamma 
write time oe oe oe respectively oe time oe oe 
call rules form global rules 
global rule tick rule duration different oe instances variables instantaneous rule 
rules form called local rules act system system components 
instantaneous 
intuitively instantaneous rules take zero time 
total time elapse ff rewrite ff ftg gamma 
ft sort system defined sum time elapsed tick rule application ff easily extracted proof definition oe real time rewrite theory sigma time denote time domain sigma time oe viewed monoid category single object time values arrows usual way 
time extraction functor tr system time gives total time elapse ff proof ff gamma 
ground terms sort system defined follows ffl oe term seen arrow tr system ffl fffg oe proof term top operator constructor ffl ff ff system rule form ff gamma 
ff gamma 
proofs ffl ff fi ff oe fi proofs ff fi 
definition depend choice representative proof terms 
ff fi equivalent proofs terms sort system real time rewrite theory oe ff fi 
real time rewrite theory computation non extensible sequence gamma 
gamma 
delta delta delta gamma 
infinite sequence gamma 
gamma 
delta delta delta step rewrites gamma 
ground terms starting initial term sort system 
noted model time elapse explicitly rewrite rules requirement total time elapse computation infinite needed 
time elapse totally specifier allow terminating computations infinite computations finite total time elapse 
category real time rewrite theories notion theory morphism called theory interpretation real time rewrite theories plays important role 
give definition theory morphism real time rewrite theories loose semantics preservation durations rewrites 
morphisms properties initial models theories morphisms having restrictive requirements relationships durations rewrites defined similar way 
defining theory morphisms ordinary rewrite theories 
definition rewrite theory morphism rewrite theory sigma rewrite theory sigma consists ffl equational theory morphism sigma 
sigma ffl map gamma 
labels rule gamma 
rule gamma 
renaming variables 
rewrite theory morphisms compose expected way define category rwth rewrite theories 
definition real time rewrite theory morphism real time rewrite theory oe real time rewrite theory oe rewrite theory morphism ffl oe ffi oe ffl maps designated sort states designated state sort maps sort system leaves constructor unchanged ffl preserves duration tick rules sense rule sort system easy check usual composition rewrite theory morphisms defines category real time rewrite theories objects real time rewrite theory morphisms arrows 
real time theories internalized rewriting logic adding clock state real time theory oe transformed ordinary rewrite theory losing timing information 
state clocked system form ht ri global state sort system value sort time oe intuitively supposed denote total time elapse computation initial state clock value oe definition internalizing functor category real time rewrite theories category rwth rewrite theories takes realtime rewrite theory oe rewrite theory oe sigma oe oe oe oe follows ffl sorts sigma oe new sort clockedsystem ffl operations sigma oe new free constructor system time oe clockedsystem ffl axioms oe unchanged ffl oe contains local rules sorts system rule oe hu gamma 
hu oe rule gamma 
sort system variable sort time oe list internalizing functor defined expected arrows arrow mapped coincides case condition rule contains conjunct gamma 
sort system conjunct replaced conjunct hv oe gamma 
hv condition oe fresh variable sort time oe leaves new sort operator unchanged takes label oe rule sort clockedsystem label sake simpler exposition rest assume condition rewrite rule real time theory contains rewrite conjunct sort system 
assume loss generality variable sort system introduced condition rule 
proposition mapping defines functor rwth 
proposition forgetful functor category real time rewrite theories category rwth rewrite theories defined oe map rewrite theories oe oe defined ffl mapping sort operator sigma oe clockedsystem identically ffl mapping clockedsystem system mapping operator term system ffl mapping label oe label defines natural transformation rewrite theory morphism induces forgetful functor uh sys sys opposite direction corresponding categories models natural rewrite theory morphism oe induces forgetful functor sys oe sys 
particular initial model tr sent oe system initiality oe unique oe homomorphism oe ffl takes objects arrows sort clockedsystem ffl ht ri object ht ri oe clockedsystem ffl hff fii ht ri gamma 
ht ff gamma 
ffl oe ff ff ff ht ri gamma 
ht ff ff gamma 
ffl ff fi ff fi 
map expresses essential semantic equivalence initial models real time theory oe clocked representation oe precise sense shall see ff gamma 
arrow tr system ff value sort time oe unique arrow ff ht gamma 
ht oe ri oe clockedsystem ff ht gamma 
ht oe ri ff gamma 
ff ht ri gamma 
ht arrow oe clockedsystem oe ff 
properties immediate consequences theorem oe real time rewrite theory ff gamma 
arrow tr system ground terms sort system 
value time domain unique arrow ff ht ri gamma 
ht oe clockedsystem ff ff addition oe ff 
theorem proved induction structure proof terms proving theorem step rewrites proving proofs terms sort system facts proof factorizes sequence step rewrites distributes step rewrite proofs 
theorem implies ff ht ri gamma 
ht arrow oe arrow ff gamma 
satisfies oe ff implies viewed functor oe clockedsystem 
system full faithful 
discussion discuss system specification issues techniques including time local actions tick rules rewrite strategies 
time local actions occur generally underdetermined simulation purposes may desirable observe time instantaneous local action takes place rewrite 
arrow initial model equivalence class proofs give exact time relative initial state local action applied 
example gamma 
tick ff gamma 
ff rules moment time relative ff instantaneous action took place rewrite tick ff gamma 
ff duration underdetermined 
exchange law equates equivalent proofs rewriting logic rewrite equivalent rewrite proofs ff tick tick ff representing rewrite sequences ff gamma 
ff gamma 
ff ff gamma 
ff gamma 
ff local action takes place rewrite duration time time 
sequentialization property rewrite proofs possible extract proof possible relative times certain rule applied proof 
specifying tick rules simulation system having continuous time domain tick rules general form ftg gamma 
ft mte exact form replacing mte mte denotes time advanced tick mte computes maximum time elapse permissible ensure timeliness time critical actions condition mte resp 
mte ensures time elapse may halt temporarily possible application non time critical rule rule modeling action occur somewhat arbitrarily time 
variable righthand side requires additional execution strategies instantiations surprising models behavior nondeterministic time 
allowing real nondeterminism timed behavior way may lead zeno behavior system strategy instantiate righthand side variable avoid possible 
eager lazy rules general sufficient ensure time elapse stops necessary 
ensured time tick past necessary instantaneous actions performed 
particular application rule enables lot instantaneous rules taken immediately ensured actions performed time elapses 
rule may example produce message consumed time elapses 
cases possible add conditions tick rules time elapse time critical rule enabled may considerably complicate specification 
computing enabledness condition time critical rule explicitly convenient rewriting logic notion internal rewrite strategy execution supported maude reflective features deal enabledness priority aspects simple strategy 
idea divide rules real time rewrite theory eager lazy rules restrict possible rewrites requiring lazy rules applied sequentially lazy rule may applied eager rule enabled 
intuition eager rules time critical rules taken enabled time may elapse eager rule enabled 
tick rules non time critical instantaneous rules lazy 
treatment timed petri nets section gives example convenience strategy 
notation eager strategy eager lazy rules preceded keywords eager lazy respectively 
specifying models real time hybrid systems rewriting logic section discusses variety models real time hybrid systems obtained special cases real time rewriting 
timed automata show timed automaton see specified rewriting logic :10.1.1.43.9418
omitting details initial states acceptance conditions timed automaton consists ffl finite alphabet sigma ffl finite set states ffl finite set clocks ffl set phi clock constraints defined inductively oe oe oe oe clock constant set nonnegative rationals ffl set theta theta sigma theta theta phi transitions 
tuple hs oei represents transition state state input symbol set gives clocks reset transition oe clock constraint timed word sequence tuples ha input symbol time occurs automaton starts time clocks initialized 
time advances values clocks change reflecting elapsed time state automaton change transitions passage time clocks increased amount 
time automaton changes state transition form hs oei reading input current values clocks satisfy oe 
transition clocks reset start counting time 
run ae timed automaton clocks infinite sequence ae fs gamma 
fs gamma 
fs gamma 
delta delta delta states values clock transition hs gamma oe clock valuation hv gamma gamma gamma gamma gamma gamma satisfies clock constraint oe clock gamma gamma gamma 
timed automaton naturally represented rewriting logic follows 
time domain associated constraints phi equationally axiomatized data type satisfying theory time term fs represents automaton state values clocks transition hs oei expressed instantaneous rewrite rule fs gamma 
fs oe 
addition rule tick fx gamma 
fx variables added represent elapse time 
rewriting logic translation simulates timed automaton precise sense run ae automaton defined rewrite sequence fs ff gamma 
fs ff gamma 
fs ff gamma 
delta delta delta ff equivalent proof term form fi fi possibly empty sequence tick applications fi gamma gamma gamma corresponding time values run ae 
ways modifying specification simulate behavior automaton timed words satisfying acceptance condition 
possible define computable predicate computation computation holds exist accepted timed word starting state rational numbered values clocks predicate computable finitely specifiable church rosser terminating equations defining predicate reduces emptiness problem timed automata decidable 
way obtain rewrite theory computations simulate behavior automaton accepted timed words adding condition computation rule form fx gamma 
fx including tick rule 
modular alternative way restricting rewrites simulate automata behavior accepted words encode accepting states sets states muller automata predicates rewrite theory internal strategies metalevel rewriting logic restrict application rules accepted timed words executed 
hybrid automata time model hybrid automata called just hybrid systems nonnegative real numbers 
get computable data type replace reals computable subfield rationals algebraic real numbers 
hybrid automaton tuple loc lab act inv ffl vd finite set data variables ranging data sort defining data space sigma sigma set sort consistent valuations vd ffl loc finite set locations corresponding states untimed automata ffl state space hybrid automaton loc theta sigma ffl lab set synchronization labels including label ffl act labeling function assigns location loc set act activities 
activity function sigma activity time value activity defined 
ffl inv labeling function assigns location loc invariant inv sigma ffl edg finite set transitions 
transition consists source location target location transition relation sigma synchronization label location stutter transition id id sigma state automaton change ways instantaneous transition changes entire state transition relation elapse time changes values data variables continuous manner activities current location state fl vg evolves fl time activity location 
system may stay location invariant location remains true 
invariants hybrid automaton enforce progress underlying discrete transition system 
transition taken invariant location false 
run hybrid automaton finite infinite sequence ae fl 
fl 
fl 
delta delta delta denote locations denote valuations variables vd denote time values denote activities respective locations case inv state fl obtained transition state fl specify hybrid automata rewriting logic representing sort consistent valuation fx 

term hv sort valuation representing global state fl vg hybrid automaton term fl hv ig sort system 
definition hybrid automata general restrict treatment subclass hybrid automata satisfying natural requirements 
specifically require set activities act location generated finite set ff sigma theta sigma computable functions called activity generators satisfies property set act activities location generated follows act ff sigma sigma furthermore require location activity generator computable function max stay sigma max stay denotes amount time system state hl vi stay location performing activity function violating invariant location require computable predicate inv loc theta sigma bool inv holds state violate invariant location require transition edg expressed finite number rewrite rules form fl hv ig gamma 
fl hv ig possibly containing variables 
class hybrid automata satisfying requirements represented real time rewrite theories follows 
functions max stay inv finitary equational axiomatization assumed computable 
transition hybrid automaton translation hybrid automaton contains corresponding rule fl hv ig gamma 
fl hv ig inv hv true conjunct condition added translation underlying untimed transition ensure resulting state satisfies invariant location tick rules system associate location activity generator rewrite rule form tick fl gamma 
fl max stay variable sort valuation 
note eager lazy strategies needed transition eager hybrid automaton max stay location case time advance 
due presence idle transitions hybrid automata run ae automaton computation fl ff gamma 
fl ff gamma 
fl ff gamma 
delta delta delta step rewrites rewrite translation ff timed transition systems timed transition system tts consists finite set data variables defining state space sigma sort consistent valuations variables finite number transitions sigma sigma transition equipped lower bound upper bound 
transition taken enabled time enabled time taken interval disabled time transition 
assume underlying untimed transition system specified rewriting logic valuation fx 

represented rewriting logic tuple hv sort valuation 
tts represented rewriting logic just adding state clock transition state rewriting translation term fhv hv state transition system clock value nil transition enabled transition enabled continuously time taken 
symbol nil element supersort sort time time domain satisfying equation nil nil time 
assume transition predicate enabled enabled true transition enabled state false 
assuming transition underlying untimed transition system modeled zero rewrite rules form hv gamma 
hv model transition timed system corresponding instantaneous rewrite rule fhv gamma 
fhv time variable enabled hv nil nil tick rule ensures transition time elapse past moment enabled time taken tick fv gamma 
fv nil variables appropriate sorts 
easy show computation fv ff gamma 
fv ff gamma 
fv ff gamma 
delta delta delta step rewrites ff rewriting logic specification timed transition system discrete trace hv hv hv delta delta delta possibly bounded total time elapse pairs states time values holds transition corresponding timed transition system continuously enabled minimum delay transitions continuously enabled time longer maximum time delay taken 
furthermore ff gamma gamma 
notice implicit eagerness transition due upper bound time elapse eager transition fire 
need introducing explicit eager lazy strategies 
phase transition systems phase transition systems ptss extend timed transition systems hybrid systems give brief overview representation ptss rewriting logic 
gives details translation 
intuitively pts model extends tts model letting time act valuation function ffi sigma theta sigma ffi denotes state pts time acted system state time set instantaneous transitions tts note authors expression phase transition system hybrid systems extension clocked transition system model 
case equipped upper lower bounds 
furthermore time elapse past moment enabling condition transition changes 
action time change enabling transitions assume computable function enabling change sigma takes state argument gives maximum time system proceed changing enabling transition 
global state instantaneous transitions modeled rewriting logic tts case 
global state form fhv hv valuation time value denoting long transition continuously enabled nil enabled 
functions ffi enabling change defined terms sort valuation 
tick rule ensures addition tts requirement time elapse latest moment transition taken state components updated continuous behavior corresponding clocks updated enabling condition changes tick fv gamma 
fffi nil enabling change variables appropriate sorts enabled ffi nil nil object oriented real time systems concurrent object oriented system concurrent state usually called configuration typically structure multiset objects messages 
view configurations built binary multiset union operator represent empty syntax configuration configuration configuration assoc comm id null multiset union operator declared satisfy structural laws associativity commutativity identity null subsort declaration object msg configuration states objects messages singleton multiset configurations complex configurations generated multiset union 
sort denoting configurations messages obtained adding subsort declaration object configuration operator declaration assoc comm id null objects terms sort object form ho att val att val denoting object named belongs set oid object identifiers class state having values val val attributes att att dynamic behavior concurrent object systems axiomatized specifying concurrent transition patterns rewrite rule 
example rule ho att att gamma 
ho att att defines family transition message having arguments consumed object class effect altering attribute att object generating new message 
convention attributes att example values change affect state attributes need mentioned rule 
attributes att values influence state attributes values messages unchanged may omitted righthand sides rules 
rule written ho att yi gamma 
ho wi real time object oriented systems specified means real time rewrite theories extending setting sort system operator configuration system tick rule force objects synchronize time elapse system may exhibit concurrency local transitions may occur tick applications 
illustrate style specification real time object oriented systems simple example 
example single thermostat system single thermostat system consists thermostat object zero user objects defining environment 
thermostat regulates temperature turning heater provide temperature degrees user desire possible 
temperature increases degrees time unit heater turned decreases degree time unit heater turned 
user may request new desired temperature time sending message thermostat 
assume specification includes specification time satisfies theory time sort temp denoting possible temperature values necessary operations 
sort contains constants describing state heater associated thermostat 
thermostat object attributes curr temp desired temp sort temp denoting current desired temperatures attribute heater denoting state heater 
user object object empty set attributes 
ts variables sort oid object names variable sort time variables sort temp oc variable sort configurations 
time user may request new desired temperature new temp hu gamma 
hu set temp thermostat object treat message recording new desired temperature followed changing heater state necessary read request set temp hts thermostat temp gamma 
hts thermostat temp yi thermostat turn heater time acted system current temperature exactly desired temperature plus minus degrees system change due adjustment desired temperature case current temperature may degrees desired temperature hts thermostat temp desired temp heater gamma 
hts thermostat oni gamma hts thermostat temp desired temp heater oni gamma 
hts thermostat oni tick rules model effect time elapse system ensure time elapse moment reflecting fact rule new temp applied time time elapse past moments heater state changed time elapse messages system requested temperature recorded time sent 
tick thermostat temp desired temp heater oni oc gamma 
thermostat temp oc tick thermostat temp desired temp heater gamma 
thermostat temp gamma oc gamma gamma specification expected provided initial state contains exactly thermostat object 
specification thermostat system section 
time action system state system rich structure may natural necessary function denote effect time elapse state system contrast example single thermostat system section time elapse affected object system 
function ffi denoting action time system form ffi state time state involving designated sorts state time 
action ffi monoid action natural require satisfies axioms ffi ffi ffi ffi tick rules form ftg gamma 
fffi action ffi describe effect passage time dynamic evolution system possible pitfalls 
done may allow going back time perform rewrite 
suppose ffi holds aged term rewrites aged rewrite ftg fffi gamma 
fffi executable specification purposes important require set equations rewrite theory divided set simplifying equations set ax structural axioms way equations define church rosser terminating set equations modulo set ax set rules coherent wrt 
ax rewrite theory coherent step sequential rewrite gamma 
modulo structural axioms ax rewrite gamma 
modulo ax normal form modulo ax equivalent 
coherent system allow going back time coherence imply timed rewrite ftg gamma 
ft modulo structural axioms ax equivalent rewrite fffi gamma 
fffi assuming fffi reduces ftg equations oriented 
commonly occurring state structure want action time distribute different state components multiset distributed structure 
example object oriented systems petri nets structure 
multiset distributed systems give general treatment time actions avoids coherence problems 
simple solution avoid coherence problems rule rewrite terms sort system solve coherence problem wrt 
symbol ffi rewrite occur top 
concurrency lost solution 
idea special tokens form extended state term supersort designated sort state consisting multiset union original state multiset tokens 
system operator take arguments sort ffi left unchanged 
multiset union denoted juxtaposition tick rules form tick ft tg gamma 
ft ffi variable sort tokens denoting multisets tokens term sort state 
local rule form gamma 
delta delta delta token appears lefthand side local rule global state contain tokens local rewrites fire concurrently 
object oriented systems number tokens configuration suitably equal number objects configuration number rewrites firing concurrently bounded number objects global state assumption object appears lefthand side rule 
coherence wrt 
symbol ffi trivially unproblematic instance lefthand side local rule sort argument ffi 
summarize monoid action ffi denoting effect time elapse state may useful specifying real time systems state system rich distributed structure require coherence ensures ffi cause counterintuitive rewrites resulting going back time 
class coherent real time rewrite theories monoid action ffi describing effect time elapse system tick rules form form multiset distributed systems denoted ffi 
object oriented ffi systems elapse time affects functional attribute single thermostat system section 
tick rules specifying directly effect time attribute 
general object oriented systems unbounded number objects configuration affected elapse time case finite number tick rules specify elapse time directly functional attributes 
simple solution function ffi denoting action time configuration 
important class real time object oriented systems objects functional attributes multiset distributed systems 
techniques described section circumvent coherence problems wrt 
ffi sacrificing concurrency 
declarations added general framework specifying object oriented real time systems section redefined stated 
sorts tokens configuration subsorts tokens configuration configuration op tokens op tokens tokens tokens assoc comm id null op configuration configuration configuration assoc comm id null op configuration system op ffi configuration time configuration 
mentioned tick rules form tick ft tg gamma 
ft ffi variable sort tokens term sort configuration 
instantaneous rule form gamma 
delta delta delta terms sort configuration number tokens righthand side equal plus number objects created rule minus number objects deleted rule 
initial state systems number objects created rule application depends state condition form rules relaxed delta delta delta term sort tokens computing number tokens function state 
system form delta delta delta tg number tokens equals number objects term sort configuration 
distribution configurations operator ffi acting configurations provides just seen natural way expressing action time object systems number objects configuration time effect unbounded 
cases ffi typically distribute elements groups elements configuration 
case modeled axioms ffi null null ffi ffi ffi null null variables sort configuration definition specific effect time single objects messages added completely specify ffi 
condition different null ensures equations define terminating rewrite system modulo associativity commutativity identity null configuration union operator oriented left right 
systems parameterized ltime theories function mte giving maximum time elapse object message extended configurations axioms mte null mte min mte mte null null example multi thermostat system multi thermostat system arbitrary number rooms equipped thermostat works single thermostat system 
user object extended contain list access 
specification parameterized theory ltime furthermore ts variables sort oid variable sort sets oid variable sort configuration variable sort tokens variable sort time variables sort temp modeling temperature domain 
function ffi configuration time configuration denoting action time function mte configuration time computing maximum time elapse tick distribute configurations equations described defined singleton configurations follows ffi set temp set temp ffi hu hu ffi hts thermostat temp heater oni hts thermostat temp heater oni ffi hts thermostat temp heater hts thermostat temp gamma heater mte set temp mte hu mte hts thermostat temp desired temp heater oni gamma delta mte hts thermostat temp desired temp heater gamma delta 
system transition rules follows new temp hu user gamma 
hu set new temp set temp set temp ha thermostat temp gamma 
ha thermostat temp yi turn hts thermostat temp desired temp heater gamma 
hts thermostat oni gamma turn hts thermostat temp desired temp heater oni gamma 
hts thermostat tick ft gamma 
ft ffi mte timed petri nets petri net usually set places place representing certain kind resource disjoint set transitions relation causality associates transition set resources consumed produced firing 
meseguer montanari recast idea algebraic framework viewing distributed states net called markings multisets places viewing transitions arrows ordinary graph nodes markings 
shown petri net computations expressed rewriting markings multisets set places 
petri nets extended model real time systems different ways see 
frequently time extensions timed versions petri nets obtained special cases combining extensions transition ff associated time interval ff ff 
transition fires soon resulting resources called tokens delayed transition ff fires resulting resources visible system time ff ff 
place duration resource kind participate transition place time 
transition ff associated time interval ff ff transition ff fire continuously enabled time ff transition ff enabled continuously time ff taken 
treat cases 
third case treatment similar timed phase transition systems 
timed extensions petri nets interval timed colored petri nets appear context colored petri nets having atomic places structured data 
exposition away colors tokens concentrate real time features see treatment rewriting logic important class colored nets algebraic petri nets 
translation rewriting logic cases rewriting logic representation untimed petri nets state petri net represented multiset places called marking place multiplicity interpret presence tokens place transitions correspond rewrite rules corresponding multisets pre post places 
kinds tokens translation timed petri nets term consisting place represents visible occurrence token place token visible place time represented term dly clearly want equation dly state marking timed petri net multiset forms places multiset union represented juxtaposition 
number delayed tokens marking time acts known advance 
timed petri nets best modeled ffi real time theories techniques specifying multiset distributed ffi systems section 
action ffi marking time marking models effect time elapse marking occurrence special symbol distributes elements marking defined follows ffi ffi dly dly gamma delta ffi null null ffi ffi ffi null null transitions represented rewrite rules lefthand side requires extra token form new extra tokens added righthand side increase cardinality preset postset 
version known interval timed petri nets transition ff associated interval ff ff 
assume transition ff consumes tokens place token place produces token places duration transition time interval ff ff resulting tokens visible time interval 
transition ff represented rewrite rule eager ff gamma 
dly dly ff ff version place associated duration token place time transition 
equivalent saying produced token visible time producing transition took place 
transition consumes tokens place place produces token represented rule eager ff gamma 
dly dly usual elapse time versions modeled tick rules 
order ensure time proceed time transition fire time acted token dly time function mte 
takes argument marking returns amount time non available tokens available mte mte dly mte null mte min mte mte null null tick rule allows time elapse dly token visible lazy tick ft gamma 
ft ffi mte variable sort tokens multisets variable sort marking note simulation purposes tick rule lazy tick ft mte gamma 
ft ffi mte mte simpler non tick transition currently enabled enabled time elapsed mte 
reason nondeterministic tick rule allow moment time domain visited 
transitions supposed fire soon possible versions timed petri nets 
accomplished strategy described section triggers eager instantaneous rules applied followed application tick rule 
correspondance version timed net rewriting logic translation follows 
net markings markings delayed tokens marking reached time initial marking net rewrite ff delta delta delta gamma 
delta delta delta rewriting logic translation ff number occurrences lefthand side system greater equal number non tokens obtained removing delayed token version correspondence net marking net reach marking time initial marking rewrite fi delta delta delta gamma 
delta delta delta corresponding rewrite translation fi number occurrences lefthand side system greater equal number non tokens obtained replacing occurrence token place delayed token dly obtained replacing delayed token corresponding token 
rewriting logic specification timed petri nets illustrates convenience eager lazy rules allow simple condition tick rule take account enabledness transition system mte part tick rule 
tick rule needs compute time delayed token visible elapse time amount 
tick tick rule enabled due lazy applied new token enabled eager transition turn trigger transitions zero time 
big picture shown known models real time hybrid systems naturally regarded specializations real time rewriting logic framework 
interested executable specifications placed computability restrictions models 
relationships models considered summarized arrows tree stand specialization acronym stands objectoriented real time systems ffi real time rewrite action theories ffi real time object oriented action systems 
exhaustive discussion real time models think models chosen significantly varied known suggest rewriting logic semantic framework real time hybrid systems 
timed automata model requires computations unbounded total time elapse satisfy certain acceptance criteria case hybrid automata explaining missing arrow models 
timed automata hybrid automata systems transition timed systems transition ffi ffi phase timed petri nets fig 

specializations real time rewriting 
relationship timed rewriting logic section investigate relationship wirsing timed rewriting logic trl framework specifying real time systems directly rewriting logic 
briefly introducing trl section propose section translation trl rewriting logic 
translation translation trl sequent derivable trl theory derivable corresponding rewriting logic theory 
converse general true 
explain reasons discrepancy section 
due conceptual differences trl method specifying real time systems rewriting logic 
timed rewriting logic rewriting logic extended wirsing handle realtime systems timed rewriting logic trl 
trl shown suited giving object oriented specifications complex hybrid systems steam boiler illustrated number specifications simpler real time systems 
translation ordinary rewriting logic illuminate conceptual relationships formalisms 
trl theory sigma tr consists equational specification sigma satisfying theory time set labels set tr timed rewrite rules form gamma 
ground term sort time denoting duration rewrite 
trl sequent form gamma 
intuitive meaning evolves time specifically set sequents derivable trl theory consists rules theory impose cases requirements time monoid 
course easily accommodated 
timed transitivity gamma 
gamma 
gamma 
synchronous replacement gamma 
gamma 
gamma 
gamma 
fx 
compatibility equality gamma 
gamma 
renaming variables gamma 
sigma time fig 

deduction rules timed rewriting logic 
sequents derived equational reasoning deduction rules denotes set free variables deduction system extends modifies rules deduction rewriting logic time stamps follows ffl reflexivity dropped general axiom allow specifying hard real time systems 
reflexivity allow describing hard real time systems parts system stay idle arbitrarily long period time 
ffl transitivity yields addition time stamps 
evolves time evolves time evolves time ffl synchronous replacement rule enforces uniform time elapse components system system rewrites time iff components 
ffl renaming rule assures timed rewriting independent names variables 
observe renaming axiom imply gamma 
holds terms timed rewriting logic rewriting logic section define mapping takes timed rewriting logic theory real time rewrite theory gamma 
implies ff ftg gamma 
ft ff ff ground terms designated sort state 
idea introduce sort operator ffi time corresponding effect time elapse 
trl sequent gamma 
evolves time mapped rewriting logic sequent ffi gamma 
time acted time rewrites ground terms rewrite rules define ffi effect time trl state necessarily functional 
sort information separate terms containing symbol ffi terms original signature tick rule added rules defining ffi ground terms sort state ff ftg gamma 
ft holds ff ff ffi gamma 
turn holds gamma 
holds 
resulting real time rewrite theory easily executable tick rule introduces variables righthand side 
reflects fact trl general undecidable term rewrites time known rewrites time general undecidable rewrites term time assume time domain functional rewrites form gamma 
terms sort time inferred trl theory restrict treatment trl theories extra variables introduced righthand side rule 
reason restriction gamma 
gamma 
rules system appears result second rule evolved time units system 
transitivity rules sequent gamma 
derivable means system replace including systems evolved time units 
mapping trl real time rewrite theories mapping sends order sorted trl theory sigma tr real time rewrite theory sigma tr oe sends sequent gamma 
sequent gamma 

defined follows ffl signature morphism oe takes time sort time denoting time domain takes functions time corresponding functions ffl set sorts sigma consists sorts sigma plus new sort ffi sort sigma new sort system 
sort sigma ffi sigma ffi ffi sigma 
ffl sigma contains function declarations ffi ffi ffi function sigma constructor state system designated sort state sigma function ffi ffi time ffi sort sigma 
ffl contains axiom ffi ffi axiom variable replaced ffi set define ffi monoid action contains axioms ffi ffi oe ffi ffi ffi ffi ffi ffi oe sort ffi sigma variable ffi sort ffi variables sort time 
ffl mapping trl sequents rewriting logic sequents gamma 
ffi ffi ffi gamma 
ffi ffi ffi ffi free variables contain set rules tr consists rule gamma 
ffi timed rule gamma 
tr tick rule tick fxg gamma 
fx ffi gamma 
variables sort state sort time 
theorem shows naturally understood map logics 
specifically map trl gamma 
entailment system trl rewriting logic 
theorem trl specification defined 
terms sigma gamma 
implies gamma 
corollary theorem easily proved induction size proof gamma 
obtain gamma 
implies ffi gamma 
ground terms turn gives rewrite ff ftg gamma 
ft ff sort state applying tick rule 
easy see ff ftg gamma 
ft implies ffi ff gamma 
ground terms sort state 
differences trl rewriting logic translation gamma 
implies ffi gamma 
ground terms converse necessarily true 
section discuss differences deduction trl translation rewriting logic 
zero time idling rewriting logic translation trl sequent gamma 
translates ffi gamma 
ffi ffi due axiom ffi equal gamma 
deducible rewriting logic 
trl gamma 
necessarily valid 
obviously indicates difference systems notion zero time idling available approach trl 
non right linear rules trl theory ff gamma 
gamma 
gamma 
cg term rewrites time rewrite 
rewriting logic translation ffi gamma 
ffi ffi ffi gamma 
ffi gamma 
fyg gamma 
fy ffi gamma 
variables designated state sort range ffi free terms rewrite ffi gamma 
ffi ffi gamma 
rewrite ff ff gamma 
fg ff 
difference depends fork process modeled 
rule gamma 
understood fork sub process system 
trl setting actual fork point time instances process behave independently place time period length rule 
rewriting logic setting forking took place time period duration note rewriting logic setting adding rule ffi gamma 
ffi system gives ffi gamma 
ffi ffi fork took place early 
behavior avoided requiring variable rule ffi gamma 
ffi ffi non ffi sort 
problems related synchrony trl aspect trl rewriting logic translation different illustrated trl specification ff gamma 
gamma 
gamma 
gamma 
gamma 
cg due strong synchrony requirements trl rewritten place rewritten time 
cases natural assume system represented rewrites time 
rewriting logic translation ffi rewrites 
aging trl overcome strong requirements synchrony trl caused differences sections special symbol age introduced 
aims making term rewrites time accessible synchronous rewrites time making visible age 
formally aging deduction rules added trl deduction rules 
deduction rules gamma 
assumed timed rewrite rule specification 
age gamma 
age age age gamma 
age operator satisfies axiom age age age terms time values aging fork differences disappear assuming gamma 
gamma 
age age gamma 
system example section strong synchrony illustrated fact section gamma 
derivable gamma 
age age gamma 
age age gamma 
derivable 
unfortunately deduction rules aging lead counterintuitive results illustrated example example trl theory ff gamma 
gamma 
gamma 
bg expect gamma 
derivable 
gamma 
age age gamma 
derivable gamma 
age age gamma 

sequents gamma 
age gamma 
give gamma 
age synchronous replacement turn rewrites age gamma 

transitivity gives undesired sequent gamma 

summarize situation follows 
seen rewriting translation trl theory looser cases pleasant consequences 
attempt tighten correspondence systems adding aging rules trl get closer unfortunately encounter paradoxical examples reformulation trl 
concluding remarks general method specifying real time hybrid systems rewriting logic executable way shown wide range real time hybrid system models naturally expressed rewriting logic illustrated ideas examples 
extended directions 
systems considered distributed exhibit concurrent computations components state change simultaneously independently 
time sense global time acts global state effects local distributed example advancing local clocks different distributed objects 
situation entirely similar real time models distributed systems lynch general timed automata time acts uniformly distributed components 
fact discussed general timed automata specified general framework 
current framework specifying reasoning range distributed systems worth investigating assumption global time action relaxed local distributed time actions 
explored think representative range real time hybrid system models 
general timed automata model mentioned real time dataflow models lustre variety models specified detail rewriting logic 
interest merely conceptual formal meta tool maude turn rewriting logic specification model tool executing analyzing formal specifications model 
formalisms lack execution analysis environments offers way developing new formal tools considerably effort required conventional implementations 
execution rewriting logic specifications real time hybrid systems area deserving 
specifications rewrite theories assume underlying data types computable course executed rewriting logic language 
point rewrite rules nondeterministic extra new variables appearing righthand side 
executed appropriate strategies guide application rules choice instantiations extra variables match 
strategies kind defined problem languages elan maude development library strategies suitable real time hybrid system applications leading specialized execution analysis tool remains done 
important research issue integration different proof analysis methods 
hand verification property oriented specifications supported 
done inductive methods initial model rewriting logic specification temporal logic reasoning important cases supported abstraction model checking techniques 
hand executable specification subject forms analysis ranging execution default strategy exploration different computation paths sophisticated strategies full symbolic simulation techniques narrowing 
studying different methods tools best combined system analysis verification easier promising research direction 
examples case studies help task 
braga manuel clavel francisco dur alexander knapp piotr narciso mart oliet joseph sifakis carolyn talcott martin wirsing comments suggestions helped development ideas improving presentation 
van der aalst 
interval timed coloured petri nets analysis 
ajmone marsan editor application theory petri nets volume lecture notes computer science pages 
alur courcoubetis halbwachs henzinger 
ho nicollin olivero sifakis yovine 
algorithmic analysis hybrid systems 
theoretical computer science 
alur dill 
theory timed automata 
de bakker huizing de roever rozenberg editors real time theory practice volume lecture notes computer science 
alur dill 
theory timed automata 
theoretical computer science 
barr wells 
electronic supplement second edition category theory computing science 
available www edu math wells pub papers html 
beeson 
foundations constructive mathematics 
springer verlag 
bengtsson larsen larsson pettersson yi 
uppaal tool suite automatic verification real time systems 
hybrid systems iii volume lecture notes computer science 
springer verlag 
bergstra tucker 
algebraic specification computable semicomputable data types 
theoretical computer science 
bjrner manna sipma uribe 
deductive verification real time systems step 
proc 
arts volume lecture notes computer science 
springer verlag 
borovansk kirchner kirchner 
moreau vittek 
elan logical framework computational systems 
meseguer editor proc 
intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl cas tree store tcs free pc volume htm 
clavel 
reflection general logics rewriting logic maude 
phd thesis university 
clavel duran eker lincoln mart oliet meseguer 
metalevel computation maude 
proc 
nd intl 
workshop rewriting logic applications electronic notes theoretical computer science 
elsevier 
clavel duran eker lincoln mart oliet meseguer quesada 
maude specification programming rewriting logic 
computer science laboratory sri international menlo park 
maude csl sri com 
clavel meseguer 
axiomatizing reflective logics languages 
kiczales editor proc 
reflection 
xerox parc 
clavel meseguer 
reflection strategies rewriting logic 
meseguer editor proc 
st intl 
workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
manuel clavel francisco dur steven eker jos meseguer 
maude formal meta tool 
sri international february maude csl sri 
com 
olivero tripakis yovine 
tool kronos 
hybrid systems iii volume lecture notes computer science 
springerverlag 
futatsugi diaconescu 
cafeobj report 
amast series world scientific 
goguen meseguer 
order sorted algebra equational deduction multiple inheritance overloading exceptions partial operations 
theoretical computer science 
halbwachs caspi raymond pilaud 
synchronous dataflow programming language lustre 
proceedings ieee september 

analysis place transition nets timed arcs application batch process control 
ajmone marsan editor application theory petri nets volume lecture notes computer science 
springer verlag 
henzinger 
ho wong toi 
user guide hytech 
tacas volume lecture notes computer science 
springerverlag 
kesten manna pnueli 
verifying clocked transition systems 
proc 
hybrid systems iii volume lecture notes computer science 
springer verlag 
wirsing 
timed rewriting logic specification time sensitive systems 
schwichtenberg editor proc 
intl 
summer school proof computation marktoberdorf 
springer verlag 
wirsing 
timed rewriting logic application object specification 
science computer programming 
nancy lynch 
distributed algorithms 
morgan kaufmann 
maler manna pnueli 
timed hybrid systems 
realtime theory practice volume lecture notes computer science 
manna pnueli 
models reactivity 
acta informatica 
manna pnueli 
clocked transition systems 
logic software engineering 
available stanford university csd technical report stan cs tr 
manna sipma 
deductive verification hybrid systems step 
hybrid systems computation control volume lecture notes computer science 
springer verlag 
meseguer 
general logics 

ebbinghaus editor logic colloquium 
north holland 
meseguer 
conditional rewriting logic unified model concurrency 
theoretical computer science 
meseguer 
logical theory concurrent objects realization maude language 
agha wegner yonezawa editors research directions concurrent object oriented programming pages 
mit press 
meseguer 
rewriting logic semantic framework concurrency progress report 
proc 
concur volume lecture notes computer science 
springer verlag 
meseguer 
research directions rewriting logic 
berger schwichtenberg editors computational logic nato advanced study institute marktoberdorf germany july august 
springer verlag 
meseguer montanari 
petri nets monoids 
information computation 
trubian 
timed high level nets 
journal real time systems 
wirsing 
object oriented algebraic steam boiler control specification 

abrial borger langmaack editors formal methods industrial application specifying programming steam boiler control volume lecture notes computer science 
springer verlag 
meseguer 
specifying real time systems rewriting logic 
meseguer editor proceedings st international workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
rabin 
computable algebra general theory theory computable fields 
transactions american mathematical society 
reisig 
petri nets volume eatcs monographs theoretical computer science 
springer verlag 
steggles 
timed rewriting logic semantics sdl case study alternating bit protocol 
proc 
nd international workshop rewriting logic applications volume electronic notes theoretical computer science 
elsevier 
www elsevier nl locate entcs volume html 

stehr 
rewriting semantics algebraic petri nets 
manuscript sri international dept univ hamburg 

rewriting effective model concurrency 
proc 
parle volume lecture notes computer science 
springer verlag 

