handbook object technology editor zamir 
crc press llc boca raton 

isbn 
overview programming language bjarne stroustrup laboratories florham park nj usa overview presents key design programming language technical concepts examples give reader feel language 
general purpose programming language bias systems programming supports efficient low level computation data abstraction object oriented programming generic programming 
overview programming language provides model memory computation closely matches computers 
addition provides powerful flexible mechanisms abstraction language constructs allow programmer introduce new types objects match concepts application 
supports styles programming rely fairly direct manipulation hardware resources deliver high degree efficiency plus higher level styles programming rely user defined types provide model data computation closer human view task performed computer 
higher level styles programming called data abstraction object oriented programming generic programming 
organized main programming styles directly supported design evolution describes aims principles guided evolution 
programming model presents subset facilities supporting traditional systems programming styles 
abstraction mechanisms introduces class concept defining new types exactly built types shows classes provide interfaces objects variety types describes class hierarchies object oriented programming presents templates support generic programming 
large scale programming describes namespaces exception handling provided ease composition programs separate parts 
standard library presents standard facilities streams strings containers generic algorithms support numeric computation 
round brief overview tasks suggestions reading 
design evolution designed implemented bjarne stroustrup author article bell laboratories combine organizational design strengths simula facilities systems programming 
initial version called classes stroustrup supported traditional system programming techniques data abstraction 
basic facilities object oriented programming added object oriented design programming techniques gradually introduced community 
language commercially available stroustrup stroustrup 
facilities generic programming added language time frame ellis stroustrup 
result widespread appearance independently developed implementations formal standardization started auspices american national standards institute ansi international standards organization iso leading international standard 
period standardization standards committee acted important focus community draft standards acted interim definitions language 
active member standards committee key participant evolution 
standard better approximation ideals earlier versions 
design evolution documented stroustrup stroustrup stroustrup 
language defined standardization process key design programming techniques directly supports stroustrup 
design aims designed deliver flexibility efficiency systems programming simula facilities program organization usually referred object oriented programming 
great care taken higher level programming techniques simula applied systems programming domain 
abstraction mechanisms provided specifically designed applicable programming tasks demanded highest degree efficiency flexibility 
aims summarized aims programming enjoyable serious programmers 
general purpose programming language better supports data abstraction supports object oriented programming supports generic programming support generic programming emerged late explicit goal 
evolution generic programming styles language features support heading data abstraction 
design principles stroustrup design rules listed headings general rules design support rules language technical rules low level programming support rules general rules evolution driven real problems 
language complete system 
don get involved sterile quest perfection 
useful 
feature reasonably obvious implementation 
provide transition path 
provide comprehensive support supported style 
don try force people 
note emphasis immediate utility real world applications respect skills preferences programmers implied points 
start aimed programmers engaged demanding real world projects 
perfection considered unattainable needs backgrounds problems vary users 
notions perfection change significantly lifespan general purpose programming language 
feedback user implementer experience essential evolution language 
design support rules support sound design notions 
provide facilities program organization 
say mean 
features affordable 
important allow useful feature prevent misuse 
support composition software separately developed parts 
aim improve quality programs produced making better design programming techniques simpler affordable 
techniques root simula dahl dahl birtwistle usually discussed labels object oriented programming object oriented design 
aim support range design programming styles 
contrasts view language design tries channel system building single heavily supported enforced style paradigm 
language technical rules implicit violations static type system 
provide support user defined types built types 
locality 
avoid order dependencies 
doubt pick variant feature easiest teach 
syntax matters perverse ways 
preprocessor usage eliminated 
rules considered context created general aims 
particular desire high degree compatibility efficiency immediate real world utility counteracts desires complete type safety complete generality beauty 
simula borrowed notion user defined types classes hierarchies classes 
simula similar languages fundamental differences support provided user defined types built types 
example simula allow objects userdefined types allocated stack addressed directly 
class objects allocated dynamic memory accessed pointers called simula 
conversely builtin types genuinely local stack frame allocated allocated dynamic memory referred pointers 
difference treatment built types user defined types serious efficiency implications 
example represented object allocated dynamic memory user defined type ccoommpplleexx incurs overheads run time space deemed unacceptable kind applications intended 
difference style usage preclude uniform treatment semantically similar types generic programming 
maintaining large program programmer invariably changes incomplete knowledge looking small part code 
consequently provides classes namespaces access control help localize design decisions 
order dependencies unavoidable language designed pass compilation 
example variable function declared 
rules class member names rules overload resolution independent declaration order minimize confusion error 
low level programming support rules traditional dumb linkers 
gratuitous incompatibilities leave room lower level language assembler 
don don pay zero overhead rule 
doubt provide means manual control 
designed source link compatible seriously interfere support strong type checking 
minor details kernighan kernighan subset 
compatible ensured programmers immediately complete language toolset available 
important high quality educational materials available compatibility gave programmer direct efficient access multitude libraries 
time decision base wasn prominent language popularity minor concern compared flexibility basic efficiency offered compatibility leaves syntactic semantic quirks 
example declarator syntax far elegant rules implicit conversions built types chaotic 
problem programmers migrate radical improvements code quality achieved similarly radical changes programming styles 
programming model fundamental property computers widespread remained remarkably constant memory sequence words bytes indexed integers called addresses 
modern machines say designed years addition tended support directly notion function call stack 
furthermore popular machines important facilities input output fit conventional byte word oriented model memory computation 
facilities may require special machine instructions access memory locations peculiar semantics 
way higher level language point view facilities messy machine architecture specific 
far successful language providing programmer programming model closely matches machine model 
provides language level machine architecture independent notions directly map key hardware notions characters bytes integers words pointers addressing mechanisms functions program abstraction absence constraining language features programmer manipulate inevitable messy hardware specific details 
net effect relatively easy learn areas knowledge real machine benefit 
easy implement universally available 
arrays pointers array simply sequence memory locations 
example iinntt vv array ints vv assign iinntt xx vv read subscript notation declarations indicate array expressions referring elements array 
pointer variable hold address memory location 
example iinntt pp pointer int pp vv assign address pp write iinntt yy pp read pointer dereference points notation declarations indicate pointer expressions referring element pointed 
represented graphically 
adopted inherently simple close machine notion memory adopted notion expressions control structures functions 
example write function finds element vector returns pointer matching element iinntt iinntt vv iinntt iinntt find val iinntt ii ii ii loop vv ii vv ii val return pointer element vv return pointer operator means increment 
name read successor 
pronounced see plus plus 
function iinntt iinntt ff iinntt pp find count iinntt qq find count qq 
standard library provides general versions functions see 
function declared ff doesn return value 
storage fundamental ways memory static memory object allocated linker duration program 
global variables class members variables functions allocated static memory 
object allocated static memory constructed persists program 
address change program running 
static objects problem programs threads shared address space concurrency shared require locking proper access 
automatic memory function arguments local variables allocated 
entry function block gets copy 
kind memory automatically created destroyed name automatic memory 
automatic memory said stack 
free store memory objects explicitly requested program program free memory done operators 
program needs free store requests operating system 
typically free store called dynamic memory heap grows lifetime program memory returned operating system programs 
example iinntt gg global variable statically allocated ff iinntt local variable stack allocated iinntt pp iinntt variable allocated free store pp return variable pointed possible re far programmer concerned automatic static storage simple obvious implicit ways 
interesting question manage free store 
allocation simple consistent policy giving memory back free store manager memory fill especially long running programs 
simplest strategy automatic objects manage corresponding objects free store 
consequently containers implemented handles elements stored free store 
example variable manages sequence characters free store iinntt pp elements 

automatically allocates frees memory needed elements 
example gg ss string object created 
string object implicitly destroyed ssttaacckk example shows constructors destructors manage lifetime storage elements 
standard containers conveniently implemented way 
simple regular efficient approach isn sufficient programmer memory manager finds unreferenced objects reclaims memory store new objects 
usually called automatic garbage collection simply garbage collection 
naturally memory manager called garbage collector 
commercial free garbage collectors available garbage collector standard part typical implementation 
compile link execute traditionally program consists number source files individually compiled object files 
object files linked produce executable form program 
separately compiled program fragment contain information allow linked program fragments 
language rules checked compiler compiles individual source file translation unit 
linker checks ensure names consistently different compilation units name refers properly defined 
typical runtime environment performs checks executing code 
programmer wants run time checking provide tests part source code 
interpreters dynamic linkers modify picture slightly postponing checks code fragment 
example write simple factorial program represent separate source file cc file fact hh ff recursive factorial ff ff ff separately compiled program fragment interface consisting minimal information needed 
simple cc program fragment interface consists declaration stored file hh file fact interface translation unit uses 
tend interface translation unit defines give compiler chance diagnose inconsistencies early 
function file main hh iinntt nn function starting point program standard library standard character output stream 
operator put converts values character strings outputs characters 
executing program cause appear output followed newline special character nn 
graphically program fragments represented hh iinntt 
hh ff 
fact main fact type checking provides relies static type checking 
language rules checked compiler program starts executing 
entity program type accordance type 
example iinntt ff function takes double precision floating point argument returns integer xx single precision floating point object ss string characters iinntt ii ff xx integer compiler detects inconsistent uses ensures conversions defined language user performed 
example gg ss aa ok convert string literal string ss error convert int string xx aa error convert string literal float xx ok xx ok convert int float ff xx ok convert float double ff ii ok convert int double ff ss error convert string double dd ff ii ok add int float ss ss ii error add int string user defined types user great flexibility defining operations conversions acceptable 
consequently compiler detect inconsistent user defined types inconsistent built types 
abstraction addition convenient efficient mechanisms expressing computation allocating objects need facilities manage complexity programs 
need language mechanisms creating types appropriate way think application domains low level built features 
concrete types small heavily abstractions common applications 
examples characters integers floating point numbers complex numbers points pointers coordinates transforms pointer offset pairs dates times ranges links associations nodes value unit pairs disc locations source code locations characters currencies lines rectangles scaled fixed point numbers numbers fractions character strings vectors arrays 
application uses heavily 
typical application uses directly indirectly libraries 
designer general purpose programming language foresee detailed needs application 
consequently language provide mechanisms user define small concrete types 
explicit aim support definition efficient user defined data types 
seen foundation elegant programming 
simple mundane statistically far significant complicated sophisticated 
concrete types frequently subject variety constraints 
consequently language facilities supporting construction emphasizes flexibility time space efficiency 
convenient higher level safer types needed types built top simple efficient types 
opposite building efficient types top complicated higher level types done 
consequently languages provide facilities efficient user defined concrete types need provide built types lists strings vectors supported special language rules 
classical example concrete type complex number ccoommpplleexx interface constructors ccoommpplleexx rr ii rr ii construct complex scalars ccoommpplleexx rr rr construct complex scalar ccoommpplleexx default complex complex access functions ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx binary minus ccoommpplleexx ccoommpplleexx unary minus ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx ccoommpplleexx representation defines simple ccoommpplleexx number type 
simula term user defined type class 
ccoommpplleexx class specifies representation complex number set operations complex number 
representation private accessible functions specified declaration class ccoommpplleexx 
restricting access representation specific set functions simplify understanding eases debugging testing relatively simple adopt different implementation needed 
member function name class called constructor 
constructors essential user defined types 
initialize objects establish basic invariants functions accessing representation rely 
class ccoommpplleexx provides constructors 
ccoommpplleexx double precision floating point number takes pair third ccoommpplleexx default value 
example ccoommpplleexx aa ccoommpplleexx ccoommpplleexx bb initialized complex ccoommpplleexx cc initialized complex friend declaration function access representation 
access functions defined just functions 
example ccoommpplleexx ccoommpplleexx aa ccoommpplleexx aa add complex numbers ccoommpplleexx aa aa aa aa simple ccoommpplleexx type ff ccoommpplleexx aa ccoommpplleexx bb aa ccoommpplleexx cc aa bb ccoommpplleexx cc aa bb declaration ccoommpplleexx specified representation 
necessary user defined type see 
ccoommpplleexx efficiency control data layout essential 
simple class ccoommpplleexx suffers space overheads system provided housekeeping information 
representation ccoommpplleexx declaration true local variables data stack allocated trivially implemented 
furthermore inlining simple operations easy simple compilers presence separate compilation 
comes supplying acceptable low level types ccoommpplleexx high performance systems language aspects essential stroustrup 
notation important concern concrete types 
programmers expect able complex arithmetic conventional operators 
similar programmers expect able concatenate strings operator subscript vectors strings invoke objects representing functions meet expectations provides ability define meanings operators user defined types 
interestingly commonly operators useful turns people expect 
standard library supplies ccoommpplleexx type defined techniques demonstrated 
types concrete types described representation included declaration 
trivial allocate objects concrete types stack inline simple operations objects 
resulting efficiency benefits major 
representation object changed recompiling code advantage optimizations 
ideal 
obvious alternative protect users knowledge dependency representation excluding class declaration 
example iinntt iinntt means pure virtual function iinntt iinntt iinntt pp iinntt nn iinntt pp iinntt nn iinntt iinntt 
destructor see word means may defined class derived simula 
class derived see provides implementation interface 
curious syntax says class derived define function 
class specifying interface 
interface implemented variety ways affecting users 
example programmer interface device drivers hypothetical system dd iinntt pp dd chunk written chunk size characters written pp move chunk part chunk written 
actual drivers specified classes derived base 
example representation dev iinntt iinntt open dev iinntt iinntt close dev iinntt pp iinntt nn read dev representation dev iinntt iinntt open dev iinntt iinntt close dev iinntt pp iinntt nn read dev 
relationships classes represented graphically base class derived classes arrow represents derived relationship 
need know class implementing 
ff dd dd iinntt ss dd ss dev dd ss dev function declared derived class said override virtual function name type base class 
language job ensure calls virtual functions invoke appropriate overriding function derived class 
overhead doing minimal perfectly predictable 
extra run time overhead function fraction cost ordinary function call 
represent object layout typical implementation ss 
ss 
virtual function call simply indirect function call 
run time searching right function call needed 
contexts classes ideal way representing major internal interfaces system 
simple efficient strongly typed enable simultaneous different implementations concept represented interface completely insulate users changes implementations 
destructors constructor establishes context member functions class object 
establishing context requires acquisition resources memory locks files 
program correctly resources typically released object destroyed 
consequently possible declare function dedicated reversing effect constructor 
naturally function called destructor 
name destructor class xx xx complement operator 
simple stack characters defined ssttaacckk vv iinntt iinntt ssttaacckk iinntt ss vv tt ss constructor acquire memory ssttaacckk vv destructor release memory tt cc vv cc tt vv simplicity ssttaacckk stripped error handling 
complete ff iinntt nn ssttaacckk ss nn stack characters aa bb cc 
entry ff ss created constructor ssttaacckk ssttaacckk called 
constructor allocates memory nn characters 
exit ff destructor ssttaacckk ssttaacckk implicitly invoked memory acquired constructor freed 
kind resource management important 
example class manipulated pointers typically deleted function idea exact type object implement interface 
consequently user expected know required free device 
conceivably freeing device involve nontrivial interactions operating system guardians system resources 
declaring destructor ensures removal done proper function derived class 
example implicitly invoke object destructor object oriented programming object oriented programming set techniques rely hierarchies classes provide extensibility flexibility 
basic language facilities user defined types ability derive class functions 
features allow programmer rely interface class class knowing operations implemented 
conversely allow new classes built directly older ones disturbing users older classes 
example consider simple task getting integer value user application user interface system 
assuming keep application independent details user interface system represent notion interaction needed get integer class iinntt get value back application prompt user 
naturally variety boxes 

represented graphically application hierarchy independent details actual user interface system 
application written independently implementation details tied implementation hierarchy affecting users application hierarchy bbbb bbbb bbbb bbbb bbbb bbbb dashed arrow represents protected base class 
protected base class part implementation derived class inaccessible general user code 
design application code independent change implementation hierarchy 
bbbb prefix realism suppliers major libraries traditionally prepend identifying initials 
superior alternative namespaces 
declaration class ties application class implementation hierarchy look bbbb bbbb functions overriding slider functions needed implement application concepts functions overriding bb slider bb window functions required conform user interface standards representation implementation details structure assumes details displayed user interface system expressed overriding virtual functions bbbb hierarchy 
may ideal organization user interface system uncommon 
derived class inherits properties base classes 
derivation called inheritance 
language allows class direct base class said support multiple inheritance 
run time type identification plausible defined hand system controlled screen system hand objects back application program activity occurred 
user interfaces 
just application know user interface system user interface system know 
system interfaces specified terms system classes objects application classes 
necessary proper 
unpleasant effect lose information type objects passed system returned 
recovering lost type object requires ask object reveal type 
operation object requires pointer suitable type object 
consequently obvious useful operation inspecting type object run time type conversion operation returns valid pointer object expected type null pointer isn 
operator exactly 
example assume system invokes pointer activity occurred pw point box 
iinntt ii oops 
unexpected event way explaining going translates implementation oriented language user interface system language application 
important note mentioned example actual type object 
object particular kind say implemented particular kind say 
necessary desirable actual type object explicit interaction system application 
interface exists represent essentials interaction 
particular designed interface hides inessential details 
casting base class derived class called downcast convention drawing inheritance trees growing root 
similarly cast derived class base called 
cast goes base sibling class cast called 
generic programming classes class hierarchies elegantly efficiently represent individual concepts represent concepts relate hierarchical manner 
common important concepts independent hierarchically organized 
example notions vector integer vector complex number related common concept vector differ type vector elements 
abstractions best represented parameterization 
example parameterized element type 
provides parameterization type notion template 
crucial design criterion templates flexible efficient define fundamental containers severe efficiently constraints 
particular aim able provide template class impose run time space overheads compared built array 
containers generalize stack characters type stack type making template replacing specific type template parameter 
example tt ssttaacckk tt vv iinntt iinntt ssttaacckk iinntt ss vv tt ss constructor ssttaacckk vv destructor tt cc vv cc tt vv tt prefix tt parameter declaration prefixes 
stacks ssttaacckk stack characters ssttaacckk stack complex numbers ssttaacckk stack list integers ff cc cc ccoommpplleexx ccoommpplleexx similarly define lists vectors maps associative arrays templates 
class holding collection elements type commonly called container class simply container 
templates compile time mechanism incurs run time overhead compared hand written code 
algorithms variety semantically similar types set containers support similar operations element insertion access write code works types 
example count occurrences value sequence elements delimited tt iinntt tt iinntt code assumes values type tt compared traverse sequence get element pp retrieves value element pointer iterator pp 
example ff ss iinntt cc ccoommpplleexx iinntt cc ss ss xx iinntt cc 
counts occurrences ccoommpplleexx vector occurrences xx string occurrences list 
type properties specified called iterator 
simplest example iterator built pointer 
standard library containers provide operations returns iterators element element respectively describes half open sequence 
naturally implementations differ different containers implementation details don affect way write code 
large scale programming main part organized key programming styles supported 
namespaces exception handling mechanisms important language features fit classification support large scale programming styles 
ease construction programs separate parts increase importance size programs increase 
exceptions error handling exceptions transfer control place error detected caller expressed interest handling kind errors 
clearly mechanism errors handled locally 
ask eventually handled correctly program proceeds intended considered error 
consequently refer exceptional events simply exceptions language mechanisms provided deal events exception handling 
consider report underflow overflow errors ssttaacckk tt ssttaacckk tt vv iinntt iinntt type report underflow type report overflow ssttaacckk iinntt ss constructor ssttaacckk destructor tt cc check error vv cc raise top place top tt check error vv lower top object thrown caught caller function threw 
example ff ssttaacckk ss pop quiz try pop empty string throw underflow ssttaacckk exception handler ssttaacckk ssttaacckk exception handler ssttaacckk 
exceptions thrown 
block code called try block caught catch clause type 
exceptions error handling stylized regular 
particular hierarchies exception classes group exceptions piece code need deal errors suitable level detail 
example assume class derived ff rr open fn reading throw open file error done 
need know details went wrong need know 
deals errors level abstraction 
note didn deal exceptions 
simply opens file uses 
file open control immediately transferred caller 
similarly read error occur file properly closed destructor control returns 
namespaces namespace named scope 
namespaces group related declarations keep separate items separate 
example separately developed libraries may name refer different items user tt ssttaacckk 
ssttaacckk 
ff ssttaacckk ss stack ssttaacckk ss stack 
repeating namespace name distraction readers writers 
consequently possible state names particular namespace available explicit qualification 
example ff names accessible ssttaacckk ss stack ssttaacckk ss stack 
namespaces provide powerful tool management different libraries different versions code 
particular offer programmer alternatives explicit nonlocal name 
standard library standard library provides basic run time language support allocation run time type information 
standard library minor modifications minimize violations type system 
strings streams support international character sets localization 
framework containers algorithms containers general traversals sorts merges 
support numerical computation complex numbers plus vectors arithmetic operations blas generalized slices semantics designed ease optimization 
main criterion including class library programmer novices experts provided general form add significant overhead compared simpler version facility simple uses easy learn 
essentially standard library provides common fundamental data structures fundamental algorithms 
framework containers algorithms iterators commonly referred stl 
primarily alexander stepanov stepanov 
strings strings input output operations provided directly special language constructs 
standard library provides string types 
example standard strings available standard available iinntt prompt user read name nn output name followed newline example uses standard input output streams operators get put 
streams support variety formatting buffering facilities strings support common string operations concatenation insertion extraction characters strings 
streams strings characters character set 
standard library facilities usually implemented facilities available users 
consequently standard facilities happen inadequate user provide equally elegant alternatives 
containers standard library provides general useful container types allow programmer select container best serves needs application standard container summary variable sized vector doubly linked list queue ssttaacckk stack double ended queue queue sorted value set set value occur times associative array map key occur times containers designed efficient interfaces designed ensure interchangeably reasonable 
example provides efficient operations adding elements back 
allows data eventually needs efficiently accessed subscripting constructed incrementally 
example read points input check new point add point vector containers nonintrusive essentially type container element type 
particular built types iinntt style data structures container elements 
algorithms standard library provides dozens algorithms 
algorithms defined namespace header 
particularly useful selected standard algorithms invoke function element find occurrence arguments find match predicate count occurrences element count matches predicate replace element new value replace element matches predicate new value copy elements copy elements adjacent duplicates sort elements find elements equivalent values merge sorted sequences algorithms applied standard containers built arrays 
fact applied sequence described 
elements mentioned operator mean access element iterator operator mean iterator refer element 
example define general algorithm finds element sequence matches predicate simple definitions ability chose right algorithm compile time type input sequence ability inline simple operations mean generic general algorithms outperform conventional alternatives 
numerics wasn designed primarily numerical computation mind 
lot numerical done standard library reflects 
complex numbers standard library supports family complex number types lines ccoommpplleexx class described 
support complex numbers scalars single precision floating point numbers double precision numbers standard library ccoommpplleexx template ccoommpplleexx ccoommpplleexx 
usual arithmetic operations common mathematical functions supported complex numbers 
example cc ccoommpplleexx ccoommpplleexx iinntt exponentiation ff ccoommpplleexx ccoommpplleexx ccoommpplleexx 
complex numbers supported approximately degree floating point numbers 
vector arithmetic standard designed general mechanism holding values flexible fit architecture containers iterators algorithms 
support mathematical vector operations 
adding operations easy generality flexibility precludes optimizations considered essential serious numerical 
consequently standard library provides vector called general amenable optimization numerical computation tt 
tt tt 
type tt unsigned integer type implementation uses array indices 
usual arithmetic operations common mathematical functions supported 
example tt absolute value ff aa aa aa aa aa aa aa aa aaaa aa dd aa 
type supports blas style generalized slicing 
complicated numeric types constructed 
hundreds thousands programmers essentially application domain 
supported dozen independent implementations hundreds libraries hundreds textbooks technical journals conferences innumerable consultants 
training education variety levels widely available 
early applications tended strong systems programming flavor 
example major operating systems written campbell rozier hamilton berg key parts done 
designed language feature usable code severe time space constraints stroustrup 
allows device drivers software rely direct manipulation hardware real time constraints 
code predictability performance important raw speed 
compactness resulting system 
applications sections code critical acceptable performance 
largest amount code sections 
code maintainability ease extension ease testing key 
support concerns led widespread reliability areas requirements change significantly time 
examples banking trading insurance telecommunications military applications 
years central control long distance telephone system relied call call paid called party routed program kamath 
applications large long lived 
result stability compatibility scalability constant concerns development 
programs uncommon 
wasn specifically designed numerical computation mind 
numerical scientific engineering computation done 
major reason traditional numerical combined graphics computations relying data structures don fit traditional fortran mold barton 
graphics user interfaces areas heavily 
points may greatest strength ability effectively applications require variety application areas 
quite common find application involves local wide area networking numerics graphics user interaction database access 
traditionally application areas considered distinct served distinct technical communities variety programming languages 
widely areas 
furthermore able coexist code fragments programs written languages 
widely teaching research 
surprised correctly point isn smallest cleanest language designed 
clean successful teaching basic concepts realistic efficient flexible demanding projects available organizations collaborations relying diverse development execution environments comprehensive vehicle teaching advanced concepts techniques commercial vehicle putting learned non academic 
iso standards process specified stable supported standard library 
reading immense amount literature object oriented programming object oriented design 
short list books provides information key aspects 
stroustrup tutorial experienced programmers user level standard library presents variety fundamental advanced design programming techniques 
stroustrup describes rationale design choices 
koenig collection essays discussing ways effectively 
barton focuses numeric computation presents advanced uses templates 
cline gives practical answers questions occur programmers starting 
books discuss primarily context design 
booch presents general notion object oriented design martin gives detailed examples booch design method gamma introduces notion design patterns 
books provide extensive examples code 
books aimed experienced programmers designers 
host books aimed people weak programming experience selection varies rapidly specific recommendation inappropriate 
written grateful memory crc standard mathematical tables th edition essential tool status symbol security blanket young math student 
barton john barton lee scientific engineering 
addisonwesley 
reading mass 
isbn 
berg william berg marshall cline mike lessons learned os oo project 
cacm 
vol 

october 
birtwistle graham birtwistle ole johan dahl nygaard simula 
lund sweden 

isbn 
booch grady booch object oriented analysis design 
benjamin cummings 
menlo park california 

isbn 
kent perry robinson high performance scientific computation 
proc 
usenix conference 
portland oregon 
august 
secretariat standard language 

iso standard iso iec 
computer business equipment manufacturers association 
washington dc usa 
secretariat standard language 
iso iec 
information technology council 
washington dc usa 
campbell roy campbell design multiprocessor operating system 
proc 
usenix conference 
santa fe new mexico 
november 
cline marshall cline greg faqs frequently asked questions 
addison wesley 
reading 
mass isbn 
dahl 
dahl nygaard simula common base language 
norwegian computing center 
oslo norway 

dahl 
dahl hoare hierarchical program construction structured programming 
academic press new york 

gamma eric gamma design patterns 
addison wesley 
reading mass 
isbn 
ellis margaret ellis bjarne stroustrup annotated manual 
addison wesley 
reading massachusetts 

isbn 
hamilton hamilton spring nucleus microkernel objects 
proc 
summer usenix conference 
usenix 
kamath kamath ruth jean smith benefits objectoriented technology 
technical journal 
vol 

september october 
kernighan brian kernighan dennis ritchie programming language 
prentice hall 
isbn 
kernighan brian kernighan pascal favorite programming language 
bell labs computer science technical report 
july 
kernighan brian kernighan dennis ritchie programming language second edition 
prentice hall 
isbn 
koenig andrew koenig barbara moo 
addison wesley longman 
reading mass 
isbn 
martin robert martin designing object oriented applications booch method 
prentice hall 
englewood cliffs new jersey 

isbn 
graham design implementation 
computer systems 
vol 

summer 
stepanov alexander stepanov meng lee standard template library 
hp labs technical report hpl 
august 
stroustrup bjarne stroustrup classes data type facility language 
bell laboratories computer science technical report cstr 
april 
sigplan notices january 
stroustrup bjarne stroustrup adding classes exercise language evolution 
bell laboratories computer science internal document 
april 
software practice experience vol 

pp 

stroustrup bjarne stroustrup programming language 
addison wesley 

isbn 
stroustrup bjarne stroustrup object oriented programming 
proc 
th asu conference 
august 
revised version proc 
ecoop may springer verlag lecture notes computer science vol 
revised version ieee software magazine 
may 
stroustrup bjarne stroustrup programming language second edition 
addisonwesley 
reading mass 
isbn 
stroustrup bjarne stroustrup design evolution 
addison wesley 

isbn 
stroustrup bjarne stroustrup history 
history programming languages gibson editors pp 
addison wesley 

isbn 
originally published proc 
acm history programming languages conference hopl 
april 
acm sigplan notices 
march 
stroustrup bjarne stroustrup programming language third edition 
addison wesley 

isbn 
stroustrup bjarne stroustrup history 
handbook programming languages vol 

editor peter 
macmillan technical publishing 

