theory local names martin odersky universitat karlsruhe karlsruhe germany odersky ira uka de revised st acm symposium principles programming languages january extension calculus binding construct local names 
extension properties analogous classical calculus preserves observational equivalences useful basis modeling wide spectrum languages build functional core 
years deal theoretical research interaction imperative programming exempli ed variable assignment functional programming exempli ed higher order functions 
common method works propose calculus extended imperative features carry exploration operational semantics new calculus 
experience devising extended calculus singles name observational property identity essential component ofany extension 
simple extension pure calculus names show examples avor imperative programming captured simple extension prove compatibility extended calculus pure calculus terms operational denotational semantics 
done yale university permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee speci permission 
acm instance milner turing award lecture emphasizes naming key idea calculus 
milner relies names processes requires implementation mapping recapture functional programming 
implementation fully invalidates observational equivalences hold purely functional programming language 
contrast presents syntactic theory names builds directly call name calculus 
basic idea generalize notion constant symbol applied calculus introducing abstraction binds name constant symbols classical applied calculus special case names bound 
new calculus symmetric names bound just placeholder identi ers abstractions names identi ers subject renaming 
di erence lies operations applied 
substitute term identi er compare names equality vice versa 
sense names greatest common denominator programming languages purely functional 
expects theory combines names abstractions help understanding design issues wide spectrum languages build functional core 
far main results names added calculus referentially transparent way 
full remains valid reduction rule 
resulting calculus con uent admits standard evaluation function 
addition names fully compatible functional programming observational equivalence carries im portant practical consequences 
guaranteed equational technique verifying transforming compiling functional programs applicable programs local names 
extension property applies denotational semantics 
model simply typed conservative extension continuous function model pcf 
related 
theory scope close developed independently pitts stark :10.1.1.31.6162
term languages theories strikingly similar operational semantics quite di erent 
nu calculus pitts stark intended model names arise ml style instance 
intended referentially transparent extension functional core discussed section 
monads shares motivation extend functional programming languages new application domains :10.1.1.33.5381:10.1.1.26.2787:10.1.1.47.5271:10.1.1.100.9674
monads solve problem making sequencing explicit needed state updated destructively 
solves orthogonal problem expressing encapsulating 
techniques complement shown example 
syntactic themes addressed context var 
extends scope investigation models achieves considerable simpli cations isolating treatment names issues imperative programming 
separation concerns helped simplify hard proofs observational equivalence theories imperative language 
reason extended version var report 
rest organized follows 
section describes term syntax reduction rules section presents applications local names type reconstruction algorithm implementation state 
section shows properties particular con uence standard evaluation order 
section discusses observational equivalence theory shows conservative extension corresponding theory section gives denotational semantics section concludes 
calculus terms 
term forming productions 
productions rst line classical pure calculus 
productions line particular bound identi ers new countably nite alphabet names 
names fall classes global local 
global name atomic constant 
assume constants denoting boolean values true false 
local name name bound name abstraction contrast case bound identi ers substituted name 
names tested equality 
constants local names operands 
study applied accordingly line productions pairs applied primitive operators pm 
primitive operators unary operators greater arity simulated currying 
assume operators de ned pair 
true pair 
false name 
true name 
false fst snd notational conventions 
bv fv denote bound free identi ers term respectively 
analogously bn fn denote bound free local names term term closed fv fn 
closed terms called programs 
note programs contain free local names may contain constants 
syntactic equality terms modulo renaming reserve convertibility 
ifr notion reduction 
express reduces reduction step 
express reduces zero steps 
express reduces contracting redex syntactic category values comprises constants names pairs abstractions 
observable value answer element nonempty subset alphabet constants 
bound identi ers ames ames ames names ames constants ames bound local names primitive operators terms pm syntax pv 
eq true false 
answers ames context term single hole 
denotes term results replacing hole barendregt take terms di er representatives bound identi ers names equal 
terms write representatives equivalence classes convertible terms 
avoid name capture problems substitutions restrict representatives bound free identi ers distinct employ conventions names 
reduction rules 
gives reduction rules de ne reduction relation terms usual way take 
smallest relation reduction rules contains rules context closed implication rule usual reduction rule pure calculus 
rule expresses rewriting applied primitive operators 
particular primitive operators rewrite rules require existence partial function primitive operators values terms 
arbitrary long result depend body argument function value local argument name 
postulate primitive operator exist closed terms 
values de ned local name abstraction note primitive operators strict requires arguments values 
remaining rules particular rule eq de nes syntactic identity 
rule says pre xes commute 
rule says pre xes distribute pairs 
rule says pre xes absorbed name di ers name bound pre taken rules ect pushing names term exposing term outer structure allowing interact environment 
important consequence rules term reduced value decomposed compared 
words identity name known dynamic scope 
restrict expressiveness possible extend scope variable passing rest computation continuation see examples section 
alternative 
pushing pre xes term consider pull function application 
rules want rules rules regarded axiomatization gensym scheme 
closely correspond operational semantics nu calculus :10.1.1.31.6162
rule equivalent rule adding rule calculus breaks church rosser property 
instance reduces reduces reducts reduce common term 
needs abandoned want tohave con uent calculus di erence nu calculus illustrated looking reductions term suitably restricted rule reduces true reduces term normal form value terms called stuck 
intuitively reduction gets stuck value symbol unde ned outside scope 
restriction required ensure equalities underlying calculus preserved 
preservation extends observational equivalences theorem 
note church 
pairing function primitive term constructor associated primitive projections fst snd 
happened encoded pairs functions 
church encoding pairs de nes pairing function associated projections crucial question happens church encoded form easily veri ed equality derivable reductions 
hand apply projection side get equality derivable shown straightforward computation de nition de nition case projection completely analogous 
summary rule church encoded pairs subsumed long pairs intended projections applied 
data id string unify type type data term id id ap term term lam id term unify case mgu data tid name suc data type tv tid type type err err data suc err tp term type type id type type subst type type type subst subst tp id unify tp ap new upd tp tv upd tp tv tp lam new new mgu type type subst unify tv tv general unifier definition left tp upd tv tv applications type reconstruction algorithm simply typed calculus 
demonstrate extensions functional programming language study example applications type reconstruction algorithm implementation state transformers 
programming notation extends haskell new construct ascii form name type name type typing rule rule new name new example type reconstruction type reconstruction algorithms polymorphically typed languages need de ne fresh identi ers type variables 
purpose name supply usually passed additional argument type reconstruction function 
alternative type reconstruction algorithm simply typed calculus replaces name supply bound names 
code type checker 
types variables tv function types 
identifying part variable tv name type tid synonym name 
main function tp constructs proof goal typing environment term type 
rst arguments tp 
fresh names created clauses tp function abstraction application 
tp written continuation passing style order extend scope names far needed 
result substitution transformer type mapping takes continuation substitution yields failure succeeds result type determined continuation 
example state transformers state transformers write imperative programs functional programming language treating imperative statement function states states possibly intermediate results 
state transformers classi ed global local state xed dynamic 
describe local state transformers embedded terms operate xed state data structure :10.1.1.33.5381:10.1.1.100.9674
contrast describes global state transformers act main program embedded term :10.1.1.100.9674
state dynamic consists heap dynamically created :10.1.1.100.9674
shows implementation local dynamic state 
knowledge rst fully formal treatment class contain similar informal proposals :10.1.1.47.5271
state represented polymorphic function type state name type st 
state state monadic operators state operators return st st name st st st name st pure st deref name st return new upd pure bot deref bot bot upd names type name terms type type name state transformer type st function takes continuation state arguments returns result continuation 
type state state note polymorphic types state state transformers exceed capabilities rst order type systems haskell ml 
cient implementation state transformers treat type st data type hide type state altogether order guarantee state singlethreaded 
implementation just ml style polymorphism 
state transformers form kleisli monad return monad unit bind operator 
leave redundant state parameter just standard continuation monad 
result type continuation observer type state 
function pure oftype sta allows get st monad 
pure runs state transformer argument empty initial state continuation yields rst argument answer 
remaining operations access state 
returns freshly allocated result 
implementation abstraction 
updates state transformers state returning unit value result deref returns current value state concludes rst implementation state surprising simple implementation problem expressing local names taken care 
argue ed implementation really describe state 
trouble spots 
rst problem caused fact state argument linear de nition deref 
access state single threaded application sn body deref gets resolved control passed continuation 
implementation forces evaluation order 
solve problem making continuations strict rst argument 
forces reduced value needlessly drastic 
ensure single threadedness just perform function application evaluation 
problem concerns meaning readers assignments involve names outer block 
implementation accesses errors 
read write performed locally allocated cell named non local name 
name identify locations di erent states 
approach similar semantics state perfectly acceptable theoretical standpoint 
raises implementation problems prevents identi cation names machine addresses 
problems solved slightly re ned implementation marks stored terms data constructor 
modify type state follows type state name data implementation state operators new case deref case upd bottom upd new implementation case construct body deref forces evaluated control passed case branch 
takes care rst problem 
readers writers require entry accessed exists local state allocates freshly created 
takes care second problem 
contribution implementation subtle 
consists abstraction code equality test function upd 
presence local names important modeling dynamic local state simple way 
see try model local state local names representing heaps arrays indices say 
implementation local state distinguish variables de ned different pure blocks 
necessary guard access non local variables export local variables block referentially opaque operations 
straightforward scheme distinguish variables de ned di erent blocks pass name supply block block variables de ned tagged unique identi er 
problem scheme poisoning ect environment surrounds block 
function pass arguments function contain pure blocks subterms 
clear gained method program contains single global state imperative way top 
reduction section details fundamental laws reduction reduction con uent standard evaluation order 
treatment largely follows assume reader familiar fundamental de nitions theorems 
proofs chapters sketched left detailed treatment see 
con uence show section analogues finite developments church rosser theorems calculus 
de nition extension labeled redexes labeled reduction rules 

reduction relation generated eq theorem finite developments 
strongly normalizing 
proof proof similar proof nite developments pure calculus ch 
construct family non negative decreasing weightings show reduction step maps term decreasing weighting term smaller decreasing weighting 
theorem notion reduction church rosser term 
proof case analysis reduction rules coupled case analysis relative position redexes shows notion reduction weakly church rosser commutes theorem newman lemma ch church rosser lemma hindley rosen ch implies proposition 
evaluation programmers interested proving equality terms evaluating reducing answer 
de ne computable evaluation function maps term answer felleisen evaluation function de ned means context machine 
step machine separates argument term deterministically evaluation context redex performs reduction redex 
evaluation stops argument answer 
evaluation contexts de ned follows em pe rst clauses generate evaluation contexts applied call name calculus clause particular de nition 
deterministic reduction relation 
terms smallest relation satis es 

simple inspection productions establishes 
deterministic proposition redexes evaluation contexts redex head redex term evaluation context redex head redex called internal redex 
reduction internal redexes keeps head internal redexes separate sense lemma program 
redex head redex ii residual head redex head redex iii residuals internal redex internal redexes theorem correspondence program answer 
proof direction follows immediately 
prove assume 
shows rst intermediate result term 

reduction sequence 
consists internal reductions 
result corresponds main lemma curry feys standardization theorem ch exactly proof 
proof uses theorem nite developments theorem lemma equivalent lemma 
proposition follows observation internal reduction ends answer observational equivalence observational equivalence comprehensive notion equivalence program fragments 
intuitively terms observationally equivalent distinguished experiment 
experiments wrap term arbitrary context binds free identi ers local names term 
observation allowed experiment resulting program reduces answer 
de ne observational equivalence arbitrary extensions applied calculus 
equational theory extends term language terms set answers ans ames 
assume ames nite 
de nition terms terms observationally equivalent written contexts terms closed answers ans proposition observational equivalences fn de nition observational extension terms terms terms extension conservative implication strengthened equivalence 
main result section states observational extension proof relies construction syntactic embedding syntactic embeddings rst de ned simpli ed de nitions 
de nition inductively de ned term language terms term formed inductive de nitions 
terms contexts extended terms 
de nition term closed fv 
contain free occurrences local names 
de nition syntactic embedding extensions terms terms ans ans 
syntactic mapping extended terms extended terms 
syntactic embedding satis es requirements 

preserves closed subterms 
contexts closed terms 
preserves semantics 
closed terms answers theorem extensions terms terms ans ans 
syntactic embedding observational extension 
lemma shown 
lemma exists syntactic embedding theorem implies theorem conservative observational extension proof lemma syntactic embedding theorem implies observational extension extension conservative follows directly observation convertibility conservative extension convertibility 
denotational semantics develop denotational semantics typed version results adding abstractions pcf terms 
semantics extension continuous function model pcf 
sense follows spirit previous sections studied extension calculus theory 
possible worlds semantics world characterized nite set names :10.1.1.100.9674
intuitively names available program evaluation 
new twist meaning term world intersection meaning possible worlds extend new suitable location 
location suitable clash locations parts program 
trying trace locations explicitly simply choose best nite set possible candidate locations information ordering 

name consequence theorem upper bound exists 
meaning constructs pcf 
example meaning bottom name corresponds term stuck reduction semantics 
re ects fact identity name known scope 
example meaning false 
range ame 
chosen 
false 
value name false 
implies false 
rest section notions precise 
particular need give semantic characterization functions belong world informally functions access locations deal fact lub chain functions access strictly increasing sets locations accesses nite number locations member world 
consequence domains form locally complete partial order cpo 
base discussion typed version typing rules 
assume usual constants operations pcf listing typing rules explicitly 
de nition ame countably nite set names ame 
exchange xm unique logical relation names id name ame ame abs appl nu mn eq typing rules id abs 
appl mn 
ame ame ame bool name nu name ame name name 
eq bool ame ame elements ground types xm 
exchanges property closed intersections unions lemma ai xm bi ai xm bi ii fbi ig directed sets ai xm bi bi ai xm de nition smooth set value smooth fm ame ame semantic function xm xg support complement smooth set support ame smooth informally support name set names accessed function 
characterization support smooth easier proofs lemma smooth smooth equivalence de ne smooth right hand side monotonic smooth 
example support name fng 
support function def fmg 
derived follows name di erent xm proves xm nf shows smooth 
hand arbitrary names di erent easy check xk lemma smooth 
summary smooth support fmg 
de nition type nite name set domains de ned follows ame 
ground types wis usual interpretation pcf 
lc ff 
support lc 
denotes locally continuous functions fin name interpretation terms de ned 
set type hypotheses nite set names 
environment function identi ers names maps identi er dom value maps name dom unique name semantic function takes arguments type judgement anda environment yields value theorem valid type judgements nite name sets environments proof standard induction type derivations 
lemma needed abstraction case 
lemma ame 
valid type judgement 
environments dom xm xm theorem de nes computationally adequate model proof veri es easily reductions equalities model 
show adequacy adapt plotkin adequacy proof pcf 
say computable conditions holds 
closed ground type implies 
closed type computable closed computable terms type 
free computable closed computable terms type 
ame free computable 
structural induction shows term computable implies proposition 
model fails fully 
counter example full abstraction follows 
consider program fragment arbitrary boolean ranged function de ned 
easy case analysis shows fragment observationally equivalent fragments distinguished model 
seen substituting function de ned 
true support false similar example suggested peter hearn 
remains seen advances models algol languages applicable setting studied reduction semantics observational equivalence theory denotational semantics theory functions create local names 
equational theories conservative extension corresponding standard theory respectively pcf 
sense fully compatible functional programming 
evidence useful foundation modelling constructs far outside domain functional programming 
instance example shows imperative programming mutable local variables expressed interesting see applications calculus logic concurrent programming 
supported part darpa 
vincent paul hudak peter hearn dan rabin comments earlier versions 
dan rabin particular helped improve presentation considerably 
john launchbury misra david turner phil wadler commented helpful discussions 
barendregt 
lambda calculus syntax semantics volume studies logic foundations mathematics 
north holland amsterdam revised edition 
crank felleisen 
parameter passing lambda calculus 
proc 
th acm symposium principles programming languages orlando florida pages january 
felleisen hieb 
revised report syntactic theories sequential control state 
theoretical computer science 
hudak rabin 
mutable datatypes state 
research report yaleu dcs rr yale university department computer science july 
launchbury :10.1.1.47.5271
lazy imperative programming 
acm sigplan workshop state programming languages copenhagen denmark pages june 
yale university research report yaleu dcs rr 
mason talcott 
operational equivalence presence side ects 
ieee symposium logic computer science pages asilomar california june 
meyer 
fully semantics local variables preliminary report 
proc 
th acm symposium principles programming languages pages 
acm acm press januar 
milner 
functions processes 
rapport de recherche inria sophia antipolis february 
milner 
elements interaction 
communications acm january 
turing award lecture 
moggi 
computational lambda calculus monads 
proceedings ieee symposium logic computer science pages 
ieee june 
odersky 
syntactic theory local names 
research report yaleu dcs rr department computer science yale university may 
odersky rabin 
callby name assignment lambda calculus 
research report yaleu dcs rr department computer science yale university may 
odersky rabin hudak 
call name call value lambda calculus 
proc 
th acm symposium principles programming languages pages january 
hearn tennent 
relational parametricity local variables 
conference record twentieth annual acm sigplan sigact symposium principles programming languages charleston south carolina january pages 
acm press january 
oles :10.1.1.100.9674
category theoretic approach semantics programming languages 
phd thesis syracuse university august 
peyton jones wadler :10.1.1.100.9674
imperative functional programming 
proc 
th acm symposium principles programming languages pages 
acm press january 
pitts stark :10.1.1.31.6162
observable properties higher order functions dynamically create local names 
acm sigplan workshop state programming languages copenhagen denmark pages june 
yale university research report yaleu dcs rr 
plotkin 
lcf considered programming language 
theoretical computer science 
reynolds 
preliminary design programming language forsythe 
technical report cmu cs carnegie mellon university june 
riecke 
delimiting scope ects 
proc 
conf 
functional programming computer architecture pages june 
swarup reddy ireland 
assignments applicative languages 
hughes editor func tional programming languages computer architecture pages 
springer verlag august 
lecture notes computer science 
wadler :10.1.1.33.5381
comprehending monads 
proc 
acm conf 
lisp functional programming pages june 
wadler :10.1.1.100.9674
essence functional programming 
proc th acm symposium principles programming languages pages january 
weeks felleisen 
orthogonality assignments procedures algol 
proc 
th acm symposium principles programming languages pages 
acm press january 
