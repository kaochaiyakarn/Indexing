efficient collision detection complex deformable models aabb trees van den bergen department mathematics computing science eindhoven university technology box mb eindhoven netherlands mail win tue nl november scheme exact collision detection complex models undergoing rigid motion deformation 
scheme relies hierarchical model representation axis aligned bounding boxes aabbs 
aabb trees shown slower oriented bounding box obb trees 
describe way speed overlap tests aabbs collision detection rigid models difference performance representations greatly reduced 
furthermore show quickly update aabb tree model deformed 
find aabb trees method choice collision detection complex models undergoing deformation 
fact slower test faster build storage obb trees aabb trees reasonable choice rigid models 
keywords computer animation collision detection hierarchical data structures deformable models hierarchies bounding volumes provide fast way perform exact collision detection complex models 
examples volume types purpose spheres oriented bounding boxes obbs polytopes dops :10.1.1.35.3436
collision detection scheme relies hierarchical model representation axis aligned bounding boxes aabbs 
aabb trees boxes aligned axes model local coordinate system boxes tree orientation 
aabb trees shown yield worse performance obb trees rigid models :10.1.1.35.3436
way speed overlap testing relatively oriented boxes pair aabb trees 
results performance aabb tree close obb tree performance collision detection rigid models 
furthermore show quickly update aabb tree model deformed 
updating aabb tree deformation considerably faster rebuilding tree results tight fitting hierarchy boxes types deformations 
updating obb tree significantly complex find aabb trees method choice collision detection complex models undergoing deformation 
fact slower test faster build storage obb trees aabb trees reasonable choice rigid models 
comparison previous algorithm deformable models algorithm expected perform better deformable models placed close proximity 
cases algorithms show time complexity roughly linear number primitives 
approach smaller constant arithmetic operations triangle triangle meshes 
algorithm better suited collision detection mix rigid deformable models linear number primitives deformable models 
source code scheme released part software library interference detection solid version information obtain complete source code documentation solid available www acm org papers 
building aabb tree aabb tree consider obb tree described binary tree :10.1.1.35.3436
structures differ respect freedom placement bounding boxes aabbs aligned axes model local coordinate system obbs arbitrarily oriented 
added freedom obb gained considerable cost storage space 
obb represented scalars scalars matrix representing orientation scalars position extent aabb requires scalars position extent 
aabb tree model requires roughly half storage space obb tree model 
aabb tree constructed top recursive subdivision 
recursion step smallest aabb set primitives computed set split ordering primitives respect chosen partitioning plane 
process continues subset contains element 
aabb tree set primitives leaves internal nodes 
step choose partitioning plane orthogonal longest axis aabb 
way get fat subdivision 
general fat aabbs cube yield better performance intersection testing assumption boxes tree mutually overlap little possible query box overlap fewer fat boxes thin boxes 
position partitioning plane longest axis choosing coordinate longest axis partitioning plane intersects axis 
split set primitives negative positive subset corresponding respective halfspaces plane 
primitive classified positive midpoint projection axis greater negative 
shows primitive straddles partitioning plane depicted dashed line 
primitive classified positive 
seen subdivision method degree overlap aabbs subsets kept small 
choosing partitioning coordinate tried heuristics 
experiments aabb trees number polygonal models showed general best performance achieved simply choosing median aabb splitting box equal halves 
heuristic may take time worst case build aabb tree primitives usual case primitives distributed uniformly box building aabb tree takes log time 
heuristics tried didn perform subdividing set min max mid primitive classified positive midpoint coordinate axis greater 
primitives sets equal size building optimally balanced tree building tree larger subset twice large smaller overlap subsets aabbs projected longest axis minimized 
occasionally may occur primitives classified side plane 
happen frequently set primitives contains elements 
case simply split set subsets equal size disregarding geometric location primitives 
building aabb tree model faster building obb tree model estimation best orientation obb set primitives requires additional computations 
building obb tree takes times time building aabb tree shown section 
intersection testing intersection test models done recursively testing pairs nodes 
visited pair nodes aabbs tested overlap 
nodes aabbs overlap traversed 
nodes leaves primitives tested intersection result test passed back 
nodes leaf internal node leaf node tested intersection children internal node 
nodes internal nodes node smaller volume tested intersection children node larger volume 
heuristic choice unfolding node largest volume results largest reduction total volume size aabb tests lowest probability tested boxes overlapping 
local coordinate systems pair models may arbitrarily oriented need overlap test relatively oriented boxes 
fast overlap test oriented boxes gottschalk :10.1.1.35.3436
refer test separating axes test sat 
separating axis boxes axis projections boxes axis overlap 
existence separating axis pair boxes sufficiently classifies boxes disjoint 
shown disjoint pair convex dimensional polytopes separating axis orthogonal facet polytopes orthogonal edge polytope 
results potential separating axes need tested pair oriented boxes facet orientations box plus pairwise combinations edge directions 
sat exits soon separating axis 
axes separate boxes boxes overlap 
refer original details sat implemented uses number operations 
discussion important note implementation requires relative orientation represented matrix absolute value matrix absolute values matrix elements computed performing axes tests 
general testing aabb trees intersection requires box overlap tests testing obb trees models smallest aabb set primitives usually larger smallest obb 
tested pair boxes obb trees normally different relative orientation matrix operations computing orientation absolute value repeated tested pair boxes aabb trees relative orientation tested pair boxes needs computed 
performance aabb tree bad expect 
empirical results section show exploiting feature intersection testing aabb trees usually takes longer obb trees cases lot overlap models 
tree types time consuming operation intersection test sat see room improvement 
obb tree aabb tree distribution axes sat exits case boxes disjoint 
axes correspond facet orientations boxes axes correspond combinations edge directions 
case boxes disjoint probability sat exiting axis corresponding pair edge directions 
shows distribution separating axes sat exits tests high probability models intersecting 
obb aabb tree box overlap tests resulted positive result 
remove sat axis tests corresponding edge directions get incorrect result time 
box overlap test quick rejection subsets primitives exact determination box overlap necessary 
box overlap test returns overlaps results nodes visited box overlap primitive intersection tests 
testing fewer axes sat reduces cost box overlap test increases number box primitive pairs tested 
apparently trade test cost number tests sat tests fewer axes 
order examine trade favor performance repeated experiment sat tests facet orientations 
refer test sat lite 
results experiment shown section 
aabb tree performance benefits cheaper box overlap test cases obb tree shows hardly change performance 
explained higher cost box overlap test obb tree due extra matrix operations 
aabb trees deformable models aabb trees lend quite easily deformable models 
context deformable model set primitives placements shapes primitives model local coordinate system change time 
typical example deformable model triangle mesh local coordinates vertices time dependent 
rebuilding tree deformation usually lot faster boxes tree 
property aabbs allows aabb tree efficiently bottom manner 
set primitives subsets smallest aabbs respectively smallest aabb enclosing smallest aabb property illustrated 
bounding volume types seen far aabbs share property dops 
smallest aabb set primitives encloses smallest aabbs subsets partition set 
property aabbs yields straightforward method hierarchy aabbs deformation 
bounding boxes leaves recomputed parent box recomputed boxes children strict bottom order 
operation may implemented postorder tree traversal internal node children visited bounding box recomputed 
order avoid overhead recursive function calls implement differently 
implementation leaves internal nodes aabb tree allocated arrays nodes 
able number primitives model static priori known 
furthermore tree built internal child node index number array greater parent index number 
way internal nodes properly iterating array internal nodes reversed order 
aabb takes constant time internal nodes leaves aabb tree time linear number nodes 
aabb tree triangle mesh takes arithmetic operations triangle 
experiments shown models composed triangles aabb tree times fast rebuilding 
drawback method 
due relative position changes primitives model deformation boxes tree may higher degree overlap boxes rebuilt tree 
rebuilt vs rebuilding model deformation illustrates effect model 
higher degree overlap boxes tree results nodes visited intersection test worse performance intersection testing 
observe higher degree overlap boxes tree radical deformations excessive twists features blown proportion extreme forms self intersection 
deformations keep adjacency relation triangles mesh intact mesh torn significant performance deterioration intersection testing severe deformations 
due fact degree overlap increases boxes maintained high tree boxes tested ones maintained close leaves 
performance total cost testing pair models represented bounding volume hierarchies expressed cost function total wing teapot models experiments total total cost testing pair models intersection number bounding volume pairs tested overlap cost testing pair bounding volumes overlap number primitive pairs tested intersection cost testing pair primitives intersection 
parameters cost function affected choice bounding volume tight fitting bounding volume type obb results low relatively high aabb result tests performed value lower 
order compare performances aabb tree obb tree conducted experiment pair models placed randomly bounded space tested intersection 
random orientations models generated method described shoemake 
models positioned placing origin model local coordinate system randomly inside cube 
probability intersection tuned changing size cube 
tests probability set approximately 
obb tree model total torus wing teapot aabb tree model total torus wing teapot table performance aabb tree vs obb tree sat 
respectively total number box triangle intersection tests test times microseconds respectively box triangle intersection test total time seconds spent testing box intersections total time triangle intersection tests total total time seconds performing intersection tests 
experiment gottschalk rapid package obb tree tests 
aabb tree tests modified rapid removed unnecessary matrix operations 
experimented models torus composed triangles shaped wing space craft composed triangles archetypical teapot composed triangles shown 
test performed random placements intersection tests resulting approximately collisions tested models 
table shows results tests obb tree aabb tree 
tests performed sun ultrasparc mhz compiled gnu compiler optimization 
aabb tree requires approximately twice box intersection tests obb tree time intersection testing cases longer aabb trees 
exception torus model aabb tree uses times time obb tree 
apparently obb tree excels fitting models smooth surface composed uniformly distributed primitives 
furthermore observe due tighter fit obb tree requires fewer triangle intersection tests triangle intersection tests placement torus teapot 
obb tree model total torus wing teapot aabb tree model total torus wing teapot table performance aabb tree vs obb tree sat lite repeated experiment separating axes test tests axes corresponding facet orientations referred sat lite 
results experiment shown table 
see performance increase average aabb tree change performance obb tree marginal 
ran tests see time aabb tree deformable model compares intersection testing time 
testing platform triangle mesh composed large number triangles takes microseconds triangle 
instance pair models composed triangles takes milliseconds times amount time takes test models intersection 
bottleneck models simulated environment deformed frame 
environments moving models deformed frame take time total intersection testing 
conclude comparison performance aabb tree vs obb tree deformable models 
table presents overview times operations tree types 
see deformable models obb faster intersection test easily going high cost rebuilding obb trees models deformed 
cases aabb trees time takes rebuild obb tree yield better performance preferred method collision detection deformable models 
operation torus wing teapot build obb tree build aabb tree aabb tree ms ms ms test pair obb trees ms ms ms test pair aabb trees ms ms ms table comparing times number operations implementation notes solid aabb trees rigid deformable models 
order comply structures motions specified vrml solid allows translations rotations nonuniform scalings models 
note nonuniform scaling considered deformation require 
order able nonuniformly scaled models changes aabb overlap test needed 
bx relative transformation model local coordinate system local coordinate system model matrix representing orientation scaling vector representing translation 
nonuniformly scaled models rely matrix orthogonal sat lite respective absolute values needed 
implementation compute matrices intersection test pair models tested pair boxes 
added cost allowing nonuniformly scaled models negligible absolute value computed tested pair models 
worth mentioning aabb trees larger percentage time primitive intersection tests obb trees vs 
respect idea triangle intersection test moller shown faster rapid 
bell carey 
vrml virtual reality modeling language 
www vrml org specifications vrml 
gottschalk 
rapid robust accurate polygon interference detection system 
www cs unc edu geom obb html 
software library 
gottschalk 
separating axis theorem 
technical report tr dept computer science unc chapel hill 
gottschalk lin manocha :10.1.1.35.3436
obbtree hierarchical structure rapid interference detection 
proc 
siggraph pages 
hubbard 
approximating polyhedra spheres time critical collision detection 
acm transactions graphics july 
klosowski held mitchell 
efficient collision detection bounding volume hierarchies dops 
ieee transactions visualization computer graphics 
moller 
fast triangle triangle intersection test 
journal graphics tools 
palmer 
collision detection animation sphere trees 
computer graphics forum 
shoemake 
uniform random rotations 
kirk editor graphics gems iii pages 
academic press boston ma 
smith kitamura kishino 
simple efficient method accurate collision detection deformable polyhedral objects arbitrary motion 
proc 
ieee virtual reality annual international symposium pages 
hooper greenberg 
improved computational methods ray tracing 
acm transactions graphics jan 
zachmann 
rapid collision detection dynamically aligned dop trees 
proc 
ieee virtual reality annual international symposium pages 

