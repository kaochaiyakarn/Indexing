pretty printing galley concepts document formatting combinators wolfram institut fr fr informatik universitt der germany mail informatik muenchen de 
galleys introduced jeff kingston key concepts underlying advanced document formatting system lout 
lout built lazy functional programming language galley concepts implemented part language defined informally 
formalisation document formatting combinators galley concepts purely functional programming language haskell 
related pretty printing established topic functional programming community targeted appropriate layout data structures main applications user friendly display internal data structures compilers example creation error messages 
hughes turned development pretty printing combinators fine art 
combinators subsequently improved peyton jones 
wadler simpler design set optimal pretty printers come forth 
document placement footnotes simply outside scope pretty printing discussed papers mentioned far 
best known document formatting system scientific community probably 
built large number primitives incorporate fine points art typesetting 
offers access primitives imperative programming language dynamic binding weak structuring capabilities short considered programming language impure possible 
document gaining popularity jeff kingston lout :10.1.1.24.9979
lout primitives version number grown small 
programming language available programming document format definitions small lazy functional programming language innovative definition name visibility mechanism flexible composition aligned objects versatile cross concept important galley concept 
galley abstraction allows direct part document places document example footnotes implemented galleys directed targets bottom page 
galley abstraction kingston allows essentially text flow tables contents indices lists defined galleys lout document formatting system need built concept pages pages defined programming language objects certain size containing certain targets 
galley concept defined outside functional programming language lout described informally informally expert guide implemented give completely formal definition galley movement pure functional programming language haskell 
disregarding aspects unrelated galley flushing able small set basic document combinators satisfactorily capture essential behaviour galleys lout implemented relative ease 
overview document formatting combinators start giving brief overview reflect central features lout galleys document formatting combinators 
exposition centred objects datatype shall detail section data object important object null object leaves trace null object able build interesting documents decide basic constituents 
adhering lout nomenclature call components 
consider lists lines components general just lines allows experiment components different heights type component string want able turn components objects prefix objects components singleton component object prefix component object object obviously define singleton prefix singleton prefix null general means compose objects concatenation object object object expert guide lout kingston defines galley object plus cross points object appear :10.1.1.24.9979
cross occurring galleys limited referring name direction type galley string direction object data direction preceding cross taken mean list targets name starting occurence respective direction continuing forward 
name clash remember import prelude hiding null 
lout third mode possible bibliographic list entries 
galley considered object sends outgoing galley behaves null lout galley built defining symbol galley object body definition special target parameter abbreviations 
galley galley object lout target receptive galleys built galley symbol represent galley possible target galleys 
combinator introducing targets target string object combinators sufficient definition pages 
obviously page contain targets text footnotes essential feature page restricts size received targets 
size restriction achieved combinator high int object object footnote section appears start space horizontal line followed list footnotes achieve prefix 
footnote footnote section disappear lout concept receptive symbols receptive symbol symbol defined directly indirectly contain target receptive symbols replaced null contained target receives galley 
framework lacks concepts symbols definitions effect receptive symbols explicit combinator lets argument object appear receives galley delay object object lout relies recursive definitions implementing lists pages footnotes lout uses special semantics recursion includes recursive objects delayed expanding space sufficient 
change semantics recursion haskell provide combinator building recursive objects abstain haskell recursion object definitions recurse object object object need function formats document result list components usually shall stand pages force object component simple document format combinators sufficient build document formats analogous explain galley concepts :10.1.1.24.9979
list pages hold document simple recursion page concatenated recursive call page restricted height object containing target text concatenated footnote section recurse page page high target textplace footsect footnote section delayed contains recursive list footnote targets haskell infix operator low priority right associative function application footsect delay prefix recurse target kinds targets simple documents considering correspondingly kinds galleys occur main text document footnotes text galley textplace preceding footnote galley sample document constructed ease purcell prefix purcell footnote fn body fn singleton blom eric 
great composers oxford body foldr prefix null 
format running example evaluating expression force text purcell displaying result pleasing manner purcell regarded world musical perfectly classics find world music normal natural omit england supposed foreign students english master :10.1.1.24.9979
mere province 
musical history produces indifferent acknowledge british composer performer musical genius considered freak 
blom eric 
freak great composers 
henry purcell 
oxford 
choice fifteen implementation objects modeled entities essentially prepared react kinds stimuli evaluation request tries extract component available space reception request asks object receive galley directed target contained object consider error send galley object contain target 
reactions take account available space expressed constraint boolean forcing parameter influences eagerness object behaviour depends object position inside concatenation chains 
furthermore need know receiving targets object contains open delayed recursive subobjects minimum height 
define data object object eval bool constraint receive bool constraint galley string string height int type bool galley object targets result evaluating disappearing object disappears trace null 
suspended object say going example targets attached recursive delayed objects 
forcing set true call eval object suspend usually choose disappear 
object wants yield component large current constraints 
sending list galleys dispatched 
yielding non empty component fitting current space constraints yielded 
disappearing results carry continuation object evaluation attempt change object data disappearing suspended obj object obj object sending gall galley obj object yielding comp component obj object measure constrained current setting height objects possibility object evaluated constraints define type constraint int modelling lout constraint datatype contain information allowed height width settings font spacing information 
define global document formatting function forces evaluation impose constraints decide simple discard stray galleys force object component force case eval true disappearing yielding force sending gs force possible results receive semantics true gs means galley received triggered galleys gs resulting object 
false gs means galley received usually insufficient space object triggered galleys gs may undergone changes deciding receive anymore refer 
argument galley received may modified discarded sent gs 
null object ready disappear immediately leaving trace documents error occur objects sent galleys receive null object null object eval forcing disappearing receive forcing null height singleton object yields component space signals 
object fits constraint respectively decreasing constraint amount indicated component object appropriately defined class functions 
constraint bool constraint constraint give explicit definition singleton singleton component object singleton object eval forcing 
yielding null receive forcing singleton height length space considerations apply prefix inherits behaviour prefixed object prefix component object object prefix object eval forcing 
yielding receive forcing prefix receive forcing height length height updating object prelude quality easy see equation singleton prefix null hold 
galley considered object sends outgoing galley behaves null galley galley object galley object eval forcing sending null receive forcing galley height start definition object concatenation introduce auxiliary combinator shall needed 
component object suffix delivers object yields disappears suffix component object object suffix object eval forcing case eval forcing disappearing eval singleton forcing obj suffix obj receive forcing suffix receive forcing height length height concatenation objects single object main tasks communication galleys sent object direction sent object context 
space negotiation objects placed constraint may grow long space 
final result evaluating object object component object natural asymmetry imposed seemingly symmetrical tasks 
resolve asymmetry forcing parameters eval receive indicated galleys sent objects concatenation tree galleys arriving left leaf expanded galleys expanded far possible forced arrival 
ensures example footnotes allowed grow sent subsequent main text sent competing textplace target allowed grow space 
objects evaluated suspended objects left waiting right leaf 
evaluation forced targets delayed objects disappear galley reached galley 
able determine document sample format waiting right 
communication galleys auxiliary definitions 
communication state contains objects flag signalling galley received type bool object object state simple state monad type type stoc galley provide function combine results stoc transformers galley rcv gs rcv gs communication adjacent objects respect direction galleys sent 
furthermore take care object longer concatenation receives delayed manner objects receive forcing set 
definitions symmetric forcing parameter passed receive calls second object concatenation receives forcing true inherits bool constraint galley stoc forcing name preceding forcing name rcv name targets rcv gs receive true forcing gs rcv rcv forcing name forcing name preceding rcv name targets rcv gs receive forcing forcing gs rcv rcv iterated communication achieved simple fold function state monad gs gs gs gs gs gs bool constraint galley stoc forcing forcing forcing forcing definition receive concatenation looks open delayed receptors components decides accordingly galley going sent 
object object object object eval receive forcing name send gs receive forcing forcing gs send gs receive true forcing gs name elem send name elem send name elem send name elem send case preceding height height height evaluating concatenation objects evaluate forcing perform communication result galleys sent evaluation 
case object suspends straight forward 
case evaluate second object hope resulting communication relieves suspension 
resume evaluation combined object concatenated object forced communication succeeded evaluation second object yielded component order enable second object evaluated necessary suffix stick component object recombination 
object object bool constraint forcing case eval false disappearing eval forcing yielding yielding sending gs case false gs false rcv eval forcing rcv gs sending gs suspended case eval forcing disappearing forcing eval forcing suspended suspended suspended forcing suspended yielding eval suffix forcing sending gs case false gs false true eval forcing false error empty sending gs sending gs function high constrains height object argument amount indicated integer argument 
object argument fit indicated height remainder object discarded placeholder appropriate height substituted 
result filled specified height 
filling specified height involves recursively evaluating remaining objects yielding concatenating components single component task delegated auxiliary function 
small functions replicate fill take repeat resulting object placed tightly constrained environment fit remains continuation object 
high int object object high eval forcing case eval forcing just yielding fill high object large null disappearing yielding null suspended suspended high sending gs sending gs high yielding length case eval high forcing yielding yielding sending gs sending gs suspended suspended error high recursive call 
disappearing yielding fill null object eval forcing case eval forcing just receive forcing high receive forcing just height auxiliary function tool allows high assemble components exactly right height objects yield small irregular components modifying argument object concatenate argument component yielded component component object object object eval forcing case eval forcing disappearing yielding null yielding yielding obj obj receive forcing 
receive forcing false forward height length height galley received lack space sent looking target turned forward purpose imagine overflowing text example sect 
finds page initially preceding target target forward galley galley forward name name galley reached target transforms target concatenation consisting object carried galley target ready receive galleys directed 
galley object fit space target fact excluded reception time sent target name original target disappears 
purpose provide auxiliary combinator shall definition target attaches received object target name 
important case consider attached object concatenation concatenation takes account heights components deciding yield component 
attached object large space currently resides send target evaluate attached object size constraint may yield component internal size considerations isempty determines constraint just attach string object object attach name attach attach object eval forcing case eval forcing disappearing disappearing error attach constraints 
suspended isempty sending name attach null suspended attach sending gs sending gs attach yielding 
yielding attach sending name attach prefix null receive forcing attach receive forcing height target function build basic receptive objects 
disappears evaluation forced suspends 
receiving distinguish reception forced remember object concatenation perform forced reception 
motivation example size footnote needs known text canbe allowed fill remainder page 
expand far possible galley reached target 
expansion involves evaluation constraints part fit current target sent target 
target string object target name object eval forcing forcing disappearing case just disappearing suspended receive forcing name case name name target forcing true attach name case eval false disappearing true suspended true attach name error target constraint 
sending gs true gs attach name yielding 
name rcv gs receive prefix forcing true gs false name prefix null name height line definition receive reflects fact space component galley arriving target galley sent target forward direction original target disappears 
objects built recurse delay delayed objects expand contained target receives galley 
disappear forced suspend normal evaluation 
small concession forcing galleys lout directly consider receptive recursive objects 
behaviour recursive objects lout apparently integrated easily forcing strategy current 
connected forcing parameters allow disappear clear space expansion 
eventually objects forced away strictly necessary effect allows pages flushed earlier 
recursive object asked receive galley checks single instance body recursion null substituted recursive call receive galley size constraints 
possible recursion unfolded level galley sent result note tentative evaluation possible problems provoke side effects 
reception impossible galley sent recursive object disappears footnotes appear order 
recurse object object object recurse ff ff ff ff null targets ff object eval forcing forcing isempty 
disappearing suspended receive forcing name case just false forward null name elem case receive ff forcing false gs false forward null receive forcing recurse height receives expansion recursive object contains open targets targets body delayed targets recursion 
objects built delay considerations apply delay object object delay object eval forcing forcing isempty 
disappearing suspended receive forcing name case just false forward null name elem case receive forcing false gs false forward null delay height targets extensions example document format footnote page little material footnote appended immediately material pushed bottom page 
corresponding gap modes lout influence space behaviour concatenation purposes want define recurse prefix insert top footsect pushing footnote sections bottom page 
mentioned un receptive recursion evaluation strategy 
introduce combinator roughly corresponding lout symbol object take space available long space finite object object object eval forcing case eval forcing just eval forcing just case eval forcing disappearing yielding null sending gs sending gs suspended suspended yielding yielding length receive frc receive frc height height modify definition page accordingly footnotes pushed bottom page page high target textplace footsect extension allow number pages 
give variant recurse combinator uses functions arbitrary domains objects just objects 
definition unchanged framework needed set expanded objects object object object ff ff ff ff const null targets ff object modifications necessary obtain numbered pages easy numbered page obtained haskell function page number delivering numbered page including list numbered pages recursion function maps page list generator page list generator generates numbered page concatenated recursive call incremented page number int object high prefix show target textplace footsect object concluding remarks motivated galley concept implemented lout haskell definitions elementary advanced document formatting combinators 
put document include page numbering footnotes tables contents simple declarative intuitive way 
exactly behaviour lout tried construct self contained intuitively motivated explainable implementation document formatting combinators 
definitions combinators trivial may elegant fitted space constraints set show elegance kingston galley abstraction may reflected purely functional formalisation 
especially extension recurse object yielding functions shows document formatting profit embedded full fledged functional programming language just domain specific languages 
needs done able reflect abstractions underlying lout haskell setting combinators may serve illuminate little bit path jeff kingston successor lout haskell implementation lout successor allow compiled document formats document needed interpreted 
furthermore document format authors choice program lout directly haskell full power haskell fingertips 
concise functional specification serve rigorous accessible documentation lout mailing list abounds postings users intricacies galley flushing algorithm 
interesting application galley concept literate programming parts directed different targets program code files documentation section headings directed place section table contents 
extension easier explore haskell setting implementation point take care relied absence side effects definition recurse output files happen receives recurse forcing strategy adapted 
document formatting combinators purely functional interaction complicated easy find reasons unexpected behaviour development especially relation cause effect may indirect obscure 
author access usable haskell debugger tracer haskell definitions translated term graph rewriting rules graphically interactive strongly typed second order term graph transformation system hops 
able watch things go wrong invaluable tracking subtle design errors 
typeset lout document formatting system 
lout definitions auxiliary haskell program provided author turn literate program haskell code generated lout available www url informatik muenchen de haskell html 
pablo doaitse swierstra 
optimal pretty printing combinators 
url www cs ruu nl groups st software pp 

john hughes 
pretty printing exercise functional programming 
bird morgan woodcock eds mathematics program construction pages 
lncs 
springer verlag 

john hughes 
design pretty printing library 
jeuring meijer eds advanced functional programming pages 
lncs 
springer verlag 

wolfram 
higher object programming system user manual hops fr informatik universitt der february 
url informatik muenchen de hops 

wolfram 
internally typed second order term graphs 
eds graph theoretic concepts computer science wg pages 
lncs 
springer verlag 

jeffrey kingston 
design implementation lout document formatting language 
software practice experience 

jeffrey kingston 
expert guide lout document formatting system version 
basser department computer science university sydney 

jeffrey kingston 
auser lout document version 
basser department computer science university sydney 
isbn 
url ftp ftp cs su oz au jeff lout 

donald knuth 

addison wesley 

simon peyton jones 
pretty printer library haskell version 
url www dcs gla ac uk simonpj pretty html 

philip wadler 
printer 
url cm bell labs com cm cs wadler papers 
draft 
ross williams 
user manual may 
url www ross net html 
part distribution 
