graph oriented object database model marc gyssens jan paredaens jan van den bussche dirk van gucht graph oriented object database model introduced theoretical basis database systems manipulation conceptual representation data transparently graph 
model scheme instance object database represented graph data manipulation expressed graph transformations 
graph transformations described basic operations method construct natural semantics 
basic operations add delete objects edges function matchings pattern 
expressiveness model terms object oriented modeling data manipulation power investigated 
index terms database models query languages graph transformations objectoriented databases user interfaces 
preliminary versions th acm symposium principles database systems acm sigmod international conference management data :10.1.1.26.5298
partially supported belgium program 
university dept wni universitaire campus belgium 
mail 
university antwerp uia dept math 
comp 
science antwerp belgium 
mail paredaens wins uia ac van den bussche wins uia ac 
jan van den bussche research assistant 
indiana university comp 
science department bloomington usa 
mail cs indiana edu 
current database research trend systems deal advanced data applications go standard office database application 
trend reflected research object oriented databases :10.1.1.44.5524
trend need better database user interfaces stressed 
dimensional nature computer screen fully exploited 
natural order achieve goals graphs basic data type 
graphs integral part database design process semantic object oriented data models 
usage data manipulation languages far common 
deal language component schemes semantic object oriented data models typically transformed conceptual data model relational model 
required database language features conceptual model 
semantic object oriented data models equipped data language 
example data language functional data model 
databases conveniently specified graphs queries expressed textually quite cumbersome 
graphical database user interfaces developed relational model qbe 
earliest graphical database user interfaces semantic models associated entity relationship model 
subsequently graphical interfaces developed complex semantic object oriented database models 
graph oriented user interfaces developed recursive data objects queries 
unfortunately interfaces graphs central tool limited expressive power far data manipulation concerned 
object oriented database models hand offer computationally complete data languages 
languages non graphical lend easily basis graphical user interfaces 
expressed textually constructs path expressions derived object oriented programming languages smalltalk 
show greater functionality path expressions expressed graphically graph patterns 
purpose object oriented database model data representation data manipulation graph 
introduce object database model discuss properties 
objects represented nodes graph 
edges graph represent relationships properties objects 
simple framework provides convenient way model complex object bases take full advantage graphical user interfaces 
object bases manipulated adding deleting nodes edges graph graphical transformation language 
basic operations language pattern matching surprisingly reminiscent graph grammars fact conventional grammars cfr 

language includes method mechanism computationally complete 
satisfies expressiveness conditions usually imposed object oriented data manipulation languages 
model provides theoretical basis working complex object bases transparent manner 
order demonstrate implementation developed university antwerp 
organized follows 
section define graphs represent object database schemes instances 
section introduce basic operations language node addition edge addition node deletion edge deletion abstraction 
introduce method construct 
section discuss additional aspects macros object orientation computational completeness 
section compare approach graph grammars discuss implementation matters mention 
object base schemes instances introduce concept object base scheme consider example 
assume want specify hyper media system storing documents may contain text graphics sound information 
shows possible object base scheme system 
graphical representation quite standard 
nodes graph represent object classes 
node labels serve class names 
user defined classes rectangular shape system defined classes oval shape 
refer classes printable classes objects classes usually format output user 
example rectangular shaped node label info represents class nodes information hyper media system 
oval shaped node label string class character strings 
single double edges scheme graph represent properties relationships classes 
labeled called functional multivalued edge labels serving names 
functional edges represent functional relationships 
example functional edge created indicates info node creation date 
multivalued edges represent non functional relationships 
example info version new old links date modified created string name isa data isa comment comment text number graphics isa width height isa sound isa bitstream bitmap data words data data chars frequency hyper media object base scheme 
edge links multivalued certain info node link multiple info nodes 
look detail example scheme 
info node represents node information hyper media system 
associated node creation date modification date name comment string number possibly info nodes 
typical hyper media systems various versions document need way keep track different versions 
facilitated version nodes 
version node indicates info node obtained new version 
node pointed edge labeled old indicates old version edge new edge label points node corresponding new version 
furthermore distinguish subclasses info nodes class data nodes containing text graphics sound data ii class nodes specifying info nodes 
may occur multiple info nodes label multivalued 
associated graphics node height width actual data stored bitmap 
associated text node number words characters actual data stored long string 
associated sound node frequency actual data stored bit stream 
turn formal definition object base scheme 
assume infinitely enumerable sets nodes object labels printable object labels functional edge labels multivalued edge labels sets labels assumed pairwise disjoint 
labels thought type names 
accordance assumption printable classes system assume function associating printable object label appropriate set constants characters strings numbers booleans drawings graphics sound 
object base scheme tuple ol pol fel mel ffl ol finite set object labels ffl pol finite set printable object labels ffl fel finite set functional edge labels ffl mel finite set multivalued edge labels ffl ae ol theta mel fel theta ol pol 
object base scheme represented directed graph kinds nodes nodes labeled element pol rectangular shaped nodes labeled element ol kinds edges functional edges shown labeled elements fel multivalued edges shown labeled elements mel 
set represented edges graph 
turn object base instances 
succinctly speaking object base instance defined object base scheme directed graph objects conforming structure scheme 
edges objects individual properties relationships objects 
figures show example hyper media object base instance object base scheme shown 
notice printable node associated constant 
readable duplicated certain printable nodes 
example printable node label date value jan repeated times 
reality node appears object base instance obviously edges arriving 
marked info nodes names doors numbers respectively 
nodes dotted outline 
contain actual data nodes info nodes 
info node left upper corner represents document music history 
attached functional edges creation date modification date name comment node 
node furthermore linked multivalued edges labeled linked info nodes representing rock history classical music history jazz history respectively 
version node connected info nodes 
new edge points info node containing new version old edge points old version 
notice new old info nodes linked info node containing information rock group doors reflects property information preserved versions 
single node indicates info node name beatles jazz info node 
edges specified object base scheme absent node object base instance 
example info node name doors comment associated 
convenient way allow incomplete information 
info nodes outgoing edges 
represent info nodes known name comment creation date modified date 
nodes incoming edges know existence relation facts stored database known 
note intend typically large complex graph user 
transformation language introduced section provides tractable primitives manipulating visualizing relevant parts instance graph 
info string comment string author jones music history jan date date jan modified created name comment info version old new links date jan string rock created name comment comment string version info jan date created string rock name info jan date created string doors name info jan date created string beatles name links links info jan date created string name links links info jan date created string classical music name info jan date created string mozart name info jan date created string jazz name links links links isa example hyper media object base instance 
info jan date created name info data info isa text isa number number words data created 
info data isa info sound isa number number frequency data bitstream links links info jan date created string doors name info data info isa text isa number number words data doors 
info data isa info graphics isa number data links links bitmap number height width string continuation hyper media object base instance 
final note scheme instance contain edges labeled isa name typically reserved express inheritance semantic data models 
simplicity moment formally attach special semantics edges 
section consider inheritance depth 
ready formally define object base instances 
ol pol fel mel object base scheme 
formally object base instance labeled graph ffl finite set labeled nodes node label ol pol ol respectively pol called object respectively printable object ffl printable node additional label print called print label print constant ffl set labeled edges labeled edge ff label ff fel mel ff fel respectively mel called functional edge respectively multivalued edge ffl ff ff labels nodes connected ff edges node equal ff fel ffl pol print print instances graphically represented way schemes 
transformation language data transformation language database language graphical syntax semantics 
contains basic graph transformation operations 
correspond elementary manipulations graphs addition nodes addition edges deletion nodes deletion edges 
fifth operation called abstraction group objects basis properties 
language includes method call mechanism spirit object oriented database systems 
operations language deterministic particular choice new objects 
formally effect program defined transformation database graph resulting database graph 
database graph temporary entity replaces original database graph depends created name info info date string links rock jan example pattern 
transformation represents query update 
transformation language designed way querying updating scheme manipulations restructuring browsing visualizing parts complex instance 
systematic treatment different modes interpretation dealt 
remainder example object base instance continued explicitly specified 
order specify operations need notion pattern 
pattern graph describe subgraphs object base instance scheme 
pattern syntactically instance scheme 
example consider graph 
graph pattern hypermedia object base scheme 
intuitively describes info node created jan name rock linked info node 
order specify subgraphs object base instance corresponding pattern need introduce concept matching pattern matched instance different ways 
way shown second way matches lower info node pattern info node numbered 
formally object base scheme object base instance pattern matching total mapping satisfying ffl ffl print defined print print ffl ff ff words preserves labels edges 
info info version old new links date jan string rock created name comment comment string version info jan date created string rock name info jan date created string doors name info jan date created string beatles name links links info jan date created string name links links way match pattern 
created name info info date string links rock tagged rock jan example node addition operation 
start discussion operations transformation language 
node addition suppose want locate info nodes info node name rock date jan linked 
reconsider pattern 
indicated info nodes identified different matchings pattern hyper media object base instance 
node info node name doors created jan second node info node name created jan way locate nodes associate new node 
accomplished node addition operation 
specific node addition example displayed 
contains distinguishable parts part pattern pattern called source pattern second part indicated bold specifies types nodes edges added 
intuitively effect operation matching source pattern new node new edge added instance linked proper node identified matching 
shows part hyper media object base affected node addition 
node addition general suggested example 
general form introduce objects represent aggregates multiple nodes object base instance consideration 
consider node addition 
source pattern specifies info nodes name rock creation date exists 
furthermore nodes linked info nodes creation date 
verified matchings source pattern hyper media object base instance 
assume interested pairs general aggregates creation dates info nodes 
node addition consideration derives pairs 
added nodes node label pair attached info info version old new links date jan string rock created name comment comment string version info jan date created string rock name info jan date created string doors name info jan date created string beatles name links links info jan date created string name links links rock rock tagged tagged result node addition 
name info info string links created date created date pair parent child rock node addition deriving aggregates creation dates 
functional edges labeled parent child appropriate creation dates 
seen previous examples node additions introduce printable nodes 
assumption printable nodes system defined need explicitly added transformation language operations 
furthermore node additions introduce functional edges implies node addition operation imposes relationship matchings source pattern restricted nodes bold edge arrives nodes added operation 
ready formal definition node addition 
object base instance pattern object base scheme called source pattern node addition 
nodes object label ff ff different functional edge labels 
node addition na ff ff results new pattern new scheme new instance defined follows ffl obtained adding new node label obtained adding labeled functional edges ff ff ffl minimal scheme pattern ffl minimal object base instance isomorphism 
subinstance 
matching exists labeled node ff ff functional edges subinstance defined respect set inclusion 
function na ff ff augment definition augment object label functional edge labels ff triples ff matching exists labeled node outgoing edges ff add node edges ff return procedural semantics node addition 

edge leaving node edge formal definitions operations section definition node addition declarative style 
show definition corresponds procedural semantics give algorithm compute result node addition operation 
algorithms operations similar 
edge addition node addition operation introduce new objects object base 
edge addition operation contrast tool build relationships objects object base instance 
consider info node hypermedia object base instance name creation date jan 
node connected info nodes see 
info nodes correspond data nodes type text type sound 
assume want associate creation date info node info nodes representing text sound data 
accomplished edge addition operation shown 
contains distinguishable parts part source pattern selects appropriate info nodes second part indicated bold edge labeled data creation specifies types edges added 
shows part hyper media object base affected edge addition 
combinations node edge additions useful generating objects corresponding sets 
assume want determine set info nodes created jan done steps 
step consists introducing object denote set 
accomplished node addition shown notice data name info info string links created date jan isa data creation example edge addition 
info jan date created name info data info isa text isa number number words data created 
info data isa info sound isa number number frequency data bitstream links links string data creation data creation result edge addition 
created jan adding single node labeled created jan info created date contains created jan jan linking created jan info nodes created jan 
source pattern simply empty pattern consequently node added 
result node addition consists single node label created jan second step consists connecting newly created node info nodes created jan 
accomplished multivalued edge addition shown 
ready formal definition edge addition 
object base instance pattern object base scheme 
called source pattern edge addition 
nodes ff ff arbitrary edge labels 
edge addition ea ff ff results new pattern new scheme new instance defined follows ffl equals obtained adding labeled edges ff ff ffl minimal scheme pattern ffl minimal instance subinstance matching ff ff labeled edges observe result edge addition defined addition required edges yield different edges label leaving node ii functional arrive nodes different labels 
unfortunately arbitrary program sequence operations statically checking consistency edge addition program undecidable general shown results 
general limited run time checks name info string classical music example node deletion 
performed 
practice construct program way edge additions guaranteed succeed 
node deletion order remove objects object base instance transformation language node deletion operation 
suppose longer interested info node corresponding classical music hyper media object base 
removing information accomplished node deletion shown 
distinguishable parts 
part source pattern determines relevant matchings 
second part consists single node double outline specifying nodes deleted 
shows part hyper media object base affected node deletion 
info node name classical music edges leaving deleted 
notice result node deletion info node name mozart isolated object base 
general course node deletion remove nodes 
node deletion operation useful queries involve negation 
assume want tag data info nodes contain sound data 
accomplished step process involving node addition node deletion 
step attaches data info node node label sound second step removes tags data info nodes containing sound data 
remaining tagged info nodes contain sound data 
negation thought macro see section 
ready formal definition node deletion 
object base scheme 
object base instance pattern 
called source pattern node deletion 
node node deletion nd results new pattern new scheme new instance defined follows info string comment string author jones music history jan date date jan modified created name comment info version old new links date jan string rock created name comment comment string version info jan date created string rock name info jan date created string doors name info jan date created string beatles name links links info jan date created string name links links info jan date created string mozart name info jan date created string jazz name links isa result node deletion 
name info string modified date music history name info string modified date music history jan example update edge deletion followed edge addition 
ffl obtained removing node obtained removing labeled edges involving ffl equals ffl maximal instance subinstance matching node edge deletion order certain relationships objects transformation language edge deletion operation 
suppose modified info node name music history jan 
consequently need update modified property jan jan done steps 
step shown involves deletion edge label modified info node name music history notice edge represented doubly outlined edge source pattern 
second operation shown bottom adds new edge resulting intended update 
illustrated example clear possible remove multivalued edges 
ready formal definition edge deletion 
object base scheme 
object base instance pattern 
called source pattern edge deletion 
ff ff labeled edges edge deletion ed ff ff results new pattern new scheme new instance defined follows ffl equals obtained removing labeled edges ff ff ffl equals ffl maximal instance subinstance matching ff ff labeled edges abstraction supports object identity 
means objects exist independently properties 
desirable duplicate objects share set properties 
operation supporting technique abstraction operation 
abstraction creates unique object equivalence class duplicate objects acts duplicate eliminator 
example reconsider hyper media scheme specified 
scheme allows maintenance different versions info nodes 
consider 
displays sub instance hyper media object base instance different displayed figures 
seen info nodes pointed version nodes share info nodes linked 
fact cases info nodes share set info nodes instance second info nodes left 
order info nodes share set nodes consider 
contains node additions abstraction operation 
node additions tag info nodes abstraction take place 
abstraction operation consists distinguishable parts 
part solid lines source pattern 
second part dashed lines specifies type set equality info nodes grouped linked set info nodes 
third part bold lines specifies type nodes edges added result abstraction operation 
semantics operation simply group info nodes linked set info nodes new node label info introduced linked members group edges label contains result operation shown 
info version version version version info info info info new old new old new old new old info info info info links links links links links links links links links links sequence versions related information 
links info contains version info new interested version old info interested info interested example abstraction operation 
info version version version version info info info info new old new old new old new old info info info info links links links links links links links links links links info info info contains contains contains contains contains result abstraction operation 
ready formal definition abstraction operation 
object base scheme 
object base instance pattern 
called source pattern abstraction 
node object label ff fi multivalued edge labels 
intuitively abstraction creates sets labeled 
set contains objects match pattern ff properties 
formally abstraction ab ff fi results new pattern new scheme new instance defined follows ffl obtained adding new node label obtained adding labeled multivalued edge fi ffl minimal scheme pattern ffl minimal instance 
subinstance 
matching exists labeled node fi edge sets nodes fr ff fr ff equal 
edge leaving node edge observe abstraction defined 
third condition captures essence concept abstraction 
reader may wonder define abstractions single multivalued property ff 
useful group objects agree set functional multivalued properties 
shown abstraction functional properties expressible operations introduced section 
furthermore abstraction multiple properties reduced abstraction single property 
details expressive power abstraction 
methods high level programming language useful incorporate transformation language programming construct allow grouping sequence operations 
furthermore object oriented approach software engineering advocates principle encapsulation code associated objects receiver class 
supported methods 
example consider method update updating modified date info node 
takes date object parameter call method received info node object 
information name labels parameters label receiver method specification shown top 
body method shown remainder consists edge deletion deleting old information followed edge addition inserting new information 
note diamond shaped method node bind pattern nodes formal receiver formal parameters method body 
having written body call method info nodes satisfying certain pattern 
shown modified date info node name music history updated jan 
diamond shaped method node bold bind pattern nodes actual receiver actual parameters method call 
methods specify recursive processes 
suppose want remove old versions info node 
requires kind transitive closure version relationship impossible basic operations transformation language 
show methods overcome problem 
consider method 
method specification introduces method specification method body update info date parameter update info date modified update info date parameter modified method change modification date info node 
string update info date parameter name jan music history method call change modification date music history info nodes 
method specification remove old versions method body info version info info new old version info info info new old version info new example recursive method delete old versions info node 
method remove old versions receivers info nodes 
method body consists operations 
operation involves recursive call bold diamond shaped node removes old versions current receiver pointed regular diamond shaped node 
notice recursion halts receiver info node previous version 
bottom operations perform appropriate node deletions 
version node directly associated receiver deleted 
longer useful version node removed 
method specification body call fourth basic part method mechanism method interface 
method interfaces allow user method compute scheme resulting method knowledge method body 
concretely interface usually small scheme describes effect method scheme level 
order compute desired effect method date date old method specification date date method interface elapsed number diff specification interface method compute number days elapsed dates 
intermediate operations method body introduce temporary nodes edges irrelevant final result method interface automatically filter 
illustrate interface mechanism consider method compute number days dates specification interface shown 
user knows meaning labels employ method having knowledge whatsoever method body 
words method interface serves hide implementation details user 
method easy write method info node computes number days elapsed creation modification figures 
observe elapsed nodes introduced effect calling method appear resulting instance deleted method body nodes occur original scheme method interface 
ready formal definition method concept 
method named procedure 
receiver parameter labels specification body interface 
ol pol fel mel object base scheme 
method specification contains method name parameter types 
formally method specification method pair rm total function lm ol pol lm finite possibly empty set functional edge labels 
number info method specification info method interface days specification interface method compute number days elapsed creation modification info node 
date old elapsed diff date info created modified date info created date modified number days body method compute number days elapsed creation modification info node 
associates parameter labels node label 
rm ol pol node label receiver 
graphically represented diamond shaped node labeled labeled outgoing edge label fi lm node labeled fi unlabeled outgoing edge node labeled rm method body specifies implementation method 
formally method body bm method sequence parameterized operations 
parameterized operations normal operations na nd ea ed ab mc method call see normal operations source pattern augmented node labeled called head node edges leaving node 
edge label fi lm leave head node 
point node labeled fi 
furthermore unlabeled outgoing edge node labeled rm edges leave head node 
method interface cm formally scheme 
method call operation invokes execution method body context specified pattern actual parameters 
formally object base instance pattern rm specification method total function lm fi label fi node node label rm method call mc graphically represented pattern augmented bold diamond shaped node labeled bold edge fi lm node fi bold edge semantics method call steps body method executed consecutively nodes instance consideration match nodes pattern method parameters point actual values parameters 
formally method call mc results new scheme new instance defined follows 
consider node addition na fi fi fi lm fi 
po po po method body 
define parameterized operation po operation oper follows ffl po normal operation oper operation po isolated node labeled added source pattern oper ffl source pattern po contains diamond shaped node labeled oper operation po diamond shaped node substituted rectangular shaped node labeled string answer contains name info date modified created expressing absence edges 
result executing po gamma gamma 
execution operations eventually results 
nd jk jk pattern edges contains node labeled defined union cm defined restricted features section discuss additional aspects model macros object orientation computational completeness 
macros variety additional graphical operation added language 
allow succinct expression certain frequently occurring data manipulations increase expressive power language 
thought macros 
subsection consider number possible macros 
negation 
pattern matching technique checks presence nodes edges particular combination 
transformations need absence nodes edges 
consider instance query give set names info nodes creation date different modified date 
query shown 
crossed edge indicates interested patterns modified edge indicated nodes similarly consider patterns crossed nodes 
suggested section general technique simulate patterns crossed part utilizes deletions 
simulates query 
intermediate nodes created matching non crossed part pattern 
intermediate nodes deleted associated matching enlarged complete pattern 
intermediate nodes left represent desired matching 
smallest scheme cm subgraphs recall cm method interface 
largest subinstance ik instance info date answer contains string name created intermediate intermediate intermediate date info modified created string name string simulation negation 
additional predicates printable objects 
practice queries need involved conditions printable objects merely testing equality 
example checking certain values range 
example consider request determine info nodes created january january 
straightforward extension model allowing specification extra conditions possible external functions applied printable objects style qbe condition boxes allow handle query 
recursive addition operations 
suppose want compute transitive closure links property 
concretely want add edge labeled rec links info nodes connected links edges 
operation standard edge addition specifying direct links 
second operation recursive edge addition 
starred edge indicates edge addition repeated long new rec links edges added 
similarly consider recursive node addition 
note result infinite sequence node additions 
suggested section general technique simulate recursive operations utilizes recursive method calls 
method simulates recursive edge addition 
operation method body uses pat info info links rec links info info links rec links info links computing transitive closure recursive edge addition 
tern corresponding method parameters performs underlying non starred operation 
second operation body calls method recursively 
pattern augmented crossed part corresponds starred part recursive operation expresses stopping condition recursion 
object oriented aspects subsection show account number object oriented features described 
complex objects object identity 
complex objects typically built printable objects certain object constructors tuples sets lists 
structures natural graph representation 
natural model working complex objects 
notion object identity refers existence objects database independent associated properties objects shared updated independently 
stressed outset object identity basic feature 
encapsulation 
encapsulation means object accessed methods defined class 
precise representation data implementation methods invisible 
customary respect divide methods categories retrieve certain properties object side effects side effects 
properties objects modeled edges instance graph general methods side effects provided method mechanism 
info info method specification rlt arg info rlt arg info info rec links links method body info rlt arg info rec links rec links method call info rlt arg info links simulation recursion 
info string string name name jazz contains query utilizing inheritance 
info string name string name jazz contains info isa simulation inheritance 
inheritance 
object oriented databases support form inheritance ability define new classes subclasses existing ones organizing classes class hierarchy modestly extend model functional edge labels support notion subclass 
functional edges scheme graph wish interpret subclass edges course marked 
assume subclass edges form cycle 
example consider isa edges hyper media object base figures info nodes subclass edges 
effect user properties info objects attached corresponding objects 
user apply info operations directly objects 
example order obtain jazz user may specify query 
name property translate query internally query 
similarly method called objects belonging subclasses method specified receiver parameter classes 
note designing scheme user careful define isa links unambiguously 
words inheritance formulating queries comes working virtual instance obtained explicitly adding properties target nodes isa link source nodes 
clearly transformation computed number consecutive edge additions 
inheritance patterns macro sense previous subsection 
fact argue isa links define view object base user formulate queries 
computational completeness programs built basic operations node edge addition node edge deletion abstraction method construction 
subsection briefly discuss computational power language 
restrict language node edge additions deletions obtain language relationally complete known sense proposed codd 
concretely suppose represent relation attributes domains class functional edges labeled printable classes tuples represented objects class 
simulation relations tuples classes objects invite reader convince relation computable relational algebra computable restricted language see :10.1.1.26.5298
adding abstraction simulate nested relational algebra 
nested relations represented analogous manner standard relations multivalued edges 
abstraction operation needed case obtain faithful simulations relation valued attributes meaning duplicate relations eliminated see 
details simulation left reader 
full language methods sufficiently strong simulate arbitrary turing machines shown known techniques 
general level may ask exactly graph transformations computable mappings graphs graphs expressed 
question addressed informally speaking shown express isomorphism preserving transformations newly created objects effectively constructed 
concluding remarks concluding remarks 
transformation language reminiscent graph grammars 
application graph grammar production rewrites matching pattern pattern 
similarly basic operations node edge addition deletion rewrite matchings pattern adding deleting nodes edges 
fifth basic operation abstraction works global fit description 
important differences approach graph grammars 
graph grammars main objectives find convenient general formalisms specifying rewritings subgraphs involves solving difficult problems determining rewritten subgraph glued original graph 
wish avoid completely resolved problems employ simplest rewritings node edge addition deletion 
second important difference operational semantics graph grammar derivations non deterministic choice production applied choice particular matching corresponding pattern rewritten 
basic operations applied predetermined order possibly method executions importantly matching pattern parallel 
line set oriented processing nature database systems 
programs written procedural way basic operations node edge addition deletion partly declarative nature 
pattern operation seen declarative condition part rule bold outlined part corresponds rule action case addition deletion nodes edges 
simple mechanism visualization rules provide basis development graph rule object oriented database languages 
system currently implemented university antwerp 
fundamental design concepts graph database user interfaces spirit discussed 
concrete database user interface developed 
interface provides graphical tools specify patterns programs tools pattern directed browsing 
graphical representation object base scheme customized 
details 
prototype actual data management implemented top relational system 
classes stored relations attributes object identifier functional properties 
multivalued edges stored binary relations 
set matchings pattern operation expressed sql query 
actual transformation performed sql update capabilities 
way programs including methods interpreted programs embedded sql statements 
indiana university alternative approach implementing system explored 
binary relational model called tarski data model store compute databases 
model includes binary relational algebra inspired tarski 
acknowledgment wish marc andries colby marc peter ed robertson vijay larry helpful discussions 
wish referees constructive criticism 
abiteboul hull 
data functions datalog negation 
boral larson editors proceedings sigmod international conference management data pages 
acm press 
andries paredaens van den bussche 
concepts graph oriented object manipulation 
delobel gottlob editors advances database technology edbt volume lecture notes computer science pages 
springer verlag 
atkinson bancilhon dewitt dittrich maier zdonik 
object oriented database system manifesto 
kim 
nicolas nishio editors proceedings st international conference deductive object oriented databases pages 
elsevier science publishers 
bryce hull 
snap graphics schema manager 
proceedings international conference data engineering pages 
codd 
relational completeness data base sublanguages 
editor data base systems pages 
prentice hall 
conklin 
hypertext survey 
computer 
consens mendelzon 
graphlog visual formalism real life recursion 
pods pages 
paredaens van den bussche 
object database system 
buneman jajodia editors proceedings acm sigmod international conference management data acm sigmod record 
davis jajodia ng yeh editors 
entity relationship approach software engineering proceedings international conference entity relationship approach 
north holland 
ehrig 
kreowski rozenberg editors 
graph grammars application computer science volume lecture notes computer science 
springer verlag 
elmasri larson 
graphical query facility er databases 
liu editor proceedings fourth international conference entity relationship approach pages 
ieee computer society press 
fogg 
lessons living database graphical query interface 
editor proceedings sigmod annual meeting volume sigmod record pages 
acm press 
paredaens 
visual database management interface 
technical report uia dept math 
comp 
science 
appear proceedings international workshop interfaces database systems springer verlag 
goldman goldman kanellakis zdonik 
isis interface semantic information system 
proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
gyssens paredaens van gucht 
grammar approach unifying hierarchical data models 
clifford lindsay maier editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
gyssens paredaens van gucht :10.1.1.26.5298
graph oriented object database model 
pods pages 
gyssens paredaens van gucht 
graph oriented object database model database user interfaces 
garcia molina jagadish editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press 
rosenthal 
visual interface functional model recursion 
proceedings th international conference vldb pages 
hull king 
semantic database modelling survey applications research issues 
acm computing surveys 
kim lochovsky editors 
object oriented concepts databases applications 
frontier series 
acm press addison wesley 
king melville 
semantics knowledgeable interface 
proceedings th vldb conference pages 
klug 
calculating constraints relational expressions 
acm transactions database systems 
motro 
design object oriented browser 
proceedings nd international conference expert database systems pages 
paredaens tanca 
log declarative graphical query language 
delobel kifer editors deductive objectoriented databases volume lecture notes computer science pages 
springer verlag 

semantic data models 
acm computing surveys 
proceedings ninth acm symposium principles database systems 
acm press 
van gucht 
algebraic foundation optimization object query languages 
proceedings ninth international conference data engineering pages 
ieee computer society press 

schek scholl 
relational model relation valued attributes 
information systems 
shipman 
functional data model data language 
acm transactions database systems 
stonebraker editor 
readings database systems 
morgan kaufmann 

interactive query language define hierarchies 
davis pages 
van den bussche paredaens 
expressive power structured values pure oodb 
proceedings tenth acm symposium principles database systems pages 
acm press 
van den bussche van gucht andries gyssens 
completeness object creating query languages 
proceedings rd symposium foundations computer science pages 
ieee computer society press 
shapiro 
computational completeness extended database query languages 
ieee transactions software engineering 
wong kuo 
guide graphical user interface database exploration 
proceedings th international conference vldb pages 
zdonik maier editors 
readings object oriented database systems 
morgan kaufmann 
zhang mendelzon 
graphical query language entity relationship databases 
davis pages 
zloof 
query example data base language 
ibm systems journal 
index terms database models query languages graph transformations object oriented databases user interfaces captions hyper media object base scheme 
example hyper media object base instance 
continuation hyper media object base instance 
example pattern 
way match pattern 
example node addition operation 
result node addition 
node addition deriving aggregates creation dates 
procedural semantics node addition 
example edge addition 
result edge addition 
adding single node labeled created jan linking created jan info nodes created jan 
example node deletion 
result node deletion 
example update edge deletion followed edge addition 
sequence versions related information 
example abstraction operation 
result abstraction operation 
method change modification date info node 
method call change modification date music history info nodes 
example recursive method delete old versions info node 
specification interface method compute number days elapsed dates 
specification interface method compute number days elapsed creation modification info node 
body method compute number days elapsed creation modification info node 
expressing absence edges 
simulation negation 
computing transitive closure recursive edge addition 
simulation recursion 
query utilizing inheritance 
simulation inheritance 
footnotes preliminary versions th acm symposium principles database systems acm sigmod international conference management data :10.1.1.26.5298
partially supported belgium program 
university dept wni universitaire campus belgium 
mail 
university antwerp uia dept math 
comp 
science antwerp belgium 
mail paredaens wins uia ac van den bussche wins uia ac 
jan van den bussche research assistant 
indiana university comp 
science department bloomington usa 
mail cs indiana edu 
note intend typically large complex graph user 
transformation language introduced section provides tractable primitives manipulating visualizing relevant parts instance graph 
subinstance defined respect set inclusion 
smallest scheme cm subgraphs recall cm method interface 
largest subinstance instance preferred address correspondence dirk van gucht indiana university computer science dept bloomington indiana telephone fax mail cs indiana edu 
