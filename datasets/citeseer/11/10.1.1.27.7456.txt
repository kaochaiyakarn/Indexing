effects pointers data dependences alessandro sinha mary jean harrold college computing georgia institute technology atlantic drive atlanta ga sinha harrold cc gatech edu presents technique computing classifying data dependences takes account complexities introduced specific language constructs pointers arrays structures 
classification previously proposed classifications 
previous presents empirical results illustrate distribution data dependences set subjects 
presents potential application proposed classification program slicing technique computes slices data dependence types 
technique facilitates slicing program understanding user augment slice incrementally incorporating data dependences relevance focus specific kinds dependences 
presents case study shows incremental addition data dependences allows growing size slices steps 
understanding data dependences programs prerequisite program comprehension related activities reverse engineering impact analysis debugging 
particular slicing techniques program understanding depend availability reliable information dependences program variables 
dependences identified computing definition def associations relate statements assign values variables statements values 
problem computing def associations absence pointers relatively straightforward 
cases definitions uses variables identified syntactic information 
definitions uses known def associations computed traditional data flow analysis algorithm 
unfortunately traditional approaches computing associations inadequate presence programming language constructs pointers arrays structures 
possibility directly accessing memory locations languages complicates identification definitions uses code 
example variable may accessed statement syntactically appearing access occurs pointer dereference 
syntactic information sufficient presence pointers set memory locations accessed dereference determined prior computation def associations 
assignment dereference pointer potentially assign value value variables indirect assignments uses treated differently direct syntactic assignments 
part extend previously classification schemes allow finegrained taxonomy def associations 
scheme def association classified categories 
classification kinds definition definite possible def association types paths occurring definition 
way def association corresponds specific kind data dependence 
extend traditional reaching definition algorithm compute classify def associations classification scheme 
discuss empirical results set subjects distribution associations various categories 
second part possible applications proposed classification 
particular evaluate effects classifying data dependences program slicing introduce slicing paradigm slices computed specified types data dependences 
paradigm incremental slicing technique 
technique start analysis program computing slices consider strong definite data dependences augment slices incrementally incorporating additional weaker data dependences 
slicing approach lets user focus smaller easier understand subset program consider increasingly bigger parts code 
technique provides way isolate data dependences caused presence pointers 
way possible highlight subtle data dependences affect behavior program possibly unforeseen ways provide useful information dependences 
technique offers way controlling size slice eliminating certain data dependences slices 
case study performed investigate practical usability technique 
main contributions fine grained classification data dependences languages programmer directly manipulate memory 
empirical results illustrate distribution data dependences various categories 
new slicing technique allows building slices considering subset data dependences relevance 
case study shows results application slicing technique real example 
rest organized follows 
section provides background information data dependences alias analysis techniques program slicing 
section presents classification scheme data dependences technique computing data dependences classification 
section illustrates application data dependence classification scheme program slicing 
section discusses related 
section presents identifies potential 
background section define data dependences 
briefly describe alias analyses program slicing 
data flow analysis techniques require control flow relation program analyzed 
relation represented control flow graph 
control flow graph cfg contains nodes represent statements edges represent potential flow control statements 
addition cfg contains unique entry node unique exit node 
call site cfg contains call node return node 
example presents sample program cfg program 
node cfg represents statement pro read read read print print endif def def def def def def 
sample program illustrate definitions uses data dependences control flow graph program annotated def sets 
gram edge represents transfer control statement represented source edge statement represented target edge nodes entry exit nodes respectively 
statement defines variable statement assigns value variable 
statement uses variables statement reads value stored variable 
example sample program statement defines variable statement defines variable statement uses perform data flow analyses associate sets variables node cfg definition set def node contains variables defined node set contains variables node example sample program def 
path cfg sequence nodes 

edge cfg 
definition clear path def clear path respect variable path 
node 
defines example sample program def clear path respect variable definition node path cfg built basic block level cfg node represents sequence single entry single exit statements 
int main int int sum sum 
sum 
sum 
read 


sum 
sum 
add 
read 
sum add sum 
print sum sum int add int val int sum int 
read 
sum 

sum sum 

val 

sum sum 

return sum 
program sum 

definition kills definition refer variable exists def clear path example definition node kills definition node 
reaching definition set rd defined respect node set variable node pairs def exists def clear path respect data dependence triple rd 
data dependence referred definition association def association dua 
computation data dependences performed computing reaching definitions examining reaching definitions 
alias name referring memory location name program point 
case memory location accessed names 
alias relation program point may alias relation relation holds program paths leading alias relation point alias relation relation holds paths example consider program sum 
line may alias sum sum refer sum sum depending path followed get statement depending statement statement executed 
alias set statement contains elements sum sum 
variety alias analysis algorithms literature vary efficiency precision compute alias relations :10.1.1.11.3368:10.1.1.109.6502
empirical studies reported may alias information computed flow sensitive context sensitive alias algorithm described landi ryder 
program slicing technique identifying transitive control data dependences program 
backward slice program computed respect slicing criterion program point set program variables referenced includes statements may influence values variables 
alternative approaches computing slices propagate solutions data flow equations control flow representation perform graph reachability dependence graphs :10.1.1.50.4405
extended dependence graph approach computing slices :10.1.1.50.4405
data dependences presence pointers presence pointers causes complex relationships 
pointers aliasing may possible identify unambiguously variable defined resp statement containing definition resp 
account effects classify data dependences factors types definitions uses types paths definitions uses 
rest section new classification scheme extends classification scheme ostrand weyuker 
slice computed forward direction forward slice includes statements may influenced values variables entry entry exit sum sum exit sum sum val sum sum sum sum sum sum sum sum sum sum sum sum 
control flow graphs program sum definite possible definition sets node 
classification definitions uses presence pointers traditional data flow definitions section prove inadequate 
programs pointers accesses variable involve dereference pointer potentially access variables 
traditional notion definitions uses fails distinguish accesses single variable referenced 
example program sum identify unambiguously variables defined statement variables definition statement variable defined variable points statement 
depending execution path statement point different variables predicate statement true points sum statement predicate statement false points sum statement 
statement potentially define sum sum 
definitions statement definitions definite 
distinguish types definitions classify definitions statement definite definitions statement possible definitions 
definition resp variable expression statement definite definition resp definite static analysis determines statement variable accessed definition resp variable expression statement possible definition resp table 
def types types definitions uses 
definite definition possible definition definite def type def type possible def type def type possible static analysis determines statement set variables accessed contains elements 
note access variable pointer dereference pointer point single variable considered possible definition variable 
occurs limitations static analysis approximating dereferenced memory locations certain cases dereferenced location element array heap element 
example consider statement index variable loop control variable passed parameter procedure contains statement 
case static analysis determine memory locations aliased typically static analysis approximate aliases single element alias set 
alias set contains single element definition occurs definite definition definite 
similar problem occurs aliased heap location 
preserve safety reaching definition analysis presence alias relations definition uses occur table 
classification paths definitions uses incorporating occurrences definite killing paths 
base type listed illustrate completeness base classification base types definitions uses constitute def associations 
base type occurrence definite killing path extended type possible def clear definite killing drd definite killing drd possible def clear definite killing definite killing possible def clear definite killing prd definite killing prd definite kill definite killing single element alias sets classified possible 
definition definite possible associate node cfg sets definitions definite definition set node contains variables definitely defined node possible definition set node contains variables possibly defined node analogously associate node cfg sets uses definite set node contains variables definitely node possible set node contains variables possibly node example shows cfgs procedures sum lists sets node clarity show non empty sets node 
types definitions uses possible types def associations shown table 
classification def clear paths second dimension classification def association considers types paths definition 
def association 
absence effects pointer variables sufficient classify path types definition killed path 
presence possible definitions introduces additional category classified definition may possibly killed 
presence pointers classify types definite def clear path respect variable path 
node 
contains definite possible definition example program sum path definite def clear path respect variable sum 
possible def clear path respect variable path 
exists contains possible definition node 
contains definite definition example program sum path possible def clear path respect variable sum node contains possible definition sum node path contains definite definition sum 
definite killing path respect variable path 
exists contains definite definition example program sum path definite killing path respect variable sum node contains definite definition sum 
definitions classify set paths definition def association 
def association set paths classify types 
possible def clear exists path definite def clear path respect path possible def clear path respect 
possible def clear exists path definite def clear path respect exists path possible def clear path respect 
possible def clear exists path possible def clear path respect path definite path respect example program sum def association sum possible def clear def association sum possible def clear def association sum possible def clear 
investigate occurrences various types def associations significance occurrences extend classification considering table 
classification def associations types result cross product def types table second alternative path classification column table 
def type def type def type def type drd dua type dua type dua type dua type dua type dua type dua type dua type drd dua type dua type dua type dua type dua type dua type dua type dua type prd dua type dua type dua type dua type prd dua type dua type dua type dua type table 
def associations types occur program sum 
def association type def association type def association type sum type sum type sum type sum type type type type type type type sum type sum type sum type sum type type type type sum type type type type type type sum type type type sum type occurrences definite killing paths 
result obtain types paths definitions uses summarized table 
completeness table mention fourth type definite kill 
consider type classification refers case paths definition definitely def clear definition part def association 
classification def associations classify def associations types definition table types path definition table 
cross product results types def associations shown table 
table lists def associations occur program sum types 
classification scheme extends proposed ostrand weyuker 
ostrand weyuker approach coarser respect different aspects 
ostrand weyuker distinguish sets paths presence definite killing path classify paths classification column table 
second classification allows identifying types def associations ostrand weyuker consider separately types strong association def type possible def clear paths firm def association def type possible paths weak def association def type possible def clear paths 
group remaining types definition definite type call weak def association 
computation def associations compute different types def associations identified previous section modify steps traditional algorithm computing def associations computation reaching definitions data flow equations computation def associations reaching definitions 
traditional algorithm computing reaching definitions propagates iteratively set data flow facts definite reaching definitions value set statement reaches fixed point 
compute value set statement algorithm uses pair equations 
equation describes value set statement value set control flow predecessor statement 
second equation describes value set statement transformation set statement 
facilitate identification types def associations extend type type type type type type type type weak weak type type type type type type type type type type type type strong firm 
distribution data dependence types classification ostrand weyuker classification types occur subjects 
reaching definition algorithm propagate additional sets data flow facts statement 
set contains possible definitions reach statement second set contains killed definitions reach statement 
extended algorithm computes sets iteratively sets converge 
compute additional sets algorithm uses pair data flow equations describe respectively values sets statement provides details algorithm data flow equations 
second step computing def associations algorithm performs set operations sets computed step identify definitions reach statement types paths listed column table 
types reaching definitions types uses types paths definitions reach uses algorithm computes classifies def associations 
time space complexity extended algorithm similar traditional algorithm 
extended algorithm computes additional sets data flow facts sets represented manipulated efficiently bit vectors 
iterative propagation implemented efficiently depth ordering nodes cfg 
extended algorithm computes number def associations traditional algorithm 
distribution data dependence types investigate distribution data dependences various types implemented prototype performed empirical studies set subjects 
implemented reaching definition algorithm aris analysis system 
account effects aliases replaced aristotle front analysis framework 
gather control flow local data flow alias symbol table information information interface aristotle tools 
programs listed table empirical studies 
table 
programs empirical studies reported 
subject description loc aristotle analysis system interface dejavu regression test selector compress extract utility replace search replace utility space parser antenna array description language tot info statistical information combiner unzip compress extract utility illustrates distribution data dependence types subjects 
bar corresponds data dependence type represents percentage data dependences type 
data illustrate data dependences fall predominantly types 
dua type dua type dua type occur frequently types account total data dependences 
types dua types constitute data dependences 
remaining types data dependences types occur marginal numbers account remaining data dependences 
remaining types data dependences types occur subjects types listed horizontal axis 
results study preliminary nature 
data shows trends distribution data dependence types scarcity data points prevents drawing distribution 
experimentation diverse subjects help determine trends frequent occurrence dua type persist 
data shows data dependences path definition contains redefinition relevant variable 
result important structural testing means test case covers definition statements covers corresponding def association 
bars show distribution data dependence types ostrand weyuker classification 
classification data dependences strong data dependences weak 
firm weak data dependences constitute little data dependences 
applications data dependence classification ability classify data dependences exploited different applications 
example data dependences ordered strength guide dataflow testing strategy perform impact analyses focused different kinds dependences analyzed identify parts code possibly unforeseen data dependences require careful software inspections 
short activities depend data dependence information utilize classification 
focus application related program understanding program slicing 
section define slicing technique lets compute slices data dependence types illustrate case study apply technique 
program slicing traditional slicing techniques include slice statements affect slicing criterion direct transitive control data dependences :10.1.1.50.4405
techniques compute slice computing transitive closure control data dependences starting slicing criterion 
classification data dependences different types leads new paradigm slic percentage slices set sets slices unzip types types type percentage statements slices 
percentage slices unzip slice sets data dependence types included various percentages program statements 
ing transitive closure performed specified types data dependences data dependences 
slicing paradigm slicing criterion triple program point set program variables referenced identifies types data dependences 
slice includes statements may affect value variables transitive control specified types data dependences 
new slicing paradigm define slicing technique increases scope slice incrementally including data dependences different types 
technique starts considering stronger types data dependences computes slice data dependences 
increments slice considering additional types weaker data dependences adding slice statements affect slicing criterion weaker data dependences 
technique offers advantages 
focuses attention specific types data dependences enables consider stages effects various types data dependences slices 
second enables control size slice eliminating certain dependences initially incorporating required 
new slicing paradigm incremental slicing technique apply data flow dependence graph approaches computing slices :10.1.1.50.4405
perform case study extended dependence graph approach represent data dependence types 
case study slicing investigate performance new slicing technique prototype classifying data dependences extended dependence graph slicer aristotle analysis system 
selected subject unzip study 
distribution types unzip computed sets slices set dua type second set included dua types set included dua types 
presents data illustrate growth sizes slices set 
shows distribution slices unzip sizes 
vertical axis represents percentage slices unzip computed slices unzip segmented bar represents slices set segments bar represent various ranges slice sizes 
illustrates distribution changed set 
set slices computed considering dua type slice contains fewer program statements 
consider dua types slices contain program statements 
third set slices computed considering types data dependences slices contain program statements 
differences slice sizes sets related presence pointers differences significant 
incremental slicing approach appears promising reducing sizes slices 
differences sizes slices second third sets related effects pointers 
examined manually differences slices slices third set included statements related subtle hard detect pointer induced data dependences 
technique appears useful isolating focusing attention dependences 
intend conduct extensive empirical studies evaluate effectiveness slicing technique 
related ostrand weyuker extend traditional dataflow testing techniques programs contain pointers aliasing 
define testing criteria adequately test data flow relationships programs occurs unzip contained dua type 
second set slices dua types involve pointers 
pointers consider effects pointers aliasing definitions uses 
classify definitions uses def clear paths depending occurrences pointer dereferences entities 
classifications identify types def associations strong firm weak weak 
strong def association corresponds dua types classification firm def association corresponds dua types weak def association corresponds dua types weak def association correspond remaining types associations scheme 
classification finer grained 
ostrand weyuker classification groups types dependences may differences caused dependences 
pande landi ryder describe algorithm computing interprocedural reaching definitions presence pointers 
define conditional reaching definition reaching definition holds assumed conditions aliasing 
merlo antoniol techniques identify implications data dependences presence pointers 
distinguish definite possible definitions uses identify definite possible data dependences 
definite data dependence corresponds data dependence types classification possible data dependence corresponds types remaining types classification fall definite possible data dependence category merlo antoniol classification 
researchers considered effects pointers program slicing results perform slicing effectively presence pointers 
researchers evaluated effects precision pointer analysis subsequent analyses computation def associations program slicing :10.1.1.52.5364
considers definitions uses def associations terms certainty entities occur 
tonella colleagues analyze effects precision reaching definition computation def associations 
researchers investigated various ways reduce sizes slices 
considered classifying data dependences computing slices different types data dependences 
summary technique computing classifying data dependences programs pointers 
classification finer grained respect previously classifications allows partitioning data dependences types strength 
set experimental results illustrates distribution data dependences set subjects 
draw conclusive inference data gathered far show trends worth investigation 
illustrated potential application proposed classification program slicing 
slicing technique lets user focus smaller easier understand subset program consider increasingly bigger parts code 
case study shows addition weak data dependences allows incrementally growing size slices 
conduct empirical studies evaluate distribution data dependences effectiveness incremental slicing technique 
includes extensions prototype different efficient alias analysis algorithm 
improvement allow perform experiments subjects bigger size study relation distribution data dependences precision underlying alias analysis 
plan perform study source code subjects trying identify patterns code cause specific types data dependences 
believe patterns great help tune program analysis algorithms provide guidelines programmers 
acknowledgments supported part boeing commercial airplanes georgia tech national science foundation awards ccr ccr ccr georgia tech state georgia georgia tech mission 
supported esprit project ep italian dell universita della ricerca scientifica tecnologica murst framework project 
agrawal demillo spafford 
dynamic slicing presence unconstrained pointers 
proceedings symposium testing analysis verification pages oct 
aho sethi ullman 
compilers principles techniques tools 
addison wesley publishing reading ma 
andersen 
program analysis specialization programming language 
technical report university copenhagen 
atkinson griswold 
effective analysis presence pointers 
proceedings acm sigsoft sixth international symposium foundations software engineering pages nov 
bent atkinson griswold 
comparative study program technical report ucsd tr cs university california san diego may 
binkley 
slicing presence parameter aliasing 
software engineering research forum pages nov 
binkley lyle 
application pointer state subgraph static program slicing 
journal systems software jan 
canfora cimitile lucia 
conditioned program slicing 
information software technology november 
special issue program slicing 
frankl weyuker 
applicable family data flow testing criteria 
ieee trans 
softw 
eng oct 
group 
analysis framework 
www rutgers edu rutgers university 
harman danicic 
amorphous program slicing 
proceedings fifth international workshop program comprehension 
ieee computer society press 
harrold ci 
reuse driven interprocedural slicing 
proceedings th international conference software engineering pages apr 
harrold rothermel 
aristotle system research development tools 
technical report osu tr ohio state university mar 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm trans 
prog 
lang 
syst jan 
landi ryder 
safe approximate algorithm interprocedural pointer aliasing 
proceedings acm sigplan conference programming language design implementation pages july 
liang harrold 
efficient points analysis program analysis 
proceedings esec fse th european software engineering conference th symposium foundations software engineering volume lecture notes computer science pages 
springer verlag sept 
liang harrold 
reuse driven interprocedural slicing presence pointers recursion 
proceedings international conference software maintenance pages august september 
merlo 
pointer sensitive def pre dominance post dominance synchronous dominance relations unconstrained intraprocedural computation 
technical report rt ecole polytechnique montreal mar 
sinha harrold 
effects pointers data dependences program slicing 
technical report git cc georgia institute technology november 
ostrand weyuker 
data flow test adequacy analysis languages pointers 
proceedings symposium testing analysis verification pages oct 
pande landi ryder 
interprocedural def associations systems single level pointers 
ieee trans 
softw 
eng may 
weyuker 
selecting software test data data flow information 
ieee trans 
softw 
eng se apr 
shapiro horwitz 
effects precision pointer analysis 
th international static analysis symposium volume lecture notes computer science pages sept 
sinha harrold rothermel 
graph slicing programs arbitrary interprocedural control flow 
proceedings st international conference software engineering pages may 
steensgaard 
points analysis linear time 
conference record rd acm symposium principles programming languages pages jan 
tonella 
effects different flow insensitive pointsto analyses def sets 
proceedings rd european conference software maintenance reengineering pages mar 
tonella antoniol merlo 
variable precision reaching definitions analysis 
journal software maintenance research practice march april 
weiser 
program slicing 
ieee trans 
softw 
eng july 

