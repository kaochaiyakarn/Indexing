putting type annotations martin odersky department computer science university karlsruhe karlsruhe germany odersky ira uka de study extension hindley milner system explicit type scheme annotations type declarations 
system express polymorphic function arguments user de ned data types components structure types polymorphic elds 
generally programs polymorphic lambda calculus encoded translation typing derivations 
show type reconstruction system reduced decidable problem rst order uni cation mixed pre important cornerstones type theory programming languages hindley milner system second order polymorphic calculus 
tries explore design space 
hindley milner system mil extends simply typed calculus polymorphic bound identi ers 
adds considerable expressive power retains property type annotations programs needed general types inferred dm 
property hindley milner system appealing basis type systems programming languages 
contrast second order polymorphic gir rey allows polymorphic types requires explicit annotations argument types type instantiations 
general appeared proc 
rd acm symposium principles programming languages january 
acm 
permission copy fee part material granted provided copies direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee speci permission 
konstantin laufer department mathematical sciences university chicago chicago illinois usa laufer math luc edu problem typechecking type annotations undecidable wel approaches type reconstruction type information 
generally fall categories 
curry style reconstruction lls polymorphic abstractions applications type annotations 
style reconstruction complicated lack principal types inf 
proposed schemes complex inference rules cumbersome conversions declared inferred types mcc og 
contrast church style reconstruction requires position type abstractions applications indicated original source 
style reconstruction called partial type reconstruction boe shown reducible higherorder uni cation pfe 
church style reconstruction undecidable general result opens possibility semi decision procedures practice 
hand position polymorphic application indicated explicitly source leads unfamiliar coding style programmers hindley milner system 
approaches extending hindley milner system form embedded quanti ers going way polymorphic calculus 
instance launchbury peyton jones elegant type system syntactic control interference lpar uses second order universal quanti cation 
perry laufer odersky lo studied existential quanti cation algebraic datatypes yields hindley milner style version mitchell plotkin types mp :10.1.1.51.53
style existential quanti cation implemented compilers hope haskell aug caml mp 
remy rem extended laufer odersky system universal quanti cation datatypes objects polymorphic methods expressed 
jones jon investigated record types polymorphic elements way capture essential aspects module systems 
proposal lines accepted inclusion haskell 
combination systems feasible unwieldy 
fortunately turns consider generalization far simpler type system captures extensions commonalities expresses differences encodings 
extensions common form explicit type information required 
instance laufer odersky remy systems restrict existential quanti cation components explicitly declared datatypes jones restricts universal quanti cation elds explicitly declared record types 
study type system allows require explicit type scheme annotations function arguments 
idea formal function parameter polymorphic annotated type scheme parameter monomorphic type type scheme 
important special case admit rudimentary form user de ned data type declaration introduces value constructor single possibly polymorphic argument 
allow type scheme annotations expressions 
note roughly kind type annotations programming languages er require 
crucial extension annotations declarations refer polymorphic type schemes just types 
rami cations simple idea quite substantial 
express polymorphic function arguments annotating argument type scheme 
express data types record types usual church encodings type correct way 
slightly modifying church encodings express existentially universally quanti ed component types records data types subsuming type systems perry laufer odersky remy jones 
encodings give principal type properties type inference algorithms systems free 
situation simply typed calculus mor ml mil longer possible reduce type inference simple herbrand uni cation problem 
need consider problem nding general substitution type scheme instance 
show problem reducible problem rst order uni cation mixed pre mil decidable 
decidability holds admit types type schemes range substitutions problem equivalent cation undecidable ktu 
situation inf maintain strati cation types type schemes 
universally quanti ed variable instantiated types type schemes 
get back full power indirect way allowing type schemes components explicitly declared data types 
show encode providing type declarations polymorphic types program 
shows typing discipline provides essentially capabilities asf encoding inf support formal comparison expressive power sense felleisen fel fails compositional 
typing discipline conservative extension hindley milner system 
typable program system continues typable 
holds type annotations style ml haskell added hindley milner 
able show principal type properties soundness completeness type inference fully analogous ones stated damas milner dm 
engineering issues ml programming languages type checkers understood believe system promising practical kernel language type systematic extensions ml haskell 
rest organized follows 
section presents type system 
section shows previous polymorphic extensions ml embedded 
section discusses encoding polymorphic calculus 
section states general instantiation problem presents algorithm solve 
section presents type inference algorithm 
section concludes 
type system presents syntax kernel language exp hindley milner system distinguish types contain quanti cation type variables type schemes 
compared milner extensions considered independently useful combination 
extension considers type annotations formal arguments expressions considers type declarations 
type scheme annotations type scheme annotations applied formal arguments annotations types common programming languages build hindley milner system 
instance taut gen lambda type jx letx eine exp terms jx je annotated terms jt type injection jt type projection ine type declaration type variables types jt type schemes syntax 
ftv instance rules type schemes 
ftv letx eine typing rules 
proj sub ee apply typed ine newtype map xs 
case xs declares argument types function map terms type variables generalizing type variables obtain usual polymorphic type scheme map map 
new ability annotate type schemes types 
instance possible write int hello 
consequence type scheme may form part larger type scheme 
instance general type scheme int int 
give hindley milner restriction quanti ers may occur outermost level type scheme admit type schemes 

immediate consequence re ne generic instance relation dm want get principal types system annotations 
consider function int 
derivable type schemes function int int 
type schemes generic instance 
furthermore third type scheme type schemes generic instances 
relation de ned get int general type schemes 
relation implements form subtyping type schemes 
rule subsumption equivalent quanti er elimination rule hindley milner system 
rule allows type scheme 
functions type schemes handled standard contravariance rule 
usual identify type schemes instances 
relation subrelation mitchell containment relation mit validated type inference models 
type schemes quanti ers outermost level inverse generic instance relation damas milner dm 
changed direction sign stay line mitchell containment relation corresponds semantic intuition subtyping subsetting 
useful properties 
proposition type schemes substitution 
proposition transitive 
proof sketch assume 
show induction sum depths proof trees 
proposition case rule proof application rule 
typing rules largely follow hindley milner system 
main di erences motivated possible occurrence levels type scheme 
necessary consider type schemes types typing rule type schemes reconstructed generalization outermost level 
second hindley milner elimination rule outermost quanti ers replaced general subsumption rule takes account instance relation schemes 
type annotations su cient expressing polymorphic function arguments 
shortcoming system remains resulting second order polymorphic functions arguments polymorphic functions require instantiation type variable type scheme 
instance code type correct map length const 
problem type variable map type instantiated type scheme int 
circumvent problem providing way package type scheme explicitly declared data type 
type declarations atype declaration simple form algebraic data type declaration single unary constructor 
type introduced di erent type may including type scheme require type constructor declared program enforced typing rules 
shorthand vectors type variables types 
similar declaration haskell data 
generalize haskell may arbitrary type scheme type 
haskell syntax explicit convention doubles injection function maps values component type values type new type projection contrast projection haskell implicit meaning case expressions 
haskell case write 
help type declarations code problematic example follows 
newtype int hello map length const 
possible 
newtype declarations su cient express data types general products sums usual church encodings combined explicit injection projection operations 
instance type pairs constructor selectors fst snd coded follows 
newtype pair 
pair fst pair snd pair 
note pair type expands type scheme type 
apply technique languages ml haskell admit types right hand sides data type declarations 
second example encodes list type list type constructor recursively 
newtype list 
list nil list cons xs list 
case expression case xs nil cons ys coded list xs ys 
course actual programming language assume product sum types de nable directly need church encodings 
existence encodings ensures case additional language constructs require essential additions type system typecheck encoding rst kernel language 
section apply program polymorphic extensions hindley milner system 
extensions section show previous extensions hindley milner embedded quanti ers expressed system 
particular deal laufer odersky version types lo jones version polymorphic structures jon :10.1.1.51.53
system equivalent expressiveness remy rem obtained combining extensions 
types consider set global data type declarations data type constructor andk kn value constructors 
conceptually data type constructor special instance type value form separate alphabet 
lo adopt convention type variables appear existentially quanti ed :10.1.1.51.53:10.1.1.51.53
contrast ml haskell type variables disallowed 
example declares type lists heterogeneous elements 
element consists value function maps value integer key 
type value may vary element element 
data int function nds maximal key written follows xs case xs ys max ys slightly modifying treatment lists section program translated exp follows 
newtype 
int int xs int xs xs xs ys max ys note implied existential quanti er type variable de nition turns second rank universal quanti er translation 
general case augment kernel language exp value constructors case expressions 
jk fk eng exp term language de ned 
data type declaration ftv fori typing rules equivalent treatment lo :10.1.1.51.53
ki ki xi ei ftv fk eng relation results adding rules 
give encoding exp exp preserves 
constructors case expressions correspond data type declaration de ne ki ki new variable fk eng xn extend expressions 
add data type declaration form global declarations fresh type variable 

ki yn proposition type schemes exp proof easy comparison typing derivations 
polymorphic structures analogous treatment lets encode structures polymorphic elds exp consider set global structure declarations structs fl ln ng sis type constructor andl ln eld labels 
keep treatment simple assume structure type declaration structures scopes 
exible scheme label part structures obtained adding overloading type system jon 
symmetry treatment data types adopt convention type variables appear universally quanti ed 
example de ne type set objects contain eld polymorphic map function 
struct set elem bool union set set map set note type variable map signature appear left hand side de nition considered universally quanti ed 
structure declaration expressed exp follows 
newtype set bool 
set set 
set generally term language exp obtained adding structure expressions selector functions exp fl ln eng structure type declaration add typing rules ftv 
li ei li fl ln eng relation results adding rules 
encode exp exp de ne data type form li li li new variable fl ln eng ke extend expressions add declaration global declarations 
li yn yi proposition shown comparison typing derivations 
proposition type schemes exp discussion 
shortcoming encodings component types data types structures layer quanti ers 
encodings share property original proposals laufer odersky jones remy system 
powerful type system admit arbitrary type schemes components 
problems data types remy system expressed straightforward combination encodings data types structures 
analogous generalization structure types result selection captured type variable needs atype quanti ers 
course possible re quantify outermost level selection 
data types su er di erent shortcoming albeit similar reason branch ina case expression needs type 
possible lift restrictions considering product sum types kernel language ranging alternatively restrictions inventing intermediate data structure types level quanti cation 
encoding section translation second order polymorphic typing discipline typing rules 
taut fx mn ftv crucial idea translation typing discipline type mapped data typet type indexed ann ary type abstraction lifting translation de nition 
lifting type consists type abstraction types maximal subterms contain write case lift arrange translated type translation global type declaration lift 
simplicity avoid variable renamings assuming type variables source mutually distinct 
encoding types lift encoding stable substitutions shown lemma 
lemma types type variables proof induction structure 
case relies observation lift lift substitution involve extend pointwise type environments de ning fxi ig fxi come encoding terms 
encoding depends term type turn depends type environment formulate mapping typing rules type judgments di erent set typing rules type judgments show second step rule valid derivation augmented environment 
rules taut mapped identical rules remaining rules de ne lift ftv lift rule type argument translated representative term type mapping types representatives de ned 
lift de nition 
type scheme fx ftv analogously anf fx ftv anf derivation sd set polymorphic types form occurring environment part typing judgment type environment ft sd lift informally contains free variable contains polymorphic type derivation corresponding type produced aexp context consists series type declarations form followed series abstractions lemma proof directly de nition proposition shown straightforward induction derivations 
proposition typing derivation inf exists unique proof structure concludes remains shown derivation completed valid exp derivation 
show need standard property exp type derivations invariant weakenings additions hypotheses 
stated lemma straightforward induction typing derivations 
lemma ifx fv theorem anf derivation proof induction structure step proof application taut rule result follows immediately 
result follows simple inductive step 
assume proof consists derivation followed application rule ftv induction hypothesis fm assume rst ftv 
contains rule lambda hand ftv follows induction hypothesis rule lambda lemma 
rule gen free furthermore contains binding follows rules taut sub follows lemma assumption case follows application app 
assume nally proof consists derivation followed application rule induction hypothesis type contains binding taut proj sub rule app rule sub follows lemma furthermore lemma lemma implies rule app lemma proves case 
example consider successor function church numerals succ 

succ fx liftings succ argument result type schemes respect quanti ed type variables lift 
lift 
need global type declarations 

translating successor function results succ fx andt identical single type declaration su cient translation provide simpli cation 
translation previous encodings types polymorphic structures super uous clearly expressed inf 
previous encodings local transformation rules terms translation depends full typing derivation anf program 
clear translation validating typing rules types polymorphic structures exp section 
finding general section study problem nding substitutions type scheme instance 
preliminaries substitutions 
type variable substitution idempotent mapping type variables types maps nite number type variables 
dom substitutions extended mappings types type schemes 
applying substitution type scheme assume bound variables disjoint dom 
achieved renaming bound variables identity substitution mapping idempotent replaces composition substitutions written letv set type variables 
jv substitution equals type variables inv identity type variables 
conversely nv substitution equals identity 
nite set type variables 
usually universe type variables interest situation hand 
de ne ju ju write 
note general substitution smaller element pre 
choice reverses usual convention treatments uni cation lmm stay line semantic notion type instance 
partial order identifying substitutions equal variable renaming equivalently de ning iu andu follows lmm theorem complete lower semi lattice upper bounds exist correspond uni cations greatest lower bounds correspond anti uni cations 
instantiation algorithm 
address problem 
ftv ftv new ftv new ftv 
ii new tn nt new ng ftv instantiating substitution 
type schemes nd general substitution mgi provided exists return failure 
problem reduced uni cation mixed pre problem mil 
uni cation mixed pre involves nding solves system equations sn tn quanti ers terms 
shall concerned simpler problem rst order terms types 
domain existentially quanti ed variables pre 
variable 
ui refer variable bound right 
reduction instantiation problem mixed pre problem proceeds steps 
step 
decompose instantiation problem system equations quanti er pre xes applying algorithm mgi 
mapping de ned 
ftv ftv new 
new 
meta variable rst clause mapping assumed range type schemes quanti ers outermost level step bring resulting system pre form applying equations left right necessary 
step system resulting step 
uni cation mixed pre problem obtained existentially quantifying free variables 
ftv proposition solution problem 
direct approach combines transformation uni cation mixed pre solution problem single algorithm shown 
algorithm mgi expressed inference system clauses form derivation step takes inputs type schemes yields output substitution show general substitution holds 
interesting rule algorithm rule enforce side condition ftv corresponding instance rule 
replacing skolem arguments type variables way substitution violate side condition instantiating type variable lead failure rule mgi due circular variable dependence occurs check 
state soundness completeness algorithm mgi 
proofs theorems proceed standard inductions derivations 
proofs omitted forthcoming technical report ol 
lemma substitution theorem type schemes substitution nite set type variables 
soundness dom ftv 
completeness type reconstruction need slightly di erent version algorithm restricts returned substitution identity variable set algorithm logical form 
simplicity reuse symbol writing modi ed algorithm obtained mgi rule 
tn new ti ng corollary type schemes andv nite sets type variables substitution 
soundness ifv dom ftv nv 
completeness jv proof direct theorem de nition modi ed mgi 
type reconstruction explains type reconstruction algorithm 
rem expressed inference system clauses form andv derivation step takes input type variable set 
yields output substitution type scheme informally derivable identity holds 
furthermore derivable general type scheme holds 
precise theorems 
purpose set prevent computed substitution touching type variables occur free annotations 
instance function declaration map xs 
case xs body map typechecked assumptions xs 
ok instantiate variables typechecking body map 
instantiation prevented including inv type reconstruction algorithm uses auxiliary clause states obtained instantiating generic type variables 
derivation rule clause elim clauses ends taut gen rule 
rules 
informally forces complete generalization result type scheme derivation step 
complex rules reconstruction algorithm function application 
rules needed depending type reconstruction function part application yields function variable 
rst case rule computes substitution instance result type scheme function 
second case fresh type variable created hold function result type corresponds done hindley milner type reconstruction 
elim new taut wv gen wv ftv lambda wv new 
apply ftv ee new ee typed wv ftv ftv wv letx eine proj wt newtype tv ftv ine type reconstruction algorithm 
lemma substitution theorem expression atype scheme 
letv ftv ftv andu nite sets type variables substitution 
soundness ifv dom ftv ftv 
completeness ftv substitution type scheme corollary principal types closed 
type scheme type system generalizes second order polymorphic extensions hindley milner system 
type system stays tradition hindley milner hindley milner programs continue typable types essential theorems carry 
keep treatment simple type system fairly small 
applied programming language extensions possible desirable 
discussed polymorphic sum product type schemes 
possible extension straightforward add polymorphic recursion myc known undecidable absence type declarations hen ktu 
starting hope bms programming languages supported polymorphic recursion explicit declarations polymorphically recursive functions 
aware formal analysis type reconstruction languages 
system extended polymorphic recursion adding typing rule 
letrec eine corresponding clause type reconstruction algorithm letrec ftv ftv ftv eine extension soundness completeness proofs type reconstruction straightforward 
ambitious extension combine system subtyping 
particularly intriguing subsumption rule albeit type schemes types 
instance relationship function type schemes uses contravariance rule standard subtyping systems 
missing de nition subtyping types 
extension lines yield system parametric polymorphism regarded special form subtyping lead closer integration typing disciplines 
acknowledgments mark jones benjamin pierce didier remy phil wadler stimulating discussions 
idea lifting maximal subterms polymorphic types encoding due didier remy 
dilip helpful comments earlier version 
aug augustsson 
haskell user manual version october 
distributed hbc compiler 
bms rod burstall david macqueen donald 
hope experimental applicative language 
conference record lisp conference pages redwood california august 
lisp 
boe hans 
boehm 
type inference presence type abstraction 
proceedings sigplan conference programming language design implementation pages 
acm acm press june 
dm luis damas robin milner 
principal type schemes functional programs 
proc 
th acm symposium principles programming languages january 
fel matthias felleisen 
expressive power programming languages 
neil jones editor esop european symposium programming pages 
springer verlag 
lecture notes computer science 
gir girard 
une extension de interpretation de godel analyse son application elimination des coupures dans analyse la theorie des types 
nd scandinavian logic symp pages 
hen fritz henglein 
type inference polymorphic recursion 
acm transactions programming languages systems april 
jon mark jones 
quali ed types theory practice 
phil 
thesis oxford university september 
jon mark jones 
hindley milner types rst class structures 
proc 
haskell workshop la jolla pages june 
yale university research report yaleu dcs rr 
ktu kfoury tiuryn urzyczyn 
undecidability semi uni cation problem 
technical report bucs boston university oct 
proc 
symp 
theory computing baltimore maryland may 
ktu kfoury tiuryn urzyczyn 
type reconstruction presence polymorphic recursion 
acm transactions programming languages systems april 
lmm lassez maher marriott 
uni cation revisited 
minker editor foundations deductive databases logic programming 
morgan kau man 
lo konstantin laufer martin odersky :10.1.1.51.53
polymorphic type inference data types 
acm transactions programming languages systems september 
lpar john launchbury simon peyton jones 
state haskell 
lisp symbolic computation appear 
mcc mccracken 
typechecking programs implicit type structure 
gilles kahn david macqueen gordon plotkin editors semantics data types pages 
springer verlag june 
lecture notes computer science 
mil robin milner 
theory type polymorphism programming 
journal computer system sciences dec 
mil dale miller 
uni cation mixed pre journal symbolic computation 
mit john mitchell 
polymorphic type inference containment 
gerard huet editor logical foundations functional programming ut year programming series chapter 
addison wesley publishing 
mor morris 
lambda calculus models programming languages 
phd thesis massachusetts institute technology 
technical report mac tr 
mp mitchell plotkin 
types existential types 
acm trans 
programming languages systems 
mp mauny pottier 
implementation caml light existential types 
technical report inria october 
distributed caml light system 
myc mycroft 
polymorphic type schemes recursive de nitions 
proc 
th int 
symposium 
programming lncs 
og james william toole david gi ord 
polymorphic type reconstruction 
proceedings acm sigplan conference language design implementation pages 
acm acm press june 
ol martin odersky konstantin laufer 
type reconstruction presence type scheme annotations 
technical report university karlsruhe 
forthcoming 
martin odersky philip wadler martin 
second look overloading 
proc 
acm conf 
functional programming computer architecture pages june 
perry 
implementation practical functional programming languages 
phd thesis imperial college science technology medicine university london 
pfe frank pfenning 
partial polymorphic type inference higher order uni cation 
proceedings acm conference lisp functional programming pages july 
rem didier remy 
typechecking records variants natural extension ml 
proc 
th acm symposium principles programming languages 
rem didier remy 
programming objects ml art extension ml record types 
proc 
theoretical aspects computer software pages april 
springer lncs 
rey john reynolds 
theory type structure 
international programming symposium pages 
springer verlag 
lecture notes computer science 
wel wells 
typability type checking second order calculus equivalent undecidable 
proc 
th ieee symposium logic computer science pages july 
