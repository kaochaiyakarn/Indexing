ieee transactions knowledge data engineering vol 
september october distributed constraint satisfaction problem formalization algorithms makoto yokoo edmund durfee member ieee toru ishida member ieee kuwabara develop formalism called distributed constraint satisfaction problem distributed csp algorithms solving distributed csps 
distributed csp constraint satisfaction problem variables constraints distributed multiple agents 
various application problems distributed artificial intelligence formalized distributed csps 
newly developed technique called asynchronous backtracking allows agents act asynchronously concurrently global control guaranteeing completeness algorithm 
furthermore describe asynchronous backtracking algorithm modified efficient algorithm called asynchronous weak commitment search revise bad decision exhaustive search changing priority order agents dynamically 
experimental results various example problems show asynchronous weak commitment search algorithm far efficient asynchronous backtracking algorithm solve fairly large scale problems 
index terms backtracking algorithms constraint satisfaction problem distributed artificial intelligence iterative improvement algorithm multiagent systems 
artificial intelligence dai subfield artificial intelligence concerned interaction especially coordination artificial automated agents 
distributed computing environments spreading rapidly due advances hardware networking technologies pressing needs dai techniques 
dai vital area research artificial intelligence 
develop formalism called distributed constraint satisfaction problem distributed csp 
distributed csp constraint satisfaction problem csp variables constraints distributed multiple automated agents 
csp problem find consistent assignment values variables 
definition csp simple surprisingly wide variety ai problems formalized csps 
similarly various application problems dai concerned yokoo ntt communication science laboratories seika cho soraku gun kyoto japan 
mail yokoo cslab ntt jp 
durfee department electrical engineering computer science university michigan ann arbor mi 
mail durfee umich edu 
ishida department information science kyoto university yoshida ku kyoto japan 
mail ishida kyoto ac jp 
kuwabara ntt research development headquarters telegraph telephone ku tokyo japan 
mail kuwabara rdh ecl ntt jp 
manuscript received apr revised june 
extended version authors previous conference papers 
information obtaining reprints article please send mail tkde computer org ieeecs log number 
ieee finding consistent combination agent actions formalized distributed csps 
example multiagent truth maintenance system distributed version truth maintenance system 
system exist multiple agents truth maintenance system 
agent uncertain data believed believed shares data agents 
agent determine label data consistently shared data label 
multiagent truth maintenance task formalized distributed csp uncertain data variable value 
example distributed resource allocation problem communication network described 
problem agent tasks ways plans perform task 
resources shared agents exist constraints contention plans 
goal find combination plans enables tasks executed simultaneously 
problem formalized distributed csp representing task variable possible plans variable values 
application problems concerned finding consistent combination agent actions decisions distributed scheduling distributed interpretation problems formalized distributed csps 
variety dai application problems formalized distributed csps consider distributed algorithms solving distributed csps important infrastructure dai 
ieee transactions knowledge data engineering vol 
september october noted algorithms solving distributed csps similar parallel distributed processing methods solving csps research motivations fundamentally different :10.1.1.1.9598
primary concern parallel distributed processing efficiency choose type parallel distributed computer architecture solving problem efficiently 
contrast distributed csp exists situation knowledge problem variables constraints distributed automated agents 
main research issue reach solution situation 
knowledge problem gathered agent agent solve problem normal centralized constraint satisfaction algorithms 
collecting information problem requires communication costs costs translating knowledge exchangeable format 
example constraint stored complicated specialized internal function agent 
order communicate knowledge constraint agent implemented different computer architecture agent translate knowledge exchangeable format table allowed allowed combinations variable values 
costs centralizing information agent prohibitively high 
furthermore application problems gathering information agent undesirable impossible security privacy reasons 
cases multiple agents solve problem centralizing information 
develop basic algorithm solving distributed csps called asynchronous backtracking 
algorithm agents act asynchronously concurrently local knowledge global control completeness algorithm guaranteed 
furthermore describe asynchronous backtracking algorithm modified efficient algorithm called asynchronous weak commitment search inspired weak commitment search algorithm solving csps 
main characteristic algorithm follows agents revise bad decision exhaustive search changing priority order agents dynamically 
asynchronous backtracking algorithm priority order agents determined agent tries find value satisfying constraints variables higher priority agents 
agent sets variable value agent strongly committed selected value selected value changed exhaustive search performed lower priority agents 
large scale problems single mistake selection values fatal exhaustive search virtually impossible 
drawback common backtracking algorithms 
asynchronous search agent find value consistent higher priority agents priority order changed agent highest priority 
result agent mistake selecting value priority agent higher agent mistake commit bad decision selected value changed 
show asynchronous weak commitment search algorithm solve various problems distributed queens problem distributed problem network resource allocation problem asynchronous backtracking algorithm fails solve reasonable amount time 
results interesting imply flexible agent organization hierarchical order changed dynamically performs better organization hierarchical order static rigid assume priority order represents hierarchy agent authority priority order decision making 
sections describe definition distributed csp section 
show trivial algorithms solving distributed csps section describe asynchronous backtracking algorithm detail section 
show asynchronous search algorithm obtained modifying asynchronous backtracking algorithm section 
empirical results compare efficiency algorithms section 
distributed constraint satisfaction problem csp csp consists variables xn values taken finite discrete domains dn respectively set constraints values 
constraint defined predicate 
constraint pk xk predicate defined cartesian product dk 
predicate true iff value assignment variables satisfies constraint 
solving csp equivalent finding assignment values variables constraints satisfied 
distributed csp distributed csp csp variables constraints distributed automated agents 
assume communication model agents communicate sending messages 
agent send messages agents iff agent knows addresses agents 
delay delivering message finite random 
transmission pair agents messages received order sent 
noted model necessarily mean physical communication network fully connected complete graph 
parallel distributed algorithm studies topology physical communication network plays important role assume existence reliable underlying yokoo distributed constraint satisfaction problem formalization algorithms communication structure agents care implementation physical communication network 
primary concern cooperation intelligent agents solving csps certain multiprocessor architectures 
agent variables tries determine values 
exist interagent constraints value assignment satisfy interagent constraints 
formally exist agents variable xj belongs agent relation represented belongs xj 
constraints distributed agents 
fact agent knows constraint predicate pk represented known pk 
say distributed csp solved iff conditions satisfied xj belongs xj value xj assigned dj pk known pk pk true assignment xj dj 
loss generality assumptions describing algorithms simplicity 
relaxing assumptions general cases relatively straightforward agent exactly variable 
constraints binary 
agent knows constraint predicates relevant variable 
identifier xi represent agent variable 
assume agent variable unique identifier 
trivial algorithms solving distributed csp methods solving csps divided groups search algorithms backtracking algorithms consistency algorithms 
consistency algorithms preprocessing procedures invoked search 
consistency algorithms truth maintenance system framework essentially monotonic applied straightforwardly distributed csps 
agent assumption truth maintenance system agents execute consistency algorithm exchanging possible values generating new constraints nogoods hyper resolution rules exchanging obtained nogoods 
focus search algorithms distributed csps 
consider trivial algorithms solving distributed csps 
centralized method trivial algorithm solving distributed csp select leader agent agents gather information variables domains 
consider case agents share variable 
case formalized agents different variables exist constraints variables value 

algorithm agent multiple variables described 
constraints leader agent 
leader solves csp normal centralized constraint satisfaction algorithms 
discussed section cost collecting information problem prohibitively high 
furthermore application problems software agents agent acts secretary individual gathering information agent undesirable impossible security privacy reasons 
synchronous backtracking standard backtracking algorithm csp modified yield synchronous backtracking algorithm distributed csps 
assume agents agree instantiation order variables agent goes agent 
agent receiving partial solution instantiations preceding variables previous agent instantiates variable constraints knows 
finds value appends partial solution passes agent 
instantiation variable satisfy constraints sends backtracking message previous agent 
algorithm suffer communication overhead centralized method determining instantiation order requires certain communication costs 
furthermore algorithm take advantage parallelism 
time agent receiving partial solution acting problem solved sequentially 
asynchronous backtracking overview asynchronous backtracking algorithm removes drawbacks synchronous backtracking allowing agents run concurrently asynchronously 
agent instantiates variable communicates variable value relevant agents 
represent distributed csp constraints binary network variables nodes constraints links nodes 
agent exactly variable node represents agent 
identifier representing agent variable 
assume link constraint directed 
words agents involved constraint assigned constraint receives agent value 
link directed agent constraint evaluating agent 
example fig 
agents variable domains respectively constraints 
variation synchronous backtracking algorithm called network consistency protocol :10.1.1.1.9598
algorithm agents construct depth search tree 
agents act synchronously passing privilege agents parent search tree act concurrently 

emphasized constraint network physical communication network 
link constraint network physical communication link logical relation agents 
ieee transactions knowledge data engineering vol 
september october fig 

example constraint network 
agent instantiates variable concurrently sends value agents connected outgoing links 
agents wait respond messages 
fig 
describes procedures executed agent receiving kinds messages 
kind ok message constraint evaluating agent receives value sending agent asking value chosen acceptable fig 

second kind nogood message value sending agent receives indicating constraint evaluating agent constraint violation fig 
ii 
agent set values agents connected incoming links 
values constitute agent agent view 
fact value represented pair agent identifier value 
agent view set pairs 
ok message sent incoming link evaluating agent adds pair agent view checks value assignment represented current value consistent agent view 
assignment consistent agent view constraints agent evaluates true value assignments described agent view current value communicated nogoods compatible agent view current value 
assignment consistent agent view agent tries change current value consistent agent view 
subset agent view called nogood agent able find consistent value subset 
example fig 
agents instantiate variables agent view 
possible value consistent agent view agent view nogood 
agent finds subset agent view nogood assignments agents changed 
agent causes backtrack fig 
iii sends nogood message agents 

algorithm described way agent reacts messages sequentially agent fact handle multiple messages concurrently agent revises agent view nogood list messages performs check agent view 

nogood compatible agent view current value variables nogood values agent view current value 

ideally nogoods detected fig 
iii minimal subset nogood 
finding minimal nogoods requires certain computation costs agent nogoods 
simplest case agent view nogood 
avoiding infinite processing loops agents change values reach stable state infinite processing loop 
infinite processing loop occur exists value changing loop agents change causes change change causes change causes change 
network representation loop represented cycle directed links 
way avoid cycles network total order relationship nodes 
node unique identifier define priority order agents alphabetical order identifiers preceding agent alphabetical order higher priority 
link directed priority order higher priority agent lower priority agent cycle network 
means constraint lower priority agent evaluator higher priority agent send ok message evaluator 
furthermore nogood nogood message sent lowest priority agent nogood fig 
iii 
similar techniques unique identifier method avoiding deadlock distributed database systems 
knowledge agent requires unique identifier method local needed synchronous backtracking 
synchronous backtracking agents act predefined sequential order 
sequential order obtained easily just giving unique identifier agent 
agent know previous agent means polling agents find closest identifiers 
hand unique identifier method asynchronous backtracking agent know identifiers agent establish constraint order direct constraint 
handling asynchronous changes agents change instantiations asynchronously agent view subject changes 
lead potential inconsistencies constraint evaluating agent send nogood message agent changed value offending variable result constraints 
essence nogood message may obsolete information value sending agent necessarily change value 
introduce context attachment deal potential inconsistencies 
context attachment agent couples message nogood triggered 
nogood context backtracking 
receiving message recipient changes value nogood compatible current agent view assignment fig 
ii 
nogood attached nogood message indicates cause failure asynchronous backtracking includes function backtracking csps 
nogood viewed new constraint derived original constraints 
incorporating new constraint agents avoid repeating mistake 
example fig 
nogood represents yokoo distributed constraint satisfaction problem formalization algorithms fig 

procedures receiving messages asynchronous backtracking 
fig 

example algorithm execution asynchronous backtracking 
constraint 
link originally new link added 
receiving nogood message agent asks add link 
general original constraints binary newly derived constraints variables 
case agents lowest priority constraint evaluator links added agents evaluator 

link constraint network represents logical relation agents adding link mean adding new physical communication path agents 
example fig 
receiving ok messages agent view 
possible value consistent agent view agent view nogood 
agent chooses lowest priority agent agent view agent sends nogood message nogood 
receiving nogood message agent records nogood 
nogood contains agent connected link 
new link added 
agent requests send value adds agent view fig 

agent checks value consistent agent view 
nogood ieee transactions knowledge data engineering vol 
september october fig 

example algorithm execution asynchronous backtracking 
received agent compatible assignment agent view assignment inconsistent agent view 
agent view nogood possible values 
agent nogood agent agent sends nogood message agent fig 

furthermore illustrate execution algorithm distributed version known queens problem 
exist agents corresponds queen row 
goal agents find positions chess board queens threaten 
noted trace algorithm execution vary significantly timing delay messages example shows possible trace execution 
initial values shown fig 

agents communicate values 
priority order determined alphabetical order identifiers 
agents change value new value consistent agent view fig 
agent changes value consistent value 
agent changes value consistent value changes value value longer consistent new value 
consistent value agent sends nogood message changes value value consistent agent view value 
note ignore nogood message changed value receives message 
agents send ok messages agents 
satisfy constraints consistent value agents values consistent agent view 
sends nogood message 
receiving nogood message changes value fig 

changes value 
consistent value agent sends nogood message changes value value consistent agent view value fig 

nogood message ignored 
consistent value agent sends nogood message 
receiving message consistent value sends nogood message 
receiving message consistent value sends nogood message 
changes value fig 

changes value 
consistent value agent sends nogood message changes value value consistent agent view value 
nogood message ignored solution fig 

algorithm soundness completeness show exists solution algorithm reaches stable state variable values satisfy constraints agents waiting incoming message solution exists algorithm discovers fact terminates 
agents reach stable state variable values satisfy constraints 
soundness algorithm clear 
furthermore algorithm complete finds solution exists terminates failure solution 
solution exist problem overconstrained 
overconstrained situation algorithm eventually generates nogood corresponding empty set 
nogood logically represents set assignments leads contradiction empty nogood means set assignments leads contradiction 
solution possible 
algorithm terminates failure empty nogood formed 
far shown algorithm leads stable state problem solved generates empty nogood algorithm terminates failure 
remains show algorithm reaches finite time 
way algorithm reach agent cycling possible values infinite processing loop 
algorithm prove induction happen follows 
base case assume agent highest priority infinite loop 
highest priority receives nogood messages 
proposes possible value receives nogood message back gets message back 
receives nogood messages possible values variable generate empty nogood choice leads constraint violation algorithm terminate 
receive nogood message proposed value change value 
way infinite loop 
assume agents stable state agent infinite processing loop 
case messages agent receives nogood messages agents priorities lower nogood messages contain agents agents stable state nogoods agent receives compatible agent view 
mention way determine agents reached stable state contained algorithm 
detect stable state distributed termination detection algorithms needed 
yokoo distributed constraint satisfaction problem formalization algorithms change instantiation variable different value 
variable domain finite eventually generate value cause receive nogood contradicts assumption infinite loop exhausts possible values sends nogood 
nogood cause agent assumed stable state stable state 
contradiction infinite processing loop 
constraint satisfaction np complete general worst case time complexity asynchronous backtracking algorithm exponential number variables worst case space complexity algorithm determined number recorded nogoods 
asynchronous backtracking algorithm agent forget old nogoods creates new nogood 
agent need keep nogoods compatible agent view 
agent needs record nogoods number possible values asynchronous weak commitment search section briefly describe weak commitment search algorithm solving csps describe asynchronous weak commitment search algorithm constructed modifying asynchronous backtracking algorithm 
weak commitment search algorithm weak commitment search algorithm variables tentative initial values 
consistent partial solution constructed subset variables partial solution extended adding variables complete solution 
variable added partial solution tentative initial value revised new value satisfies constraints variables included partial solution satisfies constraints possible variables included partial solution 
value ordering heuristic called min conflict heuristic :10.1.1.31.8372
exists value variable satisfies constraints variables included partial solution algorithm abandons partial solution starts constructing new partial solution scratch current value assignment new tentative initial values 
algorithm records abandoned partial solutions new constraints avoids creating partial solution created abandoned 
completeness algorithm finds solution exists terminates solution exists guaranteed 
experimental results various example problems illustrate algorithm times efficient min conflict backtracking breakout algorithm :10.1.1.31.8372
basic ideas main characteristics weak commitment search algorithm described previous subsection follows algorithm uses min conflict heuristic value ordering heuristic 
abandons partial solution restarts search process exists consistent value partial solution 
introducing characteristic asynchronous backtracking algorithm relatively straightforward 
selecting variable value exist multiple values consistent agent view satisfy constraints variables higher priority agents agent prefers value minimizes number constraint violations variables lower priority agents 
contrast introducing second characteristic asynchronous backtracking straightforward agents act concurrently asynchronously agent exact information partial solution 
furthermore multiple agents may try restart search process simultaneously 
show distributed constraint satisfaction algorithm commits partial solution weakly constructed changing priority order dynamically 
define way establishing priority order introducing priority values change priority values rules variable agent nonnegative integer value representing priority order variable agent defined 
call value priority value 
order defined variable agent larger priority value higher priority 
priority values multiple agents order determined alphabetical order identifiers 
variable agent initial priority value 
exists consistent value xi priority value xi changed largest priority value related agents 
noted asynchronous weak commitment search algorithm fundamentally different backtracking algorithms dynamic variable ordering dynamic backtracking dependency directed backtracking 
backtracking algorithms partial solution modified sure partial solution part complete solution dynamic backtracking dependency backtracking way finding true cause failure backtracking 
asynchronous weak commitment search algorithm partial solution modified completely abandoned failure backtracking 
furthermore asynchronous backtracking algorithm agents try avoid situations previously nogoods 
due delay messages agent view agent occasionally identical previously nogood 
order avoid reacting unstable situations performing unnecessary changes priority values agent performs procedure agent records nogoods sent 
agent view identical nogood sent agent change priority value waits message 
ieee transactions knowledge data engineering vol 
september october fig 

procedures receiving messages asynchronous weak commitment search 
details algorithm asynchronous weak commitment search agent concurrently assigns value variable sends variable value agents 
agents wait respond incoming messages 
fig 
procedures executed agent xi receiving ok message nogood message described 
differences procedures procedures asynchronous backtracking algorithm follows asynchronous backtracking algorithm agent sends variable value related lower priority agents asynchronous search algorithm agent sends 
asynchronous backtracking algorithm described way agent reacts messages sequentially agent handle multiple messages concurrently agent revises agent view nogood list messages performs check agent view 

asynchronous backtracking way determine agents reached stable state contained algorithm 
variable value lower higher priority agents connected constraints 
call related agents neighbors 
priority value current value assignment communicated ok message fig 

priority order determined communicated priority values 
current value consistent agent view constraint variables higher priority agents satisfied agent changes value value consistent agent view value minimizes number constraint violations variables lower priority agents fig 
ii 
find consistent value agent view sends nogood messages agents increments priority value 
sent identical nogood change priority value wait message fig 
iii 
yokoo distributed constraint satisfaction problem formalization algorithms example illustrate execution algorithm distributed queens problem described section 
initial values shown fig 

agents communicate values 
values parentheses represent priority values 
initial priority values 
priority values equal priority order determined alphabetical order identifiers 
value consistent agent view 
consistent value agent sends nogood messages increments priority value 
case value minimizing number constraint violations conflicts 
selects sends ok messages agents fig 

tries change value 
consistent value agent sends nogood messages increments priority value 
case value minimizes number constraint violations 
example selects sends ok messages agents fig 

changes value solution obtained fig 

distributed queens problem exists solution value 
see bad decision setting value revised exhaustive search asynchronous search 
algorithm completeness priority values changed new nogood 
number possible nogoods finite priority values changed infinitely 
certain time point priority values stable 
show situations described occur priority values stable exist agents satisfy constraints agents waiting incoming messages 
messages repeatedly sent received algorithm reach stable state infinite processing loop 
situation occurs exist agents satisfy constraint 
assume agent ranking kth priority order satisfy constraint agent ranking jth agents ranking higher kth satisfy constraints 
case kth agent waits incoming messages agent satisfy constraint jth agent 
number possible nogoods exponential number variables 
fig 

example algorithm execution asynchronous weak commitment search 
kth agent sent nogood messages higher priority agents 
fact contradicts assumption higher priority agents satisfy constraints 
situation occur 
priority values stable asynchronous weak commitment search algorithm basically identical asynchronous backtracking algorithm 
asynchronous backtracking guaranteed fall infinite processing loop situation occur 
fact situation occur guarantee asynchronous weak commitment search algorithm find solution find fact solution exists 
constraint satisfaction np complete general worst case time complexity asynchronous search algorithm exponential number variables furthermore worst case space complexity exponential result inevitable algorithm changes search order flexibly guaranteeing completeness 
restrict number recorded nogoods asynchronous search algorithm agent records fixed number nogoods 
case theoretical completeness guaranteed algorithm may fall infinite processing loop agents repeatedly find identical nogoods 
number recorded nogoods reasonably large infinite processing loop rarely occurs 
asynchronous weak commitment search find solutions example problems number recorded nogoods restricted 
security privacy agents reason solving distributed csp distributed fashion agents want communicate information centralized leader agent 
information agents reveal asynchronous backtracking weak commitment search algorithm 
algorithms agents communicate current value assignments nogoods 
observing value assignments agent agents gradually accumulate information domain agents tell obtained information domain complete 
values selected violate constraints higher priority agents 
furthermore agent reveals information constraints directly 
nogood message sent highly summarized information constraints nogoods sent agents 
ieee transactions knowledge data engineering vol 
september october see amount information revealed algorithms smaller centralized methods agents declare precise information variable domains constraints 
evaluations section evaluate efficiency algorithms discrete event simulation agent maintains simulated clock 
agent time incremented simulated time unit performs cycle computation 
cycle consists reading incoming messages performing local computation sending messages 
assume message issued time available recipient time 
analyze performance terms number cycles required solve problem 
cycle corresponds series agent actions agent recognizes state world value assignments agents decides response state value assignment communicates decisions 
comparison synchronous asynchronous backtracking going compare synchronous backtracking algorithm asynchronous backtracking algorithm 
agents act concurrently asynchronous backtracking algorithm expect asynchronous backtracking algorithm efficient synchronous backtracking algorithm 
degree speed affected strength constraints agents 
constraints agents weak expect agents easily reach solution concurrently set values 
hand constraints agents strong assume higher priority agents set values properly lower priority agents choose consistent values performance asynchronous backtracking algorithm close synchronous backtracking 
verify expectations performed experimental evaluations distributed queens problem explained previous section 
agent corresponds queen row 
distributed queens problem solved agents 
distributed queens problem constraints agents weak increases 
results summarized graph shown fig 

comparisons fair included dependency directed backtracking synchronous backtracking 
agent randomly selects value consistent values higher priority agents 
graph shows average trials 
distributed queens problem exist constraints pair 
drawback model take account costs communication 
introducing communication costs model difficult don standard way comparing communication costs computation costs 

evaluation include cost determining sequential order synchronous backtracking cost termination detection asynchronous backtracking 
fig 

comparison synchronous asynchronous backtracking distributed queens 
agents 
synchronous backtracking algorithm basically equivalent network consistency protocol described :10.1.1.1.9598
expected obtained parallelism asynchronous backtracking larger increases 
asynchronous backtracking approximately times fast synchronous backtracking 
traditionally distributed artificial intelligence applications involve having agents nearly independent loosely coupled subproblems 
results confirm local subproblems loosely coupled solving problem asynchronously multiple agents worthwhile 
comparison asynchronous backtracking asynchronous weak commitment search going compare kinds algorithms asynchronous backtracking variable value selected randomly consistent values priority order determined alphabetical order asynchronous backtracking min conflict heuristic min conflict heuristic introduced priority order statically determined alphabetical order asynchronous weak commitment search 
applied algorithms distributed queens problem described previous section varying 
results summarized table 
generated problems 
asynchronous backtracking algorithm requires messages synchronous backtracking cycle synchronous backtracking efficient asynchronous backtracking due communication overhead requires cycles 

amount communication overhead algorithms equivalent 
amounts local computation performed cycle equivalent 
amount local computation smaller min conflict heuristic lowest priority agent amounts local computation algorithms equivalent 

min conflict heuristic effective large include results :10.1.1.31.8372
yokoo distributed constraint satisfaction problem formalization algorithms table comparison asynchronous backtracking asynchronous weak commitment search distributed queens table comparison asynchronous backtracking asynchronous weak commitment search distributed graph coloring problem different randomly generated initial values averaged results problems 
problem order conduct experiments reasonable amount time set limit number cycles terminated algorithm limit exceeded 
show average successful trials ratio problems completed successfully total number problems table 
second example problem distributed problem 
graph coloring problem node corresponds agent 
problem involves painting nodes graph different colors nodes connected arc color 
randomly generated problem nodes agents arcs method described graph connected problem solution :10.1.1.31.8372:10.1.1.31.8372
evaluated problem 
parameter setting corresponds sparse problems reported poor performance heuristic :10.1.1.31.8372
generated different problems problem trials different initial values performed trials 
distributed queens problem initial values set randomly 
results summarized table 
order examine applicability asynchronous weak commitment search real life problems artificial random problems applied algorithms distributed resource allocation problem communication network described 
problem exist requests allocating circuits switching nodes ntt communication network japan fig 

request exists agent assigned handle candidates circuits 
goal find set circuits satisfies resource constraints 
problem formalized distributed csp representing request variable candidate possible value variable 
generated problems data mbps backbone network extracted network configuration management database developed ntt optical network systems laboratories 
problem exist randomly generated circuit allocation requests request candidates 
candidates represent reasonably short circuits satisfying request 
assume candidates calculated 
constraints requests assign circuits 
generated different sets randomly generated initial values different problems trials averaged results 
previous ieee transactions knowledge data engineering vol 
september october fig 

example network resource allocation problem 
problems limit required number cycles set 
results summarized table 
see facts results asynchronous weak commitment search algorithm solve problems solved reasonable amount computation time asynchronous backtracking algorithms 
min conflict heuristic certain amount speed obtained algorithm fails solve problem instances 
priority order static efficiency algorithm highly dependent selection initial values distribution required cycles quite large 
example network resource allocation problem min conflict heuristic average number required cycles successfully completed trials 
number required cycles failed trials 
initial values higher priority agents solution easily 
values bad exhaustive search required revise values tends number required cycles exceed limit 
hand asynchronous weak commitment search initial values critical solution initial values far final solution variable values gradually come close final solution 
assume priority order represents hierarchy agent authority priority order decision making 
hierarchy static bad value selections agents higher priority fatal agents 
hand changing priority order dynamically selecting values cooperatively specific agents fatal effects bad decisions decisions survive 
results intuitively natural imply flexible agent organization performs better static rigid organization 
develop formalism distributed constraint satisfaction problems represent various application problems distributed artificial intelligence 
developed basic algorithm solving distributed csps called asynchronous backtracking agents act asynchronously concurrently global control 
furthermore developed efficient algorithm called asynchronous weak commitment search revise bad decision exhaustive search just weak commitment search algorithm csps 
series experimental results compare efficiency algorithms 
results show asynchronous weak commitment search algorithm solve fairly large scale problems distributed queens problem distributed graph coloring problem network resource allocation problem reasonable amount time 
includes examining effectiveness asynchronous weak commitment search algorithm practical applications introducing heuristics forward checking asynchronous search algorithm clarifying appropriate agent variable ordering heuristics agent multiple variables 
table comparison asynchronous backtracking asynchronous weak commitment search network resource allocation problem yokoo distributed constraint satisfaction problem formalization algorithms acknowledgments authors fujii providing network configuration management database providing example problems 
readings distributed artificial intelligence bond gasser eds 
morgan kaufmann 
huhns multiagent truth maintenance ieee trans 
systems man cybernetics vol 
pp 

doyle truth maintenance system artificial intelligence vol 
pp 

kuwabara lesser meyer multistage negotiation distributed constraint satisfaction ieee trans 
systems man cybernetics vol 
pp 

sycara roth sadeh fox distributed constrained heuristic search ieee trans 
systems man cybernetics vol 
pp 

mason johnson framework distributed assumption reasoning gasser huhns eds distributed artificial intelligence vol 
ii pp 

morgan kaufmann 
collin dechter katz feasibility distributed constraint satisfaction proc :10.1.1.1.9598
th int joint conf 
artificial intelligence pp 

zhang mackworth parallel distributed algorithms finite constraint satisfaction problems proc 
third ieee symp 
parallel distributed processing pp 

yokoo weak commitment search solving constraint satisfaction problems proc 
th nat conf 
artificial intelligence pp 

kuwabara ishida yokoo speed distributed constraint satisfaction application communication network path assignments systems computers japan vol 
pp 

yokoo dynamic variable value ordering heuristics solving large scale distributed constraint satisfaction problems proc 
th int workshop distributed artificial intelligence pp 

mackworth constraint satisfaction shapiro ed encyclopedia artificial intelligence second ed pp 

new york wiley interscience 
de kleer comparison atms csp techniques proc 
th int joint conf 
artificial intelligence pp 

yokoo ishida kuwabara distributed constraint satisfaction dai problems proc 
th int workshop distributed artificial intelligence 
rosenkrantz stearns lewis system level concurrency control distributed database systems acm trans 
database systems vol 
pp 

chandy lamport distributed snapshots determining global states distributed systems acm trans 
computer systems vol 
pp 

minton johnston philips laird minimizing conflicts heuristic repair method constraint satisfaction scheduling problems artificial intelligence vol :10.1.1.31.8372
nos 
pp 

morris breakout method escaping local minima proc 
th nat conf 
artificial intelligence pp 

ginsberg dynamic backtracking artificial intelligence research vol 
pp 

yamaguchi fujii network configuration management database ntt vol 
pp 

yokoo durfee ishida kuwabara distributed constraint satisfaction formalizing distributed problem solving proc 
th ieee int conf 
distributed computing systems pp 

yokoo asynchronous weak commitment search solving distributed constraint satisfaction problems proc 
int conf 
principles practice constraint programming pp 
springer verlag 
makoto yokoo received degrees electrical engineering respectively phd degree information communication engineering university tokyo japan 
currently senior research scientist ntt communication science laboratories kyoto japan 
visiting research scientist department electrical engineering computer science university michigan ann arbor 
current research interests include distributed artificial intelligence multiagent systems constraint satisfaction search 
edmund durfee received ab degree chemistry physics harvard university ms phd degrees university massachusetts computer science engineering respectively 
phd research developed approach planning coordinated actions interactions network distributed ai problem solving systems described book coordination distributed problem solvers kluwer academic press 
associate professor electrical engineering computer science holds joint appointment school information university michigan ann arbor 
research interests distributed artificial intelligence planning cooperative robotics real time problem solving 
received presidential young investigator award national science foundation support invited speaker national conference artificial intelligence 
associate editor ieee transactions systems man cybernetics program third international conference multiagent systems 
member ieee 
toru ishida received meng deng degrees kyoto university kyoto japan respectively 
currently professor department information science kyoto university kyoto 
research scientist ntt laboratories 
visiting research scientist department computer science columbia university 
authored parallel distributed multiagent production systems springer realtime search learning autonomous agents kluwer academic 
proposed parallel rule firing extended distributed rule firing 
organizational self design introduced distributed production systems increasing adaptiveness 
colleagues initiated global collaboration john wiley sons 
member ieee 
kuwabara received degrees electrical engineering university tokyo japan respectively 
joined telegraph telephone ntt engaged research development knowledge systems multiagent systems 
visiting research scientist university massachusetts amherst 
currently doing research ntt research development headquarters 
