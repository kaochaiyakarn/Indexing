chapter reasoning agents dynamic domains baral department computer sc 
engg 
arizona state university tempe az asu edu michael gelfond department computer sc 
texas tech university tx michael gelfond coe ttu edu discusses architecture intelligent agents prolog language logic programs answer set semantics 
prolog represent agent knowledge domain formulate agent reasoning tasks 
outline tasks reduced answering questions properties simple logic programs demonstrate methodology constructing programs 
keywords intelligent agents logic programming nonmonotonic reasoning 
report attempt authors better understand design software components intelligent agents capable reasoning planning acting changing environment 
class agents includes limited intelligent mobile robots softbots intelligent information systems expert systems decision making systems 
ability design intelligent agents ia crucial diverse tasks space exploration intelligent communication internet development various types control systems 
despite substantial progress ia achieved decade far clear understanding basic principles techniques needed design 
problem complicated fact ia differ traditional software systems important aspects ffl agent large amount knowledge domain intended act capabilities goals 
logic artificial intelligence ffl able frequently expand knowledge new information coming observations communication agents awareness actions 
ffl knowledge explicitly represented agent memory 
implies agent able reason extract knowledge stored implicitly 
ffl agent able knowledge ability reason rationally plan execute actions 
observations imply solid theoretical foundations agent design theories knowledge representation reasoning 
reported theories theory logic programming nonmonotonic reasoning baral gelfond lifschitz marek truszczy nski theory actions change sandewall 
develops ontology basic relations needed modeling agent domain 
provides logic representing reasoning domain knowledge 
logic expressive classical firstorder predicate calculus 
additional expressibility needed represent defaults causal relations various forms transitive closures entailment relation logic nonmonotonic allows reasoner withdraw previously new information available 
property substantially simplifies process assimilating new information 
efficient systems implementing general reasoning algorithms developed logic programming community 
show systems implement specific planning explanation finding plan checking algorithms simple act style agent architecture 
approaches logic basis agent design 
differ primarily languages logics agent knowledge specified algorithms agent perform reasoning tasks agent architecture 
instance toronto school cognitive robotics levesque uses modified substantially expanded versions situation calculus mccarthy hayes specify agent knowledge :10.1.1.85.5082
despite occasional nonmonotonic entailment primarily form circumscription mccarthy toronto school prefer stay close possible entailment relation reasoning algorithms classical logic 
approach agent behavior determined program written programming language golog levesque variants 
program allows procedural constructs sequences loops conditionals non deterministic operators test conditions non determinism resolved interpreter plan executable 
interpret execute constructs agent uses situation calculus entailment relation described 
main program complemented execution monitor capable modifying plans invalidated exogenous actions special purpose reasoning modules 
kowalski kowalski reasoning agents dynamic domains sadri authors investigate architecture variant observe think act cycle 
internal state agent determined collection standard logic programming rules integrity constraints rules approach somewhat independent particular entailment relation authors favor entailments associated clark completion clark 
thinking part cycle performed combination traditional logic programming algorithms abduction denecker de schreye kakas forward reasoning means integrity constraints 
approaches develop parallel share common insights ideas 
result direct influence probably similarities determined common subject study 
technical differences approaches large believe complete understanding pros cons require substantial amount 
aimed explaining approach attempt comparison 
modeling agent adopt simplifying assumptions agents environments 
dynamics agent environment viewed possibly infinite transition diagram states sets fluents statements truth depends time arcs labeled actions 

agent capable making correct observations performing actions remembering domain history 
assumptions hold realistic domains suitable broad class applications 
domains effects actions truth observations known substantial degree uncertainty ignored modeling process 
case basic approach expanded introducing probabilistic information 
prefer start investigation simplest case way ladder complexity simple case reasonably understood 
assumptions determine structure agent knowledge base 
consists parts 
part called action description specifies transition diagram agent 
contains descriptions actions fluents relevant domain definition possible successor states system move action executed state oe 
due size diagram problem finding concise specification far trivial 
solution requires understanding nature causal effects actions presence complex interrelations fluents 
additional level complexity added fact standard mathematical reasoning causal reasoning nonmonotonic new information domain cause reasoning agent withdraw previously 
nonmonotonicity partly caused need representing defaults statements form normally objects type property 
default causal reasoning called inertia axiom mccarthy hayes :10.1.1.85.5082
says normally logic artificial intelligence actions change values fluents 
problem finding concise accurate representation default known frame problem substantially influenced ai research years shanahan 
second part agent knowledge contains observations agent record actions 
defines collection paths diagram interpreted domain possible trajectories traversed far 
agent knowledge complete complete information initial state action occurrences actions deterministic path 
believe theory agents contain logical language equipped consequence relation capable representing types agent knowledge 
prolog language choice prolog language logic programs answer set semantics gelfond lifschitz gelfond lifschitz 
prolog program consists signature sigma collection rules form head body head empty consists literal body form literals sigma 
literal atom negation body empty replace period 
says false epistemic character read reason believe true 
symbol denotes nonstandard logical connective called default negation negation failure 
prolog program pi viewed specification rational agent constructing beliefs possible states world 
technically beliefs captured notion answer set program pi 
ground pi denote program obtained pi replacing variables ground terms sigma 
answer sets pi mean answer sets ground pi 
pi consists rules containing default negation answer set smallest set ground literals sigma satisfies conditions 
closed rules ground pi rule pi literal body non empty head 
contains atom negation contains ground literals language 
difficult show set cn pi satisfying conditions 
pi arbitrary ground program prolog 
set ground literals signature sigma pi program obtained pi deleting rule occurrence body ii occurrences bodies remaining rules 
reasoning agents dynamic domains answer set pi cn pi limit attention consistent programs programs consistent answer set 
answer set pi 
ground literal true false expanded conjunctions disjunctions literals standard way 
query entailed program pi pi true answer sets pi 
queries delta delta delta delta delta delta atom denotes denotes called complementary 
complementary queries pi answer pi pi unknown 
examples 
assume signature sigma contains object constants program pi unique answer set fq program pi fp answer sets fp fp programs pi fp pi fp answer sets 
easy see programs prolog nonmonotonic 
pi pi fq 
prolog closely connected general nonmonotonic theories 
particular shown marek truszczy nski gelfond lifschitz simple natural mapping programs prolog subclass reiter default theories reiter 
similar results available autoepistemic logic moore moore 
specifying transition diagrams describe agent transition diagram domain history type queries available agent action languages gelfond lifschitz viewed formal models parts natural language talking effects actions 
particular action language reflects properties domain abilities agent 
define class action languages combine ideas baral mccain turner baral baral lifschitz 
languages sigma class parameterized respect signature sigma normally assume fixed omit notation 
simplicity language suitable illustrating methodology primary goal 
methodology applicable languages richer ontology 
follow slightly modified view lifschitz divide action language parts action description language history description logic artificial intelligence language query language 
start defining action description part denoted signature sigma consist disjoint non empty sets symbols set fluents set elementary actions 
set fa ang elementary actions called compound action 
interpreted collection elementary actions performed simultaneously 
actions mean elementary compound actions 
fluent literals mean fluents negations 
denote fluent literal complementary set fluent literals called complete action description sigma collection propositions form 
causes 
caused 
impossible elementary arbitrary actions respectively fluent literals sigma 
proposition says action executed situation hold fluent literal caused hold resulting situation 
propositions called dynamic causal laws 
restriction elementary essential lifted 
require simplify presentation 
second proposition called static causal law says arbitrary situation truth fluent literals called body sufficient cause truth proposition says action performed situation hold 
notice compound impossible fa means elementary actions performed concurrently 
action description defines transition diagram describing effects actions possible states domain 
state complete consistent set oe fluent literals oe closed static causal laws static causal law fl oe oe 
states serve nodes transition diagram 
nodes oe oe connected directed arc labeled action oe may result executing oe 
simplify diagram distinguish links labeled elementary action ones labeled fa 
set states may result executing state oe denoted res oe 
defining set action descriptions increasingly complex action languages main issues development action theories 
fixpoint definitions set different authors see instance mccain turner lin lifschitz 
definition give semantics prolog similar spirit baral 
consider program 
variables elementary compound arbitrary actions respectively variables fluent literals finite sets fluent literals variables integers interval 
integers interval interpreted time points 
program uses list notation predicate symbols member subset denoting standard membership proper subset relations member holds elementary action belonging rules pi describe effects reasoning agents dynamic domains holds causes occurs hold holds caused hold holds holds holds hold hold holds hold rest occurs occurs occurs member occurs occurs member occurs occurs occurs impossible hold occurs subset pi logic artificial intelligence causal laws 
predicate symbol holds denotes relation fluent literal true moment hold denotes expansion relation sets fluents occurs indicates action occurs moment relation satisfied consecutive moments time interval 
rule encodes law inertia 
default nature law nicely captured default negation 
rules define hold 
normally program pi conjunction complete list elementary actions occurred domain 
completeness expressed closed world assumption elementary actions encoded rule 
rules define complete list compound actions occur moment rule uses closed world assumption define compound action occur moment 
easy see complete list elementary actions occur moment compound action occurs moment fa 
rule empty head insure impossible actions impossible 
pi denote program obtained pi replacing time variables 
define transition relation determined action description definition action state oe state oe successor state oe answer set pi oe ag oe fl holds sg 
essential notice definition allows reduce computing successor states transition diagram representing dynamic domain computing answer sets comparatively simple logic programs 
domains concurrent actions definition equivalent mccain turner 
idea limited define larger range transition functions 
say action description deterministic state oe action sigma successor state cardinality set res oe 
example shows action descriptions nondeterministic 
example action description causes caused caused definition easy show transition diagram follows res ff fff gg res ff fff gg res ff fff gg res fff ff gg res fff gg res fff gg res fff gg reasoning agents dynamic domains action descriptions containing static causal laws deterministic addition laws adds expressive power language 
proposition gives sufficient condition guaranteeing property holds 
proposition action description static causal laws containing literal body deterministic 
proposition meant illustrate syntactic form action description learn important properties corresponding transition relations 
similar results somewhat different context pinto lin 
specifying history describe language specifying history agent domain 
expand action signature sigma integers denote time points actual evolution system 
evolution caused sequence consecutive actions corresponds initial situation corresponds execution domain past described set gamma axioms form 
happened 
observed elementary actions 
axiom says elementary action executed time second axiom indicates fluent literal observed true time axioms gamma referred observations 
set gamma observations uniquely defines current moment time gamma 
gamma gamma occurrence time gamma equal happened gamma gamma gamma max ft observed gammag 
gamma omitted possible 
set axioms defines collection paths transition diagram interpreted possible histories domain represented 
usual path mean sequence hoe oe oe oe state oe res oe gamma 
knowledge initial situation complete actions deterministic path 
pair ha gammai action description gamma set observations called domain description 
definition refines intuition meaning observations 
definition ha gammai domain description current time transition diagram defined hoe oe oe path say possible history 
action th action iff fa happened gamma gammag 

observed gamma oe domain description called consistent non empty set possible histories 
logic artificial intelligence queries consequence relation assume moment time agent maintains knowledge base form domain description various reasoning tasks agent reduced answering queries properties agent domain 
corresponding query language includes queries 
holds 
currently 
holds query asks fluent literal holds time query asks holds current moment time 
query hypothetical read true sequence actions executed time fluent literal true immediately 
sequence different occurs corresponding query expresses counterfactual 
query expresses hypothesis system behavior 
case omit query simply write holds 
definition formalizes intuition 
ha gammai domain description current moment transition diagram defined 
query holds consequence possible history oe oe oe oe 
query currently consequence possible history oe oe oe oe 
query holds consequence possible history oe oe oe executable oe path oe oe oe oe oe oe consequence relation query domain description ha gammai denoted gamma architecture intelligent agents demonstrate notion consistency domain description consequence relation gamma describe architecture intelligent agent 
architecture set elementary actions divided parts actions performed agent exogenous actions performed nature agents domain 
assume moment time agent memory contains domain description ha gammai partially ordered set agent goals 
goal mean finite set fluent literals agent wants true 
partial ordering corresponds comparative importance goals 
agent operates assumption able observe exogenous actions 
assumption contradicted observations reasoning agents dynamic domains may force agent conclude exogenous actions past remained unobserved 
agent repeatedly execute steps 
observe world incorporate observations gamma 
select important goal achieved 
find plan achieve 
execute step agent things 
observes exogenous actions fb happen current moment time observations recorded simply adding statements happened current set observations gamma agent history encoded new set axioms gamma current moment time second agent observes truth fluent literals agent observed exogenous actions happen time domain description ha gamma oi observed true consistent 
may inconsistent 
case new observations explained assuming occurrences unobserved exogenous actions 
suggests adding observations domain description agent check consistency necessary provide suitable explanation 
precise terms explanation unexplained observations mean collection statements elementary exogenous gamma consistent explained possible ways agent supplied mechanism selecting plausible 
simplify discussion assume possible 
denote set axioms agent step loop gamma current time second stage agent selects goal determine actions 
goals may priorities depend current state domain agent may change immediate goal execution loop 
goes step looks plan achieve planning problem reduced finding sequence ff actions gamma holds ff solved plan ff agent proceeds execute action records happened domain history goes back step loop 
course architecture valid computation performed execution body loop fast best knowledge idea observations added possible explanations published reiter 
logic artificial intelligence allow possibility occurrence exogenous actions may change relevant characteristics domain performed 
situations process considerably faster pre computing solutions certain goals 
solution instance stored agent memory rules form say gamma currently execute execute agents ability plan limited rules called reactive 
characterize deliberative 
normally agents deliberative reactive components 
notice reactive actions depend current knowledge agent choice actions may require certain amount reasoning 
course checking holds current situation requires substantially effort planning explaining observations 
example consider domain locations home airport objects money ticket 
agent jack capable driving current location getting money ticket 
action possible jack money located airport 
jack views world terms fluents jack jack 
exogenous action relevant jack losing object 
construct action description jack world model jack behavior 
steps example easily proven discussion informal 
comment ways automate reasoning steps 
types location home object money location airport object ticket fluents jack location jack object actions agent action drive location agent action get object exogenous action lose object details combination reactive deliberative reasoning context action languages baral son 
contains detailed comparison reactive aspects congolog de giacomo 
reasoning agents dynamic domains causal laws impossible drive jack causes drive jack impossible get ticket jack money impossible get ticket jack airport causes get jack causes lose jack caused jack jack impossible get drive impossible get lose assume jack goal ticket 
starts step algorithm records observations axioms observed jack money observed jack ticket observed jack home gamma jack goal selection trivial 
goes planning stage solves equation gamma holds jack ticket finds plan ff drive airport get ticket 
assume time find shortest plan 
jack proceeds executing action plan recording execution history domain 
new collection axioms follows gamma gamma drive airport current time jack continues observations 
suppose observes money missing 
observation contradicts ha gamma needs explanation 
explanation obtained solving equation gamma jack money consistent lose money gamma gamma lose money observed jack money assuming jack goal changed proceeds solve equation gamma holds jack ticket finds new plan ff get money get ticket gets money goes back step hopefully proceeds goal interruptions 
reasoning algorithms logic programming community developed large number reasoning algorithms range sldnf resolution implemented logic artificial intelligence traditional prolog systems xsb resolution chen implementing founded semantics van gelder comparatively techniques computing answer sets prolog nski niemela simons faber wang zaniolo 
form basis answer set programming advocated niemela marek truszczy nski 
section illustrate algorithms implement architecture perform agent reasoning tasks 
planning subsection discuss model theoretic planning prolog 
approach answer sets program encode possible plans 
slightly differ previous answer set planning emphasizing planning modules restrict kind plans looking 
modules allow concurrency force sequentiality plans specify preference actions incorporate reactive components deliberative planning contain domain dependent control information 
start assuming corresponding domain description ha gammai consistent deterministic set gamma axioms complete uniquely determines initial situation goal set fluent literals 
assume time represented integers maximum length plan agent willing search find solution equation consider program pi pi gamma consists rules occurs happened holds observed agent action 
agent action 
discuss construct planning modules agents different degrees sophistication 
start simple planning module pm hold occurs hold agent action occurs pm pi pm planning observation reasoning agents dynamic domains sequence ff actions plan iff answer set ff fa elementary occurs sg 
due space limitations give proof statement 
idea simple 
notice moment goal satisfied rule rule program pi generates possible sets occurrences agent actions rules pi reject lead plan 
plan minimal length checking existence answer sets varying depth plan way 
similar techniques look plans incomplete domain descriptions 
instance values fluents initial situation unknown planning done follows 
expand rules observed observed observed observed 
find answer set resulting program 
set propositions form occurs check test succeeds defines plan 
process repeated look answer set 
answer sets analyzed plan exist 
alternatively look conditional plans incorporate testing values fluents planning variety techniques 
prolog implement planning modules different pm 
instance module pm consisting rules pm rules occurs agent action occurs hold occurs agent action occurs pm restricts agent attention sequential plans 
rules viewed prolog implementation choice operator sacc zaniolo 
finding sequential plan length bounded reduced computing answer sets pi pm illustrate slightly sophisticated planning module go back example assume jack follows prudent policy reporting logic artificial intelligence loss money police 
knowledge incorporated jack planning module done adding rules occurs report happened lose money reported reported happened report resulting rules allow agent create plans include simple reactive component 
suppose jack buy ticket credit card paying cash prefers pay cash 
represent information introduce new objects cash card static causal laws caused jack money jack card caused jack money jack cash 
jack preference represented adding rules planning module occurs pay cash occurs get holds jack cash occurs pay card occurs get holds jack cash jack plan pay cash possible credit card resort 
planning modules incorporated heuristic information needed speed planning process 
preliminary experiments show allows substantial increase efficiency planning process systematic investigation needed really precise general claims 
interesting serious study relationship planning methods described section satisfiability planning kautz selman 
explaining observations demonstrate answer set programming finding explanations solving equation 
achieved finding answer sets program pi em determines time interval past agent willing consider search explanations em explanation module consisting reasoning agents dynamic domains rules unexplained member holds unexplained occurs gamma exogenous action occurs occurs gamma exogenous action occurs em answer set set statements form happened gamma elementary exogenous action occurs happened occurrence explicitly observed 
explanation explanation depth obtained way 
case planning modules explanation module em elaborated tailored particular domain 
instance possible explanations certain observations may represented agent knowledge base list statements form poss exp fluent literal exogenous action 
list extracted automatically corresponding action description 
explanation module em uses information explain single unexplained observation occurrence single exogenous action interval gamma holds impossible impossible hold occurs poss exp impossible occurs occurs occurs happened occurs occurs happened em logic artificial intelligence answer set program pi em set statements form happened elementary exogenous action occurs happened explanation explanation consisting occurrence single elementary exogenous action interval obtained way 
checking entailment consider agent reactive component 
implementation component requires checking condition gamma currently shown reduced checking condition pi currently task accomplished constraint satisfaction approach answer set programming 
broad class deterministic domain descriptions condition checked traditional prolog xsb systems query currently simple modification program pi input 
modification requires addition information types variables bodies rules 
needed sure reasoning done prolog xsb pi sound complete respect queries type currently 
corresponding proof follows lines similar proof baral demonstrates input prolog interpreter terminates flounder require occur check 
allows reduce proof soundness completeness interpreter soundness completeness sldnf resolution 
ramifications choice inference engine solving problems entirely clear require investigation 
believe particular case diversity beneficial 
look situation agent plan executed action modified gamma record new observations discovered goal changed 
case natural start planning simply checking gamma holds complete deterministic acyclic domain descriptions watson done running prolog interpreter query holds reasoning agents dynamic domains program pi obtained expanding pi rules impossible impossible hold possible impossible holds holds holds ajs possible causes hold holds caused hold holds ajs possible holds holds ajs typing information added program guarantee soundness completeness method 
proposed model simple intelligent agent acting changing environment 
characteristic feature model extensive declarative language prolog 
language describing agent knowledge world abilities precise mathematical characterization agent tasks 
demonstrated agent reasoning tasks formulated questions programs prolog questions answered various logic programming algorithms 
high expressiveness language allows represent complex domains easily expressible traditional languages 
corresponding knowledge bases reasonably high degree elaboration tolerance 
advances logic programming theory allow prove correctness algorithms broad range domains 
new logic programming systems allow implementation 
systems dlv smodels demonstrated workshop 
systems find plans example solve complex tasks 
experimental results aimed testing efficiency system encouraging 
current rate improvement systems performance rapid advances understanding methodology programming prolog allow believe practicality approach 
applications xsb dlv smodels watson soininen niemela erdem mccain turner cui systems reached www cs utexas edu users tag 
acknowledgments lifschitz erdem minker referees useful comments 
baral 

reasoning actions non deterministic effects constraints qualification 
mellish editor proc 
ijcai pages 
morgan kaufmann 
baral gelfond 

logic programming knowledge representation 
journal logic programming 
baral gelfond 

representing actions laws observations hypothesis 
proc 
aaai spring symposium extending theories action formal theory practical applications 
baral gelfond 

representing actions laws observations hypothesis 
journal logic programming 
baral son 

relating theories actions reactive control 
electronic transactions artificial intelligence 
chen swift warren 

efficient top computation queries founded semantics 
journal logic programming 
nski marek truszczy nski 

default reasoning system 
aiello doyle shapiro editors proc 
kr pages 
morgan kaufmann 
clark 

negation failure 
gallaire minker editors logic data bases pages 
plenum press new york 
cui swift warren 

case study preference logic grammars knowledge representation 
gelfond leone pfeifer editors proc 
lpnmr pages 
springer 
eiter gottlob voronkov 

complexity expressive power logic programming 
proc 
th annual ieee conference computational complexity pages 
de giacomo lesperance levesque 

reasoning concurrent execution prioritized interrupts exogenous actions situation calculus 
ijcai pages 
morgan kaufmann 
reiter soutchanski 

execution monitoring high level robot programs 
cohn schubert shapiro editors proc 
kr pages 
morgan kaufmann 
logic artificial intelligence denecker de schreye 

sldnfa abductive procedure normal abductive logic programs 
journal logic programming 
erdem lifschitz wong 

wire routing satisfiability planning 
proc 
cl appear 
faber leone pfeifer 

pushing goal derivation dlp computations 
gelfond leone pfeifer editors proc 
lpnmr pages 
springer 
gelfond lifschitz 

stable model semantics logic programming 
kowalski bowen editors logic programming proc 
fifth int conf 
symp pages 
mit press 
gelfond lifschitz 

classical negation logic programs disjunctive databases 
new generation computing 
gelfond lifschitz 

representing actions extended logic programs 
apt editor joint international conference symposium logic programming pages 
mit press 
lifschitz 

action language causal explanation preliminary report 
proc 
aaai pages 
mit press 
kakas kowalski toni 

role abduction logic programming 
gabbay hogger robinson editors handbook logic artificial intelligence logic programming volume pages 
oxford university press 
kautz selman 

planning satisfiability 
proc 
ecai pages 
kowalski 

metalogic reconcile reactive rational agents 
apt turini editors meta logics logic programming pages 
mit press 
kowalski sadri 

logic programming multi agent systems 
annals mathematics artificial intelligence 
levesque reiter lesperance lin scherl 

golog logic programming language dynamic domains 
journal logic programming 
lifschitz 

foundations declarative logic programming 
brewka editor principles knowledge representation pages 
csli publications 
lifschitz 

components action language 
annals math ai 
lin 

causal theories successor state axioms strips systems 
proc 
aaai appear 
lin 

embracing causality specifying indirect effects actions 
mellish editor proc 
ijcai pages 
morgan kaufmann 
marek truszczy nski 

stable semantics logic programs default reasoning 
lusk overbeek editors proc 
north american conf 
logic programming pages 
mit press 
marek truszczy nski 

nonmonotonic logic context dependent reasoning 
springer 
marek truszczy nski 

stable models alternative logic programming paradigm 
apt marek warren editors logic programming paradigm year perspective pages 
springer 
mccain turner 

causal theory ramifications qualifications 
mellish editor proc 
ijcai pages 
morgan kaufmann 
mccain turner 

satisfiability planning causal theories 
cohn schubert shapiro editors proc 
kr pages 
morgan kaufmann 
mccarthy 

circumscription form non monotonic reasoning 
artificial intelligence 
mccarthy hayes 

philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume pages 
edinburgh university press edinburgh 
moore 

semantical considerations nonmonotonic logic 
artificial intelligence 
niemela 

logic programs stable model semantics constraint programming paradigm 
annals mathematics artificial intelligence 
niemela simons 

smodels implementation stable model founded semantics normal logic programs 
dix furbach nerode editors proc 
th international conference logic programming non monotonic reasoning pages 
springer 
pinto 

compiling ramification constraints effect axioms 
computational intelligence 
reiter 

logic default reasoning 
artificial intelligence 
reiter 

specifying database updates 
journal logic programming 
sacc zaniolo 

deterministic non deterministic stable models 
journal logic computation 
sandewall 

special issue 
electronic transactions artificial intelligence 
www ep liu se ej 
shanahan 

solving frame problem mathematical investigation commonsense law inertia 
mit press 
soininen niemela 

developing declarative rule language applications product configuration 
gupta editor proc 
practical aspects declarative languages volume pages 
springer 
van gelder ross schlipf 

founded semantics general logic programs 
journal acm 
wang zaniolo 

nonmonotonic reasoning ldl 
minker editor volume 
kluwer 
watson 

action languages domain modeling 
phd thesis university texas el paso 
watson 

application action theory space shuttle 
gupta editor proc 
practical aspects declarative languages volume pages 
springer 
