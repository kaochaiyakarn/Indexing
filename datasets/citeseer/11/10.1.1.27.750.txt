lazy completion partial order smallest lattice michel ibp universit denis paris case place jussieu paris cedex france 
email ibp fr 
epartement informatique lirmm universit montpellier ii cnrs umr rue ada montpellier cedex france 
email lirmm fr 

lattice structures knowledge processing starting partial order completion lattice poses efficiency problems 
results lattice theory propose online algorithm efficiently computing smallest lattice containing partial order called dedekind completion 
online mean elements added necessary compute greatest lower bound upper bound elements exist 
result knowledge processing maintaining hierarchy types line fashion 
keywords algorithm partial order lattice dedekind completion encoding 
motivations lattices important class partial orders structural properties interest areas processing hierarchy types :10.1.1.106.4911
problem minimally extending partial order smallest lattice appears applications 
application hierarchy types directed acyclic graph interpretation depends applications inherit subsume unification 
maintaining graph types crucial knowledge processing 
graph usually lattice realized dynamically 
processing new knowledge 
time application supposes partial graph known graph completed necessary adding new type 
types want compute generalization specialization 
computing set general types practical types may significant application 
formally partial order compute completion denoted dm smallest lattice embeds 
details dedekind completion see davey priestley 
shows example completion 
wille know dm isomorphic lattice maximal antichains bipartite order isomorphic galois lattice 
way compute dm simply algorithms computing lattice maximal antichains galois lattice partial order 
efficient algorithms 
algorithm line computing dm lazy dedekind completion dynamically compute dm adding elements need lower upper bound elements 
section show main constraint respect order insure correct minimal construction 
propose encoding gives way adds element efficient way nice result lattice theory :10.1.1.106.4911
algorithm adds element tree 
dm fig 

dedekind completion poset definitions notations partial order reflexive antisymmetric transitive binary relation set distinct elements said comparable said incomparable denoted xjj said bipartite order implies bipartite order denoted 
define sets element red fy jy xg set predecessors succ fy jx yg set successors partial order iff relation relation elements element upper bound upper bound called upper bound join upper bounds greatest lower bound meet defined dually 
denote lub resp glb upper bound resp greatest lower bound non empty partial order called lattice lub glb exist clear finite lattice minimal element maximal element denoted respectively 
dealing algorithms lattices consider supposed finite 
lattice 
element said join irreducible lub implies elements defined dually 
denote set join irreducible elements set meet irreducible elements 
denote set subsets definition 
partial order 
dedekind completion denoted dm smallest lattice containing 
dedekind completion partial order dm add elements order compute dm 
naive algorithm consists adding element glb elements exist successors red red predecessors algorithm compute dedekind completion example illustrates 
example 
partial order 
suppose application asks glb naive algorithm add element glb exist 
likewise application asks glb element added 
way elements added dedekind completion shown 
clearly algorithm 
lattice set partial orders having completion 
know partial order induced order 
consider set elements irreducible elements 
subset set corresponds set elements add obtain partial order 
subsets set ordered inclusion forms boolean lattice obtain isomorphic boolean lattice set ordered 
iff 
clearly element partial order induced 
shows set lattice dm path partial order dm corresponds way incrementally computing dm 
choice way taken relatively application example adding elements level step 
give algorithm follows path questions asked application 
elements added necessary compute glb lub exist 
fig 

creation dummy vertices encoding preserving lub glb recall encoding partial order sets allows avoid creation extra elements shown 
encoding result markowsky lattices appears implicitly ait kaci lattices encoding 
definition 
lattices 
elements function said 
meet preserving glb glb 

join preserving lub lub 
theorem 
lattice 
mapping 
fj xg meet preserving 
glb 

oe oe fm xg 
oe lub oe oe 
encodings optimal 
sizes oe minimal 
notice distributive lattice oe join preserving meet preserving 
lemma 
lattice 
element 
resp 
lub resp glb join irreducible resp 
meet irreducible elements 
fig 

set lattice show compute join irreducible elements dm denoted partial order done computing dm 
need introduce notions partial order 
compute bipartite order copy iff definition 
bipartite order said reduced condition respected cases exist exist symmetrical exist exist transform bipartite order reduced bipartite order bip deleting singletons deleting elements arbitrarily case deleting case deleting elements arbitrarily case deleting case 
shown resp 
set join irreducible resp 
elements dm 
example 
illustrates encodings partial order bipartite order reduction bip deleted red red red deleted red encodings oe elements oe ab beh cd abc eh acf fh acd gh fig 

encodings oe apply theorem join preserving meet preserving encoding dm 
dm encode elements obtained glb lub asked application 
corollary direct consequence theorem 
corollary 
encodings oe computed algorithm respectively meet preserving join preserving 
going show compute code glb elements decode information obtain encoded element 
describe gamma 
discuss glb lub obtained dually 
lemma 
elements partial order glb furthermore glb gamma 
complexity algorithm computing glb depends data structure storing code 
complexity tree data structure introduced optimal representation distributive lattice 
tree allows best time complexity compute gamma algorithm join preserving meet preserving encodings data partial order result meet preserving encoding join preserving encoding oe compute compute reduction bip elements pg fjg oe fmg algorithm section give algorithm tree data structure compute glb 
consider partial order encoding computed previously 
element suppose sorted topological sorting oe 
define tree data structure denoted encoding 
root root corresponds maximal element dm 
node tree corresponds element dm 
edge tree labeled elements union labels node root corresponds sorted oe 
sons internal node sorted oe gamma note distributive lattice edge labeled element 
operations tree described 
tree store code code element search tree recursive way verify tree 
easily add 
example 
shows encoding partial order oe describe computing glb tree 
example 
consider partial order 
application asks glb algorithm computes glb ac added tree encoding 
new element appears added represented code 
application asks glb algorithm computes glb ac exists 
fd fc dc fig 

tree encoding algorithm glb data partial order elements root result glb code exist code return glb exist program asks user glb add new element 
corollary 
partial order 
initial computation encodings requires jj jx time 
computation glb requires jj 
course easy modify algorithm explicitely add new element naturally increases complexity glb computation jj jx lub operation done dually 
simultaneous computation glb lub update adding new element lub vice versa 
described new algorithm compute dedekind completion partial order glb lub operations 
interesting applications processing 
fd fig 

computation glb furthermore algorithm compute galois lattice concept lattice wille terminologies 
arguments equivalences dedekind completion galois lattice lattice maximal antichains 

algorithm implemented maple language 
ibp fr 

ait kaci boyer lincoln nasr 
efficient implementation lattice operations 
acm transactions programming langages systems january 

bordat 
calcul du treillis de une correspondance 
math 
sci 
hum pages 


dimensions de relations 
annals discrete mathematics description roles richard eds 

yves caseau 
efficient handling multiple inheritance hierarchies 
oopsla pages 

davey priestley 
lattices orders 
cambridge university press second edition 

godin mili 
building analysis level class hierarchies galois lattices 
oopsla pages 


bit vector encoding partially ordered sets 
proc 
international workshop editor orders algorithms applications number pages lyon france july 
springer verlag 


tree structure distributive lattices applications 
tcs october 


jourdan 

computing line lattice maximal antichains posets 
report irisa rennes france february 
appear order 


partially ordered sets 
trans 
amer 
soc 

markowsky 
representation posets lattices sets 
algebra universalis 


simplicial elimination schemes extremal lattices maximal antichain lattices 
order 

wille 
restructuring lattice theory approach hierarchies contexts 
ordered sets rival eds 
nato asi reidel holland pages 
