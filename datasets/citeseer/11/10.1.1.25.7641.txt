james odell james odell associates river dr ann arbor mi tel com www com extending uml agents van dyke parunak erim center elec 
commerce box ann arbor mi tel erim org www erim org bernhard bauer siemens zt ik nchen tel bernhard bauer siemens de gaining wide acceptance agents industry requires relating nearest antecedent technology object oriented software development artifacts support development environment full system lifecycle 
address requirements describing common requirements modeling agents agent systems set uml idioms extensions 
illustrates approach presenting layer auml representation agent interaction protocols concludes including useful agent extensions uml 
keywords agents uml interaction protocols auml design artifacts software engineering 

successful industrial deployment agent technology requires techniques reduce risk inherent new technology 
ways reduce risk eyes potential adopters new technology incremental extension known trusted methods provide explicit engineering tools support industry accepted methods technology deployment 
apply risk reduction insights agents 
leverage acceptance existing technology agents extension active objects exhibiting dynamic autonomy ability initiate action external invocation deterministic autonomy ability refuse modify external request 
basic definition agent object say go dynamic autonomy deterministic autonomy approach leads focus fairly fine grained agents 
sophisticated capabilities added mobility bdi mechanisms explicit modeling agents 
capabilities extensions basic agents applied needed diagnostic agenthood 
accepted methods industrial software development depend standard representations artifacts support analysis specification design agent software 
characteristics industrial software development require disciplined development artifacts software lifecycle 
scope industrial software projects larger typical academic research efforts involving people longer period time artifacts facilitate communication 
skills developers focused development methodology tracking latest agent techniques artifacts help codify best practice 
success criteria industrial projects require traceability initial requirements final deliverable task artifacts directly support 
unified modeling language uml gaining wide acceptance representation engineering artifacts object oriented software 
view agents step objects leads explore extensions uml idioms uml accommodate distinctive requirements agents 
result agent uml auml 
section provides background information agent design methods general uml need auml 
section introduces layered approach representing agent protocols auml 
templates packages provide high level summary section sequence diagrams collaboration diagrams furnish alternative views interactions agents section state diagrams activity diagrams detail internal behavior individual agents executing protocols section 
section proposes uml extensions represent commonly notions employed agent community 
note features required agents agent systems independently cited useful objects objectoriented systems 
extensions suggested harmony new features suggested oo development 
extending uml agents 
background agent uml auml synthesizes growing concern agent software methodologies increasing acceptance uml object oriented software development 
agent software methodologies agent community increasingly interested design methods representational tools support associated artifacts see helpful survey 
multi agent system engineering focus session atal entire maamaw 
number groups reported methodologies agent design touching representational mechanisms support methodology 
report emphasizes methodology kinny colleagues modeling techniques bdi agents :10.1.1.27.9180
close parallel observe design mechanisms agents objects shared number authors example 
gaia methodology includes specific recommendations notation supports high level summary protocol atomic unit notation reflected recommendations :10.1.1.10.2242
extensive program underway free university amsterdam compositional methodologies requirements design verification uses graphical representations strong links uml collaboration diagrams linear formulaic notations better suited alignment uml metamodel graphical mechanisms focus 
discussion compositionality protocols anticipated burmeister notation differs widely 
graphs facilitate identification character results agent playing specific role distinct agent playing different role 
capture distinction leveraging uml existing name role class syntax conjunction collaboration diagrams 
wide ranging activity healthy sign agent systems having increasing impact demand methodologies artifacts reflects growing commercial importance technology 
objective compete efforts extend apply widely accepted modeling representational formalism uml harnesses insights useful communicating wide range research groups development methodologies 

uml seventies structured programming dominant approach software development 
software engineering technologies developed order ease formalize system development lifecycle planning analysis design system construction transition maintenance 
eighties object oriented oo languages experienced rise popularity bringing new concepts data encapsulation inheritance messaging polymorphism 
eighties nineties jungle modeling approaches grew support oo marketplace 
sense unify various approaches analysis design task force established june omg 
november de standard adopted omg members called unified modeling language uml 
uml unifies formalizes methods approaches object oriented software lifecycle supports kinds models static models class package diagrams describe static semantics data messages 
system development class diagrams different ways different purposes 
model problem domain conceptually 
conceptual nature customers 
second class diagrams model implementation classes guiding developers 
general level term class refers encapsulated unit 
conceptual level models types associations implementation level models implementation classes 
generally thought classes usage concepts implementation notions important purpose semantics 
package diagrams group classes conceptual packages presentation consideration 
physical aggregations classes called components implementation model family mentioned 
dynamic models including interaction diagrams sequence collaboration diagrams state charts activity diagrams 
cases specification actions system class perform interacting outside actors 
implementation models component models deployment diagrams describing component distribution different platforms 
object constraint language ocl simple formal language express semantics uml specification 
define constraints model invariant pre post conditions operations navigation paths object net 
response suggesting agent extensions uml representations packages templates sequence diagrams collaboration diagrams activity diagrams class diagrams deployment diagrams statecharts 
uml model semantics represented metamodel structure formally defined ocl syntax 
ocl metamodel offer resources capture kinds logical specifications anticipated example space permit exploring uml response :10.1.1.10.2242
page extending uml agents 
auml current uml insufficient modeling agents agent systems 
formalism exists sufficiently specify agent system development 
employ agent programming specification technique support software engineering process planning analysis design system construction transition maintenance 
proposal full life cycle specification agent system development scope response 
fipa omg agent group exploring recommending extensions uml 
subset agentbased extension standard uml auml specification agent interaction protocols aip commonly agentbased notions 
interaction protocols chose complex illustrate nontrivial auml commonly subset auml useful researchers 
agent interaction protocols example software patterns ideas useful practical context probably useful 
specification aip provides example analogy solve problems system analysis design 
want suggest specification technique aips formal intuitive semantics user friendly graphical notation 
semantics allows precise definition usable software engineering process 
graphical notation provides common language communicating aips particularly people familiar agent approach 
proceeding need establish working definition agent interaction protocol aip describes communication pattern allowed sequence messages agents constraints content messages 

layered approach protocols depicts protocol expressed uml sequence diagram contract net protocol 
invoked initiator agent sends call proposal agent willing participate providing proposal 
stick headed arrow indicates asynchronous communication 
participant agent choose respond initiator deadline refusing provide proposal submitting proposal indicating understand 
diamond symbol indicates decision result zero communications sent depending conditions contains decision diamond indicates exclusive decision 
proposal offered initiator choice accepting rejecting proposal 
participant receives proposal acceptance inform initiator proposal execution 
additionally initiator cancel execution proposal time 
note stick arrows indicate unnested asynchronous communications messages 
interpretation term unnested uml communicated email gunnar defined uml document 
notations changed firm standard exists unnested asynchronous communications 
contract initiation fipa contract net protocol initiator participant call proposal refuse understood propose accept proposal reject proposal inform cancel page deadline initiator participant deadline call proposal refuse understood propose reject proposal accept proposal cancel inform 
generic aip expressed template package 
expresses concepts represented top sequence chart 
protocol treated entity right 
tabbed folder notation upper left indicates protocol package conceptual aggregation interaction sequences 
second packaged protocol treated pattern customized analogous problem domains 
dashed box upper right hand corner expresses pattern template specification identifies unbound entities package need bound package template instantiated 
extending uml agents original sequence diagram fig 
provides basic specification contract net protocol 
processing detail required 
example initiator agent requests call proposal cfp participant agent 
diagram stipulates procedure initiator produce cfp request procedure employed participant respond cfp 
details important developing detailed agent system specifications 
role role ca ca 
interaction protocols specified detail leveled nested combination diagrams 
illustrates leveling express detail interaction process 
example process generated communication act ca complex specify processing detail activity diagram 
agent receiving ca process prepares response 
example process specified depicted sequence diagram modeling language chosen specify agent underlying process 
uml choice interaction diagram activity diagram statechart 
leveling continue problem specified adequately develop generate code 
fig 
interaction protocol top diagram level detail turn level detail 
level express intra agent inter agent activity 
summary examples illustrate features approach protocol entity 
top level discussed section 
sequence diagram describes inter agent transactions needed implement protocol 
section discusses notation alternative collaboration diagram 
addition inter agent transactions complete specification protocol requires discussion intra agent activity supported uml activity diagrams statecharts discussed section 

level representing protocol patterns ideas useful practical context probably useful 
give examples analogies solutions problems system analysis design 
agent interaction protocols provide reusable solutions applied various kinds message sequencing encounter agents 
uml techniques best express protocol solutions reuse packages templates 

packages interaction protocols patterns treated reusable aggregates processing 
uml describes ways expressing aggregation oo structure behavior components packages 
components physical aggregations compose classes implementation purposes 
packages aggregate modeling elements conceptual wholes 
classes conceptually grouped arbitrary purpose subsystem grouping classes 
aips viewed conceptual terms package notation tabbed folder employed fig 

protocols codified recognizable patterns agent interaction reusable modules processing treated class notions 
example fig 
depicts packages 
purchasing package expresses simple protocol broker retailer 
broker sends call proposal retailer retailer responds proposal 
certain products retailer place request regarding availability cost 
return information retailer provide accurate proposal 
put single purchasing protocol package 
uml packages group class diagrams unit 
recommend behavior related diagrams grouped mechanism defining symbol 
generally packages group arbitrary model grouping 
page role ca ca role extending uml agents businesses departments may need additional protocol involving 
packages defined purchasing supplying 
particular scenario requires protocol nested separate distinct package 
purchasing scenario require package parsimonious 
purchasing call proposal supplying broker retailer propose 
packages express nested protocols 
burmeister suggest similar construct describe complex cooperation protocols 
primitive protocols offering requesting proposing general large number interaction situations approach allows construction complex application task protocols addition primitive protocols advocate pragmatic approach analyst may extend burmeister general set include protocols reused nested specification auml 

templates illustrates common kind behavior serve solution analogous problem domains 
fig 
supplying behavior reused exactly defined supplying package 
truly pattern just reusable component package customization supported 
example fig 
applies fipa contract net protocol particular scenario involving buyers sellers 
notice initiator participant agents buyer seller agents call proposal seller rfp 
scenario forms refusal seller refuse refuse 
lastly actual deadline supplied response seller 
buyer seller refuse refuse seller rfp understood propose accept proposal reject proposal inform cancel deadline hours page request inform fipa contract net protocol buyer seller seller rfp refuse refuse understood propose reject proposal accept proposal cancel inform 
applying template fig 

producing new package particular scenario involving buyers sellers 
fig 
template fig 
resulting model 
uml aip package serves template 
template parameterized model element parameters bound model time new customized model produced 
fig 
dotted box upper right indicates package template 
unbound parameters box divided horizontal lines categories role parameters constraints communication acts 
illustrates new package fig 
produced template definition fig 

wooldridge suggest template format currently uml compliant recommended uml extensions 
extending uml agents similar form definition protocol definitions :10.1.1.10.2242
packaged templates pattern interaction 
formally defined abstracted away particular sequence execution steps 
viewing interactions way means attention focussed essential nature purpose interaction precise ordering particular message exchanges notation illustrated wooldridge graphical approach closely resembles uml expressing semantics 

level representing interactions agents uml dynamic models useful expressing interactions agents 
interaction diagrams capture structural patterns interactions objects 
sequence diagrams member family collaboration diagrams 
diagrams contain information 
graphical layout sequence diagram emphasizes chronological sequence communications collaboration diagram emphasizes associations agents 
activity diagrams statecharts capture flow processing agent community 

sequence diagrams brief description sequence diagrams example fig 
appeared 
detailed discussion sequence diagrams see rumbaugh booch 
section discuss possible extensions uml model agentbased interaction protocols 
depicts basic elements agent communication 
rectangle express individual agents sets roles classes agents 
example individual agent labeled bob customer 
bob instance agent playing role customer 
bob play role supplier employee pet owner 
indicate bob person independent role plays bob expressed bob person 
basic format box label agent name role class 
express various situations bob bob customer person bob employee person 
agent role class ca ca page agent role class basic format agent communication 
rectangular box indicate general set agents playing specific role 
just word customer supplier appear 
specify role played specific class agent class name appended employee person supplier party 
words agent name role class syntax specifying individual agent name 
agent name role class syntax part uml uml syntax indicates object name agent name 
extends uml labeling line agent communication act ca oo style message 
ca ca ca ca ca ca 
recommended extensions support concurrent threads interaction 
recommended extension uml supports concurrent threads interaction 
concurrent threads forbidden oo commonly employed 
depicts ways expressing multiple threads 
indicates threads ca ca sent concurrently 
includes decision box indicating decision box decide cas zero sent 
ca sent communication concurrent 
short indicates inclusive 
fig 
indicates exclusive exactly ca sent 
indicates communication 
illustrates way concurrent threads interaction depicted fig 

figures portray ways expressing concurrent threads sent agent agent 
multiple vertical activation bars indicate receiving agent processing various communication threads concurrently 
displays parallel activation bars fig 
activation bars appear top 
things noted variations semantic meaning equivalent choice ease clarity visual appearance 
activation bar indicate agent different role merely employing different processing thread support communication act 
agent different role activation bar annotated appropriately 
example figs 
ca handled agent role processing 
oo implementations advanced extension considered useful case 
ca ca ca extending uml agents figures indicate single agent concurrently processing multiple cas 
concurrent cas sent different agent ca agent ca agent 
protocol behavior supported uml notation fig 
hand recommended extension uml 
detailed treatment extensions uml sequence diagram protocols see 
agent 
collaboration diagrams ca ca ca role agent agent agent page ca role ca ca agent agent agent agent ca ca ca ca ca ca agent agent agent agent ca ca ca ca ca ca 
multiple techniques express concurrent communication agent playing multiple roles responding different cas 
example collaboration diagram depicts pattern interaction agents 
primary distinctions collaboration diagram agents rectangles placed diagram sequence diagram agents placed horizontal row diagram top 
sequence interactions numbered collaboration diagram interaction diagram basically read top 
interaction diagrams similar 
answer lies primarily clear understandable presentation depending person interaction protocol described diagram type provide clearer understandable representation 
semantically equivalent graphically similar 
example fig 
expresses underlying meaning fig 
sequence diagram 
experience demonstrated agent modelers find types diagrams useful 
graphs isomorphic collaboration diagrams 
critical distinction single agent appear multiple nodes graph 
icmas calls nodes characters 
intuition terminology character specific agent playing specific role 
role abstraction characters similar patterns interaction 
inversely node agent specific role role defined fairly narrowly just purchaser example purchaser contract contrast purchaser role original contract 
notation agent playing role having precise definition roles construct collaboration diagram semantic content graph 
extending uml agents assert request debtor customer 
activity diagrams request ship contractor customer commit ship role change role change request request contractor competitor analyzer role change contractor page question propose commit competitor negotiator assert refuse 
example collaboration diagram depicting interaction agents playing multiple roles 
negotiator request refuse role change contractor competitor analyzer role change role change propose request commit commit assert refuse ship assert request ship pay contractor question inform contractor competitor 
sequence diagram version fig 

contractor contractor agent interaction protocols require specifications clear processing thread semantics 
activity diagram expresses operations events trigger 
detailed treatment see odell description activity diagrams 
example fig 
depicts order processing protocol agents 
customer agent places order 
process results order placed event triggers broker place order accepted electronic commerce network ecn agent 
ecn associate order quote order market maker quote accepted 
occurs market maker broker concurrently notified trade competed 
activity diagram differs interaction diagrams provides explicit thread control 
particularly useful complex interaction protocols involve concurrent processing 
customer broker ecn market maker place order settle order process order close order accept order match order quote accept quote create quote update quote debtor 
activity diagram depicts stock sale protocol agents 
activity diagrams similar nature colored petri nets ways 
activity diagrams provide graphical representation possible visualize processes simply facilitating design communication behavioral models 
second activity diagrams represent concurrent asynchronous processing 
lastly express simultaneous communications extending uml agents correspondents 
primary difference approaches activity diagrams formally extended statemachine model defined uml 
ferber formalism extends petri nets agents systems response extends uml activity diagrams purpose 

statecharts process related uml diagram statechart 
statechart graph represents state machine 
states represented round rectangles transitions generally rendered directed arcs interconnect states 
depicts example statechart governs order protocol 
order requested state supplier agent may commit requested negotiation resulting transition committed negotiation state 
furthermore diagram indicates agent commit action may occur order requested state 
requested state possible actions commit supplier may refuse consumer may back 
notice supplier may refuse order proposed requested states 
request refuse open commit proposed requested committed refuse assert page assert ship assert shipped pay closed assert paid aborted 
statechart indicating valid states transitions governing order protocol 
statechart commonly express interaction protocol state centric view agent view 
agent centric view portrayed interaction diagrams emphasizes agent interaction second 
process centric view emphasizes process flow agent resulting state change event second 
state centric view emphasizes permissible states prominently transition agent processing 
primary strength statechart agent interaction protocols constraint mechanism protocol 
statechart states typically implemented directly agents 
order agent embody state transition constraints ensuring interaction protocol contraints met 
alternatively constraints embodied supplier customer roles played agents involved order process 
rejected 
level representing internal agent processing lowest level specification agent protocol requires spelling detailed processing takes place agent order implement protocol 
model higher level agents holons consist aggregations lower level agents 
internal behavior holon described level representations recursively 
addition state charts activity diagrams specify internal processing agents aggregates illustrated section 
order placed customer accepted order place order completed order accepted assembled order prepare send invoice order processor invoice sender payment receiver invoice invoice request order assembled ship order received payment order shipped process payment payment close order payment accepted order completed 
activity diagram specifies order processing behavior order agent 
extending uml agents 
activity diagrams depicts detailed processing takes place order processor agent 
sequence diagram indicated agent process triggered place order ca ends order completed 
internal processing order processor expressed activity diagram order processor accepts assembles ships closes order 
dotted operation boxes represent interfaces processes carried external agents illustrated sequence diagram 
example diagram indicates order assembled assemble order prepare send invoice actions triggered concurrently 
furthermore payment accepted order shipped close order process invoked 

statecharts internal processing single agent expressed statecharts 
depicts internal states transitions order processor invoice sender payment receiver agents 
activity diagram agents interface indicated dashed lines 
intra agent uml statecharts supports singh notion agent skeletons 
payment receiver order processor statechart order processor unacceptable payment received reject payment closed null order cancelled close order order cancelled close order order shipped order close order payment receive payment order processor statechart page null accepted assembled shipped order placed accept order order accepted assemble order order assembled ship order invoice issuer days due date mark invoice overdue invoice issuer statechart payment receiver statechart null order assembled prepare send invoice rejected received acceptable overdue transmitted payment received customer pays accept payment customer pays mark invoice paid accepted mark invoice paid paid 
statechart specifies order processing behavior agents 

previous sections constrained examine auml extensions agent interaction protocols 
section presents agent agent notions recommended inclusion uml 
richer role specification expressing roles agent may play course interaction agents vital technique modelers agent systems 
uml provides facility expressing roles 
example fig 
agent object depicted playing roles interaction protocol customer negotiator 
slash symbol indicates string follows role name 
contains agents playing just roles 
visually threshold human readability 
approach quickly graphically complex comprehensible agents added play roles 
figures illustrate new techniques reduce visual complexity preserve underlying semantics 
represents role lifeline depicts agent single lifeline activation tall thin rectangle labeled appropriate role name 
note usage figs 
orthodox uml existing technique exists label lifelines role indication 
extending uml agents customer negotiator request role change contractor refuse competitor analyzer role change role change propose request commit commit assert refuse ship assert request ship pay contractor page contractor question inform competitor contractor 
role modeling existing uml slash notation 
request refuse propose request commit commit assert refuse ship assert request ship pay question inform debtor role role role role role role role role role customer negotiator contractor competitor contractor contractor competitor contractor debtor analyzer 
role modeling representing role lifeline 
role customer role negotiator role customer role negotiator role customer request refuse question inform propose request commit commit assert refuse ship assert request ship pay 
role modeling activation bars labeled appropriate role 
modelers approaches modeling agent roles 
modeler start conception roles required fig 
identify agents involved figs 

modeler diagram fig 
summarize role involvement expressed figs 

way bottom top technique employed fig 
useful extending uml agents currently supported uml included ensure understanding requirement roles agent modelers 
customer competitor negotiator contractor contractor analyzer request role change refuse role change role change propose request commit commit assert refuse ship assert request ship pay page question inform 
role modeling object node class role 
role nodes course require slash preceeding node label 
collaboration diagrams currently facility represent agent roles interaction lines uml 
communication act message labeled role responsible issuing request 
note usage fig 
orthodox uml existing technique exists label interaction lines sender role indication 
technique illustrated fig 

example communication act request sent agent playing role customer 
request role customer assert request role customer pay role customer question inform debtor request refuse role customer request propose role customer commit request role negotiator refuse assert role negotiator commit ship ship 
role modeling communication acts messages indicate requesting role 
activity diagrams modified represent agent roles associating activity name appropriate 
example fig 
order agent accepts assembles ships closes orders 
accept order assemble order order order order order send invoice invoice send payment customer ship order process payment payment close order 
activity diagram activities labeled appropriate agent role 
extending uml agents lastly changes roles represented activity diagrams notes 
example fig 
hire employee activity changes role agent person employee 
technique currently supported uml included ensure understanding requirement roles agent modelers 

package extension employee hired employee promoted hire employee promote employee role change classify person person employee role change classify person employee person employee manager 
dynamic classification role changes expressed notes 
uml employees indicated interfaces 
suffice agent implementations handle situations agent interface 
example cell membrane receives various communications processes rejecting accepting 
interface set cell publishes outside world 
similar analogy applied agent implementations 
example fig 
negotiator agent acts interface outside world manufacturing cell 
require small extension uml 
common function agents process planning agent capacity manager agent telescoping agent packages dispatch agent 
account manager 
agent manufacturing cell common function agents resource agent page aggregate resource interface agent negotiator agent 
package specifying agents operations interface points 

deployment diagram extensions mobility important agent property objects 
way indicating mobility paths home declarations useful extension uml 
accounting mainframe salesperson laptop shopper agent home internet internet server sales agent 
useful agent notions shopper agent corporate novell network sql inventory mainframe mobile 
adding mobility deployment diagrams 
agents borrow analogies nature 
agent researchers reason took nature years develop see modern world learn lessons building systems 
extending uml agents dr scientist get specs clone dolly sheep sequence diagram dolly sheep page dolly sheep prototype clone dolly sheep class diagram 
representing cloning sequence class diagrams 
example agent cloning common agent technique 
illustrates behavioral structural view agent cloning 
mitosis reproduction common techniques agent societies 
illustrates possible ways expressing 
extending uml include notion permanently stereotype recommendation common techniques 
oo approaches determine notions useful belong agent profile 
amoeba mitosis mitosis amoeba amoeba sequence diagram john janet reproduction collaboration diagram junior 
representing mitosis reproduction sequence activity diagrams 
notions commonly employed agents parasitic symbiotic relationships 
illustrates examples 
host parasite dog flea symbiosis 
representing parasitic symbiotic relationships class diagrams 
interaction individual agents give rise secondary effects groups agents behave single entity aggregate agent 
phenomenon know emergence 
occurrences unplanned unexpected anticipated 
multiagent systems emergence core concept 
way representing important 

market consumer emergence tree 
representing emergence possibilities class diagram 
uml provides tools specifying agent interaction protocols expressing interaction pattern agents protocol representing internal behavior agent :10.1.1.10.2242
representing agent related uml extensions commonly richer role specification packages agent interfaces deployment diagrams indicating mobility techniques 
tools applied directly agent systems adopting simple idioms conventions 
cases suggest straightforward uml extensions support additional functionality agents offer current uml version 
proposed extensions considered oo community useful extensions oo development uml version 
furthermore auml notions developed applied pta projects www de agent realization personal travel assistant supported german ministry technology 
extending uml agents agent researchers increasing attention industrial business users paying results 
transfer results practical application rapid accurate research community communicate insights forms consistent modern industrial software practice 
auml builds acknowledged success uml supporting industrial strength software engineering 
idioms extensions proposed aip developing contribution objective 


bauer extending uml specification interaction protocols submitted th call proposal fipa 

bauer extending uml specification interaction protocols submitted icmas 

booch grady james rumbaugh ivar jacobson unified language user guide addison wesley reading ma 

brazier frances jan treur ed principles compositional multi agent system development chapman hall 

bryson joanna brendan mcgonigle agent architecture object oriented design intelligent agents iv agent theories architectures languages 
proceedings atal ed springer berlin 

burmeister ed models methodology agent oriented analysis design 

burmeister birgit haddadi kurt ed generic configurable cooperation protocols multi agent systems springer tel switzerland 
programmable model interaction 
ferber jacques multi agent systems distributed artificial intelligence addison wesley longman harlow uk 

garijo francisco magnus boman ed multi agent system engineering proceedings maamaw springer berlin germany 

gustavsson rune multi agent systems open societies intelligent agents iv agent theories architectures languages ed springer berlin 

daniela jonker jan treur wijngaards ed specification behavioural requirements compositional multi agent system design springer valencia spain 

carlos mercedes garijo jos gonz lez ed survey agent oriented methodologies university pierre marie curie paris fr 

carlos mercedes garijo jos gonz lez juan analysis design multiagent systems mas commonkads intelligent agents iv agent theories architectures languages munindar singh ed springer berlin pp 


jonker jan treur ed compositional verification multi agent systems formal analysis pro activeness reactiveness springer 

kinny david michael georgeff modelling design multi agent systems intelligent agents iii proceedings third international workshop agent theories architectures languages atal ed springer heidelberg 

kinny david michael georgeff anand rao methodology modelling technique systems bdi agents agents breaking away 
th european workshop modelling autonomous agents multi agent world maamaw walter john ed springer berlin pp 


lee edmund durfee explicit plan languages coordinating multiagent plan execution intelligent agents iv agent theories architectures languages ed springer berlin pp 


martin james james odell object oriented methods foundation uml edition prentice hall englewood cliffs nj 

nodine marian amy unruh facilitating open communication agent systems infosleuth infrastructure intelligent agents iv agent theories architectures languages munindar singh ed springer berlin pp 


odell james ed agent technology omg green produced omg agent working group 

parunak van dyke ed visualizing agent conversations enhanced graphs agent design analysis 

parunak van dyke james odell engineering artifacts multi agent systems erim cec 

parunak van dyke john sauter steven clark specification design industrial synthetic ecosystems intelligent agents iv agent theories architectures languages munindar singh ed springer berlin pp 


rumbaugh james ivar jacobson grady booch unified modeling language manual addison wesley reading ma 

schoppers marcel daniel shapiro designing embedded agents optimize user objectives intelligent agents iv agent theories architectures languages munindar singh ed springer berlin pp 


singh munindar customizable coordination service autonomous agents intelligent agents iv agent theories architectures languages munindar singh ed springer berlin pp 


singh munindar ed developing formal specifications coordinate heterogeneous autonomous agents ieee computer society paris fr 

wooldridge michael nicholas jennings david kinny gaia methodology agent oriented analysis design international journal autonomous agents multi agent systems forthcoming 
page 
