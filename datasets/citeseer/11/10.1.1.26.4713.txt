need demand remodularization harold ossher peri tarr ibm thomas watson research center box yorktown heights ny ossher tarr watson ibm com modern approaches separation concerns support identification encapsulation important concerns traditionally encapsulated 
generally require software written front appropriate modularization 
software evolves need arises new concerns new kinds 
position motivates need demand remodularization ability new concerns non eliminating encapsulation prior concerns 
presents specific example intended basis challenge problem outlines solution hyper 
separation concerns par core software engineering 
general form refers ability identify encapsulate manipulate parts software relevant particular concept goal purpose 
concerns primary motivation organizing decomposing software manageable comprehensible parts 
different kinds concerns may relevant different developers different roles different stages software lifecycle 
example prevalent kind concern object oriented programming data class concern dimension data type defined encapsulated class 
features tur printing persistence display capabilities common concerns aspects concurrency control distribution roles viewpoints nus variants configurations 
refer kind concern class feature dimension concern 
separation concerns involves decomposition software dimensions concern 
achieving clean separation concerns hypothesized reduce software complexity improve comprehensibility promote traceability artifacts software lifecycle limit impact change facilitating evolution noninvasive adaptation customization facilitate reuse simplify component integration 
goals important achieved practice 
primarily set relevant concerns varies time context sensitive different development activities stages software lifecycle developers roles involve concerns dramatically different kinds dimensions 
separation dimension concern may promote goals activities impeding criterion decomposition integration appropriate contexts requirements 
example data decomposition object oriented systems greatly facilitates evolution data structure details encapsulated single closely related classes impedes addition evolution features typically include methods instance variables multiple classes 
multiple dimensions concern may relevant simultaneously may overlap interact features classes different developer models views perspectives system 
modularization different dimensions concern needed different purposes class feature view viewpoint aspect role criterion 
considerations imply developers able identify encapsulate modularize manipulate multiple dimensions concern simultaneously importantly introduce new concerns dimensions point software lifecycle suffering effects invasive modification 
term demand remodularization refer ability identify encapsulate new concerns existing software class entities 
demand remodularization allows developer choose time best modularization concerns development task hand 
eliminates need pre plan possible contingencies front identify possible concerns front requirement unrealistic devastating consequences software failure pre plan typically result need significant invasive changes course evolution building extra dimensions flexibility significantly increase software complexity 
believe support demand remodularization critical achieving benefits multi dimensional separation concerns 
presents software engineering scenario helps case demand remodularization consider important challenge problem area advanced separation concerns 
section presents scenario 
section describe solution hyper hyp oss 
section presents 

scenario scenario involves construction evolution simple software engineering environment see introduced tar 
see facilitates development fairly simple programs consist solely expressions 
expression programs constructed see represented syntax trees asts illustrated 
environment straightforward commonly architecture shown collection tools operates shared data structure ast 
example necessity small simple typical broad class real systems involve multiple tools applications manipulating wholly partially shared domain models 
syntax correct display check eval 
tools shared ast expression see 
assume simplified initial software development process consisting informal requirements specification natural language design uml rum implementation java gos standard object oriented technology separation concerns challenge evolve system written standard fashion 
initial requirements specification straightforward see supports creation manipulation expression programs 
contains set tools share common representation expressions 
set tools include evaluation tool determines result evaluating expression displays 
display tool depicts expression program textually default display device 
check tool checks expression program syntactic semantic correctness 
create get set methods eval display check create get set methods eval display check expression create get set methods eval display check literal create get set methods eval display check create get set methods eval display check tools implemented methods ast class create get set methods eval display check plus minus create get set methods eval display check 
partial uml design expression see create get set methods eval display check straightforward partial uml design see shown 
design uses standard objectoriented approach class defined represent kind expression ast node 
class contains constructor accessor modifier methods plus methods eval display check realize required tools standard object oriented manner 
code structured similarly 
standard sort oo design implementation expect polymorphism extensively object knowing evaluate display check 
design manifests typical scattering features tools classes corresponding tangling methods different features classes 

change mix match retrospect see time clients request change possible versions see include subsets tools capabilities 
deep analysis clear making changes satisfy simple requirement means simple matter standard object oriented technology 
requested change requires support mix match feature concerns 
concerns encapsulated class concerns initially class concerns achieving mix match require substantial reengineering probably introduce design patterns visitor facilitate 
modern separation concerns approaches aspect oriented programming programming har allow encapsulation concerns features cut classes 
approaches initial development developer chosen encapsulate separate features mix match easier achieve case aop undesired aspects omitted build case sop undesired subjects omitted composition rule 
approaches allow superior initial help initial modularization proves inadequate inappropriate happens frequently course normal requirements system evolution 
best done perform restructuring refactoring manually tool support 
invasive expensive operation 
challenge problem exemplified example term demand remodularization 
ability identify encapsulate new concerns possibly new kinds feature concerns example non 
ability perform software development activities modules encapsulating new concerns synthesize systems selections 
ability prior concerns new concerns ongoing development 
particular change feature decomposition desired need remodularization 
change adding multiplication division set supported operations require class decomposition 
demand remodularization different refactoring introduces additional decomposition changing dominant decomposition 
various shades meaning term non 
access source code needed recompilation needed 
possible binary components 
access source code recompilation needed remodularization tool guarantees semantic correctness certain composition newly created modules behave exactly original program 
create get set methods create get set methods expression create get set methods literal create get set methods create get set methods create get set methods plus minus create get set methods 
uml class diagram kernel feature create get set methods expression display literal display display display plus minus display display display display uml class diagram display feature particular example desired remodularization result separate modules exemplified shown 
shows kernel feature encapsulates constructors accessors expression classes 
shows display feature encapsulates display functionality 
check eval features similar 
diagrams course design diagrams composed approach described clarke cla 
corresponding code modules similar composed woven mechanisms aop sop 
developers able feature diagrams integrated class diagram needed ongoing development 
examples kinds re added needed include design patterns developer perspective view variant requirement 
note demand remodularization additional advantage permitting developers create need need necessitating front identification encapsulation possible kinds useful dimensions increase complexity helping manage 

solution hyper hyper hyp oss provides multi dimensional separation concerns java software 
achieve described demand remodularization java code making expression environment 
brief outline approach details hyper manual hyp actual code included hyper download 
hyperspace specification file list java class files comprise environment source files needed 
inclusion class files automatically creates classfile concern dimension class assigned concern dimension 
concern mapping file specify java classes packages methods variables map concerns classfile concerns entries operation display feature display introduces feature dimension concern specifies display method associated display concern dimension 
hypermodule specification file list selection feature concerns indicate composed standard composition relationship 
cause hyper compose classes members names different concerns generate java class files composed classes 
class files constitute executable version environment containing selected features 
developers feature concerns ways continue original classfile concerns introduce new dimensions concerns providing additional concern mappings 

modern approaches separation concerns shown great value accrue able modularize concerns traditionally modularized 
just forms evolution perfectly anticipated impossible determine start system development concerns important need modularized 
probably harmful beneficial attempt complexity software increases number different unused decompositions developer create 
realizing full benefit advanced separation concerns means possible new different concerns needed software development 
specific example need demand remodularization outlined manner accomplished hyper trivial example representative wide class real systems modularization requirements 
discussion hyper tool worked member granularity remodularization provide alternative organizations classes members pull methods apart 
challenges remain providing full support demand remodularization member granularity largely unexplored area sub method granularity 
andersen 
system design composing structures interacting objects 
madsen editor ecoop european conference object oriented programming pages utrecht june july 
springer verlag 
lecture notes computer science 
cla clarke harrison ossher tarr 
subject oriented design improved alignment requirements design code 
proceedings conference object oriented programming systems languages applications pages november 
acm 
har harrison ossher 
subject oriented programming critique pure objects 
proceedings conference object oriented programming systems languages applications pages september 
acm 
hyp hyperspace web site www research ibm com hyperspace 
kiczales 
aspect oriented programming 
ecoop european conference object oriented programming 
invited presentation 
nus nuseibeh kramer finkelstein 
framework expressing relationships multiple views requirements specifications 
ieee transactions software engineering october 
oss harold ossher peri tarr 
multi dimensional separation concerns hyperspace approach proceedings symposium software architectures component technology state art software development 
kluwer 
appear 
par parnas 
criteria decomposing systems modules 
communications acm december 
rum rumbaugh jacobson booch 
unified modeling language manual 
addison wesley 
tar tarr ossher harrison sutton jr degrees separation multi dimensional separation concerns 
proceedings st international conference software engineering icse may 
tur turner fuggetta wolf 
feature engineering 
proceedings th international workshop software specification design april 
