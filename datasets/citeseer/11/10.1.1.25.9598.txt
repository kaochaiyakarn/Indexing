security architecture computational grids ian foster carl kesselman gene tsudik steven tuecke mathematics computer science information sciences institute argonne national laboratory university southern california argonne il marina del rey ca foster tuecke mcs anl gov carl gts isi edu state art emerging scientific applications require fast access large quantities data fast computational resources 
resources data distributed wide area network components administered locally independently 
computations may involve hundreds processes able acquire resources dynamically communicate ciently 
analyzes unique security requirements large scale distributed grid computing develops security policy corresponding security architecture 
implementation architecture globus metacomputing toolkit discussed 
large scale distributed computing environments computational grids termed couple computers storage systems devices enable advanced applications distributed supercomputing computer enhanced instruments distributed data mining 
grid applications distinguished traditional client server applications simultaneous large numbers resources dynamic resource requirements resources multiple administrative domains complex communication structures stringent performance requirements 
scalability performance heterogeneity desirable goals distributed system characteristics computational grids lead security problems addressed existing security technologies distributed systems 
example parallel computations acquire multiple computational resources introduce need establish security relationships simply client server potentially hundreds processes supported part mathematical information computational sciences division subprogram ce computational technology research department energy contract eng defense advanced research projects agency contract national science foundation 
appear th acm conference computer communication security collectively span administrative domains 
furthermore dynamic nature grid impossible establish trust relationships sites prior application execution 
interdomain security solutions grids able interoperate replace diverse intradomain access control technologies inevitably encountered individual domains 
describe new techniques overcome cited di culties 
propose security policy grid systems addresses requirements single sign interoperability local policies dynamically varying resource requirements 
policy focuses authentication users resources processes supports user resource resource user process resource process process authentication 
describe security architecture associated protocols implement policy 
concrete implementation architecture discuss experiences deploying architecture large grid testbed spanning diverse collection resources sites world 
implementation performed context globus system provides toolkit testbed set applications evaluate approach 
believe proposed techniques general applicable outside globus context 
summary contributions understanding distributed system security 
provides depth analysis security problem computational grid systems applications 
includes detailed formulation security policy grid systems 
proposes solutions specific technical issues raised policy including local heterogeneity scalability 
describes security architecture uses solutions implement security policy demonstrates large scale deployment architecture workable 
grid security problem introduce grid security problem example illustrated 
example somewhat contrived captures important elements real applications discussed chapters 
data data data data data 
request data analysis 
contact resource broker 
initiate task farm 
access parameter values physicist kerberos physicist ssh ap ssl guest plaintext plaintext ap plaintext site site site site site site site example large scale distributed computation user initiates computation accesses data computing resources multiple locations 
imagine scientist member multi institutional scientific collaboration receives mail colleague regarding new data set 
starts analysis program dispatches code remote location data stored site 
started analysis program determines needs run simulation order compare experimental results predictions 
contacts resource broker service maintained collaboration site order locate idle resources simulation 
resource broker turn initiates computation computers sites 
computers access parameter values stored file system site communicate specialized protocols multicast broker original site user 
example illustrates distinctive characteristics grid computing environment user population large dynamic 
participants virtual organizations scientific collaboration include members institutions change frequently 
resource pool large dynamic 
individual institutions users decide contribute resources quantity location available resources change rapidly 
computation processes created computation may acquire start processes release resources dynamically execution 
simple example computation acquired released resources sites 
words lifetime computation composed dynamic group processes running di erent resources sites 
processes constituting computation may communicate variety mechanisms including unicast multicast 
processes form single fully connected logical entity low level communication connections tcp ip sockets may created destroyed dynamically program execution 
resources may require di erent authentication authorization mechanisms policies limited ability change 
indicate situation showing local access control policies apply di erent sites 
include kerberos plaintext passwords secure socket library ssl secure shell 
individual user associated di erent local name spaces credentials accounts di erent sites purposes accounting access control 
sites user may regular account ap physicist 
user may dynamically assigned guest account simply account created collaboration 
resources users may located di erent countries 
summarize problem face providing security solutions allow computations just described coordinate diverse access control policies operate securely heterogeneous environments 
security requirements grid systems applications may require standard security functions including authentication access control integrity privacy nonrepudiation 
focus primarily issues authentication access control 
specifically seek provide authentication solutions allow user processes comprise user computation resources processes verify identity allow local access control mechanisms applied change possible 
discussed section authentication forms foundation security policy enables diverse local security policies integrated global framework 
developing security architecture meets requirements choose satisfy constraints derived characteristics grid environment grid applications single sign user able authenticate starting computation initiate computations acquire resources resources release resources communicate internally authentication user 
protection credentials user credentials passwords private keys protected 
interoperability local security solutions security solutions may provide interdomain access mechanisms access local resources typically determined local security policy enforced local security mechanism 
impractical modify local resource accommodate interdomain access entities domain interdomain security servers act agents remote clients users local resources 
require code executable multinational testbeds 
short issues mean security policy directly indirectly require bulk encryption 
uniform credentials certification infrastructure interdomain access requires minimum common way expressing identity security principal actual user resource 
imperative employ standard encoding credentials security principals 
support secure group communication 
computation comprise number processes need coordinate activities group 
composition process group change lifetime computation 
support needed secure context authenticated communication dynamic groups 
current security solution supports feature gss api provisions group security contexts 
support multiple implementations security policy dictate specific implementation technology 
possible implement security policy range security technologies public shared key cryptography 
grid security policy delving specifics security architecture important identify security objectives participating entities underlying assumptions 
short define security policy set rules define security subjects users security objects resources relationships 
di erent security policies possible specific policy addresses issues introduced preceding section reflecting needs expectations applications users resource owners 
knowledge discussion represents grid security policy defined level detail 
discussion terminology security literature subject participant security operation 
grid systems subject generally user process operating behalf user resource computer file process acting behalf resource 
credential piece information prove identity subject 
passwords certificates examples credentials 
authentication process subject proves identity requestor typically credential 
authentication parties requestor authenticate simultaneously referred mutual authentication 
object resource protected security policy 
authorization process determine subject allowed access object 
trust domain logical administrative structure single consistent local security policy holds 
put way trust domain collection subjects objects governed single administration single security policy 
terms mind define security policy follows 
grid environment consists multiple trust domains 
comment policy element states grid security policy integrate heterogeneous collection locally administered users resources 
general grid environment limited influence local security policy 
require local solutions replaced allowed override local policy decisions 
consequently grid security policy focus controlling interdomain interactions mapping interdomain operations local security policy 

operations confined single trust domain subject local security policy 
comment additional security operations services imposed local operations grid security policy 
local security policy implemented variety methods including firewalls ssh 

global local subjects exist 
trust domain exists partial mapping global local subjects 
comment ect user resource names global name potentially di erent local name resource 
mapping global name local name site specific 
example site map global user names predefined local name dynamically allocated local name single group name 
existence global subject enables policy provide single sign 

operations entities located di erent trust domains require mutual authentication 

authenticated global subject mapped local subject assumed equivalent locally authenticated local subject 
comment words trust domain combination grid authentication policy local mapping meets security objective host domain 

access control decisions locally basis local subject 
comment policy element requires access control decisions remain hands local system administrators 

program process allowed act behalf user delegated subset user rights 
comment policy element necessary support execution long lived programs may acquire resources dynamically additional user interaction 
needed support creation processes processes 

processes running behalf subject trust domain may share single set credentials 
comment grid computations may involve hundreds processes single resource 
policy component enables scalability security architecture large scale parallel applications avoiding need create unique credential process 
protocol creation user proxy resource proxy process site local policy mechanisms site user user proxy protocol allocation remote resource protocol resource allocation process protocol creation local mapping resource proxy global local mapping table process local policy mechanisms process process host computer rp rp global local mapping table long lived credential temporary credential computational grid security architecture 
note security policy structured require bulk privacy encryption reason 
export control laws regarding encryption technologies complex dynamic vary country country 
consequently issues best avoided matter design 
observe thrust policy enable integration diverse local security policies encountered computational grid environment 
grid security architecture security policy defined section provides context construct specific security architecture 
doing specify set subjects objects jurisdiction security policy define protocols govern interactions subjects objects 
shows overview security architecture 
components depicted entities credentials protocols 
thick lines represent protocols described 
curved line separating user rest signifies user may disconnect user proxy created dashed lines represent authenticated interprocess communication 
interested computational environments 
consequently subjects objects architecture include entities computation formed 
computation consists processes process acting behalf user 
subjects users processes 
objects architecture include wide range resources available grid environment computers data repositories networks display devices forth 
grid computations may grow shrink dynamically acquiring resources required solve problem releasing longer needed 
time computation obtains resource behalf particular user 
frequently impractical user interact directly resource purposes authentication number resources involved may large applications may run extended period time days weeks user may wish allow computation operate intervention 
introduce concept user proxy act user behalf requiring user intervention 
definition user proxy session manager process permission act behalf user limited period time 
user proxy acts stand user 
credentials eliminating need user line computation eliminating need user credentials available security operation 
furthermore lifetime proxy control user limited duration computation consequences credentials compromised dire exposure user credentials 
architecture define entity represents resource serving interface grid security architecture local security architecture 
definition resource proxy ate interdomain security operations local intradomain mechanisms 
set subjects objects architecture determined specifying protocols subjects object interact 
defining protocols andp refer user resource process respectively rp denote user proxy resource proxy respectively 
protocols rely ability assert piece data originated known source modification 
know conditions true text signed indicate signature text text subject text 
notation summarized table 
table notation rest user resource process rp user proxy resource proxy cx credential subject sig text text signed subject range interactions occur entities computational grid defined functionality underlying grid system 
experience current grid systems built date reasonable assume grid system include operations allocation resource user process creation allocation resource process communication processes located di erent trust domains 
term allocation denote operations required provide user access resource 
systems involve interaction scheduler obtain reservation 
define protocols control rp rp andp interactions 
addition user proxy means establish user user proxy interact 
architecture meet requirement allowing user log grid system creating user proxy protocol 
user proxy allocate resources create processes protocol 
protocol process created allocate additional resources directly 
protocol define mapping global local subject 
describe protocols detail 
note minimize problems export controls protocols designed rely authentication signature techniques encryption 
furthermore descriptions talk specific cryptographic methods 
fact shall see implementation uses generic security services application programming interface achieve independence specific security technology 
user proxy creation protocol recall user proxy entity architecture acts behalf user 
practice user proxy special process started user executes host local user 
main issue user proxy creation protocol nature credentials proxy proxy obtain credentials 
user enable proxy act behalf giving proxy appropriate credentials password private key 
proxy credentials directly 
approach significant disadvantages introduces increased risk credentials compromised allow restrict time duration proxy act user behalf 
temporary credential cup generated user proxy user indicates permission signing credential secret private key 
cup includes validity interval restrictions imposed user host names proxy allowed operate target sites proxy allowed start processes resources 
actual process user proxy creation summarized protocol 
consequence protocol user proxy temporary credential authenticate resource proxies 

user gains access computer user proxy created form local authentication placed computer 

user produces user proxy credential cup credential cu sign tuple containing user id name local host validity interval cup information required authentication protocol implement architecture public key certificate authentication cup user id host start time time auth info 

user proxy process created provided cup itis local security policy protect integrity cup computer user proxy located 
protocol user proxy creation concept user proxy unique architecture 
example kerberos generates limited lifetime ticket represent user 
various public key systems techniques similar temporary credentials public private key pair generate limited lifetime certificate signed user indicate certificate represents proxy user 
distinguishes architecture approaches way user proxy interacts resource proxy achieve single sign delegation discussed section 
resource allocation protocol discussing resource allocation decompose problem classes allocation resources user proxy allocation resources process 
process allocation generalization user proxy allocation start discussion allocation user proxy 
recall operations resources controlled entity called resource proxy responsible scheduling access resource mapping computation resource 
resource proxy follows 
user proxy requiring access resource determines identity resource proxy resource 
issues request appropriate resource proxy 
request successful resource allocated process created resource 
procedure similar goal simply allocate resource network storage process associated 
brevity assume process creation follows resource allocation 
request fail requested resource available allocation failure user recognized user resource authentication failure user entitled resource requested mode authorization failure 
discussed resource proxy enforce local authorization requirements 
depending nature resource local policy authorization may checked resource allocation time process creation time may implicit authentication checked 
define protocol mechanism issue request resource proxy user proxy 
verification step may require mapping user credentials local user id account name policy resource proxy check authorization resource allocation time 
alternatively authorization checks delayed process creation time 
mechanism mapping performed discussed section 
notice ability resource proxy create credentials behalf process creates relies process resource proxy executing trust domain 
protocol creates temporary credential newly created processes 
credential cp gives process ability authenticate identify user behalf process created 
single resource allocation request may result creation multiple processes remote resource 
assign processes credential allowed security policy element 
advantage decision situation user allocates resources large parallel computers scalability enhanced 
disadvantage possible credentials distinguish processes started resource allocation request 
believe feature useful practice 
existence process credentials enables implement range additional protocols allow process control access incoming communication operations 
user proxy resource proxy authenticate cup crp part process resource proxy checks ensure user proxy credentials expired 

user proxy presents resource proxy signed request form sig 

resource proxy checks see user signed proxy credentials authorized local policy allocation request 

request honored resource proxy creates resource credentials tuple containing name user resource allocated resource name 
resource proxy securely passes user proxy 
possible step 

user proxy examines resource credentials request wishes approve signs tuple produce cp credential requesting resource 

user proxy securely passes cp resource proxy 
possible due step 

resource proxy allocates resource passes new process es cp 
transfer relies fact resource proxy process trust domain 
protocol resource allocation process creation subject basis 
example process credentials authenticate sending process destination process negotiate session key sign pointto point communication guaranteeing identity sender 
authentication process simple need simply check process credentials valid group 
resource allocation process protocol resource allocation user proxy necessary start computation common case resource allocation initiated dynamically process created previous resource allocation request 
protocol defines process accomplished 

process user proxy authenticate cp cup 
process issues signed request user proxy form allocate allocation request parameters 
user proxy decides honor request initiates resource allocation request specified resource proxy protocol 
resulting process handle signed user proxy returned requesting process 
protocol resource allocation user process admittedly technique lacks scalability reliance single user proxy forward request resource proxy 
protocol ers advantage simplicity fine grained control 
self evident fine grained control requires elaboration 
consider obvious alternative allowing process running remotely behalf user allocate resources create processes unilaterally 
limitations user able encode embed arbitrary policy process support individual criteria resource allocation 
security breach compromise remote site result malicious fraudulent resource allocation behalf unsuspecting user 
creation process specific credentials protocol set rights user process 
delegation distributed authentication addressed security literature 
sets approach apart delegation authentication schemes role played resource proxy 
approaches proposed require additional inter resource trust relationships established enable delegation processes running resources 
protocols authentication user proxy resource proxy 
consequently single sign protocol leverages existing trust relationship user resource established user initially granted access resource 
mapping registration protocol central component security policy resulting architecture existence correct mapping global subject corresponding local subject 
achieve conversion global name ticket certificate local name login name user id accessing mapping table maintained resource proxy 
mapping table created local system administrator approach imposes certain administrative burden introduces possibility error 
developed technique allows mapping added user 
basic idea technique protocol user prove holds credentials global local subject 
accomplished authenticating globally directly resource local authentication method 
user asserts mapping global local credentials 
assertion coordinated resource proxy position accept global local credentials 
steps show di erent activities performed user authenticates globally resource 
matching map subject map subject requests issued user proxy mapping process 
ensures user possession global local credentials 
results mapping protocol stored database accessible resource proxy user need execute mapping protocol resource 
duration time mapping remains valid determined local system administration policy 
hope mapping remain place lifetime global credentials user local account 
part mapping protocol requires user log resource mapping created 
requires user authenticate local system 
consequently mapping protocol discussed section sites want manage mapping table explicitly part account creation process 
sites consider protocol optional feature 
user proxy authenticates resource proxy 
user proxy issues signed map subject request resource proxy providing arguments global resource subject names 
user logs resource resource authentication method starts map registration process 
map registration process issues map subject request resource proxy providing arguments global resource subject names 

resource proxy waits map subject requests matching arguments 

resource proxy ensures map registration process belongs resource subject specified map request 

match resource proxy sets mapping sends acknowledgments map registration process user proxy 

match map timeout resource proxy outstanding request sends acknowledgment waiting entity 

acknowledgment received map timeout request considered failed 
protocol mapping global local identifier 
secure local authentication method 
clearly resources strong authentication example kerberos key secure shell result secure mapping 
implementation grid security architecture section describe globus security infrastructure gsi implementation proposed grid security architecture 
gsi developed part globus project focus understand basic infrastructure required support execution wide range computational grid applications build prototype implementations infrastructure evaluate applications large scale testbeds 
part globus project built gusto testbed spans institutions couples peak compute power 
testbed range compute communication intensive application experiments 
specified security architecture gsi provides support user proxies resource proxies globus resource allocation manager gram certification authorities implementations protocols described 
describe selected aspects implementation focusing generic security services application programming interface gss api secure socket layer ssl experiences deploying implementation large testbed 
generic security services application programming interface protocols defined expressed terms security operations signature authentication terms specific security technologies des rsa 
protocols mechanisms shared secrets tickets kerberos public key cryptography ssl protocol protocol protocol protocol gss api plaintext ssl kerberos gss api globus smart cards 
separation protocol mechanism desirable property implementation enhances portability flexibility resulting system 
achieve desired separation gsi implemented top generic security services application programming interface gss api 
name implies provides security services callers generic fashion 
services implemented range underlying mechanisms technologies allowing source level portability applications di erent environments 
gss api allows construct gsi simply transcribing grid security protocols gss calls 
exploit various grid level security mechanisms altering gsi implementation 
relationship globus gss api shown 
gss api oriented party security contexts 
provides functions obtaining credentials performing authentication signing messages encrypting messages 
gss api transport mechanism independent 
transport independence means gss api depend specific communication method library 
gss api call produces sequence tokens communicated communication method application may choose 
currently gsi uses raw tcp sockets nexus communication library move tokens processors transports easily 
mechanism independence means gss specify specific security protocols kerberos sesame des rsa public key cryptography 
fact gss api implementation may support mechanism negotiation specific mechanisms parties gss operation initially contact 
gss api bindings defined mechanisms 
date worked plaintext passwords certificates 
addition proof concept kerberos implementation completed 
plaintext password implementation designed support system debugging small scale deployment certificate implementation wide area production 
flexibility gss api implementation allows switch public key plaintext versions globus changing single line globus code 
gss api proven significant benefit interface limitations 
gss api er clear solution delegation provide support group contexts 
needed allow temporary limited transfer user rights process event user trusts site delegation flag gss init sec context notwithstanding 
resource hosting process forgo authentication authorization handshake user proxy time new process needs created 
group context management needed support secure communication dynamic group processes belonging computation user 
support public key technology gsi gsi implementation currently uses authentication protocols defined secure socket library ssl protocol 
glance may odd choice ssl defines communication layer gss explicitly 
principle possible separate authentication communication components ssl 
avoid confusion ssl authentication protocol ssl communication library term ssl authentication protocol sap refer specifically authentication elements ssl 
refer gss implementation sap gss sap 
sap motivated factors 
exists high quality public domain implementation ssl protocol developed outside united states avoiding export control issues 
second structured way allows token stream extracted easily making gss implementation straightforward 
third ssl widely adopted method choice authentication secure communication broad range distributed services including servers web browsers directory services 
combining gss sap tcp sockets fact entire ssl protocol 
consequently computation gsi access globus services generic web services 
deployment gsi deployed gusto grid testbed spanning sites countries 
gusto includes nsf supercomputer centers doe laboratories dod resource centers nasa laboratories universities companies 
initial deployment late limited password implementation gsi involved installation gram resource proxy described previously establishment file describes local mapping applicable particular site 
protocol implemented file currently maintained manually site administrators 
note practice site administrators want maintain file manually form access control list 
gram resource proxy runs root implement appropriate mapping incoming request 
mentioned earlier gss sap intended default method globus applications 
obtaining export approval license early gss sap implementation deployed wide scale national international basis starting spring 
password implementation longer production 
operating globus certification authority support certificate generation users resources 
date resource proxies developed provide gateways local kerberos cleartext rsh authentication mechanisms 
admittedly limited experience gsi deployment ers confidence techniques proposed workable 
particularly interesting regard experience installing resource proxies various sites 
runs root resource proxy code subject careful review security administrators di erent sites 
result date unanimous approval 
related distinguish main classes related traditional distributed systems security solutions techniques geared specifically large dynamic highperformance computing environments 
surprisingly comparatively little area 
general purpose solutions distributed systems security 
notable examples kerberos dce ssh ssl 
review brief 
kerberos widely mid 
evolved considerably time current mit release relies heavily conventional cryptography line tgs combination 
optional kerberos extensions proposed support public key cryptography certain tasks including initial user login interdomain authentication key distribution pkcross peer peer authentication pktapp 
note progressed past internet drafts expired implementations available 
extensions kerberos attractive public key cryptography lends greater security scalability kerberos remains fairly heavyweight solution best suited intradomain security 
dce mature product developed open group security component derived largely kerberos 
dce authorization service richer ective plain kerberos 
addition security services dce includes time service name service file system 
blessing curse blessing dce sites get bundled solution curse hard selected components dce 
furthermore kerberos legacy dce conventional shared key cryptography trusted third parties authentication ticket granting authorization credential servers 
interdomain security possible albeit complications line presence domains assumed 
latest dce release support option public keys initial login 
tgs assumed line public key cryptography peer peer authentication 
mit kerberos dce compatible particular public key concerned 
ssh developed replacement unix remote login file transfer remote execution commands 
geared primarily client server model 
dce kerberos ssh fully public key enabled authentication session key distribution public key 
ssh supports pgp spki certificate formats 
dce kerberos ssh oriented interdomain communication security 
definite plus 
ssh essentially solution 
provides secure pipe connection points leaves important elements authorization delegation 
ssh provide defined api allow decoupling communication security services 
addition ssh bulk encryption problematic respect performance 
ssl netscape secure communication package 
primarily securing web tra software general secure type transport layer tra ssl supports certificates uses public key cryptography rsa authentication key distribution done rsa di hellman 
ssh ssl secure pipe solution 
communication security services intertwined ssl assumes stream oriented transport layer protocol underneath example tcp 
note ssl allows authenticated communication 
turn specialized solutions aimed large scale wide area distributed computing 
crisis security component web os operating system developed wide area distributed computing 
web os globus similar aim provide seamless access files computational resources distributed wide area network 
crisis gsi employs ssl point point secure data transfer certificates 
crisis intrusive complete security architecture 
supports local site autonomy insofar policy accommodate local security mechanisms 
mentioned earlier primary goals provide thin layer homogeneity tie disparate incompatible local security mechanisms 
hand crisis encompasses just authentication includes extensive access control provisions caching credentials secure execution environment janus 
globus crisis treat process resource entity 
important di erence security architecture allows processes act independently example request access resources start process 
running process temporary principal time resource jointly owned user belongs local host site 
distinction view grid computation dynamic group peer processes running di erent resources di erent sites 
security dynamic peer groups fundamental issue 
origins crisis web oriented architecture quite suitable remote execution aimed suitable typical grid computation 
legion project goals similar globus focusing object software technologies application grid systems 
object oriented architecture provides flexibility respect particular security mechanisms 
object file contains number hooks allowing security services added extended granular level 
legion defines high level security model actual architecture protocols 
fact globus toolkit construct implementation legion security model 
summarize existing distributed computing security technologies concerned primarily problems arise client server computing adequately address issues creating way security contexts large diverse user resource sets local mechanism policy heterogeneity 
described security architecture large scale distributed computations 
architecture immediately useful addition provides firm foundation investigations sophisticated mechanisms 
described implementation architecture implementation deployed national scale testbed 
architecture implementation address requirements introduced section 
user proxy addresses single sign requirement avoids need communicate user credentials 
resource proxy enables interoperability local security solutions resource proxy translate interdomain intradomain security solutions 
encryption associated protocols export control issues international simplified 
implementation gss api provides portability 
group communication major requirement addressed 
security design addresses number scalability issues 
sharing credentials processes created single resource allocation request means establishment process credentials expect bottleneck 
fact resource allocation requests pass user proxy potential bottleneck evaluated realistic applications required addressed 
major scalability issue addressed number users resources 
clearly approaches establishment global local mappings required number users resources large example condition approaches authorization 
believe current approach deal 
hope develop techniques described major directions flexible policy access control mechanisms example conditions representation implementation interdomain access control policies secure group communication building example cliques project delegation mechanisms support scalability large numbers resources users 
acknowledgments gratefully acknowledge doug assistance development ssl implementation globus security architecture stuart martin contributions implementation globus resource allocation manager bill johnston comments draft 
anonymous referees insightful critique 
vahdat anderson dahlin 
crisis wide area security architecture 
usenix security symposium january 
catlett 
metacomputing 
communications acm 
czajkowski foster kesselman martin smith tuecke 
resource management architecture metacomputing systems 
technical report mathematics computer science division argonne national laboratory 
foster kesselman editors 
computational grids high performance distributed computing 
morgan kaufmann 
foster kesselman 
globus project progress report 
heterogeneous computing workshop march 
foster kesselman tuecke 
nexus approach integrating multithreading communication 
journal parallel distributed computing 
gasser mcdermott 
architecture practical delegation distributed system 
ieee symposium research security privacy pages may 
goldberg wagner thomas brewer 
secure environment untrusted helper applications confining hacker 
proc 
usenix security symposium 
grimshaw wulf french weaver reynolds jr legion logical step nationwide virtual computer 
technical report cs university virginia 
elgamal 
ssl protocol 
internet draft netscape communications june 
version 
howes smith 
scalable deployable directory service framework internet 
technical report citi tr citi university michigan july 

credential management secure single login 
isoc network distributed system security symposium march 
johnston larsen 
condition centered approach authenticated global capabilities security architectures large scale distributed collaboratory environments 
technical report lbnl 
kohl neuman 
kerberos network authentication service 
internet rfc september 
lewis grimshaw 
core legion object model 
proc 
th ieee symp 
high performance distributed computing pages 
ieee computer society press 

generic security service application program interface version 
internet rfc january 
hur 
public key utilizing tickets application servers 
internet draft january 
steiner tsudik waidner 
cliques new approach group key agreement 
ieee icdcs may 
tung neuman tsudik hur 
public key cryptography cross realm authentication kerberos 
internet draft november 
tung wray hur 
public key cryptography initial authentication kerberos 
internet draft november 
vahdat yoshikawa anderson culler dahlin 
webos operating system services wide area applications 
technical report ucb csd berkeley 
kivinen 
ssh protocol architecture 
internet draft november 

