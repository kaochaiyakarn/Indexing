program understanding tools affect programmers understand programs 
storey yz wong ller school computing science department computer science simon fraser university university victoria burnaby bc canada victoria bc canada explore question program understanding tools enhance change way programmers understand programs 
strategies programmers comprehend programs vary widely 
program understanding tools enhance ease programmer preferred strategies impose fixed strategy may suitable 
observations user study compares tools browsing program source code exploring software structures 
study participants tools solve high level program understanding tasks 
tasks required broad range comprehension strategies 
describe tools supported hindered diverse comprehension strategies 
keywords fisheye views program comprehension program understanding tools reverse engineering software maintenance software visualization user study 
program understanding tools help programmers understand programs maintenance 
tools facilitate comprehension strategies programmers achieve specific maintenance tasks 
wide variety comprehension strategies programmers 
major task maintainers may need switch number strategies 
unfortunately tool designers may features beneficial 
tool may impose strategies unsuitable type program kind task individual user 
needed experimental observations study influence program understanding tools users solving realistic maintenance tasks 
sure tools enhance programmers understand programs 
describes experiment participants observed performing variety program understanding tasks tools rigi shrimp sniff 
rigi reverse engineering system presents software subsystem structures interactive multi window graph editor displays source code separate text editor windows 
simple hierarchical multi perspective shrimp tool displays software architectural diagrams nested graphs :10.1.1.29.9103
interface embeds source code inside nodes integrates hypertext metaphor low level dependencies animated panning zooming fisheye view actions viewing high level structures 
sniff system commercial integrated development environment provides source code browsing cross referencing features 
experiment suspected tool primarily supported specific set comprehension strategies 
gain insight focused observing strategies participants performed set highlevel program understanding tasks 
discuss implicit strategies embodied tools features supported set strategies preferred users 
result observations conjecture effectively support software maintenance program understanding tools need support combination comprehension strategies provide ways easily enter effortlessly switch strategies solving task reduce cognitive overhead program explored 
section outlines cognitive models program comprehension proposed 
section describes evaluated tools section details experiment design 
section reports number observations arose users tried solve comprehension tasks tools 
section interprets observations discusses tools supported various comprehension strategies 
section concludes 
program comprehension researchers conducted studies observe programmers understand programs 
result cognitive models program comprehension strategies proposed describe behavior programmers 
strategies bottom 
shneiderman proposed programs understood bottom reading source code mentally chunking low level software artifacts meaningful higher level abstractions 
abstractions grouped high level understanding program formed 
top 
brooks suggested programs understood top reconstructing knowledge application domain mapping source code 
strategy begins global hypothesis program 
initial hypothesis refined hierarchy secondary hypotheses 
verifying rejecting hypothesis depends heavily presence absence beacons cues 
knowledge 
letovsky programmers opportunistic processors capable exploiting bottom top 
theory components knowledge base encodes programmer application programming expertise mental model represents programmer current understanding program assimilation process describes mental model evolves programmer knowledge base program information 
systematic needed 
littman observed programmers systematic approach reading code detail tracing control data flow needed approach focusing code related task hand 
integrated approaches 
von mayrhauser vans combined top bottom knowledge approaches single metamodel 
proposed understanding built concurrently levels abstractions freely switching comprehension strategies 
factors affecting comprehension strategies researchers realize certain factors influence comprehension strategy adopted programmer :10.1.1.25.9780
factors explain apparently wide variation comprehension strategies discussed 
variations primarily due differences programs aspects task hand varied characteristics programmers 
appreciate programmers understand programs factors considered :10.1.1.25.9780
factors explored section context experiment 
experience programmers know strategy effective program task 
change strategy may needed anomaly program peculiarity requested task 
program understanding tools enhance ease programmer preferred strategies impose fixed strategy may suitable 
section describes tools browse source code program understanding software maintenance purposes 
program understanding tools understanding software program difficult process missing inconsistent information 
source code sole arbiter system works 
software visualization browsing tools provide information useful program understanding 
section describes tools studied user experiment 
rigi rigi program understanding tool supports reverse engineering approach consisting parsing discovery phases 
parsing subject source code results flat resource flow graph manipulated explored graph editor 
subsequent discovery phase semi automatic involves pattern recognition skills domain knowledge reverse engineer identifies subsystems flat graph form meaningful abstractions 
subsystems recursively collapsed build layered hierarchy 
hierarchy serves backbone navigational purposes tool 
rigi subsystem containment hierarchy individual overlapping windows visually display specific slice hierarchy 
overview windows show subsystem hierarchy tree form arcs levels show containment 
default node labels overview windows hidden 
children windows show children nodes contained subsystem 
projection windows flatten sub hierarchy single view 
nodes arcs windows filtered type selected name highlighted search dialog 
rigi directly support searching source code text 
node arc information windows provide detailed report local dependencies neighboring nodes 
text editor windows opened certain low level nodes show relevant source file positioned start appropriate code fragment 
windows distinguished labels title bars 
rigi main focus support uncovering subsystem abstractions creation subsystem hierarchies information form documentation subsequent program understanding software maintenance 
experiment described considered rigi browsing previously composed hierarchies subsystem abstractions 
shrimp views exploring software shrimp visualization technique uses nested graph formalism structure software system single window :10.1.1.29.9103:10.1.1.20.6336
nested graph composite nodes contain nodes forming hierarchical structure navigated 
composite nodes typically represent software subsystems opened show children double clicking 
nested graph composite arc represents arcs lower level nodes hierarchy 
composite arc opened double clicking show constituent arcs may composite 
shrimp technique integrates fisheye view pan zoom approaches magnifying nodes interest graph 
fisheye view simultaneously displays context detail objects interest magnified relevant objects 
pan zoom approach allows user pan zoom view distortion critical information edge view 
tasks may need contextual cues programmer focuses fragment program code 
rigi certain low level software artifacts tied specific fragments source text function body 
shrimp code fragments displayed nodes nested graph 
function calls data type variable clickable hypertext links fragments 
shrimp integrates hypertext metaphor low level dependencies animated panning zooming actions nested graph 
consequently link function pans zooms view function code node 
alternatively user view hypertext code netscape navigator web browser 
shrimp currently lacks searching tool filtering capability somewhat unreliable 
sniff sniff commercial software development environment provides project management source code browsing cross referencing searching features 
features accessed integrated tools window containing menus options 
tools operate symbol table generated sniff parsing source code 
project window lists header implementation files program 
symbol browser accesses symbol table display lists functions constants macros variables symbols filtered name lists 
source editor window displays view source code syntactic constructs 
cross window displays dependency tree symbol refers referred 
retriever window displays result textual search source code 
manage windows user reuse existing window avoid reusing window user freeze contents clicking checkbox window 
windows distinguished labels title bars differences interior layout 
user study section describes user study evaluate effectiveness program understanding tools typical high level program understanding tasks 
study conducted university victoria spring 
goals main goals mind 

study factors affecting participant choice comprehension strategy see section 

observe tools effectively enhance participant preferred comprehension strategies solving tasks 

devise framework characterizing effective tools 

provide feedback developers tools 
participants experiment participants recruited computer science course human computer interaction university victoria 
participants graduate students senior undergraduate students 
prior actual experimental sessions asked participant complete questionnaire programming experience relevant domain knowledge 
experimental design program understanding tools rigi shrimp sniff compared 
tool interface tested asking participants complete series program understanding tasks controlled supervised conditions 
participants randomly assigned tools 
hour session participants contained time limited phases orientation min training tasks min practice tasks min formal tasks min post study questionnaire min post study interview debriefing min 
orientation experimenter began experiment briefly orienting participant 
participant reminded purpose experiment evaluate effectiveness program understanding tool 
participant learn basic features tool help understand software 
different phases session outlined participant assured collected information remain anonymous 
mentioned participant feel undue pressure produce right answer feel rushed finish tasks limited time 
interested observing tool solve particular task 
training training phase experimenter demonstrated predefined subset tool features minimal upcoming tasks 
defining suitable subset features necessary 
omitted available essential features affect comprehension strategy participant 
tool features overload user 
tried strike workable tradeoff flexible approach explaining convenience features appropriate receptive users 
training experimenter demonstrated solve simple queries finding functions called small program 
practice tasks purpose practice tasks allow participant familiar tool finer points setting 
participant encouraged explore ask questions tool 
practice tasks involved assigned tool browse program written program contained lines code files 
tasks progressed difficulty allow participant grasp tool features combine appropriately 
example practice task required participant discover purpose variable find functions variable 
formal tasks formal part session participant performed tasks monopoly game program 
tasks videotaped participant permission experimenter recorded observations 
participant encouraged think aloud tasks 
formal tasks designed typical maintenance programmer asked 
tasks distinctly different somewhat broader training practice tasks 
want participant merely mimic similar solution previous task 
interested observing participant choose solve tasks assigned tool 
observations reported section 
questionnaire finishing formal tasks participant asked complete brief usability questionnaire 
questionnaire consisted questions sets 
questions set subtle 
questions randomly ordered 
sets designed gather opinions ease confidence results generated ability generate results ability find dependency relationships 
questionnaire provided space general comments 
interview debriefing informal interview conducted stimulate participant revealing thoughts expressed answering questionnaire 
experimenter handbook detailed experimenter handbook tool provide consistency control running experimental session 
general instructions common tools outlined structure experiment rules conduct various procedures followed experimenter 
tool specific descriptions contained detailed instructions experimental phases 
example descriptions training practice tasks detailed features taught 
attached handbook forms filled experimenter observations participant formal task questions usability questionnaire 
fresh copy handbook session 
experimental variables subsection explores factors affect participants performance choice comprehension strategy experiment 
test program formal tasks involved understanding text monopoly game program written program contains lines code files sparse comments 
control flow program fairly complex due gotos table function pointers commands game 
rigi shrimp authors created subsystem hierarchy monopoly rigi graph editor 
subsystems modularization source code files 
higher level subsystems formed gather related modules simplify graph 
selection meaningful subsystem names particularly important 
task complexity tried devise higher level program understanding tasks formal tasks 
tasks required participant understand part program answer question functionality 
example task asked participant determine certain feature implemented program 
tasks required deeper understanding asking participant describe change program implement new feature 
example task asked participant describe change rule game 
users need changes take approach maintenance tasks educated guesses solutions 
observations assigned tasks detailed section 
user expertise level expertise skill affects user performance contributing significantly understanding program learning tool interface 
pre study questionnaire asked programming experience maintenance experience number years programmer experience writing games shown programming experience correlate highly programming proficiency 
domain knowledge monopoly board game asset providing useful preconceptions 
strive consistency participants set monopoly board participant needed explained rules game 
encouraged review rules board formal tasks 
section report observations formal tasks study 
observations due focus complex tasks interesting results observing users performed program understanding tasks assigned tool monopoly program 
formal tasks resulted brainstorming session experimenters 
designed detailed knowledge code tailored suit code program structure 
tasks classes preparatory tasks high level program understanding tasks maintenance tasks 
brevity observations task asked user familiar game monopoly task asked user familiar monopoly software omitted 
task computer game players play time 
monopoly main function calls function users examined 
function prompts player enter number desired number players 
entered number compared pl macro defined header file 
sniff users looked pl symbol browser 
thought pl constant variable think check list macros 
resort users retriever find definition pl parser rigi shrimp generate graphs emit information macros 
consequently max pl node graph 
rigi users tried name selection feature find max pl node 
node exist users resorted searching nodes opening corresponding header files 
skimmed searched file find max pl macro 
users difficulties seeing highlighted nodes overview window small size nodes 
rescaling nodes larger cumbersome action rigi 
shrimp users wanted search definition pl lack search tool frustrating 
search tool users resorted picking nodes represented header files 
process feasible files header files 
users said hyper link occurrence pl definition 
parser produce information hypertext generator 
task program support computer mode computer play opponent 
task users recalled function prompted players 
led believe incorrectly program supported computer mode 
users decided check hypothesis studying code 
sniff rigi main strategy search string computer auto ai sniff user looked symbol browser file implemented mode 
rigi user guessed strings turn turn computer mode searches yield useful 
consequently sniff rigi users read code somewhat systematically control flow looking clues 
lack beacons support hypothesis led users conclude mode exist 
sniff ways get definition called function convenient 
typically users symbol browser retriever cross 
users preferred hypertext approach clicking double function call jumping called function definition 
action invoked menu intentionally unfortunately left minimal feature subset training 
instances taught convenience feature experiment avoid undue frustration 
rigi reading code systematically control flow quite cumbersome 
users search dialog enter name called function click button highlight node locate node visually crowded overview window double click node open text editor source file containing function 
going artifact graph window code text editor hard doing opposite supported 
lack integration annoying users 
shrimp lack search feature frustrating users 
quickly look beacon cue verify belief computer mode 
users forced browse code follow function calls systematically 
browsing fairly easy aided clickable hyperlinks code function calls function bodies 
animated view help users maintain sense orientation browsing program 
task limited total number hotels houses limit implemented 
functionality currently implemented difficult add 
changes enhancement require 
real monopoly game houses hotels 
limited total number houses players playing strategy 
example houses building hotels players may prevented getting houses properties 
task particularly interesting limits implemented 
hotels implicitly represented houses making required changes difficult expected users 
participants looked evidence total limits 
sniff involved searching strings max house hotel source text 
users exploited searched sniff retriever returned matches house hotel printf string 
users quickly realized hotel limit implemented 
search strategy failed quickly produce answer users switched looking header files possible hints related constants macros 
limits clearly evident users resorted browsing source code systematically 
similar initial process occurred rigi users 
sniff users browsed file appropriate finding house limit contained functions buy houses buy buying houses 
users immediately think frustrated trying find relevant code 
rigi shrimp subsystem called buying selling important cue users noticed 
rigi users spent lot time looking nodes overview window opening children windows shrimp users relevant nodes quickly 
due easier navigation shrimp rigi hides node labels default overview windows 
buying selling subsystem contained house subsystem turn contained buy houses function nodes 
users house buying functions easily able suggest appropriate changes fairly general terms 
users failed mention code selling houses breaking hotels need considered 
task needs changed code implement new rule states player jail just visiting collect rent landing properties 
people play monopoly may follow popular variations official rules 
implementing variation program realistic maintenance task 
task asks user implement variation players jail lose citizenship 
high level solution player lands property houses hotels check property owner jail 
fulfill task detail pieces code needed located 
code determine player jail just visiting 
code track player position board 
saw basic approaches solve task looking jail related code looking player position code 
suspect ordering words task user experience board game programs effect 
common mistake users proposed checking currently active player jail checking players land properties 
realized approach wrong switched highlevel solution 
stage tasks users understood program contained player data structure 
guessed field record player jail 
related fields jail 
users mistakenly suggested jail variable 
variable counted number turns player jail accurately reflect player jail 
loc field compared macro test player truly jail 
users noticed subtlety 
users correctly guessed needed find rent functions add condition paying rent user jail 
change needed added function defined file 
top function condition paying rent owner property property 
users realized similarity condition necessary change 
sniff file evident file listing 
rigi shrimp rent subsystem poorly placed buying selling subsystem poorly named 
placing rent subsystem higher hierarchy helped 
interestingly unduly impact users challenging importance higher level subsystems relatively small programs 
shrimp users browsed moving subsystem zoomed move function code followed hyperlink rent 
rigi users searched function name 
task impression structure program 
think written 
answers task varied partly due mixed skill levels users 
rigi shrimp users perceived subsystem hierarchy intrinsic aspect program partly fabricated 
comments thought subsystems logical names users presence gotos function pointers absence comments 
subsystem abstractions sniff users tended focus file structure coding style 
interprets tools enhanced program comprehension 
discussion believe program understanding tools support variety comprehension strategies facilitate switching strategies reduce cognitive overhead browsing large software system 
section critique effectiveness tools comprehension 
addition discuss biases may influenced observed behaviors describe areas research 
support comprehension strategies preferred comprehension strategies supported tools times users preferred comprehension strategies adequately supported 
example sniff suited bottomup approaches facilities available showing higher level information program structure 
rigi users problems trying systematically read code follow control flow 
shrimp biggest problem lack searching tool desired approach finding cues beacons verify hypotheses 
rigi shrimp communicated mental map program structure answers task observations graphical subsystem hierarchy rigi shrimp effective conveying mental map program 
users mentioned structure logical helped understand program 
suspect imposing structure monopoly program users perceived modular 
naming subsystems critical rigi shrimp naming subsystem nodes critical effectiveness rigi shrimp 
example buying selling subsystem important cue trying locate houses hotel limits task 
better name subsystem transactions contained rent mortgage subsystems 
users rent related code means task 
expressive searching tools lacking rigi shrimp rigi shrimp lack searching tool find text strings source code definitely hindered users 
rigi users mistakenly thought searching strings code searching node labels graph 
ability search node labels useful 
contrast shrimp users felt constrained search nodes 
shrimp users commented probably better searching tool 
behaviors observed shrimp noticed users tended navigated particular part program 
examine nearby nodes store knowledge 
sort information gathering reflective opportunistic behaviors described letovsky 
shrimp opportunistic behaviors augmented feeling flying animated effects moving nodes 
previously browsed shrimp subsystem nodes acted important navigational cues 
essence subsystems thumbnail images serving history mechanism indicate previous paths interest 
code readable smaller nodes code layout length indentation colored hyperlinks provided important recognition cues 
support switching comprehension strategies crucial importance ability switch comprehension strategy 
behaviors documented von mayrhauser vans 
observed users frequently switching variety comprehension strategies experiments 
switching strategies easier shrimp noticed shrimp tool better supports integrated frequently switching various comprehension strategies 
saw users zooming low level code subsystem levels 
zooming higher level views done user paused rethink strategy obtain context switch subtasks 
rigi navigating text editor view source code graphical view subsystem hierarchy supported 
sniff lacking higher level subsystem views 
reducing cognitive overhead larger software systems true strength program understanding tool lies ability manage inherently large amounts information 
test program relatively small issues related managing complexity minimizing disorientation reducing cognitive overhead 
multiple windows rigi sniff rigi sniff capable representing larger software systems 
multiple window approach tools disoriented users 
users faced difficult task accurately conceptualizing integrating implicit relationships contents individual windows 
sniff reuse existing windows accepted users 
preferred open new windows wanted windows frozen default complained multitude windows freezing feature cause 
mentioned aspect sniff get fisheye views infrequently shrimp fisheye views thought useful provided ability view detail context time 
users occasionally fisheye view method shrimp especially wanted see node interest interacted rest program 
noticed users fisheye view feature 
zoomed see detail zoomed context desired 
reasons behavior 
hypertext code nodes provided context colored hyperlinks called functions referenced data types 
second pan zoom method efficiently implemented contextual information just click away 
third shrimp version experiment support multiple focal points chief advantage fisheye algorithm pan zoom 
users wanted expand multiple non adjacent nodes unable 
suspect fisheye view method beneficial creating subsystem hierarchies browsing existing hierarchies 
context needed assigning nodes different subsystems subsystem hierarchy 
filtering effective rigi sniff rigi sniff provide ability filter irrelevant information views 
filters effectively increased scalability tools considerably 
rigi node labels filtered overview windows 
reduced visual clutter labels important subsystem nodes filtered 
consequently users search nodes name highlight matching nodes overview turn node label filter selected set nodes 
users awkward 
information overload shrimp shrimp users overwhelmed large amount information displayed single window 
biggest concern large number visible arcs 
concern increased composite arcs opened 
disorientation relieved judicious filters available 
users suggested arcs hidden default 
arcs type connected selected set nodes displayed request 
feature better support needed comprehension strategy 
improving access arcs effectively managing opening closing composite arcs areas research 
experimental biases practical difficulties running study complexity 
entirely prevent experimental biases arising tried realize control minimize 
carrying study experimenters 
small inconsistencies sessions run different experimenters affected observations 
instances experimenter forgot show essential feature tool significantly altering comprehension strategies 
training experimenters handbooks carefully helped reduce problems 
rigi shrimp tool designers experimenters introduced bias 
example shrimp user knew shrimp designer worked intensely tool usual 
reduce bias rotated experimenters tools videotaped formal tasks users tried reveal tool designer 
think aloud affected user performance 
users test situation chose videotaped 
participation study part class assignment 
students required participate study read papers 
wording task affected strategies 
example task ask user verify computer mode strategy may initially systematic 
hinting computer mode coupled apparent possibility single player game users took ad hoc approach try verify mode existed 
perform detailed analysis task answers videotaped experiments 
usability experiments useful information garnered watching users asking feedback analysis videotaped sessions 
videotapes useful verifying details particular behaviors 
meaningful analysis require considering factors influenced users performances 
experiment described followed pilot study described 
experiments study fewer experienced participants solve broader software maintenance tasks longer period time 
addition interested conducting experiments observe tools rigi shrimp creating software documentation 
users comments observations experiment resulted useful feedback developers tools 
reports observations experiment compare tools rigi shrimp sniff browsing program source code exploring software structure 
experiment considered factors affected participant choice comprehension strategy 
important factors included program understood characteristics tasks solved programming expertise domain knowledge exploited 
general noticed tools enhance users preferred comprehension strategies solving tasks 
example ability view dependency relationships tools exploited users 
shrimp ability switch seamlessly high level views source code considered desirable feature 
instances tools hindered users progress 
lack effective source code searching tool rigi shrimp caused users change comprehension approach tasks 
sniff insufficient high level information forced users adopt bottom approach understanding 
previous devised list cognitive design elements addressed design program understanding tool :10.1.1.25.9780
hope design elements observations experiment experiments form basis framework characterizing effective program understanding tools 
acknowledgments authors subjects participating experiment 
jochen greg johannes martin curtis ller helped organize run experiment 
go jim mcdaniel writing html generator 
grateful ben bederson suggestions pad shrimp efficiently 
comments harald gall appreciated helped improve 
bederson hollan 
pad zooming graphical interface exploring alternate interface physics 
proceedings acm uist marina del rey california pages november 
brady 
monopoly book strategy tactics world popular game 
david mckay new york 
brooks 
theory comprehension computer programs 
international journal man machine studies 
furnas 
generalized fisheye views 
proceedings acm chi boston ma pages april 
harel :10.1.1.20.6336
visual formalisms 
communications acm may 
landauer 
trouble computers usefulness usability productivity 
bradford book mit press 
letovsky 
cognitive processes program comprehension 
empirical studies programmers pages 
ablex publishing 
littman pinto letovsky soloway 
mental models software maintenance 
empirical studies programmers pages 
ablex publishing 
ller 
rigi system programming large 
proceedings th international conference software engineering icse singapore april pages april 
pennington 
stimulus structures mental representations expert comprehension computer programs 
cognitive psychology 
shneiderman 
software psychology human factors computer information systems 
publishers 
sniff 
user guide software 
www com december 
:10.1.1.25.9780
storey fracchia ller 
cognitive design elements support construction mental model software visualization 
proceedings th international workshop program comprehension iwpc michigan pages may 
:10.1.1.29.9103
storey ller wong 
manipulating documenting software structures 
eades zhang editors software visualization pages 
world scientific publishing fall 

storey wong fong hooper hopkins ller 
designing experiment evaluate reverse engineering tool 
proceedings rd working conference reverse engineering wcre monterey california pages november 
tilley paul smith 
framework program understanding 
wpc th workshop berlin germany pages march 
vessey 
expertise debugging computer programs process analysis 
international man machine studies 
von mayrhauser vans 
program comprehension software maintenance evolution 
ieee computer pages august 
von mayrhauser vans 
code understanding needs reverse engineering tool capabilities 
proceedings case singapore pages july 
