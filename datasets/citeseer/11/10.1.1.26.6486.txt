hive distributed agents networking things nelson minar matthew gray oliver pattie maes mit media lab ames street cambridge ma usa nelson media mit edu hive media mit edu hive distributed agents platform decentralized system building applications networking local system resources 
presents architecture hive concentrating idea ecology distributed agents implementation practical java system 
hive provides ad hoc agent interaction ontologies agent capabilities mobile agents graphical interface distributed system 
applying hive problems networking things think putting computation communication everyday places shoes kitchen body 
ttt shares challenges potentials ubiquitous computing embedded network applications 
flexibility distributed agents architecture suited application domain enabling easily build applications reconfigure systems fly 
hive enables environment network alive 
dedicated memory mark weiser visionary guide 
computation ubiquitous distributed computation changing 
computers longer isolated number factories desks wrists pockets embedded devices homes offices 
computers constantly communicating wireless networks lans internet 
new reality computation demands new paradigms building computer systems 
believe software agents important abstraction building distributed systems 
software agents small autonomous self describing programs excellent building block complex open ended networked august appearing asa ma applications 
created hive software system implementing ecology distributed agents 
applying hive creating applications new networked computer reality focusing connecting embedded computers things think ttt 
design hive strongly influenced world wide web 
take lessons success web importance decentralized systems value simple abstractions 
web deeply decentralized web page linked central administration similarly hive systems built entirely peer peer relationships agents 
key web abstraction web page mirrored hive software agent 
web distributed system static data hive dynamic computation 
wish internet alive 
ecologies distributed agents metaphor building networked systems ecology distributed agents 
ecology agents application created interaction multiple agents network 
agent located particular place hive called cell uses various local resources shadows 
agents communicate share information access resources 
application communications actions agents 
agents 
programmer perspective hive agent just distributed object execution thread 
hive agents just objects building block active distributed system 
agents provide conceptual wrapper useful ideas agents autonomous sent system carry goals 
agents proactive encapsulate computational activity 
agents self describing ontology agent capabilities describe discover available services 
agents interact complete task 
agents mobile mobile agents provide simple abstraction complex dynamically distributed systems 
ecology distributed agents decentralized system 
believe decentralization essential allow system grow 
decentralization comes cost agents responsible locating resources need finding negotiating relationships 
hosts responsible protecting unwanted agents keeping consistency 
single place point say center system comes know working correctly challenges reality distributed systems today 
details manage problems described 
hive embodiment ecology distributed agents 
describes specifics hive implemented applications built hive lessons learned testing hive real systems 
introduce primary application domain 
things think goal things think project media lab take power computers networks put everyday objects 
ttt enhances physical world computation communication 
ttt computer networks complex capable room appliance light socket begins think full explication things think scope detailed description available 
agenda shared researchers 
mark weiser details related ideas name ubiquitous computing 
consumer world embedded computers quite common technologies bluetooth bringing networking consumer devices 
toys leader trend networked toys microsoft industry initiatives intel play 
computer industry tackling problems networked embedded systems applications technologies inferno jini 
ubiquitous embedded networking presents variety challenges application infrastructures 
devices scattered network system fully distributed 
administrative overhead low meaning system centralized 
new devices need easily added requiring open architecture 
people want add new devices create new applications doing things system foreseen designers 
system flexible 
ecology distributed agents match requirements 
hive agent ontologies mobility flexible 
agent descriptions allow new capabilities announced discovered 
mobile code allows parts system reprogrammed dynamically network evolve necessary 
hive infrastructure ttt ttt problem hive 
build agent system system tested understood 
building ttt applications hive helped validate design principles taught lessons design agent distributed systems 
hive architecture hive consists components cells shadows agents 
hive network decentralized collection cells 
hive cell analog web server program running specific computer published network address 
cell contains set local resources called shadows encapsulate capabilities screen display digital camera 
cell host agents local resources communicate 
analogy conventional operating system cell kernel shadows device drivers agents processes 
schematic diagram hive architecture 
hive set java libraries currently system consists roughly classes lines code half generic infrastructure half specific code devices agents 
addition basic java libraries hive extensive java remote method invocation rmi serialization agent communication mobility 
ontology support hive uses rdf library 
cells nodes decentralized network hive cell program participates network 
cells perform primary tasks hosting software agents managing access local resources shadows 
ideal model place hive cell device 
hive cells require fair amount cpu power memory currently run computers proxy devices 
typical cell devices providing input resources motion sensor camera digital tag reader output resources computer display small robot speaker 
hive location dependent model distributed system 
hive cells cell specific set shadows specific population agents 
wants access particular device contact agent cell access device shadow 
model contrast distributed systems try away concept location 
hive explicitly uses locations shadows agents help organize partition system 
things places 
hive cells created necessary represent devices intended long lived processes 
hive cell equal peer network 
agents cell communicate agents completely freeform decentralized system 
federations hive cells formed ad hoc 
hive cells typically run server list agent contacts registry maintain membership global hive network cells free arrange federations needed 
shadows local resources hive cell simply shell cell interesting shadows provides 
term shadow suggests role encapsulating local resource 
physical devices shadowed hive cell 
example hive cell may digital camera plugged 
camera shadow provides software interface hardware methods brightness 
agent wants directly camera moves camera cell asks cell camera shadow invokes shadow standard java method calls 
shadows simple api access specific resource 
shadow abstraction useful structuring system 
shadows static part hive cell system designer writes shadow encapsulating device behavior freezes code place 
flexibility system comes mobile agents shadows provide static layer 
hive architecture cell shadow agent agents access 
shadows provide place hive cell enforce security resource control policy 
shadows trusted code 
shadows mobile communicate directly network 
export device functionality local cell agent mediate shadow network 
agents active computation shadows fixed static local component system agents active dynamic networked aspect 
hive agent network interface policy resources 
technically hive agent combination java object execution thread remote interface network communication self description 
simple pieces create agent full fledged autonomous process distributed system 
agents live specific cells accessing shadows resources need 
agents export selected functionality network communicate share functions 
example camera agent export picture functionality camera shadow remote agents 
image agent invoke method network implementing simple remote picture application 
hive applications built collection interacting agents 
agent interactions descriptions mobility discussed section 
user interface hive provides graphical user interface distributed system 
hive computer display simply shadow agent draw screen sending java graphical component appropriate shadow 
hive user interface implemented agent 
provides graph view state system control interface communicating system agents 
agents system tasks hive benefits distributed agents approach 
screenshot user interface shown 
user interface displays major aspects system agents connections agents 
agent represented icon 
agents left simple camera application described agents right system management agents 
agent communication paths shown arrows icons 
visualization dynamic agents message messages shown animations connection arrows 
interface display multiple cells example shows 
user interface information control 
new agents created drop menus 
agents connected drawing lines 
agents moved killed popping menus 
hive user interface easy users experiment agent populations create new applications stroke mouse 
simple example image shown section basic application demonstrate hive system 
core example consists agents screen button upper left digital camera middle left screen image display lower left 
application simple user clicks button camera takes picture picture displayed screen 
agents build application button camera display 
button display send graphical components cell computer screen 
camera shadow uses local resource digital camera 
camera agent created asks cell access camera shadow access granted agent take pictures send network 
agents established left connect 
image display agent connects camera agent camera agent connects button agent 
user clicks button button agent sends event camera agent 
camera agent interprets command take picture sends event display agent image embedded data 
example camera agent second computer agents communicating network create application 
distributed application new 
hive interesting simplicity flexibility applications built 
new applications easily built connecting existing agents 
agent detects motion door opening connect camera get pictures comes room 
face recognition agent camera discover names visitors 
agent hive network looking camera agents build photo gallery entire building 
mobile agents dropped network dynamically upgrading changing pieces application 
flexibility pre planning altering agent code 
power ecology distributed agents 
hive agent implementation hive agents live lives cells possibly traveling network 
agent interaction ad hoc simple distributed object techniques 
hive agents rich ontological basis java type system resource description framework description languages :10.1.1.44.6030
creating practical system network things think tried balance working deep agent research questions creating simple useful software everyday programmers 
hive draws techniques parts agent research including agent autonomy mobility multi agent interaction agent ontologies 
fields tried extract essential pieces bypassing complexities unsolved problems 
agent anatomy hive agents rooted common agent base class 
tried adopt minimal approach designing hive adding fields methods absolutely sure need 
drawn inspiration mobile agent systems aglets particularly agent lifecycle tried simplify possible 
agent stores fields cell agent living pointer description object semantic description 
addition application agent subclasses typically additional internal state computation 
agent class subclass basis remote objects rmi 
class allows methods agent executed remotely 
choosing rmi agent communication mechanism simplifies hive architecture agents simply remote objects require extra agent communication system 
cost simplicity control management agent communication done rmi 
hive explicit control agent messaging placing responsibility understanding messages deciding act agents 
agent interaction agent interaction hive completely ad hoc 
requirements agent communication individual agents decide talk 
agent communication occurs rmi remote method invocation allowing agents synchronously call methods 
added asynchronous calls rmi agents decouple interactions 
java strong typing syntactically structures agent communication agents free define semantics 
agent types true type agent object subclass agent remote interface subtype agent 
duality common rpc systems 
initially nuisance write types agent split agent remote interface local implementation useful 
particular agents bookkeeping administrative methods inappropriate agents call 
agents access remote interfaces sensitive methods protected java type system 
practice agents simply inherit remote interface eliminating need define 
base agent interface methods called remotely 
methods informational 
methods administrative 
may strange method remotely 
hive camera application ble allows agents manage agents 
agent ask die remote agent necessarily comply 
agents remote methods managing connections agent ask agent ask 
aspects agent interface methods purely advisory 
agents free define meaning connection ignore requests 
simple communication patterns particularly event publish subscribe broadly useful 
example connect jini distributed event specification pass event objects system 
addition standard agent methods application agents define extra methods interfaces 
example hive uses agents manage system functions 
cell remote methods 
agents user interface agent communicate agent control remote cells 
responsible deciding methods invoked agents implement security policy 
syntactic ontology hive relies ability agents describe ad hoc agent interaction coherent 
agent hive described terms orthogonal ontologies syntactic semantic 
hive cells provide query service descriptions agents find 
example remote agent ask list agents provide motion data room syntactic ontology agents hive comes free java 
agent syntactic description simply java type 
may trivial usefulness overlooked 
type object says capabilities established understood ontology class hierarchy system 
agent easy learn types supports messages understands 
interface hive cell allows requester list types looking 
hard problems solved syntactic ontology 
classes name fact different versions different types entirely 
hive guarantee consistency 
mobile code means syntactic ontology hive open ended new agent class comes hive network agents know type query message 
see way solve problem answering fundamental epistemological questions 
keeping practical bent hive system chosen defer working issues 
far hampered ability create useful systems 
believe building practical applications people engineer agents problems creating ontology project consensus practice 
semantic ontology syntactic ontology describe agents bits information agent fit rigid class hierarchy 
instance fact agent representing device room easy codify syntactically 
add method agent part interface method sense agents physical location 
limitations java class hierarchies semantic description compounded fact agent want assume different capabilities runtime 
example agent filters event streams need assume different identities depending event source connected 
java add interfaces object runtime type object static 
circumvent limitations hive uses second orthogonal ontology describe semantic information agents 
ontology utilizes resource description framework rdf xml :10.1.1.44.6030:10.1.1.44.6030
rdf provides structured way attach nouns verbs agents 
example agent semantic description state physical location human readable nickname owner device description meaning data 
hive agents carry rdf description available calling 
agents inspect description learn agent cell query interface supports matching sets rdf descriptions 
agents free change descriptions runtime 
semantic ontology solve deep philosophical problems allows application designers express solutions 
expect application designers develop schemas agent communication semantically consistent 
schemas may completely ad hoc may strictly defined sgml dtd schema 
expect users collaboratively define schema common consensus building hive systems 
hive network grows ontologies emerge common practice 
mobility final aspect hive agents mobile 
hive mobility portions mobile code mobile agents 
mobile code enables software hive cell updated dynamically 
mobile agents build mobile code allowing agents move hive network 
hive agents weak mobility agent arrangements preserving execution state transport 
believe strong mobility preferable currently difficult implement java 
couple experimental systems achieve strong mobility modifying standard mechanism defined 
advantages mobile agents understood 
agent lots bandwidth needs low latency access resource efficient agent move resource cell communicate agent network 
hive cell unreliable network access moving agents stable hive cell system robust 
interested mobility achieve flexibility 
property especially important heterogeneous networks embedded systems 
hive cell deployed embedded software smart device small firmware easily upgraded 
hive firmware device specific software easily updated simply sending new mobile agent 
mobile agents allow functionality cells customized 
example mobile agents turn camera motion detector 
camera agent method 
comparing images agent decide moved 
motion detector agent created moved host camera saving bandwidth shipping images network 
motion detector function remain separate component keeping camera agent simple 
hive mobility enables efficiency conceptual useful attributes building applications 
hive provides mobile agents 
believe mobility ultimately enable new form distributed system agents travel network freely performing tasks network comes alive computation 
hive applications experiments design hive motivated specific requirements application domain things think 
iterative experience building applications hive greatly influenced design 
ease applications built hive demonstrates ecology agents effective way create distributed system 
honey shrunk cds part ii simple system built hive jukebox physical interface 
application appears straightforward user selects poker chip name song written 
drops table song selected start play 
poker chip stand cd physical icon 
activity scenes complex 
poker chip embedded rf id tag 
table contains tag reader senses tags passes ids serial port 
tag reader agent watches serial port shadow broadcasts hive event new tag sensed 
event picked database agent maps tag id song name broadcasting third dj agent plays mp file 
agents working machines jukebox 
system agents hive cell watch failure agents restarting necessary 
earlier version system implemented monolithic application 
hive version took roughly half effort implement robust flexible 
factoring pieces system agents easy add new interfaces jukebox standard remote control web page intelligent agent dj pick music people preferences 
tangible interfaces ambient displays honey shrunk cds example tangible interface new form human computer interface physical objects standard keyboard mouse crt 
media lab active tangible interfaces research agenda building variety creative things think 
ambient displays devices animated soft light display subtly convey information 
past difficult displays projects hardware interface device different undocumented 
hive necessary create hive cell shadow device 
device hive agent internet 
hive interface created craig personal ambient displays 
things small objects different input output capabilities 
objects grow warm command sense touched 
objects controllable hive 
connected 
hooked external information sources starts stock portfolio value drops 
hive provides flexible simple way experiment connecting devices hive enabled devices 
wearable computing hive related research project media lab wearable computing making people things think putting computation clothing 
media lab beacons broadcast room 
brad rhodes wearable computer uses building 
brad wearable computer hive cell hive agents choose information available agents people easily find 
agent office information play theme music walks telling dj agent honey shrunk cds play appropriate music 
wearables offer new opportunities personalized context sensitive applications 
decentralization hive possible preserve privacy agents control personal data 
counter intelligence largest application built hive date counter intelligence project smarter 
counter intelligence kitchen embedded networking knows ingredients counter knows currently scale knows added bowl oven automatically set bake right temperature 
recipe planning agent incorporating strips procedural nets runs scenes helping bake cake 
counter intelligence working system currently implemented eighteen agents running computers 
hive provides infrastructure agents simplifying process managing interactions 
ontology system key allowing agents coordinate dynamically adapt newly available hardware planning agents inspect information available kitchen data help effect recipe 
system open ended new devices added kitchen network kitchen mother country get help 
counter intelligence testbed hive placing strong demands agent infrastructure 
summary applications applications described give flavor things networking hive 
hive proven useful application infrastructure connecting things 
real power hive just network things hive hive network open flexible new connections little cost 
example trivial hive network wearable computing tangible interfaces sets devices control kitchen 
agent written represent capability hive allows connect agents build new distributed applications 
experience web know power synergy 
lessons hive experience building real systems distributed agents educational perspectives software engineering distributed systems agents 
continue experiment hive uncovered practical lessons pointers 
java rmi asynchronous messaging java wonderful language building distributed agent systems 
things java pleasant general particularly useful distributed systems 
strong typing gives hive syntactic ontology free 
simple object oriented model particularly split interface implementation easy build class hierarchies agents 
awt easy write portable graphical agents 
java security model build system executes untrusted code 
java fairly advanced internet programming options available distributed java bit lacking 
hive started voyager system 
voyager provides nice capabilities distributed agents including messaging mobility 
voyager toolkit building system order give flexibility messaging mobility give option moving jini year hive java rmi 
interesting experience porting codebase surprisingly easy agents isolated details transport 
major advantage change rmi robustness comes forced handle communication errors 
argument note distributed computing 
voyager tries provide transparent model networking messaging failures agents explicitly caught 
danger approach network failures happen better agents explicitly know deal potential error communication 
rmi requirement easier build robust distributed systems 
rmi limited ways 
rmi java implementation limitations difficult scale systems concurrent agents 
rmi design entirely synchronous calls agent communication 
synchronous communication means agents unduly dependent having wait respond messages 
synchronous messaging particularly inappropriate distributed event systems sender typically care event delivered 
view asynchronous messaging fundamental requirement distributed agent system 
added asynchronous messaging top rmi fairly complex implementation required avoid scalability problems 
decentralization learned decentralization useful strategy levels 
believe ultimate advantage decentralization scalability 
centralized systems break central manager overwhelmed decentralized systems spread load 
hive network small seen technical scalability advantages 
organizational advantages decentralization 
new hive users need setup simply start cell join network 
lowers barrier hive 
individuals free develop agents central coordination 
new kind device sends device data deploy agent represent agents explicitly teaching system new agent type 
free software community decentralized software development effective way quickly build large systems 
surprising advantage robustness decentralization server bookkeeping tasks 
hive agents take care maintaining federation servers broadcasting server state controlling server displaying user interface 
agents crash 
just agent fails mean system dies 
example user interface working rest application agents continue 
user create new user interface agent send cell fixing problem 
sort robustness quite appealing 
decentralization drawbacks 
desirable functions require global state maintaining listing hive cells running network 
current implementations functions hive cumbersome naively centralized scale 
making decentralized systems consistent difficult rely central architect things right portion system responsible 
small distributed system weakness decentralization essential system grow management single administrator 
mobility mobility proven challenging problem details implementing mobile code general picture mobile agents 
moving voyager rmi implemented small mobile agent system standard serialization network class loading getting implementation details java class loaders right tricky 
furthermore experience pointed deep problems mobile code unsolved 
issue versioning code mobile common multiple versions classes network time 
java tools managing versioning incomplete 
quite subtle load agent code 
java late class loading agent decide needs class file long host came gone away 
current solutions awkward generally requiring specifying static code base trying closure required classes 
honest appraisal reveals second problem mobility hive benefit mobile code mobile agents 
problem conceptual current applications fixed agents need wander network 
practical examples mobile agents sending agent computer easier walking demonstrating system new user sending agents cell 
statically locally manage agent population 
classic arguments mobility improving bandwidth limiting latency supporting disconnected operation apply hive applications 
expect system grows system flexibility benefits mobile agents increase ideas may happen section 
ad hoc interaction ad hoc agent interaction hive suited quite 
open nature agent interaction hive system unpredictable inconsistent 
theoretically probably agent lie agent ignore messages agent interpret method wants 
abstractly say hive application correctness 
uncertainty reality internet learned 
general people cooperative 
agent designers build compatible software 
stage restricting paradigm formally correct hamper growth hive 
formal agent communication mechanisms tend understood specialists require centralization development restricted agent communication 
hive takes view important enable system designers build right thing prevent building wrong things 
hive treats seriously wrong things security problems rest bugs 
agent interaction paradigm chosen simple build multi agent systems 
users write hive programs write conventional programs 
familiarity strong advantage gaining users 
know ad hoc interaction scale 
long hive community remains small communicate person consistent class hierarchies semantic ontologies 
hive grows thousands users friendly coordination longer 
concern love problem users day comes pass understand shape problems choose solutions 
ultimate goal hive internet come alive agents running interacting discovery ad hoc communication moving host host 
reach goal need address large topics add new capabilities 
foremost hive stable cells run persistently 
cells run weeks time problems 
main difficulty hive rapid development old versions system incompatible quickly 
need find way handle issues versioning 
need experience applications users 
users hive interesting network 
making open source release hive summer research community build distributed applications 
security plans major missing component hive full security system 
mobile agent security breaks problems protecting host agents protecting agents protecting agents hosts 
problem largely solvable java combination java sandbox model hive shadow abstraction 
main limitation java model resource accounting way restrict cpu time memory agent uses 
various efforts underway address problem 
ultimately see exciting research opportunities applying economic models resource control 
protecting agents harder believe addressed combination java strong typing authenticated credential system 
problem protecting agents malicious hosts difficult solutions partial best 
hive architecture explicitly states agents allowed execute cell cell owner 
believe useful applications need guarantee assuming users incentive cooperate 
mobility mobile code proven useful hive mobile agents played big role hoped 
fact largely symptom maturity system 
hive network grows larger mobility attractive solution managing agent population 
ideal decentralized system user able add new functionality dynamically consulting central authority 
mobile agents simplest straightforward way enable expect having mobile agents hive better prepared handle larger distributed systems 
anticipating near term applications mobile agents hive 
envision census taker agents wander hive network exploring see cells agents available world 
expect create information gathering agents travel globe moving take advantage spare cpu cycles cell cell capture pictures dawn 
see mobility essential part making hive flexible grow encompass possibilities open distributed systems 
related jini agents hive model ecology distributed agents draws experience agent systems general emphasizing practicality simplicity programming formality provability 
core method building applications distributed agents inspired part actors albeit strong formalism actor theory 
hive mobility ways reimplementation systems agents aglets mole 
tried implement simple version mobility ultimately intending create solutions hard problems versioning shipping complete code 
contrast multi agent systems hive formal model agent communication negotiation 
believe useful distributed systems built conceptual overhead theory applicable understand problems occur practice 
higher level communication mechanisms kqml added top basic rmi communication layer necessary 
deliberate choice design hive palatable systems builders expense theory 
distributed systems built today address problems embedded network applications 
sun jini system leading architecture domain 
comparison hive jini useful highlighting details hive ecology distributed agents 
cases trying hive jini 
cases believe hive advantages 
hive jini distributed application infrastructures java rely rmi distributed objects mobile code 
systems discovery lookup implementations 
hive jini extensive events communication hive uses jini distributed event specification 
systems represent devices capabilities network necessary 
jini services roughly analogous combination hive shadows agents 
jini conceptual split 
distinction shadows agents gives hive useful tion local trusted code networked untrusted code 
autonomy hive agents gives clear place place computational activity system 
important difference hive model 
hive agent cell important fact tells agent network potentially physically resources access jini focuses services actual place service hosted major part jini model 
believe location dependence hive contributes scalability technically conceptually 
jini hive rely mobile code flexibility argument usefulness mobility 
difference jini single hop mobility service upload smart proxy user interface proxy migrate network 
currently hive multi hop mobile agents believe important system grows 
description jini hive java type system syntactic ontology 
hive uses rdf semantic descriptions agent capabilities jini uses java types 
jini lookup attribute system closely rdf believe rdf model flexible due ability perform deeply structured queries 
jini lookup attribute system support queries attributes 
hive currently support jini leasing transactions probably 
transactions useful allow agents enter multi message communications guarantee consistency 
leasing useful hook allowing hive agents explicitly negotiate relationships agent express decision agent limited period time lease 
practical matter hive jini integrated encapsulating jini service hive shadow making hive agent jini service 
hive far stayed inside media lab network 
decision designed hive expand internet 
abstractions inherit ecology distributed agents gives conceptual model organizing worldwide network interacting processes 
hive implementation ecology distributed agents 
taken ideas agents research put coherent system application infrastructure things think 
proven agents abstraction building distributed systems 
ad hoc agent communication ontology mechanism sufficient build useful systems 
believe mobile agents useful abstraction applicable larger distributed systems 
agents fundamental building block coherent distributed systems ecologies distributed agents grow inhabit global network millions computers things think 
todd marc brad rhodes asa ma reviewers helpful comments 
gul agha 
abstracting interaction patterns programming paradigm open distributed systems 
stefani editors formal methods open objectbased distributed systems 
chapman hall 
osl cs uiuc edu papers ps ken arnold ann wollrath bryan sullivan robert scheifler jim waldo 
jini specification 
addison wesley 
www sun com jini joachim baumann 
mobility mobile agent system mole 
rd workshop 
www informatik uni stuttgart de vs publications baumann html ronald john cowan ingo simon st laurent 
document definition markup language 
technical report 
www org tr note tim bray jean paoli sperberg mcqueen 
extensible markup language xml 
technical report december 
www org tr pr xml jonathan david kotz daniela rus 
resource control mobile agents 
proceedings international conference autonomous agents 
ftp ftp cs dartmouth edu tr tr ps chess harrison 
mobile agents idea 
jan vitek christian tschudin editors mobile object systems programmable internet volume lecture notes computer science 
springer verlag 
www research ibm com massive ps grzegorz czajkowski thorsten von eicken 
resource accounting interface java 
proceedings acm oopsla conference 
www cs 
cornell edu papers oopsla ps sean dorward rob pike david leo presotto dennis ritchie howard trickey philip 
inferno operating system 
bell labs technical journal winter 
www lucent com ideas perspectives winter index html richard fikes nils nilsson 
strips new approach application theorem proving problem solving 
readings planning pages 

tim finin yannis labrou james mayfield 
kqml agent communication language 
jeff bradshaw editor software agents 
mit press 
www cs umbc edu agents ps neil gershenfeld 
things start think 

isbn 
www media 
mit edu physics publications books ba matthew gray 
infrastructure intelligent kitchen 
master thesis mit media lab 
robert gray 
agent tcl flexible secure system 
phd thesis dartmouth college 
dartmouth edu thesis thesis ps hiroshi ishii ullmer 
tangible bits seamless interfaces people bits atoms 
proceedings chi pages 
acm press march 
david kotz robert gray nog daniela rus sumit chawla george cybenko 
agent tcl targeting needs mobile computers 
ieee internet computing july august 
computer org internet ic abs htm danny lange oshima 
programming deploying java mobile agents aglets 
addison wesley 
isbn 
danny lange oshima 
reasons mobile agents 
communications acm march 
www acm org pubs citations journals cacm lange ora lassila ralph swick :10.1.1.44.6030
resource description framework rdf model syntax specification 
technical report consortium 
www org tr wd rdf syntax mark miller eric drexler 
markets computation open systems 
huberman editor ecology computation pages 
elsevier science publishers 
www webcom com html nelson minar 
designing ecology distributed agents 
master thesis massachusetts institute technology september 
www media mit edu nelson research masters thesis ranganathan anurag acharya sharma joel saltz 
network aware mobile programs 
proceedings usenix technical conference pages 
www cs umd edu papers usenix submitted html eric raymond 
cathedral bazaar 
www org writings cathedral bazaar bradley rhodes nelson minar josh weaver 
wearable computing meets ubiquitous computing best worlds 
proceedings international symposium wearable computers iswc october 
www media mit edu rhodes papers 
html saarela 
simple rdf parser compiler 
web org rdf implementations earl sacerdoti 
nonlinear nature plans 
international joint conferences artificial intelligence ijcai 
tomas sander christian tschudin 
protecting mobile agents malicious hosts 
giovanni vigna editor mobile agents security volume lecture notes computer science chapter pages 
springer verlag 
isbn 
www icsi 
berkeley edu tschudin thad starner steve mann bradley rhodes jeffrey levine jennifer healey dana kirsch picard alex pentland 
augmented reality wearable computing 
presence special issue augmented reality 
wearables www media mit edu projects wearables markus joachim baumann fritz 
mole java mobile agent system 
nd ecoop workshop mobile object systems pages linz austria july 
www informatik uni stuttgart de vs mole ecoop ps gz giovanni vigna 
mobile agents security volume lecture notes computer science 
springer verlag 
isbn 
jim waldo geoff ann wollrath sam kendall 
note distributed computing 
jan vitek christian tschudin editors mobile object systems programmable internet volume lecture notes computer science pages 
springer verlag heidelberg april 
www com html mark weiser 
computer century 
scientific american pages september 
www com hypertext weiser html craig 
design personal ambient displays 
master thesis mit media laboratory 
wooldridge jennings 
agent theories architectures languages survey 
intelligent agents pages 
springer verlag 
intel play 
www com mailing list 
gee cs edu dl voyager core technology 
www objectspace com products voyager core index html 
