web mixes system anonymous unobservable internet access oliver berthold hannes federrath stefan dresden informatik ob sk inf tu dresden de international computer science institute berkeley hannes icsi berkeley edu architecture design issues functions mix system anonymous unobservable real time internet access 
system prevents tra analysis ooding attacks 
core technologies include adaptive anonymous time channel mechanism ticket authentication mechanism 
system provides interface inform anonymous users level anonymity unobservability 
internet services nowadays means leaving digital traces 
anonymity unobservability internet sheer illusion 
hand people agree substantial need anonymous communication fundamental building block information society 
availability anonymous communication considered right countries example voting counseling 
doing research anonymity unobservability internet evaluate feasibility costs systems explore deployment opportunities internet 
goal explore foundations provide secure anonymous technical infrastructure internet 
systems provide unobservability ensure transport network able nd communicates 
communicating parties may know usually authenticate 
example paying users browsing patent data base 
systems provide anonymity ensure client server communicate revealing identity 
example users browsing world wide web 
years developed mix proxy anonymity services web sur ng similar real time services 
academic interest show anonymity unobservability ciently realized 
special objective develop theoretical background cient implementation anonymity services internet 
building anonymous transport system speci ip format 
goal hannes federrath ed designing privacy enhancing technologies 
proc 
workshop design issues anonymity unobservability lncs springer verlag heidelberg 
web mixes system anonymous unobservable internet access provide asynchronous smtp nearly synchronous modes communication 
system able handle various kinds packets 
web site project www inf tu dresden de hf anon 
anonymity unobservability new security goals 
systems provide anonymity services known literature internet selection anonymizer crowds onion routing freedom 
attacker models systems di erent systems provide di erent levels anonymity 
comparison systems 
organized follows 
section architecture system 
section deals attacks prevention 
section explain additional design issues practical system implementation 
components functionality basically modi ed mix concept slice algorithm see sending dummy messages active client send ticket authentication system ooding attacks impossible expensive feedback system gives user information current level protection 
mix concept slice algorithm described section 
ticket authentication procedure explained section feedback mechanism section 
complete system consists logical parts jap java anon proxy client side mixes cache proxy server side 
parts concatenated building anonymous tunnel 
network tra anonymized sent tunnel 
principle single user remains tunnel users exit 
user possibly cause tra observed tunnel exit 
jap 
jap connected rst mix internet 
ideally mixes connected separate high speed connections due performance reasons 
complex expensive mixes internet 
oliver berthold hannes federrath stefan browser cascade mixes real time deployable mixes different operators different locations cascade fixed sequence servers secure traffic analysis better performance cascade ca web server certification authority independent web mixes system issues certificates public keys information service traffic situation anonymity level warnings java anon proxy client software platform independent local proxy constant dummy traffic adaptive time slices tickets flooding unobservable data flow redundant info service requests info service client 
browser client anonymity group client unobservable group clients jap cache proxy server server jap mix mix info server mix info server secure reliable update replication info servers architecture service jap program installed locally user computer 
network tra anonymized goes software 
jap transforms data anonymized mixes 
functions provided jap registration user mixes periodical set time slice channels generating sending asymmetrically encrypted channel building messages sending receiving data channels 
dummy messages instance random bits encrypted zero bits generated send 
listening requests coming browser programs client communicate anonymous way filtering content dangerous anonymity cookies active contents activex embedded objects transforming data mix format sending anonymous channel receiving data active mix channel forwarding originating application periodical utilization info service user gets feedback current level anonymity 
web mixes system anonymous unobservable internet access mixes 
basic concepts similar systems idea mixes 
mix order data streams changes coding cryptography tra correlation attacks di cult 
mixes simple computers connected internet 
form logical chain called mix cascade 
rst mix receives data 
mix cryptographic transformations strips layer encryption prevents replay attacks reorders messages creates batch consists messages sends data mix 
mix sends data cache proxy 
means constant dummy tra senders send messages time create anonymity group 
necessary random data generated distinguished genuine encrypted tra dummy tra endpoints communication relation 
dummy tra mixes su cient prevent tra analysis 
attacker may control mixes total number mixes control cache proxy knows receiver content messages tra goes unencrypted cache proxy internet block message generate messages modify messages 
active attacks recognized consequently prevented ticket authentication system explained section 
cache proxy 
cache proxy sends data internet receives answers servers web servers 
answers sent backto user mixes reverse order 
jap cache proxy send dummy tra 
time slice channel established transport certain number bytes 
channel released automatically 
data needs transmitted sequential time slice connections established 
see section information 
functionality jap cache proxy ects protocol 
far security performance concerned sense cache proxy automatically loads object embedded html page links embedded images 
cache proxy send page including embedded objects time anonymous channel 
idea proposed rst time crowds project 
order realize idea cache proxy jap provide functions cache proxy scans data received web server embedded objects 
cache proxy automatically requests objects sends anonymous channel user jap 
addition cache proxy provide traditional caching functionality order reduce number requests sent internet 
oliver berthold hannes federrath stefan jap replies requests embedded objects sending data received cache proxy 
number requests sent jap anonymous channel dramatically reduced 
info service 
info service provides data maintenance operation anonymous network 
provides addresses public keys mixes information tra situation availability mixes data achievable level anonymity number active users anonymous network 
screenshot graphical user interface info service section 
attacks solutions real time communication additionally developed concepts tra analysis harder increase ciency 
tra analysis means attacker able control cache proxy link particular request user 
message possibly sent di erent group users attacker information intersect anonymity group 
attacks exist basic concept mixes 
attacker goal observe users service denial service attack dos attack 
describe concepts prevent attacks di cult eventually identify attacker 
solutions observation sorts attacks passive active attacks 
passive attacker eavesdrop communication links modify network tra impossible detect passive attacks 
solution prevent 
dummy messages dummy messages sent starting point client communication mix network tra analysis harder 
sending dummy messages guarantees users send data time slice 
tra including dummies encrypted attacker observes network cables know user sends dummies sends real information 
group users change especially leaves group passive attacker split group 
necessary user operates channel times 
web mixes system anonymous unobservable internet access periodically send channel building messages send real data dummy tra channels receive data cache proxy 
mix send dummy messages back user user receive real data 
ensures user receives amount data time slice 
trustworthy mix send dummies successfully avoids attacks supposing mix cache proxy send dummies 
adaptive chop slice algorithm large messages streaming data chopped short pieces speci constant length called slice 
slices transmitted anonymous mix channel 
addition active users active communication request send dummy messages 
knows starting time duration communication active users start communication time 
observer determine anonymous channel starts ends nd communicating 
depending tra situation modify throughput duration anonymous channel 
concept chopping long communications slices introduced rst time 
modi ed version adaptive duration throughput 
time slice channel established transport certain released automatically 
anonymous connection takes longer time slice composed number time slices 
case jap provides id numbers cache proxy uses refer anonymous connection slice number see fig 

comparison sending mix message separately mix channel cient necessary decrypt messages slow asymmetric algorithm 
mix collect messages users sending delay time mix proportional length messages 
establish new slice user sends users conventional mix message mixes 
message contains symmetric key mix 
key decrypt encrypt data sent channel 
time channel starts de ned state system 
normally slice ends 
slice ends committed transferred 
case error especially attacker manipulated data channel supposed immediately 
attacker possibly observe damaged able correlate sender receiver 
ticket authentication system avery di cult problem occurs active attacker anonymity service messages order uncover certain message 
oliver berthold hannes federrath stefan get server page html response get server page html response nil wait sl padding response block wait sl padding response block eof sl padding get proxy sl jap cache proxy mix mix mix create store sl answer server timeout send eof send send server eof send send time slice protocol believe wehave new concept suppress ooding messages outsiders normal users insiders mixes 
firstly limit available bandwidth number concurrently time slices user 
secondly user show allowed system respective time slice providing ticket valid certain slice 
protect identity user ticket blinded signature issued anonymous communication system 
precisely mix issues limited number tickets user 
detailed description procedure step user established connection mix 
connection guarantees con dentiality integrity authenticates mix user possible ssl 
user owns digital certi cate authenticates mix 
mix checks gets certi cate rst time impossible get ticket mix 
certi cate authority guarantees user gets certi cate recognizable di erent certi cates belong user including user identity 
web mixes system anonymous unobservable internet access step user sends blinded message mix mix sign 
message consists key symmetric cipher bits forming redundancy 
step mix signs message special key pair valid certain time slice 
rsa new key pair time slice modulus public private exponents 
step user message veri es signature 
ticket linkable 
step user repeats steps mix 
step user generates message channel building message data message assuming mixes 
user concatenates ticket gets mix data wants send 
encrypts message 
uses public key mix order encrypt rst part message 
rest message uses symmetric key included ticket 
concatenates ticket issued mix generated message mix encrypts message way public key mix forth encrypts ticket issued rst mix 
step user sends message generated step 
mix uses prime numbers modulus asymmetric encryption decryption message signing checking tickets additional overhead verifying tickets 
ticket exactly ts rst asymmetric encrypted part message step 
mix decrypts message veri es ticket step decrypting message product secret decryption key public signature test key 
furthermore mix extracts symmetric key channel veri es ticket redundancy 
explained ticket consists symmetric key redundancy 
acceptable level security bits needed store ticket 
rsa size ticket increase bits 
ticket unused space bits 
possible store data free space known ticket requested 
disadvantage ticket message 
free space ticket store part message addressed mix 
channel building message smaller need bits mix mix 
order optimization procedure follows steps modi ed tickets requested sequentially starting mix 
user generates ticket step 
chooses oliver berthold hannes federrath stefan symmetric key computes redundancy lls free space rst bytes generated message 
know remaining message time generate ticket ngerprint message redundancy 
mix calculate ngerprint step verify integrity received message 
step step done parallel send large message requesting tickets short ones 
increase ciency especially authentication step done ones 
duration time slice long overhead ticket method won high ll need ticket mix channel 
expensive factor user directly get tickets mix encrypted channel 
tickets useful order add dimension payment system anonymity system 
implemented 
measurement anonymity level attacker observes network tra able reduce number possible senders anonymity group message 
extreme may able identify user sends message 
called intersection attack 
intersection attack prevented anonymity group remains constant 
group active users changed linked messages user member intersection groups users 
dummy tra intersection attacks di cult completely prevent 
active users permanently send dummy messages received message possibly come user 
clear prevent attack especially consider global observer 
anonymity level depends number active users system 
need mechanism heuristic informs user level protection requests contents internet 
design inform user current level anonymity 
user decide communication relation anonymity level user de ned threshold number active users system 
believe important user aware degree privacy 
system reliable trustworthy user 
mix publish periodically 
number active users 
logout time user leaves group 
client jap receives information info service computes time rst linkable message current session sent 
jap web mixes system anonymous unobservable internet access computes users active time published logout times 
users represent anonymity group possible senders messages 
new connection established jap stores time number active users 
time mixes publishes logout times jap decreases size anonymity group detected relevant logout 
logout relevant corresponding logout earlier stored starting time 
user alerted anonymity group small 
information number active users logout times digitally signed mix 
impossible attacker manipulate order fake bigger anonymity group 
client assume lowest published number active users highest number true order prevent attacks mix 
impossible prevent intersection attack give advice users mitigate ect intersection attacks success attack reduced linkable events cookies request personal web pages usage pseudonyms chat services 
attacker uses active attacks increase chance identify sender 
order tries exclude particular users group possible senders blocking messages destroying network cable sending messages appear users manipulating messages 
possible detect active attacks 
protection dos attacks section described procedure detecting active attacks discuss detected 
attack ignored ected message simply deleted attacker partly reached goal 
solution delete ected messages close open channels 
consequence easy start dos attack attacker send broken message order impair 
attacker unable break anonymity simply prevent usage mix cascade 
better solution give honest user mix chance prove sent correct messages 
error occurs mix prove worked correctly 
attacking mix consequently identi ed 
mixes worked correctly user sent broken message attacker 
order prove correctness participant including mixes detect network errors attacks output digitally signed 
oliver berthold hannes federrath stefan detailed description procedure mix verify signature requests output previous mix 
get correct data certain period time timeout signal signature error 
case clear attacker possible candidates mix previous mix network mixes 
mix detects error publishes decrypted message including error 
able encrypt message public key mix 
result identical received message mix proved decrypted received message correctly message contains error 
error occurred caused previous mix 
preceeding mixes obliged contribute uncovering procedure error 
mix provide input output correlation certain message verify mix decrypted message correctly see 

error uncovering procedure immediately results 
means mixes attackers 

successful mix publish decrypted message mix 
mixes prove correctly sender broken message attacker 
able generate message contains error detected mix faulty mixes excluded proven working correctly 
user produces errors excluded group users 
user carry dos attack long time periodically changes identity 
possible works corrupt certi cate authority 
period time trust certi cate authority longer 
remains disadvantage trustworthy mix uncover decryption 
mixes attackers determine sender receiver message 
attacker loses mix time uncovering procedure performed 
mixes trustworthy uncovering procedure won break anonymity 
user cheated need protect user reason message confuse system 
web mixes system anonymous unobservable internet access 
mix cheated rst trustworthy mix cascade gets faulty message starts uncovering procedure 
procedure continues attacking mix reached 
second trustworthy mix attacking mix attacker able detect sender message trustworthy mix perform invalid uncovering procedure 
second trustworthy mix receiver message detectable 
attacker may get correct message second trustworthy mix protects correlation sender receiver 
described uncovering procedure useful asymmetric encrypted mix messages verify transmissions channels 
channel redundancy mix message digest data sent sent 
additionally mix store transmitted data messages 
error occurs able prove decrypted data channel correctly symmetric key included corresponding channel building message 
speci feature channel data reach receiver small pieces 
veri cation channel done attack mayhave successful 
possible mixes trustworthy 
case attacker lose attacking mix time attacks channel 
acceptable strong attacker anonymity normal user reduced uncovering procedure performed 
design issues general main focus development process usability system 
includes aspects 
firstly try handling client jap easy possible people able 
includes installation con guration design user interface 
second aspect performance especially throughput delay time anonymous network access 
client jap development requirements executable di erent hardware operating systems including windows nt linux apple macintosh 
client jap easy install user 
possible internet cd rom special knowledge 
oliver berthold hannes federrath stefan con guration easy possible 
users extensive knowledge security cryptography able con gure system 
users protected thinking anonymous gured client 
anonymous network access possible user rewall proxy 
user interface show explain user current level anonymity 
easy anonymous non anonymous network access 
moment java programming language 
java capability write run 
possible develop special versions operating system 
versions provide better performance lesser resources needed 
suitable integration look feel target operating system increase user friendliness 
execution jap necessary runtime equivalent gui library swing version cryptographic library presently crypt installed 
libraries completely written java easily distribute client 
les needed jap code pictures help les included single archive jar le 
le copied target system directly executed 
order con guration process easy possible download con guration data internet 
course secure infrastructure 
furthermore users gain access internet isp 
provider force surfer special web proxy allow direct internet connections 
order give people chance surf anonymously possible connect rst mix web proxy isp 
data embedded protocol 
fig 
shows meter rst attempt give user feedback current level protection 
area research 
mix servers main point concerning development mixes performance great uence usability system 
focus easy administration maintenance 
contrast jap user administrators deeper knowledge computers possibly security 
mixes implemented programming language 
java due performance reasons 
standard web mixes system anonymous unobservable internet access screenshot available operating systems 
di erences result system functions network input output programming graphical user interface 
mixes console applications gui unproblematic 
need system calls 
main tasks mixes cryptographic algorithmic operations 
order port mixes new target operating system modules functions adapted 
goal support important capable operating systems instance linux solaris aix windows nt 
administration realized special network interface implemented mixes 
possible separate mixes administration tools physically logically 
presently thinking gui administration purposes written java 
agarwal christoph federrath mary weiss anonymous referees useful hints suggestions 
oliver berthold hannes federrath stefan 
anonymizer 
www anonymizer com 
michael reiter rubin crowds anonymity web transactions 
acm transactions information system security november 

onion routing 
www onion routing net 
freedom network 
www freedom net 
oliver berthold hannes federrath project anonymity unobservability internet 
workshop freedom privacy design conference freedom privacy toronto canada april 

david chaum untraceable electronic mail return addresses digital pseudonyms 
communication acm 

david chaum blind signature system 
crypto plenum press new york 

andreas birgit michael waidner isdn mixes untraceable communication small bandwidth overhead 
th ifip international conference information security ifip sec elsevier amsterdam 
