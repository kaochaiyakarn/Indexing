helping users program personal agents terveen la murray bell laboratories north carolina statue university terveen research att com eos ncsu edu software agents computer programs act behalf users perform routine tedious timeconsuming tasks 
useful individual user agent personalized goals habits preferences 
created enduser programming system easy users state rules agents follow 
main advance previous approaches system automatically determines conflicts rules guides users resolving conflicts 
time user system collaborate developing set rules embody user preferences handling wide variety situations 
keywords agents user programming intelligent systems software agents focus interest popular press hot research topic humancomputer interaction artificial intelligence distributed computing 
hci research agents distinguished user centered approach 
focus agents empower users effectively vast rich changing world electronic communication information 
major promises agents personal assistance user agent serves individual goals preferences 
means agent acquire appropriate knowledge user 
advocates user programming human computer collaboration approach problem 
created system called agent manager embodies approach 
users state rules domain specific graphical interface 
system analyzes rules potential interactions visually presents interactions finds guides user resolving 
time user system collaborate evolve set rules embody user goals preferences handling wide variety situations 
presenting framework agents lets identify type knowledge personal agent requires 
analyze existing approaches agent personalization showing user programming approach appropriate motivating unique features system 
describe agent manager system explain representation reasoning components illustrate helps users 
conclude discussing system development process current status plans 
framework personal agents notion agent notoriously vague 
expect resolve problem characterize functionality ascribe agents 
clarify knowledge need perform tasks especially knowledge required personal agent 
agent needs knowledge task domains operate messaging electronic banking personal financial services 
knowledge specific particular user supplied application developer 
fundamental ontology vocabulary usually consists objects attributes actions 
messaging example objects include messages folders persons groups actions include moving message folder forwarding message user replying sender 
objects actions general useful domains notification actions popping window computer screen placing call paging 
personal agent agent needs knowledge owner preferences habits goals 
type knowledge expressed rules form conditions true take actions 
examples include 
messaging get message boss subject urgent business hours notify calling home number 
banking balance checking account falls balance savings account transfer savings checking 
price xyz stock falls buy shares 
important function agent communicate behalf owner 
includes notifying owner specified conditions occur delivering messages users responding calls messages users 
specify dialogue carried appropriate set abstractions required 
experience include presentation information presentation options form filling 
ideally dialogue abstractions realizable different devices pcs telephones 
focus rules knowledge intend integrate letting users specify device independent dialogues 
summarizes framework personal agents 
approaches agent personalization research community explored major ways agent may acquire knowledge needs user programming learning programming demonstration 
user programming eup malone colleagues began information lens culminated oval foundational research user programming rules 
popularized basic method expressing rules 
user indicates type object rule applies message 
user describes conditions rule filling form contains field attribute object messages attributes include sender subject recipient user specifies actions rule selecting list actions apply type object message moved copied forwarded deleted subsequent systems built ideas introduced malone colleagues including commercial email filtering system laboratories 
framework personal agents obvious advantage approach easy implement 
number disadvantages users recognize opportunity state rule users express rule textual graphical language system users maintain rules time habits change 
learning maes colleagues explored learning approach acquiring agent rules argue overcomes problems user programming 
user charge stating rules agent learns rules watching user behavior detecting patterns regularities 
agent records user activity terms pairs 
example situation email message action way user processed message 
system predicts new situation handled finding similar previously seen situation 
seeing examples system able predictions uses suggestions user 
user may instruct agent act confidence predictions exceeds specified threshold 
domain kb rules dialogues agent owner programs notifies suggests filters interacts users messages dialogue dbs agents apps basic learning model shortcomings agent slow learning curve offer advice seen quite examples agent offer assistance truly new situations seen examples 
remedy shortcomings model extended allow agents collaborate agents 
agent ask agents advice handle particular situation 
approach raises interesting issues agents interact agents agent learn trust suggestions agents 
programming demonstration pbd programming demonstration pbd user puts system record mode continues operate system ordinary way system records actions executable program 
prototypical pbd systems operate domains natural graphical representation 
example 
kids create simulations characters move dimensional world 
create rules graphical editor depict changes state draw configuration world rule applied 
system generalizes concrete objects demonstration create rule replacing particular character character certain type replacing absolute locations relative changes location 
kids want write rules mention properties directly shown graphical simulation hunger location character simple user programming tools 
pbd combines elements user programming users concrete elements concepts learning generalization concrete examples general rules 
user programming appropriate improvements needs despite criticisms eup approaches retain form 
worth explicit conditions appropriate users particular rules mind able express 
example may want messages boss put certain folder am vacation may want vacation message sent response incoming messages 
second rule shows learning appropriate 
want rule take effect immediately time collect examples 
second definition situation dates vacation changes vacation stable rule learn 
rules user interested may define behavior personal assistant user may engage behavior 
notifications example may want paged get email message boss subject urgent certainly paged past 
case base examples learning approach 
clear evidence designed interfaces enable users program 
bonnie nardi case small matter programming 
identified domain specificity key giving examples domain specific notations people mastered computer software spreadsheets baseball 
nardi pointed spreadsheets successful allow users express rich domain knowledge spreadsheet framework encapsulates programming knowledge explicit conventional programming language 
knowledge local single cell 
iterations expressed concretely sweeping region cells operated writing loop 
spreadsheet automatically manages cell dependencies set formulas sophisticated control structure user program 
commercial email filtering systems offer existence proof feasibility user programming rules 
conclude user programming play important role personalizing software agents 
nardi studies spreadsheets show outstanding problem 
stating single rule fairly easy roughly analogous stating formula spreadsheet cell 
managing interaction rules harder analogous control flow issues spreadsheet takes care users 
task takes type programming expertise assume users 
system agent manager takes task 
users create rules automatically detects interactions existing rules graphically presents interactions potential resolutions collaborates users create effective set rules personal agents 
agent manager collaborative construction agent rules agent manager system currently works domain message processing 
primary user interface standard rule editor 
users specify rule conditions restricting values message type sender recipient subject date time arrival defining set messages rule applies 
shows rule applies email messages julia hirschberg subject field contains word important 
users select rule actions choosing list containing items move message forward message notify paging notify popup alert rule contains single action moves messages folder named management 
second editor lets user specify types conditions arrival date time messages 
users may specify messages arrive particular interval september september 
users may specify intervals november march november september 
second users specify messages arrive particular period june july august saturday sunday monday month working day month 
expressive editor specifying date time knowledge know 
understand agent manager assists users describe representation reasoning technology uses 
representation rules representation rules enable functions determine action may apply context specified set messages certain actions determine rule subsumes set objects rule applies superset set objects second rule applies determine rules intersect set objects rule applies intersects set objects second rule applies 
represent rules version classic enhanced alex borgida charles isbell 
classic description logic permits users create structured descriptions sets objects known concepts individual objects 
standard knowledge representation object oriented language users may state hierarchical relationships concepts key service classic provides determine subsumption relationships automatically analyzing concept descriptions 
determining subsumption relationships key requirements 
represent conditions rules classic concepts classic automatically maintains rule hierarchy 
example conditions rule edited represented concept call messagetype email sender julia hirschberg subject contains important simple examples concepts subsume include concepts formed subset conjuncts messagetype email sender julia hirschberg 
object hierarchy messagetype message subsumes addition semantics substrings concept subject contains port subsumes classic determines intersection concepts 
useful experience shown users state simple general rules categorize messages single attribute sender julia hirschberg subject contains important 
classic determine rules intersect 
case intersection simply conjunction concepts 
general classic may combine parts concepts determine intersection 
example consider descriptions message arrival times november november 
classic determines intersection november midnight november midnight november 
rule conditions rule actions represented rule editor classic concepts 
actions described terms basic ai planning model 
action applies particular state world represented list facts action may change state world 
action defined terms preconditions facts true action applied add list facts added action delete list facts deleted action 
example action defined preconditions add action occurs plan action deletes precondition defeats simply conflicts 
ai planning research explores plan synthesis creating plan transforms specified initial specified final state recognition inferring agent plan observing actions hard computational problems 
case user constructs plan actions rule agent manager check plan validity simpler computational task 
agent manager assistance describe assistance agent manager offers 
assistance offered agent manager notices action rule apply 
clearly occur users edit rule 
addition rule added hierarchy agent manager inherit actions general rules specific rules 
consider rules resulting intersection new rule sibling rules 
circumstances result new plans composed validity tested 
task verifying plan validity centers notion current state 
conditions rule define initial state class messages actions apply action transforms state adding deleting facts 
example initial state rule messagetype email sender julia hirschberg subject contains important special tag indicating message disposed deleted moved folder 
actions precondition message exists fact delete list move message 
move message added message exists removed current state 
actions added rule move message action system determine apply 
system update current state action added deleted inserted conditions changed 
action added plan checked action applicability 
changing conditions redefines initial state validity plan 
action inserted deleted middle plan plan checked 
checking insertion deletion point require keeping previous states result complex code 
recomputing validity plans takes noticeable time chosen route 
action apply system computes explanation 
checks prior actions plan delete preconditions 
looks preconditions satisfied actions satisfy 
system visually indicates actions apply user may access associated explanations time 
typical explanation play greeting apply current context preconditions satisfied 
unsatisfied preconditions enabled action pickup call may enable play greeting changing message description inserting enabling actions prior 
mentioned rule added hierarchy agent manager inherits plans general rules specific rules 
examines rules resulting intersection new rule sibling rules 
cases result new plans composed validity tested 
example suppose user just defined rule conditions actions messagetype email sender julia hirschberg move message julia suppose existing rule conditions actions messagetype email subject contains important move message important 
system determines conditions rules intersect actions conflict message moved folder formally move message deletes message exists current state action apply 
offers suggestions resolving conflict 
general suggestion remove actions 
case specific piece knowledge copying message may acceptable substitute moving replacing moves copy suggested 
shows agent manager presents rule interaction potential solutions 
summarizes reasoning involved rule new defined 
plan parent rule parent inherited new added new plan 
new plan inherited child child inserted proper position local plan child general plan parent 
intersection inter new sibling rule sibling formed appropriate plans inherited inter 
note user aware inter action plan defeated 
composed plans checked validity actions rule plan defeated display rule updated reflect fact 
rule interaction presentation discussion agent manager evolved series stages developed pc 
gathered user input stage helped moving 
created basic concepts gather feedback interested parties business organizations 
built implementation visual basic interface language implementation classic 
collected detailed user feedback stage development 
surveys user needs message processing structured demonstrations agent manager combined interviews brainstorming sessions 
added additional expressiveness stating rule conditions improved display rule interactions various enhancements simplified functionality judged useful 
current implementation uses common lisp windows enhanced version classic developed alex borgida charles isbell 
parent reasoning rule defined new sibling child inter agent manager designed general user programming tool rule agents 
course deployed particular agent 
integrating messaging agents 
email filtering agent multimedia messaging agent currently development bob klein exploring additional avenues research 
apply agent manager domain messaging verify generality electronic banking choice 
second plan extend agent manager allow users express dialogue knowledge rules agents communicate flexibly owners users 
build experience device independent interaction design 
third exploring mark jones integrate user programming rule approach machine learning techniques 
interesting issue enable rules stated users taken suggestions ml programs modifications generated ml programs may re expressed rules 
acknowledgments alex borgida charles isbell extensions classic 
julia hirschberg henry kautz mark jones bob klein bob hall amir man mark productive conversations agents 

borgida brachman resnick classic structural data model objects sigmod 

brachman mcguinness resnick borgida living classic language formal aspects semantic networks sowa ed morgan kaufmann los altos ca 

cypher eager programming repetitive tasks example chi pp 


cypher ed 
watch programming demonstration 
mit press cambridge ma 

cypher smith user programming simulation 
chi pp 


fikes nilsson strips new approach application theorem proving problem solving artificial intelligence 

fischer stahl sumner embedding computer critics contexts design interchi 

isbell immediate identification important information submission chi 

lashkari metral maes collaborative interface agents aaai pp 


maes agents reduce information overload cacm july 

malone lai fry experiments oval radically tailorable tool cooperative acm transactions information systems april 

nardi small matter programming 
mit press cambridge ma 

smith cypher spohrer programming agents programming language cacm july 

terveen overview humancomputer collaboration knowledge systems april june 

terveen tool rapid creation interactive services interact pp 


white telescript technology foundation electronic marketplace 
general magic white 

jennings intelligent agents theory practice knowledge engineering review 
