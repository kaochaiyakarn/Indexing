coupling cases class models means validation verification requirements specifications georg sters hans werner mario winter gmbh hagen germany university hagen dept cs hagen germany applications especially business domain requirements specification mainly deals cases class models 
unfortunately models different modeling techniques aim different levels abstraction serious consistency completeness problems induced 
overcome deficiencies refine activity graphs meet needs suitable modeling element case behavior 
refinement particular supports proper coupling cases activity graphs class model 
granularity semantics approach allow seamless traceable transition cases class model verification class model case model 
validation case model parts class model supported 
experiences applications turned investment specification validation verification pays system acceptance testing significantly improves quality final product 
keywords cases activity graphs class models requirements engineering uml validation verification description functional structural behavioral system essentials form central components serious requirements specification 
uml example functionality system built expressed terms cases structural aspects captured class model 
modeling system behavior state machines widely 
applications especially business domain requirements specification concentrates system functionality structural data essentials correspondence requests mario winter hagen 
inf 
iii iz 
hagen germany 
email mario winter hagen de behavioral aspects modeled state machines secondary importance 
elicitation system functionality specification help cases usually form starting point development process 
furthermore validation entire requirements specification heavily relies specification system functionality 
class model hand plays important role development process serves central basis main development activities 
order capture system functionality structural aspects requirements specification deals cases class models 
consider domain class models sense jacobson 
domain class model comprises important types objects represent things exist events occur context system works 
deals requirements engineering prefer shorter term class model domain class model 
cases class models different modeling techniques aim different levels abstraction serious consistency completeness problems induced 
propose method proper coupling uml cases class models 
class model provides finer granularity rigorous semantics compared case model start refinement cases achieve precise specifications 
tailor activity graphs suitable modeling case behavior 
granularity semantics refinement allow establish seamless traceable transition cases activity graphs class model 
approach supports consistency completeness checks verification class model case model 
verification ensures class model able cope cases precise instances classes class model able execute cases 
furthermore activity graph coupling cases class models means validation verification requirements specifications specification cases enriched user centered views scenarios domain object constellations yielding basis validation case model 
consequence class model verified validated case model 
approach comprises definition quantitative measures controlling validation verification efforts 
organized follows 
section discusses related 
section deals refinement activity graphs suitable modeling cases introduces class scopes couple cases refined activity graphs class models 
section explain concepts exploited domain modeling validation case model 
section devoted analysis verification class model case model 
section sketches tool support section reports experiences applications approach 
section concludes 
related prerequisite coupling cases class models refinement cases order match granularity preciseness class models 
pohl case model cover types information system internal information focusing system interaction information concentrating direct interaction system environment contextual information representing system environment 
exist approaches precise specification cases known literature 
interaction diagrams widely specification control flow oriented behavior cases 
interaction diagram captures interplay concrete objects course specific sequence actions scenario cf 

overcome limitation representing specific sequence actions attempts specify entire case set interaction diagrams 
unfortunately approaches successful pointed 
define case hierarchy called episode structures 
lowest level episode described interaction diagram 
suitable modeling case behavior episodes hierarchically composed higher episode structures supplied control flow constructs sequence choice repetition 
cases related single actor combined synthesized usage model 
model abstraction mechanism conceals detailed protocol interactions deals interaction information 
single actor view approach suitable specification human computer computer computer interfaces 
apply model derivation test cases statistical usage testing 
activity graphs considered better choice modeling control flow oriented behavior cases 
activity graph variation state machine states represent performance actions transitions triggered completion actions 
unfortunately semantics definition metamodel activity graphs progress desirable properties missing 
activity graph focuses single modeling element operation class entire system model behavior interacting modeling element particular cope interaction information 
furthermore activity graph able capture associations actors include extend relationships cases 
proposes hierarchical composition cases uses term scenario case yielding integrated model external system behavior 
single case specified state chart exactly initial terminal state 
state chart basically models control flow oriented behavior case bears certain similarities activity graphs 
case specification state charts exhibits deficiencies similar activity graphs cope actors include extend relationships 
concerning coupling functional structural uml specifications interaction diagrams play prominent role 
concrete instance case concrete instances classes covered interaction diagram fails universal comprehensive means couple functional structural specifications cases class models 
attempt coupling functional structural aspects object flow states subclass uml metaclass state activity graphs 
object flow states represent participation objects flow control 
specification case behavior linked classes concrete objects pointed 
summarizing knowledge exist compelling approach coupling functional structural aspects specified cases class models 
comprehensive specification control flow oriented behavior cases complies abstraction level class models missing 
control flow oriented nature take activity graphs starting point refine match needs appropriate case specification attack coupling problem 
sters 
winter coupling cases class models refine activity graphs model case behavior introduce class scopes couple refined activity graphs class model 

actors cases activity graphs subsection briefly sketch relevant uml modeling elements 
actors uml actors represent global business context proposed system fit 
actors characterize roles played external objects interact system part coherent unit case 
actor specified unique global name informal description characterizing particular role problem domain 
cases case describes coherent unit task carried actors help system 
case characterized unique global name set actors involved unit description actions performed pre post condition specifying assumptions outcome case 
support modularity avoid redundant modeling cases may related generalization include extend associations 
include relationship case case indicates instance case contain behavior specified behavior included location defined 
extend relationship case case indicates instance case may augmented subject specific conditions specified extension behavior specified behavior inserted location defined extension point referenced extend relationship 
actions activity graphs actions form basic components activity graphs 
action characterized name unique activity graph informal description functionality pre post condition specifying assumptions result action 
activity graph characterized non empty set vertices actions set directed edges transitions edge annotated guard control flow follows edge guard holds execution action start action paths vertices activity graph exist non empty set final actions sf customer withdraw money include atm deposit money include supply money transfer funds identification include fig 

atm case diagram operator uml start action indicated transition initial state final action indicated transition final state 
pre postconditions cases actions similar contracts object oriented programming precondition satisfied system guarantees realize postcondition 
formulated consistent prose refined formalized object constraint language ocl 
common case terminology case describes set uml scenarios case instances delineate concrete executions corresponding unit 
define scenario sequence actions path activity graph starts start action guided post conditions actions edge guards transitions ends final action 
scenario visualized uml sequence diagram 
running example explain approach automatic teller machine atm case study 
identify actors customer operator cases identification withdraw money deposit money transfer funds supply money 
fig 
shows case diagram atm 
fig 
provides textual description identification case 
right part fig 
illustrates scenario case withdraw money 

modeling case behavior activity graphs order activity graphs modeling case behavior refine compliance uml extension mechanism 
information types extend activity graphs capture information types proposed pohl 
cover contextual interaction information introduce stereotypes contextual action interaction explained second row tab 

note contextual action allows capturing coupling cases class models means validation verification requirements specifications parts business process supported system 
system internal information covered called class scopes interaction sequences discuss subsections 
actors carry associations actors cases activity graphs 
uml provide associations actors actions stereotype actor action explained third row tab 

stereotyped actor action refers anonymous instance actor connected actions 
connections show actor executes contextual action actor triggers involved interaction 
note exist situations set actions partitioned respect actors mechanism proposed uml applicable 
example action identification fig 
associated customer actor actor 
include extend macro action stereotype row tab 
reflects include extend relationships cases activity graphs 
cases ag bg corresponding activity graphs 
include relationship cases denotes case part called main cases 
get include ag contains macro action state calling bg 
extend relationship applied case may augmented additional behavior defined case 
extend provides parts behavior extension points listed extend association 
notion precise require behavior include relationships cases dedicated extension points extendible extension point reflected case identification model atm description card inserted atm card reader reads code checks pin card atm online done bank host atm algorithm 
pin wrongly entered times atm marks card locked atm panel shows menu atm waits customer selection 
actors customer bank host pre condition ready panel shows logo post condition card locked card ok pin ok customer identified panel shows menu card unreadable card retracted ready panel shows logo pin times wrong card locked card ejected ready panel shows logo identification fig 

textual description case identification macro action state bg 
altogether get extend set ep extension points ag contains vertices ii vertex ag macro action iii macro action reflects extension point ep exists activity graph called macro action ag 
generalization transferring generalization relationship cases activity graphs easy task see 
case semantics definition generalization activity graphs compliance state machine subtyping policy rationale subtype preserves pre post condition relationships applying events operations type 
preserving pre postconditions guarantees substitutability principle 
note extend relationship powerful generalization allows variation predefined points extension points macro actions 
stereotype description visualization contextual action interaction actor action macro action stereotyped contextual action represents execution action performed actor help system 
stereotyped interaction represents action supported carried system 
stereotyped actor action depicts actor connected actions 
stereotyped macro action calls subgraph reflects include extend association 
contextual action table 
proposed stereotypes activity graphs interaction macro action summarizing approach action activity graph marked stereotype contextual action interaction macro action 
macro action stereotype reflects include extend relationships activity graphs stereotype actor action allows connect actors actions 
right column tab 
shows graphical symbols stereotypes involved 
example activity diagram package withdraw money description depicted left part fig 
sters 
winter customer customer take card dispense money withdraw money identification get selection get amount check amount write card eject card retract card take money refine fig 

case withdraw money activity diagram scenario successful withdrawal refines case withdraw money 
simplicity reasons edge guards omitted 
initial state final states visualized bullet resp 
framed bullets 
note start action macro action calls executes activity graph case identification 
start action simultaneously final action scenario case withdraw money unsuccessful identification process card unreadable wrong pin entered 
right part fig 
illustrates sequence diagram scenario successful withdrawal case withdraw money 
textual descriptions action check amount outgoing edges provided fig 


class scopes previous subsection refined activity graphs modeling case behavior 
concept class scope couples refined activity graphs class models 
case determine set classes involved execution classes instances created retrieved activated updated deleted 
set classes called class scope case 
class scope basically derived case description preand post condition obviously comply class model 
concept class scope somewhat similar visibility scope induced signatures operations visualized uml collaboration 
instanceof atm paul customer take money identification get selection get amount check amount write card eject card take card dispense money analogously derive class scope action activity graph set classes instances involved execution action 
class class scope appear different classifier roles different actions activity graphs 
improve readability abstain distinguishing classes classifier roles 
balance activity graphs class model interaction activity graph operation exists accomplishes interaction class interaction check amount activity graph withdraw money description amount checked atm online done state balance account offline rules 
actors bank host pre condition amount read transaction canceled post condition amount ok transaction canceled amount ok transaction canceled check amount transition check amount write card activity graph withdraw money guard amount ok transaction canceled check amount write card transition check amount get amount activity graph withdraw money guard amount ok transaction canceled check amount get amount fig 

textual descriptions interaction check amount coupling cases class models means validation verification requirements specifications card number 
state 
panel 
withdrawal 
model 
operation belongs class element class scope interaction 
call root class root operation interaction 
example fig 
sketches atm class diagram 
classes account cash card represent core business objects class transaction subclasses withdrawal deposit reflect atm 
identification check pin printer 
transaction amount schedule state commit rollback offline 
deposit 
fig 

atm class diagram account number balance type state open close deposit withdraw lock 
state 
dispenser cash dispense 

unlock lock 

cash trace trace participant participant transaction fig 

class scope case identification interaction check pin identification card transaction check pin participant participant card participant participant participant transactions 
classes stand hardware components 
fig 
illustrates class scope case identification 
example visualization class scope action fig 
depicts interaction check pin class scope 
root class transaction partially expanded expose root operation 
sters 
winter domain modeling validation jacobson states purpose domain modeling understand describe important classes context domain 
domain classes glossary terms developing case analysis class models 
method propose domain modeling validation analysis verification section called scores refined case model class model class scopes connecting models 
scores incorporates definition quantitative measures control validation verification section process 
tab 
exhibits relations main aspects external internal observable behavior structure main activities elicitation specification validation 
section focus validation requirements elicitation specification activities sketched 
aspect activity external observable behavior structure internal observable behavior elicitation specification cases activity graphs domain classes attributes associations class scopes operations validation business scenarios object constellations responsibilities table 
domain modeling aspects related activities 
elicitation specification jacobson analysts domain experts investigate draft relevant business scenarios identify actors 
information contributes description cases 
scores cases refined specifying actions 
actions basic control flow information derived narrative descriptions business tasks composed activity diagram 
task part main tasks modeled case captured macro action activity diagrams main tasks 
due lessons learned projects see section recommend incremental iterative process specification cases relies basic steps 
step describe regular course actions sequence diagrams 
alternative courses actions identified 
third step derive activity graph actions determined previous steps 
fourth step checks node edge coverage achieved courses actions hand 
long coverage criteria fulfilled go back step resp 
step proceed searching courses actions 
mainstream oo literature data requirements derived key domain concepts 
analysts entityrelationship skeleton class model 
instance class mentioned description action class added class scope responsibilities determined initial set corresponding operations attributes associations defined 
interaction root class root operation selected class scope 

validation requirements specifications usually validated concise source document meet users vague mental images 
analysts testers domain experts users stakeholders participating validation process 
joint venture stakeholders prerequisite successful validation process assures specifications formulated language understandable parties involved 
validation techniques applicable requirements specifications inspections walkthroughs prototyping 
focus inspections walkthroughs proved effective means document validation 
early seventies combinations variations refinements original inspection techniques proposed 
fagan inspections active design reviews phased inspections collection seminal papers see 
inspections check certain properties adherence standards typical errors prevalent past 
scores applies level inspection process comprises different techniques assembles teams problem oriented manner fig 

level analysts testers pre inspect case model domain class model detect violations uml syntax scores modeling rules 
share opinion business scenarios appropriate validation means construct business scenarios case pre condition activity graph 
scenario initial object constellation assembled class scope start action 
better comprehension analysts build user centered views scenarios object constellations 
incorporate example domain specific see fig 
called real world scenes captured multimedia sequences 
second level series walks business scenarios jointly conducted parties involved 
domain experts users check initial domain object constellation textual pre condition scenario ensure necessary information hand 
course walkthroughs coupling cases class models means validation verification requirements specifications level level stakeholder activities artifacts tester analyst user domain expert tester analyst pre inspections preparation walkthroughs business scenarios domain experts users focus textual descriptions actions check correctness related object constellations 
validating object constellations class model partly validated 
walkthroughs driven business scenarios reveal ill formed object constellations wrong missing actions transitions assure proper meaning action descriptions 
analysts testers protocol detected errors order correct eventually re validate specifications 
users domain experts exhibit missing scenarios incorporated case model validated 
sample items validation checklist shown fig 

checklists domain dependent tailored specific development organization project 
validation verification program testing face lot similar problems 
difficult problem common knowing 
called coverage criteria program testing proposed aid determine right point time 
validation verification requirements specifications rely similar quantitative measures activities better planned controlled 
structural similarity activity graphs control flow graphs programs coverage criteria program testing carried validation case models 
example vertex edge coverage canonically applied activity graphs 
suggest validation activity graph vertex coverage achieved vertex encountered object constellations fig 

scores level validation process class model business scenarios case model test protocols walkthrough 
cases representing critical tasks edge coverage achieved edges activity graph traversed 
special attention paid macro action calls complex activity graph 
situation different scenarios called activity graph considered walkthroughs 
example consider activity diagram describing case withdraw money cf 
fig 

fig 
depicts user centered views scenarios validated users domain experts 
walking scenario successful withdrawal fig 
covers classes card panel account withdrawal dispenser cash associations 
scenario achieves vertex coverage edge coverage activity diagram 
fig 
covered vertices completeness business scenarios captured cases 
gaps activity graph missing action states transitions 
pre post condition defined case action 
affected classes contained class scope action 
correctness pre post condition case capture legal business situation 
specification case comply corresponding business rule 
expected outcome scenario reflected correctly post condition final action 
consistency different scenarios exist initial object constellation 
post condition action imply disjunction guards outgoing edges 
fig 

sample items validation checklist sters 
winter domain objects withdraw deposit transfer cancel actors actions domain objects get selection get amount check amount write card eject card take card dispense money take money edges indicated bold lines 
scenario withdrawal failed amount high fig 
achieves vertex coverage edge coverage fig 

walk scenario withdrawal failed identification failed fig 
stops final action start action fig 

walkthrough achieves vertex coverage actors actions domain objects fig 

user centered views scenarios case withdraw money vertices visited 
control flow edges traversed edge coverage achieved 
scenarios jointly achieve vertex coverage edge coverage activity diagram 
analysis actors actions identification identification identification withdraw deposit transfer cancel fig 

coverage activity diagram withdraw money achieved different scenarios get selection get amount check amount write card eject card take card domain objects withdraw deposit transfer cancel actors card card reader panel selection panel numeric withdrawal bank interface account dispenser cash customer bank host actions failed action macro action domain modeling validation performed users assistance 
requirements specifications described way users understand 
developers point view specifications detailed precise 
analysis scores supports refinement case model class model verification activities 
tab 
exhibits relations main aspects external internal observable behavior structure main activities refinement verification 
coupling cases class models means validation verification requirements specifications aspect activity refinement verification external observable behavior structure level level internal observable behavior stakeholder activities artifacts tester analyst tester analyst cases activity graphs classes attributes associations class scopes operations verification scenarios object constellations episodes table 
analysis aspects related activities detailed inspections walkthroughs operation specifications fig 

scores level verification process 
refinement class model delivered domain modeling comprises important classes domain responsibilities root operations initial attributes relationships 
incremental iterative process analysts explore activity graphs detail order extract modeling elements involved execution corresponding cases 
interaction case responsibilities classes class scope root operation examined 
mapping responsibilities class corresponding operations specifying behavior root operation precisely sequence diagrams usually uncovers operations missing attributes associations dependencies objects states 
addition classes revisited determine control entity boundary classes extract common behavior generalization classes find aggregations decompose complex classes appropriate part classes 
packages reexamined order find appropriate decomposition model 
resulting analysis class model viewed cut design model model 
class model test protocols business scenarios interaction sequences case model object constellations 
verification refinement process reached sufficiently stable state followed verification analysis class model case model 
validation verification requirements specifications bear certain similarities works substantially detailed formal level 
users domain experts general able contribute verification activities analysts testers remain stakeholders involved 
similar validation verification activities performed level process fig 

level verification starts detailed inspections formal parts case model pre post conditions edge guards activity graphs 
class model checked detect incomplete inconsistent ambiguous specifications missing items 
interaction specification activity graphs examined concerning compliance class scope specification root operation 
detailed inspections completed case model verified validated see section 
class model consistent unambiguous 
remains check correct complete respect case model 
second verification level confirmed class model able cope interaction activity graphs 
analysts testers walk scenarios re validation investigate thread executions operations class model triggered interaction 
obviously operation invoked thread executions root operation 
serves entry point operations class model 
note initial final object constellation hand interaction re sters 
winter node coverage achieved activity graphs validation 
simulation thread executions class model prompted interaction called interaction sequence 
interaction sequences visualized uml sequence diagrams see fig 

interaction sequence depends context triggering interaction corresponding initial object constellation 
object constellation validated satisfies precondition root operation interaction sequence start 
course interaction sequence current object constellation changing 
error class model detected current object constellation meet pre condition operation performed 
interaction sequence completes successfully error encountered final object constellation satisfies post condition interaction root operation 
elements class model involved interaction sequence indicate class model overspecified case model incomplete 
sample items verification checklist depicted fig 

business scenarios re verification enriched interaction sequences called verification scenarios 
verification scenario regarded test case tests class model activity graph 
furthermore test scenarios system acceptance testing derived verification scenarios 
completeness class contained class scope 
interaction mapped root operation 
classes signature root operation contained class scope corresponding interaction 
correctness pre condition interaction imply pre condition root operation 
post condition root operation imply post condition interaction 
edge activity graph traversed scenario guard hold actual object constellation 
class scope macro action subset class scope referenced activity graph 
consistency interaction specifications compatible class scopes specifications root operations 
interaction concrete object constellation allow different interaction sequences 
operation root operation different interactions 
post condition non final interaction imply disjunction outgoing edge guards 
object constellation violate association multiplicity 
usage anomalies interaction sequences create delete write write delete read 
fig 

sample items verification checklist coverage criteria similar driving validation process guide verification efforts 
verification task controlled class operation coverage class operation touched interaction sequence 
cases representing critical tasks predicate coverage conditions achieved 
predicate coverage implies compounded pre post condition actions evaluated respect possible combination constituent clauses 
done varying inputs states objects corresponding scenarios 
example consider verification scenario successful line identification fig 
assumes unavailable 
fig 
exhibits interaction sequences 
lower triggered action check pin atm switches state offline activates operation defined class card manipulates attributes card instance 
case identification textual description see fig 
included case atm case diagram fig 

predicate coverage clauses post condition evaluated true suitable scenario 
precondition atomic evaluation needed 
tool support developed apply scores real world problems 
implemented top tool domain specific re method applications geographical information systems gis 
comprises modeling validation verification facilities 
modeling facilities editors offer functionality create modify lay cases class models fig 

graphical editors support visualization model instances different levels abstractions 
textual specifications maintained specification editors 
browsers support editing tracing nested textual specifications 
advanced browsing cross referencing facilities collect information relate selected instance 
example operations selected class class scope displayed list inheritance structures inherited operations marked ordered generalization classes 
support pre inspections checkers control syntax model compliance scores modeling rules uml semantics details see 
validation facilities validation session deals socalled validation unit group related cases 
tool compiles elements class model involved cases unit 
validation session analyst uses scenario recorder display object coupling cases class models means validation verification requirements specifications atm paul customer insert card identification scenarios card pin menu read card get pin check pin show menu refine refine fig 

verification scenario successful line identification interaction sequences constellations record business scenarios revealed defects 
fig 
depicts screen shot recorder displaying defective case action 
replay mode recorder animates scenario walk throughs 
tool computes coverage metrics immediate feedback validation progress 
verification facilities tool support verification similar validation different objectives works finer granularity 
example coverage metrics computed impacts changes automatically traced back elements model re verified 
fig 

class model editor screen shot read card test cases check pin test cases new transaction offline manipulate card card currently re implemented rational rose commercial case tool supporting uml notation 
scores modeling elements integrated rational rose uml extension mechanism scripts implement validation verification components 
fig 

scenario recorder screen shot sters 
winter experiences scores series applications different domains 
gis domain example developed retrieval system supporting naive users domain experts data capturing tool skilled persons supports collecting geometric informations feeding gis 
software house implemented web system planning collecting computing evaluating project related efforts costs 
re modeled reengineered web assignment system different departments german universities 
moment implementing billing software telecommunication services cable management system telecommunication infrastructures 
experiences projects turned analysts encounter problems modeling activity graphs coupling class models 
observed resulting activity graphs tend simple topology mainly consist linear chains vertices branches 
testers designers appreciated relatively simple precise specifications 
communication effort analysts considerably reduced 
experiences similar reported users assisted analysts able understand validate user centered views scenarios 
coverage metrics proven useful controlling validation verification process 
cases scenarios needed achieve node edge coverage activity diagrams 
main benefit information types parties involved got clear picture tasks performed projected system tasks belong environment 
observed macro actions define interfaces business processes help identifying different user roles 
projects skilled testers analysts succeeded performing verification activities 
regarding class model coverage classes associations achieved 
due coupling cases class model elements class model covered validation activities traced corresponding cases activity graphs 
descriptions cases resp 
activity graphs scenarios derived verify uncovered elements 
hand analysts testers sceptical early phase projects believe validation effort really pay 
got aware high re validation elements verification system acceptance testing judged scores helpful 
admit opinion software developed scores errors better matched user needs software developed far 
faced situation extensive specification validation verification activities customer worrying project progress users annoyed perpetual involvement 
coped situation integrating user domain expert requirements engineering team 
site user pretty familiar project permanently available clarifying open questions 
significantly reduced time effort needed domain modeling 
customer worrying got ongoing information project progress person trusted 
encountered customers regarded development software systems mainly coding task 
situation additionally provided gui central actions validation sessions affordable entire cases 
add showed pieces final system customer early stage improved validation process 
summary scores requirements engineering method coupling cases refined activity graphs class models 
front investment due higher effort specification validation verification pays system acceptance testing high re validation verification elements 
improves quality development artifacts entire development process including final product 
promising benefits scores precise modeling case behavior terms refined activity graphs covering internal interaction contextual information 
seamless traceable transition cases activity graphs class model allows validation case model verification class model case model 
quantitative measures controlling validation verification process requirements specifications 
detailed descriptions represented activity graphs class scopes root operations provide basis derivation test cases system acceptance testing 
moment working component generating suitable test cases scores specifications 
additionally knowledge gained verification class model particular interaction sequences gathered purpose exploited derivation revealing grey box system test cases coupling cases class models means validation verification requirements specifications traced objects 
going extend scores integrate task analysis navigation structure layout description 
approach rely previous combined analysis user interface domain requirements 
acknowledgments authors acknowledge comments anonymous referees led considerable improvement 

ant potts representational framework scenarios system 
requirements eng 
beizer software testing techniques 
nd ed van nostrand reinhold ny 
boehm verifying validating software requirements design specifications 
ieee software jan pp 
booch rumbaugh jacobson unified modeling language users guide 
addison wesley acm press reading ma 
hw voss assignments virtual university system 
proc 
th world conf 
open learning distance education vienna austria 
carroll jm ed 
scenario design envisioning technology system development 
john wiley sons ny 
integrated formal model scenarios statecharts 
proc 
esec th european software engineering conf spain lncs springer pp 
hsia samuel gao kung chen formal approach scenario analysis ieee software 

jarke bui tx carroll jm 
scenario management interdisciplinary approach 
requirements eng 
jacobson jonsson object oriented software engineering 
addison wesley acm press reading ma 
jacobson case construct object oriented software engineering 
pp 
jacobson booch rumbaugh unified software development process 
addison wesley acm press reading ma 
sters pagel bu hw 
object oriented analysis geographic information systems 
proc 
nd int 
conf 
requirements engineering colorado springs pp 
sters pagel bu 
tool interface open gis software development environments 
proc 
th acm workshop advances geographic information systems rockville usa pp 
sters pagel bu winter coupling cases class models 
proc 
bcs facs eros workshop making object oriented methods rigorous 
june london gb pp 
sters pagel bu de ridder winter animated requirements walkthroughs business scenarios 
proc 
th european conf 
software testing analysis review 
nov edinburgh gb 
sters hw voss combined analysis user interface domain requirements 
proc 
nd int 
conf 
requirements engineering colorado springs pp 
sters hw winter enhancing activity graphs bridge gap cases class models 
technical report dept cs university hagen august www informatik hagen de import pi abstracts uml tr html 
van lamsweerde inferring declarative requirements specifications operational scenarios 
ieee transactions software engineering special issue scenario management 
maiden perez manuel crews validation frames patterns validating system requirements 
crews report 
meyer object oriented software construction nd ed prentice hall upper saddle river nj 
myers gj 
art software testing 
wiley ny 
omg unified modeling language specification 
version june 
pohl modelling contextual information scenarios 
proc 
rd int 
workshop re foundation sw quality barcelona spain 
potts takahashi anton ai 
inquiry requirements analysis 
ieee software march pp 
improving case driven approach requirements engineering 
proc 
re nd ieee int 
symp 
requirements engineering york uk pp 
andersson hierarchical case model graphical representation 
proc 
ieee int 
workshop engineering computer systems ieee press 
derivation integrated operational profile case model 
proc 
th international symposium software reliability engineering paderborn germany 
rumpe formale des systeme 
herbert verlag wissenschaft german 
dissertation technical university germany 
pohl jarke scenarios system development current practice 
ieee software march april pp 
wheeler da rn jr software inspection industrial best practice 
ieee press los alamitos 
wirfs brock designing objects interactions brief look responsibility driven design 
pp 
winter quality assurance object oriented software requirements engineering testing requirements specification 
ph dissertation german university hagen sept 
