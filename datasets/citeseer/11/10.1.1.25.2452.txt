interpreting bayesian logic programs kristian kersting luc de raedt stefan kramer institute computer science machine learning lab university freiburg am freiburg brg germany informatik uni freiburg de various proposals combining rst order logic bayesian nets exist 
introduce formalism bayesian logic programs basically simpli cation reformulation ngo probabilistic logic programs 
bayesian logic programs suciently powerful represent essentially knowledge elegant manner 
elegance illustrated fact represent bayesian nets de nite clause programs pure prolog kernel prolog adaptation usual prolog meta interpreter 
bayesian net pearl speci es probability distribution xed set random variables 
bayesian nets essentially provide elegant probabilistic extension propositional logic 
limitations propositional logic bayesian nets inherit known 
limitations motivated development knowledge representation mechanisms employing rst order logic logic programming prolog 
context surprise various researchers proposed various rst order extensions bayesian nets probabilistic logic programs ngo haddawy relational bayesian nets jaeger probabilistic relational models koller 
techniques employ notion knowledge model construction haddawy rst order rules associated uncertainty parameters basis generating bayesian nets particular queries 
tried identify formalism simple possible 
introducing bayesian logic programming employed key design principle 
principle states resulting formalism close possible bayesian nets founded rst order logic knowledge representation mechanism case pure prolog programs 
formalism designed principle easily accessible usable researchers communities 
copyright american association arti cial intelligence www aaai org 
rights reserved 
laid follows 
sections authors solution bayesian logic programs 
section shows kernel implementation prolog 
section give suggestions learning bayesian logic programs 
assume familiarity prolog logic programming see 
sterling shapiro bayesian nets see 
russell norvig 
bayesian logic programs bayesian logic programs consist components 
rst component logical 
consists set bayesian clauses cf 
captures qualitative structure domain pure prolog 
second component quantitative 
encodes quantitative information domain employs bayesian nets notions conditional probability table cpt combining rule 
bayesian predicate predicate nite domain associated 
de ne bayesian de nite clause expression form atoms variables implicitly universally quanti ed 
writing bayesian de nite clauses closely follow prolog notation exception prolog replaced 
variables start capital constant functor symbols start lowercase character 
main di erence bayesian classical clauses bayesian atoms represent classes similar random variables 
precisely ground atom bayesian logic program represents random variable 
random variable take various possible values nite domain corresponding bayesian predicate state world random variable takes exactly value 
paraphrase james house burglary james false 
logical predicate special case bayesian ftrue falseg 
example bayesian de nite clause inspired ngo haddawy burglary neighborhood 
domains burglary ftrue falseg neighbourhood average 
roughly speaking bayesian def clause speci es substitution grounds clause random variable depends 
instance fx random variable burglary james depends neighbourhood james 
bayesian nets table conditional probabilities associated bayesian de nite clause neighbourhood burglary burglary true false bad average cpt speci es knowledge conditional probability distribution ground instance clause 
assume total cpts tuple values da dan cpt speci es distribution da 
reason write denote cpt associated bayesian clause instance bayesian de nite clause cpt imply burglary james true neighbourhood james bad 
bayesian predicate de ned set de nite bayesian clauses alarm burglary 
alarm tornado 
ground atom uenced directly see ground atoms body ground instance clause associated cpt speci ed conditional probability distribution atoms body 
di erent ground instances rules head multiple conditional probability distribution particular normal situation bayesian atom de ned clauses 
clauses alarm random variable alarm james depends burglary james tornado james 
cpt alarm specify alarm james burglary james tornado james 
standard solution obtain desired probability distribution cpts called combining rule 
theoretically speaking combination rule algorithm maps nite set cpts fp ground atoms cpt called combined cpt bn fb bn output empty input empty 
de nition combining rule basically reformulation examples naive representation table simplest representation 
stress representations possible known boutilier 
denote single probability distribution de nition ngo haddawy example consider combining rule max 
functional formulation max fp remarkable combining rule full knowledge input knows appearing ground atoms random variables associated domains random variables 
assume bayesian predicate corresponding combining rule combined cpt speci es conditional probability distribution 
practical perspective combining rules bayesian logic programs commonly employed bayesian nets noisy max 
semantics bayesian logic programs principles bayesian logic program essentially speci es propositional bayesian net queried usual bayesian net inference engines 
view implicitly assumes knowledge domain discourse encoded bayesian logic program persons belonging family 
domain discourse changes family consideration part bayesian logic program changed 
usually modi cations concern ground facts bayesian predicates person parent sex 
structure corresponding bayesian net follows semantics logic program quantitative aspects encoded cpts combining rules 
set random variables speci ed bayesian logic program herbrand model program herbrand model lh de nite clause program contains set ground atoms logically entailed program represents intended meaning program 
varying evidence ground facts modi es set random variables 
inference logic programs studied see 
lloyd various methods exist answer queries compute herbrand model 
methods essentially adapted context 
assume computation lh relies di ers mainly restriction input set nite 
assumption order keep things simple 
formally herbrand model logical program gets omitting associated cpts combination rules interpreting predicates classical logical predicates 
bene greater readability sequel distinguish ignore termination issues atoms principle computed theorem prover prolog 
known tl cf 
lloyd operator bayesian logic program 
tl fa substitution clause ground ig herbrand model lh xed point tl 
speci es set relevant random variables 
instance takes bayesian logic program union bayesian clauses written neighbourhood james lh consists neighbourhood james burglary james alarm james 
notice herbrand model nite logic program contains structured terms 
necessarily problematic see 
ground atoms lh write directly uenced clause bn substitution grounds clause lh 
relation uences recursive closure relation directly uences 
roughly speaking ground atom uences exists proof employs instance alarm james uenced neighbourhood james directly uenced burglary james 
uenced relation state conditional independency assumptions set random variables directly uence variable random variable uenced conditionally independent 
propositional bayesian logic program famous example due pearl earthquake 
burglary 
alarm earthquake burglary 
alarm 
alarm 
random variable conditionally independent alarm 
obviously relation uenced acyclic order obtain de ned bayesian net 
network cyclic exists atom uences 
case executing query prolog problematic simplicity assume clauses bayesian logic program range restricted 
means variables appearing part clause appear condition part 
common restriction computational logic 
working range restricted clauses facts entailed program ground 
pruned trees graphs cf 
contain ground facts 
turn guarantees constructed bayesian net query contains proper random variables 
sld tree see query nite query may terminate 
logical component bayesian logic program problematic 
additional simple considerations lead proposition proposition 
bayesian logic program lh herbrand model ful lls conditions 
uenced relation lh acyclic 
random variable lh uenced nite set random variables speci es distribution lh unique sense nite subset lh induced distribution unique 
proof kersting 
conditions allow nite herbrand models account bayesian nets acyclic graphs node nite set predecessors 
look program violates conditions exactly said properties random variable directly uenced relation violates 




program random variable directly uenced 



program random variable uenced directly nite proof 
assume bayesian logic program unproblematic respect summarize herbrand model bayesian logic program speci es random variables domain discourse 
random variables principle represented bayesian net parents random variable facts directly uencing algorithm solving inference problem bayesian nets applied 
point clear bayesian nets represented bayesian logic programs 
encode dependency structure propositional bayesian logic program 
remains 
reasonable assumption bayesian logic program written familiar prolog 
neglect niteness bayesian nets moment 
query answering procedure section show answer queries bayesian logic programs 
probabilistic query shortly query expression form en en asks conditional probability distribution en 
rst consider case evidence show extend presence evidence 
querying evidence show compute probability di erent possible values ground atom random variable bayesian logic program lives james 
burglary james 
lives stefan freiburg 
tornado 
alarm burglary 
alarm lives tornado 
query alarm james asks probabilities alarm james true alarm james false 
answer query compute complete herbrand model bayesian logic program 
probability depends random variables uence called relevant bayesian logic program 
relevant random variables ground atoms needed prove true logical sense 
usual execution model logic programs relies notion sld trees see 
lloyd sterling shapiro 
purposes important realize succeeding branches tree contain relevant random variables 
furthermore due range restriction requirement succeeding branches contain ground facts 
sld tree answer query probabilistic sense pruned tree obtained sld tree 
advantage pruned tree allows combine probabilistic logical computations 
tree represents possible partial proofs query 
nodes tree partitioned black white nodes 
node query qn proven successors nodes proven 
node proven successors nodes proven 
successor node node exists substitution bayesian de nite clause ja 
interested random variables successful proofs original query prune subtrees evaluate true 
pruned tree represents proofs query 
tree shown 
easy see ground atom random variable unique pruned tree 
hand queries bayesian hj burglary james alarm james alarm james burglary james tornado lives james tornado alarm james lives james burglary james burglary james tornado tornado lives james lives james pruned tree associated cpts query alarm james 
xy lives james tornado burglary james alarm james dependency structure resulting bayesian net query alarm james 
logic programs occur ground fact occurs pruned tree 
uniqueness pruned trees ground facts necessary turn pruned tree graph merging nodes achieved storing ground atoms proven far look table table avoid redundant computations 
resulting pruned graph compactly represents dependencies random variables entailed bayesian logic program 
tree says burglary james uenced neighbourhood james 
furthermore graph re ects structure quantitative computations required answer query 
perform computation store branch node node corresponding cpt cf 

combined cpt random variable node obtained combining cpts sub branches combining rule predicate possible turn graph bayesian net 
realized deleting node redirecting successor parent shown combined cpt node 
querying evidence far neglected evidence 
takes form set ground random variables fe en corresponding values fe bayesian net needed compute probability random variable evidence consists union pruned graphs facts fq en bayesian net computed incrementally starting computing graph look table described graph look table answering logical query order guarantee random variable occurs resulting graph 
resulting graph starting point 
corresponding bayesian net nal graph answer original query bayesian net inference engine compute en qualitative dependency structure resulting bayesian net query alarm james shown 
normally resulting bayesian net optimal pruned 
retrospectively say probabilistic query en en legal union graphs en nite 
words sld trees en nite 
implementation prolog code enables compute structure pruned graph random variable set ground facts predicate imply assuming logical structure bayesian logic program prolog program 
andor graph represented set ground atoms imply imply 
prolog query procedure proves reasons ecient implements desired search ecient uses ecient hash table 
entire source code remaining program parts follow directly previous discussion 
build aog goal clause goal body imply goal body 
build aog goal clause goal body build aog body goal body assert imply goal body 
build aog body true 
build aog body body bodies build aog body build aog conj body bodies bodies assert imply body bodies body 
build aog body body build aog body assert imply body body 
build aog conj goal goals body bodies build aog body build aog conj goal goals bodies assert imply goal goals body 
build aog conj goal goals body build aog body assert imply goal goals body 
pruned graph component containing root node example clari es 
query alarm stefan 
code asserts imply lives stefan freiburg true 
reason graph ground atom comes body rule ground atom asserted proving truth extract right component code extract pruned aog 
extract pruned aog true rest extract pruned aog rest 
extract pruned aog goal rest findall body imply goal body marked goal body assert marked goal body successors append successors rest extract pruned aog 
calling extract pruned aog alarm stefan marks nodes component containing root node 
marking findall imply marked retract imply 
delete irrelevant nodes arcs 
furthermore code typi es reason pure prolog programs structured terms elegantly handled bayesian logic programs describes essentially usual prolog meta interpreter 
de nitions legal queries clearer 
learning far merely introduced framework combines bayesian nets rst order logic 
section provide initial ideas bayesian logic programs learned 
inputs system learning bayesian logic programs consist set cases case describes set random variables states 
complication arises learning bayesian nets relevant random variables corresponding states may fully observable 
literature learning bayesian nets heckerman buntine typically distinguishes 
learning structure net model selection 
learning associated cpts 
distinction applies bayesian logic programs separate clausal structure cpts 
addition combining rules learned address turn 
concerns learning underlying logic program bayesian logic program clear techniques eld inductive logic programming muggleton de raedt helpful 
suggestions assume rules determined user learning rules results explosion complexity 
idea merely outline possibility learning structure bayesian logic program set cases relevant random variables speci ed values need known 
means case know herbrand model 
technique inducing clauses models interpretations clausal discovery technique de raedt dehaspe de raedt 
basically technique starts set interpretations case corresponds herbrand models cases induce clauses language bias interpretations models 
single interpretation male maarten human maarten human appropriate language bias clausal discovery engine induce human male human female 
claudien algorithm essentially performs exhaustive search space clauses de ned language roughly speaking claudien keeps track list candidate clauses initialized maximally general clause repeatedly deletes clause test interpretations model added nal hypothesis maximally general specializations computed called re nement operator muggleton de raedt added back process continues empty relevant parts search space considered 
declarative bias hand written user determines type regularity searched reduces size space way 
pure clausal discovery process described de raedt dehaspe may induce cyclic logic programs 
extensions described blockeel de raedt avoid problems 
assume logic program combination rules may learn associated cpts 
rst investigation koller pfe er adapted bayesian logic programs 
describe em algorithm learning entries cpts probabilistic logic program framework ngo haddawy strongly related framework shown kersting 
approach reasonable assumptions di erent data cases independent combining rules decomposable expressed set separate nodes corresponding di erent uences combined node 
koller pfe er note commonly combining rules meet condition 
summarize ideas inductive logic programming combined bayesian learning order induce bayesian logic programs 
intends investigate issues 
bayesian logic programs intuitive simple extension bayesian nets rst order logic 
prolog basis bayesian logic programs easily interpreted variant standard meta interpreter 
indicated parallels existing algorithms learning numeric entries cpts gave promising suggestions computer supported speci cation logical component 
daphne koller manfred jaeger peter flach james cussens discussions encouragement 
authors grateful anonymous reviewers 
blockeel de raedt 
interactive system database design 
applied arti cial intelligence 
boutilier friedman goldszmidt koller 
context speci independence baysian networks 
proc 
uai 
buntine 
guide literature learning probabilistic networks data 
ieee trans 
knowledge data engineering 
de raedt 
clausal discovery 
machine learning 
haddawy 
overview developments bayesian problem solving techniques 
ai magazine special issue uncertainty ai 
heckerman 
tutorial learning bayesian networks 
technical report msr tr microsoft research advanced technology division microsoft 
jaeger 
relational bayesian networks 
proc 
uai 
kersting 
programme 
master thesis university freiburg germany 
koller pfe er 
learning probabilities noisy rst order rules 
proceedings fifteenth joint conference arti cial intelligence 
koller 
probabilistic relational models 
proc 
th int 
ilp 
lloyd 
foundation logic programming 
berlin springer 
edition 
muggleton de raedt 
inductive logic programming theory methods 
journal logic programming 
ngo haddawy 
answering queries form context sensitive probabilistic knowledge bases 
theoretical computer science 
pearl 
reasoning intelligent systems networks plausible inference 
morgan kaufmann 
edition 
russell norvig 
arti cial intelligence modern approach 
prentice hall sterling shapiro 
art prolog advanced programming techniques 
mit press 
