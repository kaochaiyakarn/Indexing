lambda calculi types henk barendregt catholic university nijmegen appear handbook logic computer science volume ii edited abramsky gabbay maibaum oxford university press comments welcome 
author address faculty mathematics computer science toernooiveld ed nijmegen netherlands mail henk cs kun nl lambda calculi types barendregt contents type free lambda calculus system lambda definability reduction curry versus church typing system curry system church typing la curry systems subject reduction conversion strong normalization decidability type assignment typing la church cube typed lambda calculi pure type systems strong normalization cube representing logics data types pure type systems satisfying normalization barendregt dedication dedicated nol prager musician philosopher poet 
lambda calculi types persons quite influential form contents chapter 
dezani ciancaglini clarified essential differences curry church typing systems 
provided wealth information systems incorporated chapter see forthcoming barendregt dekkers appear subject 
secondly bert van benthem jutting introduced notion type dependency systems automath related calculi calculus constructions 
intimate knowledge calculi obtained extensive mathematical texts useful 
fact helped introduce fine structure calculus constructions called cube 
contributions individuals important ones clear form contents chapter 
persons gave interesting input feedback contents chapter steffen van bakel erik barendsen stefano berardi val breazu tannen dick de bruijn adriana mario coppo thierry coquand wil dekkers ken fujita herman geuvers jean yves girard hayashi leen kees roger hindley furio honsell martin hyland johan de bart jacobs giuseppe longo sophie gregory mints albert meyer reinhard mark jan nederhof rob nederpelt andy pitts randy pollack andre scedrov richard statman marco jan hans toyama anne troelstra de 
financial support came sources 
oxford university press gave necessary momentum write chapter 
research institute declarative systems department computer science catholic university nijmegen provided daily environment discussions colleagues ph students 
ec stimulation project st edb lambda calcul typ barendregt helped meet persons mentioned notably berardi dezani ciancaglini 
telegraph ntt possible meet fujita toyama 
essential support came philips research laboratories eindhoven extensive discussions van benthem jutting leading definition cube 
van der zandt jane typing editing manuscript wil dekkers proofreading suggesting improvements 
erik barendsen guru macros paul taylor commutative diagrams 
erik barendsen wil dekkers herman geuvers helped production final manuscript 
nijmegen december henk barendregt lambda calculus originally conceived church part general theory functions logic intended foundation mathematics 
full system turned inconsistent shown kleene rosser subsystem dealing functions successful model computable functions 
system called lambda calculus 
books subject church curry feys curry barendregt hindley seldin krivine 
kleene rosser proved recursive functions represented lambda calculus 
hand turing shown exactly functions computable turing machine represented lambda calculus 
representing computable functions terms expressions lambda calculus gives rise called functional programming 
see barendregt 
lambda calculus treated cited usually referred type free theory 
expression considered function may applied expression considered argument 
example identity function may applied argument give result particular may applied 
typed versions lambda calculus 
introduced essentially curry called combinatory logic lambda calculi types variant lambda calculus church 
types usually objects syntactic nature may assigned lambda terms 
term type assigned say type notation example systems types identity may get type means argument type value ix type general type functions analogy perfect type assigned term may compared dimension physical entity 
dimensions prevent wrong operations adding volts amp eres 
similar way types assigned lambda terms provide partial specification algorithms represented useful showing partial correctness 
types may improve efficiency compilation terms representing functional algorithms 
example known looking types subexpression term representing functional program purely arithmetical fast evaluation possible 
expression executed alu machine slower way symbolic expressions evaluated general 
original papers curry church introducing typed versions lambda calculus give rise different families systems 
typed lambda calculi la curry terms type free theory 
term set possible types 
set may empty singleton consist possibly infinitely elements 
systems la church terms annotated versions type free terms 
term type usually unique equivalence relation derivable way term annotated 
curry church approaches typed lambda calculus correspond paradigms programming 
program may written typing 
compiler check type assigned program 
case program correct 
known example language ml see milner 
style typing called implicit typing 
paradigm programming called explicit typing corresponds church version typed lambda calculi 
program written type 
languages type checking usually easier types constructed 
examples languages algol pascal 
authors designate curry systems lambda calculi type assignment church systems systems typed lambda calculus 
paradigms versions typed lambda calculus 
important systems especially la church barendregt case terms type possess normal form 
unsolvability halting problem implies computable functions represented typed term see barendregt theorem 
bad sounds order find computable functions represented stand head 
example second order typed lambda calculus partial recursive functions represented happen total provably mathematical analysis secondorder arithmetic 
considering terms types programs specifications possibility 
type viewed proposition term proof proposition 
called propositions interpretation independently due de bruijn howard papers conceived 
hints direction curry feys 
systems proof checking interpretation propositions types proofs terms 
see de bruijn survey called automath proof checking system 
normalization terms corresponds formulas types interpretation normalisation proofs sense prawitz 
normal proofs give useful proof theoretic information see schwichtenberg 
chapter typed lambda calculi introduced la curry la church 
decades dozens systems appeared selection guided methodology 
simplest versions system considered 
fi reduction reduction 
church systems types built pi theta sigma 
curry systems types built 
reason consider systems constructive type theory developed martin lof theories sigma plays essential role 
seen interesting systems simple form 
understanding helpful understanding complicated systems 
semantics typed lambda calculi chapter 
reason especially church systems notion model subject intensive investigation 
lambek scott mitchell chapter typed lambda calculus handbook treat semantics systems chapter 
church systems proposals notions semantics proposed 
neatly unified fibred categories jacobs 
see lambda calculi types pavlovi 
semantics curry systems see hindley coppo 
volume handbook contain chapter semantics typed lambda calculi 
barendregt barendregt introductory versions chapter 
books including material typed lambda calculus girard 
treats things semantics church version hindley seldin curry church versions krivine curry versions lambek scott categorical semantics forthcoming barendregt dekkers nerode odifreddi 
section chapter type free lambda calculus may skipped reader familiar subject 
section explains detail curry church approach lambda calculi types 
section curry systems section church systems 
sections read independently 
type free lambda calculus type free lambda calculus necessary order define system curry type assignment top 
church style typed lambda calculi introduced directly useful knowledge type free lambda calculus 
section devoted theory 
information see hindley seldin barendregt 
system chapter type free lambda calculus called calculus simply start informal description 
application abstraction calculus basic operations 
application 
expression usually written fa denotes data considered algorithm applied considered input 
theory type free allowed consider expressions ff applied 
useful simulate recursion 
basic operation abstraction 
expression containing depending denotes intuitive map barendregt 
assigns 
variable need occur case constant function value application abstraction intuitive formula denotes function 
applied argument giving 
general equation preferably written fi denotes substitution equation called fi conversion 
remarkable essential axiom calculus resulting theory involved 
free bound variables abstraction said bind free variable example say yx bound free variable 
substitution performed free occurrences yx yn integral calculus similar variable binding 
dx variable bound free 
sense substitute obtaining substitution sense obtaining dx 
reasons hygiene assumed bound variables occur certain expression different free ones 
fulfilled renaming bound variables 
example expressions act way fact denote intended algorithm 
expressions differ names bound variables identified 
equations usually called ff conversion 
lambda calculi types functions arguments functions arguments obtained iteration application 
idea due called currying curry introduced independently 
intuitively depends arguments define fx equation shows convenient association left iterated application fm mn denotes mn equation fxy dually iterated abstraction uses association right delta delta delta xn xn denotes xn xn defined xy xy xy arguments xn xn xn xn fi times 
equation convenient vector notation generally give formal description calculus 
barendregt definition 
set terms notation built infinite set variables fv application function abstraction mn xm syntax may write 
example 
terms vv vv vv vv convention 
denote arbitrary variables denote arbitrary terms 

mentioned informally abbreviations fm mn stands mn delta delta delta xn stands xn 
outermost parentheses written 
convention examples may written follows xz xz xz xz note yx yx xy 
lambda calculi types notation 
denotes term obtained renaming bound variables 
example definition 
set free variables notation fv defined inductively follows fv fxg fv mn fv fv fv fv gamma fxg 
closed term combinator fv 
set closed terms denoted 
result substitution free occurrences notation defined follows pq provided term xy xyz occur free variables occur bound variables 
term xy closed 
names bound variables chosen differ free ones term 
writes xy xy xy xyz 
called variable convention possible substitution calculus proviso free bound variables 
proposition substitution lemma 
suppose fv 
proof 
induction structure introduce calculus formal theory equations terms 
barendregt definition 
principal axiom scheme calculus fi called fi conversion 

logical axioms rules mz zm zm 
provable calculus write just remarks 
identified terms differ names bound variables 
alternative add calculus axiom scheme ff conversion 
ff provided occur axiom fi originally second axiom name 
prefer version theory identifications syntactic level 
identifications done mind 

initially terms written variable convention ff conversion alternative necessary rewriting terms 
consider xx yz yz 
xx yz yz yz yz yz yz yz yz yz yz lambda calculi types zz zz yz yz 
implementations calculus machine deal called ff conversion 
way doing provided name free notation de bruijn see barendregt appendix notation xy denoted denoting variable bound lambdas 
result provides way represent recursion calculus 
theorem fixed point theorem 

means fx 
fixed point combinator xx xx yf yf proof 

define xx ww ww xx ww fx 
proof 
note yf xx xx corollary 
term possibly containing displayed free variables fx course substitution result proof 
construct supposing required property calculating back fx fx fx fx holds arguments barendregt application terms constructed terms fx xf xg lambda definability lambda calculus define numerals represent numeric functions 
definition 
set natural numbers defined inductively follows 
church numerals defined cn fx proposition rosser 
define xp xyz yz exp xy yx 
cn 
cn cm cn 
exp rosser starts 
proof 
need lemma 
lambda calculi types lemma 

nm 

proof 

induction lhs rhs 
assume correct induction hypothesis ih 
nx cnx nx ih cnx nm nm nm 
induction 
lhs cn rhs 
correct cn ih cn proof proposition 

induction 
lemma 

lemma exp cn cm cm cn cn mx fv 
mx seen functions plus times exponentiation represented calculus church numerals 
show computable recursive functions represented 
barendregt boolean truth values conditional represented calculus 
definition booleans conditional 

true xy false xy 
boolean term true false represented bpq 
definition pairing 
write zmn true false serve ordered pair 
definition 
numeric function map 
numeric function arguments called definable combinator fcn cnp holds said defined definition 
initial functions numeric functions defined 
numeric relation 
usual denotes number holds number undefined 
know chapter handbook class recursive functions smallest class numeric functions contains lambda calculi types initial functions closed composition primitive recursion 
inductively defined class 
proof recursive functions definable corresponding induction argument 
result originally due kleene 
lemma 
initial functions definable 
proof 
take defining terms delta delta delta xyz xyz lemma 
definable functions closed composition 
proof 
hm defined hm respectively 
hm defined hm lemma 
definable functions closed primitive recursion 
proof 
defined defined respectively 
show definable 
notational simplicity assume parameters proof general similar 
argument scheme iteration 
iteration represented easily calculus church numerals iterators 
construction representation done barendregt steps 
primitive recursion reduced iteration ordered pairs iteration represented 
details 
consider hc induction follows false defined kt false lemma 
definable functions closed 
proof 
defined defined show definable 
define zero true false true zero true zero cn false 
corollary term ny zero ny set xc 
defines fc hc gc hc gc hc stands cn theorem 
recursive functions definable 
lambda calculi types proof 

converse holds 
idea function definable graph recursively enumerable equations derivable calculus enumerated 
follows function recursive 
numeric functions recursive iff definable 
partial functions notion definability exists partial recursive iff definable 
notions definable recursive intended formalizations intuitive concept computability 
formalization proposed turing form turing computable 
equivalence notions recursive definable turing computable see original turing davis davis provides evidence church turing thesis states recursive proper formalization intuitive notion computable 
subsection undecidability results 
need coding terms 
remember collection variables fv definition 

notation 

recursive coding pairs natural numbers natural number 
define ni mn ii ii 
notation definition 

closed 
non trivial 
recursive ag recursive 
result due scott quite useful proving undecidability results 
barendregt theorem 
non trivial closed 
recursive 
proof 
define fm ag suppose recursive effectiveness coding recursive hn ii 
follows find take gx zero fx zero defined proof 
particular def def contradiction 
application shows lambda calculus decidable theory 
corollary church 
set fm trueg recursive 
proof 
note set closed nontrivial 
reduction certain asymmetry basic scheme fi 
statement interpreted result computing vice versa 
computational aspect expressed writing 
reads reduces 
lambda calculi types apart conceptual aspect reduction useful analysis convertibility 
church rosser theorem says terms convertible term reduce 
cases terms proved showing reduce common term 
definition 
binary relation called compatible operations zm zn mz nz 
congruence relation compatible equivalence relation 

reduction relation compatible reflexive transitive relation 
definition 
binary relations fi 
fi fi defined inductively follows 
fi fi zm fi zn mz fi nz fi 

fi fi 
fi 
fi 
fi 
fi 

fi fi fi fi fi fi fi relations pronounced follows 
fi fi reduces fi fi reduces step fi fi convertible definition fi compatible 
relation 
fi reflexive transitive closure fi reduction relation 
relation fi congruence relation 
barendregt proposition 
fi proof 
induction generation 
induction shows fi 
fi fi definition 
fi redex term form case contractum 

term fi normal form fi nf fi redex subexpression 

term fi normal form fi fi nf example 
xx fi nf fi nf term yy 
immediate property nf 
lemma 

suppose fi nf 

fi 
fi fi 
proof 

fi nf contain redex 
fi 
fi 
induction generation fi lambda calculi types theorem church rosser theorem 

fi 
fi 
fi 
fi diagram psi psi gamma gamma gamma gamma 
psi psi 
proof postponed 
corollary 
fi 
fi 
fi proof 
induction generation fi case 
fi 
fi take case 
fi fi ih common fi reduct take case 
fi fi fi ih ih psi psi gamma gamma gamma gamma psi psi gamma gamma gamma gamma cr 
psi psi 
corollary 
fi nf 
fi 
term fi nf 
barendregt proof 

suppose fi fi nf 
corollary 
fi 
fi lemma 
fi 
suppose fi nf fi fi 
corollary 
fi 
fi lemma 
consequences 

calculus consistent true false 
true fi false proposition impossible corollary true false distinct fi nf 
syntactical consistency proof 
omega xx xx fi nf 
omega 
fi fi nf 
omega reduces fi nf 

order find fi nf term various subexpressions may reduced different orders 
fi nf corollary unique 
go wrong reduction term continued fi nf term exists 
see theorem 
proof church rosser theorem occupies 
idea proof follows 
order prove theorem sufficient show strip lemma psi gamma gamma fi gamma gamma fi 
fi 
psi psi 
fi 
order prove lemma fi step reduction resulting changing redex contractum bookkeeping happens reduction 
reducing residuals term 
order necessary bookkeeping extended set lambda calculi types reduction fi introduced 
underlining way similar radioactive tracing experimental biology 
definition underlining 

set terms defined inductively follows mn 
underlined step reduction 
fi 
fi defined starting contraction rules extended compatible relation fi abstraction 
fi transitive reflexive closure fi 
jm obtained leaving 
example ii 
substitution defined adding schemes definition definition 
map 
defined inductively follows mn words map contracts redexes underlined inside outside 
notation 
jm denoted respectively barendregt lemma 
delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta fi delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta fi proof 
suppose fi obtained contracting redex obtained contracting corresponding redex general statement follows transitivity 
lemma 

suppose fv 


fi delta delta delta delta delta delta delta delta delta delta delta delta delta fi delta delta delta delta delta delta delta delta delta delta delta delta delta proof 

induction structure 
induction structure case condition may assumed hold convention free variables 

induction generation 
fi 
lambda calculi types lemma 
psi gamma gamma gamma gamma gamma gamma delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta fi delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta proof 
induction structure lemma strip lemma 
psi gamma gamma fi gamma gamma fi 
fi 
psi psi 
fi 
proof 
result contracting redex occurrence obtained replacing jm lemmas construct diagram proves strip lemma 
psi gamma gamma fi gamma gamma fi oe 
fi 

fi psi psi 
fi 
oe barendregt theorem church rosser theorem 

fi 
fi 
fi 
fi proof 

fi fi fi mn cr property follows strip lemma simple diagram chase psi gamma gamma psi gamma gamma 
ffl 
ffl psi gamma gamma 

psi psi 
ffl psi psi 
ffl 
ffl psi psi 
ffl normalization definition 
reduction graph notation fi directed multigraph vertices fn 
fi ng directed fi multigraph contractions different redexes considered different edges 
example 
fi ia ia ia simply ffl ffl ffl lambda calculi types lambda term called strongly normalizing iff reduction sequences starting terminate equivalently iff fi finite 
terms nf strongly normalizing infinite reduction graph 
omega xx xx 
omega fi omega fi omega fi omega fi ki omega fi left hand side infinite reduction graph 
called strategy necessary order find normal forms 
state theorem due curry proof see barendregt theorem 
theorem normalization theorem 
normal form iterated contraction leftmost redex main lambda leftmost leads normal form 
words leftmost reduction strategy normalizing functional language pure lisp uses eager applicative evaluation strategy expression form fa evaluated reduced normal form calling calculus strategy normalizing shown reduction paths omega 
variant lambda calculus called calculus eager evaluation strategy normalizing 
see barendregt ch 
calculus terms throwing away omega reduction ki omega 
exist 
ordinary calculus referred calculus 
lambda calculi types typable terms strongly normalizing see subsections 
bohm trees approximation subsection reduction introducing bohm trees kind infinite normal form 
lemma 
forms 

xn yn nm variable 

xn nm 
proof 
definition term variable form pq application abstraction 
variable form 
application pm application 
form depending variable giving abstraction giving 
barendregt abstraction similar argument shows right form 
definition 

term head normal form hnf form lemma 
case called head variable 
hnf fi hnf 

form called head redex lemma 
fi hnf delta delta delta xn yn nm hnf delta delta delta xn fi nm fi proof 
corollary church rosser theorem common reduct possibility delta delta delta xn fi fi definitions give flavour notion bohm tree 
definitions completely correct ordering direct successors node 
ordering displayed drawings trees 
precise definition covering order see barendregt ch 
definition 

tree form depicted 
lambda calculi types ffl gamma gamma ffl ffl gamma gamma ffl ffl ffl gamma gamma tree partially ordered set root node point finitely direct successors set predecessors node finite linearly ordered 

labeled tree tree symbols nodes 
definition 
bohm tree notation bt labeled tree defined follows bt delta delta delta xn hnf gamma gamma gamma gamma delta delta delta xn yn nm bt bt nm hnf 
example 

bt abc ac bc abc gamma gamma 
bt xx xx barendregt 
bt 

xx 

bt bt 

bt 
bt 


note definition inductive definition bt 
nm tail hnf term may complicated term 
see barendregt ch 
proposition 
bt defined fi bt bt proof 
meant bt independent choice hnf 
second property follow lemma 
definition 

extension lambda calculus defined follows 
variables selected constant name 
contraction rules added lambda calculi types resulting reduction relation called fi reduction denoted 
fi 

fi normal form fi reduced 
bohm trees defined requiring term delta delta delta xn yn nm fi hnf 
note fi nf fi hnf fi hnf 
hnf xn yn nm fi hnf 
case xn yn nm 
fi 
fi hnf 
definition 

bohm trees terms 
included notation results cutting subtrees leaving empty node 
example ab ab gamma gamma gamma gamma 
terms 
approximates notation bt bt 

term 
set approximate normal forms anf defined fq fi example 
set anf fixedpoint operator proof mention continuity theorem due wadsworth 
barendregt proposition 

fm fq see barendregt proposition proof topological explanation result 
curry versus church typing section system simply typed lambda calculus introduced 
attention focused difference typing la curry la church introducing ways 
systems typed lambda calculus exist curry church version 
systems 
example curry system system intersection types introduced clear define church version 
church system calculus constructions clear define curry version 
systems exist styles clear relation versions explained 
system curry originally implicit typing paradigm introduced curry theory combinators 
curry feys curry 
theory modified natural way lambda calculus assigning elements set tof types type free lambda terms 
reason calculi la curry called systems type assignment 
type oe assigned term writes oe subscript denote particular system 
usually set assumptions gamma needed derive type assignment writes gamma oe pronounce gamma yields oe 
particular curry type assignment system depends parameters set tand rules type assignment 
example introduce system curry 
definition 
set types notation type inductively defined follows 
write type 
ff ff type variables oe oe 
function space types 
definitions occur convenient syntax form lambda calculi types vj ff type variables 
notation 
oe oe oe oe delta delta delta oen stands oe oe delta delta delta oen gamma oen association right 

ff fi fl denote arbitrary type variables 
definition curry 

statement form oe oe statement pronounced oe 
type oe predicate term subject statement 

declaration statement subject term variable 

basis set declarations distinct variables subjects 
definition 
statement oe derivable basis gamma notation gamma curry oe gamma 
oe gamma oe danger confusion gamma oe produced rules 
barendregt curry version oe gamma gamma oe gamma oe 
gamma oe gamma mn gamma oe gamma oe 
gamma oe stands gamma fx oeg 
gamma fx oe xn oe gamma gamma oe writes oe xn oe oe oe 
pronounce yields 
rules definition usually notated follows curry version axiom gamma oe oe gamma elimination gamma oe 
gamma oe gamma mn gamma oe gamma oe 
notation rules natural deduction formulation 
curry version elimination rule rule oe 
oe 
oe mn oe 
version axiom version considered implicit notated 
notation oe 
lambda calculi types means assumption oe set gamma statements derive rule table states may infer oe 
derivable assumption oe gamma 
process called cancellation assumption indicated striking statement oe 
examples 
version system derivation oe oe oe oe xy oe oe shows xy oe oe oe natural deduction derivation version system type assignment oe oe oe xy oe oe indices bookkeeping devices indicate application rule particular assumption cancelled 
explicit way dealing cancellations statements flag notation fitch languages automath de bruijn 
notation derivation follows 
oe xy oe oe oe oe barendregt sees bookkeeping cancellations explicit hand obvious statement derived previous statements 

similarly show oe oe oe 
example non empty basis oe oe rest chapter usually introduce systems typed lambda calculi style version curry 
pragmatics constants applications typed lambda calculi needs constants 
example programming may want type constant nat term constants suc representing set natural numbers zero successor function 
way take type variable term variables give names nat suc 
forms basis gamma nat suc nat nat gamma treated called initial basis 
bases gamma considered extensions gamma promises bind variables gamma changing nat suc nat nat oe suc nat nat nat oe keep promise harm done suc ordinary bound variables 
programming language ml see milner essentially curry extended constant type assignment oe oe oe oe 
properties curry properties type assignment valid 
analyses basis necessary order derive type assignment 
lambda calculi types properties curry properties type assignment valid 
analyses basis necessary order derive type assignment 
definition 
gamma fx oe xn oe basis 

write dom gamma fx xng oe gamma 
gamma considered partial function 

set variables 
gamma fx oe oe gamma 
oe ff oe denoted oe ff 
proposition basis lemma curry 
gamma basis 

gamma gamma basis gamma oe gamma oe 
gamma oe fv dom gamma 

gamma oe gamma fv oe 
proof 

induction derivation oe 
proofs occur frequently spell simple situation order 
case 
oe oe element gamma 
oe gamma gamma oe 
case 
oe oe follows directly oe ih gamma oe gamma gamma oe 
case 
oe oe oe follows directly gamma oe oe variable convention may assumed bound variable occur dom gamma gamma oe basis extends gamma oe ih gamma oe oe gamma oe oe 

induction derivation oe 
treat case oe oe oe follows directly gamma oe oe fv fv ih dom gamma oe dom gamma 

induction derivation oe 
treat case oe oe follows directly oe barendregt ih gamma fv oe gamma fv follows gamma fv oe gamma fv gamma fv oe second property analyses terms certain form get typed 
useful things show certain terms types 
proposition generation lemma curry 

gamma oe oe gamma 
gamma mn oe gamma oe 
gamma oe 
gamma ae oe gamma oe ae oe 
proof 
induction length derivation 
proposition typability subterms curry 
subterm gamma oe gamma oe gamma oe moral type gamma oe gamma oe subterm type 
proof 
induction generation proposition substitution lemma curry 

gamma oe gamma ff oe ff 
suppose gamma oe gamma oe 
gamma proof 

induction derivation oe 

induction generation gamma oe result states set having certain type closed reduction 
lambda calculi types proposition subject reduction theorem curry 
suppose 
fi gamma oe gamma oe proof 
induction generation 
fi propositions 
treat prime case 
gamma oe follows generation lemma gamma oe gamma proposition gamma oe gamma substitution lemma gamma oe terms having type closed expansion 
example oe oe ki xx oe oe see exercise 
stronger failure subject expansion observed van bakel 
observation 
oe oe 
fi oe oe oe proof 
take xy sk oe ff fi fi oe fi ff fi fi exercise 
exercises 
ffl xy xyz xz yx 
show oe ae tone oe ae oe oe ae sk oe oe oe ki oe oe show sk oe oe 
show xx ki xx type 
barendregt system church give formal definition explain right away difference church curry versions system 
curry oe oe hand church oe oe oe term annotated church system oe 
intuitive meaning oe takes argument type set oe 
explicit mention types term possible decide term certain type 
curry systems question undecidable 
definition 
set types 
set annotated terms called pseudoterms notation defined follows denotes set term variables 
syntactic conventions example oe delta delta delta xn oe oe oe xn oe term may abbreviated oe systems typed lambda calculi la church consist choice set types tand assignment types oe terms seen section case systems la church 
systems called term dependent types sets terms types defined simultaneously 
anyway church separate definition types terms possible choice types set type 
curry 
definition 
typed lambda calculus church defined follows 
set types type 
defined vj lambda calculi types 
statement form oe oe 
basis set statements distinct variables subjects 
definition 
statement oe derivable basis gamma notation gamma oe oe produced rules 
church axiom gamma oe oe gamma elimination gamma oe 
gamma oe gamma mn gamma oe gamma oe oe 
derivations styles 
need explicit 
definition 
set legal terms notation defined 
fm gamma oe gamma oeg order refer specifically church uses notation gamma church oe little danger ambiguity uses church just 
examples 
church 
oe oe oe 
oey oe oe 
oe oe type free theory define reduction conversion set pseudoterms barendregt definition 
binary relations step fi reduction fi reduction fi convertibility notations fi 
fi fi respectively generated contraction rule oe fi example oe yy fi yy proof mention church rosser theorem 
fi holds proof similar see barendregt dekkers appear details 
results church essentially propositions curry 
proofs omitted 
proposition basis lemma church 
gamma basis 

gamma gamma basis gamma oe gamma oe 

gamma oe fv dom gamma 

gamma oe gamma fv oe proposition generation lemma church 

gamma oe oe gamma 

gamma mn oe gamma oe 
gamma oe 
gamma oe ae ae oe 
gamma oe proposition typability subterms church 
type subterm type 
proposition substitution lemma church 

gamma oe gamma ff ff oe ff 
suppose gamma oe gamma oe 
gamma proposition subject reduction theorem church 

fi gamma oe gamma oe proposition implies set legal expressions closed reduction 
closed expansion conversion 
take example lambda calculi types fi ki omega annotated appropriate types follows proposition ki omega type 
hand convertible legal terms type respect basis 
proposition uniqueness types lemma church 

suppose gamma oe gamma oe oe oe 
suppose gamma oe gamma oe fi oe oe proof 

induction structure 
church rosser theorem subject reduction theorem 
observed proposition hold curry 
original version church defined slightly different essentially equivalent way 
defined set legal terms directly subset pseudoterms variable carries type 
set terms type oe notation oe 
simply oe defined inductively follows 
set variables 
oe oe oe oe 
oe mn oe oe 
church definition legal terms oe oe example shows version equivalent original 
example 
statement church oe oe original system church oe oe turns original notation convenient complicated typed lambda calculi 
problem arises types subject reduction 
expect barendregt oe 
fi oe 
fi oe oe 
fi oe term clear interpret binding effect oe bound 
notation definition 
relating curry church systems typed lambda calculi described la curry la church simple relation versions 
explained 
definition 
forgetful map delta defined follows jxj jmn jm jx oe jm map delta just erases type term result states legal terms church version project legal terms curry version conversely legal terms curry lifted legal terms church 
proposition 

gamma church oe gamma curry jm oe 
gamma curry oe gamma church oe jm proof 

induction derivation 
corollary 
particular type oe tone oe inhabited curry oe inhabited church 
proof 
immediate 
lambda calculi types typing la curry systems subsection main systems assigning types type free lambda terms introduced 
systems discussed 
extra derivation rules eq added systems 
systems represented diagram 
eq fig 

systems la curry systems extensions curry 
stronger systems defined forming combinations 
systems studied chapter 
describe rules eq systems 
definition 
equality rule notation eq rule oe fi oe 
approximation rule notation consists rules 
rules defined introduced definition 
constant plays special role rule barendregt rule gamma oe gamma oe gamma oe see definition 
note rules requirements fi statements speak side conditions 
rule states type 
notation 
gamma gamma extended rule eq 

gammaa gamma extended rule example eq examples 
pq qp oe oe pq qp pq note statement general provable 
term types form oe oe 
oe follows form generation lemma 

fixed point operator xx xx 
oe oe oe approximants type oe oe oe 
statement derivable 
typable terms normal form proved section shown rule eq follows rule general gammaa gammaa 
lambda calculi types proposition 
systems type assignment 

gamma oe gamma oe 
bt bt 
gamma oe gamma oe 
fi gamma oe gamma oe proof 

approximation results bt replacing subtrees writing result term 
may assume arbitrary types rules type example 
fixedpoint combinator approximant 
oe oe oe 
choosing oe type obtains oe oe oe 
suppose bt bt 
gamma oe gamma oe gamma oe rule 
fi bt bt proposition 
result follows 
system system introduced independently girard reynolds 
papers system introduced church paradigm 
girard motivation introduce proof theory 
extended dialectica translation godel see troelstra analysis relating provability second order arithmetic expressibility 
reynolds motivation introduce came programming 
wanted capture notion explicit 
names ffl polymorphic typed lambda calculus ffl second order typed lambda calculus ffl second order polymorphic typed lambda calculus ffl system usually names refer church 
section introduce curry version leaving church version section 
barendregt idea polymorphism 
ff ff arbitrary ff 
stipulates ff ff ff indicate types oe oe seen mechanism powerful 
definition 
set types notation type defined grammar vj tj vt notation 
ff delta delta delta ff oe stands ff ff ff oe 
binds strongly 

ff oe 
ff oe 
definition 
type assignment curry defined natural deduction system start rule oe gamma gamma oe elimination gamma oe 
gamma oe gamma mn gamma oe gamma oe 
elimination gamma ff oe gamma oe ff gamma oe ff fv gamma gamma ff oe lambda calculi types examples 
curry 
ff ff ff xy fffi ff fi fi fx ff ff ff ff ff xx fi ffff fi xx fi ffff fi fi xx ffff ffff example shows church numerals cn fx type ff ff ff ff ff 
type called 
reason strength church numerals may iterators functions fixed type ff ff iteration oe oe arbitrary oe 
possible represent term primitive recursion godel computable functions see subsection 
subsection shown strongly normalizing terms type 
system system recursive types 
come equivalence relation 
type assignment rules oe oe oe oe typical example recursive type oe oe oe oe oe type arbitrary elements example oe oe oe oe xx oe xx oe oe xx oe xx xx oe proof natural deduction notation statement oe oe oe oe xx oe xx oe oe xx oe oe xx oe xx xx oe fact equation recursive domain equation enables interpret elements order construct type oe barendregt satisfying operator putting oe ff ff ff implies 
definition 
set types notation type defined grammar 
vj tj 
oe tree oe notation oe defined follows ff ff ff type variable oe 
gamma gamma oe ff oe oe fi fi ff oe ff ff oe 

oe tone defines oe oe examples 

ff ff fl gamma gamma gamma gamma fl fl gamma gamma fl gamma gamma fl 
oe ff ff fl fi lambda calculi types gamma gamma gamma gamma fl gamma gamma fl 
ff ff fl ff ff fl fl 
ff oe oe ff ff oe oe oe fi ff definition 
type assignment system defined natural deduction system shown 
start rule oe gamma gamma oe elimination gamma oe 
gamma oe gamma mn gamma oe gamma oe 
rule gamma oe oe gamma result taken coppo 
proposition 
oe arbitrary type derive 
oe oe oe 
omega oe proof 

ff ff oe 
oe derivation barendregt xx xx oe oe oe oe oe oe xx oe xx oe xx oe xx oe xx xx xx oe xx xx oe oe oe 
note yi 
fi omega prove subject reduction theorem show omega oe directly 
system system intersection types called torino system initial system done city example coppo dezani barendregt coppo dezani coppo dezani honsell longo dezani margaria coppo dezani 
see hindley 
system possible state variable types oe time 
kind polymorphism contrasted 
system polymorphism parametrized 
example type assignment ff ff ff states type ff ff uniformly ff 
assignment oe states type oe type definition 

set types notation type defined follows vj tj 
type variables selected constant notated 
order define rules type assignment necessary introduce preorder lambda calculi types definition 

relation defined axioms rules oe oe oe ae oe ae oe oe ae oe 
oe ae oe oe oe oe oe ae oe ae oe oe oe oe 

oe oe oe example oe 
oe oe oe definition 
system type assignment defined axioms rules start rule oe gamma gamma oe elimination gamma oe 
gamma oe gamma mn gamma oe gamma oe 
elimination gamma oe gamma oe gamma gamma oe gamma gamma oe gamma 
rule gamma oe oe gamma barendregt examples 

xx oe 
oe 

omega 
pq qp oe oe proof 

derivation proves statement oe 
oe oe 
oe xx xx oe 
oe 

obvious 
fact shown head normal form iff type see barendregt 


oe 
oe qp 
qp oe qp oe pq qp oe oe van bakel observed assignment example possible variants system 
example delete rule axiom assigns term 
van bakel variants studied see theorem 
combining systems la curry system extensions 
extension including systems cartesian products direct sums studied macqueen 

lambda calculi types basic properties curry systems enjoy properties 
immediate ones valid systems 
subsection shown subject reduction holds systems 
properties strong normalization valid systems subsections 
refers curry systems 
properties proved way done section 
proposition basis lemma curry systems 
gamma basis 

gamma gamma basis gamma oe gamma oe 
gamma oe fv dom gamma 

gamma oe gamma fv oe proposition subterm lemma curry systems 
subterm gamma oe gamma oe gamma oe moral type subterm type 
proposition substitution lemma curry systems 

gamma oe gamma ff oe ff 

suppose gamma oe gamma oe 
gamma exercise 
show systems ff ff system 
subject reduction conversion subsection shown main systems type assignment la curry viz 
extra rules eq subject reduction theorem holds 
gamma oe 
fi gamma oe barendregt subject conversion closure rule eq stronger states gamma oe fi gamma oe property holds systems including rule trivially rule eq included 
subject reduction start proving subject reduction theorem systems 
done 
order prove result definitions lemmas needed 
example proposition valid 
time focus type 
definition 
write oe ff oe ff oe ff oe oe ff 
reflexive transitive closure 

map tis defined ff ff ff type variable oe 
oe 
ff oe oe note exactly deduction rules subject change elimination rules 
rules may applied consecutively obtaining oe 
definition case oe 
lambda calculi types lemma 
oe suppose free type variable oe occurs gamma 
gamma oe gamma proof 
suppose gamma oe oe oe oe delta delta delta oe oe oe possibly renaming variables may assumed oe ff oe ff fv gamma definition relation rules follows gamma oe gamma oe gamma oe lemma generation lemma curry 

gamma oe oe oe oe gamma 

gamma mn oe gamma oe 
gamma oe 

gamma ae oe gamma oe oe 
ae proof 
induction derivations 
lemma 
oe exists oe ff oe ff 
oe oe ff oe oe ff 
oe ae oe ae ff oe ae oe ae ff proof 

induction structure oe 
suffices show oe oe case 
oe ff oe oe oe case 
oe ff ae oe ae ff oe ae ff oe ff 

oe ae oe ae oe ae ff oe ae ff theorem subject reduction theorem curry 

fi curry gamma oe gamma oe barendregt proof 
induction derivation 
fi treat case 
gamma oe ae oe oe gamma ae oe gamma ae ae oe oe gamma ae oe ae oe ae oe gamma ae lemma follows ae oe ae oe ff lemma gamma ae oe gamma ae oe oe gamma oe oe oe lemma gamma oe lemma 
mitchell semantic proof subject reduction theorem 
proof subject reduction theorem somewhat easier 
theorem subject reduction theorem 

fi gamma oe gamma oe proof 
relation subject reduction theorem holds 
system closed rule eq see soon 
subject conversion systems see subject conversion theorem holds 
interesting understand reason closed fi expansion 

suppose gamma oe order show gamma oe 
occurs times occurrence having type say define delta delta delta 
gamma gamma oe 
gamma oe gamma oe lambda calculi types may possible find common type different occurrences note type essential case fv 
theorem subject conversion theorem 
fi gamma oe gamma oe proof 
see barendregt 
corollary 
exercise 
pq qp ffl show fi pq ff fi ff term ff fi ff type ffl give derivation ff fi ff strong normalization remember lambda term called strongly normalizing iff reduction sequences starting terminate 
example kik strongly normalizing omega 
subsection examined systems type assignment la curry terms type strongly normalizing 
case course systems terms typable 
variant gamma strongly normalizing typable gamma turing proved terms typable normalizing proof published gandy 
discussed section normalization terms imply general strong normalization 
systems strong normalization typable terms 
methods proving strong normalization weak normalization due nederpelt gandy described klop 
tait proved terms typable normalizing 
proof uses called method computable terms unpublished stanford report howard 
fact tait method prove strong normalization applies systems particular godel see troelstra 
barendregt girard gave impredicative twist tait method order show normalization terms typable church version system discussed section 
girard proof reformulated tait follow general flavour 
start proof sn definition 
sn fm strongly 

define subset ff fa bg 
oe type 
set oe defined follows ff sn ff type variable oe 
oe definition 
subset sn called saturated rn sn term variable rn sn sn 
sat fx 
lemma 
sn sat 

sat sat 

fa collection members sat sat 

oe type 
oe sat 
proof 

sn sn satisfies condition definition saturation 
condition suppose sn sn claim sn reductions inside terminate terms sn assumption subterm term lambda calculi types sn sn sn finitely steps reducing term obtain 
fi etcetera 
contraction gives reduct term sn term sn 

suppose sat 
definition variables fx fx sn sn sn 
condition saturation sn 
show variable means rq true sn saturated 

similarly 

induction generation oe 
definition 
valuation map ae set term variables 

ae valuation ae ae xn ae xn set free variables 
ae valuation ae satisfies oe notation ae ffl oe ae oe barendregt gamma basis ae satisfies gamma notation ae ffl gamma ae ffl oe oe gamma 
basis gamma satisfies oe notation gamma ffl oe ae ae ffl gamma ae ffl oe proposition soundness 
gamma oe gamma ffl oe proof 
induction derivation oe case 
gamma oe follows oe gamma 
trivially gamma ffl oe 
case 
gamma oe direct consequence gamma oe gamma suppose ae ffl gamma order show ae ffl oe 
ae ffl oe ae ffl ae oe oe ae 
ae ae ae oe ae ffl oe case 
gamma oe oe oe oe direct consequence gamma oe oe ih gamma oe ffl oe suppose ae ffl gamma order show ae ffl oe oe show ae oe oe suppose oe 
ae ffl gamma oe ae oe 
ae ae fi ae ae follows saturation oe ae oe theorem strong normalization curry 
suppose gamma 
oe 
strongly normalizing 
lambda calculi types proof 
suppose gamma oe 
gamma ffl oe 
define ae ae ffl gamma holds saturated 
ae ffl oe ae oe sn 
proof sn way simple generalization method proves result 
generalization 
definition 
valuation sat map sat vis set type variables 

valuation sat defines oe type set oe follows ff ff ff oe 
oe ff oe sat oe ff lemma 
valuation sat oe type oe sat 
proof 
lemma sat closed arbitrary intersections 
definition 
ae valuation valuation sat 
ae ffl oe ae oe 
ae writes ae ffl gamma ae ffl oe oe gamma 
gamma ffl oe ae ae ffl gamma ae ffl oe proposition 
gamma oe gamma ffl oe barendregt proof 
proposition induction derivation gamma oe 
new cases corresponding rules 
case 
gamma oe oe oe ff direct consequence gamma ff oe ih gamma ffl ff oe suppose ae ffl gamma order show ae ffl oe ff 
ae ff oe sat oe ff ae oe ff done oe ff oe ff ae proved induction oe type care needed case oe fi case 
gamma oe oe ff oe ff fv gamma direct consequence gamma oe ih gamma ffl oe suppose ae ffl gamma order show ae ffl ff oe ff fv gamma sat ae ff ffl gamma ae oe ff sat ae ff oe ae ffl ff oe theorem strong normalization curry 
gamma oe strongly normalizing 
proof 
similar proof theorem proof sn follows pattern essential difference 
proof sn 
formalized lambda calculi types peano arithmetic 
shown girard proof sn formalized strong system mathematical analysis second order arithmetic see girard 

reason sn implies peano arithmetic consistency godel second incompleteness theorem applies 
attempt formalize proof sn breaks point trying formalize predicate oe 
problem sat third order predicate 
property sn hold systems 
obvious lambda terms typed systems 
restriction satisfy sn 
gamma system type constant 
result interesting characterization strongly normalizing terms 
theorem van bakel krivine 
typed gamma strongly normalizing 
proof 
see van bakel theorem krivine 
decidability type assignment various systems type assignment questions may asked 
note gamma fx oe xn oe gamma oe oe xn oe oe oen oe taken gamma 
typical questions 
oe oe 

exists oe oe 

oe exists oe 
problems called type checking typability inhabitation respectively denoted oe oe 
subsection decidability problems examined various systems 
results summarized follows barendregt decidability type checking typability inhabitation oe 

oe 

remarks 
system mentioned 
question marks indicate quote robin milner embarrassing open problems 
partial results concerning related systems see pfenning giannini ronchi henglein kfoury 

shown decidability type checking implies typability 
generally believed problems undecidable 
question trivially decidable simply property holds 
write 
example term type 
reason interesting ask terms typable weaker system gamma theorem question equivalent strong normalization undecidable 
show decidability questions 
occupies items type 
curry definition 
operation oe 
oe 
write oe oe 
usually substitution finite support finitely type variables ff ff ff support sup fff ff ffg lambda calculi types case write oe oe ff ff ff ff fff ff ng support write ff ff ff ff definition 
oe unifier oe oe 
general unifier oe oe oe ffi 
foe oe ng finite set equations types 
equations need valid 
unifier oe delta delta delta oe case writes similarly defines notion general unifier examples 
types fi ff fi fl fl ffi unifier 
example fi fl fl ffi ff fl fl fi fl fl ff ffi fl fl 
unifier general 
definition 
oe variant oe oe example 
ff fi fi variant fl ffi ffi ff fi ff note general unifiers say oe oe oe variants similarly result due robinson states unifiers constructed effectively 
theorem unification theorem 

recursive function having coding input pair types output fail oe unifier oe general unifier barendregt oe oe unifier oe fail 
coding recursive function having input finite sets equations types output fail unifier general unifier unifier fail proof 
note oe oe holds iff oe oe hold 

define oe recursive loop case distinction 
ff ff ff fv id identity ff fail oe oe ff ff oe oe oe oe oe oe oe ffi oe expression considered fail parts var oe number variables oe 

oe number arrows oe 
induction var oe 
oe ordered lexicographically show oe defined 
satisfies specification 

foe oe ng define oe oe oe delta delta delta oen delta delta delta see section klop chapter handbook unification 
theorem essentially due wand simplifies proof decidability type checking typability 
proposition 
basis gamma term oe fv dom gamma finite set equations gamma oe gamma oe gamma oe lambda calculi types gamma oe gamma oe effect type variables gamma oe 
proof 
define gamma oe induction structure gamma oe foe gamma gamma mn oe gamma ff oe gamma ff ff fresh variable gamma oe gamma fx ffg fi fff fi oeg ff fi fresh 
induction show generation lemma hold 
definition 
gamma oe principal pair pp gamma oe 
gamma oe gamma gamma oe oe 
fx oe fx oe 
closed 
oe principal type pt oe oe oe oe 
note gamma oe pp variant gamma oe gamma oe obvious sense pp conversely gamma oe gamma oe pp gamma oe variant gamma oe 
similarly closed terms pt 
gamma oe pp fv dom gamma 
result independently due curry hindley milner 
shows problems type checking typability decidable 
theorem principal type theorem curry 

exists coding recursive function pp type pp gamma oe gamma oe pp barendregt type pp fail 
exists coding recursive function pt closed terms type pt oe oe pt type pt fail proof 

fv fx xng set gamma fx ff xn ff oe fi 
note type gamma oe gamma oe gamma oe gamma oe define pp gamma oe gamma oe fail gamma oe fail 
pp satisfies requirements 
type gamma oe defined gamma oe proposition 
show gamma oe pp suppose gamma oe gamma gamma fv write gamma gamma oe oe gamma oe proposition acting gamma oe gamma oe 
general unifier proposition ffi gamma gamma gamma gamma gamma oe oe oe oe type gamma oe gamma oe fail pp 
closed pp gamma oe 
gamma put pt oe 
lambda calculi types corollary 
type checking typability decidable 
proof 
type checking oe 
oe oe pt decidable seen algorithm pattern matching similar theorem 
question typability 
type iff pt fail 
theorem 
inhabitation problem 
oe decidable property oe 
proof 
corollary oe inhabited curry oe inhabited church oe provable prop prop minimal intuitionistic proposition calculus connective oe considered element prop see section 
finite kripke models shown statement decidable 
statement decidable 
proof mention result hindley 
theorem second principal type theorem curry 
type oe exists basis gamma term gamma oe pp consider 
situation follows 
question type checking typability decidable open 
result 
proposition 
problem typability reduced type checking 
particular oe oeg decidable fm oe oeg decidable 
proof 
oe oe xy ff ff implication obvious xy oe ff ff oe 
implication follows proposition 
theorem 
inhabitation problem undecidable 
barendregt proof 
show oe inhabited curry oe inhabited church oe provable prop prop constructive second order proposition calculus 
lob proved property undecidable 
proposition 

type checking decidable 

typability trivially decidable term type 

inhabitation problem trivially decidable types inhabited 
proof 

see coppo appear method fact oe decidable 

oe ff ff ff 
type oe see example 
types inhabited omega see 
lemma 
gamma system type assignment satisfies subject conversion gamma gamma oe fi gamma gamma oe 
suppose closed terms type ff ff 
problem type checking undecidable 

suppose terms type terms 
problem typability undecidable 
proof 

set oe oeg decidable fm ff ffg 
set assumption closed non trivial contradicting scott theorem 

similarly 
lambda calculi types proposition 

type checking problem undecidable 

typability trivially decidable terms type 
proof 

lemma applies fact ff ff exercise 

known inhabitation decidable 
lemma 
gamma systems la curry 

gamma gamma oe 
fi gamma gamma oe 

oe inhabited gamma oe inhabited gamma 
proof 

trivial 
fi implies fi 
induction derivation oe 
interesting case applied rule application rule eq 
oe oe induction hypothesis says 
fi gamma gamma oe 
church rosser theorem common reduct say subject reduction theorem gamma gamma oe done 


proposition 
systems gamma 
type checking undecidable 

typability undecidable trivially decidable 
status inhabitation problem gamma gamma 
proof 

definition subject conversion holds systems gamma systems ff ff 
lemma exercise follows lemma applies 

theorems terms nf type 
lemma terms type barendregt systems terms having type lemma applies 
terms type 

lemma 
lemma 
term nf 
gammaa oe gamma oe proof 
induction derivation 
proposition 
systems gamma situation follows 
problem type checking undecidable systems 
problem typability undecidable system trivially decidable systems terms typable 

problem inhabitation trivially decidable systems including rule types inhabited 
proof 

lemma exercise ff ff 
applies 

similarly 

inhabitation problem trivial systems omega oe types oe 
follows example facts yi fi omega gamma closed rule eq 
results concerning decidability type checking typability inhabitation summarised table subsection 
lambda calculi types typing la church section systems typed lambda calculus described uniform way 
church versions systems encountered curry style 
collection la church called cube 
cornerstones cube essentially system family automath languages de bruijn 
cube forms natural fine structure calculus constructions coquand huet organized possible dependencies terms types 
done 
description method systems cube generalized subsection obtaining called pure type systems ptss 
preliminary versions chapter ptss called generalized type systems 
elementary properties pts derived 
subsection shown terms systems cube strongly normalizing 
turns generally true pts 
subsection cube logical systems described 
logical system corresponds systems cube 
sentences gamma gamma depends similarity type language canonical interpretation term uniformly proof map gamma called types interpretation 
turns logical systems described ptss way propositions type interpretation simple forgetful map logical cube cube 
application propositions types interpretation represent natural way data types 
data types correspond inductively defined sets naturally represented secondorder predicate logic systems logical cube 
means map predicate proposition logic types interpretation obtains interpretation data types 
cube typed lambda calculi subsection introduce uniform way typed lambda calculi 
system 
called 
systems form cube follows barendregt 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma fig 

cube 
edge represents inclusion relation 
cube referred cube 
system simply typed lambda calculus encountered section 
system polymorphic second order typed lambda calculus essentially system girard system introduced independently reynolds 
curry version introduced section 
system essentially system 
girard 
system reasonably corresponds systems family automath languages see de bruijn 
precise formulation automath systems ptss see subsection system appears name lf harper 

system studied longo moggi name 
system 
versions calculus constructions introduced coquand huet 
system related system studied de 
system 
studied 

read weak weak respectively 
seen section system la curry 
curry version appears giannini ronchi similar probably done 
hand natural curry versions systems 
possible 
systems la church introduced usual way 
defined 
cube defined lambda calculi types uniform way systems turn equivalent 
church system introduced subsection repeat definition stylistic way setting example definition systems 
definition 
system church consists set types type set pseudoterms set bases conversion reduction relation type assignment relation 
sets tand defined syntax bases defined explicitly conversion relation defined contraction rule defined deduction system follows 
types vj 
pseudoterms 
bases gamma fx xn distinct 
contraction rule fi 
type assignment gamma defined follows 
start rule gamma gamma elimination gamma gamma gamma mn gamma gamma remarks 
character syntactic category type variables 
similarly character denotes category term variables 
letter denotes arbitrary term variable 
xn distinct term variables 
letters denote arbitrary types arbitrary pseudoterms 
basis gamma stands gamma fx ag necessary variable occur gamma 
called legal gamma gamma barendregt typical examples type assignments 
system type term constants officially introduced chapter 
useful axiomatic extensions certain terms types play special role 
simulate constants variables 
example may select type variable term variables oe oe tas constants postulates initial context 
oe oe oe oe oe extends definitional equality adding fi contraction rule contraction rule oe oe mn oe mn sx oe extension called godel theory primitive recursive functionals godel 
type stands natural numbers element successor function oe stand recursion operator creating recursive functionals type oe spite name just primitive recursive functions representable 
recursion allowed higher functionals see barendregt appendix 
analysis 
church definition 
system church defined follows lambda calculi types 
types vj tj vt 
pseudoterms tj 
bases gamma fx xn distinct 
contraction rules fi ff fi ff 
type assignment gamma defined follows 
start rule gamma gamma elimination gamma gamma gamma mn gamma gamma elimination gamma ff gamma mb ff gamma ff fv gamma gamma ff ff typical assignments ff ff ff ffa ff ff ff ff ffa ff ffa ff ab course reduction holds ffa ff ab fia ff ff ff ff fi fi ff ff fi ffor example think twice see correct simpler term type fia ff ff afi fi ff ff fi proof mention church rosser property holds reduction pseudoterms 
barendregt dependency types terms mutually dependent terms depending terms terms depending types types depending terms types depending types 
sorts dependency seen 
fm fm term depending term 
saw ff ff ff type ga ffa ff ga term depending type function abstraction dependencies 
examples fm ff gff ff ff ff shall define systems types fa fm resp depending types respectively terms 
function abstraction dependencies types depending types system natural example type depending type ff ff depends ff 
fact natural define ff ff ff ff ff ff 
possible system 
feature types generated system informal metalanguage 
constant oe corresponds oe informal statement ff fi ff fi formal ff fi ff fi write ff ff ff 
question arises lives 
level terms types 
new category kinds introduced constant introduced corresponds called lambda calculi types constructor kind see ff ff ff constructor kind 
element constructor kind types terms kept separate consider subsets general set pseudo expressions 
preparation essential types terms mixed 
definition types terms 

set pseudo expressions defined follows infinite collection variables constants 

constants elements selected names called sorts main reason introduce constants 
types terms come set definition statement modified accordingly 
bases linearly ordered 
reason wants derive ff ff ff ff ff ff ff ff ff ff ff ff ff ff occurs free bound 
definition contexts 

statement form 
context finite linearly ordered set statements distinct variables subjects 
gamma delta range contexts 

denotes empty context 
gamma xn 
gamma xn 
definition typing rules 
notion gamma 
defined axiom rules 
letter ranges barendregt axiom 
start rule gamma gamma gamma weakening rule gamma gamma gamma gamma type kind formation gamma gamma gamma application rule gamma gamma gamma fa abstraction rule gamma gamma gamma conversion rule gamma gamma fi gamma example 
ff fi 
ff fi ff fi ff fi 
ff fi ff fi 
ff fi ff fi ff fi write fi fi fi hold 
ff 
dff dff types depending terms system intuitive example type depending term natural number 
order formalize possibility dependent types system notion kind extended type kind kind 
particular 
kind 

fa fa term dependent type 
function abstraction dependency 
lambda calculi types idea important system dependent types formation cartesian products 
suppose type element may want form function type cartesian product pia 
product types allowed function space type written pia informally variable occurring analogous fact product equal numbers power provided products type constructor eliminated 
definition types terms 

set pseudo expressions notation defined follows piv collection variables constants 
distinction type term variables 

constants elements called definition assignment rules 
statements contexts defined 
statements form contexts finite linearly ordered statements 
barendregt notion defined axiom rules 
letter ranges axiom 
start rule gamma gamma gamma weakening rule gamma gamma gamma gamma type kind formation gamma gamma gamma pix application rule gamma pix gamma gamma fa abstraction rule gamma gamma pix gamma pix conversion rule gamma gamma fi gamma typical assignments pa pa pia 
ax pia pa pragmatics systems introduced de bruijn order represent mathematical theorems proofs 
method follows 
assumes set prop propositions closed implication 
done context gamma defined prop imp prop prop prop write oe imp 
order express proposition valid variable prop 
declared prop defined valid lambda calculi types inhabited order express implication right properties assumes oe oe oe oe oe oe representation implicational proposition logic wants context gamma prop consisting gamma followed prop 
oe pi prop pi prop oe oe pi prop pi prop oe example want formulate oe valid propositions 
translation type oe inhabited gamma prop oe oe note having formalized valid statements de bruijn realized tiresome carry proposed prop constructor oe identity oe xy oe way fragment constructive predicate logic interpreted 
predicate set type represented defines pa valid inhabited 
quantification px translated pix formula pxy seen valid translation inhabited pix piy xy pix piy xy pix xx system name predicate logic interpreted 
method interprets propositions formulas types proofs inhabiting terms basis languages family automath designed implemented de bruijn coworkers automatic verification proofs 
similar projects inspired barendregt automath described constable nuprl harper lf coquand huet calculus constructions 
project lf uses interpretation formulas prop 
original automath 
martin lof proposition paradigm formulating results foundation mathematics 
cube introduce cube systems typed lambda calculi 
called cube forms natural framework known systems la church including uniform way 
provides calculus constructions strongest system cube 
differentiation systems obtained controlling way abstractions allowed 
systems cube original version equivalent variant 
known systems versions cube essence equivalent original ones 
point choices precise formulation systems cube choices uniformly 
definition systems cube 

systems cube set pseudo expressions defined syntax 
piv infinite collections variables constants respectively 
distinction type term variables 

notions fi conversion fi reduction defined contraction rule 
statement form subject predicate declaration form variable 
pseudo context finite ordered sequence declarations distinct subjects 
empty context denoted 
gamma 
xn gamma 
xn usually write 
lambda calculi types 
rules type assignment axiomatize notion gamma stating derived pseudo context gamma case called legal expressions gamma legal context 
rules groups general axiom rules valid systems cube specific rules differentiating systems parametrized pi rules 
constants selected names constants called sorts 
range systems cube 
general axiom rules 
axiom 
start rule gamma gamma gamma weakening rule gamma gamma gamma gamma application rule gamma pix gamma gamma fa abstraction rule gamma gamma pix gamma pix conversion rule gamma gamma fi gamma 
specific rules rule gamma gamma gamma pix barendregt pseudo terms arbitrary variables 

systems cube defined general rules plus specific subset set rules system set specific rules 
cube usually drawn standard orientation displayed follows inclusion relations left implicit 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma 
systems cube appear literature variant form 
lambda calculi types system related system names simply typed lambda calculus church barendregt appendix hindley seldin ch 
order typed lambda calculus girard reynolds 
aut qe lf de bruijn harper 

longo moggi 
de 
girard 
cc calculus constructions coquand huet 
remarks 

expression piff ff ff cartesian product types type piff ff ff product possible types ff including 
piff ff ff types essential impredicativity 

note sense terms depending types types depending types term depending type type depending type function abstraction dependencies 
note 
types depending terms 
types 
righthand side cube essentially difficult left hand side mixture types terms 
versions definition cube want explain cube essentially systems name defined respectively 
barendregt definition 
systems cube notation pix fresh lemma 
consider cube 
gamma system built set fb gammag 
defined 
proof 
induction generation 
notice application rule implies elimination rule gamma pix gamma gamma fa occur follows cube derives derivable system defined 
similarly shows variants defining cube ff piff ff ff course greek letter ff suggestive bound variable name irrelevant 
derivable type assignments cube subsection giving examples type assignment systems cube 
examples essentially repeated new style systems 
reader invited carefully study examples order gain intuition systems cube 
examples followed comment fin curly 
order understand intended meaning systems right plane cube rule pair elements considered sets propositions 
examples show systems cube related logical systems form preview propositions type interpretation described subsection 
names lambda calculi types variables chosen freely roman greek letters order follow intended interpretation 
notation gamma stands conjunction gamma gamma examples 

derived pix pix pix ab 
derived ff ff ff ff ff ff piff ff ff ff ff ff ff ab course reduction holds ff ff ab 
examples show connection second order proposition logic 
fi piff ff piff ff fi piff ff fi ffor example think twice see correct simpler term type write piff ff second order definition fi afi fi fthe type considered proposition says ex sequitur follows false statement term type proof 
derived barendregt ff ff ff 
ff ff ff constructor mapping types fi ff ff ff fi fi fi fi ff ff ff fi fi type fi fi ff 
fff ff fff 
fin way higher order constructors 
derived fif type considered set 
kind predicates ag pa fif set predicate pa type considered proposition true inhabited false pia aa fif binary predicate set paa pia qa proposition states predicate considered set included predicate qg pia pa proposition states reflexivity ax pia pa fthe subject assignment provides proof reflexivity pia pia pa pia pia xa ya lambda calculi types pix pia piy pia pia pia pa proposition states proposition pa pa true non empty structures notice lay explains functioning type assignment subject proof previous true proposition note context assumption needed proof 
derived 
ff fi ff fi fl fl ff fi ff fi second order definition definable ff fi ff fi ff fi fi piff ff fi ff ff fi derived term ff fi xff ff fthe subject proof ff 
second order predicate derived 
pa 
pia pib ab ba 
pia aa fthe proposition states binary relation asymmetric 

derived 
aa barendregt constructor assigns binary predicate diagonalization aa pia pip pia fthe done uniformly ag 

derived 

pia constructor assigns type predicate negation pg pia ap fi pia quantification done exercise 

define ff ff construct term ff fi ff fi fi ff 
find expression pia pib ab pba pia paa 
find term pa pure type systems method generating systems cube generalized independently berardi 
resulted notion pure type system pts 
systems typed lambda calculus la church seen ptss 
subtle differences systems described neatly notation ptss 
successes notion pts concerned logic 
subsection cube logical systems introduced lambda calculi types close correspondence systems cube 
result called propositions types interpretation 
observed berardi logical systems described pts way propositions types interpretation obtains canonical simple form 
reason introducing ptss propositions systems cube needed 
general setting ptss nicer give required proofs 
results subsection taken form geuvers nederhof serve preparation strong normalization proof section 
pure type systems set pseudo terms cube 
repeat syntax jv piv definition 
specification pts consists triple 
subset called sorts 
set axioms form 
set rules form useful divide set variables disjoint infinite subsets sort fv sg 
members denoted 
arbitrary variables denoted necessary writes indicate version introduced understood ranging ff fi fl reasons hygiene useful assume occur pseudo term case simple renaming establish 
definition 
pts determined specification notation defined follows 
statements contexts barendregt defined cube 
notion type derivation gamma just write gamma defined axioms rules axioms start gamma gamma gamma weakening gamma gamma gamma gamma product gamma gamma gamma pix application gamma pix gamma gamma fa abstraction gamma gamma pix gamma pix conversion gamma gamma fi gamma conventions 
ranges set sorts ranges variables 
proviso conversion rule fi priori decidable 
replaced decidable condition fi fi changing set derivable statements 
definition 
rule abbreviation 
cube systems rules simpler form 

pts called full lambda calculi types sg examples 
pts determined specifications follows 

full pts 
variant full pts pairs 
pts determined 
variant called barendregt appendix pts determined barendregt difference type variables possible constant types 

system sort types including specified subsection shown system inconsistent sense types inhabited 
result known girard paradox 
may think result caused circularity girard showed system inconsistent sense see section 
delta delta delta delta 
geuvers 
system higher order logic church described pts see 
hol delta delta 
van benthem jutting 
far rules form 
members automath family see van de bruijn described ptss rules 
sort delta serves parking place certain terms 
aut delta delta delta delta delta delta delta delta system strengthening powerful contexts 
aut qe delta delta delta delta delta delta delta lambda calculi types system corresponds pal delta delta delta delta delta delta delta delta delta system subsystem 
interesting conjecture de bruijn states mathematics year formalized pal 
subsection encounter rules form order represent order higher order functions 
properties arbitrary ptss state prove elementary properties ptss 
notions context derivability refer arbitrary pts 
results taken geuvers nederhof 
notation 
gamma means gamma gamma 
delta un bn 
gamma delta means gamma gamma un bn definition 
gamma 

gamma called legal gamma 
called gamma term gamma gamma 
called gamma type gamma 
gamma called gamma type sort 
called gamma element gamma 
gamma called gamma element type sort 
called legal gamma gamma gamma definition 
gamma xn delta ym bm pseudo contexts 
barendregt 
statement gamma notation gamma 
gamma part delta notation gamma delta gamma delta 

restriction gamma notation gamma gamma gamma 
gamma initial segment delta notation gamma delta gamma delta lemma free variable lemma pts 
gamma xn legal context say gamma hold 

xn distinct 

fv fv fx xng 
fv fx gamma proof 

induction derivation gamma lemmas show legal contexts behave expected 
lemma start lemma pts 
gamma legal context 

axiom gamma 
gamma gamma proof 

assumption gamma result follows induction derivation gamma lemma transitivity lemma pts 
gamma delta contexts gamma legal 
gamma delta delta gamma proof 
induction derivation delta treat cases case 
delta 
axiom 
start lemma gamma gamma legal 
note trivially gamma needs postulate gamma legal 
case 
delta delta pix direct consequence delta delta 
may lambda calculi types assumed occur gamma 
write gamma gamma induction hypothesis gamma gamma delta gamma product rule gamma pix gamma lemma substitution lemma pts 
assume gamma delta gamma gamma delta proof 
induction derivation 
treat cases 
write 
case 
rule obtain start rule 
subcase 
delta 
step derivation gamma gamma subcase 
show gamma holds assumption 
subcase 
delta delta step derivation gamma delta gamma delta show barendregt gamma delta follows directly induction hypothesis gamma delta case 
applied rule obtain application rule gamma delta piy gamma delta gamma delta induction hypothesis gamma delta piy gamma delta gamma delta substitution lemma terms gamma delta lemma thinning lemma pts 
gamma delta legal contexts gamma delta 
gamma delta proof 
induction length derivation gamma treat cases 
case 
gamma axiom 
start lemma delta case 
gamma gamma pix follows gamma gamma ih delta may assumed occur delta follows delta delta legal 
ih delta delta pix result analyses type assignment gamma obtained variable constant application abstraction pi abstraction 
lambda calculi types lemma generation lemma pts 
gamma fi axiom gamma fi gamma gamma gamma pix gamma gamma fi gamma gamma pix gamma fi pix gamma fa gamma pix gamma fi proof 
consider derivation gamma cases 
rules weakening conversion change term follow branch derivation term introduced time 
done ffl axiom ffl start rule ffl product rule ffl application rule ffl abstraction rule 
case axiom rule gamma gamma gamma fi statement lemma follows inspection axiom rule thinning lemma corollary states gamma term sort gamma type gamma element 
note classes sorts gamma types gamma elements overlap 
example context gamma ff ff ff gamma type gamma element gamma ff ff ff gamma ff ff follows subexpressions legal terms legal 
subexpressions defined usual 
sub iff sub sub set subexpressions defined follows 
sub fag constants including sorts variables fag sub sub form pix pq 
barendregt corollary 


gamma gamma 
gamma pix gamma gamma 
gamma term sort gamma type gamma element 

legal sub legal 
proof 

induction derivation gamma 
generation lemma notice pix 
distinguishing cases gamma gamma 
legal 
definition gamma gamma gamma case hold follows legal 
suppose gamma follows induction structure generation lemma subterm legal 
theorem subject reduction theorem pts 
gamma 
fi gamma proof 
write gamma 
fi gamma iff gamma xn gamma xn consider statements gamma fi gamma gamma gamma fi gamma gamma ii proved simultaneously induction generation gamma treat cases 
case 
applied rule product rule 
gamma gamma pix direct consequence gamma gamma rule 
ii follow ih ii ii respectively 
case 
applied rule application rule 
gamma gamma direct consequence gamma pix gamma correctness ii lambda calculi types follows directly ih 
corollary follows sort gamma pix generation lemma gamma gamma follows substitution lemma gamma subcase 
ih application rule give gamma conversion rule gamma gamma subcase 

gamma pix gamma generation lemma applied get gamma gamma gamma pix pix rule 
church rosser property obtain barendregt follows conversion rule gamma substitution lemma gamma conversion rule obtain gamma gamma corollary 


gamma 
fi gamma 
gamma term 
fi gamma term 
proof 

gamma corollary gamma sort case done 
second case subject reduction theorem gamma conversion rule gamma 

result proved van benthem jutting extending nontrivial way result luo particular type system 
proof arbitrary ptss somewhat involved 
lemma condensing lemma pts 
pts gamma delta delta gamma delta delta means free delta corollary decidability type checking typability normalizing pts 
finite pts lambda calculi types weakly normalizing 
questions type checking typability sense subsection decidable 
proof 
proved van benthem jutting corollary method lemma result 
hand meyer shows questions decidable 
consider results hold special pts 
definition 
pts 
called singly sorted 

examples 

systems cube singly sorted 

pts specified delta delta singly sorted 
lemma uniqueness types lemma singly sorted pts 
singly sorted 
gamma gamma fi proof 
induction structure treat cases 
assume gamma case 
constant 
generation lemma follows axiom 
assumption singly sorted conclude barendregt case 
pix generation lemma follows gamma gamma gamma gamma rules 
induction hypothesis follows fact singly sorted conclude corollary 
singly sorted pts 

suppose gamma gamma fi fi 
suppose gamma fi gamma gamma proof 

fi church rosser theorem 
fi 
fi subject reduction theorem gamma gamma uniqueness types fi 
assumption corollary follows gamma sort case 
gamma common reduct follows subject reduction theorem gamma gamma uniqueness types gamma case 

fi subject reduction gamma gamma introduce classification pseudoterms useful analysis legal terms systems cube 
definition 
map defined follows arbitary say pix ba value called degree lambda calculi types shown systems cube gamma 
folklore result automath systems proof due van benthem jutting 
lemmas 
lemma 
systems cube 
gamma 
gamma ab 
gamma proof 

induction derivations shows gamma 
similarly shows gamma ab treat case application rule 
gamma pix gamma gamma ab gamma pix generation lemma gamma gamma substitution lemma gamma follows 
gamma generation lemma pix fi contradicting church rosser theorem 
lemma 

gamma 
gamma proof 

induction derivations 

similarly 
treat cases turn impossible 
case 
abstraction rule barendregt gamma gamma pix gamma pix ih generation lemma follows gamma impossible 
case 
conversion rule gamma gamma fi gamma ih 
fi subject reduction gamma contradicts 
lemma 


proof 
induction structure definition 

statement ok 
statement hereditarily ok notation ok occurring just symbol pi ok proposition 
gamma statements gamma 
proof 
induction derivation gamma treat cases 
case 
axiom 
statement 
case 
start rule 
suppose statements gamma 
gamma gamma gamma 
case 
application rule 
suppose statements gamma pix gamma 
show fa 
statement ok pix lemma fact ok 
statement parts occur gamma pix case 
conversion rule 
suppose statements gamma gamma fi show lambda calculi types follows done 
lemma gamma subcase 
lemma subcase 
gamma lemma ok 
ok 
corollary 
gamma proposition 

legal 

legal 
fi proof 

corollary gamma gamma generation lemma follows gamma pix gamma gamma pix fi pix fi church rosser theorem 
conversion rule gamma ok ok follows 

induction generation 
fi lemma 
show pts extending type piff ff inhabited non normalizing terms 
knows system normalizing case implies inhabited 
hand pts type inhabited case typable terms normalizing 
proposition 
pts extending 
suppose 
normal form 
barendregt proof 
suppose contradiction nf subject reduction theorem 
generation lemma constant term starting pi kinds terms belong sort sort 
variable context empty 
suppose application write application anymore 
reasoning variable term starting pi 
contains redex contradicting fact nf 
application 
remaining possibility starts generation lemma constant term starting pi remaining possibility xc 
implies contradiction 
sets disjoint 
strong normalization cube recall pseudo term called strongly normalizing notation sn infinite reduction starting definition 
pts 
strongly normalizing notation ffl sn legal terms sn gamma sn sn subsection proved systems cube satisfy sn 
sufficient show ffl sn 
proved coquand 
follow proof due geuvers nederhof modular proved ffl sn ffl sn ffl sn proof due girard direct generalization proof ffl sn subsection 
proof relatively simple ingenious carried higherorder arithmetic 
hand proof carried peano arithmetic 
consequence ffl sn ffl sn provably equivalent peano arithmetic fact shown berardi proof theoretic methods 
proof geuvers lambda calculi types nederhof uses translation preserving reduction 
translation inspired proof harper 
showing ffl sn ffl sn similar translation 
proved 
proof technical readers may skip reading chapter 
proof ffl sn ffl sn proof occupies 
partial maps defined 
extended contexts proved gamma gamma 

fi 

means 
fi reduction step 
assuming ffl sn gamma sn sn difficult show 
implies done corollary follows gamma sn order fulfill program partial map ae needed 
definition 
write fm ig similarly defined 

uses terminology 
kind gamma gamma constructor gamma gamma type gamma gamma object gamma gamma note types constructors legal kind constructor type object legal iff barendregt definition 
map ae defined follows ae ae ae pix ae ae ae ae ae ae ba ae clear ae defined fv ae lemma 
gamma 
ae 

ae ae 
legal 
fi ae ae 
gamma 
fi ae ae proof 

induction generation treat cases 
case 
gamma gamma follows directly gamma gamma induction hypothesis 
ae case 
gamma gamma follows directly gamma pix gamma impossible lemma gamma impossible 

induction structure 
induction relation proposition case 

special variable definition order define required map canonical constants types needed 
reason fixed context gamma introduced follows type inhabitant 
lambda calculi types definition 
gamma context pix 
gamma 
defined cb 

gamma 
defined inductively follows note follows generation lemma define lemma 
gamma 
gamma gamma 
proof 
cb clearly holds 
result follows induction definition 
map defined follows 
pix pix ae 
pix ae ba 

map extended pseudo contexts follows 
ae gamma xn pseudo context 
gamma gamma induction structure follows defined fv barendregt lemma 


legal 

proof 

induction structure lemma 

induction generation 
treat case 
generation lemma follows gamma case second case ae 
lemma 
gamma gamma gamma 
ae proof 
induction proof gamma treat cases 
case 
gamma gamma follows gamma gamma weakening rule 
ih gamma 
ae gamma 
show gamma 
ae follows ih weakening 
ae follows lambda calculi types ih weakening twice 
note case gamma lemma 
ae case 
gamma gamma pix follows gamma pix gamma assumption theorem subcase 

ih follows things gamma 
pix ae 
gamma ae 
ae show gamma 
ae ae ae occur ae closed 
substitution lemma context gamma gamma gamma ae 
ae gamma 
ae pix ae ae ae ae ae pix ae closed 
subcase 

similarly 
case 
gamma gamma pix follows directly gamma gamma subcase 
ih states gamma 
gamma 
show gamma 
pix follows immediately ih 
barendregt subcase 
ih states gamma 
gamma ae 
show gamma 
pix ae 
follows ih fact fresh variable occur third partial map pseudo terms defined 
definition 
map gamma defined follows 
remember context gamma 
defined expressions gamma gamma gamma pix ae ae ba fresh 
proposition 
gamma gamma 
proof 
induction derivation treat cases 
case 
gamma gamma pix follows gamma gamma ih gamma 
gamma 

lemma gamma 
gamma 
lambda calculi types gamma gamma 
substitution lemma gamma 
application rule twice gamma 
gamma gamma ae substitution lemma gamma 
ae application rule twice gamma 
ae cases gamma 
pix case 
gamma gamma pix follows gamma gamma pix generation lemma church rosser theorem sort gamma gamma ih gamma 
gamma 
lemma gamma 
gamma 
gamma gamma barendregt applications abstraction rule application product rule obtains gamma 

similar argument shows gamma 
ae pix ae 
cases gamma 
pix lemma 


proof 

induction structure treat case piy write 
piy piy induction hypothesis substitution lemma fact 
similarly convention hygiene definition 
lemma 


denotes reduction takes step 
lambda calculi types proof 
induction generation treat case 
ae 
theorem 
ffl sn ffl sn 
proof 
suppose ffl sn 
legal term 
corollary sufficient assume gamma order show sn 
consider reduction starting delta delta delta gamma gamma 
proposition 
lemma 

legal term sequence finite 
corollary berardi 
ha system intuitionistic arithmetic prove ffl sn ffl sn proof 
implication trivial 
inspecting proof verified formalizable ha 
corollary proved berardi proof theoretic methods 
proof geuvers nederhof gives direct argument 
barendregt proof ffl sn occupies 
result proved steps 
map gamma defined gamma 
sn jaj 
gamma 
sn 
gamma 
sn 
gamma 
sn 
gamma 
sn sn definition 
map gamma defined follows xj jx bj jbj jbj jbj pix bj jbj clause essentially legal terms pix degree 
typical examples gamma 
jx ff xj jff ff xj ff yj ff ff fij lemma shows kinds exist kinds objects lemma 
set pseudo terms defined syntax 
gamma 

gamma 
contain 
gamma 

gamma 
nf 
lambda calculi types proof 
induction derivations 
lemma 
gamma 
terms legal fi proof 
suppose legal fi church rosser theorem 
fi step reduction fi case 
impossible 
case 
legal gamma gamma contradiction 
gamma 
defined similarly contradiction obtained 
case gamma pix gamma pix proved gamma 
sn jaj 
proof related section 
proof complicated carried higher order arithmetic pa girard shows sn 
implies con pa second incompleteness theorem applies 
zf set theory 
large set 
syntax coded arithmetic set natural numbers set terms subset closed operations powerset function spaces syntactic operations 
ff usual set theoretic hierarchy defined ff ff ff ff ordinal definition 

valuation map ae 
valuation ae map gamma ae fug defined follows remember ff fm sat fx 
ae ae sat ae ae barendregt pix ae ae ae ae ae ae ae ae ae ae ae ae ba ae ae ae ae ae ae 
comment 
clauses definitions pix ae ae ba ae syntactic operation coded set theory 
defined extended sets abstraction application syntactic operations extended 
second clauses set theoretic operations function spaces lambda abstraction function application 
third clause definition pix ae essential impredicativity girard trick occurs pix ae fixed ae defined terms ae arbitrary ae 
fourth clauses essentially 
definition 
ae valuation 
ffl ae ffl ae ae ffl ae ffl gamma ae ffl gamma ffl gamma ffl ae ae ffl gamma ae ffl lemma 
ae valuation ae ffl gamma 
assume legal 
ae jaj ae 
assume 
lambda calculi types ae ae ae 
legal 
suppose 
ae ae 
legal 
ae fi ae ae proof 

induction structure 
induction structure 
induction structure 
show legal 
fi ae ae proposition 
gamma 
gamma ffl proof 
induction derivation proofs familiar details left reader 
corollary 

gamma 
sn jaj 
gamma 
sn sn 
proof 
kind canonical element ae defined 
sn assume gamma define ae ae gamma ae gamma dom gamma barendregt ae ae ffl gamma gamma gamma ae ae sat ae ae definition saturation gamma ae ffl ae ae 
ae ae sat jaj ae ae sn jaj ae sn jaj sn 

jaj sn 
follows sn legal terms 
fi jaj 
fi ja true example ff ff ff fi 
fi fi fi absolute values previous result derive constructors strongly normalizing interpreting kinds constructors respectively types elements 
kind translated fixed 
examples give intuition 
valid translation valid ff fi ff 
ff 
fff fff fa fa ff fi ff 
definition 
map gamma defined follows gamma gamma gamma ba gamma gamma gamma gamma lambda calculi types gamma gamma gamma gamma gamma pix gamma pix gamma gamma gamma gamma gamma gamma gamma gamma gamma 
pseudo contexts defines remember gamma 
gamma gamma gamma xn gamma gamma gamma xn gamma prove induction derivations gamma 
gamma gamma 
gamma gamma lemma 

gamma gamma gamma gamma 
legal 
fi gamma fi gamma proof 
induction structure proposition 
gamma 
sn proof 
gamma 
gamma gamma gamma gamma sn gamma barendregt sn definition 
legal term 

redex 
redex 
redex 
lambda occurrence redex 
different kinds redexes give rise different notions contraction reduction denoted 
respectively 
note fi reduction reduction obvious sense 
prove fi reduction legal terms sn proving reduction 
lemma 
legal terms 

number number 

number number 



jaj jbj 
jaj 
fi jbj proof 

contracting redex removes removes moves possibly duplications 
part degree 
kind constructor contain objects particular redexes 
removing moving change number result 

similarly 

redex constructor jm jb constructor object occur subterm occurring definition gamma constructors removed jm jb jb conclude jaj jbj lambda calculi types redex contractum constructors 
jaj jbj fact constructors eliminated gamma 
redex contractum jm jb jc jm jb jb jc proved induction structure jm 
fi jm generally jaj 
fi jbj 
lemma 
suppose legal 
strongly normalizing 
reduction 
reduction 
proof 

form pix follows delta delta delta xn yb delta delta delta bm delta delta delta xn delta delta delta bm second case 
redex 
cases reduction starting take place constructors subterms leaving structure 
fi reduction constructors sn follows reduction objects sn 

suppose 

delta delta delta infinite 
follows steps 
delta delta delta impossible 
corollary 
suppose sn jaj 
sn 
barendregt proof 
infinite reduction starting form 





delta delta delta jaj ja 
fi ja ja 
fi ja delta delta delta contradicting sn jaj proposition 
gamma 
sn sn proof 
gamma 
sn jaj sn gamma 
sn 
hand gamma 
sn sn nf 
theorem strong normalization cube 
systems cube 
gamma sn sn 

xn sn 
proof 

sufficient prove strongest system 
done 

induction derivations 
representing logics data types section systems intuitionistic logic introduced correspond sense systems cube 
systems systems proposition logic systems sorted predicate logic 
prop proposition logic prop second order proposition logic prop 
weakly higher order proposition logic prop 
higher order proposition logic pred predicate logic pred second order predicate logic pred 
weakly higher order predicate logic pred 
higher order predicate logic 
systems minimal logics sense logical operators 
second higher order systems lambda calculi types operators leibniz equality definable see 
weakly higher order logics variables higher order propositions predicates quantification higher order proposition lower order propositions arguments 
classical versions logics upper plane obtained easily adding axiom ff ff ff systems form cube shown 

prop 
pred 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma prop pred prop 
pred 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma prop pred fig 

logic cube 
cube referred logic cube 
orientation logic cube drawn called standard orientation 
system logic cube corresponds system cube corresponding vertex cubes standard orientation 
edges logic cube represent inclusions systems way cube 
formula logic logic cube interpreted type corresponding cube 
transition 
called propositions types interpretation de bruijn howard formulated extensions pred method extended martin lof added types sigmax corresponding strong constructive existence constructor corresponding equality type martin lof principal objective give constructive foundation mathematics consider impredicative rules propositions types interpretation satisfies soundness result provable pred inhabited fact barendregt inhabitant canonically proof pred different proofs interpreted different terms type 
interpretation extended systems see martin lof luo 
geuvers verified systems logic cube soundness holds respect corresponding system cube provable inhabited barendsen verifies proof canonically translated inhabitant 
seeing geuvers realized berardi systems logic cube considered ptss 
doing propositions types interpretation obtains simple canonical form 
give description pred usual form form pts 
soundness result propositions type interpretation raises question completeness sense formula logic inhabited provable proposition logics trivially true 
pred completeness respect proved martin lof barendsen geuvers berardi see 
pred 
completeness respect fails shown geuvers berardi 
subsection ends representation data types 
method due leivant coincides algorithm bohm berarducci fokkinga 
results stated representability computable functions data types represented 
sorted predicate logic sorted predicate logic introduced minimal form formulas built atomic ones logical operators 
definition 
notion sorted structure defined example 
sequence typical sorted structure ha ci non empty sets sorts functions theta relations constant 
lambda calculi types name sorts standard terminology context ptss better call types 
signature stating sorts functions signature having input elements sort output element sort second signature having element sort input element second sort output definition 
sorted structure language la minimal sorted predicate logic defined follows 
fact language depends signature 
la special symbols 
ffl sort symbols ffl function symbols ffl relation symbols ffl constant symbol 

set variables la fx fx 
set terms sort sort notation term term respectively defined inductively follows ffl term term ffl term ffl term term term ffl term term 
set formulae la notation form defined inductively follows ffl term form ffl term term form ffl form form form ffl form form form 
definition 
sorted structure 
minimal sorted predicate logic notation pred defined barendregt follows 
delta set formulae delta denotes derivable assumptions delta 
notion defined inductively follows ranges corresponding gamma gamma gamma gamma gamma gamma gamma gamma term gamma gamma fv gamma gamma denotes substitution fv set free variables term formula collection formulae 
writes simply says theorem 
rules remembered best natural deduction form 
term free assumptions examples terms formulae theorems 
expressions term term formulae 
formula theorem 
derivation follows lambda calculi types numbers indicating cancellation assumption 
simpler derivation formula explain somewhat informally propositions interpretation pred needs context corresponding structure gamma defined follows gamma defined bit differently gamma context gamma gamma fcc gamma pix gamma pix gamma pix pix fcc see formulae translated types 
inhabitants somewhat ambivalent behaviour serve sets propositions px 
fact formulae barendregt translated types called propositions types types interpretation 
provability formula corresponds fact type inhabited 
fact gamma pix pix pc qc pip pix pix fcc somewhat simpler inhabitant type corresponding second proof formula pix pix fcc fact result state moment informally fact completely correct 
theorem soundness propositions types interpretation sorted structure formula la suppose pred derivation gamma canonical translations respectively shown isomorphism pred viewed pts 
pts called pred 
map 
factorized composition isomorphism pred pred canonical forgetful homomorphism pred definition berardi 
pred considered pts notation pred determined specification explanations called 
sort sets sorts sorted logic 
sort propositions formulae logic elements 
sort order functions sets sort contains sort contains 
allowed free variables function spaces 
rule allows formation implication formulae lambda calculi types pix rule allows quantification sets pix rule allows formation order predicates pix px predicate set rule allows formation function space basic sets rule allows formation curried functions arguments basic sets possible example context 
shown formally pred able simulate logic pred 
terms formulae derivations pred translated terms pred 
terms elements formulae types derivation formula element type corresponding definition 

canonical context corresponding notation gamma defined gamma term la canonical translation notation canonical context notation gamma inductively defined follows barendregt gamma hi gamma gamma gamma formula la canonical translation notation canonical context notation gamma inductively defined follows gamma gamma gamma gamma gamma gamma pix gamma gamma fx cg lemma 
term gamma gamma pred 
form gamma gamma pred proof 
easy induction 
order define canonical translation derivations useful introduce notation 
definition reformulation giving formal notations derivations 
lambda calculi types definition 
pred notion derivation showing delta notation delta defined follows 
delta delta delta delta delta delta delta delta term dt delta delta fv delta gx delta stands projection stands binding effect gx stands generalization binding effect definition 
delta ng form 
canonical translation delta notation gamma delta context defined gamma delta gamma delta delta delta gamma delta delta delta 
delta pred canonical translation notation canonical context notation gamma inductively defined follows gamma hi gamma gamma gamma gamma fx dt gamma gamma gx gamma gamma fx cg result valid structure 
lemma 
delta pred gamma gamma delta gamma gamma pred barendregt proof 
induction derivation pred 
barendsen observed spite lemma general sentence fv pred gamma pred point ordinary minimal intuitionistic classical logic assumed universes sorts structure supposed non empty 
example provable pred valid structures 
socalled free logic allows structures empty domains 
logic axiomatized mostowski 
system pred flexible cover free logic 
extended context gamma explicitly states domains question empty 
definition 
sorted structure extended context notation gamma defined gamma gamma sound interpretation pred pred converse 
order prove completeness lemma due fujita needed 
lemma 
suppose gamma pred sorted structure set formulae delta la formula la derivation gamma gamma gamma delta gamma gamma delta pred proof 
see fujita 
corollary 

formula delta set formulae la delta pred gamma gamma delta gamma gamma pred 
delta set sentences la lambda calculi types delta pred gamma gamma delta pred 
sentence la pred gamma pred proof 

fact gamma injective derivations formulae 

members delta free variables delta pred gamma gamma delta gamma pred statement gamma form gamma delta pred delta pred gamma gamma delta gamma pred gamma gamma delta pred take lemma 

delta established pred pred isomorphic propositions types interpretation pred factorized simple steps pred pred isomorphism pred canonical forgetful map 
definition propositions types interpretation 

define forgetful map gamma term pred term deleting superscripts 




jx xj write gammaj hx ja gamma hx 
signature delta respectively term formula set formulae derivation pred formulated la write barendregt delta gamma gamma delta corollary soundness propositions types interpretation 
gamma pred gammaj jaj jbj 
sentences delta delta pred delta proof 

trivial induction derivations pred 


seen equivalence pred pred systems logic cube described directly pts traditional logical system 
way obtain called cube isomorphic logic cube 
definition 

systems prop prop prop 
prop 
ptss specified follows prop prop prop prop prop 
prop lambda calculi types prop 
prop 
prop prop 

systems pred pred pred 
pred 
pts specified follows 
pred pred pred pred pred 
pred pred 
pred 
pred pred 
systems form cube shown 
barendregt prop 
pred 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma prop pred prop 
pred 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma prop pred fig 

cube 
description logical systems ptss uniform original cube isomorphic fig 

particular fig 
displays standard orientation cube system ranging prop pred corresponds unique system similar vertex cube standard orientation 
shown upper plane cube logical operators equality predicate definable 
relation called leibniz equality 
definition second order definability logical operations 
define fi 
fl fl fl fl fl 
define pix fl fl lambda calculi types 
define pip py note definition sense systems extending prop systems extending pred 
exercise verify usual logical rules valid appropriate systems 
example 
show part order heyting arithmetic ha done pred 
give context gamma gamma delta gamma fixes language ha gamma delta fixes part axioms ha 
take gamma take gamma delta tr pix sy pix re pix pix sx sy pix pix sy note pix sx pix sy logic minimal define order logic 
don induction scheme natural numbers requires infinitely axioms second order axiom pip 
pix sx pix 
says ha finitely order axiomatizable 
atomic equality pred weak doesn satisfy substitution property hold holds 
second order predicate logic pred ha axiomatized adding definable 
atomic replaced definable leibniz equality satisfy substitution property 
example 
structure commutative torsion groups finitely infinitely order axiomatizable 
example taken barendregt barwise 
structure commutative torsion group ha axioms 
nx write nx delta delta delta tries write formula order form get 
delta delta delta obtain infinitary formula shown order compactness theorem 
second order statement type expresses group torsion py theorem soundness propositions types interpretation system cube corresponding system cube 
forgetful map erases superscripts satisfies gamma gammaj jaj jbj jsj proof 
trivial induction derivation remarked completeness propositions types interpretation holds pred pred 
theorem berardi geuvers 
consider similarity type structure hai set relations 
signature sentence pred 
pred 
gamma proof 
berardi define ext pip qp qp ext exactly elements obviously pred 
claim interpreted lambda calculi types ext non empty type free model 
reason bijection follows ext type free model 
claim elements trivial model finite 
proof 
geuvers consider pred 
context gamma type defined follows gamma pix considered formula derivable pred translation jbj inhabited 
gammaj jbj 
gamma pred 
sufficient construct pix note pix type pix piff ff ff inhabited ff ff fay gamma pred 
pix ff ff ff considering possible forms normal form shown impossible 
counterexample geuvers shorter easier formalize berardi intuitive 
barendregt known logical deductions subject reduction see prawitz 
example pred deductions represented pred reductions ordinary fi reductions lambda calculi types 
fi gx 
fi fact best way define notion reduction logical system cube consider system pts subject fi reductions 
follows reductions systems cube strongly normalizing 
corollary 
deductions system cube strongly normalizing 
proof 
propositions types map cube cube preserves reduction systems cube strongly normalizing 
example shows flexibility notion pts 
example geuvers 
system higher order logic church described pts hol delta delta hol plus delta 
sort represents universe domains sort represents universe formulae 
sort delta rule delta allow declarations context 
system hol consists higher order term language sorts delta rule notice similarity higher order logic top rules 
sound interpretation pred 
hol determined map 




delta barendregt geuvers proves hol isomorphic extended version pred pred 
isomorphic means mappings pred 
hol hol 
pred 
ffi id ffi id 
systems hol pred 
identified set derivable sequents systems 
shows completeness holds interpretation 
representing data types subsection shown data types represented 
result leivant modified form due barendsen 
definition 

data structure sorted structure relations 
sort data structure called data set 

data system signature data structure 
sort data system called data type 
data systems specified shown example 
ffl sorts ffl functions ffl constants picture lambda calculi types examples 
data systems chosen typical examples 

data system natural numbers nat specified follows ffl sorts ffl functions ffl constants 
dat lists sort notation list specified follows ffl sorts la ffl functions cons ffl constants nil definition 

sort data system called parameter sort ingoing arrow sort constant sort 

data system called parameter free parameter sort 
data system nat parameter free 
data system list sort parameter sort 
barendregt definition 
data system 
language ld corresponding defined 
open notation consists terms containing free variables ld obvious maps function symbols 
sort corresponding set consists collection terms ld sort corresponding function symbol function defined constant sort interpreted 

similarly defines closed notation substructure sets closed terms 
example closed term model nat consists set ss successor function constant type structure isomorphic copy hf list consists finite lists variables type definition 
data system parameter sorts bm sorts say say write gamma bm lambda calculi types term ld define term context gamma follows 
gamma delta delta delta ft delta delta delta gamma delta delta delta gamma hi lemma 
term ld type gamma gamma proof 
induction structure data system trivial way representing mapping take example data system nat 
gamma nat term represented gamma nat representation possible find example term lus say lus fi ss reason variable separate compound ss parts see represent numbers 
want better form representation 
definition 
data system definition 

write delta 
representation consists 
ffl types delta ffl terms barendregt delta delta ffl representation term ld term context delta defined follows 
delta delta delta delta ft delta delta delta delta delta delta delta delta hi ffl representation called free terms ld type fi notation 
gamma xn context 
gamma delta delta delta xn pi gamma pix delta delta delta pix gamma mx delta delta delta xn theorem representation data types leivant bohm berarducci fokkinga 

free representation 
proof 
definition 
write theta bm want representation terms ld non parameter type theta fi theta delta delta delta xn theta lambda calculi types xn free variables non parameter types terms parameter type terms non parameter type fi theta fi theta fi fi denotes theta delta delta delta xn theta 
terms parameter type implication holds 
trivial term parameter type necessarily variable order fulfill define pi theta theta theta fa theta theta induction structure derive 
induction step theta theta fi theta theta fi shown term ld representation theorem seen canonical translation proof satisfies second order definition set elements free structure generated 
definition 

map theta fs pg modified follows pseudoterms pred 
range fs pg notation barendregt pix ba 
map pred prop defined follows 
pix pi ba 
hi 
xn 
map prop defined follows 
xj xj pix bj jaj jbj jx bj jxj jaj jbj put jx aj jxj jaj lambda calculi types jx xn jx jx 
map pred defined proposition 

gamma pred gamma prop 
gamma prop gammaj jaj jbj 
gamma pred gamma proof 

induction derivations 
similarly fv 


alternative construction ld 
method due leivant 
parameter sorts 
fix ideas list write gamma la nil cons la la parameter type predicate declared 
list predicate la la 
nil pia piy qy cons ay qz says element la belongs set lists built elements satisfying predicate ld type list intuitively la satisfies la gamma gamma la gamma gamma la constructed follows 
range list corresponding la barendregt gamma nil nil hi la nil pia piy qy cons ay cons cons gamma gamma la nil pia piy qy cons ay qt induction structure verifies 
proposition follows gamma gamma write la nil nil qq cons ax qq notice representation list theorem fi 
way data types represented 
examples 

lists 
explicit list ha la cons represented follows 
pil ha nil cons cons nil cons ax pil lambda calculi types nil cons xl nil cons ha 
booleans 
sorts bool constants true false bool represented follows 
bool piff ff ff ff true ff ff false ff ff 
pairs 
sorts functions representation piff ff ff ff ff applying map terms 
defined usual representations booleans pairing type free calculus obtained 
applies representation data type nat giving type free church numerals 
data types represented faithfully question arises functions represented terms 
terms nf recursive functions represented see barendregt thm 

definition 
data structure freely represented usual 
consider closed term model function barendregt non parameter sorts called definable term gamma ft fi definition 
data system 
herbrand godel system formulated pred 
gamma 
gamma finite set function declarations form fn bn gamma 
gamma ax ax finite set axiom declarations form ax am ax ax form terms ld correct type see definition herbrand godel system write hg gamma gamma gamma ax order emphasize functions may write hg hg 
principal function symbol example 
herbrand godel system note principal function symbol specifies function nat hg pix sy xy xx definition 
data structure having parameter sorts 
external function similar definitions functions arguments 
hg herbrand godel system 

hg computes hg hg fn hg pred lambda calculi types 
suppose hg fn computes called provably pred hg pred pix note notion provably type correct called intensional property depends questions definability answered satisfactory way 
result due leivant 
generalizes result due girard characterizing definable functions nat provably total 
theorem 
parameter free data structure 

basic functions definable 
function recursive iff hg computable 

function definable iff hg computable provably type correct pred 
proof 

shown theorem 

see mendelson 

see leivant 
pure type systems satisfying normalization subsection pure type systems considered terms type piff ff 
consequence typable terms normal form 
subsection encountered system seen simplification identifying peculiarity pts specification quite simple 
definition 
system pts determined follows constructions possible done collapsing interesting simplification 
system barendregt turns inconsistent sense type inhabited making propositions types interpretation meaningless 
system meaningful level conversion terms 
fact nontrivial model called closure model due scott see barendregt 
discussion computational relevance see coquand howe 
inconsistency proved girard 
showed circularity necessary derive paradox 
purpose introduced pure type system remember definition 
definition 
system pts defined follows delta delta delta delta extension 
theorem main result subsection 
proof occupies subsection 
theorem girard paradox 
type inhabited proof 
see 
corollary 
types inhabited 

typable terms normal form 

results hold place proof 


provable ma follows type sort inhabited 
types sort delta inhabited pi 
proposition 
applying contraction delta mapping lambda calculi types proof girard paradox steps 
ideas coquand howe geuvers 

jumping structure 

paradox naive set theory 

formalizing 

universal notation system 
paradox step 
jumping structure usually method diagonalization provides constructive way jump structure 
tacit assumption structure obtain contradiction paradox 
known russell paradox obtained diagonalization 
define naive set fa ag particular contradiction 
positive way rephrasing result saying belong universe sets take able jump system 
essence diagonalization cantor theorem 
method diagonalization yields undecidable problems sentences respect formal system provable unprovable 
main thesis hofstadter turns correct may underlying principle self consciousness 
paradox set theoretic form due 
game theoretic version zwicker 
consider games players 
game called finite run game go forever 
example crosses finite 
chess finite game may go forever spite rule draw position appeared board times rule optional 
game player chooses finite game player ii move chosen game player second move game claim finite 
barendregt player chosen finite game finitely moves game 
consider run 
player player ii player finite game paradox 
paradox formulated positive result 
proposition informal 
set binary relation define snr infinite sequence ra ra ra snr arb proof 
suppose contradiction snr arb arb snr implies snr infinite sequence ra ra rb rb contradicting 
means sn contradiction 
universe sets relation obtains paradox 
collection ordinal numbers obtains forti paradox 
construction alternative way jumping system 
method diagonalization inherent cantor theorem lambda calculi types seen limit cases generalized construction 
observation due quine 
proposition 
set binary relation define cna ra bn fa fthe set bn consists cycle 
bna arb proof 
exercise 
obtains usual diagonalization method cantor 
obtains result 
gives solution puzzle exclusive club 
person member club shave 
show person member exclusive club 
step 
paradox naive set theory define naive set binary relation sn 

proposition gives paradox 
particular choice auxiliary lemmas needed formalized definition 
set binary transitive relation ag write gamma arb bounded gamma bounded 

define binary relation 

sn 
see satisfies 

notational simplicity write restriction barendregt definition 
write 
fb 
restriction lemma 



arb 


arb snr snr 
sn 
proof 

map transitivity needed ensure codomain cases bounded 
suppose arb 
infinite chain ra ra ra 
snr snr 
suppose infinite chain 

seen bounding elements rn map fn projected fs infinite chain element contradicts assumption snr 
proposition 
sn 

proof 
suffices show 
sn 



sn 


sn 
lemma 
suppose sn 

define defined 

assumption applied follows sn 

lemma 
note definition sn 
lemma sn 
lambda calculi types fig 

step 
formalizing step notions lemmas steps formalized 
done inside systems cube fact inside 
want eventual contradiction occur inside system chosen axioms possible formalization done directly 
notions context refer freely logical notions write pia task define notion snr referring concept infinity 
definition 

gamma context 
write context gamma chain bra sna rj chain pa intuitively chain states predicate subset element element bra 
sna ra states subset chain 
lemma 
show 
gamma barendregt 
gamma sna proof 
immediate 
proposition 
context gamma type sna arb inhabited 
proof 
little effort proof proposition formalized pred 
apply map pred determined delta need relativization proposition 
definition 

context gamma write closed qa bra qb 
says 
context gamma write qa qa predicate corollary 
context gamma type closed sn arb inhabited proof 
proof proposition formalized pred relativized proof applying contraction required inhabitant 
far formalized results step 
problems formalization naive paradox step lambda calculi types main subset type form type 
example clear form type 
problem solved considering structure structure br brc bra order formalize lemma definition adjusted 
domain naive subset fa new definition required monotonic map involved bounded domain second problem types clear realize problem solved constructing universal kind pairs faithfully embedded definition 
define predicates gamma type piff pir ff ff piff pir ff ff pif ff ff follows 
write gamma gamma ara similarly 
gamma arb 
fa fb 
gamma fa stands arb 

write appropriate gamma gamma similarly 
notion sn 
particular instance notion sn set supposed act form type 
sn 
defined separately 
barendregt definition 

chain piff ff ff ff ff ff ff ff ff ff ff ff 
ff 

sn ff ff ff piff ff ff chain ffr 

trans trans ff ff ff ff arb brc arc 
context gamma define brc bra proposition 
assume context 
types inhabited 




arb 


arb sna sna 
sna sn ar 
proof 

assume 
define gamma 
bounds fx dom xr xra 

assume trans ar arb 
define gamma xr xry xr transitivity dom bounds fx dom 
assume arb sn chain assume contradiction pa define px 
chain contradicting sna 
assume sn 
chain assume contradiction par 
pa 
lambda calculi types gamma 
fy ra define ff ff ff ffr ff ff gamma ff dom fy rx chain contradicting sn assume sn ar 
suppose contradiction chain pa define ff ff ff 
ff chain ar contradicting sn ar 
step 
universal notation system step second problem mentioned step solved 
terms constructed faithfully embeds pair pair called universal notation system orderings plays role naive set proposition 
terms 

piff ff ff 
type faithfulness map ff ff ff ff ff ff iff ff gamma ff inhabited 
proof 
define piff ff ff barendregt ff ff ff clearly piff ff ff 
show context ff ff ff ff ff ff type iff ff gamma ff inhabited 
iff hff hff ff gamma ff ff gamma ff fi fi fi 
fi gamma ff right hand side equation inhabited follows ff gamma ff step paradox step formalize informal paradox derived step 
definition 

define binary relation follows 
ff ff ff ff ff ff iff trans ffr trans ff sn 
ff sn 
ff ff 
ff 
define unary predicate follows 
lambda calculi types iu ff ff ff trans ffr sn 
ff note closed 

element defined iu lemma 
context ff ff ff ff ff ff types inhabited 

iff 
ff 
ff 
sn 
sn 
iar proof 

suppose iff 
fi fi appropriate type iff ifi fi 
fi faithfulness symmetry follows ff gamma fi 
fi gamma ff ff 
ff 
suppose sn 

chain 
define ffr chain sn 
par 
iar 
proved chain 
iar sn 
iar corollary 
type sn 
inhabited 
barendregt proof 
suppose contradiction chain 
pu ff ff ff sn 
ff lemma sn 
sn 
chain 
follows pu 
contradiction 
lemma 
assume 
type inhabited sn 
sn 
proof 
applying sn 
sn sn see sn 
implication sna sn proved follows 
sn assume contradiction chain chain contradicting sn lemma 

ff ff ff 
assume sn 
ff 
ff ff ff trans ff sn 
ff ff 
ff 
lambda calculi types proof 

construction representing data structures section 
define ff ffi fi ff fi fi fffi fif ff fi fx fi fif ff fi ff ffi ff ff ffi 
intuitively ff ffi ff canonical 
injective range fact context ffb ffp ff ff ffi ff ffp ff ffi ff ff 
stands true inhabiting proof 
define ffi ff ffi ff ffi canonical extension ff making larger elements ff ffi ff ffi ff ffi ff ff rab fa ff fa trans ff ffi ffi sn 
ff ffi ffi ff gamma ff ffi ffi bounding element 
dom ff ff ffif ff ffi ffi ffiffi bounding element take ff ff ffi ffi ffi ffi 
take iff proposition 
type inhabited sn 
proof 
take iu 
view corollary sufficient show fthe types 
iu barendregt 
iv know corollary sn 
sn proposition iu clearly trans iu assume iv 
pair ff sn 
ff define ff ff ff dom fa fby ff 
ff lemma definition similarly ff arb 
ff 
ff sn 
ff sn 
ff sn 
ff fa fb ff gamma dom bounded dom 
ff iu theorem girard paradox 
type inhabited proof 
note proposition contradiction corollary closed 
shows inhabited fortiori coquand term inhabiting constructed 
proof carried system gamma pts defined follows gamma delta delta delta proof category theoretic derivation contradiction due reynolds 
note gamma hol delta presence called strong sigmas simpler formalization set theoretic paradox formalized see coquand jacobs 
lambda calculi types fully formalized proof girard paradox final show reader full term inhabiting 
term leen constructed interactive proof development system automath arbitrary ptss 
treatment system error earlier version subsection 
kind aim de bruijn conceived automath proof checker 
series intermediate lemmas subsection pragmatic deal definitions follows 
need expression gamma gamma gammax gamma gamma gamma defined type fill possibly large term write gamma gamma gammax gamma gamma gamma order keep manageable 
definition mechanism extensively functional programming languages ml 
shows definitions fi redexes contracted length term multiplied factor term occupy pages chapter 
due presence depending types expressions legal pts ffor example working needed expression ff 
type predicates ff 
want define pred def ff ff follows pred pred ff ff gamma gamma gamma ff ff illegal reasons 
allowed secondly subterm pred ff ff 
ill formed ff 
type pred ff phenomena taken account de bruijn automath languages expressions allowed 
term follows reasons legal liberal version glancing pages attentive reader worked proofs subsection may experience free association details 
barendregt lambda calculi types barendregt lambda calculi types barendregt van bakel complete restrictions intersection type discipline 
theoretical computer science 
barendregt lambda calculus syntax semantics revised edition studies logic foundations mathematics north holland 
functional programming lambda calculus van leeuwen vol 
ii 
generalised type systems appear functional programming 
barendregt coppo dezani ciancaglini filter lambda model completeness type assignment symbolic logic 
barendregt types lambda calculi programming languages european symposium programming ed 
jones lecture notes computer science springer 
barendregt dekkers typed lambda calculi appear 
barendregt semantics classical automath related systems information control 
barendsen representation logic data types recursive functions typed lambda calculi master thesis dept computer science catholic university toernooiveld ed nijmegen netherlands 
barendsen geuvers conservativity pred ms dept computer science university nijmegen toernooiveld ed nijmegen netherlands 
van benthem jutting personal communication 
typing pure type systems appear information computation berardi mathematical analysis coquand huet calculus constructions systems barendregt cube dept computer science carnegie mellon university dipartimento matematica universit di torino 
personal communication 
personal communication 
type dependence constructive mathematics ph thesis dipartimento matematica universit di torino 
lambda calculi types ohm berarducci automatic synthesis typed programs term algebras theor 
comput 
sci 

de bruijn mathematical language automath usage extensions symposium automatic demonstration versailles lecture notes mathematics springer 
survey automath project hindley seldin 
cardelli wegner understanding types data abstraction polymorphism acm comp 
surveys 
church set postulates foundation logic annals mathematics 
formulation simple theory types symbolic logic 
calculi lambda conversion princeton university press 
coppo completeness theorem recursively defined types proceedings th int 
coll 
automata programming lecture notes computer science springer coppo type inference recursive types syntax semantics information computation 
coppo dezani ciancaglini longo honsell extended type structures filter lambda models logic colloquium eds 
lolli longo studies logic foundations mathematics north holland 
coppo dezani ciancaglini functional characters solvable terms zeitschrift mathematische logik grundlagen der mathematik 
coppo dezani ciancaglini type theories normal forms lambda models information computation 
coquand th 
une th eorie des constructions th ese de eme cycle universit paris vii 
analysis girard paradox proceedings symposium logic computer science ieee 
metamathematical investigation calculus constructions odifreddi 
reynolds paradox type type axiom calculus constructions documentation users guide version techniques inria le chesnay cedex france pages report 
barendregt coquand th 
huet calculus constructions information computation 
curry functionality combinatory logic proc 
nat 
acad 
science usa 
modified basic functionality combinatory logic dialectica 
curry feys combinatory logic vol 
studies logic foundations mathematics north holland 
curry hindley seldin combinatory logic vol 
ii studies logic foundations mathematics north holland 
van language theory automath ph thesis technical university eindhoven netherlands 
van dalen logic structure nd edition springer 
davis computability unsolvability mcgraw hill 
dezani ciancaglini margaria polymorphic types fixed point combinators continuous lambda models ifip conference formal description programming concepts iii ed 
wirsing north holland 
fitch symbolic logic ronald press new york 
elements combinatory logic yale university press new heaven 
fokkinga programming languages concepts lambda calculus approach essays concepts formalism tools eds 
nijholt cwi tracts box ab amsterdam netherlands 
fujita logical systems generalised type systems ms technical university delft faculty mathematics informatics bl delft netherlands 
gandy proofs strong normalisation hindley seldin 
lambda calculi types geuvers interpretation logics type systems master thesis dept computer science catholic university toernooiveld ed nijmegen netherlands 
theory constructions conservative higher order logic ms dept computer science catholic university toernooiveld ed nijmegen netherlands 
type systems higher order logic ms dept computer science catholic university toernooiveld ed nijmegen netherlands 
geuvers nederhof modular proof strong normalisation calculus constructions functional programming 
giannini ronchi della characterisation typings polymorphic type discipline proceedings third symposium logic computer science ieee 
girard 
interpr etation elimination des coupures dans arithm etique ordre sup erieur ph thesis universit paris vii 
girard lafont taylor proofs types tracts theoretical computer science cambridge university press 
harper honsell plotkin framework defining logics proceedings second symposium logic computer science ithaca ieee washington dc 
girard paradox ms philips research laboratories box ja eindhoven netherlands 
henglein lower bound full polymorphic type inference girard reynolds typability dexptime hard report ruu cs dept computer science utrecht university netherlands 
hindley principal object combinatory logic trans 
amer 
math 
soc 

simple semantics coppo dezani types international symposium programming eds 
montanari lecture notes computer science springer berlin 
hindley seldin curry essays combinatory logic lambda calculus formalism academic press 
combinators calculus london mathematical society student texts cambridge university press 
barendregt hofstadter godel escher bach eternal golden braid harvester press 
howard formulae types notion construction hindley seldin 
howard kreisel parikh tait stanford report unpublished notes 
howe computational behaviour girard paradox proceedings second symposium logic computer science ithaca ieee 
jacobs inconsistency higher order extensions martin lof type theory philosophical logic 
categorical type theory ph thesis dept computer science catholic university toernooiveld ed nijmegen netherlands 
jacobs filter models polymorphic types appear theoretical computer science 
kfoury tiuryn urzyczyn ml typability dexptime complete caap ed 
arnold lecture notes computer science springer 
kleene definability recursiveness duke math 

kleene rosser inconsistency certain formal logics annals math 

klop 
combinatory reduction systems ph thesis utrecht university cwi tract box ab amsterdam netherlands 
krivine lambda calcul types mod eles masson paris 
lambek scott higher order categorical logic cambridge studies advanced mathematics cambridge university press cambridge 
notion realizability intuitionistic predicate calculus complete intuitionism proof theory eds 
studies logic foundations mathematics north holland 
leeuwen van handbook theoretical computer science elsevier mit press 
lambda calculi types leivant reasoning functional programs complexity classes associated type disciplines th ieee symposium foundations computer science 
contracting proofs programs odifreddi ob embedding order predicate logic fragments intuitionistic logic symbolic logic 
longo moggi constructive natural deduction modest interpretation report cmu cs carnegie mellon university pittsburgh usa 
luo extended calculus constructions ph thesis university edinburgh 
macqueen plotkin sethi ideal model recursive polymorphic types th acm symposium principles programming languages acm 
private communication 
martin construction provable theory species ms mathematical institute university stockholm sweden pp 
intuitionistic type theory bibliopolis napoli 
mendelson mathematical logic third edition wadsworth brooks cole 
mendler inductive types type constraints second order lambda calculus proceedings second symposium logic computer science ithaca ieee 
meyer personal communication 
milner theory type polymorphism programming computer systems sciences 
proposal standard ml proceedings acm symposium lisp functional programming austin 
mitchell type inference type containment proc 
internat 
symp 
semantics data types ed 
kahn lecture notes computer science springer 
polymorphic type inference containment inform 
comput 

type systems programming languages van leeuwen 
barendregt les de russell de forti le probl eme de la th eorie des ensembles math ematique mostowski rules proof pure functional calculus order symbolic logic 
nederpelt strong normalization typed lambda calculus lambda structured types ph thesis eindhoven technological university netherlands 
nerode odifreddi lambda calculi constructive logics appear 
odifreddi logic computer science academic press new york 
pavlovi predicates fibrations ph thesis department mathematics university utrecht ta utrecht netherlands 
een logica report zw cwi box ab amsterdam netherlands 
pfenning partial polymorphic type inference higher order unification proc 
acm conference lisp functional programming 
prawitz natural deduction proof theoretical study almqvist wiksell stockholm 
quine set theory logics cambridge massachussets 
de strictness analysis interpretation recursively defined types appear information computation 
reynolds theory type structure mathematical foundations software development eds 
lecture notes computer science springer 
polymorphism settheoretic semantics data types lecture notes computer science springer berlin 
approaches type theory lecture notes computer science springer berlin 
robinson machine oriented logic resolution principle acm 

lambda calculi types sch uber die der mathematische logik math 
ann 

schwichtenberg proof theory applications cut elimination handbook mathematical logic ed 
barwise north holland 
mock mockingbird new york 
scott data types lattices siam comput 

combinators terms proof theory reidel dordrecht 
weak strong sum elimination intuitionistic type theory ph thesis university amsterdam 
tait intensional interpretation functionals finite type symbolic logic 
realizability interpretation theory species logic colloquium boston ed 
parikh lecture notes mathematics springer 
definition trees ordinal recursive functionals reduction recursion orders means type level raising symbolic logic 
een analyse van ms dept computer science university nijmegen toernooiveld ed nijmegen netherlands 
troelstra metamathematical investigations intuitionistic arithmetic analysis lecture notes mathematics springer 
turing computability definability symbolic logic 
de big trees calculus expressions types calculus computer science theory ed 
bohm lecture notes computer science springer wadsworth semantics pragmatics lambda calculus ph thesis oxford university 
wand simple algorithm proof type inference fund 
informaticae 
barendregt whitehead russell principia mathematica cambridge university press 
zwicker playing games games paradox amer 
math 
monthly 
