proc 
second acm sigsoft symp 
foundations softw 
eng december pages performing data flow testing classes mary jean harrold gregg rothermel department computer science clemson university clemson sc cs clemson edu basic unit testing object oriented program class 
research testing classes focused black box approaches 
blackbox testing techniques may provide sufficient code coverage augmented code white box techniques 
dataflow testing testing technique uses dataflow relations program guide selection tests 
existing dataflow testing techniques applied individual methods class methods class interact messages techniques consider dataflow interactions arise users class invoke sequences methods arbitrary order 
new approach class testing supports dataflow testing dataflow interactions class 
individual methods class methods send messages methods class technique similar existing dataflow testing techniques 
methods accessible outside class called order users class compute dataflow information test possible interactions methods 
main benefit approach facilitates dataflow testing entire class 
supporting dataflow testing classes provide opportunities find errors classes may uncovered black box testing 
technique useful determining sequences methods executed test class absence specification 
code testing techniques large portion technique automated 
partially supported nsf ccr ccr clemson university 
important benefits objectoriented programming ability reuse classes 
class instantiable information hiding module defines data instance variables operations methods object class contain class considered basic unit testing object oriented program 
research testing classes focused black box techniques class code select tests 
black box techniques may provide sufficient coverage code techniques augmented code white box approaches 
type code testing dataflow testing uses dataflow relationships program guide selection tests 
dataflow testing tools developed tools investigate effectiveness dataflow testing uncovering program errors 
technique applies dataflow testing object oriented programs 
existing dataflow testing techniques applied individual methods methods class interact messages procedure calls methods techniques consider dataflow interactions arise users class invoke sequences methods arbitrary order 
address problem new approach supports dataflow testing types dataflow interactions class 
individual methods class methods interact methods class procedure calls technique similar existing dataflow testing techniques 
methods accessible outside class called order users class compute dataflow information test possible interactions methods 
compute dataflow information develop new graph representation class class control flow graph connects methods class 
adapt existing dataflow analysis algorithm test class test objects instantiations class 
discussion class object synonymously 
class control flow graph compute dataflow information required dataflow testing 
main benefit approach provide way dataflow testing test entire class 
supporting dataflow testing classes provide opportunities find errors classes may uncovered black box testing 
technique useful determining sequences methods executed test class absence specification 
conjunction blackbox techniques technique helps reduce testing unnecessary sequences methods provides information sequences methods interact 
code testing techniques large portion technique automated 
section briefly overview dataflow analysis dataflow testing 
section describe class testing application dataflow testing classes 
section outlines requirements dataflow testing classes 
section technique computing dataflow information required dataflow testing classes 
section discusses issues relevant dataflow testing classes section compares related section presents 
dataflow analysis testing dataflow testing assignment variable program tested executing subpaths assignment definition points variable 
uses program computation uses uses predicate uses uses 
occurs value computation output statement occurs value predicate statement 
pair def pair ordered pair statement containing definition variable statement containing memory location bound reached path program 
test data adequacy criteria select particular def pairs subpaths identified test requirements program tests generated program execution satisfy requirements 
test satisfies def pair executing program test causes traversal subpath definition intervening redefinition memory location 
uses traversal statement containing definition statement containing uses tests traverse subpaths statement containing definition successors statement containing 
different dataflow testing criteria defined compared 
criterion uses criterion requires feasible def pair program tested uses criterion def pair feasible program input cause executed infeasible 
shown practical typically relatively tests required satisfaction 
dataflow testing unit testing individual procedures def pairs computed traditional iterative interval dataflow analysis methods 
analysis methods control flow graph represent program 
nodes control flow graph represent program statements edges represent flow control statements graph augmented single entry node single exit node 
apply dataflow testing interacting procedures test programs precise dataflow analysis required 
interprocedural dataflow analysis computes def pairs definition procedure called calling procedure 
technique computes def pairs global variables parameters form call graph propagate dataflow information program 
dataflow analysis programs considers effects pointer variables aliasing computing def pairs testing discussion call technique developed pande landi ryder plr algorithm 
plr algorithm constructs interprocedural control flow graph program combines control flow graphs individual procedures 
call site replaced call return node 
control flow graphs connected adding edges call nodes entry nodes exit nodes return nodes represent procedure calls program 
special entry node ae represent entry main procedure program 
plr algorithm computes conditional alias definition information procedure 
dataflow framework propagates local information obtain interprocedural reaching definitions interprocedural def pairs calculated 
classes class testing class defines data relevant object class set operations may performed data class data referred instance variables class operations called methods 
loss generality model class contains levels access class instance variables methods public private 
public instance variables methods accessed users class private instance variables methods accessible class 
class may contain constructor method executed object class instantiated destructor method executed object destroyed 
presents partial listing symboltable class serves example 
symboltable class contains public methods symboltable constructor symboltable destructor addtotable private methods lookup hash 
symboltable definition symboltable class include symbol class symboltable private table int int lookup char public symboltable int table new symboltable delete table int addtotable char symbol char int char symbol char symboltable implementation symboltable class include symboltable int symboltable lookup char key int index int int hash char index hash key strcmp index key index index wrap index index index return notfound return int symboltable addtotable char symbol char int index lookup symbol index return symbol index index return ok return int symboltable char symbol char int index lookup symbol index notfound return index return ok void symboltable index 
strcpy table index char symboltable index 
return table index partial listing symboltable class 
represent call structure class class call graph 
class call graph directed graph nodes represent methods edges represent procedure calls methods 
displays class call graph class symboltable 
calls lookup graph contains edges node lookup nodes 
depicts edges shown dashed lines class public methods 
dashed edges represent messages sent public outside class 
test classes levels define follows intra method testing tests methods individually 
level testing equivalent unit testing individual procedures procedural language programs 
inter method testing tests public method methods class calls directly indirectly 
level testing equivalent integration testing procedures programs 
intra class testing tests interactions public methods called various sequences 
users class may invoke sequences methods indeterminate order intra class testing increase confidence sequences calls interact properly 
set possible public method call sequences infinite test subset set 
illustrate levels testing consider symboltable class shown 
perform intra method testing symboltable class testing methods class separately 
perform inter method testing addtotable method integrating addtotable lookup hash methods testing various calls addtotable 
similarly perform inter method testing method integrating lookup hash methods testing various calls 
constructor destructor methods symboltable class symboltable symboltable call methods intra inter method testing routines equivalent 
intra class testing may select test sequences symboltable addtotable 
symboltable addtotable addtotable 
cases may require stubs driver procedures perform testing may require technique inspect state object method sequence invocation 
previous research class testing focused techniques selecting sequences methods testing 
existing techniques suffer drawbacks 
existing techniques select tests basis specifications state graphs constructed solely specifications 
software systems formally specified class symboltable addtotable symboltable lookup hash symboltable class call graph symboltable class 
informally specified methods frequently applicable 
furthermore program specified specification testing may detect errors caused implementation details addressed specifications 
example specification symboltable require table implemented array maintained linear hashing know specifications test table search method lookup successfully wraps line 
second drawback existing intra class testing techniques including code techniques simply specify sequences methods execute requiring coverage particular code components 
confidence class testing class contains code exercised sufficiently 
section discuss related research greater detail 
dataflow testing classes supplement existing intra class testing techniques require code testing technique identifies components class tested 
technique dataflow testing considers class variables program point specific def pairs 
types def pairs classes tested 
types correspond levels testing defined 
define types formally describe informally examples 
definitions class tested 
represent statement containing definition represent statement containing 
intra method def pairs 
method exists program calls def pair exercised single invocation intra method def pair 
inter method def pairs 
public method fm mn set methods called directly indirectly invoked 
suppose fm mn exists program calls def pair exercised single invocation separate invocations method inter method def pair 
intra class def pairs 
public method fm mn set methods called directly indirectly invoked 
public method possibly method fn nn set methods called directly indirectly invoked 
suppose method fm mn method fn nn exists program calls def pair executed executed call terminates inter method def pair 
informally intra method def pairs occur single methods test def interactions limited methods 
example symboltable class lookup method contains intra method def pair respect variable index definition index node reaches index node 
inter method def pairs occur methods calling context single public method interact definition method reaches method boundaries method called directly indirectly public method 
example symboltable class public method addtotable invokes lookup method receives index value back uses call 
def pair inter method pair definition index line lookup reaches index line addtotable 
intra class def pairs occur sequences public methods invoked 
example consider method sequence addtotable addtotable 
call addtotable symbol added table line sets 
second call addtotable line fetches value 
intra class pair 
second example consider sequence addtotable 
addtotable may add symbol information table calling routine accesses table calling 
definition table entry line table line form intra class def pair 
types def pairs useful testing classes 
example uses dataflow coverage criteria intra method def pair tests lookup successfully resets start table reaches table array inter method def pair tests add symbol th location table 
intra class def pair tests addtotable acts correctly table full 
intra class def pair tests information added symbol table fetched 
intra class pairs advantage guiding testers selection sequences methods run sequences methods recall section uses criteria requires test feasible def pair program 
testing def pair requires test branches 
need run 
example exercise intra class pair test method sequence addtotable 
intra class pairs originating method methods invokes terminating addtotable method methods invokes 
suggests affect addtotable need test method sequence addtotable 
illustrate advantages intra class dataflow testing suppose conditional line symboltable program changed erroneously statement 
suppose distinct symbols insert table making calls addtotable 
suppose call addtotable final symbol 
call equals addtotable enters outermost clause calls lookup line 
lookup find table finds empty table locations 
examining table entry lookup exits test line returns notfound 
addtotable inserts location pointed index overwriting table entry currently location 
detect fault calls addtotable 
recall class symboltable contains intra class def pair 
achieve adequacy pair find sequence sequences method invocations execute line line branches taken 
calling addtotable twice exercise take true branch 
force false branch taken fill table making calls addtotable additional call addtotable 
words require uses testing pair necessarily execute sequence methods exposes fault 
computing dataflow information classes support dataflow testing classes compute types def pairs classes require intra method inter method intra class pairs 
plr algorithm described section compute intra inter method def pairs directly compute intra class def pairs requires complete program construct interprocedural control flow graph 
compute intra class def pairs consider interactions occur sequences public methods invoked 
require graph lets consider interactions lets apply algorithms plr 
algorithm input class 
output declare frame set frame nodes edges step construct class call graph class construct class call graph step add frame class call graph frame step replace call graph node corresponding control flow graph foreach method replace class call graph node control flow graph update edges appropriately step replace call sites call return nodes foreach call node representing call method replace call return node update edges appropriately step connect individual control flow graphs foreach method add edge frame call node entry node control flow graph add edge exit node control flow graph frame return node step return completed class control flow graph return algorithm construct class control flow graph 
compute types def pairs class construct class control flow graph 
algorithm constructing 
inputs class outputs step construct class call graph initialize graph 
step encloses class call graph frame facilitates dataflow analysis class 
frame represents driver class lets simulate arbitrary sequences calls public methods 
frame contains nodes frame entry frame exit represent entry exit frame respectively frame loop facilitates sequencing methods frame call frame return nodes represent call return public method respectively 
frame contains edges frame entry frame loop frame loop frame call frame loop frame exit frame return frame loop 
shows class call graph symboltable class enclosing frame 
frame nodes shaded frame edges shown dashed lines 
note point construction frame class call graph connected 
step replace class call graph method node partially completed control flow graph update class call graph edges edges call sites entry nodes exit nodes back call sites 
step replace call site call node return node update class call graph edges edges call nodes entry nodes exit nodes return nodes 
step connect frame rest graph encloses 
add edges frame call node entry node public method add edges exit public method frame return node 
step return completed class control flow graph show part symboltable class portions graph shown dotted boxes expanded 
consider parts represents methods addtotable lookup 
call site lookup addtotable replaced call node marked return node marked edges addtotable entry node lookup exit node lookup addtotable 
complete symboltable symboltable hash lookup addtotable frame return frame call frame entry frame loop frame exit frame enclosing class call graph class symboltable 
call sites statements addtotable replaced call return nodes 
frame abstraction main program calls public methods selected randomly switch statement enclosed loop programs possibility aliasing existing interprocedural dataflow analysis techniques get def pairs class 
programs contain aliases analysis methods account aliasing effects imprecise identification def pairs 
programs plr algorithm identify pairs precisely 
simulates single entry program sequences message calls possible plr algorithm functions single entry programs follows plr algorithm applied 
applied plr algorithm may def pairs occur context applications programs programs introduce specific aliases 
discuss problem section 
apply plr algorithm alias occurs names memory location visible point program 

compute conditional alias conditional reaching definitions information 
propagate dataflow information program propagation rules specified adjustments ffl process frame call node call node ffl process frame return node return node ffl process frame loop node statement node definitions uses ffl process frame entry exit nodes program entry exit nodes analysis yields set def pairs consisting intra method def pairs inter method def pairs intra class def pairs 
examples def pairs section 
similar approaches apply dataflow analysis algorithms 
general precision def information compute depends precision dataflow analysis algorithm 
symboltable frame exit frame return frame call frame loop frame entry index hash key hash index symboltable index key 
enter addtotable 

return 
return 
symbol index 
index 

return ok 
exit addtotable 
enter 
return 
index 
return ok 
exit enter lookup 

strcmp 
index 
index 
return 
return notfound 
index 
exit lookup 
index partial symboltable class 
large shaded areas outline clockwise upper left control flow graphs addtotable lookup methods respectively 
methods expanded 
dotted boxes outline portions graph expanded 
additional considerations additional considerations related dataflow testing classes 
section briefly discuss 
perform dataflow analysis class analysis may inter method intra class def pairs occur context applications programs programs introduce specific aliases 
example consider method class suppose defines public instance variable uses public instance variable suppose path defined shown method 

definition assume point aliased 
case analysis associate definition 
suppose program uses causes aliased invokes invocation def pair 
currently exploring ways save alias def information gathered analysis easily recognize def pairs test class context programs classes 
similar consideration involves dataflow testing integration classes 
class sends messages class may wish test dataflow interactions define fourth level dataflow testing inter class testing 
inter class testing considers def pairs class class guide selection test cases 
inter class testing compute def pairs interacting 
experimentation required determine technique scale large programs interacting classes 
third issue involves derived classes obtained inheritance 
derived class formed base class methods data modified added deleted 
experiments suggest tests testing information originally test base class reused test derived class 
incremental dataflow analysis algorithms update def pair information derived classes reduces cost analysis 
considering ways handle objectoriented features polymorphism dynamic binding dataflow testing approach 
currently encounter call method bound runtime test calling method possible called methods select representative inheritance hierarchy testing 
approach precise may impractical second approach lets test calling method called method 
related research previous research class testing addresses testing focuses selection method sequences tested 
existing techniques method sequence selection specifications state diagrams constructed specifications 
discussed section techniques drawbacks code test selection techniques necessary 
little attention paid code test selection criteria object oriented software 
flow graph test selection technique selects method sequences specifications 
class technique constructs graph public method contains node nodes edge user invoke followed sets condition true false may invoked edge called control edge label true false 
design tests cover nodes edges technique incorporates limited form dataflow information involving types variables 
method node contains definition type contains formal parameter type def edge defined triple involving type node defined node 
insert def edges may apply dataflow coverage criteria drawbacks technique 
technique considers method parameters ignoring shared variables variables global class 
second technique fine grained variable class technique ensure test definition class drawbacks cause technique opportunities selection significant tests 
example error results line symboltable changed discussed section technique requires test method sequence addtotable addtotable necessarily require calls addtotable may lead discovery error technique applying dataflow testing classes 
define levels dataflow class testing intra method testing technique allows graphs constructed specifications 
case example may detect error 
tests individual class methods inter method testing tests methods class interact procedure calls intra class testing tests sequences calls methods 
identify def pairs levels testing represent class single entry single exit program construct class control flow graph program 
perform interprocedural dataflow analysis graph 
adapt existing interprocedural dataflow analysis algorithm perform analysis class control flow graph 
dataflow analysis techniques similarly adapted 
demonstrated example ability technique lead construction tests uncover errors class 
currently implementing prototype dataflow tester classes perform experimentation 
investigating issues related dataflow testing classes techniques providing partial dataflow analysis classes permit users class avoid complete reanalysis integration 
aho sethi ullman 
compilers principles techniques tools 
addison wesley boston ma 
clarke podgurski richardson 
comparison data flow path selection criteria 
ieee transactions software engineering november 
frankl 
case studies testing object oriented programs 
proceedings fourth symposium testing analysis verification pages october 
frankl weiss 
experimental comparison branch testing data flow testing 
ieee transactions software engineering august 
frankl weiss weyuker 
asset system select evaluate tests 
proceedings ieee conference software tools pages april 
frankl weyuker 
applicable family data flow testing criteria 
ieee transactions software engineering october 
harrold 
combat compiler data flow testing system 
proceedings pacific northwest quality conference pages october 
harrold mcgregor fitzpatrick 
incremental testing object oriented class structures 
proceedings th international conference software engineering pages may 
harrold soffa 
interprocedural data flow testing 
proceedings third testing analysis verification symposium pages december 
harrold soffa 
efficient computation interprocedural definition chains 
acm transactions programming languages systems march 
hoffman 
graph class testing 
proceedings th australian software engineering conference september 
hoffman 
graph module testing 
proceedings th australian computer science conference pages february 
horgan london 
data flow coverage language 
proceedings fourth symposium testing analysis verification pages october 
hutchins foster ostrand 
experiments effectiveness controlflow test adequacy criteria 
proceedings th international conference software engineering pages may 
laski korel 
data flow oriented program testing strategy 
ieee transactions software engineering se may 
ntafos 
evaluation required element testing strategies 
proceedings th international conference software engineering pages march 
ostrand weyuker 
data flow adequacy analysis languages pointers 
proceedings fourth symposium testing analysis verification tav pages october 
pande landi ryder 
interprocedural def associations programs 
ieee transactions software engineering may 

automated flow graph testing object oriented software modules 
journal systems software november 
weyuker 
selecting software test data data flow information 
ieee transactions software engineering se april 
turner robson 
state testing object oriented programs 
proceedings conference software maintenance pages september 
weyuker 
fault detection data flow testing showed cheap 
proceedings eighth annual northwest software quality conference pages october 
weyuker 
cost data flow testing empirical study 
ieee transactions software engineering se february 

