evolving graphs networks edge encoding preliminary report sean luke cs umd edu www cs umd edu department computer science university maryland college park md lee spector hampshire edu hampshire edu cognitive science cultural studies hampshire college amherst ma alternative cellular encoding technique gruau evolving graph network structures genetic programming 
new technique called edge encoding uses edge operators node operators cellular encoding 
cellular encoding edge encoding produce possible graphs encodings bias genetic search process different ways may useful different set problems 
problems techniques may think edge encoding may particularly useful include evolution recurrent neural networks finite automata graph queries symbolic knowledge bases 
preliminary report technical description edge encoding initial comparison cellular encoding 
experimental investigation relative merits encoding schemes currently progress 
previous studies examined genetic algorithms produce graph network computational mechanisms 
major thrust area involved genetic evolutionary algorithms evolve structure weights neural networks 
approach fix network topology evolve weights values chromosome collins jefferson 
approaches seek vary number nodes explicitly describing entire network chromosome fullmer miikkulainen angeline saunders pollack lindgren 
third approach tries evolve network set explicit connections set rules grow network 
kitano evolved networks context free grammars operated network matrices 
grew networks grammars operating nodes edges 
appear late breaking papers genetic programming gp conference stanford july genetic programming gp evolve variety graph structures including push automata novel graph programs teller 
koza rice gp directly encode edges nodes neural network 
gruau rule cellular gruau uses tree chromosomes elements gp technique evolve neural networks 
cellular encoding cellular encoding gruau uses chromosomes consisting trees node operators evolve graph commonly neural network 
operator accepts parent node graph modifies node possibly creating new nodes edges 
operators executed breadth left right traversal tree 
operators nonterminals meaning children tree terminals children 
finished modifying graph node nonterminal operators pass node children modification 
process modifying graph node nonterminals create additional nodes graph additional graph node passed additional child operator 
example operator modifies graph node process creates new nodes pass original node child nodes children 
terminal operators children represent modification graph node permanent graph 
typically graph begins single node passed root operator encoding tree start graph building process 
cellular encoding particularly interesting reasons 
cellular encoding describe possible neural networks fact gruau presents compiler transforms pascal functions limitations neural networks compute functions 
second cellular encoding modular sense special operators attempt reuse groups rules generating large networks reasonably small chromosomes 
additionally cellular encoding takes advantage gp tree genotypes permit network phenotypes size provide straightforward mechanism crossover networks widely differing topology 
cellular encoding powerful technique weaknesses 
cellular encoding chromosome traversal breadth highly execution operators result subtrees individual crossed individuals result different phenotypes expressed original individual 
domains may appropriate encoding mechanism better preserves phenotypes crossover 
disadvantages come cellular encoding graph nodes target operations cellular encoding modifies nodes edges multiply rapidly cellular encoding provides limited mechanism link registers label modify individual edges 
additionally graphs cellular encoding produces tend consist highly interconnected nodes 
useful cellular encoding primary focus fully connected graphs feedforward networks hopfield networks 
may desirable domains 
preliminary report edge encoding alternative cellular encoding addresses concerns 
technique uses edge operators node operators cellular encoding 
believe result elegant formalism improved dynamics 
believe edge operators may successful node operators certain domains 
cellular encoding edge encoding complete sense produce possible graphs clear claims ultimate superiority technique supported may case technique clearly superior range practical problems 
currently conducting experiments range problems assess relative merits cellular encoding edge encoding 
preliminary report confine technical description edge encoding initial comparison 
current experiments include problems evolved graphs interpreted recurrent neural networks finite automata graph queries large symbolic knowledge bases 
results experiments subsequent reports completed 
edge encodings edge encodings originally developed examine new recurrent neural network structures equally applicable developing wide range graph domains 
cellular encoding edge encoding tree structured phenotype directed graph optionally labels functions associated edges nodes 
edge encodings differ cellular encoding ways ffl cellular encoding grows graph modifying nodes graph 
edge encoding grows graph modifying edges graph 
ffl encodings typically traverse respective trees preorder leftmost children 
cellular encoding traverses chromosome tree breadth edge encoding usually traverses trees depth 
simple edge encodings independent execution order long parents tree executed children 
ffl edge encoding operates edges leaf nodes edge encoding chromosome represent unique edges resultant graph 
cellular encoding represent nodes resultant graph 
building edge encoding edge encodings stored forests trees similar genetic programming chromosomes 
nodes tree operators act edges graph phenotype 
edge operator accepts parent operator single edge graph occasionally optional data stack nodes 
modifies deletes edge head tail nodes 
process may create zero new edges nodes 
operator passes original edge deleted new edges optional data children encoding tree edge child 
different genetic programming edge encoding operators executed preorder parent executed children 
result child operators sense arguments parents symbolic expression trees commonly gp 
fact just reverse true 
operator modifies graph edge passes edge newly created edges children modification 
example consider double operator shown 
operator children encoding tree 
receives parent single edge graph tail edge head 
double grows additional edge 
edges passed child operators additional modifications passed double left child passed right child 
edge encoding graph generation process begins graph consisting single edge 
edge passed root node operator edge encoding tree modifies edge passes resultant edges children 
terminal leaf nodes edge encoding tree children modification process particular double left child parent right child 
double operator 
shows operator relative parent children operators encoding tree 
shows initial edge passed double parent 
shows edges double execution 
passed double left right children respectively 
edge 
nodes tree modifications resultant graph returned chromosome phenotype 
operators particular edge encoding commonly forms 
operators change topology graph adding deleting edges nodes 
second operators add semantics edges nodes labelling edges assigning transfer functions nodes simple edge encoding demonstrate edge encoding simple set basic operators describe directed graphs sufficient build nondeterministic finite state automata nfa 
operators take edge optional data parents pass children resultant edges 
nice property operators executed order long parent operators executed prior child operators 
simple encoding individual consists single tree operators 
assume operator passed edge processing passed left child 
operators describe topology graph table 
simple topological operators 
operator children description double create edge 
bud create node create edge 
split create node modify 
create edge 
loop create self loop edge 
reverse reverse 
operators sufficient develop topology nfa recognizes regular expression 
develop full nfa custom semantic operators necessary double bud split loop reverse 
edge encoding chromosome describes nfa reads regular expression 
define starting accepting states nfa label edges tokens 
example suppose trying develop nfa matched regular expression language consisting 
edge encoding operators necessary table 
nfa semantic operators 
operator children description assign head node starting state 
assign head node accepting state 
valid state starting state accepting state time 
label edge define edge traversed reading 
label edge define edge traversed reading 
ffl label edge ffl define edge may traversed reading token 
shows edge encoding chromosome operators phenotype nfa reads regular expression 
lisp syntax written double reverse loop ffl bud split 
shows development nfa chromosome 
informal proof informally demonstrate operators fact just reverse split double sufficient build nfas parse regular expressions 
effect perform inverse thompson construction 



growth nfa encoding 
steps 
initial edge 

applying double 

applying reverse 

applying loop ffl 
white circle starting state 

applying bud 
applying split 
black circle accepting state 
described aho sethi ullman thompson 
nfa exactly starting accepting state 
edge encoding single edge tail starting state head accepting state 
edge encoding form reverse reverse terminal position encoding defines initial edge nfa 
associate edge initial regular expression nfa created edge operators expand nfa constructions equivalent subexpressions process continues broken atomic subexpression tokens time remains label equivalent edges tokens 
thompson construction parses regular expression subexpressions builds nfa bottom grouping smaller nfas represent subexpressions 
form nfa reverse top splicing subexpressions main nfa growing full form 
growth step equivalent step breaking expression subexpressions subexpressions associated new edge created growth step 
recognize regular expression alphabet exist regular expressions true ffl ffl 
ffl single token ffl broken st ffl broken ffl broken 
ffl broken 
edge nfa associated regular expression shown 
want break time build sub nfa structure contains edges associated ffl token label appropriate finished 
form st replace construction replacing terminal node split 
form replace terminal node double split split ffl ffl split split ffl ffl resulting 
form replace terminal node double split split ffl double reverse ffl ffl ffl resulting 
form replace terminal node assuming expand appropriate nfa recognize clearly constructions compute st respectively exactly constructions aho sethi ullman 
broken built sub nfa structures associate edges appropriate repeat process regular expressions finite guaranteed point expressions break ffl token time re done expanding nfa 
additional operators operators develop planar graphs describe nfas things 
describe sophisticated planar graphs example complete graph nodes generated operators 
way generate additional planar graphs operator borrowed cellular encoding 
operator acts node head 
creates new node edge node opera initial edge 
edge encoding nfa constructions breaking regular expression subexpressions 
shows construction subexpression st shows construction shows construction 
tor modifies 
lastly operator adds new edge 
essence splits node nodes moving outgoing edges adding single edge powerful operator comes price 
modifies nodes associated edges operator official edge ensure total execution order chromosome interpretation chromosome ambiguous 
way traverse tree depth left right order 
important feature edge encoding modular operators 
modular operators edge encoding similar automatically defined functions gp koza chromosome longer tree forest trees called operators trees 
tree add collection operators special operator single child 
additionally define maximum recursion depth modular operator calls 
executed passes edge provided root operator begins execution tree 
executed grafted position 
recursion depth incremented operators tree completed execution 
recursion depth exceeded time executed pass edge root operator passes sole child 
initially execution begins tree forest 
scheme possible tree chromosome repeatedly call trees recursively call develop repetitive sections graph 
grow large sophisticated graphs relatively small chromosomes 
example shows small tree chromosome low recursion depth manages grow complex graph loop double reverse tree tree recursion max depth 
chromosome recursion trees maximum recursion depth 
operator boring terminal operator edge 
execution begins tree 
recursive operators 
shows growth pattern phenotype graph 
possible operators 
example cut useful terminal operator simply eliminates edge graph 
export child operator creates new edge separated graph entirely making possible disconnected graphs 
passed edge merge single node eliminating addition uses operator create optional self loops 
course variants existing operators 
example add self loop tail edge head abbreviation reverse loop reverse 
creating graphs edge encodings operators describe interesting graphs describe graphs particularly ones large number nonplanar interconnections 
appears create possible graphs impose unusual traversal order cellular encoding breadth traversal wait operators allow operators pass additional information aside single edge 
feel better help preserve semantics building blocks crossover experimenting second options 
scheme operators pass children edge possibly empty stack graph nodes 
permits earlier operators create new nodes operators may attach edges 
operator may modify stack making copy modifying copy passing copy children 
operators modify stack including operators discussed far simply pass children 
initial stack passed root operator empty 
assume operator passed edge processing passed left child 
op 









growth graph structure defined 
edges labeled easier keep track example 

initial edge 

double 

tree called performs loop reverse 



tree recursively called performing double 

tree called second time performs loop reverse 



tree recursively called second time performing double 
tree called recursion depth maximum 


tree longer recursively called maximum recursion depth graph finished 
sufficient describe topology connected graphs nodes table 
operators creating general graphs 
operator children effect double create additional edge 
loop create additional edge 
reverse modify 
cut eliminate edge push create newnode copy stack 
push copy give copy push child 
attach copy stack 
stack empty create push new node copy 
top node stack copy create new edges 
pop stack copy pass copy attach children 
effect attaches edges top node stack forming triangle efg 
proof operators sufficient create nodes 
outline create arbitrary connected graph nodes push nodes stack series push operations 
create complete graph nodes multi edges performing attaches original edge nodes newly attached edges nodes 
add self loops necessary loop double 
reverse edges proper direction 
cut unwanted edges form resultant graph 
presumably efficient ways construct particular graph construction shows encodings describe possible graphs 
figures give example edge encoding uses push attach produce non planar graph 
large number possible operators 
example pop pop graph node stack making attachments 
push tail node edge stack 
variations attach attach single edge attach edges pop node stack 
push push double split attach attach attach cut attach 
chromosomes produce version multi edges self loops 
operator boring terminal operator edge 
kinds operators produce graphs theory preliminary results indicate graphs high number interconnections demand convoluted combination operators 
may common graphs difficult evolve 
experimenting number ways flatten space possible graphs genetic search purposes 
observation useful pushes appear earlier tree attaches 
take advantage eliminating pushes entirely assuming initial stack passed root node automatically holds graph nodes needed attaches 
initial comparison cellular encoding edge encoding cellular encoding strong describe graphs nodes 
encodings differ greatly types graphs evolutionary landscapes favor 
cellular encoding favors graphs high numbers interconnections high edge node ratio 
remove interconnections cellular encodings go complicated routine increments node registers performs cut operations 
contrast edge encoding favors graphs low numbers interconnections low edge node ratio 
create dense edge connections multi edges edge encodings likewise require complicated combination operators 
interesting comparison size encodings 
simply evolving network topologies edge encodings larger cellular encodings 




growth graph structure described 
initial edge 

pushes 

double split 

leftmost attaches cut 

remaining attaches 
edge encoding operates edges operator edge edge encoding 
edge labels need encoded distinctly continuous valued weights neural network encodings similar size cellular encoding distinct operators label edge 
additionally appears encodings may differ size encodings phenotype creation time roughly bounded size graph encoding size 
final important comparison degree scheme takes advantage building blocks graph construction 
domains highly fit chromosome consists subparts reasonably fit may serve useful components individuals 
domains genetic landscape favors building blocks chromosomal encoding promotes development building blocks valuable 
cellular encoding attempts promote building blocks modular reuse gp crossover mechanism 
convinced promotes building blocks expect crossover individuals result dramatic unexpected non local changes individuals 
cellular encoding breadth traversal execution operators possible subtree position individual significant effects meaning subtree effects phenotype 
lack building block promotion may serious primary domain cellular encoding evolution standard feedforward fully recurrent neural networks large numbers connections 
angeline saunders pollack strong argument basic blocks help designing neural networks domains ga deceptive goldberg meaning development building blocks actively inhibits finding solution 
building blocks probably prove useful great graph domains 
domains think edge encodings may advantage effects crossover highly localized subnetwork characteristics preserved 
edge encoding cellular encoding allows standard expression genetic programming techniques evolve arbitrary graph structures 
resulting graphs may employed various ways example neural networks automata knowledge base queries 
encoding scheme biases genetic search different way example cellular encoding favors graphs high edge node ratios edge encoding favors graphs low edge node ratios 
reason believe certain domains better served scheme 
believe edge encoding greater advantages conferred mere difference search bias 
example believe edge encoding allows cleaner intuitive control edges nodes graphs applications 
believe edge encoding allows better genetic building blocks maintain utility crossover 
preliminary report focused technical description edge encoding little evidence beliefs advantages technique 
evidence beliefs result experiments compare encoding schemes range problems experiments currently progress 
research supported part onr afosr arpa contract dast 
bibliography aho sethi ullman 

compilers principles techniques tools 
reading addison wesley 

angeline saunders pollack 

evolutionary algorithm constructs recurrent neural networks 
ieee transactions neural networks 

ieee 
kuiper 

designing modular artificial neural networks 
proceedings computing science netherlands editor 

amsterdam sion stichting mathematisch centrum 
collins jefferson 

artifical neural network representation artificial organisms 
parallel problem solving nature 
schwefel manner editors 

berlin springer verlag 
fullmer miikkulainen 

marker genetic encoding neural networks evolve finitestate behavior 
proceedings european conference artificial life ecal 
paris 
goldberg 
genetic algorithms search optimization machine learning 
reading addison 

gruau 
genetic synthesis boolean neural networks cell rewriting developmental process 
proceedings international workshop combinations genetic algorithms neural networks darrell whitley david schaffer editors 

los alamitos ieee press 
kitano 
designing neural networks genetic algorithm graph generation system 
complex systems 

koza 
genetic programming ii automatic discovery reusable programs 
cambridge ma mit press 
koza rice 

genetic generation weights architecture neural network 
ieee international joint conference networks 
ii ii 
seattle ieee 
lindgren nilsson 

regular language inference evolving neural networks 
proceedings international workshop combinations genetic algorithms neural networks darrell whitley david schaffer editors 
los alamitos ieee press 
teller 
evolving programmers evolution intelligent recombination operators 
advances genetic programming ii angeline kinnear editors 
cambridge mit press 
thompson 
regular expression search algorithm 
communications acm 



context free language induction evolution deterministic push automata genetic programming 
working notes genetic aaai 
eric siegel john koza chairs 
aaai press 
