beating bottleneck case log structured file systems john ousterhout fred douglis computer science division electrical engineering computer sciences university california berkeley berkeley ca cpu speeds improving dramatic rate disk speeds 
technology shift suggests engineering office applications may limited benefit cpu improvements 
discusses techniques improving performance including caches battery backed caches cache logging 
examine particular detail approach called log structured file systems file system representation disk form append log 
log structured file systems potentially provide order magnitude improvements write performance 
log structured file systems combined arrays small disks provide high bandwidth large main memory file caches satisfy read accesses believe possible achieve fold improvements performance today systems 
described supported part national science foundation presidential young investigator award 
ecs 
mip 
beating bottleneck january 
computer program system consists components components faster leaving components unchanged components performance bottleneck 
notion put forth gene amdahl late come known amdahl law 
technology trends suggest disk input output may bottleneck near 
cpu speeds increasing dramatically memory sizes speeds speeds disk drives barely improving 
new file system techniques performance computers limited disks file storage 
example suppose application program today spends time waiting disk cpu speed improves factor disk improvements application run times faster spend time waiting cpu speed improves factor disk improvements application run twice fast spend time waiting fold improvement cpu speed result fold improvement application speed 
fortunately technology trends offer hope beating bottleneck large memories disk arrays 
memories get larger larger possible cache file information main memory eliminate disk accesses 
second disks cheaper physically smaller 
practical build disk systems containing tens hundreds drives disk arrays 
disk arrays don improve performance single small access offer greater bandwidth possibility concurrent accesses 
discussion technology trends related problems may pose engineering office applications set possible solutions 
goal find ways capitalizing fast moving technologies cpu speed memory size disk array size compensate slow moving technologies disk seek times systems limited 
section considers technology trends detail special emphasis disk arrays 
section uses information file access patterns compute worst case scenario requirements 
section discusses file caching known technique implemented systems section argues write traffic limits performance improvements caching 
sections discuss ways improve file caches reducing write traffic battery backup cache logging 
section radical detailed proposal restructure file system representation information disk form circular append log 
log structured file system eliminates seeks writes may improve writing performance order magnitude 
logging approach easier utilize beating bottleneck january additional bandwidth provided disk arrays 
combined large mainmemory file cache cache satisfy read requests log structured disks handle writes efficiently 
think approach result times better utilization disk bandwidth today file systems disk arrays containing hundreds disks orders magnitude total improvement file system performance may possible 
log structured file systems advantages including faster crash recovery automatic clustering files written time 
section describes similarities log structured file systems section concludes 
success new techniques described may determined time 
implemented log structured file system hardware suitable exist years 
say sure prove bottleneck suggest 
hope exposing issues early encourage researchers experiment approaches high performance luck acceptable solution demonstrated bottleneck manifests 

technology trends technologies advance rapidly changes occur basic tradeoffs system design offering interesting problems alternatives system builders 
call change technology shift 
engineering office computing environments witnessed major technology shifts years 
shift occurred memory sizes increased enormously cpu disk speeds hardly changed 
opened new memory intensive application areas bit map graphics laser printing possible improve performance caching files main memory 
second technology shift underway 
typical cpu speeds engineering office environments increase factors 
memory sizes increase substantially probably factor 
contrast disk speeds particularly seek times improve factor time period 
shift open new cpu intensive applications suggests new techniques needed keep performance bottleneck 
disk drives improved performance improved radically cost storage density 
trend years disk drives physically smaller cheaper performance capacity comparable drives replace 
seeing advent disk arrays large high performance reliable disk systems created combining small inexpensive disks 
predict disk arrays hundreds thousands disks standard products 
beating bottleneck january disk arrays offer potential performance advantages 
disk array permits greater bandwidth single disk array organized transfer disks parallel 
second disk array permits independent accesses second keep disks busy simultaneously 
unfortunately disk arrays improve basic disk latency access application sequential accesses small unrelated pieces data run faster disk array single disk 
key question addresses take advantage technologies improving rapidly cpu speed memory size disk array size compensate technologies improving rapidly seek times 

file access problem section attempt predict today file systems behave technology predictions section accurate changes file system organization 
section discusses file access patterns section estimates demands placed computing system mid 

file access patterns order understand impact technology changes file system performance consider file systems application programs 
think file access patterns separated general classes scientific computing transaction processing engineering office applications 
classes appear suited disk arrays third 
class file usage call scientific processing characterized programs read write large files sequentially 
scientific applications engineering database applications fall category 
sequential blocks large files spread evenly disks array striped disks simultaneously read write files 
files large cost seeks small compared cost reading data file system performance scale size array 
cpu power number disks array scale rate appears years scientific applications able scale smoothly performance disk latency improve 
term transaction processing refer applications airline reservations automatic tellers point sale terminals 
systems typically handle large numbers concurrent requests small number disk accesses example reserve seat deposit 
transaction processing systems usually measured throughput transactions second service time individual transactions 
different requests usually beating bottleneck january involve different disk data possible keep disks busy simultaneously 
means transaction processing systems scale smoothly long number disks array increases fast cpu power speed individual transaction limited latency system throughput increase 
third class file usage engineering office applications consists programs access large numbers small files source files program font libraries laser printer 
programs unix environments fall class 
applications similar transaction processing systems small requests 
different transaction processing isn concurrency application program sequence requests cpu typically runs application programs 
furthermore goal increasing cpu power engineering office environment individual programs run faster increase number concurrent programs 
result applications appear benefit disk arrays files short striping doesn help access cost latency isn concurrency occupy disks large array 
rest focus engineering office applications 
partly obvious take advantage disk array technology applications partly experience applications 
results apply scientific applications 

disks user 
suppose rates generated application programs scale evenly cpu power 
studies plus measurements suggest average traffic generated single user mip engineering workstation kbytes sec 

environment mid mip workstations user generate kbytes sec 
traffic 
average file size engineering office environments kbytes 
today file organizations bsd unix disk transfers required file access read write file header information read write file data :10.1.1.114.9535
typical disks today transfers second 
effective disk bandwidth single disk transfers sec 
transfers file kbytes file kbytes sec 
file system organization average file sizes don change years calculations suggest systems need disks user keep demands 
unpleasant implications 
suggests disks represent far greatest part cost computer system 
second requires operating system organize file system beating bottleneck january keep disks busy user user data ends single disk file system able keep user demands 
course possible access patterns change cpu power increases 
example extra cpu power machines primarily managing user interface graphics speech recognition require little additional average file sizes increase allow efficient utilization disk bandwidth happen example applications heavy large images 
extent changes occur demands estimated 
hand cpu power increase mips mid increases mips disks user required 
think plausible disk requirements severe difficult problems terms cost terms keeping busy 

solution file caching file caching implemented systems improve file performance 
idea file caching retain accessed disk blocks main memory repeated accesses information handled additional disk transfers 
locality file access patterns file caching reduces disk substantially typical systems today achieve read hit rates file caches mbytes 
file servers file caches hundreds mbytes hold files groups dozens users periods days weeks see supporting evidence 
result read requests satisfied file cache 
unfortunately file measured files accessed bytes transferred writes data written disk 
possible approach place newly written data cache delay writes disk newly written data deleted written disk disk requirements reduced correspondingly example measured newly written bytes deleted seconds measurements current system new bytes lived seconds lived day 
cache contents may lost system crash power failure 
order provide reasonable assurances file integrity writes disk probably delayed seconds minutes 
write traffic limit performance improvements caching factor 
estimates previous section caching reduce disk requirements user assuming mip workstations 
low range tolerable high result disk drives greatest part workstation cost 
beating bottleneck january file caching appears solve problems changes nature disk ways 
shifts balance disk reads writes 
reads satisfied cache writes eventually go disk result disk transfers consist primarily writes 
second caches provide buffer bursts notoriously bursty 
bursts reads satisfied cache bursts writes buffered cache actual disk performed asynchronously requiring writing process wait 
point interesting issues emerge disk traffic dominated writes data written read back live file cache deleted overwritten 
main reason performing disk safety precaution case cache contents lost 
seeks limit disk performance 
files kbytes long transfers required file raw disk bandwidth utilized 
files continue small average hope improving disk bandwidth reduce number seeks file 
improvements file system performance may obtained addressing issues 
general approach improve reliability cache contents survive crashes power failures 
unnecessary write data disk replaced cache 
cache lifetimes longer average file lifetimes files deleted overwritten replaced cache disk rates reduced drastically 
sections suggest possible ways improving cache reliability 
second general approach change disk organization file accesses may handled single seek 
section introduces log structured file systems approach line 

solution caches battery backup way file caches reliable store memory battery backup 
allow contents caches survive power outages 
battery backup steps needed ensure reliability cache data 
addition operating system recover contents file cache reboot leave information normal operation possible 
battery backup sufficient file cache able survive operating system crashes power outages 
hypothesize system crashes fail kind little damage done system halts reboot 
possible build file system recover contents file cache reboot 
unfortunately little data available failure modes general purpose operating systems data beating bottleneck january confident cache recovery possible 
problem battery backup reconfigurability 
suppose file server suffers hardware failure requiring weeks repair 
assuming battery backup long unacceptable data file cache unavailable long repair period 
ideally possible plug cache memory card different cpu continue operation just disks moved emergency today systems 
suggests best organization battery backup cache silicon disk 
silicon disk accessed fast device memory corrupted system crash 
rams sufficiently cheap silicon disks replace magnetic disks altogether 
file caches reliable information need written disk little disk traffic left information live die cache 
primary role disk archival storage area infrequently accessed data 
environment wonder current disk organizations appropriate 
sense organize disk structures archival function better versioning redundancy eliminate tape backups required today systems 

solution cache logging way improve reliability file caches disk array hold backup copy cached blocks 
blocks cache modified new contents written backup disk sequential stream 
disk written full cylinder units track track seeks long seek complete pass disk 
disk operate nearly full bandwidth 
cache reconstructed log disk crashes power failures 
cache logging simplest solutions described probably added existing systems difficulty 
provide benefits battery backed cache memory difficulties ensuring cache integrity crashes 
cache logging wasteful 
combined traditional file system structure result levels permanent storage cache backup disk real disk tape backup 
information rarely read levels really necessary 
addition cache logging probably leave main file storage disks nearly idle disk performance problem better combined bandwidth disks system fully utilized 
beating bottleneck january 
solution log structured file system exotic proposal merge cache log main file disks 
call log structured file system file system representation disk consist log 
files modified file data header information appended log sequential stream seeks 
cache logging approach described allows file system utilize full bandwidth disk array individual files small collected large blocks written log 
cache logging approach uses single representation information disk 
addition potential improved disk bandwidth utilization logstructured file systems attractive properties fast recovery 
log structured file systems offer possibility faster crash recovery traditional random access file systems 
file systems perform update place unix file systems leave disk structures inconsistent power fail system crash occurs complex update 
part rebooting operating system scan disk maps free lists order detect repair inconsistencies 
disk repair times high half hour unix systems gigabytes file storage file systems larger times increase 
contrast changed information logstructured file system head log results cleaner failure modes 
possible organize log blocks need examined near head log recover crashes 
temporal locality 
log structured file system files written time stored place disk 
means groups files potentially retrieved disk single seek followed long read 
files written time tend read groups provide boost performance log structured file systems 
special case phenomenon large file written stored perfectly contiguously disk 
suggests scientific applications run log structured file system 
versioning 
append nature log means old versions files retained disk 
little extra bookkeeping effort possible old versions available users recovery certain kinds user errors command provided recover accidental deletions 
difficult issues resolved log structured file systems practical 
subsections describe problems possible solutions 
issue handle occasional retrievals required log section describes approach allows files retrieved log quickly today best file systems 
second issue manage log wrap section discusses possible solutions beating bottleneck january problem 
third issue achieve efficient disk space utilization discussed section 
section summarizes performance advantages disadvantages log structured file systems 

random retrieval log structured file system expect caches reduce disk reads drastically log structured file system provide mechanism retrieving information log 
previous uses logging require log scanned sequentially recover information 
result read performance thousands times worse today file systems small number reads ruin performance system 
random access retrieval mechanism essential log structured file system provide improved performance 
traditional file system bsd unix steps locating file :10.1.1.114.9535
textual name translated internal identifier file 
second internal identifier blocks file located 
name identifier translation accomplished reading directory files starting root working directory identifier known problem boils locating blocks file identifier 
systems accomplish map file describes file blocks located 
example unix file systems place map information fixed locations disk 
internal identifier identify file indicates map located 
unfortunately log approach doesn permit maps fixed locations require seeks modify maps files created modified deleted 
new modified information data map written head log 
key providing random retrieval design floating map structure integrated rest log 
paragraphs describe solution problem 
possible solution see examples illustrates feasibility random retrieval log structured file system 
illustrates steps traditional file system single fixed location map turned log structured file system floating maps 
shows traditional disk map array portion disk file data 
shows step log structured file system 
new data blocks allocated sequentially head log old data blocks re deletion section discusses re log wraps 
map array fixed location updated place file structure changes 
shows second step log structured file system 
map array treated special file data blocks special file contain maps 
treating map array file blocks float just file map entry modified block map file rewritten head log 
additional super map gives location block map beating bottleneck january super map map entry data block free block data log map array data map array 
derivation log structured file system traditional 
shows addition block existing file 
shows traditional file system separate map data areas new data block allocated map updated place 
data area log new data block gets added log map entries updated place 
disk log 
map array treated file location determined super map file modified new copy map appended head log super map modified show location map 
written disk permit fast recovery crashes 
file 
map entry consult super map locate entry disk super map cached memory just file information extra disk accesses required 
final step consists occasionally writing super map head log 
illustrated 
super map contain information identifies unambiguously 
system crash needed beating bottleneck january recover file system search back log copy super map 
super map written short search 
log entries super map regenerate system state time crash 
writing super map disk atomic file system commit encapsulates state system particular point time 
culmination steps file system read performance nearly identical current file systems 
time possible performance advantages come log approach write data 

log wrap second major issue building log structured file system handle wrap 
matter large log eventually fill 
time information log longer alive files deleted overwritten 
log takes hours days wrap information log dead measurements dead log takes day wrap 
issue recover space longer continuing access disk log 
issues dealing log wrap similar issues garbage collection 
possibility copy approach system copy live information log leaving free space 
approach infeasible result lengthy times compaction logs practical size wrap day compaction necessarily carried night 
alternative compact log incrementally continuously log continually wrapping 
new portion log written old information occupying space examined 
dead information may discarded live information saved copying skipping archiving 
possible approach compact live information copying head log see 
approach result extra expense longlived files get time log wraps past aren 
second approach leave live information place add new information 
approach result extra overhead skip live information cause disk fragmented probably bad idea large blocks live information 
third approach move live information storage area 
example hierarchy logs information gets archived log log logs wrap 
approach produces result similar garbage collectors generation scavenging 
offers possibility integrating archival storage optical disks digital video system senior level log hierarchy 
important issues handling log wrap identify files live 
accomplished information main beating bottleneck january live information dead information wrap point wrap point wrap point newest info newest info newest info oldest info oldest info oldest info 
incremental compaction log structured file system 
new data appended log left right 
log just filled oldest blocks log alive 
live information compacted head log leaving empty space new log information 
new information appended log regenerating situation 
memory information read back tail log seeks required retrieve information disk performance advantage logging lost 
file maps cached main memory maps files probably available memory time liveness determination 
turns case data structure maintained memory map free log blocks liveness determined disk accesses 
log wrapping introduces overhead factor disk bandwidth utilization log block read recover live information written 
disk seek required reposition disk heads writing 
distance seeks small log written large blocks seek amortized large amount data 

disk utilization third problem implementing log structured file system disk space utilization 
log wrap introduces time space tradeoff efficiency beating bottleneck january disk bandwidth utilization efficiency disk space utilization 
illustrates problem hypothetical scenarios 
general higher disk space utilization implies information alive log wraps means disk bandwidth copy information bandwidth available write new information 
factors determine precise nature tradeoff 
distribution file lifetimes 
factor outside control file system 
second factor disk space utilization file system control 
file system control space utilization setting threshold refusing allocate new files space utilization exceeds threshold example bsd unix threshold 
possible select range scenarios curves 
table shows range tradeoffs apply file lifetimes exponentially distributed 
example second line table indicates users willing pay twice disk storage half available space able improve performance factor bandwidth utilization today structured file systems 
wrap age log wrap age log age log wrap space space space 
hypothetical scenarios disk space utilization log structured file system 
axis corresponds location log corresponds information just written wrap corresponds oldest information log overwritten 
axis indicates fraction information position log older information deleted 
total disk space utilization ratio area curve area dotted rectangle 
required wrapping related height curve wrap point 
information deleted time log wraps results low overhead log wrapping poor disk utilization 
disk space fully utilized disk bandwidth information log head 
shows ideal unrealistic situation files live just wrapped die second need dealt wrapping time 
beating bottleneck january live bandwidth space fraction utilization utilization table tradeoff disk space utilization disk bandwidth utilization 
column lists fraction information alive log wraps 
second column lists fraction raw disk bandwidth utilized write new information assumes half bandwidth read back old contents log remaining half rewrite live information rest write new information third column contains disk space utilization computed assumption exponentially distributed file lifetimes 

performance comparisons considering log structured approach concerned primarily small files read written sequentially entirety usually file cache 
log structured file systems variety situations 
access pattern files updated piecewise read sequentially frequently locality performs worse log structured file systems today file systems 
nature log structured file system outperform file systems writes 
looking weaknesses approach sense look reads file cache 
small files log structured file system read performance today file systems shown section 
worst case seek required file map file data 
little cleverness log management possible write file map close file data retrieved single seek 
result better performance current file systems 
large file reads cases consider 
simplest case files written 
files contiguous log allows read efficiently today best file systems particularly file map written data log 
random access reads file require seeks log structured file system traditional file system 
second case large files consists written piece wise gradually appending files updating random access mode 
logging approach permits piece wise writes require beating bottleneck january file rewritten new data file go log 
adjacent disk data written file previously 
file read sequentially seeks required 
comparison traditional file system keep file data contiguous disk sort access pattern 
performance large piece wise updated files necessarily worse log structured file system traditional file system 
log structured file system performs writes pieces essentially zero seeks requires seeks sequential reads 
traditional file system requires seeks writes read back file seek 
file written read cache satisfies read requests log structured file system better performance 
units reading correspond units writing file isn read sequentially log structured file system better performance seeks write read vs write read 
scenario log structured file system worse file written pieces read larger blocks isn accessed stay cache read traffic write traffic 

related database community logging techniques years reduce disk transaction processing reliability crash recovery tool 
databases log supplement random access representation database replacement log structured file system 
logging approaches begun see general purpose file systems motivation usually reliability limitations write media 
contrast motivation logging achieve high performance read write media 
projects logging part file system write media swallow cdfs optical file cabinet 
swallow system included generational approach handle media different characteristics cdfs optical file cabinet papers describe mechanisms random access retrieval logs 
systems assumed infinite storage capacity write media address issues 
finlayson cheriton implemented system providing append log files propose general purpose construct 
finlayson cheriton system allows retrieval log cost proportional logarithm log size comparison constant cost mechanism section 
finlayson cheriton required files append general unix model assumed assumed infinite storage capacity address log wrap issues 
beating bottleneck january project logging improve performance hagmann cedar file system 
logs file maps order provide high reliability map information performance degradation 
hagmann logs map information mechanisms reduce seeks file data 
furthermore hagmann log supplement normal disk structures replacement 

summary cpu speeds increase factor corresponding increases speeds applications scale smoothly performance 
described possible solutions problem think log structured file systems offer particularly intriguing alternative engineering office applications 
comparison today file systems cheap resource disk bandwidth expensive resource seeks 
log structured file systems disk arrays provide efficient writing small files main memory file caches provide efficient reading 
result think performance improvements factor feasible 
improvement come having disks array provides potential fold improvement bandwidth operations second operating system keep disks busy 
log structured file systems allow disks utilized provide times better bandwidth utilization disk today file systems 
approaches file caches battery backup proves better log structured file systems think nature disk changing justify new disk organizations 
logging approaches offer easier recovery versioning better locality today file systems logging techniques may applicable supplement approaches 
course real proof implementation 
section pointed problems possible solutions probably problems haven foreseen 
step implement prototype log structured file system analyze behavior 
plan encourage try similar techniques different approaches beating bottleneck mip machines available spend time waiting 
acknowledgments garth gibson doug johnson mike nelson randy katz mike stonebraker touati provided comments early drafts substantially improved presentation 
beating bottleneck january 
amdahl validity single processor approach achieving large scale computing capabilities 
proc 
afips spring joint computer conference atlantic city april 
finlayson cheriton log files extended file service exploiting write storage 
proc 
eleventh symposium operating systems principles november pp 

gait optical file cabinet random access file system write optical disks 
ieee computer vol 
june pp 

garfinkel love file system write media 
mit media lab report october 
hagmann reimplementing cedar file system logging group commit 
proc 
eleventh symposium operating systems principles november pp 

howard scale performance distributed file system 
acm transactions computer systems vol 
february pp 

kim synchronized disk interleaving 
ieee transactions computers vol 
november pp 

lazowska file access performance diskless workstations 
acm transactions computer systems vol 
august pp 

mckusick fast file system unix :10.1.1.114.9535
acm transactions computer systems vol 
august pp 

nelson welch ousterhout caching sprite network file system 
acm transactions computer systems vol 
february pp 

ousterhout trace driven analysis unix bsd file system 
proc 
tenth symposium operating systems principles december pp 

patterson gibson katz case redundant arrays inexpensive disks raid 
acm sigmod chicago june pp 

satyanarayanan study file sizes functional lifetimes 
proc 
eighth symposium operating systems principles december pp 

schroeder gifford needham caching file system programmer workstation 
proc 
tenth symposium operating systems principles december pp 

beating bottleneck january reliable object oriented repository distributed computer system 
proc 
eighth symposium operating systems principles december pp 

ungar generation scavenging non disruptive high performance storage reclamation algorithm 
proc 
software engineering symposium practical software development environments pittsburgh pa april pp 


