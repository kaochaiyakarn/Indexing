xml xml queries transformations users martin erwig oregon state university department computer science corvallis usa erwig cs orst edu propose form interface expresses xml queries transformations called document patterns describe properties requested information optionally specify results reformatted restructured 
interface targeted casual users want fast easy way find information xml data resources 
dynamic forms intuitive easy interface obtained solve wide spectrum tasks ranging simple selections projections advanced data restructuring tasks 
interface especially suited users having learn programming query language knowing query xml language syntax dtds schemas 
dtds exploited particular user interface level support semi automatic construction queries 
xml emerging standard data exchange 
vast amount tomorrow data web resources available xml format 
strong demand languages process xml documents data resources 
particular querying transforming xml data format frequent task 
fact computer user internet potential user xml data presents challenge design powerful easy languages processing xml 
general expected users able willing learn sophisticated xml query languages 
particular assume users knowledge xml speak dtd xslt 
hand search engines solely key words powerful exploit structure xml format contributes data 
experience relational databases shown form query update facilities say sql accepted employed users 
strong need user friendly query interfaces xml documents 
impact designing implementing interfaces high users huge group xml clients 
largest group xml user largest group users software package 
approach query transform xml data particularly aimed users 
general idea users draw samples documents interested 
visualization xml mimics forms people deal achieve easy direct way expressing xml queries 
particular approach require users learn query language 
query mechanism scales degree users start simple keyword searches advance adding structural requirements 
addition reformatting restructuring query results possible 
section demonstrate examples textual query languages currently process xml 
derive design goals user query system 
proposal query interface intuitive visualization xml nested boxes called document metaphor describe section 
section show elementary queries posed simply drawing example documents called document patterns match sought information 
advanced queries particular xml transformations expressed pairs document patterns called document rules pattern essentially specifies selection data second pattern express projections restructuring data 
shown section 
xml querying processing possible presence dtds particular users aware dtds 
section demonstrate dtds nicely utilized obtain menu driven interfaces construct queries 
related discussed section section presents 
xml query languages exist different data model query language proposals query transform xml data 
exceptions textual query languages evolved database query languages emerged xml 
give impression illustrate believe suited users consider example application show queries expressed existing languages 
assume document database providing information music resources cds scores midi files lyrics video clips 
small excerpt shown 
music 
cd year 
group group 
title dreams control title 
track 
title walk walk title 
composer fernandez composer 
track 
track 
title difference title 
composer composer 
composer fernandez composer 
track 
cd 
score 
title morning dance title 
group group 
composer composer 
guitar dim guitar 
score 
music 
call xml value music 
querying xml traditional way typical simple queries databases shown select sub elements certain kind get sub element contains specific piece data 
example interested obtain information 
available scores 
material favorite group consider queries expressed textual xml query languages lorel xml ql 
lorel query language evolved semi structured database query language xml query language 
syntax follows tradition sql course additional elements account nested objects 
tasks solved lorel quite easily 
query reads select music score result just score element 
second query uses wildcard matching arbitrary tags music sub elements restriction concerning favorite group expressed clause 
select music music group query returns cd score element 
cases result wrapped root element answer 
change root element scores 
favorite 
clause additional update 
queries simple computer scientists database experts somebody knows sql similar lorel difficult learn certainly choice 
applies principle textual query languages proposed 
users typically technical background requiring learn query language cases prohibitive 
different way provide users xml query capabilities 
consider xml ql query language proposal illustrate point 
xml ql textual query language differs lorel xml query languages approach formulate queries xml patterns user pose query describing result obtain 
example queries music database written xml ql construct scores 
music 
score score 
music 
construct scores 
construct favorite 
music 
group group 
music 
construct favorite 
queries definitely verbose lorel queries nice point style conditions structure contents elements directly expressed patterns need cast path expressions additional conditions 
easy somebody knows xml express queries xml data 
users generally know xml syntax want care particular xml syntax angle brackets slashes nested tags human friendly notation 
lorel approach requirements technical background query language usage barrier probably high users 
design goals user language driven examples derived couple goals serve guidelines design xml user query system 

define textual query language 

avoid xml syntax 

simple intuitive visualization xml 

employ pattern matching 

facilitate restructuring 

keep system simple intuitive possible 
items summarized third lead visual language xml 
language developed simple visualization xml data called document metaphor described section 
introduce concepts document patterns section document rules section demonstrate formulate queries xml data 
simple visualization xml recall sample xml value music section 
grouping structuring information parts nesting bracketing tags clearly unambiguous serves precise specification structured data 
particular suited processed computers text format suited exchanged different computer systems 
easily comprehended humans 
indicated fact xml data communications new lines indentation employed visually emphasize structure data 
fact user hardly see xml data raw form look page properly rendered browser 
frustrating users having learn xml particular representation data pose queries 
seek visualization xml data visually attractive simple intuitive reflects structure xml data 
means particular visualization correspondence xml 
design strongly influenced kind documents people deal faxes product descriptions kinds forms 
documents typically contain portions free text categorized informations fields 
fields consist header short textual description value text structured part example collection fields 
essentially propose represent elements fields boxes tag printed bold face header box contents visualized inside box 
abbreviation elements contain text tag text 
attributes attribute names set bold face 
representation mimics layout form documents known people 
especially supported abbreviating notation unstructured elements 
instance xml value music section visualized shown 
music cd year title dreams control group track title walk walk composer fernandez track title difference composer composer fernandez score title morning dance group composer guitar dim 
document visualization music resources course nice tailor visualization definitely easier understand users xml representation 
visualization directly employed visual query language 
interesting users user knows documents look sample documents patterns extract information xml data resources 
need learn query language additional visual annotations express queries 
just second pattern result pattern document rules formed offer control result express restructuring transformations data 
document patterns document rules visual xml query transformation language xing pronounced crossing acronym xml graphics 
document patterns pattern matching provides light weight approach data processing frees user large degree need language express search 
desired data described samples patterns specify structural contents constraints 
pattern matching suited paradigm user query languages 
usually pattern consists constants variables constants specify objects appear data qualify search result match pattern variables bind data needed processing constraints 
unfortunately concept variables re introduces flavor formal language discouraging users 
striking database query interfaces systems followed query example philosophy popular compared form query facilities offered database vendors 
reason qbe required variables certain tasks called forms interfaces offered possibility data entry forms pose simple queries just entering sample data explicitly exposed schema new concepts learned 
way document instantly viewed document pattern directly query 
extensions document patterns little complex documents required simple queries needed extended notation inserted automatically user interface user necessarily need learn 
consider queries section expressed xing 
finding scores achieved simple pattern music score find scores matches root element music score sub elements 
finding resources favorite group bit complex 
want match arbitrary sub elements sub elements having arbitrary tag 
employ regular expressions tag names case simple wildcard matching tag name 
sub elements want match sub element group content text 
music group find resources favorite group regular expressions way generalize weaken queries yield results 
possibilities patterns deep queries 
pattern combines patterns matches element matches patterns 
example refine previous query get scores 
means simply wildcard matching sub elements music value different sub criteria different sub elements 
notation patterns similar notation regular expressions different patterns joined bar 
get music cd group score group guitar cds guitar scores favorite group convincing examples patterns 
deep query pattern prefixed ellipsis meaning look pattern nesting depth searched document 
example find pieces particular composer see 
music 
composer pieces composer ellipsis score element retrieved 
document rules document rules reformat restructure query results 
task required users reformatting needed time time 
document rule consists document patterns joined double arrow called argument pattern specifies structural content constraints 
argument patterns responsible selection wanted data 
called result pattern specifies elements 
means apart doing restructuring result patterns mainly perform projections sub elements 
example result query shown cd score element contain group element 
reason document pattern just shorthand document rule result argument patterns abbreviates case leads projecting just group information 
get information elements fully fledged pattern rule appropriate result pattern 
simple solution just element name sub elements result pattern 
face problem wildcard argument pattern know element name result pattern 
wildcard lead ambiguities multiple wildcards argument pattern 
require assign additional name element called alias referred result pattern 
music group favorite piece resources favorite group query return complete xml data source 
course want see example just title group add corresponding sub elements result pattern 
illustrate data restructuring consider task building list titles composers 
argument pattern deep pattern get titles scores track titles result pattern simply omit grouping elements title composer elements see 
effect flattening xml trees done computing cartesian product lifted elements 
music 
composer list composer title list titles composers necessary restructuring operations identified comparing result argument pattern omitting elements means apply flattening cartesian product operations inserting new elements results group operations 
example wanted list composers titles insert titles element title element result pattern 
exploiting dtds user interface document type definition restricts attributes possible nesting elements xml data defines range possible instantiations xml values 
deliberately query mechanism independent dtds keep simple generally applicable 
dtds provide useful information data source taken advantage 
highly useful application user interface 
user construct document patterns build xml queries 
typically happens editor allows create boxes assign change box tags 
having dtd available creating named boxes easy pop menu offer possible attributes sub elements box clicked 
menu tags selected nested box appropriate label automatically inserted 
elements selected regular expression constructed 
mentioned wildcard inserted automatically tags selected menu 
repeatedly creating sub boxes box results adding sub boxes adding sub elements pattern represented contrast patterns built marking sub box invoking menu 
altogether obtain relatively simple point click user interface create large variety queries simple easy learn way 
user interface aspect dtds provide automatic incremental static type checking patterns rules 
dtds utilized optimize queries transformations 
related large selection xml query languages 
discussed xml ql lorel instance yatl xql give just important examples 
dedicated xml query languages 
related languages querying world wide web survey see proposals area document processing example 
mentioned approaches text difficult users 
couple proposals visual interfaces querying xml xml gl queries denoted drawing trees reflect structure queried xml data 
xml gl fact xml expressions essence multi way trees 
trees represent visual syntax xml documents suited formal language manipulations necessarily user query languages 
point view xml gl general purpose visual programming languages 
contrast proposal represent xml documents form way nested rectangles attached labels achieves higher degree usability particular sense concreteness directness 
form query interface provided equix 
form metaphor outermost level nesting expressed simple indentation 
forms generated semiautomatically driven dtd 
means severe restriction data sources providing dtd queried 
expressiveness equix quite limited possible reformat query results possible perform data restructuring deep queries 
designed form interface denote xml queries transformations 
visual document metaphor notion document patterns rules provides direct simple way locate select information xml data resources 
believe described interface usable broad audience underlying document metaphor reflects common knowledge forms ii notion document pattern immediately accessible iii interface completely independent complex textual formal query language 
burnett 
visual programming 
webster editor encyclopedia electrical electronics engineering 
john wiley sons 
ceri damiani fraternali paraboschi tanca 
xml gl graphical language querying restructuring xml documents 
th int 
world wide web conference 
cluet delobel simeon 
mediators need data conversion 
acm sigmod conf 
management data pages 
cohen kogan nutt sagiv 
equix easy querying xml databases 
nd acm sigmod int 
workshop web databases pages 
deutsch fernandez florescu levy suciu 
query language xml 
th int 
world wide web conference 
erwig 
syntax semantics visual languages 
journal visual languages computing 
erwig 
language xml 
th ieee symp 
visual languages pages 
florescu levy mendelzon 
database techniques world wide web survey 
acm sigmod record 
goldman mchugh widom 
semistructured data xml migrating lore data model query language 
nd acm sigmod int 
workshop web databases pages 
mannila 
retrieval hierarchical texts partial patterns 
th acm sigir conf 
research development information retrieval pages 

data model document transformation assembly 
th int 
workshop principles digital document processing lncs pages 
robie editor 
xql xml query language 
metalab unc edu xql xql proposal html 
shneiderman 
direct manipulation step programming languages 
computer 

