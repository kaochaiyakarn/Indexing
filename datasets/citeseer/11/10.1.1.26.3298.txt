research summary dynamic detection program invariants michael ernst dept computer science engineering university washington box seattle wa usa cs washington edu explicitly stated program invariants help programmers identifying program properties preserved modifying code 
practice invariants usually implicit 
alternative expecting programmers fully annotate code invariants automatically infer invariants program 
research aims develop evaluate dynamic techniques discovering invariants execution traces 
hypothesis techniques effective extracting invariants programs extracted invariants useful programmers 
details see icse dynamically discovering program invariants support program evolution michael ernst jake cockrell william griswold david notkin ecgn 
motivation invariants play central role program development 
representative uses include refining specification correct program static verification invariants type declarations run time checking invariants encoded assert statements 
invariants play equally critical role software evolution 
particular invariants protect programmer making changes inadvertently violate assumptions program correct behavior depends 
near absence explicit invariants existing programs easy programmers introduce errors making changes 
alternative expecting programmers annotate code invariants automatically infer invariants 
research focus dynamic discovery invariants execute program collection inputs extract variable values infer invariants 
dynamic approaches international conference software engineering icse doctoral workshop los angeles ca usa may 
shorter version appears conference proceedings research summary dynamic detection program invariants michael ernst proceedings th international conference software engineering icse los angeles ca usa may pp 

testing accuracy inferred invariants depends quality completeness test cases additional test cases provide new data accurate invariants inferred 
approach complementary static approaches examine program text run program 
dynamically inferred invariants situations statically supplied invariants cases application dynamic ones may effective 
instance dynamic invariants form program spectrum changes indicate properties changed program input 
assist test case generation validate test suite invariants resulting program runs indicate insufficient coverage program values line executed 
nearly true invariant may indicate bug special case brought programmer attention 
discovered invariants inserted program assert statements test invariant ensure detected invariants violated code evolves 
double check existing documentation assert statements 
compilers exploit invariants optimizing common case profile directed optimization potentially higher level abstraction 
detected invariants bootstrap direct manual automatic correctness proof 
related dynamic inference research directly related uses inductive logic programming ilp qui coh construct horn clause loop invariants variable values particular loop executions bg 
ilp requires counterexamples available domain background knowledge resulting relations typically misclassify training set 
approach characterizes training set perfectly approach may misclassify additional data 
ai approaches neural nets may predict results little power 
traditionally machine learning attempts learn function gamma variables producing th classify examples specified categories directly applicable problem mit 
believe applying techniques subproblems task fruitful 
dynamic analyses examine program executions software tasks testing debugging 
program spectra specific aspects program runs event traces code coverage outputs reveal differences inputs program versions 
cook wolf event traces describe sequence events possibly concurrent system produce finite state machine generating trace cw cw 
static inference static analyses operate program text particular test runs typically sound conservative 
result properties report true program run static analyses limited uncertainty properties capabilities high cost modeling program states 
instance accurate alias analysis state art static checkers give face pointer manipulation 
ease checking properties runtime static dynamic techniques complementary 
considerable research addressed checking formal specifications dc det eva ln pfe verify invariants discovered dynamically 
determining property check considered harder doing checking weg bls goal discovery properties broad class possible ones 
formal proof systems generate intermediate assertions help proving goal formula propagating known invariants forward backward program weg gw km bbm 
variable types variety formal specification documentation checking detect errors 
type inference extends partial type annotations full ones similarly givan giv extends specifications inputs procedure output adds propagates data structure shape descriptions program hhn gh 
case array bounds checking si gup kw xp desired property obvious 
related includes illustrating compiler heuristically detects datatype implemented collection concrete operations 
staging binding time analyses determine invariant semi invariant values partial evaluation 
research agenda important directions ffl identify implement inference additional varieties invariant invariants additional data structures ffl improve implementation reduce runtime number spurious invariants reported ffl improve user interface give programmer control aspects inference process ffl evaluate effectiveness resulting tools initially small examples proof concept programmers real programs sections address issues turn 
extending domains logical operators current invariant detection prototype daikon limited ways notably inferring invariants integers arrays limited depth record structures reporting invariants logical operators disjunction implication existential quantifiers 
additional sources invariants detect new domains published invariant detection specification derivation formal methods experience real code including assertions specific properties useful general interest 
significant new domain invariants recursively defined pointer directed data structures 
pointers implicit explicit ubiquitous modern programming languages pointers dynamically allocated data structures complex relationships need maintained software evolves 
examples invariants include shape data structure gh reachability objects particular objects shared unique 
local invariants parent object child object handled current techniques global properties graph isomorphism require substantially effort detect efficiently 
large data structures may require incremental line line inference algorithms global properties checked necessary sufficient local properties established 
currently invariants program point implicitly conjoined true 
disjunctive invariants capture complicated invariants example numeric pointer satisfy null object ap ap ap 
disjunctive invariants require invalidated invariants immediately discarded invariants ranges compared 
predicated invariants extension disjunctive invariants form condition invariant invariant 
useful variables data structures correlated values field indicates purpose field indicates validity data modeled disjunction negation 
richer logics logics including existential universal quantification temporal logics useful capturing properties data types promising challenging areas 
improving inference implementation current implementation reports invariants users find interesting usable small programs slower desired 
solutions problems linked 
extraneous invariants compare unrelated values reporting value enumerated constant particular pointer value 
result treating value encountered multiple times intervening assignment computed times 
instrumenter addresses problems reporting types variables finer type analysis oj reporting variable assigned time encountered 
evaluating efficacy additional information reducing number reported invariants 
techniques reduce runtime prevent comparisons unrelated variables 
optimized implementation compiled interpreted language online offline computation provide gains 
plan provide user control scope checking performed 
user interface initial experience invariant engine revealed dimensions user interface improved better support programmers 
ui provide significant control program points instrumented variables instrumented points 
permit programmer focus interest relevant parts program reduce computation time inferring invariants relatively low program point costly entire program 
ui provide support organizing managing computed invariants 
permit filtering uninteresting invariants specification new relationships check grouping invariants variables relationships involved display invariants context program source code filtering statically obvious invariants immediately demand computation invariants computing differences sets invariants 
evaluation evaluation research consider effectiveness invariant extraction usefulness invariants 
component effectiveness invariant extraction primarily programs annotated invariants programs invariants easily determined 
examples include programs textbooks student programming assignments formal specifications required implementations standard data structures algorithms heaps trees sorting searching 
desired output known priori programs help verify invariant detector 
example questions answered include instrumentation produce data traces running programs sufficiently unobtrusive 
invariant detection require unreasonable amounts time space 
certain invariants varieties thereof extremely expensive compute 
heuristics effective improving detection speed accuracy degrading qualities second component usefulness detected invariants focus external users particularly ones unfamiliar invariant detection technology 
users programs solving real life software engineering tasks encounter day day 
possibly unanticipated ways tool experiences doing extremely valuable evaluating directing extensions 
phase evaluation may student programs written programming classes programs testing research researchers 
example questions answered include steep learning curve tool invariants understanding code 
tasks invariants useful tasks aided availability invariants 
invariants useful certain programmers 
availability invariants change way programmers think 
dynamically detected invariants complement software engineering tools techniques 
number potential test suites 
academia instructors expressed interest invariant detection assist students graders 
additionally researchers interested need tools help manage software engineering challenges advanced systems building 
high cost effectively replicating large scale programmer studies propose small number observational studies programmers evolving moderately sized systems research environment followed standard case study research design invariant detector substantial system 
feedback academic users faculty students developing software research efforts focus attention specific solutions enable broader effective invariants technology 
example help select choices domains logical operators consider 
users interested experimenting prototype invariant detection tool daikon especially encouraged contact author 
bbm bjrner browne zohar manna 
automatic generation invariants intermediate assertions 
theoretical computer science february 
bg ivan bratko marko grobelnik 
inductive learning applied program construction verification 
jos editor pages 
northholland 
bls bensalem lakhnech saidi 
powerful techniques automatic generation invariants 
cav pages 
coh william cohen 
grammatically biased learning learning logic programs explicit antecedent description language 
artificial intelligence 
cw jonathan cook alexander wolf 
discovering models software processes event data 
acm transactions software engineering methodology july 
cw jonathan cook alexander wolf 
eventbased detection concurrency 
fse orlando fl november 
dc matthew dwyer lori clarke 
data flow analysis verifying properties concurrent programs 
fse pages december 
det david detlefs 
overview extended static checking system 
workshop formal methods software practice pages january 
ecgn michael ernst jake cockrell william griswold david notkin 
dynamically discovering program invariants support program evolution 
icse pages may 
david evans john guttag james horning yang meng tan 
lclint tool specifications check code 
fse pages december 
eva david evans 
static detection dynamic memory errors 
pldi pages may 
gh rakesh ghiya laurie hendren 
tree dag cyclic graph 
shape analysis pointers popl pages january 
giv robert givan 
inferring program specifications polynomial time 
sas pages september 
gup rajiv gupta 
fresh look optimizing array bound checking 
pldi pages june 
gw steven german ben wegbreit 
synthesizer inductive assertions 
ieee transactions software engineering march 
hhn laurie hendren joseph hummel alexandru nicolau 
abstractions recursive pointer data structures improving analysis transformation imperative programs 
pldi pages june 
mary jean harrold gregg rothermel rui wu liu yi 
empirical investigation program spectra 
paste pages june 
robert henry kenneth whaley bruce 
university washington illustrating compiler 
pldi pages june 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall 
bart jacobs joachim van den berg marieke huisman martijn van ulrich hendrik 
reasoning java classes 
oopsla vancouver bc canada october 
km shmuel katz zohar manna 
logical analysis programs 
communications acm april 
kw michael wolfe 
elimination redundant array subscript range checks 
pldi pages june 
ln rustan leino greg nelson 
extended static checker modula 
compiler construction pages 
springer verlag april 
mit tom mitchell 
machine learning 
mcgraw hill boston ma 
lori clarke leon osterweil matthew dwyer 
verification concurrent software 
icse pages may 
oj robert callahan daniel jackson 
program understanding tool type inference 
icse pages may 
pfe frank pfenning 
dependent types logic programming 
types logic programming chapter pages 
mit press cambridge ma 
qui quinlan 
learning logical definitions relations 
machine learning 
thomas reps thomas ball das james larus 
program profiling software maintenance applications year problem 
esec fse pages september 
si suzuki 
implementation array bound checker 
popl pages los angeles ca january 
weg ben wegbreit 
synthesis loop predicates 
communications acm february 
xp hongwei xi frank pfenning 
eliminating array bound checking dependent types 
pldi pages june 

