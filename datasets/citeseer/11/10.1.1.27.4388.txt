factor graphs algorithms brendan frey beckman institute north mathews avenue urbana il usa frey cs utoronto ca frank kschischang ece department university toronto toronto ontario canada frank comm utoronto ca hans andrea loeliger tech ag ch basel switzerland access ch wiberg dept electrical engineering linkoping university linkoping sweden liu se factor graph bipartite graph expresses global function variables factors product local functions 
factor graphs subsume graphical models including bayesian networks markov random fields tanner graphs 
describe general algorithm computing marginals global function distributed message passing corresponding factor graph 
wide variety algorithms developed artificial intelligence statistics signal processing digital communications communities derived specific instances general algorithm including pearl belief propagation belief revision algorithms fast fourier transform viterbi algorithm forward backward algorithm iterative turbo decoding algorithm 
factor graph bipartite graph expresses global function variables factors product local functions 
example 
suppose real valued function variables written fa refer global function fa fb fc local functions 
set arguments local function subset arguments factorization expressed factor graphs shown fig 

factor graph consists types vertices associated variables unfilled circles fig 
called variable nodes associated local functions filled circles fig 
called subset nodes 
edges factor graph precisely join variable node subset node argument general fx collection variables indexed finite set ng 
nonempty subset denote xe subset factor graph expresses global function factors product local functions fa 
variable function form index subset form 
indexed variable takes values alphabet take finite assumption essential 
particular assignment value variables referred configuration variables 
configurations variables viewed elements cartesian product called configuration space 
element equivalent variable assignment vice versa 
occasion view configurations assignments values variables elements interested functions elements arguments functions domain denote function referred global function 
moment take codomain set real numbers shall allow semiring 
collection subsets subset power set including empty set 
suppose written product local functions arguments indexed elements fe xe factor graph representation bipartite graph vertex set edge set ffi 
stated earlier refer vertices elements variable nodes vertices elements subset nodes 
edge joins variable node subset node factor graph graphical representation relation element theta example ff gg 
examples factor graphs set membership indicator functions coding theory systems theory interested describing subsets set possible configurations 
coding context subset defines code 
systems theory referred system behavior element valid configuration 
set membership general described binary valued global indicator func factor graph representation binary code posteriori joint probability mass function codeword symbols 
tion 
set ae define ae case circumstance design global indicator function factors product local indicator functions checks locally valid behavior 
specifically may happen factors factor fe xe binary valued indicator function 
configuration said locally valid local function fe evaluates unity restriction configuration valid configuration locally valid example binary linear block code described set parity check equations equation imposes condition codeword restriction xe subset symbol positions parity summing gf 
example 
factor graph corresponding binary code parity check matrix shown fig 

generally impose complicated constraints example requiring xe element complicated linear code 
codes considered tanner 
generally wiberg introduce unobserved state variables considered part codeword participate defining locally valid behavior 
local check descriptions naturally described bipartite factor graph called tanner graph emphasize unobserved state variables permitted tanner wiberg loeliger graph 
indicator functions posteriori probabilities continuing example select uniform probability codeword transmit memoryless channel suppose corresponding observed channel output 
posteriori joint probability distribution fx linearly proportional fe xe jx value jx corresponding likelihood function evaluated observed channel output 
observe admits factor graph representation obtained augmenting factor graph representation code singleton local functions jx connected single edge variable 
shown example code fig 

shall see computations involving factor graph singleton local function nodes absorbed corresponding variable node effectively factor graph describing posteriori joint probability distribution observed channel output equivalent factor graph code 
markov random fields markov random field see graphical model undirected graph vertex corresponds random variable 
denote neighbors set vertices connected single edge graph markov random field mrf distribution satisfies local markov property 
words mrf variable independent non neighboring variables graph values immediate neighbors 
mrfs developed statistics variety applications see 
see brief discussion mrfs describe codes :10.1.1.73.8252
fairly general conditions positivity joint probability density sufficient joint probability mass function mrf expressed terms collection gibbs potential functions defined set maximal cliques mrf 
clique collection vertices pairwise neighbors clique maximal properly contained clique 
words distribution factors vn gamma gamma normalizing constant 
example cf 
example mrf fig 
express factorization gamma clearly precisely structure needed factor graph representation 
factor graph representation may preferable mrf expressing factorization distinct factorizations factorizations different qs may yield precisely underlying mrf graph yield distinct factor graphs 
example coding context mrf ambiguity :10.1.1.73.8252
graphical models markov random field bayesian network 
bayesian networks bayesian networks see graphical models collection random variables directed acyclic graphs dags 
bayesian networks combined pearl belief propagation algorithm important tool expert systems past decade 
connect bayesian networks belief propagation applications coding theory mackay neal independently re discovered gallager earlier low density parity check codes including gallager decoding algorithm 
papers develop view turbo decoding algorithm instance probability propagation bayesian network code model 
vertex bayesian network associated random variable 
denoting set parents set vertices edge incident distribution represented bayesian network assumes form ja parents take 

example cf 
example fig 
shows bayesian network expresses factorization jv jv jv markov random field case graphical model expresses factorization suitable factor graph representation 
sum product algorithm previous section global function variables set fx ng variable values finite set moment take real valued 
section describe general algorithm compute marginal functions gamma gamma xn variables adopt convention 
similarly subset ae notation means sum possible configurations variables indexed 
definition marginal function extended arbitrary subset defining probability distribution marginal distribution joint probability distribution variables indexed number arguments small modified notation marginal functions 
replace argument sign indicate corresponding variable summed marginalized 
perform marginalization take advantage factorization global function represented factor graph 
basic properties factor graph products local functions gathered paths graph variables represented summary outside regions graph variable involved 
example example 
explain mean vague terminology previous sentence consider specific case global function structure structure arises example joint probability distribution random variables form markov chain observation consider computation jy 
write bc write bc product 
identified various factors need computed obtain 
primary observation computed knowing just bc 
factor computed knowing just 
products gathered path variable node variable node shown fig 

note variable summarized marginalized outside dashed region labeled likewise analyzing computation remaining marginal functions manner find ab ab abc bc bc ab ab abc distributed marginalization markov chain example 
region carried indicated dashed box 
comparing fig 
observe various factors needed compute marginal function obtained products messages sent particular path factor graph 
product messages carried directions edge marginal function 
general algorithm sum product algorithm operates message passing procedure gathers local function products paths factor graph 
assume graph tree contains cycles 
description algorithm simplified making assumption node factor graph processor capable transmitting receiving messages edges connected 
simplest realization sum product algorithm operates follows 
basic operation node compute product incoming messages node 
subset node product multiplied local function associated node 
products transmitted outgoing edges caveat outgoing messages transmitted particular edge contain factors received edge 
way provided factor graph contains cycles product message transmitted edge message received edge contains factors global function 
message passing procedure initiated leaf nodes factor graph nodes single edge incident 
leaf nodes subset nodes transmitted message representation local function associated node 
leaf nodes variable nodes transmitted message unit function transmission practical realization course unnecessary 
nodes graph await reception messages able compute outgoing message 
effectively nodes wait messages arrive edge occurs incoming messages multiplied local function result transmitted remaining edge 
message received remaining edge appropriate local function products distributed incident edges 
general procedure gathering local function products illustrated fig 

sum product algorithm efficient observing local function products gathered paths factor graph marginalized variables carried edge 
general variable needs carried variable argument subsequent local function variable marginalized cf 
example 
marginalization carried subset abcd abd abc abc abcd acd ad bc sum product algorithm local function products gathered paths leaves cycles variable carried edge cycle variable carried edges 
nodes nodes necessarily boundaries regions defining variables carried 
fig 
illustrates variables carried edge tree fig 

fig 
shows fragment specific factor graph assume forms part larger tree 
update rules fragment follows variable subset product rule delta subset variable sum product rule fa delta delta termination delta factor graph fragment showing update rules case 
dealing cycles algorithm described terminates factor graph tree contains cycles 
factor graph contain cycles update rules lead endless propagation messages cycles 
messages may converge sense factor graph cycles values messages converge interpreted exact marginal functions 
decoding turbo codes low density parity check codes iterative algorithm provide excellent performance 
see section 
give example endless looping messages dealt exact marginal functions obtained 
example 
consider case factor graph contains single cycle 
consider global function corresponding factor graph shown fig 

perform exact marginalization construct tree spanning factor graph 
define variable involved subset node general involved subset nodes 
say carried edges spanning tree path nodes involved 
variable marginalized longer carried 
provided rule followed exact marginalization possible 
form spanning tree shown fig 
cutting cycle factor graph location indicated see variable carried edges tree need carried single edge respectively 
fig 
illustrates situation loopy factor graph includes dotted ab bc abc cut spanning tree factor graph showing carried 
edge 
dotted edge omitted form spanning tree see variable carried edges just incident variable node effect thickness number variables carried edges increased perform exact marginalization 
factor graph tree edge unit thickness 
general different trees span loopy factor graph yield different marginalization algorithm 
message passing schedules far discussed way schedule message propagate leaf nodes factor graph 
implementations may possible message passing occur concurrently implementations messages necessity passed serially 
general variety message passing schedules possible 
schedules way schedule flooding schedule described :10.1.1.73.8252
way schedule best suited serial implementation causes smallest possible total number messages sent number edges spanning tree flooding schedule may lead faster convergence factor graph cycles 
refer reader description message passing schedules :10.1.1.73.8252
generalization semirings assumed products sums computed field real numbers 
obviously extended arbitrary ring 
pointed poor authors notably mceliece see appropriate algebraic structure semiring equipped associative commutative theta operations distributive law permits distribution theta 
probably relevant semiring applications decoding replaces theta real addition max min 
channel coding memoryless channels associate value variable take cost equal negative log likelihood corresponding channel output associate valid configuration cost equal sum costs variables 
minimum cost valid configuration maximum likelihood sequence cost computed factor graph containing cycles min sum generalization sum product algorithm 
min sum formulation framework called dynamic programming posed see text book treatment 
see discussion min sum algorithm 
examples give examples sum product algorithm may applied practice 
factor graph hidden markov model trellis 
hidden markov models trellis processing shows factor graph representation hidden markov model 
state variables observed indicated double circle 
local function gamma indicator function indicates state transitions allowed outputs associated transitions 
output variables observed output memoryless channel 
corresponding symbol symbol observed 
factor graph tree exact marginalization achieved algorithm 
marginalization algorithm achieved sweeps graph running essentially left right forward right left backward ff gamma gamma denote message sent state variable gamma local function node shown fig 

jx denote message sent variable node sum product algorithm compute message ff gamma gamma ff gamma gamma jx send variable node precisely forward step forward backward algorithm described 
backward fi step described manner 
way sum product algorithm specializes trellis known forward backward algorithm 
easy see min sum version specializes viterbi algorithm provided take gamma invalid trellis transition 
recover known trellis processing algorithms special cases sum product algorithm 
fast fourier transform aji mceliece develop fast hadamard transform graphbased approach develop fast fourier transform fft factor graphs 
complex valued data vector components gamma point discrete fourier transform defined gamma nk gamma exp gammaj complex nth root unity 
consider case exp gammaj approach take generalizes obvious way case arbitrary power 
discrete fourier transform kernel factor graph particular spanning tree spanning tree clustering showing variables carried 
binary valued define write dft kernel take global function terms gamma gamma gamma gammaj gammaj gamma gammaj factor graph corresponding global function shown fig 

observe dft marginal function 
factor graph fig 
cycles wish carry exact marginalization form spanning tree 
possible spanning trees shown fig 

different choices spanning tree lead possibly different dft algorithms min sum algorithm applied 
cluster local functions shown fig 
essentially defining gamma gamma gammaj gamma gammaj arrive spanning tree shown fig 

observe binary variables complex quantities carried edge path vertex vertex path marginalized added list variables carried 
steps function converted function 
clearly obtained fast fourier transform instance sum product algorithm 
belief propagation bayesian networks discussed section probability distribution corresponding bayesian network product form allows straightforward conversion factor graph 

bayesian network fragment corresponding factor graph convention child vertex conditional distribution indicated arrow 
representation 
example fig 
shows fragment bayesian network fig 
shows corresponding factor graph fragment 
general local function corresponding single factor assumes form xja set parents variable bayesian network 
factor graph representation convention identified child vertex arrow 
allows flow causality inferred equally factor graph bayesian network 
representing causality directed edges cited basic advantages modeling probability distribution bayesian network including arrows corresponding factor graph advantage retained 
easy show sum product algorithm applied cycle free bayesian networks yields pearl belief propagation algorithm 
see discussion correspondence :10.1.1.73.8252
approximate marginalization graphs cycles great applications forced consider factor graphs contain cycles 
cases exact marginalization spanning tree proves computationally infeasible due excessive thickness edges 
examples factor graphs type include graphs describe low density parity check codes introduced gallager turbo codes introduced berrou 
see tanner graph description turbo codes bayesian network description 
proceeding graph contained cycles applying carry variable sum product algorithm excellent results may obtained 
example simulation results mackay neal indicate low density codes decoded reasonable complexity approach required achieve bit error rate gamma approximately db shannon limit antipodal signaling white gaussian noise channel 
impressive known results berrou show iterative sum product decoding procedure turbo codes approach shannon limit db required achieve bit error rate gamma theoretical understanding convergence sum product algorithm graphs cycles best knowledge achieved general excellent decoding performance obtained undeniable 
view great motivation achieve theoretical understanding properties algorithm graphs cycles find families codes sum product algorithm prove effective 
factor graphs provide natural description factorization global function product local functions 
factor graphs relevant broad spectrum application areas 
illustrated sum product algorithm encompasses wide variety previously known algorithms including viterbi algorithm forward backward algorithm pearl belief propagation algorithm fast fourier transform 
doubt algorithms captured framework 
generality essential simplicity feel sum product algorithm included part engineer standard algorithms toolkit 
acknowledgments concept factor graphs generalization tanner graphs devised group isit ulm included authors forney jr mackay mceliece tanner 
benefitted greatly discussions topic took place ulm 
poor dynamic programming models commutativity conditions siam control optimization vol 
pp 
july 
mceliece trellis linear block codes ieee transactions information theory vol 
pp 
july 
wiberg codes decoding general graphs 
phd thesis linkoping university sweden 
aji mceliece general algorithm distributing information graph proc 
ieee int 
symp 
inform 
theory ulm germany july 
tanner recursive approach low complexity codes ieee trans 
inform 
theory vol 
pp 
sept 
wiberg 
loeliger codes iterative decoding general graphs european trans 
vol 
pp 
sep oct 
forney jr forward backward algorithm proc 
th annual allerton conf 
communication control computing allerton house monticello illinois pp 
october 
kindermann snell markov random fields applications 
providence rhode island american mathematical society 
preston gibbs states countable sets 
cambridge university press 
spatial point processes markov random fields int 
stat 
rev vol 
pp 

hinton sejnowski learning relearning boltzmann machines parallel distributed processing explorations microstructure cognition rumelhart mcclelland eds vol 
pp 
cambridge ma mit press 
kschischang frey iterative decoding compound codes probability propagation graphical models ieee selected areas commun vol :10.1.1.73.8252
jan 
pearl probabilistic reasoning intelligent systems networks plausible inference 
san francisco ca morgan kaufmann 
revised second printing 
jensen bayesian networks 
new york springer verlag 
neapolitan probabilistic reasoning expert systems theory algorithms 
toronto john wiley sons 
frey bayesian networks pattern classification data compression channel coding 
toronto canada department electrical computer engineering university toronto 
doctoral dissertation available www cs utoronto ca frey 
mackay neal codes sparse matrices cryptography coding 
th ima conference boyd ed lecture notes computer science pp 
berlin germany springer 
gallager low density parity check codes 
cambridge ma press 
mceliece mackay 
cheng turbo decoding instance pearl belief propagation algorithm ieee selected areas commun vol 
jan 
berrou glavieux near shannon limit error correcting coding decoding turbo codes proc 
ieee int 
conf 
commun 
icc geneva switzerland pp 

dynamic programming 
new york academic press 
bahl cocke jelinek raviv optimal decoding linear codes minimizing symbol error rate ieee trans 
inform 
theory vol 
pp 
mar 
wiberg 
loeliger codes iterative decoding general graphs european transactions telecommunications vol 
pp 

