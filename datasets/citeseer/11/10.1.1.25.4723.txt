automated veri cation randomized distributed consensus protocol cadence smv prism marta kwiatkowska norman roberto segala school computer science university birmingham birmingham tt uk fm kwiatkowska cs bham ac uk dipartimento di scienze dell informazione universit di bologna zamboni bologna italy segala cs unibo 
consider randomized consensus protocol aspnes herlihy achieving agreement asynchronous processes communicate read write shared registers 
algorithm guarantees termination presence stopping failures polynomial expected time 
processes proceed possibly unboundedly rounds round read status processes attempt agree 
attempt involves distributed random walk processes disagree shared coin ipping protocol decide preferred value 
achieving polynomial expected time depends probability processes draw value appropriate bound 
non probabilistic part algorithm proof assistant cadence smv prove validity agreement rounds 
coin ipping protocol veri ed probabilistic model checker prism 
nite number processes automatically calculate minimum probability processes drawing value 
correctness full protocol follows separately proved properties 
rst time complex randomized distributed algorithm mechanically veri ed 
randomization form coin ipping tool increasingly symmetry breaker distributed algorithms example solve leader election consensus problems 
algorithms inevitably dicult analyse appropriate methods automating correctness proofs called 
furthermore random choices means certain properties probabilistic handled conventional model checking tools 
consider randomized consensus protocol due aspnes herlihy achieving agreement asynchronous processes communicate read write shared registers guarantees termination presence supported part epsrc gr gr 
stopping failures polynomial expected time 
processes proceed possibly unboundedly rounds round read status processes attempt agree 
agreement attempt involves distributed random walk markov decision process combination nondeterministic probabilistic choices processes disagree shared coin ipping protocol decide preferred value 
achieving polynomial expected time depends essential way ensuring probability non failed processes draw value appropriate bound 
possible approach analyse algorithm verify probabilistic model checker prism 
number problems approach 
firstly model nite 
secondly restrict nite model xing number processes rounds resulting models large states simpler exponential expected time protocol processes rounds 
thirdly requirements non probabilistic discharged conventional model checker 
adopt di erent approach introduced segala lynch separate algorithm communicating components non probabilistic asynchronous parallel composition processes periodically request outcome coin protocol probabilistic coin ipping protocol shared processes 
non probabilistic part proof assistant cadence smv enables verify nonprobabilistic requirements rounds applying reasoning introduced 
shared coin ipping protocol veri ed probabilistic model checker prism 
nite number processes able mechanically calculate minimum probability processes drawing value opposed lower bound established analytically random walk theory 
correctness full protocol nite con gurations mentioned follows separately proved properties 
rst time complex randomized distributed algorithm mechanically veri ed 
proof structure similar non mechanical proof proof techniques di er substantially 
nd errors techniques introduced applicable generally example analyse leader election byzantine agreement 
related protocol discussed originally proposed analysed 
distributed algorithms veri ed cadence smv number processes include bakery algorithm 
know probabilistic model checkers mc supports nondeterminism essential 
protocol consensus problems arise distributed applications example necessary agree commit abort transaction distributed www cad eecs berkeley edu smv database 
distributed consensus protocol algorithm ensuring collection distributed processes start initial value supplied environment eventually terminate agreeing value 
typical requirements protocol validity process decides value initial value process 
agreement processes decide decide value 
termination processes eventually decide 
number solutions consensus problem exist see overview 
complications due type model synchronous asynchronous type failure tolerated algorithm 
processes exhibit stopping failures termination requirement strong replaced wait free termination initialized non failed processes eventually decide 
unfortunately fundamental impossibility result demonstrates deterministic algorithm achieving agreement asynchronous distributed model communication shared read write variables presence stopping failure solution randomization necessitates weaker termination guarantee probabilistic wait free termination probability initialized non failed processes eventually decide 
algorithm consider due aspnes herlihy 
complex algorithm sophisticated shared coin ipping protocol 
addition validity agreement guarantees probabilistic wait free termination polynomial expected time asynchronous distributed model communication shared read write variables presence stopping failures 
algorithm proceeds rounds 
process maintains multiple read single write variables recording preferred value initially unknown represented current round 
contents array start determines initial preferences 
additional storage needed record copies preferred value round processes observed process arrays values rounds purpose 
note round number unbounded due asynchrony processes may di erent rounds point time 
cadence smv variable declarations define number processes changed ecting proof ordset proc set process identi ers ordset num round numbers typedef pc read check decide process phases act proc scheduler choice process start array proc start initial preference pc array proc pc pc phase process value array proc value current preference round array proc num round current round number see solutions read modify write variables test set 
values array proc array proc values preference read rounds array proc array proc num rounds round number read count array proc proc auxiliary counter reading loop processes initialisation phase unknown value replaced preferred value array start round number set 
process repeatedly executes reading checking phase agreement 
reading consists reading preferred value round processes arrays values rounds 
process terminates checking phase leader round greater equal process processes round trails presumed failed agree 
leaders agree updates value preference increments round returns reading 
remaining case de nite preference warns may change resetting returns reading changing round number preference invokes coin ipping protocol select new value random increments round number returns reading 
cadence smv simpli ed protocol removed possibility failure clarity described follows random choice preference replaced nondeterministic assignment switch pc act initial value act start act round act round act pc act read read pc act count act check read rounds act count act round count act values act count act value count act count act count act count act count act check decide act disagree trail am leader pc act decide agree act agree act leaders agree pc act read count act value act agree act set value leaders preference round act round act pc act read count act value act value act warn ip coin round act value act round act round act missing formulas decide agree de ned assuming obs process observed count pc check agree true leaders values read process agree value formally agree def array agree array agree def obs 
rounds maxr values maxr def max obs rounds decide true disagree trail rounds leader formally decide def maxr round agree agree agree def array agree array agree def obs 
rounds maxr values necessitates variable maxr store maximum round number 
full protocol www cs bham ac uk prism consensus 
remains provide coin ipping protocol returns preference certain probability requested process execution 
simply collection independent coins process deliver probability independent current round 
shown approach yields exponential expected time termination 
polynomial expected time guaranteed shared coin protocol implements collective random walk parameterised number processes constant independent 
new copy protocol started round 
processes access global shared counter initially 
entering protocol process ips coin depending outcome increments decrements shared counter 
working distributed scenario processes may simultaneously want ip coin modelled nondeterministic choice probability distributions coin ip 
note processes may executing protocol time 
having coin process reads counter say observing kn chooses preferred value kn chooses 
process ips coin continues doing observes counter passed barriers 
barriers ensure scheduler uence outcome protocol suspending processes move counter direction 
denote cf coin ipping protocol cf collection protocols round number model checking shared coin protocol described section 
proof structure recall verify protocol correct need establish properties validity agreement probabilistic wait free termination 
rst independent actual values probabilities 
verify properties conventional model checking methods replacing probabilistic choices nondeterministic ones 
section describe verify validity agreement methods introduced cadence smv 
left consider probabilistic wait free termination 
property depends probability values drawn particular probabilistic properties coin ipping protocol 
probabilistic progress properties depend probabilistic assumptions 
similarly approach analyse properties non probabilistic variant model cadence smv con ning probabilistic arguments limited section analysis 
describe outline proof 
identify subsets states protocol follows set states processes decided set states exists unique process preferred value just entered round leader 
non probabilistic arguments number non probabilistic arguments see 
state needed explain main idea proof invariant state maximum round increase reaching state invariant state maximum round round processes leave protocol cf agreeing value maximum round increase reaching state properties independent probabilities coin ipping protocol 
replace random choices cf nondeterministic ones round cf return value processes 
probabilistic arguments probabilistic properties listed 
fair execution cf starts reachable state cf probability processes enter cf eventually leave 
fair execution cf value probability processes enter cf eventually leave agreeing value 
putting arguments invariant coin ipping protocol return value order continue reachable state combined protocol scheduling nondeterminism probability reach state maximum round number increases 
invariant state scheduling nondeterminism probability reach state maximum round number increasing 
properties starting reachable state combined protocol scheduling nondeterminism probability reach state processes decided maximum round number increasing 
follows expected number rounds reached 
independent coins expected number rounds 
shared coin protocol constant 
round number increase processes perform shared coin protocol 
take account number steps performed shared coin protocol random walk theory yields expected time polynomial 
sequel show cadence smv prism mechanically verify non probabilistic probabilistic arguments respectively 
carried low level constitute tedious error prone part analysis 
remaining part proof separately veri ed arguments put proved mechanically 
suciently high level easily checked hand 
believe fully mechanical analysis achieved help theorem prover 
cadence smv proof cadence smv proof assistant supports compositional methods 
methods permit veri cation large complex systems reducing veri cation problem small problems solved automatically model checking 
cadence smv provides variety techniques including induction circular compositional reasoning temporal case splitting data type reduction 
example data type reduction reduce large nite types small nite types temporal case splitting breaks proof cases value variable 
combining data type reduction temporal case splitting reduce complex proof checking small number simple subcases achieving signi cant space savings 
main challenges posed algorithm consider round numbers unbounded leading nite data type num wish prove correctness number processes words values achieve suitably combining data type reduction ordset induction circular compositional reasoning temporal case splitting 
brie explain ordset data type reduction implemented cadence smv help type num value reduction constructs abstraction type shown constant 
operations permitted type equality inequality testing values equality inequality test constant increment decrement value 
example allowed comparisons 
restrictions operations representations shown isomorphic num suces check property single value reduction data type proc similar constants see detail 
fr fig 

abstraction num illustrate ordset reduction simple property concerning global maximum round maximum round number processes 
cadence smv de ne follows round act round act act ranges proc value depends instances round introduce history variable records value round act replaces implicit dependence dependence single variable 
rede ne follows hist round act hist hist state global maximum round number forall proc max assert round prove holds case split value round suppose max holds time 
furthermore setting variables ect satisfaction max free allowing variables range possible values types improve eciency model checking factor 
important simple property improvements crucial complex properties freeing certain variables model checking quickly infeasible 
proof forall num subcase max max round case split round max assume max holds time agree free decide free start free value free free variables prove max ordset data type reduction smv reduces proof checking max single value single value 
full proof validity agreement non probabilistic progress available www cs bham ac uk prism consensus 
proof consists approximately lemmas requiring mb memory judicious choice data reduction freeing important smv may return false smv allows inspect cone uence identify variables proofs 
version cadence smv fully compatible release 
proof validity outline proof validity verify proving contrapositive process starts value process decides simplicity suppose 
hypothesis process starts value forall proc valid assump assert start assumed proof forall proc validity assert pc decide value important step proving validity seeing processes start preference process past initial phase round number positive preferred value predicate agree holds 
prove validity rst prove stronger properties forall proc valid assert round value valid assert round agree prove valid case splitting round assuming valid holds time 
round special case add abstraction num cadence smv returns false num abstracted fr proof cadence smv form forall num subcase valid valid round valid assump valid num rg prove valid prove valid additional complication agree de ned conjunction array array agree proc contains implicit dependency values set proc consider element array separately 
particular rst prove auxiliary property valid elementwise assuming valid holds add abstraction num forall proc forall proc valid assert round array agree forall num subcase valid valid maxr valid assump valid num rg prove valid gg valid prove valid proof contradiction rst consider processes array agree false forall proc proc array agree consider particular proving valid fact valid holds forall proc subcase valid valid valid prove valid contradiction arises valid array agree true 
apparent circularity properties broken valid assumes valid time 
proof agreement outline proof invariant prove agreement dicult requirements 
de ne new predicates ll maxr array ll agree ll agree corresponding predicates maxr array agree agree incomplete observation process lled actual values unobserved processes 
formally ll rounds def obs rounds round ll values def obs values value invariant 
process 
reachable state value 
ll maxr round agree ll agree agree round round value obs round round value ll maxr round 
describe approach proving invariant 
simplicity restricted attention 
ease notation def ll maxr round agree ll agree value rst split invariant separate parts corresponding conditions main reason validity di erent cases depends di erent variables protocol 
able free variables proving cases separately improve eciency model checking 
formally conditions invariant forall proc forall proc inv assert agree inv assert 
round round value note proving inv agree conjunction array 
proof technique outlined valid section rst prove forall proc forall proc forall proc inv ak assert array agree encounter similar problem precondition agree ll agree conjunctions arrays 
case version lemma 
informally lemma states holds state transition reach state involve process changing value round value holds current state 
precisely properties forall proc lem assert act 
lem assert act pc read 
lem assert act pc decide 
proving inv ak case split round assume inv ak inv hold time invariant needed 
additional assumptions include lemma 
agree involves type num num fr actual proof cadence smv form forall num subcase inv ak inv ak round inv ak inv lem lem lem num fr rg prove inv ak veri cation prism prism probabilistic symbolic model checker experimental tool described see www cs bham ac uk prism 
built java package supports 
system description language tool probabilistic variant reactive modules 
speci cations formulas probabilistic temporal logic pctl :10.1.1.49.6154
prism builds symbolic representation model performs analysis implementing algorithms 
supports symbolic engine sparse matrix engine 
summary experimental results obtained shared coin ipping protocol modelled analysed engine included table 
details including description coin ipping protocol www cs bham ac uk prism consensus 
properties expressible pctl 
probability property admits ecient qualitative probabilistic analysis probability precomputation step hand quantitative requires calculating minimum probability starting initial state coin ipping protocol processes leave protocol agreeing value 
analysis mechanical demonstrates analytical lower bound obtained reasonably tight discrepancy greater smaller values included 
states construction time time time probability bound fig 

model checking coin ipping protocol rst time mechanically veri ed complex randomized distributed algorithm replacing tedious proofs hand large numbers lemmas manageable re usable ecient proofs cadence smv automatic check probabilistic properties prism 
veri cation protocol fully mechanised low level simple high level arguments carried manually 
fully automated proof achieved involving theorem prover manual part analysis 
believe techniques introduced applicable generally example analyse 
grateful ken mcmillan supplying version cadence smv suggesting appropriate proof methods 

aspnes herlihy 
fast randomized consensus shared memory 
journal algorithms 

baier clarke 
semantic foundations probabilistic 
baier huth kwiatkowska ryan editors proc 
volume entcs 

baier kwiatkowska 
model checking probabilistic branching time logic fairness 
distributed computing 

de alfaro 
model checking probabilistic nondeterministic systems 
thiagarajan editor proc 
fst tcs volume lncs pages 

cachin kursawe shoup 
random oracles practical asynchronous byzantine agreement cryptography 
proc 
podc pages 

de alfaro kwiatkowska norman parker segala 
symbolic model checking concurrent probabilistic systems kronecker representation 
graf schwartzbach editors proc 
tacas volume lncs pages 

fischer lynch paterson 
impossibility distributed commit faulty process 
journal acm 

hansson jonsson 
logic reasoning time reliability 
formal aspects computing 

hermanns 
katoen meyer 
markov chain model checker 
graf schwartzbach editors proc 
tacas volume lncs pages 

itai rodeh 
lord ring probabilistic methods breaking symmetry distributed networks 
technical report rj ibm 

lynch 
distributed algorithms 
morgan kaufmann 

mcmillan 
ver cation implementation algorithm compositional model checking 
hu vardi editors proc 
cav volume lncs pages 

mcmillan 
veri cation nite state systems compositional model checking 
pierre editors proc 
volume lncs pages 

mcmillan qadeer saxe 
induction compositional model checking 
emerson sistla editors proc 
cav volume lncs pages 

segala lynch 
veri cation randomized consensus algorithm aspnes herlihy case study 
distributed computing 

somenzi 
cu decision diagram package 
public software colorado university boulder 

vardi 
automatic veri cation probabilistic concurrent nite state programs 
proc 
focs pages 
