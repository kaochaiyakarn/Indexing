journal combinatorial optimization kluwer academic publishers boston 
manufactured netherlands 
approximation scheme bin packing con icts klaus jansen klaus idsia ch idsia lugano corso lugano switzerland 
received april revised january editor 
du 
consider bin packing problem con icts 
set items ng sizes sn con ict graph consider problem nd packing items bins size adjacent items assigned di erent bins 
goal nd assignment minimum number bins 
problem natural generalization classical bin packing problem 
propose asymptotic approximation scheme bin packing problem con icts restricted inductive graphs constant graph class contains trees grid graphs planar graphs graphs constant treewidth 
algorithm nds assignment items generated number bins factor optimal provided optimum number suciently large 
running time algorithm polynomial keywords bin packing planar graphs constant treewidth inductive graphs approximation scheme 

problem de nition consider bin packing problem con icts 
input problem consists undirected graph set items ng sizes assume item size rational number interval 
problem partition set items independent sets bins goal nd con ict free packing minimum number bins 
instance size denote total size items opt denote minimum number unit size bins needed pack items con icts 
application problem assignment processes processors 
case set processes multi media streams processes allowed execute processor 
reason fault tolerance schedule replicas process research done author associated saarbr supported partially eu esprit ltr project alcom swiss oce ed eral de education de la science project titled platform 
klaus jansen cabinet eciency purposes better put cpu intensive processes di erent processors 
problem assign minimum number processors set processes 
second application storing versions le database 
reason fault tolerance keep replicas versions le di erent le servers 
problem arises load balancing parallel solution partial di erential equations pde dimensional domain decomposition 
domain pde decomposed regions region corresponds subcomputation 
subcomputations scheduled processors subcomputations corresponding regions touch point performed simultaneously 
subcomputation requires unit running time gives amount resource number processors storage 
goal problem nd schedule minimum total completion time 
general created con ict graphs nonplanar 
maximum number regions touching single point constant mutual exclusion graph inductive constant applications constructing school course time tables scheduling communication systems 

results empty set obtain classical bin packing problem 
furthermore obtain problem compute chromatic number con ict graph means bin packing problem con icts np complete 
notice polynomial time algorithm absolute worst case ratio smaller bin packing problem np obvious algorithm solve partition problem polynomial time 
survey bin packing problem refer 
packing problem arbitrary undirected graph harder approximate feige kilian proved hard approximate chromatic number jv np mutual exclusion scheduling mes special case bin packing problem con icts 
set jobs constrained mutual exclusion graph vertex represents job requiring unit running time 
jobs scheduled identical processors adjacent jobs run disjoint time intervals 
represent time unit mes bin capacity bin number machines items packed minimum number bins makespan con icts 
interpretation may assume bins unit size items size computational complexity mes studied di erent graph classes bipartite graphs interval graphs arbitrary constant numbers bins constant graph classes de ned refer 
showed mes split graphs solved polynomial time 
baker man proved forest scheduled optimally bin packing conflicts polynomial time investigated scheduling planar graphs resulting dimensional domain decomposition problem 
linear time algorithm proposed mes restricted graphs constant treewidth xed 
furthermore irani leung studied line algorithms interval bipartite graphs 
number bins generated algorithm instance approximation ratio ra instance minimization problem de ned ra opt see 
furthermore absolute performance ratio ra algorithm ra ra instances ig proposed approximation algorithms constant absolute worst case bound 
opt bin packing problem con icts graphs colored minimum number colors polynomial time 
composed algorithm optimum coloring algorithm bin packing heuristic color set obtained approximation algorithm worst case bound 
furthermore method works interval graphs split graphs algorithm bound 
separation method got algorithm worst case ratio graphs constant treewidth 
inductive graph introduced property vertices assigned distinct numbers way vertex adjacent lower numbered vertices 
assume order vn jj fv notice order exists obtained polynomial time 
words problem decide graph inductive solved polynomial time 
inductive vertex degree take compute recursively order vn remaining induced subgraph 
property inductive hereditary induced subgraphs reach subgraph vertices degree larger clear upper bound chromatic number inductive graph coloring computed polynomial time ordering 
examples planar graphs inductive graphs constant treewidth inductive 
trees inductive grid graphs inductive 
furthermore asymptotic performance ratio see algorithm ra instances opt goal nd algorithm asymptotic performance ratio 
asymptotic approximation scheme see algorithm takes input instance accuracy solution ra provided opt large 
term scheme klaus jansen provides family approximation algorithms xed value 
furthermore fully polynomial approximation scheme running time bounded polynomial function length 
give asymptotic fully polynomial approximation scheme bin packing problem con icts restricted inductive graphs 
main result theorem set items ng sizes inductive graph constant positive number algorithm produces packing items con icts opt bins 
time complexity polynomial 
algorithm rst step algorithm remove items sizes smaller consider restricted bin packing problem proposed fernandez de la vega lueker 
set large items sizes 

restricted bin packing positive integers restricted bin packing problem rbp de ned bin packing problem considering con icts restricted instances item sizes take distinct values item size large input instance rbp represented multiset fn nm number items size furthermore packing subset items unit size bin multiset fb number items size packed multiset feasible packing denoted vector called bin type non negative integers 
bins packed items bin type corresponding packing vectors identical 
parameter number items bin bounded constant set fs collection possible bin types fully determined nite 
number bin types respect bounded 
fernandez de la vega lueker linear grouping method obtain restricted bin packing instance rbp constant number large items greater equal number bin types constant bin packing instances solved exactly integer linear programs approximatively linear programs 
bin packing conflicts solution instance rbp vector non negative integers denotes number bins type vector feasible ni get integer linear program equalities objective function number bins solution 
lin denote value optimum solution corresponding linear program 
karmarkar karp gave polynomial time algorithm restricted bin packing problem lin opt algorithm runs time polynomial produces integral solution large items non zero components bin types considering linear grouping method get additional bins element 
number bins generated instance large items opt 
opt 
opt opt size 

bound total number bins opt inserting small items karmarkar karp approximation scheme accepts input bin packing instance positive real number produces packing opt bins fully polynomial time 

generation solution con icts algorithm karmarkar karp generates packing large items bins possible con icts items bins 
subsection show modify solution get con ict free packing large items 
consider non zero component solution algorithm karmarkar karp 
idea algorithm compute packing bins type con ict free packing uses constant number additional bins 
packing bins type set items packed bin type 
means js gj klaus jansen may assume cardinalities js gj equal set insert dummy items 
de ne number items bin type notice number items bin bounded constant consider subgraph induced vertex set label vertices subgraph follows 
sort items set non increasing order sizes label corresponding vertices order items label di erent sets size largest item set gets label 
label assumption label occurs exactly times 
key idea compute independent sets greedy algorithm property jv ug independent set property packed bin 
bin type packing set general problem nd independent set di erent labels np complete forest 
theorem problem nd independent set labels labelled forest ng np complete 
proof reduction satis ability problem 
formula conjunctive normal form literals clause ij fx xn xn may assume see variable occurs unnegated twice negated negated twice unnegated 
build forest vertex set fa ij jy ij mg labelling ij edge set follows variable connect vertices ij exists ij ij 
property variables forms forest 
prove satis able independent set size labels method idea vertices inductive graph nd independent set labels ecient way 
fw fv wg denote set neighbors vertex give algorithm compute independent set 
bin packing conflicts algorithm ind input inductive graph 
vertices labelling ng label occurs exactly times 
output independent set labels set ls ng order vertices lo vertex neighbors lower index choose vertex order lo set ls ls nf fvg delete vertices label graph linear order lo vertex compute vertex gj ls set gj delete vertices lo label ls prefer vertices choose remaining vertex set fvg 
lemma shows algorithm works correctly provided large 
lemma inductive graph constant jv 
vertices labelling ng label occurs times 
algorithm ind nds independent set labels proof induction vertex label 
vn order vertices neighbors lower index 
choose vertex degree may assume labelled label exchange labels 
delete vertices label 
step consider cases 
case vertex label 
may assume step gj ng gj 
step delete exactly vertices label vertices label prefer vertices neighbourhood 
vertices removed step 
klaus jansen case obtain inductive graph 
vertices labelling ng label occurs exactly times 
algorithm ind nds induction independent set labels adjacent vertices set fvg desired properties 
case vertices label neighbour 
case get directly graph 
vertices labelling ng label occurs exactly times 
algorithm ind nds induction independent set labels extended independent set fvg labels rst idea compute bin type inductive graph 
labels number labels depends bin type partition con ict free independent sets follows contains vertices nd independent set labels algorithm ind take vertex separate bin 
numbers xed constants obtain idea constant number additional bins 
better idea analyse coloring problem labelled inductive graph 
rst result negative 
theorem problem decide forest ew labelling vw ng partitioned independent sets independent set contains vertices di erent labels np complete 
proof reduction coloring problem vertex degree exceeding np complete coloring problem labelled forest 
graph ng maximum degree 
substitute node graph construct forest labelling colorable partitioned independent sets di erent labels 
node substitution graph vertex set fv edge set graph outlets labelled 
graph properties colorable colorable coloring bin packing conflicts graph arises deleting edges forest 
edge original graph choose pair vertices graphs connect vertices 
clearly choose di erent vertices di erent edges incident vertex insert connecting edges graph obtain forest reduction 
choose labelling vw ng follows 
de ne remaining vertices get di erent labels 
labelling vw ng corresponds complete graphs complete graph label 
labels complete graphs size vertex sets fv fv furthermore complete graphs size 
disjoint union complete graphs union forest graph notice edges rst complete graphs edges deleted graphs graph consists connecting edges pairs vertices edges connecting edges graphs simulate coloring obtain colorable colorable 
furthermore independent set corresponds independent set forest di erent labels 
implies theorem 
show coloring problem approximated labelled inductive graphs 
algorithm color input inductive graph labelling ng label occurs times 
output partition independent sets ul independent set contains vertices di erent labels 
order vertices lo vn vertex neighbors lower index set fv ul klaus jansen choose vertex choose rst set fv set fv delete empty independent sets lemma inductive graph ng labelling label occurs times 
algorithm color computes partition independent sets ul label ng proof vertex degree induction jv color computed partition fvg independent sets ul property 
neighbours vertices label independent set contain neighbour vertex label 
implies partition fvg ul desired property 
gives approximation algorithm coloring problem labelled inductive graphs additive factor need colors 
approximation algorithm bin type non zero component non zero components total number bins con ict free items bin bounded opt 

insertion small items show insert small items sequence bins large items 
algorithm small input instance consisting inductive graph con packing large items unit size bins subset items sizes output packing items unit size bins con icts 
set bin packing conflicts bins large items sizes set bins large items sizes 
order vertices lo vn vertex neighbors lower index ji lo induced small items ji bin fw independent take rst bin set fw size set fb fw set compute coloring vertices pack vertices color set packing algorithm bins 
lemma xed constant 
instance bin packing problem con icts restricted inductive graphs suppose items size packed bins 
algorithm small computes polynomial time packing uses max opt bins 
proof start packing large items bins algorithm small pack small items 
bins packing large items sizes set items sizes step order items respect inductive graph 
order restricted small items try pack small items rst bins sizes bin fw forms independent set place corresponding bin size size fw 
size enlarged bin larger remove step list small bins set 
step remaining bins sizes possible small items packed rst bins 
step list bins sizes set items sizes item index exists item con ict klaus jansen items placed bins bin size larger notice bins sizes larger generated nishing step 
key idea give lower upper bounds number large large items rst bins sizes notice count large items bins 
large 
large item size packing vector corresponding bin large items property 
implies 
equivalent non negative integers 
bins large items get inequality 
inequality holds undirected graph 
large ji 
show small item packed large items con ict larger index holds prove consider time step packed rst bins size time step items con ict item bins 
adjacent vertices smaller index con ict items larger index 
items sizes small items larger index considered 
total get ji large con ict items rst bins 
large item reached small items smaller index large items counted times 
ji large items rst bins 
shows inequality 
combining lower upper bound get ji implies ji obtain upper bound ji db step compute coloring items items sizes place packing algorithm nf rst ff items bin 
algorithm nf color set obtain bins items see number items colored color 
may assume colors 
furthermore assume ck bin packing conflicts ni 
items bin obtain bins 
db number bins bounded 
total obtain case bins 
bins sizes larger remaining items packed coloring nf color set bins sizes generated 
total number generated bins sizes inequality size size opt opt get 
implies total number bins case bounded opt 
algorithm algorithm input instance consisting inductive graph vertex set ng sizes 
output packing unit size bins con icts 
set remove items size smaller obtaining instance rbp large items apply linear grouping method fernandez de la vega lueker obtain constant number di erent item sizes apply algorithm karmarkar karp obtain approximative solution bin packing problem considering con icts large items algorithm color section modify solution bin type bin contains independent set large items algorithm small section pack small items removed step new bins necessary 
klaus jansen 
analysis total number bins generated set large items item size algorithm karmarkar karp bounded opt step algorithm produces 
additional bins total number bins step max opt opt opt bins 
constant gives approximation scheme bound opt 
asymptotic approximation scheme bin packing problem con icts restricted inductive graphs constant implies asymptotic approximation scheme trees grid graphs planar graphs graphs constant treewidth 
algorithm generalization algorithm karmarkar karp classical bin packing problem 
interesting nd graph classes method works 
furthermore know asymptotic approximation scheme bin packing problem con icts hard bipartite interval graphs 

baker man mutual exclusion scheduling theoretical computer science 

grosse parallel domain decomposition applied coupled transport equations domain decomposition methods scienti engineering computing eds 
keys xu ams providence 

bodlaender jansen complexity scheduling incompatible jobs unit times mathematical foundations computer science mfcs lncs 

man jr garey johnson approximation algorithms bin packing survey approximation algorithms np hard problems ed 
hochbaum pws publishing 

feige kilian zero knowledge chromatic number conference computational complexity ccc 
bin packing conflicts 
fernandez de la vega lueker bin packing solved linear time combinatorica 

garey johnson computers intractability guide theory np completeness freeman san francisco 

golumbic algorithmic graph theory perfect graphs academic press london 

irani coloring inductive graphs line algorithmica 

irani leung scheduling con icts applications trac signal control symposium discrete algorithms soda 

irani private communication 

jansen approximation algorithms time constrained scheduling information computation 

jansen mutual exclusion scheduling problem permutation comparability graphs symposium theoretical aspects computer science stacs lncs 

gupta coloring problem symposium theoretical aspects computer science stacs lncs 

karmarkar karp ecient approximation scheme dimensional bin packing problem symposium foundations computer science focs 

complexity chain antichain partition problem graph theoretical concepts computer science wg lncs 

de werra timetabling european journal operations research 
klaus jansen contributing authors klaus jansen received degree computer science rwth aachen germany ph degree mathematics university trier germany respectively 
obtained mathematics university trier germany 
currently university trier germany institute idsia lugano switzerland senior researcher 
research interests include approximation algorithms combinatorial optimization vlsi synthesis scheduling theory coloring problems parallel processing 
