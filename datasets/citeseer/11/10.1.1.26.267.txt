optimizing patching performance ying cai hua vu school computer science university central florida orlando fl mail cs ucf edu patching shown cost ecient video demand systems 
conventional multicast patching dynamic multicast scheme enables new request join ongoing multicast 
multicast grow dynamically serve new users approach ecient traditional multicast 
addition new request serviced immediately having wait multicast true video demand achieved 
introduce notion patching window generalized patching method 
show existing schemes special cases speci patching window size 
derive mathematical formula help determine optimal size patching window 
formula allows design best patching scheme workload 
proposed technique validated simulations 
show analytical results accurate 
provide performance results demonstrate optimal technique outperforms existing schemes signi cant margin 
times better best piggybacking method provides data sharing merging services progress single stream altering display rates 
keywords multicast patching multimedia communication optimization performance analysis simulation 
video demand vod critical technology important multimedia applications home entertainment digital video libraries distance learning training news demand electronic commerce just name 
typical vod service allows remote users playback video large collection videos stored servers 
response service request video server delivers video user isochronous video stream 
system resource required sustain video stream referred video channel 
typically number channels video server support determined communication bandwidth 
due fact storage subsystem designed fully exploit high bandwidth system bus performance nics constrained lower bandwidth external networking environment 
phenomenon referred network bottleneck 
practice number channels available video server limited 
vod precious channels shared users early requests video wait requests arrive entire group served multicast 
referred batching 
approach requests forced wait near vod achieved 
desirable keep maximum waiting time short 
bene multicast diminish 
hand users making early requests kept waiting long 
address dilemma technique called patching introduced 
basic idea patching follows 
new service request exploit existing multicast bu ering stream multicast playing new start ow start 
new ow research partially supported national science foundation ani 
played back skew point ow terminated original multicast shared skew absorbed new client bu er 
note multicast paths built application level routers 
allowing clients join existing multicast signi cantly improves eciency multicast 
requests receive service immediately true vod achieved 
technique said provide true vod service requests delay 
signi cant contribution patching allowing true vod systems take advantage multicast 
interesting accomplishment true vod multicast seemingly con icting features 
note name patching fact majority time channels patch missing portion service having multicast video entirety 
case say channel deliver patching stream 
existing multicast video schedule multicast video critical factor 
time period multicast patching referred patching window 
patching window set small multicasts scheduled frequently 
extreme patching window narrowed zero case multicasts serve client patching degenerates conventional vod design dedicated channel service request 
contrary patching window wide average time distance initiation patching stream multicast large 
circumstance channels multicast data patching ers little bene examines simple approaches determine size patching window 
rst uses length video patching window 
multicast initiated long existing multicast video 
case client bu er space large absorb skew described previously bu er cache tail portion video 
approach called greedy patching tries exploit existing multicast possible 
overly greedy result data sharing 
scheme called grace patching uses patching stream new client bu er space absorb skew 
new regular stream scheduled 
grace patching patching window determined client bu er size 
argue setting size patching window video length client bu er size result performance 
show request rate video taken account 
observation generalize patching technique proposing method determine optimal patching window video 
extension allows substantially improve previous 
major di erence performance studies 
simulation results provided show patching improve conventional batching 
current addition comparing new approach grace patching demonstrate patching times better piggybacking merges services progress single stream altering display rates 
discuss scheme detail 
remainder organized follows 
describe related section 
patching section 
section introduce technique optimize patching performance 
discuss performance study section 
give concluding remarks section 
related works rst exploited idea letting clients multicast receive service earliest possible time 
technique called dynamic multicast chaining 
conventional multicast rst determine multicast tree multicast proceed multicast tree dynamic multicast grows dynamically application level accommodate late requests service 
approach requires small additional disk space client side bu er data 
client acts mini server forward cached data clients downstream 
aggregate storage space clients ectively forms huge network cache temporarily holding data requests 
long rst part video multicast tree client bu er batch requests video join tree newest generation 
shown latency throughput vastly improved compared batching 
scheme scalable clients service contribute resources bu er space forwarding bandwidth community 
way client seen contributor just burden video server 
feature allows dynamic multicast scale limitation regular batching 
implementing novel idea great challenge 
control mechanism quite complex 
forwarding client decides turn system receiving client promptly switch sibling departing client 
sibling left server able send emergency stream short notice support ected client detached multicast tree 
due diculties designed patching prototype system note patching seen form dynamic multicast sense multicast trees expand dynamically serve late requests 
technique allows clients arriving di erent times share data stream called adaptive piggybacking 
adaptive piggybacking procedure de ned policy altering display rates requests progress video purpose merging respective video streams single stream serve entire group merged requests 
consider client currently served video channel 
request video arrives server dispatches channel serve new request 
time server slows data rate channel speeds channel 
ected clients adapt accordingly new playback rates 
second stream catches rst stream merged single multicast freeing channels 
obviously approach improve service latency compared simple batching 
limitation technique variation playback rate say normal playback rate result perceivable deterioration playback quality 
fact limits number streams merged ectiveness adaptive piggybacking 
example consider stream started minutes stream adjusted speed faster normal playback rate take minutes catch condition video minutes long stream nish catch 
give simulation results shows patching times better best piggybacking technique 
terms implementation adaptive piggybacking quite complex 
techniques available time compress movies dynamically changing speed harder problem 
simply versions video support di erent playback rates display adjustment gradual insure noticeable user 
technique specialized hardware necessary support modi cation 
specialized hardware expensive general purpose shelf component disk bu er patching 
related technique called bridging 
bridging bu er management method 
scheme data read leading stream held server bu er trailing requests serviced bu er issuing storage stream 
technique allows multiple requests share storage stream 
reduce demand network bandwidth 
note highly populous video periodic broadcast improve system performance 
latest periodic broadcast techniques 
schemes divide server bandwidth large number logical channels equal bandwidth 
broadcast video say dedicated channels video le partitioned fragments increasing sizes repeatedly broadcast channel 
play back desired video client tunes appropriate channel download rst data fragment video rst occurrence 
data arriving client rendered screen 
subsequent fragments client downloads fragment earliest possible time play back current fragment 
point client downloads channels consumes data fragment parallel 
ensure continuous playback size data fragments chosen playback duration fragment longer worst latency downloading fragment 
achieve low service latencies size rst fragments small allow broadcast frequently 
approach ecient implementing multicast vod system server workstations interconnected atm switch 
popular videos 
focus general multicast approach 

patching section generalize patching technique notion patching window 
rst server design discuss receiving playback strategies client 

server design server bandwidth multiplexed set logical channels capable transmitting video playback rate 
remaining bandwidth server control messages service requests service noti cations 
channel multicast video entirety called regular multicast multicast leading portion video called patching multicast 
case channel said play role regular channel 
referred patching channel 
client station tunes regular channel download data data stream arriving client communication port called regular stream 
hand source data stream patching channel refer data stream patching stream 
terminologies illustrated 
video player video player client client client video player patching stream stream regular buffer server video regular channel patching channel data loader 
possible patching stages 
server maintains job queue arriving requests rst appended queue dispatch occasion 
occasion arrives channel free 
channel available say time server checks job queue entries admits requests video scheduling policy 
determine start new regular multicast server computes skew de ned time di erence regular multicast video 
skew greater patching window new regular multicast initiated patching multicast deliver patching data 
jvj denote length requested video time unit 
represent rst seconds video size client bu er playback time unit 
patching clip determined follows client bu er able bridge skew 
patching clip skew 
jvj client bu er large bridge skew bu er seconds regular multicast 
case patching clip jvj 
jvj jvj client bu er jvj skew time units regular multicast 
patching clip condition skew 
note job queue handle occasional bursts requests client server systems 
requests able receive service immediately arrival job queue system resources inadequate 
note batching reduce number patching multicasts interested true vod consider option 

client design support patching client station needs threads control data loaders video player 
data loaders responsible downloading data patching channel regular channel respectively 
initially video player plays back patching stream data arrive 
regular stream temporarily cached client bu er 
patching stream ends video layer switches play back data bu er remaining data continue arrive regular stream 
show example illustrate patching idea 
clients sharing multicast di erent stages video playback 
client arrived rst 
served entirely regular stream 
client arrived 
video player exhausted patching stream currently playing back regular stream cached local bu er 
client arrived 
playing back patching stream regular stream cached local bu er 

optimizing patching performance description patching section observe size patching window profound uence performance system 
section rst give motivation examples 
derive model determining optimal window size 
model validated simulation 

motivation examples consider example 
length video minutes 
client disk space bu er minutes video 
arrival rate request minute 
server decide minute initiate patching regular multicast 
decision uenced size patching window 
example examine performance patching various patching window sizes greedy patching assuming regular multicast say initiated time multicasts patching type 
total amount data transmitted rst users computed follows delivers minutes data 
delivers minutes data 
server deliver total minutes video data 
note scheme ecient large number clients share tail portion minutes regular multicast 
grace patching size client bu ers minutes patching window example minutes 
regular multicasts 
deliver minutes data 
patching multicasts 
deliver total minutes data 
total server delivers minutes data 
patching window minutes setting regular multicasts deliver total minutes data 
patching multicasts 
deliver minutes video data 
total amount video data transmitted minutes 
note greedy grace patching window minutes minutes respectively 
grace patching substantially better greedy patching example patching window size minutes improves performance 
question optimal patching window size answer question derive mathematical model investigate ect patching window size demand server bandwidth 

optimal patching window say patching window size optimal results minimal requirement server bandwidth 
determine optimal patching window size derive mathematical formula capture relationship patching window size required server bandwidth 
regular multicast patching multicasts video initiated regular multicast said form multicast group 
strategy computing server bandwidth requirement follows rst determine mean total amount data transmitted multicast group 
calculate average time duration multicast group 
server bandwidth requirement computed analysis refer amounts data terms playback duration 
instance say amount data minutes takes minutes playback amount data 
notations analysis 
denotes amount data delivered multicast initiated time represent mean total amount data delivered multicasts initiated time period respectively 
probability having multicasts initiated time units 
loss generality reset time zero regular multicast initiated 
multicast group starts time zero 
compute mean total amount data transmitted multicast group various window sizes follows 

condition patching traditional batching technique multicasts regular type forms group 
regular multicast delivers video entirety mean total amount data delivered multicast group jvj jvj denotes video length 

need focus interval multicasts initiated time belong multicast group 
amount data delivered multicast initiated time time units 
multicasts initiated 
amount data delivered multicasts approximated 

small 
probability initiating multicasts time interval 

total amount data delivered multicasts initiated 




calculate mean total amount video data delivered multicast group partition 
small time segments 




note rst term due regular multicast leads multicast group 

jvj focus time intervals 
need concern multicasts initiated time belong multicast group 
amount data transmitted rst interval computed equation 
multicast initiated time second time interval client bu er size large cache time units video patching uses bu er space cache time units regular multicast 
patching multicast transmit jvj amount data 
denote number patching multicasts initiated second period total amount video data delivered multicasts 
jvj 
probability initiating patching multicasts time interval total amount data transmitted 
jvj 

mean total amount data transmitted multicast group 
jvj 

jvj jvj third case need focus time intervals jvj jvj 
mean total amount data transmitted rst time interval computed equation 
mean total amount data transmitted second time interval computed follows 
multicast initiated time period needs deliver time units data 
denote number multicasts initiated 
amount data delivered multicasts 

small 
partition second time period jvj 
small segments amount data delivered multicasts initiated ith time segment approximated 
jvj 



small 
jvj 

jvj 



equal second keep precision second jvj 

jvj 

jvj jvj 
jvj jvj assume multicast initiation process poisson rate 
probability density function random variable representing time interval successive multicast 
assumption 


formula simpli ed follows 
jvj 

jvj 

jvj jvj 
jvj jvj multicast initiation rate mean duration multicast group required server bandwidth computed follows 
server bandwidth 
video playback rate 
formula determine optimal patching window size 
example plots indicate optimal patching window size minutes workload demand server bandwidth minimum setting 
discuss detail shortly 
moment apply equation compute server bandwidth requirement various patching schemes 
traditional baseline algorithm take advantage client bu er patching window size regarded 
mean server bandwidth required follows 
server bandwidth baseline 
jvj 
greedy patching patching window size length video greedy jvj 
required server bandwidth server bandwidth greedy jvj jvj 
grace patching size patching window determined client bu er size grace required server bandwidth server bandwidth grace 
patching window size minutes mean inter arrival seconds sim mean inter arrival seconds analytic mean inter arrival seconds sim mean inter arrival seconds analytic mean inter arrival seconds sim mean inter arrival seconds analytic 
validation analysis patching algorithm 

validation model validated equation simulation 
study xed video length minutes client bu er size minutes video data 
created sequences client requests poisson distribution mean inter arrival time seconds respectively 
sequence contains requests 
size patching window varied minutes sequence 
patching window size simulator counts data transmitted server true vod requirement 
amount divided time interval rst request compute mean server bandwidth requirement 
simulation results results computed equation plotted 
observe formula quite accurate predicting server bandwidth requirement 
slight error comes fact request arrival times rounded minute simulation 
example di erent requests arriving second second theoretically require separate multicasts equation 
regarded arriving time third second simulation served single multicast 
explains larger error smaller average inter arrival times 
condition requests arrive second increasing chance multiple requests served multicast 
mean inter arrival time observe worst error occurs patching window size 
due fact requests arriving second interval share multicast simulation 
fact multicast transmit video entirety causing error severe 

performance study convenience refer proposed technique optimal patching 
section compare performance optimal patching piggybacking relevant 
focus equal split strategy merging algorithm piggybacking shown ecient 
demonstrate signi cance appropriate patching window compare new technique grace patching best patching scheme far 
decide include greedy patching study rarely performs better grace patching 
select mean server bandwidth required support true vod performance metric 
better scheme require server bandwidth order ensure true vod qos 
assume server video 
system videos corresponding mean system bandwidth requirement simply summation bandwidth required support true vod services individual video 
results reported section valid systems videos 
assume arrival requests follows poisson distribution mean arrival rate 
probability having exactly arrivals time period 
mean server bandwidth required patching support true vod computed equation 
similarly computed piggybacking formulas derived validated 
selfcontained brief describe best piggybacking technique equal split merging algorithm 
provide formula bandwidth requirement 
repeat derivation details brevity sake 
interested reader referred detail 
equal split merging video streams put groups predetermined time interval called catch window 
streams initiated catch window said form group 
stream initiated rst group called leading stream 
stream initiated temporal distance leading stream current group catch window new stream assigned current group 
new group created new stream leading stream new group 
playback speed stream group set fastest slowest merged nal stream soon possible 
merge playback nal stream set normal playback rate 
bandwidth requirement algorithm follows server bandwidth es es 
es es es size catch window es total amount data delivered exactly streams initiated time period es es calculated es jvj 
cost es jvj 
wes 
notations formula explained follows 
mean temporal distance consecutive streams approximated 


minimum maximum percentage stream slowed speeded respectively 
playback rate allowed adjusted instantly slowest speed fastest speed vice versa set 

keep variation playback rate 
higher percentage cause noticeable sudden distortion degradation video audio quality 
cost amount data delivered streams initiated time interval nally merged single stream 
formula cost cost cost cost cost 




settings performance parameters table 
note catch window size piggybacking limited length video acceptable range altering playback rate 
constraint ensures streams group merged single stream leading stream nishes playback 
subsections investigate ect client bu er size request inter arrival time video length server bandwidth requirement 

ect client bu er size study xed mean request inter arrival time seconds video length minutes 
size client bu er varied minutes video data 
ect client bu er size mean server bandwidth requirement plotted 
curve piggybacking require bu er receiving 
achieved costs specialized hardware 
simulation results shown indicate patching match performance piggybacking bu er space small minutes 
video encoded mpeg minutes video require disk space mbytes costs today 
specialized hardware lot expensive patching expensive approach achieve data sharing 
observe parameter default variation number videos normal playback rate mbps fastest playback alteration 
slowest playback alteration 
size catch window es minutes 

jvj client storage size minutes data mean request inter arrival time seconds video length jvj minutes minutes table 
parameters performance evaluation bene patching limited low cost 
ord provide client station mbytes disk space improvement piggybacking possible 
comparing patching techniques see performance grace patching degrades considerably size client bu er greater minutes 
con rms initial observation patching window determined client bu er size 
see client bu er big patching window grace patching large 
result number patching multicasts increases signi cantly 
deliver large portion video service causing greater demand server bandwidth 
optimal patching avoids problem account arrival rate service requests 
added intelligence new technique able recognize appropriate amount bu er space utilize 
shown optimal patching ignores bu er space minutes order maintain performance times better piggybacking 
practice formula determine amount disk space required patching 
client buffer size minutes video data piggybacking grace patching optimal patching 
ect client bu er size 

ect inter arrival time study perform sensitivity analysis respect inter arrival time 
client bu er size xed minutes video assumed minutes long 
results plotted 
general bene multicast technique decreases increases inter arrival time 
optimal patching consistently outperform piggybacking wide margin workload 
performance gap decreases increases inter arrival time 
due insucient bu er space 
inter arrival time large patching streams need deliver data 
result clients need storage space order bu er regular stream 
practice disk space inexpensive worthwhile invest storage space order fully exploit bene patching 
mean inter arrival time seconds piggybacking grace patching optimal patching 
ect inter arrival time 

ect video length study xed client bu er minutes mean inter arrival time seconds 
catch window piggybacking maximized 
instance allowable alternation rate maximum catch window video length 
shown setting results best performance 
investigate ect video length performance techniques varied video length minutes 
performance results plotted 
see performance piggybacking degrades quickly video length increases 
general size catch window proportional length video 
longer video implies larger catch window bigger catch delay 
delay increases quickly increases video length catch speed limited normal playback rate avoid deteriorating quality playback 
observation suggests piggybacking approach applications involve long videos home entertainment distance learning contrary shows patching sensitive length video allows new request join earlier multicast immediately catch delay 
comparing patching techniques grace perform short videos 
patching window large conditions resulting long duration patching multicasts 
study indicates appropriate choice patching window size essential performance patching approach 
video length minutes piggybacking grace patching optimal patching 
ect video length 

concluding remarks multicast shown excellent technique reducing demand server bandwidth 
unfortunately due inherent limitation multicast provide near vod services 
novel technique called patching extend capability standard multicast support true vod 
approach allows requests serviced immediately having wait multicast 
allowing new users join existing multicast patching ecient conventional multicast 
contribution optimizing performance patching 
generalized approach introducing concept patching window 
existing patching schemes seen di ering way patching window determined 
showed best patching strategy far grace patching optimal 
design best patching technique develop formula help determine optimal patching window size 
formula practice reserve right amount disk space patching 
compared patching best piggybacking technique allows data sharing 
approach alters playback rates existing services order merge single stream 
inherently piggybacking match performance patching due catch delay 
performance results show improvement achievable patching 
study indicates demand server bandwidth piggybacking increases sharply length video increases 
terms hardware costs observed study patching required disk space mbytes achieve performance piggybacking requires specialized hardware alter playback rate specialized hardware cost substantially patching ers cost ecient solution 

cherkassky atm multimedia servers ieee multimedia pp 
spring 

sheu hua chaining generalized batching technique video demand proc 
int conf 
multimedia computing system pp 
ottawa ontario canada june 

hua cai sheu patching multicast technique true video demand services proc 
acm multimedia pp 
bristol september 

anderson continuous media acm trans 
computer systems pp 
august 

dan sitaram scheduling policies demand video server batching proc 
acm multimedia pp 
san francisco california october 

little venkatesh popularity assignment movies storage devices video demand system multimedia systems pp 
january 

almeroth ammar multicast delivery provide scalable interactive video demand service ieee journal selected areas communications pp 


shin scheduling video programs near video demand systems proc 
acm multimedia washington november 

lui muntz adaptive piggybacking technique data sharing video demand storage servers acm multimedia systems pp 


lau lui merging video streams multimedia storage server complexity heuristics acm multimedia systems pp 


kamath towsley continuous media sharing multimedia database systems proc 
th dasfaa singapore april 

viswanathan imielinski metropolitan area video demand service pyramid broadcasting multimedia systems pp 
august 

aggarwal wolf yu permutation pyramid broadcasting scheme video demand systems proc 
ieee int conf 
multimedia systems hiroshima japan june 

hua sheu skyscraper broadcasting new broadcasting scheme metropolitan video demand systems proc 
acm sigcomm cannes france 

hua cai sheu exploiting client bandwidth ecient video broadcast th int conference computer communication networking pp 
louisiana october 
