abstractions partial order reductions checking branching properties time petri nets wojciech penczek ics pas warsaw poland penczek pl faculty mathematics university poland math uni pl 
deals veri cation untimed branching time properties time petri nets 
atomic variant geometric region method preserving properties ctl actl improved 
shown rst time apply partial order reduction method deal time free branching properties time petri nets 
results combined ering ecient method model checking actl ctl properties time petri nets 
model checking popular methods automated veri cation concurrent systems hardware circuits communication protocols distributed programs 
practical applicability method strongly restricted state explosion problem mainly caused representing concurrency operations interleaving 
di erent reduction techniques introduced order alleviate state explosion 
major methods include application partial order reductions pel val wg symmetry reductions es abstraction techniques dgg bdd symbolic storage methods bry sat related algorithms :10.1.1.1.5124:10.1.1.42.8033
interest automated veri cation moving concurrent real time systems 
main models representing systems usually exploited timed automata ad time petri nets sta 
properties veri ed expressed standard temporal logic ltl ctl timed version mitl afh tctl acd 
ecient reduction techniques exist linear time formalisms 
veri cation concurrent systems sucient evidently veri cation timed multi agent systems 
reviews existing veri cation methods multi agent systems rou easy notice partly supported state committee scienti research rely translating formalisms branching time temporal logics see description karo hsts rou 
new important motivations considering reduction methods branching time properties 
deals veri cation untimed branching time temporal properties time petri nets 
time petri nets usually nite state spaces abstraction techniques dgg represent nite ones 
reduce sizes state spaces partial order reductions 
main contribution relies improving variant geometric region method yr de ning state spaces preserving properties ctl actl structure veri ed formula exploited showing rst time extend po reduction methods deal time free branching properties time petri nets combining results ering ecient method model checking actl ctl properties time petri nets 
rest organized follows 
section reviews existing results 
section time petri nets concrete state spaces introduced 
temporal logics branching time de ned section 
atomic state spaces described section 
partial order reduction method section 
sections contain experimental results 
related approach state spaces time petri nets improves yr re nement method bd dil 
far know approach gives smaller state spaces region graph method acd 
far partial order reductions de ned linear time properties time petri nets ys lil timed automata standard pag local semantics min 
approach closely related draw idea covering relation take general method partial order reductions preserving branching time properties 
partial order approach vp works time petri nets tctl due restrictive notion visibility transitions easily get visible restricted practical value 
time petri nets denote set non negative rational numbers 
de nition 
time petri net tpn short element tuple ef lf fp pmg nite set places ft nite set transitions ow relation ef lft functions describing earliest latest ring times transitions eft lft initial marking need notations de nitions pre fp fg preset post fp fg postset marking subset transition enabled short pre post pre leads marking marking pre post 
en ft ease presentation consider self loops require pre post concrete state spaces concrete state ordered pair clock marking clock function transition enabled gives time elapsed enabled 
initial state clock initial marking clock states change time passes transition res 
state clock time pass leading new state clock provided clock lft en 
clock clock denoted clock clock 
state clock transition re leading new state clock denoted en eft clock lft 
clock en en pre clock clock 
notice ring transitions takes time 
denote obtained passing time ring transition write run maximal sequence states transitions 
state reachable run de nition 
set states reachable concrete state space structure cn 
notice structure cn nite runs discrete state contains successor run 
property allows structures frames branching time temporal logics subsets ctl 
separating passing time ring transition leads di erent notion dense concrete state spaces directly taken frames ctl possible reinterpret ctl frames problem goes scope 
branching time logics ctl actl syntax ctl pv nite set propositions 
give syntax ctl restrict standard sublanguages 
set state formulas set path formulas ctl de ned inductively 
member pv state formula 
state formulas 
path formula state formula 
state formula path formula 
path formulas 
path formulas 
modal operator intuitive meaning paths 
denotes standard operator dual 
ctl consists set state formulae 
abbreviations def def true 
ctl actl negation applied subformulas contain modalities 
actl 
actl state modality path modalities may appear paired combinations ax ag 
ctl 
ctl state modality path modalities may appear paired combinations ax ag 
ltl 
restriction formulas form contain usually write confusion 
actl actl ctl operator semantics ctl nite set labels pv set propositions 
model ctl pair directed rooted edge labeled graph node set initial node valuation function pv edge relation assumed total labels edges de nition graph sequel bene description suggested algorithm ignored interpretation temporal logics 
assume deterministic nite graphs determinism imposed renaming copies nondeterministic transition 
original set labels new set called totality ensured adding cycles nodes 
model 
nite path denote sux 
denote state satisfaction formula state written just de ned inductively follows 
pv 

path starting 
state formula 



distinguishing power actl ctl models 
de nition simulation gl 
relation simulation conditions hold 

model simulates model simulation models called simulation equivalent models called bisimulation equivalent inverse theorem gl bcg 
bi simulation equivalent models range labeling function pv actl ctl resp 
formula pv reverse theorem essentially stating coarser bi simulation preserves truth value actl ctl resp 
formulas holds proved easy induction nitely branching gkp 
state spaces concrete state space cn tpn nite directly model checking 
need de ne nite abstraction structure nite preserves formulas logic 
task performed way 
give general de nition state spaces 
recall notion geometric state regions bd nite abstractions preserving linear time properties 
de ne atomic state classes yr obtained splitting geometric state regions order preserve branching time properties 
consequently improve algorithm generating atomic state classes restricting logic actl splitting regions really necessary 
go reductions state spaces applying partial order reductions 
equivalence relation set concrete states states mean equivalence classes cg 
assume satis es condition clock clock conditions depend properties preserved 
de nition 
state space structure satis es condition ee geometric state regions geometric state regions de ned sets inequalities representing di erent clock functions 
inequality variables rational constant denote inequality complement relation 
set inequalities fx xn solution set sol set vectors rational constants inequality valid theory rational numbers 
consistent sol 
yr introduce notion geometric state classes 
formulated nite models easily extends nite ones 
geometric state class tuple marking set inequalities obtained ring sequence transitions satisfying timing constraints represented initial state class 
needs de ned variables representing ring times transitions distinguish di erent rings transition 
transition times red occurs times transition enabled denoted en en 
discussion assume xed transition sequence variable represents time th ring times red transition denote occurs times transition times red enabled jth ring transition say parent denoted parent 
special variable representing time net started assume sequence transitions notions de ned parents en parent 
example parent en 
part rans parent parents times red transition called en times red transition en parent ef parent lf consistent successor obtained ring transition denoted follows times red wt eft parent lf parent lf enabled times red successor relation de ne state class graph nodes state classes edges represented relation 
behaviour depends marking ring times enabled transitions bd 
ring times parents corresponding enabled transitions di er upper indices ring times transitions 
state classes equivalent denoted part rans part rans projections solutions sol parents sol parents number equivalence classes state classes nite bd equivalence classes constitute carrier state spaces geometric state regions 
need refer original state class graph call unfold 
note upper indices variables unbounded exists cycle behaviour part rans part rans consider xed ordering variables part rans part rans 
assuming elements tuple sol parents sol parents arranged way correctly nd equivalence classes 
connection concrete states 
run de ne time represents time res 
state state class de ne exists run 
time time time satisfy set inequalities obtained replacing variables corresponding upper indices time holds 
follows consider satisfy condition nite run means cycles transitions earliest ring times equal 
atomic state classes problem geometric state graphs reported yr satisfy condition ae see de nition preserve ctl formulas 
de nition 
state class satis es condition ae successor means formula holds hold geometric region approach ctl model checking tpn 
ways split state classes atomic state classes condition ae hold 
de nition 
state class atomic satis es condition ae 
region graph atomic state classes atomic 
splitting state classes 
atomic classes obtained splitting original classes 
region split new regions created proper constraint de ned 
successor obtained th ring edge constraint inequality variables fg ft parents 
edge constraint parent de ne ef lft 
proper constraint consistent 
intuitively existence proper constraint means theorem yr 
state class atomic exists proper constraint edge constraint algorithm building atomic state classes yr combines depth rst search partitioning 
starts generating initial geometric region recursively computes successor classes class obtained ring transitions ring transition split atomic 
case class modi ed adding successors generated copying subgraph 
successors recursive splitting procedure called modi es sets inequalities classes adding splitting class necessary split predecessors inequality add process new edge constraint class parent 
new class obtained ring computed 
yr proved algorithm terminates produces nite atomic state class graph unfold atomic 
example display tpn geometric state graph atomic state graph 
example 
tpn taken yr 
sets inequalities state classes picture de ned follows ta ta ta ta ta ta ta ta atomic state class graph geometric state class graph time petri net ta ta ta ta ta ta ta ta ta fig 

tpn state graphs added state spaces tpn models ctl proposition pv correspond exactly place simplicity assume names propositions places 
notice concrete state space cn tpn ones extended valuation functions vc vc clock clock va va de ne models formulas ctl model man va preserves formula man mcn 
implies man mcn 
theorem bd yr 
state space 
conditions hold geometric class graph man preserves ltl formulas atomic class graph man preserves ctl formulas 
notice atomic class graph satis es condition ae mcn man bisimulation equivalent 
man preserves ctl formulas see theorem 
pseudo atomic state classes rst contribution starts 
aim relax conditions atomic class graphs actl formulas remain preserved 
start weakening condition ae condition de ned 
cor cor satis es cor cor state space satis es say pseudo atomic 
notice condition equivalent ae cor fig 

fragments structures formed sets concrete states example 
shows fragments state spaces ae satis ed cor fc satis ed cor fc ae satis ed cor 
formulate theorem connects condition actl theorem 
pseudo atomic class graph man preserves formulas actl proof 
sketch notice conditions hold 
cor actl 
cor 

cor cor actl 
follow directly proof condition ae preserves ctl remember actl sublanguage ctl 
follows fact condition cor simulates show 
follows cor 
condition cor cor implies get cor implies 
done 
cor 
condition 
lemma follows fact cor condition improving size atomic state spaces preserving actl formulas 
example 
notice fig 
preserves ctl preserve ctl preserves actl preserve actl preserves ltl 
example 
notice geometric state class graph fig 
satis es condition preserves actl discuss modify algorithm generating atomic state spaces order get pseudo atomic state spaces 
classes represented cor cor represents cor firing transition gives new class cor wt wt successor described section 
notice splitting necessary cor consistent 
algorithm modi ed splitting computes memorizes cor performed way 
algorithm starts assigning cor initial state class 
assume simplicity proper constraint successor cor cor ii cor cor 
follows fact transition lead ii propagates long cor consistent algorithm need split 
algorithm starts splitting similar way described yr handling splitting cor 
case class successors recursively modi ed adding sets inequalities cor new class created 
cor union set inequalities obtained ring transition red generate class cor parent class successors computed copying subgraph 
detailed description algorithm 
partial order reductions tpn section show covering relation exploited de ning partial order reductions state spaces pseudo atomic atomic time petri nets preserving branching time properties 
region graph denotes class obtained ring recall deterministic transitions labelled time pass de nition 
transition covers transition written classes holds intuitively class reached ring reached rst ring possibly passing time 
example 
transition covers transition components states follow fig 

transition covers transition give simple criterium implies covers theorem 
transitions satisfy conditions pre post pre post eft 
proof 
sketch show clock clock 
re clock re due ef 
clock 
tt follows 
show covering relation extend partial order reduction method branching time properties untimed systems 
problems proving correctness approach follow fact fact pseudo atomic state spaces generated algorithm combination dfs splitting 
discussion explains solve problems 
observe equality necessary proof correctness fact simulates 
provided lemma 
lemma 
simulates denoted unfortunately proof theorem lemma quite involved 
second problem connected way po reduced pseudo atomic state spaces generated 
dfs partitioning splitting classes introduce non determinism need renaming copies transitions prove pseudo atomic state space method po reductions gives reduced state space preserves formulas actl ctl result allows reduce state spaces say perform partial order reductions generating state spaces dfs partitioning 
combination possible discussed section 
detailed description algorithm reader referred 
discuss algorithms 
state space en ft standard po reduction algorithm straightforward depth rst search dfs algorithm see pel generate reduced state graph 
dfs recursive algorithm starts initial pseudo atomic region time petri net current state dfs selects unexpanded generation successor enabled transition say en generates successor state dfs continues successor state till enabled transition backtracks nearest predecessor contains unexpanded enabled transition 
po reduction algorithm di ers dfs algorithm visits new state set enabled transitions en examined subset ample set denoted generate successors 
choice ample sets constrained conditions introduced precisely discussed pel val val wg 
vis denote set renamed transitions change valuations propositions model man recall models corresponding tpn places play role propositions 
transition covered transition executed transition executed 
cycle constructed state graph node en vis en ftg en cd vis vis 
algorithm computing sets transitions satisfying independency hp 
adaptation covering straightforward see 
reductions preserving actl alternative way de ning ample sets conditions relaxed 
show reduced pseudo atomic model preserves actl pseudo atomic reduced pseudo atomic model simulation equivalent 
similar proof obtained preservation ctl reduce atomic models de nition ample sets symmetric relation aim idea proof modify de nition simulation 
start de ning visible simulation shown stronger simulation 
de nition visible simulation pel 
relation vs visible simulation vs ii vs conditions hold 


invisible vs exists path vs invisible vs 
nite path 
invisible vs exists edge invisible vs 
model simulates model vs visible simulation models called simulation equivalent vs vs models called bisimulation equivalent vs vs vs inverse vs theorem 
pseudo atomic model po reduction generated algorithm 
simulation equivalent 
proof 
sketch proof generalization corresponding proof 
pseudo atomic model reduced generated partial order reduction algorithm 
remember js sub model obvious simulates order show opposite de ne new visible simulation relation denote simulates sense lemma 
notation order obtain simulation reduced model model de ne relation de nition 
exists sequence states wn invisible fa satis es condition state sequence called generalized forming sequence gf sequence short 
gf sequence form called standard forming path sf path 
number gf sequence called length 

goal show simulation 
number simple lemmas prove main theorem lemma 
edge fag satis es condition state edge fag satis es condition proof 
see 
lemma 
edge edge proof 
follows directly lemma 
lemma 
wn gf sequence exactly possibilities 
transition covers exists gf sequence xn 
exists covered exists gf sequence gf sequence length proof 
notice covered item fa satis es holds item 
apply simple induction lemma lemma 
corollary 
exists edge cases 
appear gf sequence particular case visible 
easy see reduction algorithm guarantees lemma 
state reduced model sf path fully expanded successors generated state theorem 
relation simulation 
proof 
observe item de nition satis ed invisible operations preserve valuation 


show item de nition holds 
argue cases case 
invisible 
item follows immediately 
case 
visible 
corollary cases edge notice de nition necessarily case lemma sf path fully expanded state implies transitivity cases case 
invisible 
path required item consists sf path case 
visible 
corollary edge fully expanded path required item consists sf path followed edge proving item de nition nite path invisible 
consider cases 
rst case single edge invisible fcg satisfying condition case second case fully expanded 
show exists occur 
show construct sequence gf sequences path observe lemma appears construct path shorter nitely states nite length construction terminate 
corollary edge fully expanded proof 
important notice symmetric follows easily lemma bisimulation 
case preserve ctl algorithm applied atomic models 
easy criterium symmetric require eft eft 
combining dfs partitioning partial order reductions describe non sequential combination dfs partitioning algorithm generating pseudo atomic state classes partial order reductions 
changes algorithm generating pseudo atomic state classes 
set transitions red ample set computed formula checked 
splitting class imply splitting predecessors original choice single transition red class invalidated transition gets copies renamed 
requires recomputing ample set rebuilding subgraph 
similar problem handled class get splitting propagates equivalent predecessors invalidate condition 
requires rebuilding subgraph 
edge constraints potentially cause splitting class po reduction applied transitions enabled computed order build graph substructure unreduced 
detailed description algorithm 
proof correctness shows reduced state space generated algorithm exactly generated standard applied generated pseudo atomic state graph 
correctness follows theorem 
experimental results algorithm implemented base program described yr received courtesy yoneda 
sets inequalities describing state classes represented dbm matrices dil 
implementation contain compressing procedure optimized practical purposes 
small net 
display sizes detailed region graph acd taken yr geometric region atomic graphs graphs obtained po algorithm vis ft 
obvious running implementation bigger examples concurrent processes give substantial reductions 
states edges total cpu region graph geometric region ae satis ed ae po actl satis ed po actl ta fig 

comparison sizes graphs simple tpn improved variant geometric region method yr de ning state spaces preserving properties actl shown extend po reduction methods deal time free branching properties time petri nets 
results combined ering ecient method model checking actl ctl properties time petri nets 
far method covers untimed properties tpn 
believe similar approach ecient veri cation tctl properties region graph approach acd 
acd alur courcoubetis dill model checking real time systems proc 
lics ieee pp 

ad alur dill automata modelling real time systems theoretical computer science 
afh alur feder henzinger bene ts relaxing journal acm 
biere cimatti clarke zhu symbolic model checking bdds proc :10.1.1.42.8033
dat 
bcg browne clarke grumberg characterizing finite kripke structures propositional temporal logic theoretical computer science 
bd diaz modelling veri cation time dependent systems time petri nets ieee trans 
software eng 

bengtsson jonsson lilius wang partial order reductions timed systems lncs 
bry bryant graph algorithms boolean function manipulation ieee transaction computers :10.1.1.1.5124
dgg dams grumberg gerth interpretation reactive systems abstractions preserving actl ectl ctl proceedings ifip working conference programming concepts methods calculi north holland 
dams gerth kuiper partial order reduction techniques real time model checking proc 
rd int 
workshop formal methods industrial critical systems amsterdam pp 

dil dill timing assumptions veri cation finite state concurrent systems lncs 
es emerson sistla symmetry model checking formal methods system design 
gkp goltz kuiper penczek propositional temporal logics equivalences lncs 
gerth kuiper peled penczek partial order reductions branching time logic model checking information computation 
gl grumberg long model checking modular veri cation lncs 
hp holzmann peled improvement formal veri cation proc 
forte formal description techniques chapman hall pp 

lil lilius ecient state space search time petri nets proc 
mfcs workshop concurrency entcs vol 
springer verlag 
min partial order reductions model checking timed automata lncs 
pag partial orders veri cation real time systems lncs 
pel peled partial order reduction linear branching temporal logics process algebras partial order methods veri cation american mathematical society dimacs pp 

generation reduced state spaces time petri nets report ics pas appear 
penczek gerth kuiper improving partial order reductions branching time properties fundamenta informaticae 
rou ch 
rou editor proc 
formal approaches agent systems springer verlag 
sta analyse von petri modellen teubner verlag 
val valmari stubborn sets reduced state space generation proc 
th international conference application theory petri nets lncs vol 
springer verlag pp 

val valmari stubborn set methods process algebras proc 
partial order methods veri cation mathematical society pp 

vp partial order method veri cation time petri nets lncs 
wg wolper godefroid partial order methods temporal veri cation lncs 
yr yoneda ctl model checking time petri nets geometric regions ieice trans 
inf 
syst 

ys yoneda ecient veri cation parallel real time systems formal methods system design 
