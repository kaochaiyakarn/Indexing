campbell eds integrating symbolic mathematical computation artificial intelligence proceedings nd international conference artificial intelligence symbolic mathematical computing karlsruhe springer lncs pp 

combining theorem proving symbolic mathematical computing karsten jacques universitat karlsruhe institut fur algorithmen und systeme am delta karlsruhe delta germany ira uka de 
intelligent mathematical environment enable symbolic mathematical computation sophisticated reasoning techniques underlying mathematical laws 
different possible levels interaction symbolic calculator algebraic algorithms theorem prover 
high level interaction requires common knowledge representation mathematical knowledge systems 
describe model knowledge base mainly consisting type algorithm schemata algebraic algorithms theorems 
keywords theorem proving symbolic mathematics knowledge representation dream doing mathematics computer progressively true 
ideally intelligent assistant doing mathematics user friendly interactive environment allowing perform computations prove theorems support formal reasoning advanced tutoring 
environment rely sophisticated ai techniques automated theorem proving machine learning planning 
mathematical computations efficiently performed 
side computer algebra systems cas usually offer large collection powerful algebraic algorithms straightforward programming language 
classical systems mathematical knowledge definitions mathematical structures properties operators domain domains computation range algorithms mathematical specification hidden algebraic algorithms 
axiom allows definition data types including operators domains computation 
ai methods automated theorem proving learning provided 
cas efficient computing symbolic solutions algorithms derive new theorems lemmas 
side automated theorem provers atp achieved remarkable results proving non trivial mathematical theorems 
lack embedded mathematical knowledge algebraic algorithms intelligible representations proofs difficult 
require huge search spaces 
natural integrate theorem proving symbolic mathematical computing common environment 
report environment enables compute algebraic algorithms derive theorems deal vertical inclusion polymorphisms learn apply equation schemata 
explicit formalization provides new possibilities explain solution steps 
structured follows 
section illustrates different levels interaction symbolic calculator algebraic algorithms theorem prover 
common mathematical knowledge base stores domain specific problem solving knowledge described section 
overview section followed concluding remarks section 
mathematical problem solving algorithms theorems solving problems mathematicians follow conception naive formulation exploration tentative proof formulation proof publication education 
packages aid mathematicians steps developed am concept formulation cas application algorithms atp verification discovery theorems specification languages knowledge representation 
mathematicians systems everyday tools severe drawbacks hard 
classical cas provide thousands sophisticated algebraic algorithms difficult handle users 
hand hard select appropriate algorithm amount available algorithms hand interpretation solution needs deep mathematical understanding 
user doesn receive information solution steps system output solution problem find solution problem 
mathematical knowledge embedded implicitly algorithms inaccessible user commutativity polynomial addition axioms groups 
algorithmic encoding leads high efficiency 
traditional theorem provers difficult specify axioms provers language usually order language normal form 
representation mathematical concepts gcd finite fields awkward unnatural 
provers usually lack embedded algebraic algorithms 
otter allows declaration user defined functions corresponding argument result types extension system new algorithms expensive new implementation function recompilation system 
atp compute huge search spaces inefficient 
long complex proofs difficult understand learning environment mathematics mathematical applications provide representations point essential steps proof 
success proving hard mathematical theorems 
contrast algorithmic problem solvers theorem provers provide proofs explain solutions 
propose integration cas atp 
integration achieved different ways illustrated 
sc sc atp atp atp evaluator evaluator user interface user interface user interface knowledge base sc evaluator knowledge base user interface sc evaluator knowledge base user interface sc evaluator knowledge base user interface atp atp atp cas fig 

forms interaction algorithms theorems simplest case interaction user interface provides link cas atp respectively 
user access systems apply algorithms theorems solve problem depending class problem 
type interaction allows arbitrary cas atp 
systems interact directly user familiar systems 
architecture combines advantages drawbacks 
example cas adding polynomial polynomial ring done function 
atp tries prove left neutral element right neutral group 
symbolic calculator sc atp extended common control unit evaluator 
evaluator controls selection modules meta knowledge functions predicates 
controls application algebraic algorithms sc theorems 
mathematical knowledge represented separately module 
algorithms require type information arguments applicable 
information derived theorems assuming modules share common knowledge representation 
mathematical knowledge base consists meta information algorithms form algorithm schemata cf 
section 
name gcd signature theta constraints isa definition gj gj cj cj cj theorems gcd gcd gcd gcd mod gcd function fig 

schema algorithm gcd algebraic algorithms offer capabilities explain solutions 
explanations generated theorem prover mathematical specification algorithms 
knowledge representation symbolic calculator theorem prover adjusted common representation 
form interaction theorems available algorithms sc access directly atp 
mentioned algorithms efficient computation predicates proving theorems 
interaction needs transfer necessary knowledge parameters sc 
avoided common knowledge base direct link sc atp allows immediate call algorithm proof 
new versions theorem provers otter allow user defined algorithms identified special character gcd 
extension prover requires recompilation system algorithm implemented cas provide extensive collection efficient mathematical algorithms reimplementation necessary meaningful 
kind interaction lead strong improvement efficiency theorem prover 
example sc various efficient algorithms gcd calculation 
atp otter allows definition simple functions gcd 
performance increased strongly calling adequate gcd algorithm sc 
gcd greatest common divisor nonnegative integers eq eq lt gcd diff gcd diff 
fig 

definition function gcd otter application theorems useful running algebraic algorithms verification conditions properties objects 
kind integration true requires redesign new algorithms prover 
advantage lies powerful reasoning capabilities theorem prover sc 
example sc 
atp tries prove subgroups index normal 
complete integration algorithms theorems achieved combining 
step arbitrary combinations algorithms theorems applied solve problem 
combines advantages requires fit sc atp common knowledge representation 
example sc berlekamp algorithm 
atp ree gcd sc compute derivation gcd 
shown different levels interaction sc atp 
complete integration requires development new common semantics sc atp reengineering algorithms common explicit special character indicates call theorem prover 
existence inverse 
closure 
associative property 

operation defined equal 
denial theorem 

proof 



equal 

equal 
equal 
equal 
equal 
equal 
fig 

proof hyperresolution standard formulation theorem subgroups index normal 
representation objects mathematics mathematical knowledge base 
construction memory described section 
mathematical knowledge base base consists type schemata algorithm schemata algebraic algorithms theorems symbol tables normal forms 
discuss representation algebraic algorithms theorems exclusively prover ca engine 
unique treatment defining theorem schemata desirable improve collaboration systems 
required verify algorithms generate theorems automatically 
theory algebraic specification provides framework design type system mathematical assistant 
adopt specification language formal sigma represent mathematical knowledge 
suited specify mathematical domains computations finite groups polynomial rings inherently modular 
algebraic specification introduces constants operators properties intended interpretation enables reuse specification accordance dependencies particular specification modules computational structure acs 
type schema represents module consists name unique identifier list inherited acs parameters list acs parameters sorts list new sorts operators declarations new operators initial properties 
shows schemata selected acs details may cht 
definitions build hierarchy mathematical domains computation 
name monoid semigroup sorts mo ne elt operators elt ne name group monoid sorts gr operators inv elt elt elt inv ne name ring rename theta ne rename ne inv gamma sorts ri operators elt theta theta theta elt theta theta theta fig 

type schemata monoid group ring 
user doesn receive information solution steps system output solution problem find solution problem 
algorithms represented terms schemata 
allow representation meta knowledge name unique identifier schema variable bindings signature describes types input output constraints imposed domain range definition mathematical description output list describing embedded subtasks semigroup monoid group ring set boolean fig 

hierarchy type schemata theorems describing properties algorithm function name corresponding executable algebraic function compute output 
name gcd primitive signature theta constraints isa definition primitive part pseudo remainder content gcd multiply theorems function fig 

schema algorithm gcd primitive similarly type equation schemata algorithm schemata build hierarchy specialized versions specializations inherit definitions theorems general algorithms 
examples algorithm schemata figures describes parts hierarchy algorithm schemata 
new properties algorithms derived theorem prover 
ae ae ae ae delta delta delta delta delta delta delta delta series taylor sum calculus phi phi phi phi integrate laplace differentiate math functions phi phi phi phi gcd phi phi phi phi gamma gamma gamma gamma gcd primitive gcd reduced gcd gcd binary gcd euclid 
solve phi phi phi phi solve de solve eqn solve poly fig 

hierarchy algorithm schemata introduced different kinds interactions sc atp 
mathematical knowledge represented common knowledge base consists symbol tables normal forms theorems algebraic algorithms type algorithm schemata 
environment corresponding interaction described introduced section 
intelligent environment symbolic mathematical computing environment solving mathematical problems integrates theorem proving symbolic computing explanation learning knowledge representation system 
schema representation mathematical structures algorithms enables representation meta knowledge constraints parameters dependencies algorithms theorems 
user interface offers frames graphs handling schemata displays explanations solutions specific problems 
evaluator solves problems theorem prover symbolic calculator applying equation schemata learning subsystem 
knowledge base consists symbol tables normal forms simplifier algebraic algorithms symbolic calculator algorithm schemata specification algorithms type schemata computational structures initial derived equation schemata simplifying expressions 
equation schemata consist mathematical rewriting rules model domain knowledge user defined laws 
new equation schemata learned generalizing specialized solutions explanation learning 
simplifier evaluator symbolic calculator learning subsystem problem solver parser display gui user interface mathematical knowledge base normal forms symbol tables special cases general schemata mathematical schemata domain knowledge user definitions explanation generalization initial equation schemata derived equation schemata theorem prover type schemata algorithm schemata algebraic algorithms theorems verifier fig 

architecture intelligent environment symbolic computing problems solved applying schemata eliminate obstacles calculation unknown properties variable 
explanation appropriate solution problem generated achieved schema generalized solve problems knowledge base equation schemata updated new generalized schema 
example purpose having prototype systems created ad hoc interfaces theorem provers cas 
interfaces common evaluator implemented respectively aim approach integration higher level interaction corresponding 
prototype combines dtp simple order theorem prover magma boca cas computations algebra particularly group theory 
application magma algorithms guided dtp solve new problems finding elements minimal index prove difficult properties induction applications algorithms 
tremendous knowledge groups represented magma accessible prover 
prototype combines isabelle paul generic theorem prover supporting set theory type theory higher order logic maple known commercial cas 
domains computation defined provers language numbers polynomials new theorems proven cooperation maple 
example proof induction theorem nat nat nat 

start true reflexivity step new goal maple expand sides prover trying prove upper bounds bounds proven interaction systems second bound derived rule nat nat nat nat 
reflexivity 
maple transforms outlined advantages combining theorem proving symbolic mathematical computing 
hand computer algebra systems profit theorem provers explanations solution algorithms verification properties mathematical objects 
hand offer extensive collection efficient mathematical algorithms improve efficiency theorem prover 
high level interaction requires common representation mathematical knowledge systems 
knowledge base mainly consists type algorithm schemata algebraic algorithms theorems 
adopted specification language specification type schemata provides executability offers type system symbolic calculator theorem prover 
progress design language environment semantics allows consistent treatment algorithms theorems tools verification algorithm schemata extraction learning theorems algebraic algorithms generation algorithms theorems interaction learning component theorem prover applications environment 
boca cannon handbook magma functions sydney 
cht unified domains computational structures campbell eds international conference artificial intelligence symbolic mathematical computing karlsruhe august lncs pp 
springer 
unified algebra specification language symbolic computing ed design implementation symbolic computation systems lncs pp 
springer 
dtp manual stanford university 
maple springer 
axiom springer 
lenat brown am appear artificial intelligence pp 
elsevier 
mccune otter manual guide technical report anl argonne national laboratory 
paul paulson isabelle generic theorem prover lncs springer 
shavlik extending explanation learning generalizing structure explanations pitman london 
artificial intelligence johnson mckee eds artificial intelligence mathematics oxford university press 
article processed macro package llncs style 
