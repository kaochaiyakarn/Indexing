real time linux victor michael new mexico institute technology describes design implementation experimental results possible applications real time version linux operating system 
idea virtual machines running standard time sharing os real time executive computer 
services provided real time kernel described 
comparison solution real time 
developed small real time executive runs linux operating system completely preemptable task 
executive schedules runs real time tasks relatively high level time precision low latency overhead 
linux task supports network services gui development tools standard programming environment 
system designed require little modi cation linux essentially changes limited low level interrupt wrappers routines disable enable interrupts 
result able take advantage rapid pace development linux linux tools 
hand system designed allow real time programmers nearly full available hardware processing power paying price normally associated sophisticated operating systems 
immediate interests control scienti instruments believe method generalizable operating systems real time problems 
believe method ers alternative avenue modularity may interest general operating system design 
real time operating systems small fast predictable 
great variety demands real time scheduling real time operating system include exible reprogrammable task scheduling discipline 
requirements easy satisfy increasingly clear years realtime operating systems need satisfy user requirements sophisticated development tools graphical user interfaces networking support 
attacked problem apparently contradictory requirements simple version known virtual machine technique 
linux interacts software emulation interrupt control hardware 
emulation supports synchronization requirements linux kernel preventing linux disabling interrupts 
interrupts handled linux passed emulation software needed real time processing completes 
linux requested interrupts disabled emulation software simply marks interrupts pending 
linux requests interrupts enabled emulation email address edu 
research described partially funded nsf ccr 
software causes control switch linux handler highest priority pending interrupt 
linux able provide sophisticated services real time system increasing interrupt latency 
virtual machine layer advanced technique making unix realtime far back technique di ers previous orts scope purpose 
virtual machine layer emulates speci hardware component interrupt control 
linux able directly control hardware run time ciency order minimize need modi cations linux kernel 
real time executive acts level operating system provide basic services provided linux 
real time executive intended provide services linux provide 
primitives process creation switching memory management provided real time executive 
real time services provided 
remainder parts 
section describes applications mind constraints experimental results obtained 
section details services provided real time executive 
section describes virtual machine implementation architecture 
compares approach real time os design points directions 
goals barriers measured results immediate goal develop linux kernel support real time control scienti instruments 
limitations standard time shared operating system purpose obvious mention unpredictability execution high interrupt latency critical problems 
general purpose time shared operating systems schedulers intended balance response time throughput 
result execution process depends complex unpredictable fashion system load behavior processes 
problems compounded linux unix derivatives kernel mode execution non preemptable disabling interrupts primary means synchronization 
locking process pages memory requiring round robin scheduler posix standard gain certain degree predictability meet requirements moderately demanding hard real time systems 
low interrupt handling latency critical real time operating system 
interrupt latency high linux 
mhz pentium pc measure sec latency handling fast linux interrupts 
reported linux console driver disables interrupts long milliseconds switching virtual consoles 
clearly frame bu er emptied millisecond capabilities system timing requirement demanding expect see 
fundamental limits real time processing determined hardware 
example test system measure time approximately sec setting bit parallel port 
obviously support requirement data rate khz matter operating system 
similarly minimal interrupt latency bounded hardware interrupt processing time 
pentium processor cycles needed enter exit interrupt time needed interaction interrupt controller 
devices need rapid response precise timing call dedicated di erent hardware 
modern pc hardware capable handling real time requirements wide range devices 
current version rt linux modi cation linux 
orts currently underway linux kernel hope port system powerpc box month 
test system mhz pentium processor kb secondary cache mb main memory 
devices video display keyboard dma devices 
non dma controllers mass storage devices di cult integrate real time control system 
validate performance real time linux concentrated periodic tasks needed control stepper motor sample sensors 
demanding test real time scheduling task sec period toggle bit parallel port 
attached output pin digital storage oscilloscope measure timing latency 
measurements show square wave maximum variation sec heavy system load 
sec includes time process interrupt clock detect toggle task needed run start toggle task 
micro seconds second experiment periodic tasks sec periods set cleared bit parallel port 
experiment showed maximum variation sec 
experiments measured timings high system demand recursive disk copy running linux network connection driving remote windows display netscape browser program started display graphics 
changes linux load ect timing real time tasks 
periods signi cantly sec linux performance poor 
single real time task scheduled period sec essentially prevents linux progressing 
performance characteristic desired non realtime system gets processing time needed real time system 
measuring timing system signi cant cache complex pipeline discounted experiments indicate real time os possible control devices quite precise level timing 
interface real time processes light weight threads executing address space 
context real time process consist integer registers 
ensures fast context switch overhead system call rt kernel takes processor cycles currently periodic real time tasks supported 
essentially means dispatch timer interrupt 
dispatching interrupts added trivially 
rt linux provides system calls process control 
int const char file loads rt program file creates process returns pid 
process suspended called 
int int pid starts execution rt process low priority level process rst loaded routine int int pid kills rt process int time returns current time time bit integer long long int containing number clock ticks passed system booted constant rt ticks sec contains number clocks second 
int params start period int priority changes scheduling parameters process int start start period int priority suspends process start time start time comes set priority process requested value 
int period suspends execution process period 
real time linux hardware context switch mechanism intel processors provide saves state fast 
save context stack switch stacks 
simple priority preemptive scheduler currently real time linux 
implemented routine chooses ready process highest priority marks process execute 
tasks give processor voluntarily preempted higher priority task time execute comes 
typically tradeo clock interrupt rate task release jitter 
systems tasks resumed periodic clock interrupt handler 
high clock interrupt rate ensures low jitter time incurs overhead 
low interrupt rate causes tasks resumed early late 
rt linux tradeo resolved shot timer periodic clock 
tasks resumed timer interrupt handler precisely needed 
calculated intel processor cache tlb misses assumed note task resources statically de ned 
particular support dynamic memory allocation 
basic approach sophisticated services require dynamic memory allocation moved linux processes 
keeping approach real time kernel preemptable 
linux kernel preempted real time task moment linux routine safely called real time tasks 
communication mechanism 
simple fifos rt linux moving information linux processes linux kernel real time processes 
data collecting application example real time process poll device put data fifo 
linux process reading data fifo storing le displaying screen 
currently interrupts disabled rt fifo accessed 
data transmitted small chunks compromise low response time 
approaches notably lock free data structures possible considered :10.1.1.164.8106
system calls related rt fifos 
int create unsigned int fifo int size creates rt fifo fifo size size bytes 
fifos numbers global fifos numbered rt max fifo 
applications agree fifos available 
int destroy unsigned int fifo destroys fifo 
int get unsigned int fifo char buf int count reads count bytes fifo buf 
return data fifo return count 
int put unsigned int fifo char buf int count writes count bytes buf fifo return space fifo return count 
version rt linux abandon separate address space real time tasks place real time tasks linux kernel address space 
original design motivated desire relatively user safe real time facilities 
real time tasks loaded address space overwrite linux data structures capable crashing system ways 
system sacri ce safety speed convenience linux modules allow dynamic loading replacement real time tasks real time scheduler 
virtual machine rt executive implemented pc architecture 
interrupt handling modi cations linux kernel primarily places cli routine disable interrupts modi ed simply clear global variable controlling soft interrupt enable 
sti routine enable interrupts modi ed generate emulated interrupts pending soft interrupts 
low level wrapper routines save restore state calls handlers changed soft return interrupt code machine instruction 
interrupt occurs control switches real time handler 
handler needs done real time executive may pass interrupt linux 
soft interrupt enable ag set stack adjusted needs linux handler control passed soft interrupt table appropriate linux wrapper 
wrapper saves additional state calls linux handler program usually written handler returns control wrapper soft return interrupt executed 
soft return interrupt restores state checks see soft interrupts pending 
hard return interrupt executed 
interrupts pending highest priority processed 
linux reasonably easy modify part kernel code controls interrupt hardware routines cli sti 
standard linux routines assembly language macros generate cli clear interrupt bit sti set interrupt bit instructions changing processor control word 
interrupts disabled enabled individually interrupt controller linux drivers directly access interrupt controllers hardware timer modify driver code 
changes required lines new code modi cation lines linux code 
shows code macros 
interrupt handlers rt executive perform function necessary rt system may pass interrupts linux 
real time system involved rt device interrupt handlers simply notify linux 
hand timer interrupt increments timer variables determines rt task needs run passes interrupts linux appropriate intervals 
software interrupts disabled control simply returns 
control passed 
macro invokes software handler corresponding interrupt highest priority pending masked ones 
code begins saving minimal state making sure kernel data address space accessible 
critical section surrounded actual cli sti apply software interrupt mask variable containing pending interrupts look highest priority pending interrupt 
software interrupts processed re enable software interrupts restore registers return interrupt 
nd interrupt process pass control linux wrapper 
linux wrapper modi ed stack looks control passed directly hardware interrupt 
step essential linux looks stack see system user kernel mode interrupt macros cli movl push ds eax edx movl kernel ds edx mov dx ds cli movl edx andl edx edx eax jz movl sti jmp eax movl sti popl edx popl eax pop ds sti kernel cs done sti done sti soft cli sti occurred 
linux believes interrupt occurred kernel mode call scheduler 
body wrapper modi ed terminating operation modi ed wrapper invokes 
wrappers essentially invoke pending interrupts left 
re enabling software interrupts pending ones course processed 
code simulates hardware interrupt 
push ags return address stack see 
individual disabling enabling interrupts handled similarly 
approach building real time operating system contrasted known methods 
method add real time support general purpose operating system 
real time unix example approach illustrates ort needed unix kernel fully preemptive 
examples include vax vms posix standard similar real time os 
second approach design operating system speci cally support real time 
vx works particularly successful example system 
examples include qnx microkernel os 
chosen third path 
real time posix standards hard purposes 
linux fully pre time consuming cut mainstream linux development 
interested realtime operating system design want leave tcp ip nfs guis important general purpose operating system components 
special purpose operating systems problem 
vendors rapidly adding support general purpose operating system utilities 
fact vendors advertising posix compatibility 
grafting posix real time operating system complicated time consuming grafting real time existing general purpose operating system 
approaches concerned interaction real time non real time subsystems cause problems approach avoids clear separation real time general purpose components 
ort modify linux little possible real time executive approach basis signi cant redesign linux similar operating systems 
example device drivers real time constraints 
real time requirements drivers explicit moved rt kernel con guration programs attempt nd feasible schedule allowing users nd experiment device timing constraints feasible 
may possible simpli design general purpose kernel giving emulation cleaner semantics actual hardware 
borko real time unix systems design application guide 
kluwer academic publishers group norwell ma usa 
bill 
posix programming real world 
reilly associates 
herlihy 
wait free synchronization 
acm transactions programming languages systems january 
dan 
architectural overview qnx 
usenix workshop micro kernels kernel architectures pages seattle wa april 
usenix 
intel 
pentium processor family developer manual 
order number 
samuel le er marshall kirk mckusick michael karels john quarterman 
design implementation bsd unix operating system 
addison wesley reading ma usa 

levi tripathi carson agrawala 
hard real time operating system 
acm operating systems review sigops july 
bayer 
unix time sharing system operating system 
bell system technical journal 
henry massalin 
synthesis cient implementation fundamental operating system services 
phd thesis columbia university 
ali janice 
design interfacing ibm pc ps 
prentice hall 
os real time operating system 
www com html os arch diagram html 
vm study multiplicity usefulness 
ibm systems journal 
sang son editor 
advances real time systems chapter pages 
prentice hall englewood cli nj 
stankovic 
misconceptions real time computing serious problem generation systems 
ieee computer october 
gabriel wainer 
implementing real time services 
operating systems review july 
wind river systems atlantic avenue ca usa 
vxworks programmer guide december 

