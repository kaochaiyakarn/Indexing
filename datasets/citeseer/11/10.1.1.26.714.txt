data mining framework constructing features models intrusion detection systems wenke lee submitted partial fulfillment requirements degree doctor philosophy graduate school arts sciences columbia university wenke lee rights reserved data mining framework constructing features models intrusion detection systems wenke lee intrusion detection essential component critical infrastructure protection mechanisms 
traditional pure knowledge engineering process building intrusion detection systems idss slow expensive error prone 
current idss limited extensibility face changed upgraded network configurations poor adaptability face new attack methods 
thesis describes novel framework madam id mining audit data automated models intrusion detection 
classification rules inductively learned audit records intrusion detection models 
critical requirement rules ective detection models appropriate set features need constructed included audit records 
key contribution thesis automatic feature construction 
madam id raw audit data preprocessed records set intrinsic general purposes features 
data mining algorithms applied compute frequent activity patterns records automatically analyzed generate additional set features intrusion detection purposes 
introduce extensions axis attribute attribute level wise approximate mining mining relative support basic association rules frequent episodes algorithms 
extended algorithms characteristics audit data direct cient computation relevant patterns 
develop encoding algorithm frequent patterns easily visualized analyzed compared 
devise algorithm automatically constructs temporal statistical features semantics patterns 
ectiveness advantages algorithms objectively evaluated darpa intrusion detection evaluation program 
contents list figures list tables vii acknowledgments chapter problem statement approach 
thesis contributions 
thesis outline 
chapter intrusion detection anomaly detection 
misuse detection 
combining anomaly misuse detection 
problems current intrusion detection systems 
approach 
related intrusion detection 
chapter data mining kdd process 
data mining algorithms 
data mining process building intrusion detection models related data mining applications 
chapter classification models intrusion detection classification 
learning classification model 
classification rules 
classification rules intrusion detection models 
experiments sendmail data 
sendmail system call traces 
learning patterns normal abnormal sequences learning predict system calls 
discussion 
experiments tcpdump data 
tcpdump data 
data pre processing 
experiments results 
discussion 
summary 
chapter algorithms mining audit data challenges 
ii mining audit data 
basic algorithms 
extensions 
summary 
chapter managing utilizing mined patterns aggregating mined patterns 
experiments audit data gathering 
line analysis 
visualizing analyzing mined patterns 
representing mined patterns 
analysis patterns 
experiments dataset 
feature construction mined patterns 
pattern comparison 
feature construction 
theoretical underpinnings 
summary 
chapter putting experiments darpa intrusion detection evaluation experiments tcpdump data 
darpa data 
misuse detection 
user anomaly detection 
iii experiments bsm data 
defining session features 
misuse detection models bsm data 
summary 
chapter rapid deployment real time intrusion detection systems issues initial results automatic translation ripper rules real time nfr modules cient execution learned rules 
low cost necessary conditions 
real time rule filtering 
orthogonal approach constructing cost sensitive rules 
current status near term plans 
summary 
chapter summary 
thesis contributions 

closing remarks 
iv list figures data mining process building id models 
processing packet level network audit data connection records ects window sizes misclassification rates 
apriori association rules algorithm 
level wise approximate mining frequent episodes 
mining frequent patterns relative support 
number rules vs number audit data sets 
misclassification rates classifier trained weekdays misclassification rates classifier trained weekdays misclassification rates classifier trained weekdays misclassification rates classifier trained weekdays similarity measures merged rule set weekday mornings algorithm encoding 
ping scan 
syn flood 
port scan 
identifying unique patterns 
constructing features frequent episode 
ects window sizes number frequent episodes 
performance tcpdump misuse detection models roc curves detection rates false alarm rates 
performance bsm misuse detection models roc curves detection rates false alarm rates 
vi list tables pre labeled system call sequences length 
example ripper rules classifying system call sequences 
comparing detection anomalies 
column forrest percentage abnormal sequences traces 
columns percentages abnormal regions measured post processing scheme traces 
sendmail normal traces training data 
traces bold included training data traces testing data 
example ripper rules classifying system calls 
detecting anomalies predicted system calls 
columns averaged scores violations traces 
sendmail normal traces training data 
intrusion traces training 
vii misclassification rate normal intrusion data 
separate classifiers trained tested connection data tra type 
normal data set aside training data 
intrusion data training 
temporal statistical measures improve classification accuracy 
time interval seconds 
network connection records 
web log records 
encodings associations visualization 
encodings associations comparison 
intrinsic features network connection records 
tra features network connection records 
content features network connection records 
example tra connection records 
example ripper rules dos probing attacks 
example tcp connection records 
example ripper rules attacks 
model complexities 
comparing detection rates old new attacks 
shell command records 
user descriptions 
user anomaly description 
similarity user profile 
viii similarity group profiles 
example bsm event records 
features bsm event records 
features bsm session records 
example bsm session records 
example ripper rules bsm session records 
ix acknowledgments thesis possible help people 
advisor sal stolfo taught ective researcher 
sal patient helping develop thesis topic big progress 
gail kaiser admitting columbia providing wonderful guidance support years serving dissertation committee 
alex tuzhilin henning schulzrinne serving committee providing helpful suggestions 
nayar help encouragement ph study 
members project team mok chris park matt miller phil chan dave fan andreas prodromidis je shelley grace zhang great sources ideas fun 
making graduate student life productive enjoyable 
mentor making summer internship labs research wonderful experience sairamesh helping summer internship ibm watson research center 
am deeply debt love support family 
foremost thesis dedicated memory father 
great role model excellence scientific research love family 
spirit forever 
dedicate thesis mother encourages best ort realize dreams 
brother supportive caring having wonderful love support 
greatest source comfort encouragement thesis 
look forward great life ahead 
xi memory father mother xii chapter network computer systems play increasingly vital roles modern society targets enemies criminals 
need find best ways possible protect systems 
security computer system compromised intrusion takes place 
intrusion defined set actions attempt compromise integrity confidentiality availability resource intrusion prevention techniques user authentication passwords biometrics avoiding programming errors information protection encryption protect computer systems line defense 
intrusion prevention su cient systems complex exploitable weakness systems due design programming errors various socially engineered penetration techniques 
example reported years ago exploitable bu er overflow exists system softwares due programming errors 
policies balance convenience versus strict control system information access impossible operational system completely secure 
intrusion detection needed wall protect computer systems 
primary assumptions intrusion detection user program activities observable example system auditing mechanisms importantly normal intrusion activities distinct behavior 
intrusion detection includes essential elements resources protected target system example network services user accounts system kernels models characterize normal legitimate behavior activities involving resources techniques compare observed activities established models 
activities normal flagged intrusive 
researchers developed general categories intrusion detection techniques 
misuse detection known attacks weak spots system encoded patterns match evidence run time activities identify intrusions 
anomaly detection normal behavior user system activities summarized normal profiles run time activities result significant deviation flagged probable intrusions 
current intrusion detection systems idss included misuse anomaly detection components generally complex monolithic 
ectiveness accuracy essential requirement ids extensibility adaptability critical today network computing envi ronment 
multiple security weak links penetration points intrusions take place network system 
example network level carefully crafted malicious ip packets crash victim host host level vulnerabilities system software exploited yield illegal root shell 
activities di erent penetration points normally recorded di erent audit data sources ids needs extended incorporate additional modules specialize certain components hosts subnets network system 
large tra volume security related mailing lists web sites suggest new system security holes intrusion methods continuously discovered 
imperative idss adapted new attack methods frequently timely manner 
currently building ective ids enormous knowledge engineering task 
system builders rely intuition experience select statistical measures anomaly detection lunt experts analyze categorize attack scenarios system vulnerabilities hand code corresponding rules patterns misuse detection 
manual ad hoc nature development process current idss limited extensibility adaptability 
problem statement approach thesis research studies problem automatically systematically build adaptable extensible intrusion detection systems seek automatic approach eliminate manual ad hoc elements development process idss 
seek system approach set development tools readily applied di erent audit data sources 
evaluate utility development approach ectiveness resultant idss adaptability extensibility 
take data centric point view consider intrusion detection data analysis process 
anomaly detection identifying abnormal usage patterns audit data misuse detection encoding matching intrusion patterns audit data 
central theme approach apply data mining programs extensively gathered audit data compute models accurately capture actual behavior patterns intrusions normal activities 
automatic approach eliminates need manually analyze encode intrusion patterns guesswork selecting statistical measures normal usage profiles 
systematic approach set data mining tools applied appropriately preprocessed audit data 
importantly data mining tools applied multiple streams evidence detection module specializes specific type intrusion specific component mission critical host network system learn combined detection model considers available evidence 
resultant hierarchical combined detection models easily adaptable extensible 
developed framework madam id mining audit data automated models intrusion detection 
madam id consists classification meta classification chan stolfo programs association rules agrawal frequent episodes mannila programs feature construction system 
products concise intuitive rules detect intrusions easily inspected edited security experts needed 
madam id inductively learned classification rules replace manually encoded intrusion patterns 
system features detection models statistical measures normal profiles automatically constructed frequent patterns association rules frequent episodes computed audit data 
meta learning learn correlation intrusion evidence multiple detection models produce combined detection models 
thesis contributions thesis research contributes data mining intrusion detection fields 
association rules frequent episodes algorithms study incorporate domain knowledge basic association rules frequent episodes algorithms relevant patterns computed ciently 
utilize schema level information audit data various forms constraints mining frequent patterns 
axis attributes attributes essential describing discriminating data items 
argue relevant association rules describe patterns related essential attributes 
depending objective data mining task designate essential attribute axis attribute lee form item constraint association rule mining 
candidate generation item set contain value axis attribute 
axis attributes frequent episodes algorithm finds frequent associations axis attributes computes frequent sequential patterns associations 
associations attributes sequential patterns records combined single rule 
attributes essential attributes attributes 
attributes normally carry information subject attributes describe actions refer subject 
mining frequent subject patterns need filter unwanted subject patterns 
attribute lee frequent episodes algorithm ensure episode minimal occurrences records covered constituent item sets attribute value 
level wise approximate mining introduce iterative level wise approximate mining procedure uncover low frequency important sequential patterns lee idea episodes high frequency axis attribute value produced early round mining high minimum support requirement value considered old part episode rule rounds episode contains new axis attribute values 
scheme prevents generation explosive number episodes high frequency values keeping sequential context low frequency values 
mining relative frequency support introduce elaborate flexible procedure uses relative support uncover sequential patterns 
number records database number occurrences unique attribute value database calculating support value pattern 
procedure essentially computes top percent frequent patterns relative unique attribute value 
attribute di erent relative support 
techniques pattern visualization comparisons study problem presentation analysis comparison frequent patterns 
develop encoding scheme convert frequent pattern number easily visualize understand ciently compare patterns 
define similarity measure order importance attributes patterns structurally syntactically similar mapped closer numbers 
simple method calculate di erence patterns encodings 
develop procedure encode set patterns normal activities set patterns intrusive activities compute di erences output intrusion patterns 
techniques automatic feature construction patterns study problem automatically construct temporal statistical features frequent pattern 
develop algorithm parses frequent pattern uses count percent average operators occurrences attribute values generate features lee intrusion pattern algorithm capture anatomy invariant behavior attack produce predictive features build classification models 
techniques cient real time execution detection models study problem ciently execute line learned detection models real time environment 
seek speed linear order rule checking done line setting 
define time cost model features rules 
develop techniques search lowcost necessary conditions rules conditions filter real time majority features rules need computed lee results preliminary 
objective evaluation participated darpa intrusion detection evaluation program 
applied madam id vary large amount raw audit data produced automatically learned models 
objectively evaluated results showed intrusion detection models best performance compared participating systems knowledge engineered 
intrusion detection field showed madam id automate knowledge labor intensive steps building intrusion detection models demonstrated advantages great potentials 
data mining field showed data mining techniques extended developed useful important challenging traditionally knowledge engineering application area 
thesis outline rest thesis organized follows 
chapter examines detail challenges building intrusion detection system reviews representative research orts 
chapter gives brief overview data mining process discusses rationale applying data mining techniques intrusion detection reviews relevant algorithms 
chapter describes experiments building classification models sendmail network tra motivates need automatic feature construction 
chapter describes algorithms mining frequent patterns audit data emphasis basic association rules frequent episodes algorithms 
chapter discusses analyze compare frequent patterns automatically construct features patterns 
chapter describes experiments madam id build various detection models darpa data 
chapter describes approach automatically translating line learned models real time intrusion detection modules discusses solutions ciency problem report initial results experiments nfr real time network ids platform 
chapter summarizes thesis outlines ideas 
chapter intrusion detection known computer network systems design flaws lead security hazards bellovin morris large tra volume security related newsgroups mailing lists cert advisories bugtraq alt phrack suggest determined intruders exploit security flaws break computer systems expensive nearly impossible fix design programming errors 
considering fact prevention approaches completely relied intrusion detection needed line defense 
main benefits intrusion detection system include real time reporting break ins security sta take appropriate actions shut connections trace back identify intruders gather legal evidence intruders presenting traces intrusions security sta identify eliminate security flaws enabled intrusions 
intrusion detection assumes user program activities computer system intrusive legitimate monitored 
ects intrusion system monitored analyzed distinct legitimate operations 
intrusion detection systems example ides lunt utilize audit trails generated higher rated computer 
example bro paxson monitor network connections information flows 
di erent intrusion detection systems di erent sets features measures audit data di erent analytical models determine system activities intrusive 
intrusion detection approaches categorized anomaly detection misuse detection 
anomaly detection anomaly detection consists establishing normal behavior profiles users programs resources interest system observing actual activities reported audit data ultimately detect significant deviations profiles 
anomaly detection approaches statistical nature 
example sri ides lunt nides lunt user normal profile consists set statistical measures 
measures nides types lunt ordinal measure count numerically quantifiable aspect observed behavior 
example amount cpu time number audit records produced dod security classification requiring auditing unavailability encrypted passwords 
categorical measure function observed behavior finite set categories 
value determined frequency relative categories 
classified binary categorical measure category behavior 
type measure sensitive detecting infrequently categories changing password linear categorical measure score function counts number times category behavior occurs 
example command usage linear categorical measure categories span available command names system 
compute deviations profile ides nides weighted combining function sum abnormality values measures 
profiles updated periodically aged new observed user behavior account normal shifts user behavior example conference deadline approaches 
anomaly detection systems detect unknown intrusion require priori knowledge specific intrusions 
statistical approaches added advantage adaptive evolving user system behavior updating statistical measures relatively easy 
anomaly detection systems major shortcomings selection right set system usage features measured vary greatly di erent computing environments fine tuning deviation threshold ad hoc user behavior change dynamically inconsistent intrusions detected studying sequential interrelation events event appear normal statistical measures 
statistical system trained period time deliberate intruder gradually update user profile accept intrusive activities normal behavior 
misuse detection misuse detection consists recording representing specific patterns intrusions exploit known system vulnerabilities violate system security policies monitoring current activities patterns reporting matches 
approaches misuse detection 
di er representation matching algorithms employed detect intrusion patterns 
systems example nides lunt rule expert system component misuse detection 
systems encode known system vulnerabilities attack scenarios intuitions suspicious behavior rules 
example rule consecutive unsuccessful logins minutes penetration attempt 
audit data matched rule conditions determine activities constitute intrusions 
system stat ilgun uses state transition analysis misuse detection 
represents detects known penetration scenarios state transition diagrams 
intuition approach penetration essentially sequence actions leads target system initial normal state compromised state 
state state transition diagram list assertions terms system attributes user privileges 
transition labeled user action signature action example acquisition previously un held privileges 
intrusions detected stat final compromised state state transition diagram reached 
idiot kumar spa ord uses formal pattern classification matching approach misuse detection 
independent underlying computational framework matching characteristics intrusion patterns partitioned orthogonal categories linearity means specified sequence events occur unification instantiates variables earlier events matches events occurring events example variable file di erent audit records bound value file name unification occurrence specifies relative placement time event respect previous events example event occurs seconds event specifies absolute time pattern duration time duration event active 
colored petri nets pattern matching model 
intrusion signature represented petri net linearity represented sequence transitions unification introduced global variables occurrence duration introduced guard expressions petri nets kumar spa ord sequence transitions start state final state constitutes match intrusion signature 
key advantage misuse detection approaches accurately ciently detect known attacks coded rules patterns 
nature ective detecting unknown attacks matched rules patterns new attacks employ system level events manifested previously encoded exploits 
fact new attack techniques invented misuse intrusion systems may need updated frequently platforms 
constructing maintaining misuse detection system labor intensive attack scenarios system vulnerabilities need analyzed categorized corresponding rules patterns need carefully hand coded verified 
combining anomaly misuse detection anomaly detection misuse detection major shortcomings hamper ectiveness detecting certain types intrusions systems employ approaches 
example nides lunt anomaly detection module rule expert system misuse detection 
statistical rule components function parallel independently 
separate component resolver filter combine evidence detection modules determine final outcome 
studies reported jonsson suggest typical attack session split phases learning phase standard attack phase innovative attack phase 
learning phase inexperienced attacker learns target system limitations features vulnerabilities prepare phase 
experienced attacker directly goes standard attack phase try known vulnerabilities attack scripts available web 
known attack methods fail attacker forced enter innovative attack phase try discover exploit vulnerabilities may unknown system administrators target system 
expected probability successful attacks standard attack phase considerably high 
draw study designed updated misuse detection module detect majority attacks anomaly detection hope fight innovative stealthy attacks 
problems current intrusion detection systems measure quality ids ectiveness adaptability extensibility 
ids ective high intrusion detection true positive rate low false alarm false positive rate 
adaptable detect slight variations known intrusions quickly updated detect new intrusions soon invented 
extensible incorporate new detection modules customized changed network system configurations 
current idss lack ectiveness 
hand crafted rules patterns statistical measures selected system measures codified expert knowledge security system design particular intrusion detection approaches 
expert knowledge usually incomplete imprecise due complexities network systems 
current idss lack adaptability 
experts tend focus analyzing current known intrusion methods system vulnerabilities 
result idss may able detect unknown attacks 
developing incorporating new detection modules slow inherent learning curve 
current idss lack extensibility 
reuse customization ids new computing environment di cult expert rules statistical measures usually ad hoc environment specific 
current intrusion detection systems monolithic hard add new complementary detection modules existing ids 
research commercial idss started provide built mechanisms customization extension 
example bro paxson nfr network flight recorder filter network tra streams series events execute scripts bro policy scripts nfr codes contain site specific event handlers intrusion detection handling rules 
system administration personnel installation site assume roles security experts ids builders responsible writing correct event handling functions 
hand experience bro nfr show systems provide great flexibility writing scripts involves lot ort addition learning scripting languages 
example means debug scripts 
systems handle fixed set network tra event types 
occasions forced changes source code original ids handle new event types 
attribute large extent poor qualities current idss manual ad hoc purely knowledge engineering development process 
complexities network systems huge amount audit data generated user system activities need systematic automatic approach building idss 
approach need development approach meet requirements goals idss ective adaptable extensible 
developed systematic framework mining audit data automated intrusion detection models 
specifically designed developed widely available system madam id assist system administrators security select appropriate system features intrusion detection construct inductively learned classifiers detection models architect combined hierarchical detector system component detectors 
central theme apply developed data mining techniques discussed chapter intrusion detection 
madam id system features constructed frequent patterns computed audit data capture actual behavior forms statistical summaries normal activities intrusions 
intrusion detection models include constructed features ective distinguishing normal intrusion activities 
inductive learning algorithms aim produce generalizable models performance unseen data 
inductively learned detection models adaptive variations known intrusions 
madam id uses hierarchical architecture combining multiple detection models produce adaptable extensible idss 
component detection model specialized intrusions new intrusions specific network component 
component models combined meta detection model meta learning process inductively learns correlations predictions models detect intrusions 
adapting extending ids generally involves constructing new meta model new mix component models 
key advantage madam id data mining programs applied appropriately preprocessed audit data 
important point madam id completely eliminate knowledge engineering elements development process 
raw binary audit data needs processed ascii forms suitable data mining tasks 
data preprocessing steps normally require deep domain knowledge 
argue generic utilities developed network operating system experts available idss network system performance analysis systems lowest level building blocks 
madam id assumes building blocks available constructing idss 
security experts interact madam id drive iterative data mining feature construction process inspect edit inductively learned detection rules needed 
related intrusion detection forrest shown short sequences system calls sendmail consistent 
database short system call sequences normal runs sendmail simple ective anomaly detector 
findings motivated search simple accurate intrusion detectors 
chapter details classification experiments data set reported forrest demonstrate classifiers ective detecting anomalies 
strongly related reported teng inductive engine analyze audit data generate rule sequential patterns describe user behavior 
example rules indicates occur serial order chance follow 
described preliminary follow reports 
discuss chapter frequent episode algorithms discover comprehensive sequential record patterns 
addition consider intra audit record patterns part user program behavior 
spa ord porras neumann distributed scalable cooperative component architectures proposed 
advantages architecture monolithic system easily tailored specific computing environments system inte complementary detection systems components system deployed various layers network system di erent nodes network detect orchestrated attacks 
particular spa ord proposed autonomous agent system intrusion detection 
agent generic algorithms learn detect anomalous behavior system 
group agents responsible monitoring part network system works cooperatively protect network 
madam id supports construction distributed cooperative intrusion detection models meta learning programs produce combined detection model correlates predictions multiple distributed detection models 
chapter data mining industry sectors scientific research areas amount data collected growing explosive rate 
believed stored data retrieved analyzed 
reason easy cheap store data di cult expensive vast amount data 
manual approaches obviously impractical sheer volume data demand fast analysis results new tools techniques emerging intelligently assist humans discovering useful knowledge database 
techniques tools subject growing field knowledge discovery databases kdd fayyad kdd defined nontrivial process identifying valid novel potentially useful ultimately understandable patterns data fayyad data mining particular step process specific algorithms applied extract patterns data fayyad kdd process kdd process involves number steps interactive iterative user driven fayyad getting know application domain trying understand data discovery task 
data preparation includes creating target dataset removing noise data identifying subset variables 
data mining includes deciding model example summarization classification clustering derived data applying appropriate algorithm generate classification rules trees association frequent sequential patterns interpretation involves trying understand discovered patterns returning previous steps restart process di erent settings removing redundant trivial patterns presenting useful patterns users 
discovered knowledge includes incorporating knowledge production system simply reporting interested parties 
data mining critical step kdd process 
lot ort devoted research development general accurate fast data mining algorithms 
data mining algorithms wide variety data mining algorithms drawn fields statistics pattern recognition machine learning databases 
types algorithms particularly relevant intrusion detection classification classifies data item pre defined categories 
algorithms normally output classifiers example form decision trees rules 
ideal application intrusion detection gather su cient normal abnormal audit data user program apply classification algorithm learn classifier label predict new unseen audit data belonging normal class abnormal class link analysis determines relations fields database records 
correlations system features audit data example correlation command argument shell command history data user serve basis constructing normal usage profiles 
programmer example may emacs highly associated files sequence analysis models sequential patterns 
algorithms discover time sequences audit events frequently occurring 
frequent event patterns provide guidelines incorporating temporal statistical measures intrusion detection models 
example patterns audit data containing network denial service dos attacks suggest host service measures included see chapter 
data mining process building id models chapter provides details formulate classification tasks intrusion detection 
chapter discusses association rules algorithm frequent episodes algorithm applied audit data 
data mining process building intrusion detection models rapid development kdd gained better understanding techniques process frameworks support systematic data analysis vast amount audit data available 
process data mining approaches build intrusion detection models shown 
raw binary audit data processed ascii network packet information host event data turn summarized connection records host session records containing number connection features service duration flag indicating normal error status protocols data mining programs applied connection records compute frequent patterns association rules frequent episodes turn analyzed construct additional features connection records 
classification programs example ripper cohen inductively learn detection models 
process course iterative 
example poor performance classification models indicates pattern mining feature construction needed 
research orts mainly extending basic association rules frequent episodes algorithms relevant patterns computed ciently automatically constructing features mined patterns cient real time execution detection models 
related data mining applications data mining kdd techniques successfully applied business scientific domains brachman fayyad including closely related intrusion detection 
cellular fraud detection similar intrusion detection unusual behavior distinguished typical behavior 
historically manual ad hoc approaches decide aspects features customers behavior profiled construct fraud detectors 
fawcett provost innovative framework utilizing data mining techniques proposed automate fraud detector construction process 
data mining program discover general patterns rule sets fraudulent usage large database cellular calls 
patterns profile individual customer normal usage account day basis 
profiles statistical measures customer behavior regard patterns 
determine usage behavior suggest fraud 
learned detector combines evidence multiple profiles generates fraud alarms 
shown prototype system performs nearly state theart hand tuned system 
surprising features considered reliable indicators experts turned contribute little detecting fraud test data 
team columbia university headed professor sal stolfo developing jam agent distributed data mining framework applying problem credit card fraud detection stolfo main research ort meta learning combine multiple base classifiers separately learned distributed databases 
shown resulting meta classifier improve prediction accuracy single base classifier stolfo research directions include techniques combining classifiers learned databases di erent schema various methods boost accuracy meta classifier 
jam project directly contributes madam id particularly mechanisms combining multiple detection classifiers 
telecommunication alarm sequence analyzer tasa novel system alarm management telecommunication networks 
utilizes data mining algorithms locate frequently occurring alarm episodes alarm occur seconds alarm occur seconds alarm stream rules integrated alarm handling software telephone networks 
implemented specialized version frequent episode algorithm tasa uncover frequent inter audit record patterns 
chapter classification models intrusion detection chapter give brief overview classification problem explain rationale classification rules intrusion detection 
describe detail experiments constructing classification rules anomaly detection 
experiments reported lee stolfo motivated research developing madam id set experiments sendmail system call data second network tcpdump data 
demonstrate ectiveness classification models anomaly detection discuss di culties building models 
classification applications pattern recognition need classify data items discrete set possible categories 
classification tasks typically require construction classifier function assigns class label data item described set attributes 
formally vector attributes 
attribute types discrete numerical 
set class labels 
denote universe possible data items problem domain 
write data item vector 
value data item belongs category assigned class label 
function valid value function model normally unknown subject inductive learning 
learning classification model set pre labeled training items vector 
known class label goal inductive learning process construct approximation want classifications learned classifier agree true class labels possible 
desirable generalization ability ability predictions observed training data 
accuracy learned model refined separate measurements training accuracy data trained generalization accuracy unseen data 
set set aside testing items class distribution estimate generalization accuracy learned model 
model higher generalization accuracy normally preferred 
machine learning approaches computing classification models example decision tree learning quinlan rule induction clark niblett cohen neural networks rumelhart bayesian learning cheeseman stutz approach uses di erent model representation decision tree set rules di erent search strategy heuristic traversing space possible models 
search heuristic information gain important widely search heuristic learning classification model 
order understand information gain precisely explain measure information theory entropy characterizes impurity collection data items 
dataset data item belongs class entropy relative wise classification defined mitchell entropy log proportion belonging class interpretation entropy specifies number bits required encode transmit classification data item 
entropy value smaller class distribution data pure 
example data items belong class entropy bit needs transmitted receiver knows outcome 
entropy value larger class distribution data impure 
example data items evenly distributed classes log bits required encode classification 
classification model essentially function defined attributes dataset 
information gain measure utility attribute classifying data items 
mitchell mitchell gives definition information gain gain entropy values entropy values set values attribute subset value second term equation expected entropy value partitioned gain expected entropy reduction attribute number bits saved encoding classification data item goal constructing classification model selectively applying sequence attribute tests dataset partitioned pure subsets target class 
attribute largest information gain considered useful classifying examples 
notice larger gain smaller value second term equation indicates partitioned attribute class wise purer subsets 
example id quinlan constructs decision tree node tree specifies test attribute branch node corresponds values 
leaves classifications 
id algorithm grows tree root selecting remaining attributes regard path attribute tests root current node highest information gain test current node 
inductive bias large number consistent models computed training data set machine learning algorithms employ sort inductive bias preference model addition mere accuracy 
algorithms various implementations bias models accuracy simpler preferred 
example id prefers shorter trees longer trees 
bias origin ancient philosopher william occam famous razor mitchell prefer simplest hypothesis fits data 
pointed occam razor bias applied comparing models generalization accuracy training accuracy domingos classification rules applications desirable learn set propositional rules jointly define target function 
rule sets relatively easy humans understand easily incorporated existing general rule execution engines 
solution learn model decision tree translate model equivalent set rules rule leaf node tree 
better solution directly apply rule learning algorithm 
rule learners outperform decision tree learners algorithms problems easily incorporate certain types prior knowledge learning process cohen ripper cohen rule learning algorithm study 
ripper rule consists conjunction conditions attribute value tests consequence class label 
condition form discrete attribute legal value numerical attribute value data item covered rule attribute values satisfy conditions rule 
rule target class consequence data items belong class called positive examples classes called negative examples 
ripper rule learned phases growing phase pruning phase 
training data set partitioned growing set pruning set phases 
rule grown empty conjunction repeatedly adding condition maximizes foil information gain criterion quinlan rule covers negative data items growing data set 
foil information gain measured number positive negative examples covered adding condition rule 
interpreted reduction total number bits required encode classification positive examples covered rule mitchell growing phase rule immediately pruned simplified repeatedly deleting condition conjunction conditions lead accurate rule pruning data set 
pruning stage means improve generalization accuracy simplicity rule 
ripper handle multiple classes 
training data set classes 
algorithm orders classes increasing order prevalence 
ordered 
prevalent class prevalent 
ripper learns rule set separates rest classes removes data items covered learned rules learns rule set separates 
process continues single class called default class 
classification rules intrusion detection models madam id produces classification rules ripper rules intrusion detection models 
learned rules standard format minimum processing rule idss manner hand coded rules 
ripper rules concise intuitive inspected edited security experts needed 
checked sanity employed actual systems 
ripper rules desirable properties intrusion detection generalization accuracy concise simplified conditions 
new intrusions forms slight variations known intrusions completely new breed attacks intrusion detection models built 
ability detect new intrusions generalization accuracy rules unseen data critical ids 
real time idss require simple models sake ciency 
rule execution entails computing testing attribute values rule condition checking 
having concise conditions contributes real time performance idss 
alternative models 
thesis study test feasibility ectiveness alternative learning techniques hidden markov models hmms neural networks construct intrusion detection models 
believe stage research essential task develop automatic approach formulating machine learning tasks constructing dataset unstructured raw audit data stream 
regardless specific machine learning algorithm need supply data items bear learnable characteristics expressed set meaningful attributes 
machine learning terms need deal feature construction problem 
sensible model classification rules su ces evaluate concepts algorithms madam id attribute usually referred feature learned model 
feature construction problem arises unstructured data data item expressed vector attribute values attributes defined 
desirable construct additional features basic set features place 
example new feature computes aggregate function existing features may useful predicting certain class 
discussions sections know machine learning algorithms search attribute feature value tests information gain measures attribute separates data items di erent classes 
goal feature construction add features large information gains 
added features selected learning algorithms resulted classification models accurate 
system audit data available raw unstructured data 
data preprocessing needed intrusion detection analysis take place 
context madam id regard audit data preprocessing transformation function raw dataset machine learning dataset attribute value vector 

essentially defines set attributes poor result attributes low information gains attribute value occurs evenly data items di erent classes 
extreme cases 
data items share attribute values di erent classes regarded noise 
extremely di cult learn accurate model noisy data 
goal provide tools improve semi automate accurate models learned short research deals important urgent feature selection construction problems 
plan evaluate ectiveness ciency alternative machine learning models 
experiments described rest chapter demonstrate ectiveness classification models illustrate importance feature construction 
experiments sendmail data lot attacks computer systems carried design programming errors privileged programs run root 
example flaw finger daemon allows attacker bu er overflow trick program execute malicious code 
research orts ko ko forrest forrest attempted build intrusion detection systems monitor execution privileged programs detect attacks vulnerabilities 
ko program policy specification language codify access rights privileged programs 
studies showed program policies detect known 
approach taken forrest originated research computer immune systems 
discovered short sequences system calls program normal executions consistent 
importantly sequences di erent sequences abnormal exploited executions executions programs 
database containing normal sequences self definition normal behavior program basis detect anomalies 
stephanie forrest provided set traces sendmail program experiments forrest conducted sets experiments 
sequences consecutive system calls extracted sendmail traces supplied machine learning algorithm learn patterns normal abnormal sequences 
patterns examine new trace determine contains su cient abnormal sequences identified intrusion anomaly 
second set experiments goal machine learning tasks generate rules predict nth system call preceding system calls middle system call sequence system calls 
rules normal sendmail system calls analyze new trace detect violations system calls appearing place 
large number violations suggest intrusion 
section detail methods results experiments 
sendmail system call traces procedure generating sendmail traces detailed forrest briefly file trace data columns integers process ids second system call numbers 
numbers indices lookup table system call names 
example number represents system call open 
set traces include normal traces trace sendmail daemon concatenation invocations sendmail program abnormal traces traces sscp attacks traces syslog remote attacks traces syslog local attacks traces decode attacks trace sm attack trace sm attack 
traces various kinds abnormal runs sendmail program 
learning patterns normal abnormal sequences order machine learning program learn patterns normal abnormal sequences system calls need supply set training data containing pre labeled normal abnormal sequences 
sliding window scan normal traces create list unique sequences system calls 
call list normal list 
scan intrusion traces 
sequence system calls look normal list 
exact match sequence labeled normal 
labeled abnormal note exhaustive data gathering process described forrest ensured normal traces include nearly possible normal short sequences system calls new runs sendmail failed generate new sequences 
needless say sequences normal traces labeled normal 
see table example labeled sequences 
noted intrusion trace contains normal sequences addition abnormal sequences illegal activities occur places trace 
system call sequences length class labels normal 
abnormal 
table pre labeled system call sequences length machine learning tasks applied ripper training data 
learning tasks formulated induce rule sets normal abnormal system call sequences record positional attributes 
system calls sequence length plus class label normal abnormal training data composed normal sequences taken normal traces plus abnormal sequences traces sscp attacks trace syslog local attack trace syslog remote attack testing data includes normal abnormal traces training data 
ripper outputs set rules minority classes default true rule remaining class 
table shows exemplar ripper rules generated system call sequence data 
ripper rule meaning normal 
sequence normal 
normal 
sequence normal 
abnormal true 
sequence abnormal 
table example ripper rules classifying system call sequences ripper rules predict sequence abnormal normal 
intrusion detection system needs know trace analyzed intrusion 
say predicted abnormal sequence trace intrusion 
depends accuracy rules classifying sequence abnormal 
close predicted abnormal sequence part intrusion trace just error ripper rules 
post processing intrusion detection post processing scheme detect trace intrusion ripper predictions constituent sequences 
sliding window length sliding shift step scan predictions ripper rules system call sequences 
note input parameter 

length regions ripper predictions generated step predictions abnormal current region predictions abnormal region 

percentage abnormal regions threshold value say trace intrusion 
scheme attempt filter spurious prediction errors 
intuition intrusion occurs majority adjacent system call sequences abnormal prediction errors tend isolated sparse 
forrest percentage mismatched sequences total number matches lookups performed trace distinguish normal abnormal 
mismatched sequences abnormal sequences context 
scheme di erent look abnormal regions contain abnormal sequences normal ones calculate percentage abnormal regions total number regions 
scheme sensitive temporal information sensitive noise classification errors 
results analysis recall ripper outputs rules minority class 
example experiments training data fewer abnormal sequences normal ones output ripper rules identify abnormal sequences default case prediction normal 
conjectured set specific rules normal sequences identity program detect known unknown intrusions 
rules anomaly detection 
having rules abnormal sequences gives capability identify known intrusions 
misuse detection 
compare results experiments di erent distributions abnormal versus normal sequences training data 
experiment normal abnormal 
sequence length 

experiment normal abnormal 
sequence length 
experiment abnormal normal 
sequence length 

experiment abnormal normal 
sequence length 
table shows results classifiers experiments analyze traces 
report percentages abnormal regions measured post processing scheme trace compare results forrest reported forrest table see general intrusion traces generate larger percentages abnormal regions normal traces 
call measured percentages scores abnormal sequences abnormal regions traces forrest exp exp exp exp sscp sscp sscp syslog syslog syslog syslog decode decode sm sm sendmail table comparing detection anomalies 
column forrest percentage abnormal sequences traces 
columns percentages abnormal regions measured post processing scheme traces 
sendmail normal traces training data 
traces bold included training data traces testing data 
traces 
order establish threshold score identifying intrusion traces desirable su ciently large gap scores normal sendmail traces low scores intrusion traces 
comparing experiments sequence length observe gap larger gap larger ripper rules experiments describe patterns normal sequences 
results show rules identify intrusion traces including seen training data decode traces sm sm traces 
confirms conjecture rules normal patterns anomaly detection 
ripper rules experiments specify patterns abnormal sequences intrusion traces included training data 
results indicate rules capable detecting intrusion traces known types seen training data sscp trace syslog remote trace syslog local trace 
compared rules rules perform ectively intrusion traces unknown types 
confirms conjecture rules abnormal patterns misuse intrusion detection may ective detecting unknown intrusions 
results forrest showed method required low threshold order correctly detect decode sm intrusions 
results show approach generated stronger signals anomalies intrusion traces noted method normal traces intrusion traces training 
learning predict system calls set experiments required abnormal traces training data second set experiments wanted study compute anomaly detector just normal traces 
conducted experiments learn normal correlation system calls nth system calls middle system calls normal sequences length learning tasks formulated follows record positional attributes 
system call plus class label system call nth position middle position training data composed normal sequences taken normal sendmail traces testing data traces included training data remaining normal sendmail traces intrusion traces 
table shows exemplar ripper rules predicting system calls 
ripper rule meaning 
lstat write th system call stat 

bind th system call 
true 
th system calls open 
table example ripper rules classifying system calls ripper rules confidence information number matched examples records conform rule number unmatched examples records conflict rule training data 
example rule stat covers matched examples unmatched examples 
measure confidence value rule number matched examples divided sum matched unmatched examples 
rules analyze trace examining sequence trace 
violation occurs actual system call predicted rule score trace incremented times confidence violated rule 
example sequence trace total score trace incremented confidence value violated rule 
averaged score total number sequences trace decide intrusion occurred 
averaged score violations traces exp exp exp exp sscp sscp sscp syslog syslog syslog syslog decode decode sm sm sendmail table detecting anomalies predicted system calls 
columns averaged scores violations traces 
sendmail normal traces training data 
intrusion traces training 
table shows results experiments 
experiment predict th system call 

experiment predict middle system call sequence length 
experiment predict middle system call sequence length 

experiment predict th system call 
see table ripper rules experiments ective gap score normal sendmail scores intrusion traces respectively large 
rules perform poorly 
predicts middle system call sequence length predicts th system call reason training data normal traces stable patterns th th position system call sequences 
discussion experiments showed normal behavior program execution established detect anomalous usage 
confirms results related anomaly detection 
weakness model forrest may recorded rote learned normal sequence database may specific contains entries 
show machine learning program ripper able generalize system call sequence information normal sequences set concise accurate rules 
rule sets experiments rules rule attribute tests 
demonstrated rules able identify previously unseen intrusion traces normal traces 
need search predictive classification model anomaly detector higher confidence flagging intrusions 
improvement accuracy come adding features just system calls models program execution 
example directories names files touched program 
frank reported number features increases classification error rate network intrusion detection system decreases dramatically 
furthermore error rate stabilizes size feature set reaches optimal size experiments 
operating systems provide auditing utilities bsm audit solaris configured collect abundant information features activities host system 
audit trails information program user extracted 
challenge ciently compute accurate patterns audit data programs users 
key assumption learning algorithm anomaly detection degree misuse detection training data nearly complete regard possible normal behavior program user 
learned detection model confidently classify label unmatched data abnormal just unseen normal data 
example experiments section normal system call sequences experiments section required normal sequences order pre label abnormal sequences create training data 
audit data gathering process want ensure di erent normal behavior possible captured 
need simple incremental summary measure audit trail update measure new audit trail processed audit process measure stabilizes 
chapter propose frequent intra inter audit record patterns summary measure audit trail describe algorithms compute patterns 
experiments tcpdump data approaches network intrusion detection analyze audit data host network correlate evidence hosts 
monitor network tra directly packet capturing pro gram tcpdump jacobson section describe classifiers induced tcpdump data distinguish network attacks normal tra tcpdump data obtained set tcpdump data available iris cs uml edu network html part information exploration see iris cs uml edu 
tcpdump executed gateway connects enterprise lan external networks 
captured headers user data network packets passed network interface gateway 
network tra enterprise lan external networks broadcast packets lan collected 
purposes filters tcpdump collected internet transmission control protocol tcp internet user datagram protocol udp packets 
data set consists runs tcpdump generated network intrusions tcpdump run normal network tra intrusions 
output tcpdump run separate file 
tra volume number network connections runs 
experiments focused building anomaly detection model normal dataset 
tcpdump output intended specifically security purposes go multiple iterations data pre processing extract meaningful features measures 
studied tcp ip security related problems example stevens paxson atkins paxson bellovin porras valdes guidelines protocols important features characterize connection 
data pre processing goal build model predict network connection normal intrusion 
tcpdump output contains packet data network connections order packet appearances network 
packet data needs preprocessed order gather connection level information 
depicts data preprocessing process 
binary tcpdump data converted ascii packet level data line contains information network packet 
data ordered timestamps packets 
packets belonging di erent connections may interleaved 
example packets shown di erent connections 
packet data processed connection records number features attributes time starting time connection timestamp packet dur duration connection src dst source destination hosts bytes number data bytes source destination srv service port destination flag connection conforms network protocols sf normal rej rejected intrinsic features essentially summarize packet level information connection 
developed script scan tcpdump ascii packet data file extract connection level information form connection records 
tcp connection script processes packets ports participating hosts checks way handshake properly followed establish processing packet level network audit data connection records connection 
errors recorded connection rejected connection attempted established initiating host receives syn acknowledgment unwanted syn acknowledgment received connection request syn packet sent monitors data packet ack packet keeps number counters order calculate statistics connection resent rate wrong resent rate duplicate ack rate hole rate wrong data packet size rate total number data bytes sent direction percentage data packets percentage control packets watches connection terminated normal sides properly send receive fins abort host sends rst terminate data packets properly acked half closed host sends fin disconnected 
udp connectionless connection state simply treat packet connection 
connection record preparation machine learning attributes features start time duration participating hosts ports statistics connection bytes sent direction resent rate flag normal recorded connection termination errors protocol type tcp udp 
ports know connection known service port user application 
call host initiates connection sends syn source destination 
depending direction source destination connection types going lan external networks coming external networks lan inter lan lan 
topology network consideration important network intrusion detection 
intuitively intrusions come outside may exhibit abnormal patterns penetration attempts coming connections subsequently inter lan doing damage lan going stealing uploading data connections 
analyzing types connections constructing corresponding detection models separately may improve detection accuracy 
experiments results type direction connections formulated classification experiments connection record uses destination service destination port class label connection features attributes training data connections normal tcpdump data file test data includes remaining normal tcpdump data file connections tcpdump data files marked having embedded attacks fold cross validation evaluation reported 
process training testing repeated times time di erent normal data training data accordingly di erent remaining normal data part test data 
averaged accuracy classifiers runs reported 
applied ripper connection data 
resulting classifier characterizes normal patterns service terms connection features 
classifier testing data percentage misclassifications tcpdump data set reported 
misclassification situation classifier predicts destination service connection features di erent actual 
misclassification rate low normal connection data high intrusion data 
intuition classification model straightforward intrusions take place features misclassification tra type connection data going coming inter lan normal intrusion intrusion intrusion table misclassification rate normal intrusion data 
separate classifiers trained tested connection data tra type 
normal data set aside training data 
intrusion data training 
characteristics connections certain services example ftp di erent normal tra patterns service 
results round experiments shown table di erences misclassification rates normal intrusion data small inter lan tra intrusions 
redesigned set features adding continuous intensity measures connection record examining connections past seconds counting number connection establishment errors connection rejected types errors disconnected connections designated system services ftp connections user applications connections service current connection calculate past seconds connection average duration data bytes directions connections averages connections service 
temporal statistical features provide additional information network activity continuous perspective provide insight misclassification tra type connection data going coming inter lan normal intrusion intrusion intrusion table temporal statistical measures improve classification accuracy 
time interval seconds 
misclassification rate window size normal intrusion intrusion intrusion ects window sizes misclassification rates anomalies 
example low rate error due innocent attempts network glitches short time span expected excess averaged norm indicates anomalous activity 
table shows improvement adding features 
time interval seconds see misclassification rates intrusion data higher normal data especially coming tra ripper rule set classifier just rules conditions 
example rule says average number bytes source destination connections service percentage control packets current connection service auth 
understand ects time intervals misclassification rates ran experiments various time intervals 
ects going inter lan tra small 
shows coming tra misclassification rates intrusion data increase dramatically time interval goes stabilizes tapers 
discussion learned important lessons experiments tcpdump data 
collected data designed specifically security purposes directly build detection model considerable amount iterative data pre processing required 
process requires lot domain knowledge may easily automated 
second general adding temporal statistical features improve accuracy classification model network tra needed improvements current approach deciding right set features di cult time consuming 
example trials attempted came current set features time intervals 
need useful tools provide insight behavior patterns may exhibited data 
second provide tools help administrative sta understand nature anomalies 
need tools compare anomalous tra normal historical tra terms easy understand patterns 
summary chapter briefly reviewed problem building classification models discussed rationale classification rules intrusion detection models 
experiments sendmail tcpdump data demonstrated ectiveness classification models intrusion detection 
showed classification rules accurate concise intuitive 
order construct accurate classifier need gather su cient amount training data identify set meaningful features 
tasks require insight data di cult proper tools guidelines 
chapter propose algorithms address needs 
chapter algorithms mining audit data chapter give depth analysis requirements building ective classification rules intrusion detection automatic tools needed guide audit data gathering feature construction 
argue frequent patterns association rules frequent episodes audit records serve purposes 
give overview basic association rules frequent episodes algorithms 
order ciently compute relevant useful patterns large amount audit data need utilize domain knowledge data mining process 
describe extensions algorithms mechanisms incorporating characteristics audit records 
challenges chapter described detail experiments building classification models detect intrusions sendmail tcp ip networks 
results sendmail system call data showed needed exhaustively gathered normal data learn ripper classifications rules clearly identify normal sendmail executions intrusions 
results tcpdump network tra data showed temporal nature network activities added temporal statistical features classification model significant improvement identifying intrusions 
experiments revealed need solve challenging problems order classification models ective 
formulating classification tasks determining class labels set features audit data di cult time consuming task 
security usually thought computer system design standard auditing mechanisms data format specifically intrusion analysis purposes 
considerable amount data pre processing involves domain knowledge required extract raw action level audit data higher level session event records set intrinsic system features 
temporal nature event sequences network computer systems suggests temporal statistical measures features average duration connections past seconds need considered additional features 
traditional feature selection techniques discussed machine learning literature directly applied don consider record boundary sequential correlation features 
fawcett provost fawcett provost interesting ideas automatic selection features cellular phone fraud detector 
important assumption general patterns fraudulent usage entire customer population individual customers di er threshold patterns 
assumptions hold di erent intrusions di erent targets computer system normally produce di erent evidence di erent audit data sources 
critical requirement classification rules anomaly detector need su cient training data covers variation normal behavior possible false positive rate kept low wish minimize detected abnormal normal behavior 
possible formulate classification model learn anomaly detector insu cient training data incrementally update classifier line learning algorithms 
limited training data may covered class labels line algorithms example iti deal new data new unseen class labels 
example modeling daily network tra services telnet connections class labels training models 
may connection records infrequently services say week tra data 
formal audit data gathering process needs take place 
collect audit data need indicator tell new audit data exhibits new normal behavior process variation 
indicator simple compute incrementally updated 
mining audit data attempt develop general intrusion specific tools response challenges discussed previous section 
idea compute association rules frequent episodes audit data capture intra inter audit record patterns 
frequent patterns regarded statistical summaries system activities captured audit data measure correlations system features sequential temporal occurrences events 
patterns utilized user participation guide audit data gathering feature selection processes 
section provide overview basic association rules frequent episodes algorithms describe detail consider characteristics audit data 
basic algorithms agrawal set attributes set values called items 
subset called itemset 
number items itemset called length 
database attributes columns 
define support percentage transactions records contain itemset association rule expression confidence support itemsets 
support support rule support support confidence rule 
example association rule shell command history file stream commands arguments user trn rec humor indicates time user invokes trn reading news rec humor reading newsgroup accounts activities recorded command history file 
implemented association rules algorithm main ideas apriori agrawal srikant scan database form frequent itemsets length itemsets association generation pair items candidate itemset items items item item length subset remove prune step add scan count support support minimum support forall rule generation forall subset am conf support support conf minimum confidence output rule am am confidence conf support support apriori association rules algorithm briefly call itemset frequent itemset support minimum support 
observe subset frequent itemset frequent itemset 
algorithm starts finding frequent itemsets length iteratively computes frequent itemsets length length process terminates new frequent itemsets generated 
proceeds compute rules satisfy minimum confidence requirement 
apriori algorithm outlined 
look correlation values di erent attributes pre processed audit data usually multiple attributes large number possible values convert data binary database suggested agrawal srikant implementation trade memory speed 
data structure frequent itemset row bit vector records transactions itemset contained 
database scanned generate list frequent itemsets length 
length candidate itemset generated joining length frequent itemsets row vector simply bitwise product row vectors support calculated easily counting row vector scanning database 
need perform prune step candidate generation function 
row vectors length itemsets freed save memory generate length itemsets 
pre processed audit data files small implementation works application domain 
problem finding frequent episodes minimal occurrences introduced mannila toivonen briefly event database transaction associated timestamp interval sequence transactions starts timestamp ends width interval defined itemset interval minimal occurrence contains proper sub intervals contains define support ratio number minimum occurrences contain itemset number records frequent episode rule expression confidence support window itemsets support support rule support support confidence 
width occurrences window 
serial episode rule additional constraint occur transactions partial time order follows follows description di ers mannila toivonen don consider separate window constraint lhs left hand side rule 
frequent episode algorithm finds patterns single sequence event stream data 
problem finding frequent sequential patterns appear di erent data sequences introduced agrawal srikant related algorithm study frequent network system activity patterns single audit data stream network operating system 
implementation frequent episodes algorithm utilized data structures library functions association rules algorithm 
subset frequent itemset frequent itemset interval contains itemset contains subsets 
start finding frequent episodes length length finding correlations attributes looking correlations records 
row vector interval vector pair adjacent pair boundaries interval 
temporal join function considers minimal non overlapping occurrences create interval vector candidate length itemset interval vectors length frequent itemsets 
extensions basic algorithms consider domain knowledge result generate irrelevant uninteresting rules 
klemettinen rule templates specifying allowable attribute values post process discovered rules 
srikant boolean expressions attribute values item constraints rule discovery 
padmanabhan tuzhilin belief driven framework discover unexpected interesting patterns 
drawback approaches know rules patterns interesting belief system 
assume strong prior knowledge audit data 
interestingness measures attributes utilize schema level information audit records direct pattern mining process 
know advance patterns involve actual attribute values interesting know attributes important useful data analysis task 
minimum support confidence values output statistically significant patterns basic algorithms implicitly measure interestingness relevancy patterns support confidence values regard available prior domain knowledge 
assume interest timestamp service src host dst host src bytes dst bytes flag 
telnet sf 
ftp sf 
smtp sf 
telnet sf 
smtp sf 
rej 
table network connection records measure pattern support confidence ranking function 
propose incorporate schema level information interestingness measures 
assume measure pattern contains specified important interesting attributes extended interestingness measure support confidence ranking function considers attributes pattern support confidence values 
sections describe schema level characteristics audit data forms attributes considered guide mining relevant features 
measures postprocessing filter irrelevant rules rank ordering 
ciency item constraints conditions candidate itemset generation 
axis attribute partial order importance attributes audit record 
attributes essential describing data provide auxiliary information 
consider audit data network connections shown table 
record row describes network connection 
continuous attribute values timestamps discretized proper bins 
network connection uniquely identified combination start time source host source port destination host service destination port 
essential attributes describing network data 
argue relevant association rules describe patterns related essential attributes 
patterns include attributes normally irrelevant 
example basic association rules algorithm may generate rules src bytes lag sf rules useful degree misleading 
intuition association number bytes source src bytes normal status flag sf connection 
call essential attribute axis attribute form item constraint association rules algorithm 
candidate generation item set contain value axis attribute 
consider correlations non axis attributes interesting 
words contains axis attribute practice need designate essential attributes axis attributes 
example network analysis tasks require statistics various network services may require patterns related hosts 
service axis attribute compute association rules describe patterns related services connections 
important axis attribute constrain item generation frequent episodes 
basic algorithm generate serial episode rules contain unimportant attribute values 
example src bytes src bytes dst bytes src bytes note attribute value src bytes di erent connection record 
matter worse support association rule non axis attributes high large number useless serial episode rules form due theorem theorem support association total number episode rules rules form exponential factor proof frequent episodes algorithm subset frequent itemset frequent 
example frequent episode iteration pattern generation itemset grown constructed subsets 
number iterations growing frequent itemsets maximum length itemset bounded number records number attributes association rules usually large number 
iteration count number episode patterns 
length itemsets generated current iteration 
total number episodes assume total records database time di erence record seconds 
records contain transaction 
number minimal non overlapping intervals records notice intervals contains length episodes 
exponential factor show monotonically increases bounded assume records database evenly distributed regard time records iteration width interval large kt sm width requirement hold maximum value min easy see records evenly distributed factor kt sm monotonically increases avoid having huge amount useless episode rules extended basic frequent episodes algorithm compute frequent sequential patterns phases finds frequent associations axis attribute second generates frequent serial patterns associations 
second phase items episode itemsets constructed associations axis attribute axis attribute values length associations 
example rule service smtp src bytes dst bytes flag sf service telnet flag sf service src bytes note itemset episode rule service smtp src bytes dst bytes flag sf timestamp remote host action request 
moc kw get images 
moc kw get images 
moc kw get shuttle missions sts 
ac jp get images 
ac jp get images 
ac jp get shuttle missions sts 
hip cam org get images 
hip cam org get images 
hip cam org get shuttle missions sts 
table web log records association 
ect combined associations attributes sequential patterns records single rule 
rule formalism eliminates irrelevant patterns provides rich useful information audit data 
attribute interesting characteristic system audit data attributes attributes 
attributes normally carry information subject attributes describe actions refer subject 
consider log visits web site shown table 
action request actions taken subject remote host 
see number remote hosts sequence requests images images shuttle missions sts 
important subject finding frequent sequential action patterns actions di erent subjects normally irrelevant 
kind sequential patterns represented subject action subject action subject action confidence support window note occurrence pattern action values refer subject actual subject value may rule particular subject value may frequent regard entire dataset 
words subject simply variable 
basic frequent episodes algorithm extended consider attribute 
briefly forming episode additional condition minimal occurrences records covered constituent itemsets value attribute 
words itemsets refer attribute value level wise approximate mining necessary include low frequency patterns 
daily network tra services example gopher account low occurrences 
need include patterns network tra profile representative patterns supported service 
low support value data mining algorithms get unnecessarily large number patterns related high frequency services example smtp 
level wise approximate mining procedure described finding frequent sequential patterns audit data 
idea input database terminating minimum support initial minimum support axis attribute output frequent episode rules rules restricted scan database form frequent itemsets meet compute episodes episode contain axis attribute value restricted append new axis attribute values restricted append episode rules output rule set rules smaller support value iteration level wise approximate mining frequent episodes find episodes related high frequency axis attribute values example service smtp src bytes service smtp src bytes service smtp dst bytes iteratively lower support threshold find episodes related low frequency axis values restricting participation old axis values output episodes 
specifically episode generated contain new low frequency axis value 
example second iteration smtp old axis value get episode rule service smtp src bytes service src bytes service smtp src bytes procedure terminates low support value reached 
practice lowest frequency axis values 
note high frequency axis value ect omit low frequency episodes generated runs low support values interesting representative 
words iteration contains new axis attribute value procedure approximate mining 
include old high frequency axis values form episodes new axis values important capture sequential context new axis values 
example infrequently auth normally occurs services smtp login 
imperative include high frequency services episode rules auth 
approach di erent algorithms han fu assume multiple concept levels deal multiple frequency levels single concept network service 
mining relative support flexible approach deal attribute values skewed distribution relative support 
number records database number occurrences unique attribute value database calculating support value pattern 
relative support value specified attribute unique value ij total ij occurrences database pattern contains ij frequent ij occurrences 
di erent relative support values di erent attributes 
procedure relative support mine frequent patterns outlined 
input database minimum support relative support attribute output frequent patterns association rules frequent episodes scan database form unique attribute values count attribute value recorded db size number records recorded ij specified ij rel support ij count ij count db size remove ij ij rel support db size set frequent itemsets compute associations frequent episodes candidate itemset constructed rel support min rel support rel support frequent count rel support mining frequent patterns relative support step finds unique attribute values database 
step sets rel support requirements frequent patterns containing attribute values relative support attribute specified support 
step slightly modifies candidate generation process associations frequent episodes candidate itemset contains values di erent attributes di erent relative support requirements smallest check itemset frequent pattern 
itemset count smallest relative support attribute values procedure useful need compute patterns related rare events described attributes skewed value distribution 
example network tra connection records flag sf normal connection establishment termination network protocols may need find cases flag sf rej connection rejected 
specify di erent relative support requirements attributes flag service dst host uncover patterns abnormal tra example flag rej may occur connections support filter pattern related flag rej 
relative support flag produce flag rej patterns measured relative number occurrences flag rej 
summary chapter discussed order construct features build effective classification models intrusion detection need mine analyze frequent patterns association rules frequent episodes audit data 
focus research orts problem ciently compute relevant frequent patterns 
solution incorporate data schema level domain knowledge data mining process 
ect extended interestingness measures patterns include information attributes just support confidence values 
measures extended algorithms various forms item constraints mining process 
described detail axis attribute compute relevant associations attribute compute valid event episode patterns level wise approximate mining include low frequency important patterns relative frequency compute top percent frequent patterns relative unique value specified attributes 
chapter discuss utilize mined patterns audit data gathering feature construction 
chapter managing utilizing mined patterns chapter describe frequent patterns mined audit records guidelines audit data gathering feature construction 
discuss incrementally merge frequent patterns multiple audit datasets form aggregate rule set indicator audit data gathering 
pattern encoding scheme uses user defined order importance audit data attributes 
encoded patterns visualized plots easy understanding analysis 
describe experiments visualizing identifying intrusion patterns number known attacks 
need automate process identifying intrusion patterns constructing predictive features 
procedure comparing sets patterns encodings algorithm constructing temporal statistical features selected pattern 
aggregating mined patterns posit patterns discovered audit data protected target network system program user corresponds target behavior 
gather audit data target compute patterns new audit data set merge new rules existing aggregate rule set 
added new rules represent new variations normal behavior 
aggregate rule set stabilizes new rules new audit data added data gathering aggregate audit data set covered su cient variations normal behavior 
approach merging rules fact type behavior slight di erences audit data sets 
expect perfect exact match mined patterns 
need combine similar patterns generalized ones 
merge rules rule right left hand sides exactly rhss combined lhss combined support values confidence values close user defined threshold 
concept combining similar clustering lent combine rules similar syntactically regard attributes adjacent terms attribute values 
lhss rhss combined number itemsets pair corresponding itemsets positions patterns axis attribute value adjacent non axis attributes 
example consider combining lhss assume lhs just itemset ax vx ax axis attribute 
lhs itemset ax vx ax ax vx vx hold 
lhss combined value adjacent bins values 
lhs merged rule ax vx assuming larger value 
example service smtp src bytes service smtp src bytes combined service smtp src bytes compute statistically relevant support confidence values merged rule record support lhs db size mining rules audit data 
support lhs support lhs db size number records audit data 
support value merged rule support support db size support db size db size db size support value lhs support lhs support lhs db size support lhs db size db size db size confidence value confidence support support lhs experiments audit data gathering describe experiments tested hypothesis merged rule set indicate audit data covered su cient variations behavior 
obtained month tcp ip network tra data ita ee lbl 
gov html contrib lbl conn html 
refer lbl dataset 
total connection records 
segmented data day 
data day segmented data partitions morning afternoon evening night 
partitioning scheme allowed cross evaluate anomaly detection models di erent time segments di erent tra patterns 
case little intrusion data available building anomaly detector 
common practice audit data legitimate activities known di erent behavior patterns testing evaluation 
describe experiments results building anomaly detection models weekday morning tra data connections originated lbl number rules services frequent services frequent frequent smtp frequent telnet number rules vs number audit data sets outside world 
connections month 
decided compute frequent episodes network service axis attribute 
recall earlier discussion formalism captures association sequential patterns 
weeks mined patterns audit data weekday morning merged aggregate rule set 
rule recorded merge count number merges rule 
note rules merged merge count sum rules 
merge count indicates frequent behavior represented merged rule encountered period time days 
call rules merge count min frequency frequent rules 
plots rule set changes merge patterns new audit data set 
see total number rules keeps increasing 
visually inspected new rules new data set 
weeks majority related new network services prior patterns aggregate rule set 
week majority just new rules existing services 
shows rate change slows week 
min frequency filter time patterns called remaining ones frequent rules 
see frequent rule sets services individual services grow slower rates tend stabilize 
slotted aloha tdma weekday mornings weekend mornings weekday nights misclassification rates classifier trained weekdays slotted aloha tdma weekday mornings weekend mornings weekday nights misclassification rates classifier trained weekdays set frequent rules services indicator audit data su cient 
tested quality indicator constructing classifiers audit data weekday mornings respectively training 
services connections class labels included number temporal statistical features example average duration connections past seconds average data bytes source destination connection past seconds 
classifiers tested audit data training mornings nights weekdays month weekend mornings 
figures show performance classifiers detecting anomalies di erent behavior respectively 
show misclassification rate percentage misclassifications test data 
classifiers model weekday morning tra wish see rate low weekday morning test data high weekend morning data weekday night data 
figures show classifiers training audit data perform better 
classifiers ective detecting anomalies performance close see figures 
surprising plots set frequent rules indicator audit data growing weekday stabilizes day 
indicator audit data gathering quite reliable 
slotted aloha tdma weekday mornings weekend mornings weekday nights misclassification rates classifier trained weekdays slotted aloha tdma weekday mornings weekend mornings weekday nights misclassification rates classifier trained weekdays line analysis merged rule set identify collect new behavior audit data gathering process naturally asks final rule set directly detect anomalies 
set frequent rules distinguish tra data weekday mornings weekend mornings weekday nights 
similarity measure 
assume merged rule set rules size new rule set new audit data set slotted aloha tdma weekday mornings weekend mornings weekday nights similarity measures merged rule set weekday mornings number matches number rules merged merged rule set new rule set similarity represents percentage known behavior merged rule set exhibited new audit data represents proportion behavior new audit data conforms known behavior 
shows similarity weekday mornings larger weekend mornings weekday nights 
general mined patterns directly classify records tell records anomalous 
valuable line analysis 
studying di erences frequent pattern sets identify di erent behavior audit data sets 
example comparing patterns normal intrusion data gain better understanding nature intrusions identify signature patterns 
visualizing analyzing mined patterns purpose data mining discover potentially useful knowledge data 
users need inspect mined patterns select interesting ones study evaluation 
supporting presentation analysis comparison mined patterns considered integral part knowledge discovery process 
simply ranking discovered patterns statistical significance confidence support values necessary right approach frequent patterns may represent known knowledge worse may just artifacts data bear useful knowledge 
klemettinen rule templates specifying allowable attribute values select small number patterns 
main drawback approach truly interesting surprising patterns fit rule templates users known priori 
frequent sequential patterns generated algorithms interesting characteristics attribute values pattern provide useful information 
example service icmp echo src host host duration service icmp echo src bytes dst bytes hole rate service icmp echo src host host src bytes attributes duration hole rate src bytes dst bytes meaningless icmp echo service attributes value 
fact essential describing network connections general 
users may want see pattern terms important attributes necessary examine attributes 
generally appropriate pattern multiple phases important attribute second important attribute included words need general specific presentation patterns 
natural clusters patterns especially important attributes 
patterns carry similar high level information data 
example consider patterns service icmp echo src bytes service icmp echo dst bytes service icmp echo src bytes service icmp echo dst bytes service icmp echo src host host flag sf service icmp echo src bytes service axis attribute summarized frequent sequences icmp echo connections 
desirable provide summary cluster users quickly determine deserves analysis 
individual patterns selected cluster examined 
observations developed visualization scheme show mined patterns clusters support general specific analysis 
representing mined patterns order show clusters patterns need encode pattern way similar patterns mapped data points close 
clever techniques example faloutsos lin proposed map objects points dimensional space distances similarities preserved possible 
approaches useful cluster analysis data 
dealing di erent problem visualization analysis patterns rules 
imperative structural content lhss rhss rules 
su cient simply show clusters patterns important display information represented patterns cluster 
preserving rule structure consider structure frequent sequential patterns 
serial rule confidence support window associations itemsets interpret record pattern followed record pattern percent time record pattern time window 
encode association number map sequential pattern data point encoding encoding encoding 
intuitively axis represents record axes represent records 
limitation representation scheme due di culties manipulating general dimensional displays encode associations lhs association rhs 
arbitrary rule take general subsuming form compute encoding 
result rules having mapped data point space 
simply assign encoding 
support confidence window values represented display 
original rule entirety users corresponding data point selected 
encoding associations goal encoding scheme map associations sequential patterns structurally syntactically similar closer numbers 
seek encoding scheme simple compute manipulate 
define similarity measure precisely define partial order discovered associations 
assuming dimensional data call association complete ordered attributes order decreasing importance 
example axis attribute important attributes decreasing order attributes alphabetical order 
simplest form attributes just ordered alphabetically 
discovered association converted complete ordered form inserting null missing attribute sorting attributes order importance 
global variables values assuming dimensional data values holds unique values attribute count count number unique values codes code final encoding association stores encoding attribute value association convert complete order form attribute value insert values sorted order increment count needed association attribute value null attribute missing values largest count log values attributes stored single digit log count attributes values stored digits update encoding attributes digits store values add codes 
algorithm encoding complete ordered associations say assumed values attribute compared numerically continuous attribute discrete attribute 
say association similar holds 
outlines encoding procedure preserves similarity measures associations 
step sorts unique values attribute 
step assigns temporary encoding association sorted orders attribute values 
steps ensure attribute occupies number digits comparing encodings associations digits corresponding attributes aligned properly 
step computes final encoding association way order significance digits corresponds order importance attributes 
easily proved encoding algorithm correct similar encoding encoding encoding encoding assume number associations worst case running time algorithm encoding log sorting operations step count proportional number unique frequent values attribute count normally small constant due support threshold average case expected running time encoding 
association encoding service src host host flag sf service icmp echo dst host host service flag rej service unknown src host host service icmp echo src host host dst host host flag rej 
table encodings associations visualization table shows examples encodings 
order importance attributes service src host dst host flag 
see associations similar share values important attributes mapped closer numbers 
advantage encoding scheme simple arithmetic operations easily control level detail required analysis comparison associations 
example choose ignore flag simply integer division encodings 
analysis patterns number pattern analysis tasks readily supported simple manipulations encodings 
drill roll similar counterparts olap simpler operations deal encoded patterns 
drill examine patterns terms important attributes 
example identifying cluster values important attribute user may want look patterns study di erences 
accomplished arithmetic modulus operation throw away significant digit updating display new encodings significant digit represents second important attribute 
roll view patterns terms important attributes 
example user may want reduce cluster representative point order produce summary report 
accomplished integer division truncate significant digits encodings 
segmentation find patterns match rule template specifies allowable attribute values associations rule 
rule template encoded 
data points match encoded template corresponding digits selected display 
experiments dataset describe experiments set network intrusion data infoworld 
dataset contains attacks infoworld security suite evaluate leading commercial intrusion detection products mcclure traces tcpdump data 
contains hours normal network tra contains hours network tra di erent types attacks simulated 
summarized raw packet level tcpdump data connection records procedures described section 
attack methods intrusions leave scripts descriptions intrusions search engine distinct evidence short sequence time ordered connection records 
select intrusions examples demonstrate data mining algorithms find patterns attacks 
illustrate utility visualization techniques comparing analyzing patterns normal intrusion data 
time window seconds 
level wise mining procedure employed 
ping scan attacker systematically sends ping icmp echo requests large number di erent hosts find host available 
connection records host icmp echo connections di erent hosts short period time 
data mining strategy service axis attribute src host attribute find source host frequent sequential service patterns evidence intrusion data patterns suggest attack example service icmp echo src host host service icmp echo src host host service icmp echo src host host note dst host rule suggesting icmp echo sent di erent hosts contrast normal data patterns 
www com 
roll host host rej host host rej host host rej unknown smtp icmp unknown smtp icmp unknown smtp icmp 
st connection nd connection rd connection intrusion normal patterns unknown smtp icmp unknown smtp icmp unknown smtp icmp 
st connection nd connection rd connection intrusion normal roll attributes icmp icmp icmp unknown smtp icmp unknown smtp icmp unknown smtp icmp st connection nd connection rd connection intrusion normal roll attributes ping scan visualization encode patterns normal intrusion data pass supplying encoding program sets patterns displayed space 
shows plots mined patterns 
data mining strategy order importance encoding service src host dst host flag omit attributes 
axis labeled values significant attribute numerical encodings 
example represents encoding associations form service src host dst host flag diagonal line data point represents pattern form frequent sequence type connections 
see patterns tend form clusters 
patterns normal intrusion datasets form di erent distant clusters intrusion data patterns repeated icmp echo connections 
figures examples roll analysis 
discard important attributes clusters reduced summary data points 
syn flood attacker lot half open connections sending syn request establishing connection port target host order fill victim connection request bu er achieve denial service 
connection records exist host port receives lot connections flag syn request packet seen short period time 
data mining strategy service axis attribute dst host attribute find destination host frequent sequential service patterns evidence intrusion data strong evidence attack example service flag service flag service flag contrast normal data patterns flag 
visualization shows plot mined patterns 
order importance service dst host flag src host 
see distinct clusters patterns intrusion normal datasets area identified arrow overlap 
shows result drill analysis 
see patterns datasets refer di erent dst host really overlapped 
shows result segmentation analysis template flag flag flag see intrusion data patterns victim target port 
drill icmp unknown icmp unknown icmp unknown 
st connection nd connection rd connection intrusion normal patterns dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
st connection nd connection rd connection intrusion normal drill icmp icmp 
st connection nd connection rd connection intrusion segmentation syn flood port scan scan attacker systematically connections port service target host destination host order find ports accessible 
connection records victim host hosts receives connections di erent ports short period time 
lot connections rej flag ports normally unavailable connections rejected 
data mining strategy dst host axis attribute attribute find destination host frequent sequential destination host patterns evidence intrusion data patterns suggest attack example dst host host flag rej dst host host flag rej dst host host flag rej patterns flag rej service axis attribute dst host attribute large number di erence services ports attempted short period time 
result service destination host sequential patterns frequent contrast normal data patterns related flag rej indicate service involved 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
st connection nd connection rd connection intrusion normal patterns dst rej dst rej dst rej dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
dst 
st connection nd connection rd connection intrusion segmentation port scan visualization shows plot mined patterns 
order importance dst host flag src host service 
see patterns form clusters diagonal line cube diagonal line plane st connection rd connection 
simply says hosts get connected frequent short time window 
example patterns diagonal line form dst host host dst host host 
dst host host 
shows result segmentation template flag rej flag rej flag rej see hosts fall victims port scan attacks 
feature construction mined patterns packet data summarized connection records see commonly available packet processing engines record contains set intrinsic features general network tra analysis purposes 
features service src host src port dst host dur duration connection src bytes dst bytes number data bytes direction 
frequent sequential patterns initial connection records viewed statistical summaries network activities 
section showed comparing patterns normal dataset data collected normal network tra extended period time intrusion dataset data recorded simulation runs attack programs identify intrusion patterns representative network attacks 
ultimate goal produce ective classifiers detect intrusions interested utilize intrusion patterns construct predictive features classification models 
choice axis attributes important computing identifying intrusion patterns 
example dst host axis attribute produces distinct port scan patterns dst host host flag rej dst host host flag rej dst host host flag rej intrusion pattern service axis attribute dst host attribute large number di erent services attempted short period time result service destination host connection rejected sequential patterns frequent 
need alleviate user burden guessing choices 
iterative procedure involves pattern mining comparison feature construction patterns model building evaluation employed 
iteration di erent combination axis attribute attribute selected 
choices limited essential attributes service dst host src dst src port 
note exact time frequent omitted 
intrusions generally targeted victim host network start service axis attribute dst host attribute 
iteration set features performance resulting classifier tp true positive fp false positive recorded 
set features results best model selected procedure 
discuss pattern comparison feature construction 
pattern comparison goal pattern comparison process identify intrusion patterns 
main tasks include create baseline normal pattern sets mining frequent patterns subset day normal audit records incrementally adding patterns aggregate pattern set 
done possible combination axis attributes 
combination results pattern set 
mine frequent patterns intrusion audit records 
compare patterns intrusion data corresponding normal pattern set 
sets patterns choice axis attributes 
focus discussion ciently compare sets patterns 
aggregate normal pattern set usually large range thousands tens thousands patterns 
encoding scheme discussed section convert frequent pattern number easily compare sets patterns 
table shows examples encodings 
service axis attribute dst host attribute 
encoding associations association encoding flag sf service src bytes service icmp echo dst host host flag service src host host service user app src host host flag sf service icmp echo dst host host src host host 
table encodings associations comparison network connection records comparison purposes decreasing order importance flag axis attribute attribute rest essential attributes alphabetical order remaining attributes alphabetical order 
attribute flag important interesting association value summary connection behaved network protocols 
value sf normal connection establishment termination great interest intrusion detection 
pattern comparison convert encoding episode number 
assume encoding encoding encoding representation 
presentation preserves order importance attributes association encoding considers rule structure episode 
episodes similar body head mapped closer numbers 
example association encodings table ignoring dst host src host src bytes syn flood pattern service flag service flag service flag encoded 
similarly normal pattern flag sf service flag sf service icmp echo flag sf service encoded 
comparing episodes numbers simple digit wise comparison performed 
resulting di score 
xn zn yn digit absolute value di erence corresponding digit episodes 
example comparing syn flood pattern normal pattern di score 
normal patterns patterns intrusion dataset identify intrusion patterns procedure outlined 
step encodes pattern sets datasets normal audit dataset intrusion audit dataset 
step pattern dataset intrusion dataset procedure calculates di score pattern dataset normal dataset keeps lowest di score unique score intrusion score pattern 
step outputs patterns user specified top percentage patterns input set patterns dataset set patterns dataset user specified percent value output set top percent unique patterns encode patterns encodings encodings unique di di score di unique unique di sort unique patterns correspond top percent encodings non zero unique scores identifying unique patterns highest non zero unique scores 
example normal pattern flag itemsets di score syn flood pattern high pattern selected top intrusion patterns 
identify intrusion patterns procedure considers pattern intrusion dataset normal long match normal patterns 
simplicity omit comparisons support confidence values heads bodies rules match 
encountered case matched rules values apart considered acceptable threshold 
feature construction intrusion patterns constructing additional features connection records algorithm 
procedure parses frequent episode uses simple operators count percent average construct simple statistical features 
features temporal measure connections time window share attribute value 
intuition feature construction algorithm comes straightforward interpretation frequent episode 
example attribute value appears itemsets episode large percentage records original data value 
treat essential non essential attributes di erently 
essential attributes describe anatomy intrusion normally involves sequence connections example service port targeted 
actual values important attack method applied di erent targets ftp 
hand actual non essential attribute values flag indicate invariant intrusion regardless actual targets summarize behavior network protocols 
example syn flood pattern results additional features count connections dst host past seconds input frequent episode set existing features connection records output updated dst host attribute mine episode seconds minimum width episode features consider connections past seconds share value current connection count number connections count essential attribute value item sets percent percentage connections share value current connection percent di erent values percent di percentage di erent values connections percent di value non essential attribute item sets percent percentage connections share value current connection percent numerical attribute average average values connections average constructing features frequent episode connections percentage service current percentage flag 
ciency algorithm operate encoding input episode 
parsing checking attribute values trivial digit comparisons 
procedure need output encodings intrusion patterns 
window size frequent episodes frequent episodes frequent episodes ects window sizes number frequent episodes 
open problem decide right time window value experience showed plot number patterns generated di erent values plot tends stabilize initial sharp jump 
call smallest stable region experiments showed plot accuracies classifiers temporal statistical features calculated di erent stabilizes tend taper 
plots number episodes mined normal coming tra data part experiments described section 
mined frequent episodes di erent support thresholds 
see number frequent patterns increases sharply goes gradually stabilizes phenomenon coincides ects time window sizes classifier accuracy 
intuitively requirement window size set sequential patterns stable su cient patterns captured noise small 
adding temporal statistical features 
theoretical underpinnings chapter stated main focus research feature selection construction 
experiments described section showed temporal statistical features need constructed included classification models 
chapter proposed frequent patterns mined audit records guidelines feature construction described basic algorithms mining audit data extensions 
chapter outlined algorithms comparing identifying patterns constructing features patterns 
explain additional features constructed frequent patterns improve accuracy classifiers 
recall chapter pointed machine learning algorithms select features attributes classification model information gain measures 
show features constructed frequent patterns higher information gains existing features 
nature frequent episodes algorithm number episodes increase increases 
intrusion patterns results intrusion records nature network attacks connection needs examined sequence packets context sequence related connections 
argued frequent sequential patterns computed extended algorithms capture temporal statistical characteristics network connections 
show intrusion patterns results intrusion connection records audit dataset 
straightforward theorem theorem sets patterns dataset dataset unique patterns dataset algorithm statistically speaking dataset contains unique records unique sequences records 
proof note sets patterns computed datasets data mining strategies algorithm support confidence window requirements axis attributes 
algorithm definition di score algorithm pattern dataset unique non zero unique score compared patterns dataset itemsets association unique 
case records dataset contain items association statistically regard support confidence thresholds records dataset 
association computed dataset 
frequent episode unique case sequences records contain itemsets associations episode dataset statistically temporally regard support confidence window requirements sequences records dataset 
frequent episode computed dataset 
need emphasize uniqueness records sequences records may valid statistical support confidence window requirements 
example assume dataset total records records contain items min support dataset contain records contain items total records min support unique association dataset 
claim records dataset unique 
aggregate normal pattern set set patterns audit data simulated network intrusion algorithm outputs intrusion patterns 
theorem intrusion patterns indicate intrusion audit data statistically temporally unique connections sequences connections compared normal network tra connections intrusion connections 
unique patterns intrusion dataset may result unique normal connections designs data mining pattern encoding comparison algorithms ensure intrusion patterns corresponds actual intrusion connections vice versa intrusion connections captured intrusion patterns 
constructed features higher information gains feature construction algorithm described parse intrusion pattern add number temporal statistical features connection record 
features describe anatomy invariant information intrusion pattern 
temporal measures connections time window 
statistical simple statistical calculations count percent average existing features 
features constructed intrusion pattern feature values intrusion connection records responsible pattern di erent feature values normal connection records 
precisely purpose adding features 
example feature syn flood pattern connections destination host percentage flag normal records values close syn flood records values 
features high information gain value ranges separate intrusion records normal records 
need appreciate fact constructed features normally higher information gains existing features useful building classification model 
example flag appear normal connections intrusion connections 
feature flag high information gain 
theorem intrusion pattern suggests existence unique sequences connection records temporal statistical sense support confidence time window considered 
temporal statistical features flag capture uniqueness intrusion connections accurately higher information gains 
summary chapter discussed utilize mined frequent patterns audit data gathering feature construction 
algorithms belief mined patterns statistical summaries system behavior 
described incrementally merge patterns mined multiple audit datasets aggregate rule set 
suggested aggregate rule set begins stabilize aggregate audit dataset su cient learning classification models 
results experiments building anomaly detection models lbl dataset confirmed hypothesis 
pattern encoding scheme user defined order importance audit data attributes 
encoding scheme facilitates pattern visualization analysis 
experiments dataset showed patterns encoded visualized plots intrusion patterns easily identified formed distinct clusters 
outlined pattern comparison algorithm automates process identifying intrusion patterns 
di measure patterns calculated pair wise di erence encodings 
patterns intrusion dataset high di scores compared aggregate normal patterns considered intrusion patterns 
discussed feature construction algorithm parses intrusion pattern adds temporal statistical features anatomy invariant information intrusion pattern 
explained theoretical underpinnings feature construction process 
showed intrusion patterns results intrusion connections features patterns higher information gain measures values separate intrusion records normal records 
features useful building accurate classification models 
chapter described extensive experiments audit data darpa intrusion detection evaluation program 
experiments demonstrated verified utilities algorithms tools madam id chapter putting experiments darpa intrusion detection evaluation chapter describe experiments building intrusion detection models audit data darpa intrusion detection evaluation program 
experiments applied algorithms tools madam id process audit data mine patterns construct features build ripper classifiers 
describe experiments tcpdump data 
results experiments submitted darpa evaluated mit lincoln labs 
report experiments bsm data performed darpa evaluation 
discuss experiences evaluate strengths weaknesses madam id experiments tcpdump data participated darpa intrusion detection evaluation program prepared managed mit lincoln labs 
objective study survey evaluate state art intrusion detection research 
standard set extensively gathered audit data includes wide variety intrusions simulated military network environment provided darpa 
participating site required build intrusion detection models tweak existing system parameters training data send results detected intrusions test data back darpa performance evaluation 
report experience 
darpa data provided gigabytes compressed tcpdump data weeks network tra data processed connection records bytes 
data contains content data portion packet transmitted hosts inside outside simulated military base 
bsm audit data unix solaris host network sessions provided 
main categories attacks simulated dos denial service example ping death teardrop smurf syn flood unauthorized access remote machine example guessing password unauthorized access local superuser privileges local unprivileged user example various bu er overflow attacks probing surveillance probing example port scan ping sweep addition anomalous user behavior manager behaves system administrator 
data pre processing bro paxson packet filtering reassembling engine 
extended bro handle icmp packets changes packet fragment inspection modules crashed processing data contains teardrop ping death attacks 
implemented bro connection finished event handler output summarized record connection 
connection record includes set intrinsic features shown table 
misuse detection training data darpa includes list files identify timestamp source host port destination host port name attack 
information select intrusion data perform pattern mining feature construction label connection record normal attack type create training data building classification models 
amount audit data huge example days millions connection records due nasty dos attacks aggregate feature description value type duration length number seconds connection continuous protocol type type protocol tcp udp discrete service network service destination telnet discrete src bytes number data bytes source destination continuous dst bytes number data bytes destination source continuous flag normal error status connection discrete land connection host port discrete wrong fragment number wrong fragments continuous urgent number urgent packets continuous table intrinsic features network connection records connection records single training data set 
extracted connection records fall surrounding time window plus minus minutes duration attack create data set attack type 
randomly extracted sequences normal connections records create normal data set 
manual automatic feature construction feature construction approach described section attack type syn flood port scan performed pattern mining comparison intrusion data set normal data set 
attack method actual network hosts irrelevant di erent hosts darpa data post processed frequent patterns encoding comparison procedure examine itemset lhs rhs frequent pattern replace src host value encountered likewise replace dst host value src host value encountered check previous source hosts pattern replace appropriate replace perform processing dst host value 
example pattern service src host host service telnet dst host host service smtp src host host dst host host post processed service src host service telnet dst host service smtp src host dst host number unique patterns pattern set significantly reduced result post processing 
processes creating aggregate normal pattern set pattern encoding comparison cient 
constructed appropriate features top patterns attack type 
summarize temporal statistical features automatically constructed system host feature examine connections past seconds destination host current connection count connections percentage connections service current percentage di erent services percentage syn errors percentage rej rejected connection errors service features examine connections past seconds service current connection count connections percentage di erent destination hosts percentage syn errors percentage rej errors 
call time tra features connection records 
summarized table 
slow probing attacks scan hosts ports larger time interval seconds example minute 
result attacks produce intrusion patterns time window seconds 
sorted connection records destination hosts applied pattern mining feature construction process 
time window seconds connection window connections constructed mirror set host tra features time tra features 
discovered dos probing attacks attacks don intrusion frequent patterns 
dos probing attacks involve sending lot connections host short period time frequent sequential patterns di erent normal tra attacks feature description value type count number connections host current connection past seconds continuous features refer host connections connections syn errors continuous connections rej errors continuous srv connections service continuous di srv connections di erent services continuous srv count number connections service current connection past seconds continuous features refer service connections srv connections syn errors continuous srv connections rej errors continuous srv di host connections di erent hosts continuous table tra features network connection records embedded data portions packets normally involve single connection 
unique frequent tra patterns 
words automatic feature construction process fail produce features attacks 
studying outcome mining process focussed attention content connections 
current data mining algorithms deal unstructured data contents ip packets 
relied domain knowledge define suitable features 
bro event handlers added functions inspect data exchanges interactive tcp connections telnet feature description value type hot number hot indicators continuous failed logins number failed login attempts continuous logged successfully logged discrete compromised number compromised conditions continuous root shell root shell obtained discrete su su root command attempted discrete file creations number file creation operations continuous shells number shell prompts continuous access files number write delete create operations access control files continuous outbound cmds number outbound commands ftp session continuous hot login login belongs hot list root adm discrete guest login login guest login guest anonymous discrete table content features network connection records ftp smtp 
functions assign values set content features indicate data contents suggest suspicious behavior 
features number failed logins successfully logged logged root root shell obtained su command attempted succeeded number access access control files passwd rhosts number compromised states destination host file path errors jump instructions number hot indicators access system directories creation execution programs number outbound connections ftp session 
features summarized table 
approach include extensive set indicators classification programs decide minimal set discriminating features identify intrusions 
label service flag count srv count di srv normal ecr sf smurf ecr sf satan user level rej normal sf 
table example tra connection records ripper rule meaning smurf count srv count service ecr service icmp echo request past seconds number connections destination host current number connections service current smurf attack dos attack 
satan di srv 
connections past seconds destination host current connection percentage rejected connections percentage di erent services satan attack probing attack 
table example ripper rules dos probing attacks detection models evident di erent categories intrusions require di erent sets constructed features detection purposes 
built classification models di erent feature sets tra model connection record contains intrinsic tra features 
table shows example labeled connection records 
resultant ripper classifier detects dos probing attacks 
table shows example ripper rules 
host tra model connection record contains intrinsic host tra features 
resultant ripper classifiers detect slow probing attacks 
content model connection record contains intrinsic content features 
table shows example labeled connection records 
resultant ripper classifier detects attacks 
table shows example ripper rules 
label service flag hot failed logins compromised root shell su normal ftp sf normal telnet sf guess telnet sf normal telnet sf overflow telnet sf normal rlogin sf guess telnet sf overflow telnet sf normal telnet sf 
table example tcp connection records ripper rule meaning guess failed logins 
number failed logins greater telnet connection guess guessing password attack 
overflow hot compromised root shell 
number hot indicators number compromised conditions root shell obtained telnet connection bu er overflow attack 
normal true 
connection normal 
table example ripper rules attacks classification models specialize certain type intrusion 
constructed meta level classifier combine detection models 
meta level training record consists features predictions base models plus true class label normal attack type 
ripper applied learn rules combine evidence tra host tra content classifiers final prediction connection 
resulting meta level rules basically predictions content model detect attacks combination tra host tra models detect dos fast slow probing attacks 
meta classifier predicts connection attack content model attack dos probing tra model tra model predicts normal host model predicts probing attack 
model features rules features records rules content tra host tra table model complexities table summarizes complexity base models terms number features connection record number ripper rules produced number distinct features rules 
numbers bold example indicate number automatically constructed temporal statistical features ripper rules 
see tra host tra models feature construction process contribute majority features 
point features connection records selected ripper 
ripper classification algorithms built feature selection process select discriminating generalizable features statistical significance performance hold test dataset simulates unseen data 
large amount audit data human expert able manually gather test various statistics tend poor job selecting features 
result hand crafted signature rules tend specific small intrusion data set 
alternative classification algorithms compute underlying probability distributions may require features evaluated resultant models 
crucial issue tradeo model accuracy model cost 
ripper output indicates features irrelevant need compute run time reducing cost detection 
subject matter ongoing research 
results report performance detection models evaluated mit lincoln labs 
trained intrusion detection models base models meta level classifier weeks labeled data predictions weeks unlabeled test data told connection attack 
test data contains total attack types types test data models trained instances attack types 
shows roc curves detection models attack categories intrusions 
roc plots axis false alarm rate columbia group group group dos false alarm rate columbia group group group probing false alarm rate columbia group group group columbia false alarm rate columbia group group performance tcpdump misuse detection models roc curves detection rates false alarm rates false alarm rate calculated percentage normal connections classified intrusion axis detection rate calculated percentage intrusions detected 
data point upper left corner corresponds optimal performance high detection rate low false alarm rate 
compare models participants denoted group darpa evaluation program participating groups knowledge engineering ap tested systems produced binary output roc continuous 
plots duplicated presentation slides report lincoln labs darpa pi meeting 
slides viewed line www cs columbia edu sal jam project mit mit index html 
proaches build intrusion detection models 
see detection model best performance attack category model best 
clear models performed poorly attacks 
intrusions detection rate hardly satisfactory mission critical environment 
category old new dos probing table comparing detection rates old new attacks models intended misuse detection hoped features constructed general models detect new variations known intrusions 
table compares detection rates old intrusions new intrusions 
new intrusions refer corresponding instances training data 
see models able detect large percentage new probing attacks ective new dos attacks 
discussion probing attacks relatively limited variance involve making connections large number hosts ports time frame 
likewise outcome attacks root shell obtained legitimate means login root su root categories attacks representative instances training data data mining system able construct features capture general behavior patterns 
result detection models detect high percentage old new probing attacks 
hand dos wide variety behavior exploit weaknesses large number di erent network system services 
features constructed available attack instances specialized known attack types 
detection models missed large number new dos attacks 
results entirely surprising models misuse detection models 
need anomaly detection models network tra system programs guard new diversified attacks 
anomaly detection challenging misuse detection 
example need decide build normal profile network service group services host groups hosts 
feature construction process complex relatively small number intrusion patterns normal network tra large number variations 
network anomaly detection important problem active area research 
user anomaly detection insiders privileges hard detect don normally need break idss security personnel tend focus guarding outside attacks 
insider problems vexing problems security personnel 
checks checkers person ids reports 
di cult classify single event user normal abnormal unpredictable nature people 
user actions login session needs studied determine behaving normally 
time hostname command arg arg am pascal mkdir dir am pascal cd dir am pascal vi tex am pascal tex vi am pascal mail am pascal subject progress am pascal vi tex am pascal mail am pascal subject progress 
table shell command records bro event handlers examine telnet sessions extract shell commands users 
pre processed shell commands replacing timestamps am pm nt night eliminated input contents edit sendmail commands kept filename extensions 
table shows examples processed command data 
shell command records user anomaly detection 
initial exploratory approach mine frequent patterns command data merge add patterns aggregate set form normal usage profile user 
new pattern merged old pattern left hand sides right hand sides support values confidence values 
analyze user login session mine frequent patterns sequence commands session 
new pattern set compared profile pattern set similarity score assigned 
assume new set patterns patterns matches rules merged profile pattern set similarity score simply obviously higher similarity score means higher likelihood user behavior agrees historical profile 
user normal activities logs root cats password file runs commands top 
programmer writes public domain code uses vi editor compiles code reads sends mails executes unix commands 
programmer similar user profile works 
secretary edits latex files runs latex reads mails sends mails 
manager reads sends mails manager reads mails 
table user descriptions darpa data includes user anomaly data evaluate anomaly detection systems 
table describes consistent behavior users anomaly analysis 
note group performed anomaly detection test data lincoln labs evaluate results 
report experiments training data 
applied frequent episode algorithms command data login session user command axis feature look patterns range consecutive commands mine user anomaly description programmer logs beta secretary logs night logs jupiter programmer secretary secretary manager programmer logs night programmer manager manager logs table user anomaly description user normal anomaly programmer secretary programmer secretary programmer manager manager table similarity user profile frequent sequential patterns associations user commands arguments time segments hosts 
weeks data gathering period simply merged patterns user profiles 
user profiles activities time segment am pm nt 
th week training period compared patterns session profile time segment 
record normal range similarity scores week 
data th week user anomalies described table 
anomalous sessions compared patterns original user profile compared resulting similarity score recorded normal range time segment 
table column labeled normal range similarity user profile recorded th week 
means user login time segment th week 
column anomaly similarity measure anomalous session described table 
see anomalous sessions clearly detected similarity scores smaller normal range 
example programmer patterns zero matches profile th week pm similarity scores range 
normal anomaly user sa sa sa sa table similarity group profiles user abnormal behavior observed need investigate nature anomaly 
report experiments finding user job functions violated 
problem stated follows 
assume possible groups users job functions 
user group behave group profile normal job functions want identify group group user 
want know illegal job functions user performed 
experiments built group profiles group programmers group secretary managers sa group 
data weeks patterns users group aggregated form group profile 
data th week establish range similarity measures users group 
user anomalies described table include illegal job function cases th week programmer secretary secretary manager programmer 
table compares similarity measure user anomalous session normal similarity range gathered time segment 
normal similarity measures user respect groups see user largest similarity measure group 
similarity measures user anomalies see illegal job function case similarity measure targeted group largest 
example programmer similarity measure group largest similarity measure sa group outside normal range 
summary formal evaluation statistics available determine error rates approach user anomaly detection initial results encouraging 
believe approach worthy study 
experiments bsm data darpa data contains solaris bsm basic security module sunsoft audit data designated host pascal 
section describe experiments building host intrusion detection models bsm data 
bsm enabled host machine exists audit trail host 
audit trail time ordered sequence actions audited system consists audit files 
audit record audit file describes single audit event kernel event system call user level event system program inetd invocation 
define audit session collection audit events incoming outgoing session host 
examples host sessions include login terminal login telnet login rlogin rsh ftp sendmail easy see host session corresponds network connection 
correlate predictions host sessions host intrusion detection model predictions corresponding connections network intrusion detection model yield higher accuracy 
case building network intrusion detection models need perform sequence data preprocessing tasks raw bsm data 
extended preprocessor component ustat ilgun process binary bsm data ascii event data 
table shows examples event records 
means value original bsm audit record 
event record contains number basic features defined table 
developed program process event data session records 
brief description procedure time sid event pid obname inetd connect 

execve usr 



chdir home 

table example bsm event records watch session execution inetd connect event telnet rlogin rsh execve event system program fingerd incoming finger request finger outgoing mail local incoming sendmail outgoing ftpd incoming ftp outgoing record event assigns audit user id sid audit session id session 
examine audit records share combination sid summarize number session features described section 
records termination session 
darpa bsm data contains day sessions host pascal 
vast majority intrusions bsm data bu er overflow attacks 
feature description value type time timestamp event discrete audit user id inherited child processes started user initial process session discrete sid audit session id assigned login session inherited descendant processes discrete event audit event name discrete pid process id event discrete obname name object full path file event operates discrete arg arg arguments system call discrete text short information event successful login discrete error status error status event discrete return value return value system call event discrete terminal id port ip address event discrete ip header source destination ip addresses ports network connection handled event discrete socket local remote ip addresses ports socket event discrete real user id event discrete real group id event discrete ective user id event discrete ective group id event discrete table features bsm event records defining session features experimented feature construction session records 
computed frequent patterns event records 
dataset prepared pattern mining contains event records session positive meaningful sid 
interested events accountable users 
looking general session specific event patterns removed sid datasets 
replaced flag reid indicate agrees 
designated event axis attribute obviously essential attribute describing event data 
relative support event obname compute frequent patterns relative number occurrences unique event obname 
example obname usr bin ksh may occur twice dataset session capture patterns relative support occurrences frequent 
initial rounds experiments discovered patterns related specific obname event values 
kernel events system calls directly linked user level commands 
reasoned intrusion detection purposes need analyze user level commands operations file system 
kept types event records read write create delete execute change owner permission rename link 
event value event record replaced appropriate type name open replaced read 
kept original obname event execute user replace obname values indicate files user directories system replace obname values indicate files system directories 
removed event records 
missing obname values 
aggregated event patterns normal sessions normal pattern set 
session mined event patterns compared normal patterns 
encoding patterns order importance attributes reid event obname rest alphabetical order 
applying pattern encoding comparison procedures discussed sections got top intrusion patterns attack example event execute obname home reid event execute obname usr reid event execute obname usr bin ksh reid event execute obname usr bin pwd reid event read obname home reid patterns unique normal pattern set patterns reid related read example event read obname system reid event read obname system reid event read obname sytem reid event read obname home reid event execute obname usr bin cat reid mechanical automatic pattern parsing feature construction procedure intrusion patterns forms 
example add features record executions relevant specific events described patterns 
quickly realized bu er overflow attacks share characteristics intrusion patterns 
example attack intrusion pattern event execute obname home reid event execute obname usr bin reid event execute obname usr bin ksh reid bu er overflow patterns indicate execution user program follow suid setuid system utility shell suid state 
need construct features capture general behavior attack method final outcome specific system utilities exploited 
event data contains low level specific information operating system need domain knowledge interprete patterns construct general features 
experiments showed limitations fully automatic feature construction dealing low level event data believe intrusion patterns resulted pattern mining comparison provide helpful starting point manual feature definition process 
feature description value type duration length number seconds session continuous service operating system network service telnet responsible session discrete logged user successfully logged telnet rsh 
discrete failed logins number failed login attempts continuous process count number processes session continuous suid sh shell executed suid state discrete suid suid system program executed discrete user user program executed discrete su attempted su command issued discrete access files number write delete create operations access control files continuous file creations number file creations continuous hot login login belongs hot list discrete guest login login belongs guest list discrete table features bsm session records defined set features described table bsm session records 
features bold bu er overflow patterns similar content features described session 
misuse detection models bsm data labeled bsm session record normal intrusion name darpa supplied list files 
bsm session records weeks aggregated single dataset training misuse detection model 
table shows examples labeled bsm session records 
label service suid sh suid user file creations normal smtp normal telnet normal telnet bu er overflow telnet normal ftp master ftp 
table example bsm session records ripper rule meaning bu er overflow suid sh 
shell executed suid state bu er overflow attack 
master file creations service ftp guest login 
service ftp user logs guest anonymous number file creation operations attack attacker logs anonymous ftp site creates hidden directory uploads lot files copies software download 
table example ripper rules bsm session records ripper applied dataset learn set classification rules 
table shows examples detection rules 
evaluated performance rule set test data list files provided darpa available completion cial evaluation 
shows roc curves detection models bsm data 
subfigure compares model participants darpa evaluation terms performance detecting attacks darpa evaluated performance 
sub shows performance model detecting dos probing attacks performance attacks considered 
false alarm rate columbia group group group group false alarm rate columbia columbia dos columbia probe columbia dos probing performance bsm misuse detection models roc curves detection rates false alarm rates model slightly better performance tcpdump models mainly fewer attacks contained bsm data single host 
note bsm model tcpdump models performance detecting probing dos attacks poor performance detecting attacks 
fact compared predictions bsm model tcpdump models simply agree predictions pairs corresponding host session network connection 
bsm misuse detection model constructed provides additional predictive power 
nature misuse detection truly intrusion uses service modeled go undetected features bsm model tcpdump models similar models looking similar set evidences di erent data sources 
discouraging hoped accuracy improvement combining models fact encouraging goal combine light weight tcpdump model checks ip headers number models important hosts monitor operating system activities 
experiments showed level accuracy maintained heavy weight tcpdump model checks ip data contents 
summary chapter described experience applying madam id build intrusion detection models data provided darpa intrusion detection evaluation program 
conducted sets experiments network tcpdump data operating system bsm audit data 
experiments showed need combine knowledge discovery data mining knowledge engineering domain knowledge encoding build ective intrusion detection models 
experiments tcpdump data showed ectiveness madam id automatic pattern mining comparison feature construction procedures 
able compute set intrusion frequent patterns dos probing attacks 
patterns mechanically parsed construct set temporal statistical tra features detection models 
intrusion patterns connection records attacks normally involve single connection 
domain knowledge define set content features attacks 
alternative approach attempt mining patterns data contents ip packets pattern comparison feature construction 
attractive data contents free text structured need domain knowledge preprocess contents suitable format interprete resultant patterns 
experiments bsm data intrusion patterns bu er overflow attacks contain specific program names necessarily inherent attack method 
compared connection records set intrinsic features general semantics understood bsm audit event records low level details system activities 
need domain knowledge interprete patterns define features general information summarized bsm session records 
cial darpa evaluation results showed detection models tcpdump data best participants 
shows advantages madam id process huge amount audit data construct features inductively learn classification rules 
models intended misuse detection trained available training data number new attacks test detected 
just begun research challenging problem building anomaly detection models 
chapter rapid deployment real time intrusion detection systems issues initial results chapter describe going project real time network intrusion detection 
discuss approach automatically translating ripper rules nfr network flight recorder real time code modules 
outline key issue involved real time intrusion detection ciently execute detection models intrusions detected minimum delay minimum cost computation 
solution mine necessary conditions consist low cost short delay features intrusion 
necessary conditions filtered large number unnecessary feature computation rule checking 
orthogonal solution directly learn ripper rules sensitive timing cost features 
automatic translation ripper rules real time nfr modules intrusion detection models produced line 
ective intrusion detection real time minimize security compromises 
need study models real time environment 
working translating ripper rules real time detection modules nfr network flight recorder network flight recorder system includes packet capturing engine code programming support specifying packet filtering logic 
nfr ers fairly simple framework network monitoring 
sni packets network passes filter functions processing calculating network tra statistics 
filter functions written code preemptive event driven scripting language supports wide range operations network packet data 
order nfr network intrusion detection needs implement extensive set code filters look evidences network packets 
purposes nfr project just simply evaluate line learned models utilized real time environment importantly automate creation code real time detection filters 
detection rule example pod wrong fragment protocol type icmp 
automatically converted code filter pod wrong fragment protocol type icmp alarm pod long features wrong fragment protocol type implemented code filter functions 
plan implement required features ripper rule set code feature filters implement translator automatically translate ripper rule code rule filter 
envision nfr shipped madam id customer site madam id learn site specific intrusion detection rules locally gathered audit data automatically converted code rule filters 
believe nfr project showcase rapidly automatically deploy customize ids 
cient execution learned rules ignored line analysis ciency important consideration real time intrusion detection 
experimental implementation code rule filters essentially tried follow line analysis steps real time environment 
connection inspected classified rules connection record completely formulated packets connection arrived summarized temporal statistical features computed 
scheme failed miserably 
large volume network tra amount time taken process connection records past seconds calculate statistics large 
connections may terminated completed attack actions current connection inspected ripper rules 
detection intrusions severely delayed 
ironically dos attacks typically generate large amount tra short period time intruders overload ids detection delay window opportunity quickly perform malicious intent 
example seize control operating system kill ids 
need examine time delay associated feature order speed model execution 
time delay feature includes time computation time readiness computed 
example flag connection computed summarized packet connection arrived service connection obtained checking header packet 
partition features cost time delay levels level features computed packet level features computed connection information current connection level computed connection require access data prior connections 
datum arrives early data flow shown cost lower calculate feature depends datum 
order conveniently estimate cost rule assign cost level features level level 
di erent levels order magnitude di erence cost 
feature set derived darpa dataset service level feature intrinsic content features level tra features level 
note simply order rules costs real time execution reasons 
rules output ripper strict sequential order rule rule reordering rules may result unintended classification errors 
furthermore rules tested strictly cost order introducing classification error rules tested fail match classification 
ordering rules costs necessarily optimal solution quick model evaluation 
seek compute optimal schedule feature computation rule testing minimize model evaluation costs increase response rate real time detection 
low cost necessary conditions ideally tests involving low cost level level features eliminate majority rules need checked eliminating needs compute high cost features 
order eliminate need testing rule intrusion need test form derived compute association rules intrusion labels lhs low cost features rhs confidence 
discovered associations ripper rules example ping death service icmp echo phf service port scan src bytes syn flood flag note feature values example src bytes ripper rules prevalent normal data 
don predictive power 
associations necessary conditions intrusions example connection port scan attack src bytes equivalent src bytes connection port scan attack 
note rhs associations feature value pairs regarding di erent features corresponding independent necessary conditions 
select lowest cost 
merge associations 
single association 
example darpa data bu er overflow service telnet bu er overflow service rlogin merged bu er overflow service telnet rlogin ripper rule intrusion excluded failure necessary condition features rule need computed needed candidate remaining rules 
discuss cient bookkeeping candidate rules features determine schedule feature computation rule condition testing 
real time rule filtering suppose ripper rules 
bit vector bit order corresponding order rules output ripper remaining vector indicate rules need checked 
initially bits 
rule invalidating bit vector bit corresponding rule bits 
high cost features level temporal statistical feature computing bit vector bits corresponding rules require feature 
intrusion label record lowest cost necessary condition conditions costs features involved 
sort necessary conditions costs produce order real time condition checking 
examining packet just completed connection necessary condition intrusion violated corresponding invalidating bit vectors ripper rules intrusion remaining vector computing vectors high cost features 
necessary conditions checked get features non zero computing vectors 
features potentially useful remaining rules need checked 
single function call code modules compute features 
execution strategy reduces memory disk access features compute statistical information past stored connections records 
remaining vector check remaining rules 
currently fine tuning implementation scheme need perform extensive set experiments simulating wide variety intrusions establish empirical speed may attain 
analysis necessary conditions dos probing attacks set features ripper rules suggest simple low cost tests service flag reduce number high cost feature tests see table 
preliminary experiments far confirmed result 
orthogonal approach constructing rules learning set rules consider accuracy adding cost consideration rule execution learned rules sensitive computational costs features 
simplest way incorporating attribute costs process learning classification model modify search heuristic information gain consider cost 
example discussion mitchell gain foil information gain ripper evaluates conjunct involving attribute cost cost computing obtaining value gain cost evaluation function 
constant determines sensitive relative importance cost versus information gain 
modified evaluation function ripper essentially considers accuracy attribute costs constructing classification rules 
note approach orthogonal previous approach cost rule may lower need optimize execution schedule rules 
current status near term plans currently near completion implementing required features functions 
implementation automatic rule code translator way 
modified ripper consider feature costs information gain constructing classification rules 
implemented mechanisms measure actual real time feature costs terms computation times corresponding code functions 
months hope complete tasks implementation automatic translator features extensive experiments obtain estimates real time feature costs parameterized ripper learn set cost sensitive detection rules implementation real time rule filtering scheme evaluation approaches accuracy computation cost 
summary chapter discussed key advantages incorporating line learned rules real time intrusion detection system 
implementing needed features real time inspection modules classification rule straightforwardly translated sequence function calls feature modules 
deploying customizing ids currently enormous pure knowledge engineering task accomplished applying data mining programs learn local detection rules local audit data automatically translating rules detection modules ids 
believe approach significantly facilitate widespread deployment engineered idss 
discussed ciency issue real time intrusion detection 
proposed orthogonal approaches 
approach compute set low cost necessary conditions rule 
conditions dynamically filter unnecessary high cost feature computation rule checking 
second approach extend information gain measure consider feature costs resultant rules sensitive cost 
initial stage pilot project nfr network flight recorder real time network ids 
chapter chapter summarize thesis review thesis contributions discuss 
summary thesis described framework madam id mining audit data automated models intrusion detection 
madam id consists classification meta classification programs association rules frequent episodes programs feature construction system 
madam id frequent patterns computed large amount system audit data construct predictive features classification rules inductively learned detect intrusions 
motivated thesis stating importance intrusion detection computer security mechanisms 
provided background intrusion detection techniques briefly described representative intrusion detection systems 
pointed current intrusion detection systems lack ec adaptability extensibility pure knowledge engineering development approaches 
goal thesis research develop framework facilitates automatic systematic construction adaptable extensible intrusion detection systems 
explained knowledge discovery data mining process involves di erent algorithms tools 
purposes building intrusion detection models need classification programs patterns mining programs association rules frequent episodes algorithms 
examined problem learning classification models 
discussed building classification models audit data important issue construct set features high information gain measures 
main focus thesis research feature construction audit data 
experiments building classification models sendmail system call data network tcpdump data demonstrated classification rules accurate concise intuitive 
experiments showed need gather su cient training data construct set predictive features 
tasks require proper data analysis tools 
proposed frequent patterns audit data statistically summaries system activities guidelines audit data gathering feature construction 
studied problem mining frequent patterns audit data 
temporal multi attribute nature system audit data argued kinds frequent patterns need computed association rules describe frequent correlations attributes frequent episodes capture frequent occurrences system events 
basic association rules frequent episodes algorithms exponential worst cases 
ciently compute useful patterns large amounts audit data extended basic algorithms utilize schema level information audit data 
extensions summarized measuring interestingness pattern attributes involved addition frequency values 
specific extensions include axis attribute find patterns related important attribute unify associations frequent episodes single rule formalism attribute compute subject frequent patterns level wise approximate mining relative support uncover low frequency important patterns 
studied problem utilize mined frequent patterns 
aggregate patterns audit dataset pattern set similar rules merged 
experiments showed stabilization pattern set indicator su cient audit data gathered 
order ciently analyze large amounts frequent patterns devised simple encoding scheme user specified order importance attributes maps patterns syntactically structurally similar closer numbers 
visualization experiments showed encoding scheme facilitates systematic navigation analysis rollup drill segmentation pattern space 
experiments showed encoded normal patterns intrusion patterns form distinct clusters 
devised pattern comparison procedure pattern encodings 
compared aggregated normal pattern set patterns intrusion dataset user specified top percent di erent scores identified intrusion patterns 
designed automatic feature construction algorithm parses intrusion pattern applies count percent average operators occurrences attribute values add temporal statistical features 
explained theoretical underpinnings show constructed features high information gain values distinguish intrusion records normal records 
described objective evaluation algorithms tools madam id darpa intrusion detection evaluation program applied madam id build network intrusion models tcpdump data 
showed need combine knowledge discovery knowledge engineering build ective intrusion detection models 
dos probing attacks able automatically construct set temporal statistical tra features frequent patterns mined network connection records 
attacks rely domain knowledge define content features mining patterns unstructured data contents extremely di cult 
similarly building models bsm data needed domain knowledge interprete specific patterns defining host session features 
darpa evaluation showed misuse detection models best performances participants ine ective detecting truly innovative attacks 
need study build anomaly detection models 
currently studying problem incorporate line learned models real time idss pilot project nfr network flight recorder 
main idea implement required features code filter functions automatically translate learned rule code filter essentially sequence function calls implemented feature filters 
deployment customization nfr easy new detection rules learned applying madam id local audit data translated nfr 
main challenge ciently execute rules real time environment 
approach low cost necessary conditions rule filter unnecessary feature computation rule checking real time 
orthogonal approach extend information gain measure machine learning program ripper consider feature costs resultant rules sensitive cost 
thesis contributions recap thesis contributions association rules frequent episodes algorithms studied problem ciently compute relevant frequent patterns large amounts audit data 
exploited schema level information audit data 
extended basic algorithms axis attribute attribute forms item constraints level wise approximate mining relative support compute low frequency important features 
techniques pattern visualization comparisons studied problem ciently analyze compare frequent patterns 
devised encoding scheme maps similar patterns closer numbers pattern comparison procedure di erence scores pattern encodings 
applied encoding comparison methods identify intrusion patterns 
techniques automatic feature construction patterns studied problem automatically construct features mined patterns 
designed algorithm parses frequent pattern adds temporal statistical features 
applied algorithm construct predictive features intrusion patterns 
techniques cient real time execution detection models just began study problem ciently execute line learned detection models real time environment 
developed technique utilizing low cost necessary conditions mechanism filtering scheduling rules run time 
objective evaluation madam id participated darpa intrusion detection evaluation program 
intrusion detection field showed advantages combining knowledge discovery knowledge engineering 
data mining field showed strengths limitations current techniques algorithms 
interesting important directions anomaly detection far done little study anomaly detection sendmail system call data construct model program normal execution shell command data construct user models 
anomaly detection broader scale network important complex 
biggest challenge control false positive rate 
wide range normal behavior services hosts network detected anomaly normal legitimate 
solution divide conquer create host groups service groups learn dedicated normal profile group addition normal profile predictions group models 
essence spirit hierarchical meta learning 
integrating idss network management systems believe important beneficial natural integrate intrusion detection network management system 
lot network anomalies filtered network management system part function 
hand detecting intrusion ids communicate network management system take appropriate actions re route services compromised host 
cost sensitive intrusion detection cost factors intrusion detection example cost computing features checking rule address cost identifying intrusion labor cost system sta called take actions cost damage intrusion practical issues need considered deploying ids 
research challenge build intrusion detection models easily adjustable site specific cost policies 
formal design intrusion detection techniques currently formal reasoning intrusion detection techniques 
don know priori method 
intrusion detection model fails prove fault modeling algorithm lack meaningful data 
limited current state design implementation practices operating systems network services 
little formal specifications computing components interactions 
way reasoning possible behavior system observe involves lot imprecise guesswork 
need address problems working operating system networking communities 
system component designed implemented formal methods single step require test plans intended tested usages released ids community specification auditing mechanisms recorded data sources 
reason best possible models system component 
predictive models sequence data madam id uses frequent patterns construct temporal statistical features build classification models 
interesting see multi step operation combined single step 
mine predictive models time sequenced audit records 
prior dealt single dimensional data streams 
multi dimensional audit records presents combinatorial problem challenge develop cient scalable algorithm 
closing remarks thesis documented research developing applying data mining techniques important challenging problem building intrusion detection models 
set algorithms tools collectively called madam id designed implemented evaluated thesis research 
madam id shown great promises open problems research 
bibliography agrawal srikant agrawal srikant 
fast algorithms mining association rules 
proceedings th vldb conference santiago chile 
agrawal srikant agrawal srikant 
mining sequential patterns 
proceedings th international conference data engineering taipei taiwan 
agrawal agrawal imielinski swami 
mining association rules sets items large databases 
proceedings acm sigmod conference management data pages 
atkins atkins hare kelley nelson phillips steen 
internet security professional 
new riders publishing 
bellovin bellovin 
security problems tcp ip protocol suite 
computer communication review april 
brachman brachman simoudis 
mining business databases 
communications acm november 
chan stolfo chan stolfo 
parallel distributed learning meta learning 
aaai workshop knowledge discovery databases pages 
cheeseman stutz cheeseman stutz 
bayesian classification autoclass theory results 
fayyad piatetsky shapiro smyth uthurusamy editors advances knowledge discovery data mining 
aaai mit press cambridge ma 
clark niblett clark niblett 
cn induction algorithm 
machine learning 
cohen cohen 
grammatically biased learning learning logic programs explicit antecedent description language 
artificial intelligence 
cohen cohen 
fast ective rule induction 
machine learning th international conference lake ca 
morgan kaufmann 
spa ord spa ord 
active defense computer system autonomous agents 
technical report csd tr coast laboratory department computer science purdue university west lafayette 
domingos domingos 
occam sharp blunt 
proceedings th international conference knowledge discovery data mining new york ny august 
aaai press 
faloutsos lin faloutsos lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
proceedings acm sigmod conference management data san jose ca may 
fawcett provost fawcett provost 
combining data mining machine learning ective user profiling 
proceedings nd international conference knowledge discovery data mining pages portland august 
aaai press 
fayyad fayyad haussler stolorz 
mining scientific data 
communications acm november 
fayyad fayyad piatetsky shapiro smyth 
data mining knowledge discovery overview 
fayyad smyth uthurusamy editors advances knowledge discovery data mining 
aaai mit press cambridge ma 
fayyad fayyad piatetsky shapiro smyth 
kdd process extracting useful knowledge volumes data 
communications acm november 
forrest forrest hofmeyr somayaji 
sense self unix processes 
proceedings ieee symposium security privacy pages los alamitos ca 
ieee computer society press 
frank frank 
artificial intelligence intrusion detection current directions 
proceedings th national computer security conference october 
morris morris 
unix system security 
bell laboratories technical journal october 
han fu han fu 
discovery multiple level association rules large databases 
proceedings th vldb conference zurich switzerland 
maccabe 
architecture network level intrusion detection system 
technical report computer science department university new mexico august 
klemettinen mannila toivonen 
tasa telecommunication alarm sequence analyzer 
proceedings ieee ifip network operations management symposium april 
ilgun ilgun kemmerer porras 
state transition analysis rule intrusion detection approach 
ieee transactions software engineering march 
ilgun ilgun 
ustat real time intrusion detection system unix 
master thesis university california santa barbara november 
jacobson jacobson leres mccanne 
tcpdump 
available anonymous ftp ftp ee lbl gov june 
jonsson jonsson 
quantitative model security intrusion process attacker behavior 
ieee transactions software engineering april 
klemettinen klemettinen mannila ronkainen toivonen verkamo 
finding interesting rules large sets discovered association rules 
proceedings rd international conference information knowledge management cikm pages md 
ko ko fink levitt 
automated detection vulnerabilities privileged programs execution monitoring 
proceedings th annual computer security applications conference pages december 
kumar spa ord kumar spa ord 
software architecture support misuse intrusion detection 
proceedings th national information security conference pages 
lee stolfo lee stolfo 
data mining approaches intrusion detection 
proceedings th usenix security symposium san antonio tx january 
lee lee stolfo mok 
mining audit data build intrusion detection models 
proceedings th international conference knowledge discovery data mining new york ny august 
aaai press 
lee lee stolfo mok 
data mining framework building intrusion detection models 
proceedings ieee symposium security privacy may 
lee lee stolfo mok 
mining data flow environment experience network intrusion detection 
proceedings acm sigkdd international conference knowledge discovery data mining kdd august 
lent lent swami widom 
clustering association rules 
proceedings th international conference data engineering birmingham uk 
lunt lunt jagannathan neumann javitz valdes garvey 
real time intrusion detection expert system ides final technical report 
technical report computer science laboratory sri international menlo park california february 
lunt lunt 
detecting intruders computer systems 
proceedings conference auditing computer technology 
mannila toivonen mannila toivonen 
discovering generalized episodes minimal occurrences 
proceedings nd international conference knowledge discovery databases data mining portland oregon august 
mannila mannila toivonen verkamo 
discovering frequent episodes sequences 
proceedings st international conference knowledge discovery databases data mining montreal canada august 
mcclure mcclure 
test center comparison network intrusion detection solutions 
infoworld may 
infoworld 
mitchell mitchell 
machine learning 
mcgraw hill 
network flight recorder network flight recorder network flight recorder 
www nfr com 
padmanabhan tuzhilin padmanabhan tuzhilin 
method discovering unexpected patterns 
proceedings th international conference knowledge discovery data mining new york ny august 
aaai press 
paxson paxson 
internet packet dynamics 
proceedings sigcomm september 
paxson paxson 
bro system detecting network intruders realtime 
proceedings th usenix security symposium san antonio tx 
porras neumann porras neumann 
emerald event monitoring enabling responses anomalous live disturbances 
national information systems security conference baltimore md october 
porras valdes porras valdes 
live tra analysis tcp ip gateways 
proceedings internet society symposium network distributed system security march 
quinlan quinlan 
induction decision trees 
machine learning 
quinlan quinlan 
learning logical definitions relations 
machine learning 
rumelhart rumelhart widrow lehr 
basic ideas neural networks 
communications acm 
srikant srikant vu agrawal 
mining association rules item constraints 
proceedings rd international conference knowledge discovery data mining pages newport beach california august 
aaai press 
stevens stevens 
tcp ip illustrated volume 
addison wesley publishing 
stolfo stolfo fan lee prodromidis chan 
credit card fraud detection meta learning issues initial results 
aaai workshop ai approaches fraud detection risk management pages 
aaai press july 
stolfo stolfo prodromidis lee fan chan 
jam java agents meta learning distributed databases 
proceedings rd international conference knowledge discovery data mining pages newport beach ca august 
aaai press 
sunsoft sunsoft 
basic security module guide 
sunsoft mountain view ca 
teng teng chen lu 
adaptive real time anomaly detection inductively generated sequential patterns 
proceedings ieee symposium research security privacy pages oakland ca may 
berkman clouse 
decision tree induction cient tree restructuring 
machine learning october 
