understanding software systems reverse engineering technology perspectives rigi project muller scott tilley kenny wong department computer science university victoria box victoria bc canada tel fax mail csr uvic ca software engineering research focused mainly software construction neglected software maintenance evolution 
proposed shift research synthesis analysis 
reverse engineering introduced possible solution program understanding software analysis 
reverse engineering technology developed part rigi project 
rigi approach involves identification software artifacts subject system aggregation artifacts form architectural models 
reported analyses source code sql ds performed authors visiting program understanding project ibm centre advanced studies toronto 
keywords legacy software software evolution program understanding reverse engineering 
supported part british columbia advanced systems institute ibm canada ibm centre advanced studies iris federal centres excellence natural sciences engineering research council canada science council british columbia university victoria 
reprinted proceedings cascon toronto ontario october pages 
suppose turn back time software engineering conference held germany 
nato conference held response perceived software crisis introduced term software engineering significantly influenced research practice years follow 
advice give software pioneers software engineering background experience today 
software pioneers anticipate software constructed early modified years 
today systems referred legacy heritage systems 
include telephone switching systems banking systems health information systems avionics systems computer vendor products 
switching systems new functionality added periodically reflect latest market needs 
banks update systems regularly implement new changed business rules tax laws 
health information systems adapt rapidly changing technology increased demands 
computer vendors committed supporting products example database management systems indefinitely regardless age 
legacy systems replaced re living entire history 
embody substantial corporate knowledge requirements design decisions business rules evolved years difficult obtain 
knowledge constitutes significant corporate assets totalling billions dollars 
result long term software maintenance evolution important software construction especially consider economic impact systems 
analysis synthesis main advice software pioneers carefully balance software analysis software construction efforts research education 
past decades software engineering research focused mainly software construction neglected software maintenance evolution 
example numerous successful tools methodologies developed early phases software life cycle including requirement specifications design methodologies programming languages programming environments 
arisen dramatic imbalance software engineering education academia industry favoring original program algorithm data structure construction 
computer science computer engineering programs prepare software engineers background encourages fresh creation synthesis 
concepts architecture consistency completeness efficiency robustness abstraction usually taught bias synthesis concepts equally applicable relevant analysis 
study real world software systems overlooked 
instructors rarely provide assignments model normal mode operation industry analyzing understanding building existing systems 
contrast situation electrical civil engineering education study existing systems architectures constitutes major component curriculum 
knowledge architectural concepts large software systems key understanding legacy software designing new software 
concepts include subsystem structures layered structures aggregation generalization specialization inheritance hierarchies graphs component dependency classification event handling strategies pipes filters user interface separation distributed client server architectures 
importance architecture recognized courses foundations software architecture emerged universities 
bias synthesis resulted lack tools software maintainer 
correct imbalance shift research synthesis analysis needed 
allow software maintenance evolution community catch 
repertoire tools methodologies analysis refined synthesis software maintenance evolution tractable 
computer science technology board proposed research agenda software engineering 
report concluded progress developing complex software systems hampered differing perspectives experiences research community academia software engineering practitioners industry 
report recommended collaboration academia industry academic exploration complex software systems directly government industry 
software engineering researchers test validate ideas large real world software systems 
excellent example providing arrangements canada ibm centre advanced studies cas toronto program understanding pu project 
program understanding reverse engineering programmers part historian part detective part 
ibm promising approaches problem software evolution program understanding technology 
estimated percent evolution devoted program comprehension understanding 
programmers programming knowledge domain knowledge comprehension strategies trying understand program 
example extract syntactic knowledge source code rely programming knowledge form semantic abstractions 
brooks early theory domain bridging describes programming process constructing mappings problem domain implementation domain possibly multiple levels 
program understanding involves reconstructing part mappings 
programming process cognitive involving assembly programming plans implementation techniques realize goals domain 
program understanding tries pattern match set known plans mental models source code subject software 
large legacy systems manual matching plans difficult 
way augmenting program understanding process reverse engineering 
forms reverse engineering common goal extract information existing software systems 
knowledge improve subsequent development ease maintenance re engineering aid project management 
reverse engineering process process reverse engineering subject system involves identification system current components dependencies followed extraction system abstractions design information 
process source code altered additional information generated 
contrast process re engineering typically consists reverse engineering phase followed forward engineering re implementation phase alters subject system 
large number commercial reverse re engineering tools available lists packages 
commercial systems focus source code analysis simple code restructuring common form reverse engineering information abstraction program analysis 
reverse engineering approaches reverse engineering consists diverse approaches including formal transformations meaning preserving restructuring pattern recognition function abstraction information abstraction identification graph queries methods 
specific approaches briefly described 
approach supported research groups pu project cas 
goal project exploit produce comprehensive reverse engineering toolset 
defect filtering buss henshaw ibm cas explores design recovery knowledge reengineering large legacy software emphasis software written sql ds product 
sql ds typical legacy systems old highly modified popular successful large 
higher quality standards increased productivity goals motivated exploration 
pu project mainly concerned defect filtering sql ds ibm products 
commercial software refinery product refine parse source code form suitable analysis 
applies experience domain experts results causal analysis create refine rules find certain families defects subject software 
defects include programming language violations overloaded keywords poor data typing implementation domain errors data coupling application domain errors coding standards business rules 
sql ds trademark international machines 
pattern matching research groups affiliated ibm cas pu project focus pattern matching approaches various levels textual characters lexical token stream syntactic parse tree semantic meaning structural architecture johnson gentleman study redundancy textual level lexical level 
number uses relevant sql ds product looking code reused cut paste building simplified model macro processing actual providing overviews information content absolute relative version variant terms 
paul prakash programming language constructs type plan system 
looking low level textual patterns high level semantic constructs looks code clich es 
clich pattern user defined 
approach natural progression simple textual scanning techniques character strings search criteria constructs 
kontogiannis concerns semantic behavioral pattern matching 
transformational approach simplify syntactic programming structures expressions loops translating simpler canonical forms 
canonical form semantic abstraction improves understanding providing unified representation similar constructs 
canonical forms reduce number plans need stored 
structural patterns investigated part rigi project 
structural software structure refers collection artifacts software engineers form mental models designing documenting implementing analyzing software systems 
artifacts include software components procedures modules subsystems interfaces dependencies components rigi named mountain central switzerland 
supplier client composition controlflow relations attributes component type interface size interconnection strength 
structure system organization interaction artifacts 
large software system reconstruction structural aspects architecture beneficial 
process may termed structural 
involves identification software artifacts subject system organization artifacts models reduce complexity 
result structure subject system derived architectural design information 
process supported rigi flexible environment development university victoria discovering analyzing structure large software systems 
provides desirable components reverse engineering environment ffl variety parsers support common programming languages legacy software ffl repository store information extracted source code ffl interactive graph editor manipulate program representations 
rigi approach phase structural process automatic language dependent 
involves parsing source code subject system storing extracted artifacts repository 
second phase involves human interaction features language independent subsystem composition methods generate bottom layered hierarchies 
subsystem composition iterative process aggregating building blocks data types procedures subsystems composite subsystems 
process guided partitioning resource flow graphs source code equivalence relations embody software engineering principles concerning module software typically written procedural imperative programming languages cobol fortran pl interactions low coupling strong cohesion 
rigi project devised software quality measures exact interfaces established software engineering principles evaluate generated subsystem hierarchies 
rigi project main goal rigi project investigate frameworks environments program understanding reverse engineering software analysis large 
results project include reverse engineering environment consisting parsing subsystem repository graph editor reverse engineering methodology subsystem composition documentation strategy views structured hypertext layer extension mechanism scripting language 
results applied industrial software systems validate evaluate rigi approach program understanding 
early experience shown produce views compatible mental models maintainers subject software 
past year analyzed source code sql ds system part ibm cas pu collaborative project 
scalability flexibility extensibility compete commercial tools inspire current state practice need train program understanding tools methodologies large software systems 
techniques toy projects typically scale 
current scale objective analyze systems consisting lines code 
program understanding different facets applications wise approach flexible possible different domains 
reverse engineering tools provide fixed set extraction selection filtering organization documentation representation techniques 
provide scripting language allows users customize combine automate activities novel ways 
involving user program understanding heavy human cognitive abilities 
tradeoff automated left humans 
best solution lie combination 
rigi depends heavily experience domain knowledge software engineer user important decisions 
process synergy user learns discovers interesting relationships exploring software systems rigi environment 
summarizing software structure subsystem composition methodology rigi generating layered hierarchies subsystems reducing cognitive complexity understanding large software systems 
rigi environment supports partitioning resource flow graph established software engineering principles 
user charge partition easily criteria business rules tax laws message paths semantic domain information 
alternate decompositions may exist software structure representation supported rigi 
documenting views software engineers rely heavily internal documentation help understand programs 
unfortunately documentation typically outof date software engineers referring source code 
rigi environment eases task subject software presenting results interactive views 
view bundle visual textual frames contain example call graphs overviews projections exact interfaces annotations 
view dynamic snapshot reflects current reverse engineering state 
view remains date 
views accurately capture existing architectural decompositions providing different perspectives inspection 
analyzing sql ds author spent month sabbatical ibm cas 
authors joined months analyzed source code sql ds rigi environment 
scaling sql ds contains lines pl source code excluding comments blank lines 
pl internal ibm programming language mix pl assembly language 
started rigi system include pl parser 
analyzed system lines code 
analysis real challenge excellent test methodology environment scale line range 
commercial reverse engineering tools store entire parse trees repositories 
multi line program require megabytes storage 
level detail may necessary tasks data control flow analyses code optimization generation necessary understanding architecture 
program understanding important build abstractions emphasize important themes suppress irrelevant details deciding include ignore art 
rigi parsing subsystem extract variety software artifacts various levels detail 
reduce repository size multi line program significantly making major difference retrieving data interactively 
example rigi database sql ds megabytes 
displaying graphs vertices edges multi line program problem scale 
smaller graphs feasible update window event command 
strategy fails large graphs current display technology 
needed tune user interface redesigning allow user batch sequences operations specify update window 
identifying target audience tuning rigi environment handle multi line programs identify target audience program understanding experiments 
cas pu groups sql ds development management teams extremely helpful 
try summarized entire call graph sql ds considering domain knowledge 
result encouraging developers recognize structures generated making difficult give constructive feedback 
second try considered naming conventions developers 
time readily recognized subsystem decomposition 
focused large subsystem sql ds relational data system rds contains lines source code 
help domain expert rds decomposed main subsystems run time access generator optimizer pass optimizer path selection executive interpreter authorization 
distinct development teams charge subsystems 
developer feedback individual subsystems proceeded analyze call graphs summarizing set views depicting different architectural perspectives 
views development teams series carefully designed hour demonstrations 
demonstration consisted phases highlighting main features rigi user interface exhibiting structural views subsystems pertinent particular development group allowing audience interact software structures views starting points allowing individual developers create new views fly reflect record specific domain knowledge 
prepared views uncover exact mental model developer audience readily recognized structures 
main reasons 
developers knew subsystems intimately 
second importantly views represented right level abstraction 
satisfying individual developers specific domain knowledge design additional views reflect mental model closely 
usually done emphasizing important components filtering irrelevant information 
invariably demonstrations developers came back try document additional domain knowledge perspectives 
summary old software needs understood 
critical software industry deal effectively problems software evolution understanding legacy software systems 
primary focus industry changing completely new software construction software maintenance evolution software engineering research education major adjustments 
particular resources devoted software analysis balance software construction 
focus changing software evolution program understanding tools methodologies effectively aid software engineers understanding large complex software systems significant impact 
critical keeping varied demands information industry 
rigi environment focuses architectural aspects subject software analysis 
environment provides ways identify explore summarize evaluate represent software structures 
specifically supports reverse engineering methodology identifying building documenting layered subsystem hierarchies 
critical usability rigi system ability store retrieve views snapshots reverse engineering states 
views transfer information abstractions software engineers 
rigi system primarily reverse engineering environment originally conceived design tool 
fact system reverse forward engineering helping complete cycle software evolution 
currently designing developing ambitious reverse engineering environment years experience gained rigi project 
new environment supported nserc crd collaborative research development involves universities mcgill university university toronto university victoria ibm industrial partner 
collaboration main theme universities walk fine line pure research developing integrated system addressing real world program understanding problems industry 
mcgill university extend structural pattern matching capabilities rigi system support syntactic semantic functional behavioral search patterns 
university toronto deliver flexible powerful repository storing software artifacts pattern matching rules software engineering knowledge 
university victoria rigi system flexible scalable extensible developing scripting language users design high level operations composing tailoring existing operations 
ibm provide industrial perspective architectural issues new environment characterize real world re engineering applications contribute legacy code testing new environment 
results project disseminated papers demonstrations tutorials 
see re engineering logical step reverse engineering 
seeking apply results nserc crd large legacy systems 
authors dr muller associate professor computer science university victoria 
worked software engineer brown cie baden switzerland called brown 
sabbatical ibm centre advanced studies toronto working program understanding group 
research interests include software engineering software analysis program understanding reverse engineering re engineering programming large software metrics computational geometry 
internet address csr uvic ca 
scott tilley currently leave ibm canada pursuing ph department computer science university victoria 
field research software engineering general program understanding software maintenance reverse engineering particular 
reached university victoria ibm toronto laboratory don mills rd tor north york canada 
mail addresses csr uvic ca uvic vnet ibm com tilley vnet ibm 
kenny wong ph student department computer science university victoria 
research interests include program understanding user interfaces software design 
member acm usenix planetary society 
internet address uvic ca 
perry wolf 
foundations study software architecture 
acm sigsoft software engineering notes october 

scaling research agenda software engineering 
communications acm march 
standish 
essay software reuse 
ieee transactions software engineering se september 
brooks 
theory cognitive processes computer programming 
international journal man machine studies 
brooks 
behavioral theory program comprehension software engineering 
icse proceedings rd international conference software engineering atlanta georgia may pages may 
brooks 
theory comprehension computer programs 
international journal man machine studies 
arnold 
software reengineering 
ieee computer society press 
murdock 
re engineering tools report 
technical report rev software technology support center hill air force base july 
baxter freeman 
tmm software maintenance transformation 
ieee software pages may 
griswold 
program restructuring aid software maintenance 
phd thesis university washington 
rich wills 
program design graph parsing approach 
ieee software january 
linger 
function abstraction understand program behavior 
ieee software january 
chen ramamoorthy 
information abstraction system 
ieee transactions software engineering march 
grass 
object oriented design archaeology cia 
computing systems winter 

discovering visualizing controlling software structure 
acm sigsoft software engineering notes may 
proceedings fifth international workshop software specification design 
consens mendelzon 
visualizing querying software structures 
icse proceedings th international conference software engineering melbourne australia may pages may 
biggerstaff webster 
concept assignment problem program 
wcre proceedings working conference reverse engineering baltimore maryland may pages 
ieee computer society press order number november 
buss henshaw 
experiences program understanding 
technical report tr 
ibm canada centre advanced studies july 
markosian 
program transformation key automating software maintenance re engineering 
technical report reasoning systems 
paul 
reengineer tool source code search 
cascon proceedings cas conference toronto ontario november pages 
ibm canada november 
kontogiannis 
program representation program understanding process algebras 
cascon proceedings cas conference toronto ontario november pages 
ibm canada november 
muller 
rigi model software system construction integration evolution module interface specifications 
phd thesis rice university august 
ossher 
mechanism specifying structure large layered systems 
shriver wegner editors research directions object oriented programming pages 
mit press 
schurr westfechtel 
graph oriented database system software engineering applications 
case sixth international conference computer aided software engineering institute systems science national university singapore singapore july pages july 
ieee computer society press order number muller uhl 
composing subsystem structures partite graphs 
proceedings conference software maintenance san diego california november pages november 
ieee computer society press order number 
muller orgun tilley uhl 
reverse engineering approach subsystem structure identification 
journal software maintenance research practice 
press 

guided tour program design methodologies 
computer october 
myers 
reliable software composite design 
charter 
muller 
verifying software quality criteria interactive graph editor 
proceedings eighth annual pacific northwest software quality conference portland oregon october pages october 
acm order number 
muller 
measuring quality subsystem structures 
technical report dcs ir university victoria november 
orgun muller tilley 
discovering evaluating subsystem structures 
technical report dcs ir university victoria april 
muller tilley orgun 
reverse engineering environment spatial visual software interconnection models 
sigsoft proceedings fifth acm sigsoft symposium software development environments tyson corner virginia december pages december 
acm software engineering notes 
tilley 
documenting large vs documenting small 
proceedings cascon toronto ontario october pages october 
wong 
managing views program understanding tool 
proceedings cascon toronto ontario october pages october 
tilley muller orgun 
documenting software systems views 
proceedings th international conference systems documentation ottawa ontario october pages october 
acm order number 
tilley whitney muller 
storey 
personalized information structures 
th annual international conference systems documentation waterloo ontario october pages october 
acm order number 
tilley muller whitney wong 
domain retargetable reverse engineering 
csm international conference software maintenance montr eal qu ebec september pages september 
ieee computer society press order number 
muller mohr mcdaniel 
applying software re engineering techniques health information systems 
timmers editors software engineering medical informatics pages 
elsevier north holland 
tilley 
management decision support reverse engineering technology 
proceedings cascon toronto ontario november pages november 
tilley muller 
virtual subsystems project management 
case sixth international conference computer aided software engineering institute systems science national university singapore singapore july pages july 
ieee computer society press order number 
