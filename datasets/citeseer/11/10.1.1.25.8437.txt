hyper system knowledge reformation efficient order hypothetical reasoning helmut ishizuka yamamoto department information communication engineering school engineering university tokyo ku tokyo japan mail ishizuka miv tokyo ac jp 
hyper system implements new approach knowledge compilation function free order acyclic horn theories transformed propositional logic 
compilation method integrates techniques deductive databases relevance reasoning theory transformation unfold fold transformations obtain compact propositional representation 
transformed theory compact ground version original theory terms significantly shorter clauses 
form compilation called knowledge base reformation important efficient reasoning methods defined propositional theories knowledge naturally expressed order language 
particular show knowledge reformation allows low order polynomial time inference find near optimal solution cost order hypothetical reasoning abduction problems 
experimental results confirm effectiveness compilation method 
motivation need knowledge reformation derives facts declarative representations knowledge 
representations designed variety queries contain information relevant answering particular query query type levy see literature semantic query optimization 
second interesting problems artificial intelligence require representational power order theories known reasoning theories computationally expensive levesque 
hand considerable progress developing efficient mechanisms propositional reasoning 
instance gsat efficient procedure solving propositional satisfiability problems selman kautz nbp sl methods fast mechanisms solving propositional hypothetical abductive reasoning problems ishizuka workers 
recall hypothetical reasoning np hard basic forms propositional problems eiter gottlob 
aim knowledge reformation preserve generality compactness representing knowledge order horn logic time allow processing highly efficient propositional knowledge base kb 
knowledge reformation extends existing knowledge compilation cadoli donini order case 
compilation methods preprocess propositional kb line result speed line query answering 
contrast start order kb generate propositional kb manageable size 
principle idea knowledge reformation implemented transformation instantiates variables order theories constants grounding 
non zero function symbols allowed finite set essentially propositional clauses obtained 
simple minded approach obviously impractical huge number propositional clauses produced levesque 
suggest apply theory transformation tamaki sato instantiating theory 
specifically principled application unfold definition fold transformation steps eliminates unnecessary variables variables occur body head clause instantiation clause exponential number different variables occurring clauses resulting transforming allow significantly ground clauses instantiating original clause different variables yields clauses instantiation 
transformation replaces newp newp result instantiated clauses different variables 
reformation procedure combined slide lift sl method efficient hypothetical reasoning method ishizuka matsuo 
main contribution knowledge reformation kr community twofold 
propositional theories derived automatically order 
consequently researchers interested propositional algorithms may approach problems traditionally formulated function free firstorder horn logic extra effort 
second resulting propositional theories attractive computational properties terms small size shorter clauses processed efficiently 
interestingly transformation procedures may serve similar function knowledge object decomposition described uses decomposition kb maintenance 
reformation procedure translator order propositional form planned tptp problem library sutcliffe 
organized follows 
section describes configuration hyper system 
section show techniques relevance reasoning rule parts kb related set queries 
section introduces transformation procedures example 
section line phase 
input order hypothetical reasoning problem 
relevance reasoning 
isolate part kb relevant query type 
theory transformation 
apply unfold fold transformation steps 
instantiation 
generate ground theory constructing query tree 
line phase 
input propositional hypothetical reasoning problem 
relevance reasoning 
isolate part kb relevant query 
hypothetical reasoning 
apply sl method generate near optimal solution hypothetical reasoning problem 
fig 

configuration hyper system 
describe clauses instantiated product constructing called query tree query type 
section reports experimental results 
section briefly discuss summarize 
system configuration computational efforts hyper system divided line line phase illustrated fig 

hyper acronym hypothetical reasoning employing reformation 
line preprocessing phase isolate portion order kb relevant answering query type 
query type ground query constants replaced variables 
kb transformed unfold fold transformation steps 
transformed theory instantiated product constructing query tree 
output line phase ground propositional knowledge base kb relevant instantiations query type may solution respect hypothetical reasoning problem 
line phase assumes ground query computes propositional clauses relevant ground query 
sl method applied generate solution cost hypothetical reasoning problem 
relevance reasoning section introduce procedures partition horn theory independent subtheories ii remove clauses subtheory contribute solution query called strongly proof irrelevant clauses levy 
consider order horn theories sets clauses form xn xn xn pn xn atomic formulas denotes sequence variables atom xn called head clause denoted hd conjunction pn xn called body clause denoted bd 
variables occurring clause implicitly universally quantified 
clause theory containing variables called ground simply propositional 
clause called function free contain non zero function symbols constants allowed 
hd denote set variables occurring head clause bd set variables occurring clause body 
clause range restricted hd bd 
clauses considered horn function free range restricted 
impose restriction theories acyclic corresponding directed graph contains cycles 
observe clauses function free acyclic recursive definitions theory called treestructured directed graph corresponding consists subtrees tn top node exists directed path node top node 
phase reformation process order theory factorized follows tree structured partitioned independent subtheories ii acyclic subtheory generated query type 
tree structured theory split disjoint subtheories tn clause subtheory resolves clause different subtheory means search space atomic query type restricted single subtheory general case acyclic theories factorizing performed means algorithm computes clauses reachable query type 
informally clause reachable query type exists path head observe theory factorizing done polynomial time 
concludes reformation phase 
important note acyclic factorizing done considering query types tree structured independent query type 
procedures introduced far significantly reduce number clauses considered answering ground query 
claim experimentally supported refer interested reader results 
theory transformation variable elimination motivation applying unfold fold transformations reduce complexity theory measured number possible ground instantiations clauses 
clause exponential number different variables occurring try minimize theory transformation equivalence preserving form transformation 
theory transformation proceeds successively applying unfold optional definition fold rules order theory 
specifically application transformation rules eliminates unnecessary variables variables occur body bd head hd clause algorithm described eliminates unnecessary variables algorithm guaranteed halt 
suggest terminating procedures eliminate sufficient number unnecessary variables 
particular introduce novel set procedures definition rule broad class clause bodies 
lot technical detail involved describing procedures see ishizuka 
brevity show result performing definition folding steps 
definitions unfolding definition folding rules see tamaki sato 
start terminology distinguish different kinds clause bodies 
distinction intended cover broad range possible clause bodies 
central notion block clause body 
block 
clause set atoms bd 
define binary relation atoms 
denote reflexive transitive closure bd 
denote partition body blocks note variable occurs block 
instance clause blocks fp fp consider clause clause body forms single block 
new clause newp generated definition rule newp fresh predicate symbol folded folding obtain newp transformed theory consists clauses allow significantly instantiations theory 
block variety syntactical forms 
chain 
example chain introductory section 
revisit chain example section experiments 
isolated 
consider clause variable bd called isolated occurs isolated 
definition rule isolated generates clause newp folded produce newp theory transformation procedure described ishizuka see 
transformation procedure performs unfolding definition folding cycles procedures applicable 
procedure significantly extends algorithm 
special instance clause bodies isolated algorithm eliminate unnecessary variables 
observe applying theory transformation obtain slightly order clauses yield significantly fewer instantiations 
theory instantiation phase reformation process theory instantiated 
employing query tree method levy obtain exactly set ground clauses relevant query type 
query tree qt compact representation search tree order horn theories form tree goal nodes rule nodes 
allow recursion clauses construction qt simpler original 
hand allow leaves query tree uninstantiated 
typically hypotheses may assumed order prove query 
query tree algorithm consists successive phases 
bottomup phase instantiations base atoms denoting facts hypotheses propagated upwards query type 
instantiations conceived constraints arguments predicates 
top phase constraint generated query type pushed branches qt 
constraints nodes predicates qt constrained possibly leads pruning parts tree constructed bottom 
effect obtain exactly set ground clauses relevant query type instantiations query type solution respect theory certain hypotheses consistently assumed ishizuka 
complexity building qt linear number rules possibly exponential arity predicates 
empirical evaluation impact savings gained knowledge reformation tested means slide lift sl mechanism ishizuka matsuo efficient propositional hypothetical reasoning method computing near optimal solution diagnosis 
short sl method uses linear programming technique simplex method determine initial search point nonlinear programming technique find near optimal solution 
inference speed sl method low order polynomial approximately number propositional variables problem formulation 
sl method runs sgi onyx workstation mhz cpu theta mb memory theory factorizing variable elimination instantiation procedures implemented run machine 
hypothetical reasoning abduction knowledge base hypotheses assumables query problem formulation contains inconsistency constraints ae form hn sequence constant symbols symbol denotes impossible state 
hypothetical reasoning task consists finding minimal sets hn ii sl method generates near optimal solution natural ask near solution optimal solution 
theories including inconsistency constraints shown experimentally cases near optimal solution best solutions 
solutions cost distinguished contain different hypotheses 
experiments intended show speedup effect due knowledge reformation factorizing needed shown 
involve simple theories interesting allow easy comparisons varying relevant parameters number unnecessary variables number constants problem formulations 
expect efficiency gain significant unnecessary variables eliminated 
example chain theory consist clauses path link link link link link link set element hypotheses take flink 
varying number constants obtain theories different size 
may look theories greater smaller number links definition path varying number experiment assume call instance path example 
simplicity assume default value cost weight element hypotheses essentially looking solution hypothetical reasoning problem 
applying reformation procedure replaced path newp link newp newp link newp link link inconsistency constraint remain unchanged 
impact knowledge base reformation problem size processing time path example summarized fig 

consts consts rules atoms inst time sec sol time sec 
ref 

ref 

ref 

ref 
fig 

results path example 
number constants occurring problem formulation 
rules refers number instantiated propositional rules reformation 
numbers include number instantiated inconsistency constraints theories 
atoms number atoms propositional variables problem formulation including hypotheses atoms atoms occurring constraints 
columns inst time sec show cpu times needed instantiate original theories respectively columns sol time sec give cpu times find near optimal solution instantiated goal path original theories respectively 
cpu time needed reform theory variable elimination procedures seconds 
relevance reasoning part line phase integrated sl method 
instantiating clause original theory effectively means create lookup table entries number constants problem formulation number different variables clause 
path example instance constants obtain propositional clauses corresponding order definition path different variables 
space reducing effect knowledge reformation seen decreasing exponent example original clause transformed clauses different variables clause allow theta propositional clauses 
property part output theory transformed clauses shorter direct effect number atoms problem formulation 
total number atoms respective theories fig 

interesting see instantiated theory mimics behavior order reasoning method minus unification 
assume path example run prolog style reasoner goal path 
simplicity assume inconsistency contraints contained problem constants block block ref fig 

block example 
constants ref fig 

isolated example 
formulation 
link atom solved bound bound say solution solve link kept different values 
grounding theory effectively produce instantiations link required 
ground theory hand find solution newp link solution variables 
inconsistency constraints instantiation link guaranteed contained solution hypotheses set 
general difficult compare radically different approaches integer linear programming search style oriented reasoning methods 
regarding time needed instantiate order theories done line note query tree method produces ground theory instantiations particular query type may solution 
possible ground queries posed actual time needed query instantiation time number constants problem formulation arity query predicate 
case constants instance actual cost theory seconds individual query ground queries posed 
unrealistic assume possible queries posed expect compiled theories reused sufficiently large number times amortize cost instantiate theory 
columns fig 
summarize efficiency gain resulting knowledge reformation cpu seconds 
total speedup factor constants 
total speedup considers instantiation time time needed find solution constants theory requires sec theory needs sec 
support hypothesis performance crucially dependent unnecessary variables eliminated performed experiment analogous path example body atoms definition path 
example variables eliminated measured speedups factor twelve constants 
figures summarize speedup effect transformation procedures blocks isolated examples section 
inference time refers total time needed solve problem line line reasoning specific goal 
constants speedup effect negligible 
realistic theories expect reformation procedures applied significantly large portion kb ii transformation procedures varying extent 
address problem problem formulation order acyclic horn logic function symbols arrive compact propositional representation 
particular hyper system effective method cost order hypothetical reasoning problems kb language function free order horn logic compiled propositional kb efficient propositional method applied compute near optimal solution 
shown offline knowledge reformation order rules effective reducing number length generated propositional rules 
consequently total inference time solving cost order hypothetical reasoning problems significantly reduced 
idea preprocess part input line improve line efficiency employed williams nayak cadoli donini 
compilation methods restricted propositional case original kb expressed propositional logic 
contrast introduce effective way produce compact propositional theory order theory 
respect approach shares intuitions order planning propositional satisfiability framework kautz selman 
problem applies approaches presence constants translation order propositional infeasible 
problem pointed levesque imagines knowledge base constants 
focus foundational subset compilation techniques shown practical diagnostic tasks ishizuka 
near hyper system available free software 
anonymous referees helpful detailed comments 
special go colleague matsuo provided hypothetical reasoning engine experiments insightful comments 
author supported japan society promotion science 

marco cadoli francesco donini 
survey knowledge compilation 
ai communications 

john jack minker 
foundations semantic query optimization deductive databases 
jack minker editor foundations deductive databases logic programming pages 
morgan kaufmann publishers 

john 
knowledge object decomposition 
proceedings th international flairs conference flairs pages 

thomas eiter georg gottlob 
complexity logic abduction 
journal acm 

ishizuka matsuo 
sl method computing near optimal solution linear non linear programming cost hypothetical reasoning 
proceedings th pacific rim conference artificial intelligence pricai pages 

henry kautz bart selman 
pushing envelope planning propositional logic stochastic search 
proceedings th national conference artificial intelligence aaai 

hector levesque 
completeness result reasoning incomplete firstorder knowledge bases 
proceedings th conference principles knowledge representation reasoning kr pages 

alon levy richard fikes yehoshua sagiv 
speeding inferences relevance reasoning formalism algorithms 
artificial intelligence 

ishizuka 
networked bubble propagation polynomialtime hypothetical reasoning method computing near optimal solutions 
artificial intelligence 

helmut ishizuka 
preparing order knowledge base fast inference 
proceedings th international flairs conference flairs pages 

helmut ishizuka 
qualifying expressivity efficiency tradeoff reformation diagnosis 
proceedings th national conference artificial intelligence aaai pages 

maurizio alberto 
unfolding definition folding order avoiding unnecessary variables logic programs 
theoretical computer science 

gerhard 
relevance deductive reasoning critical overview 
editors classical logic 
academia press st augustin 

bart selman henry kautz 
domain independent extensions gsat solving large structured satisfiability problems 
proceedings th international conference artificial intelligence ijcai pages 

sutcliffe 
tptp problem library cnf release 
journal automated reasoning 

hisao tamaki sato 
unfold fold transformation logic programs 
proceedings nd international logic programming conference pages 

brian williams nayak 
model approach reactive self configuring systems 
proceedings th national conference artificial intelligence aaai pages 
