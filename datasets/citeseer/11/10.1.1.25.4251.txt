practical soft type system scheme andrew wright robert cartwright department computer science rice university houston tx cs rice edu 
rice university technical report tr december soft type systems provide benefits static type checking dynamically typed languages rejecting untypable programs 
soft type checker infers types variables expressions inserts explicit run time checks transform untypable programs typable form 
describe practical soft type system rs scheme 
type checker uses representation types expressive easy interpret supports efficient type inference 
soft scheme supports rs scheme including procedures fixed variable arity assignment continuations top level definitions 
implementation available anonymous ftp 
author supported part united states department defense national defense science engineering graduate fellowship 
second author supported nsf ccr texas advanced technology program 
dynamically typed languages scheme permit program operations defined computable subset data domain 
ensure safe execution primitive operations confirm arguments belong appropriate subsets known types 
types enforced primitive operations induce types defined operations 
scheme programmers typically strong intuitive ideas types program operations dynamically typed languages offer tools discover verify express types 
static type systems hindley milner type discipline provide framework discover express types 
static type checking detects certain errors prior execution enables compilers omit run time type checks 
unfortunately static type systems inhibit freedom expression enjoyed dynamic typing 
ensure safety programs meet stringent requirements type checker ineligible execution 
rejecting untypable programs type checker rejects meaningful programs prove safe 
equivalent typable programs longer complicated 
soft type systems provide benefits static typing dynamically typed languages 
static type checker soft type checker infers types variables expressions 
reject programs containing untypable fragments soft type checker inserts explicit run time checks transform untypable programs typable form 
run time checks indicate potential program errors enabling programmers detect errors prior program execution 
soft type checking minimizes number run time checks compiled code enabling dynamically typed languages attain efficiency statically typed languages ml 
developed practical soft type system rs scheme modern dialect lisp 
soft scheme extension hindley milner polymorphic type discipline requires programmer supplied type annotations 
presents types natural type language easy non expert programmers interpret 
type analysis sufficiently accurate provide useful diagnostic aid programmers system detected elusive errors source code 
type checker typically inserts run time checks necessary safe execution soft typing 
observed consequent speedups high quality scheme compiler 
soft scheme soft type system designed cartwright fagan idealized functional language 
type system extends hindley milner typing union types recursive types subtyping subset union types 
soft scheme includes major extensions technical results 
different representation types integrates polymorphism smoothly union types computationally efficient 
representation supports incremental definition new type constructors 
second improved check insertion algorithm inserts fewer runtime checks yields precise types 
third type system addresses features real programming language cartwright fagan study ignored 
particular treat uncurried procedures fixed variable arity assignment continuations exceptions top level definitions 
system augments scheme pattern matching type definition extensions facilitate precise type assignment 
safe implementations programming language guarantee terminate execution error message primitive applied arguments outside domain 
outline section illustrates soft scheme example describes type language shows reduction run time checking bench marks 
section formally defines soft type system functional core language 
section extends simple soft type system rs scheme describes pattern matching type definition extensions discusses problems 
sections discuss related 
soft scheme soft scheme performs global type checking rs scheme programs 
applied program type checker prints summary inserted run time checks 
type information may inspected interactively programmer interest 
program defines uses function flattens tree proper list define flatten lambda cond null 
pair 
append flatten car flatten cdr list define define flatten soft type checking program yields summary total checks 
program requires run time checks completely typable 
types top level definitions follow flatten rec nil cons gamma 
list cons nil cons num cons cons num nil cons num nil list num type reflects shape value abbreviates expression cons cons cons cons 
pairs constructed cons type cons delta delta 
empty list type nil type indicates proper list numbers 
type list num abbreviates rec nil cons num denotes fixed point recursion equation nil cons num 
flatten type gamma 
list indicates flatten procedure argument returning list 
argument type defined nil cons type variable standing type 
flatten accepts empty list pairs kind value flatten accepts value 
result returned flatten proper list elements type include pairs empty list 
suppose add lines program define car define map add define map add flatten proper list spine pairs ends right special constant called empty list 
type checking extended program yields summary prim prim prim error total checks error program requires run time checks primitive operations definitions modified program shows locations run time checks 
define check car define map check add define map error add flatten unnecessary check car inserted type checker unable establish type car applied pair 
check add indicates primitive may fail applied element 
error add indicates occurrence add succeeds reached fail 
presentation types type checker infers types encoded representation reduces limited form subtyping polymorphism 
soft scheme decodes types natural presentation types programmers 
presentation types precisely describe rich collection subsets data domain simple non expert programmers interpret 
conventional hindley milner type systems form types constants num nil constructors cons gamma type variables 
presentation types include recursive types restricted form union type 
presentation type union finite number type constants type constructions collectively called prime types 
type may include single type variable type num nil cons gamma 
prime type num nil cons gamma 
place holder call constants constructors forming prime types tags correspond type tags manipulated typical implementations dynamically typed languages 
types satisfy restrictions 
tag may union 
requirement precludes types cons true false cons false true precise type cons true false true false 
second set tags precede particular type variable 
example num nil cons appears type program variable expression primitive car extracts component pair 
valid input pair type list num rec nil cons num includes nil 
type appears list tags num nil cons 
special constructions called place holders may meet requirement types false gamma 
false 
requirement ensures range type variable excludes types built preceding tags 
type variable sole element union ranges types 
write 
recursive types introduced order recursion equations rec recursive type type rec nil cons type proper lists containing elements type type occurs frequently abbreviate list 
convention name recursive type variables yn 
types known scheme functions map gamma 
list gamma 
list member list gamma 
false cons list read rec num nil cons gamma 
eof num nil cons rec cons cons gamma 
cons cons higher order function map takes function type gamma 
list type list applies element returns list results 
function member takes key list searches occurrence returns sublist starting element exists returns false 
procedure read parses expression input device returning file object type eof input available 
returns pair non empty list 
appendix contains detailed examples 
performance soft scheme inserts run time type checks uses primitive operations proven safe 
summarizes run time checking scheme versions gabriel common lisp bench marks 
percentages indicate frequently system inserts run time checks compared conventional compilers 
static frequency indicates incidence run time checks inserted source code 
dynamic frequency indicates inserted checks executed 
note tak statically typable system require run time checks 
indicates real speedup soft scheme achieve high quality scheme compiler chez scheme unloaded sparcstation 
computed speedup chez scheme optimize level performs maximum optimization retaining safety 
potential speedup maximum obtainable speedup achieved discarding run time checks optimize level 
obtained scheme repository nexus yorku ca 
optimize level retains argument count checks checks primitives assoc member 
static frequency dynamic frequency boyer ffl boyer ffl browse ffl browse ffl ffl ffl ffl ffl ffl ffl deriv ffl deriv ffl destruct ffl destruct ffl div ffl div ffl fft ffl fft ffl puzzle ffl puzzle ffl tak ffl tak ffl ffl ffl ffl ffl traverse ffl traverse ffl reduction run time checking gabriel bench marks potential ffl achieved boyer ffl browse ffl ffl ffl ffl deriv ffl destruct ffl div ffl fft ffl puzzle ffl tak ffl ffl ffl traverse ffl speedup gabriel bench marks achieved speedup indicates performance soft typed program achieves sacrificing safety 
puzzle illustrates dramatic benefit speedup obtained removing run time type checks inner loops 
soft scheme significantly decreases run time checking bench marks programs written soft typing mind 
reduction lead significant performance improvement depends code containing eliminated checks executed 
programs browse traverse example expose type information enable type checker remove critical run time checks inner loops 
discuss developed extensions scheme facilitate precise type inference 
extensions develop programs avoid run time checks performance critical 
formal framework step formal description soft type system define idealized dynamically typed call value language embodying essence scheme 
core scheme syntax ap check ap exp lambda val id identifiers const constants 
const includes basic constants numbers primitive operations add cons car 
keywords ap check ap introduce unchecked checked applications explained 
programs closed expressions 
core scheme includes unchecked checked versions primitive operation 
invalid applications unchecked primitives ap add ap car meaningless 
implementation produce arbitrary results ranging core dump erroneous apparently valid answers 
checked primitives observationally equivalent corresponding unchecked versions invalid applications checked primitives terminate execution answer error 
example ap check add yields error 
similarly ap check ap introduce unchecked checked applications undefined resp 
yield error subexpression procedure 
appendix contains formal operational semantics core scheme 
designing soft type system core scheme challenging technical problem 
conventional hindley milner type systems weak infer precise types dynamically typed languages presume monotypes disjoint 
contrast values dynamically typed programs belong different types dynamically typed programs routinely exploit fact 
subsections define collection static types static type inference system permits union types expressed terms free algebra just conventional hindley milner types 
flag variables enable polymorphism encode subtyping subset union types 
third subsection indicates translate general types presentation types 
subsection adapts static type system soft type system core scheme 
static types construct static type system core scheme partition data domain disjoint subsets called prime types 
partitioning determined domain equation defining data domain core scheme num phi true phi false phi nil phi omega phi sc 
domain constant right hand side equation identifies prime type 
similarly application domain constructor domains identifies prime type 
static types reflect partitioning data domain 
static type oe disjoint union zero prime types oe followed single type variable ff empty type oe fn oe ff phi denotes coalesced tagged sum scott domains omega denotes strict cartesian product sc strict continuous function space constructor lifting construction domains 
tag true false nil cons prime type flag indicates prime type part union type 
flag indicates prime type indicates absent flag variable indicates prime type may absent depending flag variable instantiated 
example num means numbers num nil means numbers num nil ff means numbers ff ff 
true false means procedures ff boolean 
formed types tidy tag may union 
precisely tidy type form oe ff ff oe oe fg type flag ff fi typevar tag typevar disjoint sets type variables flag variables 
arity term oe oe determined arity tag superscript labels attached types sets tags unavailable type ensure types tidy 
example phrase num num formed type term num violates restriction formation unions 
top level types label 
usually omit labels writing types 
similarly implementation type system need manipulate labels 
types represent regular trees tags tidy union operator internal nodes 
recursive types ff represent infinite regular trees 
type ff binds ff usual renaming rules apply bound variable ff ff ff 
ff 
recursive types formally contractive phrases ff ff types 
type fi nil cons ff fi denoting proper lists ff common recursive type 
accommodate polymorphism subtyping introduce type schemes type scheme ff type variables ff bound omit bound variables types subset type schemes 
type schemes describe sets types substitution bound variables 
substitution finite label respecting map type variables types flag variables flags 
st means simultaneous replacement free variable type flag image type instance type scheme ff substitution oe ff oe dom ff example num 
num instance ff ff ff substitution fff 
num infix notation write oe oe 
oe oe procedure types 
mapping type variables types label preserves 
emy discovered polymorphism encode limited form subtyping 
framework polymorphism express supersets subsets types 
type scheme ff num ff may instantiated type superset num num num true num true false 
type scheme num nil may instantiated type denotes subset num nil types num nil num nil num nil num nil ability encode supersets subsets assigning types basic constants primitives 
basic constants outputs primitives may type superset natural type 
unchecked primitives require inputs subsets largest allowable input types 
function typeof maps constants core scheme type schemes describing behavior 
encoding unions type varies union occurs negative input positive output position 
position positive occurs argument number constructors negative occurs odd number 
recursive types position positive negative assume primitives types 
unchecked primitives negative unions encoded variables valid inputs invalid inputs 
positive unions outputs variables absent fields 
example typeof ff num ff typeof add ff ff num 
num ff ff typeof number 
ff ff ff ff 
true false ff ff checked primitives similar types unchecked counterparts accept values 
example typeof check add ff ff ff num ff 
num ff ff static type inference defines type inference system assigns types core scheme expressions 
type environments finite maps identifiers type schemes 

denotes functional extension update fv returns free type flag variables type fv extends pointwise type environments 
typing states expression type type environment provided types assigned typeof agree semantics core scheme prove static type system sound 
appendix defines reduction relation gamma 
program yields answer ii diverges iii yields error iv gets stuck reaches non value normal form ap add 
type soundness ensures typable programs yield answers expected type get stuck 
const oe typeof var oe ap ap cap check ap lam 
lambda 
close close ff ff fv gamma fv type inference theorem type soundness diverges gamma 
error gamma 
proof 
wright felleisen technique subject reduction 
translating presentation types types assigned type system awkward read 
palatable types programmer define translation succinct presentation type language introduced section 
translation eliminates variables encode subtyping ii flags 
decoding translation straightforward adaptation described cartwright fagan 
soft type checking preceding static type system statically type check core scheme programs 
type system reject programs contain incorrect uses unchecked primitives ensuring safe execution 
type system reject meaningful programs safety prove 
persuade type checker accept untypable program programmer manually convert typable form judiciously replacing unchecked operations checked ones 
soft type checker automates process 
defines soft type inference system core scheme programs 
system assigns types computes transformed expression unchecked primitives applications replaced checked ones 
soft typing states type environment expression transforms type function assigns type schemes constants 
checked primitives basic constants assigns type schemes typeof unchecked primitives assigns type schemes include special variables called absent process statically typed languages ml hindley milner type discipline provides insufficient monotypes 
add explicit definitions union recursive types injections types projections 
extra injections projections increase conceptual complexity programs introduce additional run time overhead 
const oe dom check var oe ap ap ap check ap cap check ap check ap lam 
lambda lambda 
ff ff fv gamma fv soft type inference variables 
absent variables record uses unchecked primitives may safe 
function typeof places flag term input type primitive places corresponding absent flag variable absent type variable ff 
example add ff ff ff num ff 
num ff ff absent variable instantiated non empty type type assignment process corresponding primitive application checked 
example expression ap add instantiates absent variable ff type add true true empty application add checked 
contrast expression ap add instantiates ff run time check necessary 
function empty rules const ap determines member set types empty 
simple syntactic test absence flags 
ensure non empty argument types propagate intervening expressions primitives may require run time checks absent variables generalized 
substitutions map absent flag variables absent flags absent type variables absent types ff fv ae fv ae simple example demonstrates restriction necessary 
expression add ap requires add checked applied value typing expression add assigned type num ff ff fresh variables 
suppose generalized absent variables 
generalizing type add yield type scheme ff num ff typing application ap ff instantiated true fi 
instantiating ff affect ff type add run time check inserted 
section describes better method inserting checks allows absent variables generalized 
appendix presents correspondence theorem establish correctness soft type system 
practical implementation practical soft type system address features real programming language 
section extends simple soft type system rs scheme 
extensions scheme enable precise type inference discuss problems 
typing scheme scheme procedures may fixed arity accept unlimited number arguments 
certain primitives accept trailing optional arguments 
encode procedure types binary constructor gamma 
argument argument list 
argument lists encoded binary constructor arg constant 
type gamma 
merely abbreviates arg arg arg gamma 

variable arity procedure types recursive argument lists 
consequence encoding run time checks caused applying procedures wrong number arguments distinguished run time checks 
check lambda inserted lambda expression requires argument count checking 
practice find argument count checks indicate program errors 
assignment continuation operator call cc important features scheme 
solutions typing assignment continuations polymorphic framework 
prototype uses simplest method restricts polymorphism expressions bound expression syntactic value 
scheme expressions values contain application non primitive function impure primitive cons call cc 
prototype call cc type gamma 
gamma 
gamma 

call cc may require run time check reasons value call cc applied type gamma 
gamma 
procedure argument ii continuation obtained type gamma 
treated procedure argument 
case handled usual inserting check call cc 
address second case replace occurrence call cc program expression lambda call cc lambda lambda transformation composition expansions introduces explicit lambda expression continuation 
expression lambda checked continuation may 
scheme program sequence definitions may refer forwards backwards definitions 
obtain polymorphism definitions topologically sort program definitions strongly connected components 
components form tree may organized nested letrec expressions typed usual manner 
extensions scheme prototype includes natural extensions scheme enable precise type assignment 
pattern matching enables type checker learn type tests 
example expression pair 
car check necessary car 
type system assigns types variables occurrence car type occurrence type includes num run time check inserted 
contrast equivalent code match couples type test decomposition extending type system directly type pattern matching expressions avoid unnecessary run time check 
improve treatment ordinary scheme programs pattern matching translate simple forms type testing expressions equivalent match expressions 
second extension scheme type definition facility allows new type constructors 
expression define structure foo defines constructors predicates selectors mutators data type foo delta delta delta 
programs type definitions assigned informative precise types encode data structures lists vectors 
similar facility defines immutable data 
problems identified problems system result imprecise typing 
tidy union types express common scheme types 
decidable type system express computable subsets data domain 
rs scheme primitives tidy union type 
map arbitrary number arguments apply arguments append element list vector initial value 
handled overly restrictive type inserting unnecessary run time checks 
prefer ban uses vector initial value 
feel type language provides balance simplicity expressiveness 
expression match pat pat en compares value patterns pat pat variables matching pattern pat bound corresponding parts value evaluated extended environment 
pattern pat pat matches pair components match pat pat pattern matches 
reverse flow typing rules require types subexpressions identical 
instance expressions require clauses type applications require types arguments match types function expects see rules ap cap 
consequently type information flows counter direction value flow 
reverse flow cause inaccurate type inferred accurate tidy union type exists 
example function define lambda inferred type false ff 
false ff ff constant forces false type input type subtyping provided polymorphism fails applications argument forced include false type type include false false ff 
false ff ff inferred subtyping uses method inserting run time checks described subsection exacerbates reverse flow problem 
insertion run time check cascade forcing insertion unnecessary run time checks 
example program requires run time checks add lambda program type scheme ff ff num ff 
num ff ff suppose add application 
absent variable ff generalized expression replaced true ff run time check inserted add 
input type num true ff reverse flow application forces type include true receives unnecessary run time check 
prototype avoids cascading better technique insert run time checks 
absent variables generalized expressions manner ordinary variables 
generalized absent variable instantiated instance type recorded 
primitive requires run time check instance types absent variables non empty 
instance type non empty contains flag instances non empty 
extra bookkeeping required technique minimal 
improvement typing precision attendant reduction run time checking significant 
investigated adaptations structural subtyping address reverse flow problem 
structural subtyping powerful encoding subtyping polymorphism permits subtyping function applications 
permitting subtyping soft type systems structural subtyping infer precise types 
experience date systems disappointing 
yield small improvement precision existing extensions recursive types yield principal types 
minor improvement comes cost significantly efficient type inference 
continue investigate adaptations structural subtyping 
assignment assignment interferes polymorphism subtyping assignment major source imprecision 
scheme includes assignable variables set set assignable pairs set set car 
set cdr 
assignments local variables seldom cause trouble 
assignments global variables pairs disable subtyping may cause accumulation large inaccurate types 
immutable pairs possible adequately addresses problem set car 
set cdr 
satisfactory solutions global variable assignments 
related practical soft type system soft type system designed cartwright fagan idealized functional language 
cartwright fagan discovered incorporate limited form union type hindley milner polymorphic type system 
method encoding technique emy developed reduce record subtyping polymorphism 
system essentially types section describes type variables label 
type false ff 
false ff ff label represented enumerating tags place ff false num cons ff ff 
false num cons ff ff types difficult decode natural type language flags 
representation support incremental definition new type constructors type inference particularly efficient simple types large representations 
aiken wimmers developed sophisticated soft type system functional language fl 
system supports rich type language including tidy unions recursive types subtype constraints intersection types conditional types 
opportunity analyze system detail clear system assigns precise types programs system 
timing results complexity algorithm indicate slower 
system extended imperative languages assignment control implemented efficiently serve basis stronger soft type system scheme 
researchers developed static type systems extend hindley milner type discipline adding maximal type type untypable phrases 
framework imprecise form basis soft type system support union types inferred recursive types 
frequency assigned type phrase prevents reliable indicator potential program errors 
henglein formulation static typing enhanced eliminate run time checks scheme programs 
designers optimizing compilers scheme lisp developed type analyzers data flow analysis 
information gathered systems important program optimization coarse serve basis soft type system 
systems infer polymorphic types infer types simple unions type constants 
developed practical soft type system scheme 
soft scheme available anonymous ftp titan cs rice edu file public wright soft tar pattern matching type definition extensions scheme may independently soft scheme available file public wright match tar current implementation processes entire program inferring type information inserting run time checks 
system suited large scale software development 
investigating soft module systems enable separate type checking compilation different parts program 
kent dybvig extended chez scheme overnight permit mixing checked unchecked primitives 
assistance observed real execution time speedup 
aiken wimmers type inclusion constraints type inference 
proceedings international conference functional programming languages computer architecture 
aiken wimmers lakshman soft typing conditional types 
proceedings st annual symposium principles programming languages january appear 
beer preliminary report practical type inference system common lisp 
lisp pointers 
cartwright fagan soft typing 
proceedings sigplan conference programming language design implementation june 
clinger rees revised report algorithmic language scheme 
acm lisp pointers iv july september 
fagan soft typing approach type checking dynamically typed languages 
phd thesis rice university october 
gomard partial type inference untyped functional programs 
proceedings acm conference lisp functional programming june 
henglein global tagging optimization type inference 
proceedings acm conference lisp functional programming june 
hindley principal type scheme object combinatory logic 
transactions american mathematical society december 
kaes type inference presence overloading subtyping recursive types 
proceedings acm conference lisp functional programming june 
kaplan ullman scheme automatic inference variable types 
journal association computing machinery january 
kind friedrich practical approach type inference 
lisp symbolic computation august 
ma kessler type inference system common lisp 
software practice experience june 
milner theory type polymorphism programming 
journal computer system sciences 
mitchell type inference simple subtypes 
journal functional programming july 
preliminary version coercion type inference proc 
th annual symposium principles programming languages pp 

keefe wand type inference partial types decidable 
proceedings european symposium programming lncs springer verlag pp 

emy typechecking records variants natural extension ml 
proceedings th annual symposium principles programming languages january 
emy type inference records natural extension ml 
tech 
rep inria may 
shivers control flow analysis higher order languages 
phd thesis carnegie mellon university may 
tech 
rep cmu cs 
thatte type inference partial types 
automata languages programming th international colloquium lncs july springer verlag pp 

thatte quasi static typing 
proceedings th annual symposium principles programming languages january 
tiuryn wand type reconstruction recursive types atomic subtyping 
tapsoft theory practice software development berlin new york apr 
gaudel 
jouannaud eds springer pp 

wright polymorphism imperative languages imperative types 
tech 
rep rice university february 
wright felleisen syntactic approach type soundness 
tech 
rep rice university april 
appear information computation 
appendices examples simple functions inferred types 
functions require run time checks passed arguments intended domain 
define map apply function element list lambda null 
cons car map cdr gamma 
list gamma 
list define member search key list lambda match rest equal 
member rest list gamma 
false cons list define find pair non empty list lambda pair 
cdr cdr rec cons cons gamma 
cons cons define subst substitution trees lambda new old cond eq 
old new pair 
cons subst new old car subst new old cdr rec cons gamma 
define append lambda cond null 
null 
cdr car loop car null 
apply append cdr cons car loop cdr list gamma 
list define taut 
test tautology lambda match 
procedure 
taut 
taut 
rec false true false true gamma 
gamma 
false true aiken wimmers define fixed point combinator lambda lambda lambda lambda lambda lambda gamma 
gamma 
gamma 
gamma 
gamma 
define find element list lambda lambda null 
cdr car cdr cons list gamma 
operational semantics reduction relation specifies operational semantics core scheme neglecting pairs easy add gamma 

apply lambda gamma 

fi apply gamma 
ffi prim ffi val ffi apply gamma 
error prim ffi error wrong prim check ap gamma 
error prim wrong ap apply ap check ap prim ae const set primitive operations 
reduction relation depends definition evaluation contexts apply apply evaluation context expression subexpression replaced hole 
expression obtained placing hole definition evaluation contexts ensures applications evaluate left right non value expression uniquely decomposed evaluation context redex 
partial function ffi prim theta interprets application primitives 
set closed values error value 
checked primitives check require ffi check defined closed values unchecked primitives ffi may undefined arguments yield error 
corresponding pairs unchecked checked primitives check require ffi ffi check agree ffi undefined ffi check yields error ffi check ffi ffi error ffi undefined 
ffi returns error application checked primitive error immediately answer program reduction wrong prim 
similarly checked applications non procedural values yield error reduction wrong ap 
unchecked operations evaluation lead normal form value error 
normal forms arise unchecked primitive applied argument defined ap add subexpression unchecked application procedure ap 
say expression stuck gamma 
reflexive transitive closure gamma 
say diverges infinite reduction sequence gamma 
gamma 
gamma 
closed expressions yield answer closed value ii diverge iii yield error iv stuck 
lemma closed expressions gamma 
closed diverges gamma 
error gamma 
stuck 
correspondence prove soft typed program original program equivalent recall evaluation possible outcomes 
program may yield answer ii diverge iii yield error iv get stuck 
mean may checked operations 
specifically reflexive transitive compatible closure relation check ap check ap soft type checking lifts invalid programs get stuck error 
theorem correspondence gamma 
gamma 
diverges diverges gamma 
error gets stuck gamma 
error proof 
need lemmas 
shows type static type system 
lemma lemma proved induction structure deduction second program fewer checked operations performs evaluation steps may stuck sooner 
lemma simulation 
gamma 
gamma 

gamma 
error gamma 
error 
stuck gamma 
error stuck 
gamma 
error gamma 
error stuck 
stuck stuck 
lemma proved case analysis structure expressions 
lemmas establish theorem 
induction case analysis rules 
induction simulation 
gamma 
gamma 

diverges diverges 
gamma 
error gamma 
error 
gets stuck gamma 
error gets stuck 
gamma 
error gamma 
error gets stuck 
gets stuck gets stuck 
lemma type soundness get stuck 
simplifying discarding obtain theorem 
compatible closure relation contexts context expression hole place subexpression 

