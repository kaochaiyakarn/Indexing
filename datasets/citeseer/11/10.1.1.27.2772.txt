regions linear types preliminary notes david walker kevin watkins carnegie mellon university explore di erent mechanisms reasoning state linear typing type region ect discipline complement design strongly typed functional programming language 
basis language simple lambda calculus containing rst class regions explicitly passed arguments functions returned results stored user de ned data structures 
order ensure appropriate memory safety properties draw literature linear type systems help control access deallocation regions 
fact di erent interpretations linear types multiple values freely copied discarded multiple values explicitly counted show interpretations give rise interesting invariants manipulating regions 
explore new programming paradigms arise mixing rst class regions conventional linear data structures 
classic challenges programming languages research design mechanisms help programmers reason behavior code presence imperative operations update deallocation memory 
past years techniques solving problem repeatedly success particularly domain functional programming languages 
girard linear logic related linear type systems syntactic control interference control sharing number uses important computer resources memory :10.1.1.16.2984
systems possible deallocate reuse storage safely 

moggi computational lambda calculus separates pure values computations monads 
idea forms basis adding imperative features pure functional languages haskell 
research sponsored part advanced research projects agency title fox project advanced languages system software arpa order 
issued esc ens contract 

views contained document authors interpreted representing ocial policies expressed implied defense advanced research projects agency government 

type ect discipline developed gi ord lucassen re ned jouvelot talpin tofte uses type system type inference techniques track accesses resources 
order analysis feasible resources normally grouped regions 
tofte regions ects perform memory management operations ml compiler 
researchers begun investigate relationships fundamental mechanisms 
example chen hudak discovered connection linear types monads wadler correspondence monads ect systems 
ll third side triangle exploring synergy linear types region type ect systems speci cally purpose exploring new techniques safe static memory management 
new type system safe static memory management starting point development simple functional programming language contains explicit programmer controlled regions 
region simply unbounded area memory address space values function closures lists pairs may allocated 
sole purpose regions group objects similar lifetimes 
object region needed complete rest computation region objects contained may deallocated 
experimental results indicate batch style deallocation ecient practice rivaling best implementations malloc free :10.1.1.32.6278
previous approaches region memory management regions ordinary programming objects special status 
particular ordinary objects regions rst class may stored data structures may passed explicitly procedures 
regions special status may immediately apply known techniques linear type systems track number uses regions just linear types track number uses functions pairs 
number uses information variety ways concentrate applications memory management 
main idea programming object time object may safely deallocated memory may reused ecting rest computation 
furthermore object region implies region case region time region contents may safely deallocated 
main contribution explore ways regions linear types specify enforce wide range memory management invariants 
main technical results arise observations 
varying operational interpretation linear types possible develop radically di erent region type systems 
speci cally contrast language types turner multiple objects may freely copied discarded chirimar gunter riecke interpretation intuitionistic linear types multiple objects counted 
rst interpretation gives rise purely static mechanism ensuring memory safety 
believe resulting language encode tofte talpin original region type system 
second interpretation gives rise new dynamic memory management system 
derived new system directly chirimar novel core language regions 
independently niss henglein developed related counting system rst principles currently working type inference techniques language 
address issue type inference leaving topic source language questions 
second key observation treat regions ordinary objects apply linear typing discipline uniformly entire language free develop new programming paradigms mix linear regions linear data structures 
example freely mix regions linear types easily de ne linear list regions region contains complex data structure binary tree 
case nodes particular tree managed unit nodes may alias tree managed independently tree may alias trees counted 
existing type system gives programmers exibility alternate coarse grained memory management nodes trees ne grained memory management trees 
traditional linear type systems aliasing disallowed traditional region type systems objects container data structure inhabit region 
similar limitations arise programming mutable data structures traditional region type systems objects stored mutable data structure inhabit region wildly di erent lifetimes 
developed related techniques handle problem 
remainder article language regions linear types detail 
section describes core calculus including features allocating deallocating linear regions pairs functions 
linear types language types turn derived girard logic unity 
types correct starting point exploration topic quite exible purposes 
add construct language derived wadler operator 
new operator encode tofte talpin original type system 
section describes machine executes programs language 
speci es evaluation relation machine static semantics machine states 
section extends language counted regions 
wadler comes handy permits de ne form deferred counting 
give static operational semantics extensions 
section extends language time lists 
main goal section demonstrate programmers safely mix linear types regions counting implementation complex data structures 
section introduces mutable data structures shows interact regions linear types 
section discusses related section concludes 
core language core language arises synthesis particular linear type system types turner somewhat new variant tofte talpin region type system 
types rst explain choice linear type system proceed augment language types types regions 
types subtly di erent type systems rst approximation called linear 
di erences may appear small result signi cantly di erent memory management properties 
true linear type systems type systems pulled curry howard isomorphism girard linear logic abramsky intuitionistic linear type system contain collection multiplicatives including function type requires argument exactly pair component exactly 
order retain expressiveness ordinary intuitionistic calculus single operator 
possible duplicate arguments function components pair 
unfortunately appears type system operational semantics satisfying memory management properties 
turner wadler demonstrate working type system choice order useful intuitionistic object complete copy object case language admits ective way share objects copy intuitionistic object time way guarantee safe deallocate objects linear type 
application allow sharing regions contain unbounded number objects copying expensive 
type system support explicit deallocation equally important 
consequently true linear type system 
slightly di erent system types storable objects functions pairs variants linear variant classi es objects referenced exactly pointer exactly 
intuitionistic variant classi es objects unlimited number times including 
sorts functions sorts pairs need modality 
write generic functions quali er 
indicating intuitionistic function may times indicating linear function exactly 
single closure containing function free variables deallocated 
likewise write generic pair types 
linear pair deallocated components projected 
normally suppress 
annotation intuitionistic types 
write int int intuitionistic pair integers 
formal type assume may times 
introduced variants just variants types assume cost implementation need allocate store need de ne linear variant 
examples freely base types integers 
simplicity include multi argument functions language 
simulate easily single argument functions accept linear pairs arguments 
examples write int int int write continue terms linear intuitionistic despite loose connections intuitionistic linear logic 
notice function times 
type systems directly linear logic function types say arguments 
number uses argument determined exclusively argument type 
int int int order preserve single invariant linear objects necessary ensure intuitionistic objects contain linear objects 
term formation rules help maintain invariant preventing linear assumptions captured intuitionistic closures 
rules discussed detail section 
addition consider intuitionistic pairs linear component types syntactically ill formed 
regions regions unbounded extents memory hold groups objects 
region unique name denoted meta variable identify region objects contains 
purposes regions just storage objects 
region name type may quali ed linear intuitionistic rgn 
region linear type may deallocated 
value allocated region name type value tagged 
example closure type similarly pairs 
sake uniformity formal language assume stored objects allocated region function product types annotated region 
examples assume global top level region named deallocated normally omit annotations 
order functions contexts polymorphic respect names region arguments polymorphic function considered linear intuitionistic underlying monomorphic function linear intuitionistic 
example intuitionistic function pair allocates pair integers argument region type int rgn 
int int wish de ne functions return new regions allocated 
purpose existential type 
simplest function takes argument returns new region rgn traditional region type systems disallow objects existential type existentials allow regions escape scope de nition normally deallocation linked scope region de nition 
system similar want able deallocate intuitionistic regions place constraints way ow programs 
restrict ow linear regions simply ensure linear regions duplicated 
existential type permitted hide name linear region permitted hide name intuitionistic region 
existential types linear meaning may opened exactly 
explain rules manipulating existentials detail section 
fairly straightforward functions polymorphic types regions simplicity omit degree freedom 
type contexts 

qualifiers 
types rgn 
intuitionistic types rgn 
linear types rgn 
syntax types summary type syntax summarizes syntax type language 
documents subset types ranged meta variable refer intuitionistic disjoint subset linear types ranged meta variable types terms considered equivalent renaming bound variables 
implicitly assume type contexts 
contain repeated region names 
concatenate type contexts notation 


region names common notation unde ned 
summarizes formedness conditions types 
conditions judgment form 
expressions presents expression syntax 
usual syntax includes variables elimination forms type object 
include forms expression 
rst standard second special explained 
expressions best explained conjunction typing rules proceed typing rules auxiliary de nitions 
type checking contexts typing rules expressions form 
list assumptions concerning free type variables assume variable repeated explicit structural rules exchange contraction weakening control reordering duplication discarding assumptions type system relies nondeterministic operation splits linear assumptions contexts splitting operation de ned 
write abbreviation 
rgn 










formed types value contexts 
expressions 

letx pack unpack alloc free letx syntax expressions notation 
types intuitionistic 
unrestricted 
notation prevent intuitionistic object containing linear objects 
typing rules expressions typing rules expressions derived consideration main invariants 
object linear type exactly 

access region allocation region object region accompanied proof region live 

intuitionistic regions escape scope intuitionistic region introduced 
rst invariant enforced mainly careful manipulation type checking context nondeterministic splitting operator 
second invariant enforced requiring program region time region accessed 
subsequently ensure region region live 
third invariant enforced ensuring intuitionistic regions appear type data structure contains 
nal invariant ensures possible perform type analysis prevent stored intuitionistic regions escaping scope de nitions 
figures typing rules expressions 
rst rules involve regions normal natural deduction style typing rules linear lambda calculus 
rule variables requires contexts contain intuitionistic variables linear variables go unused 
rule unit similar 
rule sequencing 
uses splitting operator divide linear variables rst second expressions sequence 
rules pairs functions complex worry accessing regions 
pairs simpler explain rst 
pairs allocated expression compute values form components pair 
pair allocated region denoted expression typing rule sequencing splitting operator divides linear variables expressions 
details notice rule 
third expression type rgn type intuitionistic region 
allow allocation linear region want allocation single linear region 
point allocating object region 
impossible object 
moment de ne ways organize language access linear regions allowed access constitute single linear region 
example allocation operation return pair allocated object region 
solution considered lead complicated operational semantics 
operation temporarily converts linear regions intuitionistic regions order allow access linear regions having deallocate 
second subtle important aspect rule explicitly maintains invariant intuitionistic objects case intuitionistic pairs contain linear objects 
formedness judgment result type expression 
pair quali er 
constraint speci es component types linear 
elimination form pairs letx projects components pair binds continuing expression pair inhabit region computed expression region needed run time implement projection function 
compile time serves witness continued existence region pair contained 
implementation optimize away runtime overhead passing region ignore region optimization proposed birkedal concern details 
form pairs type accessed region required intuitionistic 
escaping regions function closures existential packages explain typing rules functions existentials clarify invariants govern intuitionistic linear regions 
typical intuitionistic linear lambda calculus impossible reclaim resources construct intuitionistic objects resorts meta linguistic tools garbage collector 
language possible reclaim intuitionistic functions pairs place linear regions 
ensure data structures eventually collected nd way collect intuitionistic regions 
principle solution similar original solution proposed tofte talpin 
key idea prevent usable intuitionistic regions escaping particular program scope forcing data structure contains region declare names regions type 
region appear types data structures contain possible detect escaping analyzing type data structure 
guarantee region escape particular scope safe deallocate region control exits scope constructed language region access requires region proof region live 
careful function closures able capture intuitionistic regions revealing type closure 
tofte talpin solve problem isolating regions separate syntactic class values annotating functions latent ect includes regions stored function closure 
approach similar de ne separate syntactic class regions 
require functions closed respect intuitionistic regions 
function wants access value intuitionistic region region explicitly passed argument function 
latent ect function represented part type function argument 
regions ordinary rst class values natural elegant design 
closure requirement enforced predicate closed pronounced region closed respect de ned 
closed true closed rgn false closed rgn true closed rgn true closed 
true closed closed closed closed closed notation closed pronounced region closed closed regions 
lift de nition region closed pointwise contexts de nitions interpret typing rules functions see gure 
splitting operator partitions linear assumptions context check function body computation generates region closure allocated 
closure intuitionistic object rule linear objects inside intuitionistic objects context check function body contain linear variables 
context region closed 
rule function application ensures region name arguments 
match expected region name parameters argument expected type 
presence region attests fact region containing function closure deallocated 
existential types pose similar diculties similar solutions function closures 
fact due minamide morrisett harper encoding function closures existential packages existential types may viewed real source problem escaping regions 
ensure intuitionistic regions restricted particular program scope require type closed respect intuitionistic regions named form existential type pack expression 
formed existentials normally contain linear regions restricted particular scope 
elimination form existentials standard unpack expression 
region allocation deallocation covered elimination forms standard types regions remain see gure typing rules 
alloc primitive generates new linear region fresh name 
intuitively type rgn formally special constant type sake convenience add allocation primitive 
free operation consumes linear region 
naturally type rgn 
add primitive language 
intuitionistic regions introduced eliminated single syntactic form inspired wadler construct 
operationally evaluate expecting linear region named 
region bound may result evaluating bound may linear region bound potentially rule rely alpha conversion bound region names function type 
constant need nd region hold function 
region add region system formally 
possibility satisfying know type structure captures region allocation exactly 
multiple times take great care ensure way region deallocated early 
rst expression intuitionistic type rgn typing rule constrains type region closed respect intuitionistic escape linear type rgn 
region ow justifying linear type 
complete typing rule construct gure 
tofte talpin letregion close connections introduced wadler modi ed tofte talpin letregion 
constructs type escape analysis ensure safety 
wadler rst introduced idea linear lambda calculus notion region name analysis imprecise 
region names form singleton type precise classi er regions modi ed construct ective 
fact believe possible idea encode tofte talpin letregion construct calculus 
informally translation quite straightforward letregion unpack alloc free expression translation conjecture formal translation tofte talpin calculus straightforward worked exercise 
machine programs language execute machine 
machine state includes region names may 
description store includes collection allocated regions collection values inhabiting regions nally expression evaluated 
syntax machine states 
order facilitate proof type system sound extend source language type system machine giving formedness conditions machine states store stored values 
inference rules formed machine states gure 
main purpose rules guarantee simple facts region region name 
stored values formed 
expression executed formed respect current store 
typing rules stored values derived directly corresponding source level expressions 
formal rules may gure 





rgn closed 



rgn 





rgn 


rgn 

letx 

pack closed 



unpack fv formed expressions 

alloc rgn 
rgn 
free 



letx 
rgn 
rgn 
rgn 
closed formed expressions continued stored values 
ei hx pack expressions 
region heaps 

rgn value heaps 

stores machine states 
machine 

ei 





hx 

pack 
rgn 
rgn formed stored values program 
store 

program 
store 


store 

rgn rgn 




formed machine states order facilitate proof type soundness added run time expression language 
runtime expression natural extension programming construct indicated operational semantics machine evaluated expression produced address continues evaluation allocates new objects new objects stored local heap evaluated value local heap promoted global store enclosing local store 
organization facilitates proof escape computation typing rule runtime expression extends earlier rule special construct account local heap 
rgn 
rgn 
rgn 
closed operational semantics subsection de nes operational semantics machine 
operational semantics really quite straightforward powerful language need de ne fair amount notation give concise speci cation various operations regions linear intuitionistic objects 
notation add binding store 
notation de ned appear domain store 

rgn 
rgn 

extend notation natural way allow sequences bindings added store extends extends operation selects object address store appear store operation unde ned 
operation de ned 

rgn rgn 
intuitionistic object remains store 
linear object deallocated 
operations intuitionistic objects linear objects implement behavior 
add universal polymorphism types language believe encode entire language 
universal polymorphism types language encode polymorphism types ects tofte talpin calculus constructs appear straightforward 

rgn 
de ne operational semantics need de ne evaluation contexts 
de nition standard 
notice evaluation context form operational semantics fact 




letx letx pack unpack alloc free letx operational semantics language mapping machine states machine states 
mapping gure 
general form evaluated choosing fresh address extending store appropriate value allocated address 
allocating region operational semantics veri es exists live region name 
elimination form projection function call evaluated looking pair function store ensuring region inhabited pair function alive nally appropriate action 
unusual evaluation rule second form 
evaluation forms ect adding local heap global store evaluation subterm 
properties core language intend prove type soundness result language 
research indicates obtain result syntactic techniques 
fact intentionally organized operational semantics hierarchical nature region store implicit insights thiemann believe decision proof quite straightforward 
currently investigating possibility formalizing result linear logical framework 
counting far implementation intuitionistic linear type system allows objects intuitionistic type shared may pointers objects 
objects linear type hand unshared may collected immediately 
decisions lead completely static memory management discipline 
unfortunately lack aliasing reusable linear objects disadvantages necessary copy linear objects situations preserve single pointer invariant copying lead unnecessary memory 
fresh address mean address appear domain store 
freshness constraint implicit formal rules 










ei rgn 



rgn 


hx rgn 
letx 
hx rgn 
pack 

pack 
unpack 
pack 
alloc 

rgn pack rgn 
free 
rgn 
letx 






operational semantics types 
rgn linear types 
rgn expressions 
alloc dec contexts 
alloc dec regions 

hn rgn 
xn 
syntax counting constructs alternatively necessary convert linear regions intuitionistic regions signi cant portions program delay region deallocation point region semantically dead 
chirimar gunter riecke proposed entirely di erent model linear logic 
counting keep track number pointers object 
linear type system ensures counts maintained accurately 
counts add dynamic component memory management system complements purely static approach 
having copy objects convert linear regions intuitionistic regions possible manipulate counts 
general augment calculus previous sections third quali er manage regions pairs closures heap allocated objects counting 
simplicity concentrate exclusively counted regions 
new language constructs 
new type counted regions considered linear assumptions type may implicitly duplicated discarded 
counts explicitly duplicated function explicitly decremented freed count reaches zero dec function 
de nes additional rules formed types expressions 
previous sections operator possible temporarily treat linear regions intuitionistic ones avoid costly copying 
construct temporarily increase counts runtime cost having actual increment operation 
words conventional interpretation intuitionistic types conjunction counting obtain form deferred counting 
trick conveniently allows reuse allocation access rules pairs closures counted regions sorts regions 
operational semantics operational semantics counting expressions gure 
notice semantics increment decrement operations relies auxiliary functions 
auxiliary functions unde ned store proper form 
operations language remain essentially unchanged 
order allow access counted regions need extend store access function slightly careful ensure counted objects contain intuitionistic objects linear objects counted objects 
may accomplished identical techniques previous sections ensure intuitionistic objects appear inside intuitionistic objects 
alternatively allow linear counted objects inside counted objects expense complex run time system recursively deallocates subcomponents counted data structure 
rgn 

alloc rgn 
rgn 
rgn rgn 

rgn 
dec 

rgn 
rgn 
rgn 
closed 


hn rgn 
xn 
rgn xn rgn formed counting constructs 
alloc 

rgn 
pack rgn 


hn rgn 
xn 
xn 
hn rgn 
xn 

dec 
dec dec 
hn rgn 
xn 

hn rgn 


xn 
dec 
rgn 
counting constructs operational semantics 
hn rgn 
xn 
rgn extend de nition region closed closed rgn true container data structures primary weaknesses region memory management container data structures homogeneous respect regions elements inhabit 
words elements list tree recursive datatype required inhabit region 
consequently elements list tree lifetime 
long lived containers insertions deletions common strategy incur quite cost objects removed collection deallocated entire collection deallocated 
tofte developed clever programming techniques avoid problem cases 
essence manually mimic action copying garbage collector 
speci cally periodically copy container data structure region 
copy cease data old region may safely deallocated 
dan wang andrew appel exploited similar ideas write complete copying garbage collector type safe language uses regions 
copying highly ective solution situations overhead 
container data structure large extra space time required copy live data region may acceptable 
language programmers choices 
hand may employ copying solution just discussed 
types 
list expressions 
cons case lists hand programmers mix linear types regions solve problem new ways 
particular programmers de ne heterogeneous data structures 
words containers may hold elements stored di erent regions individual objects may deallocated independently objects container 
presents syntax extension language lists 
data structures pairs closures intuitionistic lists constrained contain linear objects 
presents formedness rules list types 
lists expressions 
expression introduces empty list type region designated cons prepends list region designated case construct follows rst branch empty list second branch 
typing rules constructs extend typing rules core language speci ed previous sections natural way 
presents formedness rules list expressions 
typing rules particular rule cons require spine list inhabits single region 
elements list may inhabit di erent regions 
example linear list lists type 
rgn list list case element list existential package containing pair region list inhabiting region 
inner lists may processed deallocated independently inner lists 
regions linear alias 
programmer requires data structure involves aliasing lists counting solution rgn list list dynamic nature counts unnecessary copy elements outer list 
mutable data structures mutable data structures pose problems traditional region memory management schemes containers lists 
object stored live language revealed structure implementation lists terms sum types recursive types choose implement spine homogenous heterogeneous data structure 
list 

list 

rgn 
list list 

list 
rgn cons list 
list 
rgn 

list case formed list constructs types 
option ref expressions 
deref null store null mutable data 

option ref 


rgn 
option ref 
option ref 
rgn 


deref null 
option ref 

rgn 


store null formedness mutable data structures region objects stored region 
objects resources may reused individual basis linear invariants help 
section de ne new sort may pointed objects holds lone pointer object contains 
dynamic check ensure linear object extracted multiple times 
precisely object stored may null address 
dereference operation extracts object null address continues branches depending result 
extracted object address second branch executed address bound assignment operator stores object 
contained null store operation attempted control continues rst branch control continues second branch 
new type option ref belongs set intuitionistic types intuitionistic objects may contain objects linear type 
contains formedness rules new types expressions 
signi cant cost mechanism 
compile time way distinguish contains null contains object 
consequently extended type system safe sense prevents access dangling pointers ensure data structures eventually collected 
intuitionistic possible forget pointers cell lose access linear object may contain 
linear object question region potential leak unbounded amount space 
may possible pursue dynamic solution memory leak problem leave 
related draws di erent branches type theory designed managing computer resources 
research linear types originated girard linear logic reynolds syntactic control interference 
linear type systems studied researchers 
type ect systems introduced gi ord lucassen explored 
number new linear type systems generally substructural type theories developed 
example kobayashi quasi linear types pfenning ordered type theory hearn bunched typing smith walker morrisett alias types fall category 
renewed interest developing new logics facilitate hoare style reasoning heap allocated data structures 
reynolds hearn developed substructural logics just purpose 
interesting line research investigate systems alias control interact region memory management 
suspect grouping aspect regions largely orthogonal reasoning principles logics type theories hope study combined systems lead interesting new programming invariants 
initial inspiration comes walker crary morrisett capability calculus 
capability calculus uses notion static capability control access regions 
capability aliasing controlled combination bounded quanti cation form syntactic control interference 
current advantage conceptually simpler expressive number ways certain continuation passing style programs written capability calculus 
principal reason improvements taken standard linear type systems applied uniformly language regions ordinary rst class objects special second class constructs 
ongoing projects exploring new implementation techniques applications regions 
niss henglein insights respect counted regions 
currently designing strongly typed imperative language second class counted regions 
gay aiken developed runtime libraries language support counted regions counting scheme somewhat di erent introduced count number pointers cross region boundaries number pointers region data structure 
deallocation allowed pointers values particular region safety checked mainly run time 
deline ahndrich developing new type safe variant called vault 
combination capabilities alias types mentioned control access sorts program resources including memory regions 
developed ective local type inference techniques minimize programmer annotations 
source language design appears quite practical demonstrated possible port device drivers written vault capabilities verify drivers obey important safety properties 
hope formal provides greater con dence correctness vault serves source ideas 
example operation allow vault relax restrictions aliasing temporarily 
dan grossman trevor jim greg morrisett currently developing second type safe variant called cyclone vault gives low level programmers control data structure layout powerful mechanisms type abstraction strong safety guarantees 
currently cyclone relies conservative garbage collector 
grossman exploring ways incorporate memory management techniques described cyclone 
certain features cyclone including existential polymorphism types types exceptions require thought challenges appear insurmountable 
feel con dent soon able give low level programmers variety options comes choosing safe memory management policies 
developed new framework safe static memory management 
framework draws power fact combines studied paradigms controlling computer resources linear typing regions 
important aspects development clean separation role played regions role played linear typing regions group objects related lifetimes 
operation regions deallocation simultaneously ects objects group 
linear types control number uses object 
regions considered ordinary program objects linear types control number uses region 
second important component system freely mix di erent interpretations linear types maximum programmer exibility 
example number uses particular region easy determine compile time usually possible employ purely static memory management solution conventional interpretation linear types 
number uses unknown static solution may overly restrictive 
case programmers choose dynamic solution memory management problems involving counting 
acknowledgments ideas arose discussions greg morrisett 
particular mechanism handle mutable data structures developed collaboration greg 
bene ted technical insights provided frank pfenning 
samson abramsky 
computational interpretations linear logic 
theoretical computer science 
lars birkedal mads tofte magnus 
region inference von neumann machines region representation inference 
third acm symposium principles programming languages pages st petersburg january 
cristiano 
strati ed operational semantics safety correctness region calculus 
eighth acm symposium principles programming languages pages london uk january 
cervesato frank pfenning 
linear logical framework 
information computation july 
appear 
chih ping chen paul hudak 
rolling mutable adt connection linear types monads 
fourth acm symposium principles programming languages pages paris january 
chirimar carl gunter jon riecke 
proving memory management invariants language linear logic 
acm conference lisp functional programming pages april 
chirimar carl gunter jon riecke 
counting computational interpretation linear logic 
journal functional programming march 
karl crary david walker greg morrisett 
typed memory management calculus capabilities 
sixth acm symposium principles programming languages pages san antonio january 
rob deline manuel ahndrich 
vault project 
carnegie mellon university principles programming languages seminar 
see research microsoft com vault information november 
david gay alex aiken :10.1.1.32.6278
memory management explicit regions 
acm conference programming language design implementation pages montreal june 
david gay alex aiken 
language support regions 
workshop semantics program analysis computing environments memory management space london uk january 
gi ord lucassen 
integrating functional imperative programming 
acm conference lisp functional programming cambridge massachusetts august 
jean yves girard 
linear logic 
theoretical computer science 
simon peter thiemann 
syntactic type soundness region calculus 
workshop higher order operational techniques semantics pages september 
martin hofmann 
type system bounded space functional place update extended 
gert smolka editor european symposium programming volume lecture notes computer science pages berlin march 
peter hearn 
bi assertion language mutable data structures 
eighth acm symposium principles programming languages pages london uk january 
pierre jouvelot gi ord 
algebraic reconstruction types ects 
eighteenth acm symposium principles programming languages pages january 
naoki kobayashi 
quasi linear types 
sixth acm symposium principles programming languages pages san antonio january 
yves lafont 
linear machine 
theoretical computer science 
patrick lincoln john mitchell 
operational aspects linear lambda calculus 
ieee symposium logic computer science 
ieee computer society 
henning henning niss fritz henglein 
exible region type system 
workshop semantics program analysis computing environments memory management space london uk january 
minamide morrisett harper 
typed closure conversion 
third acm symposium principles programming languages pages st petersburg january 
eugenio moggi 
notions computation monads 
information computation 
hanne riis nielson flemming nielson 
higher order concurrent programs nite communication topology 
acm symposium principles programming languages pages january 
peter hearn 
bunched typing 
unpublished manuscript july 
simon peyton jones john hughes ed 
report programming language haskell non strict purely functional language 
technical report yaleu dcs rr yale university department computer science february 
je 
logic programming ordered context 
conference principles practice declarative programming montreal september 
je frank pfenning 
properties terms continuation passing style ordered logical framework 
workshop logical frameworks meta languages santa barbara june 
john reynolds 
syntactic control interference 
fifth acm symposium principles programming languages pages tucson 
john reynolds 
intuitionistic reasoning shared mutable data structure 
perspectives computer science 
frederick smith david walker greg morrisett 
alias types 
european symposium programming pages berlin march 

talpin jouvelot 
polymorphic type region ect inference 
journal functional programming july 
mads tofte lars birkedal martin elsman niels tommy olesen peter sestoft peter bertelsen 
programming regions ml kit version 
technical report computer science department university copenhagen 
mads tofte jean pierre talpin 
region memory management 
information computation 
david turner philip wadler 
operational interpretations linear logic 
theoretical computer science 
special issue linear logic 
david turner philip wadler christian mossin 
type 
acm international conference functional programming computer architecture san diego ca june 
philip wadler 
linear types change world 
broy jones editors concepts methods sea israel april 
north holland 
ifip tc working conference 
philip wadler 
marriage ects monads 
acm international conference functional programming pages baltimore september 
david walker karl crary greg morrisett 
typed memory management calculus capabilities 
acm transactions programming languages systems 
appear 
david walker greg morrisett 
alias types recursive data structures 
workshop types compilation montreal september 
daniel wang andrew appel 
type preserving garbage collectors 
eighth acm symposium principles programming languages pages london uk january 
keith wansbrough simon peyton jones 
polymorphic type 
sixth acm symposium principles programming languages pages san antonio january 
