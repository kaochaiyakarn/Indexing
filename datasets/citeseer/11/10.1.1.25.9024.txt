representative objects concise representations semistructured hierarchical data nestorov jeffrey ullman janet wiener sudarshan chawathe department computer science stanford university stanford ca usa ullman wiener db stanford edu www db stanford edu introduce representative object uncovers inherent schema semistructured hierarchical data sources provides concise description structure data 
semistructured data data stored typical relational object oriented databases fixed schema known advance stored separately data 
withthe rapid growth world wide web semistructured hierarchical data sources widely available casual user 
lack external schema information currently browsing querying data sources inefficient best impossible worst 
show representative objects schema discovery efficient facilitate generation meaningful queries data 

goal tool representative object facilitates querying browsing semistructured hierarchical information web 
lack external schema information currently browsing querying data sources inefficient best impossible worst 
instance user finding person object traditional object know structure subobjects fields 
example class declaration object tell person object subobjects name name 
semistructured world person objects subobjects name name 
person objects single subobject single name value single name subobject subobjects name 
person object middle name subobject name name subobjects nickname alias 
ways deal lack fixed schema 
semistructured data somewhat regular incomplete object oriented relational schema null values represent data 
approach fails semistructured data irregular 
trying fit data traditional database form introduce nulls discard information 
introduce representative object concept 
representative object allows browsers uncover inherent schema semistructured hierarchical data 
representative objects implemented lore dbms dataguides 
representative objects provide concise description structure data convenient way querying 
subsection describes primary uses representative objects 

motivating applications ffl schema discovery formulate meaningful query semistructured hierarchical data source need discover information represented source 
pose queries match source structure 
representative objects give needed knowledge source structure 
ffl path queries querying semistructured hierarchical data need express paths hierarchy meet certain conditions path ends name object going objects 
expressing paths requires wild cards symbols stand sequence objects objects class names call labels match certain pattern 
queries wild card symbols searching entire structure matches infeasible 
representative object significantly reduce search 
ffl query optimization optimize queries subqueries noticing representative object results empty 

organization section introduce data model define terms functions regarding hierarchical semistructured nature data including oem object exchange model tsimmis project stanford 
section define full representative objects fros provide description global structure data degree representative objects ros provide description local aspects data considering paths graph length section describes implementation fros objects oem algorithm extracting relevant information 
consider minimal fros allow answer schema queries efficiently 
section method determinization minimization nondeterministic finite automata construction minimal fro oem 
section describes construction simplest ro case 
sections alternative approaches building ro graph approach automaton approach 
section presents outlines 

preliminaries section describe data model 
object exchange model oem designed specifically representing semistructured data representative objects applicable useful :10.1.1.45.8397
oem described modification original oem introduced :10.1.1.45.8397
define terms related structure objects oem 
define functions form basis representative object definitions 

object exchange model data model oem simple self describing object model nesting identity 
object oem consists identifier value 
identifier uniquely identifies object 
value atomic quantity integer string set object denoted set idi pairs 
label string describes meaning relationship object subobject identifier id objects atomic values called atomic objects objects set values called complex objects 
view oem graph vertices objects labels edges object 
club name stadium st james park newcastle keith name name liverpool fowler name english nationality player player nickname number name french number eric name nationality andy cole club club name nickname official manchester united red nationality player player name captain king eric eric le roi french english 
object 
shows segment information top soccer league england 
circle text inside represents object identifier 
arrows labels represent object 
notations identifier value denote identifier value object notation object id obj id short denote unique object identifier id 
simple path expressions data paths simple path expression sequence labels separated dots 
data path sequence alternating objects labels separated commas starts ends object property consecutive objects value object contains object second object labeled label objects sequence 
formally definitions definition label object 
pe delta delta delta simple path expression length definition object label hl identifier value gamma 
delta delta delta data path length introduce terminology regarding simple path expressions data paths 
ffl data path delta delta delta originates rooted object ffl object object data path originating ffl data path object originates object ffl data path delta delta delta instance simple path expression pe delta delta delta note allow data paths length consist single object 
allow simple path expression length 
simple path expression contains labels denoted special symbol ffl 
data path length instance ffl 
example illustrate terms consider object 
ffl simple path expression player number instance data paths object obj player obj number obj obj player obj number obj 
ffl consider data paths obj player obj obj obj player obj obj 
obj obj obj obj cycle object 

continuations continuation functions form basis representative object definitions section 
arise naturally consider schema discovery semistructured data represented oem 
briefly describe schema discovery process give formal definitions continuation functions 
consider object oem 
suppose interested structure schema object want perform schema discovery 
schema discovery mean exploring moving navigating object subobjects keeping track labels object traverse 
sequence labels simple path expression get general zero objects point want know labels links immediately traverse continue navigation 
want know able continue navigating reached atomic object interested specific value atomic object 
observations motivate definition 
definition object oem pe delta delta delta simple path expression 
define continuation pe follows 
ffl continuation pe fl data path delta delta delta instance pe lg 
ffl continuation pe 
data path delta delta delta instance pe atomic 
view oem graph definition translates 
continuation simple path expression ffl set labels outgoing edges continuation simple path expression pe length obtained follows 
traverse possible paths length starting th step pick edge labeled th label pe 
th step pick edge 
continuation pe set labels edges picked step traversal described plus traversals steps step ended vertex outgoing edges corresponding atomic object 
example consider object 
examples illustrate definition 
ffl continuation ffl ffl continuation club fname player stadium ffl continuation club player name nickname note definition consider data paths originating object argument continuation function 
partially removing restriction allowing data paths object imposing limit length simple path expression second argument continuation function arrive definition 
definition object pe simple path expression length define continuation pe follows 
ffl continuation pe fl data path necessarily rooted instance pe lg 
continuation pe 
data path delta delta delta instance pe atomic 
ffl continuation pe continuation pe 
example consider object 
examples illustrate definition 
ffl continuation name nickname ffl continuation club fname player stadium ffl continuation player name nickname lemma characterizes relationship functions continuation continuation lemma object pe simple path expression length ffl continuation pe continuation pe ffl continuation pe continuation pe ffl pe begins hl idi value unique continuation pe continuation pe 
proof part lemma follows directly definition 
second part lemma follows fact data paths rooted object simple path expression pe set data paths considered definition subset set data paths considered definition 
third part lemma consequence fact instance data path pe rooted object coming label definition data paths rooted effectively considered set data paths considered definition 
representative object definitions representative object object oem implementation continuation function refer implementations representative objects fact implemented practice objects oem 
discussed sections different ways represent continuation function objects usual sense 
instance discuss graph automaton representations 
section define different kinds representative objects 
define concept full representative object fro object oem justify definition describing fro supports motivating applications section 
define concept degree representative object ro object oem 
ros complex fros approximate fros 
discuss extent motivating applications supported ros 

full representative objects full representative object implementation continuation function restricted particular object 
formally 
definition object 
function continuation pe continuation pe pe simple path expression full representative object fro order justify definition show fro supports motivating applications section 
schema discovery application primary motivation investigating representative objects 
recall schema discovery mean object keeping track labels object traverse 
fro object perform schema discovery quickly efficiently 
illustrate point example object 
approach exploration implemented dataguide feature lore database system oem discussed 
example suppose start root object 
ask query continuation ffl get labels links leading root 
case label club 
query continuation club lets see labels links leading club objects 
labels name player captain stadium 
suppose interested players 
may explore player asking query continuation club layer find links player objects labeled name number nationality 
lore dataguide queries submitted clicking node wish expand sequence queries described presentation part representative object appears 
player name number nationality club name stadium captain 
displaying part fro object 
path queries interesting queries semistructured data necessarily involve wild cards schema data known advance may change 
fros answer efficiently queries finding simple path expressions instance data paths object match wild card pattern query 
illustrate point example 
wild card pattern syntax example described path expressions expressible called general path expressions :10.1.1.45.8397:10.1.1.45.8397
example denotes optional label matches number characters 
example consider pattern gpe club player na object 
words looking simple path expressions instance data paths object start club followed player label na 
ffl find continuation ffl 
ffl label club matches head gpe tail gpe player na 
ffl find continuation club fname player captain 
ffl label player matches head player na head optional label simple path expressions match gpe far club club player 
remaining tail na 
ffl find continuation club player fname nationality number 
ffl name nationality match na simple path expressions match gpe completely club name club player name club player nationality 
query optimization order find simple path expression pe instance data paths originating object compute continuation pe 
recall continuation pe defined nonempty pe instance data path originating continuation pe continuation pe empty result means pe instance data paths originating result empty pe instance data path originating 
degree representative objects obtain definition replacing continuation function definition continuation function 
definition object 
continuation pe continuation pe pe simple path expression degree representative object ro ros general approximately support motivating applications section take space usually fros may faster construct 
show extent ros support motivating applications describe method computing approximation continuation pe ro 
object degree representative object pe delta delta delta simple path expression 
consider cases 
ffl find continuation pe continuation pe continuation pe exact value continuation pe 
ffl find continuation pe lemma result superset continuation pe 
ffl find continuation gammak gammak delta delta delta 
result superset continuation pe 
check continuation delta delta delta gamma gamma conditions hold continuation pe empty exact value 
consider motivating applications section 
describe supported ro approximation continuation pe provided ro 
ffl schema discovery fro case start root object 
long length simple path expression pe followed degree ro compute exact value continuation pe ro provides support fro 
length pe continuation pe provided ro 
consequence discovered schema contain actual schema may paths exist ffl path queries procedure described fro case remains 
compute continuation simple path expressions length approximation actual value 
final set matched simple path expressions superset actual simple path expression length set verified 
ffl query optimization approximation continuation simple path expression pe empty pe instance data paths originating object 
result nonempty pe may may instance data paths originating object 

implementation fros oem section describe particular implementation fros oem 
fact implemented fros called dataguides lore dbms 
fro implemented oem consists object oem algorithm computing represented object 
implementing fros oem gain advantage storing querying object part fros way ordinary objects oem 
define minimal fros oem allow computing continuation function efficiently 
describe fros oem algorithm object computes continuation simple path expression pe 
algorithm explores instance data paths pe originating breadth manner 
data path object data path considered 
continuation pe set different labels object objects objects atomic 
algorithm object pe delta delta delta simple path expression 
algorithm computes continuation pe 
input pe delta delta delta output pe object set fog object set fg object identifier id hl idi value add object id empty return fg endfor label set fg object atomic add object hl idi value add label endfor return 
algorithm computing continuation pe define implementation fros oem follows 
definition objects oem 
algorithm full representative object oem simple path expression pe continuation pe continuation pe 
definition follows fro oem fro oem object fro oem 
formally talk fros oem include algorithm algorithm computes object oem 
section consider fros oem omit algorithm refer object part full representative object 

minimal fros form definition follows fros oem object including object 
ideally want choose allows algorithm compute continuation function fastest 
iteration part algorithm takes time proportional size fro size iteration smallest allows fastest computation 
definition describes particular kind fros oem contains complex object atomic object 
definition fro oem minimal fro simple path expression pe delta delta delta instance data path originating complex object instance data path atomic object 
prove assertion iteration part breadth exploration algorithm contains complex atomic object simple path expression 
iteration size 
simple path expression length ffl assertion holds part algorithm executed 
pe delta delta delta simple path expression 
smallest th iteration contains atomic objects complex objects 
construct data paths instances simple path expression objects kind atomic complex 
sole complex object th iteration gamma 
th iteration contains different objects kind 
consider data paths delta delta delta gamma delta delta delta gamma 
data paths originate objects kind instances simple path expression delta delta delta contradicts definition assertion holds cases 
assertion proved calculate running time algorithm minimal fro oem simple path expression pe length number iterations part algorithm size iteration 
retrieve object particular label object constant time iteration takes constant time 
second part algorithm takes time proportional size continuation pe 
computation continuation simple path expression object minimal fro oem object takes linear time respect length simple path expression number different labels computed continuation 

construction minimal fros section method constructing minimal fros oem 
method consists major steps construction nondeterministic finite automaton nfa object determinization minimization nfa results deterministic finite automaton dfa construction minimal fro dfa 
prove correctness method 

finite automata finite automata areas computer science studied extensively 
finite automaton ffi consists finite number states finite alphabet transitions state letter alphabet ffi theta 

state designated start state accepting states words formed sequences letters transitions start state state form language accepted automaton 

construction nfa object oem object oem viewed nfa straightforward manner 
objects correspond states object labels correspond transitions respective letters 
formally show construct nfa corresponding object oem introduce function state maps object unique automaton state corresponding 
extend function map set objects set automaton states corresponding 
define terms characterize object oem 
set atomic objects set complex objects set objects note set different labels object nfa ffi corresponding constructed follows 
ffl state ffl ffl ffi state state object id hl idi value ffl ffi state ffl state ffl 
determinization minimization nfa determinization conversion dfa minimization nfa studied problem 
determinization nfa take exponential time respect number states 
nfa tree structure state incoming transition cycles determinization takes linear time 
best algorithm minimization dfa takes log time number states dfa 

construction minimal fro dfa transformation dfa object oem straightforward treatment states associate different objects atomic complex 
rest states associate unique object 
associate object letter transition 
formally describe construction minimal fro dfa ffi introduce functions atomic obj maps state corresponding atomic object complex obj maps state corresponding complex object 
minimal fro corresponding dfa constructed follows 
ffl fq ffi 
ffl fq ffi rg 
ffl atomic obj unique atomic object 
ffl complex obj unique complex object value complex obj atomic obj li ffi atomic obj complex obj li ffi complex obj 
ffl complex obj defined minimal fro complex obj 
atomic obj 
example illustration method described section shows minimal fro oem object 
note link labeled name coming club object 
contradict definition name subobjects atomic complex 

correctness proof order prove method correct show object constructed third step club name name nickname official stadium name captain nationality number name player name nickname english french number nationality 
minimal fro object 
method minimal fro oem original object 
object nfa constructed described section dfa obtained determinization minimization object constructed described section 
show continuation pe continuation ro pe simple path expression pe showing continuation pe continuation ro pe continuation pe continuation ro pe 
pe delta delta delta simple path expression continuation pe 
pe instance data path delta delta delta construction ffl ffi state state 
ffl ffi state gamma state possible cases 
case atomic ffi state 
second case object object labeled ffi state state 
cases word delta delta delta accepted dfa equivalent construction accept language 
word delta delta delta accepted states ffi gamma ffi qn qn start state qn accepting state 
construction complex obj value complex obj gamma gamma 
data path delta delta delta gamma complex obj qn gamma exists 
qn atomic obj qn defined 
continuation ro pe data path atomic obj qn 
qn complex obj qn defined 
continuation ro pe data path complex obj qn obj obj complex obj qn atomic obj qn whichever defined 
proved continuation pe continuation ro pe 
similarly show continuation ro pe word delta delta delta accepted show continuation pe continuation pe continuation ro pe 
show minimal fro construction fact dfa 
conclude proof correctness minimal fro construction method 

constructing representative object simplest representative object construct ro 
ro guarantees paths length exist represented object indicates set possible labels may succeed individual label 
furthermore ro provides compact description represented object easy construct easy comprehend 
represent ro graph nodes corresponding labels 
intuitively ro contains unique label exactly contains edge labels simple path expression consisting labels instance data path object 
example shows ro oem object 
section describe algorithm constructing ro object oem physical sequential scan objects object 

example object 

ro example object 

representative object algorithm goal find pairs labels data path object 
object contains pairs identifiers labels object contain labels incoming links 
examine objects links approach remember identifier identifier triples id table join produce pairs 
id table built scan objects order 
cost computing pairs labels depends size id table 
fits memory memory join performed extra cost 
additional cost join size pass hash self join 
result table label table indexed lookups efficient 
duplicate label pairs discarded 

computing continuations suppose wish find continuation simple path expression consisting single label look pairs label table set continuation time required cost index lookup label table index fits memory label table fits memory 

graph approach constructing object oem 
set simple path expressions having length instance data paths specifically shall think set having strings length 
represent simple path expressions length pad special label 
shall refer elements paths evidently set strings suitable representation ro 
hard compute requires generalization technique discussed section ro 
compact representation ro 
shall show compact set graph continuations read efficiently 

converting sets strings compact graph idea compact set simple path expressions graph paths length graph label sequences appear object conversely 
compute continuation searching graph 
index nodes directs nodes graph bearing label search quite efficient 
suitable graph may constructed listing paths object partitioning positions paths clusters mergeable positions 
nodes graph represent cluster positions 
positions mergable surely label represented single node graph 

cross string requirement positions mergeable 
condition satisfy 
suppose wish merge position path delta delta delta position path delta delta delta path construct starting delta delta delta continuing delta delta delta gammaj path object 
suggests path appear object 
call path cross string 
example shows graph representation object oem 
paths length considered 
sequences labels counting special label appear shown 
consider paths suppose wish merge position position 
hold label possible merger succeed 
need consider string labels reaching treating position continuing total ab ac acb aba bab bac cba 
length paths example object 
positions visited 
sequence positions list 
way new sequence list take middle positions merged string aba string 
fact example position bearing letter merged 
possible merge positions string positions strings 
case positions bearing label merged position string merged positions holding 
node graph cluster mergeable positions get graph shown 

graph constructed example object 
observe things simple suggested example 
instance suppose remove lowest object label object call resulting object set paths missing string bab 
prevent merging pairs positions 
instance merge third positions string aba require string bab object case best copy nodes labeled top bottom deleted course 
simplifications test positions mergeable 
ffl positions label mergeable 
reason strings induced cross process suggested strings involved merger 
ffl similarly positions label surely mergeable 
ffl room cross string consider cross strings strings positions considering merging right positions merged 
ffl merge strings new cross string obtained string merged positions 
terms cross string position position may assumed 
ffl special case cross strings prevent merger position merged string position merged position 

computing continuations data structure represent graph influences fast compute continuations 
maximum efficiency need main index maps labels set nodes label 
need node index mapping labels successors node having label 
assume structures available retrieve desired set nodes time proportional size set 
suppose wish know continuations path delta delta delta main index find set nodes labeled nodes index node find successors labeled 
search exponential need find successors node position string 
keep track table pairs node label successors label total amount kn number nodes graph 

finite automaton approach constructing ros section graph representative object 
graph encodes set simple path expressions length instance data paths object represented 
section construction representative objects finite automata 
treat simple path expressions strings alphabet oem labels 
language represented set encoded automaton accepts strings 
constructing automaton representing object oem section assume computed set simple path expressions length appear object represented 
consider alphabet consisting labels represents finite regular language alphabet standard techniques construct finite automaton recognizes language 
assume automaton minimized subset construction method 
consider example section involving object 
shows paths object set 
finite automaton accepts language suggested interpreting simple path expressions strings shown 
initial state marked short arrow accepting states circled 

finite automaton ro example object 

computing continuations having automaton representation representative object described allows compute continuation follows 
suppose wish know continuation simple path expression start initial state automaton follow transition label reach state 
stage state transition desired label continuation empty 
set transitions go accepting state 
set labels continuation simple path expression 
index represent transitions state automaton finding state requires time number labels represented object 
finding state requires time 
labels continuation simple path expression retrieve labels transitions time 
note transitions lead accepting states path length automaton leads accepting state 
total time required compute continuation 
practice achieve running time close associative array label index 
time required find continuation bounded 

comparison object example finite automaton representative object complicated graph representative object 
objects finite representative object simpler graph 

introduced representative object concept provides concise representation inherent schema semistructured hierarchical data source 
case representative objects useful semistructured data show primary uses 
described implementation fros oem advantage data part fro stored queried object oem 
construction method important class fros minimal fros 
minimal fros allow efficient querying schema represented data 
constructing minimal fros high complexity described alternative approaches constructing ros approximations fro 
case ro provides approximation fro 

investigating topics 
ffl storing information typical object fros 
fros provide schema data provide information instance objects 
example fro tell link labeled book followed links labeled author title publisher tell link labeled book followed link labeled title 
ffl graph construction algorithms ros 
looking complicated conditions help graph approach ros 
ffl updating minimal fros oem 
object changes minimal fro oem change 
construction minimal fro scratch expensive need way updating old minimal fro accordingly 
abiteboul quass mchugh widom wiener :10.1.1.45.8397
lorel query language semistructured data 
technical report dept computer science stanford university 
available anonymous ftp db stanford edu 
hopcroft 
log algorithm minimizing states finite automaton 
theory machines computations pages 
academic press new york 
hopcroft ullman 
automata theory languages computation 
addison wesley reading massachusetts 
papakonstantinou garcia molina widom 
object exchange heterogeneous information sources 
proceedingsof eleventh international conferenceon data engineering pages taipei taiwan mar 
quass lore lightweight object repository semistructured data 
proceedings acm sigmod international conference management data page montreal canada june 
ullman 
principles database knowledge base systems volume ii 
computer science press rockville maryland 
