automating inductionless induction test sets deepak kapur narendran department computer science state university new york albany albany ny cs albany edu zhang department computer science university iowa iowa city ia cs uiowa edu may inductionless induction called proof consistency approach proving equations induction equational theory requires consistency check equational theories 
new method test sets checking consistency equational theory proposed 
method variation knuth bendix completion procedure automatically proving equations induction 
method suffer limitations imposed methods proposed musser huet powerful jouannaud kounalis method ground reducibility 
theoretical comparison test set method jouannaud kounalis method showing test set method generally better 
methods implemented rrl rewrite rule laboratory theorem proving environment rewriting techniques completion 
practice test set method faster jouannaud kounalis method 
test set construction check sufficient completeness property equational axiomatizations including algebraic specifications data types identifying constructors algebraic specification 
key words inductionless induction proof induction equational theory knuth bendix completion procedure consistency sufficient completeness induction 
results entitled proof induction test sets proceedings th international conference automated deduction oxford england july 
partially supported national science foundation 
ccr 
partially supported national science foundation 
ccr 
discusses method proving theorems induction inductionless induction proof consistency approach 
approach proving equation inductive consequence finite set axiom equations reduced consistency checking congruence relation ground terms induced set axioms congruence relation ground terms induced axioms equation proved induction 
give new method performing consistency check knuth bendix completion procedure knuth bendix 
inductionless induction approach consider data structure integers defined constructors follows equations shown ground term term variables equivalent ground term involving represents negative integer ground term involving represents positive integer 
minus unary function defined integers obvious minus minus minus little bit effort reader convince minus completely defined ground term form minus ground term involving equivalent equations ground term involving follows ground term constructed function symbols minus axiomatization equivalent ground term involving ground term involving property minus minus minus proved induction integers 
shown property holds equal negative integer represented ground term involving positive integer represented ground term involving way prove equation show congruence relation induced equations ground terms congruence relation ground terms imposed equations 
words ground terms related equations equivalent fifth equation 
property true ground term substituted minus minus congruence class congruence relation defined equations ground term minus minus different congruence classes congruence relation defined equations imply congruence relation equations different congruence relation equations property hold 
approach employ induction explicitly known inductionless induction approach lankford contrast explicit induction approach boyer moore theorem prover boyer moore 
overview literature inductionless induction reader may consult kapur musser 
way checking equivalence congruence relations defined different finite sets equations computing canonical complete rewrite systems associate unique normal form congruence class ground terms 
instance canonical complete system equations example generated knuth bendix completion procedure knuth bendix result ii iii minus iv minus minus minus minus canonical rewrite system set ground terms normal forms consists ground terms constructed ground terms constructed similar fashion determine unique normal form congruence class ground terms relation minus minus included canonical system generated rules additional rule vi minus minus case set ground terms normal form remains 
canonical systems proved congruence relation ground terms remains minus minus added 
equation theorem induction 
hand wanted check minus proved induction equations answer 
equation minus change congruence relation ground terms induced equations relating things normal forms normal forms congruence class 
detected generating canonical system equations minus overview test set method congruence relation induced finite set equations equational theory represented finite canonical term rewriting system rewriting system gives characterization congruence relation ground terms terms normal forms 
proposed approach order check equation proved induction finite set equations canonical rewrite system generated axiom equations 
generation new canonical rewrite system axioms conjecture attempted conjecture generated canonical system axioms 
process detected congruence relation induced new rewrite system ground terms remain equivalent old congruence relation conjecture theorem procedure stops 
new canonical rewrite system generated new congruence relation ground terms equivalent old congruence relation conjecture theorem 
proved plaisted kapur narendran zhang decidable check equivalence sets ground terms normal forms defined canonical rewrite systems 
decision algorithms plaisted kapur narendran zhang complicated practical research necessary designing efficient algorithms various conditions 
relatively efficient algorithm reported jouannaud kounalis rewrite systems 
method previous methods notion ground reducibility called inductive reducibility quasi reducibility 
term said ground reducible rewrite system ground instance term reducible rewrite system 
left linear rewrite systems testing term ground reducibility requires exponential number steps terms size term see kapur narendran rosenkrantz zhang 
jouannaud kounalis acknowledged current implementation method far slow jouannaud kounalis 
describes method avoids ground reducibility test cases 
expensive operation tests set terms reducible single rule cases 
method concept test set associated rewrite system finite description ground terms normal form 
consistency check determining congruence relations ground terms defined finite sets equations performed testing equivalence test sets canonical rewrite systems 
canonical rewrite system generated finite set axiom equations test set computed 
conjecture proved induction added new canonical rewrite system conjecture generated canonical system axioms computed 
new rules generated process detected step test set new rewrite system remain equivalent old test set conjecture theorem procedure stops 
new canonical rewrite system generated new test set equivalent old test set conjecture theorem 
precondition test set method jouannaud kounalis method initial set rules canonical left linear 
conjecture intermediate lemmas need left linear 
test set method powerful jouannaud kounalis method 
give theoretical comparison test set method jouannaud kounalis method prove test set method better jouannaud kounalis method left linear rewrite systems 
test set method jouannaud kounalis method implemented rrl rewrite rule laboratory theorem proving environment rewriting techniques kapur sivakumar zhang kapur zhang 
experience number examples far indicates test set method faster practice jouannaud kounalis method 
jouannaud kounalis method test set method advantage methods proposed musser goguen require explicit equality predicate defined data type 
furthermore huet method constructors need free constructor terms related equations axiomatization example see equations example relate constructors 
method require functions axiomatization classified constructors making distinction improves efficiency method prove disprove equation 
case functions classified constructors checked test set construction completely defined constructors case proof induction proceeds 
completely defined method generate templates arguments defined aiding user completing definition 
words test set construction check sufficient completeness property algebraic axiomatizations see kounalis zhang kapur narendran rosenkrantz zhang details application test sets 
organization organized follows 
section introduces preliminary concepts needed 
section discuss set irreducible ground terms ground terms normal form canonical term rewriting system proving properties induction knuth bendix completion procedure 
section introduce concept test set rewrite system discuss properties relation set irreducible ground terms rewrite system 
section constructive characterization standard test set left linear rewrite system 
standard test set check ground reducibility efficient method dershowitz kounalis zhang jouannaud kounalis 
section discussion test sets consistency check inductive completion procedure 
theoretical comparison test set method jouannaud kounalis method 
section discusses standard test sets checking sufficient completeness property algebraic specification identifying constructors specification 
section discussion performance implementations test set method jouannaud kounalis method rrl set examples 
section concludes 
reader may consult kapur musser overview related literature inductionless induction 
background section starts review basic definitions 
second subsection reviews theorem serves theoretical basis inductionless induction approach proving conjecture induction equational theory reduces checking consistency original equational theory augmented conjecture relative original equational theory 
consistency defined terms irreducible ground terms canonical rewrite systems generated equational theories 
definitions reader familiar term rewriting approach skip section refer needed reading remaining sections 
simplicity consider untyped equational axiomatizations term rewriting systems 
results reported apply minor modifications multi sorted equational axiomatizations term rewriting systems equational term rewriting systems insofar ground reducibility property decidable systems 
finite set function symbols equational axiomatization set variables 
gt set ground terms constructed set terms constructed variables possible identify subset set constructor symbols denoted construct values data structure induction performed case set gamma set function symbols 
explicitly identified assume function symbol assumed constructor 
require set constructors nonempty data type consideration 
equational specification finite set equations fl 
term rewrite system fl finite set pairs terms variable appears element called rewrite rule simply rule 
equational specification term rewriting system associated consists rewrite rules vice versa 
henceforth assume equations rewrite rule 
similarly rewrite system fl equational specification associated fl reduction relation induced defined follows position rule substitution oe oe oe see huet definitions position called occurrence huet substitution term reducible term irreducible normal form respect 
congruence relation induced called equational theory reflexive symmetric transitive closure denoted relations respectively denote transitive closure reflexive transitive closure 
equation equational theory equational theorem theorems equational theory deduced inference rules replacing equals equals ii substitution term variable equation partial ordering terms terminating founded admit infinite sequence delta delta delta delta delta delta 
terminating partial ordering said reduction instance ground reducibility property undecidable associative commutative rewrite systems kapur narendran rosenkrantz zhang 
equation variables included vice versa rewrite rule corresponding equation 
case new function symbols introduced equation split equations rewrite rules 
ordering satisfies terms operator substitution oe delta delta delta delta delta delta ii implies delta delta delta delta delta delta delta delta delta delta delta delta ii implies oe oe 
said terminating terminating 
confluent canonical complete terminating confluent 
ars set variables term linear variable ars appears rule called left linear linear linear linear 
set rules left linear rule left linear 
substitution oe ground substitution variable oe oe ground term 
substitution oe constructor substitution variable oe oe constructor term 
substitution oe irreducible substitution variable oe irreducible 
term ground reducible called inductive reducible quasi reducible respect set terms substitution oe ars oe reducible say ground reducible ground reducible respect ground terms gt 
term ground reducible respect constructors constructor ground substitution oe ars gt oe reducible 
rules said overlap position variable unify general unifier oe 
case oe called superposition oe oe called critical pair 
rule called constructor preserving constructor term term constructors variables constructor term 
set rules constructor preserving rule constructor preserving 
requirement rules constructor preserving technical nature ensures term involving constructors reduced term involving 
equation relation constructors constructor terms 
rule constructor relation constructor rule 
equational theory said sufficiently complete respect set constructors guttag ground term gt ground term gt set rules sufficiently complete associated equational theory sufficiently complete 
trivially sufficiently complete important properties relating ground reducibility sufficient completeness constructor preserving terminating rewrite system arity gamma ground reducible sufficiently complete sufficiently complete canonical term containing function symbol gamma ground reducible 
inductive theorems induction proofs equation inductive theorem substitution oe ars ars gt oe oe equational theorem oe oe 
theorem serves basis inductionless induction approach knuth bendix completion procedure 
theorem dershowitz canonical rewrite systems generated fl rg 
inductive theorem irg irg irg denotes set irreducible ground terms gt respect result design version knuth bendix completion procedure called inductive completion procedure proving properties induction 
suppose input inductive completion procedure canonical rewrite system equation initialize completion procedure input canonical system reduction ordering equation proven 

fs tg 
proved 

remove equation 
normal form normal form 

case 
go step 



method failed 

add rule 
irg irg true 

rule different 
reduces gamma fl fl 
reduces gamma fl fl normal gamma form 
critical pairs formed 
go 
procedure normal form returns normal form irg set irreducible ground terms gt respect main difference knuth bendix completion procedure inductive completion procedure step added check set irreducible ground terms defined changed new rules generated due interaction rule corresponding equation proved rules condition irg irg incrementally checked 
condition violated inductive theorem 
procedure stops canonical system inductive theorem 
check irg irg called consistency check 
correctness procedure guaranteed theorem correctness knuth bendix completion procedure huet 
theorem assume canonical completion procedure fl rg stops method failed runs forever 
inductive theorem procedure stops proved 
procedure illustrative purposes 
variations procedure unoriented equations postponed possible orientable instantiations unoriented equations critical pairs inductively complete positions computed reported literature test set method 
step procedure modified incrementally generate critical pairs new rule rules generating critical pairs due case inductive completion procedure fails rule encountered oriented termination ordering possible prove inductive theorems generalization method rewrite systems modulo equational theory kapur narendran zhang jouannaud kounalis 
rest elaborate line inductive completion procedure check equivalence sets irreducible ground terms related rewrite systems 
test sets ground reducibility sufficient completeness testing equivalence sets irreducible ground terms give result kapur narendran zhang 
depth function terms gives maximum depth tree representation term 
theorem kapur narendran zhang rewrite system term exists number depends ground substitution irreducible depth smaller substitution irreducible depth depth 
function technique constructing explicitly kapur narendran zhang 
depends depth deepest left side depth denote set irreducible ground terms depth ft irg depth kg recall irg denotes set irreducible ground terms gt respect equivalence sets irreducible ground terms rewriting systems checked checking ground reducibility left sides rules rewriting system respect rewriting system corollary inductive completion procedure 
number depends function irg irg 
number max lhs lhs lhs lhs respectively deepest left sides results allow implement theoretically inductive completion procedure computable new rule added inductive completion procedure computed 
function grows quite fast complexity double exponential size denotes sum size left side rule test sets definitions properties idea inspired definition concept test set essence finite description irg 
rewrite systems reduce problem comparing irg irg comparing suitably constructed test sets 
irg finite small irg test set irg infinite big finite ways describe finitely terms way 
discuss properties finite set terms test set 
loss generality assume term test set unique renaming variables 
definition finite set terms test set exists computable mapping phi irg ground instances terms irg phi oe implies oe irg oe ground instance definition test set construction mapping phi irg implicitly proof theorem kapur narendran zhang 
rest mapping test set assumed trivial phi oe implies oe irg test set mapping said complete see 
consider test sets finite sets linear terms 
investigated test sets including nonlinear terms interesting topic research 
definition term said extensible position respect set terms exist term position unifiable ii variable position iii nonvariable position term extensible respect extensible position example ff term extensible position extensible respect exists instance term extensible respect extensible respect gamma flg 
lost generality delete instance definition test set called complete test set irg exists oe ground substitution oe ii minimal test set term ground reducible distinct unifiable iii test set term extensible respect lhs set left sides rules minimal complete test set called standard test set note minimal test set complete 
standard test set shows test set need complete useful 
minimality property ensures element irg unique representative minimal test set instance property prevents terms test set general 
lemma test set linear subterm matches instance unifiable matches proof 
variable position defined unifiable respect linear implying instance lemma true linear 
corollary minimal test set oe oe reduced left linear rule root 
proof 
oe reduced left linear rule root unifiable 
lemma matches implying reducible contradiction property term minimal test set ground reducible 
corollary holds left linear rules lemma 
relation ground reducibility sufficient completeness theorem shows minimal complete test sets checking ground reducibility sufficient completeness properties rewrite systems see sections 
fact test sets extensively kapur narendran rosenkrantz zhang deriving complexity results ground reducibility sufficient completeness checks 
theorem canonical constructor preserving set rules sufficiently complete term containing operator gamma appears standard test set similar result kounalis zhang 
test set checking sufficient completeness property discussed nipkow weikum plaisted dershowitz 
theorem helpful defining test set rewrite system terms test set smaller rewrite system certain conditions 
theorem rewrite system partitioned disjoint sets left side rule ground reducible respect complete minimal test set complete minimal test set proof 
left side rule ground reducible respect ground term reducible reducible implying irg irg 
result 
note theorem hold standard test sets 
test set test set vice versa 
theorem helpful computing test sets just computing test sets especially 
particular left linear left linear exist efficient test sets applications result proving nonlinear equations induction discussed 
test sets left linear rewrite systems left linear rewrite systems standard test sets serve useful role result 
theorem left linear rewrite system term ground reducible ground reducible respect standard test set proof 
prove ground reducible respect gt respect suppose ground reducible respect variable positions exist implies ii reducible 
minimal test set exists ground instance irg ground reducible delta delta delta reducible say left linear subterm matches position lemma matches 
matches subterm 
repeat process replaced eventually get matches subterm contradiction reducible 
suppose ground reducible exists ground substitution oe oe irreducible 
complete exist oe variable obviously irreducible 
linear oe oe oe irreducible 
ground reducible respect note statement theorem non linear term 
far characterized test sets terms properties 
turn attention giving constructive characterization standard test set algorithms computing standard test sets left linear rewrite systems test sets left linear systems computed efficiently test sets nonlinear systems 
due theorem results algorithms computing tests set left linear systems apply system necessarily left linear partitioned left linear left side rule ground reducible subsection discuss constructive characterization standard test set left linear rewrite systems 
test set defined identifying terms unify nonvariable subterm left side compare test set test set defined top jouannaud kounalis method checking ground reducibility 
constructive characterization standard test sets definition extending domain finite set terms containing lhs left sides rules reason introduce definition intend test set non extensible different rewrite systems 
typically extending domain just union lhs lhs want compare irg irg test set approach 
method construct standard test set left linear system relative extending domain method consists steps 
set general terms serve complete test set 
extend term gradually ensuring completeness property obtain term extensible respect extending domain new set terms complete test set 
need minimal 
remove ground reducible terms minimal 
steps obtain standard test set explain step detail implementation step discussed section 
step constructing constructor structural schema set constructors sufficiently complete 
start set terms called constructor structural schema 
ff arity distinct example complete respect irg irg subset gt assumption sufficiently complete 
step expanding patterns gradually extend term ensuring completeness property 
definition set cand terms obtained procedure called candidate set test set extending domain 

term position extensible respect gamma ftg ft patterns variable position 
return set terms irreducible respect termination procedure guaranteed finite 
note term positions extensible respect may choose expand 
simplicity assume left position chosen expand position extensible 
example ff ff extensible positions 
expending position extensible 
extension lemma extending domain terms cand unifiable 
ii term cand respect term strict instance substitutes nonvariable term variable extensible iii cand complete test set proof 
true terms unifiable proved induction definition candidate set test set cand subset 
ii obvious 
iii true complete test set time term replaced instances completeness preserved 
step removing ground cand need standard test set know term cand ground reducible 
remove ground reducible terms cand obtain standard test set theorem extending domain tsl ft cand ground standard test set proof 
lemma definition tsl 
theorem serves basis test sets inductive completion procedure automating inductionless induction 
theorem extending domain left linear rewrite systems tsl tsl irg irg 
proof 
part easy irg irg irreducible ground term exists unique term tsl tsl respectively instance unifiable 
respect term strict instance extensible similarly ii respect term strict instance extensible 
implies assuming left position extended computing cand 
prove part contradiction follows 
suppose tsl tsl irg irg 
loss generality suppose irg gamma irg empty 
smallest term terms depth irg gamma irg 
reducible root 
reducible exists tsl tsl oe oe 
oe reducible root contradiction corollary 
abuse notation write tsl tsl lhs lhs set left sides rules discuss conditions irg irg easy see definition tsl term tsl extensible respect left sides constructor rules sides constructor terms gamma tsl tsl 
constructor rule gamma term tsl unifiable irg irg tsl complete test set 
term unifies extensible respect instance implying irg irg follows fact tsl minimal 
fact reduces term tsl irg irg 
theorem rewrite system tsl test set new constructor rule 
unify term tsl irg irg fl rg 
ii reduces term tsl irg irg fl rg 
note theorem nonlinear 
lemma bounded jcj jcj number constructor symbols sum size left sides rules proof 
term tsl extensible respect lhs lhs set left sides rules nonvariable position constructor symbol constructor structural scheme new variable extensible respect lhs 
unifies nonvariable subterm left side addition nonvariable position left side nonvariable subterm variable position different left side nonvariable subterm variable 
properties follows jtj jrj constructor subterm left side rule considered 
addition time required compute tsl jrj 
test set tsl defined different previous kapur narendran zhang 
test set defined notions skeleton bounded jcj depth worst case depth maximal depth left sides usually size test set polynomial size example consist rules set constructor symbols gg 
easy check tsl terms 
term tsl extensible definition kapur narendran zhang expand single term terms old definition test set kapur narendran zhang 
method computing tsl theorem provides method computing tsl cand removing ground reducible terms 
theorem subset cand includes ground term cand 
suppose term ground reducible 
respect ground reducible respect gt 
term ground reducible respect term ground reducible 
proof 
proof contradiction similar proof theorem 
suppose ground reducible respect ground reducible 
variable positions exist term position symbol variable function symbol position reducible 
hypothesis exists ground instance irg assumed ground reducible reducible subterm matches position lemma ii lemma matches 
rewrites 
repeat process replaced eventually get rewrites contradiction 
suppose term ground reducible respect oe ground substitution oe minimal size reducible 
range oe set instances subset ground reducible respect oe reducible contradiction 
clear cand plays critical role proof part theorem 
theorem allows design algorithm remove ground reducible terms cand 
algorithm quasi check 
repeat 
new 

ars fx 
ht 
construct oe fx 
oe reducible new new ftg go 

continue 

new 
gamma new 
new 
return call quasi check initialized ground terms cand cand gamma returned result tsl 
loop terminates 
loop executed jbj times main loop executed jbj times 
algorithm terminates 
correctness algorithm guaranteed theorem 
algorithm quasi check previous subsection done size cand jcj size term cand bound recall jcj number constructor symbols sum size left side rule 
example sg fs definition candidates tsl lhs cand quasi check invoked inputs cand gamma consider reducible transferred replacing variables terms find reducible put example cand tsl 
consider complex example illustrating steps algorithm 
example contain rules define natural numbers function symbols 
test set tsl computed follows 
extensible position produces new terms reducible 
term extensible position gives new terms reducible extensible 
extensible term position produces new terms reducible third extensible position produces new terms reducible extensible 
candidate set cand tsl giving cand gamma procedure quasi check get tsl tsl ground reducible respect tsl term tsl substituted terms results reducible 
complexity quasi check exponential jbj jaj jrj jrj maximal number variables term jrj kapur 
simple heuristics help 
term reduced root corollary check ground reducibility top level arguments outermost function symbol term separately 
precise suppose reducible root ground reducible ground reducible 
jv ars jv ars cost check ground reducible reduced jrj jaj jrj jaj jaj 
cost remains zero gains 
similarly exploit fact term ground reducible term including term subterm ground reducible 
instance example checking ground reducible check answer say immediately ground reducible 
comparison jouannaud kounalis test set tsl standard test set theorem tsl checking terms left linear systems 
furthermore tsl implement jouannaud kounalis method ground reducibility 
jouannaud kounalis notion top terms decide left linear systems 
definition plaisted nipkow weikum top term depth top defined 
top distinct new variables 
top top top 
jk denote set top depth irg 
jouannaud kounalis showed set ground reducibility check term 
easy see jk standard test set size jk larger size tsl general jjk bounded jcj depth 
example suppose dg contains single rule order compute jk ground terms depth equal constructed 
terms 
terms remaining jk rest discarded 
terms constructed method computing test set tsl 
contrast terms jk outermost symbol tsl includes similarly terms jk outermost symbol tsl includes 
example shows number ground terms exponential function depth unary functions 
set function symbol large arities function symbols greater jk grows faster tsl 
number terms tsl polynomial jrj number terms jk exponential function jrj conclude tsl effective jk checking ground reducibility 
standard test sets inductive completion procedure test set tsl introduced previous section consistency check support implementation inductive completion procedure rrl 
section includes discussion examples proved rrl 
consider inductive completion procedure subsection 
step consistency check replaced follows 
input completion procedure constructor preserving sufficiently complete canonical system equation proved function symbol assumed constructor trivially constructor preserving sufficiently complete 
efficiency start computing tsl lhs set left sides rules step procedure 
new rule generated check contains symbol 
contains ground reducible sufficiently complete 
constructor term 
check unifies term tsl 
answer continue ground reducible answer reduces term tsl true theorem 
exists term tsl extensible respect 
nonlinear check ground reducible respect tsl 
true theorem ground reducible continue 

linear 
choices ffl choice check ground reducible nonlinear case 
ffl choice flg extend tsl obtain tsl 
matches term tsl gamma tsl true continue 
evident constructor rules matter performing consistency check 
advantage employing choice test set tsl computed change completion procedure 
discussion analysis choice discussion inductive completion second choice consistency check kapur narendran zhang 
correctness method established lemma theorem canonical rewrite system input inductive completion procedure subset consisting constructor rules canonical left linear 
extending domain set new constructor rules generated completion procedure prove partitioned disjoint subsets left linear rule left side unify term tsl ii left side rule ground reducible tsl tsl irg irg 
proof 
direct consequence theorem theorem 
note statement theorem need left linear 
example fs lhs fs tsl inductive theorem tsl fs tsl inductive theorem rule generated completion procedure run fs 
rule reduces tsl 
comparison jouannaud kounalis method inductive theorem proving method differs jouannaud kounalis method way 
check left side new rule unifies term tsl done 
check term reduced new rule done 
conditions fail check ground reducibility respect tsl 
jouannaud kounalis hand check left side new rule ground reducible respect tsl fact jk 
general size test set large remember jjk exponential number function symbols ground reducibility check expensive operation 
analysis assume tsl checking ground reducibility jjk term having variables test set having terms substitutions constructed instances checked reducibility 
jtj denotes average size terms test set average size instance jlj cost checking reducibility instance jrj jlj 
total cost checking ground reducibility jrj jlj bounded jlj assume jtj bounded jlj formula rewritten jrj jlj jlj hand cost testing reduces unifies term test set root jlj words gain factor jrj jlj jlj gamma avoiding ground reducibility check new rule inductive completion procedure 
bounded jcj saving significant 
summarize discussion theorem 
theorem assuming satisfy conditions theorem test set method consistency checking faster jouannaud kounalis method ground reducibility check test set tsl inductive completion procedure jr jr jcj jlj jlj steps jlj average size left sides rules sum sizes left sides test set jk ground reducibility check faster jr jr depth jlj steps constant 
stated new rule generated inductive completion procedure term tsl extensible respect choices 
left side checked ground reducibility respect tsl tsl extended 
case initial extending domain extended include certain terms tsl extended 
extended terms checked ground reducibility producing new test set 
useful extend tsl new rules generated terms tsl extensible respect left sides new rules 
having extended tsl save subsequent ground reducibility checks done tsl 
extending tsl avoid need performing ground reducibility check 
ground reducibility check needed performed computing extending test sets 
theorems natural numbers integers sets lists proved far see section left sides theorems contain extensible respect original test set example necessary extend extending domain 
applications test sets obvious discussion standard test set check certain conditions 
furthermore constructors algebraic specification known test set construction identify 
theorem serves theoretical basis results 
test sets sufficient completeness check theorem canonical constructor preserving rewrite system subset consisting constructor rules canonical left linear rewrite system 
symbol completely defined ground reducible respect minimal complete test set proof 
ground reducible respect minimal complete test set ground term form constructor ground terms reduced sufficiently complete 
part proof require canonical 
similarly sufficiently complete canonical constructor preserving irreducible constructor ground terms complete test set includes terms instances include follows ground reducible respect complete tset set minimal complete test set tsl checking function symbol completely defined 
check possible substitution oe fx tsl reduces completely defined 
case reduced needs defined tuple 
fact test set tsl extended consider constructor subterms rules gamma result better set templates defined 
templates property defined ground instance template 
example discussed subsection natural numbers generated suppose defined follows 
completely defined ground reducible respect test set substituting terms tset set lead result reduced rules third rule test set get need defined done third rule instance third rule equation test set extended extended test set imply may undefined second argument 
identifying constructors algebraic specification theorem canonical left linear rewrite system function symbols appearing minimal complete test set tsl constitute constructor symbols function symbol appearing tsl constructor symbol 
proof 
minimal complete test set tsl term involving ground reducible irreducible instance contradiction assumption tsl complete 
similar result jouannaud kounalis 
example fs 
fs candidate set tsl cand cand gamma input quasi check find term ground reducible respect test set consists 
theorem constructor symbols constructor completely defined terms implementation experimental results test set method proving inductive properties checking sufficient completeness property equational axiomatization implemented rrl kapur zhang 
followings examples proved implementation method rrl 
example revisit example natural numbers generated discussed subsection rule set fx proofs equations induction quite straightforward standard test set computed 
instance proof main steps making rule lhs covers left side new rule rule reduce term tsl adding rule change tsl critical pairs new rule computed proved equal 
steps done conclude inductive theorem 
continue prove theorem method needs little effort test set tsl computed additional costly operations done 
test set method extended multi sorted equational axiomatizations difficulty illustrated example 
example suppose natural numbers generated set constructors lists natural numbers generated constructors nil atom takes number returns unit list app appends lists 
axiomatization app nil app atom nil atom app app atom app atom app test set tsl sort list contains terms jk contains terms constructors natural numbers see jouannaud kounalis 
prove app associative method needs check rule app app app app reduces term tsl 
jouannaud kounalis method needs construct substitutions order test ground reducibility app app 
example consists rules axiomatizing data type constructors 




shown inductive theorem commutative 
example fe gamma consist rules set set set 
comp comp comp set comp comp set comp comp set comp set set consider empty set different singleton sets rules define union operator multisets contain different elements 
function set turns multiset set removing duplicates 
function comp returns complement multiset 
theorems proved set set set comp set comp set comp comp comp comp set set set comp comp set set comp comp equation disproved set comp comp comp terms tsl terms set jk 
example consists rules plus rules div div 
div div sum sum sum div divides number sum sums numbers theorems proved rrl div div div sum div example suppose contains plus axioms comb comb comb comb comb defines called binomial coefficients 
theorems proved rrl 
comb comb comb comb example successfully proved instances fermat little theorem mod prime 
test set linear rewrite systems highly inefficient delta delta delta axiom axiom delta delta delta 
constructor set axiomatization scheme parameter 

delta delta delta equations proved px px stands delta delta delta 
stands delta delta delta 
test set rewriting system obtained specifying prime number identical set irreducible ground terms corresponding system 
axioms theorem proved test set seconds seconds app app app app table comparison test set ground reducibility 
table comparison test set method ground reducibility method test set tsl implemented rrl statistics collected examples running rrl written franz lisp sun workstation mega byte memory 
column test set table time seconds test set method 
column time ground reducibility method 
tsl jk quite small examples listed table difference sizes tsl jk 
function symbols constructors difference significant 
example consist rules function symbols constructors 
compute tsl disprove inductive theorem method takes seconds terms tsl 
implementation failed compute jk due lack space hour running time know size jk 
table list inductive theorems proved test set method 
theorems involve symbols new constructor rules generated test set method ground reducibility method perform way 
time reported time needed check original canonical system augmented theorem proved canonical 
experiments indicate better distinguish constructor symbols distinction results avoiding ground reducibility checks encounters rules left sides symbols 
better implement inductionless induction constructors 
shown constructor symbols axioms theorem proved time seconds set set set comp set comp set comp comp comp comp set set set div div div sum div comb comb comb comb table additional examples proved test set method 
identified test set method 
done ground reducibility check needed rules left side symbols 
method test sets consistency check inductive completion procedure automating inductionless induction 
method shown better related method jouannaud kounalis reasons size test set terms computed method polynomial size rewrite system size test set terms jouannaud kounalis exponential size rewrite system ii test set method avoids ground reducibility check new rules ground reducibility check exponential complexity 
give better method ground reducibility check test set tsl 
experimental comparison methods small set examples indicate test set method better jouannaud kounalis method 
inherent limitations inductionless induction approach knuth bendix completion procedure requirement theory axiomatization induction proofs carried canonical system ii theory augmented theorem proved induction canonical system 
inductive knuth bendix completion procedure may loop fail equation 
course case knuth bendix completion procedure terminates canonical system augmented theory serves decision procedure 
obvious really necessary require canonical system theory augmented theory exist 
fact sufficient require system ground confluent canonical ground terms 
deciding terminating rewrite system ground confluent undecidable kapur narendran otto 
adding inductive theorem system destroy ground confluence may start small system axioms prove ground confluence augment adding inductive theorem worrying ground confluence 
practical methods showing ground confluence need investigated 
check ground confluence sufficient need perform critical pairs rule corresponding equation proved rules theory 
fribourg proposed linear inductive completion method 
basic idea method computing critical pairs system new rule position left side new rule needed considered subset rules needed position exists complete class superposition substitutions new rule subset rules 
various criteria avoid computing critical pairs losing general confluence buchberger kapur musser narendran apply inductive completion procedure 
goebel studied criteria induction proofs 
research needed area study usefulness adequacy ideas large examples proving unique factorization theorem number theory 
alternative combine heuristics boyer moore theorem prover inductionless induction approach rewriting framework 
alternative investigated group preliminary results quite encouraging details see zhang kapur krishnamoorthy 
discussed kapur musser inductionless induction approach meaningful equational axiomatization sufficiently complete 
equational axiomatization sufficiently complete jouannaud kounalis method method warn user axiomatization needs completed treat function symbol constructor proving inductive properties 
perspective particularly useful resulting approach proving inductive properties monotonic theorems proved earlier axiomatization may remain valid new function partial axiomatization introduced 
example suppose constructors natural number completely defined gamma terms usual manner 
definitions theorems gamma proved specification system 
test set system terms 
introduce new function foo add rule foo original system 
new system sufficiently complete 
foo considered constructor done initial algebra semantics test set tsl new system contain terms foo foo gamma foo foo foo gamma previously proved theorems gamma theorems new system 
kapur musser proposed different approach proving inductive properties axiomatizations sufficiently complete monotonicity property preserved 
approach involves completing axiomatizations possible ways checking equation valid completed axiomatization 
approach appears quite tedious implement research needed refine approach automating inductionless induction approach practically useful design analysis specifications programs 
acknowledgment authors grateful dave musser anonymous referee helpful comments suggestions earlier draft 
boyer moore computational logic 
academic press new york 
dershowitz applications knuth bendix completion procedure 
laboratory operation aerospace aerospace report 
atr may 
goguen prove algebraic inductive hypotheses induction proc 
fifth conference automated deduction les arcs france lncs springer verlag july 
fribourg strong restriction inductive completion procedure proc 
th international colloquium automata languages programming icalp rennes france 
huet confluent reductions properties applications term rewriting systems jacm october 
huet complete proof correctness knuth bendix completion procedure jcss 
huet proof induction equational theories constructors jcss 
jouannaud kounalis automatic proofs induction theories constructors information computation 
preliminary version appears proc 
ieee conf 
logic computer science cambridge ma june 
kapur musser proof consistency ai journal feb 
kapur musser inductive reasoning incomplete specifications proc 
ieee symposium logic computer science conference cambridge ma june 
kapur musser narendran prime superpositions need considered knuth bendix completion procedure symbolic computation 

kapur narendran otto ground confluence term rewriting systems 
technical report dept computer science state university new york albany albany ny march 
information computation may 
kapur narendran rosenkrantz zhang sufficient completeness complexity 
technical report dept computer science state university new york albany albany ny december 
accepted publication acta informatica 
kapur narendran zhang proof induction test sets proc 
th intl conf 
automated deduction cade oxford 
kapur narendran zhang sufficient completeness related properties term rewriting systems 
acta informatica 
kapur sivakumar zhang rrl rewrite rule laboratory proc 
th international conf 
automated deduction cade oxford 
kapur zhang 

rrl rewrite rule laboratory proc 
th international conference 
automated deduction cade argonne lecture notes computer science eds 
lusk overbeek springer verlag lncs 
knuth bendix simple word problems universal algebras computational problems algebra ed 
leech pergamon press 
kounalis zhang general completeness test equational specifications proc 
hungarian conference computer science 
available technical report centre de recherche en informatique de nancy nancy france jan 
confluence criterion generalized knuth bendix algorithm proc 
linz austria lncs 
inductive completion ground proof transformation technical report 
computer information sciences university delaware 
guttag specification application programming data types 
department computer science univ toronto ph thesis csrg 
lankford simple explanation inductionless induction mtp louisiana tech university la 
musser proving inductive properties data types proc 
th symp 
principles programming languages las vegas jan 
nipkow weikum decidability result sufficient completeness axiomatically specified data types proc 
th gi conf 
theoretical computer science lncs cremers eds springer verlag 
plaisted semantic confluence tests completion methods information control 
zhang kapur krishnamoorthy induction principle equational specifications proc 
ninth international conference automated deduction cade argonne il may 

