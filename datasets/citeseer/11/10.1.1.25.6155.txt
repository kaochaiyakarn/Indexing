approach regression testing slicing rajiv gupta mary jean harrold mary lou soffa dept computer science dept computer information science dept computer science university pittsburgh ohio state university university pittsburgh pittsburgh pa columbus oh pittsburgh pa gupta cs pitt edu harrold cis ohio state edu soffa cs pitt edu changes previously tested program goal regression testing perform retesting modifications maintaining testing coverage completely retesting program 
novel approach data flow regression testing uses slicing algorithms explicitly detect definition associations affected program change 
important benefit slicing technique previous techniques data flow history recomputation data flow entire program required detect affected definition associations 
program changes drive recomputation required partial data flow slicing 
advantage technique achieves testing coverage respect affected definition associations complete retest program maintaining test suite 
overhead maintaining updating test suite eliminated 

software may completely tested development satisfy adequacy criterion program changes maintenance require parts software retested 
regression testing process validating modified parts software ensuring new errors introduced previously tested code 
addition testing changed code regression testing retest parts program affected change 
selective approach regression testing attempts identify retest parts program affected change 
important problems selective regression testing identifying existing tests rerun may exhibit different behavior changed program identifying program components retested satisfy coverage criterion 
focuses second problem identifies program components satisfy data flow testing criteria changed program 
techniques selective regression testing data flow program identify program components retest changes developed 
data flow testing avariable assignment tested satisfied execute subpaths assignment definition variable value 
traditional data flow analysis techniques compute definition def associations test data adequacy criteria select particular def associations test 
tests generated cause execution selected def associations 
selective regression testing techniques data flow testing identify def associations affected change select tests satisfy affected def associations 
partially supported nsf presidential young investigator award ccr ccr university pittsburgh ccr national young investigator award ccr university 
earlier version appeared proceedings conference november 
existing data flow regression testing techniques explicitly identify directly affected def associations detecting new def associations created program change 
techniques compute changed data flow incrementally updating original data flow agree modified code exhaustively computing data flow original modified programs comparing sets determine differences 
techniques save data flow information testing sessions completely recompute session 
change indirectly affect def associations due change computed value definition change predicate value conditional statement 
existing regression testing techniques identify indirectly affected def associations running tests test suite previously executed changed code slicing techniques require prior computation data flow information program 
presents new approach selective regression testing concept program slice backward program slice program point variable consists statements program including conditionals affect value forward program slice program point variable consists statements program including conditionals affected value technique uses slicing algorithms determine directly indirectly affected def associations 
algorithm backward walk program point edit searches definitions related changed statement 
second algorithm forward walk point edit 
forward walk algorithm detects uses subsequent definitions uses affected definition changed result program edit 
additionally algorithm identifies def associations depend changed predicate 
algorithms technique detects def associations changed affected program modifications 
slicing algorithms efficient detect def associations requiring data flow history complete recomputation data flow entire program 
algorithms approach taken weiser uses control flow graph representation program requires computation partial data flow information 
previous regression testing techniques require test suite data flow information select tests regression testing technique explicitly identifies affected associations 
technique requires test suite complete data flow information enable selective retesting 
test suite maintained fewer tests may executed tests may execute affected def associations rerun 
section presents background slice technique 
section describes analysis required detect affected def associations presents algorithms backward forward walks 
section presents algorithm uses backward forward walks determine retest different types program edits general approach translating higher level edits lower level edits 
section discusses merit technique applications testing 
concluding remarks section 

definition associations definition associations definition uses variable definition uses variable 
background section overviews data flow testing basis regression testing technique 
technique uses control dependence information identify affected def associations program retest 
section briefly discusses control dependence 

data flow testing data flow testing techniques developed assist detecting program errors 
techniques data flow information program guide selection test data 
traditional data flow analysis techniques control flow graph representation program compute def associations 
flow graph node corresponds statement edge represents flow control statements 
definitions uses variables attached nodes control flow graph data flow analysis uses definitions uses compute def associations 
uses classified computation uses uses predicate uses uses 
ac occurs variable computation statement occurs variable conditional statement 
def associations represented triples value variable defined statement statement edge ure definitions shown variable left side assignment uses shown variable right side assignment predicate 
node contains definition node 
triple represents def association 
node contains definition node triple represents def association 
contains node definitions nodes def associations definitions nodes edges leaving conditional node triples represent def associations 
test data adequacy criteria select particular def associations test 
criterion requires definition variable tested loop free subpath reachable 
criterion uses requires definition variable tested subpath uses 
criteria defs require fewer def associations tested 
complete discussion data flow testing see 

control dependence def associations may affected program change slice approach uses control dependence information 
informally anode statement control flow graph control dependent node statement paths path necessarily reaches path may reach definition control dependence ferrante ottenstein warren essentially definition direct strong control dependence clarke podgurski 
execution statement depends statement evaluating true execution statement depends statement evaluating false statements control dependent statement 
statements control dependent statement 
statements control dependent reaching point immediately statement 
detecting affected definition associations satisfy data flow testing criterion making program change requires identifying def associations affected change 
section discusses different types affected def associations 
discusses slicing algorithms forward backward walks identify definitions uses affected program edit 
section presents algorithm handle different types program edits way higher level edits translated lower level edits processing 

types affected def associations affected def associations fall categories affected directly insertion deletion definitions uses new associations affected indirectly change value value associations condition path associations 
new associations edit creates new def associations tested 
example consider code segment 





endif 
replace 
statement replaced new variable introduced 
def associations consisting definitions reach new tested 
new associations 
value associations value associations def associations computed values may changed program edit require retesting 
example consider code segment 

replace 




endif 

statement replaced new def associations created 
def associations depend new value retested affected change 
statements definition statement def associations value associations 
new value statement affects computed value statement causes value association identified 
likewise value association affected value statement 
values statement statement affected process identifying value associations continues uses variables 
path associations def associations affected path path condition changed retested 
path condition altered explicit change operator predicate statement 
example consider code segment 

replace 
replace 

endif 


endif 
write 
statement changed control dependent statement may affected change 
statement control dependent statement path association identified 
apath condition altered change value predicate 
example code segment statement replaced value computed statement affected path condition statement changed 
path association 

backward forward walk algorithms algorithms backward forward walks identify definitions uses affected program edit 
algorithms control flow graph representation program node represents single statement 
algorithms compute data flow information identify affected def associations require past history data flow information 
furthermore algorithms slicing algorithms examine backwardwalk defs visited path taken variable def associations statement 
backwardwalk variable statement 
backwardwalk locates definitions nodes reach statement 
relevant parts control flow graph compute required data flow information 
algorithms designed approach taken weiser computing slices 
approach lets relevant program slices computed exhaustively computing def information program 
discussion assumes scalars considered technique easily extended include arrays adding new condition halting search paths 

algorithm backwardwalk backward walk algorithm identifies statements containing definitions variables reach program point 
algorithm detail demonstrated example 
gives program segment containing definitions uses 
suppose goal compute set statements containing definitions variable reach statement 
walk begins point immediately statement control flow graph 
back edges locates statement contains definition definition reach statement path statement search definitions stops statement 
backward paths statement algorithm walks back edge finds statement contains definition backward walk algorithm locates statements containing definitions variable reach point program computing data flow analysis entire program 
technique uses definitions reach statement uses statement form def associations 
noted variable considered undefined path search terminate reaches start node control flow graph 
algorithm backwardwalk input program point statement set program variables output set statements nodes control flow graph declare set program variables worklist statements nodes control flow graph maintained priority queue program point statement pred succ returns set immediate predecessors successors worklist initialization forall pred worklist rdf worklist rdf reverse depth forall worklist statements backward walk continue processing get head worklist get statement backward walk pe succ recompute set union sets successors change iteration assign new set defines variable definition variable path add statement definitions set searching definitions definition just propagate definitions variables add preds worklist forall preds worklist rdf worklist return statements containing definitions variables backwardwalk algorithm backwardwalk computes definitions variables reach statement algorithm backwardwalk identifies statements containing definitions set variables reach program point backwardwalk inputs program point statement set program variables outputs aset statements nodes control flow graph corresponding definitions variables reach backwardwalk traverses control flow graph backward direction variables encountered path 
algorithm collects statements containing definitions returns set 
assist traversal process backwardwalk maintains sets variables relevant nodes control flow graph 
contains variables definitions algorithm encountered path point immediately contains variables definitions algorithm encountered path point immediately preceding algorithm walks backward control flow graph computes asthe union sets successors 
algorithm uses set variables temporarily newly computed set 
backward traversal algorithm maintains worklist worklist consisting nodes visited worklist indicates far traversal progressed 
backwardwalk maintains worklist priority queue reverse depth ordering nodes control flow graph 
algorithm uses represent statements nodes control flow graph functions pred succ compute immediate predecessors successors node respectively 
algorithm backwardwalk begins initializing sets uses 
initialization entries worklist predecessors main part algorithm loop repeatedly processes statements worklist worklist empty statement backwardwalk computes union sets successors control flow graph 
change iteration loop processing path containing terminates comparison causes loop processed time 
differ change iteration loop 
case backwardwalk assigns examines definition variable ifthe algorithm finds definition adds 
additionally algorithm removes longer needs search definition path 
backwardwalk finds definition variable adds immediate predecessors worklist statement added worklist represents point program backward traversal continue variables defined path successor point backwardwalk adds node worklist set successor empty 
worklist empty algorithm encountered definitions variables backward paths algorithm terminates 
example demonstrates application backwardwalk locate definitions reach statement 
algorithm initializes worklist statement immediate predecessor 
computing immediate predecessors statement algorithm examines statements 
statements define variable traversal stops backwardwalk returns statements 
analysis runtime complexity backwardwalk algorithm represent number nodes control flow graph 
identification member may worst case require traversal entire control flow graph 
components involved processing node encountered traversal inserting node worklist takes log time worklist priority queue processing node reaches front worklist takes constant time assuming bit vectors bit represents distinct variable program 
runtime complexity backwardwalk bounded log 

algorithm forwardwalk forward walk algorithm identifies uses variables directly indirectly affected change value variable point program change predicate 
def associations returned algorithm triples indicating value variable statement affected change statement association directly affected triple represents altered definition 
def association indirectly affected ways triple transitive closure changed definition triple control dependent changed affected predicate 
forwardwalk false variable def association path taken forwardwalk true variable def association path taken forwardwalk variable statement finds def associations def association 
second forwardwalk begins traversal statement definitions reach def associations located 
statement control dependent statement def associations identified 
consider program segment 
forward walk begins statement variable 
directly affected def association computed 
additionally association variable transitive closure definition statement def association indirectly affected 
walk begins statement variable uses statements located directly affected def associations computed 
additionally affected predicate statement def association definition control dependent statement indirectly affected 
def associations variable identified indirectly affected 
algorithm forwardwalk inputs set pairs representing definitions uses boolean names indicates walk starts set variable names program point set definitions 
names true walk begins set variable names point represented 
walk begins pairs affected definitions 
forwardwalk outputs set triples triples 
forwardwalk handle multiple pairs consisting points statements variables form simultaneously processing pairs 
simplify discussion forwardwalk described single pair 
algorithm forwardwalk pairs names input names boolean true change predicate change pairs sets definitions program point statement variable output triples set point statement statement variable declare kill set pairs point statement variable worklist cd set point statement set program variable statement node pred succ returns predecessors successors control flow graph def returns variable defined statement triples initialization forall pairs forall succ worklist df worklist df depth forall statements pair pairs forall pairs names worklist continue processing nodes get head worklist pe pred change iteration recompute pe pred cd cd update affected predicate information variable forall triples triples additional def associations kill def def definitions killed kill def propagate definitions elsif variable forall triples triples additional def associations backwardwalk find definitions reach affected predicate add new definitions sets mark predicate statement affected elseif defines variable cd statement contains definition def propagate definition forward statement contains definition interest definitions uses continue processing forall succ worklist df worklist return triples affected value path associations forwardwalk 
algorithm forwardwalk identifies def triples affected change value variable point program affected predicate change 
statement node sets contain pairs representing definitions uses values affected edit 
set contains values just uses 
value represented pair indicating value variable point interest 
forwardwalk encounters statement uses value belonging adds def triple tothe list def pairs affected change value variable statement value variable defined statement indirectly affected 
algorithm encounters new definition variable statement values belonging killed definition search values path terminates 
set kill algorithm denotes set values killed definition 
kill set needed compute 
algorithm walks forward control flow graph computed union sets predecessors 
traversal worklist worklist con nodes visited indicates far traversal progressed 
forwardwalk maintains worklist priority queue depth ordering nodes control flow graph 
algorithm examines statements worklist uses uses definitions sets definitions statements control dependent changed affected predicate 
algorithm examines statements worklist additional statements considered worklist 
forwardwalk uses aset definitions variable statements program 
functions pred succ def return predecessors successors variable defined statement respectively 
part forwardwalk variables initialized 
main part algorithm loop processes statements nodes worklist worklist empty statement removed worklist processing consists computing union sets predecessors determining previous value sets change previous iteration forward walk path terminates sets differ processed assigned assigned union control dependence information predecessor 
contains nodes control dependent forward walk path moved different region control dependence updated accordingly 
procedure shown described handles task 
node checked see variable def associations pairs added triples variable defined added indirectly affected 
contains def associations pairs added triples signals affected predicate definitions reach backwardwalk definitions identify indirectly affected def associations 
type statement inspected definition appropriate data flow sets updated 
variables data flow information propagated empty successors processed added worklist worklist empty processing terminates triples returned 
important feature forwardwalk identifies def associations control dependent affected predicate value computed definition unaffected 
control dependence information computed prior forwardwalk control dependencies efficiently computed node control flow graph post dominator relation nodes 
control flow graph node cd stores set nodes control dependent 
aset nodes stores current list affected predicates 
node containing definition encountered procedure forall cd statement previous control dependence region update accordingly longer affected new region forall triples update def associations triples triples forall triples triples 
procedure adjusts predicate information walk entered different region control dependence 
nonempty definition added set uses 
way forwardwalk locates def associations control dependent affected predicates 
forwardwalk recognize def associations control dependent affected predicates 
accomplish time new node removed worklist control dependencies compared control dependencies predecessors 
difference control dependence information procedure shown called 
assume access variables forwardwalk 
considers affected predicates control dependent removes statements control dependencies indicates predicate may longer affected removed triples adjusted accordingly 
example illustrates forwardwalk forwardwalk variable statement finds statement yield def association 
definition statement affected change forwardwalk adds continues traversal find def association 
second forwardwalk walk begins statement definitions reach 
initial pairs consist 
forwardwalk finds triple identify affected def association 
def association included value affected change statement 
forwardwalk finds definition statement affected identified 
statement control dependent statement contains definition def associations identified values affected change statement 
analysis runtime complexity forwardwalk algorithm represent number nodes control flow graph 
identification member triples achieved ways forward traversal flow graph identify value backward traversal predicate node followed forward traversal predicate node 
worst case forward backward traversals may inspect entire control flow graph process nodes 
processing node consists components inserting node worklist takes log time processing node reaches front worklist takes time requires examining element node flow set size data flow set bounded runtime complexity forwardwalk algorithm triples 
algorithm edit input program point statement edit insert delete definition change statement branch operator insert delete edge output set point statement statement variable declare set statements nodes control flow graph triples triples set point statement statement variable cfg cfg control flow graph set program variables set variable definitions def returns variable defined statement case edit insert variable statement delete variable statement insert definition variable statement delete definition variable statement change operator statement change operator branch condition statement insert edge statement statement delete edge statement statement 
algorithm accepts statement edit type edit identifies def associations tested edit 

actions different types edits section considers consider way backwardwalk forwardwalk identify def pairs affected program change 
algorithm edit inputs statement edit occurs type edit edit occurred processing edit returns def associations affected edit 
uses variables processing 
stores statements nodes control flow graph representing definitions program 
triples triples represent sets def associations 
cfg cfg represent control flow graphs represents set program variables represent sets variable definitions 
def returns variable defined statement action access set global variables 
discussion detail action function taken result edit 
insert variable statement 
inserting variable causes new def associations statements containing definitions reach new function uses backwardwalk locate definitions reach new definitions returned definitions represents newly created def association added forwardwalk computes def associations experienced value changes change value associations control dependent affected predicate 
set affected def associations union 

change insert statement change delete statement backwardwalk forwardwalk false definition statement reaches statement association tested def associations retested forwardwalk false def associations retested change insert definition statement change delete definition statement forwardwalk false backwardwalk def associations retested definition statement reaches statement forwardwalk false def associations retested 
change inserts statement 
backwardwalk identifies def associations new forwardwalk identifies def associations affected change definition statement 
change deletes statement 
forwardwalk identifies def associations affected change definition change inserts definition statement 
forwardwalk identifies def associations retested 
change deletes definition statement 
backwardwalk identifies definitions reach statement form new def associations tested 
forwardwalk identifies def associations affected change statement 
function modified cfg backwardwalk find statements definitions reach form new def associations forwardwalk false find indirectly affected def associations combine new affected def associations consider change assume statement just inserted 
backwardwalk finds definition statement added forwardwalk identifies change value affects def associations 
delete variable statement 
deleting causes value change introduces new def associations 
function uses forwardwalk identify def associations affected change value def associations involve predicate statements affected path associations predicates identified forwardwalk returned set def associations assigned 
function modified cfg forwardwalk false find affected def associations example statement change deleted uses forwardwalk detect def associations experience value changes affected path associations 
insert definition variable statement 
definition inserted statement new def associations statements containing reachable uses affected def associations due change computed value uses forwardwalk identify newly created def associations inserted definition definitions experience value changes change 
def associations involve predicates def associations affected predicates identified forwardwalk set new affected def associations returned forwardwalk assigned 
function modified cfg forwardwalk false find affected def associations assume statement example inserted definition change 
forwardwalk yields new association newly computed value statement 
additionally forwardwalk identifies value association value statement affected 
delete definition variable statement 
definition variable deleted statement new def associations definitions reach uses previously blocked deleted definition additionally def associations affected change computed value uses backwardwalk identify definitions reach statement containing deleted definition adds definition deleted definitions reach uses previously reached definition additionally value path associations affected deleted definition computed 
forwardwalk identifies def associations created edit statement value associations values affected path associations dependent affected predicates associations returned triples uses reachable associated definitions stored remaining def associations triples assigned union 
function modified cfg backwardwalk find statements definitions reach triples forwardwalk false find affected def associations triples form new def associations triples find indirectly affected def associations combine new affected def associations example statement deleted change backwardwalk identifies definitions reach statement 
result definition statement 
forwardwalk begins statement finds affected value association 
definition statement deleted definition def association replaced definition statement backwardwalk changed def association 
def association forwardwalk due change value change operator value constant operand statement 
operator constant operand assignment statement altered new def associations created 
value variable defined altered statement changes causes value associations possibly path associations 
uses forwardwalk identify value path associations affected edit stored 
function new cfg forwardwalk false find affected def associations consider change assume operator change statement 
forwardwalk statement identifies value associations affected change 

write change change operator statement change change condition statement forwardwalk false backwardwalk def associations retested definition statement definitions statements definition statement reach statement forwardwalk true finds triples yielding def associations def associations 
change modifies operator statement 
forwardwalk identifies def associations retested 
change modifies condition statement 
backwardwalk forwardwalk identify def associations affected change statement 
change operator value constant operand branch condition statement changing operators branch condition statement creates new def associations 
branch condition define variable directly affect values def associations 
example changing condition xy 
value path associations influenced result identified 
identifies definitions reach backwardwalk stores uses definitions reachable control dependent identified forwardwalk result stored triples 
triples contains types def associations def associations definition appears control dependent def associations definition control dependent function computes def associations type stores computes def associations type stores final set affected def associations adding set 
function new cfg backwardwalk find statements definitions reach triples forwardwalk contains find value path associations definition true triples def associations type triples def associations type find affected def associations consider condition change statement change 
backwardwalk statement identifies definitions reach changed predicate definition statement definitions statements definition statement 
forwardwalk called pairs names flag set 
triples returned walk form def associations 
def associations affected identified byt forwardwalk retesting 
insert edge statement statement inserting edge cause creation new def associations definitions may reach uses new paths created 
variables defined statements corresponding uses new def associations may values affected 
def associations depend values affected variables identified 
uses backwardwalk find definitions reach statement altered control flow graph cfg definitions stored forwardwalk locate def associations old control flow graph cfg depend definitions triples store def associations 
new affected def associations involving new edge forwardwalk compute triples cfg removing common def associations triples triples triples stores new def associations forwardwalk yields value path associations set affected def associations isthe union addition edge modifies control dependence information modified flow graph compute control dependences 
forwardwalk performed old modified flow graphs control dependence information graphs available 
action backwardwalk cfg find definitions reach new cfg triples forwardwalk def se false cfg find def associations old cfg triples forwardwalk contains definition def true cfg find def associations new cfg triples se def ref triples triples triples find new def associations forwardwalk def false cfg find affected def associations affected def associations see effects inserting edge control flow graph consider 
partial original program modified version 
control flow graphs shown original program modified version edge deleted modified version edge added 
general approach translating higher level edits lower level edits discussed section backwardwalk statement finds definition statement 
forwardwalk statement control flow graph original program yields forwardwalk control flow graph new program yields 
contains tested 
delete edge statement statement deleting edge may cause deletion def pairs create new pairs 
def pairs affected deleted edge 
affected def pair deleted reachable definition deleted edge 
identifies definitions reach statement backwardwalk information definitions reach deleted edge identified 
forwardwalk locate def associations triples inthe old control flow graph cfg depend definitions 
forwardwalk new control flow graph cfg locate def associations triples depend definitions modified control flow graph 
removing def associations eliminated due edge deletion obtain set affected def associations case edge addition edge deletion recompute control dependence information 
action backwardwalk cfg find definitions reached old cfg def def find definitions reached old cfg triples forwardwalk contains definition def true cfg triples def se def ref triples find old def associations triples forwardwalk def se false cfg find new def associations cfg triples triples triples set affected def associations original program partial 


goto 

modified program partial 


goto 






original program 




modified program deleting edge retested 




modified program adding edge tested 
program modified version 
control flow graph original program shown left control flow graphs modified version shown center right 
see effects deleting edge control flow graph consider 
backwardwalk statement determines definition variable statement reaches statement deleted edge 
forwardwalk statement yields def associations 
def associations deleted modified program tested 

translating high level edits low level edits approach translating higher level edits lower level edits processing algorithms structural changes control flow graph add modify assignment statements add modify predicates 
original program segment 

modified program segment 
goto 

original program 
insert edge 
insert assignment statement 

insert predicate 
program left modified versions result predicate change program 
shows example inserting predicate statement 
original program segment modified program segment shown 
control flow graph represents original program segment 
control flow graph shows insertion edge target conditional branch 
body conditional inserted assignment statement inserted 
predicate statement added control flow graph 
step algorithms process edit identify def associations re test 
low level edit def associations retested identified 
low level edits processed set possible def associations may require retesting known 
low level edits may cause previously identified def associations invalidated single pass def associations required identify remove def associations 
backward walk algorithm determine validity def associations 
invalid associations discarded remaining def associations tested 
important note high level edit may translate low level edits testing performed low level edit performed high level edit 

testing affected def associations regression testing technique illustrated example 
consider program control flow graph shown 
program compute square root input variable repeatedly halving interval estimates 
table right gives def associations program required satisfy uses data flow testing criterion 
program read 
goto def information node definition def associations program compute square root contains error statement changed 
error statement statement read 
correcting error requires actions delete statement insert statement 
sequel shows algorithms handle changes 
delete statement 
deleted forwardwalk finds uses statements 
detected associations 
definition statement may affected def associations detected 
statement may affect definition def associations identified 
definition statement may affected processing stops def associations definition detected 
insert statement 
backwardwalk statement finds reaching definition statement returns def association 
forwardwalk statement identical forwardwalk performed deletion statement def associations returned 
lists def associations affected program change tested satisfy uses criterion 
node definition def associations def associations regression testing described sliced algorithms satisfy uses criterion technique applicable data flow testing criteria 
change algorithms identify directly indirectly affected def associations program 
def associations considered adequacy retesting program 
user desires du paths coverage uses finding test executes subpath definition tests required execute du paths definition 
defs coverage desired satisfying def associations required definition 
affected def associations identified see tests executed exercise def associations 
technique maintain test suite retest program 
test suite maintained tests selected test suite retest def associations program change test suite updated reflect change 
test suite typically contains association def pair test test pair information test includes input values execution path 
test suite examined determine tests satisfy affected def associations changed code 
tests rerun check see affected associations satisfied test updating test suite 
pair associated test new test generated 
technique requires fewer tests previous methods execute tests traverse changed node 
example def associations due statements tested program change 
save overhead involved storing updating test suites approach generate tests changed parts program regression testing 
sliced algorithms explicitly identify directly indirectly affected def associations tests run satisfy associations uses data flow testing coverage program provided 
regression testing techniques sliced method identifies affected def associations overhead maintaining updating test suite 
scenarios new tests may required 
tests generated manually user automatically test generator new test required program slice computed affected def associations assist generation tests 
program slice contains statements needed traverse affected untested def associations 
tests generated manually program slice enables user focus program statements pertinent affected def associations 
tests automatically generated test generator considers program statements slice 
case slice reduces test generation effort input variables slice considered 
additional details slicing algorithm test generation 
approach regression testing slicing developed bates horwitz 
approach uses backward slicing algorithms program dependence graphs determine affected parts program require retesting 
program changes program dependence graph reconstructed slicing algorithms applied identifying affected parts program 
construction program dependence graph requires exhaustive recomputation def associations program incremental update changed def associations previous def associations 
approach regression testing slicing developed rothermel harrold 
approach uses program dependence graph representation identify changed def pairs regression testing 
approaches slicing approach requires partial data flow analysis program changes depend def history rothermel harrold consider interprocedural regression testing focus intraprocedural testing 
slicing algorithms weiser handles interprocedural slicing algorithms extended allow interprocedural regression testing 
problem performing partial data flow analysis addressed demand driven data flow framework described 
framework apply analyses require consideration control dependence information 
framework derive backwardwalk algorithm developing forwardwalk algorithm 

regression testing technique utilizes slicing 
technique identifies directly indirectly affected def associations 
slice regression testing efficient terms memory time overhead 
previous regression techniques approach needs completely recompute data flow information change maintain history previous data flow computation incremental updates 
approach recomputes partial data flow needed driven program changes 
approach need overhead maintaining test suite includes input output updates test suite 
test suite maintained approach reduces number tests rerun provide full testing coverage update test suite 
technique satisfy uses criterion easily modified data flow testing criteria 
interprocedural slicing technique extended interprocedural regression testing 

ho sethi ullman compilers principles techniques tools addison wesley publishing massachusetts 

bates horwitz incremental program testing program dependence graphs conference st acm sigplan sigact symposium principles programming languages pp 
january 

clarke podgurski richardson comparison data flow path selection criteria proceedings th international conference pp 
august 

duesterwald gupta soffa interprocedural data flow analysis demand proceedings nd annual acm sigplan sigact symposium principles programming languages pp 
january 

ferrante ottenstein warren program dependence graph optimization acm transactions programming languages systems vol 
pp 
july 

frankl weyuker applicable family data flow testing criteria ieee transactions vol 
se pp 
october 

gupta soffa employing static information generation test cases journal verification reliability vol 
pp 
december 

gupta soffa framework partial data flow analysis proceedings international conference pp 
september 

harrold soffa incremental approach unit testing maintenance proceedings international conference pp 
october 

harrold approach incremental testing technical report department computer science ph thesis university pittsburgh january 
horwitz reps binkley interprocedural slicing dependence graphs acm transactions programming languages systems vol 
pp 
january 

korel laski tool data flow oriented program testing acm proceedings pp 
december 

ntafos evaluation required element testing strategies proceedings th international conference pp 
march 

ostrand weyuker data flow analysis regression testing proceedings sixth annual pacific northwest conference pp 
september 

podgurski clarke formal model program dependences implications software testing debugging maintenance ieee transactions vol 
pp 
september 

weyuker selecting software test data data flow information ieee transactions vol 
se pp 
april 

rothermel harrold safe efficient algorithm regression test selection proceedings international conference pp 
september 

rothermel harrold selecting tests identifying test coverage requirements modified software proceedings international symposium analysis pp 
august 

taha liu approach software fault localization revalidation incremental data flow analysis proceedings compsac pp 
september 

weiser program slicing ieee transactions vol 
se pp 
july 
