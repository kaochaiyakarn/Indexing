separation composition overlapping interacting concerns position presents problems results achieved years defining developing 
das development distributed applications separation concerns approach developing objectoriented concurrent distributed programs separation concerns strategy 
position emphasize separation composition nonorthogonal concerns 
interested reader obtain information web page www inesc pt ars 

separation concerns approaches deal different issues abstractions integration mechanisms 
describes solutions domain specific aspects software object synchronization 
responsible integrating abstractions functionality object integration object synchronization abstraction functionality object 
non separation concerns approaches called unification approaches separate abstractions object model 
instance pool object model objects possess internal activity called sequential objects 
way integration mechanisms necessary object defined immediately sequential object integrated abstraction object concurrency 
advantage unification approaches simplicity final programmer 
instance object concurrency abstractions transparent 
unification approaches flexible include object model composition extensibility primitives associated abstractions unexpected repercussions semantics object model 
ant nio silva inesc ist technical university lisbon rua alves lisboa portugal silva org inesc inheritance anomaly problem known situation extensively discussed literature results unification approaches 
avoid flexibility problems unification approaches separation concerns approaches integrate abstractions final program 
gain flexibility abstractions separated functionality facilitating customization reuse 
requirement separation concerns approaches provide flexible abstractions software concerns 
separation concerns forces composition 
perspectives exist regarding concern composition orthogonal non orthogonal 
orthogonal perspective considers abstractions completely orthogonal join join sequentially non orthogonal perspective considers concern composition consistently integrate abstractions parts exhibiting semantic overlapping 
note orthogonal domainindependent semantic overlapping 
case composition supported integration mechanism 
second requirement separation concerns approaches support abstraction composition 
terms integration mechanisms separation concerns approaches may design solutions compilers reflection 
proxy pattern example integration mechanism design solutions 
instance applying proxy pattern functional object interface separated implementation 
integration abstractions done new implementation functional object interface uses previous functionality implementation 
integration change functional object implementation facilitating incremental development 
clients need changed interface remains 
disadvantage solution functional classes interface objects creating instances classes factory may ignore actual class implementation 
compiler integration mechanism code generation automatic avoids need functional classes interfaces 
integration mechanism allow run time substitution concurrency support constructions 
reflection integration mechanism allows control customization computational system behavior changes meta system built metaobjects 
meta objects support abstractions 
responsibility reflection object model integrate abstractions 
addition reflection allows runtime meta object replacement 
third requirement separation concerns approaches describe abstractions abstraction composition independently integration mechanisms 
obviously flexibility provided separation concern approaches pay price simplicity 
important balance flexibility simplicity 
fourth requirement separation concerns approaches balance abstraction flexibility simplicity 

approach approach design patterns composition patterns object oriented frameworks respectively describe abstractions describe abstractions composition implement integrate abstractions compositions 
approach fulfills requirements mentioned previous section 
introducing approach examples concurrent programming concerns object synchronization object concurrency 
complete description concerns 

design patterns design pattern defined abstraction 
design patterns properties order describe flexible abstractions expressiveness 
abstraction policies supported specializing design pattern associated abstraction 
instance object concurrency pattern specializations sequential concurrent objects 
briot considers reflection classifying set approaches 
classification centered properties integration mechanisms 
modularity 
concern design pattern separate abstraction object functionality 
modularity facilitates incremental development possible develop replace implementation abstraction separately object functionality 
reusability 
abstraction functional objects separately reusable extendible 
instance synchronization functionality reused instance inheritance 
way synchronization integrated posteriori concrete class synchronized 

composition patterns abstraction composition obtained composition concern design patterns 
instance obtain abstraction synchronized concurrent object necessary compose design patterns corresponding object synchronization object concurrency abstractions 
composition design patterns constitute abstraction described design pattern participants built composing involved pattern participants 
addition composition pattern collaborations built collaborations pattern participating composition 
experimentation concluded orthogonal composition restrictive 
situations semantic overlapping different abstractions 
verified composition abstractions policies trivially inferred composed abstractions sum parts 
order support abstraction composition composition patterns possess properties conservation 
properties participating design pattern properties preserved 
instance expressiveness design pattern maintained isolated composition pattern 
consistency 
spite conservation semantic overlapping abstractions handled 
deal synergy generated abstraction composition composition pattern describe new policies result composition 
describe consistent combinations overlapping parts restriction policy composition 
matrix identify new policies associated participants patterns policies combination restrictions 
concern layer composition layer application layer composition program concern composition component integration concern concern composition composition class class concern concerns concern concern composition component integration policy policy policy customization customization customization 
architecture layered object oriented framework separation concerns 
policies composition restrictions easily described generality 
policy object independent generic rule describe restrictions 
happens abstraction depends object implementation 
instance consider readers writers policy object uses update place recovery policy object immediately updated invocations 
situation write operations attribute execute concurrently 
deferred update policy invocations execute different copy objects write operations execute concurrently generating crash 

layered object oriented framework design patterns composition patterns describe abstractions specific integration mechanism approach satisfies third requirement 
fulfill fourth requirement necessary consider abstractions implementation simplicity provided interfaces encapsulation 
design composition patterns implemented layered object oriented framework separation concerns 
framework classes implementing design composition patterns grouped components component defined nierstrasz abstraction software module encapsulates implementation object oriented framework concrete case components consist classes implementing design composition patterns instantiated instantiation explicit interface parameters specialization classes 
represents component diagram 
illustrates architecture layered object oriented framework separation concerns 
object oriented framework layers concern 
concern layer contains classes implementing design patterns 
classes grouped components called concern components 
addition ensuring design patterns properties concern components provide set classes support composition concern components customization concern policies done respectively composition application layers 
composition 
composition layer contains classes implementing composition patterns 
classes grouped components called composition components 
addition ensuring composition patterns properties composition components define minimal interface 
composition component minimal interface instantiated integrate component application layer 
minimal interface details explicit interface systems built instantiating parameters connecting components 
final programmer need know details patterns composition encapsulated component simplifying framework 
singular composition concern components composition needed give corresponding concern component minimal interface 
application 
application layer composition components integrated final program concern components customized provide policies required program functional objects 
instance obtain concurrent synchronized object necessary integrate functional object concurrent synchronized object composition component minimal interface 
addition necessary customize corresponding concern components specializing classes 
noted composition component independent customizations concern components 
integration customization application layer respect properties transparent integration 
integration transparent possible functional objects clients need changed 
property depends integration mechanism 
incremental customization 
customization concern components independent customizations remaining concern components 
instance incrementally changing synchronized object concurrent synchronized object require customization point view concurrency component customization 
previous customization synchronization component reused 
property establishes compromise conservation consistency properties composition patterns complexities composition hidden composition component concern components customization orthogonal 
object oriented framework implements property pattern reusability white box reuse blackbox reuse 
customization concern component classes white box reuse great flexibility requires programmer know design pattern internal structure 
programmer uses predefined policy implementations black box reuse done programmer create instances previously customized classes associate corresponding invocations 
situation arrow policy customization indicates fact previously customized policy 

related follows multi dimensional separation concern abstractions hyperslices 
section discuss separation concerns approaches 
subject oriented programming separation concerns approach defines classes composing subjects 
subject provides particular point view class 
subject related design pattern 
subject composition rules distinguish composition customization 
defines set rules defining modules reflection called open implementation 
modules seek establish trade blackbox reuse white box reuse 
module offers meta interface programmer able choose module implementation details implementation type list module 
experiments open implementation haines indicates approach main problem difficulties composing meta interfaces completely orthogonal 
opinion problem arises defining composition levels composition customization carried meta interface 
decomposition components finer granularity proposed coda reflective architecture seeks avoid problems abstraction composition 
coda defines meta objects send accept queue receive protocol execution state 
meta objects form architecture customized composed order support required concerns 
due fine granularity meta object small number responsibilities composition orthogonal sufficient specialize separately 
disadvantage coda complexity associated meta object composition correspondence concerns necessary understand roles meta object different concerns 
problem arises having composition levels proposed layered framework 
contrast approach easier define concern customization separated composition composition component encapsulates complexity associated composition concern components 
extend object model various non composition filters intercept object messages incoming outgoing expressing restrictions instance synchronization 
composition filters sequentially composed composition semantics logical operators message pass filters andor message needs pass 
composition orthogonal 
seen consistent compositions necessarily sequential nested compositions 
leads representation concern filters allow non sequential non nested compositions 
way goal having filter concern accomplished 
solution closer fragmentation coda approach complexity problems mentioned 
aspect oriented programming consists component language program functionality aspect languages program concerns aspect weaver combines languages 
programs separately built different languages 
aspect oriented programming allows non orthogonal composition delegates aspect weaver resolution complexity associated concern combination 
weaver integration mechanism 
seen composition policies may exist programmer responsible choosing 
aspect oriented programming necessary context define language capable expressing composition policies language capable composing aspect languages 
language considered extent knowledge aspectoriented programming approaches 
addition relationship composition languages aspect weaver clear 
approach aware application layer composition layer described context meta object composition 
approach composition architecture defined hides final programmers details meta object implementation composition 
addition approach identifies properties meta objects possess order composed encapsulation independence modularity exclusiveness 
approach consider possibility concern customization user customization done jointly composition 
role model design design patterns may described role models ii composition patterns may described compositions role models participating design patterns iii object oriented frameworks may described class models including role models design patterns composition patterns suitable formalism describe design patterns pattern composition object oriented frameworks 

approach proposed separation concerns uses design patterns separately describe abstractions 
implementations design patterns follow layered architecture separation concerns 
minimal interface property architecture composition components simplifies programmer functional classes limits set concepts programmer know handle 
properties defined abstractions layered architecture impose specific integration mechanism 
order control complexity associated development programs different abstraction levels defined 
corresponds different kind user programmer final programmer may object oriented framework knowing policy instance readers writers needed functional object 
case programmer uses predefined policy object synchronization pattern 
programmer wants customize policy specific needs specific synchronization policy implemented 
programmer possess knowledge described abstraction know implemented corresponding concern component 
situation programmer required know particularities composition patterns implementation 
framework programmers need knowledge specific domain abstractions object synchronization object concurrency object recovery patterns implementation composition 
aksit bosch bergmans yonezawa 
abstracting object interactions composition filters 
guerraoui nierstrasz editors proceedings ecoop workshop object distributed programming volume lecture notes computer science pages 
springer verlag 
america 
pool parallel object oriented language 
yonezawa tokoro editors object oriented pages 
mit press 
atkinson di maio 
objectoriented concurrency distribution 
journal object oriented programming march april 

briot guerraoui 

concurrency distribution object oriented programming 
acm computing surveys september 
forman 
composition metaclasses som 
oopsla pages portland oregon october 

inheritance synchronization constraints concurrent object oriented programming languages 
ecoop pages utrecht netherlands june july 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 
haines 
open implementation analysis design lightweight threads 
conference object oriented programming systems languages applications proceedings pages atlanta georgia usa october 
harrison ossher 
subject oriented programming critique pure objects 
oopsla proceedings pages washington dc september 
des rivieres bobrow 
art meta object protocol 
mit press 
lamping lopes maeda mendhekar murphy 
open implementation design guidelines 
th international conference software engineering boston ma usa may 
lamping mendhekar maeda lopes 
loingtier irwin 
aspect oriented programming 
technical report spl xerox parc february 
maeda lee murphy 
open implementation analysis design 
acm symposium software reusability ssr 
maes 
concepts experiments computational reflection 
oopsla proceedings pages orlando florida october 
matsuoka yonezawa 
analysis inheritance anomaly object oriented concurrent programming languages 
agha wegner yonezawa editors research directions concurrent object oriented programming pages 
mit press 

meta level programming coda 
coop pages aarhus denmark august 

synchronisation concurrent object oriented languages expressive power genericity inheritance 
phd thesis department computer science trinity college dublin 
malenfant cointe 
methodology explicit composition metaobjects 
oopsla pages austin usa october 
nierstrasz 
component oriented software technology 
nierstrasz tsichritzis editors object oriented software components pages 
prentice hall 
ossher kaplan harrison katz kruskal 
subject oriented composition rules 
oopsla pages austin usa october 
riehle gross 
role model framework design integration 
conferenceon object oriented programming systems languages applications proceedings pages vancouver canada october 
silva 
concurrent object oriented programming separation composition concerns design patterns pattern languages object oriented frameworks 
phd thesis instituto superior cnico technical university lisbon march 
silva pereira marques 
object recovery 
martin riehle editors pattern program design chapter pages 
addison wesley 
silva sousa marques 
development distributed applications separation concerns 
ieee asia pacific software engineering conference pages brisbane australia december 
tarr ossher harrison stanley sutton 
degrees separation multi dimensional separation concerns 
proceedingsof international conferenceon software engineering icse may 
