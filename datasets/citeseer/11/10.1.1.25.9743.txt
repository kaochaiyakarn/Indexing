categorical imperative hide state monads martin erwig hagen praktische informatik iv hagen germany erwig hagen de 
demonstrate systematic way introducing state monads improve efficiency data structures 
programs expressed transformations data types possible suitable definitions adts adt fold operations observe restricted usage patterns adts exploited derive partial data structures correctly implementing adts ii imperative realizations partial data structures 
library adts imperative implementations efficient versions functional programs obtained concerned knowing state monads 
example demonstrate optimization graph adt resulting optimal imperative implementation depth search 
state monads essentially passing state successive function calls explicit ii enable imperative implementation updates state 
possible state monads ensure single threaded state 
coming category theory monads enjoy useful laws mathematically elegant 
state monads easy average functional programmer 
aspect part elegance functional programs lost monads state monads extend far state needed tend infect large parts functional programs 
certainly due restrictions monads put state computations 
state monads needed haskell achieve efficient implementations algorithms 
tempting idea able state monads implicitly seeing knowing existence 
words rely certain parts program executed efficiently imperative features programming imperative parts 
promising heaven ml easier flexible 
contrast state monads guarantee referential transparency 
earth 
course imperative program fragments generated important point need merged rest program reside separate modules selected optimizer appropriate 
factorization imperative program parts possible specific programming style programs expressed transformations data types 
knowing details ask happens transforming list set back list 
function removing duplicates 
transforming list heap back list 
heapsort 
examples worked involved data structures understood agreed way build inspect values types 
contrast clear happens transform lists natural numbers 
mean 
clearly depends data type natural numbers mind particular natural numbers built 
view count zero upwards data type described transformation realizes counting length function 
think constructing natural numbers addition transformation describes sum function course works lists containing numbers 
meaning transformations depends precise definition participating data types 
transformation proceeds structured exactly prescribed way defines fixed recursion pattern data types wellknown lists name foldr 
describe programming style sect 

restricted usage patterns data types transformations offer specific techniques implementation 
example data type values single threaded transformation suggests imperative implementations 
usage data types restricted singlethreaded sequence possible function applications restricted allows liberal implementations 
example values subjected constructor applications implementations choose data type representation support destructors 
describe issues detail sect 

prepares imperative data structures 
sect 
application graph adt sect 
describes imperative implementations state monads 
finish commenting related sect 
giving sect 

folds data types section briefly review proposal extending structured recursion discipline data types 
presently assume skilled programmer loves program state monads done currently investigating possibilities automated generation 
sive see formal categorical background developed 
papers haskell source files obtained www hagen de inf pi erwig meta 
representation algebraic data types definition data type introduces set constructors cn viewed functions types 
tn 
common result type called carrier data type 
instance list data type defined constructors empty argument type 


thought defined data order define operations fold arbitrary data types need way encoding data types haskell 
achieved combining constructors constructor mapping separated sum argument types carrier 
union argument types denoted specific type constructors 
example argument type structure list data type captured type constructor 
data linear linear applied denotes proper argument type combined list constructor defined clist linear 
clist clist example consider data type natural numbers zero constant successor function 
combine constructor need type constructor data const define constructor built integer numbers carrier const int 
int succ general algebraic data type regarded simply function 
type constructor denoting argument type union constructor type constructors functors far constructors algebraic data types concerned arbitrary type constructors describe argument type structure 
definition adt fold requires destructors dual constructors defined result types expressed type constructors offer map function 
haskell predefined constructor class functor abbreviate functor save line breaks class map 


linear const examples functors 
corresponding instance declarations instance linear map map instance const map map linear binary type constructor generalization functor property binary case captured constructor class bif offers function map mapping type parameters 
class bif map 







map id instance definition linear instance bif linear map map definitions clist uniform shape fact constructor destructor definitions specific form captured standardized functions map functor type constructors 
example canonical way mapping linear types 



linear 
tol 
bool 





linear tol allows denote list constructor succinctly clist similarly define toc 



const 
toc 
bool 



const toc give definition succ applications tol toc follow 
destructors data types data type destructor dual constructor function 
mapping carrier example union possible result types 
algebraic data type ct 
easily define canonical destructor dt 
simply flipping sides definition 
example list destructor defined dlist 
linear dlist dlist give shorter version tol dual dlist tol null head tail definition canonical destructor similar 
toc pred course define destructors non free data types equationally constrained data types 
example destructor sets list carrier obtained follows 
eq 

linear tol null head rest rest xs filter xs define data type pair constructor destructor common carrier type 
need restriction argument type constructor require result type destructor application functor carrier type 
necessary definition fold uses function map fold recursive occurrences values 
data 
adt adt 

con adt des adt occasionally type abbreviations type adt type linear define list set nat adts simply list list adt clist dlist set set adt clist nat const int nat adt course constrained symmetric adts 
define adt variants exchanging constructor destructor 
concerning natural numbers example multiplication binary constructor function additionally splits number decomposed destructor prod adt linear int int const int prod adt rng adt const int linear int int rng adt tol id pred examples 
adt folds transformers fold operations algebraic data types typically defined help pattern matching applied value fold determines outermost constructor applies appropriate parameter function conforms type disclosed constructor 
formally fold defined homomorphism argument type result type definition works result type quotient argument type uniquely defined 
words fold map constrained structures 
reason example counting elements set expressed fold operation 
restriction lifted fold pattern matching explicitly defined data type destructors 
folding adt value type parameter function works follows adt destructor applied yielding value type intuitively part contains values taken split adt part represents recursive occurrence values 
recursive part folded followed application result non recursive part recursive folding step realized function map defined functor see need type adt destructors expressed functor expression 
fold 


adt 

fold map fold des observe fold parameter function map functor adt result type 
example function multiplies numbers list written fold mult num 

mult fold list example striking parameter function fold constructor adt adt prod 
special case occurs important introduce definition 
call kind fold adt transformer 
order able transform adt result type functor adt argument type match argument type expressed application include parameter function adjust type structures 
trans 
adt 
adt 
trans con map trans des expression trans call source adt target adt called map transformer 
type structures source target adt agree id abbreviate case transit trans id rewrite example mult transit list prod understand need additional parameter trans consider task determining length list 
express transformer list nat 
results delivered dlist proper shape applying provide map linear const length trans list nat note virtually definition works sets simply replace list set obtain proper function determining cardinality sets 
folds transformers destructors set destructor normalizes set representation removes duplicates set element counted exactly 
composing transformers build streams adts filters 
common case compose transformers adt adt adt transit transit formulate examples mentioned 
list set list heapsort list list laws proposed extension folds adts conservative sense laws optimization techniques developed algebraic data types valid extended framework 
purpose section collect laws needed 
observed trans special case fold sense parameter function fold obtained adt 
similar way generalize fold relaxing requirement destructor taken adt 
arrive function definition essentially hylomorphism :10.1.1.41.125
hylo 





hylo map hylo specialize parameter obtain definition unfold 
unfold 


adt 

unfold con map unfold fold unfold related natural way hylo fold hylo des unfold hylo con unfold des fold con trans special case fold know trans hylo con des source useful fusion laws free theorem type hylo theorem 
map map hylo hylo derive specialized versions theorem fusion left right id second premise theorem trivially true id premise theorem trivially true 
corollary 
map hylo hylo corollary 
map hylo hylo note general hold strict functions exist laws particular free theorems fold unfold fusion laws follow brevity omit 
partial data structures programming folds transformers adt values built decomposed run 
particular intermediate version emerges construction destruction visible outside try develop efficient constructors destructors utilize fact way 
define intermediate values called temporaries exactly 
purpose consider sequel adts adt adt ca adt adt db function 
trans assume application argument yields result values type created evaluation values argument temporaries 
likewise values type created evaluation result temporaries 
consider properties temporaries detail clear temporary exactly constructor destructor intermediate adt values single threaded 
known single threaded data structures safely implemented imperative way 
temporaries enjoy restricted access patterns 
specifically temporaries constructing phase subject application destructor example encounter expression db temporary 
similarly constructor applied temporary created destruction phase example see expression con temporary suitable adt 
information follows representation values general support application constructors destructors case temporaries temporaries representation temporaries support destructor application representation temporaries account constructors 
try specialized representations evaluation functions gain efficiency 
call kind data structures supporting subset operations partial data structures 
investigating partial data structures leads quite opposite direction functional data structures functional data structures account additional requirements persistent access different versions partial data structures exploit fact restricted way 
requirements low 
high partial ds gamma imperative ds gamma 
functional ds appropriate types representing destructor limited view respectively constructor limited view compute need functions map respectively specialized representations 
outof 
need modified constructors destructors 

possible cases specialized representations 
source target adt 
source adt 
target adt 
source target adt reformulation depends places specialized representations 
case reformulation possible consider remaining cases subsections 
specialized representation source adts case essentially employ modified destructor working specialized representation 
persisted trans expressing define new source adt carrier just introducing new destructor 
affect modularity adt concept forced invent new constructor new carrier highly inconvenient 
extended definition adts allows deal different related carriers 
addition constructor destructor need carrier map function maps constructor carrier carrier destructor 
data adt adt 


con adt cmap adt des adt idea definition adt construct value adt carrier able destruct value destructor working possible different carrier 
define specialized adt simply adt con need transformer definition employs extended adt source adt adt adt adt map observe constructor source adt needed 
fact give alternative definition trans 
facilitate comparison kinds transformers correctness proofs functions employing specialized adts 
introduce operator maps extended adt back ordinary adt 
adt 
adt adt adt constructor resulting adt general sense problem trimmed adt destructor 
give modified definition trans cmap special case id transits adt 
adt 
transits id help transits define easily transits question described transformation correct 
words conditions hold 
done definition exchange destructor working values obtained values application 
formally relationship assume adt ca adt db 
theorem destructor specialization 
map trans adt ca proof 
adt ca adt ca 
particular know des des 
trans hylo hylo trans take simple example consider adt queue transformer queue list queue queue adt clist tol null init ql transit queue list destructor inefficient takes elements list representation 
causes ql run quadratic time 
better extended adt tol null head tail dlist rev means construct destruct queue represented list front 
need different list representations queues representation destruction just obtained reversing list construction phase 
ql transits adt clist rev dlist list prove ql ql theorem 
establish precondition show lemma 
dlist rev map rev proof 
consider cases empty non empty lists 
note map map function type linear lists 
dlist rev dlist map rev map rev map rev dlist rev xs dlist rev xs dlist rev xs rev xs map rev xs map rev xs map rev xs apply theorem obtain corollary 
ql ql example fairly simple chosen demonstrate ideas loading details 
deal realistic application sect 

specialized representations target adts situation similar preceding section 
specialize target adt giving new constructor appropriate carrier map adt outof des transformer definition uses extended adt target dually adt adt adt adt map give alternative definition trans order define analog function needed inverse build destructor extended adt type 
dummy function type 

define adt 
adt 
id help implement function specialized target adt ask hold result similar theorem adt ca adt db 
theorem constructor specialization 
map strict transit adt db proof 
adt db 
know con 
map hylo hylo transit def 
def 
give example consider transformer lq transit list queue assume queue adt defined enqueue list dequeue front queue adt snoc dlist snoc lq ql takes quadratic time improved linear time extended adt clist outof rev means construct destruct queue represented list front different list representations converted list reversal 
lq list adt clist rev dlist prove lq lq help theorem 
show lemma 
rev clist snoc map rev proof 
consider cases type linear rev clist rev snoc snoc map rev rev clist xs rev xs rev xs snoc linear rev xs snoc map rev xs apply theorem obtain corollary 
lq lq specialized representations source target adts combining results preceding subsections specialized representations source adt destructor target adt constructor 
need kind transformer adt adt adt ma adt mb mb ma map id express special cases canonically extending target source adt identity carrier map 
ext adt con id des ext ext combine theorems theorem double specialization 
mb map mb mb strict ma map ma transit adt ca ma adt mb db proof 
adt ca ma adt mb db 
know des con 
map 
mb ma mb hylo ma hylo ma hylo transit def 
def 
advanced example graphs complicated basic adts deal 
provide benchmark expressiveness proposed adt formalism 
efficient treatment graphs purely functional languages trivial test claimed optimization opportunities 
defining graph adts cast graphs proposed adt formalism inductive graph view graph empty constructed adding node edges predecessors successors :10.1.1.30.4768
graph denotes type graphs node edge labels type node context labeled node list labeled incoming outgoing edges 
type node int type node type context node graph constructors empty graph embed context 
graph 
graph combined follows 
cgraph linear context graph 
graph cgraph empty embed decomposition graphs defined quite different ways 
simple solution split arbitrary node graph 
limits number problems solved graph transformers 
contrast decomposition specific nodes offers control decomposition order provides flexibility 
function match retrieves removes particular node graph 
request decomposing specific node fail match defined return contexts type context match node 
graph 
graph define graph adt specialized support depth search 
depth search shall express depth search transformer stack graph adt list adt 
stack needed control decomposition order graph context taken graph determined top stack successors decomposed context pushed stack prepare decomposition 
implement stack list 
type node graph graph destructor defined follows decomposition immediately stops stack exhausted graph decomposed empty 
top stack matched graph yields remaining graph possibly context value just contained 
list successors pushed stack context new stack graph pair returned result 

linear null isempty suc tail match head suc map snd interested graph destructor dummy constructor define graph adt 
graph adt linear graph adt empty depth search realized simply transforming graph list collects just contexts ignores values 
interested node values select second component context tuple 
projection function nid variant list adt mlist note map map function functor 
nid linear 
linear node nid map mlist adt linear linear mlist adt mlist dlist mlist mlist xs xs mlist just xs xs note needs initial stack value dfs uses default list graph nodes initial value able completely explore unconnected graphs 
node graph 
node trans nid graph mlist dfs graph 
node dfs nodes implementation dfs bears inefficiency need construct intermediate graphs means remove decomposed nodes successor predecessor lists 
assuming graphs represented balanced search trees mapping nodes contexts dfs runs log nd time denote number nodes edges graph average node degree 
second term represents cost searching predecessor successor lists removing edges 
context lists scanned remove node contain average initially removal gamma nodes 
context node reduced gamma steps term represents total cost resulting reorganization contexts 
sparse respectively dense graphs dfs needs log respectively time 
graph destructor specialization describe improve efficiency dfs devising partial graph destructor 
save construction intermediate graphs 
key idea delay node deletion 
means removing node graph immediately decomposition remember decomposed nodes remove returned contexts 
extend carrier decomposition set recording decomposed visited nodes 
type set node node set initially empty function just extends stack graph pair empty set emptyset set nodes extended modified destructor context node requested time inserted set visited nodes 
improved performance results function context match context find node context match build representation graph matched node removed 
function context similar match thought implemented purpose discrete interval encoding tree suited performance improves density stored subsets graph algorithms dfs set visited nodes constantly grows complete node set stored 
context node 
graph 
context context case match just 

error matching node show define linear vs isempty member vs just map snd vs insert context filter member filter member extended graph adt obtain optimized implementation depth search 
nid adt empty mlist dfs nodes set insertions take log steps set membership tests need log time dfs runs log time representing graphs immutable arrays mapping nodes contexts possible graph need changed 
haskell imperative state transformers optimization improved eventually resulting optimal running time see sect 

imperative data structures imperative data structures aspects imperative functions carrier maps extended source target adts exploit efficient imperative constructors destructors affecting referential transparency 
second completely imperative data structures stream adts 
imperative constructors destructors example consider specialized graph destructor 
goal implement node set imperatively example imperative array 
haskell encapsulate state changing operations state thread roughly works scheme open state thread create variables perform updates close state thread possibly returning value 
adt folds transformers way imperative programming fold transformer produces results incrementally decompose value yielding value return nonrecursive part continue folding recursive part concerning means decomposition step contexts delivered node set updated 
contrast state transformer allow emit values running computation value returned earliest updates performed 
state transformers implement node set graph destructor imperatively 
possible solution place state transformer carrier map imperatively updates node array desired accumulates contexts computed decomposition list 
list returned result transformer 
destructor extended adt simply ordinary list destructor just decomposes list contexts obtained carrier map 
definition imperative graph destructor shown 
node bool st context return vs isempty return cs vs return cs context suc map snd true cs suc vs return cs stack graph empty empty list contexts returned 
array inspected index node top stack cases distinguished true visited simply continue determining list contexts cs remaining nodes stack vs return list result 
ii seen extract context select successor nodes update array index remember processed 
proceed similarly case determine list contexts remaining stack successors pushed return list extended define function carrier map 
context runst false cs return cs create state thread allocate boolean array indexed nodes graph traversed 
array initialized false indicating node visited 
determine return list graph contexts imperative destructor just described 
state thread executed language primitive runst 
note imperative graph destruction completely hidden 
define extended adt adt linear context context adt empty dlist bit confusing fact second carrier just list contexts graphs mentioned 
reflects fact essential computation contained carrier map destructor destructor just passes results 
get depth search list nodes graphs represented immutable arrays adjacency lists runs linear time asymptotically optimal 
completely imperative data structures consider adt streams observe intermediate adts set heapsort completely single threaded 
employ completely imperative implementation adts 
achieved help adt general procedure follows 
consider adt adt adt adt stream canonically derived algebraic data type omitted altogether known fusion law valid extended framework see applied directly rewrite transit real computation takes place constructor destructor reformulate adt adt just collects values delivered des passes values consumed con means actual computation happen realized state monad 
example regard define extended adt set set ix 
adt linear linear set adt clist hash dlist function hash realizes set semantics inserting retrieving elements indexed boolean array ignoring duplicates 
fusing carrier maps constructors destructors striking list contexts built decomposed destructor 
try remove intermediate list fusing functions dlist 
routine deforestation complicated fact fusion state thread boundaries 
done described launchbury 
function product infixr 

define map function st functor map st 
id st means mapped state transformer st gives new state transformer computes state st returns value practice means move sequential updates move return statements map ss map ss map ss map ss map return return nodes obtain list hylo clist dlist move complete hylo expression 
order useful move 
hylo clist dlist result recursive function calls inductively assumed correct change return statement return node just result context altogether obtain optimized implementation depth search shown 
return vs isempty return cs vs return cs context suc map snd true cs suc vs return cs graph 
node runst false cs nodes return cs simple adt optimizer simple optimizing strategy substitute transformers library available adts specialized constructors destructors completely imperative adts 
adts specializations known optimizer 
example somebody implemented place code specific place announce destructor specialized implementation adt graph example extend function spec spec graph 
optimizer exploit specialized adts scheme opt transit spec spec transits spec spec transit opt trans ae spec trans course optimizer works correctly preconditions theorems satisfied known adts explicit deforestation pass application opt eliminate gluing lists related generalization list fold regular algebraic data types thoroughly investigated 
particular exploiting fold fixed recursion pattern developing optimizers functional languages attracted interest 
defining folds data types neglected far 
despite proposals specific types arrays graphs fokkinga attacks problem general point view 
approach terms represented combinators equations represented pairs combinators 
treatment done completely categorical language proposal generalizes case free data types constrains homomorphisms map quotients 
quite lot papers theory monads phil wadler gave nice survey contains relevant aware tries sweep monads rug 
demonstrated systematically insert efficient imperative data structures functional programs 
automated provided programs written metamorphic style adt transformers ii specialized imperative adt versions supplied known optimizer 
programming style extending structured recursion discipline data types extends optimization opportunities mere fusion utilization imperative data structures algorithms 

chuang 
functional perspective array primitives 
nd fuji int 
workshop functional logic programming pages 
erwig :10.1.1.30.4768
functional programming graphs 
nd acm int 
conf 
functional programming pages 
erwig 
categorical programming data types 
th int 
conf 
algebraic methodology software technology 
appear lncs 
erwig 
fat sets 
journal functional programming 
erwig 
metamorphic programming structured recursion data types 
technical report hagen 
fegaras sheard 
revisiting catamorphisms datatypes embedded functions 
rd acm symp 
principles programming languages pages 
fokkinga 
datatype laws signatures 
mathematical structures computer science 
gibbons 
initial algebra approach directed acyclic graphs 
mathematics program construction lncs pages 
gill launchbury peyton jones 
short cut deforestation 
conf 
functional programming computer architecture pages 
hu iwasaki takeichi takano 
tupling calculation eliminates multiple data traversals 
nd acm int 
conf 
functional programming pages 
launchbury 
graph algorithms functional flavour 
st int 
spring school advanced functional programming lncs pages 
malcolm 
homomorphisms 
mathematics program construction lncs pages 
meijer fokkinga paterson 
functional programming bananas lenses envelopes barbed wire 
conf 
functional programming computer architecture pages 
meijer hutton 
bananas space extending fold unfold exponential types 
conf 
functional programming computer architecture pages 
okasaki 
purely functional data structures 
cambridge university press 
sheard fegaras 
fold seasons 
conf 
functional programming computer architecture pages 
takano meijer 
shortcut deforestation calculational form 
conf 
functional programming computer architecture pages 
wadler 
theorems free 
conf 
functional programming computer architecture pages 
wadler 
deforestation transforming programs eliminate trees 
theoretical computer science 
wadler 
declare imperative 
acm computing surveys 

