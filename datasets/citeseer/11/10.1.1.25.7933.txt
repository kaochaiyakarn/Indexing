specifying distributed software architectures je magee dulay susan eisenbach je kramer department computing imperial college london sw bz united kingdom nd se jk doc ic ac uk 
real need clear sound design speci cations distributed systems architectural level 
level design deals high level organisation computational elements interactions elements 
presents darwin notation specifying high level organisation 
darwin essence declarative binding language de ne hierarchic compositions interconnected components 
distribution dealt orthogonally system structuring 
language supports speci cation static structures dynamic structures execution 
central abstractions managed darwin components services 
services means components interact 
addition specifying architecture distributed system darwin operational semantics elaboration speci cations may runtime direct construction desired system 
describes operational semantics darwin terms calculus milner calculus mobile processes 
correspondence treatment names calculus management services darwin leads elegant concise calculus model darwin operational semantics 
model argue correctness darwin elaboration process 
objective soundly notation specifying constructing distributed software architectures 
appear fifth european software engineering conference esec september barcelona 
recognised software engineering community notably garlan shaw perry wolf systems constructed components organisation architecture system presents new set design problems 
architectural concerns identi ed garlan perry high level description systems graphs interacting components 
identify components primary points computation system connectors de ne interactions components 
addresses concern context distributed systems particular stresses system structure 
concerned provision sound practical means design construction distributed systems 
involved development structural con guration languages means specifying subsequently managing system structure 
languages developed common notion component asthe basic element systems constructed 
complex components constructed composing parallel elementary components result architecture system described hierarchical composition primitive components execution time may located distributed computers 
primitive components speci cation opposed structural description 
adopted similar con guration languages distributed systems include polylith leap 
version darwin latest line con guration languages 
darwin declarative language general purpose notation specifying structure systems composed diverse components diverse interaction mechanisms 
currently context regis system supports multiple interaction primitives project uses remote object invocation component interaction 
darwin allows speci cation static structures xed system initialisation dynamic structures evolve execution progresses 
earlier version darwin conjunction rex distributed systems platform 
version described di ers treatment dynamic structures ability deal diverse interaction mechanisms 
distributed programs constructed directly darwin speci cations 
darwin operational interpretation elaboration runtime darwin speci cation results distributed set interconnected primitive components 
contrast predecessors conic rex centralised sequential interpretations darwin distributed concurrent interpretation permitting construction large distributed systems cient manner 
addition allows physical distribution speci ed completely orthogonally logical structure 
darwin allows interaction external management agents direct structural changes response changing system requirements operational evolutionary 
aim darwin general purpose requires clear speci ed division responsibilities darwin primitive components con gures 
requirement darwin capable concurrent elaboration demands re clear unambiguous model darwin operational behaviour implementations validated 
attempted satisfy requirements modelling darwin calculus robin milner calculus mobile processes 
reasons choosing formalism discussed concluding sections 
initially describes basic features darwin outlines modelled calculus 
basic model prove properties darwin con gurations 
demonstrates basic calculus model extended incorporate parts darwin concerned dynamic structures concludes comparing darwin calculus approach wehave adopted related 
darwin distributed system consists multiple concurrently executing interacting computational components 
typically system consists limited set component types multiple instances types 
task specifying system collection components complex interconnection patterns quickly unmanageable help structuring tools 
con guration language darwin provides structuring tool 
graphical textual representation 
darwin allows distributed programs constructed hierarchically structured speci cations set component instances interconnections 
composite component types constructed primitive computational components turn con gured complex composite types 
components interact accessing services 
section gives brief overview darwin precise description calculus section 
components services darwin views components terms services provide allow components interact services require interact components 
example component gure lter component provides single service output requires single service input 
diagrammatic convention lled circles represent services provided component empty circles represent services required component 
type service speci ed angle brackets 
example communication mechanism implement service stream datatype communicated char 
darwin interpret service type information underlying distributed platform 
regis system information directly select correct communication code 
conventional distributed systems platform service type names idl speci cation generate correct client server stubs 
filter component input output provide output stream char require input stream char fig 

component type lter general component may provide services require services 
noted names required provided services local speci cation 
component need know global names external services distributed environment 
components may implemented tested independently rest system form part 
call property context independence 
permits reuse components construction multiple instantiation simpli es replacement maintenance 
composite components primary purpose darwin con guration language allow system architects construct composite components basic computational components composite components 
resulting system hierarchically structured composite component elaborated execution time results collection concurrently potentially distributed executing computational component instances 
darwin declarative notation 
composite components de ned declaring instances components contain bindings components 
bindings associate services required component services provided visualised lling empty circles component solid circles provided components 
example gure de nes variable length pipeline lter instances input instance bound predecessor output 
bindings requirements provisions declared bind statement 
example input lter component instance bound output predecessor statement bind input output 
requirements satis ed inside component visible higher level binding interface requirement done example lter requirement input bound input 
similarly services provided internally required outside bound interface service provision output output 
darwin design construction tools check pipeline input output component pipeline int provide output require input array lter forall inst bind input output bind input input output output fig 

composite component pipeline bindings required provided services compatible types 
compatibility test invoked determined target distributed systems platform 
necessary darwin tools infer services explicitly typed 
general requirements may bound single provision 
particular requirement may bound single provision 
noted service may transmit receive information 
requirements single provision binding pattern may describe communication depending interaction mechanism implement service 
example streams events regis interaction types ports entries similar ada entries 
example gure locates lter instance di erent host computer means annotation 
integer machine identi ers mapped real machine addresses runtime system darwin 
level indirection mapping permits portable speci cations 
general instances located machine enclosing component elaborated annotated 
reader referred realistic examples darwin con guration programs 
calculus elementary calculus describing analysing concurrent systems evolving communication structure 
simple monadic form 
system calculus collection independent processes communicate channels 
channels links referred name 
names primitive entities calculus structure 
nite number names represented lowercase letters 
processes built names follows action terms xz output name link named execute process input name call link named execute binds free occurrences 
terms alternative action execute written means 
composition execute concurrently 
operation commutative associative 
restriction introduces new name scope binds free occurrences 
replication provide number copies satis es equation recursion coded replication need included separate method building processes 
recursion examples clearer 
computation calculus expressed reduction rule xz fz yg jp sending channel reduces left hand side free occurrences replaced simple example applying reduction rule xz reasons conciseness remainder omit process agent write place 
fig 

calculus modelling darwin calculus purpose modelling darwin calculus provide precise semantics language 
wish demonstrate darwin con guration program correctly speci es set primitive component instances set intercomponent bindings required runtime 
wish demonstrate elaboration process correct executed concurrently 
model de ne precisely responsibility darwin program carried components con gured darwin program 
darwin supports static checking ensure bindings compatible requirements provisions allowed 
service types modelled concepts sort sorting provided polyadic calculus unavailable simple monadic form calculus 
simplicity types darwin services type discipline binding omitted 
brief overview readers unfamiliar calculus gure 
provide require bind section interpretation calculus darwin syntactic constructs concerned requiring providing binding services 
examine elaboration simple con guration hierarchic structure 
provide declaration provided service provide darwin modelled calculus agent prov accessed darwin name manages service shown def prov xs service location required provide access name service simply name service implemented component 
darwin concerned service implemented concerned placing required components service 
agent prov receives location service required sends location 
may client service agent prov de ned replicated process 
repeatedly send service time location received 
require declaration required service require modelled agent req accessed darwin name manages location service required 
darwin concerned client component uses service ensure service placed location client component 
req agent receives access name prov agent sends location agent 
requirement darwin may bound single service agent req sends location precisely shown req def yl location service required name service provider require access name bind binding construct darwin modelled bind agent simply sends access name prov agent req agent 
bind bind def rp name requirement name provision initially ignore fact prov req agents contained component examine ect binding agents 
firstly composition req bind substituting de nitions req bind yl rp communication pl words composition req agent bind agent produces binding request form pl location service name required sent access channel prov agent 
composed prov agent binding request results binding follows pl prov pl xs prov communication ls prov result composing req prov bind agent binding name service sent place required 
prov agent remains allow bindings 
section looks ect agents context simple darwin con guration 
components non hierarchical con gurations agents processes calculus directly named agents accessed named channels 
darwin names instances components names qualify names service provide require 
illustrated translating simple non hierarchical darwin con guration gure calculus 
component server component system provide inst client server component client bind require fig 

client server con guration components primitive component represented agent isa composition prov req agents manage service requirements provisions agents de ne behaviour 
primitive component simply component darwin de ned substructure components 
server component type gure represented calculus agent server def prov server server represents user implemented behaviour server component realises services similarly client component type represented agent client def req client note scope service name local server agent similarly name place service required local client 
seen binding extends scope names 
non hierarchical con guration con guration system component gure represented calculus parallel composition client server bind agent system def ra pb client ra server pb bind ra pb instance names gure qualify rename requirement provision client server component types 
expression precise translation darwin con guration gure 
demonstrate model correct shown client instance get service provided server con guration elaborated 
substituting de nitions client server dropping quoted user de ned behaviour agents play part binding process calculus description gure ra pb req ra prov pb bind ra pb 
pb pbl prov pb applying 
pb ls prov pb applying expression describing client server system reduces expression sends service required location parallel prov agent course server client client service perform input action 
possible de nition client client def client system pb ls prov pb client server reduces 
pb prov pb client server desired result instance server component executing parallel client component occurrence local name replaced name required service 
practice darwin implementation compute number requirements bound provision number replicas agent prov known 
consequently con guration process terminate resources uses recovered 
noted model described permits binding instantiation proceed concurrently 
components try service blocked bound service input service client 
composite components hierarchic binding hierarchic binding occurs composite component bind interface provisions requirements constituent component instances 
hierarchic bindings take forms depicted gure 
case export internal provision form part interface composite component 
interface provide may bound single provide bind require forall bind fig 

hierarchic bindings provide require forall bind instance provide service implemented single primitive component instance 
case situation internal instance requires service type bound interface require re ect situation required service provided outside composite component 
remaining case situation interface provides implemented inside composite component bound interface require 
connection components useful de ning connection patterns addition may form base case recursively de ned structures 
case interface provide act req agent bindings inside composite component prov agent external bindings level con guration 
opposite necessary case interface require act prov agent internally req agent externally 
interface requires provides modelled calculus var agent combines behaviour req prov shown 
rm pm iz var pm rm def rm pm xy rm access name require side pm access name provide side name bound rm location service required show ect binding var agent isto create agent simply passes binding requests 
var pm rm bind rm rm pm xy rmp communication rm pm py de ning pass def ny pass pm composing binding request mp pass agent transforms binding request follows 
pml pass pm pml pm py pass pm communication pm pl pass pm intuition var agent bound access name provided service prov var transformed pass agent forwards binding requests service 
correctness program elaboration previous subsections calculus agents de ned darwin syntactic constructs declaring components services bindings 
addition results combining agents determined 
ascertain ect elaborating complex con guration speci cations check correct result obtained 
particular necessary demonstrate complex con gurations reduce system primitive component instances service correctly placed required 
correctness elaboration process independent order component instantiation binding actions elaboration darwin programs typically takes place distributed setting 
example system gure reduce system service placed required places 
fig 

system hierarchic bindings general darwin con guration program speci es set tree structured directed acyclic graphs leaf vertices requirements root vertices provisions 
vertices intermediate levels tree interface provisions requirements 
arcs represent bindings requirements provisions 
depicts general case con guration provides single service con gurations provide multiple services simply consist multiple trees form shown gure 
correctness condition zi req rj lj var rj pp var pn rn zi pp zi fig 

general con guration graph elaborating darwin con guration path con guration graph requirement req rj lj provision prov pp elaboration result binding ljs 
prove demonstrate system produces binding ljs req rj lj var pi ri rip var pn rn prov pp req rj lj var pi ri rip pass pi pi pass pi pi pnl pass pi pi var pn rn pass pn pp pnl pass pn pp ppl pass pn pp dropping pass processes system ppl prov pp calculus model speci cation distributed elaboration algorithm implemented regis system 
regis asynchronous message passing send locations service required providers services 
messages forwarded processes representing interfaces 
regis implementation darwin elaboration pass prov processes implemented single elaboration manager process component 
component parameters substituted conditional con guration guards evaluated number bindings managed processes computed elaboration computation terminated 
calculus model chosen ignore detail pass var process termination 
darwin compiler statically detect categories incorrect bindings 
incorrect bindings occur elaboration 
instructive compare behaviour determine calculus model behaviour observe regis implementation situations 
rst category simply situation requirement bound 
noted section simply causes component containing requirement blocked 
interesting binding error depicted gure requirement bound cycle interface entities 
fig 

cyclic binding error simple case cyclic binding depicted gure statically detected general case statically detected separate compilation parameterisation conditional con guration taken account 
calculus model system gure req rp var pg rg var ph rh pgl pass pg ph pass ph pg pass pg ph pass ph pg pgl pass pg ph pass ph pg shown system reduces system continuously circulates binding request 
behaviour observed early versions regis system elaboration manager processes continuously circulate binding messages 
current version detects error raises runtime exception 
darwin dynamic architectures previous section described basic features darwin concerned binding instantiation hierarchy semantics calculus 
features allow speci cation static structures change elaborated 
darwin ability specify architectures change runtime lazy direct dynamic instantiation 
brie describe direct dynamic instantiation facility calculus model 
direct dynamic instantiation permits de nition structures evolve arbitrary way 
practice wehave dynamic instantiation way balances exibility run time advantages retaining structural speci cation 
example component creates new poller components response requests external manager 
example comes distributed system monitors location active badges 
active badges emit infrared signals picked sensors distributed building 
poller component monitors string sensors 
new poller components need created system extended 
poller output input sensornet output mux fig 

dynamic instantiation component sensornet require port provide dyn int inst mux bind output poller output input dyn poller provided service bound service dyn poller satisfy need 
invoking service creates new poller instance passes single integer parameter 
note gure bindings speci ed component type poller instances type usual 
type speci bindings serve de ne environment dynamically created instances poller execute 
interfaces dynamically created components types may usefully declare requirement services 
dynamically created instances essentially anonymous possible darwin declare bindings services provide dynamically created components may provide services 
access services achieved passing service messages form bindings dynamically 
bindings captured darwin program 
dynamic instantiation modelled calculus agent supplies name instantiation service 
instantiation service triggers copies replicated process 
example modelling dynamic instantiation system gure modify client components created service component system provide dyn inst server bind dyn client client calculus model system shown 
prov agent return name response binding request 
client performs action cause new replica client component instantiated associated bind action 
general action represents vector parameters newly instantiated component 
pb server pb prov client rpb dynamic instantiation change basic model section 
represented agent treated bound way prov agents 
note way component instantiated statically dynamically change de nition component 
discussion darwin little impact internal structure behaviour primitive components con gures 
components may sequential concurrent distributed 
required supply names services accept bindings 
calculus description darwin clearly illustrates separation architecture computation communication systems constructed darwin 
allan garlan assumptions way instantiated primitive components interact 
deliberately considered detail modelling component interaction mechanisms 
communication mechanisms supported regis system modelled detail calculus 
interaction models impact con guration darwin programs runtime behaviour 
reasoning darwin regis programs distributed system darwin conguration support 
section described general model elaboration darwin programs 
demonstrated correct con gurations elaboration resulted correct bindings primitive components requiring services providing 
addition model examine behaviour incorrect con gurations 
fact behaviour agrees observed implementation gives additional con dence validity model 
section showed darwin features concerned dynamic con guration easily modelled disturbing basic elaboration algorithm 
extensions tested criteria adversely ect complicate elaboration 
currently progress provide open systems binding ability manage group communication abstractions component migration 
extending de nition darwin language calculus semantics capture notion architectural styles 
chosen ignore component parameterisation arriving calculus model 
component parameters determine nal structure system conditional replicator constructs 
modelled directly calculus resulting model clumsy obscures intuitions obtained current model 
convenient consider parameter substitution resulting conditional guard replicator evaluation phase similar macro expansion occurs concurrent elaboration 
major bene ts calculus model darwin increased understanding role nature con guration languages 
rice chose speci cation language means modelling component instantiation interconnection hierarchical composition con guration languages conic 
felt process algebras appropriate model component interaction elaboration 
initially attempted de ne semantics conic ccs csp formalisms 
possible reason behaviour set communicating processes resulting elaboration con guration program unable develop satisfactory model elaboration process 
clear due inability formalisms describe evolving dynamic structures 
time conic supported de nition static structures occur consider elaboration computation requiring mobility processes channels 
fact conic system treat channels rst class objects transmitted messages elaboration process sequential 
requirement darwin general purpose con guration language led develop general model binding involved management service 
requirement elaboration process distributed meant service freely transmitted processes messages 
milner stresses fundamental importance naming concurrent computation considers calculus beginnings tractable theory 
consequently surprising darwin language primarily concerned binding elegantly modelled calculus 
wewould emphasise accumulated extensive experience darwin constructing distributed systems 
con dent proposing darwin practical sound means specifying manipulating software architecture distributed systems 
authors discussions colleagues distributed software engineering section group formulation ideas 
gratefully acknowledge dti ref ied epsrc ref gr nancial support 

garlan shaw software architecture advances software engineering knowledge engineering vol 
ed 
world scienti publishing 

perry wolf foundations study software architectures acm sigsoft software engineering notes pp 

garlan perry software architecture practice potential pitfalls panel proc 
th intl 
conf 
software engineering may 

magee kramer sloman constructing distributed systems conic ieee transactions software engineering se 

kramer magee sloman dulay con guring object distributed programs rex iee software engineering journal vol 
march pp 

magee dulay kramer structuring parallel distributed programs iee software engineering journal vol 
march pp 

polylith software bus acm transactions programming languages january pp 

barbacci weinstock doubleday gardner structure description language developing distributed applications iee software engineering journal vol 
march pp 

graves lockheed environment automatic programming proc 
th ieee knowledge software engineering conference pp 

magee dulay kramer regis constructive development environment distributed systems engineering journal appear 

crane dulay kramer magee sloman con guration management distributed systems 

application programming document rm architecture projects management agency poseidon house cambridge feb 

milner parrow walker mobile processes parts ii journal information computation vol 
pp pp 

ng kramer magee dulay software architect assistant visual environment distributed programming hicss january 

milner polyadic calculus tutorial logic algebra speci cation ed 
bauer brauer springer verlag pp 

eisenbach paterson calculus semantics concurrent con guration language darwin hicss january 

harter hopper distributed location system active ce ieee network jan feb pp 


allan garlan formalizing architectural connection proc 
th international conference software engineering sorrento may 

eisenbach get calculus semantics parle springer verlag lncs pp 

abowd allen garlan style give meaning software architecture proceedings sigsoft foundations software engineering software engineering notes pp acm press dec 

rice model module interconnection languages ieee transactions software engineering 

spivey notation manual prentice hall englewood cli 

milner communication concurrency prentice hall englewood cli 

hoare communicating sequential processes prentice hall englewood cli 

milner elements interaction turing award lecture cacm vol january pp 
article processed atex macro package llncs style 
