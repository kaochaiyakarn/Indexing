model checking operator procedures zhang institute energy technology box norway zhang hrp 
operator procedures documents telling operators various situations 
widely process industries including nuclear power industry 
correctness procedures great importance 
describe model checking detect potential errors verify properties operator procedures 
problems modelling model checking large systems incremental modelling verification proposed strategy help overcome problems 
case study show model checking model checker spin incremental strategy practise 
operator procedures documents telling operators various situations 
procedures normal operation situations case disturbances case emergencies 
operator procedures widely process industries including nuclear power industry 
correctness procedures great importance 
quote report accident mile island series events compounded equipment failures inappropriate procedures human errors ignorance worst crisis experienced nation nuclear power industry inappropriate procedures included procedures loss accident operations 
assess correctness operator procedures need correctness requirements 
correctness requirements operator procedure include goals achieved completion execution procedure safety constraints maintained execution procedure general structural requirements 
achieving goals necessary effective instructions explicitly specified procedure 
addition time resource constraints carrying instructions satisfiable 
maintaining safety constraints preparation steps goal oriented instructions included procedure 
important instructions specified correct order time resource constraints carrying preparation steps satisfiable 
structural requirements procedure simple easy understand 
include undefined unreachable instructions 
violation correctness requirements result types errors 
types violations important respect correctness formal verification techniques offer partial solution verification procedures 
problems related time resource constraints complicated considered verification 
divide types errors considered verification categories structural errors execution errors consistency errors 
structural errors include undefined unreachable instructions mentioned earlier 
undefined refers instruction procedure 
cause undefined wrong instruction refers missing 
instruction unreachable reached potential execution procedure 
instance block instructions outside block instructions block unreachable instructions block starting point procedure 
complicate situation instructions refer block conditions true potential executions procedure 
execution errors errors prevent execution completed 
include deadlocks infinite loops 
deadlock operator stops point able order complete procedure 
instance operator may waiting condition true 
infinite loop operator captured loop jump loop instructions procedure 
causes infinite loops wrong actions wrong conditions wrong goto instructions types problems 
consistency errors indicate inconsistency set instructions procedure specifications 
include violation assertions representing conditions performing actions violation invariants goals 
basic question detect potential errors operator procedures 
discuss model checking purpose 
verification approach procedure needs verified 
sufficient analyse procedure 
take consideration environment procedure 
related procedure correctness power plants refer power plant environment procedure 
model checking idea model checking follows 
design procedure natural semi formal language 
procedure executed operator meaning operator defined person robot strictly follows procedure gets responses plant procedure carried 
procedure set possible initial states plant plant processes interaction processes determine logical structure 
hand correctness conditions plant interaction operator plant 
instance may want express pump running time starts repairing valve assertion point execution procedure valve closed valve closed invariant execution procedure state plant normal starting procedure liveness property procedure 
conditions verified logical structure 
verification error detection explained order able verify procedure main tasks modelling logical structure verification respect correctness conditions 
modelling task create processes model procedure process model procedure operator process executing procedure 
set plant processes model physical processes plant assumptions physical processes 
set interaction processes model interaction model procedure process plant processes 
initialisation process process choosing initial state set possible initial states plant 
principles modelling model procedure process communicates interaction processes directly read update variables representing system state 
impose restrictions model procedure process helpful clear separation consequences actions model procedure process consequences actions processes 
interaction processes communicate model procedure process plant processes 
may read update system state may initiate activate plant processes 
plant processes communicate interaction processes may read update system state 
synchronisation mechanism necessary order ensure ability interaction processes take appropriate actions immediately changes system state plant processes 
initialisation process updates system state processes read update system state 
processes created model checker check errors types described previous section 
techniques checking errors follows detecting undefined check syntactic errors 
detecting deadlocks infinite loops check execution errors procedure auxiliary variable indicate completion execution procedure 
detecting unreachable instructions necessary special technique problems reported checking execution errors unreachable instructions detected cases execution errors 
detecting violation conditions performing actions need assertions describing conditions relevant actions check procedure consistent respect assertions 
detecting violation invariants need invariants check procedure consistent respect invariants hold reachable states model 
detecting goals need goals check procedure consistent respect goals reached reachable paths model 
verification carried fully automated model checking tools verification task simple 
major problems model checking operator procedures complexity modelling relevant processes power plant complexity models 
processes interfere power plant model relevant processes power plant complicated 
hand necessary complete model model checking 
necessary optimal complexity depends properties verified 
order limit complexity decision complicated plant process model 
difficult decision complicated model may suitable large automated model checking simplified model may sufficient model checking certain properties 
lot overcome complexity model checking algorithmic techniques minimise size internal representation models transition relations rule methods decomposing verification tasks 
take practical approach propose incremental strategy modelling verification 
incremental modelling verification motivation incremental modelling verification overcome complexity modelling problem deciding complicated plant process model 
basic idea divide modelling process different phases perform model checking phase 
phase create model procedure operator process executing procedure check syntactic errors order detect undefined 
phase derive assumptions interaction operator power plant procedure text create interaction model 
phase check execution errors order detect deadlocks infinite loops detect unreachable instructions case deadlocks infinite loops 
phase add initialisation process refine interaction model revising set relevant values variables representing involved plant units relevant aspects 
check execution errors consistency errors respect specifications assertions invariants goals 
phase add plant process model refine interaction model accordingly 
plant process model capture essential aspects relevant physical processes modelled simple possible 
number relevant processes large possibly important processes may left phases 
phase check execution errors consistency errors 
phase 
phase refine plant process model check categories errors phase 
refinement may include aspects add details existing plant processes extend model new processes 
case need modify interaction processes 
may continue refine plant process model phase satisfied plant process model model complicated model checking 
process knowledge process knowledge important verification procedures 
need process knowledge formulating correctness requirements safety constraints goals 
addition different needs process knowledge modelling procedures modelling relevant plant processes different phases 
phase need process knowledge relatively moderate knowledge understanding terminologies needed 
need may depend procedures structured terminologies procedures standardised 
phase need process knowledge basically phase 
phase need process knowledge increasing 
needs know conditions procedure assumed applied 
needs know different values necessary states certain plant objects 
phase needs know states different plant objects change able catch essence changes simple models 
phase need process knowledge basically phase 
summary tasks modelling different phases incremental modelling verification follows phase create model procedure 
phase add interaction model 
phase add initialisation process refine interaction model 
phase add model physical processes 
phase refine previously created plant interaction models 
verification sub tasks performed different phases summarised table phase phase phase phase phase check syntactic errors check execution errors check assertion violations check invariant violations check goals model procedure remains phases error detected procedure changed 
models physical processes interaction processes modified different phases 
sub steps verification sub tasks phase ordered increasing difficulty correctness specifications 
possible rearrange sub steps combine sub steps big step desirable 
discussion theoretically model phase accurate limitation computational resources errors considered types detected 
difficult decide accurate model 
create simple model simple assumptions increase accuracy model step step detect potential errors time 
arguments explain sensible divide modelling verification phases 
clear distinction verification sub tasks phase phase 
clear distinction need process knowledge phase phase 
addition depending plant states possible initial states values relevant involved plant units verification sub tasks phase time consuming phase 
modelling task complicated phase phase requires process knowledge phase 
addition verification sub tasks phase usually time consuming phase 
phases forth meant additional phases refining previously created plant process model performing model checking order increase confidence correctness detect potential errors escaped previous analysis 
strategy especially helpful early phases procedure evaluation errors large portion errors detected removed early phases strategy simple models short model checking time 
case study case study verification operator procedure seeded errors 
purpose case study show general usefulness model checking incremental strategy modelling verification 
operator procedure considered procedure yb steam generator control valve opens remains open 
disturbance procedure applied steam generator control valves located feed water side opens remains open 
procedure primary goal procedure repair control valve control valves problem opens remains open 
basic action sequence operator follows start isolating steam generator 
manipulate primary loop 
continue isolation steam generator 
repair steam generator control valve prepare increase power 
increase power 
description development disturbance follows trouble signal initiated steam generator level rise 
valve rl closes automatically 
manual disconnection main circulation pump reactor limiting system automatically reduces reactor power power level permissible number main circulation pumps operation 
main circulation pump disconnected plant controller reduces turbine output power level permissible number pumps operation 
primary secondary circuit parameters stabilise permissible limits 
similarly disconnected loop steam generator water level stabilises 
steam generator level rises emergency shut take place 
size procedure pages lines textual version procedure computerized operation manuals system 
instructions instructions consists actions involving plant units valves steam level meters pumps pump speed meters protection signals 
correctness specifications correctness specifications include goals invariants assertions 
case study formulated goal invariant assertion performing open valve actions 
goal execution procedure terminates completion execution control valves rl rl rl rl normal supervisor notified case power level certain check point normal 
invariant execution procedure valve ya open pump yd stopped 
assertion performing open valve action valve state valve different open 
seeded errors seeded errors procedure 
errors cover types types categories errors described section 
wrong leading undefined 
problem instruction mistakenly written 

missing case leading deadlock 
problem case result goto missing list goto instructions 

wrong condition wait instruction action achieve intended function depending interpretation leading deadlock 
problem condition yd wait instruction written yd 

wrong condition goto instruction leading infinite loop 
problem condition rl opening rl open written rl opening rl open 

missing instruction action achieve intended function leading infinite loop 
problem instruction valve opening address yz reset protection signal missing instruction specified comment original procedure 

wrong leading unreachable instruction 
problem instruction goto written goto 

wrong action leading violation condition action 
problem action open rl written close rl 

wrong sequence actions leading violation invariant 
problem actions sequence yd close ya swapped 

missing instruction leading goal 
problem action notify supervisor missing 

action achieve intended function leading goal 
case assume action notify supervisor implemented unreliable message system may achieve intended function action 
may problem procedure design interesting respect correctness procedure execution integrated part physical processes plant 
model checking spin model checking tool verification spin developed formal methods verification group bell laboratories 
modelling language promela 
promela process meta language provided model checker spin 
respect modelling operator procedures advantage easily describe actions sequences actions waiting conditions conditional unconditional jumps 
addition define set macros represent actions model procedure structure similar contents original procedure 
instance instruction open valve rl modelled rl macro id defined sequence statements send message interaction process wait receiving proceed signal interaction process 
receiving message interaction process interprets message order take appropriate actions instance change state system activate initiate plant processes provides appropriate feedback model procedure process 
plant processes run activated initiated interaction processes 
assuming opening respectively closing valve takes time state valve evolve closed opening open respectively open closing closed valves protection signals opened associated protection signals switched simple plant process opening closing valves follows proctype byte id action action close valve id open valve id closing valve id closing valve id closed break valve id closed break od action open protection id skip action open protection id valve id closed valve id opening valve id opening valve id open break valve id open break od fi array function maps valve identifier protection signal identifier valve array maps valve identifier current state protection array maps protection signal identifier current state 
process initiated interaction process receives message model procedure process opening closing valve 
statements valve id closed break process redundant 
statements useful instructions closing valve allowed situations valve closed 
example illustrates model process promela 
case study assumptions simplifications order minimise number processes 
formalising correctness specifications correctness specifications propositional linear temporal logic formulas translated claims represent goals monitoring processes represent invariants assertions represent conditions performing actions 
outline approach express properties operator procedures follows 
structural errors formula needed checking structural errors 
undefined detected checking syntax unreachable instructions detected checking execution errors described 
execution errors presence deadlocks infinite loops checked asking instruction indicating execution reachable potential executions procedure 
verification add auxiliary statement right finishing execution formula representing fact deadlocks infinite loops follows conditions performing actions conditions performing actions specified local safety properties related specific instructions 
macro id represent open valve actions 
condition performing actions section added replacing statement id statements assert valve id open id invariants invariants specified global safety properties related specific instruction 
invariant section specified follows proctype monitor assert valve ya open pump yd stopped goals goals specified liveness properties propositional linear temporal logic formulas 
goal section specified follows valve rl normal valve rl normal valve rl normal valve rl normal supervisor notified detecting errors created model procedure modifications original procedure order avoid errors caused seeded errors created models relevant plant processes simplicity assumed control valve application procedure model checker spin verify models 
seeded errors detected follows phase model procedure seeded errors created error detected performing syntactic check 
phase set assumptions environment identified interaction processes modelling assumptions created 
errors detected 
error detected checking execution errors 
error unreachable instruction detected re checking execution errors error corrected 
phase process modelling possible initial states plant added modification set relevant values variable 
error detected checking execution errors 
error detected checking assertion 
error detected checking invariant 
error detected checking goal 
error missing case detected deadlock previous phases depends correct set relevant values variable involved case analysis 
violation assertions error violation invariants error goals error checked previous phase 
phase simple model plant processes consisting processes steam level meter pump speed meter cycling valve opening closing valves protection signals created errors detected checking execution errors 
error missing instruction detected previous phases missing instruction instruction correct action executions procedure achieve intended function detect kind problems requires model consequences action 
error wrong condition detected previous phases depends process controls value variable condition 
phase process sending messages supervisor unreliable communication method consequence message lost added error detected checking execution errors 
error action achieve intended function detected previous phases lack model action causes purpose action achieved default 
summary table shows phases verification sub tasks errors detected phase phase phase phase phase check syntactic errors error check execution errors errors error errors check assertion violations error check invariant violations error check goals error error computation times memory usages verification carried spin version hp computer machine model numbers hp ux operating system release 
times syntactic check varied seconds different phases depending complexity models 
times compilation varied seconds different phases 
times model checking 
error detection table shows model checking times seconds exclude times syntactic check compilation detecting errors different verification phases 
table sorted order errors detected 
phase phase phase phase phase error error error error error error error error error error respectively processes excluding monitoring processes claims phases 
table shows early phases model checker fast phases needed significantly time run model checking 
verification errors removed detected 
order sure errors re run model checker 
table shows model checking times seconds re running model checker error reports different tasks phases phase phase phase phase phase check syntactic errors check execution errors check assertion violations check invariant violations check goals verification phases took time early phases interesting aspect relative model checking times absolute values depends factors computer model checker running 
big differences verification times different types tasks 
generally takes time verify liveness properties verify safety properties 
table shows verification took time error detection number processes relatively large 
memory usage verification table shows associated memory usages megabytes carrying verification procedure different phases different tasks phase phase phase phase phase check syntactic errors check execution errors check assertion violations check invariant violations check goals discussion time memory usage considered tables show differences large different phases 
incremental modelling verification practical errors detected models simple model checking times short need detecting errors re running model checking large models reduced 
limitations example shows model checking check errors considered types 
fact seeded problems help model checking 
limitations model checking 
set detectable problems depends accuracy model plant 
seen seeded problems detectable simplified model 
hand complexity useful models respect model checking limited capacity model checking tools computational resources 
limitation set detectable problems depends set correctness specifications consisting safety constraints goals 
example assertion invariant goal 
set correctness specifications course complete 
assuming wrong sequence actions actions sequence yd close ya swapped models plant additional correctness specifications needed detecting problem 
generally guarantee set correctness specifications model checking sufficient detect problems 
related years procedures computerised order reduce operator stress enhance safety 
computerised procedures provide better opportunity formal verification written formal semi formal languages better structure formality 
earlier formal methods verification operator procedures includes investigating techniques algebraic specifications related theorem proving tools 
generally weakness theorem proving verification process basically interactive 
disadvantages user find strategy proving theorems 
time consuming process 
disadvantage user fails prove theorem sure theorem provable strategy correct 
model checking advantage utilise fully automated tools limitations model checking explained earlier 
concluding remarks discussed potential applying model checking verification operator procedures detect potential problems procedures 
result research shown model checking check errors types including deadlocks infinite loops unreachable instructions violation conditions performing actions violation invariants goals 
analysing detected errors find remove different types potential problems procedures 
major problems model checking operator procedures complexity modelling relevant processes power plant complexity models 
easy find right complexity level modelling model checking incremental modelling verification proposed 
worth emphasizing practical interest verification find errors hard detect necessary prove absolute correctness procedures 
incremental modelling verification practical strategy focussing error detection helps overcome complexity modelling problem deciding complicated plant process model 
reasons model checking general formal methods provide absolute guarantee perfection 
model checking guarantee set correctness specifications correct complete 
second model checking guarantee process model physical device pump speed meter accurate respect physics device 
addition limitations computational resources capacity model checking tools may errors model checking tools 
model checking provides significant capability discovering large portions design errors demonstrated case study 
incremental strategy divides process modelling verification phases increasing complexity plant process models 
advantage strategy avoids full verification versus verification approach allows verification performed certain degree 
degree depends size procedures plant process models 
respect scalability important push limit far away possible 
case study considered processes created emphasis readability uniformity instruction representations clean interfaces processes optimal model checking times 
directions research include investigating techniques reduce model checking times sacrificing mentioned desirable properties procedure models plant process models investigating approaches verification error detection 
research described carried oecd reactor project institute energy technology 
author st len members project helpful comments discussions 
author anonymous referees comments 

abadi lamport 
conjoining specifications 
acm transactions programming languages systems 
may 

burch clarke long 
symbolic model checking partitioned transition relations 
international conference large scale integration pp 

north holland august 

grumberg long 
model checking modular verification 
acm transactions programming languages systems 
may 

roth 
man machine design analysis system midas applied computer procedure aiding system 
proceedings human factors ergonomics society th annual meeting 


holzmann 
model checker spin 
ieee transaction software engineering 


kemeny 
report president commission accident mile island 
government accounting office 


leveson 
software system safety computers 
addison wesley publishing 



operational benefits advanced computerised procedure system 
ieee conference record nuclear science symposium medical imaging conference 



computerised control room improve nuclear power plant operation safety 
nuclear safety 



algebraic specification theorem proving formal verification discrete event control systems 
oecd reactor project report institute energy technology norway 



iii software design implementation issues 
oecd reactor project report institute energy technology norway 


touati lin brayton sangiovanni vincentelli 
implicit state enumeration finite state machines bdds 
ieee international conference computer aided design pp 

ieee computer society press november 


verification procedures 
oecd reactor project report institute energy technology norway 

