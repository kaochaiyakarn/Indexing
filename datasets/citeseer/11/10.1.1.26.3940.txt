real world analysis kerberos password security kerberos distributed authentication system organizations handle domain wide password security 
known quite time kerberos vulnerable brute force password searches far little analysis scope extent vulnerability 
discusses nature ofthis weakness detail attempts quantify severity danger poses existing installations 
results controlled experiment large number passwords kerberos realm broken line subjected analysis 
author explores possible strategies repairing security hole viable kerberos coupled secure password authentication protocol srp eke 
kerberos developed mit years ago authentication infrastructure designed assure security user accounts system services potentially insecure networks 
distributing secret keys cryptographic protocols needham schroeder possession keys kerberos supposedly prevented unauthorized parties compromising system security means subvert network 
bellovin merritt outlined number security weaknesses kerberos 
problems addressed way rst brought light remain day 
serious susceptibility kerberos line guessing attacks passwords sense kerberos ticket granting ticket tgt protocol achilles heel 
kerberos thomas wu computer science department stanford university cs stanford edu ected vulnerability especially problematic kerberos explained allows large scale attack proceed virtually undetected 
attack require internet access dictionary spare cpu cycles 
section discusses attack detail 
traditionally sites attempted problem forcing users memorize longer complex passwords 
spirit earlier password security analyses author conducted experiment determine ective policy practice 
experiment involved simulation distributed password cracking ort password database large kerberos authentication environment realm 
section presents results experiment indicate kerberos protect passwords previously thought provide evidence attempting compel better passwords successful reducing threat posed password attack kerberos 
section discusses possible approaches remedy situation 
practical approach augmenting tgt protocol secure password authentication technology srp discussed greater depth implementation strategies 
attacks kerberos need continuing scrutiny security protocols re evaluation past assumptions 
intended network security experts may know security aw kerberos may access data severity average users may aware existence problem implications security accounts 
anatomy security hole start brief summary kerberos structured followed closer look actual password authentication protocol 
depth information kerberos original recommended papers describing underlying component protocols 
kerberos tickets entities kerberos human users nonhuman servers mail print services secret key shared central authentication server 
obtain services application server environment client rst obtain known kerberos ticket authentication server 
ticket contains things section data encrypted secret key belonging requested service 
client presents ticket application server verify ticket authenticity 
client know server secret key forge valid ticket tamper contents ticket detected 
actual procedure obtaining storing tickets divided steps user rst logs enters password client software uses password obtain special ticket known ticket granting ticket tgt central authentication server 
user requires access service client software presents tgt ticket granting server tgs issues ticket particular service 
ticket authenticate actual requests service 
done minimize number times user needs enter password 
user tgt application software automatically obtain service speci tickets human intervention 
closer look tgt user logs system wishes obtain tgt sends kerberos request packet containing elds listed table 
field contents length protocol version number byte message type identi er byte username string requested ticket instance string kerberos realm string timestamp bytes requested ticket lifetime byte requested service string requested service instance string table tgt request format string data variable length padding alignment 
note server authenticate packet intruder construct valid looking request packet indistinguishable legitimate user 
kerberos authenticates client sending back encrypted packet formatted described table 
field contents length session key bytes service name string instance string realm domain string ticket lifetime byte version number byte encrypted ticket block length byte encrypted ticket block eld timestamp bytes table tgt return packet format entire packet encrypted key derived user password 
kerberos uses data encryption standard des encryption algorithm 
user enters correct password logging client able decrypt return packet obtain valid tgt 
unauthorized user correct password sees useless random bits 
enemy hands normally user enters incorrect password initial decryption attempt produces packet causes kerberos client software notify user discard packet 
client software throwing away packet attempt allowed user try decrypting packet di erent passwords 
having human typing di erent passwords software automated procedure pulling passwords dictionary fast check 
tgt xed publicly known format software determine correct password looking decrypted tgt properly 
example dictionary attack past great success compromise password security mechanisms 
program performs dictionary attacks passwords known password cracker 
passwords originally test words user supplied word list evolved years sophisticated engines expand dictionaries massive lists passwords transformation rules 
password cracker experiment example program discussed detail section 
fairly simple matter construct client program saves tickets form suitable repeated trial decryption 
dump program written gather experiment section accepts username network address kerberos authentication server constructs valid request packet form described table sends kerberos saves encrypted reply packet le 
compromising tgt dump program saves user encrypted tgt le intruder testing trial passwords 
verify password guess 
convert password des key string key 
decrypt ticket key see kerberos ticket 
user password 
string key function varies kerberos realms nearly sites employ di erent functions 
determined particular domain trial error string key functions aws design allow attacks dependent low password entropy section explains detail 
encryption algorithms des operate xed sized chunks data known blocks des uses bit byte blocks 
input encryption algorithm block long block encrypted individually chained improve security 
kerberos tgt encryption uses chaining method known propagating cipher block chaining uses initialization vector iv 
means encrypted ticket blocks generated plaintext blocks follows ek iv ek ek process reversed generate plaintext blocks bn encrypted ticket blocks tn dk iv dk dk information cipher chaining modes initialization vectors 
veri able plaintext determine key produces ticket kerberos client software examines decrypted ticket elds see sense 
wrong key software attempts nd null terminator string may nd number strings ticket 
may discover elds timestamp length elds internally inconsistent 
wrong string key function chance turning successful guesses nitesimal 
des key byte correctly decrypted tgt blocks kerberos gives attacker important piece information greatly simpli es check service name eld second eld decrypted ticket string tgt packets 
bytes positions tgt second block rst blocks tgt need decrypted correctness guess veri ed see 
probability string occurring random right location despite having wrong key nding string second block highly reliable indicator success 
user rst blocks encrypted tgt need stored trial password requires call string key des decryptions 
des parity optimization format kerberos tgt packet permits re nement password veri cation procedure 
des algorithm requires keys odd parity number bits byte des key odd 
rst block plaintext tgt des session key see table know bytes odd parity 
computing guess attacker compute just check parity bytes 
bytes conclude guess incorrect having decrypt second tgt block 
tries average fail parity check right away guesses require des decryption 
optimization nearly doubles speed dictionary searches password les especially large ones 
large scale attack kerberos involves testing large number des keys large number plaintexts strategies optimizing parallelized des operations applied additional performance gains 
section discusses performance benchmark measurements detail 
experiment morris thompson studied security unix crypt function brute force dictionary attack 
years karn published followup charted progress password security cracking previous decade 
attempt bring analysis password cracking methods networked world nearly years original morris thompson 
usually discusses password guessing attacks network protocols assumes adversary eavesdrop legitimate sessions information verify passwords 
practice requires access part network client server 
attack kerberos described previous section hand requires access carry 
kerberos allows attacker initiate requests encrypted users kerberos realm long knows name ip address authentication server 
data experiment gathered manner authentication server large kerberos realm serving users 
small cluster sun ultrasparc mhz ultrasparc mhz participated line password cracking ort spare cpu cycles 
run limited weeks time results collected tabulated 
statistics kerberos realm containing slightly users grand total passwords successfully guessed week experiment 
table shows distribution passwords length 
length frequency table passwords length large number character passwords consequence having client programs support longer passwords password checker shorter ones 
interesting observations users password choices passwords digit 
passwords symbol 
passwords calendar dates 
known holiday 
users preferred mm dd yy notation times mm dd yy notation times 
person telephone number password 
shared passwords passwords common account 
promiscuous password shared accounts 
believed statistical anomaly result voluntary coincidental user choice 
users generally avoided shift key passwords typed 
analysis done may appear similar study passwords collected directly users 
experiment hand deliberately analyzed passwords successfully cracked sought evaluate cacy password checking 
surprising length distribution exhibited study skewed strongly character longer passwords password checker lter short ones disproportionate rate 
analysis rules password cracker combines user speci information username full name series precompiled word lists obtain list password candidates 
word list applies set transformation rules generate potential passwords 
successfully guessed passwords experiment passwords corresponding username derivation person full name 
remainder originated word lists 
half cracked passwords came directly word list 
remaining hits result applying transformation rules password candidate 
table shows ectiveness various word transformations 
transformation hits pre su simple table transformation rule statistics simple rules include capitalizing doubling reversing word 
ective single transform simply converted letters word lowercase accounting hits 
hits user speci information came users information clearly pays cross check dictionaries 
digit far frequently su occurring times 
digit combined hits 
frequent pre hits 
distant second popular 
software hardware preceding experiment known internet password cracking package modi ed decrypt verify kerberos tickets 
package generates password candidates reading words dictionaries applying transformations users generate passwords 
list rules extended accommodate nearly type password generating transformation including common ones adding digits words substituting digits letters resemble 
running time password cracker divided components 
denote amount time needed convert password guess key 
time taken string key function section 
denote amount needed apply key password entry check key results valid decryption 
time determined speed des decryption code 
table shows relative performance gures known hardware platforms 
platform sun ultrasparc mhz sun ultrasparc mhz table password cracking benchmarks kerberos salt password entries new password guess requires single call string key resulting key verify arbitrary number password entries 
amount time needed search kerberos domain users dictionary words nc users word dictionary works just hours ultrasparc 
trial password requires seconds verify entire database 
lack salt just factor allows rapid exhaustive dictionary searches kerberos passwords 
format tgt leads salt random input password key function password map potentially large number keys 
done frustrate attempts building precompiled password dictionaries 
optimizations outlined section contributes fast cracking times 
week experiment estimated password cracker veri ed slightly candidate passwords distributed di erent workstations 
gure high small fraction total number candidate passwords available password cracker 
experiment allowed continue greater length time larger portion total password space searched correspondingly larger number cracked passwords 
dictionary construction important part success ort input dictionary construct password guesses 
experiment conducted site implemented password checking pointless try passwords password checker dictionary 
improves chances words cracker dictionary dictionary screen passwords 
time desirable ensure words added dictionary password choices 
password bundled standard dictionaries generally contain modest list english words plus categories words commonly appear passwords science ction vocabulary female names technical terms jargon 
expand word list include words password checker experiment exploited domain speci characteristics user population 
users particular domain commonalities re ected password choices 
including words familiar users necessarily outside eld enhances ectiveness password searches especially list words comprehensive todate 
example list names stock symbols useful nancial services system list popular music album band names useful college site 
today internet search engines simple matter compile current dictionaries nearly possible category 
quick session popular search engines yahoo excite infoseek yield great deal raw subject speci text ltered distilled results merged existing dictionary 
productive categories experiment contributed successful password guesses 
word lists compiled directly pages search engines aggressive strategy pursued experiment involve spidering recursively traversing sites returned search engines 
techniques employed merely scratch surface possible strategies available password today 
web provides nearly limitless source material screened selectively suit user population speci users 
section explains implications kerberos password security 
dedicated key search electronic frontier foundation eff constructed machine brute forced des keys dedicated hardware cost 
results machine search entire des keyspace hours average hours key 
attack section conducted directly machine design aw string key functions permits optimization attack feasible 
speci cally kerberos implementations interoperate andrew file system afs string key function performs step part password processing passwords characters passes string unix crypt function constant salt uses rst bytes output des key 
unfortunately output crypt represents bit des block output encoded ascii bytes base encoding pure binary block 
saving rst bytes data resulting des key bits entropy 
possible values key byte xed dedicated des cracker easily con gured search reduced key space 
eff cracker form require minutes average minutes compromise keys 
table shows passwords cracked sample characters vulnerable attack 
clear example weak protocol exposes passwords form brute force search inevitability highly optimized attacks protocol assured 
devising cure protect authentication system dictionary attacks attempt passwords di cult guess cryptographic techniques prevent dictionary attacks occurring 
rst approach past limited success 
experimental data provide useful insights habits users demonstrate prevention dictionary attacks best done careful cryptography administrative policy 
stronger passwords 
experiment targeted kerberos realm password strength checking place 
despite passwords compromised weeks 
compared previous password case studies percentage passwords fact lower checking password security system permits passwords fall hands attacker unacceptably weak criterion 
password checkers generally reject passwords match de ned criteria entirely numeric containing dictionary word 
fail detect passwords pass simple algorithmic tests passwords considered password checking software kerberos realm section 
hand users selecting passwords low entropy easy remember 
simple collection transformations table included examples ordered nonsense compromised passwords fell category 
users selecting passwords just pass checking place 
takes form appending prepending digits symbols dictionary word passes leading password slightly harder crack original 
number passwords broken rules section points frequency practice occurs 
legitimately ask dictionary transformation rules password checking software prevent cracker succeeding 
question points exactly futility trying match dictionaries attackers 
system administrators knew exactly dictionaries adversaries don far di cult upgrade widely distributed security databases add words cracker wordlist 
addition password checker constantly upgrading attacker needs build dictionary mount attack 
attacker date dictionaries may access greater computing power unfortunate consequence moore law attacker choose computers employ attack overwhelm measures ort took enforce measures 
form reverse leverage works favor attacker guarantees relying password checks produce unsatisfactory results 
methods password strengthening including system generated passwords periodic password cracking administrators asking users pick stronger passwords voluntarily appear successful practice 
individual security conscious users select passwords virtually bit unrealistic assume users possess level commitment system security 
form password checks stringent er longterm security tend pose signi cant inconvenience casual users frequently rejecting reasonable password choices 
maintain level security length time require constant review upgrade acceptable password standards corresponding reduction user convenience 
password checking certainly reduce number passwords system evident dramatic reduction say broken passwords leaves system vulnerable attack gradually usability unacceptable levels 
kerberos 
kerberos introduces requires user provide evidence knows shared key authentication server issue tgt 
evidence comes form encrypted timestamp ek 
ek tgt server sends reply client decrypts correct time prede ned tolerance 
prevents attacker requesting protect eavesdropper captures ek ek tgt 
quantities constitutes veri able plaintext mount dictionary attack 
improvement relative kerberos attacker network sni er carry line dictionary attack authentication requests captured network 
kerberos incomplete solution 
stronger cryptography incrementally increasing di culty password cracking apply variant public key cryptography possibility dictionary attacks altogether 
approach takes advantage password authentication technique known secure remote password srp protocol 
srp protocol authenticates client server exposing password line dictionary attack preserves password low entropy 
protocol incorporated kerberos mechanism idea originally proposed 
password encrypt decrypt initial tgt client server rst round protocol negotiate secure session key 
quantities exchanged part authenticated key agreement phase side uses side quantity construct session key 
original tgt request packet see table 
initial round client proves knowledge session key receiving encrypted tgt 
ek tgt function shared key ectively making 
derivable user password publicly available information veri able plaintext tgt longer poses security risk 
variant srp performs entire secure ticket exchange single round ts better kerberos model 
strong authentication protocols eke augment kerberos 
main cryptographic advantage srp similar past proposals srp stores password veri ers form plaintext equivalent password 
traditionally kerberos kdc key distribution center stores quantity user revealed publicly allow attacker compromise user account 
eke require kdc store srp requires kdc store mod 
chosen values computationally infeasible extract 
resisting passive active dictionary attacks srp protects kerberos tgt protocol dictionary attacks launched network 
advantages approach obvious users fairly simple passwords exposing system dictionary attacks solution deployed modifying adding public key infrastructure 
long term solution requires signi cant change kerberos authentication model consequently introduces inconvenience users administrators 
vulnerability dictionary attacks long acknowledged weakness kerberos experiment existed little hard data severity 
simple password checking prevent password cracker revealing passwords claimed past 
question answered exactly seconds experiment rst cracked password appeared screen 
passwords obvious approach needed cope threat line dictionary attack 
distributed systems need contend long term trends magnify threat computers faster cheaper 
cracking ability increases minimum entropy needed safe password rises 
human memory improving match 
average number users served distributed system increasing bigger password databases 
reduces average amount cpu time needed attack password 
attackers take advantage software hardware improvements quickly defenders 
applies newer dictionaries 
system exposes passwords dictionary attacks network inherently insecure face trends 
particularly surprising attempts compel harder passwords yielded modest gains system security users 
secure password technologies srp hand prevent dictionary attacks occurring rst place 
ensures long term network security time deployment ort little user visible change 
ultimately best solution involve combination srp light password strength checking relying entirely single approach 
bellovin merritt 
encrypted key exchange password protocols secure dictionary attacks 
proceedings ieee computer society conference research security privacy pages 
steven bellovin michael merritt 
limitations kerberos authentication system 
proceedings winter usenix conference pages 
eli biham 
fast new des implementation software 
fast software encryption 
steve eugene spa ord 
misplaced trust kerberos session keys 
proceedings internet society network distributed system security symposium pages march 
david philip karn 
unix password security years 
crypto proceedings 
electronic frontier foundation 
cracking des secrets encryption research politics chip design 
reilly july 
israel 
hackers comfort 
computers security april 

strong password authenticated key exchange 
computer communication review october 

dual encrypted key exchange ciently preventing password chaining dictionary attacks 
proceedings sixth annual usenix security conference pages july 
charlie kaufman perlman mike 
network security private communication public world pages 
prentice hall englewood cli new jersey 
lamacchia odlyzko 
computation discrete logarithms prime elds 
designs codes cryptography 
philip leong chris tham 
unix password encryption considered insecure 
proceedings winter usenix conference 
morris thompson 
unix password security 
communications acm november 
needham schroeder 
encryption authentication large networks computers 
communications acm december 
national bureau standards 
data encryption standard 
nbs fips pub january 
bruce schneier 
applied cryptography 
john wiley sons new york 
eugene spa ord 
observations reusable password choices 
proceedings third usenix unix security symposium pages baltimore md september 
steiner newman schiller 
kerberos authentication service open network systems 
usenix conference proceedings pages february 
thomas wu 
secure remote password protocol 
proceedings internet society network distributed system security symposium pages march 
