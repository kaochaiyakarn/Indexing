lava tool assist circuit designers specifying designing verifying implementing hardware 
collection haskell modules 
system design exploits functional programming language features monads type classes provide multiple interpretations circuit descriptions 
interpretations implement standard circuit analyses simulation formal veri cation generation code production real circuits 
lava uses polymorphism higher order functions provide general descriptions possible traditional hardware description languages 
fast fourier transform circuit examples illustrate 
productivity hardware designers increased dramatically years keeping pace phenomenal development technology 
key increase productivity steady climb levels abstraction 
late seventies designers sat coloured rectangles laid individual transistors 
came move gate level register transfer level descriptions important step schematic capture programming languages describe circuits 
standard hardware description languages vhdl verilog hardware design 
problems remain 
vhdl designed simulation language subsets input kinds tools synthesis engines equivalence checkers 
vhdl poorly suited tasks example formal veri cation 
ideally wewould able describe hardware variety levels abstraction analyse circuit descriptions di erent ways 
analyses inter lava hardware design haskell koen claessen mary sheeran chalmers university sweden koen msg cs chalmers se singh xilinx usa xilinx com consider essential simulation checking behaviour circuit giving inputs studying resulting outputs veri cation proving properties circuit generation code allows physical circuit produced 
want able perform tasks circuit description 
temptation go away design hardware description language strong resisted 
see far get functional programming language haskell 
call design system lava 
idea functional hardware description langauge course new described builds earlier fp ruby js non standard interpretation circuit analysis sin 
new lava built complete system real circuits described veri ed implemented 
earlier version system generate lters bezier curve drawing circuits implementation field programmable gate array postscript accelerator 
current system large combinational multipliers veri ed sb 
largest formula produced far circuit description connectives 
system constructed systematically important features haskell monads type classes polymorphism higher order functions 
ideas ruby example combinators build circuits haskell gain access fully edged programming language rich type system higher order functions 
having higher order functions available greatly eased circuit description real circuit examples 
circuits correspond rst order functions higher order functions construct circuit descriptions 
knew theory idea circuits rst class objects surprised useful practice 
example higher order functions easy describe circuits containing look tables 
vhdl descriptions circuits tend long hard read precisely absence suitable combinators 
ruby hard deal circuits regular structure components vary position structure 
xor carry sum half adder circuit moved relational functional programming language retain generality relations need logical interpretation described produces formulas relational distinguish input output 
lost moving away ruby machine support high level design sr 
choosing haskell hardware description options haskell variant write specialised tools compilers synthesis engines process existing haskell compilers embedding hardware description language haskell 
launchbury group investigating rst option clm 
chose second 
overview system section presents types abstractions lava system 
monads dealing embedded language functional language requires signi cant amount plumbing 
way hide monads wad 
de ning monad means de ning language features monadic expression program embedded language 
haskell provides syntactic support general combinator libraries monads 
take look small example see de ne half adder circuit gure halfadd circuit bit bit bit bit halfadd carry sum xor return carry sum circuit input wires bits output wires 
convention wires grouped circuit input value output value 
halfadd circuit consists gate xor gate 
note type circuit description contains type variable indicating overloaded underlying monad 
means decide interpret description choosing appropriate implementation description interpreted ways giving various di erent semantics embedded language 
examples interpretations simulation run circuit speci values symbolic evaluation produce vhdl code 
sequential delay loop 
circuit 
arithmetic plus times 
symbolic newvar 
layout row column provable prove 
type class structure interpretations type classes circuit operations meaningful certain interpretations lava structured type classes see gure 
example higher level circuit deal arithmetic operators times physical circuit notion numbers 
point groups operations supported interpretations forming hierarchy classes 
base class hierarchy called circuit 
bea circuit means monad support basic operations 
class monad circuit bit bit bit 
subclasses circuit example arithmetic class higher level interpretations supporting numbers sequential class interpretations containing delay operations 
class circuit arithmetic plus times class circuit sequential delay bit bit bit loop bit bit bit 
circuit description typically constrained type indicate interpretations allowed run description 
circuit run interpretations supporting arithmetic square arithmetic square times architecture system easy user add new classes operations hierarchy new interpretations give semantics see section 
primitive data types datatype bit represent bit 
datatype regarded just boolean value 
compose slightly extend datatype see section 
provide constant values type data bit bool bool low high bit low bool false high bool true describe circuits higher level add primitive datatype represents wire numbers integers ow 
wires course appear physical circuit interpretation needs type class arithmetic handle datatype 
data int int int int int int possible user add datatypes lava see section 
combinators common circuit patterns captured combinators allow designer describe regular circuits compactly way patterns explicit 
section describes simple combinators useful 
composition combinator passes output rst circuit input second circuit 
provide aversion works lists gure 
circuit compose circuit compose foldr return combinators build circuits operating circuits operating lists 
applies circuit half wires leaves rest untouched maps halves see gure 
circuit circuit repeated application function captured raised expression raised results copies circuit applied eighth input wires 
raised int raised 
iterate circuit processes list inputs applying consecutively element see gure 
circuit int int 
user de ne new combinators needed 
interpretations section interpretations dealing concrete circuit functionality 
standard interpretations calculate outputs circuit input values 
symbolic interpretations connect lava external tools generating suitable circuit descriptions 
standard interpretation standard interpretation deal combinational circuits notion time internal state 
case su ces identity monad side ects needed 
data std std simulate std simulate std instance monad std 
resulting std interpretation integrated system specifying circuit operations 
instance circuit std bool bool return bool instance arithmetic std plus int int return int 
simulate example section 
hugs simulate halfadd high high high low deal time state lift combinational circuit interpretation sequential 
done scope 
symbolic interpretation lava provides connection external tools symbolic interpretations 
generate descriptions circuits computing outputs 
external tools process descriptions turn give feedback lava system 
tools focus theorem provers 
brie sketch possibilities section 
circuit description symbolically evaluated providing variables input 
result running circuit symbolic expression representing circuit 
implement idea need extra machinery 
signal datatypes modi ed adding constructor signal context value variable type var string data bit data bool bool int int var var important constructors datatypes std interpretation unable handle variables 
introducing class symbolic ensure functions variable creation available interpretations recognise variables 
class circuit symbolic bit circuit operation applied symbolic inputs create fresh variable remember internally monad variable related parameters operation 
implementation interpretation state monad nite list unique variables writer monad list assertions 
type expression left 
type sym var var assertion data assertion var expression type expression 
instance declaration circuit sym instance circuit sym return 
interpretation run half adder section internal assertion list generated xor inputs circuit called 
symbolic circuit prove properties circuits 
need able formulate circuit properties want 
create circuit contains circuit property wewant 
show full adder leftmost bit set false equivalent half adder write question type form bit question symbolic form question free variables halfadd fulladd low equals fresh variables inputs half adder restricted full adder 
resulting formula type form true outputs circuits 
type form bit logical operators types 
function question polymorphic underlying interpretation symbolic interpretation applicable 
shall instantiate sym 
veri cation sym interpretation interesting needs connected outside world way 
function verify takes description question type form generates le containing possibly large logical formula 
le processed automatic theorem provers connected lava means io monad 
verify sym form io data valid indeterminate falsifiable model result theorem prover interaction type indicates desired formula valid 
valuation making formulas false returned 
hugs user lava run proofs inside interpreter 
hugs verify question print valid invocation generates input theorem prover containing variable de nitions question separated implication arrow 
false false 

currently lava interfaces propositional tautology checker prover sta rst order logic theorem provers otter mw gandalf tam 
interpretations idea generate input tools 
interesting target format vhdl standard hardware description languages industry 
tools process vhdl purposes synthesis cient simulation 
running vhdl interpretation half adder circuit section produces structural vhdl automatically generated lava library circuit circuit entity halfadd port std logic std logic halfadd library circuit circuit architecture structural halfadd comp port map comp xor port map structural extended form symbolic evaluation generates layout information 
done keeping track components circuit functionally composed laid gate array 
interpretation indicates laid left similarly row fa full adders lays horizontally left right data ow 
layout interpretation generate vhdl standard format containing layout attributes give location primitive component 
combining layout behaviour way allows give economical elegant descriptions circuits vhdl require user attach complicated arithmetic expressions instances 
example fft section illustrates lava extended applications complex number datatype new combinators allow fft circuits described 
builds previous deriving fft ruby jon specifying signal processing software haskell 
complex numbers complex numbers needed simulation veri cation concrete values variables representing complex numbers 
implementation datatype re ects data concrete complex double complex datatype support operations addition multiplication 
fft circuits need twiddle factors constants computed see section 
appropriate operations grouped class 
class arithmetic int int plus times instance std instance sym 
extend existing interpretations complex datatype write appropriate instance implementations 
case simple complex arithmetic operations implemented lifting existing arithmetic operations symbolic variables concrete complex double values 
twiddle factors di erent meanings di erent interpretations std interpretation get constant complex values sym expects symbolic values 
discrete fourier transform discrete fourier transform dft computes sequence complex numbers initial sequence kn constant wn de ned signal transformed sequence depends input signal dft operation expensive implement directly 
fast fourier transforms ffts cient algorithms computing dft exploit symmetries twiddle factors laws state symmetries fact equals laws restriction sequence length example powers simplify computations 
fft implementation fewer gates original direct dft implementation reduces circuit area power consumption 
ffts key building blocks signal processing applications 
discuss description circuits di erent fft algorithms radix fft radix fft 
fft circuits decimation time radix fft standard algorithm operates input sequences length power pm 
restriction possible divide input smaller sequences repeated halving sequences length reached 
dft length computed simple circuit 
stage smaller sequences combined form bigger transformed sequences complete dft produced 
radix fft algorithm mapped combinational network gure shows size implementation 
diagram digits twiddle factors wire indicate constant multiplication merging arrows means addition 
bounding boxes contain ffts size 
known algorithm computation dft decimation frequency radix fft assumes input length 
corresponding circuit implementation gure regular mistaken reversed radix circuit passing glance 
di ers substantially di erent butter networks stage twiddle factor multiplications modi ed multiplication stages inserted 
components need main components implement fft circuits 
rst butter circuit takes inputs outputs see gure 
heart fft implementations computes point dft 
systems components applied signals stages gures 
fft butter stages constructed ri ing halves sequence length processing butter butter stage size expressed ri ing column butter circuits ing result see gure 
shu card sharp perfectly interleaves cards half decks 
bfly bfly return int raised bfly important component fft algorithm multiplication complex constant implemented primitive component called twiddle factor multiplier 
circuit maps single complex input circuit computes int int multiplication complete buses de ned follows fact equals mapm useful component isthe bit reversal permutation rst stage fft circuits 
new wire position reversed binary representation old position pm 
permutation expressed monad int compose raised size radix fft network size radix fft network note components shown diagrams data permuted start needs rearranged 
circuit descriptions lava inspired circuit diagrams describe fft circuits lava higher order combinators 
de ning type fft parameterised interpretation monad circuit description takes exponent size circuit list inputs returns outputs 
type fft int radix fft bit reversal composed different stages 
radix fft radix compose stage stage raised radix fft sequence stages composed nal bit reversal 
radix fft radix compose stage stage raised column 
wt wt corresponding vhdl descriptions times longer 
running interpretations run interpretations fft circuits 
simulation possible standard interpretation provide exponent speci inputs circuit 
input input map hugs simulate radix input symbolic interpretation applied verify circuit instances equivalent rst order theorem prover otter mw 
create circuit stating equivalence symbolic int form inp radix inp radix inp equals function generates list complex symbolic variables 
applying circuits inputs ask outputs 
verify equation add knowledge otter laws complex arithmetic particular laws twiddle factors 
information added form theories de ned user lava prover proof option 
otter shows circuit equivalence size ffts proven circuits size equivalent aswell 
options options prover otter theory arithmetic theory twiddle hugs verify options print valid shows formula generated input otter notice arithmetic twiddle factor theory 
related fft description veri cation equivalence radix fft algorithm dft shown acl descendant boyer moore theorem prover gam 
approach example slightly di erent want show automatically generated logical descriptions circuits xed size equivalent proving mathematical theorems algorithms 
veri cations similar methods relationships twiddle factors 
related section discuss related functional languages hardware description analysis 
described basis earlier fp extension backus fp language synchronous streams designed particularly describing reasoning regular circuits 
continue combinators describing ways circuits built 
gained embedding haskell availability full blown programming language 
synchronous programming languages lustre esterel signal automatically generated lava theory arithmetic list 
eq tim plus plus tim tim 
eq tim sub sub tim tim 
eq tim 
eq tim tim tim tim 
list 
theory twiddle factors size list 
eq 
eq 
le eq prod prod 
eq tim sum 
list 
system question list sos 
eq 
eq sub sub tim tim sub tim tim sub sub tim sub eq sub plus tim tim plus tim tim sub plus plus eq plus sub tim tim sub tim tim plus sub tim sub eq plus plus tim tim plus tim tim plus plus plus 
list 
otter input size fft comparison describe hardware style 
experiments direction carried eu project 
source inspiration john donnell hydra system 
hydra circuit descriptions direct written ordinary haskell 
monads cluttering types advantage 
monads lava easily extensible hydra 
hydra system far know generate formulas circuit descriptions input theorem provers idea having multiple interpretations recurring theme donnell 
launchbury group experimenting different approach haskell hardware description clm 
hawk atype signals lustre functions manipulate provided 
circuits modelled functions signals lazy state monad locally express sequencing mutable state 
main application far give clear concise speci cations superscalar microprocessors 
simulation high level abstraction main circuit analysis method 
isabelle support formal proof way 
lava put generated hawk circuit descriptions 
plan explore possibility joint project 
hawk means producing code production real circuits circuit synthesis progress 
keith hanna long argued functional language dependent types hardware description veri cation hd 
hanna inspired research higher order logic hardware veri cation 
pvs theorem prover increasingly hardware veri cation functional language dependent types 
know ofwork circuit descriptions written language proof pvs 
hml hardware description language ml developed group ll 
language bene ts having higher order functions strong type system polymorphism just 
emphasis hml simulation synthesis formal veri cation 
lava system easily extensible tool assist hardware designers initial stages design nal construction working circuit 
system allows single circuit description interpreted di erent ways analyses simulation formal veri cation layout field programmable gate array supported 
furthermore new interpretations added relatively little disturbance existing system allowing lava main workbench research hardware veri cation methods combinational sequential circuits 
able provide features rely heavily advanced features haskell type system monads language embedding polymorphism type classes support di erent interpretations higher order functions capturing regularity 
system interesting practical application haskell proved ideal tool hardware description language implementation language 
demonstrated fft examples circuit descriptions short sweet nd suitable set combinators 
experience ruby indicates domain application signal processing pipelined circuits state machines gives rise small manageable set combinators 
largest circuit tackled far bit bit combinational multiplier 
deal circuit needed haskell compiler hbc hugs 
writing lava system educational exercise software engineering 
thrown away started 
latest version exploits haskell type system impose clear structure entire program way nd appealing 
taught think types early design system 
lava demonstrates advantages doing 
continuing develop lava system report progress description nished project 
specialised versions lava concentrating particular aspect design cation production vhdl 
merging versions just begun really need fusion pushed current system design 
incorporating interpretation takes care layout production non trivial task code necessarily large complicated 
may lead changes top level design lava 
system usable need add new interpretations 
example test pattern generation testability analysis earlier singh basis sin 
interpretations tested real case studies 
able generalise system multiple parameter type classes provided haskell 
interpretations share primitive datatypes 
multiple parameter type classes interpretation support data types required features 
area veri cation working interpretations involving sequential operations delay related methods automatically prove properties sequential circuits 
working case study sequential fft implementation provided ericsson 
inspired hawk group nd hard resist investigating veri cation generation complex microprocessors 
particular interested question processors enable veri cation proceed smoothly 

speci cation signal processing programs pure functional language compilation distributed architectures 
master thesis chalmers university 
clm byron cook john launchbury john matthews 
specifying superscalar microprocessors hawk 
formal techniques hardware hardware systems 
sweden 
david 
inverting abstraction mapping methodology hardware veri cation 
formal methods computer aided design electronic circuits fmcad number lecture notes computer science 
springer verlag 
gam 
mechanically verifying correctness fast fourier transform acl 
third international workshop formal methods parallel programming theory applications 
hd keith hanna neil 
dependent types formal synthesis 
phil 
trans 
soc 
lond 


concurrent vlsi architectures dft computing algorithms multi output logic decomposition 
phd thesis lund institute technology 
jon geraint jones 
fast utter fourier transform 
proceedings ban workshop higher order 
springer workshops computing 
js geraint jones mary sheeran 
study butter ies 
proceedings ban workshop higher order 
springer workshops computing 
ll li 
hml innovative hardware design language translation vhdl 
computer hardware description languages 
mw william mccune wos 
otter cade competition incarnations 
journal automated reasoning 
john donnell 
transistors computer architecture teaching functional circuit speci cation hydra 
functional programming education volume lecture notes computer science pages 
springer verlag 
pm john proakis dimitris 
digital signal processing 
macmillan 
sb mary sheeran arne 
prove properties recursively de ned circuits stalmarck method 
formal techniques hardware hardware systems 
sweden 
mary sheeran 
designing regular array architectures higher order functions 
int 
conf 
functional programming languages computer architecture jouannaud ed volume lecture notes computer science 
springer verlag 
sin singh 
analysis hardware description languages 
phd thesis computing science dept glasgow university 
sr robin sharp ole rasmussen 
transformational rewriting ruby 
computer hardware description languages 
elsevier science publishers 
sta gunnar stalmarck 
system determining propositional logic theorems applying values rules triplets generated formula 
swedish patent approved patent european patent 
tam 
gandalf 
journal automated reasoning 
wad philip wadler 
monads functional programming 
lecture notes marktoberdorf summer school program design calculi nato asi series computer systems sciences 
springer verlag august 
