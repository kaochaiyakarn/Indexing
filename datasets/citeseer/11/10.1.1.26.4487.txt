reverse search enumeration david avis school computer science mcgill university university montreal quebec canada fukuda graduate school systems management university tsukuba ku tokyo japan december revised november reverse search technique introduced authors efficient enumeration vertices polyhedra arrangements 
develop idea general framework show broader applications various problems operations research combinatorics geometry 
particular propose new algorithms listing triangulations set points plane ii cells hyperplane arrangement iii spanning trees graph iv euclidean non crossing trees spanning set points plane connected induced subgraphs graph vi topological orderings acyclic graph 
propose new algorithm integer programming problem considered alternative branch bound algorithm 
listing objects satisfy specified property fundamental problem combinatorics computational geometry operations research 
typical objects enumerated spanning trees connected graph vertices faces convex polyhedron arrangement hyperplanes system linear inequalities triangulations set points plane known search techniques enumeration problems 
backtrack search known useful various enumeration problems associated graphs 
enumeration problems computational geometry incremental search technique frequently 
graph search depth search breadth search widely applicable case objects listed vertices connected graph 
introduce new exhaustive search technique called reverse search considered special graph search 
new search design efficient algorithms various enumeration problems mentioned 
reverse search algorithms successfully designed characteristics research supported natural science engineering research council number number eq 
partially supported aids operative research ministry education science culture fujitsu laboratories kawasaki japan 
time complexity proportional size output times polynomial size input space complexity polynomial size input parallel implementation straightforward procedure decomposed multiple independent general stage 
order explain basic idea reverse search connected graph vertices precisely objects listed suppose objective function maximized vertices local search algorithm deterministic procedure move vertex neighboring vertex larger respect objective function exists better neighboring vertex 
note local search algorithm defined general procedure formal discussion section 
vertex better neighboring vertex called local optimal 
algorithm finite starting vertex terminates finite number steps 
known examples local search algorithms simplex method linear programming edge exchange algorithm finding minimum spanning tree weighted graph section flip algorithm finding delaunay triangulation plane 
simplex method finite general finite certain pivot rule smallest subscript rule restrict pivot selection algorithms finite detailed description flip algorithm section 
imagine simple case finite search algorithm local optimal vertex optimal solution 
consider digraph vertex set edges ordered pairs consecutive vertices generated local search algorithm 
clear tree spanning vertices sink trace graph systematically say depth search enumerate vertices objects 
major operation tracing edge orientation corresponds reversing local search algorithm minor backtracking simply performing search algorithm 
noteworthy store information visited vertices search tree 
new search technique interesting application hard combinatorial optimization 
observe vertex vertex directed path larger objective value 
suppose looking vertex satisfying side constraint integrality linear programming case largest objective value 
perform reverse search partially keep current best solution current best value search detects better solution satisfying side constraint update current best solution value 
detects vertex lower objective value abandon going lower tree 
remarks parallelization reverse search 
quite easy see reverse search algorithm easily parallelized visit vertices defined tree root 
trivial implementation assign free processor son root branch traversed 
done recursively course assigned processor assigns sons free processors 
termination sub task easily recognized depth counter 
important question accelerate computation 
obviously restrained height tree root computational time depends linearly height 
easily estimate height cases simplex method case cases height small 
believe cases significant potential successful parallel computing 
cases include enumeration spanning trees connected graph vertices cells arrangement hyperplanes triangulations point set 
original idea reverse search came vertex enumeration algorithm proposed authors polyhedra arrangements hyperplanes reverses simplex algorithm smallest subscript rule criss cross method linear programming respectively 
organized 
section devoted formal presentation local search reverse search 
section give applications reverse search 
notion partial reverse search section applications integer programming 
reverse search basic idea reverse search enumeration 
shall formally generality 
undirected graph vertex set edge set shall call triple local search subset mapping ns satisfying fv ns 
finite local search addition ns exists positive integer procedural form local search procedure localsearch vertex endwhile output function said local search function underlying graph structure 
naturally consider set set candidates solution set set solutions 
local search function simply algorithm finding solution 
difficult find examples local search 
list ffl simplex method linear programming set feasible bases induced pivot operation simplex pivot set optimal bases ffl edge exchange algorithm finding minimum spanning tree weighted graph section set spanning trees induced edge exchange operation best improvement exchange algorithm set minimum spanning trees ffl flip procedure finding delaunay triangulation plane set points set possible triangulations induced flip operation flip algorithm set delaunay triangulations 
helpful keep examples mind better understanding new notions introduced 
trace local search directed subgraph trace simply digraph vertices edges local search 
define height trace length longest directed path obvious important property 
finite local search trace directed spanning forest component containing exactly vertex unique sink 
finite local search trace denote component containing vertex call procedure reverse search procedure vertex traverse component output vertices endfor 
purposely vague describing traverse 
actual traversal depends local search cases reverse search useful explicitly 
shall deal case jsj set explicitly 
cases consider output reverse search solution set singleton 
extremely useful discuss special implementation reverse search local search certain way general applications described restricted interesting statements time complexity reverse search 
say graph adjacency oracle simply oracle conditions satisfied vertices represented nonzero integers 
integer ffi explicitly upper bound maximum degree vertex degree deg number 
adjacency list oracle satisfying ii iii vertex number ffi oracle returns vertex adjacent extraneous zero ii iii vertex ffi exactly set vertices adjacent conditions iii imply returns adjacent vertex exactly ffi inquiries ffi vertex conditions may natural see cases knowledge maximum degree underlying graph upper bound 
consider simplex method 
feasible basis pivot operations lead feasible bases lead non feasible bases 
general possible degeneracy unbounded feasible region know maximum number adjacent feasible bases 
trivial bound number pivot positions number basic variables times number nonbasic variables 
associated feasible basis th pivot position adjacent feasible basis basis impossible pivot determines oracle 
flip algorithm naturally see underlying graph oracle 
local search said oracle underlying graph local search oracle write particular implementation local search 
procedure applications traversal component done depth search set explicitly procedure ffi vertex neighbor counter repeat ffi reverse traverse endif endif endwhile forward traverse repeat restore endif ffi endfor 
note vertex ns exactly forward traverse performed procedure 
time complexity evaluated 
local search oracle denote time evaluate respectively 
theorem 
suppose local search oracle 
time complexity ffi jv jej 
proof 
easy see time complexity determined total time spent execute lines 
line executed ffi times vertex total time spent ffi jv 
line executed times degree deg vertex total time jej 
third line executed vertex ns total time jv gamma jsj 
similarly total time ffi jv gamma jsj 
jv gamma jsj jej adding time complexities claimed result 
corollary 
suppose local search oracle 
time complexity ffi jv 
particular ffi independent number jv vertices time complexity linear output size jv proof 
claim follows immediately theorem fact jej ffi jv assumption ffi independent number jv satisfied general complete graph cases assumed 
fact applications section satisfy assumption 
simple formulas theorem corollary time complexity reverse search 
shall evaluate time complexity applications 
stronger result possible cases 
cases lines shortcut possible check vertex integer ffi executing case procedure shortcut possible vertex determine integer executing explicitly 
order deal cases clearly shall give alternative version reverse search 
convention 
procedure ffi vertex neighbor counter repeat ffi reverse traverse endif endwhile forward traverse determine restore endif ffi endfor 
order describe time complexity procedure define time necessary decide vertex integer ffi time decide moving reverse 
similarly define time necessary vertex determine integer theorem 
suppose local search oracle 
time complexity ffi jv 
proof 
proof similar theorem 
total time ffi jv jv gamma jsj 
similarly total time jv gamma jsj jv gamma jsj 
adding yields result 
looking theorem notice possibility refinement reverse search 
part ffi time complexity time necessary reverse traversal moving away top vertex remaining part time forward traversal moving top vertex 
really shorten part interestingly shorten part storing forward traverse paths 
precisely store forward sequence return top vertex reversing need evaluated go forward 
particularly important trace local search short height order magnitude smaller presently applications 
space complexity usually independent cardinality output 
moment evaluate precisely space complexity depends linearly space necessary store single vertex space necessary realize functions oracles 
applications reverse search vertex enumeration polyhedra vertex enumeration problem list vertices convex polyhedron fx ax theta matrix vector 
consider linear program form maximize cx subject ax 
simplex algorithm considered finite local search lp lp lp lp lp lp graph lp set feasible bases bases adjacent obtained pivot operation lp set optimal bases lp simplex algorithm smallest subscript rule 
represent basis set indices basic variables define lp lp gamma basis gamma basis basic nonbasic indices local search oracle lp ffi lp theta find vertices 
easily find feasible basis linear inequality system ax say simplex method interior point method 
set lp objective function cx current basic solution unique optimal solution optimal basis 
associated local search lp lp lp immediately yields reverse search lp ffi lp lp lp list feasible bases long set lp optimal bases explicitly 
set lp singleton fbg done 
enumerate optimal bases reverse search respect dual simplex method applied auxiliary problem 
see details 
system ax nondegenerate design simpler algorithm 
critical difference feasible basis nonbasic index exists basic index gamma feasible basis 
define lp lp gamma exists gamma feasible basis nonbasic index local search oracle lp smaller ffi lp known simplex method rule take exponential number pivots find optimal solution see 
means height trace lp bounded polynomial function theoretically means best parallel implementation may faster 
expected behavior turn quite different 
mathematica implementation vertex enumeration algorithm available implementation 
enumeration cells arrangements mg arrangement distinct hyperplanes fh hyperplane linear equality fx sides fx gamma fx signed vector sv vector gamma defined sv gamma gamma set signed vectors points nonzero support identify vector open cell open face arrangement defined fx sv cg 
cells sep set separators set elements opposite signs 
say cells adjacent differ component equivalently 
lemma important 
lemma 
distinct cells exists cell adjacent sep ae sep 
proof 
distinct cells point respectively general position 
moving line segment encounter sequence cells easily verify adjacent sep ae sep 
assume contains cell 
lemma implies cell different cell adjacent sep ae sep 
define cell lexico largest unique element sep smallest possible 
cell finite local search fc lemma immediately obtains corollary 
height trace local search cell describes trace local search small example 
reversing local search obtain algorithm list cells arrangement 
things explained implementation 
assumed cell pick cell arrangement consider cell replacing equality gammaa gammab essentially change arrangement 
note obtain initial cell picking random point perturbing lies hyperplanes 
realize cell ffi cell cell cell efficient way 
set ffi cell fc cell function realized solving lp form minimize maximize subject ax gamma gamma minimization maximization chosen gamma respectively 
function returns adjacent cell sep fkg lp feasible solution negative positive objective value 
time cell depends lp variables gamma inequalities solved 
denote function straightforward implementation cell solves sequence lp similar objective functions 
means may solve lp worst case 
presently don know implement efficient manner 
theorem 
implementation cell ffi cell cell cell enumeration problem time complexity jv cell space complexity 
proof 
prove recall theorem says time complexity ffi jv jej 
remarked earlier ffi cell cell cell 
jv cell holds arrangement see claimed time complexity follows 
space complexity clearly input size 
believe previously known algorithm enumerate cells arrangement time complexity polynomial size output 
cardinality output course exponential maximum explicitly buck formula attained simple arrangements see 
corollary cell enumeration profit lot parallel implementation 
enumeration triangulations set fp distinct points plane 
pair fp qg distinct points called edge line segment connecting contain point triple fp rg points called triangle collinear convex hull triangle region contain points point edge called external contained boundary convex hull internal 
triangulation set delta triangles external edge contained exactly triangle delta internal edge contained triangle delta exactly triangles delta 
edge triangulation delta edge contained triangle delta 
euler relation easily see number triangles edges triangulation independent choice triangulation 
proposition 
delta triangulation number edges triangles delta respectively 
determined gamma gamma gamma gamma denotes number external points 
clear definition number triangulations finite 
enumeration possible triangulations problem section 
order apply reverse search technique notion delaunay triangulation flip algorithm useful 
delta triangulation triangles interior angles ff ff ff indexed way ff ff vector ff delta ff ff ff called angle vector delta triangulation said delaunay angle vector lexicographically maximal possible triangulations point set comparison components done left right 
delta triangulation 
fa bg internal edge delta fa cg fa dg triangles delta containing 
call fa bg set lip delta fa bg delta ffa cg fa dgg ffa dg fb dgg triangulation easily see internal edge fa bg points form convex quadrangle 
call fa bg legal circumscribing disk triangles abc abd contain illegal 
edge fa bg illegal operation lip delta fa bg called delaunay flip 
known triangulation delta delaunay contain illegal edges 
flip algorithm simply procedure delaunay flip operation repeatedly order operation possible see 
theorem states flip algorithm finite 
theorem flip algorithm terminates steps finds delaunay triangulation starting initial triangulation 
apply reverse search tri tri set delaunay respectively triangulations underlying graph tri tri tri vertices adjacent flip 
define local search tri function tri ns tri tri tri delta lip delta fa bg fa bg lexico smallest illegal edge delta 
design oracle 
triangulation delta list interior edges ordered lexicographically kth member proposition cardinality jlj exactly gamma gamma denote ffi tri adjacency oracle tri delta defined tri delta lip delta ffi tri theorem 
implementation tri ffi tri tri tri triangulation enumeration problem time complexity jv tri space complexity 
proof 
implementation quad edge data structure storing triangulation 
store linked list edges flag indicating legal illegal store lexico smallest illegal edge analysis time complexity apply theorem 
note evaluate tri tri time including time update triangulation data 
store lexico smallest illegal edge 
ffi tri theorem stated time complexity 
space complexity clearly 
enumerating elements tri enumeration delaunay triangulations unnecessary 
possible transform delaunay triangulation sequence flips extend local search tri finds lexico smallest delaunay triangulation flipping legal edge non lexico smallest delaunay triangulation 
theorem shows parallel implementation quite fast 
mentioned essentially algorithm discovered independently 
enumeration connected induced subgraphs graph vertex set ng edge set size subset denote subgraph induced set edges endpoints section apply reverse search technique enumeration connected induced subgraphs graph seen enumeration connected subgraphs opposed connected induced subgraphs treated similar manner 
lemma essential 
lemma 
graph nonempty subset connected 
exists vertex gamma connected 
proof 
assumptions satisfied 
ju lemma trivial 
assume ju 
take spanning tree take vertex having degree exists 
removal vertex disconnect graph 
quite easy prove opposite operation preserving connectivity 
lemma 
connected graph proper subset connected 
exists vertex connected 
lemmas yields reverse search algorithm enumerating connected induced subgraphs 
exploit lemma 
family subsets connected lemma local search function cis defined cis gamma smallest vertex gamma connected 
nonempty set function cis generates unique sequence subsets ju 
reverse search algorithm describe merely reverses finite algorithm 
underlying graph gcis cis straightforward subsets adjacent gcis proper subset differ exactly element 
adjacency oracle acis defined gamma gamma nu vertex ffi cis simple implementation adjacency oracle cis gives complexity reverse search algorithm able improve sophisticated data structure 
theorem 
implementation cis ffi cis cis connected induced subgraph enumeration problem time complexity jv cis space complexity 
proof 
essential part implementing cis list directly indirectly articulation points cut vertices graph 
depth search tree see section implementation cis cis cis 
time complexity theorem fact ffi cis immediately obtain claimed time complexity 
space complexity clearly input size 
clearly height reverse search tree means parallel implementation algorithm faster 
interesting note reverse search algorithm slight modification enumerate connected induced subgraphs vertices fixed change additional stopping rule soon ju search lower trace cis mentioned lemma yields reverse search algorithm 
algorithm initial graph empty graph assuming loss generality connected 
easy see additional stopping rule search gives algorithms enumerating connected induced subgraphs vertices fixed note enumeration connected subgraphs graph opposed induced subgraphs done approach 
key lemmas lemma lemma immediate analogue terms connected subgraphs edge insertion deletion replaces vertex insertion deletion 
enumeration topological orderings acyclic digraph vertex set ng edge set size denote edge directed permutation said topological ordering implies appears left topological orderings called linear extensions known topological ordering acyclic graph time see section 
section reverse search algorithm enumerate topological orderings efficiently 
loss generality assume trivial permutation identity topological ordering 
tor set topological orderings tor permutation local change replacement lc permutation obtained interchanging local change said admissible simple lemma 
lemma 
nontrivial permutation tor admits admissible local change furthermore admissible local change tor proof 
nontrivial permutation tor nontrivial exists index take index topological ordering lc tor lemma ensures nontrivial permutation tor replaced permutation tor better closer 
specifically lemma enables define finite local search function tor tor gamma tor tor lc smallest index local change admissible smallest index 
underlying graph structure tor tor tor naturally derived function tor permutations adjacent obtained local change 
define adjacency oracle tor graph tor lc tor index gamma 
ffi tor gamma 
lemma important efficient implementation reverse search algorithm current problem 
lemma 
nontrivial permutation tor smallest index local change admissible 
index local change reverse tor tor lc conditions holds gamma ii implying gamma 
proof 
sufficiency easy 
prove necessity 
index local change reverse tor firstly easily see conditions hold 
suppose ii holds 
cases 
lc 
clearly case happen position admissible local change position hold 
position smallest index local change admissible 
contradicts assumption tor ii hold 
completes proof 
theorem 
implementation tor ffi tor tor tor topological ordering enumeration problem time complexity jv tor space complexity 
proof 
efficient implementation store current permutation smallest index local change admissible 
store graph incidence matrix query 
answered time 
observe evaluate tor tor time including time update index store index lemma implies 
trivial time complexity ffi tor theorem yields claimed time complexity 
space complexity dominated storage incidence matrix 
efficient backtrack algorithm enumerate topological orderings see 
gray code algorithm proposed generates topological orderings outputs local changes optimal jv tor time space 
analysing amortized complexity reverse search algorithm interesting problem lead reverse search algorithm optimal complexities 
enumeration bases spanning trees finite set elements set bases matroid ground set rank satisfies basis axioms member subset cardinality called basis bases nb exists element bnb gamma basis simple known examples matroids 
real matrix rank column vectors fa basis defined maximal independent subset set lin bases matroid 
matroid arising way called linear representable reals 
graph edge set set st spanning forests considered collection edges matroid 
matroid known cycle matroid assigning arbitrary orientations edges st lin ag gamma incidence matrix ag cycle matroid graph linear 
problem enumeration bases sense explicitly 
see special cases situation set explicitly efficient way find basis efficient way decide subset basis 
conditions efficient enumeration bases nontrivial problem 
cases discussed earlier sections reverse search technique naturally applied problem 
may suppose basis 
loss generality set mg ng 
fb consider graph vertex set vertices adjacent exactly gamma common elements 
basis axioms immediately yield local search need enumeration bases 
define function ns bas bas gamma bnb gamma basis basis axioms function defined returns basis closer terms hamming distance 
order design algorithm readily applied linear matroid case employ notion tableau 
basis theta pnb matrix ij pnb defined ij gamma basis nb called tableau notion tableau commonly linear matroids explicitly representation matrix tableau corresponds elementary pivot transformation tableau simply combinatorial abstraction distinguishes zero nonzero entries 
tableau nonzero entry rs operation replacing gamma called pivot denoted iv 
operation basic linear cases useful implement algorithm pivot operation elementary operation 
consider iv time necessary pivot operation 
linear case iv mn 
adjacency oracle merely disguise tableau gamma ij ij nb consider ffi bas theta gamma number candidates 
implementation reverse search propose maintain tableau current basis addition maintain additional items associated evaluate bas constant time 
simply pivot position chosen bas second item largest integer lg denoted 
reversibility flag vector nb true kj false nb lemma 
lemma 
basis position tableau reverse pivot position respect bas ij true 
proof 
left reader 
theorem 
implementation bas ffi bas bas basis enumeration problem time complexity mn iv jv bas space complexity independent jv bas proof 
prove theorem claims time complexity ffi jv 
claimed implementation data structure tableau associated items described 
bas bas excluding data structure update 
clearly 
previous lemma 
ffi bas theta gamma total time enumeration excluding time data structure update time updating tableau associated data iv mn 
update tableau associated data time move different basis total time updating data iv mn 
proves theorem 
case spanning trees graphs enumeration problem solved backtrack search time complexity jm see 
shown sophisticated data structures design reverse search algorithms optimal complexity 
describes implementation optimal space complexity algorithm scan spanning trees jm time mn space 
easily see maximum cardinality output contrast trace reverse search exceptionally short height example ideal example reverse search profit substantially parallel implementation 
note reverse search applied enumeration vertices arrangements hyperplanes 
superior reverse search method sense time complexity parallel acceleration 
enumeration euclidean spanning trees fp set points plane collinear 
consider trees vertices edges line segments endpoints edges endpoints distinct said cross corresponding line segments intersect 
general position assumption intersection point interior point segments 
euclidean spanning tree spanning tree crossing edges 
section show enumerate euclidean spanning trees describe optimum tree relabeling points necessary may assume lexicographically smallest point extreme point convex hull label points sorted counter clockwise order edges convex hull defined tree consisting edges clearly euclidean spanning tree enumeration algorithm lemma 
lemma 
non optimum euclidean spanning tree edge edge gamma euclidean spanning tree 
proof 
proof uses adoption argument due yao 
candidate edge gamma note implies endpoint edges provided intersected edge placing acyclic relation edges gamma show existence pair edges convention refer edge assume edges gamma say dom edge intersects interior triangle dom addition crosses say say note implies 
observation relation acyclic 
observation proof edges intersect endpoints 
cross intersects interior triangle note equality possible 
edge gamma observation dom proof note edges cross edges contained interior triangle crosses properly intersects interior triangle required 
observations show dom maximal element candidate acyclic maximal element 
maximal element satisfying conditions maximal element ii maximal element claim maximal element dom 
proof assume contrary existence edge dom note maximal maximal element chain relation containing repeated observation maximality respect observation combined condition gives condition ii gives contradiction contradiction proves claim 
rest proof straightforward 
edge tree choice maximality respect dom proves euclidean 
lemma immediately shows reverse search algorithm enumerating euclidean spanning trees 
performance implementation matter 
try search efficient go scope 
shall describe simple reasonably time complexity 
define graph gest est vest set euclidean spanning trees trees vest adjacent gest symmetric difference consists edges form euclidean spanning tree different set edges nt maximal elements dom 
lemma guarantees nonempty 
edge exists unique edge gamma vest local search gest est ft est gamma lexico min edge 
order construct oracle set ffi est gamma gamma gamma edge candidates remove gamma edges add euclidean spanning tree easily implement est recognizing edges cross takes constant time 
similarly est 
theorem 
implementation est ffi est est euclidean spanning tree enumeration problem time complexity jv est space complexity 
proof 
prove simply corollary claims time complexity ffi jv 
discussion gives time complexity 
space complexity obvious 
partial reverse search section developed reverse search general exhaustive search technique 
introduce simple modification reverse search general algorithmic framework solving certain class hard optimization problems 
order understand main idea consider integer programming problem abbreviated ip maximize cx subject ax rational theta matrix rational vector rational vector 
known ip np complete 
standard technique solve problem branch see chapter 
new algorithm introduced considered alternative branch bound methods 
fx ax lemma 
lemma 
point optimal solution ip maximizes cx vertices integral 
proof 
part trivial 
part follows fact integral vector vertex lemma suggests primitive strategy solve ip apply reverse search section enumerating vertices search procedure output vertices remember update integral vertex say currently best objective value output search 
procedure obviously works 
far practical vertex enumeration takes time large shorten procedure overcome difficulty 
observe local search reverse simplex method monotone respect objective function cx cx xb denotes basic solution vertex associated basis means follow trace reversely orientation objective value monotonically decreases 
doing reverse search soon detect integral vertex vertex objective value worse current best value cv reason search lower trace 
know partial reverse search strategy yields practical algorithm 
believe deserves investigation 
branch bound algorithms ip require large number linear programs solved solve linear program initially 
furthermore simple ways implement parallel computers 
partial reverse search general setting 
suppose finite local search oracle 
apply reverse search enumerate vertices 
addition suppose situation objective function defined vertex boolean function defined vertex 
general problem solved maximize subject true 
obviously ip special case optimization problem 
call procedure partial reverse search procedure ffi vertex neighbor counter gamma current best solution value repeat ffi reverse traverse true update current best solution ffi reverse endif endif endwhile forward traverse determine restore endif ffi output endfor 
call local search function monotone respect ns 
previous discussion partial reverse algorithm ip naturally extends proposition 
partial reverse search solves optimization problem function monotone respect easily find applications partial reverse search integer programming 
example find special triangulation points plane flip algorithm tri section 
desired triangulation narrow angle triangles 
fact delaunay triangulation maximizes angle vector particular maximizes minimum angle 
partial reverse search find triangulation satisfying prescribed condition maximizing angle vector 
example find special basis weighted matroid spanning tree graph weighted edges 
easy modify local search bas section finds basis maximum weight see 
setting condition want basis satisfy having leaves graph case 
partial reverse search finds basis satisfying maximum weight 
evidence whatsoever supporting applications useful practice 
order say meaningful respect demands research 

authors grateful epartement de epfl switzerland major part written second author visit autumn 
particular idea flip algorithm triangulation enumeration came author discussion professor th 
epfl 
aho hopcroft ullman data structures algorithms addison wesley 
avis implementation reverse search vertex enumeration algorithm research report department information sciences tokyo institute technology 
avis chv atal notes pivoting rule mathematical programming 
avis fukuda pivoting algorithm convex hulls vertex enumeration arrangements polyhedra discrete comput geometry 
avis fukuda basis enumeration algorithm linear systems geometric applications applied mathematics letters 
buck space amer 
math 
monthly 
edelsbrunner algorithms combinatorial geometry springer verlag 
fortune note delaunay diagonal flips bell laboratories murray hill new jersey 
fujishige submodular functions optimization annals discrete mathematics north holland 
fukuda saito tamura face enumeration arrangements oriented matroids discrete appl 
math 

fukuda saito tamura bounding number faces arrangements hyperplanes discrete appl 
math 

fukuda mathematica package vertex enumeration convex polyhedra hyperplane arrangements version beta graduate school systems management university tsukuba tokyo available anonymous ftp cs sunysb edu directory pub combinatorica 
guibas stolfi primitives manipulation general subdivisions computation voronoi diagrams acm trans 
graphics 
knuth structured program generate topological sorting arrangements information processing letters 
matsui algorithms finding spanning trees undirected graphs department mathematical engineering information physics faculty engineering university tokyo 
papadimitriou steiglitz combinatorial optimization hall 
ruskey generating linear extensions fast siam computing appear 
read tarjan bounds backtrack algorithms listing cycles paths spanning trees networks 
schrijver theory linear integer programming john wiley sons 
tamura efficiently scanning spanning trees undirected graph research report dept information sciences tokyo institute technology 
static dynamic weighted delaunay triangulations euclidean plane flat torus research report 
uiucdcs department computer science university illinois urbana champaign 
welsh matroid theory academic press 
yao priority approach hidden surface algorithms proc 
st symposium foundations computer science 
arrangement hyperplanes trace cell delaunay triangulation flip flip flip flip algorithm delaunay triangulation 
