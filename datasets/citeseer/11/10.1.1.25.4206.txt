extending evaluating flow insensitive context insensitive points analyses java liang mary jean harrold college computing georgia institute technology atlanta ga usa harrold cc gatech edu presents extensions steensgaard andersen algorithms handle java features 
careful consideration handling features may ect correctness precision ciency algorithms 
presents results empirical studies 
studies compare precision ciency algorithms evaluate ectiveness handling java features alternative approaches 
studies evaluate impact points information provided algorithms client analyses information 

program analyses optimizations java programs require information determines instances addresses stored variable 
researchers suggested points analysis algorithms originally developed analyzing programs computation information java programs 
java features language 
careful adaptation algorithms java programs features may cause algorithms compute incorrect information 
features may ect ways java programs written may significantly ect precision ciency algorithms programs 
evaluate ectiveness points analysis algorithms computing information java programs studied flow insensitive context insensitive algorithms steensgaard andersen :10.1.1.11.3368:10.1.1.109.6502
steensgaard algorithm linear time complexity computes precise information worstcase approximation 
andersen algorithm despite cubic worst case time complexity ciently compute pointer information large programs 
addition studies permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
paste june snowbird utah usa 
copyright acm 
show andersen algorithm may compute information close precision computed expensive flow sensitive context sensitive algorithms 
discusses extensions steensgaard andersen algorithms handle important java features 
extensions account common ways java programs written attempt improve precision ciency algorithms analyzing programs 
compared approaches extend steensgaard andersen algorithms java approaches handling collections maps precise approaches handling fields cient :10.1.1.32.1100
presents empirical studies 
studies evaluate ciency precision steensgaard andersen algorithms evaluate ectiveness alternative approaches handling java features 
studies evaluate impact points information provided algorithms virtual call resolution escape analysis 
studies show carefully handling features collections maps algorithms compute precise points information worstcase approximation 
studies show simplifying field handling andersen algorithm take advantage encapsulation java programs ciency algorithm significantly improved losing precision 
studies show points information significantly improve precision virtual call resolution provide useful escape information optimization 

java section discusses extensions steensgaard andersen algorithms handle important java features 
space limitation omit discussion handling java features reflection carefully considered implementing points analysis 
steensgaard andersen algorithms 
adapted steensgaard andersen algorithms compute pointsto graphs java programs 
points graph nodes represent variables instances edges represent vari able labeled instance field labeled field names 
ciency steensgaard algorithm uses node represent instances may referenced variable field 
example instances created statements represented node referenced constructor contrast andersen algorithm uses node represent instance see 
algorithms instance represented node 
steensgaard algorithm andersen algorithm process statements method arbitrary order 
algorithms process method call set assignments simulate parameter passing return target method 
algorithms process assignments assignments fields variables types 
algorithm terminates information contained points graph safe assignment set instances referenced left side assignment subsumes set instances referenced right side assignment 
steensgaard algorithm processes assignment merging node represents instances referenced left side assignment node represents instances referenced right side assignment 
way assignment processed information contained points graph remains safe assignment 
steensgaard algorithm processes assignment 
contrast andersen algorithm processes assignment adding edges points graph set instances referenced left side assignment subsumes set instances referenced right side assignment 
set instances referenced right side may change assignment processed andersen algorithm may revisit assignment add edges ensure points information remains safe assignment 
processing continues new edge added points graph 
approach causes andersen algorithm expensive precise steensgaard algorithm 
virtual method calls 
approaches handling virtual method calls points analysis 
approach computes set methods virtual method call algorithms class hierarchy analysis cha rapid type analysis rta 
approach simple requires minor modification points analysis 
second approach starts analysis main discovers analysis fly targets virtual method call reached main class initialization methods 
approach may expensive may compute precise information approach 
second approach points analysis computes variable set virtual method calls invoke methods ease explanation assume program formatted way virtual method calls invoked variables 
similar approaches resolve indirect calls function pointers points analysis programs 
class int public new int public void set int public static void main string av new new set set program steensgaard andersen java example points graphs :10.1.1.109.6502
analysis new instance type added points set set instances may referenced instance type set algorithm virtual call invokes methods algorithm discovers new target call binds actual parameters call formal parameters new target 
new target processed previously algorithm processes statement new target 
fields 
discuss approaches handling fields points analysis 
approach treats fields instances approach similar fields structures computes points set instance field :10.1.1.32.1100
method class analysis treats formal parameter 
field accessed analysis treats access access method call method call treated analysis binds pass receiver instance 
figures depict points graphs constructed program steensgaard andersen algorithms respectively approach 
graphs show steensgaard algorithm may compute imprecise information instances pointed method forced represented node 
propose second approach computes pointsto set class field 
statement field instance accessed expression declared class algorithm treats instance field access class field access drops simplification improve ciency algorithms 
simplification lets algorithms avoid computing points set analysis points set needed computation points sets variables 
points set needed method computation points sets variables cases right side assignment actual parameter calls method direct method call call format points set needed points analysis uses similar approach handle field accesses 
points set method computed analysis collecting receiver instances call discover targets direct method call fly 
cases points set needed 
call points set needed points analysis ignores considers bindings actuals formals 
analysis treats formal parameter binds 
cases avoiding computation points sets steensgaard algorithm second approach may cient precise approach 
example graph computed steensgaard algorithm second approach smaller contains precise information graph 
andersen algorithm second approach may cient precise approach 
loss precision caused treating field di erent instances way 
fields instance modified methods instance information computed andersen algorithm second approach equivalent computed approach 
example points graph computed andersen algorithm second approach contains information equivalent information contained graph 
java programs encapsulation strongly encouraged expect see little di erence precision information computed andersen algorithm approach 
collections maps 
arrays java program frequently uses collection vector map hashtable store retrieve data 
methods collection map may provided native code di cult analyze methods 
methods provided byte code analyzing methods adds extra cost analysis causes contextinsensitive points analysis precise 
example data stored vector instance may returned invoking elementat vector instance data referenced return statement elementat shared instances vector 
solve problem user provided models 
model instructs algorithm conservative assumption processing calls methods collection instance map instance 
model describes di erent slots data stored instance 
example hash table instance keys stored key slot values stored value slot 
model describes set operations store data retrieve data slots 
models new instance collection map instantiated slots associated instance created 
algorithm processes method call instance algorithm determines user provided information set operations simulate actions method 
algorithm processes operations slots associated instance 
slots di erent instances separated algorithm distinguish data stored di erent instances 
example shows description model collection 
description similar definition class 
slot operations model consists instances iterator array sequence initialization assignments described init 
iterator represent instance re slot elements instance iterator collection model collection instance array object init iterator elements elements array elements operation store source elements source operation dest operation dest operation retrieve dest dest elements operation source elements source elements dest iterator dest array add store elements retrieve elementat elements model collection 
turned method call iterator algorithm treats iterator collection 
array represent array instance returned method call 
initialization assignments copy data slot elements iterator elements array 
algorithm processes instantiation statement creates collection instance algorithm creates instance iterator instance array 
algorithm processes initialization assignments 
shows steps taken algorithm process statement add stores instance referenced vector referenced algorithm uses store operation simulate action add method replaces store operation body 
add treated assignment elements shows steps taken algorithm process statement elementat retrieves instance vector referenced algorithm uses retrieve operation simulate action elementat replaces retrieve operation body 
algorithm treats elementat assignment elements 
examples show instances stored di erent vector instances distinguished 
casting 
andersen algorithm java benefit fact casting checked runtime 
assignment instances type subtype returned casting 
andersen algorithm propagates instances type subtype points set points set 
approach improves precision ciency algorithm 
exceptions 
propose approach uses assignments simulate passing exception instances throw statements corresponding catch statements 
approach utilizes control flow information provided sinha harrold algorithm 
algorithm provides information possible types raised ex fly cha rta cha rta fly cha cha rta fly rta fly fly rta fly cha cha rta rta rta fly cha cha rta rta fly precision worst case time precision subsumption intuitive comparison algorithms 
ception throw information control flows exception specific type raised 
information create assignments assign exception throw exception catch 
type filter associated assignment specify types exceptions passed throw corresponding catch 

empirical studies implemented steensgaard andersen algorithms java architecture bytecode analysis analyzes control flow exceptions simulates changes operand stack builds syntax tree representation java program byte code 
implementation points analysis simulates effects method calls instances classes java lang java util java io avoids analyzing byte code classes 
implementation carefully handles reflection user provided information 
implementation points analysis java instantiated algorithms depending approaches handling fields virtual method calls 
shows algorithms nodes precision subsumption relations edges 
letter algorithm name indicates algorithm steensgaard andersen 
second letter name indicates algorithm computes information class fields instance fields 
letters name indicate algorithm handles virtual method calls cha rta discovering targets fly fly 
target edge precise source edge 
note algorithms comparable algorithms fly comparable di erence treating 
conducted empirical studies set java programs evaluate performance algorithms 
studies collected execution traces running subject program typical input 
traces gathered profiler implemented java virtual machine profiler interface jvmpi 
table shows sizes subjects classes libraries excluded 
data collected sun ultra mb physical memory 
space limitation www cc gatech edu aristotle georgia tech 
java sun com products jdk docs guide jvmpi sun microsystems 
steens ii andersen cha rta cha rta fly rta fly antlr jar javacup javac 


jess 

jlex kawa 

raja sablecc 

toba table time seconds steensgaard ii time seconds andersen 
shows results algorithms underlined 
ciency 
study compared time required run algorithms 
table shows results 
time table excludes time required build syntax tree bytecode 
see trends summarize results 
number associated edge shows geometric mean ratio time required time required note compute numbers edge fly rta edge fly rta exclude antlr outlier discovering virtual call targets fly fly fly analyze fewer methods run times faster rta rta antlr di erence running time subject programs smaller 
results show biggest ciency gap appears algorithms compute points sets class fields algorithms compute points sets instance fields times javac 
surprising compute points sets 
results show rta fly algorithms ciently compute points information large programs practice 
precision 
study compared precision algorithms 
compared worst case approximation variable type may refer instance created program type subtype algorithm measured ic average number receiver instances method call average number method calls invoked instance computed information provided measurements reflect impact points information subsequent data flow analyses larger number precise subsequent dataflow analysis 
compare results di erent algorithms compute ic consider virtual method calls code analyzed algorithms compute consider instances created statements code analyzed algorithms 
table ii iii iv shows results 
table pair numbers algorithm shows ic respectively 
summarizes results 
pair num subject size ii worst iii steens iv andersen program nodes cls case cha rta cha rta fly rta fly antlr jar javacup javac 







jess 








jlex kawa 

raja sablecc toba statistics may di er reported works subject interfaces classes implementing collections maps sablecc excluded di erent versions 
table subject size ii worst case precision iii precision steensgaard iv precision andersen 
bers associated edge geometric mean ratio ic ic second geometric mean ratio 
study shows steensgaard algorithm computes significantly precise information worst case approximation 
result agrees comparison worst case approximation steensgaard algorithm 
result quite di erent reported precision steensgaard close worst case approximation :10.1.1.32.1100
precision measured di erently major factor may contribute di erence implementation steensgaard computes precise information implementation avoids computing points sets handles collections maps precisely 
study shows andersen algorithm may compute significantly precise information steensgaard 
expected significant di erence algorithms compute information class fields algorithms compute information instance fields 
result suggests high cost computing information instance fields andersen algorithm worthwhile 
virtual call resolution 
study compared ectiveness resolving virtual method calls points information provided algorithms considered 
virtual method call obtain set invocable methods steps 
collect types instances points set search methods signature types collect step 
methods invocable methods method call 
virtual method call resolved invocable method 
set virtual method calls consider rx set virtual calls resolved approach cha rta algorithms 
algorithm measured percentage virtual calls solved cha ra 
compared results computed rta 
compare di erent algorithms considered method calls appear code analyzed algorithms 
table shows results 
pair numbers number computed counting number results dramatic types unsafe virtual method call statements code second number computed counting number virtual call invocations trace generated profiler 
table shows programs resolving virtual method calls points information significantly precise resolving virtual method calls cha rta 
consistent findings 
antlr jar absolute di erence results computed various points analysis algorithms insignificant 
suggests steensgaard algorithm virtual call resolution 
note toba call statement reads bytes stream executed times resolving call greatly increases percentage resolved virtual method invocations 
escape analysis 
study compared ectiveness computing escape information points information provided algorithms 
measured percentage instances local method instance local method instantiated returned callers 
compare di erent algorithms considered instances explicitly created new statements code analyzed algorithms 
right side table shows results study 
pair numbers computed examining new statements create local instances second computed examining instances created statements runtime 
table shows pointsto information computed algorithms ectively support escape analysis 
table shows programs raja andersen algorithm computes significantly better results steensgaard 
di erent versions andersen algorithm differences results insignificant 
suggests version andersen algorithm escape analysis 
summary 
studies suggest rta fly perform best evaluated algorithms cient precise rta fly compute precise information steensgaard algorithm 
rta fly handle discusses details computing escape information points information 
resolved resolved points analysis cha method local instances cha rta cha rta cha rta fly cha rta cha rta fly 




antlr 



jar javacup javac jess jlex kawa 




raja sablecc toba data rta fly shown data rta fly 
dynamic data unavailable javac profiler ran memory 
table left percentage resolved virtual method calls 
right percentage method local instances 
level arrays collections maps multi level algorithms may implemented losing precision efficient approach similar 
evaluate optimization 
lack di erence information computed computed interpreted ways encapsulation java programs helps simply improve andersen algorithm encapsulation lowers precision andersen algorithm accesses field di erent instances distinguished 
investigate impact encapsulation points analyses 

related rountev extend andersen algorithm java annotated inclusion constraints algorithm compute information instance fields discover targets virtual calls fly 
algorithm uses stubs native methods analyzes methods application library 
ciency algorithm impact call graph construction virtual call resolution escape analysis evaluated 
snelting extend steensgaard andersen algorithms java framework :10.1.1.32.1100
framework computes information instance fields uses condition constraints discover targets virtual calls fly 
propose conservative approach approximate ect unanalyzed code 
approach puts instances passed unanalyzed code set 
statement analyzed code calls method unanalyzed code approach assumes instances set appropriate type may returned 
method analyzed code called unanalyzed code approach assumes instances set appropriate types may passed formals 
report empirical studies evaluate ciency precision impact virtual call resolution kaba client analysis 
di ers existing works aspects 
consider alternatives handle fields virtual calls 
empirical evaluation alternatives reveals simplifying field handling andersen algorithm significantly improves ciency losing precision 
reveals finding targets rta finding target fly 
second propose precise way handle collections maps 
third propose approach avoids possible computing points set 
approach may help steensgaard algorithm compute precise information snelting approach 
various flow insensitive type inference algorithms developed determine types objects may pointed pointer object oriented program 
type information resolving virtual method calls 
type information inferred points information ers ective approaches compute safe type information java programs 
addition pointer analysis distinguishes instances class information provided pointer analysis may compute precise type information type inference algorithm 
escape analysis algorithms java developed 
ers alternative computing escape information 
empirical studies show alternative may cient ective 

discussed various approaches extending flow insensitive context insensitive pointer analysis algorithms steensgaard andersen handle important features java programs 
set empirical studies evaluate ectiveness approaches 
studies show careful handling various java features steensgaard algorithm andersen algorithm ciently compute precise information worst case assumption 
studies show object oriented programming style may significantly ect performance points analysis 
include extensive experimentation algorithms extensions 
results empirical studies previous experience developing cient points analysis algorithms believe precision ciency algorithms java programs improved 
involve development new algorithms computing points information java programs 
acknowledgments supported georgia tech boeing aerospace nsf awards ccr ccr eia state georgia mission 
michael hind ibm anonymous reviewers helpful suggestions improved presentation 

agesen 
cartesian product algorithm 
proceedings th european conference object oriented programming ecoop pages aug 
andersen :10.1.1.109.6502
program analysis specialization programming language 
technical report university copenhagen 
bacon sweeney 
fast static analysis virtual function calls 
acm sigplan notices oct 
blanchet 
escape analysis object oriented languages 
application java 
oopsla acm conference object oriented systems languages applications pages oct 
holzle 
removing unnecessary synchronization java 
oopsla acm conference objectoriented systems languages applications pages oct 

choi gupta serrano sreedhar 
escape analysis java 
oopsla acm conference object oriented systems languages applications pages oct 
das 
unification pointer analysis directional assignments 
proceedings conference programming language design implementation june 
dean grove chambers 
optimizations object oriented programs static class analysis 
european conference object oriented programming pages 
defouw grove chambers 
fast interprocedural class analysis 
th acm symposium principles programming languages pages jan 
emami ghiya hendren 
context sensitive interprocedural points analysis presence function pointers 
proceedings conference programming language design implementation pages june 
hind burke carini 
choi 
interprocedural pointer alias analysis 
acm transactions programming languages systems july 
hind 
pointer analysis 
issta pages aug 
liang harrold 
cient points analysis program analysis 
th esec fse pages sept 
palsberg schwartzbach 
object oriented type inference 
proceedings conference object oriented programming systems languages applications oopsla nov 
rountev chandra 
line variable substitution scaling points analysis 
proceedings conference programming language design implementation pages june 
rountev milanova ryder 
points analysis java annotated constraints 
conference object oriented programming systems languages applications appear oct 
sinha harrold 
analysis testing programs exception handling constructs 
ieee trans 
soft 
eng sept 
steensgaard :10.1.1.11.3368
points analysis linear time 
conference record rd acm symposium principles programming languages pages jan 
snelting :10.1.1.32.1100
points java general framework empirical comparison 
technical report university passau nov 
sundaresan hendren valle rai lam gagnon godin 
practical virtual method call resolution java 
conference object oriented programming systems languages applications pages oct 
tip palsberg 
scalable propagation call graph construction algorithms 
conference objectoriented programming systems languages applications pages oct 
whaley rinard 
compositional pointer escape analysis java programs 
oopsla acm conference object oriented systems languages applications pages oct 
