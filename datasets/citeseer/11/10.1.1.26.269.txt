flow analysis games nets extended chris hankin nagarajan imperial college science technology medicine london sw bz presents graph formulation control flow analysis results game semantics proof nets 
control flow analysis aims give conservative prediction flow control program 
analysis terms represented proof nets controlflow analysis amounts analysis computation paths proof net 
focus context free analysis known literature cfa develop algorithm analysis 
algorithm cfa performs dynamic transitive closure graph judgement associated proof net 
correctness algorithm relies correspondence proof nets certain kinds strategies game semantics 

large part research program analysis devoted discovering intensional properties programs 
intensional properties extensional properties depend just input output functional behaviour programs 
discovering intensional properties relies representation flow control data program 
languages contain features higher order functions objects concurrency flow control may impossible detect simple inspection program 
implies need form control flow analysis 
control flow analysis higher order functional language computes approximation set abstractions sub term program may evaluate program execution 
intuitively control said flow sub term abstraction evaluates 
early contribution control flow analysis jones contact author imperial college dept computer science london sw bz telephone fax mail doc ic ac uk flow analysis lambda expressions framework machines formulate analysis 
subsequent explored various aspects controlflow analysis 
approaches literature specify control flow analysis solution set equations derived syntax program 
soundness analysis demonstrated respect operational semantics derived set equations describes sub term set abstractions evaluates operational semantics program 
example soundness result proof constraint formulation control flow analysis 
relates various flavours control flow analyses structural operational semantics sos soundness results analysis employs sophisticated inductive proof techniques 
reported game semantics provide framework control flow dataflow analysis 
feature game semantic approach control flow analysis specified semantics directed manner analysis specified directly terms semantics syntax program 
opens possibility exploiting rich structure game semantics specifying analyses 
instance possible factorization theorems game semantics extend program analyses handle new language features modular way 
approach report game semantics uses proof nets representations terms 
contrast earlier analyses game semantics bohm tree representation terms 
result analyses rely pre processing program special form analysing 
proof nets represent terms removes need preprocessing programs 
proof nets play important role analysis specified 
proof net encoding terms gives rise structures isomorphic traditional graph representations terms 
linear head reduction terms expressed terms linear head cut elimination proof nets 
proof nets games intimately related ways share common origin linear logic 
proof nets seen encoding strategies game semantics providing bridge syntax semantics 
specify control flow analysis directly terms game semantics 
interpretation interacting moves game semantics linear head reduction steps terms 
soundness proof analysis relies close connection game semantics hand syntax linear head reduction terms hand 
soundness proof factored stages establishing connection game semantics linear head reduction demonstrating soundness analysis respect game semantics 
second stage correctness proof specific analysis connection game semantics linear head reduction general semantic property games expected applicable number control flow analyses 
develop algorithm control flow analysis game semantics directed specification 
algorithm performs dynamic transitive closure graph 
graph structure extracted proof net representation program edges graph labelled cost resource components obtained proof net representation 
see graph structure algorithm fact representation type program 
sense related type approaches 
approaches perform explicit implicit expansion type structure program simple transitive closure procedure obtain analysis 
algorithm require expansion step hand requires dynamic transitive closure procedure 
worst case complexity algorithm control flow analysis line state art 
fact refine complexity algorithm size partial type information required algorithm bounded comparison algorithm exhibits better quadratic asymptotic complexity assumption size type information linear size untyped term 
algorithm utilizes type information similar manner making assumptions size type information 
significance contributions linearized version head reduction analysis framework games extended proof nets cope arbitrary typed terms previous restricted preprocessed terms having special form 
game semantic framework gives rise novel algorithm control flow analysis 
algorithm operates type structure program contrast approaches operate syntactic structure program 
worst case complexity algorithm term line algorithms controlflow analysis 
correctness control flow analysis uses standard semantic properties games 
need instrument semantics add control flow information 
soundness proof factored stages specific analysis 
conceivable connection game semantics linear head reduction basis number control flow analyses 
sake simplicity consider terms simply typed calculus framework algorithm equally applicable pcf need changed handle conditionals recursion rest organised follows 
section introduces basic ideas game semantics 
section presents proof nets syntactic representation terms 
section outlines correspondence proof nets games linear head reduction 
section describes control flow analysis performed framework 
section presents algorithm analysis 
section contains concluding remarks 

game semantics game semantics relatively new field semantics semantic models programming languages built player games 
game semantics exhibits compositional nature standard denotational semantics time capturing intensional nature operational semantics 
achieved game semantics denoting programs strategies express potential computation 
actual computation performed interacting strategy representing environment steps interaction intuitively represent steps operational semantics 
section give brief overview concepts game semantics refer reader literature complete game semantics 
game semantic models person games player opponent 
person takes turns making moves interpreted steps computation 
roughly speaking models behaviour program models environment program 
person types moves questions answers 
roughly speaking question interpreted calling procedure answer interpreted returning procedure value 
causality relation called enabling moves games example questions answered asked 
point game position game refers sequence moves game point 
set moves particular game enabling referred arena particular game played 
program denotation program game semantics strategy play game 
arena game played follows structure type program modelled 
strategy set rules followed moves point game 
executing program represented player strategy program strategy represents context program 
represented game semantics composing player strategies program context respectively 
composition operation sets interaction strategies moves strategy interact moves vice versa 
basically strategy program plays moves strategy environment plays moves 
similar parallel composition processes example ccs 
intuitively program request context playing move arena 
move interacts move context arena playing interacting move passes control context strategy 
similarly response context strategy returned program strategy control 
game semantics defines notion player view view position game subsequence position determine response strategy point game 
sense view relevant history position 
strategies fully determined view point independent interest known innocent strategies represented function view move 
innocent strategies constructing fully models functional languages 

proof nets section introduce proof nets representations terms 
proof nets support notion computation path programs 
sense proof nets analogous higher order flow graphs generalized flow charts 
proof nets graphical proof representations 
proposed technique performing multi natural deduction style proofs linear logic 
consider proof net representations intuitionistic propositional logic 
proof nets considered representations terms calculus curry howard correspondence 
fact proof net representations terms exhibit isomorphism conventional graph representation terms 
proof net representation term type term obtained judgement proved proof net 
draw proof nets forest structures 
associate positive negative polarity nodes forest 
nodes positive polarity drawn nodes negative polarity drawn 
axiom links proof net represented connections dotted lines nodes opposite polarities forest 
cut links represented connections solid lines roots trees forest structure having opposite polarities 
proof nets consider unique root node positive polarity connected cut link corresponds root term represented proof net 
refer node 
refer reader literature formal definition proof nets just give translation terms context proof nets 
proof nets described simplified versions general proof nets designed calculus mind 
definition define translation simply typed terms context proof nets 
translation induction structure sequent calculus derivation typed term 
traditional presentations explicit constructions contraction weakening note essentially linear logic origins proof nets 
note nodes proof nets really sets nodes 
adopt convention drawing single node cases contraction weakening simplify diagrams 
variable define type proof net axiom link proof net terminology 
axiom links proof nets represent axioms sequent calculus presentation proof 
abstraction define proof net making node corresponding variable immediate successor root node 

application 
define 
mn nn proof net qn 

contraction contraction variables proof net nodes corresponding combined single set representing 


weakening define occur proof net represented empty set 


lemma simply typed term translation term results proof net proof net isomorphic traditional graph representation term 
proof induction structure term 
isomorphism traditional graph representation terms maps sequences abstraction nodes nodes sequence application nodes nodes 
rest refer terms proof nets interchangeably light isomorphism 
proof net representation term type term obtained judgement proved proof net 
judgement obtained simply considering forest structure proof net forgetting contractions weakenings occurring proof net 
resulting forest structure represents intuitionistic sequent proved proof net unique tree polarity root represents unique intuitionistic sequent 
note natural map call nodes proof net nodes judgement 
judgement proved proof net type term represented proof net seen manifestation curry howard correspondence 
note judgement obtained proof net contains pairs cut formulae 
including pairs cut formulae type term obtain notion intensional type term 
intuitively intensional type term captures internal structure term 
example construct proof net representation term fx dotted lines represent axiom links dashed box represents contraction proof net 
nodes nodes labelled sub terms abstracted variables respectively represent 
give intensional type consisting judgement proved proof net pairs cut formulae 
node judgement represents propositional constant note forest structure judgement represents sequent cut superscripts correspond labelling forest structure judgement 
isomorphism proof nets terms gives rise correspondence nodes proof net pieces syntax term 
node represents occurrence variable node proof net represents sub term 
proof net representation term define reduction strategy terms linear 
linear head cut elimination proof nets 
linear head reduction follows normalizing strategy head reduction substitutes head occurrence head variable hyper lazy evaluation strategy 
linear head reduction simple characterisation terms proof nets 
linearisation step separates occurrence occurrences cut elimination step performs computation substitution 
interpret cut links proof nets encoding substitutions linearisation step interpreted xm 



xm 



cut elimination step interpreted xm 
xm 

case linear head reduction said visit sequence nodes proof net corresponding variable occurrence node term node 
linear head reduction procedure shown attributes machine example substitution performed occurrences variables occurrences linearisation step 
sense reduction step described similar stack free krivine machine 

proof nets games view proof nets encodings innocent strategies 
moves game nodes proof net modulo mapping proof net 
moves nodes moves nodes proof net 
maps nodes proof net nodes judgement consider judgement arena game 
note notion arena different literature includes specification interacting moves game interacting moves arena specified cut formulae judgement 
nodes moves judgement arena interact dual nodes cut cut formula 
correspondence proof nets calculus sec 
moves correspond occurrences variables moves correspond sub terms 
construct strategy corresponding game semantic denotation term essentially tracing paths proof net 
lemma strategy construction proof net construct strategy judgement proof net considered arena 
construction sound respect game semantics 
proof induction length positions strategy theorem 
light result terms arena judgement interchangeable similarly strategy proof net 
game semantics natural notion execution semantics 
start game initial move 
strategy plays move response 
move may interact move arena plays move 
followed strategy response move move played interact move 
trace produced executing strategy form represent move represent move represents interaction move 
position constructed executing strategy exhibits close connection reduction terms 
proposition games linear head reduction strategy constructed proof net sequence nodes proof net visited execution sequence nodes visited linear head reduction cf 
sec 

proof theorem 
pair interacting moves execution strategy corresponds single step linear 
terms syntax interacting pair moves execution strategy interpreted substitution sub term occurrence variable 
interpretation execution games connection linear head reduction forms basis control flow analysis functional language game semantics 

control flow analysis games control flow analysis cfa generic term range analyses investigating dynamics executing program 
control flow mean interested flow data program interested control flows function execution program 
number characterisations control flow higher order functional languages 
follow approach control flow approach known closure analysis approximates set abstractions bound variable 
execution trace game semantics perform control flow analysis 
correspondence games proof nets terms occurrence move trace corresponds occurrence variable occurrence move trace corresponds sub term program 
seen interaction move corresponds substituting sub term move occurrence variable move 
cfa analysis essentially context free analysis differentiate occurrences variables 
framework game semantics ignore differences different occurrence moves 
variable term corresponds move say game semantics term 
cfa variable formalised follows capture set terms corresponding occurrences moves interact occurrence move execution trace game semantics 

algorithm closure analysis cfa analysis computes mapping cfa variables set abstractions term get substituted variable 
note particular range cfa contains abstraction sub terms 
idea analysis quite simple 
step translate term analysed proof net representation 
obtain judgement proved proof net forest structure proof net cf 
sec 

compute map proof net nodes judgement 
mapping basically gives move arena judgement corresponds variable sub term 
variable analysis computes move corresponding variable 
analysis requires computation move interacts 
interaction function named easily computed cut formulae forest structure judgement move move interacting dual node cut link forest structure judgement 
control flow analysis returns set sub terms mapped interacting move cfa example consider analysis term fx referring proof net representation 

labelled nodes judgement 
variable say 
intensional type see conclude cfa emphasised crux analysis computation interaction function judgement proof net 
actual term mainly compute type assignment inverse required read back analysis 
computing relation effectively performs task closing rules conditional constraints cfa performs computation type structure judgement term proof net 
general procedure sufficient compute cfa 
variable higher type node judgement 
general sub term may suitable form abstraction may application term higher order type 
case need perform judgement proved proof net referred intensional type term represented proof net cf 
sec 

step transitive closure basically traversing computation paths obtain set abstraction sub terms evaluate 
transitive closure may require new computation paths added corresponding closing rules represented dynamic component transitive closure 
consider case application sub term 
general term corresponding form ym mm node proof net corresponding translation terms proof nets def 
connected axiom link proof net 
move played execution trace strategy play move strategy play move interacting move situation represented sub term corresponding node proof net general form yn interpretation interacting moves yn substituted head occurrence resulting term reduction abstraction form yn conclude variable bound abstraction 
perform steps starting node reach abstraction 
procedure effectively procedure follow computation paths 
procedure rephrased graph 
nodes graph nodes judgement edges graph projections judgement structure computation paths proof net 
example edge node node indicating closure body evaluates closure body need capture information concerning number abstractions applications term 
done associating cost resource edge 
edge cost edge number abstractions proof net node resource edge number applications node proof net corresponding head variable 
example edge similar procedure carried edges nodes judgement 
intuitively cost resource information required identify subterms interest considering ary abstractions applications cost resource indicate sub term containing cost number abstractions resource number applications 
effectively cost resource cr edges emulate labels identify sub terms 
compose cr edges give edge transitive closure performed definition composition 
definition cr edges operation composition bear remarkable resemblance ksl algorithm cost resource correspond components respectively composition operation simplified version operation ksl triples 
edge conclude computation path particular conclude closure body may compute closure body cut cut yn yn undefined 
essentially read back analysis 
variable application sub term need compute zero cost paths obtain abstractions required analysis mentioned earlier new cr edges computed transitive closure may require additional edges added dynamically 
dynamically computed edges correspond performing expansion term 
consider axiom link nodes type root trees type expanded infer axiom links nodes corresponds expansion term ye ye type xn ye xn inferred axiom links dynamically give rise cr edges 
cr edge suppose mth node immediately diagram add edge nodes th node immediately set cost resource edge perform cfa follows encode terms proof nets 
compute judgement intensional type proof net mappings compute interaction relation 
project axiom links proof net intensional type cr edges 
perform dynamic transitive closure dt standard list algorithm 
read back analysis 
roughly corresponds function cfa cut dt dt computes cr edges node performing dynamic transitive closure 
operation considers nodes connected zero cost edges cut operation removes number leading 
theorem soundness analysis algorithm performing cfa analysis sound respect linear head reduction 
proof theorem essentially follows fact dynamic transitive closure follows paths specified game semantics step dynamic transitive closure sound respect game semantics theorem 
note soundness proof captures soundness algorithm respect game semantics 
soundness respect linear head reduction follows connection game semantics linear head reduction thm 
general semantic property game semantics 

proof net representation example illustrate algorithm term 
note term fully expanded variable higher order type 
similarly fig 
gives proof net representation intensional type term 
cr edges obtained projecting axiom links proof net performing dynamic transitive closure edges gives rise edges computing function dt variables gives mapping 


performing cut zero cost reachable nodes sets obtain analysis 


complexity algorithm cfa computed dynamic transitive closure intensional type judgement structure term 
complexity analysis size term 
intuitively algorithm considers number edges step dynamic transitive closure performs amount comparable similar results literature 
algorithm related type algorithms developed 
approaches perform explicit implicit expansion program simple transitive closure procedure obtain analysis 
algorithm require expansion step hand requires dynamic transitive closure procedure 
result tradeoff algorithm pleasant properties algorithms 
example possible obtain control flow information individual variables independently rest analysis result performing dynamic transitive closure opposed simple transitive closure 
hand algorithm assumption size type linear size untyped term 
algorithm requires partial type information size partial type information bounded size untyped term 
runtime complexity algorithm size program size partial intensional type required algorithm bounded worst case 
line state art cfa algorithms exhibit complexity 
compared type cfa algorithms exhibit quadratic complexity algorithm assumption size type annotated term linear size untyped term interpretation constraints algorithm cfa close relation expected constraint formulations analysis 
cr edges considered algorithm interpreted inclusion constraint term 
edge nodes interpreted constraint cut cut obvious formulation cr edges algorithm shown number edges considered algorithm bounded 
general size type annotated term arbitrarily larger size untyped term edge nodes interpreted constraint take take function take defined take xm mn xm undefined 

technique performing controlflow analysis functional language 
analysis game semantic model language 
algorithm analysis syntactic representation programs 
algorithm state art performance proof correctness essentially follows game semantic model 
focussed simply typed calculus techniques easily applied richer language pcf containing base type constants conditionals recursion model semantic model pcf 
specification analysis need changed accommodate pcf 
proof net representation terms extended include pcf constructs particular obtain isomorphism graph proof net representations pcf terms 
proof net representation pcf terms include special nodes constants special form axiom link conditionals looping cut link represent recursion 
point view analysis algorithm graphs exactly graphs simply typed terms minimal change required algorithm deal pcf terms 
necessity pcf 
game semantic models programming languages exhibit elegant factorisation results allow language features added modular fashion 
expect able semantic machinery games extend analysis languages additional features side effects continuations non determinism fact specification analysis expected similar ones challenging issue obtaining representations analogous proof nets developing efficient algorithms 
papers archive 
dcs qmw 
ac uk 
abramsky honda mccusker 
fully game semantics general 
lics 
abramsky jagadeesan malacaria 
full abstraction pcf extended 
tacs pages 
abramsky mccusker 
linearity sharing state fully game semantics idealized algol active expressions 
hearn tennent editors algol languages volume 
birkhauser 
acm sigplan 
proceedings acm sigplan conference programming language design implementation pldi june 
barendregt kennaway klop sleep 
needed reduction spine strategies lambda calculus 
information computation 
danos 
une application de la logique etude des processus de normalisation du lambda calcul 
phd thesis universite paris vii 
danos herbelin regnier 
game semantics machines 
lics 
de paiva ritter editors 
proceedings esslli workshop logical machines technical report csr 
university birmingham 
deutsch 
de langage de programmation representations de relations sur des langages avec application la determination de de de 
phd thesis universite paris vi 
editors 
automata languages programming eighth colloquium icalp number lecture notes computer science acre israel july 
springer verlag 

girard 
linear logic 
theoretical computer science 

girard okada scedrov editors 
special issue linear logic tokyo meeting volume electronic notes theoretical computer science 
elsevier science 
heintze mcallester 
linear time control flow analysis 
pldi pages 
heintze mcallester 
cubic bottleneck subtyping flow analysis 
lics 
hyland 
ong 
full abstraction pcf parts ii iii 
available 
jones 
flow analysis lambda expressions 
pages 
kai editor 
compiler construction th international conference cc volume lecture notes computer science lisbon portugal 
springer 
lamarche 
proof nets intuitionistic linear logic essential nets 
available 
lamarche 
proof nets games extended 
entcs 
proceedings eleventh annual ieee symposium logic computer science lics 
proceedings twelfth annual ieee symposium logic computer science lics warsaw poland 
proceedings thirteenth ieee symposium logic computer science lics 
proceedings fourteenth annual ieee symposium logic computer science lics 
mackie 
geometry implementation 
phd thesis university london 
malacaria hankin 
generalised flowcharts games extended 
larsen winskel editors th international colloquium icalp aalborg denmark july 
malacaria hankin 
new approach control flow analysis 
kai 
malacaria hankin 
non deterministic games program analysis application security 
lics 

head linear reduction pure proof net extraction 
theoretical computer science volume pages 
mccusker 
games full abstraction functional metalanguage recursive types 
distinguished dissertations 
springer verlag 
milner 
communication concurrency 
international series computer science 
prentice hall 
mossin 
flow analysis typed higher order programs 
phd thesis diku university copenhagen 
mossin 
higher order value flow graphs 
proceedings th international symposium programming languages implementation logics programming plilp 
nielson nielson 
infinitary control flow analysis collecting semantics closure analysis 
popl 
nielson nielson hankin 
principles program analysis 
springer verlag 
palsberg 
global program analysis constraint form 
tison pages 
conference record popl th acm symposium principles programming languages paris 

machines games 
de paiva ritter 

program analysis game semantics 
phd thesis university london 
sestoft 
analysis efficient implementation functional programs 
phd thesis diku department computer science university copenhagen 
shivers 
control flow analysis higher order languages taming lambda 
phd thesis school computer science carnegie mellon university 
proceedings theoretical aspects computer science tacs 
springer verlag 
tison editor 
proceedings th international colloquium trees algebra programming caap volume lecture notes computer science 
springer verlag 
wadsworth 
semantics pragmatics lambdacalculus 
phd thesis oxford university 

