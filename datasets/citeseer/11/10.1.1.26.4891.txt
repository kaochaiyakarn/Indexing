specifying implementing visual process modeling languages diagen mark minas berthold ho mann lehrstuhl fr programmiersprachen universitt erlangen 
erlangen germany informatik universitt bremen postfach bremen germany describes diagram language speci ed graphs graph grammars transformation rules diagram editor generator diagen generates diagram editor speci cation 
diagen applied practically visual language visual process modeling languages particular 
demonstrated editor animator statecharts 
key words visual language diagram editor diagram animation graph grammar graph transformation visual languages popular modeling software general uml process modeling particular statecharts instance accepted modeling reactive systems part uml :10.1.1.20.461
petri nets visual notation process modeling lend proving deadlock freedom model checking 
far easy implement tools visual languages scratch statecharts petri nets exception respect 
shown statecharts petri nets modelled graph transformation systems 
show graph transformation systems useful just conceptual meta modeling graphs graph grammars graph transformations may de ne visual process modeling languages forms basis generating tools implement languages 
demonstrated specifying support esprit working group gratefully acknowledged 
email addresses minas informatik uni erlangen de mark minas hof tzi de berthold ho mann 
preprint submitted elsevier preprint january fig 

snapshot statechart editor animator implementing statechart editing animation tool diagram editor generator diagen 
fig 
shows snapshot tool 
window consists canvas statechart drawn control panel displaying status chart menu entries operations 
fig 
simpler statechart fig 
show main features statecharts statechart hierarchical nite state machine state state may contain statechart 
state contain statechart called basic 
called states consist compartments separated dashed lines 
compartments contains statechart active simultaneously state active 
initial states drawn black bullets 
transitions states annotations indicating consume input events signal output events transitions may cross hierarchy borders fig 
shows 
rest organized follows section brie introduces diagram editor generator diagen 
section surveys hypergraphs hypergraph transformation systems diagen online version statechart editing animation tool tried www cs de diagen statecharts 
conditional transitions form implemented 
fig 

sample statechart cross hierarchy transitions 
diagen editor framework generator program specification code generated program code program specific editor editor developer diagram editor fig 

generating diagram editors diagen 
section summarizes speci cation statechart editing tool major steps diagram analysis 
section describes editor extended animation models semantics statecharts 
section reports related section concludes 
diagen diagen provides environment rapid development diagram editors 
section outlines environment creating diagram editor tailored speci diagram language 
diagen create editors wide variety diagram languages nite automata control ow diagrams shneiderman diagrams message sequence charts visual expression diagrams sequential function charts ladder diagrams 
aware diagram language speci ed processed diagen 
diagen completely implemented java consists editor framework program generator 
fig 
illustrates structure diagen developing diagram editors 
diagen editor framework collection java classes provides generic functionality needed editing analyzing diagrams 
order create editor speci diagram language editor developer supplies textual speci cation syntax semantics diagram language 
additional program code written manually supplied 
may necessary visual representation special diagram components screen processing objects problem domain semantic processing editor component software system 
speci cation translated java classes program generator 
diagen free software available www cs de diagen 
generated classes editor framework manually written code implement editor speci ed diagram language 
editor stand program software component editor framework generated program code conform javabeans standard software component model java 
diagram editors developed diagen called diagen editors provide features diagen editors support free hand editing editor user arbitrarily create delete modify diagram components states transitions annotation text statecharts shelf drawing tool 
editing operation editor analyzes drawing syntax diagram language informs user syntax errors 
formed diagrams translated semantic representation statechart translated program code implements statechart speci cation 
process driven syntactic analysis editor speci program code appearing fig 

feature example 
developer diagen editor may specify compound operations syntax directed editing 
operations geared modify meaning diagram statecharts state deleted incoming outgoing transitions 
automatic layout optional feature diagen editors 
obligatory syntax directed editing operations speci ed 
automatic layout mechanism adjusts layout diagram position size components modi cation 
automatic layout assists free hand editing layout modi cation user layout mechanism updates diagram structure remains unchanged 
diagen ers constraints specifying layout mechanism declarative way programming interface plugging layout mechanisms 
sections brie survey main concepts diagen explain statecharts editor generated diagen 
hypergraphs grammars diagen editors hypergraphs internal diagram models hypergraph grammars means syntax speci cation 
section brie surveys concepts 
graph consists set labeled nodes set labeled edges 
edge visits nodes need di erent 
hypergraphs generalization directed graphs consist set labeled nodes set labeled hyperedges 
hyperedge xed number labeled determined hyperedge label 
connect hyperedge nodes visited hyperedge 
regular directed graph hypergraph hyperedge labels source target 
nodes represented black dots directed edges arrows hyperedges boxes containing hyperedge label 
thin lines represent connecting hyperedge visited nodes 
labels omitted gures cause confusion 
hypergraph grammars similar string grammars 
hypergraph grammar consists sets terminal nonterminal hyperedge labels starting hypergraph contains labeled hyperedges 
syntax described set productions form lefthand side lhs right hand side rhs hypergraphs 

jr abbreviation productions production applied host hypergraph nding subgraph replacing match obtaining hypergraph say derived written step 
grammar language de ned set labeled hypergraphs derived starting hypergraph nite number steps 
di erent types hypergraph grammars impose restrictions production lhs rhs allowed sequence derivation steps 
context free hypergraph grammars simplest ones lhs consist single labeled hyperedge appropriate number nodes 
application production removes lhs hyperedge replaces rhs 
matching node labels lhs rhs determine rhs removing lhs hyperedge 
productions fig 
context free 
context free hypergraph grammars embeddings expressive context free ones 
additionally allow embedding productions consist lhs rhs additional embedded hyperedge rhs hyperedge embedded context provided lhs applying production productions fig 

parsing algorithms detailed description grammar types :10.1.1.47.6425
diagen uses hypergraphs diagram representations hypergraph grammars specifying syntactically correct diagrams 
section describes concepts statecharts editor generated diagen 
section shows grammar productions may annotated additional application conditions restrict application parsing process path expressions fig 

pure context free hypergraph grammars describe syntax diagram language context free hypergraph grammars embeddings application conditions proven suitable means diagram syntax speci cation 
statechart editing statechart modeling tool mainly consists free hand diagram editor translates drawings hypergraph model creates syntactic structure checks syntactic correctness respect statechart syntax 
result process editor provide visual feedback editor user drawing contains errors 
editor performs task sequence steps editing operation scanning reduction parsing attribute evaluation 
steps illustrated statechart fig 

scanning step diagram components states transitions text transition annotation dashed lines divide states simultaneously active compartments attachment areas parts components allowed connect components start transition 
general simple formal description component hyperedge connects nodes represent attachment areas diagram components 
nodes hyperedges rst unconnected hypergraph 
scanner connects nodes additional edges corresponding attachment areas related speci ed way described speci cation 
result scanning step spatial relationship hypergraph diagram 
fig 
shows text assigned proximity text assigned proximity arrow arrow arrow arrow text text proximity proximity contains contains proximity assigned assigned proximity fig 

statechart fig 

transition transition transition transition annotation annotation annotation annotation nested nested fig 

statechart fig 

simple statechart shown fig 

nodes represented black dots hyperedges gray arrows relationships attachment areas rectangles diagram components connected nodes attachment areas thin lines 
unary hyperedges represent states states basic states initstate represents initial states 
transitions represented arrow hyperedges visit nodes ends arrow third represents attachment area related annotating text hyperedge text 
relation proximity indicates text positioned near arrow 
fig 
shows proximity unambiguously assign text arrows 
diagen ers special support dealing ambiguity assignment represented additional hyperedges type assigned generated scanning step reduction step discussed 
contains relation edges represent states contain states arrows attach states 
reduction step tend quite large small diagrams see fig 

order allow cient parsing reduced hypergraph model created rst 
reducer speci ed transformations identify sub hypergraphs carry information diagram build accordingly 
step similar lexical analysis step traditional compilers 
fig 
shows statechart fig 

please note similarity original diagram 
fig 
shows total number reduction rules statecharts 
rules left show hyperedges reduced state edges contain dashed line indicate state 
crossed sub hypergraph represents negative application context context occur corresponding transformation rules shall applied 
analogously nested edge produced assigned text assigned proximity assigned annotation text proximity assigned assigned annotation contains contains contains nested fig 

reduction rules statechart editor 
lanes lanes lanes transition annotation transition trans trans trans initstate initstate initstate state nested nested state state nested nested nested nested state chart nested root state nested fig 

hypergraph grammar statecharts resp 
hypergraph models 
terminal hyperedges represented shaded oval boxes nonterminal ones shown rectangles 
path expressions explained text 
state directly contains state 
rules right somewhat special create assigned hyperedges belong act memory remembering text uniquely assigned arrow 
text assigned arrow arrow positioned near text top rule unique assignment previous analysis phase indicated existing assigned edge lower rule 
parsing step syntax hypergraph models diagram language syntax language de ned hypergraph grammar 
fig 
shows context free hypergraph grammar embeddings state please note production hyperedge lhs allows arbitrary number nested states represented nested state hyperedges 
readable notation regarded shorthand recursive charts 
starting hypergraph grammar consists statechart hyperedge visit node 
please note implicit representation states mentioned paragraph reduction step parallel compartments state represented hyperedge hyperedges linked hyperedges 
task reduction step create structure 
scope 
note special arrows labelled resp 
path expressions similar progres 
necessary preventing transitions connecting states connected statecharts 
requires rst state contain vice versa requires states direct sub states super state 
similar compilers textual programming languages hypergraph parser built diagen editor creating syntactic structure diagram nding derivation sequence starting hypergraph 
parser capable identifying syntax errors visualized editor user 
attribute evaluation step nal step translation process creates semantic representation diagram kind syntax directed translation attribute grammar compilers textual programming languages terminal nonterminal hyperedges augmented attributes hypergraph grammar productions evaluation rules 
real attribute evaluation speci ed statecharts editor 
discussed attribute evaluation providing structural information statechart edited automatic layout algorithm takes care statechart diagram 
statechart animation diagen mainly designed generate editors tools handle syntax diagram language 
attribute evaluation mechanism diagen produce intermediate representation productions 
special kind production allows cient parsing discussion topic scope 
currently formed diagram parts highlighted 
missing highlighting indicates erroneous diagram parts 
diagram read tool models semantics diagram language 
diagen powerful instructions generating compound syntax oriented editing commands implement simple semantic properties diagram language 
tool shown fig 
allow edit statecharts animates behaviour 
status statechart active states highlighted thick borders external internal events occurred shown control panel left drawing canvas operations trigger animation start icon standing man initializes status chart activating top level initial states signalling external events step icon walking man performs transitions active states input events occurred consumes events deactivates source states activates target states signals output events 
operations programmed compound editing transformations apply basic graph transformation rules controlled path expressions 
simple semantic operations quite convenient 
complex semantic operations detection anomalies statecharts optimization tedious exercise 
related diagen related approaches specifying generating graphical editors 
approaches classi ed supported editing modes mentioned section diagram editors may support free hand editing syntax directed structured editing 
free hand editing allows create modify diagrams diagrams may contain errors syntax directed editing provides set editing operations transform correct diagrams correct diagrams 
user restricted operations way editing de ned operations 
tools creating free hand editors analyze diagrams directly avoid create internal model graph 
typical examples penguins 
rst utilizes positional grammars lalr parser specifying resp 
checking diagram syntax constraint multiset grammars prolog parser 
graph transformation systems popular formalism creating syntax directed editors 
tools genged allows visually specify editing operations graph transformation rules vispro uses special graph grammars syntax speci cation :10.1.1.18.6595
approaches specifying visual languages creating editors survey see diagen tool supports free hand editing syntax directed editing editor combining modes combines bene ts 
similar approach connected graph grammars realized 
integrates approaches specifying generating visual editors animation concepts 
proposed idea graph transformation rules genged tool speci cations editing operations animation steps 
approach course quite similar described 
genged editors syntax directed diagen editors free hand syntax directed 
demonstrated editor animator statecharts diagen may generate tools modeling syntax semantics visual process modeling languages speci cations hypergraphs hypergraph grammars hypergraph transformation 
see full description diagen concepts implementation editor visual process management language signal interpreted petri nets generated diagen 
aims lie close hand far diagen accepts textual editor speci cations input 
obviously diagrammatic speci cations similar fig 
easier 
come surprise intend diagen constructing editor visual notation 
designing diagram programming language visual rule object oriented 
shall allow specify complex animations diagrams smoothly integrated diagram tools 
see details 
language de ned precisely compiler instructions diagen transformation engine shall implemented 
uml documentation rational software www rational com uml 
harel statecharts visual formalism complex systems science computer programming 
harel naamad statemate semantics statecharts acm transactions software engineering methodology 

schneider describing systems processes means high level replacement ehrig ch 
pp 

ehrig parisi presicce high level replacement systems applied algebraic speci cations petri nets ehrig ch 
pp 

minas diagen generator diagram editors providing direct manipulation execution diagrams vl pp 

minas diagram editing hypergraph parser support proc 
ieee symp 
visual languages capri italy ieee computer society press pp 

minas creating semantic representations diagrams nagl pp 

kth minas generating diagram editors providing free hand editing syntax directed editing proc 
international workshop graph transformation berlin 
minas taentzer application graph transformation visual languages ehrig pp 

winter progres language environment ehrig ch 
pp 

aho sethi ullman compilers principles techniques tools addison wesley 
marriott paton constraint diagram cation proc 
ieee symp 
visual languages tokyo japan ieee computer society press 
de lucia ore ce parsing methodology implementation visual systems ieee transactions software engineering 
marriott automatic construction user interfaces constraint multiset grammars vl pp 

genged generic graphical editor visual languages algebraic graph grammars vl pp 

:10.1.1.18.6595
zhang zhang vispro visual language generation toolset vl pp 

marriott meyer wittenburg survey visual language speci cation recognition marriott meyer ch 
pp 

andries engels rekers represent visual speci cation marriott meyer ch 
pp 

rekers graph framework implementation visual environments proc 
ieee symp 
visual languages boulder colorado ieee computer society press pp 

ribeiro visual speci cation animation petri net models proc 
international workshop graph transformation berlin 
minas specifying generating diagram editors universitt erlangen germany german appear 
frey minas editing visualizing implementing signal interpreted petri nets proc 

workshop algorithmen und fr 
tr informatik universitt pp 

ho mann graph transformation rule programming diagrams nagl pp 

ho mann minas generic model diagram syntax semantics broder corradini gorrieri heckel vaccaro wells eds icalp workshops proceedings informatics carleton scienti waterloo ontario canada pp 

proc 
ieee symp 
visual languages darmstadt germany ieee computer society press 
nagl eds int 
workshop applications graph transformations industrial relevance selected papers vol 
lecture notes computer science springer 
ehrig engels 
kreowski rozenberg eds handbook graph grammars computing graph transformation 
vol 
ii applications languages tools world scienti singapore 
marriott meyer eds visual language theory springer new york 
proc 
ieee symp 
visual languages halifax canada ieee computer society press 
ehrig 
kreowski montanari rozenberg eds handbook graph grammars computing graph transformation vol 
ii concurrency parallelism distribution world scienti singapore 

