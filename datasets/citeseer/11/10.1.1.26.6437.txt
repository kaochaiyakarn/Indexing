advances digital libraries adl april santa barbara california archival intermemory andrew goldberg peter yianilos nec research institute independence way princeton nj propose self organizing archival intermemory 
noncommercial subscriber provided distributed information storage service built existing internet 
assumption continued growth memory total size subscriber participation finite time ensure archival preservation subscriber data 
information network time memories difficult erase age 
probability losing old memory random node failures vanishingly small adversary corrupt hundreds thousands nodes destroy old memory 
presents framework design intermemory considers certain aspects design greater detail 
particular aspects addressing space efficiency redundant coding discussed 
keywords archival storage distributed redundant databases electronic publishing distributed algorithms error correcting codes erasure resilient codes information dispersal algorithm digital library internet 
publication preserve transmit knowledge culture 
electronic media promises improve transmission important issue preservation addressed context emerging worldwide network computers 
print publications preserved collective agreement fund support libraries educational institutions levels government 
solution amounts distributed redundant storage scheme strengthened selforganizing nature 
essential central world library 
possible role libraries simply expand include collection purely electronic items explore possibility largely self organizing distributed world memory emerge 
thought commercial services arise offer archival data storage 
scenario publisher academic journal example pay front fee ensure journal issue available electronic form 
data widely distributed financial reserves established care 
sloan suggests simpler alternative service provided single major university institution 
approaches inconsistent essential spirit internet growth effectiveness absence strong central control commercial organization 
current state world connectivity clear prospects continued growth widely distributing archival data significant technical problem 
ensuring survives real issue books persist centuries machines lifetimes measured small numbers years 
solution envision user storage space memory period time return receives right store smaller amount data ffs 
year donation gigabyte example correspond right store megabytes 
system efficiency ff 
approach rests assumption continued system growth 
falling costs bit data storage growth number internet web users data storage supporting factors 
assumption bounded time donation storage space correspond storage space 
system efficiency factor low support trade allow sufficiently wide distribution memory item 
begins process formalizing notion intermemory presents specific proposals certain aspects design comments manifold challenges addressed stable secure intermemory goes online 
large organizations implement private resulting maintained explicit backup organization wide area network 
public intermemory motivated sense world memory 
contributions 
general development notion intermemory architecture 

idea trading finite term donation unbounded storage rights 

specific designs distributed redundant data storage 

specific approach addressing problem 
growing interest digital libraries surveyed general discussion problem preserving digital documents contained 
observe libraries serve distinct roles maintenance historical record selection appropriate materials 
web indexing approaches dispense second role allow user view world offer 
fail deal 
creating record internet represents contrast emphasis role eliminates entirely second 
concept intermemory combines archival function amounts self selecting publication process 
worthwhile noting intermemory solves preservation problem associated ephemeral nature computer storage media 
new subscribers replace old ones memories automatically copied latest medium 
anderson parallels emphasis freedom expression individual rights rationale specific technical architectural issues involved 
problem efficiently distributing file distributed system having connectivity described undirected graph considered 
node reconstruct data neighbors 
idea related diversity coding see multiple encoders decoders access fixed subset encoders 
contrast assume world network provides complete graph 
clearly related problem appear directly relevant 
topic discussion general terms design issues tradeoffs relating implementation redundant distributed databases 
similar issues discussed papers cite rabin introduced idea coding redundancy database community 
turn recognizes earlier related 
odlyzko interested perpetual storage focus preservation access research literature 
redundant array inexpensive disks raid approach distributes file system array disks directly attached host computer 
redundancy provided variations simple parity approach 
distributing storage control file system subject numerous papers including describes xfs system development 
system distributes file system cooperating workstations retaining high performance 
contrast proposed intermemory includes redundancy dispersal larger scale capable tolerating loss large portion participating nodes ii emphasis archival aspect performance iii participating processors assumed widely dispersed world internet participation ephemeral nature subject little central control iv adversarial attacks primary intermemory design concern focus implementing block level substrate file system format implemented time vi emphasis archiving write model starting point research continuing read write system 
components intermemory purposes intermemory immense distributed self organizing persistent ram containing memory blocks 
addressed bit binary address block consists words bits 
subscribers allocated fixed addresses may write 
assume write model written data modified deleted 
may read location 
achieve wide spread intermemory doubt deal high level issues intelligent addressing search functions built top simple substrate consider interpretation specific data types 
rosetta stone discovered french engineering officer august strengthening fort located west bank rosetta arm nile 
records bilingual egypt ninth year ptolemy 
concludes resolution ordering copy inscription greek shall placed large temple egypt 
papyrus time message recorded slab 
observe message dispersed locations recorded durable medium bilingual nature ensured semantic longevity approach different principle intermemory contemplate 
egypt earliest record regarded ancient ancient imagine archival preservation mind ptolemy 
modern world fortunate attempt preservation succeeded led deciphering record left thousands years earlier 
text image programs archival manner 
topics scope 
set aside important cryptographic issues ultimately addressed system honor archival promise low level enforce write permissions provide data authentication 
dimensions problem identified sections 
contend deployment complete system senses identified daunting task complete solutions practical today 
support contention chosen intermemory design concrete terms specific values proposed system parameters order illuminate architectural issues underlying design decisions comment tradeoffs apply 
world wide fully connected network assumed intermemory service participating processor contacted network address na today ip address port number suffice 
redundancy dispersal section describe particular scheme known erasure codes idea information dispersal 
simplicity assume words block elements finite field approximately elements 
natural choice prime gamma gamma allows simple computation expense small increase storage space translating original block field element representation 
words may regarded coefficients polynomial degree gamma value assumed polynomial distinct points suffice uniquely identify 
classical observation key idea coding theory corresponds vandermonde matrix case rabin information dispersal framework extreme setting block contains single word 
idea may evaluate polynomial delta points expanding block factor set values suffices reconstruct original block separate values dispersed subscribing processors 
note delta jf approach space optimal subset processors sufficient reconstruction size contains exactly total space original data 
encoding decoding correspond polynomial evaluation interpolation problems respectively 
log fft polynomial multiplication st level replication processors processors nd level replication original block original block size processors processors ensures reconstruction processors ensures reconstruction 
data replication dispersal 
level replication dispersal level takes twice original block size 
second level replication takes times original block size 
total memory requirement times original block size 
dispersal completed processors need disabled data lost 
may perform evaluation interpolation log time 
algorithms efficient practice encoding decoding complexity limit choice complex coding schemes considered asymptotically faster require slightly words reconstruct original 
topic reconstruction number erroneous values considered literature 
delta word output block may arbitrarily divided subblocks dispersed subscribing processors 
maximum dispersal possible scheme sends single word delta processors 
adversary destroy processors example erase maximally dispersed memory block 
minimum dispersal consists storing entire output block processor 
primary consideration establishing tradeoff degree information dispersal possible inconvenience large blocks today standards 
follows log delta minimizes input data block size log delta bits 
example gives block size kilobytes 
requirement delta forces slightly 
reading maximally dispersed block expensive operation model network connections significant cost 
reason propose data block stored levels dispersal 
example encoded block stored ffl entirety single processor ffl dispersed processors ffl dispersed processors ffl dispersed maximally processors cases expect block readable contacting single processor 
fails contact level 
interesting property encoding transformation dispersal takes place additional computation 
blocks merely subdivided dispersed 
read block merely necessary sufficient number words encoded block accessed 
come different levels 
levels consume theta storage original block level need include redundancy 
idea space traded reduced expected read time 
fragments block received processor stored memory corresponding address index block 
separate storage areas exist different fragment lengths corresponding levels dispersal 
block addresses stored fragment maximal dispersal introduces large space penalties assumption ae reason suggest bottommost level omitted 
new bottommost level processors 
second phase dispersal possible contents bottom level incoming data buffer treated data block dispersed 
dispersal take place buffer accumulated full block 
suggest single widespread dispersal say processors 
way processor bottom level buffer effect backed network 
result adversary attack processors involved erase memory block indices required represent minimal overhead 
dispersed degree assuming processors network allow dispersal 
notice replacing bottom level second phase dispersal increases space cost theta additional redundancy introduced second phase 
multilevel dispersal schemes represent effective way limit overhead address storage achieving wide dispersal moderate block size 
system propose failed processor detected neighbors data reconstructed storage responsibilities assumed processor network 
manner failures detected reconstruction accomplished discussed 
dispersal scale proposed necessary achieve archival performance model network processor failures assumed independent 
assumption independence far valid reasons 
include systematic failures introduced software bugs viruses overt adversarial action 
suggest healthy intermemory result independent implementations distributed algorithm starting common specification simple formally verified 
probability losing memory block dominated probability despite repair activities mentioned permanently lose access processors spread randomly virtue addressing approach described network 
calculations issue appropriate failure model scope 
clear degree maximum dispersal key variable 
discussion illustrates variables choice levels phases distribution related design efficient intermemory turn system behavior time 
trading moment eternity model intermemory subscriber invests certain amount memory certain time period earns interest time unit 
original investment withdrawn interest remains invested represents user perpetual ownership space system 
subscribers enter system leave assume net effect total investment increases time 
source interest system assumed time addresses system size assigned space 
new memory entering system assigned intermemory locations stored completely dispersed 
freshly written block widely dispersed time reaches maximum dispersal level 
continued expansion 
unit growth system total capacity paid interest current cases past subscribers 
precisely measure participation system terms arbitrary unit memory 
number units participating time denoted time discretized model system growth time gamma gamma deaths subscriptions model terms terms rates gamma gamma gamma gamma gamma gamma parenthesized term forms single growth constant write delta gamma rate reciprocal processor expected lifetime combines effects new users joining system technology improvements making possible new entrants contribute increasing amount space 
assume 
growth space time gamma time gamma gamma new space unit time gamma gamma gamma allow unit consume space storing memories intermemory 
unit expected lifetime may spend delta gamma expression clear longer lived processors directly compensate lower growth rate 
today storage costs declining rapidly computers frequently discarded years 
expects costs fall slower constant efficiency maintained extent processors stay job longer time 
certainly possible system efficiency decline time making attractive new subscribers 
example suppose measured days expect processors participate days 
suppose 
notice gamma assuming annual system growth rate roughly 
gamma day lifetime processor accrue right consume roughly units perpetual storage space 
example selected plausible participating processor consume half memory 
actual system confront possibility combination growth rate death rate falls short expectations regulate consumption new memory 
development new space entering system allocated system current subscribers time subscriber rights vest life 
explore effect different strategy allocation subscribers time gammaffi 
unit expected lifetime may spend gamma gamma gammaffi gamma gammaffi ffi processor may enjoy unbounded right consume space true 
system practical represent fair trade 
subscriber clearly expects vest rights reasonable period time 
serves illustrate delayed boost system efficiency 
mixed allocation strategy proportion ff new space dispersed delay ffi unit may spend ff gamma gammaffi ff ff 
uniform allocation previous time units results particularly simple expression gamma nr subscriber ultimate vested space rights 
example assumptions previous example suppose new space allocated processor lifetime levels dispersal occur 
vest equally long period death final period length follows 
ff ff ff ffi ffi ffi 
result processor eventually accrue right consume units space just invested 
dispersal takes place time old memories dispersed widely new ones 
discussion simplistic assumes system size grows consistently growth governed simple exponential rule 
real system confront problems 
nonuniform growth system may grow 
extreme case single large user subscribe donate immense amount storage finite time 
user expect vest perpetual rights proportion donation short time frame 
space reserves maintained reasons 

growth may slowdown clear longer today climate rapid technological advance persist 
growth rate declines constant efficiency maintained increasing donation period 
may occur naturally stable technological environment may lead longer processor lifetimes 

shrinkage system may time time shrink 
condition temporary dealt drawing reserves deeply dispersed memories 
space occupied deeply dispersed memories store newer ones 
growth resumes damage repaired ordinary course system operation sketched section 
shrinkage persists society sponsoring organization left decide preservation worth associated costs 
problems clear regulation rights needed functioning intermemory 
interesting question scope 
observe assume memory capacity individual subscriber increases time 
addition effect declining storage cost trend online data user supports 
addressing method described section assumption simplifies handling buffer overflow subscribing processor 
addressing section particular scheme intermemory addressing 
central design objective important functions dispersal self repair may performed processor communicates limited number neighbors total volume communication minimized 
solutions possible current research exploring variations 
approach combines hashing pseudo random generators distributed name server dns 
comment dns implementation discuss reconstruction event failure replacement 
hash functions generators assumed publicly known consider choice specific functions 
bit intermemory address mapped bit virtual processor number assumed exceeds number processors network 
suggest represent reasonable values 
dns implements relation virtual processor numbers physical processor numbers denoted implements toone relation physical processor numbers network addresses denoted today consist combined internet address port number 
path way locate actual processor containing top level dispersal memory block block entirety 
theta relation established persists forever purposes 
theta relation fluid processors worldwide network structure change 
dns accepts responsibility creating relations necessary serves load balancer assigning values time lightly loaded physical processors 
load balancing operations possible network address intermemory address virtual processor number physical processor number 
dns mappings 
note semantic distinction intermemory locations virtual processors 
virtual processor holds intermemory blocks dispersed block fragments 
addition dns mapping performs load balancing 
second mapping assigns virtual processors physical processors 
mapping associates network address real processor physical processor number 
discuss issue 
graph relating processors defined values pseudo random generator family hash functions 
virtual numbers neighbors processor obtained seeding generator physical number generating number values smaller maximum fan dispersal scheme 
require distinct neighbors pseudo random values may necessary 
notice graph purely function information dns relation 
processor retains value current values corresponding neighbor 
dns failure high degree random graph interconnecting subscribers may reconstruction 
portion network addresses nonfunctional high probability reach processors 
network implement dns operation distributed performed single intermemory code 
primary purpose graph information dispersal 
level dispersal seed pseudo random generator collection hash functions identify subset processor neighbors dispersal takes place 
processors block distribution tree computed dns 
purpose graph repair sketch process 
periodic polling neighbors identify dead processors processor replaced graph reconstruct proper contents 
item processor contain top dispersal level arrived processor 
processor eventually poll notice item earlier dispersed gone send 
top level item dispersed level neighbors examined level blocks address calculation process arrived processor reconstructed 
corresponding intermemory addresses read retained 
polling cycle span say months 
time new replacement rebuilt 
analysis complete system frequency polling key design variable 
briefly observe size dns relation jv approximately number memory blocks system plus times number subscribing processors 
size second table just number subscribing processors 
mapping intermemory address virtual processor number primarily semantic reasons 
example set identity hash semantic distinction necessary refers address intermemory block communicated user system name physical processor 
confusion arises values generated part graph construction intermemory addresses 
case large decomposition address space remain small saving storage space time dns implementation 
observe dns rebuilt entirely information held subscribing processor 
performed distributed algorithm current graph connecting subscribers 
dns need engineered archival system replaced time time 
problem buffer overflow considered 
processor sent data room store 
solution idea design dns processor nears capacity likelihood dns assigns new tends small provided processors room avail dispersal reconstruction memory dns intermemory processor 
intermemory processor memory store data including replicated data software memory replication dispersal reconstruction dns 
processor assigned neighbors able 
problem arises reused large rare 
entire system fills processor discard small fragments deep dispersal levels 
time processor die replaced new larger assumption growth individual capacities 
occurs repair process fill discarded fragments 
manifold additional issues simplicity emphasize archival component proposal adopted write model 
read write model certainly possible introduces considerable additional complexity replicated databases 
necessary track versions memory block fragment design caches complicated 
come view read write version distinct research project somewhat different potential applications 
time erase operation may easier implement matter considered detail 
implementation data written intermemory difficult erase level replication 
system may send notices data owners replication level increases 
owner may want keep copy data desired level replication reached 
current address distributed computation problems determining processor dead implementing fault tolerant dns protocol adding new processors users system 
efficient robust solutions problems crucial reliable intermemory 
important set problems related missions security 
particular impossible adversary erase corrupt intermemory destroying large number processors 
hope public key cryptography provide acceptable solutions problems 
assumed simple permission structure subscriber sole write permission set addresses 
observe group permission structure may needed applications 
system archival mission may appropriate revoke write permissions period time passed 
intermemory function long time current software technology intermemory protocols include provision replacement new ones loss data 
discussed new users new processors join system 
possible solution handle collection trusted sites way similar currently assigning ip addresses 
related issue policing new user joins system block intermemory write user commits certain resources payment system ensure user honors commitment 
glimpse layers section briefly discuss higher level structures built top lowlevel infrastructure just described 
distributed file system implemented intermemory blocks correspond disk blocks 
allow subscriber build directory hierarchy specific files accessed incorporating intermemory software application conveniently deploying daemons provide access service intermemory directories look standard disk directories 
gateway service connect traditional web intermemory web page link document stored file system implemented intermemory 
model links virtue expiring 
fascinating problem related intermemory definition archival data type system 
example jpeg currently standard image format 
guarantee years jpeg decoder may easily accessible 
important type program archival representation computer program allows run emulation time 
envision simple base machine model specification top compilers interpreters built 
applications data conversion written system suggest utility extends broader class problems 
issue consider data item converted new data type old obsolete translated accessed archival program 
translation carries finite risk data loss years expect significant losses occur approach 
case original data available chain programs convert principle faulty links chain repaired 
note demand translation approach transparent user 
internet emerged advance consideration search problem 
suggest complete intermemory architecture consider front 
internet search systems operate indexing document tokens provisions approach 
suggest system objects defined deal part problem addressing concepts 
number required strongly suggested component intermemory document 
issues detailed subject area taxonomies developed maintained experts intermemory contributions self classify 
documents classifications classified intermemory robots human experts 
design system taxonomies revised years remain connected past versions nontrivial represents interesting subproblem 
identified general framework issues relating design intermemory 
preliminary calculations indicate intermemory feasible practical 
trade moderate term commitment memory resources archival storage intermemory 
detailed design system require combined efforts distributed algorithms cryptography systems experts 
concentrated world wide intermemory 
archival possible smaller scale 
example large organization may institution wide supplement normal backups advantage automated restore operation 
electronic journal publishers may construct archival journal intermemory ensure journal issue easily available publisher business 
aspects small scale security may simpler world wide intermemory 
small scale intermemory test case implementation 
small working group meeting regularly nec research institute define intermemory implementing 
acknowledgments authors awerbuch sam buss jan allan gottlieb leonid joe kilian satish rao scott stornetta herman helpful discussions comments 
agrawal 
coding replication schemes distributed systems 
ieee transactions parallel distributed systems march 
alon luby 
linear time erasure resilient code nearly optimal recovery 
ieee transactions information theory november 
anderson 
eternity service 
pages 
publishing 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
acm transactions computer systems february 
blakley 
pooling splitting information overcome total failure channels communications 
proceedings symposium security privacy pages new york 
ieee society 
berlekamp 
algebraic coding theory 
mcgrawhill new york 

handbook egyptian archaeology 
edition edition 
cormen leiserson rivest 
algorithms chapter 
mit press 
kahle 
preserving internet 
scientific american pages march 

storage efficient secure replicated distributed databases 
ieee transactions knowledge data engineering april 
naor roth 
optimal file sharing distributed networks 
siam journal computing february 
odlyzko 
tragic loss 
impending demise traditional scholarly journals 
notices amer 
math 
soc january 
patterson gibson katz 
case redundant arrays inexpensive disks raid 
proc 
acm sigmod conference pages june 
rabin 
efficient dispersal information security load balancing fault tolerance 
journal acm april 
roche yeung hau 
symmetrical multilevel diversity coding 
ieee transactions information theory may 

ensuring longevity digital documents 
scientific american pages january 
schatz chen 
building large scale digital libraries 
computer may 
sloane 
proposal internet service eternal home page 
technical report labs information sciences research center revised 

