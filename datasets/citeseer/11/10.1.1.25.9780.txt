cognitive design elements support construction mental model software visualization storey yz fracchia ller school computing science department computer science simon fraser university university victoria burnaby bc canada victoria bc canada scope software visualization tools exist navigation analysis presentation software information varies widely 
class tools refer software exploration tools provide graphical representations software structures linked textual views program source code documentation 
describes hierarchy cognitive issues considered design software exploration tool 
hierarchy cognitive design elements derived examination program comprehension cognitive models 
examples existing tools address issues provided 
widely accepted time spent understanding existing programs significant proportion time required maintain debug reuse existing code 
motivation understand existing programs obvious design tool help comprehension process obvious 
researchers studied programmers understand programs observation experimentation 
research resulted development cognitive theories describe comprehension process 
cognitive theories differ style content share elements concepts outline key activities program understanding 
long term goal design software exploration tools combine graphical representations software structures linked textual representations source code documentation aid program comprehension 
software visualizations similar style hypermedia documents 
hypermedia document contains related linked representations information space 
difficulties experienced hyperdocument reader difficulties experienced browser software visualization 
develop hierarchy cognitive design elements considered designing software exploration tools 
branch hierarchy addresses issues identified examination cognitive theories program comprehension second branch addresses issues may reduce maintainer cognitive overhead browsing navigating large software structures documentation 
remainder organized follows 
section describes cognitive theories program comprehension 
section describes various classes tools may aid program comprehension 
section describes hierarchy cognitive design elements considered designing software exploration tool 
examples existing software visualization tools address issues 
section discusses hierarchy design elements may applied design evaluation software exploration tools 
section concludes 
cognitive models program comprehension mental model describes maintainer mental representation program understood 
cognitive model describes cognitive processes information structures form mental model 
past years researchers proposed cognitive models describe programmers comprehend code software maintenance evolution 
cognitive models existing knowledge code documentation create mental representation program 
bottom program comprehension bottom theories comprehension propose understanding built bottom reading source code mentally chunking grouping statements higher level abstractions 
abstractions aggregated high level understanding program attained 
shneiderman mayer cognitive framework differentiates syntactic semantic knowledge programs 
syntactic knowledge language dependent concerns statements basic units program 
semantic knowledge language independent built progressive layers mental model formed describes application domain 
final mental model acquired chunking aggregation semantic components syntactic fragments text 
pennington model bottom flavour 
investigated role programming knowledge nature mental representations program comprehension 
observed programmers develop controlflow abstraction program captures sequence operations program 
model referred program model developed chunking text statements control constructs relationships text structure abstractions chunks cross referencing structures 
program model fully assimilated situation model developed 
situation model encompasses knowledge data flow abstractions changes meaning values program objects functional abstractions program goal hierarchy 
development situation model requires knowledge application domain built bottom 
top program comprehension brooks programmers understand completed program top manner comprehension process reconstructing knowledge domain program mapping actual code 
process starts hypothesis concerning global nature program 
initial hypothesis refined hierarchical fashion forming subsidiary hypotheses 
verification rejection hypotheses depends heavily absence presence beacons 
beacon set features indicates existence hypothesized structures operations 
example beacon may function called swap sorting program 
discovery beacon permits code features bound hypotheses 
soloway ehrlich observed top understanding code type code familiar 
expert programmers types programming knowledge program comprehension programming plans generic fragments code represent typical scenarios programming 
example sorting program contain loop compares numbers iteration 
rules programming discourse capture conventions programming coding standards algorithm implementations 
soloway ehrlich observations mental model built top forming hierarchy goals programming plans 
rules discourse beacons help decompose goals plans lower level plans 
knowledge understanding model letovsky views programmers opportunistic processors capable exploiting bottom top cues 
components model knowledge base encodes programmer expertise background knowledge 
programmer internal knowledge may consist application programming domain knowledge program goals library programming plans rules discourse 
mental model encodes programmer current understanding program 
initially mental model consists specification program goals 
evolves mental model describes implementation terms data structures algorithms 
mental model includes mapping specified program goals relevant parts implementation 
assimilation process describes mental model evolves programmer knowledge base program source code documentation 
assimilation process may bottom top process depending programmer initial knowledge base 
inquiry episodes central activity assimilation process 
inquiry episodes consist programmer asking question example purpose variable answer stores maximum set numbers searching code documentation verify answer conjecture verified assignment statement values compared see greater 
systematic needed program understanding strategies littman observed programmers systematically read code detail tracing control flow data flow abstractions program gain global understanding program take needed approach focusing code related particular task hand 
soloway describe model merges concepts systematic strategies needed strategies inquiry episodes defined letovsky single model micro strategies include inquiry episodes consist read question conjecture search cycle :10.1.1.29.9103
episodes occur result delocalized plans 
delocalized plan conceptually related code located non contiguous parts program 
macro strategies achieve understanding global level 
macro strategies systematic macro strategies programmer traces flow entire program reading code documentation performing simulations read 
strategy leads correct enhancements causal interactions delocalized plans discovered 
unrealistic systematically read code larger programs 
needed macro strategies programmer studies parts code think relevant task hand 
errors approach causal interactions overlooked 
commonly strategy 
integrated metamodel program comprehension von mayrhauser vans metamodel integrates soloway top model pennington program situation models 
experiments observed programmers frequently switching comprehension models 
integrated metamodel consists major components 
components describe comprehension processes create mental representations various levels abstractions fourth component describes knowledge base needed perform comprehension process top domain model usually invoked programming language code familiar 
incorporates domain knowledge describes program functionality starting point formulating hypotheses 
top model usually developed opportunistic needed strategy 
program model may invoked code application completely unfamiliar 
program model control flow abstraction may developed initial mental representation 
situation model describes data flow functional abstractions program 
pennington assumes situation model developed program model formed 
von mayrhauser vans feel unrealistic larger programs 
integrated model situation model may developed partial program model formed systematic opportunistic understanding strategies 
knowledge base consists information needed build cognitive models 
refers initial knowledge programmer maintenance task store new inferred knowledge 
understanding built levels abstraction simultaneously switching comprehension processes 
model comprehension processes may activated time 
differs letovsky model states comprehension occurs top bottom depending cues available 
explaining variation program comprehension models disparities comprehension models due varied characteristics maintainer program understood goal comprehending program 
understand programmers understand programs factors affect comprehension process considered 
researchers acknowledge certain factors influence comprehension strategy adopted programmer 
vessey states control factors influence programmer performance 
specifically mentions program layout language design programming mode programming support facilities 
brooks noticed behavioral differences due problem domain differences program text individual differences purpose understanding program 
von mayrhauser vans discriminate different strategies required programs varying sizes different tasks 
tilley describe experience creativity table influences program comprehension strategies maintainer characteristics program characteristics task characteristics application domain knowledge application domain task type programming domain knowledge programming domain task size complexity maintainer expertise creativity program size complexity quality time constraints familiarity program documentation availability environmental factors case tool expertise case tool availability maintainer effect quality size complexity program understood 
table summarizes various factors influence comprehension process 
factors due differences maintainers differences program comprehended task differences 
comprehension models describe model context characteristics 
researchers strive limit factors influence experiments affect results dependent controlled factors 
characteristics controlled laboratory perform experiment real world factors tampered 
tool aid comprehension help maintainer key activities identified cognition model suits characteristics maintainer program task 
single tool able assist activities representative various cognition models 
subsection briefly discusses wide variety tools support program comprehension 
program comprehension tools understanding programs difficult source code may source information 
reverse engineering describes extraction high level design information source code 
part maintenance process helps maintainer understand program 
reverse engineering done identify system components inter relationships creates representations system form usually higher level abstraction 
higher levels abstraction generally implementation dependent application dependent 
information graphically 
generally accepted graphical representations useful comprehension aids creating maintaining continues bottleneck process 
tilley describe conceptual framework classification reverse engineering tools aid program comprehension 
develop classification identified basic activity sets characteristic reverse engineering process data gathering static analysis code dynamic analysis executing program 
knowledge organization organizing raw data creating abstractions efficient storage retrieval 
information exploration navigation analysis presentation 
exploration information important activities holds key program understanding 
scope software visualization tools exist navigation analysis presentation software information varies widely :10.1.1.28.8296:10.1.1.28.8296
software visualization tools show animations algorithms data structures 
tools frequently educational settings goal teaching widely algorithms data structures 
class tools shows dynamic execution programs debugging profiling understand run time behaviour 
tools focus showing textual representations may pretty printed increase understanding 
concerned class software visualization tools designed exploring software structure 
section describes hierarchy cognitive issues considered designing tool assist exploration software structures 
cognitive design elements software exploration tools software exploration tools typically provide graphical representations software structure linked textual representations source code documentation goal helping maintainer form mental model software 
key importance tool supports bottom comprehension top comprehension combination 
important especially larger systems maintainer browses navigates visualization 
software exploration tools similar flavour hypermedia document browsers 
hypermedia document contains related linked representations information space 
difficulties experienced hyperdocument reader difficulties experienced browser software visualization 
th ring describe comprehension hyperdocument construction mental model represents objects semantic relations described text say document coherent reader construct mental model corresponds real world reading document 
context software visualization say visualization software documentation coherent maintainer construct mental model visualization 
software visualization local coherence maintainer sense statements programming units visualization global coherence maintainer gain understanding program structure 
hierarchy cognitive issues increasing comprehension hypermedia documents described 
program comprehension models outlined section develop related hierarchy guide development tool aid exploration comprehension software systems see fig 

hierarchy main branches 
branch intended capture essential processes various comprehension strategies top bottom integrated approaches 
branch addresses cognitive issues maintainer browses navigates visualization software structure 
second branch similar issues relevant readers hyperdocuments 
improve program comprehension comprehension strategy employed maintainer dependent variety factors dictated maintainer program task advantageous tool support wide array comprehension activities 
preferable develop specialized tools suit particular comprehension strategy 
section explores comprehension models section extracts cognitive design elements addressed tool claiming aid comprehension strategy 
enhance bottom comprehension bottom comprehension involves reading program statements constructs chunking units higher level abstractions understanding program attained 
bottom comprehension involves main activities identifying software objects relations browsing code delocalized plans building abstractions chunking lower level units 
comprehension tool assist bottom comprehension address main activities 
indicate syntactic semantic relations software objects software visualization provide immediate visible access lowest level units program code visual icons representing atomic units 
syntactic semantic relations units obvious easily accessible 
syntactical relationships units describe text structure microstructure macro structure levels 
relationships easily derived source code listings 
semantic relations software objects require data flow functional knowledge program 
tools information form graph nodes represent software objects arcs show relations objects 
method rigi whorf care hy 
systems direct links software objects corresponding source code provided 
reduce effect delocalized plans delocalized plan results fragmentation source code related particular algorithm plan 
tool assistance reading code belonging delocalized plan cumbersome may involve frequent switching files quickly lead feeling disorientation 
whorf specifically designed reduce effects delocalized plans 
supports multiple views program source code listings call graphs variable cross function cross views 
views linked displaying different instances object colour views 
code delocalized plans highlighted reducing effects fragmentation 
static analysis tools program slicing identify code belonging delocalized plan 
program slicing method decomposing program components component describes system functionality 
program slice contains code relevant behaviour 
tool visualizing program slices program files displayed cognitive design elements support construction mental model facilitate program understanding improve program comprehension reduce maintainer cognitive overhead enhance bottomup comprehension enhance top comprehension integrate bottom top approaches facilitate navigation provide orientation cues reduce disorientation cognitive design elements software exploration indicate syntactic semantic relations software objects reduce effect delocalized plans provide abstraction mechanisms support goal directed hypothesis driven comprehension provide adequate overview system architecture various levels abstraction support construction multiple mental models domain situation program cross mental models provide directional navigation support arbitrary navigation provide navigation mental models indicate maintainer current focus display path led current focus indicate options reaching new nodes reduce additional effort user interface adjustment provide effective presentation styles columns contain line representations procedures :10.1.1.47.5636
procedures may displayed open line code displayed thin row indented accordingly 
code part slice elided 
toolset program understanding displays slicing results system dependence graph capture control data dependencies software :10.1.1.47.5636:10.1.1.150.2996
developers recognize non local interactions code major cause complexity toolset specifically addresses problem 
provide abstraction mechanisms decomposition process process building hierarchical abstractions low level software objects relations hardest part bottom comprehension tools support showing previously decomposed view 
facilities available allow maintainer create abstractions label document reflect meaning 
abstraction supported selecting lower level objects aggregating higher level abstractions 
tools subgraph set nodes arcs may collapsed single composite subsystem node 
tools provide ability filter temporarily elide objects results detailed graph :10.1.1.47.5636
enhance top comprehension understanding program top requires application domain knowledge previous exposure program 
maintainer formulates hypotheses reads code depth manner verify reject hypotheses 
tool supports process providing method documenting hypotheses linking hypotheses relevant parts program 
facilities refine hypotheses subsidiary hypotheses provided 
alternatively tool may provide layered view program previously prepared system evolution reverse engineering maintainer explore program top fashion 
support goal directed hypothesis driven comprehension relatively systems facilitate top comprehension programmer initial mental model hypothesis concerning functionality program 
system tool layered explanation software compatible top theory software understanding supports creation chain hypotheses subsidiary hypotheses concerning properties code 
tool records hypotheses maintenance 
information needed understanding stored layers annotations recording evolutionary history source code constructs 
mechanism supports recording postponed discarded hypotheses useful documentation maintenance 
suited documenting evolving systems tool 
provide overviews system architecture various levels abstraction explore programs top access software architecture provided various levels abstraction 
rigi software engineer reverse engineer decomposes program bottom creating hierarchy abstractions 
hierarchy available topdown exploration subsequent maintenance 
facilitate access program different levels abstraction rigi supports overview windows show hierarchical structure software structure general windows contain slice hierarchy selected levels abstraction :10.1.1.29.9103
landscape views hy shrimp views nested graph representation software architecture :10.1.1.29.9103:10.1.1.29.9103:10.1.1.47.5636:10.1.1.150.2996
hierarchical structure displayed nested graph 
information level information displayed elided show overviews system architecture selected levels abstraction 
integrate bottom top approaches von mayrhauser vans observed bottom top approaches 
programmers create various mental models switch course comprehension 
program model describes control flow abstractions program 
situation model describes data flow functional abstractions 
control flow data flow mental models visually graph model 
displaying functional abstractions relate application domain harder task 
model visually shows behaviour executing program 
tool addressing integrated comprehension process support construction linked views representing variety cross referenced mental models 
support construction multiple mental models mental models differ context level abstraction differ maintainer 
mental models program may visually multiple views 
tools mentioned support multiple views textual graphical views plum rigi whorf garden care :10.1.1.47.5636
example graphical views show call graphs variable usage diagrams 
example textual views include displaying source code program slices software statistics metrics 
tools support view showing execution program 
multiple views shown side side displayed overlapping scrollable windows 
von mayrhauser vans note tools support recording information mental model program level tools support recording information situation domain models 
cross mental models maintainers frequently switch model course comprehension 
switches result maintainer mentally different mental models 
mental models linked record cross referencing information 
systems multiple views visually linked highlighting instances object views 
multiple views linked rigi whorf care 
systems support synchronized views updating views view altered way 
example hy supports textual browsing source code 
programmer apprentice tool direct support development program model situation model 
tool uses plan calculus formally represent programs clich plans 
plan calculus graphical notation formal semantics show mapping abstraction implementation program model specification abstraction situation model 
diagram model displayed side side hooked lines show correspondences diagrams 
reduce maintainer cognitive overhead comprehending larger software systems cognitive overhead increases rapidly 
visualization tools supplied effort reduce cognitive overhead 
cognitive overhead alleviated providing navigation facilities meaningful orientation cues effectively presenting information contribute program comprehension 
navigation provides facilities go place 
orientation cues show user currently got go 
tool may provide navigation methods effective orientation cues user may feel overwhelmed information 
effective presentation techniques alleviate effects displaying large amounts information 
disorientation may result badly designed user interface lacks feeling continuity displays 
facilitate navigation navigation facilities include mechanisms browsing source code program documentation graphical views software structure documented mental models program 
provide directional navigation directional navigation describes mechanisms reading source code program documentation sequentially browsing software data flow control flow relationships traversing software structure hierarchical abstractions user defined program application dependent links 
source code documentation may browsed sequentially text editors may browsed control flow data flow paths linking nodes arcs graphical representations corresponding source code 
alternatively code documentation may navigated hypertext links 
code documentation generated html format browsed web browser 
subsystem hierarchies navigated rigi whorf care selecting subsystem nodes open window show view subsystem node selected 
support arbitrary navigation arbitrary navigation supported maintainer may navigate locations necessarily reachable application user defined link 
arbitrary navigation supported books readers dog corners pages hypermedia documents symbolically marking pages interest 
tools tools provide hypertext access source code documentation provide form navigation access 
saving views supported rigi may mechanism storing arbitrary navigation steps 
maintainer creates snapshot current view may accessed having follow defined links software visualization 
searching capabilities available tools provide mechanism navigation 
provide navigation mental models navigation various mental models key successfully comprehension 
non trivial problem may links model 
example mapping occurs description program functionality pertains chunks code source files 
tools implicitly show mappings views visually 
approach requires models displayed concurrently screen may feasible larger software systems 
provide orientation cues orientation cues indicate maintainer currently exploring software structure switch different focus 
indicate maintainer current focus depending task hand maintainer may interested viewing source code function examining diagram describes program functionality browsing set documentation 
focus interest may fragmented maintainer tries understand non local interactions code 
judicious orientation cues indicate current focus complex display 
textual views source code implicitly show focus code interest directly visible 
related code may visible 
indicating maintainer current focus requires showing artifacts immediate interest displaying context artifacts 
systems rigi whorf highlighted nodes arcs emphasize current focus graph 
larger graphs highlighted nodes arcs may obvious 
software visualization systems hy plum shrimp views fisheye display techniques allocating screen space important information displaying larger secondary information :10.1.1.29.9103:10.1.1.11.9765
show path led current focus hypermedia document browsers histories traveled paths indicate reader particular document structure reached 
similar facilities may browsing software documents 
graph representations software structures nodes arcs access parts software 
accessed nodes graph may highlighted overview window show path traveled software hierarchy 
recording maintainer interested particular software object may important 
reason reading piece code may result verifying particular hypothesis code changed adapted way 
typically little tool support recording sort temporary information 
indicate options reaching new nodes user certain point exploration software system design element addresses facilities available exploration user aware facilities available exploration 
textual views maintainer browse related code opening source files explicitly 
tools provide html views source code documentation 
web browsers browse related code hyperlinks 
hyperlinks visual cues accessing parts documentation 
expert dataflow static analysis tool allows maintainer follow data flow control flow paths program slices 
graphical representations software structure graph display navigation options 
reduce disorientation exploration larger systems reducing disorientation effects critical 
disorientation alleviated removing unnecessary cognitive overhead resulting poorly designed user interfaces specialized graphical views presenting large amounts information 
reduce additional effort user interface adjustment poorly designed interfaces course induce extra overhead 
available functionality visible relevant impede cognitively challenging task understanding program 
significant cognitive overhead may introduced due disorientation caused switching views different mental models 
seesys provides slider maintainer animate views respect time :10.1.1.118.3414
discontinuity views may cause disorientation 
describe application morphing techniques iterate smoothly different layouts 
extra overhead involved computing transitions views effects reduced disorientation may worth effort 
provide effective presentation styles complex graphs typical larger software systems layout algorithms display graph meaningful manner 
software inherent shape colour graph drawn way communicates key characteristics software 
example graph contains crossing arcs give impression increased complexity software 
software visualization tools cia care hy plum seesys rigi recognize importance graph layouts provide specialized customized layouts suitable presenting software graphs :10.1.1.118.3414:10.1.1.29.9103:10.1.1.150.2996
effective interface software exploration review literature issues pertinent program comprehension adequately addressed current software exploration tools 
tools support bottom comprehension relatively tools support integrated top comprehension models 
particular support mapping domain knowledge code switching mental models useful 
better navigation methods encompass meaningful orientation cues effective presentation styles browsing large software systems area research 
begun apply cognitive design elements developed section design software visualization technique called shrimp simple hierarchical multi perspective views :10.1.1.29.9103
approach integrated rigi system developed response deficiencies identified original visualization methods rigi :10.1.1.29.9103
original interface consisted multiple window approach displaying software structures 
observed users frequently lost context due lack orientation cues 
addition users difficulties switching view new windows opened 
shrimp technique uses fisheye view nested graphs show single view software structure 
nested graph display software structures useful displaying multiple levels abstraction provides effective orientation cues lacking original interface 
interactive fisheye view reduce cognitive overhead user interface adjustment shows context detail single view 
hoped shrimp approach address issues relevant integrated model program comprehension supporting switching mental models various levels abstraction 
preliminary experiment performed evaluate effectiveness new interface rigi 
focus initial experiment refine experiment design results encouraging 
experiment methodology developed initial test conduct larger scale experiments near 
intend hierarchy design elements blueprint distinctive features shrimp rigi interfaces may compared cognitive perspective 
results observations experiments drive design decisions subsequent shrimp interface 
iterative cycle design test working effective interface software exploration 
described hierarchy cognitive issues considered design software exploration tools 
hierarchy issues derived examination cognitive models program comprehension 
examples existing software exploration tools address issues provided 
tilley describe framework classifying reverse engineering tools 
hierarchy design elements developed detailed classification tools geared analysis presentation navigation software information 
illustrated software visualization tools address cognitive design elements 
extension hierarchy design elements basis taxonomy compare contrast software exploration tools 
general lack evaluation software exploration tools 
hopefully trend continue 
hierarchy cognitive design elements identified may selecting criteria evaluate software exploration tools 
hierarchy cognitive design elements raises awareness issues difficulties addressed design software exploration tools 
hierarchy provide insight issues resolved may deriving sets guidelines making key interface design decisions 
th ring haake 
hypermedia cognition designing comprehension 
communications acm august 
von mayrhauser vans 
program comprehension software maintenance evolution 
ieee computer pages august 
shneiderman 
software psychology human factors computer information systems 
publishers 
shneiderman mayer 
syntactic semantic interactions programmer behavior model experimental results 
international journal computer information sciences 
pennington 
stimulus structures mental representations expert comprehension computer programs 
cognitive psychology 
brooks 
theory comprehension computer programs 
international journal man machine studies 
soloway ehrlich 
empirical studies programming knowledge 
ieee transactions software engineering se september 
letovsky 
cognitive processes program comprehension 
empirical studies programmers pages 
ablex publishing 
littman pinto letovsky soloway 
mental models software maintenance 
empirical studies programmers pages 
ablex publishing 
soloway pinto letovsky littman :10.1.1.29.9103
designing documentation compensate delocalized plans 
communications acm 
von mayrhauser vans 
code understanding needs reverse engineering tool capabilities 
proceedings case singapore pages july 
von mayrhauser vans 
comprehension processes large scale maintenance 
proceedings th international conference software engineering sorrento italy pages may 
vessey 
expertise debugging computer programs process analysis 
international journal man machine studies 
von mayrhauser vans 
dynamic code cognition behaviors large scale code 
workshop program comprehension wpc pages 
tilley paul smith 
framework program understanding 
wpc th workshop program comprehension berlin germany march 
chikofsky cross ii 
reverse engineering design recovery taxonomy 
ieee software pages january 
price baecker small 
principled taxonomy software visualization 
journal visual languages computing june 
reiss 
program development systems support multiple views 
ieee transactions software engineering se march 
ller 
rigi system programming large 
proceedings th international conference software engineering icse city singapore april pages april 
ieee computer society press order number 
rajlich 
tool software maintenance 
software practice experience january 
soloway 
whorf visualization tool software maintenance 
proceedings ieee workshop visual languages seattle washington sept pages 
dumas 
visualizing program dependencies experimental study 
software practice experience april 
mendelzon 
reverse engineering visualizing querying 
software concepts tools 


www com index html 
weiser 
program slicing 
ieee transactions software engineering se july 
ball eick 
visualizing program slices 
proceedings ieee symposium visual languages pages 
:10.1.1.47.5636:10.1.1.150.2996
toolset program understanding 
technical report university florida 
baker eick 
software visualization large 
ieee computer pages april 

chen ramamoorthy 
information abstraction system 
ieee transactions software engineering march 
eick wills 
navigating large networks hierarchies 
proceedings visualization san jose california october pages october 
roth zernik 
dynamic graph abstraction effective software visualization 
australian computer journal november 
ller orgun tilley uhl 
reverse engineering approach subsystem structure identification 
journal software maintenance research practice december 
rajlich doran 
layered explanations software methodology program comprehension 
workshop program comprehension washington pages november 
:10.1.1.29.9103
storey ller wong 
manipulating documenting software structures 
eades zhang editors software visualization 
world scientific publishing press fall 
penny :10.1.1.29.9103:10.1.1.47.5636
software landscape visual formalism programming large 
phd thesis department computer science university toronto 
consens ch :10.1.1.150.2996
hasan mendelzon vista 
architecture applications hy system 
ibm systems journal august 

cognitive bias software engineering 
communications acm june 
ller tilley 
spatial visual representations software structures model reverse engineering 
technical report tr ibm canada april 
reiss 
field programming environment friendly integrated environment learning development 
kluwer international series engineering computer science 
kluwer academic publishers 
rich waters 
research overview 
ieee computer pages november 
tufte 
envisioning information 
graphics press 
reiss 
engine visualization program information 
journal visual languages computing 
leung apperley :10.1.1.11.9765
review taxonomy distortion oriented presentation techniques 
acm transactions computer human interaction june 
david flanagan 
java tutorial 
reilly february 
oman 
maintenance tools 
ieee software pages may 
donald norman 
design everyday things 
currency doubleday 
baker eick :10.1.1.118.3414
space filling software visualization 
journal visual languages computing 
tilley wong storey ller :10.1.1.29.9103
programmable reverse engineering 
international journal software engineering knowledge engineering december 
:10.1.1.29.9103
storey ller 
manipulating documenting software structures shrimp views 
proceedings international conference software maintenance icsm nice france october 

storey wong fong hooper hopkins ller 
designing experiment evaluate reverse engineering tool 
proceedings rd working conference reverse engineering wcre monterey california nov 

