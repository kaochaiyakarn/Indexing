appear sixth nasa goddard space flight center conference mass storage technologies cooperation fifteenth ieee symposium mass storage systems march shared file systems fibre channel matthew keefe department electrical computer engineering laboratory computational science engineering university minnesota minneapolis mn ece umn edu shared file systems cray sfs dec vaxcluster file system oracle parallel server exploit network attached storage creating serverless distributed file systems allow efficient simultaneous access shared network attached storage devices 
past shared file system designs relied proprietary storage dec ci network higher cost interfaces software emulate shared storage networks 
advent fibre channel open standard network attached storage interfaces available 
review past traditional distributed file systems nfs afs shared file systems cray dec cmu 
new file system architectures shared network storage described give brief overview fibre channel technology describing protocol layers higher level protocols ip scsi mapped protocol topologies supported 
sketch evolution network attached storage moves high high capacity requirements mid range desktop computing 
believe trends may affected fibre channel potential function network storage interface 
supported office naval research 
national science foundation 
cda 
asc nasa 
nag equipment seagate technology communications silicon graphics 
copyright university minnesota 
ver 
reviews traditional client server distributed file system designs motivates shared disk file systems describing fibre channel widely shared storage interconnect encourage development shared file systems 
define shared file systems describe past current important research area 
sketch possible trends may develop fibre channel shared storage systems evolve 

short history distributed file systems traditional client server distributed file system server typically provides name space enforces file access permissions maps names file offsets disk block addresses performs directory lookups 
clients send file system commands create read write network executed server 
advantages client server approach distributed file system design 
clients access files transparently network commands employed local file system preserving binary compatibility 
network hardware protocol independence achieved standard network protocol stacks include protocols rpc xdr tcp ip show 
client user application network device drivers network adapter vfs nfs client tcp ip xdr rpc client memory network device drivers network adapter vfs nfs server tcp ip xdr rpc server memory storage device drivers host adapter local fs server buffer cache nfs protocol stack client server 
network protocol independence helps insure portability separating network hardware distributed file system software 
show implications performance system complexity 
important design criteria distributed file systems include 
name space file system name space constructed client file pathname clients 

stateless operations clients server maintain state previous operations files open clients 

semantics sharing multiple clients share file concurrently see file modifications clients immediately unix sharing semantics delay 

server callbacks cached file modified client discover polling server server callback clients inform file changed 
original client server distributed file system designs sag relied single central server service clients requests simplified design limited scalability availability introducing single point failure 
achieve better scalability distributed file systems evolved directions 
distributed servers balance file request workload provide redundancy sat ous 

looser sharing semantics client caching reduce client demands server sat 

migrating functionality server clients sat 
examples distributed file systems include nfs sag rfs sprite ous coda afs sat xfs 
summarize distributed file system designs nfs rfs afs 
network file system nfs network file system designed sun microsystems mid allow transparent file sharing multiple unix clients sag woo koe 
sun developed vnode vfs file system interface allow single unix kernel support multiple non native file systems providing interface file system independent file system dependent portions kernel 
technique vnode vfs interface standard today modern operating systems provide interface file systems added kernel 
original nfs architecture described stateless improving performance failure recovery consistency unix file system semantics meant nfs implementations include state actual implementations especially clients 
nfs goals included operating system independent implementation hardware transport independence simple failure recovery 
sun aggressively licensed nfs provided implementation allowed vendors implement today de facto standard distributed file systems unix heterogeneous environments 
shows basic nfs protocol design clients requests routed client vfs layer network rpc xdr tcp ip protocols server vfs layer 
server translates client requests local file system requests read request data packaged returned client write data synchronously written disk metadata modified result write request 
means client application proceed nfs server written data metadata disk media 
limitation direct result state nature nfs protocol results performance inhibiting nfs features nfs server crashes clients continue send request packets burdening network unnecessary load clients interpret heavily loaded nfs server having crashed due long response latency continue send request packets server loading remote file sharing system rfs rfs developed introduced svr unix provide remote access files network 
nfs unix semantics preserved 
implementation state full improve performance provide unix file sharing semantics simplify implementation 
rfs reached popularity nfs ways cleaner distributed file system design 
rfs uses central name server provide resource names exported directories 
addition structure hierarchical single rfs system may composed multiple domains independent administrative structure 
files may accessed domains relatively transparently 
rfs server maintains state clients including files opened client incrementing counts vnodes 
addition file record locks readers writers counts named pipes maintained table clients mounted file systems 
crash recovery rfs relatively straightforward 
virtual connection set mount operation performed client server 
virtual connection broken client server fails 
client crashes server decrements inode counts files opened client releases file record locks held client 
server crashes client processes waiting server requests complete informed error occurred return error message 
rfs inodes referring files failed server flagged operations files return error condition user level process started clean state related server 
rfs maintains state information server files client open possible server inform clients cached file modified current cached versions file invalid 
mechanism sprite operating system ous state full nfs implementation sprite inspired sri 
client caching write client writes immediately sent server informs clients invalidate cached versions file providing strong consistency 
drawback approach client crashes unreachable network may take long time respond cache invalidation requests prevents client operations completing 
andrew file system afs sat originated joint project carnegie mellon university ibm develop campus wide data sharing infrastructure exploited desktop workstation technology provided efficient data sharing capabilities centralized machines 
afs evolved implementations afs afs afs development transarc 
afs shares features central server distributed file systems nfs rfs designed scale dozens servers thousands clients potentially sharing data wide area network 
data stored centrally collection trusted afs servers called vice surrounded untrusted afs clients embedded surrounding network connected vice 
client workstations access file andrew name space name providing location transparency 
nfs file names may different client depending exported directory mounted client 
rfs afs afs rely server callbacks files cached clients modified 
afs afs cached files afs caches kbyte chunks 
afs uses session semantics file opened client reads writes file isolation clients 
file modifications written server file closed 
clients cache entire directories perform name lookups directly accessing server 
excellent guide levy silberschatz previous area distributed file systems les 
transarc dfs highly sophisticated robust descendant afs see www transarc com 
fault tolerance issues distributed file systems discussed 
performance measurements distributed file systems described sat bak 
classification scheme context network attached storage soe 

advent network attached storage fibre channel arrives advances switching technology fiber optics convergence network channel interfaces sal allowing order magnitude improvements network latency bandwidth new technologies fibre channel ben 
open standards high volume markets combined constant increase functionality decrease cost devices continue drive network costs 
previous speed imbalance disk drives networks reversed parallel drive designs needed exploit switched network bandwidth meet requirements tomorrow demanding applications 
fibre channel standard integrates storage networking capabilities single serial interface currently speed megabytes second growth path megabytes second allows low cost loop connections fddi rings devices distances meters scalable devices fibre channel switches 
fibre channel achieve widespread disk drives adapters priced parallel scsi technology dem 
contrast today parallel scsi technology supports devices bus bus extending meters making technology effectively unscalable 
section give overview fibre channel standard break sections interconnect topologies physical characteristics protocol layers industry support 
interconnect topologies basic topologies supported fibre channel 
point point 
fabric switch 
arbitrated loop ring fibre channel networks set single point point link group ports connected ports fabric switch group nl ports connected arbitrated loop ring need switch 
port resides fibre channel node typically computer disk array disk drive 
topologies allow system architects bandwidth interconnect capability required 
single disk attached single computer uses point point connection group disk drives attached single computer arbitrated loop topology reduce port cost disk drive cluster large fast servers share fast disk arrays fabric switch 
topologies interactions formally defined fibre channel standard see www com 
physical characteristics physical fibre channel interface originally designed support single multi mode optical connections standard broadened include support copper twisted pair lines run shorter distances 
single mode fiber optic connections run kilometers cheaper multi mode connections run km 
port includes transmitter receiver point point fabric topologies remote connections transmitter receiver port arbitrated loop topology connections different ports 
full speed connections run mbps megabits second protocol overheads factored gives potential data transfer rate mbps megabytes second 
standard includes defined path double quadruple speed achieve data transfer rates mbps mbps respectively 
fibre channel provides scalability bandwidth ports 
arbitrated loop topologies allow nl ports far exceeding devices possible parallel scsi 
current fabric switches contain ports cascaded create large fabrics switches port fabrics 
protocol layers fibre channel functionality implemented layers ben 
fc physical interface media 
fc transmission protocol byte encoding 
fc arbitrated loop functions 
fc signaling protocol link service 
fc common services multiple ports 
fc upper level protocol mapping fc defines optical electronic cable plant connectors transmitters receivers 
fc describes encoding byte word alignment ordered sets frame bounds low level flow control link management port operational states error monitoring 
fc defines frames sequences exchanges transfer data control information buffer buffer flow control fabric port login logout 
fc includes common services implemented multiple ports striping fc upper level protocols ip scsi dem mapped fibre channel 
new products introduced increasing rate fibre channel standard continues evolve 
web sites provide current information standards products www org www com van meter provides excellent overview interfaces including fibre channel allow direct attachment devices networks met 

shared file systems client server architecture current distributed file systems described section driven partly inability attach storage devices directly network requiring file system independent network transport medium employed 
new technologies fibre channel support network attached devices increasingly ubiquitous reasonable consider distributed file system architectures exploit network attached hardware deep protocol stacks nfs see 
shared file systems similar local file systems ways address new issues synchronization scalability error recovery 
section describe key characteristics shared file systems give examples file system architecture 
shared file systems aware include ibm pfi oracle parallel database server llo llnl high performance file system wat dec vaxcluster file system dec high performance file server arb cray shared file system mat ibm parallel file system dem nasd network attached secure disk file systems gib gib global file system soe soe sor veritas cluster file system cfs definition shared file system simple fairly broad shared file system allows direct data transfers computers clients transferring data storage device contains data client may access data storage device 
device shared clients 
definition implies interconnection network multiple clients storage device 
addition file system software recognize existence clients accessing storage devices file system data metadata 
requirement precludes local file systems considered shared file systems local file systems generally consider storage devices owned accessed single host computer 
shared file systems provide server alternative traditional distributed file systems server focus data sharing 
shared file system approach shared network storage devices clients referred storage area network san offers advantages 
availability increased single client fails client continue processing workload continue access failed clients data shared disk 

load balancing mixed workload multiple clients sharing disks simplified clients ability quickly access portion dataset disks 

pooling storage devices shared disk memory equally accessible clients system possible 

scalability capacity connectivity bandwidth achieved limitations inherent file systems designed central servers 
shared file systems classified characteristics symmetric asymmetric 
locking performed clients devices 
proprietary open storage networking interface 
developed modifying local file system writing new code 
shared file system symmetric client perform file system operation interacting client 
asymmetric shared file systems client request file manager executing client 
file manager typically manages file system metadata checks file access permissions provides client information necessary access data directly disk storage area network 
asymmetric shared file systems said third party transfers file manager acts third party transfer client storage device 
approved data transfer client device direct 
asymmetric file systems advantages 
file manager designed modifying server client server distributed file system control data operations separated arb wat gib 
control transfers smaller large data transfers separate network control packets emphasize low latency avoid interference larger typically longer data transfers 
predominance packet switching networks advantage important today 
addition asymmetric designs significant disadvantages including file manager bottleneck single point failure client file manager code written centralized locking logging file manager limit scalability 
shared file systems allow multiple clients access shared storage devices simultaneously locking mechanism necessary insure mutual exclusion file system metadata modified 
example write operation increases file size additional file system blocks assigned file changing file system block allocation maps file dinode disk inode structure includes additional blocks 
operations data structures atomic insure completed properly 
locking shared file systems performed clients devices 
case locking may centralized distributed 
asymmetric shared file systems exemplify centralized client locking metadata locking performed file manager wat gib gib 
contrast shared file systems vaxcluster oracle parallel server llo distributed client locking scheme called distributed lock manager 
distributed lock manager vulnerable file manager failure balance lock manipulation overhead clients 
distributed lock manager design context potential client failures notoriously difficult may inhibit scalability large numbers clients 
key advantage client locking current time portability required network protocol allows clients communicate 
presently standard widely fine grained locking technique available devices locking storage network devices usually yield simpler faster lock protocol client approaches pfi mat soe 
lock mechanism placed centralized dedicated piece hardware ibm coupling facility pfi cray sfs mat network switch hub storage device university minnesota global file system 
locks central location spread devices network components 
devices fail clients rely techniques raid ensure availability lock protocol design simplified 
exist pool fine grain locks fast preferably distributed devices network components balance lock manipulation load 
ibm cray sfs dec vaxcluster shared file systems enterprise system connection ci cluster interconnect respectively underlying shared storage interconnect 
proprietary low volume high interfaces generally specific single vendor 
contrast fibre channel see soe describes fine grain device locking mechanism implemented scsi command example 
university minnesota team intends pursue standardization command scsi committee collaboration industrial partners 
open industry wide standard supported major workstation disk disk array component vendor prominent oems compaq hp sun sgi microsoft 
fibre channel provide underlying shared storage interconnect storage area networks enabling cross platform shared file systems 
important question designing shared file system re existing distributed local file system code write new file system 
previous efforts 
shared file system design including cray sfs mat ibm dem modified existing local file systems shared storage environment 
local file systems emphasize caching file system data metadata possible improves performance locality data re exist file accesses 
emphasis caching complicates file sharing clients local file systems modified act shared file systems mat 
global file system soe designed scalable symmetric shared disk file system exploits shared storage devices network 
disk data structures locks partitioned balance load devices enhancing scalability 
caching sparingly necessary allowed interfere fine grained data sharing clients 
give brief descriptions shared file system designs dec vaxcluster file system dec developed vaxcluster architecture provide highly available system provided users single system image cluster vax workstations 
original implementations ci computer interconnect custom mbps network interconnects computers disk controllers 
vaxcluster provides elegant symmetric shared file system vaxcluster nodes locking handled distributed lock manager dec dlm 
client lock manager provides generalized lock service resources vaxcluster including devices print services files resource user operating system care define 
lock manager allows clients request release lock 
request specifies locking mode provides varying levels exclusive control associated resource exclusive access host may read write resource concurrent read access clients may read write shared resource 
lock requests may queued resource available requesting client informed 
distributed lock manager distributed clients vaxcluster locks cached requesting client possible 
distributes lock manager load machines cluster aids scalability 
designed presence client failures 
original vms file system modified dlm support shared simultaneous access files associated file system metadata dec 
required locks associated directories file volumes 
extensive caching speed operations original file manager caching preserved vaxcluster claim systems important widely provide view spectrum design choices tradeoffs possible 
interested reader urged explore learn shared file systems listed earlier 
implementation exploiting version numbers associated lock operations 
stale cache data detected disparity version numbers caused earlier file update operations dec occurred clients 
cray shared file system cray developed shared file system called sfs shared file system operating system mat 
originally developed custom implementation customer required highly available shared access disks shared multiple class vector mainframes sfs supported product 
matthews mat describes implementation evolved time basic architecture implementations symmetric design device locks 
file system modified support parallel access shared files shared disks 
key improvement implementation phases reduction lock overhead number lock operations 
cray developed semaphore operation executed device developed mapping semaphores metadata allowed mutual exclusion operations metadata 
semaphore operation test set primitive simpler locks vaxcluster distributed lock manager 
cray achieved performance large transfers single client mat multiple client performance data reported 
nasd network attached secure disk file systems gibson gib gib proposed network attached secure disks standard shared storage devices nasd goes previous shared disk storage systems key areas security objects 
nasd file systems currently proposed file manager directory certain operations provide mechanisms keep overheads low 
quite possible nasd support symmetric shared file system designs 
secure communications disks clients achieved capabilities cryptographically sealed file system manager 
support cryptographic operations placed devices 
nasd goes previous shared file system approaches dramatically raises semantic level disk drive operations fixed size blocks variable sized objects 
objects files directories support partitions containers separate groups files provided 
higher semantic level means fewer disk commands need sent network file operation reducing network overheads improving scalability 
gibson modified nfs afs gib exploit nasd drives simulated dec alpha workstations reporting relatively low overhead costs nasd operations scalability clients 
global file system gfs information national storage industry consortium group companies universities involved standards network attached storage devices www org nasd 
global file system design clients service local file system requests act file managers requests storage devices serve data directly clients 
direct communication necessary clients enable basic gfs operations client failures bottlenecks general affect clients 
shown gfs storage system network attached storage devices peripheral network form global pool call network storage pool nsp carved 
partitioning allows system manager configure separate potentially different characteristics 
gfs client gfs client gfs client cpu memory disk cpu memory disk gfs client cpus memory disks cpus memory disks network storage pool nsp raid subpool single disk subpool raid subpool software striped disks subpool storage area network san solid state device subpool global file system distributed environment 
gfs provides transparent parallel access storage devices maintaining standard unix file system semantics user applications see single logical device standard open close read write 
symmetric design device locks designed ground shared file system implementation soe 
current performance results show scalability clients show importance reducing lock related overheads need better caching devices 
contrast shows protocol layers traversed gfs diagram similar shared file systems 
dedicated storage interconnect transport layer obviates need protocol stacks interconnect client server 
client user application vfs gfs client memory storage device drivers host adapter network storage pool global file system protocol stack 
vendors including mercury computer systems developing shared file system products fibre channel networks little published technical information available systems 

summary network attached storage information systems exploit today changing rapidly trends apparent 
fibre channel clearly network attached storage interface choice 
ssa serial storage architecture worthy technical competitor fibre channel wide industry support fc enjoys 
fabrics developed fc standard arbitrated loop implementations growing increasingly sophisticated fc fibre channel arbitrated loop appears mirroring evolution ethernet 
products available support logically shared fc partitioned separate domains smart hubs forwarding traffic domains necessary 
switch fabrics supporting increasing functionality including name servers provide hosts dynamic database currently attached devices hosts 
fc continue evolve faster interfaces reaching mbytes sec year followed mbytes sec long 
fc succeed high storage applications due improved physical interface scalability compared parallel scsi 
disk vendors currently putting fibre channel drives price point parallel scsi drives 
fc host adapters significantly expensive parallel scsi adapters comparable price gigabit ethernet adapters 
fibre channel pricing provide opportunity displace networking technologies gigabit ethernet atm success strictly networking interface assured 
ability single interface supporting networking storage connections appealing way reduce system cost complexity 
see respectively www sites www com www mc com www net 
shared file systems continue increase popularity due availability fc cost effective high performance network attached storage technology 
application requirements high availability performance shared file systems fc provide driving system vendors support technologies 
expect implementations asymmetric migration paths symmetric designs 
technical issues remain cross platform shared file system possible principal 
principal barriers cross platform shared storage embedded kernel level file systems lack consistent public cross platform file system interface lack standard metadata layout agreed vendors tremendous effort required debug test kernel level file systems support legacy applications interfaces kernel dependencies built aspects storage subsystems 
distributed file systems continue popular provide network independence portability 
web technologies evolve visible file system level distributed file systems may displaced exploit spatial locality performance network attached storage interfaces shared file systems 
acknowledgments acknowledge current past members gfs team university minnesota insightful discussions described including steve erickson ken chris jon nygaard 
discussions tony imaging ted fay santa monica studios andy hendrickson industrial light magic kevin chuck rfx alan poston nasa ames research center helpful understanding major benefits shared file systems important issues design 
anderson dahlin neefe paterson roselli wang serverless network file system acm operating systems review vol 
december 
arb beth testbed high performance file server proceedings th symposium mass storage systems monterey ca march 
ben benner fibre channel gigabit communications computer networks 
new york ny mcgraw hill 
bak baker measurements distributed file system proceedings symposium operating system principles pp 

cha chankhunthod danzig neerdaels schwartz worrell hierarchical internet object cache proceedings usenix annual technical conference pp 
january 
dec digital equipment special issue vaxcluster systems digital technical journal september 
dem deming 
scsi tutor 
saratoga ca endl publishing 
dem tetzlaff evaluation design alternatives cluster file system usenix technical conference january 
gib gibson case network attached secure disks technical report cmu cs carnegie mellon university june 
gib gibson file serving scaling network attached secure disks proceedings acm int 
conf 
measurements modeling computer systems sigmetrics seattle wa june 
koe adds network storage ease convenience network computing november 
katz gibson patterson disk system architectures high performance computing proceedings ieee vol 
pp 
steel armand fault tolerance distributed chorus mix system proceedings usenix annual technical conference pp 
january 
levy strecker closely coupled distributed system acm transactions computer systems vol 
pp 
may 
les levy silberschatz distributed file systems concepts examples acm computing surveys vol 
pp 
december 
llo lloyd oracle parallel server architecture proceedings supercomputing europe pp 

mat matthews implementing shared file system disk array ieee symposium mass storage systems pp 
september 
met meter brief survey current network attached peripherals acm operating systems review pp 
january 
ous ousterhout douglis nelson welch sprite network operating system ieee computer pp 
february 
par nfs version design implementation proceedings summer usenix conference 
pfi pfister search clusters 
upper saddle river nj prentice hall 
keefe megabyte second disk array fourth nasa goddard conference mass storage systems technologies college park maryland march 
sal sachs leff lan convergence survey issues ieee computer vol 
pp 
december 
sag sandberg goldberg kleiman walsh lyon design implementation sun network file system proceedings summer usenix conference pp 

sat satyanarayanan scalable secure highly available distributed file access ieee computer pp 
may 
sch unix systems modern architectures 
addison wesley reading ma 
sea kay gallant arrival byte magazine pp 
vol 
august 
soe erickson keefe global file system file system shared disk storage submitted ieee transactions parallel distributed systems october 
soe erickson keefe design performance shared disk file system irix appear joint ieee nasa mass storage conference proceedings college park md march 
sor keefe global file system fifth nasa goddard conference mass storage systems technologies college park md september 
sri srinivasan mogul nfs experiments cache consistency protocols proceedings th acm symposium operating systems principles pp 

tucker nfs accelerators magazine pp 
august 
sweeney hu anderson peck scalability xfs file system usenix technical conference january 
unix internals new frontiers 
prentice hall upper saddle river nj 
val valduriez parallel database systems case shared proceedings ninth international conference data engineering pp 

wat watson coyne parallel architecture high performance storage system hpss th ieee symposium mass storage systems pp 
september 
woo wood client server data serving high performance computing fourteenth ieee mass storage systems pp 
monterey ca september 
