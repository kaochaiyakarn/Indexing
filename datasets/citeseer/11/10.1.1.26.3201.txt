predicate abstraction reduce object oriented programs model checking willem visser park riacs nasa ames research center field ca john penix computational sciences division nasa ames research center field ca common see model checking applied software requirements specifications seldom applied software implementations 
automated software engineering group nasa ames currently investigating model checking actual source code eventual goal allowing software developers augment traditional testing model checking 
model checking suffers state explosion problem main hurdles program model checking reducing size program 
investigate abstraction techniques reduce state space real time operating system kernel written 
show informal abstraction arguments formalized improved framework predicate abstraction technique interpretation 
introduce extensions predicate abstraction allow class instance framework object oriented languages 
demonstrate extensions integrated abstraction tool performs automated predicate abstraction java programs 

model checking increasingly successful technique analyzing software requirement specifications software design models 
main reason trend high levels abstraction limitations model checking avoided minimal cost 
convenient known discovering errors early software life cycle cost effective 
case errors discovered requirements design stages 
details system elaborated sufficient detail reveal problems implementation simply errors implementation 
state art techniques finding errors implementation level static analysis testing 
testing suited giving high degrees behavioral coverage system especially considering concurrent system testing little control scheduler 
static analysis better success dealing concurrency challenging obtain accurate results 
model checking provide extensive behavioral coverage ways 
model checker evaluate possible interleaving concurrent processes threads system 
second model checkers support nondeterministic operations construct environment model close system verification 
allow model checker generate combinations environmental behaviors closed system checked 
cases applying model checking programs 
standard approach extract relevant portions code create model behavior check model 
drawback modeling activity requires expertise model checking tools general allow software developers check code development 
ideally model checker operate directly source program find errors testing obvious problems applying model checking programs getting program source code notation favorite model checker avoiding state space explosion problem 
fundamental problem done create automatic translations popular programming languages input notations model checkers :10.1.1.29.7274:10.1.1.29.3872
approach translating object oriented software promela input notation spin model checker described 
avoiding state space explosion problem difficult translation problem 
implementation detail program design doubly edged sword side required find errors may cause model checking exhaust memory resources finding errors 
abstraction long favored method reducing state space size system allow efficient model checking 
abstraction techniques interpretation require user give abstraction function relating concrete datatypes datatypes 
approach predicate abstraction abstraction function specified number predicates concrete data :10.1.1.39.1920
example interested integer positive negative zero predicates represent state space system 
report investigation abstraction reduce state space software system written lines 
best knowledge time predicate abstraction applied real software system source code level 
section give overview abstraction techniques 
section contains brief description deos real time operating system approach took model check system 
remaining sections contain major contribution application predicate abstraction deos model dynamic predicate abstraction influence deos verification 
show dynamic data manipulation handled automated static predicate abstraction techniques introduce dynamic predicate abstraction solve problem 
section describes integration dynamic predicate abstraction automatic abstraction tool java 
demonstrate tool real program example 
section contains concluding remarks points areas research 

abstraction verification program abstraction general concept potential applications program analysis compilation verification 
common application program abstraction verification reduce complexity program order verification algorithm tractable 
specific case model checking abstractions reduce state space size program attempt overcome memory limitations model checking algorithms 
main approaches model checking abstraction ffl state graph generated model checking executing concrete transitions data ffl concrete transitions abstracted resulting system model checked 
automating approaches decision procedures determine states transitions abstraction function initial state concrete transitions :10.1.1.48.2623:10.1.1.48.4077
approach transitions generated number calls decision procedures bound size concrete system 
state graph approach dynamic abstraction cases require calls decision procedures 
state graph approach precise dynamic information state space generate abstractions 
property preservation abstraction assist verification main concern abstractions property preserving 
forms property preservation weak preservation abstraction weakly preserving abstraction concrete system set properties true system corresponding properties concrete system true 
strong preservation abstraction strong preserving abstraction set properties true false system corresponding properties concrete system truth values 
note strong preservation allow scope simplifying system abstraction 
property preservation respect specific set properties properties outside set disregarded 
fact abstraction applied order preserve single property 
strong preservation useful practice 
expected abstractions weakly preserving aggressive reducing state space popular verification purposes 
approximation approximation behaviors system occurs behaviors added concrete system 
approach provides popular class weakly preserving abstractions universally quantified path properties example ltl properties 
weak preservation case follows trivially behaviors execution paths added property true paths true subset paths including subset describes behavior concrete system 
unfortunately approximations invariant properties liveness properties may erroneously invalidated extra paths added 
highlights drawback approximation add behaviors invalidate property system true concrete 
spurious errors removed constraining approximation reduce degree 
difficult reason invariant properties properties choice doing abstraction approximation system behavior 
problem encountered dealing analogous problems encountered attempting static analysis precise 
approximation behaviors removed going concrete system clearly weakly preserving invariant properties model checking properties 
shown behaviors removed influence verification result 
typical ways making approximations reduce buffer size restrict number processes system approximations construction environment system checked ex ample checking system just input values infinitely 
fact testing approximation type 
practice difficult determine approximation environment influence truth value property 
predicate abstraction predicate abstraction introduced graf saidi popular form approximation forms basis number automated abstraction tools :10.1.1.48.2623:10.1.1.39.1920
basic idea predicate abstraction replace concrete variable boolean variable evaluates boolean formula predicate original variable 
concept easily extended handle multiple predicates interestingly predicates multiple variables 
example assume program integer variables grow infinitely 
program infinite state space model checking complete general property validated finite portion state space 
closer inspection may reveal relationship interest variables equal 
define predicate represent relationship construct system behavior follows condition appears program replace predicate operation involving replace operation changing value appropriately 
replacing concrete transitions transitions performed automatically aid decision procedures 
furthermore take place dynamically state generation statically state generation begins 
approaches approximation occurs information available decision procedure calculate deterministic action state 
example operation lead nondeterministic transitions false true false unknown true gamma 
state graph approach dynamic information may available showing area approach better transition generation approach 
invariants system allow precise abstractions nondeterminism example invariant allow concrete transition abstracted false 
note interesting case predicate abstraction predicate abstraction introduces nondeterminism approximation occur strong preservation achieved 
believe rare occurrence show section specific class infinite state programs occur frequently practice transformed finite state programs predicate abstraction introduces nondeterminism 

deos verification honeywell deos operating system portable microkernel real time operating system provides space time partitioning applications 
enforcement time partitioning involves innumerable interleavings program executions due rich set scheduling primitives supported deos 
developers understood deos development testing going inadequate ensuring correctness scheduler 
led collaboration nasa ames honeywell investigate application model checking assist verification deos 
slice scheduler code including subtle errors detected deos development selected honeywell delivered nasa analysis 
ultimate goal integrate verification technique part software development process decided apply model checking directly source code extracting model system 
adopted translation scheme similar java pathfinder tool 
important point translation translated code line line nearly mapping promela code deos threads run different scheduling periods require certain amount cpu time allocated called budget period 
scheduling period budget thread fixed thread creation 
execution thread uses time remaining budget interrupted kernel new thread scheduled 
property wanted verify deos time partitioning threads system guaranteed requested budget scheduling period 
environment modeling order model check deos define environment kernel execute 
environment modeling main focus include short discussion provide context remainder highlight fact environment modeling critical task involving abstraction proves quite difficult practice 
environment deos contain model threads scheduled model hardware needed provide interrupts 
version kernel thread delete yield cpu continue running interrupted 
case kernel thread uses allocated budget 
simply allowed thread nondeterministic choice options 
model thread approximation thread behavior preserve time partitioning errors exist kernel 
model hardware component system consists system tick generator timer 
system tick generated periodically timer determine thread budget 
provide accurate model environment events synchronized 
possi due certain promela limitations statements translate statement promela 
ble system tick occur timer interrupt thread requests time remaining scheduling period 
deal large number potential execution times thread yield delete approximation kernel requests remaining time timer chooses nondeterministically values time timer started value halfway 
abstraction time worked verification effort difficult assess preserves time partitioning errors 
currently investigating techniques support environment modeling abstraction deos 
realize generating environment deos difficult due lack real time support spin argue experience indicates environment modeling non trivial considering complex systems 
hand approximations allow clean way introducing property preserving abstractions hand introduce spurious errors hamper uptake world everyday software developers 
solution reduce spurious errors introducing possibly unsafe approximations 
verification results told time partitioning error system considering option honeywell team accidentally removed code gave 
turned real problem attitude statespace explosion constantly approximating system behavior disabling features dynamic thread creation deletion avoid running memory 
approximations preserve time partitioning error 
realizing approximations probably unsafe changed approach exhaustive verification part system behavior looking errors certain depth execution 
model checking run threads schedule possible behaviors enabled error 
error occurred thread deleted large amount allocated budget 
point deleted thread budget returned main thread process option budget 
budget twice causing thread starved time partitioning fail 
spin find error minimum depth steps 

rediscovered time partitioning error introducing abstractions deos code abstractions environment unsatisfied reasons 
guaranteed discover error approach model exhaustively checked depth transitions second interested checking properties system required transition corresponds roughly program statement due nearly translation 
void dword countdown countdown countdown itsperiodid itsperiodid void thread cache current period multiple uses 
cp 
thread run period 
cp new period 
budget remaining 
new period get fresh budgets 
record run period 
cp 
slice itsperiodid exhaustive check state space system 
example honeywell sent fix error verify resolved problem 
clear needed find abstractions parts deos code order exhaustive verification 
section related steps took introduce ad hoc abstraction system refine abstraction predicate abstraction 
ad hoc abstraction step introducing abstractions system determine chances reduce state space system grossly approximating system behaviors 
guided experiments showing traces system steps long 
limited intuition deos works large system behavior cyclic nature longest scheduling period system return state threads available scheduled budget available 
extremely long traces indicated data carried longest period boundaries 
able identify data running simulation observing spin data values panel itsperiodid data member class operating counter incrementing time corresponding period reached 
addition variable thread class climbing periodically assigned value itsperiodid counter corresponding thread scheduling period 
section deos kernel involving itsperiodid shown 
variables determine thread executed current period budget safely reset 
thread starts running assigned value itsperiodid return value equal 
increase exactly thread scheduled period 
true variable types replaced smaller ranges bits maintain exact behavior system 
thread scheduled period difficult impossible determine inspection control flow dependent core scheduling code 
test hypothesis placed assertion code check incrementing 
spin failed find assertion violation search depth exhaustively verify system due memory limitation attempting circumvent 
changed increment code roll ran verification 
resulted assertion violated roll false 
result complete confirmation consistent belief increments increased level confidence code inspection 
assuming increment safely modulo arithmetic bit determine thread executed current period 
changed code roll 
table shows formal characterization abstraction effect modulo arithmetic modeled toggling boolean variable 
abstraction place number states dropped exhaustively verify system user thread mb memory 
predicate abstraction turns slice deos system verified thread runs period 
full deos system synchronization mechanisms events semaphores may cause threads wait arbitrary amounts time 
case assumption thread execute period consequently preservation property abstraction breaks 
general solution required abstraction broader context 
discussions honeywell revealed information needs maintained simply boolean variable indicates thread executed current period 
flags reset period boundary 
approach implemented system efficiency reasons kernel algorithms resetting flags number threads 
realization led try predicate abstraction 
replaced variables itsperiodid single boolean variable defined predicate itsperiodid 
generate program statements manipulate variables map statements properly update predicate variable 
case obvious statement itsperiodid mapped true 
mapping program statement itsperiodid itsperiodid nontrivial depending previous values itsperiodid value predicate increment true false 
real system itsperiodid incremented assigned value itsperiodid 
easy prove inspection code itsperiodid greater equal value result incrementing itsperiodid predicate false 
abstraction mapping shown table 
practice case itsperiodid rolls maxint exception assumption 
correct behavior real system implementation depends assumption specifically itsperiodid roll catch meaning thread wait maxint periods 
precisely case predicate abstraction invalid 
abstraction introduced stronger assumptions system imposed implementation strongly preserving abstraction code 
implementation details reasoning described determine program statements deos quite formal automated existing program abstraction tools 
due object oriented nature program actual abstraction required slightly complex mapping table existing tools generate program 
problem arises code describes classes state space attempting composed instances classes 
existing abstraction techniques address distinction class instance variables problematic practice 
fact multiple instances classes want means multiple predicates introduced perform abstraction abstracted program statements generated properly manipulate predicates 
specific problem deos relationship threads thread execute period 
predicate required thread instance store relationship itsperiodid 
constructing program need know predicates updated itsperiodid updated 
perspective thread simple predicate thread 
perspective period meant itsperiodid incremented needed go threads run period update appropriate predicates 
concrete program program int itsperiodid bool itsperiodid int bool itsperiodid itsperiodid itsperiodid itsperiodid itsperiodid itsperiodid table abstraction itsperiodid booleans concrete program program int itsperiodid bool int itsperiodid itsperiodid false itsperiodid true table abstraction itsperiodid single boolean precise approximation original system behavior predicates assigned false itsperiodid incremented true assignment itsperiodid executed 
note algorithm corresponds precisely updating algorithm implementation 
real time constraint apply verification model problem 
predicate abstraction allowed exhaustively check original faulty system fixed system configuration threads full behavior 
error run fixed software turned error deos engineers corrected 
original time partitioning error second error easily traditional testing 
event counter pattern target abstraction deos instance general pattern counter indicate event occurred 
form time stamping common distributed database programming 
believe finding precise approximation remove infinite behavior associated common pattern important result quest model check programs 
fact event counter pattern nasa deep space remote agent control system case study program verification 
section show abstraction enable model checking discover deadlock program occurred flight 
general case pattern consists event class containing counter number listener classes monitor occurrence events keeping local copy event counter periodically comparing values 
general case removes simplifying assumptions occurred deos system importantly listeners monitor event 
sections describe generalization approach deos support automatic generation programs types object oriented abstractions 

drawback abstraction approach described previous section required fairly deep understanding system able introduce code achieve predicate abstraction 
ideally want simply identify abstraction predicate verification system automatically create transitions 
current automated predicate abstraction tools systems predicates relate static variables case predicate relates variables different objects get created dynamically 
propose dynamic predicates order perform predicate abstractions programs uses dynamic data 
dynamic predicates simply predicates augmented dynamic information 
example want create predicate abstraction program statement object class object class dynamic predicate holds static predicate dynamic information relating specific objects note program statement typically dynamic predicates program 
example involving dynamic objects require worst case jqj theta jrj dynamic predicates jqj jrj refers number objects instantiated class class respectively 
calculate transitions dynamic predicates techniques generating transitions static predicates augment resulting transitions information available run time 
example decision procedures calculate transitions corresponding concrete transitions assuming invariant states nondeterministic choice third statement true false program statements require wrapper function order dy 
lets assume list dynamic predicates predicate having structure predicate 
replace statements function defined pseudo code boolean qq rr find dynamic predicate qq rr return value predicate statements replaced function void qq rr find dynamic predicate qq rr set field entry true lastly statements replaced function void rr find dynamic predicates rr set field false third line functions taken directly translations calculated decision procedures static predicates 
provides straightforward way allow predicate abstraction dynamic setting 
potential inefficiency approach may introduce predicates 
example objects class class dynamic predicates case program execution objects class interacts objects class dynamic predicates really required 
case deos threads monitor single start period event program execution 
believe problem overcome allowing user interaction static analysis techniques determine objects interact minimize number dynamic predicates 
potential source information refine abstractions may uml class diagrams 
fact deos threads monitor event expressed multiplicity constraints uml 
description states time memory mb manual dynamic con dynamic opt table predicate abstractions deos results applying different predicate abstraction techniques deos kernel shown table 
table shows number states visited space requirements time taken deadlock detection run spin generates full state space system 
deos system configuration obtain results schedulable threads full capabilities enabled 
results obtained sun ultra mb memory 
manual abstraction refers predicate abstraction described section considerable amount user intervention required 
considered dynamic predicate abstraction conservatively creates dynamic predicates possible thread period objects regardless thread execute period 
look optimization conservative approach creates dynamic predicates thread period combinations occur program 
results indicate optimized dynamic abstraction performs method requires considerable user intervention 

automated tool support preceding sections showed predicate abstractions model checking tractable analyzing object oriented programs 
alluded fact believe dynamic predicate abstractions automated done hand 
section describe automated abstraction tool converts java program program respect user specified abstraction criteria 
illustrate tool example derived flight software nasa deep space remote agent experiment java program fragment code translated original lisp code illustrates deadlock happened flight 
fact program pattern encountered deos unbounded state space 
interact abstraction tool user specifies abstractions removing variables concrete program adding new variables currently tool supports adding boolean types program 
illustrated calls methods remove 
java program abstraction criteria tool generates java program terms new variables remaining concrete variables 
part java program shown 
compute conversion automatically decision procedure svc stanford validity checker checks validity logical expressions 
tool extracts information concrete java program parsing translates java statements svc notation determine statements look translates results back java 
translation back java tool embeds svc results inside wrapper code see handle dynamic nature predicates described section 
abstraction tool designed front tool java model checking tools 
java pathfinder demonstrate tool deos deos written code interest fully published 
class event int count public synchronized void try wait catch public synchronized void remove count count count notifyall class extends thread event event event int count public event event event event remove count count event count count event count public void run count event count true count event count event count event count event class extends thread event event event int count public event event event event remove count count event count count event count public void run count event count true event count event count event count event count class start public static void main string args event event new event event event new event task new event event task new event event task start task start example java program deadlock class event public synchronized void remove count try wait catch public synchronized void verify model checker trap count count verify model checker trap notifyall event class defined new multi class abstraction variable class static final int max static public int static public new max static public void obj obj static public int obj int obj return return max static public int static public event new event max static public void event obj obj static public int event obj int obj return return max static public boolean pred new boolean max max static public void event event int pre image calculation pred event pred event false generated svc pred event false nondeterminism generated svc pred event verify static public void task event event int event true generated svc pred task true nondeterminism generated svc pred task verify static public boolean task event event return pred task event section abstracted java program jpf translation java spin 
currently working java pathfinder jpf model checker built top java virtual machine 
abstraction tool source source translation jpf jpf front 
java support nondeterminism model checkers trap special method calls random verify class introduce respectively nondeterministic values true false 
abstraction tool currently support predicate abstraction relies heavily method call introduce approximations 
furthermore java code contains statements concrete program order assure correctness code related statement concrete program placed methods trapped model checkers ensure atomicity see 
java program checked deadlock jpf jpf result obtained model checker runs memory 
due fact program large state space caused incrementing count variables event signaled 
observed count variables program really test equality predicate abstractions reduce state space 
unfortunately equality predicates introduced introduce spurious deadlock count count statements set predicates true false nondeterministically wait signal 
avoid problem user notice tasks count variables equal events count variables add predicates system shown 
allows abstraction tool refine abstraction remove approximations 
reason refinement lies tool pre image calculations guard execution java program 
example statement corresponding count count tests equal predicate holds sets equality predicate false 
picks nondeterministic value see comments methods code 
jpf finds deadlock program steps transitions initial state 

results investigation shown extending predicate abstraction techniques support objectoriented languages effective practice reducing programs model checking 
predicate abstraction general somewhat simple technique believe applicable programming patterns event counter pattern shown 
general framework interpretation predicate abstraction allows abstraction applied controlled minimal fashion helps provide understanding exactly done avoid state space explosion 
continuing extending applicability predicate abstraction integrate related abstraction techniques 
planning investigate predicate abstraction support environment generation usually time consuming aspect performing model checking practice 
acknowledgments eric aaron larson robert goldman honeywell technology center collaboration support translation verification deos 
phil oh klaus havelund charles michael lowry thomas uribe saidi matt dwyer john hatcliff david dill das jens numerous technical discussions contributed 

anderson beame burns chan notkin reese 
model checking large software specifications 
proceedings th acm sigsoft symposium foundations software engineering volume sigsoft software engineering notes pages 
acm october 
barrett dill levitt 
validity checking combinations theories equality 
formal methods computer aided design volume lncs pages november 
guillaume brat klaus havelund park willem visser 
model checking programs 
proceedings th ieee international automated software engineering conference 
ieee computer society press september 
chan andersen beame jones notkin warner 
decoupling synchronization local control efficient symbolic model checking statecharts 
proceedings st international conference software engineering pages los angeles may 
clarke grumberg long 
model checking abstraction 
acm program languages systems sep 
col uribe 
generating finite state abstractions reactive systems decision procedures 
proceedings th conference computer aided verification volume lncs july 
james corbett matthew dwyer john hatcliff shawn laubach corina pasareanu robby hongjun zheng 
bandera extracting finite state models java source code 
proceedings nd international conference software engineering june 
cousot cousot 
interpretation frameworks 
journal logic computation august 
dang kemmerer 
astral model checker analyze mobile ip 
proceedings st international conference software engineering pages los angeles may 
das dill park 
experience predicate abstraction 
proceedings th international conference computer aided volume lecture notes computer science pages 
graf saidi :10.1.1.39.1920
construction state graphs pvs 
proceedings th international conference computer aided lecture notes computer science pages 
havelund 
model checking java programs java pathfinder 
international journal software tools technology transfer 
klaus havelund michael lowry park charles john penix willem visser jon white 
formal analysis agent flight 
fifth nasa langley formal methods workshop 
holzmann 
model checker spin 
ieee transactions software engineering 
holzmann smith 
practical method verifying event driven software 
proceedings st international conference software engineering pages los angeles may 
george avrunin lori clarke 
data flow analysis properties concurrent java programs 
proceedings st international conference software engineering pages 
acm press may 
pell gat muscettola smith 
plan execution autonomous 
proceedings international joint conference artificial intelligence august 
nagoya japan 
john penix willem visser eric aaron larson nicholas 
verification time partitioning deos scheduler kernel 
proceedings nd international conference software engineering 
acm press june 
saidi 
modular incremental analysis concurrent software systems 
proceedings th ieee international conference automated software engineering pages october 
saidi shankar 
model check prove 
proceedings th conference computer aided verification volume lncs pages july 
schmidt steffen 
data flow analysis model checking interpretations 
levi editor proceedings th static analysis symposium volume lncs 
springer sep 
