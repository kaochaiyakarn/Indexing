bell laboratories murray hill new jersey computer technology research laboratory technical report version control inscape environment perry published proceedings th international conference software engineering 
march april monterey ca 
pages 
version control inscape environment perry bell laboratories murray hill nj important issues considered version control mechanisms characterize compare kinds version control systems extant current programming environments 
characterize inscape version control mechanism invariant show significant advances state art 
inscape module interface specification language specifications invariant provides better understanding notion parallel versions comprehensive notion version consistency flexible method system composition current mechanisms 
particular invariant provides formalization notions version equivalence compatibility correspond closely intuitive practical notions version equivalence compatibility 
various forms version compatibility provide system builder concept extremely useful facility composing systems component parts 

extremely important problem building large software systems programming large building large system components built number programmers 
interrelated aspects programming large process describing interfaces individual components managing variants interfaces implementations systems evolve modeling configuring system components generating system model configuration specification design aspects affects functionality possible considered isolation considered part 
consider implications kinds interface specifications inscape environment problems managing system component variants configuring system components 
discuss background issues generally referred version control 
second characterize compare kinds version control systems extant current programming environments 
characterize inscape version control mechanism invariant describe facilities 
summarize contributions compare current version control mechanisms 

background issues multiple software versions arise building evolving software systems variety reasons error corrections enhancements alternate implementations identical interfaces divergent functionality different uses differing system configurations 
result exceedingly difficult problem managing multiple software versions arise system evolution 
distinguish different kinds versions successive parallel composed versions successive versions result small corrections improvements occur development process 
represent refinements previous versions 
parallel versions result providing alternate implementations divergent functionality 
case implementations usually represent different space time trade offs implementation single interface specification second case various uses component require large degree common functionality differences significant individual 
composed versions result constructing component separate pieces subsystems modules modules distinguish modeling generation systems system generation mechanism may information provided system model components programming environment may modeling information 
term version remainder mean software version 
syntactic objects 
number important questions arise distinctions 
revision generate new parallel version merely successive version 
parallel version different version altogether 
determine correct version building system 
different versions interact consistent 
answering questions consider important issues version identification equivalence compatibility consistency 
mechanisms discussed provide explicit meaning terms 
give intuitive definitions provide standard evaluate mechanisms 
version identification version identification enables distinguish version 
version equivalence versions equivalent ought able interchangeably unexpected effects 
version compatibility compatibility strict equivalence 
example intuitive understanding upward compatibility upward compatible version preserves functionality previous version extensions previous uses remain unaffected changes 
version consistency forms version consistency syntactic consistency semantic consistency 
version syntactically consistent set components composed version cause syntax type checking errors occur 
version semantically consistent set components composed version cause semantic functionality errors occur provides behavior required system 

current version control mechanisms general approaches problems version control system configuration exist current software development environments control basic version control strongly typed version control 
describe evaluate terms kinds versions support terms solutions basic issues version control 
note discuss problem version identical 
sufficient discussion able distinguish different versions means identification talk equivalent versions identical versions 
sidestep philosophical legal problems means versions identical 
version control surprising systems built version control mechanism part development environment 
best developers may get notion successive versions file system file system incorporates form backup files worst notion successive versions current version 
may vague notion parallel versions current version gets frozen particular release 
composed versions thrown particular time concept configuration specification 
identification equivalence compatibility versions determined programmer fiat versions identified programmer versions equivalent compatible said programmer 
version consistency hand determined cycle compile link execute test 
summary control 
system building error prone process means determining clearly needs incorporated system done 
furthermore extremely difficult reconstruct previous versions current system prove unusable 
basic version control systems sccs rcs cedar system modeler apollo dsee provide basic version control kinds versions successive parallel composed versions supported version control system 
versions distinguished version identifiers simplest form pair numbers separated dots example number indicates basic version second indicates revision successive revision 
successive parallel versions distinguished convention form version identifiers create new parallel version append current version number nth parallel version spawned version create new successive version increment rightmost number version identifier 
example new parallel versions created version new successive version created version 
composed versions denoted source lists defined user 
source lists define unit components composition specify appropriate versions 
example cc grep 
stdio compositions 
lists version explicitly second designate initial versions release 
basic approach version control provides workable solution problem version identity 
modules reserved making changes deposited back version control system changes completed 
time reservation new version identifier automatically generated assigned modified component 
unfortunately system notion version equivalence describe generalization sccs rcs 
system modeler dsee richer functionality different details support basic form version control 
compatibility 
consistency case version control mechanism determined cycle compile link execute test 
support required kinds versions system determined difference successive parallel versions internal rationale distinguishes systems control determined programmer fiat 
note administrative rationale provided creating new parallel versions example release may create new parallel versions 
compositions sccs rcs explicitly designate version component included system 
notion default version 
furthermore actual dependencies components system configuration implicit code explicit descriptions versions 
strongly typed version control basic version control mechanisms provide version control level files modules strongly typed version control mechanisms gandalf see provide version control mechanism level syntactic objects granularity versions smaller files modules level procedures functions data structures successive parallel composed versions supported mechanism syntactic objects programming large language 
different kinds versions understood part language describe versions systems 
successive revisions produced automatically part environment management change process 
parallel versions hand determined programmer choice previous mechanism 
compositions refer syntactic objects procedures modules data structures may refer varying degrees specificity 
example composition may refer specific version latest version current default version dependencies basic mechanisms implicit provides facilities explicitly defining dependencies 
facilities builder components determine clearly required order configure specific portion system 
version identification better intuitively easier comprehend provided sccs style mechanisms 
distinct means identification parallel successive versions 
obtain particular version builder specifies particular successive version particular parallel version 
example complete version identifier consists parallel version identifier concatenated appropriate successive version identifier 
identifier previous mechanism generated automatically system time deposit sequence changes 
system modeler dsee provide similar facilities file module level version specifications 
version equivalence type version control mechanism defined terms syntactic equivalence data objects equivalent types structures equivalent operations modules equivalent signatures equivalent 
signatures operations equivalent operation names identical number order types arguments identical 
modules equivalent names identical components equivalent 
explicit notion version compatibility sense equivalent incompatible 
mechanism built foundations strong typing surprising syntactic consistency guaranteed version control mechanism 
composition specifications type checked system independent system generation cycle 
semantic consistency composed versions determined generate test cycle 
significant gains functionality system support kinds version control mechanisms important problems solved 
notion version equivalence correspond intuitive notion version equivalence 
hand strongly typed definition broad 
versions considered equivalent clearly equivalent intuitive sense equivalence 
example versions operation may signature radically different functionality 
case violates intuitive sense equivalence ought able substitute difference system execution 
hand strongly typed definition narrow 
versions considered equivalent intuitively consider 
consider case operations provide exactly functionality different signatures mechanism guarantees incompatibility non equivalence 
furthermore notion compatibility strict 
example consider operations int int bool 
parameter types incompatible intuitive sense second upward compatible version second preserves functionality extends small way means second parameter 

invariant inscape version control mechanism inscape environment environment constructing evolving large software systems constructive formal module interface specifications 
interface specifications describe semantics data operations environment enforce automatically consistent form basis symbiotic relationship developer environment construction evolution large systems 
overview inscape module interface specification language order give reader intuition specifications inscape 
discuss notions versions invariant solutions version control issues describing detail precise definitions version see discussion semantic interconnection model provides basis inscape ability specifications programmer 
equivalence compatibility result specification approach 
evaluate mechanism compare preceding mechanisms 
inscape module interface specifications fp int int buffer preconditions fp fp postconditions fp fp allocated obligations deallocated example module interface specification language extends hoare input output predicates order describe properties data behavior operations 
addition hoare preconditions postconditions introduce notion obligations extend specification operation results 
postconditions sufficient capture side effects operation describe known true execution operation specify programmer obliged satisfy eventually result operation closing files deallocating buffers making data consistent 
example illustrates specification look successful execution reading record file 
provide notion multiple results exceptions precisely exactly specified terms mean postconditions minimally required handle obligations 
pragmatic information included exception specifications indicate recommended recovery techniques specific recovery operations 
example illustrates exception specification look operation data readable consistent 
hoare approach algebraic approach goguen guttag better suited specifying exceptions obligations may occur mean occur 
exception postconditions fp fp allocated obligations deallocated recovery example versions issues notions versions invariant quite similar 
extend incorporate inscape knowledge specifications semantics module interfaces 
successive versions compositions similar flexible 
parallel versions invariant provides significant difference preceding version control mechanisms invariant distinguish different parallel versions extent exhibit similar slightly different behavior 
extent accomplished clear discussion 
basic version control strongly typed version control mechanisms provide workable notions version identity 
mechanisms deficient providing notions version equivalence compatibility correspond intuitive understanding concepts 
behavioral specifications provided invariant provides precise definitions concepts correspond closely intuition 
introduce distinctions compatibility useful composition systems inscape environment provide system builder considerably flexibility building process version control mechanism 
extended notions equivalence compatibility basis semantic specifications extend invariant amount consistency checking performed system compositions 
guarantee syntactic consistency objects composition looser sense strongly typed systems 
relaxation possible concerning signatures syntax checking 
discussions sections clarify done 
furthermore semantic consistency components guaranteed limits strength consistency checking provided inscape environment see 
version identity equivalence purposes simplifying discussion limit scope definitions single successful result operation extension multiple results exceptional results incorporates considerations discuss single successful case extension data specifications analogy 
loss generality making simplification 
simple straightforward definition interface identity operation 
definition concerned uses interfaces definitions 
problem interfaces differ choice parameter names identical disappears instantiations arguments determine identity 
operation interface identical pre pre post post obl obl 
pre set preconditions operation post set postconditions operation obl set obligations operation notion version identity needed subsequent discussion define general way ignore philosophical legal problems definition notion implementations identical 
version identical version interface identical interface implementations identical 
important notion version equivalence 
version equivalent version interfaces identical 
version compatibility different kinds compatibility strict upward implementation system compatibility 
forms intuitive notion upward compatibility captures notion substitutability second captures notion extended functionality 
notion fact useful far building systems concerned 
version strictly compatible version pre pre post post obl obl 
version strictly compatible version assumes guarantees form compatibility guarantees strictly compatible version may substituted occurrence version compatible reasons preconditions subset original satisfied propagated exactly way original occurrence postconditions superset originals dependencies provided original occurrence satisfied version worst beneficial side effect preconditions may satisfied satisfied obligations identical change interconnections result substitution 
second form compatibility call upward compatibility original functionality preserved extended 
version upwardly compatible version pre pre post post obl obl 
form useful determining example new version parallel version previous version useful determining substitutability composing generating new components 
strict upward compatibility place restrictions suitable substituted component system composition 
situations find restrictions constraining 
example part functionality operation entire functionality 
operation provides bit functionality original want consider note obligations included source may modified cover extra obligations incurred 
similarly obligations included may case done implementation substituted obligations met non existent 
replacement component composition strictly upwardly compatible original version introduce forms notion implementation compatibility exact strong weak implementation compatibility 
different forms represent degrees relaxation constraints extent effects willing accept substitution version 
version exactly implementation compatible implementation operation effect propagated interface operation 
version exactly implementation compatible pi 
pi 
pi 
propagated interface implementation 
implementation version clearly version equivalent exactly implementation compatible 
version strictly compatible may exactly implementation compatible depending characteristics interface implementation 
example strictly compatible version may exactly implementation compatible occurrence 
possible weaker version guarantees functionality exactly implementation compatible results original version covered weaker version duplicated implementation 
relax constraint effects propagated interface slightly consider version strongly implementation compatible implementation operation intuitively consider acceptable benign effects 
version strongly implementation compatible pi 
strictly compatible version pi 
clearly strictly compatible version strongly implementation compatible 
restrictive form possible operation strictly upwardly compatible strongly implementation compatible 
note certain facilities need practical terms programming language support 
facilities ada default values parameters ability parameter lists arbitrary length prolog don care argument kinds features expedite approach 
discuss construction components basis interface specifications describe interface automatically constructed implementation 
automatically constructed interface represents interface represents requirements functionality result implementation 
requirements results propagated may optionally propagated depending arise implementation reducing strength results guaranteed interface 
user selected interface propagated interface 
weaker form allows immediately unacceptable effects eventually acceptable ripples resulting pebble thrown calm pond eventually version weakly implementation compatible 
virtually version candidate form compatibility 
requirement point effects substitution version eventually cease effect propagating resulting changes implementation system point longer effects worst benign effects 
extend notion implementation compatibility system compatibility occurrence substitution version form implementation compatibility form system compatibility 
version system compatible implementation compatible version occurrences system 
exactly strongly weakly 

summary inscape module interface specification language programming large language enables significant advances state art version control 
respect kinds versions supported version control mechanisms invariant provides advances 
environment better understanding notion parallel versions talk parallel versions terms version equivalence possibly upward compatibility 
problems concerning questions parallel versions means solved invariant facilities determining version equivalence compatibility provide start solving 
invariant provides liberal flexible method composition pieces system built components available version control mechanisms 
compositions freed adverse restrictions strong typing guided notions version equivalence compatibility incorporate useful aspects strong typing semantic specifications interfaces 
respect issues version equivalence compatibility consistency invariant formalization offers significant contributions 
inscape consistency checking process constructing evolving systems invariant determine consistency different versions process building systems components 
definition version equivalence provided invariant matches intuitive notion versions equivalent identical behavior 
various forms compatibility correspond closely intuitive notions compatibility versions 
forms compatibility provide unique notion version enables system builder high degree freedom flexibility composing systems 
builder may substitute original components equivalent versions ill effects non equivalent compatible versions invariant determine effects substitutions 
frank hans 
programming large versus programming ieee transactions software engineering se june 
pp 

nico habermann perry 
system composition version control ada software engineering environments 
editor 
north holland 
pp 

hoare 
axiomatic approach computer programming cacm october 
pp 

gail kaiser nico habermann 
environment system version control digest papers spring compcon ieee computer society press february 
pp 

butler lampson eric schmidt 
organizing software distributed environment proceedings sigplan symposium programming language issues software systems sigplan notices june 
david gordon mclean jr computer aided software engineering distributed workstation environment proceedings acm sigsoft sigplan software engineering symposium practical software development environments sigplan notices may 
pp 

perry 
position constructive module interface specifications third international workshop software specification design 
ieee computer society august london england 
perry 
inscape program construction evolution environment 
technical report 
computer technology research lab bell laboratories august 
perry 
software interconnection models proceedings proceedings th international conference software engineering march april monterey ca 

source code control system ieee transactions software engineering se 
pp 

walter tichy 
rcs system version control software practice experience july 
pp 

