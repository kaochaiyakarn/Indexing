synthesis toolkit stk perry cook gary department computer science center computer research music acoustics department music princeton university department music stanford university princeton new jersey usa stanford california usa prc cs princeton edu gary stanford edu presents cross platform programming environment designed rapid prototyping music synthesis audio processing programs 
synthesis toolkit ers array unit generators filtering input output examples new classic synthesis ects algorithms research teaching performance composition purposes 
plethora computer programming environments applications exist music synthesis 
purpose rapid prototyping realtime synthesis audio processing algorithms environments drag drop graphical user interfaces guis max generally preferred 
programs problems users programmers alike including cross platform portability user extensibility 
non gui environments powerful complex programming paradigms prove di cult beginners grasp 
development synthesis toolkit stk motivated large part problems cook 
particular fundamental design goals stk cross platform functionality ease user extensibility real time synthesis control open source code nearly stk written generic compiled system compiler 
cross platform functionality aided encapsulating operating system dependencies realtime sound midi input output small number classes 
portability problems typically incurred respect gui code 
stk avoids tcl tk simple text scripting language freely available nearly current computer operating systems 
stk runs completely computer host processor avoiding specific hardware requirements basic sound card 
stk achieves programming clarity ease object oriented structure 
convenient coding optimization issues addressed 
general coding optimization sacrificed sake programming clarity 
rapid prototyping design goal advent host processor speeds tradeo appropriate 
realtime audio input output midi input functionality currently supported irix linux windows computer operating systems 
linux realtime support accomplished open sound system oss sound api allowing portability oss supported systems solaris hp ux 
realtime support available computer platform easy compile stk traditional functionality current level nextstep support 
source code stk freely available noncommercial allowing full user extensibility customization behavior 
testament ease pedagogical value algorithms synthesis toolkit ported various sound synthesis systems vanilla sound server msp 
synthesis toolkit foremost set classes music synthesis digital audio programmers 
example programs international computer music conference beijing china provided distribution demonstration purposes 
programs need modification meet specific user requirements 
likewise tk guis simple functional necessarily robust 
stk ers experienced programmers alike great start developing audio programs 
stk teaching learning synthesis algorithms 
stk example fairly careful program design 
stk offers sound midi support lots platforms 
stk requires basic understanding languages willingness develop programming solutions specific user requirements 
environment synthesis toolkit classes inherit object master class 
object doesn provide program functionality er convenient means defining global program operating system parameters 
example operating system defines object control proper byte swapping correct selection audio midi application programming interface api code compilation 
stk fundamental floating point data parameter float defined object float double value 
multi channel data passed multi parameter defined pointer float 
audio sample stk classes implement tick method depending context takes returns float multi data 
tick method runtime calculations class take place 
structure read delayed written realtime output program code input new delay new output new channels input normalize normalize input data delay delay samples input output tick delay tick input tick delete input delete delay delete output objects output audio samples implement method returns computed sample 
allows single source feed multiple sample consuming objects necessitating interim storage variable external object 
currently stk implements single sample tick functions 
allows minimum memory usage ability modularly build short sample recursive loops guaranteed minimum latency system 
single sample unit generator calculations nearly guaranteed sub optimal terms computation speed 
vectorized unit generators take yield pointers arrays sample values improve performance significantly depending processor type vector size 
specific support planned vectorized stk classes unit generators designed allow easy conversion vector functionality arrays float multi values 
unit generators core stk traditional unit generator paradigm originally introduced max mathews music languages mathews 
current classes include envelopes filters noise generators nonlinearities data input output handlers 
unit generators form fundamental building blocks various synthesis audio ects algorithms discussed 
complementary base classes associated subclasses handle data input output wav snd mat matlab mat file raw stk raw formatted files realtime audio input output 
file input subclasses configured looping interpolating behavior 
synthesis algorithms large variety classic new music synthesis algorithms distributed stk 
example classes motivated research teaching music composition performance demands desire create set di erent synthesis techniques possible share common interface allowing unique features particular algorithm exploited 
current sound synthesis techniques demonstrated include additive subtractive frequency modulation fm modal sampling roads physical models string wind instruments computer music international computer music conference beijing china journal physically inspired statistical particle models cook 
models voice provided vocal synthesis models planned 
particle models combined modal pcm synthesis techniques provide framework parametric synthesis large variety real world sounds sound ects 
ects algorithms synthesis toolkit includes simple ects algorithms reverberation chorus pitch shifting 
class provides simultaneous realtime sound input output supported hardware realtime ects processing 
simple ects demonstration application control gui provided latest version stk 
realtime control stk control sources connect synthesis programs pipes sockets allowing networked connections decoupling audio synthesis control generation 
input handler md converts standard midi synthesis toolkit interactive network interface 
language system program capable sending formatted text socket control stk instruments 
possible stk algorithms share common set controllers mapped standard midi controllers 
allows voicing experimentation tcl tk guis expressive control standard midi control sources 
created synthesis toolkit simple text extension midi 
supports unified control interface multiple platforms multiple control signal sources guis multiple flavors midi controllers score files simple text connections processes single machine networks 
extends midi incremental ways specifically representation accuracy allowing floating point note numbers micro tuning example floating point control values double precision time stamps delta time values 
text message basis control stream allow easy creation files debugging control consumers providers 
goes midi allows parametric control curves functions specified 
allows continuous control streams potentially lower bandwidth midi part name higher resolution quality control functions rendered instrument performer expert class controls instrument 
expressive figures drum rolls characteristic pitch bends heavy metal guitar hammer ons specified called text messages 
support toolkit provides cpp parses control data 
gui support number tcl tk control scripts provided stk distribution 
tcl tk cross platform scripting language ers simple means creating sliders radio buttons generate control data piped stk application 
formatting control messages form standard midi control messages midi controllers exchanged gui control enabling real time expressive synthesis control 
summary synthesis toolkit ers fast prototyping environment audio dsp computer music applications 
stk cross platform functionality generic development language minimize program obsolescence issues 
stk object oriented programming structure ease design goals useful teaching aid 
stk open source model allows complete user extensibility 
synthesis toolkit probably feel need gui wrappers programs 
benefits gained avoiding code far outweigh inconvenience having port algorithms years 
computer music journal 
computer music journal 
special issues physical modeling 
international computer music conference beijing china cook 

synthesis toolkit version 
siggraph course creating manipulating sound enhance computer graphics 
available acm siggraph 
cook 

physically informed sonic modeling synthesis percussive sounds 
computer music 
mathews 

technology computer music 
cambridge massachusetts mit press 
roads editor 
computer music tutorial 
cambridge mit press 
