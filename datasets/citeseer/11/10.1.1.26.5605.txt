haskell interfacing tool manuel chakravarty school computer science engineering university new south wales sydney cse unsw edu au www cse unsw edu au discusses new method typed functional languages access libraries written lower level language 
specifically introduces interfacing tool eases haskell access libraries 
tool obtains information data type de nitions function signatures analysing header les library 
uses information compute missing details template haskell module implements haskell binding library 
hooks embedded binding le signal objects accessed haskell 
haskell code binding le determines haskell type signatures marshaling details 
approach lightweight require extra interface description language 
complexity modern software environments frequently requires interoperability software components coded di erent programming languages 
lack access libraries components implemented language severely restricts scope programming language 
surprising number methods proposed integrating foreign code functional programs particular imperative code haskell approaches range simple inline calls routines sophisticated com support 
interface generators previous approaches relied annotated interface languages dedicated language interface speci cation 
interesting unexplored approach combined interface speci cations languages expressing complementary information 
interestingly especially attractive frequent application foreign language interface fli access existing libraries implemented language interfaces operating system services system level higher level libraries usually available due simplicity adapting interface language relatively conducted large part working institute information sciences electronics university tsukuba japan 
easy 
method uses existing header les conjunction additional high level interface information expressed haskell plus small set binding hooks generate haskell binding library 
experience interfacing tool hs shows outlined approach practically feasible 
reading verbatim headers library hs exactly information compiler translating code library 
su cient knowledge call library functions read write components data structures access structures doing address arithmetic haskell 
summary original features approach tool support simultaneous complementary interface speci cation foreign host language 
hs rst tool header les haskell access libraries 
supports consistency checking haskell interface speci cation existing headers library 
simple binding hooks lightweight tool support complex interface language required 
tool hs implemented available public 
remainder structured follows 
section introduces concepts underlying approach discusses related 
section details binding hooks supported hs 
section describes marshaling support provided library hs 
section outlines implementation current experience hs 
section concludes 
concepts related symmetric approaches language interoperability idl corba de ne interfaces special purpose interface language treat interfaced languages peers 
contrast optimised asymmetric situation libraries implemented lower level language called foreign language accessed typed high level functional language called host language 
asymmetric setting interface information provided foreign language library generally insu cient determining corresponding host language interface 
assertions invariants informally speci ed foreign interface formalised host interface task clearly requires user intervention 
second aspect asymmetry situation foreign library including interface speci cation usually exist host language interface implemented furthermore foreign interface usually developed independent concurrent development host interface 
situation calls apart early version released 
hs web page www cse unsw edu au haskell hs approach existing foreign interface reused far possible consistency interfaces checked automatically 
achieve employing tool uses foreign host language interface concert approach knowledge tried 
call dual language approach opposed specialpurpose interface language restriction host language 
comparison symmetric approaches dual language approach trades generality simplicity 
particular symmetric approach requires extra language describe interfaces omg idl 
generic interface tool generates host language interface requires layer code host language provide convenient interface library user 
contrast dual language approach host interface directly expressed host language freedom interface designer directly produce interface suitable library user 
interesting see dual language approach ts taxonomy section 
argument adopting third language idl grounds speci cation exclusively host language haskell exclusively foreign language su cient determine complete interface 
neglects possibility host language speci cation concert foreign language speci cation particularly appealing foreign language speci cation exist maintained author library usually case interfacing libraries 
dual language tool haskell shall concentrate speci case libraries haskell tool hs 
focus justi ed nature language interoperability handle signi cant amount language speci technical detail language independent presentation tedious 
addition currently popular low level language interesting libraries interface 
despite focus haskell discussed approach appropriate typed functional language basic ffi support 
hs generates haskell code foreign function interface ffi currently provided glasgow haskell compiler ghc soon supported hugs 
ffi provides basic functionality calling haskell vice versa ability pass primitive data types integers characters raw addresses 
building facilities hs automates recurring tasks de ning ffi signatures functions marshaling user de ned data types languages 
words full fli consists layers basic runtime support simple inter language calls haskell system ffi tool support complex aspects data marshaling representation user de ned data structures hs 
architecture displayed 
opinion ghc ffi candidate standard haskell ffi 
lib lib lib chs newtype window window addr enum io window wt liftm window call gtk window new wt lib lib hs cpp hs lib cc lib hs hs ghc 
hs tool architecture library source les lib lib grey box usually exists haskell binding implemented cases concurrently independently developed 
header lib library contains level interface information 
complemented hs binding module lib chs contains haskell side interface marshaling instructions binding module speci es interfaces inter operate 
achieved virtue binding hooks expressions enclosed pairs marshaling instructions denoted plain haskell 
gure contains fragment binding code including binding hooks objects de ned header le case gtk window new 
binding module binding hooks plain haskell de nes haskell interface example type signature details marshaling procedures example 
consist marshaling routines prede ned library hs hs 
interface generator denoted hs reads binding module header le rst pipes pre processor cpp 
exploiting cross binding hooks objects corresponding de nitions header le interface generator replaces binding hooks plain haskell code exercises ffi underlying haskell system 
gure resulting haskell module lib hs marshaling library hs hs comes hs 
expect functionality tool hs conversion enumeration types haskell conversion basic types corresponding haskell types generation required ffi declarations function prototypes direct access members structures haskell library support parameter result marshaling consistency check haskell interface contrast expect features 
generation haskell function signatures prototypes 
marshaling compound structures haskell values rst sight may surprising features included closer look reveals secondary importance 
rst feature convenient couple examples generally derive haskell signature prototype int may int bool haskell 
second feature generally useful really want marshal entire structures haskell merely maintain pointer structure haskell 
evaluation usefulness second feature interesting candidate 
summary header les de ning low level details data representations simpli es interface speci cation signi cantly new interface language needs learned header les date latest version code allows tool check consistency header haskell interface 
marshaling speci ed plain haskell utilising haskell marshaling library keeps tool simple exible 
cost restriction foreign language related absolute minimum requirement fli ability call pass arguments primitive type integers characters 
interface sophisticated allows call backs haskell contains additional inter language support storage manager 
stated call basic support foreign function interface ffi constitute full language binding allows merely basic inter language function calls 
rst proposal kind functionality haskell compiler ghc ccall ghc ability compile haskell ccall superseded new ffi section ts better base language powerful allows call backs functions exported imported dynamically 
green card tool implements full fli top basic ffi haskell systems ghc hugs nhc 
input speci cation haskell signatures foreign procedures augmented declarations specifying various low level details data layout storage allocation policies inferred signature 
main disadvantage conceptual complexity interface speci cation arises need invent language speci es low level information naturally haskell signature 
result part information interfacing contained header le re coded green card language course updated new versions accessed library 
goal green card hs essential di erence method hs reads header le obtain side interface uses plain haskell express marshaling specialised data interface schemes 
interestingly initial version green card analysed header les language tool discussed approach abandoned 
direct compiler interface de nition languages idls generates haskell bindings idl interfaces 
direct generate haskell binding com component conventional library 
addition direct supports implementation com components haskell 
special appeal symmetric approach standardised interface language ability mix haskell code code written language com idl support due proprietary nature com currently restricted windows platform restriction lifted extending direct cover open corba standard 
generality direct inherits disadvantages symmetric approach programmer re code regularly update information contained existing header les library furthermore additional overhead learning dedicated interface language 
methods suggested alleviating disadvantages rst automatic generation idl speci cation headers second direct processing existing headers direct 
cases programmer manually supply additional information 
rst case programmer post processes generated idl speci cation second case programmer supplies additional le contains annotations plain declarations 
main conceptual di erence methods hs direct generates xed haskell interface input hs allows programmer determine haskell interface 
simple interfaces xed output may su cient complicated interfaces gtk see marshaling section direct approach requires layer haskell code provide suitable interface user 
second di erence direct marshals entire structures haskell hs allows access individual elds structures marshaling structure 
simple structures time descriptors geometric gures usually convenient marshal entirety case complicated structures widget representations individual access structure members preferable see section 
mentioned haskell support time writing 
generates binding code annotated header le class de nition 
works untyped scripting languages tcl python perl scheme languages java problem typed functional languages information header le usually su cient determining interface functional language side 
result additional information included header le leads maintenance overhead new versions interfaced library appear 
contrast header les complemented separate high level interface speci cation favoured hs 
discussion largely centres various available glasgow haskell compiler 
say haskell implementations fli support ghc enjoyed largest variety 
importantly approach fli design systems tried context ghc 
holds functional languages inclusion prevented space considerations 
interface speci cation discussed section binding hooks establish link objects de ned header de nitions haskell binding module chs le 
tool hs replaces binding hooks interfacing code computed declarations 
binding hooks enclosed start keyword determining type hook context speci es binding information module type computes haskell representation type enum maps enumeration corresponding haskell data type de nition call calls function get set allows read write components structures context hook rst hook occurring module 
subsections discuss structure usage binding hooks appendix contains formal de nition grammar 
context hooks context hook may de ne name dynamic library loaded external functions may invoked may de ne pre identi ers 
example context lib gtk prefix gtk states dynamic library called gtk elf linux systems loaded pre gtk may safely omitted identi ers 
identi ers gtk library start gtk gtk kind poor man attempt module name spaces pre declaration allows refer identi ers omitting pre write 
matching pre case insensitive underscore characters pre stem identi er removed new window gtk new window 
leads ambiguity full name priority 
simplify presentation examples pre feature 
type hooks hs marshaling library de nes haskell counterparts various primitive types 
type hook type name expanded hs appropriate haskell type 
example type type type type type may de ned represent int long int header le hook type replaced cint clint respectively representation value expected returned function corresponding type 
enumeration hooks enumeration hook converts enum declaration haskell data type 
contains name declaration optionally di erent name haskell declaration 
furthermore translation table mapping names constructors may de ned 
example declaration typedef enum gtk window toplevel gtk window dialog gtk window popup hook enum hs generates data deriving enum identi er mentioned hook type name referring enumeration example tag enum declaration 
optionally possible give haskell de nition di erent name type example 
argument hook enclosed braces called translation table 
contains item speci es common identifier macro notation replaced haskell 
explicit translations haskell names speci ed form cname take priority translation rule 
example values assigned haskell corresponding 
allows explicitly de ne values enumerator values explicitly hs generates customised enum instance new data type derived instance 
guarantees library updated re generating binding hs pick changes enumerations 
libraries occasionally de ne enumerations set macro pre processor define statements enum declaration 
hs provides support enumerations 
example define gl clamp define gl repeat define gl clamp edge opengl header hook enum define wrapping gl clamp clamp gl clamp edge gl repeat repeat generate corresponding haskell data type de nition including explicit enum class instance associates speci ed enumeration values 
hs implements variant enumeration hooks generating enum declaration form enum wrapping clamp gl clamp gl clamp edge repeat gl repeat processing enumeration hook including pre processing de nition pre processor resolve macro de nitions 
call hooks call hooks specify calls functions 
example understand value enumerator haskell integer value associated virtue enum class method 
call gtk radio button new calls function gtk radio button new 
ghc ffi requires external function foreign declaration 
declaration automatically added module hs 
function de ned gtk radio button new group header le hs produces declaration foreign import ccall gtk radio button new gtk radio button new addr io addr assume call module previous example context hook dynamic library assuming compiling elf linux system solaris added declaration 
declaration identi er quotes speci es name function identi er bound haskell name 
default equal optionally alternative name haskell object necessary name constitute legal function identi er haskell 
hs infers type foreign declaration function prototype header le 
argument result gtk radio button new pointers addr haskell side 
clearly marshaling required shall come back point subsection 
default result returned io monad function may side ects 
case attribute fun call hook 
example call fun sin get declaration foreign import ccall sin float float furthermore attribute unsafe added routines reenter haskell runtime system call back corresponds ag ghc ffi 
get set hooks get set hooks related apart di erent keyword syntax 
allow reading writing members structures 
accessed member selected access path expression consists name structure followed series structure indirection operations 
header containing attribute called unsafe call play safe 
naming scheme taken ghc ffi 
typedef struct struct data lower 
rest omitted binding le example contain hook get lower reading header hs complete information layout structure elds need foreign function call access structure elds necessary address arithmetic performed haskell 
signi cantly speed access compared information header le available 
enumeration hooks su cient re run hs adjust address arithmetic get set hooks library updated 
get set hooks expand functions type addr io res addr res io respectively res primitive type computed hs accessed structure member de nition header le 
marshaling primitive type haskell types discussed subsection 
hs allows exibility way hook may refer structure de nition 
type name associated structure typedef declaration name tag structure declaration get lower 
type name pointer structure 
exibility important libraries adopt varying conventions de ne structures want avoid editing header include de nition hs 
mentioned section complex data structures gtk widgets preferable access individual structure members marshaling complete structures 
example case couple scalar members lower interest application program structure large part larger linked widget tree 
marshaling library call set get hooks argument result types primitive types directly supported ffi example called gtk radio button new result call addr header repeated gtk radio button new group function returns 
obviously gap lled 
task library hs contains routines handle storage allocation convert haskell lists arrays handle parameters 
library provides basic blocks composed programmer match requirements speci ed api necessities haskell interface 
library covers standard cases marshaling gets complex programmer may de ne additional routines 
pre de ned user de ned data interface schemes green card entirely coded plain haskell 
library speci marshaling case gtk library radio button type gtk widget hierarchy indirect instance 
header le says gtk radio button new returns pointer 
perfectly ok gtk implements widget instances means structures initial elds identical pointer matter elds accessible way represent haskell 
haskell interface de nes newtype addr uses type classes represent widget hierarchy 
result marshaling result gtk radio button new explicitly speci ed 
reasons rooted gtk speci cation argument type group haskell interface 
de nition binding le io liftm call gtk radio button new function liftm part haskell standard library applies function result monad 
constant part ffi library addr contains null pointer 
important point notice complex libraries built conventions usually informally speci ed api documentation re ected formal interface speci cation 
tool free interface programmer burden designing appropriate marshaling routines cases elegant mapping api constraints completely di erent type system haskell challenging part implementation haskell binding 
design decision hs point denote marshaling haskell programmer full expressive power abstraction facilities haskell hand solve task 
standard marshaling library hs comes hs provides range routines cover common marshaling requirements bit size adjustment primitive types marshaling lists handling parameters common exception handling 
unfortunately complete discussion library scope look typical examples 
conversion primitive types 
primitive haskell type int bool hs provides conversion class maps haskell representation possibly representations vice versa 
example case get hook applied struct subsection provide pointer widget structure argument get hook marshal resulting value type haskell 
implement member function class 
newtype adjustment adjustment addr adjustment io float adjustment liftm get lower interaction interface generator haskell overloading mechanism crucial 
explained subsection get hook expand function type addr io res res haskell type corresponding concrete type typedef computed interface generator header 
overloaded function haskell compiler select instance matching res float 
words instance type provides marshaling routines float 
allows write generic marshaling code exact knowledge types inferred hs header les 
particular importance integer types come varying bit size 
compound structures 
widget line text eld edited routine void gtk entry set text entry const text requires second argument marshaling string haskell direct support passing lists ghc ffi 
hs helps providing support storage allocation representation conversion passing lists values haskell classes contain methods convert haskell structures addresses referencing representation structure 
particular converts type instance type representation 
newtype entry entry addr entry string io entry text call gtk entry set text unsafe marsh text free member family functions marshals arguments haskell back 
conversion speci ed left reverse direction right 
routine free simply deallocates memory area marshaling 
variants functions discard values returned routines 
addition marshaling strings routines generally handle arguments 
implementation application hs interface generator hs implemented publicly available link section 
provides rough overview current implementation reports rst experiences approach interfacing described 
implementation interface generator entirely implemented haskell compiler toolkit 
heavy toolkit self optimising parser lexer libraries particular full lexer parser header les included 
haskell binding modules fully analysed 
lexer lexer library meta actions distinguish reads characters belonging standard haskell code binding hook 
haskell code simply collected subsequent copying generated plain haskell module binding hooks fully decomposed parsed rules appendix header binding module read hs converts binding hooks plain haskell code nally outputs resulting haskell module 
expansion hooks de nitions header le referenced binding hooks analysed far required produce binding code general tool recognise errors de nitions analyse de nitions directly referred binding hooks header le checked errors compiling library standard compiler errors detected binding tool properly reported 
lazy strategy analysing de nitions lot sense considering preprocessed header le includes de nitions headers directly indirectly includes case main header gtk gtk library pre processor generates le kb contains signi cant amount white space 
analysis performed declarations standard sense subset semantic analysis performed normal compiler 
detailed discussion lead new insights 
details information expand various forms binding hooks interesting exceed space limitations placed 
hs source code documentation freely available constitutes ultimate questions implementation 
application idea hs arose context implementation haskell binding gtk graphical user interface toolkit 
naturally gui toolkit important application binding generator 
haskell binding gtk originally coded directly top ghc new ffi currently rewritten hs 
resulting code compact cross checking consistency headers signi cantly improved hs 
libraries gnome desktop project include library implementing protocol called 
haskell binding implemented rst application hs library structured di erently gtk 
library relatively small enumeration types structure declaration functions interfaced 
haskell binding module lines excludes empty lines lines containing comments expanded hs line plain haskell module 
exactly code written manually programmer ghc ffi 
hs reduced coding ort terms lines code assuming binding coded manually marshaling library hs available 
judging experience gtk amount saved smaller library interface complex library speci marshaling required 
respects hs builds lessons learned green card 
avoids complexity new interface speci cation language re existing interface speci cations replacing data interface schemata marshaling coded plain haskell 
simpli ed providing comprehensive marshaling library covers common marshaling situations 
green card pioneered basic concepts haskell interfacing hs de nitely pro ted 
hs demonstrates viability dual language tools demonstrates interface speci cations languages concerned jointly bridge gap languages di erent haskell 
advantages approach binding hooks necessary cross complementary de nitions interfaces signi cantly simpler dedicated interface languages existing library interfaces reused form 
saves allows consistency checks interfaces particularly important interfaced library exists independently developed 
direct support headers indication attractiveness approach 
hs far proved valuable developing haskell binding gtk gnome libraries 
experience required thorough evaluation 
experience ghc new ffi provides nice basic interface foreign functions haskell 
highly recommend inclusion haskell standard 
haskell value general purpose language severely limited foreign language support important aspect language de nitely standardised 

functionality hs largely motivated requirements gtk 
large complex system expected interesting problems binding encountered implementation haskell binding gtk 
conventions di erent libraries vary signi cantly extensions may attractive added experience furthermore hs allows programmer direct access ffi haskell system appropriate additional functionality required 
fact couple areas extensions desirable support accessing global variables needed tool help generating signatures call back routines marshaling code functions generated automatically better type safety address arguments results marshaling complete structures direct convenient currently done mixture set get hooks dedicated haskell code 
regarding point functions simple signatures marshaling code obvious generated automatically 
code bit concise easier maintain 
regarding point pointer arguments functions mapped type addr haskell impossible haskell compiler recognise errors exchanged arguments 
interesting variant addr gets additional type argument name type referred address 
types type tag generated haskell newtype declaration 
allow hs generate di erent instances parametrised addr type di erent types probably signi cantly enhance consistency checks haskell interface 

am grateful michael hobbs discussions gtk binding part motivation starting think hs 
furthermore gabriele keller sven panne alastair reid michael weber anonymous referees helpful comments suggestions 

david 
automated scripting 
dr dobb journal february 

manuel chakravarty 
compiler toolkit haskell 
www cse 
unsw edu au haskell 

manuel chakravarty 
gtk binding haskell 
www cse unsw 
edu au haskell gtk 

manuel chakravarty 
lazy lexing fast 
middeldorp sato editors proceedings th fuji international symposium functional logic programming lecture notes computer science 
springer verlag 

finne leijen erik meijer simon peyton jones 
calling hell heaven heaven hell 
proceedings acm sigplan international conference functional programming 
acm press 

finne leijen erik meijer simon peyton jones 
direct binary foreign language interface haskell 
proceedings acm sigplan international conference functional programming icfp pages 
acm press 

eric harlow 
developing linux applications gtk 
new riders publishing 

simon peyton jones simon marlow conal elliott 
stretching storage manager weak pointers names haskell 
proceedings international conference functional programming 

nordin simon peyton jones alastair reid 
green card interface haskell 
proceedings haskell workshop 

common object request broker speci cation rev 
technical report object management group framingham ma 

havoc pennington 
gtk gnome application development 
new riders publishing 

simon peyton jones philip wadler 
imperative functional programming 
acm symposium principles programming languages pages 
acm press 

haskell non strict purely functional language 
haskell org definition february 

swierstra duponcheel 
deterministic error correcting combinator parsers 
john launchbury erik meijer tim sheard editors advanced functional programming volume lecture notes computer science pages 
springer verlag 

haskell ffi team 
primitive foreign function interface 
www dcs 
gla ac uk fp software ffi html 
grammar binding hooks grammar binding hooks appearing haskell binding modules formally de ned 
string denotes string literal ident variable constructor identi er lexically includes identi ers 
occurs translation table rst entry 
hook inner binding hook inner context set context type ident type name enum trans map enumeration call fun unsafe call function get apath read structure member set apath write structure member lib string prefix string context options ident ident possibly renamed identi er apath ident access path identi er apath dereferencing apath ident member selection apath ident indirect member selection trans alias translation table alias standard mapping ident ident associate identi ers 
grammar binding hooks 
generally noted case enumeration hook referenced object may enum tag type name associated enumeration type typedef declaration 
similarly case set get hook name object rst access path may struct union tag type name associated structure type typedef declaration pointer structure type admitted 
identi ers access path need member structure accessed level 
type hook type name 
