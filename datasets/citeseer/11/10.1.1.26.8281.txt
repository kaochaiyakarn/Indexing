enhancing scalability usability computational grids logical user accounts virtual file systems kapadia kapadia purdue edu renato figueiredo purdue edu jos fortes fortes purdue edu school electrical computer engineering purdue university west lafayette usa elaborates mechanisms users data applications decoupled individual computers administrative domains 
mechanisms consist logical user accounts virtual file system introduce layer abstraction physical computing infrastructure virtual computational grid perceived users 
abstraction converts compute servers interchangeable parts allowing computational grid assemble computing systems run time limited traditional constraints associated user accounts file systems administrative domains 
described approach deployed context punch purdue university network computing hubs unique ability integrate unmodified applications commercial ones existing computing infrastructure heterogeneous wide area network computing environment 

network centric computing promises revolutionize way computing services delivered user 
analogous power grids distribute electricity today computational grids distribute deliver computing services users anytime 
corporations universities able source computing needs individual users able access software web computing portals 
elaborates mechanisms users data applications decoupled individual computers administrative domains 
mechanisms consist logical user accounts virtual file system introduce layer abstraction physical computing infrastructure virtual computational grid perceived users 
abstraction converts compute servers interchangeable parts allowing computational grid assemble computing systems run time limited traditional constraints associated user accounts file systems administrative domains 
described approach unique ability integrate unmodified applications commercial ones existing computing infrastructure heterogeneous wide area network computing environment 
conducted context punch purdue university network computing hubs 
punch platform internet computing turns world wide web distributed computing portal 
designed operate distributed limited trust environment spans multiple administrative domains 
users access run applications standard web browsers 
applications installed little minutes 
machines data applications computing services located different sites managed different entities 
punch operational years today routinely users dozen countries 
provides access engineering applications vendors sixteen universities research centers 
punch experienced www punch purdue edu courtesy accounts available 
organized follows 
section describes problems way users data currently associated computing systems administrative domains manner association dynamic 
section explains core concepts logical user accounts 
section describes ways virtual file system implemented provides performance analysis punch approach 
section outlines new paradigm allows computational grids custom build computing systems run time 
section describes related section presents concluding remarks 

decoupling users data applications hardware today computing systems tightly couple users data applications underlying hardware administrative domain 
example users tied individual machines way user accounts data applications typically tied administrative domain way local file system 
causes problems context large computational grids outlined 
ffl users need real accounts single machine access 
causes logistical problems terms controlling user access managing user accounts increases complexity resource management solutions attempt automatically allocate resources users 
ffl organizations may add new users remove existing ones change users access capabilities time 
computational grid information propagated large number resources distributed multiple organizations 
doing timely manner difficult proposition best 
ffl policies sharing resources may change time may tied dynamic criteria system load 
giving users direct access resources permanent user accounts difficult implement enforce policies 
ffl data applications typically accessible users local file system implicitly tied single administrative domain 
nfs example assumes user identity unix uid machines making difficult scale administrative boundaries 
wide area file systems afs exist commonly deployed 
order deliver computing service scalable manner necessary effect fundamental change manner users data applications associated computing systems administrative domains 
change brought introducing layer abstraction physical computing infrastructure virtual computational grid perceived users 
abstraction layer formed way key components logical user accounts virtual file system 
network operating system conjunction appropriate resource management system components build systems systems run time described section 
abstraction converts compute servers interchangeable parts allowing computational grid broker resources entities users application service providers storage warehouses cpu farms 
described approach deployed successfully punch employs logical user accounts virtual file system service access remote data demand network operating system resource management service manage computing resources spread administrative domains 

logical user accounts traditionally user account expressed numeric identifier unix uid belongs person user 
numeric identifier permanently assigned person regardless person actively making computing resources 
see user account conceptualized dynamic entity consider example telecommunications infrastructure 
person telephone call equipment required service call allocated demand 
initially dial tone generator allocated 
subsequently telephone number person establish path source destination set switches 
key dial tone generators switches interchangeable making unnecessary permanently assign specific user 
simple realization allows telephone companies entire telecommunications infrastructure service 
spite dynamic allocation resources companies broker resources track usage maintain privacy individual calls 
similar solution applied user accounts computing systems 
key treat numeric identifiers associated user accounts local operating systems interchangeable entities recycled users demand 
approach user allocated numeric identifier attempts initiate run session identifier reclaimed system run ses sion complete 
user accounts represented dynamically recycled numeric identifiers called shadow accounts 
discussion explains functionality traditional user accounts preserved shadow accounts 
user account serves functions stores data protects privacy data allows administrators control access computing resources facilitates accounting ensures accountability 
functions preserved presence dynamic account allocation follows 
ffl shadow accounts recycled users data dynamically associated shadow account allocated user 
manner accomplished described section 
beneficial side effect disk space directly allocated shadow account local scratch space may required applications ffl privacy data ensured guaranteeing shadow account machine simultaneously allocated multiple users 
presence local file systems nfs guarantee unique allocation shadow accounts machines common file system 
task allocating shadow accounts handled local resource management system 
ffl access computing resources controlled way network operating system resource management system 
users direct access resource easier implement enforce dynamic usage access control policies 
distributing access control functions appropriately ensure organizations control resources 
situations users need access accounts special privileges handled dynamically setting privileges allocated shadow account managing multiple pools shadow accounts set privileges 
ffl audit trails enhanced include information allocation shadow accounts 
accounts checked local resource management system subsequently context resource management system logical entity consisting wide area resource management service local administrative domain resource management solutions 
checked job completion relatively simple keep track shadow account time 
access control distributing functionality appropriately ensure audit logs generated site administrative domain 
logical user account simply capability allows user check shadow account appropriate computing resources corresponding resource management systems 
scalability approach consequence factors 
logical user accounts association real computing resources deferred user attempts initiate run session 
need priori propagation user specific information resources computational grid 
possible local administrators add remove users modify capabilities associated logical user accounts 
advantage logical user accounts allow capabilities inherited way association 
example purdue students allowed access machine corresponding resource management system instructed simply verify user affiliation 
brokered environment blocks shadow accounts assigned specific administrative domains institution department group department allowing individual domains manage users 

virtual file system virtual file system provides dynamic mapping user files shadow accounts described previous section 
today computing environments user files generally stored individual machines laptop centralized file servers combination 
cases files reside accounts directly accessible user login name password indirectly accessible shared file system 
large dynamic environment need transparent replication migration data reliability performance reasons association user files specific account introduces constraints limit computing system ability manage data 
virtual file system approach described provides effective mechanism decouple association 
approach files stored file accounts 
file account typically stores files user computing system may move files file accounts necessary 
access files brokered virtual file system users directly login file account 
currently deployed punch system example user files multiplexed single file account 
file account contains top level sub directory punch user files associated users basis positions directory tree 
virtual file system establish run time mapping user files shadow account allocated user 
guarantee user able access files authorized access 
virtual file system implemented approaches 
ffl simplest option explicitly transfer files 
example computing system copy user files shadow account just initiating run session copy files back run session complete 
approach obvious disadvantages result large amounts unnecessary data transfer require complex coherency protocol developed order support multiple simultaneous runs sessions 
variation theme allow require users explicitly specify files transferred 
approach commonly referred file staging 
file staging works issues redundant data transfer coherency problems manually resolved user suitable situations user know files required priori true cad session applications applications tend read write relatively small portions large files database type applications 
ffl possibility leverage implicit file transfer mechanisms 
approach relies system call tracing mechanisms context ufo 
entire files need transferred process automated 
transfer side effect application attempting open file 
primary disadvantage approach highly dependent easily support file system operations locks symbolic links 
top level sub directories equivalent home directories unix file servers fact files directories owned single unix level account 
ffl third option reuse existing implicit block transfer capabilities building standard widely file system protocol nfs 
ways accomplish goal 
enhance nfs client server code computational grid environment 
require kernel level changes version operating system platform grid 
second option standard nfs clients conjunction custom user level nfs servers 
approach viable involves significant software development 
third attractive option nfs call forwarding 
solution works standard nfs clients servers introducing middle tier proxy negotiates dynamic mappings required virtual file system 
proxy relatively simple implement needs receive modify forward standard remote procedure calls rpc 
proxy nfs call forwarding solution works follows 
user attempts initiate run session shadow account allocated user 
proxy daemon spawned file server manages file account user files stored 
daemon configured accept requests user unix uid shadow account machine ip address compute server 
daemon configured compute mounts file system proxy daemon standard unix mount command 
valid nfs requests proxy modifies user group identifiers shadow account identifiers file account arguments nfs remote procedure calls 
forwards requests native nfs server privileged proxy 
privileged proxy runs user level process access pre opened privileged socket 
configuration allows virtual file system exist native configuration mount protocol local area network 
depicts example configuration virtual file system scenario user allocated shadow account shadow machine user allocated shadow account shadow machine 
file server user level proxy daemons listening ports authenticate requests clients map shadow shadow uid punch file account forward rpc requests kernel level server privileged proxy listens port 
shows examples mount commands issued compute servers client nfs client nfs server nfs compute server shadow shadow kernel kernel authenticate shadow ip map id shadow id punch map id shadow id punch authenticate shadow ip port port compute server kernel privileged proxy user level proxy user level proxy port file server port disk home punch home punch authenticate punch localhost map id punch id punch mount home punch mount home punch 
proxy nfs virtual file system model currently deployed punch 

example assumes punch file account user accounts laid sub directories home punch file server 
path provided mount command ensures access parent directory home punch user access files users 
main disadvantage nfs call forwarding solution introduces certain amount overhead file system transaction 
overhead primarily function rpc handling context switching actual operations performed proxy simple efficient 
provide quantitative feel amount overhead introduced discussion reports performance analysis obtained running andrew file system benchmark ab virtual file system 
benchmark consists sequence unix file commands different types directory creation file copying file searching compilation models workload typical software development environment 
analysis considers execution ab client machine described table 
different server configurations evaluated fast machine medium speed workstation slow workstation 
configurations chosen study impact server performance overhead introduced virtual file system proxy 
additional access control introduced server side dynamically reconfiguring exports file export specific subdirectories specific machines introducing proxy mount protocol 
combination client server file system samples ab executions collected minute intervals period days 
sample corresponds execution single instance ab single nfs client 
machines experiments nodes live punch system client machine execution units primary punch file server 
results ab experiments summarized table nfs refers native nfs setup vfs refers virtual file system setup server side user level privileged proxies 
nfs vfs version protocol kbyte read write buffers 
execution time ab sensitive client machine load 
order achieve equivalent average loads nfs vfs configurations servers nfs vfs experiments scheduled day time slot server 
average loads summarized table show processor client machine idle overloaded experiment 
results show fast server difference performance nfs vfs small average 
performance overhead vfs relatively larger slower servers 
explained fact overhead introduced vfs cpu bound rpc processing phase nfs transaction 
fast server processor overhead small respect network disk machine cpus cpu type memory network mhz ultrasparc gb mb solaris mhz ultrasparc gb mb solaris mhz ultrasparc mb mb solaris mhz sparc mb mb solaris table 
configuration client server machines performance evaluation 
nodes connected switched ethernet network sub network sits different sub network 
server mean stdev min max load nfs vfs nfs vfs nfs vfs table 
mean standard deviation minimum maximum execution times seconds samples andrew benchmark runs file systems mounted servers 
load average load processor client measured prior execution benchmark 
components nfs 
clear results vfs expected perform relatively low overhead typical fast file servers 

building systems systems fly delivering computing service requires underlying infrastructure able negotiate resources institutional boundaries electricity different utility companies 
punch facilitates negotiation dynamically assembling systems systems run time 
example illustrates capability bring resources demand 
consider user wants run application vendor data happens reside remote storage warehouse 
punch environment user connects punch computing portal standard web browser provides location storage warehouse clicks application interest 
point punch dynamically builds necessary computing environment user provides appropriate desktop user need worry physical location resources site specific configurations policies 
punch accomplishes task follows 
verifies user authorized run selected application 
punch uses resource management service identify locate select appropriate machine run 
punch selects available shadow account run application shadow accounts explicitly tied individual user 
punch uses virtual file system service mount application data disks selected machine 
punch invokes application selected machine applications graphical user interfaces routes display user browser remote display management technologies vnc 
run complete punch instructs virtual file system service application data disks relinquishes shadow account resources notifying resource management service 

related employing logical user accounts streamlines distributes typically centralized tasks associated creating maintaining user accounts distributed computing environment 
facilitates access control finer granularity possible traditional user accounts 
knowledge punch date system exploit mechanism 
web master worker applications java applets seti home respectively construed run remote machines requiring individual user accounts 
solutions take advantage fact applications run restrictive sand box easily adapted general purpose applications 
systems allow execution shared account remote machines special libraries send operations back user host system 
general solutions require applications modified specifically written environment limiting applicability 
employing virtual file system possible computing system manage data independently constraints imposed user accounts administrative domains 
punch employs sophisticated virtual file system leverages nfs provide demand transfers granularity file segments 
solution non intrusive exists unmodified local area nfs setup performs 
current punch setup virtual file system introduces overhead native nfs 
current grid computing solutions typically employ file staging techniques transfer files user accounts absence common file system 
examples include globus pbs 
indicated earlier file staging approaches require user explicitly specify files need transferred suitable session database type applications 
systems condor utilize remote mechanisms allow applications access remote files 
approach requires applications relinked special libraries making unsuitable situations object source code available commercial applications legion employs modified nfs daemon provide virtual file system 
implementation standpoint approach appealing call forwarding nfs server modified extensively tested compliance reliability 
common user level nfs servers including employed legion tend older version nfs protocol call forwarding mechanism described works version current version 
user approach investigated context punch 
call forwarding mechanism works version nfs 
level nfs servers generally perform kernel servers deployed native operating system 
self certifying file system sfs example virtual file system builds nfs 
primary difference sfs virtual file system described sfs introduces additional parameters nfs remote procedure call semantics 
allows sfs provide encrypted channels results solution uses messages fully compliant nfs protocol specifications requires server side client side proxies 

punch employed logical user accounts early virtual file fall 
virtual file system described place fall 
mechanisms extensively exercised normal punch users 
logical user accounts virtual file system contribute significantly punch ability streamline account management unmodified applications existing computing infrastructure 
partially funded national science foundation eec ecs eia eia academic purdue university 
intel purdue src hp provided equipment punch compute servers 
alexandrov schauser 
extending operating system user level ufo global file system 
proceedings usenix annual technical conference anaheim california january 
alexandrov schauser 
ufo personal global file system user level extensions operating system 
acm transactions computer systems august 
henderson mann 
portable batch system external specification 
technical report technology solutions november 
czajkowski foster karonis kesselman martin smith 
resource management architecture metacomputing systems 
proceedings fourth workshop job scheduling strategies parallel processing 
held conjunction international parallel distributed processing symposium 
grimshaw wulf legion vision worldwide virtual computer 
communications acm january 
henderson 
portable batch system requirement specification 
technical report nas systems division nasa ames research center august 
howard kazar menees nichols satyanarayanan sidebotham west 
scale performance distributed file system 
acm transactions computer systems february 
kapadia figueiredo fortes 
punch web portal running tools 
ieee micro pages may june 
kapadia fortes 
punch architecture web enabled wide area network computing 
cluster computing journal networks software tools applications september 
special issue high performance distributed computing 
litzkow livny mutka 
condor hunter idle workstations 
proceedings th international conference distributed computing systems pages june 
mazi eres kaminsky kaashoek witchel 
separating key management file system security 
proceedings th acm symposium operating systems principles sosp kiawah island south carolina december 
morris satyanarayanan conner howard rosenthal smith 
andrew distributed personal computing environment 
communications acm march 
pawlowski smith hitz 
nfs version design implementation 
proceedings usenix summer technical conference 
richardson stafford fraser wood hopper 
virtual network computing 
ieee internet computing january february 
spector kazar 
wide area file service afs experimental system 
unix review march 
white grimshaw nguyen 
grid file access legion model 
proceedings th ieee international symposium high performance distributed computing hpdc pages pittsburgh pennsylvania august 
