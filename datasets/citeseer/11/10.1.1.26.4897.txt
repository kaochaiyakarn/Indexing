exploiting style architectural design environments david garlan robert allen computer science department carnegie mellon university pittsburgh pa design software architectures emerges discipline software engineering increasingly important support architectural description analysis tools environments 
describe system developing architectural design environments exploit architectural styles guide software architects producing specific systems 
primary contributions research generic object model representing architectural designs characterization architectural styles specializations object model toolkit creating open architectural design environment description specific architectural style 
experience implementing illustrate style oriented architectural design raises new challenges software support environments 
critical aspect complex software system architecture 
architectural level design system typically described composition high level interacting components 
frequently descriptions informal box line diagrams depicting gross system described idiomatic characterizations clientserver organization layered system blackboard architecture architectural designs important reasons 
architectural description complex system intellectually tractable characterizing high level abstraction 
particular architectural design exposes top level design decisions permits designer reason satisfaction system requirements terms assignment functionality design elements 
second architectural design allows designers exploit recurring patterns system organization 
detailed patterns architectural styles ease design process providing routine solutions certain classes problems supporting reuse underlying implementations permitting specialized analyses 
practice architectural design largely ad hoc topic receiving increasing attention researchers proceedings acm sigsoft symposium foundations software engineering december new orleans la john practitioners areas module interface languages domainspecific architectures software reuse codification organizational patterns software architectural description languages formal underpinnings architectural design architectural design environments 
collectively efforts working put architectural design solid basis principles techniques architectural design widely accessible 
architectural design emerges explicit discipline software engineering increasingly important support architectural description analysis tools environments 
see proliferation environments oriented specific architectural styles 
environments typically provide tools support particular architectural design paradigms associated development methods 
examples include architectures data flow mak object oriented design blackboard shells nii control systems bv reactive integration fro 
unfortunately environment built independent hand crafted effort great cost 
development efforts may exploit emerging software environment infrastructure persistent object bases tool integration frameworks user interface toolkits architectural aspects typically redesigned reimplemented scratch new style 
cost efforts quite high 
built environment typically stands isolation supporting single architectural style tailored particular product domain 
describe approach helps ameliorate situation 
focusing issue architectural style show adapt principles technology generic software development environments provide style specific architectural support 
specifically show generate architectural design environments description architectural style 
general purpose environment technology approach committed particular architectural style development method 
general purpose approaches provide specific mechanisms define new architectural styles styles designing new systems 
remainder describe system called aesop developing style oriented architectural design environments 
show primary contributions research generic object model representing architectural designs characterization architectural styles specializations object model subtyping toolkit creating open architectural design environment description specific architectural style 
related software development environments past decade considerable research development area automated support software development tool integration frameworks ger environment generators toolkits rt process oriented support facilities typically provide generic support aspects software development specialized instantiated particular development environment 
inputs specialization process include things bnf description programming language lifecycle model process model set broadcast message definitions builds heritage philosophically materially focuses specific task architectural design 
standard building blocks software development environments construct style specific environments databases tool integration frameworks structure editor generators user interface frameworks describe section tailored building blocks specific task describing analyzing architectural designs 
consequently complements existing technology software development support environments nicely 
particular architectural design environments produced system coexist existing software development tools environments 
software architecture emerging field software architecture research closely related subareas 
area environments support specific architectural styles 
outlined share efforts goal supporting architectural development exploiting architectural styles 
attempts reduce cost building environments providing common basis implementing certain key parts 
research attacking general problem 
second area research aimed providing rigorous basis architectural specification design gn ag pw 
extent research clarifies nature architectural representation meaning architectural style builds results 
particular basic model architectural representation section elements style description section emerged result experience formalization architecture 
tools resulted efforts formalize software architecture architectural compatibility checkers ag refinement tools natural candidates tools style specific environments 
third research languages architectural description 
efforts focused providing general purpose architectural description languages linguistic mechanisms component specification generation tools support 
general area systems closely related luckham rapide system lak shaw unicon system sdk 
rapide provides general purpose system description language events event patterns tools executing monitoring systems described language 
unicon provides general purpose architectural description language tool currently focuses problem making possible combine wide variety component connector types system design 
cases focus general purpose nature languages providing universal platform architectural designs 
contrast research aims exploit architectural style provide powerful support families systems constructed boundaries style 
willing trade generality power single universal architectural development environment promote lot possibly interoperating style specific environments 
environment limits scope applicability token provides new opportunities design guidance analysis synthesis 
software architecture architectural style 
currently single accepted definition software architecture generally recognized architectural design system concerned describing gross decomposition computational elements interactions pw gs gp 
issues relevant level design include organization system composition components global control structures protocols communication synchronization data access assignment functionality design elements physical distribution scaling performance dimensions evolution selection design alternatives 
possible describe architecture particular system arbitrary composition idiosyncratic components 
designers tend reuse set established architectural organizations architectural styles 
architectural styles fall broad categories 
idioms patterns category includes global organizational structures layered systems pipe filter systems clientserver organizations blackboards includes localized patterns model view controller kp object oriented patterns coa ghjv 
models category includes system organizations prescribe specific parameterized configurations components interactions specific application areas 
familiar example standard organization compiler lexer parser optimizer code generator pw 
architectures include communication models iso osi layer model mcc user interface frameworks large variety domain specific areas avionics bv mobile robotics hr 
specifically observe architectural styles typically determine kinds properties 
provide vocabulary design elements component connector types pipes filters clients servers parsers databases 
define set configuration rules topological constraints determine permitted compositions elements 
example rules prohibit cycles particular pipe filter style specify client server organization relationship define specific compositional pattern pipelined decomposition compiler 

define semantic interpretation compositions design elements suitably constrained configuration rules defined meanings 

define analyses performed systems built style 
examples include schedulability analysis style oriented real time processing ves deadlock detection client server message passing jc 
specific important special case analysis code generation styles support application generation parser generators enable reuse code certain shared facilities user interface frameworks support communication distributed processes 
architectural styles number significant benefits 
promotes design reuse routine solutions wellunderstood properties reapplied new problems confidence 
second architectural styles lead significant code reuse invariant aspects architectural style lend shared implementations 
example systems described pipe filter style reuse unix operating system primitives implement task scheduling synchronization communication pipes 
similarly client server style take advantage existing rpc mechanisms stub generation capability 
third easier understand system organization structures 
example giving details characterization system clientserver organization immediately conveys strong image kinds pieces fit 
fourth standardized styles supports interoperability 
examples include corba object oriented architecture cor osi protocol stack mcc event tool integration ger 
fifth noted constraining design space architectural style permits specialized style specific analyses 
example possible analyze systems built pipe filter style schedulability throughput latency deadlock freedom 
analyses meaningful arbitrary ad hoc architecture constructed different style 
particular styles possible generate code directly architectural description 
sixth usually possible desirable provide visualizations 
possible provide graphical textual renderings match engineers domain specific intuitions designs depicted 
automated support architectural design benefits surprising proliferation architectural styles 
cases styles simply informal conventions 
cases mature styles tools environments produced ease developer task conforming style getting benefits improved analysis code reuse 
take illustrative industrial examples hp helps developers build applications conform particular event style fro 
applications integrated system interface permits interact tools event broadcast 
similarly honeywell metah language supporting development tools provide architectural description language real time embedded avionics applications ves 
tools check system description schedulability properties generate glue code handles real time process dispatching communication resource synchronization 
environments specialized specific styles provide powerful support certain classes applications cost building environments quite high typically tool environment built scratch new style 
believe effective discipline software architecture requires way easily develop automated support style style style aesop fable abc generating aesop defining new styles incorporating definitions environments take advantage 
order number foundational questions need answered represent architectural descriptions 
describe architectural styles effectively exploited environment 
accommodate different styles environment 
ensure support architectural development software development activities 
remainder section provide set answers questions 
aesop aesop system developing style specific architectural development environments 
environments supports palette design element types style specific components connectors corresponding vocabulary style checks compositions design elements satisfy topological constraints style optional semantic specifications elements interface allows external tools analyze manipulate architectural descriptions multiple visualizations architectural information graphical editor manipulating 
building existing software development environment technology aesop adopts generative approach 
illustrated aesop combines description style set styles shared toolkit common facilities produce environment called fable specialized style styles 
give flavor approach illustrate different styles result quite different environments consider snapshots different 
illustrates output aesop null style style information 
case user create arbitrary labelled graphs components connectors system provided graphical editor 
components connectors described hierarchically represented architectural descriptions 
descriptions stored persistent object base 
additionally user invoke text editor associate arbitrary text component connector 
terms stylistic properties outlined section design vocabulary generic components connectors topologies unconstrained semantic interpretation analyses confined topological properties existence cycles dangling connectors 
associated tools consist graphical editor text editor annotations 
resulting environment provides little informal box line descriptions find number case environments 
contrast shows fable pipe filter style 
case style identifies ways described specific vocabulary components filters connectors pipes 
filters perform stream transformations 
pipes provide sequential delivery data streams filters 
topological constraints include fact pipes directional pipe connected single port filter 
filters decomposed sub architectures pipes 
furthermore environment uses semantics style provide specialized visualizations support development semantically consistent system architectures 
syntax directed editor may describe computation individual filters 
pipes drawn arrows indicate direction data flow 
color highlight incorrectly attached pipes shown 
environment provides routines check correctly typed data sent pipes build tool uses information design database construct glue code needed compile executable instance system 
third example illustrates environment event style similar field rei ger 
environment components active event announcing objects connectors drawn kind software bus events received components 
case connector opened expose underlying representation event dispatcher 
sub architecture described different style rpc main connector dispatcher acts server client server style 
example illustrates heterogeneous styles single fable 
style represent internal structure component differ style component appears 
brief overview background turn technical design aesop 
structure fable aesop adopts conventional structure environments fable organized collection tools share data persistent object base 
object base runs separate server process provides typical database facilities transactions concurrency control persistence initial prototype style shown example partially implemented current prototype 
style fable database built public domain oriented database 
tools run separate processes access object base rpc interface called fable machine fam defines operations creating manipulating architectural objects 
interface defined set object types linked tools intend directly manipulate architectural data 
additionally tools register interest specific data objects notified change 
currently hewlett packard ger event tool invocation 
mechanism serves integrate external tools 
example pipe filter environment described code generated announcing message suitably encapsulated code generation tool 
tools external editors handled way 
user interface fable centered graphical editor database browser provided aesop system 
illustrated examples earlier explained detail tool customized provide style specific displays views 
current graphical editor framework interviews gui toolkit 
editor provided default important note runs separate tool easily replaced augmented interface tools 
example added alternative interface tcl tk ous 
representing architectural designs persistent object base architectural representation important question types objects stored database 
answer question critical version exodus storage manager 
pipe filter fable event fable tool gui binding component port fable machine persistent object base configuration role connector generic elements architectural description tool tool 
structure fable effect answers deeper question architectural design represented 
approach architectural representation generic ontology entities components connectors configurations ports roles representations bindings 
see 
basic elements architectural description components connectors configurations 
components represent loci computation connectors represent interactions components configurations define topologies components connectors 
components configurations interfaces 
component interface defined set ports determine component points interaction environment 
connector interfaces defined set roles identify participants interaction 
architectural descriptions hierarchical way describe contents component connector 
refer description representation 
example figures illustrated architectural representations component connector respectively 
descriptions way define correspondence elements internal configuration external interface component connector 
binding defines correspondence binding identifies internal port external port connectors internal role external role 
aesop system ontology realized fixed set class definitions types architectural building block represented class 
operations supported classes include adding removing ports components argument representation connectors class semantic entities scope ag sha 
formal treatment architectural model see 
note interaction bindings identify equivalences interface points 
connectors associate roles port port port role role 
connecting connector role component port establishing binding ports roles adding new representation component connector collectively classes define fable machine interface null style environment 
cases representation component connector architectural se 
example component representation specifies functionality code module describes implementation 
similarly connector representation specifies protocol ag 
information best manipulated external non architectural tools compilers proof checkers stored external database file system 
accommodate external data provide subtype representation called external rep turn subtypes text file rep oracle rep ast rep usually interpreted tools access 
external representations provide external data integration aesop environments 
leaving outline generic object model architectural representation worth highlighting aspects approach unusual 
view architecture compositions components connectors appears gaining general acceptance approach distinctive features 
treatment connectors class entities interfaces set roles may associated semantic descriptions 
supports conviction proper foundation architecture allow creation new kinds glue combining components 
second treatment representation architectural entities multiple descriptions representing alternative implementations specifications views 
approaches unicon rapide architectural element single implementation defines truth 
case truth eye tool uses architectural information derive related artifacts executables 
third generic interface intentionally minimal provide bare framework architectural description leaving additional information added stylistic elaborations 
efforts attempt provide single universal style build primitive notions event patterns particular interface specification languages richer vocabularies connectors 
de ning styles generic object model provides foundation representing architecture 
obtain useful environment framework augmented support richer notions architectural design 
aesop done specifying style 
model adopted style definition principle subtyping style specific vocabulary design elements introduced providing subtypes basic architectural classes subtypes 
stylistic constraints supported methods types 
additionally style identify collection external tools may specifically written perform architectural analyses links external software development tools 
proposing subtyping discipline important clear underlying semantic model 
specifically ways behavior overriding 
system rule architectural subclasses respect semantic behavior superclasses 
term currently wright language ag define semantics connectors collection protocols 
fam bool pf source attach fam port fam subtype fam type pf write type return false return fam port attach code check source role attachment respect non standard way 
implying behavioral equivalence defined example liskov wing lw require subclass provide strict subtyping behavior operations succeed may introduce additional sources failure 
see useful necessary consider operation adds port component 
generic case kind port may added component result list ports requested new port member result 
case filter pipe filter style may want allow port added filter instance port types defined style input output port 
reasonable cause invocation fail parameter types 
hand input output port added observable effect generic case 
shows code doing 
provide concrete detail sorts styles built behave provide brief descriptions styles 
style outline design vocabulary characterize nature configuration rules explain semantics encoded describe analyses carried tools environment 
pipe filter style indicated earlier pipe filter style supports system organization asynchronous computations connected dataflow 
vocabulary 
illustrates type hierarchy define pipe filter style 
filter subtype component pipe subtype connector 
ports differentiated input output ports roles separated sources sinks 
configuration rules 
pipe filter style constrains kinds children connections allowed system 
constraints port addition described pipes take data ports capable writing data deliver ports capable reading 
source roles attach input ports sink roles attach output ports 
shows constraint enforced method new pf source class 
configuration rules equally simple prohibiting cycles considerably complex 
semantic interpretation 
prototype pipe filter semantics filters simple style specific filter language illustrated 
associated tool gandalf hn provides typechecking static analyses 
semantics pipes described formally line ag 
course automatically enforced 
design object component connector port role representation binding filter stage include filter header void split left right char buf int declarations dup close dup left dup left right dup right num cons close close close close declarations declarations buf char char read write left buf buf char char read write right buf pipe input output source sink generated code split filter definition external rep configuration 
style definition subtyping pf configuration pipeline analyses 
addition static semantic outlined incorporated tool generating code filter descriptions 
pipe filter description generate running program help style specific tool external gandalf tool 
sample output split filter illustrated shown 
shows main body tool manipulating database generate executable code 
pipeline style pipeline style simple specialization pipe filter style 
incorporates aspects pipe filter style filters connected linear order path data flow 
corresponds simple pipelines built unix shell 
pipeline style example stylistic 
vocabulary 
pipeline style defines new stage component subclass filter 
methods identical initialization routine automatically creates single input output port method overridden fail 
configuration rules 
configuration rules parent style addition topology constrained linear 
semantic interpretation 
meaning pipes filters identical meaning parent style 
particular filter description language 
analyses 
tools parent style reused style code written parent style classes 
instances subtypes substituted instances supertypes code written generic styles continue specializations 
compiler pipe filter system pipelines 
similarly tools developed null style cycle checker instances styles section 
example shows number benefits subtyping define styles 
provides simple way extend representation behavior building blocks architectural descriptions 
second supported current methodologies tools debuggers object oriented databases 
third permits reuse existing styles 
new styles built subclassing existing styles 
fourth allows reuse existing tools 
generates code pipe filter system int main int argc char argv fable init event system argc argv build pf init local event system fam initialize argc argv init database arch db fam arch db fetch get top level db pointer arch db open read transaction start read transaction fam object get object parameter argc argv get root object valid type type pf filter type valid filter 
argv invalid parameter close fam terminate exit pf filter root pf filter typed pf aggregate ag find pf aggregate root find root aggregate aggregate print diagnostics code omitted start main write standard start generated main outer io root bind outer ports stdin ag valid pipe names ag write code connect pipes bindings root alias bindings spawn filters ag fork filters finish main write standard generated main filter header num pipes write header file pipe names close close transaction fam terminate terminate fam fable main event loop wait termination event fable finish finish return main main routine generate code pipe filter systems real time style important class system organization divides computations tasks communicating synchronous asynchronous messages 
general category systems satisfy real time scheduling constraints processing data 
created aesop environment architectural style developed university north carolina supports design systems jef 
underlying architectural style body theory analyzing real time systems jef 
theory allows determine scheduling feasibility system processing rates component tasks rates inputs external devices shared resource loads 
theory leads heuristics improving schedulability system feasible 
style applied primarily real time multi media applications 
vocabulary 
real time style defines subtypes component devices identify inputs system processes compute data resources support shared resources disks monitors components associated style specific information rates processing computation loads 
new connector types representing synchronous asynchronous message passing 
configuration rules 
configuration rules include paths processing graph originate devices dangling ports connectors communication resources synchronous input devices may input ports 
semantic interpretation 
semantic interpretation system determined underlying semantics connectors plus code defined tasks 
task code written stylized form pipe filter style provides syntactic guidance reading writing messages ports 
system checks types information consistent connectors code generation supported tools outside system 
analyses 
new style enables kinds analyses 
possible detect resource conflicts 
conflicts arise multiple processes try access resource way processes able maintain processing rate 
second analysis scheduling feasibility system 
determines single cpu support specific configuration devices processes resources 
addition analyses set repair heuristics incorporated tool advises user possible ways improve schedulability resource usage 
heuristics center decreasing load cost shared resources reducing rates certain processes 
style specific tool allows translate architectural description readable external tools built outside project code generation analysis 
currently code targeted real time mach 
event style event style components register interest certain kinds events announce events receive interest 
vocabulary 
event style defines new participant component registers announces receives events 
event bus events components 
configuration rules 
style configuration rules simply state event bus connects components announce receive events 
semantic interpretation 
components permitted communicate events common bus connected receiving component registered interest type event announced sending component 
announced event received zero components pipe filter style written data read component 
analyses 
number analyses possible event styles identifying flow communication components 
pipe filter style language specifying communication behavior participant components compiler built generate code particular event configuration gs 
prototype 
user interface addition providing representational model tools create manipulate architectural descriptions environment provide way user view edit descriptions 
outlined earlier default interface graphical editor automatically provided aesop runs separate tool environment 
produce style specific environment editor potentially interface tools specialized 
accomplish architectural class associated visualization classes 
new subclasses introduced style inherit visualizations superclass may define visualization classes 
induces parallel hierarchy visualization types upper portion hierarchy defined default visualizations generic architectural types 
example obtain visualizations illustrated pipe subclass refer arrow visualization class generic connector line class 
visualization classes refer external editors graphical objects example visualization class pipe filter style invokes structure editor filter code 
visualization classes written highly stylized fashion amenable automatic generation built tool 
style specific user interfaces include object classes operations database particular style 
subclasses generic action classes 
instance user interface pipe filter style may include actions analyze throughput particular configuration generate code unix implementation pipe filter system 
typically operations carried external tools 
evaluation aesop developed investigate hypothesis style specific architectural development environments produced relatively low cost specializing generic architectural model 
research far concentrated important initial steps identifying appropriate generic model developing mechanisms specializing generic model specific styles providing concrete infrastructure support architectural development tools 
starting apply aesop architectural styles past years experimented number common architectural paradigms events client server architectural style aesop 
experience far optimistic ability approach provide useful infrastructure architectural level design software systems 
context prototypes generic object model architectural representation section appropriate starting point architectural description 
provides high level abstraction specialized architectural styles encountered 
time concrete provide solid conceptual structure associated automated developing new styles effectively 
second subtyping model effective structuring task developing new styles 
particular extension generic architectural model new types provides direct way enrich architectural vocabulary design provide new functionality design 
noted section essential semantics subtyping flexible allow subtypes increase failures associated inherited method 
third approach able build existing software environment building blocks persistent object bases tool integration mechanisms user interface toolkits 
provides interface tools environments similar technology simplified effort building aesop 
concretely costs associated developing style substyle vary greatly depending style typically takes day create minimal environment style complexity say real time style illustrated earlier 
includes defining new design vocabulary encoding constraints developing new visualizations 
task cleanly integrating aesop environment existing tools support style specific analyses takes bit longer 
tools interact loosely architectural design source code compilers tool integration little connecting event broadcast mechanism 
hard part adapting tools need directly manipulate database objects typically requires deeper understanding tool implementation 
negative side discovered desired capabilities style oriented architectural design environments difficult handle approach style definition technology aesop 
capabilities fall categories 
category concerns way styles described includes explicit representation stylistic constraints 
currently behavior associated new styles enforcing stylistic constraints enabling new kinds analysis tool support encoded methods architectural types introduced style 
encodings tend obscure invariant properties style bound imperative code methods responsibility enforcement distributed number different methods 
difficult reason style basis aesop definition tell styles conflicting constraints modify policies associated constraint enforcement tool invocation 
approaches explicit rules darwin inter object mediation sn attractive alternatives 
control supertype visibility 
new style defined case types design elements restricted just defined new style 
example pipe filter style may restrict possible port types input output ports allow creation generic ports 
enforced constraint checked port added component 
natural solution allow style designer restrict accessibility type hierarchy 
second category concerns run time behavior environments includes dynamic style descriptions 
current system requires compile style definitions time 
precludes incorporation new styles execution 
turns situations dynamic scheme useful 
example externally developed repository architectural building blocks provide component internal representation characterized terms new style 
type migration 
currently strongly typed object oriented systems object type determined created 
desirable able promote demote type object runtime 
example object created filter happens single input output stage see section pipeline 
get benefits pipelines need type object filter stage handled case case basis uniform mechanism predicate types cha preferable 
features suggest ways style oriented architectural design raises new challenges software support environments 
heterogeneity styles critical 
software development environments centered single implementation language architectural support permit interoperability different design languages 
second requirements reusability lead interest dynamic regimes style inclusion types individual design objects 
programming environments need able introduce new types objects change types existing objects execution 
world interoperating independently developed styles important formal mechanisms specifying new styles detecting conflicts existing ones 
aesop embodies ideas collaborative fellow researchers 
particular strongly influenced daniel jackson mary shaw jeannette wing gratefully acknowledge 
students staff contributed aesop implementation described mike baumann steven fink doron gan jiang curtis scott brian peter su 
anonymous referees constructive suggestions 
research sponsored national science foundation number ccr wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa number siemens corporate research 
views contained document authors interpreted representing official policies expressed implied wright laboratory government siemens 
government authorized reproduce distribute reprints government purposes notwithstanding copyright notation thereon 
referring section analogy architectural style language identification architectural vocabulary language syntax structural constraints static checks semantic interpretations dynamic semantics 
gregory abowd robert allen david garlan 
style give meaning software architecture 
proceedingsof sigsoft software engineering software engineering notes pages 
acm press december 
ag robert allen david garlan 
formal approach software architectures 
jan van leeuwen editor proceedings ifip 
elsevier science publishers september 
ag robert allen david garlan 
definition architectural interconnection 
pro ag ceedings acm interface definition language workshop volume 
sigplan notices august 
robert allen david garlan 
formalizing architectural connection 
proceedings sixteenth international conference software engineering may 
overview pcte pcte 
proc 
rd software development environments symposium november 
bv pam steve 
formal real time architecture specification analysis 
tenth ieee workshop real time operating systems software new york ny may 
carey exodus extensible dbms cha project overview 
zdonik maier editors readings object oriented database systems 
morgan kaufmann 
craig chambers 
predicate classes 
proceedings ecoop 
coa peter coad 
object oriented patterns 
communications acm 
cor common object request broker architecture specification 
omg document number december 
revision draft 
gerard huet gilles kahn bernard lang 
programming environ fro ments structured editors mentor experience 
david howard shrobe erik sandewall editors interactive programming environments 
mcgraw hill book 
brian 
hp bridging generation gap 
technical report hewlett packard software engineering systems division fort collins colorado november 
ger colin 
hp new generation software development tools 
technical report hewlett packard software engineering systems division fort collins colorado november 
ghjv erich gamma richard helm ralph johnson john vlissides 
design patterns micro architectures reusable object oriented design 
addison wesley 
gn david garlan david notkin 
formalizing design spaces implicit invocation mechanisms 
gp vdm formal software development methods pages noordwijkerhout netherlands october 
springer verlag lncs 
david garlan perry 
software architecture practice potential pitfalls 
proceedings sixteenth international conference software engineering may 
panel 
gs david garlan curtis scott 
adding implicit invocation traditional programming languages 
proceedings fifteenth international conference software engineering baltimore md may 
gs david garlan mary shaw 
software architecture 
editors advances software engineering hn knowledge engineering volume new jersey 
world scientific publishing 
nico 
habermann david notkin 
gandalf software development environments 
ieee transactions software engineering se december 
hr barbara hayes roth 
architectural foundations real time performance intelligent agents 
journal real time systems kluwer academic publishers january 
jc ribeiro freire cunha 
configuration programming 
proceedings second international workshop configurable distributed systems march 
jef kevin jeffay 
scheduling sporadic tasks shared resources hard real time systems 
proceedings th ieee real time systems symposium pages phoenix az december 
jef kevin jeffay 
real time producer consumer paradigm paradigm construction efficient predictable real time systems 
proceedings acm symposium applied computing pages indianapolis february 
acm press 
rudolf keller user interface development software environments chiron system 
proc 
th international conference software engineering 
gail kaiser peter feiler steven 
intelligent assistance software development maintenance 
ieee software pages may 
kp krasner pope 
cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming august september 
lak david luckham augustin john james doug bryan walter mann 
specification analysis system architecture rapide 
ieee transactions software engineering appear 
mark linton john vlissides paul calder 
user interfaces interviews 
ieee computer february 
lw barbara liskov 
new definition subtype relation 
proceedings ecoop july 
mak victor mak 
connection inter component communication paradigm configurable distributed systems 
proceedings international systems london uk march 
mcc gary editor 
open systems interconnection handbook 
publications mcgraw hill book new york ny 
mark qian 
formal approach correct refinement software architectures 
technical report sri csl sri international computer science laboratory april 
minsky david 
software development environment law governed systems 
proceedings acm sig soft sigplan software engineering symposium practical software development environments boston ma november 
published sig plan notices 
nii penny nii 
blackboard systems parts 
ai magazine nos pp 
pp 

ous john ousterhout 
tcl tk toolkit 
addison wesley 
pw perry alexander wolf 
foundations study software architecture 
acm sigsoft software engineering notes october 
james rumbaugh object oriented modeling design 
prentice hall englewood cliffs nj 
rei reiss 
connecting tools message passing field environment 
ieee software july 
rt tom reps tim teitelbaum 
system language editors 
springer verlag 
sdk mary shaw robert deline daniel klein theodore ross david young gregory 
abstractions software architecture tools support 
ieee transactions software engineering appear 
sha mary shaw 
procedure calls assembly language system interconnection connectors deserve class status 
proceedings workshop studies software design may 
reid simmons long ji lin christopher 
autonomous task control mobile robots 
proceedings th ieee international symposium intelligent control philadelphia pa september 
sn kevin sullivan david notkin 
reconciling environment integration software evolution 
acm transactions software engineering methodology july 
richard taylor foundations arcadia environment architecture 
proceedings acm sigsoft sigplan software engineering symposium practical software development environments boston ma november 
published sigplan notices 
ves steve 
mode changes real time architecture description language 
proceedings second international workshop configurable distributed systems march 
van 
generic lifecycle support alma environment 
ieee transactions software engineering june 
