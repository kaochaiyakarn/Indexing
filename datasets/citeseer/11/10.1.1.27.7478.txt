distributed resource management architecture supports advance reservations allocation ian foster carl kesselman craig lee bob lindell klara nahrstedt alain roy realization quality service qos guarantees emerging networkbased applications requires mechanisms support dynamic discovery advance immediate reservation resources heterogeneous type implementation independently controlled administered 
architecture reservation allocation gara address highlighted issues 
gara treats reservations computational elements processes network flows memory blocks class entities allowing created monitored managed independently uniformly 
simplifies management heterogeneous resource types defining uniform mechanisms computers networks disk memory resources 
layering standard mechanisms gara enables construction application level reservation allocation libraries applications dynamically assemble collections resources guided application qos requirements local administration policy individual resources 
describe prototype gara implementation supports di erent resource types parallel computers individual cpus control dynamic soft real time scheduler integrated services networks provide performance results quantify costs techniques 
correct execution emerging performance oriented network applications requires provision high quality service qos 
qos achieved guaranteed proper configuration reservation allocation corresponding resources 
example interactive data analysis may require simultaneous access storage system holding copy data supercomputer analysis network elements mathematics computer science division argonne national laboratory argonne il department computer science university chicago chicago il information sciences institute university southern california marina del rey ca aerospace el segundo ca department computer science university illinois urbana champaign il data transfer display device interaction resource providing specified qos 
applications require discovery selection mechanisms selecting alternative candidate resources qos criteria reliability availability cost performance 
require resource allocation mechanisms mediating competing requests preventing 
note networking research literature frequently uses terminology immediate reservation allocation reservation protocol rsvp 
uniformity brevity term allocation apply resources interest computers networks disk memory 
applications may require advance reservation mechanisms provide increased expectation resources allocated demanded airline concert ticket provides increased expectation obtaining seat 
absence reservation system encounter increased costs due excess public switched telephone network degraded service critical tra today internet 
systems supercomputers may option 
implementation application mechanisms practical settings di cult factors deployed systems lack support advance reservations applications interest require discovery reservation allocation just single resource potentially complex collections resources widely varying types computers networks disk memory resources commonly located di erent administrative domains subject di erent control policies mechanisms 
globus architecture reservation allocation gara described addresses issues 
gara builds techniques concepts developed globus toolkit provision computational qos allocation computers generalizing extending support discovery reservation allocation management heterogeneous ensembles computers networks storage systems resources independent local control 
particular gara treats advance reservations computational elements processes network flows memory blocks class entities created monitored managed independently supports uniform fashion di erent resource types networks cpus memory disk low level mechanisms case networks rsvp signaling di erentiated services bandwidth brokers atm virtual circuits defines layered architecture allows strategies discovery reservation allocation management resource collections encapsulated reservation allocation agents 
agent code application specific generic linked application instantiated independent brokers incorporate centralized distributed implementations 
believe flexibility essential advanced applications domain specific knowledge required achieve qos 
example data analysis application may achieve desired qos passing description requirements standard reservation allocation agents respond domain specific guidance agent signals di culties resource reservation allocation 
addition describing gara concepts architecture report prototype implementation supports reservation allocation parallel computers individual cpus control dynamic soft real time scheduler networks rsvp signaling 
experimental results quantify cost local reservation object creation operations 
related general problem resource management networks wide area computing systems receiving increased attention reviews see 
little specific problems addressed advance reservation heterogeneous collections resources qos 
review briefly relevant space constraints prevent complete survey 
proposals advance reservations internet typically implement advance reservation capabilities cooperating sets servers coordinate advance reservations toend path 
techniques proposed representing advance reservations balancing immediate advance reservations advance reservation predictive flows handling multicast 
addressed problems arise application requires allocation multiple resources di erent types 
globus resource management architecture supports allocation heterogeneous compute resources support computational qos 
architecture includes information service locate resources meeting certain criteria architecture installed software availability network connectivity local resource managers encapsulate local policies mechanisms initiate monitor control computation particular resources signaling protocol communicate allocation requests resource managers 
generic application specific allocation strategies encapsulated reusable libraries 
darwin project cmu building system similarities globus architecture 
resource broker called implements allocation strategies signaling protocol called beagle communicate allocation requests local resource managers may provide access network storage compute elements 
concept hierarchical scheduling introduced allow controlled sharing network resources managed di erent providers individual providers specify sharing policies hierarchical fair share curve scheduler determine cient schedule meets constraints 
globus darwin support advance reservations 
relevant allocation problem multimedia system research concerned identifying appropriate mix resources required provide desired qos 
multimedia applications motivated development techniques allocating memory cpu channel handlers cpu bandwidth resources video streams 
techniques specific particular mixes resources extend easily resource types 
gara architecture design gara design strongly influenced experiences resource management architecture developed globus toolkit development advanced network applications 
provide brief overview architecture discuss limitations describe gara addresses overcomes limitations 
globus resource management architecture discussed globus resource management architecture described addresses relatively narrow qos problem providing dedicated access collections computers heterogeneous distributed systems 
architecture deployed testbed spans hundreds computers dozens sites countries proven ective numerous large application experiments 
illustrated architecture consists main components information service managers allocation agents implement strategies discover allocate resources required meet application qos requirements 
application wishes create computation passes description computation allocation agent 
agent uses combination information service queries general heuristics application specific knowledge map application qos requirements resource requirements discover resources requirements allocate resources 
agent typically incorporates allocation strategies provide robust startup multiple resources presence failure 
example globus toolkit dynamically updateable resource online allocator uses upcalls application signal failure individual allocation events 
agent allocates individual resource directing allocation request local resource manager globus resource allocation manager gram 
gram takes request input authenticates request globus security infrastructure request successful interfaces local schedulers allocate resource create job returning portable job handle output 
requesting process job handle monitor control state computation request upcalls signal events job entering run state terminating 
grams developed variety cpu schedulers 
architecture addresses concerns identified 
supports management collections resources allocation agents allocation strategies agents encapsulate 
addition existence standardized source information managed resources consistent gram interface allocating controlling resources enables applications allocation agents deal site specific variations inevitable collections independently administered resources 
issues architecture address advance reservations apart preliminary investigations network scheduling heterogeneous resource types 
absence advance reservations means ensure resource provide allocation agent information service application resource job specification gram job handles calls resource discovery resource gram resource gram resource reservation agent information service application resource spec allocation agent res handles obj 
handles res 
handles computation spec 
calls calls resource discovery gram resource gram resource gram resource globus gara resource management architectures left right respectively 
notice distributed information service local resource managers grams reservation allocation agents applications create distributed computations 
dashed line represents upcalls may invoke applicationspecific routines example failure 
requested qos required drastically restricts ability perform allocation specialized resources supercomputers high bandwidth virtual channels typically high demand 
lack support network disk resource types impossible provide qos guarantees normally case application involves just computation 
globus architecture reservation allocation gara extends globus resource management architecture major ways introduces generic resource object encompasses network flows memory blocks disk blocks entities processes introduces reservation class entity resource management architecture 
various architectural changes follow new concepts 
discuss resource objects 
gara reformulate computation specific allocation functions terms general resource objects allowing di erent application components manipulated common ways 
generic create object operation create process flow disk object memory object supplied arguments 
create object call returns object handle subsequently monitor control object delete system application process request upcalls specific events reservation applied object object termination qos contract violations 
upcalls allow construction adaptive systems 
consider reservations 
gara splits task creating resource object phases reservation allocation 
reservation phase reservation created provides confidence subsequent allocation request succeed object created time 
reservation handle returned monitor control status reservation passed subsequent create object call order associate object reservation 
distinct reservation phase important ramifications 
splitting reservation allocation enables perform advance reservation resources critical application success required resource high demand 
second reservation cheaper allocation case large parallel computers example implement lighter weight resource reservation strategies objects created order guarantee access resource 
reservation created generic create reservation operation interacts local resource management elements ensure requested quantity quality resource available requested start time remain available desired duration 
resource assurance create reservation operation fails 
create object operations require reservation order proceed 
reservation normally created preceding create reservation call resources default best ort reservation specified 
note gara concept reservation encompasses immediate reservations assumed followed immediately allocation advance reservations created reserve resources 
reservation object creation operations implemented renamed gram globus reservation allocation manager 
illustrated gara introduces new entity called reservation agent 
reservation agent earlier allocation agent responsible discovering collection resources satisfy application endto qos requirements resource set allocating resources simply reserves 
call reservation agent specifies qos requirements returns set reservation handles passed allocation agent 
gara allocation agent remains simpler task allocating resource set reservation handle generated reservation agent 
practice may need incorporate aspects reservation agent functionality interact external reservation agent order recover allocation failures may occur 
summary gara supports advance reservation directly 
generalized resource objects standardized interface provided gram addresses issues heterogeneity resource set 
reservation allocation agents layered top gram standardized information services enable dynamic construction collections independently administered resources satisfy application qos requirements 
reservation allocation agents reservation lesser extent allocation agents play critical role gara 
provide bridge application available resources constructing sets resources match application qos requirements conform local practices policies resource providers 
gara constrain agent design define gram information service functions construct implementations wide range agent architectures possible 
agent take form library linked application reservation decisions behalf single application 
alternatively agent may global system oriented broker provides reservation services numerous users applications 
functionality may centralized may distributed multiple agent instances hierarchy di erent agents 
organization useful example certain subsets required resources control local reservation systems bandwidth brokers 
agent act autonomously responding reservation request success failure may proceed interactively allowing user application guide construction resource set 
clarify role reservation agents return data analysis example 
assume visualization occur specific location user computer choose cached replicas data alternative analysis supercomputers 
reservation object creation operations data stores supercomputers network elements achieved calls appropriate grams system may course implement functions quite di erent mechanisms 
archived original data cached copy cached copy cached copy cached copy cached copy cached copy user user candidate resources data analysis application include multiple cached copies terabyte dataset multiple supercomputers analysis network links shown connecting components 
right show physical location resources left search tree constructed reservation agent represent reservations 
configuration typical problems encountered high performance computing 
imagine reservation agent takes input specification dataset analyzed indication desired qos expressed terms precise result soon results required user prepared pay 
agent uses information service locate cached data replicas data cached agent may return control user migrate data tape archive having determined relevant data properties size location invokes secondary agent determine computational network requirement analysis data transfer 
agent discover computational bandwidth resources collectively provide desired qos 
applications developed context current globus system achieve goal allocation exhaustive search 
advance reservation environment consider range times number candidate resources larger cient search heuristics typically required 
example consider potential data cache turn consulting information service locate supercomputer deliver required computational power 
point agent may need consider issues acceptable security policies data proprietary 
agent attempts reserve supercomputer nodes network bandwidth supercomputer visualization engine 
reservations succeed agent proceed discover reserve network link supercomputer data cache 
example illustrates important aspect reservation importance application level criteria security requirements resource selection 
example illustrates issues considered developing agent strategies 
example search procedures just outlined produce alternative resource sets 
choose alternatives selection criteria best 
suitable resources exist agent may fail attempt user example decide proceed fewer analysis nodes originally desired best ort reserved bandwidth 
example reservation failure handled backtracking proceed try alternative resources request successful fails 
situations may prefer wait required resources available 
case need concerned possibility deadlock agents may attempt acquire resources simultaneously 
deadlock avoided variants known deadlock prevention avoidance schemes enforcing orderings resources acquired processors sorted ip address followed disks followed networks timeout mechanisms 
search deadlock strategies just described necessary application dependencies required resources 
situations simpler techniques 
example consider application simply requires computational resources specified minimum network connectivity 
number reservations succeed return information service locate additional candidates generate callback application determine possible proceed just resources strategy allocator allocations fail 
reservation handle resource manager contact reservation object handle resource manager contact reservation handle object specification result reservation handle result object handle new resv handle reservation handle new reservation specification result handle callback function callback argument pseudo code prototypes selected gara client side api functions gara application programming interface gara client side application programming interface api includes calls create cancel reservations objects query request notification changes status reservations objects 
outlined arguments include resource manager contact addresses portable reservation object handles specifications required resources object characteristics expressed declarative resource specification language rsl 
briefly call takes input representation required resources returns reservation handle call takes input specification required object reservation handle representing resources object associated returns portable object handle 
allow cancellation previously created reservations objects appropriate handles 
allow application request upcalls selected events failure reservation 
allows application adapt existing reservations honored application requirements change 
api function calls user reservation object specifications control various aspects object behavior example happen object reservation expires 
calls illustrated shows pseudo code logic discover computer linked network net originating computer provide desired qos 
problem simplified version data analysis system described section 
reservation agent uses exhaustive search procedure locate reserve resources required time constructing set reservation handles rh rh net representing reservations 
routine shown queries information service locate candidate compute network resources returning gram contacts host name resources contact id contact net 
routine embeds specific resource requirements italicized rsl arguments calls easily parameterized provide completely generic procedure 
subroutine rh contact rh null continue reservation type compute rh net contact net start time pm reservation type network duration hour nodes start time pm rh null exit duration hour bandwidth repeat rh rh net defined endpoint id endpoint id contact id contact net rh net null rh rh contact repeat loop reservation type compute rh null start time pm signal search failed duration hour subroutine percent cpu pseudo code gara reservation agent reserves set resources 
variables rh prefixes reservation handles italicized text rsl specifications 
gara implementation limit discussion gara implementation local resource manager component issues heterogeneity addressed 
explain basic structure implementation describe resource managers constructed date 
discussion illustrates advance reservations implemented slot manager heterogeneous resources encapsulated common interfaces 
gara layered structure gara external interface gei component addresses issues authentication dispatch incoming requests registration propagation upcalls remote processes publication resource information lower level local resource allocation manager lram provides basic object reservation services interacting system specific resource management components services 
focus lram dependence underlying resource 
structure particular lram implementation depends nature local resource management services scheduler associated resource question 
major cases distinguished 
scheduler provides appropriate advance reservation support lram resource pass advance reservation requests directly scheduler 

deal cases lram associated resource total control resource object creation calls pass lram lram slot manager see implement advance reservations resource 
probabilistic advance reservations supported example slot manager defining available resources time amount resources predict available time 
introduce briefly concepts timeslot table slot table short timeslot manager 
available capacity resource known enumerable quantity peak network bandwidth number processors slot table data structure keep track current allocations reservations 
constructed resource neutral slot manager library uses slot table ensure committed resources exceed specified limit peak network bandwidth 
library provides functions slot table creation requesting canceling reservation querying state current reservation table examining properties specific reservation requesting upcalls time reservation activation termination 
note slot manager represents just relatively simple implementation advance reservation functionality sophisticated slot managers example support pre emption invoke policy agent determine requests allowed 
time available resource allocated slot table keeps track current allocations reservations resource knowledge widely deployed resource management system networks computers resources supports advance reservations 
developed date type 
illustrated uses slot manager manage allocations reservations di ers nature resource managed low level mechanisms create destroy objects 
smp lram supports parallel execution shared memory multiprocessor number processes created exceed specified threshold manager manage resource reservation creation 
example call creates slot manager entry call registers create process unix fork function called reservation active reservation termination handled registering destroy process unix kill function 
process creation requests smp occur lram lram type reservations guaranteed modulo system failures 
users create processes means lram type reservations lram interface adaptation layer reservation gara external object unix fork unix scheduler lram interface adaptation layer reservation gara external object lram interface adaptation layer reservation gara external object processes mpp cpu fractions intserv bandwidth slot manager unix fork scheduler slot manager unix socket rsvp signalling slot manager gara resource managers constructed date showing components shaded resource specific components unshaded probabilistic 
lram manages fractions single cpu provide soft realtime response manage task scheduling 
slot manager manage allocation resources case quantity available allocation cpu fraction typically number cpus 
object creation involves normal unix system functions create process reservation activation involves call functions adjust process scheduling 
lram smp may type depending operations occur lram 
intserv lram concerned management network flows assignment bandwidth reservations flows 
case quantity managed slot manager bandwidth object creation occurs standard unix socket calls reservations associated flows calls rsvp signaling api 
current prototype rsvp calls serviced come served basis lram type 
type lram obtained rsvp implementation constrained allocations proceed approved slot manager 
approach implementing approval process cops policy agent control allocations slot manager charged updating policies 
results constructed implementations smp rsvp resource managers described demonstrated ability perform reservations allocations multiple resources di erent types 
experimental results provide insights performance techniques implementations 
interested answering questions costs reservation object creation mechanisms 
costs compare native costs incurred resources allocated gara mechanisms 
comparison reservation creation costs tell practical utility search table cost selected native object creation lram operations 
times average runs milliseconds 
smp rsvp native object creation lram reservation lram object creation lram object cancellation reservation strategies 
performed experiments pair sun ultra workstations running solaris mb ethernet segment 
timed certain major gara lram operations measuring cost individual operations time required reservations 
experiments clearly important require gara resource managers deployed larger number systems 
lram implementations measured native object creation costs fork smp fork plus set priority create flow plus bind reservation rsvp costs calls performed local lram call gara call remote workstation authentication 
lram times table show reservation cheaper object creation single computer 
object creation cancelation times higher smp case communicate custom cpu scheduler rsvp object creation costs higher need communicate rsvp agent instantiate reservation 
operations performed remotely gara interface incur additional costs msec network communication msec authentication 
communication cost includes time open socket avoided subsequent requests multiple requests lram computer single host 
authentication cost includes round trip communications performed ssl handshake bit public key operations credential verification 
clearly remote access time dominated authentication communication 
results suggest gram constructed date sustain reservation operations second single user process sustain significantly higher reservation rates multiple calls issued simultaneously 
find results encouraging terms reveal gara performance 
wide area environment heavyweight authentication necessary cost creating cancelling object slightly higher creating cancelling reservation example vs msec case rsvp 
systems large parallel computers object creation costs significantly higher 
search schemes create cancel reservations cient schemes create destroy objects cases significantly cient 
soft state pre reservations time avoid need cancel unwanted reservations successful reservations expensive 
immediate object creation requires reservation call followed object creation call additional cost inherent calls avoided defining create reservation object operation 
see computation requires multiple resources administrative domain desirable avoid repeated remote operations avoid multiple authentication operations example downloading agent able negotiate user behalf 
significant impediment production advanced networked applications di culty achieving qos guarantees heterogeneous collections shared resources 
resource management architecture gara addresses problem 
gara exposes reservations objects class objects defines uniform representations operations diverse resource types uses information service reveal site specific policies 
constructs enable construction reusable allocation agents combine domain resource specific knowledge discover reserve allocate resources meet application qos requirements 
constructed prototype gara implementation conducted initial performance experiments simple scenarios 
results demonstrate cost gara mechanisms large compared underlying resource management operations 
previous experience globus resource management architecture shown utility basic approach large scale experimentation particularly advance reservations remains 
plan major areas 
implement additional resource managers example mediate access parallel computer schedulers providing advance reservations premium tra ingress egress routers di erentiated services networks resource types disk disk blocks memory blocks 
interested understanding techniques applied multicast 
second deploy gara functionality widely testbed environment develop evaluate high performance distributed applications exploit gara capabilities 
third investigate techniques reservation allocation 
plan gara extensions designed support notification qos violations application level adaptation 
acknowledgments gratefully acknowledge helpful discussions fred baker gary hoo bill johnston brian steven tuecke assistance hwang implementation rsvp lram 
supported part defense advanced research projects agency contract mathematical information computational sciences division subprogram ce computational technology research department energy contract eng national science foundation 
berman 
high performance schedulers 
pages 
berson lindell 
architecture advance reservations internet 
technical report 
progress 
braden zhang herzog jamin 
resource reservation protocol rsvp version functional specification 
internet draft internet engineering task force 
chandra allan fisher eugene ng peter steenkiste eduardo takahashi hui zhang 
darwin resource management value added customizable network service 
sixth ieee international conference network protocols icnp 
czajkowski foster karonis kesselman martin smith tuecke 
resource management architecture metacomputing systems 
th workshop job scheduling strategies parallel processing 
kohler pink 
advance reservations predictive service internet 
acm springer verlag journal multimedia systems 
ferrari gupta 
distributed advance reservation real time connections 
acm springer verlag journal multimedia systems 
foster kesselman 
globus toolkit grid architecture 
pages 
foster kesselman editors 
grid blueprint computing infrastructure 
morgan kaufmann publishers 
guerin henning schulzrinne 
network quality service 
pages 
habermann 
prevention system deadlocks 
communications acm july 

quality service negotiation approach reservations detailed study 
computer networks isdn systems 

avoiding deadlock multitasking systems 
ibm systems journal 
hoo johnston foster roy 
qos middleware bandwidth broker system design 
technical report 
shin 
structuring communication software quality ofservice guarantees 
proc 
th real time systems symposium december 
nahrstedt 
globus quality service 
proc 
globus retreat 
argonne national laboratory 
nahrstedt chu narayan 
qos aware resource management distributed multimedia applications 
journal high speed networking ios press december 
nahrstedt smith 
design implementation experiences omega point architecture 
ieee jsac special issue distributed multimedia systems technology september 
wolf steinmetz 
concepts reservation advance 
kluwer journal multimedia tools applications may 
zhang jacobson nichols 
bit di erentiated services architecture internet 
internet draft internet engineering task force 

