causality genetic programming rosca dana ballard computer science department university rochester rochester ny causality relates changes structure object effects changes changes properties behavior object 
analyzes concept causality genetic programming gp suggests adapting control parameters speeding gp search 
analyze effects crossover show weak causality gp representation operators 
hierarchical gp approaches discovery evolution functions amplify phenomenon 
selection gradually retains strongly causal changes 
causality correlated search space exploitation discussed context exploration exploitation tradeoff 
results described argue bottom gp evolutionary thesis 
new developments idea gp architecture evolution koza discussed causality perspective 
proceedings fifth international conference icga morgan kaufmann san francisco ca 
causality genetic programming rosca computer science department university rochester rochester ny rosca cs rochester edu dana ballard computer science department university rochester rochester ny dana cs rochester edu causality relates changes structure object effects changes changes properties behavior object 
analyzes concept causality genetic programming gp suggests adapting control parameters speeding gp search 
analyze effects crossover show weak causality gp representation operators 
hierarchical gp approaches discovery evolution functions amplify phenomenon 
selection gradually retains strongly causal changes 
causality correlated search space exploitation discussed context tradeoff 
results described argue bottom gp evolutionary thesis 
new developments idea gp architecture evolution koza discussed causality perspective 
optimization problems small changes occur larger ones 
principle strong causality states small alterations underlying structure object small departures cause determine small changes object behavior small changes effects respectively rechenberg 
principle form applications evolution strategies es surveyed back schwefel problems structure evolution 
structure evolution performed letting approximately similar encodings structures compete existence population 
parameters structure adjusted es algorithm lower level detail 
modification structures performed es genetic operators 
outlined necessity algorithm observe principle strong causality 
obeying principle parameters evolved structure thrown away continuity ensured evolutionary process 
focus genetic programming gp causality concentrating primarily gp approaches discovery evolution functions crossover operator 
crossover difficult analyze 
various simplifying assumptions limit applicability results 
results suggest heuristic sources improvement algorithms 
example rabinovich prove symmetric quadratic dynamical systems approach fixed point prove various properties systems 
apply theory ga finding large matching graph 
application suggest interaction crossover selection easier analyze crossover applied times system converge population 
traditional analysis gas holland holland focuses propagation schemata generation 
building block hypothesis holland goldberg outlines importance small schemata called building blocks proper functioning ga crossover considered differentiating feature gives ga advantages stochastic methods certain types problems 
example eshelman schaffer bring evidence crossover pair wise mating helps propagating middle order building blocks 
gp analogy lines ga schemata theory ga building block hypothesis attempted reilly oppacher generalizing definition gp schema koza collection tree fragments collection trees possibly having subtrees removed 
individual schema case covers matches fragments overlapping fragments allowed 
probability disruption crossover estimated definitions analyze gp schema processing 
authors conclude analysis difficult offer appropriate perspective gp dynamics 
presents qualitative analysis gp dynamics 
section introduces gp weak causality idea analyzes location size role subtrees involved crossover operations 
section shows causality problem gp extensions discovery functions 
gp naturally explores structures bottom manner overcomes problem 
section brings experimental evidence favor gp bottom evolution hypothesis 
causality viewed exploration exploitation perspective 
offers insights better control evolutionary algorithm general 
ideas outlined 
causality standard genetic programming gp departs genetic algorithm paradigm considering tree structures representing genotypes computer programs cramer koza 
trees variable length structures offer flexible representation creating manipulating programs 
problem solving formulated search space computer programs structures dynamically varying size shape 
populations computer programs genetically bred genetic operations reproduction crossover mutation 
ignore mutation crossover generate changes program node 
gp mutation particular case crossover experiments reported literature mutation 
crossover gp process new programs result exchange genetic material parent programs 
consists steps 
parent individuals selected population 
pivot node randomly chosen tree representing parent 
subtrees rooted pivots swapped 
main question analysis gp causality effects changes result applying crossover 
intuition crossover operations harmful effect 
particular offspring individuals partially adapted environment complex structure worse fitness 
close role mutation natural evolution wills 
agreement intuition small change program may drastically change program behavior 
addition simple argument 
consider partial solution hypothesis formation problem obtained standard gp represented tree consider selected parent possible obtain solution modifying way certain subtree changed 
consider crossover points chosen uniform probability set nodes probability choosing crossover point lie rob select jv gamma size size bigger true case hypothetical convergence solution smaller probability keeping unchanged 
dynamics trees shows phenomenon instability weak causality gp structures 
discuss important issues show complete picture problem 
topological point view crossover changes performed 
equivalently ask expected height crossover pivot points 
current gp practice crossover points chosen internal nodes probability leaf nodes probability 
fundamental internal crossover nodes chosen uniform probability distribution 
additionally assume rough approximation trees operated complete binary compute expected height crossover pivot points rob delta gamma gamma rob probability choosing node height crossover point tree height 
leaf nodes complete binary tree height 
result assumption shows changes closer tree bottom 
effect noticed structure tree represents typical case 
second influence selecting smaller bigger subtrees participate crossover operation hypothesized crossover operator generates non causal changes gp 
complete answer question involve analysis properties function set 
effect small change severe problems symbolic regression severe problems regression boolean notion structure tree introduced rosca ballard goal qualitatively analyzing program transformations evolution 
structure tree gp solution parity 
nodes labeled generation number node played pivot role crossover operation 
zero labeled nodes remained unchanged initial generation 
highlighted subtrees effective evaluation parents important final solution 
small change boolean tree necessarily determine sharp change program behavior 
functions 
example result boolean function represented result evaluating ffi fitness case evaluation boolean expression true ff delta fi delta fl longer path ffi higher probability ffi plays important role evaluation 
third code parse tree representing individual effective 
known gp evolves non parsimonious trees size pressure included fitness evaluation rosca ballard phenomenon called defense crossover altenberg 
increase size code population individuals decrease probability disrupting useful code means non causal crossover changes 
useless regions code may represent reservoirs genetic material angeline 
preserve evolve fragments code activated evolution result crossover 
difficult estimate size effectively useful code 
example 
redundant regions code may created artificially analogy natural phenomenon gene duplication order evolve better program specializing treatment subclass inputs altenberg koza 
fourth gp exploit structures 
contrast gp crossover ga crossover operator homologous maintains fixed positions exchanged alleles 
gp crossover non homologous sense preserve position subtree operates paste subtree tree level 
probability choosing homologous crossover points structurally similar parents order transmit parent functionality offspring inversely proportional product parent sizes low 
trees grow size probability decreases negligible 
implies parents identical offspring totally different functionality probably score parents 
selection favors crossover changes recombine parts structure parents improve performance 
problem domains observe superposition parent behaviors offspring 
example problem finding impulse response function koza koza showed crossover determines better offspring performance improving parent performance portion time domain inheriting behavior parent rest domain behavior interpreted case splitting gp refines partial solution changing subtree program treats separately detailed way particular input case 
case structures exploited function computing fitness 
issues summarized low expected height crossover points high functional specialization deep subtrees correlation tree size probability non causal changes functional inheritance superposition 
arguments alleviate non causality problem gp crossover operation discussed section 
issues discussed user control probability selection crossover nodes function set properties 
sections suggest fine controls probability selection crossover nodes advantageously gp 
hierarchical genetic programming overview gp extensions relevant goal analyzing gp causality 
automatic definition functions adf koza idea evolution reusable subroutines 
adaptive representation ar approach rosca ballard discovery useful building blocks code 
blocks attained analyzing evolution trajectory generalizing blocks code define new functions adapting problem representation fly 
adf ar implement ideas discovery evolution new functions different ways evolve hierarchy functions improves search efficiency 
refers mechanisms hierarchical genetic programming hgp 
automatic definition functions automatic definition functions approach assumes parsimonious problem solutions specified terms main program hierarchical collection subroutines 
main program invokes subset subroutines perform computation subroutines may turn call subroutines computing partial results 
genetic programming search appropriate subroutines find way composing discovered subroutines primitive functions complete solution 
approach individual program dual structure 
structure defined fixed number components branches evolved function branches main program branch 
function branch instance adf adf fixed number arguments 
main program branch body produces result 
branch piece code built specific primitive terminal function sets subject genetic operations 
set function defining branches number arguments function possesses alphabet function terminal sets branch define architecture program 
allowed function branches determine hierarchical organization set functions 
number interconnectivity adfs fixed definitions adfs evolved 
genetic operations adfs syntactically constrained components operate 
example crossover performed subtrees type subtree type depends function terminal symbols definition subtree 
example simple typing rule architecturally uniform population programs branch typing 
branch program designated having distinct type 
adf adf adf adf adf adf program body program body adf adf adf adf adf adf adf adf adf parent crossover parent crossover adf adf adf non causality adf gp definitions adfs local 
fragment code copied donor parent receiving parent evaluated new lexical environment parent 
case crossover operator swap subtrees analogous branches 
causality adf gp adf approach simultaneously attacks search problem different structural levels 
gp discover definitions fixed set subfunctions predefined number parameters combine calls automatically defined functions main body 
corresponds roughly discovering way decompose problem solving subproblems maximum number subproblems general structure subproblems number parameters alphabet 
due imposed ordering adfs consider adf different structural level 
gp search modifications alternatively structural levels 
code fragment brought individual changes function entirely contains calls adfs 
example consider piece code involving calls lower order adfs pasted higher order function main body result crossover operation suppose definitions adfs parents entirely different 
lexical scope dictates definition invoking sub function calls adfs piece code refer definition totally different function new lexical scope 
time primitive function set df df df df df solution current population hypothetical call graph extended function set ar method 
primitive function set extended hierarchically functions df df discovered generation numbers quite frequent situation depicted demonstrates non causality adf gp 
non causality property adf gp total opposition principle strong causality previously stated section 
useful visualize search solution may generally proceed adf gp 
adf functions represents different sub function 
consider modification imposed program tree acceptable solution 
impossible change change large influence example change functions basis hierarchy 
situation represents lucky change 
probably change highest level program body 
conjecture general principle evolution progresses changes principle strong causality important 
words better better individuals selection favors small causal changes biggest chance successful 
effect principle stabilization useful lower level adfs 
evolution freeze subroutines eventually find beneficial changes higher levels 
adaptive representation contrast uninformed changes function definitions adf gp ar explicitly attempts discover useful functions 
hierarchy automatic functions created bottom fashion problem solved see 
base function hierarchy lie primitive functions initial function set 
complex functions dynamically built primitive functions stable components representation 
levels hierarchy discovered heuristic information conveyed environment captured heuristic block fitness functions result steps 
select candidate blocks appearing population individuals 
generalize candidate blocks create new functions 
extend representation new functions noticing progress 
generation intervals function set changes represent evolutionary epochs 
epoch part population replaced random individuals built extended function set 
extinction step taken order ensure propagation newly discovered functions population 
discovery functions ar guided statistical information fitness distribution newly generated subpopulation measures short term influence new functions evolutionary process 
functions support progress invoked fit population individuals may deleted 
domain independent methods computationally expensive 
experiments reported domain dependent building block functions represents limitation 
evolution discovered functions supported ar gp 
ar gp strategy eliminates possibility performing highly non causal changes early stages algorithm increased search space exploration desired 
bottom gp evolutionary theory order test hypothesis causality plays increasing role evolved individuals complex fit studied part genealogy tree parity parity problems done giving individual birth certificate specifies parents method birth corresponds branch type crossover performed adf crossover adf crossover main program body crossover reproduction hoped analysis birth parity problem definition gp implementation koza rosca ballard 
certificates starting final solution tracing backwards origin shed light gp dynamics hypothesized general principle section 
order determine effect different types birth operations computed temporally discounted frequency factor bcf solution tree type birth bcf type gamma fl gamma fl kt delta fl depth kt number programs genealogy tree depth characteristic function ancestor returning birth certificate birth type type 
table presents results successful runs adf gp parity adfs arguments 
results show search relies cases changes higher higher structural levels possible exploit code fragments appear population 
table statistics birth certificates successful runs parity adf gp zero mutation rate population size 
certificate type counts unit temporally discounted discount factor fl age 
certificates generations old considered 
gp programs birth certificate freq 
final run explored adf adf body gen numerical results taken account small time window compared entire number generations 
detailed picture importance various types crossover entire gp evolution complete analysis birth certificates starting initial generation 
analysis depicted typical case 
overlapping distribution trends birth certificates suggest importance birth certificate type trend entire evolution period generation till solution 
stabilization changes hierarchy occurs bottom 
crossover changes automatically discovered functions highly non causal performed early generations changes main generation number percentage generation generation number percentage generation random adf adf body variation percentage crossover types generations looking solution parity generation 
random indicates propagation random individuals initial population due reproduction 
program body changes low tree heights performed generations 
results confirm population evolves increasingly causal changes important selected 
causality search space exploitation choice search strategy pursue exemplifies known problem exploration exploitation trade epstein holland 
reinforcement learning rl literature tradeoff explicit control structure algorithms kaelbling 
search process chooses action prescribed current knowledge system exploits current knowledge acting order gain reward 
occasionally explores actions random order experiment state action pairs eventually improve policy 
search process acts gain information experience explores search space 
rl system explicit policy balancing exploration exploitation 
contrast gp search technique implicitly balances exploration exploitation 
discovery evolution functions amplifies exploratory ability gp search process rosca 
best generation program fitness increases probability falling individuals exploration decreases substantially 
gp search process exploit structures discovered avoid spending unnecessary effort state space exploration 
corresponds idea genetic operations causal stages evolution 
causality obviously correlated search space exploitation see table 
suggests gp able dynamically balance exploration exploitation 
tradeoff adaptively controlled modifying rate causal non causal genetic operations applied gp spend search effort efficient way 
weakly causal changes desirable search space exploration initially strongly causal changes desirable increased exploitation process 
tradeoff may controlled instance relative average fitness increases 
table correlation causality exploitative ability gp search 
time generation early advanced crossover changes non causal causal exploration high low exploitation low high discuss improvements hgp algorithms perspective tradeoff 
architecture application adf gp defined number function branches number arguments branch function terminal primitives function branch 
evolution architecture motivated mainly problem determining appropriate architectural choices adf gp 
architecture evolutionarily selected case initial population architecturally diverse care taken crossing individuals having different architectures koza 
koza introduced new genetic operations varying architecture individual program branch duplication argument duplication branch deletion argument deletion branch creation argument creation koza 
operations duplication respect principle strong causality discussed 
performed preserve behavior resulting programs 
merely increase potential refinement programs resemble process gene duplication natural evolution 
duplication program architecture element branch argument done conjunction random replacement invocations corresponding element duplicated copy 
operation respects principle strong causality allowing behavior improving changes decreases probability random change drastically change behavior program 
similar drawn creation operations 
deletion operations possess nice properties mentioned 
antagonist role confining increase size evolved programs 
emergent structure adf gp effect causality explicit policy ar gp 
aims improved version ar gp combine competition individuals population programs cooperation individuals populations evolvable functions 
extension require explicit block fitness functions allow reinforcement signals global individual behavior evaluate functions 
block fitness functions may supplementary domain knowledge available 
adf gp blind competition individuals 
contrast version ar gp population functions evolved viewed environment allows cooperation elements partial solutions compete 
functions beneficial individuals invoked individuals 
result collection functions acquires necessary structure solving problem form hierarchy functions 
population functions evolves exploitative exploratory operators rosca 
analyzes causality crossover operator gp suggests search control parameters adapted speeding gp search 
standard gp presents characteristic instability weak causality structures evolved varied changing probability selecting crossover points 
effect amplified gp function discovery 
weak causality discussed related exploration exploitation tradeoff search problems 
brings arguments bottom evolutionary thesis hierarchical gp 
early stages evolution gp usually discover stable components simon 
replaying backwards genealogy tree resulted problem solution shows changes stages evolution performed higher hierarchical levels 
suggests unconstrained hgp approach adf gp implicit constraints 
early process changes focused evolution primitive functions 
process changes focused evolution program control structures 
suggests stages evolution hgp algorithm exploration automatically traded exploitation 
hierarchy functions amplifies bad genetic changes making selection efficient 
bottom evolution thesis justifies search building blocks expansion problem representation ar gp 
ar gp specific search control structure allowed explore causality 
adfs suggest tradeoffs search control parameters 
insights come refined system involves automatic adaptation control parameters 
remains goal research 
adaptation mechanisms artificial intelligence systems inherently biased features representation schemes defined system designer kitano 
acknowledgments peter angeline valuable suggestions earlier drafts 
research sponsored national science foundation numbered iri darpa research numbered mda 
altenberg 

evolution evolvability genetic programming 
kinnear editor advances genetic programming 
mit press 
angeline 

evolutionary algorithms emergent intelligence 
phd thesis computer science department ohio state university 
back schwefel 

overview evolutionary algorithms parameter optimization 
evolutionary computation 
cramer 

representation adaptive generation simple sequential programs 
proceedings international conference genetic algorithms 
morgan kaufmann publishers epstein 

theory games statistical logic 
academic press new york 
eshelman schaffer 

crossover niche 
forrest editor proceedings international conference genetic algorithms pages 
morgan kaufmann publishers goldberg 

genetic algorithms search optimization machine learning 
addisonwesley 
holland 
nd edition 
adaptation natural artificial systems introductory analysis applications biology control artificial intelligence 
mit press 
kaelbling 

learning embedded systems 
mit press 
kitano 

massive parallelism 
proceedings international joint conference artificial intelligence pages 
morgan kaufmann publishers koza 

genetic programming programming computers means natural selection 
mit press 
koza 

architecture altering operations evolving architecture multipart program genetic programming 
computer science department stan cs tr stanford university 
koza 

genetic programming ii 
mit press 


structure evolution incomplete induction 
parallel problem solving nature pages 
elsevier science publishers 


structure evolution neural systems 
dynamic genetic chaotic programming pages 
john wiley sons reilly 
oppacher 

troubling aspects building block hypothesis genetic programming 
proceedings third workshop foundations genetic algorithms 
morgan kaufmann publishers rabinovich 

quadratic dynamical systems 
proceedings focs volume pages 
ieee press 
rechenberg 

evolution strategy 
marks ii robinson editors computational intelligence imitating life pages 
ieee press 
rosca 

genetic programming exploratory power discovery functions 
proceedings fourth national conference evolutionary programming 
mit press 
rosca ballard 

genetic programming adaptive representations 
technical report university rochester computer science department 
rosca ballard 

hierarchical self organization genetic programming 
proceedings eleventh international conference machine learning pages 
morgan kaufmann publishers rosca ballard 
orlando 
learning adapting representations genetic programming 
proceedings ieee world congress computational intelligence pages 
ieee press 
simon 

organization complex systems 
howard editor hierarchy theory challenge complex systems pages 
new york 
wills 

runaway brain 

