composing disco specifications generic real time events mobile robot case study mika tampere university technology software systems laboratory box fin tampere finland mika cs tut fi methods specify real time control software enable expression functional control real time requirements 
enable multi disciplinary system development promote reuse specifications 
describes specification real time control software developed disco method 
disco object oriented action method precise semantics logic 
specification layered partly reusable 
consists functional control real time parts 
real time part includes layers specify generic periodic aperiodic events 
control part specifies control algorithms functional part rest system 
parts specified stepwise refinements combined simple way 
specification quite small techniques applicable specifying larger systems complex real time behavior 
real time systems frequently include control physical devices 
design demands knowledge continuous discrete worlds making demanding task 
systems grow complexity role control software specification emphasized design process 
methods specifying real time control software enable expression functional control real time requirements 
enable multi disciplinary system development facilitate software maintenance 
furthermore methods promote reuse specification level 
jacky see specify control system reusable frameworks 
disco object oriented method specifying reasoning reactive distributed systems 
method incorporates specification language methodology developing specifications language tool support methodology 
disco designed software engineers theoreticians disco language resembles programming language mathematical formulas 
disco specification precise interpretation temporal logic actions tla enables rigorous reasoning 
editor software technology proceedings symposium pages estonia august 
institute cybernetics technical university technical report cs 
acronym distributed operation 
specification mobile robot control software 
specification consists functional control real time parts 
parts separately combined level abstraction lowered stepwise refinements 
real time part includes layers define generic periodic aperiodic events 
specification implemented language 
generic real time events introduced describes methodology conjunction closed world modelling object orientation distribution control software specification served example 
generic aperiodic event generalized bit quantified roles light shed implementation 
structured follows 
section disco method introduced 
method applied section case study 
reported section description 
disco disco joint action theory developed back kurki objects communicate atomic actions 
joint action paradigm suitable specifying reasoning reactive concurrent systems 
processes interested actions may participants 
notations processes needed modelled objects participate actions 
disco specification consists layers 
layer gives view system operational interpretation 
variables layer encapsulated objects 
disco classes inheritance familiar object oriented languages 
methods replaced actions having callers callees 
action participant assigned role 
objects treated data structures capable participating actions certain roles 
actions may parameters refer objects 
parameters nondeterministic values introduce nondeterminism 
action definition roles classes participating objects 
boolean expression called guard body action 
body consists assignment conditional statements 
role name braces role said quantified 
means nondeterministic possibly empty set objects satisfy guard participate role 
actions disco atomic executed sequentially 
action said enabled exist potential participants guard true 
action enabled executed selected nondeterministically 
execution action means executing statements body 
example consider simple layer models sending delivering messages holding integer values 
layer defines classes message receiver actions sending delivery 
parameter action sending value copied message participating models value sent 
action delivery value participant delivered receivers participating quantified role layer messages class message integer message class receiver integer receiver action sending message integer true sending action delivery receiver message true delivery messages disco specifications refined importing layers new layer applying superposition principle 
classes extended new components totally new classes added 
new actions new participants parameters added old actions 
guards strengthened action bodies extended giving new statements 
actions allowed include assignments variables introduced imported layers 
restriction necessary ensure preservation safety properties 
actions synchronized specialized 
synchronizing means actions combined execute parallel 
synchronizing actions remove non synchronized versions actions default 
specializing means introducing new action specialized subclass enabled objects subclass 
guards versions action implicitly strengthened longer enabled subclass 
execution model guarantee enabled actions executed fairness requirements ensure liveness 
prefixing name possibly quantified role asterisk indicates action infinitely enabled object participate prefixed role action executed infinitely object prefixed role 
fact explicit fairness requirements biggest difference execution models disco unity 
consider example simple refinement layer messages 
subclass message introduced delivery specialized 
fairness respect participants quantified role required ellipses refer parts imported action layer import messages class new message specialized receiver fcm delivery fcm layer versions delivery messages named 
real time modelled disco follows 
actions assumed instantaneous 
represent current time execution action variable variable multiset containing deadlines actions 
variable initialized empty 
implicit parameter representing time action executed added action 
guards strengthened conjunct assignment added action bodies 
presence real time liveness remains execution force 
sequel denoted keyword operations operator 
noted initializing global set deadlines empty absolutely necessary 
initially exist deadlines long removed correctly 
case study mobile robot small microcontroller car 
objective keep car track marked optical tape 
viewpoint control software system inputs outputs 
inputs readings converter connected infra red odometer receives pulse cm 
switch start car 
outputs viewpoint software servo motors controlling steering movement 
driven pwm pulse width modulation signals 
pulses generated ms functional part specification consists consecutive layers named basic actions drive states 
layer control algorithms forms control part specification 
real time part formed layers periodic aperiodic periodic instance aperiodic instance 
parts combined layer combined specification 
import scheme illustrated 
functional properties layer basic actions contains model environment basic functionality system 
classes actions 
class data holds internal drive states basic actions control algorithms combined specification periodic periodic instance 
import scheme specification aperiodic aperiodic instance variables class output variables model outputs 
variables dist tape type real represent distance covered readings odometer location car relative tape respectively 
variables engine steer model current lengths servo pulses 
equal zero car stationary wheels straight 
class definition number instances indicated placing number parentheses class name 
classes shown class data dist real tape real data class output engine real steer real output action clear clears variables layer 
action read participant class data models reading odometer converter 
actual new readings modelled parameters 
action control parameters assigned variables engine steer respectively 
parameters model new values control algorithm 
actions action clear data output true dist tape engine steer clear action read real data true dist tape read action control real output true engine steer control guards actions identically true actions continually enabled 
behavior system consists clearing variables reading inputs writing outputs 
order actions executed nondeterministic 
layer drive states introduces start switch specifies order actions executed 
class data extended hold state machine state indicates actions allowed executed 
state machine states start read control default state 
switch modelled variable switch states 
state switch changed action toggle 
switch state start action start enabled 
changes state read 
fairness required respect participant class data action toggle executed environment 
extensions data new actions shown extend data state start read control switch data action toggle data true switch switch switch toggle action start data switch state start state read start car fully operational switch states read control 
likewise actions read control refined enabled correspondingly 
furthermore addition state transition statements state control state read read control respectively executed turns 
refined action read refined read real data 
switch state read state control read furthermore action clear refined change state back start switch turned 
case implicitly stops engine wheels clearing variables 
refined action named 
control properties layer control algorithms contains structures needed control movement steering 
layer imports layer basic actions defines constants extends class data introduces functions refines actions basic actions 
constants variables added due control algorithms 
variable state represents state engine 
states power moves normal needed friction necessary power movement sensed power slightly prevent slipping 
pid algorithms compute new values engine steering respectively 
function pid shown constants function pid data real return tape tape ma tape old tape pid action read refined include statements needed control algorithm comments double hyphens refined read real data guard unchanged dist state power moving elsif dist state moves state normal tape ma tape ma tape moving average tape old tape read guard action control parameters bound return values functions pid respectively 
car lost track 
situation absolute value tape greater limit treated special case guard action control 
refined action control shown refined control real output data control 
abs tape limit pid control furthermore action clear refined clear variables introduced layer 
real time properties layer periodic specifies generic periodic event takes place exactly intervals 
layer consists class action 
class periodic data contains variables type real type time synonym type real 
store period store deadline class periodic data real time periodic data action timeout participant class periodic data 
action enabled greater equal current deadline time passed 
default value variables type time action enabled initially 
action removes possible deadline stored pd set deadlines assigns new pd deadline set binary version operator 
adds deadline global set deadlines stores left operand 
deadline removed global set deadlines applying unary variable storing deadline action timeout pd periodic data pd pd remove old deadline pd pd set new timeout guard action ensures executed early deadline executed late 
implies interval executions timeout object participating pd equals pd generic periodic event instantiated inheriting class periodic data 
class 
objects belong singleton subclasses subclasses object 
subclasses singletons identify different real time requirements 
noted fairness respect participant pd required 
possible time stops action executed 
layer aperiodic specifies generic aperiodic event similarly periodic event 
layer class actions 
class aperiodic data similar periodic data 
actions ap ap timeout set remove deadlines respectively 
action ap quantified role class aperiodic data 
action sets deadlines object participating role action ap aperiodic data true ap action ap timeout quantified role class aperiodic data 
time elapsed action enabled 
executed removes deadlines stored variables objects participating role action ap timeout aperiodic data ap timeout periodic case guard action ap timeout deadlines ensure action executed exactly deadline intervals elapsed 
similar action guard expression replaced true 
executed deadlines exactly 
generic aperiodic event instantiated inheriting class aperiodic data 
class 
objects aperiodic data belong singleton subclasses 
noted actions allow set remove deadlines simultaneously imply deadlines set simultaneously removed simultaneously 
layers periodic instance aperiodic instance instantiate generic events 
layer periodic instance imports layer periodic aperiodic instance imports aperiodic 
generic periodic event instantiated introducing singleton subclass class periodic data specializing action timeout subclass class new periodic data specialized timeout timeout timeout similarly generic aperiodic event instantiated introducing singleton subclass ap class aperiodic data specializing ap ap timeout subclass 
combining specification layers layer combined specification combines functional control real time parts specification 
imports layers drive states control algorithms periodic instance aperiodic instance see 
parallel refinements actions extension classes combined automatically action read characteristics introduced layers drive states control algorithms 
furthermore clear refinements action combined automatically combination named clear 
actions read control refined way logic ensures executed turns 
objective read control execute periodically 
achieved forcing read execute periodically control directly 
actions ap timeout synchronized action read combined action named periodic read 
time action executed effect actions executed parallel deadlines stored variables objects classes ap 
synchronization done import part layer include clause include ap timeout read ap real real data periodic read ap real real data time periodic read executed deadlines set 
action control 
control remove deadline set action synchronized ap timeout include ap timeout control ap real real output data aperiodic control ap real real output data switch turned actions read control action clear remove deadline set control 
synchronized ap timeout include ap timeout clear ap data output ap data output guard non synchronized version timeout strengthened enabled periodic read aperiodic control enabled 
resulting action named mere timeout 
intuitively means car state start done periodic event happens refined mere timeout data timeout 
state start mere timeout non synchronized versions actions read control ap timeout ap set timeout clear executed guards strengthened false 
actions toggle start taken 
implementation specification implemented language 
implementation straightforward 
parts specification just copy pasted edited get code 
comments lines code implementation 
architecture program follows 
main function functions interrupt handler 
functions consists initialization function functions read odometer converter functions compute new values drive servo motors pid algorithms function clears variables 
control flows follows 
initialization program waits user switch car 
subsequently goes infinite loop wait interrupts 
interrupt occurs interrupt handler calls functions read values odometer converter 
consecutively new values drive computed 
switch interrupt occurs handler calls function clears variables 
changes specification implementation phase important details underlying architecture discovered early 
specifying system iterative process 
different aspects specification encapsulated separate layers 
specification gives example logical layers 
important characteristics specification specification composed functional control real time parts generic events easy specify generic events instantiated object oriented inheritance combination parts simple 
layered disco specification gives facile basis maintenance 
serves document done 
new features added giving new layers 
different layers just views system multi disciplinary system development possible 
example control engineer specify control related parts combined parts specification 
preservation safety properties essential feature method case 
methods real time specification contain abstractions directly relate common real time activities 
generic real time events introduced give complex real time requirements 
furthermore real time layers specified similar manner 
disco suited specifying patterns 
specification physical environment car modelled nondeterminism 
exact modelling environment involved continuous functions time describe values parameters change changed 
rigorous modelling environment possible reason properties interest 
evident disco method developed hybrid modelling involving discrete continuous behavior 
indicated theoretically natural way proceed 
acknowledgments research partly funded academy finland project 
author members disco project creative ideas constructing car 

back kurki distributed cooperation action systems 
acm transactions programming languages systems oct 

back kurki decentralization process nets centralized control 
distributed computing pp 

earlier version proceedings nd acm sigact sigops symposium principles distributed computing montreal canada aug pp 


brink van applying formal software requirements specification development control applications 
proceedings annual conference advanced school computing imaging netherlands may pp 


burns wellings hrt hood structured design method hard real time systems 
real time systems jan 

chandy misra parallel program design foundation 
addison wesley 

jacky specifying safety critical control system ieee transactions software engineering feb 

kurki syst object oriented specification reactive systems 
proceedings th international conference software engineering nice france mar pp 


ki verification reactive systems disco pvs 
fme industrial applications strengthened foundations formal methods lncs springer verlag pp 


kurki hybrid models fairness distributed clocks 
hybrid systems lncs springer verlag pp 


kurki logical layers specifications distributed objects real time 
appear computer systems science engineering 

lamport temporal logic actions 
acm transactions programming languages systems may 

formalizing design patterns 
proceedings th international conference software engineering kyoto japan april pp 


abstractions logical layers specifications reactive systems doctoral dissertation tampere university technology 

syst graphical tool specification reactive systems 
proceedings euromicro workshop real time systems paris france june pp 


software development practical approach formal methods software engineering 
addison wesley 
